
vtrModbusTCP-H723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023f18  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000113c4  080241e8  080241e8  000251e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080355ac  080355ac  000365ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080355b4  080355b4  000365b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080355b8  080355b8  000365b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000e08  24000000  080355bc  00037000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RxDescripSection 00000060  24000e08  080363c4  00037e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  24000e68  08036424  00037e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000035e4  24000ec8  08036484  00037ec8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240044ac  08036484  000384ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00037ec8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b45b  00000000  00000000  00037ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d9  00000000  00000000  00063351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b0  00000000  00000000  00066630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b43  00000000  00000000  000686e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000362c4  00000000  00000000  0006a223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025a05  00000000  00000000  000a04e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00154afe  00000000  00000000  000c5eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021a9ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a128  00000000  00000000  0021aa30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00224b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000ec8 	.word	0x24000ec8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080241c0 	.word	0x080241c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000ecc 	.word	0x24000ecc
 800030c:	080241c0 	.word	0x080241c0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <mg_random>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e01a      	b.n	8000752 <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4619      	mov	r1, r3
 8000722:	4810      	ldr	r0, [pc, #64]	@ (8000764 <mg_random+0x58>)
 8000724:	f004 fb34 	bl	8004d90 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	18d0      	adds	r0, r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3304      	adds	r3, #4
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d203      	bcs.n	8000740 <mg_random+0x34>
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	e000      	b.n	8000742 <mg_random+0x36>
 8000740:	2304      	movs	r3, #4
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	461a      	mov	r2, r3
 8000748:	f023 f81b 	bl	8023782 <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3304      	adds	r3, #4
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3e0      	bcc.n	800071c <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	24000fcc 	.word	0x24000fcc

08000768 <mg_millis>:

uint64_t mg_millis(void) {
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800076c:	f000 fde4 	bl	8001338 <HAL_GetTick>
 8000770:	4603      	mov	r3, r0
 8000772:	2200      	movs	r2, #0
 8000774:	461c      	mov	r4, r3
 8000776:	4615      	mov	r5, r2
 8000778:	4622      	mov	r2, r4
 800077a:	462b      	mov	r3, r5
}
 800077c:	4610      	mov	r0, r2
 800077e:	4619      	mov	r1, r3
 8000780:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000784 <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d002      	beq.n	800079c <_write+0x18>
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d107      	bne.n	80007ac <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <_write+0x34>)
 80007a8:	f004 fc47 	bl	800503a <HAL_UART_Transmit>
  }
  return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	24000fe0 	.word	0x24000fe0

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fd34 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f80e 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f000 f92c 	bl	8000a24 <MX_GPIO_Init>
  MX_ETH_Init();
 80007cc:	f000 f87c 	bl	80008c8 <MX_ETH_Init>
  MX_RNG_Init();
 80007d0:	f000 f8c6 	bl	8000960 <MX_RNG_Init>
  MX_USART3_UART_Init();
 80007d4:	f000 f8da 	bl	800098c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  mongoose_init();
 80007d8:	f022 fb30 	bl	8022e3c <mongoose_init>
  for (;;) {
    mongoose_poll();
 80007dc:	f022 fb90 	bl	8022f00 <mongoose_poll>
 80007e0:	e7fc      	b.n	80007dc <main+0x20>
	...

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	224c      	movs	r2, #76	@ 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f022 fe8f 	bl	8023516 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f022 fe89 	bl	8023516 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000804:	2002      	movs	r0, #2
 8000806:	f001 fcbd 	bl	8002184 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <SystemClock_Config+0xe0>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000816:	4a2b      	ldr	r2, [pc, #172]	@ (80008c4 <SystemClock_Config+0xe0>)
 8000818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800081c:	6193      	str	r3, [r2, #24]
 800081e:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <SystemClock_Config+0xe0>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800082a:	bf00      	nop
 800082c:	4b25      	ldr	r3, [pc, #148]	@ (80008c4 <SystemClock_Config+0xe0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000838:	d1f8      	bne.n	800082c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800083a:	2322      	movs	r3, #34	@ 0x22
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800083e:	2301      	movs	r3, #1
 8000840:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000842:	2340      	movs	r3, #64	@ 0x40
 8000844:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000846:	2301      	movs	r3, #1
 8000848:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800084a:	2302      	movs	r3, #2
 800084c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084e:	2300      	movs	r3, #0
 8000850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000852:	2304      	movs	r3, #4
 8000854:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000856:	230c      	movs	r3, #12
 8000858:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800085e:	2304      	movs	r3, #4
 8000860:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000862:	2302      	movs	r3, #2
 8000864:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000866:	230c      	movs	r3, #12
 8000868:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800086a:	2300      	movs	r3, #0
 800086c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fcbe 	bl	80021f8 <HAL_RCC_OscConfig>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000882:	f000 f9bd 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000886:	233f      	movs	r3, #63	@ 0x3f
 8000888:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2303      	movs	r3, #3
 800088c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000892:	2308      	movs	r3, #8
 8000894:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000896:	2340      	movs	r3, #64	@ 0x40
 8000898:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800089a:	2340      	movs	r3, #64	@ 0x40
 800089c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800089e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008a4:	2340      	movs	r3, #64	@ 0x40
 80008a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2101      	movs	r1, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 f87d 	bl	80029ac <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80008b8:	f000 f9a2 	bl	8000c00 <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3770      	adds	r7, #112	@ 0x70
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	58024800 	.word	0x58024800

080008c8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <MX_ETH_Init+0x80>)
 80008ce:	4a1f      	ldr	r2, [pc, #124]	@ (800094c <MX_ETH_Init+0x84>)
 80008d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000950 <MX_ETH_Init+0x88>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_ETH_Init+0x88>)
 80008da:	2280      	movs	r2, #128	@ 0x80
 80008dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008de:	4b1c      	ldr	r3, [pc, #112]	@ (8000950 <MX_ETH_Init+0x88>)
 80008e0:	22e1      	movs	r2, #225	@ 0xe1
 80008e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_ETH_Init+0x88>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ea:	4b19      	ldr	r3, [pc, #100]	@ (8000950 <MX_ETH_Init+0x88>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008f0:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <MX_ETH_Init+0x88>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_ETH_Init+0x80>)
 80008f8:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_ETH_Init+0x88>)
 80008fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_ETH_Init+0x80>)
 80008fe:	2201      	movs	r2, #1
 8000900:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_ETH_Init+0x80>)
 8000904:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <MX_ETH_Init+0x8c>)
 8000906:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_ETH_Init+0x80>)
 800090a:	4a13      	ldr	r2, [pc, #76]	@ (8000958 <MX_ETH_Init+0x90>)
 800090c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800090e:	4b0e      	ldr	r3, [pc, #56]	@ (8000948 <MX_ETH_Init+0x80>)
 8000910:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000914:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000916:	480c      	ldr	r0, [pc, #48]	@ (8000948 <MX_ETH_Init+0x80>)
 8000918:	f000 fe3e 	bl	8001598 <HAL_ETH_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000922:	f000 f96d 	bl	8000c00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000926:	2238      	movs	r2, #56	@ 0x38
 8000928:	2100      	movs	r1, #0
 800092a:	480c      	ldr	r0, [pc, #48]	@ (800095c <MX_ETH_Init+0x94>)
 800092c:	f022 fdf3 	bl	8023516 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000930:	4b0a      	ldr	r3, [pc, #40]	@ (800095c <MX_ETH_Init+0x94>)
 8000932:	2221      	movs	r2, #33	@ 0x21
 8000934:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <MX_ETH_Init+0x94>)
 8000938:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800093c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800093e:	4b07      	ldr	r3, [pc, #28]	@ (800095c <MX_ETH_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	24000f1c 	.word	0x24000f1c
 800094c:	40028000 	.word	0x40028000
 8000950:	24001074 	.word	0x24001074
 8000954:	24000e68 	.word	0x24000e68
 8000958:	24000e08 	.word	0x24000e08
 800095c:	24000ee4 	.word	0x24000ee4

08000960 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000964:	4b07      	ldr	r3, [pc, #28]	@ (8000984 <MX_RNG_Init+0x24>)
 8000966:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <MX_RNG_Init+0x28>)
 8000968:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_RNG_Init+0x24>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000970:	4804      	ldr	r0, [pc, #16]	@ (8000984 <MX_RNG_Init+0x24>)
 8000972:	f004 f969 	bl	8004c48 <HAL_RNG_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800097c:	f000 f940 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	24000fcc 	.word	0x24000fcc
 8000988:	48021800 	.word	0x48021800

0800098c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000990:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 8000992:	4a23      	ldr	r2, [pc, #140]	@ (8000a20 <MX_USART3_UART_Init+0x94>)
 8000994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000996:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ce:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009d4:	4811      	ldr	r0, [pc, #68]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009d6:	f004 fae0 	bl	8004f9a <HAL_UART_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009e0:	f000 f90e 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009e8:	f005 fc7b 	bl	80062e2 <HAL_UARTEx_SetTxFifoThreshold>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009f2:	f000 f905 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4808      	ldr	r0, [pc, #32]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 80009fa:	f005 fcb0 	bl	800635e <HAL_UARTEx_SetRxFifoThreshold>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a04:	f000 f8fc 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	@ (8000a1c <MX_USART3_UART_Init+0x90>)
 8000a0a:	f005 fc31 	bl	8006270 <HAL_UARTEx_DisableFifoMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a14:	f000 f8f4 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	24000fe0 	.word	0x24000fe0
 8000a20:	40004800 	.word	0x40004800

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	@ 0x30
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b6a      	ldr	r3, [pc, #424]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a40:	4a68      	ldr	r2, [pc, #416]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a4a:	4b66      	ldr	r3, [pc, #408]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
 8000a56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a58:	4b62      	ldr	r3, [pc, #392]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5e:	4a61      	ldr	r2, [pc, #388]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a68:	4b5e      	ldr	r3, [pc, #376]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b5b      	ldr	r3, [pc, #364]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7c:	4a59      	ldr	r2, [pc, #356]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a86:	4b57      	ldr	r3, [pc, #348]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b53      	ldr	r3, [pc, #332]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a52      	ldr	r2, [pc, #328]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b4f      	ldr	r3, [pc, #316]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b48      	ldr	r3, [pc, #288]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0308 	and.w	r3, r3, #8
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad0:	4b44      	ldr	r3, [pc, #272]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	4a43      	ldr	r2, [pc, #268]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae0:	4b40      	ldr	r3, [pc, #256]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aee:	4b3d      	ldr	r3, [pc, #244]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af4:	4a3b      	ldr	r2, [pc, #236]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000afe:	4b39      	ldr	r3, [pc, #228]	@ (8000be4 <MX_GPIO_Init+0x1c0>)
 8000b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b12:	4835      	ldr	r0, [pc, #212]	@ (8000be8 <MX_GPIO_Init+0x1c4>)
 8000b14:	f001 fb1c 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b1e:	4833      	ldr	r0, [pc, #204]	@ (8000bec <MX_GPIO_Init+0x1c8>)
 8000b20:	f001 fb16 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2102      	movs	r1, #2
 8000b28:	4831      	ldr	r0, [pc, #196]	@ (8000bf0 <MX_GPIO_Init+0x1cc>)
 8000b2a:	f001 fb11 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	482c      	ldr	r0, [pc, #176]	@ (8000bf4 <MX_GPIO_Init+0x1d0>)
 8000b44:	f001 f95c 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000b48:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4821      	ldr	r0, [pc, #132]	@ (8000be8 <MX_GPIO_Init+0x1c4>)
 8000b62:	f001 f94d 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 031c 	add.w	r3, r7, #28
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	481b      	ldr	r0, [pc, #108]	@ (8000bec <MX_GPIO_Init+0x1c8>)
 8000b80:	f001 f93e 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b84:	2380      	movs	r3, #128	@ 0x80
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4817      	ldr	r0, [pc, #92]	@ (8000bf8 <MX_GPIO_Init+0x1d4>)
 8000b9a:	f001 f931 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4810      	ldr	r0, [pc, #64]	@ (8000bfc <MX_GPIO_Init+0x1d8>)
 8000bbc:	f001 f920 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	@ (8000bf0 <MX_GPIO_Init+0x1cc>)
 8000bd8:	f001 f912 	bl	8001e00 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3730      	adds	r7, #48	@ 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	58024400 	.word	0x58024400
 8000be8:	58020400 	.word	0x58020400
 8000bec:	58020c00 	.word	0x58020c00
 8000bf0:	58021000 	.word	0x58021000
 8000bf4:	58020800 	.word	0x58020800
 8000bf8:	58021800 	.word	0x58021800
 8000bfc:	58020000 	.word	0x58020000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_MspInit+0x30>)
 8000c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c18:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x30>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x30>)
 8000c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	58024400 	.word	0x58024400

08000c40 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a5d      	ldr	r2, [pc, #372]	@ (8000dd4 <HAL_ETH_MspInit+0x194>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	f040 80b3 	bne.w	8000dca <HAL_ETH_MspInit+0x18a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c64:	4b5c      	ldr	r3, [pc, #368]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000c66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c6a:	4a5b      	ldr	r2, [pc, #364]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c74:	4b58      	ldr	r3, [pc, #352]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000c76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c7e:	623b      	str	r3, [r7, #32]
 8000c80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c82:	4b55      	ldr	r3, [pc, #340]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c88:	4a53      	ldr	r2, [pc, #332]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c92:	4b51      	ldr	r3, [pc, #324]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ca6:	4a4c      	ldr	r2, [pc, #304]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cb0:	4b49      	ldr	r3, [pc, #292]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b46      	ldr	r3, [pc, #280]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	4a44      	ldr	r2, [pc, #272]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cce:	4b42      	ldr	r3, [pc, #264]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b3e      	ldr	r3, [pc, #248]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cec:	4b3a      	ldr	r3, [pc, #232]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b37      	ldr	r3, [pc, #220]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	4a35      	ldr	r2, [pc, #212]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0a:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d18:	4b2f      	ldr	r3, [pc, #188]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d28:	4b2b      	ldr	r3, [pc, #172]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d36:	2332      	movs	r3, #50	@ 0x32
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d46:	230b      	movs	r3, #11
 8000d48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4822      	ldr	r0, [pc, #136]	@ (8000ddc <HAL_ETH_MspInit+0x19c>)
 8000d52:	f001 f855 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d56:	2386      	movs	r3, #134	@ 0x86
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d66:	230b      	movs	r3, #11
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481b      	ldr	r0, [pc, #108]	@ (8000de0 <HAL_ETH_MspInit+0x1a0>)
 8000d72:	f001 f845 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4814      	ldr	r0, [pc, #80]	@ (8000de4 <HAL_ETH_MspInit+0x1a4>)
 8000d94:	f001 f834 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d98:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000daa:	230b      	movs	r3, #11
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <HAL_ETH_MspInit+0x1a8>)
 8000db6:	f001 f823 	bl	8001e00 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	203d      	movs	r0, #61	@ 0x3d
 8000dc0:	f000 fbb5 	bl	800152e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000dc4:	203d      	movs	r0, #61	@ 0x3d
 8000dc6:	f000 fbcc 	bl	8001562 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000dca:	bf00      	nop
 8000dcc:	3738      	adds	r7, #56	@ 0x38
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40028000 	.word	0x40028000
 8000dd8:	58024400 	.word	0x58024400
 8000ddc:	58020800 	.word	0x58020800
 8000de0:	58020000 	.word	0x58020000
 8000de4:	58020400 	.word	0x58020400
 8000de8:	58021800 	.word	0x58021800

08000dec <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b0b2      	sub	sp, #200	@ 0xc8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	22b8      	movs	r2, #184	@ 0xb8
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f022 fb8a 	bl	8023516 <memset>
  if(hrng->Instance==RNG)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <HAL_RNG_MspInit+0x6c>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d121      	bne.n	8000e50 <HAL_RNG_MspInit+0x64>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000e0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e1e:	f107 0310 	add.w	r3, r7, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 f94e 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8000e2e:	f7ff fee7 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <HAL_RNG_MspInit+0x70>)
 8000e34:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000e38:	4a08      	ldr	r2, [pc, #32]	@ (8000e5c <HAL_RNG_MspInit+0x70>)
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e3e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_RNG_MspInit+0x70>)
 8000e44:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000e50:	bf00      	nop
 8000e52:	37c8      	adds	r7, #200	@ 0xc8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	48021800 	.word	0x48021800
 8000e5c:	58024400 	.word	0x58024400

08000e60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0b8      	sub	sp, #224	@ 0xe0
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	22b8      	movs	r2, #184	@ 0xb8
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f022 fb48 	bl	8023516 <memset>
  if(huart->Instance==USART3)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a27      	ldr	r2, [pc, #156]	@ (8000f28 <HAL_UART_MspInit+0xc8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d146      	bne.n	8000f1e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e90:	f04f 0202 	mov.w	r2, #2
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 f90c 	bl	80030c4 <HAL_RCCEx_PeriphCLKConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eb2:	f7ff fea5 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <HAL_UART_MspInit+0xcc>)
 8000eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f2c <HAL_UART_MspInit+0xcc>)
 8000ebe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <HAL_UART_MspInit+0xcc>)
 8000ec8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ecc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <HAL_UART_MspInit+0xcc>)
 8000ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eda:	4a14      	ldr	r2, [pc, #80]	@ (8000f2c <HAL_UART_MspInit+0xcc>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <HAL_UART_MspInit+0xcc>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000ef2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ef6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <HAL_UART_MspInit+0xd0>)
 8000f1a:	f000 ff71 	bl	8001e00 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f1e:	bf00      	nop
 8000f20:	37e0      	adds	r7, #224	@ 0xe0
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40004800 	.word	0x40004800
 8000f2c:	58024400 	.word	0x58024400
 8000f30:	58020c00 	.word	0x58020c00

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f9c1 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  return 1;
 8000f96:	2301      	movs	r3, #1
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <_kill>:

int _kill(int pid, int sig)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
 8000faa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fac:	f022 fbb4 	bl	8023718 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2216      	movs	r2, #22
 8000fb4:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_exit>:

void _exit (int status)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fca:	f04f 31ff 	mov.w	r1, #4294967295
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ffe7 	bl	8000fa2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <_exit+0x12>

08000fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
 8000fe8:	e00a      	b.n	8001000 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fea:	f3af 8000 	nop.w
 8000fee:	4601      	mov	r1, r0
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	1c5a      	adds	r2, r3, #1
 8000ff4:	60ba      	str	r2, [r7, #8]
 8000ff6:	b2ca      	uxtb	r2, r1
 8000ff8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf0      	blt.n	8000fea <_read+0x12>
  }

  return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800103a:	605a      	str	r2, [r3, #4]
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_isatty>:

int _isatty(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f022 fb34 	bl	8023718 <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24050000 	.word	0x24050000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	2400107c 	.word	0x2400107c
 80010e4:	240044b0 	.word	0x240044b0

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010ec:	4b32      	ldr	r3, [pc, #200]	@ (80011b8 <SystemInit+0xd0>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010f2:	4a31      	ldr	r2, [pc, #196]	@ (80011b8 <SystemInit+0xd0>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010fc:	4b2f      	ldr	r3, [pc, #188]	@ (80011bc <SystemInit+0xd4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	2b06      	cmp	r3, #6
 8001106:	d807      	bhi.n	8001118 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001108:	4b2c      	ldr	r3, [pc, #176]	@ (80011bc <SystemInit+0xd4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 030f 	bic.w	r3, r3, #15
 8001110:	4a2a      	ldr	r2, [pc, #168]	@ (80011bc <SystemInit+0xd4>)
 8001112:	f043 0307 	orr.w	r3, r3, #7
 8001116:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001118:	4b29      	ldr	r3, [pc, #164]	@ (80011c0 <SystemInit+0xd8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a28      	ldr	r2, [pc, #160]	@ (80011c0 <SystemInit+0xd8>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001124:	4b26      	ldr	r3, [pc, #152]	@ (80011c0 <SystemInit+0xd8>)
 8001126:	2200      	movs	r2, #0
 8001128:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800112a:	4b25      	ldr	r3, [pc, #148]	@ (80011c0 <SystemInit+0xd8>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4924      	ldr	r1, [pc, #144]	@ (80011c0 <SystemInit+0xd8>)
 8001130:	4b24      	ldr	r3, [pc, #144]	@ (80011c4 <SystemInit+0xdc>)
 8001132:	4013      	ands	r3, r2
 8001134:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001136:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <SystemInit+0xd4>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0308 	and.w	r3, r3, #8
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001142:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <SystemInit+0xd4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 030f 	bic.w	r3, r3, #15
 800114a:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <SystemInit+0xd4>)
 800114c:	f043 0307 	orr.w	r3, r3, #7
 8001150:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001152:	4b1b      	ldr	r3, [pc, #108]	@ (80011c0 <SystemInit+0xd8>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001158:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <SystemInit+0xd8>)
 800115a:	2200      	movs	r2, #0
 800115c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800115e:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <SystemInit+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <SystemInit+0xd8>)
 8001166:	4a18      	ldr	r2, [pc, #96]	@ (80011c8 <SystemInit+0xe0>)
 8001168:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <SystemInit+0xd8>)
 800116c:	4a17      	ldr	r2, [pc, #92]	@ (80011cc <SystemInit+0xe4>)
 800116e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <SystemInit+0xd8>)
 8001172:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <SystemInit+0xe8>)
 8001174:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001176:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <SystemInit+0xd8>)
 8001178:	2200      	movs	r2, #0
 800117a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800117c:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <SystemInit+0xd8>)
 800117e:	4a14      	ldr	r2, [pc, #80]	@ (80011d0 <SystemInit+0xe8>)
 8001180:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001182:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <SystemInit+0xd8>)
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001188:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <SystemInit+0xd8>)
 800118a:	4a11      	ldr	r2, [pc, #68]	@ (80011d0 <SystemInit+0xe8>)
 800118c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800118e:	4b0c      	ldr	r3, [pc, #48]	@ (80011c0 <SystemInit+0xd8>)
 8001190:	2200      	movs	r2, #0
 8001192:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <SystemInit+0xd8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a09      	ldr	r2, [pc, #36]	@ (80011c0 <SystemInit+0xd8>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <SystemInit+0xd8>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011a6:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <SystemInit+0xec>)
 80011a8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011ac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011ae:	bf00      	nop
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	52002000 	.word	0x52002000
 80011c0:	58024400 	.word	0x58024400
 80011c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80011c8:	02020200 	.word	0x02020200
 80011cc:	01ff0000 	.word	0x01ff0000
 80011d0:	01010280 	.word	0x01010280
 80011d4:	52004000 	.word	0x52004000

080011d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001210 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011dc:	f7ff ff84 	bl	80010e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e0:	480c      	ldr	r0, [pc, #48]	@ (8001214 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011e2:	490d      	ldr	r1, [pc, #52]	@ (8001218 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e4:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001224 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001206:	f022 fa8d 	bl	8023724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120a:	f7ff fad7 	bl	80007bc <main>
  bx  lr
 800120e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001210:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001214:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001218:	24000e08 	.word	0x24000e08
  ldr r2, =_sidata
 800121c:	080355bc 	.word	0x080355bc
  ldr r2, =_sbss
 8001220:	24000ec8 	.word	0x24000ec8
  ldr r4, =_ebss
 8001224:	240044ac 	.word	0x240044ac

08001228 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC3_IRQHandler>
	...

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001232:	2003      	movs	r0, #3
 8001234:	f000 f970 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001238:	f001 fd6e 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 800123c:	4602      	mov	r2, r0
 800123e:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_Init+0x68>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	4913      	ldr	r1, [pc, #76]	@ (8001298 <HAL_Init+0x6c>)
 800124a:	5ccb      	ldrb	r3, [r1, r3]
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_Init+0x68>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	4a0e      	ldr	r2, [pc, #56]	@ (8001298 <HAL_Init+0x6c>)
 8001260:	5cd3      	ldrb	r3, [r2, r3]
 8001262:	f003 031f 	and.w	r3, r3, #31
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <HAL_Init+0x70>)
 800126e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001270:	4a0b      	ldr	r2, [pc, #44]	@ (80012a0 <HAL_Init+0x74>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f814 	bl	80012a4 <HAL_InitTick>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e002      	b.n	800128c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001286:	f7ff fcc1 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	58024400 	.word	0x58024400
 8001298:	080278a4 	.word	0x080278a4
 800129c:	24000004 	.word	0x24000004
 80012a0:	24000000 	.word	0x24000000

080012a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_InitTick+0x60>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e021      	b.n	80012fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <HAL_InitTick+0x64>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <HAL_InitTick+0x60>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f955 	bl	800157e <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 f91f 	bl	800152e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	@ (800130c <HAL_InitTick+0x68>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2400000c 	.word	0x2400000c
 8001308:	24000000 	.word	0x24000000
 800130c:	24000008 	.word	0x24000008

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	@ (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	2400000c 	.word	0x2400000c
 8001334:	24001080 	.word	0x24001080

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	@ (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	24001080 	.word	0x24001080

08001350 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001360:	4904      	ldr	r1, [pc, #16]	@ (8001374 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	58000400 	.word	0x58000400

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <__NVIC_SetPriorityGrouping+0x40>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013a0:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <__NVIC_SetPriorityGrouping+0x40>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00
 80013bc:	05fa0000 	.word	0x05fa0000

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4907      	ldr	r1, [pc, #28]	@ (8001414 <__NVIC_EnableIRQ+0x38>)
 80013f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	@ (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	@ (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	@ 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	@ 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
	...

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e4:	d301      	bcc.n	80014ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00f      	b.n	800150a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <SysTick_Config+0x40>)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f2:	210f      	movs	r1, #15
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f7ff ff8e 	bl	8001418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <SysTick_Config+0x40>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001502:	4b04      	ldr	r3, [pc, #16]	@ (8001514 <SysTick_Config+0x40>)
 8001504:	2207      	movs	r2, #7
 8001506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	e000e010 	.word	0xe000e010

08001518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff29 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	b086      	sub	sp, #24
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800153c:	f7ff ff40 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 8001540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6978      	ldr	r0, [r7, #20]
 8001548:	f7ff ff90 	bl	800146c <NVIC_EncodePriority>
 800154c:	4602      	mov	r2, r0
 800154e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001552:	4611      	mov	r1, r2
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff5f 	bl	8001418 <__NVIC_SetPriority>
}
 800155a:	bf00      	nop
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	4603      	mov	r3, r0
 800156a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff33 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff ffa4 	bl	80014d4 <SysTick_Config>
 800158c:	4603      	mov	r3, r0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e3      	b.n	8001772 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d106      	bne.n	80015c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2220      	movs	r2, #32
 80015b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fb3f 	bl	8000c40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	4b6e      	ldr	r3, [pc, #440]	@ (800177c <HAL_ETH_Init+0x1e4>)
 80015c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c8:	4a6c      	ldr	r2, [pc, #432]	@ (800177c <HAL_ETH_Init+0x1e4>)
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015d2:	4b6a      	ldr	r3, [pc, #424]	@ (800177c <HAL_ETH_Init+0x1e4>)
 80015d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7a1b      	ldrb	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff feb1 	bl	8001350 <HAL_SYSCFG_ETHInterfaceSelect>
 80015ee:	e003      	b.n	80015f8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015f0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80015f4:	f7ff feac 	bl	8001350 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015f8:	4b61      	ldr	r3, [pc, #388]	@ (8001780 <HAL_ETH_Init+0x1e8>)
 80015fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001612:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001614:	f7ff fe90 	bl	8001338 <HAL_GetTick>
 8001618:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800161a:	e011      	b.n	8001640 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800161c:	f7ff fe8c 	bl	8001338 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800162a:	d909      	bls.n	8001640 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2204      	movs	r2, #4
 8001630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	22e0      	movs	r2, #224	@ 0xe0
 8001638:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e098      	b.n	8001772 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1e4      	bne.n	800161c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f89e 	bl	8001794 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001658:	f001 fcd8 	bl	800300c <HAL_RCC_GetHCLKFreq>
 800165c:	4603      	mov	r3, r0
 800165e:	4a49      	ldr	r2, [pc, #292]	@ (8001784 <HAL_ETH_Init+0x1ec>)
 8001660:	fba2 2303 	umull	r2, r3, r2, r3
 8001664:	0c9a      	lsrs	r2, r3, #18
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3a01      	subs	r2, #1
 800166c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fa81 	bl	8001b78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800167e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001682:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800168e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001692:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d009      	beq.n	80016b6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	22e0      	movs	r2, #224	@ 0xe0
 80016ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e05d      	b.n	8001772 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016be:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80016c2:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <HAL_ETH_Init+0x1f0>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6952      	ldr	r2, [r2, #20]
 80016ca:	0051      	lsls	r1, r2, #1
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	430b      	orrs	r3, r1
 80016d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016d6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fae9 	bl	8001cb2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f000 fb2f 	bl	8001d44 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	3305      	adds	r3, #5
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	021a      	lsls	r2, r3, #8
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	3304      	adds	r3, #4
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4619      	mov	r1, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	3303      	adds	r3, #3
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	061a      	lsls	r2, r3, #24
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	3302      	adds	r3, #2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	041b      	lsls	r3, r3, #16
 8001718:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001724:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001732:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001734:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_ETH_Init+0x1f4>)
 8001746:	430b      	orrs	r3, r1
 8001748:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <HAL_ETH_Init+0x1f8>)
 800175a:	430b      	orrs	r3, r1
 800175c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2210      	movs	r2, #16
 800176c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	58024400 	.word	0x58024400
 8001780:	58000400 	.word	0x58000400
 8001784:	431bde83 	.word	0x431bde83
 8001788:	ffff8001 	.word	0xffff8001
 800178c:	0c020060 	.word	0x0c020060
 8001790:	0c20c000 	.word	0x0c20c000

08001794 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017ae:	f001 fc2d 	bl	800300c <HAL_RCC_GetHCLKFreq>
 80017b2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001820 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d804      	bhi.n	80017c6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	e022      	b.n	800180c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	4a16      	ldr	r2, [pc, #88]	@ (8001824 <HAL_ETH_SetMDIOClockRange+0x90>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d204      	bcs.n	80017d8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e019      	b.n	800180c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <HAL_ETH_SetMDIOClockRange+0x94>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d915      	bls.n	800180c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <HAL_ETH_SetMDIOClockRange+0x98>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d804      	bhi.n	80017f2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e00c      	b.n	800180c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001830 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d804      	bhi.n	8001804 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e003      	b.n	800180c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800180a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	02160ebf 	.word	0x02160ebf
 8001824:	03938700 	.word	0x03938700
 8001828:	05f5e0ff 	.word	0x05f5e0ff
 800182c:	08f0d17f 	.word	0x08f0d17f
 8001830:	0ee6b27f 	.word	0x0ee6b27f

08001834 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	791b      	ldrb	r3, [r3, #4]
 800184c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7b1b      	ldrb	r3, [r3, #12]
 8001854:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	7b5b      	ldrb	r3, [r3, #13]
 800185c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800185e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	7b9b      	ldrb	r3, [r3, #14]
 8001864:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	7bdb      	ldrb	r3, [r3, #15]
 800186c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800186e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	7c12      	ldrb	r2, [r2, #16]
 8001874:	2a00      	cmp	r2, #0
 8001876:	d102      	bne.n	800187e <ETH_SetMACConfig+0x4a>
 8001878:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800187c:	e000      	b.n	8001880 <ETH_SetMACConfig+0x4c>
 800187e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001880:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	7c52      	ldrb	r2, [r2, #17]
 8001886:	2a00      	cmp	r2, #0
 8001888:	d102      	bne.n	8001890 <ETH_SetMACConfig+0x5c>
 800188a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800188e:	e000      	b.n	8001892 <ETH_SetMACConfig+0x5e>
 8001890:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001892:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	7c9b      	ldrb	r3, [r3, #18]
 8001898:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800189a:	431a      	orrs	r2, r3
               macconf->Speed |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018a0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7f1b      	ldrb	r3, [r3, #28]
 80018ac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7f5b      	ldrb	r3, [r3, #29]
 80018b4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	7f92      	ldrb	r2, [r2, #30]
 80018bc:	2a00      	cmp	r2, #0
 80018be:	d102      	bne.n	80018c6 <ETH_SetMACConfig+0x92>
 80018c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c4:	e000      	b.n	80018c8 <ETH_SetMACConfig+0x94>
 80018c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	7fdb      	ldrb	r3, [r3, #31]
 80018ce:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018d8:	2a00      	cmp	r2, #0
 80018da:	d102      	bne.n	80018e2 <ETH_SetMACConfig+0xae>
 80018dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018e0:	e000      	b.n	80018e4 <ETH_SetMACConfig+0xb0>
 80018e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018e4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80018f2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018f4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b56      	ldr	r3, [pc, #344]	@ (8001a60 <ETH_SetMACConfig+0x22c>)
 8001906:	4013      	ands	r3, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	68f9      	ldr	r1, [r7, #12]
 800190e:	430b      	orrs	r3, r1
 8001910:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001916:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800191e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001920:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001928:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800192a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001932:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001934:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800193c:	2a00      	cmp	r2, #0
 800193e:	d102      	bne.n	8001946 <ETH_SetMACConfig+0x112>
 8001940:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001944:	e000      	b.n	8001948 <ETH_SetMACConfig+0x114>
 8001946:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001948:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4b42      	ldr	r3, [pc, #264]	@ (8001a64 <ETH_SetMACConfig+0x230>)
 800195a:	4013      	ands	r3, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	430b      	orrs	r3, r1
 8001964:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800196c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001972:	4313      	orrs	r3, r2
 8001974:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68da      	ldr	r2, [r3, #12]
 800197c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a68 <ETH_SetMACConfig+0x234>)
 800197e:	4013      	ands	r3, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	68f9      	ldr	r1, [r7, #12]
 8001986:	430b      	orrs	r3, r1
 8001988:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001990:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001996:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800199e:	2a00      	cmp	r2, #0
 80019a0:	d101      	bne.n	80019a6 <ETH_SetMACConfig+0x172>
 80019a2:	2280      	movs	r2, #128	@ 0x80
 80019a4:	e000      	b.n	80019a8 <ETH_SetMACConfig+0x174>
 80019a6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019a8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019ba:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80019be:	4013      	ands	r3, r2
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	68f9      	ldr	r1, [r7, #12]
 80019c6:	430b      	orrs	r3, r1
 80019c8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80019d0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80019d8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	f023 0103 	bic.w	r1, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80019fe:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	d101      	bne.n	8001a22 <ETH_SetMACConfig+0x1ee>
 8001a1e:	2240      	movs	r2, #64	@ 0x40
 8001a20:	e000      	b.n	8001a24 <ETH_SetMACConfig+0x1f0>
 8001a22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001a36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a44:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	00048083 	.word	0x00048083
 8001a64:	c0f88000 	.word	0xc0f88000
 8001a68:	fffffef0 	.word	0xfffffef0

08001a6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b38      	ldr	r3, [pc, #224]	@ (8001b64 <ETH_SetDMAConfig+0xf8>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	6811      	ldr	r1, [r2, #0]
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a92:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	791b      	ldrb	r3, [r3, #4]
 8001a98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	7b1b      	ldrb	r3, [r3, #12]
 8001aa4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <ETH_SetDMAConfig+0xfc>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ac4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	7b5b      	ldrb	r3, [r3, #13]
 8001aca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001adc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001ae0:	4b22      	ldr	r3, [pc, #136]	@ (8001b6c <ETH_SetDMAConfig+0x100>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001af0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	7d1b      	ldrb	r3, [r3, #20]
 8001afc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001afe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	7f5b      	ldrb	r3, [r3, #29]
 8001b04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b12:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b16:	4b16      	ldr	r3, [pc, #88]	@ (8001b70 <ETH_SetDMAConfig+0x104>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	68f9      	ldr	r1, [r7, #12]
 8001b20:	430b      	orrs	r3, r1
 8001b22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b26:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	7f1b      	ldrb	r3, [r3, #28]
 8001b2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b40:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <ETH_SetDMAConfig+0x108>)
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b54:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	ffff87fd 	.word	0xffff87fd
 8001b68:	ffff2ffe 	.word	0xffff2ffe
 8001b6c:	fffec000 	.word	0xfffec000
 8001b70:	ffc0efef 	.word	0xffc0efef
 8001b74:	7fc0ffff 	.word	0x7fc0ffff

08001b78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0a4      	sub	sp, #144	@ 0x90
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b80:	2301      	movs	r3, #1
 8001b82:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b86:	2300      	movs	r3, #0
 8001b88:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b96:	2301      	movs	r3, #1
 8001b98:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bb8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001bd0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001bd4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001be0:	2301      	movs	r3, #1
 8001be2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c10:	2320      	movs	r3, #32
 8001c12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c16:	2301      	movs	r3, #1
 8001c18:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c22:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c2c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c52:	2300      	movs	r3, #0
 8001c54:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fde6 	bl	8001834 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c82:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c98:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001c9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f7ff fee1 	bl	8001a6c <ETH_SetDMAConfig>
}
 8001caa:	bf00      	nop
 8001cac:	3790      	adds	r7, #144	@ 0x90
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e01d      	b.n	8001cfc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	3206      	adds	r2, #6
 8001cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d9de      	bls.n	8001cc0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d10:	461a      	mov	r2, r3
 8001d12:	2303      	movs	r3, #3
 8001d14:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d24:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d34:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	e023      	b.n	8001d9a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6919      	ldr	r1, [r3, #16]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	440b      	add	r3, r1
 8001d62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2200      	movs	r2, #0
 8001d86:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	3212      	adds	r2, #18
 8001d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3301      	adds	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d9d8      	bls.n	8001d52 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	2303      	movs	r3, #3
 8001dca:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dda:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dee:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b089      	sub	sp, #36	@ 0x24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e0e:	4b86      	ldr	r3, [pc, #536]	@ (8002028 <HAL_GPIO_Init+0x228>)
 8001e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e12:	e18c      	b.n	800212e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	4013      	ands	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 817e 	beq.w	8002128 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d005      	beq.n	8001e44 <HAL_GPIO_Init+0x44>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d130      	bne.n	8001ea6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	091b      	lsrs	r3, r3, #4
 8001e90:	f003 0201 	and.w	r2, r3, #1
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d017      	beq.n	8001ee2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d123      	bne.n	8001f36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f003 0307 	and.w	r3, r3, #7
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	08da      	lsrs	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3208      	adds	r2, #8
 8001f30:	69b9      	ldr	r1, [r7, #24]
 8001f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	2203      	movs	r2, #3
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0203 	and.w	r2, r3, #3
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80d8 	beq.w	8002128 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f78:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <HAL_GPIO_Init+0x22c>)
 8001f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f7e:	4a2b      	ldr	r2, [pc, #172]	@ (800202c <HAL_GPIO_Init+0x22c>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f88:	4b28      	ldr	r3, [pc, #160]	@ (800202c <HAL_GPIO_Init+0x22c>)
 8001f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f96:	4a26      	ldr	r2, [pc, #152]	@ (8002030 <HAL_GPIO_Init+0x230>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	220f      	movs	r2, #15
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1d      	ldr	r2, [pc, #116]	@ (8002034 <HAL_GPIO_Init+0x234>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d04a      	beq.n	8002058 <HAL_GPIO_Init+0x258>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002038 <HAL_GPIO_Init+0x238>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d02b      	beq.n	8002022 <HAL_GPIO_Init+0x222>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800203c <HAL_GPIO_Init+0x23c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d025      	beq.n	800201e <HAL_GPIO_Init+0x21e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1a      	ldr	r2, [pc, #104]	@ (8002040 <HAL_GPIO_Init+0x240>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d01f      	beq.n	800201a <HAL_GPIO_Init+0x21a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	@ (8002044 <HAL_GPIO_Init+0x244>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d019      	beq.n	8002016 <HAL_GPIO_Init+0x216>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a18      	ldr	r2, [pc, #96]	@ (8002048 <HAL_GPIO_Init+0x248>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d013      	beq.n	8002012 <HAL_GPIO_Init+0x212>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a17      	ldr	r2, [pc, #92]	@ (800204c <HAL_GPIO_Init+0x24c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d00d      	beq.n	800200e <HAL_GPIO_Init+0x20e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a16      	ldr	r2, [pc, #88]	@ (8002050 <HAL_GPIO_Init+0x250>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d007      	beq.n	800200a <HAL_GPIO_Init+0x20a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a15      	ldr	r2, [pc, #84]	@ (8002054 <HAL_GPIO_Init+0x254>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d101      	bne.n	8002006 <HAL_GPIO_Init+0x206>
 8002002:	2309      	movs	r3, #9
 8002004:	e029      	b.n	800205a <HAL_GPIO_Init+0x25a>
 8002006:	230a      	movs	r3, #10
 8002008:	e027      	b.n	800205a <HAL_GPIO_Init+0x25a>
 800200a:	2307      	movs	r3, #7
 800200c:	e025      	b.n	800205a <HAL_GPIO_Init+0x25a>
 800200e:	2306      	movs	r3, #6
 8002010:	e023      	b.n	800205a <HAL_GPIO_Init+0x25a>
 8002012:	2305      	movs	r3, #5
 8002014:	e021      	b.n	800205a <HAL_GPIO_Init+0x25a>
 8002016:	2304      	movs	r3, #4
 8002018:	e01f      	b.n	800205a <HAL_GPIO_Init+0x25a>
 800201a:	2303      	movs	r3, #3
 800201c:	e01d      	b.n	800205a <HAL_GPIO_Init+0x25a>
 800201e:	2302      	movs	r3, #2
 8002020:	e01b      	b.n	800205a <HAL_GPIO_Init+0x25a>
 8002022:	2301      	movs	r3, #1
 8002024:	e019      	b.n	800205a <HAL_GPIO_Init+0x25a>
 8002026:	bf00      	nop
 8002028:	58000080 	.word	0x58000080
 800202c:	58024400 	.word	0x58024400
 8002030:	58000400 	.word	0x58000400
 8002034:	58020000 	.word	0x58020000
 8002038:	58020400 	.word	0x58020400
 800203c:	58020800 	.word	0x58020800
 8002040:	58020c00 	.word	0x58020c00
 8002044:	58021000 	.word	0x58021000
 8002048:	58021400 	.word	0x58021400
 800204c:	58021800 	.word	0x58021800
 8002050:	58021c00 	.word	0x58021c00
 8002054:	58022400 	.word	0x58022400
 8002058:	2300      	movs	r3, #0
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206a:	4938      	ldr	r1, [pc, #224]	@ (800214c <HAL_GPIO_Init+0x34c>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800209e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	f47f ae6b 	bne.w	8001e14 <HAL_GPIO_Init+0x14>
  }
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3724      	adds	r7, #36	@ 0x24
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	58000400 	.word	0x58000400

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
	...

08002184 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800218c:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_PWREx_ConfigSupply+0x70>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b04      	cmp	r3, #4
 8002196:	d00a      	beq.n	80021ae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002198:	4b16      	ldr	r3, [pc, #88]	@ (80021f4 <HAL_PWREx_ConfigSupply+0x70>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d001      	beq.n	80021aa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e01f      	b.n	80021ea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	e01d      	b.n	80021ea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <HAL_PWREx_ConfigSupply+0x70>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	490f      	ldr	r1, [pc, #60]	@ (80021f4 <HAL_PWREx_ConfigSupply+0x70>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021be:	f7ff f8bb 	bl	8001338 <HAL_GetTick>
 80021c2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021c4:	e009      	b.n	80021da <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021c6:	f7ff f8b7 	bl	8001338 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021d4:	d901      	bls.n	80021da <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e007      	b.n	80021ea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021da:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_PWREx_ConfigSupply+0x70>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e6:	d1ee      	bne.n	80021c6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	58024800 	.word	0x58024800

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b08c      	sub	sp, #48	@ 0x30
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e3c8      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8087 	beq.w	8002326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002218:	4b88      	ldr	r3, [pc, #544]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002220:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002222:	4b86      	ldr	r3, [pc, #536]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002226:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222a:	2b10      	cmp	r3, #16
 800222c:	d007      	beq.n	800223e <HAL_RCC_OscConfig+0x46>
 800222e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002230:	2b18      	cmp	r3, #24
 8002232:	d110      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
 8002234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d10b      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	4b7f      	ldr	r3, [pc, #508]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06c      	beq.n	8002324 <HAL_RCC_OscConfig+0x12c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d168      	bne.n	8002324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e3a2      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x76>
 8002260:	4b76      	ldr	r3, [pc, #472]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a75      	ldr	r2, [pc, #468]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e02e      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x98>
 8002276:	4b71      	ldr	r3, [pc, #452]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a70      	ldr	r2, [pc, #448]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b6e      	ldr	r3, [pc, #440]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6d      	ldr	r2, [pc, #436]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002288:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xbc>
 800229a:	4b68      	ldr	r3, [pc, #416]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a67      	ldr	r2, [pc, #412]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b65      	ldr	r3, [pc, #404]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a64      	ldr	r2, [pc, #400]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 80022b4:	4b61      	ldr	r3, [pc, #388]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a60      	ldr	r2, [pc, #384]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b5e      	ldr	r3, [pc, #376]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a5d      	ldr	r2, [pc, #372]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff f830 	bl	8001338 <HAL_GetTick>
 80022d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff f82c 	bl	8001338 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	@ 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e356      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ee:	4b53      	ldr	r3, [pc, #332]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe4>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff f81c 	bl	8001338 <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff f818 	bl	8001338 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	@ 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e342      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002316:	4b49      	ldr	r3, [pc, #292]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x10c>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 808c 	beq.w	800244c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002334:	4b41      	ldr	r3, [pc, #260]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800233c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800233e:	4b3f      	ldr	r3, [pc, #252]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002342:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <HAL_RCC_OscConfig+0x162>
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	2b18      	cmp	r3, #24
 800234e:	d137      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1c8>
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d132      	bne.n	80023c0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800235a:	4b38      	ldr	r3, [pc, #224]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <HAL_RCC_OscConfig+0x17a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e314      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002372:	4b32      	ldr	r3, [pc, #200]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0219 	bic.w	r2, r3, #25
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	492f      	ldr	r1, [pc, #188]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe ffd8 	bl	8001338 <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238c:	f7fe ffd4 	bl	8001338 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e2fe      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239e:	4b27      	ldr	r3, [pc, #156]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023aa:	4b24      	ldr	r3, [pc, #144]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	061b      	lsls	r3, r3, #24
 80023b8:	4920      	ldr	r1, [pc, #128]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023be:	e045      	b.n	800244c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d026      	beq.n	8002416 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023c8:	4b1c      	ldr	r3, [pc, #112]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f023 0219 	bic.w	r2, r3, #25
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	4919      	ldr	r1, [pc, #100]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023da:	f7fe ffad 	bl	8001338 <HAL_GetTick>
 80023de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e2:	f7fe ffa9 	bl	8001338 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e2d3      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002400:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	061b      	lsls	r3, r3, #24
 800240e:	490b      	ldr	r1, [pc, #44]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
 8002414:	e01a      	b.n	800244c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002416:	4b09      	ldr	r3, [pc, #36]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a08      	ldr	r2, [pc, #32]	@ (800243c <HAL_RCC_OscConfig+0x244>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe ff89 	bl	8001338 <HAL_GetTick>
 8002426:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800242a:	f7fe ff85 	bl	8001338 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d903      	bls.n	8002440 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e2af      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
 800243c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002440:	4b96      	ldr	r3, [pc, #600]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ee      	bne.n	800242a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d06a      	beq.n	800252e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002458:	4b90      	ldr	r3, [pc, #576]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002460:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002462:	4b8e      	ldr	r3, [pc, #568]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002466:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b08      	cmp	r3, #8
 800246c:	d007      	beq.n	800247e <HAL_RCC_OscConfig+0x286>
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	2b18      	cmp	r3, #24
 8002472:	d11b      	bne.n	80024ac <HAL_RCC_OscConfig+0x2b4>
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d116      	bne.n	80024ac <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800247e:	4b87      	ldr	r3, [pc, #540]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_RCC_OscConfig+0x29e>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	2b80      	cmp	r3, #128	@ 0x80
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e282      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002496:	4b81      	ldr	r3, [pc, #516]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	061b      	lsls	r3, r3, #24
 80024a4:	497d      	ldr	r1, [pc, #500]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024aa:	e040      	b.n	800252e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d023      	beq.n	80024fc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024b4:	4b79      	ldr	r3, [pc, #484]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a78      	ldr	r2, [pc, #480]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80024ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe ff3a 	bl	8001338 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024c8:	f7fe ff36 	bl	8001338 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e260      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024da:	4b70      	ldr	r3, [pc, #448]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024e6:	4b6d      	ldr	r3, [pc, #436]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	061b      	lsls	r3, r3, #24
 80024f4:	4969      	ldr	r1, [pc, #420]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60cb      	str	r3, [r1, #12]
 80024fa:	e018      	b.n	800252e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024fc:	4b67      	ldr	r3, [pc, #412]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a66      	ldr	r2, [pc, #408]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe ff16 	bl	8001338 <HAL_GetTick>
 800250c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002510:	f7fe ff12 	bl	8001338 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e23c      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002522:	4b5e      	ldr	r3, [pc, #376]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d036      	beq.n	80025a8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d019      	beq.n	8002576 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	4b56      	ldr	r3, [pc, #344]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002546:	4a55      	ldr	r2, [pc, #340]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254e:	f7fe fef3 	bl	8001338 <HAL_GetTick>
 8002552:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002556:	f7fe feef 	bl	8001338 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e219      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002568:	4b4c      	ldr	r3, [pc, #304]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 800256a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x35e>
 8002574:	e018      	b.n	80025a8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002576:	4b49      	ldr	r3, [pc, #292]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257a:	4a48      	ldr	r2, [pc, #288]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7fe fed9 	bl	8001338 <HAL_GetTick>
 8002586:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe fed5 	bl	8001338 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1ff      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800259c:	4b3f      	ldr	r3, [pc, #252]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 800259e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f0      	bne.n	800258a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d036      	beq.n	8002622 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d019      	beq.n	80025f0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025bc:	4b37      	ldr	r3, [pc, #220]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a36      	ldr	r2, [pc, #216]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80025c2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025c8:	f7fe feb6 	bl	8001338 <HAL_GetTick>
 80025cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d0:	f7fe feb2 	bl	8001338 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1dc      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025e2:	4b2e      	ldr	r3, [pc, #184]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x3d8>
 80025ee:	e018      	b.n	8002622 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025f0:	4b2a      	ldr	r3, [pc, #168]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a29      	ldr	r2, [pc, #164]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 80025f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025fc:	f7fe fe9c 	bl	8001338 <HAL_GetTick>
 8002600:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002604:	f7fe fe98 	bl	8001338 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e1c2      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002616:	4b21      	ldr	r3, [pc, #132]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0304 	and.w	r3, r3, #4
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8086 	beq.w	800273c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002630:	4b1b      	ldr	r3, [pc, #108]	@ (80026a0 <HAL_RCC_OscConfig+0x4a8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a1a      	ldr	r2, [pc, #104]	@ (80026a0 <HAL_RCC_OscConfig+0x4a8>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800263c:	f7fe fe7c 	bl	8001338 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe fe78 	bl	8001338 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1a2      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002656:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <HAL_RCC_OscConfig+0x4a8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d106      	bne.n	8002678 <HAL_RCC_OscConfig+0x480>
 800266a:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266e:	4a0b      	ldr	r2, [pc, #44]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002670:	f043 0301 	orr.w	r3, r3, #1
 8002674:	6713      	str	r3, [r2, #112]	@ 0x70
 8002676:	e032      	b.n	80026de <HAL_RCC_OscConfig+0x4e6>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d111      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4ac>
 8002680:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002684:	4a05      	ldr	r2, [pc, #20]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6713      	str	r3, [r2, #112]	@ 0x70
 800268c:	4b03      	ldr	r3, [pc, #12]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 800268e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002690:	4a02      	ldr	r2, [pc, #8]	@ (800269c <HAL_RCC_OscConfig+0x4a4>)
 8002692:	f023 0304 	bic.w	r3, r3, #4
 8002696:	6713      	str	r3, [r2, #112]	@ 0x70
 8002698:	e021      	b.n	80026de <HAL_RCC_OscConfig+0x4e6>
 800269a:	bf00      	nop
 800269c:	58024400 	.word	0x58024400
 80026a0:	58024800 	.word	0x58024800
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d10c      	bne.n	80026c6 <HAL_RCC_OscConfig+0x4ce>
 80026ac:	4b83      	ldr	r3, [pc, #524]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b0:	4a82      	ldr	r2, [pc, #520]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80026b2:	f043 0304 	orr.w	r3, r3, #4
 80026b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b8:	4b80      	ldr	r3, [pc, #512]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80026ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026bc:	4a7f      	ldr	r2, [pc, #508]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c4:	e00b      	b.n	80026de <HAL_RCC_OscConfig+0x4e6>
 80026c6:	4b7d      	ldr	r3, [pc, #500]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ca:	4a7c      	ldr	r2, [pc, #496]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d2:	4b7a      	ldr	r3, [pc, #488]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d6:	4a79      	ldr	r2, [pc, #484]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d015      	beq.n	8002712 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fe fe27 	bl	8001338 <HAL_GetTick>
 80026ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe fe23 	bl	8001338 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e14b      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002704:	4b6d      	ldr	r3, [pc, #436]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ee      	beq.n	80026ee <HAL_RCC_OscConfig+0x4f6>
 8002710:	e014      	b.n	800273c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe fe11 	bl	8001338 <HAL_GetTick>
 8002716:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fe fe0d 	bl	8001338 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e135      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002730:	4b62      	ldr	r3, [pc, #392]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1ee      	bne.n	800271a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 812a 	beq.w	800299a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002746:	4b5d      	ldr	r3, [pc, #372]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800274e:	2b18      	cmp	r3, #24
 8002750:	f000 80ba 	beq.w	80028c8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	2b02      	cmp	r3, #2
 800275a:	f040 8095 	bne.w	8002888 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275e:	4b57      	ldr	r3, [pc, #348]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a56      	ldr	r2, [pc, #344]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002764:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe fde5 	bl	8001338 <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe fde1 	bl	8001338 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e10b      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002784:	4b4d      	ldr	r3, [pc, #308]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f0      	bne.n	8002772 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002790:	4b4a      	ldr	r3, [pc, #296]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002792:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002794:	4b4a      	ldr	r3, [pc, #296]	@ (80028c0 <HAL_RCC_OscConfig+0x6c8>)
 8002796:	4013      	ands	r3, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027a0:	0112      	lsls	r2, r2, #4
 80027a2:	430a      	orrs	r2, r1
 80027a4:	4945      	ldr	r1, [pc, #276]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	628b      	str	r3, [r1, #40]	@ 0x28
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	3b01      	subs	r3, #1
 80027b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b8:	3b01      	subs	r3, #1
 80027ba:	025b      	lsls	r3, r3, #9
 80027bc:	b29b      	uxth	r3, r3
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c4:	3b01      	subs	r3, #1
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027cc:	431a      	orrs	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d2:	3b01      	subs	r3, #1
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80027da:	4938      	ldr	r1, [pc, #224]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027e0:	4b36      	ldr	r3, [pc, #216]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	4a35      	ldr	r2, [pc, #212]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80027e6:	f023 0301 	bic.w	r3, r3, #1
 80027ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027ec:	4b33      	ldr	r3, [pc, #204]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80027ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027f0:	4b34      	ldr	r3, [pc, #208]	@ (80028c4 <HAL_RCC_OscConfig+0x6cc>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80027f8:	00d2      	lsls	r2, r2, #3
 80027fa:	4930      	ldr	r1, [pc, #192]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002800:	4b2e      	ldr	r3, [pc, #184]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002804:	f023 020c 	bic.w	r2, r3, #12
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	492b      	ldr	r1, [pc, #172]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002812:	4b2a      	ldr	r3, [pc, #168]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002816:	f023 0202 	bic.w	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281e:	4927      	ldr	r1, [pc, #156]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002820:	4313      	orrs	r3, r2
 8002822:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002824:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002828:	4a24      	ldr	r2, [pc, #144]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 800282a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002830:	4b22      	ldr	r3, [pc, #136]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002834:	4a21      	ldr	r2, [pc, #132]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800283a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800283c:	4b1f      	ldr	r3, [pc, #124]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	4a1e      	ldr	r2, [pc, #120]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002842:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002848:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	4a1b      	ldr	r2, [pc, #108]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002854:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 800285a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800285e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fd6a 	bl	8001338 <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe fd66 	bl	8001338 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e090      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800287a:	4b10      	ldr	r3, [pc, #64]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x670>
 8002886:	e088      	b.n	800299a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 800288e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002892:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002894:	f7fe fd50 	bl	8001338 <HAL_GetTick>
 8002898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe fd4c 	bl	8001338 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e076      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ae:	4b03      	ldr	r3, [pc, #12]	@ (80028bc <HAL_RCC_OscConfig+0x6c4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x6a4>
 80028ba:	e06e      	b.n	800299a <HAL_RCC_OscConfig+0x7a2>
 80028bc:	58024400 	.word	0x58024400
 80028c0:	fffffc0c 	.word	0xfffffc0c
 80028c4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028c8:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <HAL_RCC_OscConfig+0x7ac>)
 80028ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028ce:	4b35      	ldr	r3, [pc, #212]	@ (80029a4 <HAL_RCC_OscConfig+0x7ac>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d031      	beq.n	8002940 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f003 0203 	and.w	r2, r3, #3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d12a      	bne.n	8002940 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d122      	bne.n	8002940 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d11a      	bne.n	8002940 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	0a5b      	lsrs	r3, r3, #9
 800290e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002916:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002918:	429a      	cmp	r2, r3
 800291a:	d111      	bne.n	8002940 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002928:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d108      	bne.n	8002940 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	0e1b      	lsrs	r3, r3, #24
 8002932:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e02b      	b.n	800299c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002944:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <HAL_RCC_OscConfig+0x7ac>)
 8002946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800294e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	429a      	cmp	r2, r3
 8002958:	d01f      	beq.n	800299a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800295a:	4b12      	ldr	r3, [pc, #72]	@ (80029a4 <HAL_RCC_OscConfig+0x7ac>)
 800295c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295e:	4a11      	ldr	r2, [pc, #68]	@ (80029a4 <HAL_RCC_OscConfig+0x7ac>)
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002966:	f7fe fce7 	bl	8001338 <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800296c:	bf00      	nop
 800296e:	f7fe fce3 	bl	8001338 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	4293      	cmp	r3, r2
 8002978:	d0f9      	beq.n	800296e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800297a:	4b0a      	ldr	r3, [pc, #40]	@ (80029a4 <HAL_RCC_OscConfig+0x7ac>)
 800297c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_RCC_OscConfig+0x7b0>)
 8002980:	4013      	ands	r3, r2
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002986:	00d2      	lsls	r2, r2, #3
 8002988:	4906      	ldr	r1, [pc, #24]	@ (80029a4 <HAL_RCC_OscConfig+0x7ac>)
 800298a:	4313      	orrs	r3, r2
 800298c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_RCC_OscConfig+0x7ac>)
 8002990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002992:	4a04      	ldr	r2, [pc, #16]	@ (80029a4 <HAL_RCC_OscConfig+0x7ac>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3730      	adds	r7, #48	@ 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	58024400 	.word	0x58024400
 80029a8:	ffff0007 	.word	0xffff0007

080029ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e19c      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b8a      	ldr	r3, [pc, #552]	@ (8002bec <HAL_RCC_ClockConfig+0x240>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b87      	ldr	r3, [pc, #540]	@ (8002bec <HAL_RCC_ClockConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 020f 	bic.w	r2, r3, #15
 80029d6:	4985      	ldr	r1, [pc, #532]	@ (8002bec <HAL_RCC_ClockConfig+0x240>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b83      	ldr	r3, [pc, #524]	@ (8002bec <HAL_RCC_ClockConfig+0x240>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e184      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d908      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a0c:	4b78      	ldr	r3, [pc, #480]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	4975      	ldr	r1, [pc, #468]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d010      	beq.n	8002a4c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	4b70      	ldr	r3, [pc, #448]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d908      	bls.n	8002a4c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	496a      	ldr	r1, [pc, #424]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0310 	and.w	r3, r3, #16
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d010      	beq.n	8002a7a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699a      	ldr	r2, [r3, #24]
 8002a5c:	4b64      	ldr	r3, [pc, #400]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d908      	bls.n	8002a7a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a68:	4b61      	ldr	r3, [pc, #388]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	69db      	ldr	r3, [r3, #28]
 8002a6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	495e      	ldr	r1, [pc, #376]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69da      	ldr	r2, [r3, #28]
 8002a8a:	4b59      	ldr	r3, [pc, #356]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d908      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a96:	4b56      	ldr	r3, [pc, #344]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	4953      	ldr	r1, [pc, #332]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d908      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac4:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f023 020f 	bic.w	r2, r3, #15
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4947      	ldr	r1, [pc, #284]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d055      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ae2:	4b43      	ldr	r3, [pc, #268]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4940      	ldr	r1, [pc, #256]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002afc:	4b3c      	ldr	r3, [pc, #240]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d121      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0f6      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b14:	4b36      	ldr	r3, [pc, #216]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d115      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0ea      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d107      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b2c:	4b30      	ldr	r3, [pc, #192]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0de      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0d6      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b4c:	4b28      	ldr	r3, [pc, #160]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f023 0207 	bic.w	r2, r3, #7
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	4925      	ldr	r1, [pc, #148]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b5e:	f7fe fbeb 	bl	8001338 <HAL_GetTick>
 8002b62:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b64:	e00a      	b.n	8002b7c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b66:	f7fe fbe7 	bl	8001338 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e0be      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d1eb      	bne.n	8002b66 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d010      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	4b14      	ldr	r3, [pc, #80]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d208      	bcs.n	8002bbc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002baa:	4b11      	ldr	r3, [pc, #68]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f023 020f 	bic.w	r2, r3, #15
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	490e      	ldr	r1, [pc, #56]	@ (8002bf0 <HAL_RCC_ClockConfig+0x244>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCC_ClockConfig+0x240>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d214      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bca:	4b08      	ldr	r3, [pc, #32]	@ (8002bec <HAL_RCC_ClockConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 020f 	bic.w	r2, r3, #15
 8002bd2:	4906      	ldr	r1, [pc, #24]	@ (8002bec <HAL_RCC_ClockConfig+0x240>)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bda:	4b04      	ldr	r3, [pc, #16]	@ (8002bec <HAL_RCC_ClockConfig+0x240>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e086      	b.n	8002cfa <HAL_RCC_ClockConfig+0x34e>
 8002bec:	52002000 	.word	0x52002000
 8002bf0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d010      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	4b3f      	ldr	r3, [pc, #252]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d208      	bcs.n	8002c22 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c10:	4b3c      	ldr	r3, [pc, #240]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	4939      	ldr	r1, [pc, #228]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d010      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d208      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c3e:	4b31      	ldr	r3, [pc, #196]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	492e      	ldr	r1, [pc, #184]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0310 	and.w	r3, r3, #16
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	4b28      	ldr	r3, [pc, #160]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d208      	bcs.n	8002c7e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c6c:	4b25      	ldr	r3, [pc, #148]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	4922      	ldr	r1, [pc, #136]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d010      	beq.n	8002cac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69da      	ldr	r2, [r3, #28]
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d208      	bcs.n	8002cac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4917      	ldr	r1, [pc, #92]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cac:	f000 f834 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4b14      	ldr	r3, [pc, #80]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	4912      	ldr	r1, [pc, #72]	@ (8002d08 <HAL_RCC_ClockConfig+0x35c>)
 8002cbe:	5ccb      	ldrb	r3, [r1, r3]
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cca:	4b0e      	ldr	r3, [pc, #56]	@ (8002d04 <HAL_RCC_ClockConfig+0x358>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <HAL_RCC_ClockConfig+0x35c>)
 8002cd4:	5cd3      	ldrb	r3, [r2, r3]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8002d0c <HAL_RCC_ClockConfig+0x360>)
 8002ce2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <HAL_RCC_ClockConfig+0x364>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <HAL_RCC_ClockConfig+0x368>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe fad8 	bl	80012a4 <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	58024400 	.word	0x58024400
 8002d08:	080278a4 	.word	0x080278a4
 8002d0c:	24000004 	.word	0x24000004
 8002d10:	24000000 	.word	0x24000000
 8002d14:	24000008 	.word	0x24000008

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	@ 0x24
 8002d1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1e:	4bb3      	ldr	r3, [pc, #716]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d26:	2b18      	cmp	r3, #24
 8002d28:	f200 8155 	bhi.w	8002fd6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d99 	.word	0x08002d99
 8002d38:	08002fd7 	.word	0x08002fd7
 8002d3c:	08002fd7 	.word	0x08002fd7
 8002d40:	08002fd7 	.word	0x08002fd7
 8002d44:	08002fd7 	.word	0x08002fd7
 8002d48:	08002fd7 	.word	0x08002fd7
 8002d4c:	08002fd7 	.word	0x08002fd7
 8002d50:	08002fd7 	.word	0x08002fd7
 8002d54:	08002dbf 	.word	0x08002dbf
 8002d58:	08002fd7 	.word	0x08002fd7
 8002d5c:	08002fd7 	.word	0x08002fd7
 8002d60:	08002fd7 	.word	0x08002fd7
 8002d64:	08002fd7 	.word	0x08002fd7
 8002d68:	08002fd7 	.word	0x08002fd7
 8002d6c:	08002fd7 	.word	0x08002fd7
 8002d70:	08002fd7 	.word	0x08002fd7
 8002d74:	08002dc5 	.word	0x08002dc5
 8002d78:	08002fd7 	.word	0x08002fd7
 8002d7c:	08002fd7 	.word	0x08002fd7
 8002d80:	08002fd7 	.word	0x08002fd7
 8002d84:	08002fd7 	.word	0x08002fd7
 8002d88:	08002fd7 	.word	0x08002fd7
 8002d8c:	08002fd7 	.word	0x08002fd7
 8002d90:	08002fd7 	.word	0x08002fd7
 8002d94:	08002dcb 	.word	0x08002dcb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d98:	4b94      	ldr	r3, [pc, #592]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002da4:	4b91      	ldr	r3, [pc, #580]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	08db      	lsrs	r3, r3, #3
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	4a90      	ldr	r2, [pc, #576]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002db6:	e111      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002db8:	4b8d      	ldr	r3, [pc, #564]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dba:	61bb      	str	r3, [r7, #24]
      break;
 8002dbc:	e10e      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002dc0:	61bb      	str	r3, [r7, #24]
      break;
 8002dc2:	e10b      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dc6:	61bb      	str	r3, [r7, #24]
      break;
 8002dc8:	e108      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dca:	4b88      	ldr	r3, [pc, #544]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002dd4:	4b85      	ldr	r3, [pc, #532]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	091b      	lsrs	r3, r3, #4
 8002dda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dde:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002de0:	4b82      	ldr	r3, [pc, #520]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002dea:	4b80      	ldr	r3, [pc, #512]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dee:	08db      	lsrs	r3, r3, #3
 8002df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 80e1 	beq.w	8002fd0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	f000 8083 	beq.w	8002f1c <HAL_RCC_GetSysClockFreq+0x204>
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	f200 80a1 	bhi.w	8002f60 <HAL_RCC_GetSysClockFreq+0x248>
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x114>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d056      	beq.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e2a:	e099      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0320 	and.w	r3, r3, #32
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d02d      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e38:	4b6c      	ldr	r3, [pc, #432]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	4a6b      	ldr	r2, [pc, #428]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e44:	fa22 f303 	lsr.w	r3, r2, r3
 8002e48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	ee07 3a90 	vmov	s15, r3
 8002e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e62:	4b62      	ldr	r3, [pc, #392]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e76:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e92:	e087      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e9e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003000 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ea6:	4b51      	ldr	r3, [pc, #324]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ed6:	e065      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	ee07 3a90 	vmov	s15, r3
 8002ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ee2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003004 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eea:	4b40      	ldr	r3, [pc, #256]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002efe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f1a:	e043      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003008 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f42:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f5e:	e021      	b.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003004 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f72:	4b1e      	ldr	r3, [pc, #120]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f86:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ffc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fa2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002fa4:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa8:	0a5b      	lsrs	r3, r3, #9
 8002faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fae:	3301      	adds	r3, #1
 8002fb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	ee07 3a90 	vmov	s15, r3
 8002fb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc8:	ee17 3a90 	vmov	r3, s15
 8002fcc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002fce:	e005      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61bb      	str	r3, [r7, #24]
      break;
 8002fd4:	e002      	b.n	8002fdc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002fd6:	4b07      	ldr	r3, [pc, #28]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fd8:	61bb      	str	r3, [r7, #24]
      break;
 8002fda:	bf00      	nop
  }

  return sysclockfreq;
 8002fdc:	69bb      	ldr	r3, [r7, #24]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3724      	adds	r7, #36	@ 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	58024400 	.word	0x58024400
 8002ff0:	03d09000 	.word	0x03d09000
 8002ff4:	003d0900 	.word	0x003d0900
 8002ff8:	007a1200 	.word	0x007a1200
 8002ffc:	46000000 	.word	0x46000000
 8003000:	4c742400 	.word	0x4c742400
 8003004:	4a742400 	.word	0x4a742400
 8003008:	4af42400 	.word	0x4af42400

0800300c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003012:	f7ff fe81 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8003016:	4602      	mov	r2, r0
 8003018:	4b10      	ldr	r3, [pc, #64]	@ (800305c <HAL_RCC_GetHCLKFreq+0x50>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	490f      	ldr	r1, [pc, #60]	@ (8003060 <HAL_RCC_GetHCLKFreq+0x54>)
 8003024:	5ccb      	ldrb	r3, [r1, r3]
 8003026:	f003 031f 	and.w	r3, r3, #31
 800302a:	fa22 f303 	lsr.w	r3, r2, r3
 800302e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003030:	4b0a      	ldr	r3, [pc, #40]	@ (800305c <HAL_RCC_GetHCLKFreq+0x50>)
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	4a09      	ldr	r2, [pc, #36]	@ (8003060 <HAL_RCC_GetHCLKFreq+0x54>)
 800303a:	5cd3      	ldrb	r3, [r2, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	fa22 f303 	lsr.w	r3, r2, r3
 8003046:	4a07      	ldr	r2, [pc, #28]	@ (8003064 <HAL_RCC_GetHCLKFreq+0x58>)
 8003048:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800304a:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <HAL_RCC_GetHCLKFreq+0x5c>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003050:	4b04      	ldr	r3, [pc, #16]	@ (8003064 <HAL_RCC_GetHCLKFreq+0x58>)
 8003052:	681b      	ldr	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	58024400 	.word	0x58024400
 8003060:	080278a4 	.word	0x080278a4
 8003064:	24000004 	.word	0x24000004
 8003068:	24000000 	.word	0x24000000

0800306c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003070:	f7ff ffcc 	bl	800300c <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	091b      	lsrs	r3, r3, #4
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4904      	ldr	r1, [pc, #16]	@ (8003094 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	f003 031f 	and.w	r3, r3, #31
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800308c:	4618      	mov	r0, r3
 800308e:	bd80      	pop	{r7, pc}
 8003090:	58024400 	.word	0x58024400
 8003094:	080278a4 	.word	0x080278a4

08003098 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800309c:	f7ff ffb6 	bl	800300c <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4904      	ldr	r1, [pc, #16]	@ (80030c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	58024400 	.word	0x58024400
 80030c0:	080278a4 	.word	0x080278a4

080030c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c8:	b0c6      	sub	sp, #280	@ 0x118
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80030e8:	2500      	movs	r5, #0
 80030ea:	ea54 0305 	orrs.w	r3, r4, r5
 80030ee:	d049      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80030f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80030f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030fa:	d02f      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80030fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003100:	d828      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003106:	d01a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003108:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800310c:	d822      	bhi.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003112:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003116:	d007      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003118:	e01c      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800311a:	4bab      	ldr	r3, [pc, #684]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	4aaa      	ldr	r2, [pc, #680]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003126:	e01a      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800312c:	3308      	adds	r3, #8
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f001 fc25 	bl	8004980 <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800313c:	e00f      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800313e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003142:	3328      	adds	r3, #40	@ 0x28
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f001 fccc 	bl	8004ae4 <RCCEx_PLL3_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003152:	e004      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800315a:	e000      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800315c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800315e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003166:	4b98      	ldr	r3, [pc, #608]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800316e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003172:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003174:	4a94      	ldr	r2, [pc, #592]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003176:	430b      	orrs	r3, r1
 8003178:	6513      	str	r3, [r2, #80]	@ 0x50
 800317a:	e003      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003180:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003190:	f04f 0900 	mov.w	r9, #0
 8003194:	ea58 0309 	orrs.w	r3, r8, r9
 8003198:	d047      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800319a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800319e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d82a      	bhi.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031a4:	a201      	add	r2, pc, #4	@ (adr r2, 80031ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031aa:	bf00      	nop
 80031ac:	080031c1 	.word	0x080031c1
 80031b0:	080031cf 	.word	0x080031cf
 80031b4:	080031e5 	.word	0x080031e5
 80031b8:	08003203 	.word	0x08003203
 80031bc:	08003203 	.word	0x08003203
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c0:	4b81      	ldr	r3, [pc, #516]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	4a80      	ldr	r2, [pc, #512]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031cc:	e01a      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d2:	3308      	adds	r3, #8
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 fbd2 	bl	8004980 <RCCEx_PLL2_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031e2:	e00f      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031e8:	3328      	adds	r3, #40	@ 0x28
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 fc79 	bl	8004ae4 <RCCEx_PLL3_Config>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031f8:	e004      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003200:	e000      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003202:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800320c:	4b6e      	ldr	r3, [pc, #440]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003210:	f023 0107 	bic.w	r1, r3, #7
 8003214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	4a6b      	ldr	r2, [pc, #428]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800321c:	430b      	orrs	r3, r1
 800321e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003220:	e003      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003222:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003226:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800322a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003236:	f04f 0b00 	mov.w	fp, #0
 800323a:	ea5a 030b 	orrs.w	r3, sl, fp
 800323e:	d05b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003244:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003248:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800324c:	d03b      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800324e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003252:	d834      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003254:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003258:	d037      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 800325a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800325e:	d82e      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003260:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003264:	d033      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003266:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800326a:	d828      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800326c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003270:	d01a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003272:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003276:	d822      	bhi.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800327c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003280:	d007      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003282:	e01c      	b.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003284:	4b50      	ldr	r3, [pc, #320]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003288:	4a4f      	ldr	r2, [pc, #316]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800328a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800328e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003290:	e01e      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003296:	3308      	adds	r3, #8
 8003298:	2100      	movs	r1, #0
 800329a:	4618      	mov	r0, r3
 800329c:	f001 fb70 	bl	8004980 <RCCEx_PLL2_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032a6:	e013      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ac:	3328      	adds	r3, #40	@ 0x28
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f001 fc17 	bl	8004ae4 <RCCEx_PLL3_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032bc:	e008      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032c4:	e004      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80032c6:	bf00      	nop
 80032c8:	e002      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80032ca:	bf00      	nop
 80032cc:	e000      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80032ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032d8:	4b3b      	ldr	r3, [pc, #236]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80032e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80032e8:	4a37      	ldr	r2, [pc, #220]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ea:	430b      	orrs	r3, r1
 80032ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ee:	e003      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80032f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003304:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003308:	2300      	movs	r3, #0
 800330a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800330e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003312:	460b      	mov	r3, r1
 8003314:	4313      	orrs	r3, r2
 8003316:	d05d      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800331c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003320:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003324:	d03b      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003326:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800332a:	d834      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800332c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003330:	d037      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003332:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003336:	d82e      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003338:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800333c:	d033      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800333e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003342:	d828      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003344:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003348:	d01a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800334a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800334e:	d822      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003358:	d007      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800335a:	e01c      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800335c:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	4a19      	ldr	r2, [pc, #100]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003368:	e01e      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800336a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800336e:	3308      	adds	r3, #8
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f001 fb04 	bl	8004980 <RCCEx_PLL2_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800337e:	e013      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003384:	3328      	adds	r3, #40	@ 0x28
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f001 fbab 	bl	8004ae4 <RCCEx_PLL3_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003394:	e008      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800339c:	e004      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800339e:	bf00      	nop
 80033a0:	e002      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033a2:	bf00      	nop
 80033a4:	e000      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80033a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10d      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80033b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033c0:	4a01      	ldr	r2, [pc, #4]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033c2:	430b      	orrs	r3, r1
 80033c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033c6:	e005      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80033c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80033e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80033ea:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4313      	orrs	r3, r2
 80033f2:	d03a      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80033f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fa:	2b30      	cmp	r3, #48	@ 0x30
 80033fc:	d01f      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80033fe:	2b30      	cmp	r3, #48	@ 0x30
 8003400:	d819      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003402:	2b20      	cmp	r3, #32
 8003404:	d00c      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003406:	2b20      	cmp	r3, #32
 8003408:	d815      	bhi.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d019      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800340e:	2b10      	cmp	r3, #16
 8003410:	d111      	bne.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003412:	4baa      	ldr	r3, [pc, #680]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003416:	4aa9      	ldr	r2, [pc, #676]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003418:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800341c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800341e:	e011      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003424:	3308      	adds	r3, #8
 8003426:	2102      	movs	r1, #2
 8003428:	4618      	mov	r0, r3
 800342a:	f001 faa9 	bl	8004980 <RCCEx_PLL2_Config>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003434:	e006      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800343c:	e002      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800344c:	4b9b      	ldr	r3, [pc, #620]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800344e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003450:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	4a98      	ldr	r2, [pc, #608]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800345c:	430b      	orrs	r3, r1
 800345e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003460:	e003      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003462:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003466:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800346a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003476:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800347a:	2300      	movs	r3, #0
 800347c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003480:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003484:	460b      	mov	r3, r1
 8003486:	4313      	orrs	r3, r2
 8003488:	d051      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800348a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800348e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003490:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003494:	d035      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800349a:	d82e      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x436>
 800349c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034a0:	d031      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80034a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034a6:	d828      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034ac:	d01a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80034ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b2:	d822      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x436>
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034bc:	d007      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80034be:	e01c      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c0:	4b7e      	ldr	r3, [pc, #504]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	4a7d      	ldr	r2, [pc, #500]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034cc:	e01c      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d2:	3308      	adds	r3, #8
 80034d4:	2100      	movs	r1, #0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 fa52 	bl	8004980 <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034e2:	e011      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e8:	3328      	adds	r3, #40	@ 0x28
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 faf9 	bl	8004ae4 <RCCEx_PLL3_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034f8:	e006      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003500:	e002      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003502:	bf00      	nop
 8003504:	e000      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10a      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003510:	4b6a      	ldr	r3, [pc, #424]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003514:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800351c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351e:	4a67      	ldr	r2, [pc, #412]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003520:	430b      	orrs	r3, r1
 8003522:	6513      	str	r3, [r2, #80]	@ 0x50
 8003524:	e003      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003526:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800352a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800352e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003536:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800353a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800353e:	2300      	movs	r3, #0
 8003540:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003544:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003548:	460b      	mov	r3, r1
 800354a:	4313      	orrs	r3, r2
 800354c:	d053      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800354e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003558:	d033      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800355a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800355e:	d82c      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003560:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003564:	d02f      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003566:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800356a:	d826      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800356c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003570:	d02b      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003572:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003576:	d820      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800357c:	d012      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800357e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003582:	d81a      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003584:	2b00      	cmp	r3, #0
 8003586:	d022      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358c:	d115      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800358e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003592:	3308      	adds	r3, #8
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f9f2 	bl	8004980 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035a2:	e015      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a8:	3328      	adds	r3, #40	@ 0x28
 80035aa:	2101      	movs	r1, #1
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fa99 	bl	8004ae4 <RCCEx_PLL3_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035b8:	e00a      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035c0:	e006      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035c2:	bf00      	nop
 80035c4:	e004      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035c6:	bf00      	nop
 80035c8:	e002      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80035ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035d8:	4b38      	ldr	r3, [pc, #224]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80035e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e6:	4a35      	ldr	r2, [pc, #212]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80035ec:	e003      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035fe:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003602:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003606:	2300      	movs	r3, #0
 8003608:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800360c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003610:	460b      	mov	r3, r1
 8003612:	4313      	orrs	r3, r2
 8003614:	d058      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800361e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003622:	d033      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003628:	d82c      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800362e:	d02f      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003634:	d826      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003636:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800363a:	d02b      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800363c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003640:	d820      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003642:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003646:	d012      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003648:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800364c:	d81a      	bhi.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d022      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003652:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003656:	d115      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800365c:	3308      	adds	r3, #8
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f001 f98d 	bl	8004980 <RCCEx_PLL2_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800366c:	e015      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800366e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003672:	3328      	adds	r3, #40	@ 0x28
 8003674:	2101      	movs	r1, #1
 8003676:	4618      	mov	r0, r3
 8003678:	f001 fa34 	bl	8004ae4 <RCCEx_PLL3_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003682:	e00a      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800368a:	e006      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800368c:	bf00      	nop
 800368e:	e004      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003690:	bf00      	nop
 8003692:	e002      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003694:	bf00      	nop
 8003696:	e000      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800369a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036a2:	4b06      	ldr	r3, [pc, #24]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80036aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036b2:	4a02      	ldr	r2, [pc, #8]	@ (80036bc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036b4:	430b      	orrs	r3, r1
 80036b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80036ba:	bf00      	nop
 80036bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80036d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036d8:	2300      	movs	r3, #0
 80036da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80036de:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4313      	orrs	r3, r2
 80036e6:	d037      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036f2:	d00e      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80036f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036f8:	d816      	bhi.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80036fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003702:	d111      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003704:	4bc4      	ldr	r3, [pc, #784]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003708:	4ac3      	ldr	r2, [pc, #780]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003710:	e00f      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003712:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003716:	3308      	adds	r3, #8
 8003718:	2101      	movs	r1, #1
 800371a:	4618      	mov	r0, r3
 800371c:	f001 f930 	bl	8004980 <RCCEx_PLL2_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003726:	e004      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800372e:	e000      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003732:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10a      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800373a:	4bb7      	ldr	r3, [pc, #732]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800373e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003746:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003748:	4ab3      	ldr	r2, [pc, #716]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800374a:	430b      	orrs	r3, r1
 800374c:	6513      	str	r3, [r2, #80]	@ 0x50
 800374e:	e003      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003754:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003764:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003768:	2300      	movs	r3, #0
 800376a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800376e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003772:	460b      	mov	r3, r1
 8003774:	4313      	orrs	r3, r2
 8003776:	d039      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800377c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377e:	2b03      	cmp	r3, #3
 8003780:	d81c      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003782:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003788:	080037c5 	.word	0x080037c5
 800378c:	08003799 	.word	0x08003799
 8003790:	080037a7 	.word	0x080037a7
 8003794:	080037c5 	.word	0x080037c5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4b9f      	ldr	r3, [pc, #636]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800379a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379c:	4a9e      	ldr	r2, [pc, #632]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037a4:	e00f      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037aa:	3308      	adds	r3, #8
 80037ac:	2102      	movs	r1, #2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f8e6 	bl	8004980 <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80037c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037ce:	4b92      	ldr	r3, [pc, #584]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d2:	f023 0103 	bic.w	r1, r3, #3
 80037d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037dc:	4a8e      	ldr	r2, [pc, #568]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037e2:	e003      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80037f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003802:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003806:	460b      	mov	r3, r1
 8003808:	4313      	orrs	r3, r2
 800380a:	f000 8099 	beq.w	8003940 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380e:	4b83      	ldr	r3, [pc, #524]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a82      	ldr	r2, [pc, #520]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800381a:	f7fd fd8d 	bl	8001338 <HAL_GetTick>
 800381e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003822:	e00b      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fd fd88 	bl	8001338 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b64      	cmp	r3, #100	@ 0x64
 8003832:	d903      	bls.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800383a:	e005      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800383c:	4b77      	ldr	r3, [pc, #476]	@ (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ed      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800384c:	2b00      	cmp	r3, #0
 800384e:	d173      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003850:	4b71      	ldr	r3, [pc, #452]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003852:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003858:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800385c:	4053      	eors	r3, r2
 800385e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003862:	2b00      	cmp	r3, #0
 8003864:	d015      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003866:	4b6c      	ldr	r3, [pc, #432]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003872:	4b69      	ldr	r3, [pc, #420]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	4a68      	ldr	r2, [pc, #416]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800387e:	4b66      	ldr	r3, [pc, #408]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003882:	4a65      	ldr	r2, [pc, #404]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003888:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800388a:	4a63      	ldr	r2, [pc, #396]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800388c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003890:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003896:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800389a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800389e:	d118      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fd fd4a 	bl	8001338 <HAL_GetTick>
 80038a4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038a8:	e00d      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038aa:	f7fd fd45 	bl	8001338 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80038b4:	1ad2      	subs	r2, r2, r3
 80038b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d903      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80038c4:	e005      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038c6:	4b54      	ldr	r3, [pc, #336]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d0eb      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80038d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d129      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038ea:	d10e      	bne.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80038ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80038f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038fc:	091a      	lsrs	r2, r3, #4
 80038fe:	4b48      	ldr	r3, [pc, #288]	@ (8003a20 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003900:	4013      	ands	r3, r2
 8003902:	4a45      	ldr	r2, [pc, #276]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003904:	430b      	orrs	r3, r1
 8003906:	6113      	str	r3, [r2, #16]
 8003908:	e005      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800390a:	4b43      	ldr	r3, [pc, #268]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	4a42      	ldr	r2, [pc, #264]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003910:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003914:	6113      	str	r3, [r2, #16]
 8003916:	4b40      	ldr	r3, [pc, #256]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003918:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800391a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800391e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003926:	4a3c      	ldr	r2, [pc, #240]	@ (8003a18 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003928:	430b      	orrs	r3, r1
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
 800392c:	e008      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800392e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003932:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003936:	e003      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800393c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f002 0301 	and.w	r3, r2, #1
 800394c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003950:	2300      	movs	r3, #0
 8003952:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003956:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800395a:	460b      	mov	r3, r1
 800395c:	4313      	orrs	r3, r2
 800395e:	f000 808f 	beq.w	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003966:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003968:	2b28      	cmp	r3, #40	@ 0x28
 800396a:	d871      	bhi.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800396c:	a201      	add	r2, pc, #4	@ (adr r2, 8003974 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003a59 	.word	0x08003a59
 8003978:	08003a51 	.word	0x08003a51
 800397c:	08003a51 	.word	0x08003a51
 8003980:	08003a51 	.word	0x08003a51
 8003984:	08003a51 	.word	0x08003a51
 8003988:	08003a51 	.word	0x08003a51
 800398c:	08003a51 	.word	0x08003a51
 8003990:	08003a51 	.word	0x08003a51
 8003994:	08003a25 	.word	0x08003a25
 8003998:	08003a51 	.word	0x08003a51
 800399c:	08003a51 	.word	0x08003a51
 80039a0:	08003a51 	.word	0x08003a51
 80039a4:	08003a51 	.word	0x08003a51
 80039a8:	08003a51 	.word	0x08003a51
 80039ac:	08003a51 	.word	0x08003a51
 80039b0:	08003a51 	.word	0x08003a51
 80039b4:	08003a3b 	.word	0x08003a3b
 80039b8:	08003a51 	.word	0x08003a51
 80039bc:	08003a51 	.word	0x08003a51
 80039c0:	08003a51 	.word	0x08003a51
 80039c4:	08003a51 	.word	0x08003a51
 80039c8:	08003a51 	.word	0x08003a51
 80039cc:	08003a51 	.word	0x08003a51
 80039d0:	08003a51 	.word	0x08003a51
 80039d4:	08003a59 	.word	0x08003a59
 80039d8:	08003a51 	.word	0x08003a51
 80039dc:	08003a51 	.word	0x08003a51
 80039e0:	08003a51 	.word	0x08003a51
 80039e4:	08003a51 	.word	0x08003a51
 80039e8:	08003a51 	.word	0x08003a51
 80039ec:	08003a51 	.word	0x08003a51
 80039f0:	08003a51 	.word	0x08003a51
 80039f4:	08003a59 	.word	0x08003a59
 80039f8:	08003a51 	.word	0x08003a51
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a51 	.word	0x08003a51
 8003a08:	08003a51 	.word	0x08003a51
 8003a0c:	08003a51 	.word	0x08003a51
 8003a10:	08003a51 	.word	0x08003a51
 8003a14:	08003a59 	.word	0x08003a59
 8003a18:	58024400 	.word	0x58024400
 8003a1c:	58024800 	.word	0x58024800
 8003a20:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a28:	3308      	adds	r3, #8
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 ffa7 	bl	8004980 <RCCEx_PLL2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a38:	e00f      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3e:	3328      	adds	r3, #40	@ 0x28
 8003a40:	2101      	movs	r1, #1
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 f84e 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a4e:	e004      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a56:	e000      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a62:	4bbf      	ldr	r3, [pc, #764]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a6e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a70:	4abb      	ldr	r2, [pc, #748]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a72:	430b      	orrs	r3, r1
 8003a74:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a76:	e003      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	f002 0302 	and.w	r3, r2, #2
 8003a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	d041      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa6:	2b05      	cmp	r3, #5
 8003aa8:	d824      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003afd 	.word	0x08003afd
 8003ab4:	08003ac9 	.word	0x08003ac9
 8003ab8:	08003adf 	.word	0x08003adf
 8003abc:	08003afd 	.word	0x08003afd
 8003ac0:	08003afd 	.word	0x08003afd
 8003ac4:	08003afd 	.word	0x08003afd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003acc:	3308      	adds	r3, #8
 8003ace:	2101      	movs	r1, #1
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 ff55 	bl	8004980 <RCCEx_PLL2_Config>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003adc:	e00f      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae2:	3328      	adds	r3, #40	@ 0x28
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fffc 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003af2:	e004      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003afc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003afe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10a      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b06:	4b96      	ldr	r3, [pc, #600]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0a:	f023 0107 	bic.w	r1, r3, #7
 8003b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b14:	4a92      	ldr	r2, [pc, #584]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b16:	430b      	orrs	r3, r1
 8003b18:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b1a:	e003      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2c:	f002 0304 	and.w	r3, r2, #4
 8003b30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b34:	2300      	movs	r3, #0
 8003b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b3a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4313      	orrs	r3, r2
 8003b42:	d044      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4c:	2b05      	cmp	r3, #5
 8003b4e:	d825      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003b50:	a201      	add	r2, pc, #4	@ (adr r2, 8003b58 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003ba5 	.word	0x08003ba5
 8003b5c:	08003b71 	.word	0x08003b71
 8003b60:	08003b87 	.word	0x08003b87
 8003b64:	08003ba5 	.word	0x08003ba5
 8003b68:	08003ba5 	.word	0x08003ba5
 8003b6c:	08003ba5 	.word	0x08003ba5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b74:	3308      	adds	r3, #8
 8003b76:	2101      	movs	r1, #1
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 ff01 	bl	8004980 <RCCEx_PLL2_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b84:	e00f      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8a:	3328      	adds	r3, #40	@ 0x28
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 ffa8 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b9a:	e004      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10b      	bne.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bae:	4b6c      	ldr	r3, [pc, #432]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bb2:	f023 0107 	bic.w	r1, r3, #7
 8003bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bbe:	4a68      	ldr	r2, [pc, #416]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc4:	e003      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd6:	f002 0320 	and.w	r3, r2, #32
 8003bda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003be4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4313      	orrs	r3, r2
 8003bec:	d055      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bfa:	d033      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003bfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c00:	d82c      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c06:	d02f      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c0c:	d826      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c12:	d02b      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003c14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c18:	d820      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c1e:	d012      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003c20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c24:	d81a      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d022      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003c2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c2e:	d115      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c34:	3308      	adds	r3, #8
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fea1 	bl	8004980 <RCCEx_PLL2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c44:	e015      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4a:	3328      	adds	r3, #40	@ 0x28
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 ff48 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c62:	e006      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c64:	bf00      	nop
 8003c66:	e004      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c68:	bf00      	nop
 8003c6a:	e002      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c6c:	bf00      	nop
 8003c6e:	e000      	b.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10b      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c7a:	4b39      	ldr	r3, [pc, #228]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c7e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c8a:	4a35      	ldr	r2, [pc, #212]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c8c:	430b      	orrs	r3, r1
 8003c8e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c90:	e003      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ca6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cb0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	d058      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cc2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003cc6:	d033      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003cc8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ccc:	d82c      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003cce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd2:	d02f      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cd8:	d826      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003cda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cde:	d02b      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ce0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ce4:	d820      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ce6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cea:	d012      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cf0:	d81a      	bhi.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d022      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cfa:	d115      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d00:	3308      	adds	r3, #8
 8003d02:	2100      	movs	r1, #0
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fe3b 	bl	8004980 <RCCEx_PLL2_Config>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d10:	e015      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d16:	3328      	adds	r3, #40	@ 0x28
 8003d18:	2102      	movs	r1, #2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fee2 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d26:	e00a      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d2e:	e006      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d30:	bf00      	nop
 8003d32:	e004      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d34:	bf00      	nop
 8003d36:	e002      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d38:	bf00      	nop
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d46:	4b06      	ldr	r3, [pc, #24]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d4a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d56:	4a02      	ldr	r2, [pc, #8]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d5c:	e006      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003d5e:	bf00      	nop
 8003d60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d74:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003d78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d82:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003d86:	460b      	mov	r3, r1
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	d055      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d90:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d94:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d98:	d033      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003d9a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003d9e:	d82c      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003da0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003da4:	d02f      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003daa:	d826      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003dac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003db0:	d02b      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003db2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003db6:	d820      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003db8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dbc:	d012      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dc2:	d81a      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d022      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dcc:	d115      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fdd2 	bl	8004980 <RCCEx_PLL2_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003de2:	e015      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de8:	3328      	adds	r3, #40	@ 0x28
 8003dea:	2102      	movs	r1, #2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fe79 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003df2:	4603      	mov	r3, r0
 8003df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003df8:	e00a      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e00:	e006      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e02:	bf00      	nop
 8003e04:	e004      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e18:	4ba0      	ldr	r3, [pc, #640]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e28:	4a9c      	ldr	r2, [pc, #624]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e2e:	e003      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f002 0308 	and.w	r3, r2, #8
 8003e44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e4e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003e52:	460b      	mov	r3, r1
 8003e54:	4313      	orrs	r3, r2
 8003e56:	d01e      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6a:	3328      	adds	r3, #40	@ 0x28
 8003e6c:	2102      	movs	r1, #2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fe38 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003e80:	4b86      	ldr	r3, [pc, #536]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e84:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e90:	4a82      	ldr	r2, [pc, #520]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e92:	430b      	orrs	r3, r1
 8003e94:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9e:	f002 0310 	and.w	r3, r2, #16
 8003ea2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	d01e      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec8:	3328      	adds	r3, #40	@ 0x28
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fe09 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ede:	4b6f      	ldr	r3, [pc, #444]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eee:	4a6b      	ldr	r2, [pc, #428]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003efc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f02:	2300      	movs	r3, #0
 8003f04:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003f06:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	d03e      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f1c:	d022      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003f1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f22:	d81b      	bhi.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f2c:	d00b      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003f2e:	e015      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f34:	3308      	adds	r3, #8
 8003f36:	2100      	movs	r1, #0
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fd21 	bl	8004980 <RCCEx_PLL2_Config>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f44:	e00f      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f4a:	3328      	adds	r3, #40	@ 0x28
 8003f4c:	2102      	movs	r1, #2
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fdc8 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f5a:	e004      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f62:	e000      	b.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10b      	bne.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f7e:	4a47      	ldr	r2, [pc, #284]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f84:	e003      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003f9a:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fa0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	d03b      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fb2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fb6:	d01f      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003fb8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003fbc:	d818      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fc2:	d003      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003fc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fc8:	d007      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003fca:	e011      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fcc:	4b33      	ldr	r3, [pc, #204]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	4a32      	ldr	r2, [pc, #200]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fd8:	e00f      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fde:	3328      	adds	r3, #40	@ 0x28
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fd7e 	bl	8004ae4 <RCCEx_PLL3_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fee:	e004      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ff6:	e000      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d10b      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004002:	4b26      	ldr	r3, [pc, #152]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004004:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004006:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800400a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004012:	4a22      	ldr	r2, [pc, #136]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004014:	430b      	orrs	r3, r1
 8004016:	6553      	str	r3, [r2, #84]	@ 0x54
 8004018:	e003      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800401e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004022:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800402e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004030:	2300      	movs	r3, #0
 8004032:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004034:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004038:	460b      	mov	r3, r1
 800403a:	4313      	orrs	r3, r2
 800403c:	d034      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800404c:	d007      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800404e:	e011      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004050:	4b12      	ldr	r3, [pc, #72]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	4a11      	ldr	r2, [pc, #68]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800405a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800405c:	e00e      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800405e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004062:	3308      	adds	r3, #8
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f000 fc8a 	bl	8004980 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004072:	e003      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800407a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10d      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004084:	4b05      	ldr	r3, [pc, #20]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004088:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800408c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004092:	4a02      	ldr	r2, [pc, #8]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004094:	430b      	orrs	r3, r1
 8004096:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004098:	e006      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800409a:	bf00      	nop
 800409c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80040b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80040b6:	2300      	movs	r3, #0
 80040b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80040ba:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80040be:	460b      	mov	r3, r1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	d00c      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c8:	3328      	adds	r3, #40	@ 0x28
 80040ca:	2102      	movs	r1, #2
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fd09 	bl	8004ae4 <RCCEx_PLL3_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80040ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040ec:	2300      	movs	r3, #0
 80040ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80040f4:	460b      	mov	r3, r1
 80040f6:	4313      	orrs	r3, r2
 80040f8:	d036      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80040fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004100:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004104:	d018      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004106:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800410a:	d811      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800410c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004110:	d014      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004112:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004116:	d80b      	bhi.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004118:	2b00      	cmp	r3, #0
 800411a:	d011      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800411c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004120:	d106      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004122:	4bb7      	ldr	r3, [pc, #732]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004126:	4ab6      	ldr	r2, [pc, #728]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800412c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800412e:	e008      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004138:	bf00      	nop
 800413a:	e002      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800413c:	bf00      	nop
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800414a:	4bad      	ldr	r3, [pc, #692]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004156:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004158:	4aa9      	ldr	r2, [pc, #676]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800415a:	430b      	orrs	r3, r1
 800415c:	6553      	str	r3, [r2, #84]	@ 0x54
 800415e:	e003      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004174:	653b      	str	r3, [r7, #80]	@ 0x50
 8004176:	2300      	movs	r3, #0
 8004178:	657b      	str	r3, [r7, #84]	@ 0x54
 800417a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d009      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004184:	4b9e      	ldr	r3, [pc, #632]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004188:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800418c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004192:	4a9b      	ldr	r2, [pc, #620]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004194:	430b      	orrs	r3, r1
 8004196:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041a6:	2300      	movs	r3, #0
 80041a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041aa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80041ae:	460b      	mov	r3, r1
 80041b0:	4313      	orrs	r3, r2
 80041b2:	d009      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041b4:	4b92      	ldr	r3, [pc, #584]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80041bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041c2:	4a8f      	ldr	r2, [pc, #572]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d6:	2300      	movs	r3, #0
 80041d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041da:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80041de:	460b      	mov	r3, r1
 80041e0:	4313      	orrs	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041e4:	4b86      	ldr	r3, [pc, #536]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	4a85      	ldr	r2, [pc, #532]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041ee:	6113      	str	r3, [r2, #16]
 80041f0:	4b83      	ldr	r3, [pc, #524]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041f2:	6919      	ldr	r1, [r3, #16]
 80041f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041fc:	4a80      	ldr	r2, [pc, #512]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041fe:	430b      	orrs	r3, r1
 8004200:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800420e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004210:	2300      	movs	r3, #0
 8004212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004214:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004218:	460b      	mov	r3, r1
 800421a:	4313      	orrs	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800421e:	4b78      	ldr	r3, [pc, #480]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004222:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422c:	4a74      	ldr	r2, [pc, #464]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800422e:	430b      	orrs	r3, r1
 8004230:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800423e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004240:	2300      	movs	r3, #0
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
 8004244:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004248:	460b      	mov	r3, r1
 800424a:	4313      	orrs	r3, r2
 800424c:	d00a      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800424e:	4b6c      	ldr	r3, [pc, #432]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004252:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425e:	4a68      	ldr	r2, [pc, #416]	@ (8004400 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	2100      	movs	r1, #0
 800426e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004276:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800427a:	460b      	mov	r3, r1
 800427c:	4313      	orrs	r3, r2
 800427e:	d011      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004284:	3308      	adds	r3, #8
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fb79 	bl	8004980 <RCCEx_PLL2_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004294:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	2100      	movs	r1, #0
 80042ae:	6239      	str	r1, [r7, #32]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042ba:	460b      	mov	r3, r1
 80042bc:	4313      	orrs	r3, r2
 80042be:	d011      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c4:	3308      	adds	r3, #8
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fb59 	bl	8004980 <RCCEx_PLL2_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80042d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80042e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	2100      	movs	r1, #0
 80042ee:	61b9      	str	r1, [r7, #24]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	61fb      	str	r3, [r7, #28]
 80042f6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d011      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004304:	3308      	adds	r3, #8
 8004306:	2102      	movs	r1, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fb39 	bl	8004980 <RCCEx_PLL2_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004314:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004320:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	2100      	movs	r1, #0
 800432e:	6139      	str	r1, [r7, #16]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800433a:	460b      	mov	r3, r1
 800433c:	4313      	orrs	r3, r2
 800433e:	d011      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004344:	3328      	adds	r3, #40	@ 0x28
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fbcb 	bl	8004ae4 <RCCEx_PLL3_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004354:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004358:	2b00      	cmp	r3, #0
 800435a:	d003      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004360:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	2100      	movs	r1, #0
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	60fb      	str	r3, [r7, #12]
 8004376:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800437a:	460b      	mov	r3, r1
 800437c:	4313      	orrs	r3, r2
 800437e:	d011      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004380:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004384:	3328      	adds	r3, #40	@ 0x28
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f000 fbab 	bl	8004ae4 <RCCEx_PLL3_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004394:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004398:	2b00      	cmp	r3, #0
 800439a:	d003      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	2100      	movs	r1, #0
 80043ae:	6039      	str	r1, [r7, #0]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043ba:	460b      	mov	r3, r1
 80043bc:	4313      	orrs	r3, r2
 80043be:	d011      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c4:	3328      	adds	r3, #40	@ 0x28
 80043c6:	2102      	movs	r1, #2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fb8b 	bl	8004ae4 <RCCEx_PLL3_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80043e4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80043ec:	2300      	movs	r3, #0
 80043ee:	e000      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80043f8:	46bd      	mov	sp, r7
 80043fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043fe:	bf00      	nop
 8004400:	58024400 	.word	0x58024400

08004404 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004408:	f7fe fe00 	bl	800300c <HAL_RCC_GetHCLKFreq>
 800440c:	4602      	mov	r2, r0
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	4904      	ldr	r1, [pc, #16]	@ (800442c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800441a:	5ccb      	ldrb	r3, [r1, r3]
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004424:	4618      	mov	r0, r3
 8004426:	bd80      	pop	{r7, pc}
 8004428:	58024400 	.word	0x58024400
 800442c:	080278a4 	.word	0x080278a4

08004430 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	@ 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004438:	4ba1      	ldr	r3, [pc, #644]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800443a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004442:	4b9f      	ldr	r3, [pc, #636]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004446:	0b1b      	lsrs	r3, r3, #12
 8004448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800444c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800444e:	4b9c      	ldr	r3, [pc, #624]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800445a:	4b99      	ldr	r3, [pc, #612]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800445c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445e:	08db      	lsrs	r3, r3, #3
 8004460:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	fb02 f303 	mul.w	r3, r2, r3
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 8111 	beq.w	80046a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b02      	cmp	r3, #2
 8004482:	f000 8083 	beq.w	800458c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b02      	cmp	r3, #2
 800448a:	f200 80a1 	bhi.w	80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d056      	beq.n	8004548 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800449a:	e099      	b.n	80045d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800449c:	4b88      	ldr	r3, [pc, #544]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d02d      	beq.n	8004504 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044a8:	4b85      	ldr	r3, [pc, #532]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	08db      	lsrs	r3, r3, #3
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	4a84      	ldr	r2, [pc, #528]	@ (80046c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
 80044b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d2:	4b7b      	ldr	r3, [pc, #492]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004502:	e087      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800450e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80046cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004516:	4b6a      	ldr	r3, [pc, #424]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800451a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004526:	ed97 6a03 	vldr	s12, [r7, #12]
 800452a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800452e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004536:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800453a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004546:	e065      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455a:	4b59      	ldr	r3, [pc, #356]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800455c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800455e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456a:	ed97 6a03 	vldr	s12, [r7, #12]
 800456e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800457e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458a:	e043      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80046d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800459a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459e:	4b48      	ldr	r3, [pc, #288]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ce:	e021      	b.n	8004614 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e2:	4b37      	ldr	r3, [pc, #220]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004612:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004614:	4b2a      	ldr	r3, [pc, #168]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800461e:	ee07 3a90 	vmov	s15, r3
 8004622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004626:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800462a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800462e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004632:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463a:	ee17 2a90 	vmov	r2, s15
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004642:	4b1f      	ldr	r3, [pc, #124]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004654:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004658:	ee37 7a87 	vadd.f32	s14, s15, s14
 800465c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004668:	ee17 2a90 	vmov	r2, s15
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004670:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	0e1b      	lsrs	r3, r3, #24
 8004676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468a:	edd7 6a07 	vldr	s13, [r7, #28]
 800468e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004696:	ee17 2a90 	vmov	r2, s15
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800469e:	e008      	b.n	80046b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]
}
 80046b2:	bf00      	nop
 80046b4:	3724      	adds	r7, #36	@ 0x24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	58024400 	.word	0x58024400
 80046c4:	03d09000 	.word	0x03d09000
 80046c8:	46000000 	.word	0x46000000
 80046cc:	4c742400 	.word	0x4c742400
 80046d0:	4a742400 	.word	0x4a742400
 80046d4:	4af42400 	.word	0x4af42400

080046d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80046d8:	b480      	push	{r7}
 80046da:	b089      	sub	sp, #36	@ 0x24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e4:	f003 0303 	and.w	r3, r3, #3
 80046e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80046ea:	4b9f      	ldr	r3, [pc, #636]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ee:	0d1b      	lsrs	r3, r3, #20
 80046f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80046f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004702:	4b99      	ldr	r3, [pc, #612]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004706:	08db      	lsrs	r3, r3, #3
 8004708:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8111 	beq.w	8004948 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	2b02      	cmp	r3, #2
 800472a:	f000 8083 	beq.w	8004834 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b02      	cmp	r3, #2
 8004732:	f200 80a1 	bhi.w	8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d056      	beq.n	80047f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004742:	e099      	b.n	8004878 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004744:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d02d      	beq.n	80047ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004750:	4b85      	ldr	r3, [pc, #532]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	08db      	lsrs	r3, r3, #3
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	4a84      	ldr	r2, [pc, #528]	@ (800496c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800475c:	fa22 f303 	lsr.w	r3, r2, r3
 8004760:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	ee07 3a90 	vmov	s15, r3
 8004768:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477a:	4b7b      	ldr	r3, [pc, #492]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004782:	ee07 3a90 	vmov	s15, r3
 8004786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478a:	ed97 6a03 	vldr	s12, [r7, #12]
 800478e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800479e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047aa:	e087      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004974 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047be:	4b6a      	ldr	r3, [pc, #424]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ee:	e065      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004802:	4b59      	ldr	r3, [pc, #356]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004812:	ed97 6a03 	vldr	s12, [r7, #12]
 8004816:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800481a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004832:	e043      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800497c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004846:	4b48      	ldr	r3, [pc, #288]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004856:	ed97 6a03 	vldr	s12, [r7, #12]
 800485a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800485e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800486a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004876:	e021      	b.n	80048bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004882:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800488a:	4b37      	ldr	r3, [pc, #220]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800489a:	ed97 6a03 	vldr	s12, [r7, #12]
 800489e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80048bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c0:	0a5b      	lsrs	r3, r3, #9
 80048c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e2:	ee17 2a90 	vmov	r2, s15
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80048ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ee:	0c1b      	lsrs	r3, r3, #16
 80048f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004904:	edd7 6a07 	vldr	s13, [r7, #28]
 8004908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004910:	ee17 2a90 	vmov	r2, s15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004918:	4b13      	ldr	r3, [pc, #76]	@ (8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	0e1b      	lsrs	r3, r3, #24
 800491e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800492e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004932:	edd7 6a07 	vldr	s13, [r7, #28]
 8004936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493e:	ee17 2a90 	vmov	r2, s15
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004946:	e008      	b.n	800495a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
}
 800495a:	bf00      	nop
 800495c:	3724      	adds	r7, #36	@ 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	58024400 	.word	0x58024400
 800496c:	03d09000 	.word	0x03d09000
 8004970:	46000000 	.word	0x46000000
 8004974:	4c742400 	.word	0x4c742400
 8004978:	4a742400 	.word	0x4a742400
 800497c:	4af42400 	.word	0x4af42400

08004980 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800498e:	4b53      	ldr	r3, [pc, #332]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b03      	cmp	r3, #3
 8004998:	d101      	bne.n	800499e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e099      	b.n	8004ad2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800499e:	4b4f      	ldr	r3, [pc, #316]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a4e      	ldr	r2, [pc, #312]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049aa:	f7fc fcc5 	bl	8001338 <HAL_GetTick>
 80049ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049b2:	f7fc fcc1 	bl	8001338 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e086      	b.n	8004ad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049c4:	4b45      	ldr	r3, [pc, #276]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049d0:	4b42      	ldr	r3, [pc, #264]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	493f      	ldr	r1, [pc, #252]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	025b      	lsls	r3, r3, #9
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	041b      	lsls	r3, r3, #16
 8004a02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	061b      	lsls	r3, r3, #24
 8004a10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a14:	4931      	ldr	r1, [pc, #196]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a1a:	4b30      	ldr	r3, [pc, #192]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	492d      	ldr	r1, [pc, #180]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a30:	f023 0220 	bic.w	r2, r3, #32
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	4928      	ldr	r1, [pc, #160]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a3e:	4b27      	ldr	r3, [pc, #156]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	4a26      	ldr	r2, [pc, #152]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a44:	f023 0310 	bic.w	r3, r3, #16
 8004a48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a4a:	4b24      	ldr	r3, [pc, #144]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ae0 <RCCEx_PLL2_Config+0x160>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	69d2      	ldr	r2, [r2, #28]
 8004a56:	00d2      	lsls	r2, r2, #3
 8004a58:	4920      	ldr	r1, [pc, #128]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a62:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a64:	f043 0310 	orr.w	r3, r3, #16
 8004a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d106      	bne.n	8004a7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a70:	4b1a      	ldr	r3, [pc, #104]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	4a19      	ldr	r2, [pc, #100]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a7c:	e00f      	b.n	8004a9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a84:	4b15      	ldr	r3, [pc, #84]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	4a14      	ldr	r2, [pc, #80]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004a90:	e005      	b.n	8004a9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a92:	4b12      	ldr	r3, [pc, #72]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a96:	4a11      	ldr	r2, [pc, #68]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004a98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004aa8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fc fc45 	bl	8001338 <HAL_GetTick>
 8004aae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ab2:	f7fc fc41 	bl	8001338 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e006      	b.n	8004ad2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ac4:	4b05      	ldr	r3, [pc, #20]	@ (8004adc <RCCEx_PLL2_Config+0x15c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	ffff0007 	.word	0xffff0007

08004ae4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004af2:	4b53      	ldr	r3, [pc, #332]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d101      	bne.n	8004b02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e099      	b.n	8004c36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b02:	4b4f      	ldr	r3, [pc, #316]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a4e      	ldr	r2, [pc, #312]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b0e:	f7fc fc13 	bl	8001338 <HAL_GetTick>
 8004b12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b14:	e008      	b.n	8004b28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b16:	f7fc fc0f 	bl	8001338 <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d901      	bls.n	8004b28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e086      	b.n	8004c36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b28:	4b45      	ldr	r3, [pc, #276]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f0      	bne.n	8004b16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b34:	4b42      	ldr	r3, [pc, #264]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	051b      	lsls	r3, r3, #20
 8004b42:	493f      	ldr	r1, [pc, #252]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	025b      	lsls	r3, r3, #9
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	041b      	lsls	r3, r3, #16
 8004b66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b78:	4931      	ldr	r1, [pc, #196]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b7e:	4b30      	ldr	r3, [pc, #192]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	492d      	ldr	r1, [pc, #180]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b90:	4b2b      	ldr	r3, [pc, #172]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	4928      	ldr	r1, [pc, #160]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ba2:	4b27      	ldr	r3, [pc, #156]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	4a26      	ldr	r2, [pc, #152]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bae:	4b24      	ldr	r3, [pc, #144]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bb2:	4b24      	ldr	r3, [pc, #144]	@ (8004c44 <RCCEx_PLL3_Config+0x160>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	69d2      	ldr	r2, [r2, #28]
 8004bba:	00d2      	lsls	r2, r2, #3
 8004bbc:	4920      	ldr	r1, [pc, #128]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	4a19      	ldr	r2, [pc, #100]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004bde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004be0:	e00f      	b.n	8004c02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d106      	bne.n	8004bf6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004be8:	4b15      	ldr	r3, [pc, #84]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	4a14      	ldr	r2, [pc, #80]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004bf4:	e005      	b.n	8004c02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bf6:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfa:	4a11      	ldr	r2, [pc, #68]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c02:	4b0f      	ldr	r3, [pc, #60]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a0e      	ldr	r2, [pc, #56]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004c08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0e:	f7fc fb93 	bl	8001338 <HAL_GetTick>
 8004c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c14:	e008      	b.n	8004c28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c16:	f7fc fb8f 	bl	8001338 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e006      	b.n	8004c36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c28:	4b05      	ldr	r3, [pc, #20]	@ (8004c40 <RCCEx_PLL3_Config+0x15c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0f0      	beq.n	8004c16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
 8004c44:	ffff0007 	.word	0xffff0007

08004c48 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e092      	b.n	8004d80 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	7a5b      	ldrb	r3, [r3, #9]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc f8be 	bl	8000dec <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0204 	bic.w	r2, r2, #4
 8004c84:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8004d88 <HAL_RNG_Init+0x140>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6852      	ldr	r2, [r2, #4]
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004c9e:	601a      	str	r2, [r3, #0]
#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a39      	ldr	r2, [pc, #228]	@ (8004d8c <HAL_RNG_Init+0x144>)
 8004ca6:	611a      	str	r2, [r3, #16]
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f247 2274 	movw	r2, #29300	@ 0x7274
 8004cb0:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cc2:	f7fc fb39 	bl	8001338 <HAL_GetTick>
 8004cc6:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004cc8:	e016      	b.n	8004cf8 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004cca:	f7fc fb35 	bl	8001338 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d90f      	bls.n	8004cf8 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce6:	d107      	bne.n	8004cf8 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e043      	b.n	8004d80 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d06:	d0e0      	beq.n	8004cca <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0204 	orr.w	r2, r2, #4
 8004d16:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d22:	2b40      	cmp	r3, #64	@ 0x40
 8004d24:	d104      	bne.n	8004d30 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2204      	movs	r2, #4
 8004d2a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e027      	b.n	8004d80 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004d30:	f7fc fb02 	bl	8001338 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004d36:	e015      	b.n	8004d64 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004d38:	f7fc fafe 	bl	8001338 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d90e      	bls.n	8004d64 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d007      	beq.n	8004d64 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2204      	movs	r2, #4
 8004d58:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e00d      	b.n	8004d80 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d1e2      	bne.n	8004d38 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	bfffffdf 	.word	0xbfffffdf
 8004d8c:	17590abc 	.word	0x17590abc

08004d90 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	7a1b      	ldrb	r3, [r3, #8]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <HAL_RNG_GenerateRandomNumber+0x1a>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e068      	b.n	8004e7c <HAL_RNG_GenerateRandomNumber+0xec>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	7a5b      	ldrb	r3, [r3, #9]
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d157      	bne.n	8004e6a <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dca:	2b40      	cmp	r3, #64	@ 0x40
 8004dcc:	d10f      	bne.n	8004dee <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2208      	movs	r2, #8
 8004dd2:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f85f 	bl	8004e98 <RNG_RecoverSeedError>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d104      	bne.n	8004dee <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	60da      	str	r2, [r3, #12]
        return status;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	e046      	b.n	8004e7c <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dee:	f7fc faa3 	bl	8001338 <HAL_GetTick>
 8004df2:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004df4:	e018      	b.n	8004e28 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004df6:	f7fc fa9f 	bl	8001338 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d911      	bls.n	8004e28 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d00a      	beq.n	8004e28 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e029      	b.n	8004e7c <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d1df      	bne.n	8004df6 <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4a:	2b40      	cmp	r3, #64	@ 0x40
 8004e4c:	d105      	bne.n	8004e5a <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2208      	movs	r2, #8
 8004e52:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
 8004e58:	e003      	b.n	8004e62 <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	725a      	strb	r2, [r3, #9]
 8004e68:	e004      	b.n	8004e74 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	721a      	strb	r2, [r3, #8]

  return status;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d008      	beq.n	8004ec4 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ec0:	605a      	str	r2, [r3, #4]
 8004ec2:	e05f      	b.n	8004f84 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004ed2:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004ee2:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d110      	bne.n	8004f16 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f043 0202 	orr.w	r2, r3, #2
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ffb9 	bl	8004e84 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03d      	b.n	8004f92 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f24:	d0e0      	beq.n	8004ee8 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f30:	2b40      	cmp	r3, #64	@ 0x40
 8004f32:	d107      	bne.n	8004f44 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f42:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 8004f44:	2302      	movs	r3, #2
 8004f46:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d110      	bne.n	8004f76 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f043 0202 	orr.w	r2, r3, #2
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ff89 	bl	8004e84 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e00d      	b.n	8004f92 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d0e1      	beq.n	8004f48 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f023 0208 	bic.w	r2, r3, #8
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e042      	b.n	8005032 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fb ff4e 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2224      	movs	r2, #36	@ 0x24
 8004fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0201 	bic.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 ff23 	bl	8005e30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8b4 	bl	8005158 <UART_SetConfig>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e01b      	b.n	8005032 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005008:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005018:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0201 	orr.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 ffa2 	bl	8005f74 <UART_CheckIdleState>
 8005030:	4603      	mov	r3, r0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}

0800503a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800503a:	b580      	push	{r7, lr}
 800503c:	b08a      	sub	sp, #40	@ 0x28
 800503e:	af02      	add	r7, sp, #8
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	603b      	str	r3, [r7, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005050:	2b20      	cmp	r3, #32
 8005052:	d17b      	bne.n	800514c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <HAL_UART_Transmit+0x26>
 800505a:	88fb      	ldrh	r3, [r7, #6]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e074      	b.n	800514e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2221      	movs	r2, #33	@ 0x21
 8005070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005074:	f7fc f960 	bl	8001338 <HAL_GetTick>
 8005078:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	88fa      	ldrh	r2, [r7, #6]
 800507e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	88fa      	ldrh	r2, [r7, #6]
 8005086:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005092:	d108      	bne.n	80050a6 <HAL_UART_Transmit+0x6c>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d104      	bne.n	80050a6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	61bb      	str	r3, [r7, #24]
 80050a4:	e003      	b.n	80050ae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050ae:	e030      	b.n	8005112 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2200      	movs	r2, #0
 80050b8:	2180      	movs	r1, #128	@ 0x80
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f001 f804 	bl	80060c8 <UART_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e03d      	b.n	800514e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10b      	bne.n	80050f0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	3302      	adds	r3, #2
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e007      	b.n	8005100 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	781a      	ldrb	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	3301      	adds	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1c8      	bne.n	80050b0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2200      	movs	r2, #0
 8005126:	2140      	movs	r1, #64	@ 0x40
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 ffcd 	bl	80060c8 <UART_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e006      	b.n	800514e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	3720      	adds	r7, #32
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800515c:	b092      	sub	sp, #72	@ 0x48
 800515e:	af00      	add	r7, sp, #0
 8005160:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	431a      	orrs	r2, r3
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	695b      	ldr	r3, [r3, #20]
 8005176:	431a      	orrs	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	4313      	orrs	r3, r2
 800517e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	4bbe      	ldr	r3, [pc, #760]	@ (8005480 <UART_SetConfig+0x328>)
 8005188:	4013      	ands	r3, r2
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	6812      	ldr	r2, [r2, #0]
 800518e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005190:	430b      	orrs	r3, r1
 8005192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4ab3      	ldr	r2, [pc, #716]	@ (8005484 <UART_SetConfig+0x32c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051c0:	4313      	orrs	r3, r2
 80051c2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	4baf      	ldr	r3, [pc, #700]	@ (8005488 <UART_SetConfig+0x330>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051de:	f023 010f 	bic.w	r1, r3, #15
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4aa6      	ldr	r2, [pc, #664]	@ (800548c <UART_SetConfig+0x334>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d177      	bne.n	80052e8 <UART_SetConfig+0x190>
 80051f8:	4ba5      	ldr	r3, [pc, #660]	@ (8005490 <UART_SetConfig+0x338>)
 80051fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005200:	2b28      	cmp	r3, #40	@ 0x28
 8005202:	d86d      	bhi.n	80052e0 <UART_SetConfig+0x188>
 8005204:	a201      	add	r2, pc, #4	@ (adr r2, 800520c <UART_SetConfig+0xb4>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	080052b1 	.word	0x080052b1
 8005210:	080052e1 	.word	0x080052e1
 8005214:	080052e1 	.word	0x080052e1
 8005218:	080052e1 	.word	0x080052e1
 800521c:	080052e1 	.word	0x080052e1
 8005220:	080052e1 	.word	0x080052e1
 8005224:	080052e1 	.word	0x080052e1
 8005228:	080052e1 	.word	0x080052e1
 800522c:	080052b9 	.word	0x080052b9
 8005230:	080052e1 	.word	0x080052e1
 8005234:	080052e1 	.word	0x080052e1
 8005238:	080052e1 	.word	0x080052e1
 800523c:	080052e1 	.word	0x080052e1
 8005240:	080052e1 	.word	0x080052e1
 8005244:	080052e1 	.word	0x080052e1
 8005248:	080052e1 	.word	0x080052e1
 800524c:	080052c1 	.word	0x080052c1
 8005250:	080052e1 	.word	0x080052e1
 8005254:	080052e1 	.word	0x080052e1
 8005258:	080052e1 	.word	0x080052e1
 800525c:	080052e1 	.word	0x080052e1
 8005260:	080052e1 	.word	0x080052e1
 8005264:	080052e1 	.word	0x080052e1
 8005268:	080052e1 	.word	0x080052e1
 800526c:	080052c9 	.word	0x080052c9
 8005270:	080052e1 	.word	0x080052e1
 8005274:	080052e1 	.word	0x080052e1
 8005278:	080052e1 	.word	0x080052e1
 800527c:	080052e1 	.word	0x080052e1
 8005280:	080052e1 	.word	0x080052e1
 8005284:	080052e1 	.word	0x080052e1
 8005288:	080052e1 	.word	0x080052e1
 800528c:	080052d1 	.word	0x080052d1
 8005290:	080052e1 	.word	0x080052e1
 8005294:	080052e1 	.word	0x080052e1
 8005298:	080052e1 	.word	0x080052e1
 800529c:	080052e1 	.word	0x080052e1
 80052a0:	080052e1 	.word	0x080052e1
 80052a4:	080052e1 	.word	0x080052e1
 80052a8:	080052e1 	.word	0x080052e1
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	2301      	movs	r3, #1
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b6:	e326      	b.n	8005906 <UART_SetConfig+0x7ae>
 80052b8:	2304      	movs	r3, #4
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052be:	e322      	b.n	8005906 <UART_SetConfig+0x7ae>
 80052c0:	2308      	movs	r3, #8
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c6:	e31e      	b.n	8005906 <UART_SetConfig+0x7ae>
 80052c8:	2310      	movs	r3, #16
 80052ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ce:	e31a      	b.n	8005906 <UART_SetConfig+0x7ae>
 80052d0:	2320      	movs	r3, #32
 80052d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d6:	e316      	b.n	8005906 <UART_SetConfig+0x7ae>
 80052d8:	2340      	movs	r3, #64	@ 0x40
 80052da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052de:	e312      	b.n	8005906 <UART_SetConfig+0x7ae>
 80052e0:	2380      	movs	r3, #128	@ 0x80
 80052e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e6:	e30e      	b.n	8005906 <UART_SetConfig+0x7ae>
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a69      	ldr	r2, [pc, #420]	@ (8005494 <UART_SetConfig+0x33c>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d130      	bne.n	8005354 <UART_SetConfig+0x1fc>
 80052f2:	4b67      	ldr	r3, [pc, #412]	@ (8005490 <UART_SetConfig+0x338>)
 80052f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d826      	bhi.n	800534c <UART_SetConfig+0x1f4>
 80052fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <UART_SetConfig+0x1ac>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	0800531d 	.word	0x0800531d
 8005308:	08005325 	.word	0x08005325
 800530c:	0800532d 	.word	0x0800532d
 8005310:	08005335 	.word	0x08005335
 8005314:	0800533d 	.word	0x0800533d
 8005318:	08005345 	.word	0x08005345
 800531c:	2300      	movs	r3, #0
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e2f0      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005324:	2304      	movs	r3, #4
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532a:	e2ec      	b.n	8005906 <UART_SetConfig+0x7ae>
 800532c:	2308      	movs	r3, #8
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005332:	e2e8      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005334:	2310      	movs	r3, #16
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533a:	e2e4      	b.n	8005906 <UART_SetConfig+0x7ae>
 800533c:	2320      	movs	r3, #32
 800533e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005342:	e2e0      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005344:	2340      	movs	r3, #64	@ 0x40
 8005346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534a:	e2dc      	b.n	8005906 <UART_SetConfig+0x7ae>
 800534c:	2380      	movs	r3, #128	@ 0x80
 800534e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005352:	e2d8      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a4f      	ldr	r2, [pc, #316]	@ (8005498 <UART_SetConfig+0x340>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d130      	bne.n	80053c0 <UART_SetConfig+0x268>
 800535e:	4b4c      	ldr	r3, [pc, #304]	@ (8005490 <UART_SetConfig+0x338>)
 8005360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005362:	f003 0307 	and.w	r3, r3, #7
 8005366:	2b05      	cmp	r3, #5
 8005368:	d826      	bhi.n	80053b8 <UART_SetConfig+0x260>
 800536a:	a201      	add	r2, pc, #4	@ (adr r2, 8005370 <UART_SetConfig+0x218>)
 800536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005370:	08005389 	.word	0x08005389
 8005374:	08005391 	.word	0x08005391
 8005378:	08005399 	.word	0x08005399
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053a9 	.word	0x080053a9
 8005384:	080053b1 	.word	0x080053b1
 8005388:	2300      	movs	r3, #0
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e2ba      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005390:	2304      	movs	r3, #4
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005396:	e2b6      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005398:	2308      	movs	r3, #8
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539e:	e2b2      	b.n	8005906 <UART_SetConfig+0x7ae>
 80053a0:	2310      	movs	r3, #16
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a6:	e2ae      	b.n	8005906 <UART_SetConfig+0x7ae>
 80053a8:	2320      	movs	r3, #32
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e2aa      	b.n	8005906 <UART_SetConfig+0x7ae>
 80053b0:	2340      	movs	r3, #64	@ 0x40
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e2a6      	b.n	8005906 <UART_SetConfig+0x7ae>
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e2a2      	b.n	8005906 <UART_SetConfig+0x7ae>
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a35      	ldr	r2, [pc, #212]	@ (800549c <UART_SetConfig+0x344>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d130      	bne.n	800542c <UART_SetConfig+0x2d4>
 80053ca:	4b31      	ldr	r3, [pc, #196]	@ (8005490 <UART_SetConfig+0x338>)
 80053cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	2b05      	cmp	r3, #5
 80053d4:	d826      	bhi.n	8005424 <UART_SetConfig+0x2cc>
 80053d6:	a201      	add	r2, pc, #4	@ (adr r2, 80053dc <UART_SetConfig+0x284>)
 80053d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053dc:	080053f5 	.word	0x080053f5
 80053e0:	080053fd 	.word	0x080053fd
 80053e4:	08005405 	.word	0x08005405
 80053e8:	0800540d 	.word	0x0800540d
 80053ec:	08005415 	.word	0x08005415
 80053f0:	0800541d 	.word	0x0800541d
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e284      	b.n	8005906 <UART_SetConfig+0x7ae>
 80053fc:	2304      	movs	r3, #4
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005402:	e280      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005404:	2308      	movs	r3, #8
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540a:	e27c      	b.n	8005906 <UART_SetConfig+0x7ae>
 800540c:	2310      	movs	r3, #16
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005412:	e278      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005414:	2320      	movs	r3, #32
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e274      	b.n	8005906 <UART_SetConfig+0x7ae>
 800541c:	2340      	movs	r3, #64	@ 0x40
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e270      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005424:	2380      	movs	r3, #128	@ 0x80
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e26c      	b.n	8005906 <UART_SetConfig+0x7ae>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1b      	ldr	r2, [pc, #108]	@ (80054a0 <UART_SetConfig+0x348>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d142      	bne.n	80054bc <UART_SetConfig+0x364>
 8005436:	4b16      	ldr	r3, [pc, #88]	@ (8005490 <UART_SetConfig+0x338>)
 8005438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	2b05      	cmp	r3, #5
 8005440:	d838      	bhi.n	80054b4 <UART_SetConfig+0x35c>
 8005442:	a201      	add	r2, pc, #4	@ (adr r2, 8005448 <UART_SetConfig+0x2f0>)
 8005444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005448:	08005461 	.word	0x08005461
 800544c:	08005469 	.word	0x08005469
 8005450:	08005471 	.word	0x08005471
 8005454:	08005479 	.word	0x08005479
 8005458:	080054a5 	.word	0x080054a5
 800545c:	080054ad 	.word	0x080054ad
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e24e      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005468:	2304      	movs	r3, #4
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546e:	e24a      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005470:	2308      	movs	r3, #8
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005476:	e246      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547e:	e242      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005480:	cfff69f3 	.word	0xcfff69f3
 8005484:	58000c00 	.word	0x58000c00
 8005488:	11fff4ff 	.word	0x11fff4ff
 800548c:	40011000 	.word	0x40011000
 8005490:	58024400 	.word	0x58024400
 8005494:	40004400 	.word	0x40004400
 8005498:	40004800 	.word	0x40004800
 800549c:	40004c00 	.word	0x40004c00
 80054a0:	40005000 	.word	0x40005000
 80054a4:	2320      	movs	r3, #32
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054aa:	e22c      	b.n	8005906 <UART_SetConfig+0x7ae>
 80054ac:	2340      	movs	r3, #64	@ 0x40
 80054ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b2:	e228      	b.n	8005906 <UART_SetConfig+0x7ae>
 80054b4:	2380      	movs	r3, #128	@ 0x80
 80054b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ba:	e224      	b.n	8005906 <UART_SetConfig+0x7ae>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4ab1      	ldr	r2, [pc, #708]	@ (8005788 <UART_SetConfig+0x630>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d176      	bne.n	80055b4 <UART_SetConfig+0x45c>
 80054c6:	4bb1      	ldr	r3, [pc, #708]	@ (800578c <UART_SetConfig+0x634>)
 80054c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ce:	2b28      	cmp	r3, #40	@ 0x28
 80054d0:	d86c      	bhi.n	80055ac <UART_SetConfig+0x454>
 80054d2:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <UART_SetConfig+0x380>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	0800557d 	.word	0x0800557d
 80054dc:	080055ad 	.word	0x080055ad
 80054e0:	080055ad 	.word	0x080055ad
 80054e4:	080055ad 	.word	0x080055ad
 80054e8:	080055ad 	.word	0x080055ad
 80054ec:	080055ad 	.word	0x080055ad
 80054f0:	080055ad 	.word	0x080055ad
 80054f4:	080055ad 	.word	0x080055ad
 80054f8:	08005585 	.word	0x08005585
 80054fc:	080055ad 	.word	0x080055ad
 8005500:	080055ad 	.word	0x080055ad
 8005504:	080055ad 	.word	0x080055ad
 8005508:	080055ad 	.word	0x080055ad
 800550c:	080055ad 	.word	0x080055ad
 8005510:	080055ad 	.word	0x080055ad
 8005514:	080055ad 	.word	0x080055ad
 8005518:	0800558d 	.word	0x0800558d
 800551c:	080055ad 	.word	0x080055ad
 8005520:	080055ad 	.word	0x080055ad
 8005524:	080055ad 	.word	0x080055ad
 8005528:	080055ad 	.word	0x080055ad
 800552c:	080055ad 	.word	0x080055ad
 8005530:	080055ad 	.word	0x080055ad
 8005534:	080055ad 	.word	0x080055ad
 8005538:	08005595 	.word	0x08005595
 800553c:	080055ad 	.word	0x080055ad
 8005540:	080055ad 	.word	0x080055ad
 8005544:	080055ad 	.word	0x080055ad
 8005548:	080055ad 	.word	0x080055ad
 800554c:	080055ad 	.word	0x080055ad
 8005550:	080055ad 	.word	0x080055ad
 8005554:	080055ad 	.word	0x080055ad
 8005558:	0800559d 	.word	0x0800559d
 800555c:	080055ad 	.word	0x080055ad
 8005560:	080055ad 	.word	0x080055ad
 8005564:	080055ad 	.word	0x080055ad
 8005568:	080055ad 	.word	0x080055ad
 800556c:	080055ad 	.word	0x080055ad
 8005570:	080055ad 	.word	0x080055ad
 8005574:	080055ad 	.word	0x080055ad
 8005578:	080055a5 	.word	0x080055a5
 800557c:	2301      	movs	r3, #1
 800557e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005582:	e1c0      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005584:	2304      	movs	r3, #4
 8005586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558a:	e1bc      	b.n	8005906 <UART_SetConfig+0x7ae>
 800558c:	2308      	movs	r3, #8
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005592:	e1b8      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005594:	2310      	movs	r3, #16
 8005596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559a:	e1b4      	b.n	8005906 <UART_SetConfig+0x7ae>
 800559c:	2320      	movs	r3, #32
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a2:	e1b0      	b.n	8005906 <UART_SetConfig+0x7ae>
 80055a4:	2340      	movs	r3, #64	@ 0x40
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055aa:	e1ac      	b.n	8005906 <UART_SetConfig+0x7ae>
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e1a8      	b.n	8005906 <UART_SetConfig+0x7ae>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a75      	ldr	r2, [pc, #468]	@ (8005790 <UART_SetConfig+0x638>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d130      	bne.n	8005620 <UART_SetConfig+0x4c8>
 80055be:	4b73      	ldr	r3, [pc, #460]	@ (800578c <UART_SetConfig+0x634>)
 80055c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c2:	f003 0307 	and.w	r3, r3, #7
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d826      	bhi.n	8005618 <UART_SetConfig+0x4c0>
 80055ca:	a201      	add	r2, pc, #4	@ (adr r2, 80055d0 <UART_SetConfig+0x478>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	080055e9 	.word	0x080055e9
 80055d4:	080055f1 	.word	0x080055f1
 80055d8:	080055f9 	.word	0x080055f9
 80055dc:	08005601 	.word	0x08005601
 80055e0:	08005609 	.word	0x08005609
 80055e4:	08005611 	.word	0x08005611
 80055e8:	2300      	movs	r3, #0
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ee:	e18a      	b.n	8005906 <UART_SetConfig+0x7ae>
 80055f0:	2304      	movs	r3, #4
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e186      	b.n	8005906 <UART_SetConfig+0x7ae>
 80055f8:	2308      	movs	r3, #8
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e182      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005600:	2310      	movs	r3, #16
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e17e      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005608:	2320      	movs	r3, #32
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e17a      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005610:	2340      	movs	r3, #64	@ 0x40
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005616:	e176      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005618:	2380      	movs	r3, #128	@ 0x80
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e172      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a5b      	ldr	r2, [pc, #364]	@ (8005794 <UART_SetConfig+0x63c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d130      	bne.n	800568c <UART_SetConfig+0x534>
 800562a:	4b58      	ldr	r3, [pc, #352]	@ (800578c <UART_SetConfig+0x634>)
 800562c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	2b05      	cmp	r3, #5
 8005634:	d826      	bhi.n	8005684 <UART_SetConfig+0x52c>
 8005636:	a201      	add	r2, pc, #4	@ (adr r2, 800563c <UART_SetConfig+0x4e4>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005655 	.word	0x08005655
 8005640:	0800565d 	.word	0x0800565d
 8005644:	08005665 	.word	0x08005665
 8005648:	0800566d 	.word	0x0800566d
 800564c:	08005675 	.word	0x08005675
 8005650:	0800567d 	.word	0x0800567d
 8005654:	2300      	movs	r3, #0
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e154      	b.n	8005906 <UART_SetConfig+0x7ae>
 800565c:	2304      	movs	r3, #4
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e150      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005664:	2308      	movs	r3, #8
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e14c      	b.n	8005906 <UART_SetConfig+0x7ae>
 800566c:	2310      	movs	r3, #16
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e148      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005674:	2320      	movs	r3, #32
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e144      	b.n	8005906 <UART_SetConfig+0x7ae>
 800567c:	2340      	movs	r3, #64	@ 0x40
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e140      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005684:	2380      	movs	r3, #128	@ 0x80
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e13c      	b.n	8005906 <UART_SetConfig+0x7ae>
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a41      	ldr	r2, [pc, #260]	@ (8005798 <UART_SetConfig+0x640>)
 8005692:	4293      	cmp	r3, r2
 8005694:	f040 8082 	bne.w	800579c <UART_SetConfig+0x644>
 8005698:	4b3c      	ldr	r3, [pc, #240]	@ (800578c <UART_SetConfig+0x634>)
 800569a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800569c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056a0:	2b28      	cmp	r3, #40	@ 0x28
 80056a2:	d86d      	bhi.n	8005780 <UART_SetConfig+0x628>
 80056a4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ac <UART_SetConfig+0x554>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	08005751 	.word	0x08005751
 80056b0:	08005781 	.word	0x08005781
 80056b4:	08005781 	.word	0x08005781
 80056b8:	08005781 	.word	0x08005781
 80056bc:	08005781 	.word	0x08005781
 80056c0:	08005781 	.word	0x08005781
 80056c4:	08005781 	.word	0x08005781
 80056c8:	08005781 	.word	0x08005781
 80056cc:	08005759 	.word	0x08005759
 80056d0:	08005781 	.word	0x08005781
 80056d4:	08005781 	.word	0x08005781
 80056d8:	08005781 	.word	0x08005781
 80056dc:	08005781 	.word	0x08005781
 80056e0:	08005781 	.word	0x08005781
 80056e4:	08005781 	.word	0x08005781
 80056e8:	08005781 	.word	0x08005781
 80056ec:	08005761 	.word	0x08005761
 80056f0:	08005781 	.word	0x08005781
 80056f4:	08005781 	.word	0x08005781
 80056f8:	08005781 	.word	0x08005781
 80056fc:	08005781 	.word	0x08005781
 8005700:	08005781 	.word	0x08005781
 8005704:	08005781 	.word	0x08005781
 8005708:	08005781 	.word	0x08005781
 800570c:	08005769 	.word	0x08005769
 8005710:	08005781 	.word	0x08005781
 8005714:	08005781 	.word	0x08005781
 8005718:	08005781 	.word	0x08005781
 800571c:	08005781 	.word	0x08005781
 8005720:	08005781 	.word	0x08005781
 8005724:	08005781 	.word	0x08005781
 8005728:	08005781 	.word	0x08005781
 800572c:	08005771 	.word	0x08005771
 8005730:	08005781 	.word	0x08005781
 8005734:	08005781 	.word	0x08005781
 8005738:	08005781 	.word	0x08005781
 800573c:	08005781 	.word	0x08005781
 8005740:	08005781 	.word	0x08005781
 8005744:	08005781 	.word	0x08005781
 8005748:	08005781 	.word	0x08005781
 800574c:	08005779 	.word	0x08005779
 8005750:	2301      	movs	r3, #1
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005756:	e0d6      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005758:	2304      	movs	r3, #4
 800575a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575e:	e0d2      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005760:	2308      	movs	r3, #8
 8005762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005766:	e0ce      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005768:	2310      	movs	r3, #16
 800576a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576e:	e0ca      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005770:	2320      	movs	r3, #32
 8005772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005776:	e0c6      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005778:	2340      	movs	r3, #64	@ 0x40
 800577a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577e:	e0c2      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005780:	2380      	movs	r3, #128	@ 0x80
 8005782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005786:	e0be      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005788:	40011400 	.word	0x40011400
 800578c:	58024400 	.word	0x58024400
 8005790:	40007800 	.word	0x40007800
 8005794:	40007c00 	.word	0x40007c00
 8005798:	40011800 	.word	0x40011800
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4aad      	ldr	r2, [pc, #692]	@ (8005a58 <UART_SetConfig+0x900>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d176      	bne.n	8005894 <UART_SetConfig+0x73c>
 80057a6:	4bad      	ldr	r3, [pc, #692]	@ (8005a5c <UART_SetConfig+0x904>)
 80057a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057ae:	2b28      	cmp	r3, #40	@ 0x28
 80057b0:	d86c      	bhi.n	800588c <UART_SetConfig+0x734>
 80057b2:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <UART_SetConfig+0x660>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	0800585d 	.word	0x0800585d
 80057bc:	0800588d 	.word	0x0800588d
 80057c0:	0800588d 	.word	0x0800588d
 80057c4:	0800588d 	.word	0x0800588d
 80057c8:	0800588d 	.word	0x0800588d
 80057cc:	0800588d 	.word	0x0800588d
 80057d0:	0800588d 	.word	0x0800588d
 80057d4:	0800588d 	.word	0x0800588d
 80057d8:	08005865 	.word	0x08005865
 80057dc:	0800588d 	.word	0x0800588d
 80057e0:	0800588d 	.word	0x0800588d
 80057e4:	0800588d 	.word	0x0800588d
 80057e8:	0800588d 	.word	0x0800588d
 80057ec:	0800588d 	.word	0x0800588d
 80057f0:	0800588d 	.word	0x0800588d
 80057f4:	0800588d 	.word	0x0800588d
 80057f8:	0800586d 	.word	0x0800586d
 80057fc:	0800588d 	.word	0x0800588d
 8005800:	0800588d 	.word	0x0800588d
 8005804:	0800588d 	.word	0x0800588d
 8005808:	0800588d 	.word	0x0800588d
 800580c:	0800588d 	.word	0x0800588d
 8005810:	0800588d 	.word	0x0800588d
 8005814:	0800588d 	.word	0x0800588d
 8005818:	08005875 	.word	0x08005875
 800581c:	0800588d 	.word	0x0800588d
 8005820:	0800588d 	.word	0x0800588d
 8005824:	0800588d 	.word	0x0800588d
 8005828:	0800588d 	.word	0x0800588d
 800582c:	0800588d 	.word	0x0800588d
 8005830:	0800588d 	.word	0x0800588d
 8005834:	0800588d 	.word	0x0800588d
 8005838:	0800587d 	.word	0x0800587d
 800583c:	0800588d 	.word	0x0800588d
 8005840:	0800588d 	.word	0x0800588d
 8005844:	0800588d 	.word	0x0800588d
 8005848:	0800588d 	.word	0x0800588d
 800584c:	0800588d 	.word	0x0800588d
 8005850:	0800588d 	.word	0x0800588d
 8005854:	0800588d 	.word	0x0800588d
 8005858:	08005885 	.word	0x08005885
 800585c:	2301      	movs	r3, #1
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005862:	e050      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005864:	2304      	movs	r3, #4
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586a:	e04c      	b.n	8005906 <UART_SetConfig+0x7ae>
 800586c:	2308      	movs	r3, #8
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005872:	e048      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005874:	2310      	movs	r3, #16
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587a:	e044      	b.n	8005906 <UART_SetConfig+0x7ae>
 800587c:	2320      	movs	r3, #32
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e040      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005884:	2340      	movs	r3, #64	@ 0x40
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588a:	e03c      	b.n	8005906 <UART_SetConfig+0x7ae>
 800588c:	2380      	movs	r3, #128	@ 0x80
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005892:	e038      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a71      	ldr	r2, [pc, #452]	@ (8005a60 <UART_SetConfig+0x908>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d130      	bne.n	8005900 <UART_SetConfig+0x7a8>
 800589e:	4b6f      	ldr	r3, [pc, #444]	@ (8005a5c <UART_SetConfig+0x904>)
 80058a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a2:	f003 0307 	and.w	r3, r3, #7
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d826      	bhi.n	80058f8 <UART_SetConfig+0x7a0>
 80058aa:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <UART_SetConfig+0x758>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	080058c9 	.word	0x080058c9
 80058b4:	080058d1 	.word	0x080058d1
 80058b8:	080058d9 	.word	0x080058d9
 80058bc:	080058e1 	.word	0x080058e1
 80058c0:	080058e9 	.word	0x080058e9
 80058c4:	080058f1 	.word	0x080058f1
 80058c8:	2302      	movs	r3, #2
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ce:	e01a      	b.n	8005906 <UART_SetConfig+0x7ae>
 80058d0:	2304      	movs	r3, #4
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e016      	b.n	8005906 <UART_SetConfig+0x7ae>
 80058d8:	2308      	movs	r3, #8
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e012      	b.n	8005906 <UART_SetConfig+0x7ae>
 80058e0:	2310      	movs	r3, #16
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e00e      	b.n	8005906 <UART_SetConfig+0x7ae>
 80058e8:	2320      	movs	r3, #32
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e00a      	b.n	8005906 <UART_SetConfig+0x7ae>
 80058f0:	2340      	movs	r3, #64	@ 0x40
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f6:	e006      	b.n	8005906 <UART_SetConfig+0x7ae>
 80058f8:	2380      	movs	r3, #128	@ 0x80
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fe:	e002      	b.n	8005906 <UART_SetConfig+0x7ae>
 8005900:	2380      	movs	r3, #128	@ 0x80
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a55      	ldr	r2, [pc, #340]	@ (8005a60 <UART_SetConfig+0x908>)
 800590c:	4293      	cmp	r3, r2
 800590e:	f040 80f8 	bne.w	8005b02 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005912:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005916:	2b20      	cmp	r3, #32
 8005918:	dc46      	bgt.n	80059a8 <UART_SetConfig+0x850>
 800591a:	2b02      	cmp	r3, #2
 800591c:	db75      	blt.n	8005a0a <UART_SetConfig+0x8b2>
 800591e:	3b02      	subs	r3, #2
 8005920:	2b1e      	cmp	r3, #30
 8005922:	d872      	bhi.n	8005a0a <UART_SetConfig+0x8b2>
 8005924:	a201      	add	r2, pc, #4	@ (adr r2, 800592c <UART_SetConfig+0x7d4>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	080059af 	.word	0x080059af
 8005930:	08005a0b 	.word	0x08005a0b
 8005934:	080059b7 	.word	0x080059b7
 8005938:	08005a0b 	.word	0x08005a0b
 800593c:	08005a0b 	.word	0x08005a0b
 8005940:	08005a0b 	.word	0x08005a0b
 8005944:	080059c7 	.word	0x080059c7
 8005948:	08005a0b 	.word	0x08005a0b
 800594c:	08005a0b 	.word	0x08005a0b
 8005950:	08005a0b 	.word	0x08005a0b
 8005954:	08005a0b 	.word	0x08005a0b
 8005958:	08005a0b 	.word	0x08005a0b
 800595c:	08005a0b 	.word	0x08005a0b
 8005960:	08005a0b 	.word	0x08005a0b
 8005964:	080059d7 	.word	0x080059d7
 8005968:	08005a0b 	.word	0x08005a0b
 800596c:	08005a0b 	.word	0x08005a0b
 8005970:	08005a0b 	.word	0x08005a0b
 8005974:	08005a0b 	.word	0x08005a0b
 8005978:	08005a0b 	.word	0x08005a0b
 800597c:	08005a0b 	.word	0x08005a0b
 8005980:	08005a0b 	.word	0x08005a0b
 8005984:	08005a0b 	.word	0x08005a0b
 8005988:	08005a0b 	.word	0x08005a0b
 800598c:	08005a0b 	.word	0x08005a0b
 8005990:	08005a0b 	.word	0x08005a0b
 8005994:	08005a0b 	.word	0x08005a0b
 8005998:	08005a0b 	.word	0x08005a0b
 800599c:	08005a0b 	.word	0x08005a0b
 80059a0:	08005a0b 	.word	0x08005a0b
 80059a4:	080059fd 	.word	0x080059fd
 80059a8:	2b40      	cmp	r3, #64	@ 0x40
 80059aa:	d02a      	beq.n	8005a02 <UART_SetConfig+0x8aa>
 80059ac:	e02d      	b.n	8005a0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80059ae:	f7fe fd29 	bl	8004404 <HAL_RCCEx_GetD3PCLK1Freq>
 80059b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80059b4:	e02f      	b.n	8005a16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fe fd38 	bl	8004430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c4:	e027      	b.n	8005a16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059c6:	f107 0318 	add.w	r3, r7, #24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fe fe84 	bl	80046d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059d4:	e01f      	b.n	8005a16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059d6:	4b21      	ldr	r3, [pc, #132]	@ (8005a5c <UART_SetConfig+0x904>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059e2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a5c <UART_SetConfig+0x904>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	08db      	lsrs	r3, r3, #3
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005a64 <UART_SetConfig+0x90c>)
 80059ee:	fa22 f303 	lsr.w	r3, r2, r3
 80059f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059f4:	e00f      	b.n	8005a16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80059f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005a64 <UART_SetConfig+0x90c>)
 80059f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059fa:	e00c      	b.n	8005a16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059fc:	4b1a      	ldr	r3, [pc, #104]	@ (8005a68 <UART_SetConfig+0x910>)
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a00:	e009      	b.n	8005a16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a08:	e005      	b.n	8005a16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 81ee 	beq.w	8005dfa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a22:	4a12      	ldr	r2, [pc, #72]	@ (8005a6c <UART_SetConfig+0x914>)
 8005a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a30:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d305      	bcc.n	8005a4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d910      	bls.n	8005a70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a54:	e1d1      	b.n	8005dfa <UART_SetConfig+0xca2>
 8005a56:	bf00      	nop
 8005a58:	40011c00 	.word	0x40011c00
 8005a5c:	58024400 	.word	0x58024400
 8005a60:	58000c00 	.word	0x58000c00
 8005a64:	03d09000 	.word	0x03d09000
 8005a68:	003d0900 	.word	0x003d0900
 8005a6c:	080278b4 	.word	0x080278b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a72:	2200      	movs	r2, #0
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	60fa      	str	r2, [r7, #12]
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7c:	4ac0      	ldr	r2, [pc, #768]	@ (8005d80 <UART_SetConfig+0xc28>)
 8005a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2200      	movs	r2, #0
 8005a86:	603b      	str	r3, [r7, #0]
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a92:	f7fa fca5 	bl	80003e0 <__aeabi_uldivmod>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	020b      	lsls	r3, r1, #8
 8005aa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005aac:	0202      	lsls	r2, r0, #8
 8005aae:	6979      	ldr	r1, [r7, #20]
 8005ab0:	6849      	ldr	r1, [r1, #4]
 8005ab2:	0849      	lsrs	r1, r1, #1
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	4605      	mov	r5, r0
 8005aba:	eb12 0804 	adds.w	r8, r2, r4
 8005abe:	eb43 0905 	adc.w	r9, r3, r5
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	469a      	mov	sl, r3
 8005aca:	4693      	mov	fp, r2
 8005acc:	4652      	mov	r2, sl
 8005ace:	465b      	mov	r3, fp
 8005ad0:	4640      	mov	r0, r8
 8005ad2:	4649      	mov	r1, r9
 8005ad4:	f7fa fc84 	bl	80003e0 <__aeabi_uldivmod>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4613      	mov	r3, r2
 8005ade:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ae6:	d308      	bcc.n	8005afa <UART_SetConfig+0x9a2>
 8005ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aee:	d204      	bcs.n	8005afa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005af6:	60da      	str	r2, [r3, #12]
 8005af8:	e17f      	b.n	8005dfa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b00:	e17b      	b.n	8005dfa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b0a:	f040 80bd 	bne.w	8005c88 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005b0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	dc48      	bgt.n	8005ba8 <UART_SetConfig+0xa50>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	db7b      	blt.n	8005c12 <UART_SetConfig+0xaba>
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d879      	bhi.n	8005c12 <UART_SetConfig+0xaba>
 8005b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b24 <UART_SetConfig+0x9cc>)
 8005b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b24:	08005baf 	.word	0x08005baf
 8005b28:	08005bb7 	.word	0x08005bb7
 8005b2c:	08005c13 	.word	0x08005c13
 8005b30:	08005c13 	.word	0x08005c13
 8005b34:	08005bbf 	.word	0x08005bbf
 8005b38:	08005c13 	.word	0x08005c13
 8005b3c:	08005c13 	.word	0x08005c13
 8005b40:	08005c13 	.word	0x08005c13
 8005b44:	08005bcf 	.word	0x08005bcf
 8005b48:	08005c13 	.word	0x08005c13
 8005b4c:	08005c13 	.word	0x08005c13
 8005b50:	08005c13 	.word	0x08005c13
 8005b54:	08005c13 	.word	0x08005c13
 8005b58:	08005c13 	.word	0x08005c13
 8005b5c:	08005c13 	.word	0x08005c13
 8005b60:	08005c13 	.word	0x08005c13
 8005b64:	08005bdf 	.word	0x08005bdf
 8005b68:	08005c13 	.word	0x08005c13
 8005b6c:	08005c13 	.word	0x08005c13
 8005b70:	08005c13 	.word	0x08005c13
 8005b74:	08005c13 	.word	0x08005c13
 8005b78:	08005c13 	.word	0x08005c13
 8005b7c:	08005c13 	.word	0x08005c13
 8005b80:	08005c13 	.word	0x08005c13
 8005b84:	08005c13 	.word	0x08005c13
 8005b88:	08005c13 	.word	0x08005c13
 8005b8c:	08005c13 	.word	0x08005c13
 8005b90:	08005c13 	.word	0x08005c13
 8005b94:	08005c13 	.word	0x08005c13
 8005b98:	08005c13 	.word	0x08005c13
 8005b9c:	08005c13 	.word	0x08005c13
 8005ba0:	08005c13 	.word	0x08005c13
 8005ba4:	08005c05 	.word	0x08005c05
 8005ba8:	2b40      	cmp	r3, #64	@ 0x40
 8005baa:	d02e      	beq.n	8005c0a <UART_SetConfig+0xab2>
 8005bac:	e031      	b.n	8005c12 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bae:	f7fd fa5d 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8005bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bb4:	e033      	b.n	8005c1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bb6:	f7fd fa6f 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8005bba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bbc:	e02f      	b.n	8005c1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fe fc34 	bl	8004430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bcc:	e027      	b.n	8005c1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bce:	f107 0318 	add.w	r3, r7, #24
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fd80 	bl	80046d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bdc:	e01f      	b.n	8005c1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bde:	4b69      	ldr	r3, [pc, #420]	@ (8005d84 <UART_SetConfig+0xc2c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bea:	4b66      	ldr	r3, [pc, #408]	@ (8005d84 <UART_SetConfig+0xc2c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	08db      	lsrs	r3, r3, #3
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	4a64      	ldr	r2, [pc, #400]	@ (8005d88 <UART_SetConfig+0xc30>)
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bfc:	e00f      	b.n	8005c1e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005bfe:	4b62      	ldr	r3, [pc, #392]	@ (8005d88 <UART_SetConfig+0xc30>)
 8005c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c02:	e00c      	b.n	8005c1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c04:	4b61      	ldr	r3, [pc, #388]	@ (8005d8c <UART_SetConfig+0xc34>)
 8005c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c08:	e009      	b.n	8005c1e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c10:	e005      	b.n	8005c1e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f000 80ea 	beq.w	8005dfa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	4a55      	ldr	r2, [pc, #340]	@ (8005d80 <UART_SetConfig+0xc28>)
 8005c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c30:	461a      	mov	r2, r3
 8005c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c38:	005a      	lsls	r2, r3, #1
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	085b      	lsrs	r3, r3, #1
 8005c40:	441a      	add	r2, r3
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4e:	2b0f      	cmp	r3, #15
 8005c50:	d916      	bls.n	8005c80 <UART_SetConfig+0xb28>
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c58:	d212      	bcs.n	8005c80 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	f023 030f 	bic.w	r3, r3, #15
 8005c62:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c66:	085b      	lsrs	r3, r3, #1
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c72:	4313      	orrs	r3, r2
 8005c74:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	e0bc      	b.n	8005dfa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c86:	e0b8      	b.n	8005dfa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c88:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	dc4b      	bgt.n	8005d28 <UART_SetConfig+0xbd0>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f2c0 8087 	blt.w	8005da4 <UART_SetConfig+0xc4c>
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	f200 8084 	bhi.w	8005da4 <UART_SetConfig+0xc4c>
 8005c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca4 <UART_SetConfig+0xb4c>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005d2f 	.word	0x08005d2f
 8005ca8:	08005d37 	.word	0x08005d37
 8005cac:	08005da5 	.word	0x08005da5
 8005cb0:	08005da5 	.word	0x08005da5
 8005cb4:	08005d3f 	.word	0x08005d3f
 8005cb8:	08005da5 	.word	0x08005da5
 8005cbc:	08005da5 	.word	0x08005da5
 8005cc0:	08005da5 	.word	0x08005da5
 8005cc4:	08005d4f 	.word	0x08005d4f
 8005cc8:	08005da5 	.word	0x08005da5
 8005ccc:	08005da5 	.word	0x08005da5
 8005cd0:	08005da5 	.word	0x08005da5
 8005cd4:	08005da5 	.word	0x08005da5
 8005cd8:	08005da5 	.word	0x08005da5
 8005cdc:	08005da5 	.word	0x08005da5
 8005ce0:	08005da5 	.word	0x08005da5
 8005ce4:	08005d5f 	.word	0x08005d5f
 8005ce8:	08005da5 	.word	0x08005da5
 8005cec:	08005da5 	.word	0x08005da5
 8005cf0:	08005da5 	.word	0x08005da5
 8005cf4:	08005da5 	.word	0x08005da5
 8005cf8:	08005da5 	.word	0x08005da5
 8005cfc:	08005da5 	.word	0x08005da5
 8005d00:	08005da5 	.word	0x08005da5
 8005d04:	08005da5 	.word	0x08005da5
 8005d08:	08005da5 	.word	0x08005da5
 8005d0c:	08005da5 	.word	0x08005da5
 8005d10:	08005da5 	.word	0x08005da5
 8005d14:	08005da5 	.word	0x08005da5
 8005d18:	08005da5 	.word	0x08005da5
 8005d1c:	08005da5 	.word	0x08005da5
 8005d20:	08005da5 	.word	0x08005da5
 8005d24:	08005d97 	.word	0x08005d97
 8005d28:	2b40      	cmp	r3, #64	@ 0x40
 8005d2a:	d037      	beq.n	8005d9c <UART_SetConfig+0xc44>
 8005d2c:	e03a      	b.n	8005da4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2e:	f7fd f99d 	bl	800306c <HAL_RCC_GetPCLK1Freq>
 8005d32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d34:	e03c      	b.n	8005db0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d36:	f7fd f9af 	bl	8003098 <HAL_RCC_GetPCLK2Freq>
 8005d3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d3c:	e038      	b.n	8005db0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fb74 	bl	8004430 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d4c:	e030      	b.n	8005db0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d4e:	f107 0318 	add.w	r3, r7, #24
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fe fcc0 	bl	80046d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d5c:	e028      	b.n	8005db0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d5e:	4b09      	ldr	r3, [pc, #36]	@ (8005d84 <UART_SetConfig+0xc2c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d012      	beq.n	8005d90 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d6a:	4b06      	ldr	r3, [pc, #24]	@ (8005d84 <UART_SetConfig+0xc2c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	08db      	lsrs	r3, r3, #3
 8005d70:	f003 0303 	and.w	r3, r3, #3
 8005d74:	4a04      	ldr	r2, [pc, #16]	@ (8005d88 <UART_SetConfig+0xc30>)
 8005d76:	fa22 f303 	lsr.w	r3, r2, r3
 8005d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d7c:	e018      	b.n	8005db0 <UART_SetConfig+0xc58>
 8005d7e:	bf00      	nop
 8005d80:	080278b4 	.word	0x080278b4
 8005d84:	58024400 	.word	0x58024400
 8005d88:	03d09000 	.word	0x03d09000
 8005d8c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005d90:	4b24      	ldr	r3, [pc, #144]	@ (8005e24 <UART_SetConfig+0xccc>)
 8005d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d94:	e00c      	b.n	8005db0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d96:	4b24      	ldr	r3, [pc, #144]	@ (8005e28 <UART_SetConfig+0xcd0>)
 8005d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d9a:	e009      	b.n	8005db0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005da2:	e005      	b.n	8005db0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005dae:	bf00      	nop
    }

    if (pclk != 0U)
 8005db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d021      	beq.n	8005dfa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dba:	4a1c      	ldr	r2, [pc, #112]	@ (8005e2c <UART_SetConfig+0xcd4>)
 8005dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc4:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	441a      	add	r2, r3
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ddc:	2b0f      	cmp	r3, #15
 8005dde:	d909      	bls.n	8005df4 <UART_SetConfig+0xc9c>
 8005de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005de6:	d205      	bcs.n	8005df4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	60da      	str	r2, [r3, #12]
 8005df2:	e002      	b.n	8005dfa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2200      	movs	r2, #0
 8005e14:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005e16:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3748      	adds	r7, #72	@ 0x48
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e24:	03d09000 	.word	0x03d09000
 8005e28:	003d0900 	.word	0x003d0900
 8005e2c:	080278b4 	.word	0x080278b4

08005e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e80:	f003 0302 	and.w	r3, r3, #2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f2e:	d10a      	bne.n	8005f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b098      	sub	sp, #96	@ 0x60
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f84:	f7fb f9d8 	bl	8001338 <HAL_GetTick>
 8005f88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d12f      	bne.n	8005ff8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f88e 	bl	80060c8 <UART_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d022      	beq.n	8005ff8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fd2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e6      	bne.n	8005fb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e063      	b.n	80060c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b04      	cmp	r3, #4
 8006004:	d149      	bne.n	800609a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006006:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800600e:	2200      	movs	r2, #0
 8006010:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f857 	bl	80060c8 <UART_WaitOnFlagUntilTimeout>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d03c      	beq.n	800609a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006028:	e853 3f00 	ldrex	r3, [r3]
 800602c:	623b      	str	r3, [r7, #32]
   return(result);
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800603e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006040:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006042:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006046:	e841 2300 	strex	r3, r2, [r1]
 800604a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1e6      	bne.n	8006020 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	60fb      	str	r3, [r7, #12]
   return(result);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006072:	61fa      	str	r2, [r7, #28]
 8006074:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	69b9      	ldr	r1, [r7, #24]
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	617b      	str	r3, [r7, #20]
   return(result);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e5      	bne.n	8006052 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e012      	b.n	80060c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2220      	movs	r2, #32
 800609e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2200      	movs	r2, #0
 80060ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3758      	adds	r7, #88	@ 0x58
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	603b      	str	r3, [r7, #0]
 80060d4:	4613      	mov	r3, r2
 80060d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d8:	e04f      	b.n	800617a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d04b      	beq.n	800617a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e2:	f7fb f929 	bl	8001338 <HAL_GetTick>
 80060e6:	4602      	mov	r2, r0
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d302      	bcc.n	80060f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e04e      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d037      	beq.n	800617a <UART_WaitOnFlagUntilTimeout+0xb2>
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	2b80      	cmp	r3, #128	@ 0x80
 800610e:	d034      	beq.n	800617a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b40      	cmp	r3, #64	@ 0x40
 8006114:	d031      	beq.n	800617a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b08      	cmp	r3, #8
 8006122:	d110      	bne.n	8006146 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2208      	movs	r2, #8
 800612a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f839 	bl	80061a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2208      	movs	r2, #8
 8006136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e029      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006150:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006154:	d111      	bne.n	800617a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800615e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 f81f 	bl	80061a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e00f      	b.n	800619a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	69da      	ldr	r2, [r3, #28]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	4013      	ands	r3, r2
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	429a      	cmp	r2, r3
 8006188:	bf0c      	ite	eq
 800618a:	2301      	moveq	r3, #1
 800618c:	2300      	movne	r3, #0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	461a      	mov	r2, r3
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	429a      	cmp	r2, r3
 8006196:	d0a0      	beq.n	80060da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
	...

080061a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b095      	sub	sp, #84	@ 0x54
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b4:	e853 3f00 	ldrex	r3, [r3]
 80061b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80061cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061d2:	e841 2300 	strex	r3, r2, [r1]
 80061d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1e6      	bne.n	80061ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3308      	adds	r3, #8
 80061e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	4b1e      	ldr	r3, [pc, #120]	@ (800626c <UART_EndRxTransfer+0xc8>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3308      	adds	r3, #8
 80061fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e5      	bne.n	80061de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d118      	bne.n	800624c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	60bb      	str	r3, [r7, #8]
   return(result);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f023 0310 	bic.w	r3, r3, #16
 800622e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	613b      	str	r3, [r7, #16]
   return(result);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e6      	bne.n	800621a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006260:	bf00      	nop
 8006262:	3754      	adds	r7, #84	@ 0x54
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	effffffe 	.word	0xeffffffe

08006270 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_UARTEx_DisableFifoMode+0x16>
 8006282:	2302      	movs	r3, #2
 8006284:	e027      	b.n	80062d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2224      	movs	r2, #36	@ 0x24
 8006292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80062b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2220      	movs	r2, #32
 80062c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d101      	bne.n	80062fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80062f6:	2302      	movs	r3, #2
 80062f8:	e02d      	b.n	8006356 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2224      	movs	r2, #36	@ 0x24
 8006306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f022 0201 	bic.w	r2, r2, #1
 8006320:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f850 	bl	80063dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b084      	sub	sp, #16
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006372:	2302      	movs	r3, #2
 8006374:	e02d      	b.n	80063d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2224      	movs	r2, #36	@ 0x24
 8006382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 0201 	bic.w	r2, r2, #1
 800639c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f812 	bl	80063dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d108      	bne.n	80063fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80063fc:	e031      	b.n	8006462 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80063fe:	2310      	movs	r3, #16
 8006400:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006402:	2310      	movs	r3, #16
 8006404:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	0e5b      	lsrs	r3, r3, #25
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	0f5b      	lsrs	r3, r3, #29
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006426:	7bbb      	ldrb	r3, [r7, #14]
 8006428:	7b3a      	ldrb	r2, [r7, #12]
 800642a:	4911      	ldr	r1, [pc, #68]	@ (8006470 <UARTEx_SetNbDataToProcess+0x94>)
 800642c:	5c8a      	ldrb	r2, [r1, r2]
 800642e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006432:	7b3a      	ldrb	r2, [r7, #12]
 8006434:	490f      	ldr	r1, [pc, #60]	@ (8006474 <UARTEx_SetNbDataToProcess+0x98>)
 8006436:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006438:	fb93 f3f2 	sdiv	r3, r3, r2
 800643c:	b29a      	uxth	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	7b7a      	ldrb	r2, [r7, #13]
 8006448:	4909      	ldr	r1, [pc, #36]	@ (8006470 <UARTEx_SetNbDataToProcess+0x94>)
 800644a:	5c8a      	ldrb	r2, [r1, r2]
 800644c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006450:	7b7a      	ldrb	r2, [r7, #13]
 8006452:	4908      	ldr	r1, [pc, #32]	@ (8006474 <UARTEx_SetNbDataToProcess+0x98>)
 8006454:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006456:	fb93 f3f2 	sdiv	r3, r3, r2
 800645a:	b29a      	uxth	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006462:	bf00      	nop
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	080278cc 	.word	0x080278cc
 8006474:	080278d4 	.word	0x080278d4

08006478 <mg_base64_encode_single>:
#ifdef MG_ENABLE_LINES
#line 1 "src/base64.c"
#endif


static int mg_base64_encode_single(int c) {
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b19      	cmp	r3, #25
 8006484:	dc02      	bgt.n	800648c <mg_base64_encode_single+0x14>
    return c + 'A';
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3341      	adds	r3, #65	@ 0x41
 800648a:	e011      	b.n	80064b0 <mg_base64_encode_single+0x38>
  } else if (c < 52) {
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b33      	cmp	r3, #51	@ 0x33
 8006490:	dc02      	bgt.n	8006498 <mg_base64_encode_single+0x20>
    return c - 26 + 'a';
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	3347      	adds	r3, #71	@ 0x47
 8006496:	e00b      	b.n	80064b0 <mg_base64_encode_single+0x38>
  } else if (c < 62) {
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b3d      	cmp	r3, #61	@ 0x3d
 800649c:	dc02      	bgt.n	80064a4 <mg_base64_encode_single+0x2c>
    return c - 52 + '0';
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3b04      	subs	r3, #4
 80064a2:	e005      	b.n	80064b0 <mg_base64_encode_single+0x38>
  } else {
    return c == 62 ? '+' : '/';
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80064a8:	d101      	bne.n	80064ae <mg_base64_encode_single+0x36>
 80064aa:	232b      	movs	r3, #43	@ 0x2b
 80064ac:	e000      	b.n	80064b0 <mg_base64_encode_single+0x38>
 80064ae:	232f      	movs	r3, #47	@ 0x2f
  }
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <mg_base64_decode_single>:

static int mg_base64_decode_single(int c) {
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b40      	cmp	r3, #64	@ 0x40
 80064c8:	dd05      	ble.n	80064d6 <mg_base64_decode_single+0x1a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b5a      	cmp	r3, #90	@ 0x5a
 80064ce:	dc02      	bgt.n	80064d6 <mg_base64_decode_single+0x1a>
    return c - 'A';
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3b41      	subs	r3, #65	@ 0x41
 80064d4:	e022      	b.n	800651c <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b60      	cmp	r3, #96	@ 0x60
 80064da:	dd05      	ble.n	80064e8 <mg_base64_decode_single+0x2c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b7a      	cmp	r3, #122	@ 0x7a
 80064e0:	dc02      	bgt.n	80064e8 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3b47      	subs	r3, #71	@ 0x47
 80064e6:	e019      	b.n	800651c <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80064ec:	dd05      	ble.n	80064fa <mg_base64_decode_single+0x3e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b39      	cmp	r3, #57	@ 0x39
 80064f2:	dc02      	bgt.n	80064fa <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	3304      	adds	r3, #4
 80064f8:	e010      	b.n	800651c <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b2b      	cmp	r3, #43	@ 0x2b
 80064fe:	d101      	bne.n	8006504 <mg_base64_decode_single+0x48>
    return 62;
 8006500:	233e      	movs	r3, #62	@ 0x3e
 8006502:	e00b      	b.n	800651c <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b2f      	cmp	r3, #47	@ 0x2f
 8006508:	d101      	bne.n	800650e <mg_base64_decode_single+0x52>
    return 63;
 800650a:	233f      	movs	r3, #63	@ 0x3f
 800650c:	e006      	b.n	800651c <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2b3d      	cmp	r3, #61	@ 0x3d
 8006512:	d101      	bne.n	8006518 <mg_base64_decode_single+0x5c>
    return 64;
 8006514:	2340      	movs	r3, #64	@ 0x40
 8006516:	e001      	b.n	800651c <mg_base64_decode_single+0x60>
  } else {
    return -1;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <mg_base64_update>:

size_t mg_base64_update(unsigned char ch, char *to, size_t n) {
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	4603      	mov	r3, r0
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	73fb      	strb	r3, [r7, #15]
  unsigned long rem = (n & 3) % 3;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f003 0203 	and.w	r2, r3, #3
 800653c:	4b38      	ldr	r3, [pc, #224]	@ (8006620 <mg_base64_update+0xf8>)
 800653e:	fba3 1302 	umull	r1, r3, r3, r2
 8006542:	0859      	lsrs	r1, r3, #1
 8006544:	460b      	mov	r3, r1
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	440b      	add	r3, r1
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d119      	bne.n	8006588 <mg_base64_update+0x60>
    to[n] = (char) mg_base64_encode_single(ch >> 2);
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	089b      	lsrs	r3, r3, #2
 8006558:	b2db      	uxtb	r3, r3
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff ff8c 	bl	8006478 <mg_base64_encode_single>
 8006560:	4601      	mov	r1, r0
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4413      	add	r3, r2
 8006568:	b2ca      	uxtb	r2, r1
 800656a:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	011b      	lsls	r3, r3, #4
 8006570:	b2da      	uxtb	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3301      	adds	r3, #1
 8006576:	607b      	str	r3, [r7, #4]
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	440b      	add	r3, r1
 800657e:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8006582:	b2d2      	uxtb	r2, r2
 8006584:	701a      	strb	r2, [r3, #0]
 8006586:	e046      	b.n	8006616 <mg_base64_update+0xee>
  } else if (rem == 1) {
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b01      	cmp	r3, #1
 800658c:	d11f      	bne.n	80065ce <mg_base64_update+0xa6>
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 4));
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	781a      	ldrb	r2, [r3, #0]
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	091b      	lsrs	r3, r3, #4
 800659a:	b2db      	uxtb	r3, r3
 800659c:	4313      	orrs	r3, r2
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff ff69 	bl	8006478 <mg_base64_encode_single>
 80065a6:	4601      	mov	r1, r0
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4413      	add	r3, r2
 80065ae:	b2ca      	uxtb	r2, r1
 80065b0:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3301      	adds	r3, #1
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	68b9      	ldr	r1, [r7, #8]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	440b      	add	r3, r1
 80065c4:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 80065c8:	b2d2      	uxtb	r2, r2
 80065ca:	701a      	strb	r2, [r3, #0]
 80065cc:	e023      	b.n	8006616 <mg_base64_update+0xee>
  } else {
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 6));
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4413      	add	r3, r2
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	099b      	lsrs	r3, r3, #6
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	4313      	orrs	r3, r2
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff ff49 	bl	8006478 <mg_base64_encode_single>
 80065e6:	4601      	mov	r1, r0
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4413      	add	r3, r2
 80065ee:	b2ca      	uxtb	r2, r1
 80065f0:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_base64_encode_single(ch & 63);
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff ff3d 	bl	8006478 <mg_base64_encode_single>
 80065fe:	4601      	mov	r1, r0
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	3301      	adds	r3, #1
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4413      	add	r3, r2
 800660c:	b2ca      	uxtb	r2, r1
 800660e:	701a      	strb	r2, [r3, #0]
    n++;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3301      	adds	r3, #1
 8006614:	607b      	str	r3, [r7, #4]
  }
  return n;
 8006616:	687b      	ldr	r3, [r7, #4]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	aaaaaaab 	.word	0xaaaaaaab

08006624 <mg_base64_final>:

size_t mg_base64_final(char *to, size_t n) {
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  size_t saved = n;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <mg_base64_final+0x24>
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	2000      	movs	r0, #0
 8006642:	f7ff ff71 	bl	8006528 <mg_base64_update>
 8006646:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d10a      	bne.n	8006668 <mg_base64_final+0x44>
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	3b01      	subs	r3, #1
 8006656:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 8006658:	e006      	b.n	8006668 <mg_base64_final+0x44>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	603a      	str	r2, [r7, #0]
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	4413      	add	r3, r2
 8006664:	223d      	movs	r2, #61	@ 0x3d
 8006666:	701a      	strb	r2, [r3, #0]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f3      	bne.n	800665a <mg_base64_final+0x36>
  to[n] = '\0';
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	4413      	add	r3, r2
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]
  return n;
 800667c:	683b      	ldr	r3, [r7, #0]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <mg_base64_encode>:

size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
  size_t i, len = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
  if (dl > 0) to[0] = '\0';
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <mg_base64_encode+0x1e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	701a      	strb	r2, [r3, #0]
  if (dl < ((n / 3) + (n % 3 ? 1 : 0)) * 4 + 1) return 0;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006718 <mg_base64_encode+0x90>)
 80066aa:	fba2 2303 	umull	r2, r3, r2, r3
 80066ae:	0858      	lsrs	r0, r3, #1
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	4b19      	ldr	r3, [pc, #100]	@ (8006718 <mg_base64_encode+0x90>)
 80066b4:	fba3 2301 	umull	r2, r3, r3, r1
 80066b8:	085a      	lsrs	r2, r3, #1
 80066ba:	4613      	mov	r3, r2
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	4413      	add	r3, r2
 80066c0:	1aca      	subs	r2, r1, r3
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	d001      	beq.n	80066ca <mg_base64_encode+0x42>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <mg_base64_encode+0x44>
 80066ca:	2300      	movs	r3, #0
 80066cc:	4403      	add	r3, r0
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	3301      	adds	r3, #1
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d201      	bcs.n	80066dc <mg_base64_encode+0x54>
 80066d8:	2300      	movs	r3, #0
 80066da:	e019      	b.n	8006710 <mg_base64_encode+0x88>
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 80066dc:	2300      	movs	r3, #0
 80066de:	617b      	str	r3, [r7, #20]
 80066e0:	e00c      	b.n	80066fc <mg_base64_encode+0x74>
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	4413      	add	r3, r2
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff ff1a 	bl	8006528 <mg_base64_update>
 80066f4:	6138      	str	r0, [r7, #16]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	3301      	adds	r3, #1
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	429a      	cmp	r2, r3
 8006702:	d3ee      	bcc.n	80066e2 <mg_base64_encode+0x5a>
  len = mg_base64_final(to, len);
 8006704:	6939      	ldr	r1, [r7, #16]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff ff8c 	bl	8006624 <mg_base64_final>
 800670c:	6138      	str	r0, [r7, #16]
  return len;
 800670e:	693b      	ldr	r3, [r7, #16]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	aaaaaaab 	.word	0xaaaaaaab

0800671c <mg_base64_decode>:

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	@ 0x28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <mg_base64_decode+0x1c>
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	4413      	add	r3, r2
 8006736:	e000      	b.n	800673a <mg_base64_decode+0x1e>
 8006738:	2300      	movs	r3, #0
 800673a:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 800673c:	2300      	movs	r3, #0
 800673e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	089a      	lsrs	r2, r3, #2
 8006744:	4613      	mov	r3, r2
 8006746:	005b      	lsls	r3, r3, #1
 8006748:	4413      	add	r3, r2
 800674a:	3301      	adds	r3, #1
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	429a      	cmp	r2, r3
 8006750:	d378      	bcc.n	8006844 <mg_base64_decode+0x128>
  while (src != NULL && src + 3 < end) {
 8006752:	e068      	b.n	8006826 <mg_base64_decode+0x10a>
    int a = mg_base64_decode_single(src[0]),
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f7ff feaf 	bl	80064bc <mg_base64_decode_single>
 800675e:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3301      	adds	r3, #1
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff fea8 	bl	80064bc <mg_base64_decode_single>
 800676c:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3302      	adds	r3, #2
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff fea1 	bl	80064bc <mg_base64_decode_single>
 800677a:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	3303      	adds	r3, #3
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff fe9a 	bl	80064bc <mg_base64_decode_single>
 8006788:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	2b40      	cmp	r3, #64	@ 0x40
 800678e:	d05b      	beq.n	8006848 <mg_base64_decode+0x12c>
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2b00      	cmp	r3, #0
 8006794:	db58      	blt.n	8006848 <mg_base64_decode+0x12c>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b40      	cmp	r3, #64	@ 0x40
 800679a:	d055      	beq.n	8006848 <mg_base64_decode+0x12c>
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	db52      	blt.n	8006848 <mg_base64_decode+0x12c>
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	db4f      	blt.n	8006848 <mg_base64_decode+0x12c>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	db4c      	blt.n	8006848 <mg_base64_decode+0x12c>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	b25b      	sxtb	r3, r3
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	b25a      	sxtb	r2, r3
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	111b      	asrs	r3, r3, #4
 80067ba:	b25b      	sxtb	r3, r3
 80067bc:	4313      	orrs	r3, r2
 80067be:	b259      	sxtb	r1, r3
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	1c5a      	adds	r2, r3, #1
 80067c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	b2ca      	uxtb	r2, r1
 80067cc:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3302      	adds	r3, #2
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b3d      	cmp	r3, #61	@ 0x3d
 80067d6:	d023      	beq.n	8006820 <mg_base64_decode+0x104>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	b25b      	sxtb	r3, r3
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	b25a      	sxtb	r2, r3
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	109b      	asrs	r3, r3, #2
 80067e4:	b25b      	sxtb	r3, r3
 80067e6:	4313      	orrs	r3, r2
 80067e8:	b259      	sxtb	r1, r3
 80067ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	627a      	str	r2, [r7, #36]	@ 0x24
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	4413      	add	r3, r2
 80067f4:	b2ca      	uxtb	r2, r1
 80067f6:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3303      	adds	r3, #3
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b3d      	cmp	r3, #61	@ 0x3d
 8006800:	d00e      	beq.n	8006820 <mg_base64_decode+0x104>
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	b25b      	sxtb	r3, r3
 8006806:	019b      	lsls	r3, r3, #6
 8006808:	b25a      	sxtb	r2, r3
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	b25b      	sxtb	r3, r3
 800680e:	4313      	orrs	r3, r2
 8006810:	b259      	sxtb	r1, r3
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	627a      	str	r2, [r7, #36]	@ 0x24
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	4413      	add	r3, r2
 800681c:	b2ca      	uxtb	r2, r1
 800681e:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	3304      	adds	r3, #4
 8006824:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <mg_base64_decode+0x11a>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	3303      	adds	r3, #3
 8006830:	6a3a      	ldr	r2, [r7, #32]
 8006832:	429a      	cmp	r2, r3
 8006834:	d88e      	bhi.n	8006754 <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683a:	4413      	add	r3, r2
 800683c:	2200      	movs	r2, #0
 800683e:	701a      	strb	r2, [r3, #0]
  return len;
 8006840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006842:	e009      	b.n	8006858 <mg_base64_decode+0x13c>
  if (dl < n / 4 * 3 + 1) goto fail;
 8006844:	bf00      	nop
 8006846:	e000      	b.n	800684a <mg_base64_decode+0x12e>
      goto fail;
 8006848:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <mg_base64_decode+0x13a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
  return 0;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3728      	adds	r7, #40	@ 0x28
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	e002      	b.n	8006876 <mg_dns_free+0x16>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d1f7      	bne.n	8006870 <mg_dns_free+0x10>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	601a      	str	r2, [r3, #0]
  free(d);
 8006888:	6838      	ldr	r0, [r7, #0]
 800688a:	f01c fb93 	bl	8022fb4 <free>
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	332c      	adds	r3, #44	@ 0x2c
 80068a4:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	e00d      	b.n	80068ca <mg_resolve_cancel+0x34>
    tmp = d->next;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d103      	bne.n	80068c6 <mg_resolve_cancel+0x30>
 80068be:	6979      	ldr	r1, [r7, #20]
 80068c0:	6938      	ldr	r0, [r7, #16]
 80068c2:	f7ff ffcd 	bl	8006860 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1ee      	bne.n	80068ae <mg_resolve_cancel+0x18>
  }
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d006      	beq.n	80068fe <mg_call+0x24>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <mg_call+0x38>
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	4798      	blx	r3
}
 8006912:	bf00      	nop
 8006914:	3710      	adds	r7, #16
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 800691c:	b40e      	push	{r1, r2, r3}
 800691e:	b580      	push	{r7, lr}
 8006920:	b095      	sub	sp, #84	@ 0x54
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8006926:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800692a:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 800692c:	f107 030c 	add.w	r3, r7, #12
 8006930:	f107 0010 	add.w	r0, r7, #16
 8006934:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006936:	2140      	movs	r1, #64	@ 0x40
 8006938:	f009 ff5e 	bl	80107f8 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 800693c:	4b14      	ldr	r3, [pc, #80]	@ (8006990 <mg_error+0x74>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	dd0f      	ble.n	8006964 <mg_error+0x48>
 8006944:	4b13      	ldr	r3, [pc, #76]	@ (8006994 <mg_error+0x78>)
 8006946:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 800694a:	4913      	ldr	r1, [pc, #76]	@ (8006998 <mg_error+0x7c>)
 800694c:	2001      	movs	r0, #1
 800694e:	f005 fcf5 	bl	800c33c <mg_log_prefix>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800695a:	f107 0310 	add.w	r3, r7, #16
 800695e:	480f      	ldr	r0, [pc, #60]	@ (800699c <mg_error+0x80>)
 8006960:	f005 fd3c 	bl	800c3dc <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800696a:	f043 0320 	orr.w	r3, r3, #32
 800696e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8006972:	f107 0310 	add.w	r3, r7, #16
 8006976:	461a      	mov	r2, r3
 8006978:	2100      	movs	r1, #0
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff ffad 	bl	80068da <mg_call>
}
 8006980:	bf00      	nop
 8006982:	3754      	adds	r7, #84	@ 0x54
 8006984:	46bd      	mov	sp, r7
 8006986:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800698a:	b003      	add	sp, #12
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	24000258 	.word	0x24000258
 8006994:	08027d40 	.word	0x08027d40
 8006998:	080241e8 	.word	0x080241e8
 800699c:	08024398 	.word	0x08024398

080069a0 <mg_ota_flash_begin>:

static char *s_addr;      // Current address to write to
static size_t s_size;     // Firmware size to flash. In-progress indicator
static uint32_t s_crc32;  // Firmware checksum

bool mg_ota_flash_begin(size_t new_firmware_size, struct mg_flash *flash) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  bool ok = false;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  if (s_size) {
 80069ae:	4b30      	ldr	r3, [pc, #192]	@ (8006a70 <mg_ota_flash_begin+0xd0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00e      	beq.n	80069d4 <mg_ota_flash_begin+0x34>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
 80069b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006a74 <mg_ota_flash_begin+0xd4>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	dd52      	ble.n	8006a64 <mg_ota_flash_begin+0xc4>
 80069be:	4b2e      	ldr	r3, [pc, #184]	@ (8006a78 <mg_ota_flash_begin+0xd8>)
 80069c0:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 80069c4:	492d      	ldr	r1, [pc, #180]	@ (8006a7c <mg_ota_flash_begin+0xdc>)
 80069c6:	2001      	movs	r0, #1
 80069c8:	f005 fcb8 	bl	800c33c <mg_log_prefix>
 80069cc:	482c      	ldr	r0, [pc, #176]	@ (8006a80 <mg_ota_flash_begin+0xe0>)
 80069ce:	f005 fd05 	bl	800c3dc <mg_log>
 80069d2:	e047      	b.n	8006a64 <mg_ota_flash_begin+0xc4>
  } else {
    size_t half = flash->size / 2;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	60bb      	str	r3, [r7, #8]
    s_crc32 = 0;
 80069dc:	4b29      	ldr	r3, [pc, #164]	@ (8006a84 <mg_ota_flash_begin+0xe4>)
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
    s_addr = (char *) flash->start + half;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	4413      	add	r3, r2
 80069ea:	4a27      	ldr	r2, [pc, #156]	@ (8006a88 <mg_ota_flash_begin+0xe8>)
 80069ec:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("FW %lu bytes, max %lu", new_firmware_size, half));
 80069ee:	4b21      	ldr	r3, [pc, #132]	@ (8006a74 <mg_ota_flash_begin+0xd4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	dd0b      	ble.n	8006a0e <mg_ota_flash_begin+0x6e>
 80069f6:	4b20      	ldr	r3, [pc, #128]	@ (8006a78 <mg_ota_flash_begin+0xd8>)
 80069f8:	f240 2211 	movw	r2, #529	@ 0x211
 80069fc:	491f      	ldr	r1, [pc, #124]	@ (8006a7c <mg_ota_flash_begin+0xdc>)
 80069fe:	2003      	movs	r0, #3
 8006a00:	f005 fc9c 	bl	800c33c <mg_log_prefix>
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4820      	ldr	r0, [pc, #128]	@ (8006a8c <mg_ota_flash_begin+0xec>)
 8006a0a:	f005 fce7 	bl	800c3dc <mg_log>
    if (new_firmware_size < half) {
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d216      	bcs.n	8006a44 <mg_ota_flash_begin+0xa4>
      ok = true;
 8006a16:	2301      	movs	r3, #1
 8006a18:	73fb      	strb	r3, [r7, #15]
      s_size = new_firmware_size;
 8006a1a:	4a15      	ldr	r2, [pc, #84]	@ (8006a70 <mg_ota_flash_begin+0xd0>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
 8006a20:	4b14      	ldr	r3, [pc, #80]	@ (8006a74 <mg_ota_flash_begin+0xd4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	dd1d      	ble.n	8006a64 <mg_ota_flash_begin+0xc4>
 8006a28:	4b13      	ldr	r3, [pc, #76]	@ (8006a78 <mg_ota_flash_begin+0xd8>)
 8006a2a:	f240 2215 	movw	r2, #533	@ 0x215
 8006a2e:	4913      	ldr	r1, [pc, #76]	@ (8006a7c <mg_ota_flash_begin+0xdc>)
 8006a30:	2002      	movs	r0, #2
 8006a32:	f005 fc83 	bl	800c33c <mg_log_prefix>
 8006a36:	4b0e      	ldr	r3, [pc, #56]	@ (8006a70 <mg_ota_flash_begin+0xd0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	4814      	ldr	r0, [pc, #80]	@ (8006a90 <mg_ota_flash_begin+0xf0>)
 8006a3e:	f005 fccd 	bl	800c3dc <mg_log>
 8006a42:	e00f      	b.n	8006a64 <mg_ota_flash_begin+0xc4>
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, half));
 8006a44:	4b0b      	ldr	r3, [pc, #44]	@ (8006a74 <mg_ota_flash_begin+0xd4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	dd0b      	ble.n	8006a64 <mg_ota_flash_begin+0xc4>
 8006a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a78 <mg_ota_flash_begin+0xd8>)
 8006a4e:	f240 2217 	movw	r2, #535	@ 0x217
 8006a52:	490a      	ldr	r1, [pc, #40]	@ (8006a7c <mg_ota_flash_begin+0xdc>)
 8006a54:	2001      	movs	r0, #1
 8006a56:	f005 fc71 	bl	800c33c <mg_log_prefix>
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	480d      	ldr	r0, [pc, #52]	@ (8006a94 <mg_ota_flash_begin+0xf4>)
 8006a60:	f005 fcbc 	bl	800c3dc <mg_log>
    }
  }
  return ok;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	24001088 	.word	0x24001088
 8006a74:	24000258 	.word	0x24000258
 8006a78:	08027d4c 	.word	0x08027d4c
 8006a7c:	080241e8 	.word	0x080241e8
 8006a80:	080243a4 	.word	0x080243a4
 8006a84:	2400108c 	.word	0x2400108c
 8006a88:	24001084 	.word	0x24001084
 8006a8c:	080243d0 	.word	0x080243d0
 8006a90:	080243e8 	.word	0x080243e8
 8006a94:	08024408 	.word	0x08024408

08006a98 <mg_ota_flash_write>:

bool mg_ota_flash_write(const void *buf, size_t len, struct mg_flash *flash) {
 8006a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a9c:	b08c      	sub	sp, #48	@ 0x30
 8006a9e:	af02      	add	r7, sp, #8
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  bool ok = false;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (s_size == 0) {
 8006aac:	4b54      	ldr	r3, [pc, #336]	@ (8006c00 <mg_ota_flash_write+0x168>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10f      	bne.n	8006ad4 <mg_ota_flash_write+0x3c>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
 8006ab4:	4b53      	ldr	r3, [pc, #332]	@ (8006c04 <mg_ota_flash_write+0x16c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f340 8099 	ble.w	8006bf0 <mg_ota_flash_write+0x158>
 8006abe:	4b52      	ldr	r3, [pc, #328]	@ (8006c08 <mg_ota_flash_write+0x170>)
 8006ac0:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8006ac4:	4951      	ldr	r1, [pc, #324]	@ (8006c0c <mg_ota_flash_write+0x174>)
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	f005 fc38 	bl	800c33c <mg_log_prefix>
 8006acc:	4850      	ldr	r0, [pc, #320]	@ (8006c10 <mg_ota_flash_write+0x178>)
 8006ace:	f005 fc85 	bl	800c3dc <mg_log>
 8006ad2:	e08d      	b.n	8006bf0 <mg_ota_flash_write+0x158>
  } else {
    size_t len_aligned_down = MG_ROUND_DOWN(len, flash->align);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d009      	beq.n	8006af0 <mg_ota_flash_write+0x58>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	68d2      	ldr	r2, [r2, #12]
 8006aea:	fb02 f303 	mul.w	r3, r2, r3
 8006aee:	e000      	b.n	8006af2 <mg_ota_flash_write+0x5a>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	623b      	str	r3, [r7, #32]
    if (len_aligned_down) ok = flash->write_fn(s_addr, buf, len_aligned_down);
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <mg_ota_flash_write+0x76>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	4a45      	ldr	r2, [pc, #276]	@ (8006c14 <mg_ota_flash_write+0x17c>)
 8006b00:	6810      	ldr	r0, [r2, #0]
 8006b02:	6a3a      	ldr	r2, [r7, #32]
 8006b04:	68f9      	ldr	r1, [r7, #12]
 8006b06:	4798      	blx	r3
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (len_aligned_down < len) {
 8006b0e:	6a3a      	ldr	r2, [r7, #32]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d244      	bcs.n	8006ba0 <mg_ota_flash_write+0x108>
 8006b16:	466b      	mov	r3, sp
 8006b18:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	61fb      	str	r3, [r7, #28]
      char tmp[flash->align];
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68de      	ldr	r6, [r3, #12]
 8006b26:	4633      	mov	r3, r6
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	61bb      	str	r3, [r7, #24]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	46b0      	mov	r8, r6
 8006b30:	4699      	mov	r9, r3
 8006b32:	f04f 0200 	mov.w	r2, #0
 8006b36:	f04f 0300 	mov.w	r3, #0
 8006b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b46:	2300      	movs	r3, #0
 8006b48:	4634      	mov	r4, r6
 8006b4a:	461d      	mov	r5, r3
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	00eb      	lsls	r3, r5, #3
 8006b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b5a:	00e2      	lsls	r2, r4, #3
 8006b5c:	1df3      	adds	r3, r6, #7
 8006b5e:	08db      	lsrs	r3, r3, #3
 8006b60:	00db      	lsls	r3, r3, #3
 8006b62:	ebad 0d03 	sub.w	sp, sp, r3
 8006b66:	ab02      	add	r3, sp, #8
 8006b68:	3300      	adds	r3, #0
 8006b6a:	617b      	str	r3, [r7, #20]
      memset(tmp, 0xff, sizeof(tmp));
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	21ff      	movs	r1, #255	@ 0xff
 8006b70:	6978      	ldr	r0, [r7, #20]
 8006b72:	f01c fcd0 	bl	8023516 <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	6978      	ldr	r0, [r7, #20]
 8006b82:	f01c fdfe 	bl	8023782 <memcpy>
      ok = flash->write_fn(s_addr + len_aligned_down, tmp, sizeof(tmp));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	4a22      	ldr	r2, [pc, #136]	@ (8006c14 <mg_ota_flash_write+0x17c>)
 8006b8c:	6811      	ldr	r1, [r2, #0]
 8006b8e:	6a3a      	ldr	r2, [r7, #32]
 8006b90:	1888      	adds	r0, r1, r2
 8006b92:	4632      	mov	r2, r6
 8006b94:	6979      	ldr	r1, [r7, #20]
 8006b96:	4798      	blx	r3
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b9e:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 8006ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8006c18 <mg_ota_flash_write+0x180>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f018 fc2d 	bl	801f408 <mg_crc32>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	4a19      	ldr	r2, [pc, #100]	@ (8006c18 <mg_ota_flash_write+0x180>)
 8006bb2:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
 8006bb4:	4b13      	ldr	r3, [pc, #76]	@ (8006c04 <mg_ota_flash_write+0x16c>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	dd13      	ble.n	8006be4 <mg_ota_flash_write+0x14c>
 8006bbc:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <mg_ota_flash_write+0x170>)
 8006bbe:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8006bc2:	4912      	ldr	r1, [pc, #72]	@ (8006c0c <mg_ota_flash_write+0x174>)
 8006bc4:	2003      	movs	r0, #3
 8006bc6:	f005 fbb9 	bl	800c33c <mg_log_prefix>
 8006bca:	4b12      	ldr	r3, [pc, #72]	@ (8006c14 <mg_ota_flash_write+0x17c>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	425b      	negs	r3, r3
 8006bd2:	18d1      	adds	r1, r2, r3
 8006bd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	480f      	ldr	r0, [pc, #60]	@ (8006c1c <mg_ota_flash_write+0x184>)
 8006be0:	f005 fbfc 	bl	800c3dc <mg_log>
    s_addr += len;
 8006be4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <mg_ota_flash_write+0x17c>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4413      	add	r3, r2
 8006bec:	4a09      	ldr	r2, [pc, #36]	@ (8006c14 <mg_ota_flash_write+0x17c>)
 8006bee:	6013      	str	r3, [r2, #0]
  }
  return ok;
 8006bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3728      	adds	r7, #40	@ 0x28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfe:	bf00      	nop
 8006c00:	24001088 	.word	0x24001088
 8006c04:	24000258 	.word	0x24000258
 8006c08:	08027d60 	.word	0x08027d60
 8006c0c:	080241e8 	.word	0x080241e8
 8006c10:	0802442c 	.word	0x0802442c
 8006c14:	24001084 	.word	0x24001084
 8006c18:	2400108c 	.word	0x2400108c
 8006c1c:	08024454 	.word	0x08024454

08006c20 <mg_ota_flash_end>:

bool mg_ota_flash_end(struct mg_flash *flash) {
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	6078      	str	r0, [r7, #4]
  char *base = (char *) flash->start + flash->size / 2;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	085b      	lsrs	r3, r3, #1
 8006c32:	4413      	add	r3, r2
 8006c34:	613b      	str	r3, [r7, #16]
  bool ok = false;
 8006c36:	2300      	movs	r3, #0
 8006c38:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 8006c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006cf8 <mg_ota_flash_end+0xd8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d040      	beq.n	8006cc4 <mg_ota_flash_end+0xa4>
    size_t size = (size_t) (s_addr - base);
 8006c42:	4b2e      	ldr	r3, [pc, #184]	@ (8006cfc <mg_ota_flash_end+0xdc>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	60fb      	str	r3, [r7, #12]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 8006c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8006cf8 <mg_ota_flash_end+0xd8>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6939      	ldr	r1, [r7, #16]
 8006c54:	2000      	movs	r0, #0
 8006c56:	f018 fbd7 	bl	801f408 <mg_crc32>
 8006c5a:	60b8      	str	r0, [r7, #8]
    if (size == s_size && crc32 == s_crc32) ok = true;
 8006c5c:	4b26      	ldr	r3, [pc, #152]	@ (8006cf8 <mg_ota_flash_end+0xd8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d106      	bne.n	8006c74 <mg_ota_flash_end+0x54>
 8006c66:	4b26      	ldr	r3, [pc, #152]	@ (8006d00 <mg_ota_flash_end+0xe0>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d101      	bne.n	8006c74 <mg_ota_flash_end+0x54>
 8006c70:	2301      	movs	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
 8006c74:	4b23      	ldr	r3, [pc, #140]	@ (8006d04 <mg_ota_flash_end+0xe4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	dd18      	ble.n	8006cae <mg_ota_flash_end+0x8e>
 8006c7c:	4b22      	ldr	r3, [pc, #136]	@ (8006d08 <mg_ota_flash_end+0xe8>)
 8006c7e:	f240 2239 	movw	r2, #569	@ 0x239
 8006c82:	4922      	ldr	r1, [pc, #136]	@ (8006d0c <mg_ota_flash_end+0xec>)
 8006c84:	2003      	movs	r0, #3
 8006c86:	f005 fb59 	bl	800c33c <mg_log_prefix>
 8006c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8006d00 <mg_ota_flash_end+0xe0>)
 8006c8c:	6819      	ldr	r1, [r3, #0]
 8006c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006cf8 <mg_ota_flash_end+0xd8>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <mg_ota_flash_end+0x7c>
 8006c98:	4b1d      	ldr	r3, [pc, #116]	@ (8006d10 <mg_ota_flash_end+0xf0>)
 8006c9a:	e000      	b.n	8006c9e <mg_ota_flash_end+0x7e>
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d14 <mg_ota_flash_end+0xf4>)
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	481b      	ldr	r0, [pc, #108]	@ (8006d18 <mg_ota_flash_end+0xf8>)
 8006caa:	f005 fb97 	bl	800c3dc <mg_log>
              size, ok ? "ok" : "fail"));
    s_size = 0;
 8006cae:	4b12      	ldr	r3, [pc, #72]	@ (8006cf8 <mg_ota_flash_end+0xd8>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
    if (ok) ok = flash->swap_fn();
 8006cb4:	7dfb      	ldrb	r3, [r7, #23]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d004      	beq.n	8006cc4 <mg_ota_flash_end+0xa4>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	4798      	blx	r3
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	75fb      	strb	r3, [r7, #23]
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <mg_ota_flash_end+0xe4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	dd10      	ble.n	8006cee <mg_ota_flash_end+0xce>
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d08 <mg_ota_flash_end+0xe8>)
 8006cce:	f240 223e 	movw	r2, #574	@ 0x23e
 8006cd2:	490e      	ldr	r1, [pc, #56]	@ (8006d0c <mg_ota_flash_end+0xec>)
 8006cd4:	2002      	movs	r0, #2
 8006cd6:	f005 fb31 	bl	800c33c <mg_log_prefix>
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <mg_ota_flash_end+0xc4>
 8006ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d10 <mg_ota_flash_end+0xf0>)
 8006ce2:	e000      	b.n	8006ce6 <mg_ota_flash_end+0xc6>
 8006ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d14 <mg_ota_flash_end+0xf4>)
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	480c      	ldr	r0, [pc, #48]	@ (8006d1c <mg_ota_flash_end+0xfc>)
 8006cea:	f005 fb77 	bl	800c3dc <mg_log>
  return ok;
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	24001088 	.word	0x24001088
 8006cfc:	24001084 	.word	0x24001084
 8006d00:	2400108c 	.word	0x2400108c
 8006d04:	24000258 	.word	0x24000258
 8006d08:	08027d74 	.word	0x08027d74
 8006d0c:	080241e8 	.word	0x080241e8
 8006d10:	08024468 	.word	0x08024468
 8006d14:	0802446c 	.word	0x0802446c
 8006d18:	08024474 	.word	0x08024474
 8006d1c:	0802449c 	.word	0x0802449c

08006d20 <is_digit>:
#endif




static bool is_digit(int c) {
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b2f      	cmp	r3, #47	@ 0x2f
 8006d2c:	dd04      	ble.n	8006d38 <is_digit+0x18>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b39      	cmp	r3, #57	@ 0x39
 8006d32:	dc01      	bgt.n	8006d38 <is_digit+0x18>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <is_digit+0x1a>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	b2db      	uxtb	r3, r3
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <addexp>:

static int addexp(char *buf, int e, int sign) {
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  int n = 0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	617a      	str	r2, [r7, #20]
 8006d62:	461a      	mov	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4413      	add	r3, r2
 8006d68:	2265      	movs	r2, #101	@ 0x65
 8006d6a:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	1c5a      	adds	r2, r3, #1
 8006d70:	617a      	str	r2, [r7, #20]
 8006d72:	461a      	mov	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4413      	add	r3, r2
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006d84:	dd01      	ble.n	8006d8a <addexp+0x3e>
 8006d86:	2300      	movs	r3, #0
 8006d88:	e057      	b.n	8006e3a <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b09      	cmp	r3, #9
 8006d8e:	dc07      	bgt.n	8006da0 <addexp+0x54>
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	617a      	str	r2, [r7, #20]
 8006d96:	461a      	mov	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	2230      	movs	r2, #48	@ 0x30
 8006d9e:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b63      	cmp	r3, #99	@ 0x63
 8006da4:	dd1c      	ble.n	8006de0 <addexp+0x94>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	4a27      	ldr	r2, [pc, #156]	@ (8006e48 <addexp+0xfc>)
 8006daa:	fb82 1203 	smull	r1, r2, r2, r3
 8006dae:	1152      	asrs	r2, r2, #5
 8006db0:	17db      	asrs	r3, r3, #31
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	1c59      	adds	r1, r3, #1
 8006dba:	6179      	str	r1, [r7, #20]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	440b      	add	r3, r1
 8006dc2:	3230      	adds	r2, #48	@ 0x30
 8006dc4:	b2d2      	uxtb	r2, r2
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	4a1f      	ldr	r2, [pc, #124]	@ (8006e48 <addexp+0xfc>)
 8006dcc:	fb82 1203 	smull	r1, r2, r2, r3
 8006dd0:	1151      	asrs	r1, r2, #5
 8006dd2:	17da      	asrs	r2, r3, #31
 8006dd4:	1a8a      	subs	r2, r1, r2
 8006dd6:	2164      	movs	r1, #100	@ 0x64
 8006dd8:	fb01 f202 	mul.w	r2, r1, r2
 8006ddc:	1a9b      	subs	r3, r3, r2
 8006dde:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	2b09      	cmp	r3, #9
 8006de4:	dd1d      	ble.n	8006e22 <addexp+0xd6>
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	4a18      	ldr	r2, [pc, #96]	@ (8006e4c <addexp+0x100>)
 8006dea:	fb82 1203 	smull	r1, r2, r2, r3
 8006dee:	1092      	asrs	r2, r2, #2
 8006df0:	17db      	asrs	r3, r3, #31
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	1c59      	adds	r1, r3, #1
 8006dfa:	6179      	str	r1, [r7, #20]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	440b      	add	r3, r1
 8006e02:	3230      	adds	r2, #48	@ 0x30
 8006e04:	b2d2      	uxtb	r2, r2
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	4b10      	ldr	r3, [pc, #64]	@ (8006e4c <addexp+0x100>)
 8006e0c:	fb83 1302 	smull	r1, r3, r3, r2
 8006e10:	1099      	asrs	r1, r3, #2
 8006e12:	17d3      	asrs	r3, r2, #31
 8006e14:	1ac9      	subs	r1, r1, r3
 8006e16:	460b      	mov	r3, r1
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	1c59      	adds	r1, r3, #1
 8006e2a:	6179      	str	r1, [r7, #20]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	440b      	add	r3, r1
 8006e32:	3230      	adds	r2, #48	@ 0x30
 8006e34:	b2d2      	uxtb	r2, r2
 8006e36:	701a      	strb	r2, [r3, #0]
  return n;
 8006e38:	697b      	ldr	r3, [r7, #20]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	51eb851f 	.word	0x51eb851f
 8006e4c:	66666667 	.word	0x66666667

08006e50 <xisinf>:

static int xisinf(double x) {
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8006e5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8006e62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e66:	f04f 0200 	mov.w	r2, #0
 8006e6a:	f04f 0300 	mov.w	r3, #0
 8006e6e:	000a      	movs	r2, r1
 8006e70:	2300      	movs	r3, #0
 8006e72:	4613      	mov	r3, r2
 8006e74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e78:	4a08      	ldr	r2, [pc, #32]	@ (8006e9c <xisinf+0x4c>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d106      	bne.n	8006e8c <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8006e7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e82:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <xisinf+0x3c>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <xisinf+0x3e>
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	7ff00000 	.word	0x7ff00000

08006ea0 <xisnan>:

static int xisnan(double x) {
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8006eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eae:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8006eb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	f04f 0300 	mov.w	r3, #0
 8006ebe:	000a      	movs	r2, r1
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8006ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	bf14      	ite	ne
 8006ed2:	2301      	movne	r3, #1
 8006ed4:	2300      	moveq	r3, #0
 8006ed6:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8006ed8:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8006eda:	4a06      	ldr	r2, [pc, #24]	@ (8006ef4 <xisnan+0x54>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	bf8c      	ite	hi
 8006ee0:	2301      	movhi	r3, #1
 8006ee2:	2300      	movls	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	7ff00000 	.word	0x7ff00000

08006ef8 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b0a0      	sub	sp, #128	@ 0x80
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	6178      	str	r0, [r7, #20]
 8006f00:	6139      	str	r1, [r7, #16]
 8006f02:	ed87 0b02 	vstr	d0, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f0e:	2300      	movs	r3, #0
 8006f10:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f12:	2300      	movs	r3, #0
 8006f14:	66bb      	str	r3, [r7, #104]	@ 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 8006f16:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f22:	d107      	bne.n	8006f34 <mg_dtoa+0x3c>
 8006f24:	4bb8      	ldr	r3, [pc, #736]	@ (8007208 <mg_dtoa+0x310>)
 8006f26:	4ab9      	ldr	r2, [pc, #740]	@ (800720c <mg_dtoa+0x314>)
 8006f28:	6939      	ldr	r1, [r7, #16]
 8006f2a:	6978      	ldr	r0, [r7, #20]
 8006f2c:	f009 fc8c 	bl	8010848 <mg_snprintf>
 8006f30:	4603      	mov	r3, r0
 8006f32:	e28d      	b.n	8007450 <mg_dtoa+0x558>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 8006f34:	ed97 0b02 	vldr	d0, [r7, #8]
 8006f38:	f7ff ff8a 	bl	8006e50 <xisinf>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d010      	beq.n	8006f64 <mg_dtoa+0x6c>
 8006f42:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f46:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4e:	dd01      	ble.n	8006f54 <mg_dtoa+0x5c>
 8006f50:	4baf      	ldr	r3, [pc, #700]	@ (8007210 <mg_dtoa+0x318>)
 8006f52:	e000      	b.n	8006f56 <mg_dtoa+0x5e>
 8006f54:	4baf      	ldr	r3, [pc, #700]	@ (8007214 <mg_dtoa+0x31c>)
 8006f56:	4aad      	ldr	r2, [pc, #692]	@ (800720c <mg_dtoa+0x314>)
 8006f58:	6939      	ldr	r1, [r7, #16]
 8006f5a:	6978      	ldr	r0, [r7, #20]
 8006f5c:	f009 fc74 	bl	8010848 <mg_snprintf>
 8006f60:	4603      	mov	r3, r0
 8006f62:	e275      	b.n	8007450 <mg_dtoa+0x558>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8006f64:	ed97 0b02 	vldr	d0, [r7, #8]
 8006f68:	f7ff ff9a 	bl	8006ea0 <xisnan>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <mg_dtoa+0x8a>
 8006f72:	4ba9      	ldr	r3, [pc, #676]	@ (8007218 <mg_dtoa+0x320>)
 8006f74:	4aa5      	ldr	r2, [pc, #660]	@ (800720c <mg_dtoa+0x314>)
 8006f76:	6939      	ldr	r1, [r7, #16]
 8006f78:	6978      	ldr	r0, [r7, #20]
 8006f7a:	f009 fc65 	bl	8010848 <mg_snprintf>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	e266      	b.n	8007450 <mg_dtoa+0x558>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8006f82:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8e:	d50d      	bpl.n	8006fac <mg_dtoa+0xb4>
 8006f90:	ed97 7b02 	vldr	d7, [r7, #8]
 8006f94:	eeb1 7b47 	vneg.f64	d7, d7
 8006f98:	ed87 7b02 	vstr	d7, [r7, #8]
 8006f9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f9e:	1c5a      	adds	r2, r3, #1
 8006fa0:	673a      	str	r2, [r7, #112]	@ 0x70
 8006fa2:	3378      	adds	r3, #120	@ 0x78
 8006fa4:	443b      	add	r3, r7
 8006fa6:	222d      	movs	r2, #45	@ 0x2d
 8006fa8:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 8006fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  if (tz) {
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d024      	beq.n	8007004 <mg_dtoa+0x10c>
    mul = 1.0;
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	4b97      	ldr	r3, [pc, #604]	@ (800721c <mg_dtoa+0x324>)
 8006fc0:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 8006fc4:	e007      	b.n	8006fd6 <mg_dtoa+0xde>
 8006fc6:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8006fca:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006fce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fd2:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8006fd6:	ed97 7b02 	vldr	d7, [r7, #8]
 8006fda:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006fde:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe6:	db12      	blt.n	800700e <mg_dtoa+0x116>
 8006fe8:	ed97 5b02 	vldr	d5, [r7, #8]
 8006fec:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8006ff0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006ff4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006ff8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007000:	dae1      	bge.n	8006fc6 <mg_dtoa+0xce>
 8007002:	e00d      	b.n	8007020 <mg_dtoa+0x128>
  } else {
    mul = 0.1;
 8007004:	a37e      	add	r3, pc, #504	@ (adr r3, 8007200 <mg_dtoa+0x308>)
 8007006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 800700e:	e007      	b.n	8007020 <mg_dtoa+0x128>
 8007010:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8007014:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007018:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800701c:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8007020:	ed97 7b02 	vldr	d7, [r7, #8]
 8007024:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007028:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800702c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007030:	d80c      	bhi.n	800704c <mg_dtoa+0x154>
 8007032:	ed97 5b02 	vldr	d5, [r7, #8]
 8007036:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800703a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800703e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007042:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800704a:	d9e1      	bls.n	8007010 <mg_dtoa+0x118>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 800704c:	2300      	movs	r3, #0
 800704e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007050:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8007054:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8007058:	ee27 7b06 	vmul.f64	d7, d7, d6
 800705c:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8007060:	e00a      	b.n	8007078 <mg_dtoa+0x180>
 8007062:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8007066:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800706a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800706e:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8007072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007074:	3301      	adds	r3, #1
 8007076:	677b      	str	r3, [r7, #116]	@ 0x74
 8007078:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	dbf0      	blt.n	8007062 <mg_dtoa+0x16a>

  d += t;
 8007080:	ed97 6b02 	vldr	d6, [r7, #8]
 8007084:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8007088:	ee36 7b07 	vadd.f64	d7, d6, d7
 800708c:	ed87 7b02 	vstr	d7, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8007090:	f04f 0200 	mov.w	r2, #0
 8007094:	4b61      	ldr	r3, [pc, #388]	@ (800721c <mg_dtoa+0x324>)
 8007096:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 800709a:	e00a      	b.n	80070b2 <mg_dtoa+0x1ba>
 800709c:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80070a0:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80070a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070a8:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80070ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070ae:	3301      	adds	r3, #1
 80070b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070b2:	ed97 7b02 	vldr	d7, [r7, #8]
 80070b6:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80070ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c2:	db0c      	blt.n	80070de <mg_dtoa+0x1e6>
 80070c4:	ed97 5b02 	vldr	d5, [r7, #8]
 80070c8:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80070cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80070d0:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80070d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070dc:	dade      	bge.n	800709c <mg_dtoa+0x1a4>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80070de:	e00a      	b.n	80070f6 <mg_dtoa+0x1fe>
 80070e0:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80070e4:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80070e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80070ec:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80070f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070f2:	3b01      	subs	r3, #1
 80070f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070f6:	ed97 7b02 	vldr	d7, [r7, #8]
 80070fa:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80070fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007106:	d50c      	bpl.n	8007122 <mg_dtoa+0x22a>
 8007108:	ed97 5b02 	vldr	d5, [r7, #8]
 800710c:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8007110:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007114:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007118:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800711c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007120:	d4de      	bmi.n	80070e0 <mg_dtoa+0x1e8>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d031      	beq.n	800718c <mg_dtoa+0x294>
 8007128:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	429a      	cmp	r2, r3
 800712e:	db2d      	blt.n	800718c <mg_dtoa+0x294>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b01      	cmp	r3, #1
 8007134:	dd2a      	ble.n	800718c <mg_dtoa+0x294>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8007136:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800713a:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800713e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	f107 0018 	add.w	r0, r7, #24
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	eeb0 0b45 	vmov.f64	d0, d5
 800714e:	2128      	movs	r1, #40	@ 0x28
 8007150:	f7ff fed2 	bl	8006ef8 <mg_dtoa>
 8007154:	4603      	mov	r3, r0
 8007156:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8007158:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800715a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800715c:	4413      	add	r3, r2
 800715e:	f107 0218 	add.w	r2, r7, #24
 8007162:	4413      	add	r3, r2
 8007164:	222b      	movs	r2, #43	@ 0x2b
 8007166:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff fdef 	bl	8006d4c <addexp>
 800716e:	4602      	mov	r2, r0
 8007170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007172:	4413      	add	r3, r2
 8007174:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8007176:	f107 0318 	add.w	r3, r7, #24
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800717e:	4a28      	ldr	r2, [pc, #160]	@ (8007220 <mg_dtoa+0x328>)
 8007180:	6939      	ldr	r1, [r7, #16]
 8007182:	6978      	ldr	r0, [r7, #20]
 8007184:	f009 fb60 	bl	8010848 <mg_snprintf>
 8007188:	4603      	mov	r3, r0
 800718a:	e161      	b.n	8007450 <mg_dtoa+0x558>
  } else if (tz && e <= -width && width > 1) {
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d048      	beq.n	8007224 <mg_dtoa+0x32c>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	425b      	negs	r3, r3
 8007196:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007198:	429a      	cmp	r2, r3
 800719a:	dc43      	bgt.n	8007224 <mg_dtoa+0x32c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	dd40      	ble.n	8007224 <mg_dtoa+0x32c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80071a2:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 80071a6:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80071aa:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	f107 0018 	add.w	r0, r7, #24
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	eeb0 0b45 	vmov.f64	d0, d5
 80071ba:	2128      	movs	r1, #40	@ 0x28
 80071bc:	f7ff fe9c 	bl	8006ef8 <mg_dtoa>
 80071c0:	4603      	mov	r3, r0
 80071c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 80071c4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80071c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071c8:	4413      	add	r3, r2
 80071ca:	f107 0218 	add.w	r2, r7, #24
 80071ce:	18d0      	adds	r0, r2, r3
 80071d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071d2:	425b      	negs	r3, r3
 80071d4:	222d      	movs	r2, #45	@ 0x2d
 80071d6:	4619      	mov	r1, r3
 80071d8:	f7ff fdb8 	bl	8006d4c <addexp>
 80071dc:	4602      	mov	r2, r0
 80071de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e0:	4413      	add	r3, r2
 80071e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80071e4:	f107 0318 	add.w	r3, r7, #24
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007220 <mg_dtoa+0x328>)
 80071ee:	6939      	ldr	r1, [r7, #16]
 80071f0:	6978      	ldr	r0, [r7, #20]
 80071f2:	f009 fb29 	bl	8010848 <mg_snprintf>
 80071f6:	4603      	mov	r3, r0
 80071f8:	e12a      	b.n	8007450 <mg_dtoa+0x558>
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w
 8007200:	9999999a 	.word	0x9999999a
 8007204:	3fb99999 	.word	0x3fb99999
 8007208:	080244b0 	.word	0x080244b0
 800720c:	080244b4 	.word	0x080244b4
 8007210:	080244b8 	.word	0x080244b8
 8007214:	080244bc 	.word	0x080244bc
 8007218:	080244c4 	.word	0x080244c4
 800721c:	3ff00000 	.word	0x3ff00000
 8007220:	080244c8 	.word	0x080244c8
  } else {
    int targ_width = width;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8007228:	2300      	movs	r3, #0
 800722a:	677b      	str	r3, [r7, #116]	@ 0x74
 800722c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007230:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8007234:	e037      	b.n	80072a6 <mg_dtoa+0x3ae>
      int ch = (int) (d / t);
 8007236:	ed97 5b02 	vldr	d5, [r7, #8]
 800723a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800723e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007242:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007246:	ee17 3a90 	vmov	r3, s15
 800724a:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 800724c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800724e:	2b00      	cmp	r3, #0
 8007250:	dc02      	bgt.n	8007258 <mg_dtoa+0x360>
 8007252:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007254:	2b00      	cmp	r3, #0
 8007256:	dd0c      	ble.n	8007272 <mg_dtoa+0x37a>
 8007258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800725e:	1c59      	adds	r1, r3, #1
 8007260:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8007262:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8007264:	440b      	add	r3, r1
 8007266:	3230      	adds	r2, #48	@ 0x30
 8007268:	b2d2      	uxtb	r2, r2
 800726a:	3378      	adds	r3, #120	@ 0x78
 800726c:	443b      	add	r3, r7
 800726e:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 8007272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800727c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8007280:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007284:	ed97 6b02 	vldr	d6, [r7, #8]
 8007288:	ee36 7b47 	vsub.f64	d7, d6, d7
 800728c:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8007290:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8007294:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007298:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800729c:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80072a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072a2:	3301      	adds	r3, #1
 80072a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80072a6:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80072aa:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80072ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80072b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b6:	db04      	blt.n	80072c2 <mg_dtoa+0x3ca>
 80072b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80072ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072bc:	4413      	add	r3, r2
 80072be:	2b27      	cmp	r3, #39	@ 0x27
 80072c0:	ddb9      	ble.n	8007236 <mg_dtoa+0x33e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 80072c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d118      	bne.n	80072fa <mg_dtoa+0x402>
 80072c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	673a      	str	r2, [r7, #112]	@ 0x70
 80072ce:	3378      	adds	r3, #120	@ 0x78
 80072d0:	443b      	add	r3, r7
 80072d2:	2230      	movs	r2, #48	@ 0x30
 80072d4:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80072d8:	e00f      	b.n	80072fa <mg_dtoa+0x402>
 80072da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072dc:	1c5a      	adds	r2, r3, #1
 80072de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072e0:	3378      	adds	r3, #120	@ 0x78
 80072e2:	443b      	add	r3, r7
 80072e4:	2230      	movs	r2, #48	@ 0x30
 80072e6:	f803 2c60 	strb.w	r2, [r3, #-96]
 80072ea:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80072ee:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80072f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80072f6:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 80072fa:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80072fe:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007302:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730a:	db04      	blt.n	8007316 <mg_dtoa+0x41e>
 800730c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800730e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007310:	4413      	add	r3, r2
 8007312:	2b27      	cmp	r3, #39	@ 0x27
 8007314:	dde1      	ble.n	80072da <mg_dtoa+0x3e2>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8007316:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800731a:	4413      	add	r3, r2
 800731c:	2b27      	cmp	r3, #39	@ 0x27
 800731e:	dc09      	bgt.n	8007334 <mg_dtoa+0x43c>
 8007320:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	673a      	str	r2, [r7, #112]	@ 0x70
 8007326:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007328:	4413      	add	r3, r2
 800732a:	3378      	adds	r3, #120	@ 0x78
 800732c:	443b      	add	r3, r7
 800732e:	222e      	movs	r2, #46	@ 0x2e
 8007330:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	f083 0301 	eor.w	r3, r3, #1
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d006      	beq.n	800734e <mg_dtoa+0x456>
 8007340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd03      	ble.n	800734e <mg_dtoa+0x456>
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800734a:	4413      	add	r3, r2
 800734c:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 800734e:	2300      	movs	r3, #0
 8007350:	677b      	str	r3, [r7, #116]	@ 0x74
 8007352:	a342      	add	r3, pc, #264	@ (adr r3, 800745c <mg_dtoa+0x564>)
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800735c:	e031      	b.n	80073c2 <mg_dtoa+0x4ca>
      int ch = (int) (d / t);
 800735e:	ed97 5b02 	vldr	d5, [r7, #8]
 8007362:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8007366:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800736a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800736e:	ee17 3a90 	vmov	r3, s15
 8007372:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8007374:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007376:	b2da      	uxtb	r2, r3
 8007378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800737a:	1c59      	adds	r1, r3, #1
 800737c:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800737e:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8007380:	440b      	add	r3, r1
 8007382:	3230      	adds	r2, #48	@ 0x30
 8007384:	b2d2      	uxtb	r2, r2
 8007386:	3378      	adds	r3, #120	@ 0x78
 8007388:	443b      	add	r3, r7
 800738a:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 800738e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007390:	ee07 3a90 	vmov	s15, r3
 8007394:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007398:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 800739c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80073a0:	ed97 6b02 	vldr	d6, [r7, #8]
 80073a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80073a8:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 80073ac:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80073b0:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80073b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80073b8:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 80073bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073be:	3301      	adds	r3, #1
 80073c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80073c2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80073c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073c6:	4413      	add	r3, r2
 80073c8:	2b27      	cmp	r3, #39	@ 0x27
 80073ca:	dc07      	bgt.n	80073dc <mg_dtoa+0x4e4>
 80073cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80073ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073d0:	429a      	cmp	r2, r3
 80073d2:	dbc4      	blt.n	800735e <mg_dtoa+0x466>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80073d4:	e002      	b.n	80073dc <mg_dtoa+0x4e4>
 80073d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073d8:	3b01      	subs	r3, #1
 80073da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00c      	beq.n	80073fc <mg_dtoa+0x504>
 80073e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	dd09      	ble.n	80073fc <mg_dtoa+0x504>
 80073e8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80073ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073ec:	4413      	add	r3, r2
 80073ee:	3b01      	subs	r3, #1
 80073f0:	3378      	adds	r3, #120	@ 0x78
 80073f2:	443b      	add	r3, r7
 80073f4:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80073f8:	2b30      	cmp	r3, #48	@ 0x30
 80073fa:	d0ec      	beq.n	80073d6 <mg_dtoa+0x4de>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80073fc:	78fb      	ldrb	r3, [r7, #3]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00f      	beq.n	8007422 <mg_dtoa+0x52a>
 8007402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007404:	2b00      	cmp	r3, #0
 8007406:	dd0c      	ble.n	8007422 <mg_dtoa+0x52a>
 8007408:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800740a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800740c:	4413      	add	r3, r2
 800740e:	3b01      	subs	r3, #1
 8007410:	3378      	adds	r3, #120	@ 0x78
 8007412:	443b      	add	r3, r7
 8007414:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8007418:	2b2e      	cmp	r3, #46	@ 0x2e
 800741a:	d102      	bne.n	8007422 <mg_dtoa+0x52a>
 800741c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800741e:	3b01      	subs	r3, #1
 8007420:	66fb      	str	r3, [r7, #108]	@ 0x6c
  n += s;
 8007422:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007424:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007426:	4413      	add	r3, r2
 8007428:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 800742a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800742c:	2b27      	cmp	r3, #39	@ 0x27
 800742e:	dd01      	ble.n	8007434 <mg_dtoa+0x53c>
 8007430:	2327      	movs	r3, #39	@ 0x27
 8007432:	66fb      	str	r3, [r7, #108]	@ 0x6c
  buf[n] = '\0';
 8007434:	f107 0218 	add.w	r2, r7, #24
 8007438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800743a:	4413      	add	r3, r2
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8007440:	f107 0318 	add.w	r3, r7, #24
 8007444:	4a04      	ldr	r2, [pc, #16]	@ (8007458 <mg_dtoa+0x560>)
 8007446:	6939      	ldr	r1, [r7, #16]
 8007448:	6978      	ldr	r0, [r7, #20]
 800744a:	f009 f9fd 	bl	8010848 <mg_snprintf>
 800744e:	4603      	mov	r3, r0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3778      	adds	r7, #120	@ 0x78
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	080244b4 	.word	0x080244b4
 800745c:	9999999a 	.word	0x9999999a
 8007460:	3fb99999 	.word	0x3fb99999

08007464 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8007464:	b5b0      	push	{r4, r5, r7, lr}
 8007466:	b08c      	sub	sp, #48	@ 0x30
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8007470:	4b53      	ldr	r3, [pc, #332]	@ (80075c0 <mg_lld+0x15c>)
 8007472:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8007474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007478:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 800747c:	2300      	movs	r3, #0
 800747e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8007480:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8007484:	2b00      	cmp	r3, #0
 8007486:	d012      	beq.n	80074ae <mg_lld+0x4a>
 8007488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800748c:	2b00      	cmp	r3, #0
 800748e:	da0e      	bge.n	80074ae <mg_lld+0x4a>
 8007490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	627a      	str	r2, [r7, #36]	@ 0x24
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4413      	add	r3, r2
 800749a:	222d      	movs	r2, #45	@ 0x2d
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a2:	2100      	movs	r1, #0
 80074a4:	4254      	negs	r4, r2
 80074a6:	eb61 0503 	sbc.w	r5, r1, r3
 80074aa:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 80074ae:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d021      	beq.n	80074fa <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 80074b6:	2300      	movs	r3, #0
 80074b8:	623b      	str	r3, [r7, #32]
 80074ba:	e019      	b.n	80074f0 <mg_lld+0x8c>
 80074bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074be:	f003 030f 	and.w	r3, r3, #15
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	441a      	add	r2, r3
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	1c59      	adds	r1, r3, #1
 80074ca:	6239      	str	r1, [r7, #32]
 80074cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074ce:	440b      	add	r3, r1
 80074d0:	68f9      	ldr	r1, [r7, #12]
 80074d2:	440b      	add	r3, r1
 80074d4:	7812      	ldrb	r2, [r2, #0]
 80074d6:	701a      	strb	r2, [r3, #0]
 80074d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	f04f 0300 	mov.w	r3, #0
 80074e4:	0902      	lsrs	r2, r0, #4
 80074e6:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80074ea:	090b      	lsrs	r3, r1, #4
 80074ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80074f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80074f4:	4313      	orrs	r3, r2
 80074f6:	d1e1      	bne.n	80074bc <mg_lld+0x58>
 80074f8:	e025      	b.n	8007546 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80074fa:	2300      	movs	r3, #0
 80074fc:	623b      	str	r3, [r7, #32]
 80074fe:	e01e      	b.n	800753e <mg_lld+0xda>
 8007500:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007504:	f04f 020a 	mov.w	r2, #10
 8007508:	f04f 0300 	mov.w	r3, #0
 800750c:	f7f8 ff68 	bl	80003e0 <__aeabi_uldivmod>
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	441a      	add	r2, r3
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	1c59      	adds	r1, r3, #1
 8007518:	6239      	str	r1, [r7, #32]
 800751a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800751c:	440b      	add	r3, r1
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	440b      	add	r3, r1
 8007522:	7812      	ldrb	r2, [r2, #0]
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800752a:	f04f 020a 	mov.w	r2, #10
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	f7f8 ff55 	bl	80003e0 <__aeabi_uldivmod>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800753e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007542:	4313      	orrs	r3, r2
 8007544:	d1dc      	bne.n	8007500 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
 800754a:	e022      	b.n	8007592 <mg_lld+0x12e>
    char t = buf[s + i];
 800754c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800754e:	69fb      	ldr	r3, [r7, #28]
 8007550:	4413      	add	r3, r2
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 800755a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	441a      	add	r2, r3
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	3b01      	subs	r3, #1
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	441a      	add	r2, r3
 800756a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	440b      	add	r3, r1
 8007570:	68f9      	ldr	r1, [r7, #12]
 8007572:	440b      	add	r3, r1
 8007574:	7812      	ldrb	r2, [r2, #0]
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	441a      	add	r2, r3
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4413      	add	r3, r2
 8007588:	7dfa      	ldrb	r2, [r7, #23]
 800758a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	3301      	adds	r3, #1
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	085b      	lsrs	r3, r3, #1
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	429a      	cmp	r2, r3
 800759a:	d3d7      	bcc.n	800754c <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 800759c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	d106      	bne.n	80075b2 <mg_lld+0x14e>
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	1c5a      	adds	r2, r3, #1
 80075a8:	623a      	str	r2, [r7, #32]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4413      	add	r3, r2
 80075ae:	2230      	movs	r2, #48	@ 0x30
 80075b0:	701a      	strb	r2, [r3, #0]
  return n + s;
 80075b2:	6a3a      	ldr	r2, [r7, #32]
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	4413      	add	r3, r2
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3730      	adds	r7, #48	@ 0x30
 80075bc:	46bd      	mov	sp, r7
 80075be:	bdb0      	pop	{r4, r5, r7, pc}
 80075c0:	080244d0 	.word	0x080244d0

080075c4 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 80075d6:	e009      	b.n	80075ec <scpy+0x28>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	617a      	str	r2, [r7, #20]
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	4413      	add	r3, r2
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d205      	bcs.n	8007600 <scpy+0x3c>
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	4413      	add	r3, r2
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1eb      	bne.n	80075d8 <scpy+0x14>
  return i;
 8007600:	697b      	ldr	r3, [r7, #20]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 800760a:	b40c      	push	{r2, r3}
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800761a:	f107 031c 	add.w	r3, r7, #28
 800761e:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8007620:	f107 0308 	add.w	r3, r7, #8
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 f809 	bl	8007640 <mg_vxprintf>
 800762e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8007630:	68fb      	ldr	r3, [r7, #12]
}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800763c:	b002      	add	sp, #8
 800763e:	4770      	bx	lr

08007640 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8007640:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007644:	b0a6      	sub	sp, #152	@ 0x98
 8007646:	af02      	add	r7, sp, #8
 8007648:	60f8      	str	r0, [r7, #12]
 800764a:	60b9      	str	r1, [r7, #8]
 800764c:	607a      	str	r2, [r7, #4]
 800764e:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8007650:	2300      	movs	r3, #0
 8007652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007656:	2300      	movs	r3, #0
 8007658:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 800765c:	e383      	b.n	8007d66 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007664:	4413      	add	r3, r2
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2b25      	cmp	r3, #37	@ 0x25
 800766a:	f040 8369 	bne.w	8007d40 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 800766e:	2300      	movs	r3, #0
 8007670:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007672:	2300      	movs	r3, #0
 8007674:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007676:	2300      	movs	r3, #0
 8007678:	677b      	str	r3, [r7, #116]	@ 0x74
 800767a:	f04f 33ff 	mov.w	r3, #4294967295
 800767e:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8007680:	2320      	movs	r3, #32
 8007682:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007686:	2300      	movs	r3, #0
 8007688:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800768c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007690:	3301      	adds	r3, #1
 8007692:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800769c:	4413      	add	r3, r2
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 80076a4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80076a8:	2b23      	cmp	r3, #35	@ 0x23
 80076aa:	d10e      	bne.n	80076ca <mg_vxprintf+0x8a>
 80076ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80076ae:	3301      	adds	r3, #1
 80076b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80076b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076b6:	3301      	adds	r3, #1
 80076b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076c2:	4413      	add	r3, r2
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80076ca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80076ce:	2b2d      	cmp	r3, #45	@ 0x2d
 80076d0:	d110      	bne.n	80076f4 <mg_vxprintf+0xb4>
 80076d2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80076d6:	3301      	adds	r3, #1
 80076d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80076dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076e0:	3301      	adds	r3, #1
 80076e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076ec:	4413      	add	r3, r2
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 80076f4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80076f8:	2b30      	cmp	r3, #48	@ 0x30
 80076fa:	d127      	bne.n	800774c <mg_vxprintf+0x10c>
 80076fc:	2330      	movs	r3, #48	@ 0x30
 80076fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007706:	3301      	adds	r3, #1
 8007708:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007712:	4413      	add	r3, r2
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 800771a:	e017      	b.n	800774c <mg_vxprintf+0x10c>
 800771c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800771e:	4613      	mov	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	005b      	lsls	r3, r3, #1
 8007726:	677b      	str	r3, [r7, #116]	@ 0x74
 8007728:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800772c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800772e:	4413      	add	r3, r2
 8007730:	3b30      	subs	r3, #48	@ 0x30
 8007732:	677b      	str	r3, [r7, #116]	@ 0x74
 8007734:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007738:	3301      	adds	r3, #1
 800773a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007744:	4413      	add	r3, r2
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800774c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff fae5 	bl	8006d20 <is_digit>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1df      	bne.n	800771c <mg_vxprintf+0xdc>
      if (c == '.') {
 800775c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007760:	2b2e      	cmp	r3, #46	@ 0x2e
 8007762:	d153      	bne.n	800780c <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8007764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007768:	3301      	adds	r3, #1
 800776a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007774:	4413      	add	r3, r2
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 800777c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007780:	2b2a      	cmp	r3, #42	@ 0x2a
 8007782:	d113      	bne.n	80077ac <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	1d19      	adds	r1, r3, #4
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	6011      	str	r1, [r2, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 8007792:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007796:	3301      	adds	r3, #1
 8007798:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077a2:	4413      	add	r3, r2
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80077aa:	e02f      	b.n	800780c <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80077b0:	e017      	b.n	80077e2 <mg_vxprintf+0x1a2>
 80077b2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80077b4:	4613      	mov	r3, r2
 80077b6:	009b      	lsls	r3, r3, #2
 80077b8:	4413      	add	r3, r2
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80077be:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80077c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077c4:	4413      	add	r3, r2
 80077c6:	3b30      	subs	r3, #48	@ 0x30
 80077c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80077ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077ce:	3301      	adds	r3, #1
 80077d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077da:	4413      	add	r3, r2
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80077e2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7ff fa9a 	bl	8006d20 <is_digit>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1df      	bne.n	80077b2 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 80077f2:	e00b      	b.n	800780c <mg_vxprintf+0x1cc>
 80077f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077f8:	3301      	adds	r3, #1
 80077fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007804:	4413      	add	r3, r2
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800780c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007810:	2b68      	cmp	r3, #104	@ 0x68
 8007812:	d0ef      	beq.n	80077f4 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8007814:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007818:	2b6c      	cmp	r3, #108	@ 0x6c
 800781a:	d121      	bne.n	8007860 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 800781c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800781e:	3301      	adds	r3, #1
 8007820:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007826:	3301      	adds	r3, #1
 8007828:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007832:	4413      	add	r3, r2
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 800783a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800783e:	2b6c      	cmp	r3, #108	@ 0x6c
 8007840:	d10e      	bne.n	8007860 <mg_vxprintf+0x220>
 8007842:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007844:	3301      	adds	r3, #1
 8007846:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007848:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800784c:	3301      	adds	r3, #1
 800784e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007858:	4413      	add	r3, r2
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8007860:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007864:	2b70      	cmp	r3, #112	@ 0x70
 8007866:	d103      	bne.n	8007870 <mg_vxprintf+0x230>
 8007868:	2301      	movs	r3, #1
 800786a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800786c:	2301      	movs	r3, #1
 800786e:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8007870:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007874:	2b64      	cmp	r3, #100	@ 0x64
 8007876:	d018      	beq.n	80078aa <mg_vxprintf+0x26a>
 8007878:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800787c:	2b75      	cmp	r3, #117	@ 0x75
 800787e:	d014      	beq.n	80078aa <mg_vxprintf+0x26a>
 8007880:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007884:	2b78      	cmp	r3, #120	@ 0x78
 8007886:	d010      	beq.n	80078aa <mg_vxprintf+0x26a>
 8007888:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800788c:	2b58      	cmp	r3, #88	@ 0x58
 800788e:	d00c      	beq.n	80078aa <mg_vxprintf+0x26a>
 8007890:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007894:	2b70      	cmp	r3, #112	@ 0x70
 8007896:	d008      	beq.n	80078aa <mg_vxprintf+0x26a>
 8007898:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800789c:	2b67      	cmp	r3, #103	@ 0x67
 800789e:	d004      	beq.n	80078aa <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 80078a0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80078a4:	2b66      	cmp	r3, #102	@ 0x66
 80078a6:	f040 816c 	bne.w	8007b82 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80078aa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80078ae:	2b64      	cmp	r3, #100	@ 0x64
 80078b0:	bf0c      	ite	eq
 80078b2:	2301      	moveq	r3, #1
 80078b4:	2300      	movne	r3, #0
 80078b6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80078ba:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80078be:	2b78      	cmp	r3, #120	@ 0x78
 80078c0:	d007      	beq.n	80078d2 <mg_vxprintf+0x292>
 80078c2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80078c6:	2b58      	cmp	r3, #88	@ 0x58
 80078c8:	d003      	beq.n	80078d2 <mg_vxprintf+0x292>
 80078ca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80078ce:	2b70      	cmp	r3, #112	@ 0x70
 80078d0:	d101      	bne.n	80078d6 <mg_vxprintf+0x296>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <mg_vxprintf+0x298>
 80078d6:	2300      	movs	r3, #0
 80078d8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80078dc:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 80078e8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d001      	beq.n	80078f2 <mg_vxprintf+0x2b2>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e000      	b.n	80078f4 <mg_vxprintf+0x2b4>
 80078f2:	2300      	movs	r3, #0
 80078f4:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 80078f6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80078fa:	2b67      	cmp	r3, #103	@ 0x67
 80078fc:	d003      	beq.n	8007906 <mg_vxprintf+0x2c6>
 80078fe:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007902:	2b66      	cmp	r3, #102	@ 0x66
 8007904:	d124      	bne.n	8007950 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3307      	adds	r3, #7
 800790c:	f023 0307 	bic.w	r3, r3, #7
 8007910:	f103 0108 	add.w	r1, r3, #8
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	6011      	str	r1, [r2, #0]
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8007920:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007926:	d101      	bne.n	800792c <mg_vxprintf+0x2ec>
 8007928:	2306      	movs	r3, #6
 800792a:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 800792c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800792e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007932:	2b67      	cmp	r3, #103	@ 0x67
 8007934:	bf0c      	ite	eq
 8007936:	2301      	moveq	r3, #1
 8007938:	2300      	movne	r3, #0
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f107 0014 	add.w	r0, r7, #20
 8007940:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8007944:	2128      	movs	r1, #40	@ 0x28
 8007946:	f7ff fad7 	bl	8006ef8 <mg_dtoa>
 800794a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 800794e:	e069      	b.n	8007a24 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8007950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007952:	2b02      	cmp	r3, #2
 8007954:	d11c      	bne.n	8007990 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3307      	adds	r3, #7
 800795c:	f023 0307 	bic.w	r3, r3, #7
 8007960:	f103 0108 	add.w	r1, r3, #8
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	6011      	str	r1, [r2, #0]
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8007970:	f107 0114 	add.w	r1, r7, #20
 8007974:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007984:	4608      	mov	r0, r1
 8007986:	f7ff fd6d 	bl	8007464 <mg_lld>
 800798a:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 800798e:	e049      	b.n	8007a24 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8007990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007992:	2b01      	cmp	r3, #1
 8007994:	d123      	bne.n	80079de <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	1d19      	adds	r1, r3, #4
 800799c:	683a      	ldr	r2, [r7, #0]
 800799e:	6011      	str	r1, [r2, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 80079a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d004      	beq.n	80079b6 <mg_vxprintf+0x376>
 80079ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079ae:	17da      	asrs	r2, r3, #31
 80079b0:	461c      	mov	r4, r3
 80079b2:	4615      	mov	r5, r2
 80079b4:	e003      	b.n	80079be <mg_vxprintf+0x37e>
 80079b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079b8:	2200      	movs	r2, #0
 80079ba:	461c      	mov	r4, r3
 80079bc:	4615      	mov	r5, r2
 80079be:	f107 0114 	add.w	r1, r7, #20
 80079c2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80079c6:	9301      	str	r3, [sp, #4]
 80079c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	4622      	mov	r2, r4
 80079d0:	462b      	mov	r3, r5
 80079d2:	4608      	mov	r0, r1
 80079d4:	f7ff fd46 	bl	8007464 <mg_lld>
 80079d8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 80079dc:	e022      	b.n	8007a24 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	1d19      	adds	r1, r3, #4
 80079e4:	683a      	ldr	r2, [r7, #0]
 80079e6:	6011      	str	r1, [r2, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80079ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <mg_vxprintf+0x3be>
 80079f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079f6:	17da      	asrs	r2, r3, #31
 80079f8:	4698      	mov	r8, r3
 80079fa:	4691      	mov	r9, r2
 80079fc:	e003      	b.n	8007a06 <mg_vxprintf+0x3c6>
 80079fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a00:	2200      	movs	r2, #0
 8007a02:	4698      	mov	r8, r3
 8007a04:	4691      	mov	r9, r2
 8007a06:	f107 0114 	add.w	r1, r7, #20
 8007a0a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	4642      	mov	r2, r8
 8007a18:	464b      	mov	r3, r9
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	f7ff fd22 	bl	8007464 <mg_lld>
 8007a20:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8007a24:	2300      	movs	r3, #0
 8007a26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a2a:	e007      	b.n	8007a3c <mg_vxprintf+0x3fc>
 8007a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a36:	3301      	adds	r3, #1
 8007a38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007a40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d202      	bcs.n	8007a4c <mg_vxprintf+0x40c>
 8007a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d1ef      	bne.n	8007a2c <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a52:	e011      	b.n	8007a78 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8007a54:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007a58:	2301      	movs	r3, #1
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff fdb1 	bl	80075c4 <scpy>
 8007a62:	4602      	mov	r2, r0
 8007a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a68:	4413      	add	r3, r2
 8007a6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8007a6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a72:	3301      	adds	r3, #1
 8007a74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007a7c:	2b20      	cmp	r3, #32
 8007a7e:	d110      	bne.n	8007aa2 <mg_vxprintf+0x462>
 8007a80:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10c      	bne.n	8007aa2 <mg_vxprintf+0x462>
 8007a88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d207      	bcs.n	8007aa2 <mg_vxprintf+0x462>
 8007a92:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007a96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a9a:	4413      	add	r3, r2
 8007a9c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d8d8      	bhi.n	8007a54 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8007aa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007aa4:	4ab7      	ldr	r2, [pc, #732]	@ (8007d84 <mg_vxprintf+0x744>)
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7ff fd8b 	bl	80075c4 <scpy>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8007aba:	2300      	movs	r3, #0
 8007abc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ac0:	e011      	b.n	8007ae6 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8007ac2:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	68f8      	ldr	r0, [r7, #12]
 8007acc:	f7ff fd7a 	bl	80075c4 <scpy>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8007adc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ae6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007aea:	2b30      	cmp	r3, #48	@ 0x30
 8007aec:	d10c      	bne.n	8007b08 <mg_vxprintf+0x4c8>
 8007aee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007af2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d207      	bcs.n	8007b08 <mg_vxprintf+0x4c8>
 8007af8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b00:	4413      	add	r3, r2
 8007b02:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d8dc      	bhi.n	8007ac2 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8007b08:	f107 0214 	add.w	r2, r7, #20
 8007b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fd56 	bl	80075c4 <scpy>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b1e:	4413      	add	r3, r2
 8007b20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8007b24:	2300      	movs	r3, #0
 8007b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b2a:	e011      	b.n	8007b50 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8007b2c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007b30:	2301      	movs	r3, #1
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff fd45 	bl	80075c4 <scpy>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b40:	4413      	add	r3, r2
 8007b42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8007b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b50:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	f040 80ea 	bne.w	8007d2e <mg_vxprintf+0x6ee>
 8007b5a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 80e5 	beq.w	8007d2e <mg_vxprintf+0x6ee>
 8007b64:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	f080 80df 	bcs.w	8007d2e <mg_vxprintf+0x6ee>
 8007b70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007b74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b78:	4413      	add	r3, r2
 8007b7a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d8d5      	bhi.n	8007b2c <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8007b80:	e0d5      	b.n	8007d2e <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8007b82:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b86:	2b6d      	cmp	r3, #109	@ 0x6d
 8007b88:	d003      	beq.n	8007b92 <mg_vxprintf+0x552>
 8007b8a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007b8e:	2b4d      	cmp	r3, #77	@ 0x4d
 8007b90:	d128      	bne.n	8007be4 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	1d19      	adds	r1, r3, #4
 8007b98:	683a      	ldr	r2, [r7, #0]
 8007b9a:	6011      	str	r1, [r2, #0]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8007ba0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ba4:	2b6d      	cmp	r3, #109	@ 0x6d
 8007ba6:	d103      	bne.n	8007bb0 <mg_vxprintf+0x570>
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	68b9      	ldr	r1, [r7, #8]
 8007bac:	2022      	movs	r0, #34	@ 0x22
 8007bae:	4798      	blx	r3
        n += f(out, param, ap);
 8007bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bb2:	683a      	ldr	r2, [r7, #0]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	4798      	blx	r3
 8007bba:	4602      	mov	r2, r0
 8007bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8007bc6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007bca:	2b6d      	cmp	r3, #109	@ 0x6d
 8007bcc:	f040 80b1 	bne.w	8007d32 <mg_vxprintf+0x6f2>
 8007bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bd4:	3302      	adds	r3, #2
 8007bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	2022      	movs	r0, #34	@ 0x22
 8007be0:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8007be2:	e0a6      	b.n	8007d32 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8007be4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007be8:	2b63      	cmp	r3, #99	@ 0x63
 8007bea:	d112      	bne.n	8007c12 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	1d19      	adds	r1, r3, #4
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8007bfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bfc:	b2da      	uxtb	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	68b9      	ldr	r1, [r7, #8]
 8007c02:	4610      	mov	r0, r2
 8007c04:	4798      	blx	r3
        n++;
 8007c06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007c10:	e090      	b.n	8007d34 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8007c12:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c16:	2b73      	cmp	r3, #115	@ 0x73
 8007c18:	d16b      	bne.n	8007cf2 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	1d19      	adds	r1, r3, #4
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	6011      	str	r1, [r2, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8007c28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2e:	d109      	bne.n	8007c44 <mg_vxprintf+0x604>
 8007c30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d004      	beq.n	8007c40 <mg_vxprintf+0x600>
 8007c36:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8007c38:	f7f8 fbca 	bl	80003d0 <strlen>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	e000      	b.n	8007c42 <mg_vxprintf+0x602>
 8007c40:	2300      	movs	r3, #0
 8007c42:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c4a:	e011      	b.n	8007c70 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8007c4c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007c50:	2301      	movs	r3, #1
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7ff fcb5 	bl	80075c4 <scpy>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c60:	4413      	add	r3, r2
 8007c62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8007c66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c70:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <mg_vxprintf+0x64e>
 8007c78:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d206      	bcs.n	8007c8e <mg_vxprintf+0x64e>
 8007c80:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c86:	4413      	add	r3, r2
 8007c88:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d8de      	bhi.n	8007c4c <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8007c8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7ff fc95 	bl	80075c4 <scpy>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ca0:	4413      	add	r3, r2
 8007ca2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cac:	e011      	b.n	8007cd2 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8007cae:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	68b9      	ldr	r1, [r7, #8]
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7ff fc84 	bl	80075c4 <scpy>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8007cc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ccc:	3301      	adds	r3, #1
 8007cce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007cd2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02c      	beq.n	8007d34 <mg_vxprintf+0x6f4>
 8007cda:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007cdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d228      	bcs.n	8007d34 <mg_vxprintf+0x6f4>
 8007ce2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ce8:	4413      	add	r3, r2
 8007cea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d8de      	bhi.n	8007cae <mg_vxprintf+0x66e>
 8007cf0:	e020      	b.n	8007d34 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8007cf2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007cf6:	2b25      	cmp	r3, #37	@ 0x25
 8007cf8:	d109      	bne.n	8007d0e <mg_vxprintf+0x6ce>
        out('%', param);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	68b9      	ldr	r1, [r7, #8]
 8007cfe:	2025      	movs	r0, #37	@ 0x25
 8007d00:	4798      	blx	r3
        n++;
 8007d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d06:	3301      	adds	r3, #1
 8007d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d0c:	e012      	b.n	8007d34 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	2025      	movs	r0, #37	@ 0x25
 8007d14:	4798      	blx	r3
        out(c, param);
 8007d16:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	4610      	mov	r0, r2
 8007d20:	4798      	blx	r3
        n += 2;
 8007d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d26:	3302      	adds	r3, #2
 8007d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d2c:	e002      	b.n	8007d34 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8007d2e:	bf00      	nop
 8007d30:	e000      	b.n	8007d34 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8007d32:	bf00      	nop
      }
      i++;
 8007d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d38:	3301      	adds	r3, #1
 8007d3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d3e:	e012      	b.n	8007d66 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d46:	4413      	add	r3, r2
 8007d48:	781a      	ldrb	r2, [r3, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	68b9      	ldr	r1, [r7, #8]
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4798      	blx	r3
 8007d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d56:	3301      	adds	r3, #1
 8007d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d60:	3301      	adds	r3, #1
 8007d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d6c:	4413      	add	r3, r2
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f47f ac74 	bne.w	800765e <mg_vxprintf+0x1e>
    }
  }
  return n;
 8007d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3790      	adds	r7, #144	@ 0x90
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007d84:	080244e4 	.word	0x080244e4

08007d88 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b086      	sub	sp, #24
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8007d94:	2108      	movs	r1, #8
 8007d96:	2001      	movs	r0, #1
 8007d98:	f01b f8e8 	bl	8022f6c <calloc>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d013      	beq.n	8007dce <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	6879      	ldr	r1, [r7, #4]
 8007dac:	68b8      	ldr	r0, [r7, #8]
 8007dae:	4798      	blx	r3
 8007db0:	4602      	mov	r2, r0
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	68fa      	ldr	r2, [r7, #12]
 8007dba:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d104      	bne.n	8007dce <mg_fs_open+0x46>
      free(fd);
 8007dc4:	6978      	ldr	r0, [r7, #20]
 8007dc6:	f01b f8f5 	bl	8022fb4 <free>
      fd = NULL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8007dce:	697b      	ldr	r3, [r7, #20]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d009      	beq.n	8007dfa <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6812      	ldr	r2, [r2, #0]
 8007df0:	4610      	mov	r0, r2
 8007df2:	4798      	blx	r3
    free(fd);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f01b f8dd 	bl	8022fb4 <free>
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7f8 fade 	bl	80003d0 <strlen>
 8007e14:	4602      	mov	r2, r0
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d219      	bcs.n	8007e50 <is_dir_prefix+0x4e>
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f01b fb8d 	bl	8023540 <strncmp>
 8007e26:	4603      	mov	r3, r0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d111      	bne.n	8007e50 <is_dir_prefix+0x4e>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00c      	beq.n	8007e4c <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	4413      	add	r3, r2
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8007e3c:	d006      	beq.n	8007e4c <is_dir_prefix+0x4a>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	4413      	add	r3, r2
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b2f      	cmp	r3, #47	@ 0x2f
 8007e4a:	d101      	bne.n	8007e50 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <is_dir_prefix+0x50>
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b088      	sub	sp, #32
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	60f8      	str	r0, [r7, #12]
 8007e62:	60b9      	str	r1, [r7, #8]
 8007e64:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7f8 fab2 	bl	80003d0 <strlen>
 8007e6c:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	68b9      	ldr	r1, [r7, #8]
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f018 fe62 	bl	8020b3c <mg_unpack>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <packed_stat+0x28>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e017      	b.n	8007eb2 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8007e82:	2300      	movs	r3, #0
 8007e84:	61fb      	str	r3, [r7, #28]
 8007e86:	e00c      	b.n	8007ea2 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	69b9      	ldr	r1, [r7, #24]
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f7ff ffb8 	bl	8007e02 <is_dir_prefix>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <packed_stat+0x42>
 8007e98:	2304      	movs	r3, #4
 8007e9a:	e00a      	b.n	8007eb2 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	61fb      	str	r3, [r7, #28]
 8007ea2:	69f8      	ldr	r0, [r7, #28]
 8007ea4:	f018 fe36 	bl	8020b14 <mg_unlist>
 8007ea8:	6178      	str	r0, [r7, #20]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1eb      	bne.n	8007e88 <packed_stat+0x2e>
  }
  return 0;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3720      	adds	r7, #32
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
	...

08007ebc <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b0be      	sub	sp, #248	@ 0xf8
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7f8 fa81 	bl	80003d0 <strlen>
 8007ece:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007edc:	e05a      	b.n	8007f94 <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 8007ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007ee2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f7ff ff8b 	bl	8007e02 <is_dir_prefix>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d048      	beq.n	8007f84 <packed_list+0xc8>
    begin = &path[n + 1];
 8007ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007efc:	4413      	add	r3, r2
 8007efe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 8007f02:	212f      	movs	r1, #47	@ 0x2f
 8007f04:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8007f08:	f01b fb0d 	bl	8023526 <strchr>
 8007f0c:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 8007f10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d109      	bne.n	8007f2c <packed_list+0x70>
 8007f18:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8007f1c:	f7f8 fa58 	bl	80003d0 <strlen>
 8007f20:	4602      	mov	r2, r0
 8007f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f26:	4413      	add	r3, r2
 8007f28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8007f2c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8007f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f34:	1ad2      	subs	r2, r2, r3
 8007f36:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8007f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	4613      	mov	r3, r2
 8007f42:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb4 <packed_list+0xf8>)
 8007f44:	2164      	movs	r1, #100	@ 0x64
 8007f46:	f008 fc7f 	bl	8010848 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8007f50:	f107 0214 	add.w	r2, r7, #20
 8007f54:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8007f58:	4611      	mov	r1, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7f8 f9d8 	bl	8000310 <strcmp>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d010      	beq.n	8007f88 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 8007f66:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6879      	ldr	r1, [r7, #4]
 8007f6e:	4610      	mov	r0, r2
 8007f70:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8007f72:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8007f76:	f107 0314 	add.w	r3, r7, #20
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f01b fbf8 	bl	8023772 <strcpy>
 8007f82:	e002      	b.n	8007f8a <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 8007f84:	bf00      	nop
 8007f86:	e000      	b.n	8007f8a <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8007f88:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8007f8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007f8e:	3301      	adds	r3, #1
 8007f90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f94:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8007f98:	f018 fdbc 	bl	8020b14 <mg_unlist>
 8007f9c:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d19a      	bne.n	8007ede <packed_list+0x22>
  }
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	37f0      	adds	r7, #240	@ 0xf0
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	080244c8 	.word	0x080244c8

08007fb8 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8007fc6:	f107 030c 	add.w	r3, r7, #12
 8007fca:	2200      	movs	r2, #0
 8007fcc:	4619      	mov	r1, r3
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f018 fdb4 	bl	8020b3c <mg_unpack>
 8007fd4:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <packed_open+0x2c>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e016      	b.n	8008012 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <packed_open+0x3a>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e00f      	b.n	8008012 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 8007ff2:	210c      	movs	r1, #12
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	f01a ffb9 	bl	8022f6c <calloc>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <packed_open+0x58>
    fp->size = size;
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	605a      	str	r2, [r3, #4]
    fp->data = data;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8008010:	693b      	ldr	r3, [r7, #16]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <packed_close>:

static void packed_close(void *fp) {
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <packed_close+0x14>
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f01a ffc3 	bl	8022fb4 <free>
}
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8008036:	b580      	push	{r7, lr}
 8008038:	b086      	sub	sp, #24
 800803a:	af00      	add	r7, sp, #0
 800803c:	60f8      	str	r0, [r7, #12]
 800803e:	60b9      	str	r1, [r7, #8]
 8008040:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	441a      	add	r2, r3
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d905      	bls.n	8008062 <packed_read+0x2c>
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	1ad3      	subs	r3, r2, r3
 8008060:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	4413      	add	r3, r2
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	4619      	mov	r1, r3
 8008070:	68b8      	ldr	r0, [r7, #8]
 8008072:	f01b fb86 	bl	8023782 <memcpy>
  fp->pos += len;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	441a      	add	r2, r3
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	609a      	str	r2, [r3, #8]
  return len;
 8008082:	687b      	ldr	r3, [r7, #4]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3714      	adds	r7, #20
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 80080a6:	b480      	push	{r7}
 80080a8:	b085      	sub	sp, #20
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d903      	bls.n	80080ce <packed_seek+0x28>
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	609a      	str	r2, [r3, #8]
  return fp->pos;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	689b      	ldr	r3, [r3, #8]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
 80080e6:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr

080080f6 <packed_remove>:

static bool packed_remove(const char *path) {
 80080f6:	b480      	push	{r7}
 80080f8:	b083      	sub	sp, #12
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8008148:	bf00      	nop
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <p_open>:
static void *p_open(const char *path, int flags) {
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <p_close>:
static void p_close(void *fp) {
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr

08008180 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 80081be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <p_rename>:
static bool p_rename(const char *from, const char *to) {
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
 80081d6:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <p_remove>:
static bool p_remove(const char *path) {
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <p_mkdir>:
static bool p_mkdir(const char *path) {
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8008212:	b480      	push	{r7}
 8008214:	b089      	sub	sp, #36	@ 0x24
 8008216:	af00      	add	r7, sp, #0
 8008218:	60f8      	str	r0, [r7, #12]
 800821a:	60b9      	str	r1, [r7, #8]
 800821c:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800821e:	2300      	movs	r3, #0
 8008220:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d02d      	beq.n	8008284 <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	60fa      	str	r2, [r7, #12]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	60ba      	str	r2, [r7, #8]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	2b40      	cmp	r3, #64	@ 0x40
 8008240:	dd05      	ble.n	800824e <mg_ncasecmp+0x3c>
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b5a      	cmp	r3, #90	@ 0x5a
 8008246:	dc02      	bgt.n	800824e <mg_ncasecmp+0x3c>
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	3320      	adds	r3, #32
 800824c:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b40      	cmp	r3, #64	@ 0x40
 8008252:	dd05      	ble.n	8008260 <mg_ncasecmp+0x4e>
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2b5a      	cmp	r3, #90	@ 0x5a
 8008258:	dc02      	bgt.n	8008260 <mg_ncasecmp+0x4e>
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	3320      	adds	r3, #32
 800825e:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d10a      	bne.n	8008284 <mg_ncasecmp+0x72>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3b01      	subs	r3, #1
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d005      	beq.n	8008284 <mg_ncasecmp+0x72>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3b01      	subs	r3, #1
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d1d1      	bne.n	8008228 <mg_ncasecmp+0x16>
  return diff;
 8008284:	69fb      	ldr	r3, [r7, #28]
}
 8008286:	4618      	mov	r0, r3
 8008288:	3724      	adds	r7, #36	@ 0x24
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
	...

08008294 <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8008294:	b480      	push	{r7}
 8008296:	b08b      	sub	sp, #44	@ 0x2c
 8008298:	af00      	add	r7, sp, #0
 800829a:	f107 0308 	add.w	r3, r7, #8
 800829e:	e883 0003 	stmia.w	r3, {r0, r1}
 80082a2:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 80082a4:	2300      	movs	r3, #0
 80082a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80082a8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ac:	61bb      	str	r3, [r7, #24]
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	4a42      	ldr	r2, [pc, #264]	@ (80083bc <mg_to_size_t+0x128>)
 80082b2:	fba2 2303 	umull	r2, r3, r2, r3
 80082b6:	08db      	lsrs	r3, r3, #3
 80082b8:	617b      	str	r3, [r7, #20]
 80082ba:	2300      	movs	r3, #0
 80082bc:	623b      	str	r3, [r7, #32]
 80082be:	2300      	movs	r3, #0
 80082c0:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80082c2:	e002      	b.n	80082ca <mg_to_size_t+0x36>
 80082c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c6:	3301      	adds	r3, #1
 80082c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d20b      	bcs.n	80082ea <mg_to_size_t+0x56>
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	4413      	add	r3, r2
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d0f2      	beq.n	80082c4 <mg_to_size_t+0x30>
 80082de:	68ba      	ldr	r2, [r7, #8]
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	4413      	add	r3, r2
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b09      	cmp	r3, #9
 80082e8:	d0ec      	beq.n	80082c4 <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d22b      	bcs.n	800834a <mg_to_size_t+0xb6>
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f6:	4413      	add	r3, r2
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80082fc:	d125      	bne.n	800834a <mg_to_size_t+0xb6>
 80082fe:	2300      	movs	r3, #0
 8008300:	e056      	b.n	80083b0 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008306:	4413      	add	r3, r2
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	3b30      	subs	r3, #48	@ 0x30
 800830c:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 800830e:	6a3a      	ldr	r2, [r7, #32]
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	429a      	cmp	r2, r3
 8008314:	d901      	bls.n	800831a <mg_to_size_t+0x86>
 8008316:	2300      	movs	r3, #0
 8008318:	e04a      	b.n	80083b0 <mg_to_size_t+0x11c>
    result *= 10;
 800831a:	6a3a      	ldr	r2, [r7, #32]
 800831c:	4613      	mov	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	4413      	add	r3, r2
 8008322:	005b      	lsls	r3, r3, #1
 8008324:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	6a3a      	ldr	r2, [r7, #32]
 800832e:	429a      	cmp	r2, r3
 8008330:	d901      	bls.n	8008336 <mg_to_size_t+0xa2>
 8008332:	2300      	movs	r3, #0
 8008334:	e03c      	b.n	80083b0 <mg_to_size_t+0x11c>
    result += digit;
 8008336:	6a3a      	ldr	r2, [r7, #32]
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	4413      	add	r3, r2
 800833c:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	3301      	adds	r3, #1
 8008342:	627b      	str	r3, [r7, #36]	@ 0x24
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	3301      	adds	r3, #1
 8008348:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800834e:	429a      	cmp	r2, r3
 8008350:	d20f      	bcs.n	8008372 <mg_to_size_t+0xde>
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	4413      	add	r3, r2
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b2f      	cmp	r3, #47	@ 0x2f
 800835c:	d909      	bls.n	8008372 <mg_to_size_t+0xde>
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008362:	4413      	add	r3, r2
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	2b39      	cmp	r3, #57	@ 0x39
 8008368:	d9cb      	bls.n	8008302 <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 800836a:	e002      	b.n	8008372 <mg_to_size_t+0xde>
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	3301      	adds	r3, #1
 8008370:	627b      	str	r3, [r7, #36]	@ 0x24
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008376:	429a      	cmp	r2, r3
 8008378:	d20b      	bcs.n	8008392 <mg_to_size_t+0xfe>
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837e:	4413      	add	r3, r2
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b20      	cmp	r3, #32
 8008384:	d0f2      	beq.n	800836c <mg_to_size_t+0xd8>
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838a:	4413      	add	r3, r2
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b09      	cmp	r3, #9
 8008390:	d0ec      	beq.n	800836c <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <mg_to_size_t+0x108>
 8008398:	2300      	movs	r3, #0
 800839a:	e009      	b.n	80083b0 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d001      	beq.n	80083a8 <mg_to_size_t+0x114>
 80083a4:	2300      	movs	r3, #0
 80083a6:	e003      	b.n	80083b0 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a3a      	ldr	r2, [r7, #32]
 80083ac:	601a      	str	r2, [r3, #0]
  return true;
 80083ae:	2301      	movs	r3, #1
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	372c      	adds	r7, #44	@ 0x2c
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	cccccccd 	.word	0xcccccccd

080083c0 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80083c0:	b082      	sub	sp, #8
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b08e      	sub	sp, #56	@ 0x38
 80083c6:	af02      	add	r7, sp, #8
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	1d38      	adds	r0, r7, #4
 80083cc:	e880 0006 	stmia.w	r0, {r1, r2}
 80083d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 80083d2:	f107 0310 	add.w	r3, r7, #16
 80083d6:	2200      	movs	r2, #0
 80083d8:	2100      	movs	r1, #0
 80083da:	4618      	mov	r0, r3
 80083dc:	f00b fe17 	bl	801400e <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 80083e0:	e023      	b.n	800842a <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80083e2:	f107 0318 	add.w	r3, r7, #24
 80083e6:	f107 0220 	add.w	r2, r7, #32
 80083ea:	213d      	movs	r1, #61	@ 0x3d
 80083ec:	9100      	str	r1, [sp, #0]
 80083ee:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80083f2:	c903      	ldmia	r1, {r0, r1}
 80083f4:	f00b ffec 	bl	80143d0 <mg_span>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d015      	beq.n	800842a <mg_http_var+0x6a>
 80083fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	429a      	cmp	r2, r3
 8008404:	d111      	bne.n	800842a <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8008406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008408:	6a39      	ldr	r1, [r7, #32]
 800840a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff ff00 	bl	8008212 <mg_ncasecmp>
 8008412:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8008414:	2b00      	cmp	r3, #0
 8008416:	d108      	bne.n	800842a <mg_http_var+0x6a>
      result = v;
 8008418:	f107 0310 	add.w	r3, r7, #16
 800841c:	f107 0218 	add.w	r2, r7, #24
 8008420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008424:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8008428:	e00b      	b.n	8008442 <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 800842a:	1d3b      	adds	r3, r7, #4
 800842c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8008430:	2126      	movs	r1, #38	@ 0x26
 8008432:	9100      	str	r1, [sp, #0]
 8008434:	1d39      	adds	r1, r7, #4
 8008436:	c903      	ldmia	r1, {r0, r1}
 8008438:	f00b ffca 	bl	80143d0 <mg_span>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1cf      	bne.n	80083e2 <mg_http_var+0x22>
    }
  }
  return result;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	461a      	mov	r2, r3
 8008446:	f107 0310 	add.w	r3, r7, #16
 800844a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800844e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	3730      	adds	r7, #48	@ 0x30
 8008456:	46bd      	mov	sp, r7
 8008458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800845c:	b002      	add	sp, #8
 800845e:	4770      	bx	lr

08008460 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b08c      	sub	sp, #48	@ 0x30
 8008464:	af02      	add	r7, sp, #8
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <mg_http_get_var+0x20>
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d002      	beq.n	800848c <mg_http_get_var+0x2c>
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d103      	bne.n	8008494 <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 800848c:	f06f 0301 	mvn.w	r3, #1
 8008490:	627b      	str	r3, [r7, #36]	@ 0x24
 8008492:	e033      	b.n	80084fc <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d006      	beq.n	80084aa <mg_http_get_var+0x4a>
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <mg_http_get_var+0x4a>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d103      	bne.n	80084b2 <mg_http_get_var+0x52>
    len = -1;  // Bad source
 80084aa:	f04f 33ff 	mov.w	r3, #4294967295
 80084ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80084b0:	e024      	b.n	80084fc <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80084b2:	f107 031c 	add.w	r3, r7, #28
 80084b6:	68b9      	ldr	r1, [r7, #8]
 80084b8:	4618      	mov	r0, r3
 80084ba:	f00b fd8b 	bl	8013fd4 <mg_str_s>
 80084be:	f107 0014 	add.w	r0, r7, #20
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	ca06      	ldmia	r2, {r1, r2}
 80084cc:	f7ff ff78 	bl	80083c0 <mg_http_var>
    if (v.buf == NULL) {
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d103      	bne.n	80084de <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 80084d6:	f06f 0303 	mvn.w	r3, #3
 80084da:	627b      	str	r3, [r7, #36]	@ 0x24
 80084dc:	e00e      	b.n	80084fc <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 80084de:	6978      	ldr	r0, [r7, #20]
 80084e0:	69b9      	ldr	r1, [r7, #24]
 80084e2:	2301      	movs	r3, #1
 80084e4:	9300      	str	r3, [sp, #0]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	f000 f82e 	bl	800854a <mg_url_decode>
 80084ee:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 80084f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da02      	bge.n	80084fc <mg_http_get_var+0x9c>
 80084f6:	f06f 0302 	mvn.w	r3, #2
 80084fa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 80084fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3728      	adds	r7, #40	@ 0x28
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <isx>:

static bool isx(int c) {
 8008506:	b480      	push	{r7}
 8008508:	b083      	sub	sp, #12
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b2f      	cmp	r3, #47	@ 0x2f
 8008512:	dd02      	ble.n	800851a <isx+0x14>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b39      	cmp	r3, #57	@ 0x39
 8008518:	dd0b      	ble.n	8008532 <isx+0x2c>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2b60      	cmp	r3, #96	@ 0x60
 800851e:	dd02      	ble.n	8008526 <isx+0x20>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b66      	cmp	r3, #102	@ 0x66
 8008524:	dd05      	ble.n	8008532 <isx+0x2c>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b40      	cmp	r3, #64	@ 0x40
 800852a:	dd04      	ble.n	8008536 <isx+0x30>
         (c >= 'A' && c <= 'F');
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b46      	cmp	r3, #70	@ 0x46
 8008530:	dc01      	bgt.n	8008536 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <isx+0x32>
 8008536:	2300      	movs	r3, #0
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	b2db      	uxtb	r3, r3
}
 800853e:	4618      	mov	r0, r3
 8008540:	370c      	adds	r7, #12
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 800854a:	b580      	push	{r7, lr}
 800854c:	b08a      	sub	sp, #40	@ 0x28
 800854e:	af02      	add	r7, sp, #8
 8008550:	60f8      	str	r0, [r7, #12]
 8008552:	60b9      	str	r1, [r7, #8]
 8008554:	607a      	str	r2, [r7, #4]
 8008556:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8008558:	2300      	movs	r3, #0
 800855a:	61bb      	str	r3, [r7, #24]
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	61fb      	str	r3, [r7, #28]
 8008560:	e059      	b.n	8008616 <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8008562:	68fa      	ldr	r2, [r7, #12]
 8008564:	69fb      	ldr	r3, [r7, #28]
 8008566:	4413      	add	r3, r2
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	2b25      	cmp	r3, #37	@ 0x25
 800856c:	d136      	bne.n	80085dc <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	3302      	adds	r3, #2
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	429a      	cmp	r2, r3
 8008576:	d92e      	bls.n	80085d6 <mg_url_decode+0x8c>
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	3301      	adds	r3, #1
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	4413      	add	r3, r2
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f7ff ffbf 	bl	8008506 <isx>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d023      	beq.n	80085d6 <mg_url_decode+0x8c>
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	3302      	adds	r3, #2
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff ffb4 	bl	8008506 <isx>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d018      	beq.n	80085d6 <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	3301      	adds	r3, #1
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	18d1      	adds	r1, r2, r3
 80085ac:	f107 0310 	add.w	r3, r7, #16
 80085b0:	2202      	movs	r2, #2
 80085b2:	4618      	mov	r0, r3
 80085b4:	f00b fd2b 	bl	801400e <mg_str_n>
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	4413      	add	r3, r2
 80085be:	2201      	movs	r2, #1
 80085c0:	9200      	str	r2, [sp, #0]
 80085c2:	2210      	movs	r2, #16
 80085c4:	f107 0110 	add.w	r1, r7, #16
 80085c8:	c903      	ldmia	r1, {r0, r1}
 80085ca:	f00b ff5e 	bl	801448a <mg_str_to_num>
        i += 2;
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	3302      	adds	r3, #2
 80085d2:	61fb      	str	r3, [r7, #28]
 80085d4:	e019      	b.n	800860a <mg_url_decode+0xc0>
      } else {
        return -1;
 80085d6:	f04f 33ff 	mov.w	r3, #4294967295
 80085da:	e03a      	b.n	8008652 <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 80085dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <mg_url_decode+0xb0>
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b2b      	cmp	r3, #43	@ 0x2b
 80085ec:	d105      	bne.n	80085fa <mg_url_decode+0xb0>
      dst[j] = ' ';
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	4413      	add	r3, r2
 80085f4:	2220      	movs	r2, #32
 80085f6:	701a      	strb	r2, [r3, #0]
 80085f8:	e007      	b.n	800860a <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	441a      	add	r2, r3
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	440b      	add	r3, r1
 8008606:	7812      	ldrb	r2, [r2, #0]
 8008608:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	3301      	adds	r3, #1
 800860e:	61fb      	str	r3, [r7, #28]
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	3301      	adds	r3, #1
 8008614:	61bb      	str	r3, [r7, #24]
 8008616:	69fa      	ldr	r2, [r7, #28]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	429a      	cmp	r2, r3
 800861c:	d204      	bcs.n	8008628 <mg_url_decode+0xde>
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	3301      	adds	r3, #1
 8008622:	683a      	ldr	r2, [r7, #0]
 8008624:	429a      	cmp	r2, r3
 8008626:	d89c      	bhi.n	8008562 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d204      	bcs.n	800863a <mg_url_decode+0xf0>
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	4413      	add	r3, r2
 8008636:	2200      	movs	r2, #0
 8008638:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	429a      	cmp	r2, r3
 8008640:	d305      	bcc.n	800864e <mg_url_decode+0x104>
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	429a      	cmp	r2, r3
 8008648:	d201      	bcs.n	800864e <mg_url_decode+0x104>
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	e001      	b.n	8008652 <mg_url_decode+0x108>
 800864e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008652:	4618      	mov	r0, r3
 8008654:	3720      	adds	r7, #32
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <isok>:

static bool isok(uint8_t c) {
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	4603      	mov	r3, r0
 8008662:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	2b0a      	cmp	r3, #10
 8008668:	d008      	beq.n	800867c <isok+0x22>
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	2b0d      	cmp	r3, #13
 800866e:	d005      	beq.n	800867c <isok+0x22>
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	2b09      	cmp	r3, #9
 8008674:	d002      	beq.n	800867c <isok+0x22>
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	2b1f      	cmp	r3, #31
 800867a:	d901      	bls.n	8008680 <isok+0x26>
 800867c:	2301      	movs	r3, #1
 800867e:	e000      	b.n	8008682 <isok+0x28>
 8008680:	2300      	movs	r3, #0
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	b2db      	uxtb	r3, r3
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e03c      	b.n	800871e <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7ff ffd4 	bl	800865a <isok>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f083 0301 	eor.w	r3, r3, #1
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d002      	beq.n	80086c4 <mg_http_get_request_len+0x30>
 80086be:	f04f 33ff 	mov.w	r3, #4294967295
 80086c2:	e031      	b.n	8008728 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00c      	beq.n	80086e4 <mg_http_get_request_len+0x50>
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b0a      	cmp	r3, #10
 80086d4:	d106      	bne.n	80086e4 <mg_http_get_request_len+0x50>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3b01      	subs	r3, #1
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	4413      	add	r3, r2
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b0a      	cmp	r3, #10
 80086e2:	d016      	beq.n	8008712 <mg_http_get_request_len+0x7e>
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d916      	bls.n	8008718 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4413      	add	r3, r2
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b0a      	cmp	r3, #10
 80086f4:	d110      	bne.n	8008718 <mg_http_get_request_len+0x84>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	3b01      	subs	r3, #1
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	4413      	add	r3, r2
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	2b0d      	cmp	r3, #13
 8008702:	d109      	bne.n	8008718 <mg_http_get_request_len+0x84>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3b02      	subs	r3, #2
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	4413      	add	r3, r2
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b0a      	cmp	r3, #10
 8008710:	d102      	bne.n	8008718 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3301      	adds	r3, #1
 8008716:	e007      	b.n	8008728 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3301      	adds	r3, #1
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d3be      	bcc.n	80086a4 <mg_http_get_request_len+0x10>
  }
  return 0;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800873a:	6838      	ldr	r0, [r7, #0]
 800873c:	f7f7 fe48 	bl	80003d0 <strlen>
 8008740:	61b8      	str	r0, [r7, #24]
 8008742:	231e      	movs	r3, #30
 8008744:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
 800874a:	e01f      	b.n	800878c <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	3302      	adds	r3, #2
 8008750:	011b      	lsls	r3, r3, #4
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	4413      	add	r3, r2
 8008756:	613b      	str	r3, [r7, #16]
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	3328      	adds	r3, #40	@ 0x28
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	4413      	add	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	429a      	cmp	r2, r3
 800876c:	d10b      	bne.n	8008786 <mg_http_get_header+0x56>
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69ba      	ldr	r2, [r7, #24]
 8008774:	6839      	ldr	r1, [r7, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f7ff fd4b 	bl	8008212 <mg_ncasecmp>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <mg_http_get_header+0x56>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	e010      	b.n	80087a8 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	3301      	adds	r3, #1
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	69fa      	ldr	r2, [r7, #28]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	429a      	cmp	r2, r3
 8008792:	d208      	bcs.n	80087a6 <mg_http_get_header+0x76>
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	3302      	adds	r3, #2
 800879a:	011b      	lsls	r3, r3, #4
 800879c:	4413      	add	r3, r2
 800879e:	3304      	adds	r3, #4
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1d2      	bne.n	800874c <mg_http_get_header+0x1c>
  }
  return NULL;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3720      	adds	r7, #32
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 80087ba:	79fb      	ldrb	r3, [r7, #7]
 80087bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80087c0:	2b80      	cmp	r3, #128	@ 0x80
 80087c2:	bf0c      	ite	eq
 80087c4:	2301      	moveq	r3, #1
 80087c6:	2300      	movne	r3, #0
 80087c8:	b2db      	uxtb	r3, r3
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b086      	sub	sp, #24
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 80087ea:	683a      	ldr	r2, [r7, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c <= '~') return 1;  // Usual ascii printed char
 80087f2:	7cfb      	ldrb	r3, [r7, #19]
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	d904      	bls.n	8008802 <clen+0x2c>
 80087f8:	7cfb      	ldrb	r3, [r7, #19]
 80087fa:	2b7e      	cmp	r3, #126	@ 0x7e
 80087fc:	d801      	bhi.n	8008802 <clen+0x2c>
 80087fe:	2301      	movs	r3, #1
 8008800:	e054      	b.n	80088ac <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 8008802:	7cfb      	ldrb	r3, [r7, #19]
 8008804:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008808:	2bc0      	cmp	r3, #192	@ 0xc0
 800880a:	d10d      	bne.n	8008828 <clen+0x52>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b01      	cmp	r3, #1
 8008810:	dd0a      	ble.n	8008828 <clen+0x52>
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	3301      	adds	r3, #1
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff ffc9 	bl	80087b0 <vcb>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <clen+0x52>
 8008824:	2302      	movs	r3, #2
 8008826:	e041      	b.n	80088ac <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8008828:	7cfb      	ldrb	r3, [r7, #19]
 800882a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800882e:	2be0      	cmp	r3, #224	@ 0xe0
 8008830:	d116      	bne.n	8008860 <clen+0x8a>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b02      	cmp	r3, #2
 8008836:	dd13      	ble.n	8008860 <clen+0x8a>
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	3301      	adds	r3, #1
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f7ff ffb6 	bl	80087b0 <vcb>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <clen+0x8a>
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	3302      	adds	r3, #2
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f7ff ffad 	bl	80087b0 <vcb>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <clen+0x8a>
 800885c:	2303      	movs	r3, #3
 800885e:	e025      	b.n	80088ac <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8008860:	7cfb      	ldrb	r3, [r7, #19]
 8008862:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8008866:	2bf0      	cmp	r3, #240	@ 0xf0
 8008868:	d11f      	bne.n	80088aa <clen+0xd4>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b03      	cmp	r3, #3
 800886e:	dd1c      	ble.n	80088aa <clen+0xd4>
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	3301      	adds	r3, #1
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f7ff ff9a 	bl	80087b0 <vcb>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d013      	beq.n	80088aa <clen+0xd4>
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	3302      	adds	r3, #2
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff ff91 	bl	80087b0 <vcb>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00a      	beq.n	80088aa <clen+0xd4>
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	3303      	adds	r3, #3
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff ff88 	bl	80087b0 <vcb>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <clen+0xd4>
    return 4;
 80088a6:	2304      	movs	r3, #4
 80088a8:	e000      	b.n	80088ac <clen+0xd6>
  return 0;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 80088c6:	e007      	b.n	80088d8 <skiptorn+0x24>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3301      	adds	r3, #1
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	685b      	ldr	r3, [r3, #4]
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	605a      	str	r2, [r3, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d207      	bcs.n	80088f0 <skiptorn+0x3c>
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	2b0a      	cmp	r3, #10
 80088e6:	d003      	beq.n	80088f0 <skiptorn+0x3c>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	2b0d      	cmp	r3, #13
 80088ee:	d1eb      	bne.n	80088c8 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d208      	bcs.n	800890a <skiptorn+0x56>
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	2b0d      	cmp	r3, #13
 80088fe:	d106      	bne.n	800890e <skiptorn+0x5a>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	3301      	adds	r3, #1
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	2b0a      	cmp	r3, #10
 8008908:	d001      	beq.n	800890e <skiptorn+0x5a>
 800890a:	2300      	movs	r3, #0
 800890c:	e017      	b.n	800893e <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	429a      	cmp	r2, r3
 8008914:	d206      	bcs.n	8008924 <skiptorn+0x70>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	2b0d      	cmp	r3, #13
 800891c:	d102      	bne.n	8008924 <skiptorn+0x70>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3301      	adds	r3, #1
 8008922:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	429a      	cmp	r2, r3
 800892a:	d205      	bcs.n	8008938 <skiptorn+0x84>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	1c5a      	adds	r2, r3, #1
 8008930:	60fa      	str	r2, [r7, #12]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b0a      	cmp	r3, #10
 8008936:	d001      	beq.n	800893c <skiptorn+0x88>
 8008938:	2300      	movs	r3, #0
 800893a:	e000      	b.n	800893e <skiptorn+0x8a>
  return s;
 800893c:	68fb      	ldr	r3, [r7, #12]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 800894a:	b580      	push	{r7, lr}
 800894c:	b08a      	sub	sp, #40	@ 0x28
 800894e:	af00      	add	r7, sp, #0
 8008950:	60f8      	str	r0, [r7, #12]
 8008952:	60b9      	str	r1, [r7, #8]
 8008954:	607a      	str	r2, [r7, #4]
 8008956:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8008958:	2300      	movs	r3, #0
 800895a:	627b      	str	r3, [r7, #36]	@ 0x24
 800895c:	e09a      	b.n	8008a94 <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 800895e:	2300      	movs	r3, #0
 8008960:	61bb      	str	r3, [r7, #24]
 8008962:	2300      	movs	r3, #0
 8008964:	61fb      	str	r3, [r7, #28]
 8008966:	2300      	movs	r3, #0
 8008968:	613b      	str	r3, [r7, #16]
 800896a:	2300      	movs	r3, #0
 800896c:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	429a      	cmp	r2, r3
 8008974:	d301      	bcc.n	800897a <mg_http_parse_headers+0x30>
 8008976:	2300      	movs	r3, #0
 8008978:	e092      	b.n	8008aa0 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	2b0a      	cmp	r3, #10
 8008980:	f000 808d 	beq.w	8008a9e <mg_http_parse_headers+0x154>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	2b0d      	cmp	r3, #13
 800898a:	d105      	bne.n	8008998 <mg_http_parse_headers+0x4e>
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	3301      	adds	r3, #1
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b0a      	cmp	r3, #10
 8008994:	f000 8083 	beq.w	8008a9e <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 800899c:	e007      	b.n	80089ae <mg_http_parse_headers+0x64>
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	4413      	add	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	6a3b      	ldr	r3, [r7, #32]
 80089aa:	4413      	add	r3, r2
 80089ac:	61fb      	str	r3, [r7, #28]
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d20b      	bcs.n	80089ce <mg_http_parse_headers+0x84>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b3a      	cmp	r3, #58	@ 0x3a
 80089bc:	d007      	beq.n	80089ce <mg_http_parse_headers+0x84>
 80089be:	68b9      	ldr	r1, [r7, #8]
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f7ff ff08 	bl	80087d6 <clen>
 80089c6:	6238      	str	r0, [r7, #32]
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d1e7      	bne.n	800899e <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <mg_http_parse_headers+0x8e>
 80089d4:	2300      	movs	r3, #0
 80089d6:	e063      	b.n	8008aa0 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d206      	bcs.n	80089ee <mg_http_parse_headers+0xa4>
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f7ff fef7 	bl	80087d6 <clen>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <mg_http_parse_headers+0xa8>
 80089ee:	2300      	movs	r3, #0
 80089f0:	e056      	b.n	8008aa0 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1c5a      	adds	r2, r3, #1
 80089f6:	60fa      	str	r2, [r7, #12]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	2b3a      	cmp	r3, #58	@ 0x3a
 80089fc:	d004      	beq.n	8008a08 <mg_http_parse_headers+0xbe>
 80089fe:	2300      	movs	r3, #0
 8008a00:	e04e      	b.n	8008aa0 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3301      	adds	r3, #1
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	429a      	cmp	r2, r3
 8008a0e:	d207      	bcs.n	8008a20 <mg_http_parse_headers+0xd6>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	2b20      	cmp	r3, #32
 8008a16:	d0f4      	beq.n	8008a02 <mg_http_parse_headers+0xb8>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b09      	cmp	r3, #9
 8008a1e:	d0f0      	beq.n	8008a02 <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8008a20:	f107 0310 	add.w	r3, r7, #16
 8008a24:	461a      	mov	r2, r3
 8008a26:	68b9      	ldr	r1, [r7, #8]
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff ff43 	bl	80088b4 <skiptorn>
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <mg_http_parse_headers+0xf6>
 8008a36:	2300      	movs	r3, #0
 8008a38:	e032      	b.n	8008aa0 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00d      	beq.n	8008a62 <mg_http_parse_headers+0x118>
 8008a46:	693a      	ldr	r2, [r7, #16]
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	4413      	add	r3, r2
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d0f2      	beq.n	8008a3a <mg_http_parse_headers+0xf0>
 8008a54:	693a      	ldr	r2, [r7, #16]
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	4413      	add	r3, r2
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b09      	cmp	r3, #9
 8008a60:	d0eb      	beq.n	8008a3a <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	011b      	lsls	r3, r3, #4
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	4413      	add	r3, r2
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f107 0318 	add.w	r3, r7, #24
 8008a70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a74:	e882 0003 	stmia.w	r2, {r0, r1}
 8008a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7a:	011b      	lsls	r3, r3, #4
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	4413      	add	r3, r2
 8008a80:	3308      	adds	r3, #8
 8008a82:	f107 0210 	add.w	r2, r7, #16
 8008a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008a8a:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a90:	3301      	adds	r3, #1
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	f4ff af60 	bcc.w	800895e <mg_http_parse_headers+0x14>
  }
  return true;
 8008a9e:	2301      	movs	r3, #1
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3728      	adds	r7, #40	@ 0x28
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b092      	sub	sp, #72	@ 0x48
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8008ab4:	68b9      	ldr	r1, [r7, #8]
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f7ff fdec 	bl	8008694 <mg_http_get_request_len>
 8008abc:	6478      	str	r0, [r7, #68]	@ 0x44
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d003      	beq.n	8008acc <mg_http_parse+0x24>
 8008ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ac6:	68fa      	ldr	r2, [r7, #12]
 8008ac8:	4413      	add	r3, r2
 8008aca:	e000      	b.n	8008ace <mg_http_parse+0x26>
 8008acc:	2300      	movs	r3, #0
 8008ace:	643b      	str	r3, [r7, #64]	@ 0x40
  const struct mg_str *cl;
  size_t n;
  bool version_prefix_valid;

  memset(hm, 0, sizeof(*hm));
 8008ad0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f01a fd1d 	bl	8023516 <memset>
  if (req_len <= 0) return req_len;
 8008adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	dc01      	bgt.n	8008ae6 <mg_http_parse+0x3e>
 8008ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ae4:	e18f      	b.n	8008e06 <mg_http_parse+0x35e>

  hm->message.buf = hm->head.buf = (char *) s;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008afe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8008b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b10:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8008b26:	e009      	b.n	8008b3c <mg_http_parse+0x94>
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b2c:	4413      	add	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b36:	441a      	add	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	605a      	str	r2, [r3, #4]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d20b      	bcs.n	8008b5c <mg_http_parse+0xb4>
 8008b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f7ff fe45 	bl	80087d6 <clen>
 8008b4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1e9      	bne.n	8008b28 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8008b54:	e002      	b.n	8008b5c <mg_http_parse+0xb4>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d203      	bcs.n	8008b6c <mg_http_parse+0xc4>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d0f4      	beq.n	8008b56 <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8008b72:	e009      	b.n	8008b88 <mg_http_parse+0xe0>
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b78:	4413      	add	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68da      	ldr	r2, [r3, #12]
 8008b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b82:	441a      	add	r2, r3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	60da      	str	r2, [r3, #12]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d20b      	bcs.n	8008ba8 <mg_http_parse+0x100>
 8008b90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f7ff fe1f 	bl	80087d6 <clen>
 8008b98:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e9      	bne.n	8008b74 <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8008ba0:	e002      	b.n	8008ba8 <mg_http_parse+0x100>
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	60fb      	str	r3, [r7, #12]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008bac:	429a      	cmp	r2, r3
 8008bae:	d203      	bcs.n	8008bb8 <mg_http_parse+0x110>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	d0f4      	beq.n	8008ba2 <mg_http_parse+0xfa>
  is_response = hm->method.len > 5 &&
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2b05      	cmp	r3, #5
 8008bbe:	d90b      	bls.n	8008bd8 <mg_http_parse+0x130>
                (mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2205      	movs	r2, #5
 8008bc6:	4992      	ldr	r1, [pc, #584]	@ (8008e10 <mg_http_parse+0x368>)
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7ff fb22 	bl	8008212 <mg_ncasecmp>
 8008bce:	4603      	mov	r3, r0
  is_response = hm->method.len > 5 &&
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <mg_http_parse+0x130>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <mg_http_parse+0x132>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3318      	adds	r3, #24
 8008be0:	461a      	mov	r2, r3
 8008be2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff fe65 	bl	80088b4 <skiptorn>
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <mg_http_parse+0x14e>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	e107      	b.n	8008e06 <mg_http_parse+0x35e>
  // If we're given a version, check that it is HTTP/x.x
  version_prefix_valid = hm->proto.len > 5 &&
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	2b05      	cmp	r3, #5
 8008bfc:	d90b      	bls.n	8008c16 <mg_http_parse+0x16e>
                         (mg_ncasecmp(hm->proto.buf, "HTTP/", 5) == 0);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	2205      	movs	r2, #5
 8008c04:	4982      	ldr	r1, [pc, #520]	@ (8008e10 <mg_http_parse+0x368>)
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7ff fb03 	bl	8008212 <mg_ncasecmp>
 8008c0c:	4603      	mov	r3, r0
  version_prefix_valid = hm->proto.len > 5 &&
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <mg_http_parse+0x16e>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e000      	b.n	8008c18 <mg_http_parse+0x170>
 8008c16:	2300      	movs	r3, #0
 8008c18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008c1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (!is_response && hm->proto.len > 0 &&
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d12f      	bne.n	8008c8e <mg_http_parse+0x1e6>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d02b      	beq.n	8008c8e <mg_http_parse+0x1e6>
    (!version_prefix_valid || hm->proto.len != 8 ||
 8008c36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008c3a:	f083 0301 	eor.w	r3, r3, #1
 8008c3e:	b2db      	uxtb	r3, r3
  if (!is_response && hm->proto.len > 0 &&
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d121      	bne.n	8008c88 <mg_http_parse+0x1e0>
    (!version_prefix_valid || hm->proto.len != 8 ||
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	69db      	ldr	r3, [r3, #28]
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d11d      	bne.n	8008c88 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	699b      	ldr	r3, [r3, #24]
 8008c50:	3305      	adds	r3, #5
 8008c52:	781b      	ldrb	r3, [r3, #0]
    (!version_prefix_valid || hm->proto.len != 8 ||
 8008c54:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c56:	d917      	bls.n	8008c88 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	3305      	adds	r3, #5
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b39      	cmp	r3, #57	@ 0x39
 8008c62:	d811      	bhi.n	8008c88 <mg_http_parse+0x1e0>
    (hm->proto.buf[6] != '.') ||
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	699b      	ldr	r3, [r3, #24]
 8008c68:	3306      	adds	r3, #6
 8008c6a:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8008c6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c6e:	d10b      	bne.n	8008c88 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	3307      	adds	r3, #7
 8008c76:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[6] != '.') ||
 8008c78:	2b2f      	cmp	r3, #47	@ 0x2f
 8008c7a:	d905      	bls.n	8008c88 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	3307      	adds	r3, #7
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b39      	cmp	r3, #57	@ 0x39
 8008c86:	d902      	bls.n	8008c8e <mg_http_parse+0x1e6>
    return -1;
 8008c88:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8c:	e0bb      	b.n	8008e06 <mg_http_parse+0x35e>
  }

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6898      	ldr	r0, [r3, #8]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	461a      	mov	r2, r3
 8008c98:	213f      	movs	r1, #63	@ 0x3f
 8008c9a:	f7f7 fb49 	bl	8000330 <memchr>
 8008c9e:	6338      	str	r0, [r7, #48]	@ 0x30
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d015      	beq.n	8008cd2 <mg_http_parse+0x22a>
    hm->query.buf = (char *) qs + 1;
 8008ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	689a      	ldr	r2, [r3, #8]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	441a      	add	r2, r3
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cba:	3301      	adds	r3, #1
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	461a      	mov	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d003      	beq.n	8008ce2 <mg_http_parse+0x23a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d102      	bne.n	8008ce8 <mg_http_parse+0x240>
 8008ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce6:	e08e      	b.n	8008e06 <mg_http_parse+0x35e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f103 0220 	add.w	r2, r3, #32
 8008cee:	231e      	movs	r3, #30
 8008cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f7ff fe29 	bl	800894a <mg_http_parse_headers>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f083 0301 	eor.w	r3, r3, #1
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d002      	beq.n	8008d0a <mg_http_parse+0x262>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8008d04:	f04f 33ff 	mov.w	r3, #4294967295
 8008d08:	e07d      	b.n	8008e06 <mg_http_parse+0x35e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8008d0a:	4942      	ldr	r1, [pc, #264]	@ (8008e14 <mg_http_parse+0x36c>)
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff fd0f 	bl	8008730 <mg_http_get_header>
 8008d12:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d018      	beq.n	8008d4c <mg_http_parse+0x2a4>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8008d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d26:	f7ff fab5 	bl	8008294 <mg_to_size_t>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f083 0301 	eor.w	r3, r3, #1
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d002      	beq.n	8008d3c <mg_http_parse+0x294>
 8008d36:	f04f 33ff 	mov.w	r3, #4294967295
 8008d3a:	e064      	b.n	8008e06 <mg_http_parse+0x35e>
    hm->message.len = (size_t) req_len + hm->body.len;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d44:	441a      	add	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d56:	d12a      	bne.n	8008dae <mg_http_parse+0x306>
 8008d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d127      	bne.n	8008dae <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8008d5e:	f107 0314 	add.w	r3, r7, #20
 8008d62:	492d      	ldr	r1, [pc, #180]	@ (8008e18 <mg_http_parse+0x370>)
 8008d64:	4618      	mov	r0, r3
 8008d66:	f00b f935 	bl	8013fd4 <mg_str_s>
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	f107 0314 	add.w	r3, r7, #20
 8008d70:	cb0c      	ldmia	r3, {r2, r3}
 8008d72:	c903      	ldmia	r1, {r0, r1}
 8008d74:	f00b f9f1 	bl	801415a <mg_strcasecmp>
 8008d78:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d017      	beq.n	8008dae <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8008d7e:	f107 031c 	add.w	r3, r7, #28
 8008d82:	4926      	ldr	r1, [pc, #152]	@ (8008e1c <mg_http_parse+0x374>)
 8008d84:	4618      	mov	r0, r3
 8008d86:	f00b f925 	bl	8013fd4 <mg_str_s>
 8008d8a:	6879      	ldr	r1, [r7, #4]
 8008d8c:	f107 031c 	add.w	r3, r7, #28
 8008d90:	cb0c      	ldmia	r3, {r2, r3}
 8008d92:	c903      	ldmia	r1, {r0, r1}
 8008d94:	f00b f9e1 	bl	801415a <mg_strcasecmp>
 8008d98:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d007      	beq.n	8008dae <mg_http_parse+0x306>
    hm->body.len = 0;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8008da6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db8:	d11b      	bne.n	8008df2 <mg_http_parse+0x34a>
 8008dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d018      	beq.n	8008df2 <mg_http_parse+0x34a>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8008dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dc4:	4916      	ldr	r1, [pc, #88]	@ (8008e20 <mg_http_parse+0x378>)
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f00b f904 	bl	8013fd4 <mg_str_s>
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008dd2:	cb0c      	ldmia	r3, {r2, r3}
 8008dd4:	3108      	adds	r1, #8
 8008dd6:	c903      	ldmia	r1, {r0, r1}
 8008dd8:	f00b f9bf 	bl	801415a <mg_strcasecmp>
 8008ddc:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d107      	bne.n	8008df2 <mg_http_parse+0x34a>
    hm->body.len = 0;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8008dea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d202      	bcs.n	8008e04 <mg_http_parse+0x35c>
 8008dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008e02:	e000      	b.n	8008e06 <mg_http_parse+0x35e>

  return req_len;
 8008e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3748      	adds	r7, #72	@ 0x48
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	08024544 	.word	0x08024544
 8008e14:	0802454c 	.word	0x0802454c
 8008e18:	0802455c 	.word	0x0802455c
 8008e1c:	08024560 	.word	0x08024560
 8008e20:	08024568 	.word	0x08024568

08008e24 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3b64      	subs	r3, #100	@ 0x64
 8008e30:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8008e34:	4293      	cmp	r3, r2
 8008e36:	f200 8469 	bhi.w	800970c <mg_http_status_code_str+0x8e8>
 8008e3a:	a101      	add	r1, pc, #4	@ (adr r1, 8008e40 <mg_http_status_code_str+0x1c>)
 8008e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008e40:	08009611 	.word	0x08009611
 8008e44:	08009615 	.word	0x08009615
 8008e48:	08009619 	.word	0x08009619
 8008e4c:	0800970d 	.word	0x0800970d
 8008e50:	0800970d 	.word	0x0800970d
 8008e54:	0800970d 	.word	0x0800970d
 8008e58:	0800970d 	.word	0x0800970d
 8008e5c:	0800970d 	.word	0x0800970d
 8008e60:	0800970d 	.word	0x0800970d
 8008e64:	0800970d 	.word	0x0800970d
 8008e68:	0800970d 	.word	0x0800970d
 8008e6c:	0800970d 	.word	0x0800970d
 8008e70:	0800970d 	.word	0x0800970d
 8008e74:	0800970d 	.word	0x0800970d
 8008e78:	0800970d 	.word	0x0800970d
 8008e7c:	0800970d 	.word	0x0800970d
 8008e80:	0800970d 	.word	0x0800970d
 8008e84:	0800970d 	.word	0x0800970d
 8008e88:	0800970d 	.word	0x0800970d
 8008e8c:	0800970d 	.word	0x0800970d
 8008e90:	0800970d 	.word	0x0800970d
 8008e94:	0800970d 	.word	0x0800970d
 8008e98:	0800970d 	.word	0x0800970d
 8008e9c:	0800970d 	.word	0x0800970d
 8008ea0:	0800970d 	.word	0x0800970d
 8008ea4:	0800970d 	.word	0x0800970d
 8008ea8:	0800970d 	.word	0x0800970d
 8008eac:	0800970d 	.word	0x0800970d
 8008eb0:	0800970d 	.word	0x0800970d
 8008eb4:	0800970d 	.word	0x0800970d
 8008eb8:	0800970d 	.word	0x0800970d
 8008ebc:	0800970d 	.word	0x0800970d
 8008ec0:	0800970d 	.word	0x0800970d
 8008ec4:	0800970d 	.word	0x0800970d
 8008ec8:	0800970d 	.word	0x0800970d
 8008ecc:	0800970d 	.word	0x0800970d
 8008ed0:	0800970d 	.word	0x0800970d
 8008ed4:	0800970d 	.word	0x0800970d
 8008ed8:	0800970d 	.word	0x0800970d
 8008edc:	0800970d 	.word	0x0800970d
 8008ee0:	0800970d 	.word	0x0800970d
 8008ee4:	0800970d 	.word	0x0800970d
 8008ee8:	0800970d 	.word	0x0800970d
 8008eec:	0800970d 	.word	0x0800970d
 8008ef0:	0800970d 	.word	0x0800970d
 8008ef4:	0800970d 	.word	0x0800970d
 8008ef8:	0800970d 	.word	0x0800970d
 8008efc:	0800970d 	.word	0x0800970d
 8008f00:	0800970d 	.word	0x0800970d
 8008f04:	0800970d 	.word	0x0800970d
 8008f08:	0800970d 	.word	0x0800970d
 8008f0c:	0800970d 	.word	0x0800970d
 8008f10:	0800970d 	.word	0x0800970d
 8008f14:	0800970d 	.word	0x0800970d
 8008f18:	0800970d 	.word	0x0800970d
 8008f1c:	0800970d 	.word	0x0800970d
 8008f20:	0800970d 	.word	0x0800970d
 8008f24:	0800970d 	.word	0x0800970d
 8008f28:	0800970d 	.word	0x0800970d
 8008f2c:	0800970d 	.word	0x0800970d
 8008f30:	0800970d 	.word	0x0800970d
 8008f34:	0800970d 	.word	0x0800970d
 8008f38:	0800970d 	.word	0x0800970d
 8008f3c:	0800970d 	.word	0x0800970d
 8008f40:	0800970d 	.word	0x0800970d
 8008f44:	0800970d 	.word	0x0800970d
 8008f48:	0800970d 	.word	0x0800970d
 8008f4c:	0800970d 	.word	0x0800970d
 8008f50:	0800970d 	.word	0x0800970d
 8008f54:	0800970d 	.word	0x0800970d
 8008f58:	0800970d 	.word	0x0800970d
 8008f5c:	0800970d 	.word	0x0800970d
 8008f60:	0800970d 	.word	0x0800970d
 8008f64:	0800970d 	.word	0x0800970d
 8008f68:	0800970d 	.word	0x0800970d
 8008f6c:	0800970d 	.word	0x0800970d
 8008f70:	0800970d 	.word	0x0800970d
 8008f74:	0800970d 	.word	0x0800970d
 8008f78:	0800970d 	.word	0x0800970d
 8008f7c:	0800970d 	.word	0x0800970d
 8008f80:	0800970d 	.word	0x0800970d
 8008f84:	0800970d 	.word	0x0800970d
 8008f88:	0800970d 	.word	0x0800970d
 8008f8c:	0800970d 	.word	0x0800970d
 8008f90:	0800970d 	.word	0x0800970d
 8008f94:	0800970d 	.word	0x0800970d
 8008f98:	0800970d 	.word	0x0800970d
 8008f9c:	0800970d 	.word	0x0800970d
 8008fa0:	0800970d 	.word	0x0800970d
 8008fa4:	0800970d 	.word	0x0800970d
 8008fa8:	0800970d 	.word	0x0800970d
 8008fac:	0800970d 	.word	0x0800970d
 8008fb0:	0800970d 	.word	0x0800970d
 8008fb4:	0800970d 	.word	0x0800970d
 8008fb8:	0800970d 	.word	0x0800970d
 8008fbc:	0800970d 	.word	0x0800970d
 8008fc0:	0800970d 	.word	0x0800970d
 8008fc4:	0800970d 	.word	0x0800970d
 8008fc8:	0800970d 	.word	0x0800970d
 8008fcc:	0800970d 	.word	0x0800970d
 8008fd0:	0800961d 	.word	0x0800961d
 8008fd4:	08009621 	.word	0x08009621
 8008fd8:	08009625 	.word	0x08009625
 8008fdc:	08009629 	.word	0x08009629
 8008fe0:	0800962d 	.word	0x0800962d
 8008fe4:	08009631 	.word	0x08009631
 8008fe8:	08009635 	.word	0x08009635
 8008fec:	08009639 	.word	0x08009639
 8008ff0:	0800963d 	.word	0x0800963d
 8008ff4:	0800970d 	.word	0x0800970d
 8008ff8:	0800970d 	.word	0x0800970d
 8008ffc:	0800970d 	.word	0x0800970d
 8009000:	0800970d 	.word	0x0800970d
 8009004:	0800970d 	.word	0x0800970d
 8009008:	0800970d 	.word	0x0800970d
 800900c:	0800970d 	.word	0x0800970d
 8009010:	0800970d 	.word	0x0800970d
 8009014:	0800970d 	.word	0x0800970d
 8009018:	0800970d 	.word	0x0800970d
 800901c:	0800970d 	.word	0x0800970d
 8009020:	0800970d 	.word	0x0800970d
 8009024:	0800970d 	.word	0x0800970d
 8009028:	0800970d 	.word	0x0800970d
 800902c:	0800970d 	.word	0x0800970d
 8009030:	0800970d 	.word	0x0800970d
 8009034:	0800970d 	.word	0x0800970d
 8009038:	08009641 	.word	0x08009641
 800903c:	0800970d 	.word	0x0800970d
 8009040:	0800970d 	.word	0x0800970d
 8009044:	0800970d 	.word	0x0800970d
 8009048:	0800970d 	.word	0x0800970d
 800904c:	0800970d 	.word	0x0800970d
 8009050:	0800970d 	.word	0x0800970d
 8009054:	0800970d 	.word	0x0800970d
 8009058:	0800970d 	.word	0x0800970d
 800905c:	0800970d 	.word	0x0800970d
 8009060:	0800970d 	.word	0x0800970d
 8009064:	0800970d 	.word	0x0800970d
 8009068:	0800970d 	.word	0x0800970d
 800906c:	0800970d 	.word	0x0800970d
 8009070:	0800970d 	.word	0x0800970d
 8009074:	0800970d 	.word	0x0800970d
 8009078:	0800970d 	.word	0x0800970d
 800907c:	0800970d 	.word	0x0800970d
 8009080:	0800970d 	.word	0x0800970d
 8009084:	0800970d 	.word	0x0800970d
 8009088:	0800970d 	.word	0x0800970d
 800908c:	0800970d 	.word	0x0800970d
 8009090:	0800970d 	.word	0x0800970d
 8009094:	0800970d 	.word	0x0800970d
 8009098:	0800970d 	.word	0x0800970d
 800909c:	0800970d 	.word	0x0800970d
 80090a0:	0800970d 	.word	0x0800970d
 80090a4:	0800970d 	.word	0x0800970d
 80090a8:	0800970d 	.word	0x0800970d
 80090ac:	0800970d 	.word	0x0800970d
 80090b0:	0800970d 	.word	0x0800970d
 80090b4:	0800970d 	.word	0x0800970d
 80090b8:	0800970d 	.word	0x0800970d
 80090bc:	0800970d 	.word	0x0800970d
 80090c0:	0800970d 	.word	0x0800970d
 80090c4:	0800970d 	.word	0x0800970d
 80090c8:	0800970d 	.word	0x0800970d
 80090cc:	0800970d 	.word	0x0800970d
 80090d0:	0800970d 	.word	0x0800970d
 80090d4:	0800970d 	.word	0x0800970d
 80090d8:	0800970d 	.word	0x0800970d
 80090dc:	0800970d 	.word	0x0800970d
 80090e0:	0800970d 	.word	0x0800970d
 80090e4:	0800970d 	.word	0x0800970d
 80090e8:	0800970d 	.word	0x0800970d
 80090ec:	0800970d 	.word	0x0800970d
 80090f0:	0800970d 	.word	0x0800970d
 80090f4:	0800970d 	.word	0x0800970d
 80090f8:	0800970d 	.word	0x0800970d
 80090fc:	0800970d 	.word	0x0800970d
 8009100:	0800970d 	.word	0x0800970d
 8009104:	0800970d 	.word	0x0800970d
 8009108:	0800970d 	.word	0x0800970d
 800910c:	0800970d 	.word	0x0800970d
 8009110:	0800970d 	.word	0x0800970d
 8009114:	0800970d 	.word	0x0800970d
 8009118:	0800970d 	.word	0x0800970d
 800911c:	0800970d 	.word	0x0800970d
 8009120:	0800970d 	.word	0x0800970d
 8009124:	0800970d 	.word	0x0800970d
 8009128:	0800970d 	.word	0x0800970d
 800912c:	0800970d 	.word	0x0800970d
 8009130:	0800970d 	.word	0x0800970d
 8009134:	0800970d 	.word	0x0800970d
 8009138:	0800970d 	.word	0x0800970d
 800913c:	0800970d 	.word	0x0800970d
 8009140:	0800970d 	.word	0x0800970d
 8009144:	0800970d 	.word	0x0800970d
 8009148:	0800970d 	.word	0x0800970d
 800914c:	0800970d 	.word	0x0800970d
 8009150:	0800970d 	.word	0x0800970d
 8009154:	0800970d 	.word	0x0800970d
 8009158:	0800970d 	.word	0x0800970d
 800915c:	0800970d 	.word	0x0800970d
 8009160:	08009645 	.word	0x08009645
 8009164:	08009649 	.word	0x08009649
 8009168:	0800964d 	.word	0x0800964d
 800916c:	08009651 	.word	0x08009651
 8009170:	08009655 	.word	0x08009655
 8009174:	08009659 	.word	0x08009659
 8009178:	0800970d 	.word	0x0800970d
 800917c:	0800965d 	.word	0x0800965d
 8009180:	08009661 	.word	0x08009661
 8009184:	0800970d 	.word	0x0800970d
 8009188:	0800970d 	.word	0x0800970d
 800918c:	0800970d 	.word	0x0800970d
 8009190:	0800970d 	.word	0x0800970d
 8009194:	0800970d 	.word	0x0800970d
 8009198:	0800970d 	.word	0x0800970d
 800919c:	0800970d 	.word	0x0800970d
 80091a0:	0800970d 	.word	0x0800970d
 80091a4:	0800970d 	.word	0x0800970d
 80091a8:	0800970d 	.word	0x0800970d
 80091ac:	0800970d 	.word	0x0800970d
 80091b0:	0800970d 	.word	0x0800970d
 80091b4:	0800970d 	.word	0x0800970d
 80091b8:	0800970d 	.word	0x0800970d
 80091bc:	0800970d 	.word	0x0800970d
 80091c0:	0800970d 	.word	0x0800970d
 80091c4:	0800970d 	.word	0x0800970d
 80091c8:	0800970d 	.word	0x0800970d
 80091cc:	0800970d 	.word	0x0800970d
 80091d0:	0800970d 	.word	0x0800970d
 80091d4:	0800970d 	.word	0x0800970d
 80091d8:	0800970d 	.word	0x0800970d
 80091dc:	0800970d 	.word	0x0800970d
 80091e0:	0800970d 	.word	0x0800970d
 80091e4:	0800970d 	.word	0x0800970d
 80091e8:	0800970d 	.word	0x0800970d
 80091ec:	0800970d 	.word	0x0800970d
 80091f0:	0800970d 	.word	0x0800970d
 80091f4:	0800970d 	.word	0x0800970d
 80091f8:	0800970d 	.word	0x0800970d
 80091fc:	0800970d 	.word	0x0800970d
 8009200:	0800970d 	.word	0x0800970d
 8009204:	0800970d 	.word	0x0800970d
 8009208:	0800970d 	.word	0x0800970d
 800920c:	0800970d 	.word	0x0800970d
 8009210:	0800970d 	.word	0x0800970d
 8009214:	0800970d 	.word	0x0800970d
 8009218:	0800970d 	.word	0x0800970d
 800921c:	0800970d 	.word	0x0800970d
 8009220:	0800970d 	.word	0x0800970d
 8009224:	0800970d 	.word	0x0800970d
 8009228:	0800970d 	.word	0x0800970d
 800922c:	0800970d 	.word	0x0800970d
 8009230:	0800970d 	.word	0x0800970d
 8009234:	0800970d 	.word	0x0800970d
 8009238:	0800970d 	.word	0x0800970d
 800923c:	0800970d 	.word	0x0800970d
 8009240:	0800970d 	.word	0x0800970d
 8009244:	0800970d 	.word	0x0800970d
 8009248:	0800970d 	.word	0x0800970d
 800924c:	0800970d 	.word	0x0800970d
 8009250:	0800970d 	.word	0x0800970d
 8009254:	0800970d 	.word	0x0800970d
 8009258:	0800970d 	.word	0x0800970d
 800925c:	0800970d 	.word	0x0800970d
 8009260:	0800970d 	.word	0x0800970d
 8009264:	0800970d 	.word	0x0800970d
 8009268:	0800970d 	.word	0x0800970d
 800926c:	0800970d 	.word	0x0800970d
 8009270:	0800970d 	.word	0x0800970d
 8009274:	0800970d 	.word	0x0800970d
 8009278:	0800970d 	.word	0x0800970d
 800927c:	0800970d 	.word	0x0800970d
 8009280:	0800970d 	.word	0x0800970d
 8009284:	0800970d 	.word	0x0800970d
 8009288:	0800970d 	.word	0x0800970d
 800928c:	0800970d 	.word	0x0800970d
 8009290:	0800970d 	.word	0x0800970d
 8009294:	0800970d 	.word	0x0800970d
 8009298:	0800970d 	.word	0x0800970d
 800929c:	0800970d 	.word	0x0800970d
 80092a0:	0800970d 	.word	0x0800970d
 80092a4:	0800970d 	.word	0x0800970d
 80092a8:	0800970d 	.word	0x0800970d
 80092ac:	0800970d 	.word	0x0800970d
 80092b0:	0800970d 	.word	0x0800970d
 80092b4:	0800970d 	.word	0x0800970d
 80092b8:	0800970d 	.word	0x0800970d
 80092bc:	0800970d 	.word	0x0800970d
 80092c0:	0800970d 	.word	0x0800970d
 80092c4:	0800970d 	.word	0x0800970d
 80092c8:	0800970d 	.word	0x0800970d
 80092cc:	0800970d 	.word	0x0800970d
 80092d0:	0800970d 	.word	0x0800970d
 80092d4:	0800970d 	.word	0x0800970d
 80092d8:	0800970d 	.word	0x0800970d
 80092dc:	0800970d 	.word	0x0800970d
 80092e0:	0800970d 	.word	0x0800970d
 80092e4:	0800970d 	.word	0x0800970d
 80092e8:	0800970d 	.word	0x0800970d
 80092ec:	0800970d 	.word	0x0800970d
 80092f0:	08009665 	.word	0x08009665
 80092f4:	08009669 	.word	0x08009669
 80092f8:	0800966d 	.word	0x0800966d
 80092fc:	08009671 	.word	0x08009671
 8009300:	08009675 	.word	0x08009675
 8009304:	08009679 	.word	0x08009679
 8009308:	0800967d 	.word	0x0800967d
 800930c:	08009681 	.word	0x08009681
 8009310:	08009685 	.word	0x08009685
 8009314:	08009689 	.word	0x08009689
 8009318:	0800968d 	.word	0x0800968d
 800931c:	08009691 	.word	0x08009691
 8009320:	08009695 	.word	0x08009695
 8009324:	08009699 	.word	0x08009699
 8009328:	0800969d 	.word	0x0800969d
 800932c:	080096a1 	.word	0x080096a1
 8009330:	080096a5 	.word	0x080096a5
 8009334:	080096a9 	.word	0x080096a9
 8009338:	080096ad 	.word	0x080096ad
 800933c:	0800970d 	.word	0x0800970d
 8009340:	0800970d 	.word	0x0800970d
 8009344:	080096b1 	.word	0x080096b1
 8009348:	080096b5 	.word	0x080096b5
 800934c:	080096b9 	.word	0x080096b9
 8009350:	080096bd 	.word	0x080096bd
 8009354:	0800970d 	.word	0x0800970d
 8009358:	080096c1 	.word	0x080096c1
 800935c:	0800970d 	.word	0x0800970d
 8009360:	080096c5 	.word	0x080096c5
 8009364:	080096c9 	.word	0x080096c9
 8009368:	0800970d 	.word	0x0800970d
 800936c:	080096cd 	.word	0x080096cd
 8009370:	0800970d 	.word	0x0800970d
 8009374:	0800970d 	.word	0x0800970d
 8009378:	0800970d 	.word	0x0800970d
 800937c:	0800970d 	.word	0x0800970d
 8009380:	0800970d 	.word	0x0800970d
 8009384:	0800970d 	.word	0x0800970d
 8009388:	0800970d 	.word	0x0800970d
 800938c:	0800970d 	.word	0x0800970d
 8009390:	0800970d 	.word	0x0800970d
 8009394:	0800970d 	.word	0x0800970d
 8009398:	0800970d 	.word	0x0800970d
 800939c:	0800970d 	.word	0x0800970d
 80093a0:	080096d1 	.word	0x080096d1
 80093a4:	0800970d 	.word	0x0800970d
 80093a8:	0800970d 	.word	0x0800970d
 80093ac:	0800970d 	.word	0x0800970d
 80093b0:	0800970d 	.word	0x0800970d
 80093b4:	0800970d 	.word	0x0800970d
 80093b8:	0800970d 	.word	0x0800970d
 80093bc:	080096d5 	.word	0x080096d5
 80093c0:	0800970d 	.word	0x0800970d
 80093c4:	0800970d 	.word	0x0800970d
 80093c8:	0800970d 	.word	0x0800970d
 80093cc:	0800970d 	.word	0x0800970d
 80093d0:	0800970d 	.word	0x0800970d
 80093d4:	0800970d 	.word	0x0800970d
 80093d8:	0800970d 	.word	0x0800970d
 80093dc:	0800970d 	.word	0x0800970d
 80093e0:	0800970d 	.word	0x0800970d
 80093e4:	0800970d 	.word	0x0800970d
 80093e8:	0800970d 	.word	0x0800970d
 80093ec:	0800970d 	.word	0x0800970d
 80093f0:	0800970d 	.word	0x0800970d
 80093f4:	0800970d 	.word	0x0800970d
 80093f8:	0800970d 	.word	0x0800970d
 80093fc:	0800970d 	.word	0x0800970d
 8009400:	0800970d 	.word	0x0800970d
 8009404:	0800970d 	.word	0x0800970d
 8009408:	0800970d 	.word	0x0800970d
 800940c:	0800970d 	.word	0x0800970d
 8009410:	0800970d 	.word	0x0800970d
 8009414:	0800970d 	.word	0x0800970d
 8009418:	0800970d 	.word	0x0800970d
 800941c:	0800970d 	.word	0x0800970d
 8009420:	0800970d 	.word	0x0800970d
 8009424:	0800970d 	.word	0x0800970d
 8009428:	0800970d 	.word	0x0800970d
 800942c:	0800970d 	.word	0x0800970d
 8009430:	0800970d 	.word	0x0800970d
 8009434:	0800970d 	.word	0x0800970d
 8009438:	0800970d 	.word	0x0800970d
 800943c:	0800970d 	.word	0x0800970d
 8009440:	0800970d 	.word	0x0800970d
 8009444:	0800970d 	.word	0x0800970d
 8009448:	0800970d 	.word	0x0800970d
 800944c:	0800970d 	.word	0x0800970d
 8009450:	0800970d 	.word	0x0800970d
 8009454:	0800970d 	.word	0x0800970d
 8009458:	0800970d 	.word	0x0800970d
 800945c:	0800970d 	.word	0x0800970d
 8009460:	0800970d 	.word	0x0800970d
 8009464:	0800970d 	.word	0x0800970d
 8009468:	0800970d 	.word	0x0800970d
 800946c:	0800970d 	.word	0x0800970d
 8009470:	0800970d 	.word	0x0800970d
 8009474:	0800970d 	.word	0x0800970d
 8009478:	0800970d 	.word	0x0800970d
 800947c:	080096d9 	.word	0x080096d9
 8009480:	080096dd 	.word	0x080096dd
 8009484:	080096e1 	.word	0x080096e1
 8009488:	080096e5 	.word	0x080096e5
 800948c:	080096e9 	.word	0x080096e9
 8009490:	080096ed 	.word	0x080096ed
 8009494:	080096f1 	.word	0x080096f1
 8009498:	080096f5 	.word	0x080096f5
 800949c:	080096f9 	.word	0x080096f9
 80094a0:	080096fd 	.word	0x080096fd
 80094a4:	0800970d 	.word	0x0800970d
 80094a8:	08009701 	.word	0x08009701
 80094ac:	08009705 	.word	0x08009705
 80094b0:	0800970d 	.word	0x0800970d
 80094b4:	0800970d 	.word	0x0800970d
 80094b8:	0800970d 	.word	0x0800970d
 80094bc:	0800970d 	.word	0x0800970d
 80094c0:	0800970d 	.word	0x0800970d
 80094c4:	0800970d 	.word	0x0800970d
 80094c8:	0800970d 	.word	0x0800970d
 80094cc:	0800970d 	.word	0x0800970d
 80094d0:	0800970d 	.word	0x0800970d
 80094d4:	0800970d 	.word	0x0800970d
 80094d8:	0800970d 	.word	0x0800970d
 80094dc:	0800970d 	.word	0x0800970d
 80094e0:	0800970d 	.word	0x0800970d
 80094e4:	0800970d 	.word	0x0800970d
 80094e8:	0800970d 	.word	0x0800970d
 80094ec:	0800970d 	.word	0x0800970d
 80094f0:	0800970d 	.word	0x0800970d
 80094f4:	0800970d 	.word	0x0800970d
 80094f8:	0800970d 	.word	0x0800970d
 80094fc:	0800970d 	.word	0x0800970d
 8009500:	0800970d 	.word	0x0800970d
 8009504:	0800970d 	.word	0x0800970d
 8009508:	0800970d 	.word	0x0800970d
 800950c:	0800970d 	.word	0x0800970d
 8009510:	0800970d 	.word	0x0800970d
 8009514:	0800970d 	.word	0x0800970d
 8009518:	0800970d 	.word	0x0800970d
 800951c:	0800970d 	.word	0x0800970d
 8009520:	0800970d 	.word	0x0800970d
 8009524:	0800970d 	.word	0x0800970d
 8009528:	0800970d 	.word	0x0800970d
 800952c:	0800970d 	.word	0x0800970d
 8009530:	0800970d 	.word	0x0800970d
 8009534:	0800970d 	.word	0x0800970d
 8009538:	0800970d 	.word	0x0800970d
 800953c:	0800970d 	.word	0x0800970d
 8009540:	0800970d 	.word	0x0800970d
 8009544:	0800970d 	.word	0x0800970d
 8009548:	0800970d 	.word	0x0800970d
 800954c:	0800970d 	.word	0x0800970d
 8009550:	0800970d 	.word	0x0800970d
 8009554:	0800970d 	.word	0x0800970d
 8009558:	0800970d 	.word	0x0800970d
 800955c:	0800970d 	.word	0x0800970d
 8009560:	0800970d 	.word	0x0800970d
 8009564:	0800970d 	.word	0x0800970d
 8009568:	0800970d 	.word	0x0800970d
 800956c:	0800970d 	.word	0x0800970d
 8009570:	0800970d 	.word	0x0800970d
 8009574:	0800970d 	.word	0x0800970d
 8009578:	0800970d 	.word	0x0800970d
 800957c:	0800970d 	.word	0x0800970d
 8009580:	0800970d 	.word	0x0800970d
 8009584:	0800970d 	.word	0x0800970d
 8009588:	0800970d 	.word	0x0800970d
 800958c:	0800970d 	.word	0x0800970d
 8009590:	0800970d 	.word	0x0800970d
 8009594:	0800970d 	.word	0x0800970d
 8009598:	0800970d 	.word	0x0800970d
 800959c:	0800970d 	.word	0x0800970d
 80095a0:	0800970d 	.word	0x0800970d
 80095a4:	0800970d 	.word	0x0800970d
 80095a8:	0800970d 	.word	0x0800970d
 80095ac:	0800970d 	.word	0x0800970d
 80095b0:	0800970d 	.word	0x0800970d
 80095b4:	0800970d 	.word	0x0800970d
 80095b8:	0800970d 	.word	0x0800970d
 80095bc:	0800970d 	.word	0x0800970d
 80095c0:	0800970d 	.word	0x0800970d
 80095c4:	0800970d 	.word	0x0800970d
 80095c8:	0800970d 	.word	0x0800970d
 80095cc:	0800970d 	.word	0x0800970d
 80095d0:	0800970d 	.word	0x0800970d
 80095d4:	0800970d 	.word	0x0800970d
 80095d8:	0800970d 	.word	0x0800970d
 80095dc:	0800970d 	.word	0x0800970d
 80095e0:	0800970d 	.word	0x0800970d
 80095e4:	0800970d 	.word	0x0800970d
 80095e8:	0800970d 	.word	0x0800970d
 80095ec:	0800970d 	.word	0x0800970d
 80095f0:	0800970d 	.word	0x0800970d
 80095f4:	0800970d 	.word	0x0800970d
 80095f8:	0800970d 	.word	0x0800970d
 80095fc:	0800970d 	.word	0x0800970d
 8009600:	0800970d 	.word	0x0800970d
 8009604:	0800970d 	.word	0x0800970d
 8009608:	0800970d 	.word	0x0800970d
 800960c:	08009709 	.word	0x08009709
    case 100: return "Continue";
 8009610:	4b42      	ldr	r3, [pc, #264]	@ (800971c <mg_http_status_code_str+0x8f8>)
 8009612:	e07c      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 8009614:	4b42      	ldr	r3, [pc, #264]	@ (8009720 <mg_http_status_code_str+0x8fc>)
 8009616:	e07a      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8009618:	4b42      	ldr	r3, [pc, #264]	@ (8009724 <mg_http_status_code_str+0x900>)
 800961a:	e078      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 800961c:	4b42      	ldr	r3, [pc, #264]	@ (8009728 <mg_http_status_code_str+0x904>)
 800961e:	e076      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8009620:	4b42      	ldr	r3, [pc, #264]	@ (800972c <mg_http_status_code_str+0x908>)
 8009622:	e074      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8009624:	4b42      	ldr	r3, [pc, #264]	@ (8009730 <mg_http_status_code_str+0x90c>)
 8009626:	e072      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8009628:	4b42      	ldr	r3, [pc, #264]	@ (8009734 <mg_http_status_code_str+0x910>)
 800962a:	e070      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 800962c:	4b42      	ldr	r3, [pc, #264]	@ (8009738 <mg_http_status_code_str+0x914>)
 800962e:	e06e      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8009630:	4b42      	ldr	r3, [pc, #264]	@ (800973c <mg_http_status_code_str+0x918>)
 8009632:	e06c      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8009634:	4b42      	ldr	r3, [pc, #264]	@ (8009740 <mg_http_status_code_str+0x91c>)
 8009636:	e06a      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8009638:	4b42      	ldr	r3, [pc, #264]	@ (8009744 <mg_http_status_code_str+0x920>)
 800963a:	e068      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 800963c:	4b42      	ldr	r3, [pc, #264]	@ (8009748 <mg_http_status_code_str+0x924>)
 800963e:	e066      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8009640:	4b42      	ldr	r3, [pc, #264]	@ (800974c <mg_http_status_code_str+0x928>)
 8009642:	e064      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8009644:	4b42      	ldr	r3, [pc, #264]	@ (8009750 <mg_http_status_code_str+0x92c>)
 8009646:	e062      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8009648:	4b42      	ldr	r3, [pc, #264]	@ (8009754 <mg_http_status_code_str+0x930>)
 800964a:	e060      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 800964c:	4b42      	ldr	r3, [pc, #264]	@ (8009758 <mg_http_status_code_str+0x934>)
 800964e:	e05e      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8009650:	4b42      	ldr	r3, [pc, #264]	@ (800975c <mg_http_status_code_str+0x938>)
 8009652:	e05c      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8009654:	4b42      	ldr	r3, [pc, #264]	@ (8009760 <mg_http_status_code_str+0x93c>)
 8009656:	e05a      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8009658:	4b42      	ldr	r3, [pc, #264]	@ (8009764 <mg_http_status_code_str+0x940>)
 800965a:	e058      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 800965c:	4b42      	ldr	r3, [pc, #264]	@ (8009768 <mg_http_status_code_str+0x944>)
 800965e:	e056      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8009660:	4b42      	ldr	r3, [pc, #264]	@ (800976c <mg_http_status_code_str+0x948>)
 8009662:	e054      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8009664:	4b42      	ldr	r3, [pc, #264]	@ (8009770 <mg_http_status_code_str+0x94c>)
 8009666:	e052      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8009668:	4b42      	ldr	r3, [pc, #264]	@ (8009774 <mg_http_status_code_str+0x950>)
 800966a:	e050      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 800966c:	4b42      	ldr	r3, [pc, #264]	@ (8009778 <mg_http_status_code_str+0x954>)
 800966e:	e04e      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8009670:	4b42      	ldr	r3, [pc, #264]	@ (800977c <mg_http_status_code_str+0x958>)
 8009672:	e04c      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8009674:	4b42      	ldr	r3, [pc, #264]	@ (8009780 <mg_http_status_code_str+0x95c>)
 8009676:	e04a      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8009678:	4b42      	ldr	r3, [pc, #264]	@ (8009784 <mg_http_status_code_str+0x960>)
 800967a:	e048      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 800967c:	4b42      	ldr	r3, [pc, #264]	@ (8009788 <mg_http_status_code_str+0x964>)
 800967e:	e046      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8009680:	4b42      	ldr	r3, [pc, #264]	@ (800978c <mg_http_status_code_str+0x968>)
 8009682:	e044      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8009684:	4b42      	ldr	r3, [pc, #264]	@ (8009790 <mg_http_status_code_str+0x96c>)
 8009686:	e042      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8009688:	4b42      	ldr	r3, [pc, #264]	@ (8009794 <mg_http_status_code_str+0x970>)
 800968a:	e040      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 800968c:	4b42      	ldr	r3, [pc, #264]	@ (8009798 <mg_http_status_code_str+0x974>)
 800968e:	e03e      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8009690:	4b42      	ldr	r3, [pc, #264]	@ (800979c <mg_http_status_code_str+0x978>)
 8009692:	e03c      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8009694:	4b42      	ldr	r3, [pc, #264]	@ (80097a0 <mg_http_status_code_str+0x97c>)
 8009696:	e03a      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8009698:	4b42      	ldr	r3, [pc, #264]	@ (80097a4 <mg_http_status_code_str+0x980>)
 800969a:	e038      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 800969c:	4b42      	ldr	r3, [pc, #264]	@ (80097a8 <mg_http_status_code_str+0x984>)
 800969e:	e036      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 80096a0:	4b42      	ldr	r3, [pc, #264]	@ (80097ac <mg_http_status_code_str+0x988>)
 80096a2:	e034      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 80096a4:	4b42      	ldr	r3, [pc, #264]	@ (80097b0 <mg_http_status_code_str+0x98c>)
 80096a6:	e032      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 80096a8:	4b42      	ldr	r3, [pc, #264]	@ (80097b4 <mg_http_status_code_str+0x990>)
 80096aa:	e030      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 80096ac:	4b42      	ldr	r3, [pc, #264]	@ (80097b8 <mg_http_status_code_str+0x994>)
 80096ae:	e02e      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 80096b0:	4b42      	ldr	r3, [pc, #264]	@ (80097bc <mg_http_status_code_str+0x998>)
 80096b2:	e02c      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 80096b4:	4b42      	ldr	r3, [pc, #264]	@ (80097c0 <mg_http_status_code_str+0x99c>)
 80096b6:	e02a      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 80096b8:	4b42      	ldr	r3, [pc, #264]	@ (80097c4 <mg_http_status_code_str+0x9a0>)
 80096ba:	e028      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 80096bc:	4b42      	ldr	r3, [pc, #264]	@ (80097c8 <mg_http_status_code_str+0x9a4>)
 80096be:	e026      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 80096c0:	4b42      	ldr	r3, [pc, #264]	@ (80097cc <mg_http_status_code_str+0x9a8>)
 80096c2:	e024      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 80096c4:	4b42      	ldr	r3, [pc, #264]	@ (80097d0 <mg_http_status_code_str+0x9ac>)
 80096c6:	e022      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 80096c8:	4b42      	ldr	r3, [pc, #264]	@ (80097d4 <mg_http_status_code_str+0x9b0>)
 80096ca:	e020      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 80096cc:	4b42      	ldr	r3, [pc, #264]	@ (80097d8 <mg_http_status_code_str+0x9b4>)
 80096ce:	e01e      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80096d0:	4b42      	ldr	r3, [pc, #264]	@ (80097dc <mg_http_status_code_str+0x9b8>)
 80096d2:	e01c      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80096d4:	4b42      	ldr	r3, [pc, #264]	@ (80097e0 <mg_http_status_code_str+0x9bc>)
 80096d6:	e01a      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80096d8:	4b42      	ldr	r3, [pc, #264]	@ (80097e4 <mg_http_status_code_str+0x9c0>)
 80096da:	e018      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80096dc:	4b42      	ldr	r3, [pc, #264]	@ (80097e8 <mg_http_status_code_str+0x9c4>)
 80096de:	e016      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 80096e0:	4b42      	ldr	r3, [pc, #264]	@ (80097ec <mg_http_status_code_str+0x9c8>)
 80096e2:	e014      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 80096e4:	4b42      	ldr	r3, [pc, #264]	@ (80097f0 <mg_http_status_code_str+0x9cc>)
 80096e6:	e012      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 80096e8:	4b42      	ldr	r3, [pc, #264]	@ (80097f4 <mg_http_status_code_str+0x9d0>)
 80096ea:	e010      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 80096ec:	4b42      	ldr	r3, [pc, #264]	@ (80097f8 <mg_http_status_code_str+0x9d4>)
 80096ee:	e00e      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 80096f0:	4b42      	ldr	r3, [pc, #264]	@ (80097fc <mg_http_status_code_str+0x9d8>)
 80096f2:	e00c      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 80096f4:	4b42      	ldr	r3, [pc, #264]	@ (8009800 <mg_http_status_code_str+0x9dc>)
 80096f6:	e00a      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 80096f8:	4b42      	ldr	r3, [pc, #264]	@ (8009804 <mg_http_status_code_str+0x9e0>)
 80096fa:	e008      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 80096fc:	4b42      	ldr	r3, [pc, #264]	@ (8009808 <mg_http_status_code_str+0x9e4>)
 80096fe:	e006      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 8009700:	4b42      	ldr	r3, [pc, #264]	@ (800980c <mg_http_status_code_str+0x9e8>)
 8009702:	e004      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 8009704:	4b42      	ldr	r3, [pc, #264]	@ (8009810 <mg_http_status_code_str+0x9ec>)
 8009706:	e002      	b.n	800970e <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8009708:	4b42      	ldr	r3, [pc, #264]	@ (8009814 <mg_http_status_code_str+0x9f0>)
 800970a:	e000      	b.n	800970e <mg_http_status_code_str+0x8ea>
    default: return "";
 800970c:	4b42      	ldr	r3, [pc, #264]	@ (8009818 <mg_http_status_code_str+0x9f4>)
  }
}
 800970e:	4618      	mov	r0, r3
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	08024588 	.word	0x08024588
 8009720:	08024594 	.word	0x08024594
 8009724:	080245a8 	.word	0x080245a8
 8009728:	080245b4 	.word	0x080245b4
 800972c:	080245b8 	.word	0x080245b8
 8009730:	080245c0 	.word	0x080245c0
 8009734:	080245cc 	.word	0x080245cc
 8009738:	080245ec 	.word	0x080245ec
 800973c:	080245f8 	.word	0x080245f8
 8009740:	08024608 	.word	0x08024608
 8009744:	08024618 	.word	0x08024618
 8009748:	08024628 	.word	0x08024628
 800974c:	0802463c 	.word	0x0802463c
 8009750:	08024644 	.word	0x08024644
 8009754:	08024658 	.word	0x08024658
 8009758:	0802466c 	.word	0x0802466c
 800975c:	08024674 	.word	0x08024674
 8009760:	08024680 	.word	0x08024680
 8009764:	08024690 	.word	0x08024690
 8009768:	0802469c 	.word	0x0802469c
 800976c:	080246b0 	.word	0x080246b0
 8009770:	080246c4 	.word	0x080246c4
 8009774:	080246d0 	.word	0x080246d0
 8009778:	080246e0 	.word	0x080246e0
 800977c:	080246f4 	.word	0x080246f4
 8009780:	08024700 	.word	0x08024700
 8009784:	0802470c 	.word	0x0802470c
 8009788:	08024720 	.word	0x08024720
 800978c:	08024730 	.word	0x08024730
 8009790:	08024750 	.word	0x08024750
 8009794:	08024760 	.word	0x08024760
 8009798:	0802476c 	.word	0x0802476c
 800979c:	08024774 	.word	0x08024774
 80097a0:	08024784 	.word	0x08024784
 80097a4:	08024798 	.word	0x08024798
 80097a8:	080247ac 	.word	0x080247ac
 80097ac:	080247c4 	.word	0x080247c4
 80097b0:	080247dc 	.word	0x080247dc
 80097b4:	080247fc 	.word	0x080247fc
 80097b8:	08024810 	.word	0x08024810
 80097bc:	08024820 	.word	0x08024820
 80097c0:	08024834 	.word	0x08024834
 80097c4:	0802484c 	.word	0x0802484c
 80097c8:	08024854 	.word	0x08024854
 80097cc:	08024868 	.word	0x08024868
 80097d0:	0802487c 	.word	0x0802487c
 80097d4:	08024894 	.word	0x08024894
 80097d8:	080248a8 	.word	0x080248a8
 80097dc:	080248c8 	.word	0x080248c8
 80097e0:	080248ec 	.word	0x080248ec
 80097e4:	0802490c 	.word	0x0802490c
 80097e8:	08024924 	.word	0x08024924
 80097ec:	0802493c 	.word	0x0802493c
 80097f0:	0802494c 	.word	0x0802494c
 80097f4:	08024958 	.word	0x08024958
 80097f8:	0802496c 	.word	0x0802496c
 80097fc:	0802497c 	.word	0x0802497c
 8009800:	08024998 	.word	0x08024998
 8009804:	080249b0 	.word	0x080249b0
 8009808:	080249c8 	.word	0x080249c8
 800980c:	080249d8 	.word	0x080249d8
 8009810:	080249e8 	.word	0x080249e8
 8009814:	08024a08 	.word	0x08024a08
 8009818:	08024a28 	.word	0x08024a28

0800981c <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 800981c:	b408      	push	{r3}
 800981e:	b580      	push	{r7, lr}
 8009820:	b08b      	sub	sp, #44	@ 0x2c
 8009822:	af02      	add	r7, sp, #8
 8009824:	60f8      	str	r0, [r7, #12]
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 800982a:	68b8      	ldr	r0, [r7, #8]
 800982c:	f7ff fafa 	bl	8008e24 <mg_http_status_code_str>
 8009830:	4602      	mov	r2, r0
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <mg_http_reply+0x20>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	e000      	b.n	800983e <mg_http_reply+0x22>
 800983c:	4b1f      	ldr	r3, [pc, #124]	@ (80098bc <mg_http_reply+0xa0>)
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	4613      	mov	r3, r2
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	491e      	ldr	r1, [pc, #120]	@ (80098c0 <mg_http_reply+0xa4>)
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f002 fed4 	bl	800c5f4 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009850:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8009852:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009856:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800985e:	f107 0314 	add.w	r3, r7, #20
 8009862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009864:	4817      	ldr	r0, [pc, #92]	@ (80098c4 <mg_http_reply+0xa8>)
 8009866:	f7fd feeb 	bl	8007640 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800986e:	2b10      	cmp	r3, #16
 8009870:	d916      	bls.n	80098a0 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	3b0f      	subs	r3, #15
 800987a:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8009884:	4a10      	ldr	r2, [pc, #64]	@ (80098c8 <mg_http_reply+0xac>)
 8009886:	210b      	movs	r1, #11
 8009888:	f006 ffde 	bl	8010848 <mg_snprintf>
 800988c:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009892:	69f9      	ldr	r1, [r7, #28]
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	440b      	add	r3, r1
 8009898:	3b0f      	subs	r3, #15
 800989a:	4413      	add	r3, r2
 800989c:	2220      	movs	r2, #32
 800989e:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80098a6:	f023 0301 	bic.w	r3, r3, #1
 80098aa:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 80098ae:	bf00      	nop
 80098b0:	3724      	adds	r7, #36	@ 0x24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098b8:	b001      	add	sp, #4
 80098ba:	4770      	bx	lr
 80098bc:	08024a28 	.word	0x08024a28
 80098c0:	08024a2c 	.word	0x08024a2c
 80098c4:	080107d9 	.word	0x080107d9
 80098c8:	08024a60 	.word	0x08024a60

080098cc <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe fa7c 	bl	8007dd8 <mg_fs_close>
  c->pfn_data = NULL;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	4a07      	ldr	r2, [pc, #28]	@ (8009908 <restore_http_cb+0x3c>)
 80098ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80098f6:	f023 0301 	bic.w	r3, r3, #1
 80098fa:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 80098fe:	bf00      	nop
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	0800ac3d 	.word	0x0800ac3d

0800990c <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 800990c:	b5b0      	push	{r4, r5, r7, lr}
 800990e:	b088      	sub	sp, #32
 8009910:	af04      	add	r7, sp, #16
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2200      	movs	r2, #0
 800991c:	461c      	mov	r4, r3
 800991e:	4615      	mov	r5, r2
 8009920:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009924:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009928:	e9cd 2300 	strd	r2, r3, [sp]
 800992c:	4a04      	ldr	r2, [pc, #16]	@ (8009940 <mg_http_etag+0x34>)
 800992e:	68b9      	ldr	r1, [r7, #8]
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f006 ff89 	bl	8010848 <mg_snprintf>
  return buf;
 8009936:	68fb      	ldr	r3, [r7, #12]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bdb0      	pop	{r4, r5, r7, pc}
 8009940:	08024a68 	.word	0x08024a68

08009944 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8009944:	b580      	push	{r7, lr}
 8009946:	b08a      	sub	sp, #40	@ 0x28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b08      	cmp	r3, #8
 8009954:	d002      	beq.n	800995c <static_cb+0x18>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b02      	cmp	r3, #2
 800995a:	d148      	bne.n	80099ee <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009962:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8009964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009968:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	33a4      	adds	r3, #164	@ 0xa4
 800996e:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009974:	69fa      	ldr	r2, [r7, #28]
 8009976:	429a      	cmp	r2, r3
 8009978:	d905      	bls.n	8009986 <static_cb+0x42>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	3348      	adds	r3, #72	@ 0x48
 800997e:	69f9      	ldr	r1, [r7, #28]
 8009980:	4618      	mov	r0, r3
 8009982:	f001 fd31 	bl	800b3e8 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800998e:	429a      	cmp	r2, r3
 8009990:	d234      	bcs.n	80099fc <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	627b      	str	r3, [r7, #36]	@ 0x24
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d902      	bls.n	80099ae <static_cb+0x6a>
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	6a3a      	ldr	r2, [r7, #32]
 80099b6:	6810      	ldr	r0, [r2, #0]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80099c0:	4411      	add	r1, r2
 80099c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099c4:	4798      	blx	r3
 80099c6:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	441a      	add	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	1ad2      	subs	r2, r2, r3
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10c      	bne.n	8009a00 <static_cb+0xbc>
 80099e6:	68f8      	ldr	r0, [r7, #12]
 80099e8:	f7ff ff70 	bl	80098cc <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80099ec:	e008      	b.n	8009a00 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	2b09      	cmp	r3, #9
 80099f2:	d106      	bne.n	8009a02 <static_cb+0xbe>
    restore_http_cb(c);
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff ff69 	bl	80098cc <restore_http_cb>
 80099fa:	e002      	b.n	8009a02 <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80099fc:	bf00      	nop
 80099fe:	e000      	b.n	8009a02 <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8009a00:	bf00      	nop
  }
  (void) ev_data;
}
 8009a02:	3728      	adds	r7, #40	@ 0x28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8009a08:	b590      	push	{r4, r7, lr}
 8009a0a:	b093      	sub	sp, #76	@ 0x4c
 8009a0c:	af02      	add	r7, sp, #8
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	1d38      	adds	r0, r7, #4
 8009a12:	e880 0006 	stmia.w	r0, {r1, r2}
 8009a16:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 8009a18:	f107 031c 	add.w	r3, r7, #28
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f00a fad8 	bl	8013fd4 <mg_str_s>
 8009a24:	f107 0314 	add.w	r3, r7, #20
 8009a28:	2201      	movs	r2, #1
 8009a2a:	4943      	ldr	r1, [pc, #268]	@ (8009b38 <guess_content_type+0x130>)
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f00a faee 	bl	801400e <mg_str_n>
  size_t i = 0;
 8009a32:	2300      	movs	r3, #0
 8009a34:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8009a36:	e002      	b.n	8009a3e <guess_content_type+0x36>
 8009a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a3a:	3301      	adds	r3, #1
 8009a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d208      	bcs.n	8009a58 <guess_content_type+0x50>
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	68b9      	ldr	r1, [r7, #8]
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a4c:	1acb      	subs	r3, r1, r3
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	4413      	add	r3, r2
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a56:	d1ef      	bne.n	8009a38 <guess_content_type+0x30>
  path.buf += path.len - i;
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	68b9      	ldr	r1, [r7, #8]
 8009a5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a5e:	1acb      	subs	r3, r1, r3
 8009a60:	4413      	add	r3, r2
 8009a62:	607b      	str	r3, [r7, #4]
  path.len = i;
 8009a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a66:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 8009a68:	e02b      	b.n	8009ac2 <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 8009a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a6e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009a72:	213d      	movs	r1, #61	@ 0x3d
 8009a74:	9100      	str	r1, [sp, #0]
 8009a76:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8009a7a:	c903      	ldmia	r1, {r0, r1}
 8009a7c:	f00a fca8 	bl	80143d0 <mg_span>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d01d      	beq.n	8009ac2 <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 8009a86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009a8a:	cb0c      	ldmia	r3, {r2, r3}
 8009a8c:	f107 0114 	add.w	r1, r7, #20
 8009a90:	c903      	ldmia	r1, {r0, r1}
 8009a92:	f00a fb20 	bl	80140d6 <mg_strcmp>
 8009a96:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d009      	beq.n	8009ab0 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 8009a9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009aa0:	cb0c      	ldmia	r3, {r2, r3}
 8009aa2:	1d39      	adds	r1, r7, #4
 8009aa4:	c903      	ldmia	r1, {r0, r1}
 8009aa6:	f00a fb16 	bl	80140d6 <mg_strcmp>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d108      	bne.n	8009ac2 <guess_content_type+0xba>
      return v;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ab8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009abc:	e882 0003 	stmia.w	r2, {r0, r1}
 8009ac0:	e036      	b.n	8009b30 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 8009ac2:	f107 031c 	add.w	r3, r7, #28
 8009ac6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8009aca:	212c      	movs	r1, #44	@ 0x2c
 8009acc:	9100      	str	r1, [sp, #0]
 8009ace:	f107 011c 	add.w	r1, r7, #28
 8009ad2:	c903      	ldmia	r1, {r0, r1}
 8009ad4:	f00a fc7c 	bl	80143d0 <mg_span>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1c5      	bne.n	8009a6a <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8009ade:	2300      	movs	r3, #0
 8009ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ae2:	e01a      	b.n	8009b1a <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8009ae4:	4a15      	ldr	r2, [pc, #84]	@ (8009b3c <guess_content_type+0x134>)
 8009ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae8:	00db      	lsls	r3, r3, #3
 8009aea:	4413      	add	r3, r2
 8009aec:	cb0c      	ldmia	r3, {r2, r3}
 8009aee:	1d39      	adds	r1, r7, #4
 8009af0:	c903      	ldmia	r1, {r0, r1}
 8009af2:	f00a faf0 	bl	80140d6 <mg_strcmp>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10b      	bne.n	8009b14 <guess_content_type+0x10c>
 8009afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afe:	3301      	adds	r3, #1
 8009b00:	68f9      	ldr	r1, [r7, #12]
 8009b02:	4a0e      	ldr	r2, [pc, #56]	@ (8009b3c <guess_content_type+0x134>)
 8009b04:	460c      	mov	r4, r1
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	4413      	add	r3, r2
 8009b0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b0e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009b12:	e00d      	b.n	8009b30 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8009b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b16:	3302      	adds	r3, #2
 8009b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b1a:	4a08      	ldr	r2, [pc, #32]	@ (8009b3c <guess_content_type+0x134>)
 8009b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b1e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1de      	bne.n	8009ae4 <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4905      	ldr	r1, [pc, #20]	@ (8009b40 <guess_content_type+0x138>)
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f00a fa52 	bl	8013fd4 <mg_str_s>
}
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	3744      	adds	r7, #68	@ 0x44
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd90      	pop	{r4, r7, pc}
 8009b38:	08024cd8 	.word	0x08024cd8
 8009b3c:	24000060 	.word	0x24000060
 8009b40:	08024b54 	.word	0x08024b54

08009b44 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08c      	sub	sp, #48	@ 0x30
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8009b50:	2300      	movs	r3, #0
 8009b52:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 8009b54:	2300      	movs	r3, #0
 8009b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b58:	e058      	b.n	8009c0c <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b60:	3306      	adds	r3, #6
 8009b62:	18d1      	adds	r1, r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	685a      	ldr	r2, [r3, #4]
 8009b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	1f9a      	subs	r2, r3, #6
 8009b6e:	f107 0310 	add.w	r3, r7, #16
 8009b72:	4618      	mov	r0, r3
 8009b74:	f00a fa4b 	bl	801400e <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b7e:	4413      	add	r3, r2
 8009b80:	2206      	movs	r2, #6
 8009b82:	4929      	ldr	r1, [pc, #164]	@ (8009c28 <getrange+0xe4>)
 8009b84:	4618      	mov	r0, r3
 8009b86:	f019 fc9c 	bl	80234c2 <memcmp>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d139      	bne.n	8009c04 <getrange+0xc0>
    if (mg_span(v, &k, &v, '-')) {
 8009b90:	f107 0310 	add.w	r3, r7, #16
 8009b94:	f107 0218 	add.w	r2, r7, #24
 8009b98:	212d      	movs	r1, #45	@ 0x2d
 8009b9a:	9100      	str	r1, [sp, #0]
 8009b9c:	f107 0110 	add.w	r1, r7, #16
 8009ba0:	c903      	ldmia	r1, {r0, r1}
 8009ba2:	f00a fc15 	bl	80143d0 <mg_span>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01d      	beq.n	8009be8 <getrange+0xa4>
      if (mg_to_size_t(k, a)) numparsed++;
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	f107 0318 	add.w	r3, r7, #24
 8009bb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009bb6:	f7fe fb6d 	bl	8008294 <mg_to_size_t>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <getrange+0x82>
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d026      	beq.n	8009c1a <getrange+0xd6>
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	f107 0310 	add.w	r3, r7, #16
 8009bd2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009bd6:	f7fe fb5d 	bl	8008294 <mg_to_size_t>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01c      	beq.n	8009c1a <getrange+0xd6>
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	3301      	adds	r3, #1
 8009be4:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8009be6:	e018      	b.n	8009c1a <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	f107 0310 	add.w	r3, r7, #16
 8009bee:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009bf2:	f7fe fb4f 	bl	8008294 <mg_to_size_t>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00e      	beq.n	8009c1a <getrange+0xd6>
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	623b      	str	r3, [r7, #32]
 8009c02:	e00b      	b.n	8009c1c <getrange+0xd8>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8009c04:	bf00      	nop
  for (i = 0; i + 6 < s->len; i++) {
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	3301      	adds	r3, #1
 8009c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0e:	1d9a      	adds	r2, r3, #6
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d3a0      	bcc.n	8009b5a <getrange+0x16>
 8009c18:	e000      	b.n	8009c1c <getrange+0xd8>
    break;
 8009c1a:	bf00      	nop
  }
  return (int) numparsed;
 8009c1c:	6a3b      	ldr	r3, [r7, #32]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3728      	adds	r7, #40	@ 0x28
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	08024cdc 	.word	0x08024cdc

08009c2c <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	b0f3      	sub	sp, #460	@ 0x1cc
 8009c32:	af0a      	add	r7, sp, #40	@ 0x28
 8009c34:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8009c38:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 8009c3c:	6020      	str	r0, [r4, #0]
 8009c3e:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8009c42:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 8009c46:	6001      	str	r1, [r0, #0]
 8009c48:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8009c4c:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 8009c50:	600a      	str	r2, [r1, #0]
 8009c52:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8009c56:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8009c5a:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8009c5c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009c60:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	695b      	ldr	r3, [r3, #20]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d006      	beq.n	8009c7a <mg_http_serve_file+0x4e>
 8009c6c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009c70:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	695b      	ldr	r3, [r3, #20]
 8009c78:	e000      	b.n	8009c7c <mg_http_serve_file+0x50>
 8009c7a:	4ba4      	ldr	r3, [pc, #656]	@ (8009f0c <mg_http_serve_file+0x2e0>)
 8009c7c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 8009c80:	2300      	movs	r3, #0
 8009c82:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	f04f 0300 	mov.w	r3, #0
 8009c94:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8009c9e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8009ca2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009ca6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009caa:	6819      	ldr	r1, [r3, #0]
 8009cac:	4610      	mov	r0, r2
 8009cae:	f00a f991 	bl	8013fd4 <mg_str_s>
 8009cb2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009cb6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8009cc2:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 8009cc6:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8009cca:	ca06      	ldmia	r2, {r1, r2}
 8009ccc:	f7ff fe9c 	bl	8009a08 <guess_content_type>
  bool gzip = false;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 8009cd6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009cda:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d05c      	beq.n	8009d9e <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8009ce4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009ce8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8009cec:	4988      	ldr	r1, [pc, #544]	@ (8009f10 <mg_http_serve_file+0x2e4>)
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	f7fe fd1e 	bl	8008730 <mg_http_get_header>
 8009cf4:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 8009cf8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d03e      	beq.n	8009d7e <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8009d00:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8009d04:	6859      	ldr	r1, [r3, #4]
 8009d06:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	4881      	ldr	r0, [pc, #516]	@ (8009f14 <mg_http_serve_file+0x2e8>)
 8009d10:	f006 fdd0 	bl	80108b4 <mg_mprintf>
 8009d14:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8009d18:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d02a      	beq.n	8009d76 <mg_http_serve_file+0x14a>
 8009d20:	497d      	ldr	r1, [pc, #500]	@ (8009f18 <mg_http_serve_file+0x2ec>)
 8009d22:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8009d26:	f019 fc46 	bl	80235b6 <strstr>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d022      	beq.n	8009d76 <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8009d30:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009d34:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009d38:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a77      	ldr	r2, [pc, #476]	@ (8009f1c <mg_http_serve_file+0x2f0>)
 8009d40:	2164      	movs	r1, #100	@ 0x64
 8009d42:	f006 fd81 	bl	8010848 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8009d46:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8009d52:	f7fe f819 	bl	8007d88 <mg_fs_open>
 8009d56:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 8009d5a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d009      	beq.n	8009d76 <mg_http_serve_file+0x14a>
 8009d62:	2301      	movs	r3, #1
 8009d64:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 8009d68:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009d6c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009d70:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8009d74:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 8009d76:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8009d7a:	f019 f91b 	bl	8022fb4 <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8009d7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d10b      	bne.n	8009d9e <mg_http_serve_file+0x172>
 8009d86:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009d8a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009d8e:	2201      	movs	r2, #1
 8009d90:	6819      	ldr	r1, [r3, #0]
 8009d92:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8009d96:	f7fd fff7 	bl	8007d88 <mg_fs_open>
 8009d9a:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8009d9e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d144      	bne.n	8009e30 <mg_http_serve_file+0x204>
 8009da6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009daa:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d03c      	beq.n	8009e30 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8009db6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009dba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8009dca:	f7fd ffdd 	bl	8007d88 <mg_fs_open>
 8009dce:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 8009dd2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009dd6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009dda:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8009dde:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	6912      	ldr	r2, [r2, #16]
 8009de6:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8009de8:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8009dec:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009df0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009df4:	6819      	ldr	r1, [r3, #0]
 8009df6:	4610      	mov	r0, r2
 8009df8:	f00a f8ec 	bl	8013fd4 <mg_str_s>
 8009dfc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009e00:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8009e0c:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 8009e10:	f107 0010 	add.w	r0, r7, #16
 8009e14:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8009e18:	ca06      	ldmia	r2, {r1, r2}
 8009e1a:	f7ff fdf5 	bl	8009a08 <guess_content_type>
 8009e1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009e22:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8009e26:	4623      	mov	r3, r4
 8009e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009e2c:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8009e30:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d00f      	beq.n	8009e58 <mg_http_serve_file+0x22c>
 8009e38:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8009e3c:	681c      	ldr	r4, [r3, #0]
 8009e3e:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8009e42:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8009e46:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009e4a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009e4e:	6818      	ldr	r0, [r3, #0]
 8009e50:	47a0      	blx	r4
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d114      	bne.n	8009e82 <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8009e58:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009e5c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	689a      	ldr	r2, [r3, #8]
 8009e64:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009e68:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8009e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8009f20 <mg_http_serve_file+0x2f4>)
 8009e6e:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8009e72:	6800      	ldr	r0, [r0, #0]
 8009e74:	f7ff fcd2 	bl	800981c <mg_http_reply>
    mg_fs_close(fd);
 8009e78:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8009e7c:	f7fd ffac 	bl	8007dd8 <mg_fs_close>
 8009e80:	e190      	b.n	800a1a4 <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8009e82:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8009e86:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8009e8a:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8009e8e:	e9cd 2300 	strd	r2, r3, [sp]
 8009e92:	460a      	mov	r2, r1
 8009e94:	2140      	movs	r1, #64	@ 0x40
 8009e96:	f7ff fd39 	bl	800990c <mg_http_etag>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d045      	beq.n	8009f2c <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8009ea0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009ea4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8009ea8:	491e      	ldr	r1, [pc, #120]	@ (8009f24 <mg_http_serve_file+0x2f8>)
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	f7fe fc40 	bl	8008730 <mg_http_get_header>
 8009eb0:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8009eb4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d037      	beq.n	8009f2c <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8009ebc:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8009ec0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f00a f884 	bl	8013fd4 <mg_str_s>
 8009ecc:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8009ed0:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8009ed4:	cb0c      	ldmia	r3, {r2, r3}
 8009ed6:	c903      	ldmia	r1, {r0, r1}
 8009ed8:	f00a f93f 	bl	801415a <mg_strcasecmp>
 8009edc:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d124      	bne.n	8009f2c <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 8009ee2:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8009ee6:	f7fd ff77 	bl	8007dd8 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8009eea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009eee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	689a      	ldr	r2, [r3, #8]
 8009ef6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009efa:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8009efe:	4b0a      	ldr	r3, [pc, #40]	@ (8009f28 <mg_http_serve_file+0x2fc>)
 8009f00:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8009f04:	6800      	ldr	r0, [r0, #0]
 8009f06:	f7ff fc89 	bl	800981c <mg_http_reply>
 8009f0a:	e14b      	b.n	800a1a4 <mg_http_serve_file+0x578>
 8009f0c:	24000038 	.word	0x24000038
 8009f10:	08024ce4 	.word	0x08024ce4
 8009f14:	080244c8 	.word	0x080244c8
 8009f18:	08024cf4 	.word	0x08024cf4
 8009f1c:	08024cfc 	.word	0x08024cfc
 8009f20:	08024d04 	.word	0x08024d04
 8009f24:	08024d10 	.word	0x08024d10
 8009f28:	08024a28 	.word	0x08024a28
  } else {
    int n, status = 200;
 8009f2c:	23c8      	movs	r3, #200	@ 0xc8
 8009f2e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8009f32:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009f36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009f42:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009f46:	2200      	movs	r2, #0
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f4e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8009f52:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009f56:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8009f5a:	4995      	ldr	r1, [pc, #596]	@ (800a1b0 <mg_http_serve_file+0x584>)
 8009f5c:	6818      	ldr	r0, [r3, #0]
 8009f5e:	f7fe fbe7 	bl	8008730 <mg_http_get_header>
 8009f62:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 8009f66:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009f6a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8009f6e:	2200      	movs	r2, #0
 8009f70:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8009f72:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 808e 	beq.w	800a098 <mg_http_serve_file+0x46c>
 8009f7c:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8009f80:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8009f84:	4619      	mov	r1, r3
 8009f86:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 8009f8a:	f7ff fddb 	bl	8009b44 <getrange>
 8009f8e:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 8009f92:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	dd7e      	ble.n	800a098 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8009f9a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8009f9e:	2b01      	cmp	r3, #1
 8009fa0:	d107      	bne.n	8009fb2 <mg_http_serve_file+0x386>
 8009fa2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8009fa6:	1e5a      	subs	r2, r3, #1
 8009fa8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009fac:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fb0:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8009fb2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009fb6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009fc0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d808      	bhi.n	8009fdc <mg_http_serve_file+0x3b0>
 8009fca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009fce:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d817      	bhi.n	800a00c <mg_http_serve_file+0x3e0>
        status = 416;
 8009fdc:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 8009fe0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8009fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009fee:	2200      	movs	r2, #0
 8009ff0:	60bb      	str	r3, [r7, #8]
 8009ff2:	60fa      	str	r2, [r7, #12]
 8009ff4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ff8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009ffc:	e9cd 1200 	strd	r1, r2, [sp]
 800a000:	4a6c      	ldr	r2, [pc, #432]	@ (800a1b4 <mg_http_serve_file+0x588>)
 800a002:	2164      	movs	r1, #100	@ 0x64
 800a004:	4618      	mov	r0, r3
 800a006:	f006 fc1f 	bl	8010848 <mg_snprintf>
 800a00a:	e045      	b.n	800a098 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 800a00c:	23ce      	movs	r3, #206	@ 0xce
 800a00e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 800a012:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a016:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a020:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	3301      	adds	r3, #1
 800a02a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 800a02e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a032:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2200      	movs	r2, #0
 800a03a:	469a      	mov	sl, r3
 800a03c:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800a03e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a042:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a04c:	4413      	add	r3, r2
 800a04e:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 800a050:	2200      	movs	r2, #0
 800a052:	461d      	mov	r5, r3
 800a054:	4616      	mov	r6, r2
 800a056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a05a:	2200      	movs	r2, #0
 800a05c:	603b      	str	r3, [r7, #0]
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a064:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a068:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a06c:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800a070:	e9cd ab00 	strd	sl, fp, [sp]
 800a074:	4a50      	ldr	r2, [pc, #320]	@ (800a1b8 <mg_http_serve_file+0x58c>)
 800a076:	2164      	movs	r1, #100	@ 0x64
 800a078:	4618      	mov	r0, r3
 800a07a:	f006 fbe5 	bl	8010848 <mg_snprintf>
        fs->sk(fd->fd, r1);
 800a07e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800a088:	6810      	ldr	r0, [r2, #0]
 800a08a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800a08e:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800a092:	6812      	ldr	r2, [r2, #0]
 800a094:	4611      	mov	r1, r2
 800a096:	4798      	blx	r3
      }
    }
    mg_printf(c,
 800a098:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800a09c:	f7fe fec2 	bl	8008e24 <mg_http_status_code_str>
 800a0a0:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 800a0a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0aa:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 800a0ac:	461d      	mov	r5, r3
 800a0ae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a0b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4698      	mov	r8, r3
 800a0c0:	4689      	mov	r9, r1
 800a0c2:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <mg_http_serve_file+0x4a2>
 800a0ca:	493c      	ldr	r1, [pc, #240]	@ (800a1bc <mg_http_serve_file+0x590>)
 800a0cc:	e000      	b.n	800a0d0 <mg_http_serve_file+0x4a4>
 800a0ce:	493c      	ldr	r1, [pc, #240]	@ (800a1c0 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 800a0d0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a0d4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d006      	beq.n	800a0ee <mg_http_serve_file+0x4c2>
 800a0e0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a0e4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	e000      	b.n	800a0f0 <mg_http_serve_file+0x4c4>
 800a0ee:	4b34      	ldr	r3, [pc, #208]	@ (800a1c0 <mg_http_serve_file+0x594>)
 800a0f0:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800a0f4:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 800a0f8:	9308      	str	r3, [sp, #32]
 800a0fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	9106      	str	r1, [sp, #24]
 800a102:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800a106:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800a10a:	9302      	str	r3, [sp, #8]
 800a10c:	9201      	str	r2, [sp, #4]
 800a10e:	9500      	str	r5, [sp, #0]
 800a110:	4623      	mov	r3, r4
 800a112:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800a116:	492b      	ldr	r1, [pc, #172]	@ (800a1c4 <mg_http_serve_file+0x598>)
 800a118:	6800      	ldr	r0, [r0, #0]
 800a11a:	f002 fa6b 	bl	800c5f4 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 800a11e:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a122:	4929      	ldr	r1, [pc, #164]	@ (800a1c8 <mg_http_serve_file+0x59c>)
 800a124:	4618      	mov	r0, r3
 800a126:	f009 ff55 	bl	8013fd4 <mg_str_s>
 800a12a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a12e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800a132:	6819      	ldr	r1, [r3, #0]
 800a134:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a138:	cb0c      	ldmia	r3, {r2, r3}
 800a13a:	c903      	ldmia	r1, {r0, r1}
 800a13c:	f00a f80d 	bl	801415a <mg_strcasecmp>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10f      	bne.n	800a166 <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 800a146:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a14a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800a154:	f023 0301 	bic.w	r3, r3, #1
 800a158:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_fs_close(fd);
 800a15c:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800a160:	f7fd fe3a 	bl	8007dd8 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 800a164:	e01e      	b.n	800a1a4 <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800a166:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a16a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	33a4      	adds	r3, #164	@ 0xa4
 800a172:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 800a176:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a17a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a12      	ldr	r2, [pc, #72]	@ (800a1cc <mg_http_serve_file+0x5a0>)
 800a182:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 800a186:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a18a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800a194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 800a198:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800a19c:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800a1a0:	601a      	str	r2, [r3, #0]
}
 800a1a2:	e7ff      	b.n	800a1a4 <mg_http_serve_file+0x578>
 800a1a4:	bf00      	nop
 800a1a6:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b0:	08024d20 	.word	0x08024d20
 800a1b4:	08024d28 	.word	0x08024d28
 800a1b8:	08024d48 	.word	0x08024d48
 800a1bc:	08024d70 	.word	0x08024d70
 800a1c0:	08024a28 	.word	0x08024a28
 800a1c4:	08024d8c 	.word	0x08024d8c
 800a1c8:	08024ddc 	.word	0x08024ddc
 800a1cc:	08009945 	.word	0x08009945

0800a1d0 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	b590      	push	{r4, r7, lr}
 800a1d4:	b08f      	sub	sp, #60	@ 0x3c
 800a1d6:	af02      	add	r7, sp, #8
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	607a      	str	r2, [r7, #4]
 800a1de:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 800a1e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	4a9c      	ldr	r2, [pc, #624]	@ (800a45c <uri_to_path2+0x28c>)
 800a1ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a1ee:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a1f0:	f006 fb2a 	bl	8010848 <mg_snprintf>
 800a1f4:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f8:	3302      	adds	r3, #2
 800a1fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d809      	bhi.n	800a214 <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 800a200:	4b97      	ldr	r3, [pc, #604]	@ (800a460 <uri_to_path2+0x290>)
 800a202:	4a98      	ldr	r2, [pc, #608]	@ (800a464 <uri_to_path2+0x294>)
 800a204:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a208:	68f8      	ldr	r0, [r7, #12]
 800a20a:	f7ff fb07 	bl	800981c <mg_http_reply>
    return -1;
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295
 800a212:	e143      	b.n	800a49c <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 800a214:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a216:	3b01      	subs	r3, #1
 800a218:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a21a:	4413      	add	r3, r2
 800a21c:	2200      	movs	r2, #0
 800a21e:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 800a220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a222:	2b00      	cmp	r3, #0
 800a224:	d012      	beq.n	800a24c <uri_to_path2+0x7c>
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	3b01      	subs	r3, #1
 800a22a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a22c:	4413      	add	r3, r2
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b2f      	cmp	r3, #47	@ 0x2f
 800a232:	d00b      	beq.n	800a24c <uri_to_path2+0x7c>
 800a234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	627a      	str	r2, [r7, #36]	@ 0x24
 800a23a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a23c:	4413      	add	r3, r2
 800a23e:	222f      	movs	r2, #47	@ 0x2f
 800a240:	701a      	strb	r2, [r3, #0]
 800a242:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a246:	4413      	add	r3, r2
 800a248:	2200      	movs	r2, #0
 800a24a:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 800a24c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	429a      	cmp	r2, r3
 800a254:	d212      	bcs.n	800a27c <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a25c:	18d0      	adds	r0, r2, r3
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	68da      	ldr	r2, [r3, #12]
 800a262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a264:	1ad1      	subs	r1, r2, r3
 800a266:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	18d4      	adds	r4, r2, r3
 800a26c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a270:	1ad3      	subs	r3, r2, r3
 800a272:	2200      	movs	r2, #0
 800a274:	9200      	str	r2, [sp, #0]
 800a276:	4622      	mov	r2, r4
 800a278:	f7fe f967 	bl	800854a <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 800a27c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a27e:	3b01      	subs	r3, #1
 800a280:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a282:	4413      	add	r3, r2
 800a284:	2200      	movs	r2, #0
 800a286:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 800a288:	f107 0314 	add.w	r3, r7, #20
 800a28c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a28e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a290:	4618      	mov	r0, r3
 800a292:	f009 febc 	bl	801400e <mg_str_n>
 800a296:	f107 0314 	add.w	r3, r7, #20
 800a29a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a29e:	f015 f8ed 	bl	801f47c <mg_path_is_sane>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f083 0301 	eor.w	r3, r3, #1
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d009      	beq.n	800a2c2 <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 800a2ae:	4b6e      	ldr	r3, [pc, #440]	@ (800a468 <uri_to_path2+0x298>)
 800a2b0:	4a6c      	ldr	r2, [pc, #432]	@ (800a464 <uri_to_path2+0x294>)
 800a2b2:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7ff fab0 	bl	800981c <mg_http_reply>
    return -1;
 800a2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c0:	e0ec      	b.n	800a49c <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 800a2c2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a2c4:	f7f6 f884 	bl	80003d0 <strlen>
 800a2c8:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 800a2ca:	e007      	b.n	800a2dc <uri_to_path2+0x10c>
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d6:	4413      	add	r3, r2
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]
 800a2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d906      	bls.n	800a2f0 <uri_to_path2+0x120>
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2e4:	3b01      	subs	r3, #1
 800a2e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a2e8:	4413      	add	r3, r2
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	2b2f      	cmp	r3, #47	@ 0x2f
 800a2ee:	d0ed      	beq.n	800a2cc <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800a2f0:	f107 031c 	add.w	r3, r7, #28
 800a2f4:	495d      	ldr	r1, [pc, #372]	@ (800a46c <uri_to_path2+0x29c>)
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f009 fe6c 	bl	8013fd4 <mg_str_s>
 800a2fc:	68b9      	ldr	r1, [r7, #8]
 800a2fe:	f107 031c 	add.w	r3, r7, #28
 800a302:	cb0c      	ldmia	r3, {r2, r3}
 800a304:	3108      	adds	r1, #8
 800a306:	c903      	ldmia	r1, {r0, r1}
 800a308:	f009 fee5 	bl	80140d6 <mg_strcmp>
 800a30c:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d007      	beq.n	800a322 <uri_to_path2+0x152>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2200      	movs	r2, #0
 800a318:	2100      	movs	r1, #0
 800a31a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a31c:	4798      	blx	r3
 800a31e:	4603      	mov	r3, r0
 800a320:	e000      	b.n	800a324 <uri_to_path2+0x154>
 800a322:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800a324:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 800a326:	4b52      	ldr	r3, [pc, #328]	@ (800a470 <uri_to_path2+0x2a0>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	dd16      	ble.n	800a35c <uri_to_path2+0x18c>
 800a32e:	4b51      	ldr	r3, [pc, #324]	@ (800a474 <uri_to_path2+0x2a4>)
 800a330:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 800a334:	4950      	ldr	r1, [pc, #320]	@ (800a478 <uri_to_path2+0x2a8>)
 800a336:	2004      	movs	r0, #4
 800a338:	f002 f800 	bl	800c33c <mg_log_prefix>
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	4618      	mov	r0, r3
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	689a      	ldr	r2, [r3, #8]
 800a34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	4613      	mov	r3, r2
 800a354:	4602      	mov	r2, r0
 800a356:	4849      	ldr	r0, [pc, #292]	@ (800a47c <uri_to_path2+0x2ac>)
 800a358:	f002 f840 	bl	800c3dc <mg_log>
              flags));
  if (flags == 0) {
 800a35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 809b 	beq.w	800a49a <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800a364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a366:	f003 0304 	and.w	r3, r3, #4
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d020      	beq.n	800a3b0 <uri_to_path2+0x1e0>
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d01c      	beq.n	800a3b0 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	689a      	ldr	r2, [r3, #8]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	3b01      	subs	r3, #1
 800a380:	4413      	add	r3, r2
 800a382:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800a384:	2b2f      	cmp	r3, #47	@ 0x2f
 800a386:	d013      	beq.n	800a3b0 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800a38c:	461a      	mov	r2, r3
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	689b      	ldr	r3, [r3, #8]
 800a392:	493b      	ldr	r1, [pc, #236]	@ (800a480 <uri_to_path2+0x2b0>)
 800a394:	68f8      	ldr	r0, [r7, #12]
 800a396:	f002 f92d 	bl	800c5f4 <mg_printf>
    c->is_resp = 0;
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800a3a0:	f023 0301 	bic.w	r3, r3, #1
 800a3a4:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    flags = -1;
 800a3a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3ae:	e074      	b.n	800a49a <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 800a3b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b2:	f003 0304 	and.w	r3, r3, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d06f      	beq.n	800a49a <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800a3ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	18d0      	adds	r0, r2, r3
 800a3c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	4a2f      	ldr	r2, [pc, #188]	@ (800a484 <uri_to_path2+0x2b4>)
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	f006 fa3d 	bl	8010848 <mg_snprintf>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d009      	beq.n	800a3e8 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	2100      	movs	r1, #0
 800a3dc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a3de:	4798      	blx	r3
 800a3e0:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800a3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d116      	bne.n	800a416 <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800a3e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ec:	18d0      	adds	r0, r2, r3
 800a3ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	4a24      	ldr	r2, [pc, #144]	@ (800a488 <uri_to_path2+0x2b8>)
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	f006 fa26 	bl	8010848 <mg_snprintf>
 800a3fc:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00c      	beq.n	800a41c <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2200      	movs	r2, #0
 800a408:	2100      	movs	r1, #0
 800a40a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a40c:	4798      	blx	r3
 800a40e:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800a410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <uri_to_path2+0x24c>
      flags = tmp;
 800a416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a41a:	e03e      	b.n	800a49a <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800a41c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a420:	18d0      	adds	r0, r2, r3
 800a422:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a426:	1ad3      	subs	r3, r2, r3
 800a428:	4a18      	ldr	r2, [pc, #96]	@ (800a48c <uri_to_path2+0x2bc>)
 800a42a:	4619      	mov	r1, r3
 800a42c:	f006 fa0c 	bl	8010848 <mg_snprintf>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d02c      	beq.n	800a490 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2200      	movs	r2, #0
 800a43c:	2100      	movs	r1, #0
 800a43e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a440:	4798      	blx	r3
 800a442:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 800a444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a446:	2b00      	cmp	r3, #0
 800a448:	d022      	beq.n	800a490 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 800a44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800a44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a450:	330b      	adds	r3, #11
 800a452:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a454:	4413      	add	r3, r2
 800a456:	2200      	movs	r2, #0
 800a458:	701a      	strb	r2, [r3, #0]
 800a45a:	e01e      	b.n	800a49a <uri_to_path2+0x2ca>
 800a45c:	080244c8 	.word	0x080244c8
 800a460:	08024de4 	.word	0x08024de4
 800a464:	08024a28 	.word	0x08024a28
 800a468:	08024df8 	.word	0x08024df8
 800a46c:	08024e08 	.word	0x08024e08
 800a470:	24000258 	.word	0x24000258
 800a474:	08027d88 	.word	0x08027d88
 800a478:	080241e8 	.word	0x080241e8
 800a47c:	08024e0c 	.word	0x08024e0c
 800a480:	08024e20 	.word	0x08024e20
 800a484:	08024e5c 	.word	0x08024e5c
 800a488:	08024e68 	.word	0x08024e68
 800a48c:	08024e78 	.word	0x08024e78
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800a490:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	4413      	add	r3, r2
 800a496:	2200      	movs	r2, #0
 800a498:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800a49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3734      	adds	r7, #52	@ 0x34
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a4a6:	b002      	add	sp, #8
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop

0800a4ac <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b09c      	sub	sp, #112	@ 0x70
 800a4b0:	af06      	add	r7, sp, #24
 800a4b2:	6178      	str	r0, [r7, #20]
 800a4b4:	6139      	str	r1, [r7, #16]
 800a4b6:	60fa      	str	r2, [r7, #12]
 800a4b8:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <uri_to_path+0x1c>
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	695b      	ldr	r3, [r3, #20]
 800a4c6:	e000      	b.n	800a4ca <uri_to_path+0x1e>
 800a4c8:	4b5b      	ldr	r3, [pc, #364]	@ (800a638 <uri_to_path+0x18c>)
 800a4ca:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	f009 fd7c 	bl	8013fd4 <mg_str_s>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4e4:	f107 031c 	add.w	r3, r7, #28
 800a4e8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800a4ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a4f0:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 800a4f4:	e078      	b.n	800a5e8 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 800a4f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a4fa:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a4fe:	213d      	movs	r1, #61	@ 0x3d
 800a500:	9100      	str	r1, [sp, #0]
 800a502:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800a506:	c903      	ldmia	r1, {r0, r1}
 800a508:	f009 ff62 	bl	80143d0 <mg_span>
 800a50c:	4603      	mov	r3, r0
 800a50e:	f083 0301 	eor.w	r3, r3, #1
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b00      	cmp	r3, #0
 800a516:	d014      	beq.n	800a542 <uri_to_path+0x96>
 800a518:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a51c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800a520:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a524:	e883 0003 	stmia.w	r3, {r0, r1}
 800a528:	463b      	mov	r3, r7
 800a52a:	2200      	movs	r2, #0
 800a52c:	2100      	movs	r1, #0
 800a52e:	4618      	mov	r0, r3
 800a530:	f009 fd6d 	bl	801400e <mg_str_n>
 800a534:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a538:	463a      	mov	r2, r7
 800a53a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a53e:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 800a542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a544:	2b00      	cmp	r3, #0
 800a546:	d123      	bne.n	800a590 <uri_to_path+0xe4>
 800a548:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a54c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a550:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a554:	e883 0003 	stmia.w	r3, {r0, r1}
 800a558:	463b      	mov	r3, r7
 800a55a:	4938      	ldr	r1, [pc, #224]	@ (800a63c <uri_to_path+0x190>)
 800a55c:	4618      	mov	r0, r3
 800a55e:	f009 fd39 	bl	8013fd4 <mg_str_s>
 800a562:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a566:	463a      	mov	r2, r7
 800a568:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a56c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a574:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a578:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a57c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a580:	f107 031c 	add.w	r3, r7, #28
 800a584:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a58c:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	68da      	ldr	r2, [r3, #12]
 800a594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a596:	429a      	cmp	r2, r3
 800a598:	d323      	bcc.n	800a5e2 <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	6899      	ldr	r1, [r3, #8]
 800a59e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5a0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f009 fd32 	bl	801400e <mg_str_n>
 800a5aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a5ae:	cb0c      	ldmia	r3, {r2, r3}
 800a5b0:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800a5b4:	c903      	ldmia	r1, {r0, r1}
 800a5b6:	f009 fd8e 	bl	80140d6 <mg_strcmp>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d112      	bne.n	800a5e6 <uri_to_path+0x13a>
    u = k, p = v;
 800a5c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5c4:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a5c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5cc:	e883 0003 	stmia.w	r3, {r0, r1}
 800a5d0:	f107 031c 	add.w	r3, r7, #28
 800a5d4:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a5d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800a5e0:	e002      	b.n	800a5e8 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 800a5e2:	bf00      	nop
 800a5e4:	e000      	b.n	800a5e8 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800a5e6:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 800a5e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a5ec:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800a5f0:	212c      	movs	r1, #44	@ 0x2c
 800a5f2:	9100      	str	r1, [sp, #0]
 800a5f4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800a5f8:	c903      	ldmia	r1, {r0, r1}
 800a5fa:	f009 fee9 	bl	80143d0 <mg_span>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	f47f af78 	bne.w	800a4f6 <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 800a606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a608:	9304      	str	r3, [sp, #16]
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	9303      	str	r3, [sp, #12]
 800a60e:	aa01      	add	r2, sp, #4
 800a610:	f107 031c 	add.w	r3, r7, #28
 800a614:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a618:	e882 0003 	stmia.w	r2, {r0, r1}
 800a61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a622:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a624:	6939      	ldr	r1, [r7, #16]
 800a626:	6978      	ldr	r0, [r7, #20]
 800a628:	f7ff fdd2 	bl	800a1d0 <uri_to_path2>
 800a62c:	4603      	mov	r3, r0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3758      	adds	r7, #88	@ 0x58
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	24000038 	.word	0x24000038
 800a63c:	08024e08 	.word	0x08024e08

0800a640 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 800a640:	b580      	push	{r7, lr}
 800a642:	b0a6      	sub	sp, #152	@ 0x98
 800a644:	af02      	add	r7, sp, #8
 800a646:	60f8      	str	r0, [r7, #12]
 800a648:	60b9      	str	r1, [r7, #8]
 800a64a:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800a654:	f107 0314 	add.w	r3, r7, #20
 800a658:	2264      	movs	r2, #100	@ 0x64
 800a65a:	9200      	str	r2, [sp, #0]
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	68b9      	ldr	r1, [r7, #8]
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7ff ff23 	bl	800a4ac <uri_to_path>
 800a666:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 800a66a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a66e:	2b00      	cmp	r3, #0
 800a670:	db41      	blt.n	800a6f6 <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800a672:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800a67e:	4b20      	ldr	r3, [pc, #128]	@ (800a700 <mg_http_serve_dir+0xc0>)
 800a680:	4a20      	ldr	r2, [pc, #128]	@ (800a704 <mg_http_serve_dir+0xc4>)
 800a682:	f240 1193 	movw	r1, #403	@ 0x193
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f7ff f8c8 	bl	800981c <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800a68c:	e033      	b.n	800a6f6 <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 800a68e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a692:	2b00      	cmp	r3, #0
 800a694:	d028      	beq.n	800a6e8 <mg_http_serve_dir+0xa8>
 800a696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d024      	beq.n	800a6e8 <mg_http_serve_dir+0xa8>
 800a69e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a6a2:	f107 0214 	add.w	r2, r7, #20
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f009 fc93 	bl	8013fd4 <mg_str_s>
 800a6ae:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a6b2:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f009 fc8c 	bl	8013fd4 <mg_str_s>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a6c4:	cb0c      	ldmia	r3, {r2, r3}
 800a6c6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800a6ca:	c903      	ldmia	r1, {r0, r1}
 800a6cc:	f009 fd8c 	bl	80141e8 <mg_match>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d008      	beq.n	800a6e8 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f107 0214 	add.w	r2, r7, #20
 800a6de:	4619      	mov	r1, r3
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f009 fc63 	bl	8013fac <mg_http_serve_ssi>
}
 800a6e6:	e006      	b.n	800a6f6 <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 800a6e8:	f107 0214 	add.w	r2, r7, #20
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	68b9      	ldr	r1, [r7, #8]
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f7ff fa9b 	bl	8009c2c <mg_http_serve_file>
}
 800a6f6:	bf00      	nop
 800a6f8:	3790      	adds	r7, #144	@ 0x90
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	08024e88 	.word	0x08024e88
 800a704:	08024a28 	.word	0x08024a28

0800a708 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 800a708:	b590      	push	{r4, r7, lr}
 800a70a:	b0cf      	sub	sp, #316	@ 0x13c
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800a712:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800a716:	6020      	str	r0, [r4, #0]
 800a718:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800a71c:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800a720:	6001      	str	r1, [r0, #0]
 800a722:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800a726:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800a72a:	600a      	str	r2, [r1, #0]
 800a72c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a730:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800a734:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800a736:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a73a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800a73e:	497a      	ldr	r1, [pc, #488]	@ (800a928 <mg_http_creds+0x220>)
 800a740:	6818      	ldr	r0, [r3, #0]
 800a742:	f7fd fff5 	bl	8008730 <mg_http_get_header>
 800a746:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 800a74a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a74e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	2200      	movs	r2, #0
 800a756:	701a      	strb	r2, [r3, #0]
 800a758:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a75c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	781a      	ldrb	r2, [r3, #0]
 800a764:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a768:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800a770:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d05e      	beq.n	800a836 <mg_http_creds+0x12e>
 800a778:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	2b06      	cmp	r3, #6
 800a780:	d959      	bls.n	800a836 <mg_http_creds+0x12e>
 800a782:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2206      	movs	r2, #6
 800a78a:	4968      	ldr	r1, [pc, #416]	@ (800a92c <mg_http_creds+0x224>)
 800a78c:	4618      	mov	r0, r3
 800a78e:	f018 fe98 	bl	80234c2 <memcmp>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d14e      	bne.n	800a836 <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 800a798:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	1d98      	adds	r0, r3, #6
 800a7a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	1f99      	subs	r1, r3, #6
 800a7a8:	f107 0214 	add.w	r2, r7, #20
 800a7ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a7b0:	f7fb ffb4 	bl	800671c <mg_base64_decode>
 800a7b4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 800a7b8:	f107 0314 	add.w	r3, r7, #20
 800a7bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a7c0:	213a      	movs	r1, #58	@ 0x3a
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7f5 fdb4 	bl	8000330 <memchr>
 800a7c8:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 800a7cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 80a2 	beq.w	800a91a <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 800a7d6:	f107 0314 	add.w	r3, r7, #20
 800a7da:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800a7de:	1ad2      	subs	r2, r2, r3
 800a7e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7e4:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 800a7e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a7ec:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 800a7f0:	f107 0314 	add.w	r3, r7, #20
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	4a4d      	ldr	r2, [pc, #308]	@ (800a930 <mg_http_creds+0x228>)
 800a7fa:	6809      	ldr	r1, [r1, #0]
 800a7fc:	6800      	ldr	r0, [r0, #0]
 800a7fe:	f006 f823 	bl	8010848 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 800a802:	f107 0314 	add.w	r3, r7, #20
 800a806:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	461a      	mov	r2, r3
 800a80e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a812:	1a9b      	subs	r3, r3, r2
 800a814:	1e5a      	subs	r2, r3, #1
 800a816:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a81a:	3301      	adds	r3, #1
 800a81c:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800a820:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	4613      	mov	r3, r2
 800a828:	4a41      	ldr	r2, [pc, #260]	@ (800a930 <mg_http_creds+0x228>)
 800a82a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a82e:	6800      	ldr	r0, [r0, #0]
 800a830:	f006 f80a 	bl	8010848 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800a834:	e071      	b.n	800a91a <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 800a836:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d024      	beq.n	800a888 <mg_http_creds+0x180>
 800a83e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b07      	cmp	r3, #7
 800a846:	d91f      	bls.n	800a888 <mg_http_creds+0x180>
 800a848:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2207      	movs	r2, #7
 800a850:	4938      	ldr	r1, [pc, #224]	@ (800a934 <mg_http_creds+0x22c>)
 800a852:	4618      	mov	r0, r3
 800a854:	f018 fe35 	bl	80234c2 <memcmp>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d114      	bne.n	800a888 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 800a85e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	1fda      	subs	r2, r3, #7
 800a866:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3307      	adds	r3, #7
 800a86e:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800a872:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	4613      	mov	r3, r2
 800a87a:	4a2d      	ldr	r2, [pc, #180]	@ (800a930 <mg_http_creds+0x228>)
 800a87c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a880:	6800      	ldr	r0, [r0, #0]
 800a882:	f005 ffe1 	bl	8010848 <mg_snprintf>
 800a886:	e049      	b.n	800a91c <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 800a888:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a88c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800a890:	4929      	ldr	r1, [pc, #164]	@ (800a938 <mg_http_creds+0x230>)
 800a892:	6818      	ldr	r0, [r3, #0]
 800a894:	f7fd ff4c 	bl	8008730 <mg_http_get_header>
 800a898:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800a89c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d028      	beq.n	800a8f6 <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 800a8a4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800a8a8:	220c      	movs	r2, #12
 800a8aa:	4924      	ldr	r1, [pc, #144]	@ (800a93c <mg_http_creds+0x234>)
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f009 fbae 	bl	801400e <mg_str_n>
 800a8b2:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800a8b6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800a8ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a8c4:	ca06      	ldmia	r2, {r1, r2}
 800a8c6:	f000 f864 	bl	800a992 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 800a8ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d024      	beq.n	800a91c <mg_http_creds+0x214>
 800a8d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a8dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a8e0:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	4a11      	ldr	r2, [pc, #68]	@ (800a930 <mg_http_creds+0x228>)
 800a8ea:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a8ee:	6800      	ldr	r0, [r0, #0]
 800a8f0:	f005 ffaa 	bl	8010848 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 800a8f4:	e012      	b.n	800a91c <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 800a8f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8fa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f103 0010 	add.w	r0, r3, #16
 800a904:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a908:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 800a90c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800a910:	6812      	ldr	r2, [r2, #0]
 800a912:	490a      	ldr	r1, [pc, #40]	@ (800a93c <mg_http_creds+0x234>)
 800a914:	f7fd fda4 	bl	8008460 <mg_http_get_var>
}
 800a918:	e000      	b.n	800a91c <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800a91a:	bf00      	nop
}
 800a91c:	bf00      	nop
 800a91e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800a922:	46bd      	mov	sp, r7
 800a924:	bd90      	pop	{r4, r7, pc}
 800a926:	bf00      	nop
 800a928:	08024e9c 	.word	0x08024e9c
 800a92c:	08024eac 	.word	0x08024eac
 800a930:	080244c8 	.word	0x080244c8
 800a934:	08024eb4 	.word	0x08024eb4
 800a938:	08024ebc 	.word	0x08024ebc
 800a93c:	08024ec4 	.word	0x08024ec4

0800a940 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	1d3b      	adds	r3, r7, #4
 800a94a:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800a94e:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 800a950:	2b01      	cmp	r3, #1
 800a952:	d913      	bls.n	800a97c <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	2b22      	cmp	r3, #34	@ 0x22
 800a95a:	d10f      	bne.n	800a97c <stripquotes+0x3c>
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	3b01      	subs	r3, #1
 800a962:	4413      	add	r3, r2
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	2b22      	cmp	r3, #34	@ 0x22
 800a968:	d108      	bne.n	800a97c <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	1c59      	adds	r1, r3, #1
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	1e9a      	subs	r2, r3, #2
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	4618      	mov	r0, r3
 800a976:	f009 fb4a 	bl	801400e <mg_str_n>
             : s;
 800a97a:	e006      	b.n	800a98a <stripquotes+0x4a>
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	461a      	mov	r2, r3
 800a980:	1d3b      	adds	r3, r7, #4
 800a982:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a986:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	3710      	adds	r7, #16
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800a992:	b082      	sub	sp, #8
 800a994:	b580      	push	{r7, lr}
 800a996:	b08c      	sub	sp, #48	@ 0x30
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	1d38      	adds	r0, r7, #4
 800a99e:	e880 0006 	stmia.w	r0, {r1, r2}
 800a9a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a9a8:	e072      	b.n	800aa90 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b0:	440b      	add	r3, r1
 800a9b2:	4413      	add	r3, r2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	2b3d      	cmp	r3, #61	@ 0x3d
 800a9b8:	d167      	bne.n	800aa8a <mg_http_get_header_var+0xf8>
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9be:	4413      	add	r3, r2
 800a9c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f018 fd7c 	bl	80234c2 <memcmp>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d15c      	bne.n	800aa8a <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9d6:	440b      	add	r3, r1
 800a9d8:	3301      	adds	r3, #1
 800a9da:	4413      	add	r3, r2
 800a9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 800a9ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9ec:	6a3b      	ldr	r3, [r7, #32]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d205      	bcs.n	800a9fe <mg_http_get_header_var+0x6c>
 800a9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b22      	cmp	r3, #34	@ 0x22
 800a9f8:	d101      	bne.n	800a9fe <mg_http_get_header_var+0x6c>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e000      	b.n	800aa00 <mg_http_get_header_var+0x6e>
 800a9fe:	2300      	movs	r3, #0
 800aa00:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 800aa02:	e002      	b.n	800aa0a <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 800aa04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa06:	3301      	adds	r3, #1
 800aa08:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 800aa0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa0c:	6a3b      	ldr	r3, [r7, #32]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d227      	bcs.n	800aa62 <mg_http_get_header_var+0xd0>
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d010      	beq.n	800aa3a <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800aa18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	429a      	cmp	r2, r3
 800aa1e:	d003      	beq.n	800aa28 <mg_http_get_header_var+0x96>
 800aa20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	2b22      	cmp	r3, #34	@ 0x22
 800aa26:	d001      	beq.n	800aa2c <mg_http_get_header_var+0x9a>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e000      	b.n	800aa2e <mg_http_get_header_var+0x9c>
 800aa2c:	2300      	movs	r3, #0
      while (p < x &&
 800aa2e:	f003 0301 	and.w	r3, r3, #1
 800aa32:	b2db      	uxtb	r3, r3
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e5      	bne.n	800aa04 <mg_http_get_header_var+0x72>
 800aa38:	e013      	b.n	800aa62 <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800aa3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	2b3b      	cmp	r3, #59	@ 0x3b
 800aa40:	d009      	beq.n	800aa56 <mg_http_get_header_var+0xc4>
 800aa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	2b20      	cmp	r3, #32
 800aa48:	d005      	beq.n	800aa56 <mg_http_get_header_var+0xc4>
 800aa4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	2b2c      	cmp	r3, #44	@ 0x2c
 800aa50:	d001      	beq.n	800aa56 <mg_http_get_header_var+0xc4>
 800aa52:	2301      	movs	r3, #1
 800aa54:	e000      	b.n	800aa58 <mg_http_get_header_var+0xc6>
 800aa56:	2300      	movs	r3, #0
      while (p < x &&
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1d0      	bne.n	800aa04 <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 800aa62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa66:	1ad2      	subs	r2, r2, r3
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	f107 0314 	add.w	r3, r7, #20
 800aa72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa74:	4618      	mov	r0, r3
 800aa76:	f009 faca 	bl	801400e <mg_str_n>
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f107 0314 	add.w	r3, r7, #20
 800aa80:	e893 0006 	ldmia.w	r3, {r1, r2}
 800aa84:	f7ff ff5c 	bl	800a940 <stripquotes>
 800aa88:	e012      	b.n	800aab0 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800aa8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d006      	beq.n	800aaa4 <mg_http_get_header_var+0x112>
 800aa96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa9a:	4413      	add	r3, r2
 800aa9c:	1c9a      	adds	r2, r3, #2
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d382      	bcc.n	800a9aa <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	2100      	movs	r1, #0
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f009 faaf 	bl	801400e <mg_str_n>
}
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	3730      	adds	r7, #48	@ 0x30
 800aab4:	46bd      	mov	sp, r7
 800aab6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aaba:	b002      	add	sp, #8
 800aabc:	4770      	bx	lr

0800aabe <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b082      	sub	sp, #8
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	4618      	mov	r0, r3
 800aacc:	f018 fa4a 	bl	8022f64 <atoi>
 800aad0:	4603      	mov	r3, r0
}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3708      	adds	r7, #8
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <is_hex_digit>:

static bool is_hex_digit(int c) {
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2b2f      	cmp	r3, #47	@ 0x2f
 800aae6:	dd02      	ble.n	800aaee <is_hex_digit+0x14>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b39      	cmp	r3, #57	@ 0x39
 800aaec:	dd0b      	ble.n	800ab06 <is_hex_digit+0x2c>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b60      	cmp	r3, #96	@ 0x60
 800aaf2:	dd02      	ble.n	800aafa <is_hex_digit+0x20>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2b66      	cmp	r3, #102	@ 0x66
 800aaf8:	dd05      	ble.n	800ab06 <is_hex_digit+0x2c>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2b40      	cmp	r3, #64	@ 0x40
 800aafe:	dd04      	ble.n	800ab0a <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2b46      	cmp	r3, #70	@ 0x46
 800ab04:	dc01      	bgt.n	800ab0a <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <is_hex_digit+0x32>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	f003 0301 	and.w	r3, r3, #1
 800ab10:	b2db      	uxtb	r3, r3
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	370c      	adds	r7, #12
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr

0800ab1e <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b08a      	sub	sp, #40	@ 0x28
 800ab22:	af02      	add	r7, sp, #8
 800ab24:	60f8      	str	r0, [r7, #12]
 800ab26:	60b9      	str	r1, [r7, #8]
 800ab28:	607a      	str	r2, [r7, #4]
 800ab2a:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	61fb      	str	r3, [r7, #28]
 800ab30:	2300      	movs	r3, #0
 800ab32:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	dc04      	bgt.n	800ab44 <skip_chunk+0x26>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	e07a      	b.n	800ac34 <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	3301      	adds	r3, #1
 800ab42:	61fb      	str	r3, [r7, #28]
 800ab44:	69fa      	ldr	r2, [r7, #28]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	da09      	bge.n	800ab60 <skip_chunk+0x42>
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	4413      	add	r3, r2
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff ffc0 	bl	800aada <is_hex_digit>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1ee      	bne.n	800ab3e <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <skip_chunk+0x4e>
 800ab66:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6a:	e063      	b.n	800ac34 <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 800ab6c:	69fb      	ldr	r3, [r7, #28]
 800ab6e:	2b08      	cmp	r3, #8
 800ab70:	dd02      	ble.n	800ab78 <skip_chunk+0x5a>
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295
 800ab76:	e05d      	b.n	800ac34 <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 800ab78:	69fa      	ldr	r2, [r7, #28]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	da0c      	bge.n	800ab9a <skip_chunk+0x7c>
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b0d      	cmp	r3, #13
 800ab8a:	d106      	bne.n	800ab9a <skip_chunk+0x7c>
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	4413      	add	r3, r2
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	2b0a      	cmp	r3, #10
 800ab98:	d002      	beq.n	800aba0 <skip_chunk+0x82>
 800ab9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ab9e:	e049      	b.n	800ac34 <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	f107 0314 	add.w	r3, r7, #20
 800aba6:	68f9      	ldr	r1, [r7, #12]
 800aba8:	4618      	mov	r0, r3
 800abaa:	f009 fa30 	bl	801400e <mg_str_n>
 800abae:	f107 0310 	add.w	r3, r7, #16
 800abb2:	2204      	movs	r2, #4
 800abb4:	9200      	str	r2, [sp, #0]
 800abb6:	2210      	movs	r2, #16
 800abb8:	f107 0114 	add.w	r1, r7, #20
 800abbc:	c903      	ldmia	r1, {r0, r1}
 800abbe:	f009 fc64 	bl	801448a <mg_str_to_num>
 800abc2:	4603      	mov	r3, r0
 800abc4:	f083 0301 	eor.w	r3, r3, #1
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d002      	beq.n	800abd4 <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 800abce:	f04f 33ff 	mov.w	r3, #4294967295
 800abd2:	e02f      	b.n	800ac34 <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	da02      	bge.n	800abe0 <skip_chunk+0xc2>
 800abda:	f04f 33ff 	mov.w	r3, #4294967295
 800abde:	e029      	b.n	800ac34 <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 800abe0:	68ba      	ldr	r2, [r7, #8]
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	1eda      	subs	r2, r3, #3
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	429a      	cmp	r2, r3
 800abec:	dc01      	bgt.n	800abf2 <skip_chunk+0xd4>
 800abee:	2300      	movs	r3, #0
 800abf0:	e020      	b.n	800ac34 <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 800abf2:	693a      	ldr	r2, [r7, #16]
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	4413      	add	r3, r2
 800abf8:	3302      	adds	r3, #2
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4413      	add	r3, r2
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	2b0d      	cmp	r3, #13
 800ac02:	d108      	bne.n	800ac16 <skip_chunk+0xf8>
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	4413      	add	r3, r2
 800ac0a:	3303      	adds	r3, #3
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4413      	add	r3, r2
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	2b0a      	cmp	r3, #10
 800ac14:	d002      	beq.n	800ac1c <skip_chunk+0xfe>
 800ac16:	f04f 33ff 	mov.w	r3, #4294967295
 800ac1a:	e00b      	b.n	800ac34 <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	1c9a      	adds	r2, r3, #2
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	1c9a      	adds	r2, r3, #2
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	4413      	add	r3, r2
 800ac32:	3302      	adds	r3, #2
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3720      	adds	r7, #32
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ac48:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ac4c:	6018      	str	r0, [r3, #0]
 800ac4e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ac52:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ac56:	6019      	str	r1, [r3, #0]
 800ac58:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ac5c:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800ac60:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 800ac62:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ac66:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2b07      	cmp	r3, #7
 800ac6e:	d031      	beq.n	800acd4 <http_cb+0x98>
 800ac70:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ac74:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b09      	cmp	r3, #9
 800ac7c:	d02a      	beq.n	800acd4 <http_cb+0x98>
 800ac7e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ac82:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	2b02      	cmp	r3, #2
 800ac8a:	f040 8368 	bne.w	800b35e <http_cb+0x722>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800ac8e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ac92:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ac9c:	f003 0304 	and.w	r3, r3, #4
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 835b 	beq.w	800b35e <http_cb+0x722>
 800aca8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800acac:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800acb6:	f003 0310 	and.w	r3, r3, #16
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f040 834e 	bne.w	800b35e <http_cb+0x722>
       c->recv.len > 0)) {  // see #2796
 800acc2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800acc6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800acce:	2b00      	cmp	r3, #0
 800acd0:	f000 8345 	beq.w	800b35e <http_cb+0x722>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 800acd4:	2300      	movs	r3, #0
 800acd6:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800acda:	e313      	b.n	800b304 <http_cb+0x6c8>
      const char *buf = (char *) c->recv.buf + ofs;
 800acdc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ace0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ace8:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800acec:	4413      	add	r3, r2
 800acee:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 800acf2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800acf6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800acfe:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	f107 0210 	add.w	r2, r7, #16
 800ad08:	4619      	mov	r1, r3
 800ad0a:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800ad0e:	f7fd fecb 	bl	8008aa8 <mg_http_parse>
 800ad12:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 800ad16:	2300      	movs	r3, #0
 800ad18:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 800ad1c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad20:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad28:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 800ad2c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	da38      	bge.n	800ada6 <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800ad34:	4bb7      	ldr	r3, [pc, #732]	@ (800b014 <http_cb+0x3d8>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	dd10      	ble.n	800ad5e <http_cb+0x122>
 800ad3c:	4bb6      	ldr	r3, [pc, #728]	@ (800b018 <http_cb+0x3dc>)
 800ad3e:	f640 12a6 	movw	r2, #2470	@ 0x9a6
 800ad42:	49b6      	ldr	r1, [pc, #728]	@ (800b01c <http_cb+0x3e0>)
 800ad44:	2001      	movs	r0, #1
 800ad46:	f001 faf9 	bl	800c33c <mg_log_prefix>
 800ad4a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad4e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad56:	4619      	mov	r1, r3
 800ad58:	48b1      	ldr	r0, [pc, #708]	@ (800b020 <http_cb+0x3e4>)
 800ad5a:	f001 fb3f 	bl	800c3dc <mg_log>
        c->is_draining = 1;
 800ad5e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad62:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ad6c:	f043 0310 	orr.w	r3, r3, #16
 800ad70:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800ad74:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad78:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad80:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800ad84:	1ad3      	subs	r3, r2, r3
 800ad86:	2b10      	cmp	r3, #16
 800ad88:	bf28      	it	cs
 800ad8a:	2310      	movcs	r3, #16
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800ad92:	f001 fb59 	bl	800c448 <mg_hexdump>
        c->recv.len = 0;
 800ad96:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad9a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2200      	movs	r2, #0
 800ada2:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 800ada4:	e2db      	b.n	800b35e <http_cb+0x722>
      }
      if (n == 0) break;                 // Request is not buffered yet
 800ada6:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 82c2 	beq.w	800b334 <http_cb+0x6f8>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 800adb0:	f107 0210 	add.w	r2, r7, #16
 800adb4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800adb8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800adbc:	210a      	movs	r1, #10
 800adbe:	6818      	ldr	r0, [r3, #0]
 800adc0:	f7fb fd8b 	bl	80068da <mg_call>
      if (c->recv.len != old_len) {
 800adc4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800adc8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add0:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 800add4:	429a      	cmp	r2, r3
 800add6:	d01d      	beq.n	800ae14 <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 800add8:	4b8e      	ldr	r3, [pc, #568]	@ (800b014 <http_cb+0x3d8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b02      	cmp	r3, #2
 800adde:	dd10      	ble.n	800ae02 <http_cb+0x1c6>
 800ade0:	4b8d      	ldr	r3, [pc, #564]	@ (800b018 <http_cb+0x3dc>)
 800ade2:	f44f 621b 	mov.w	r2, #2480	@ 0x9b0
 800ade6:	498d      	ldr	r1, [pc, #564]	@ (800b01c <http_cb+0x3e0>)
 800ade8:	2003      	movs	r0, #3
 800adea:	f001 faa7 	bl	800c33c <mg_log_prefix>
 800adee:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800adf2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adfa:	4619      	mov	r1, r3
 800adfc:	4889      	ldr	r0, [pc, #548]	@ (800b024 <http_cb+0x3e8>)
 800adfe:	f001 faed 	bl	800c3dc <mg_log>
        c->pfn = NULL;
 800ae02:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae06:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 800ae12:	e2a4      	b.n	800b35e <http_cb+0x722>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 800ae14:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae18:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b09      	cmp	r3, #9
 800ae20:	d128      	bne.n	800ae74 <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800ae22:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae26:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae2e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800ae32:	1ad2      	subs	r2, r2, r3
 800ae34:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae38:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800ae3c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 800ae40:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae44:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800ae48:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ae4c:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800ae50:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800ae54:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 800ae58:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800ae5c:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800ae60:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800ae64:	1a8a      	subs	r2, r1, r2
 800ae66:	1a9a      	subs	r2, r3, r2
 800ae68:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae6c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800ae70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 800ae74:	f107 0310 	add.w	r3, r7, #16
 800ae78:	496b      	ldr	r1, [pc, #428]	@ (800b028 <http_cb+0x3ec>)
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f7fd fc58 	bl	8008730 <mg_http_get_header>
 800ae80:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 800ae84:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d01d      	beq.n	800aec8 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 800ae8c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800ae90:	4966      	ldr	r1, [pc, #408]	@ (800b02c <http_cb+0x3f0>)
 800ae92:	4618      	mov	r0, r3
 800ae94:	f009 f89e 	bl	8013fd4 <mg_str_s>
 800ae98:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 800ae9c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800aea0:	cb0c      	ldmia	r3, {r2, r3}
 800aea2:	c903      	ldmia	r1, {r0, r1}
 800aea4:	f009 f959 	bl	801415a <mg_strcasecmp>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <http_cb+0x27a>
          is_chunked = true;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 800aeb4:	e0cf      	b.n	800b056 <http_cb+0x41a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 800aeb6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800aeba:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800aebe:	495c      	ldr	r1, [pc, #368]	@ (800b030 <http_cb+0x3f4>)
 800aec0:	6818      	ldr	r0, [r3, #0]
 800aec2:	f7fb fd2b 	bl	800691c <mg_error>
          return;
 800aec6:	e24a      	b.n	800b35e <http_cb+0x722>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 800aec8:	f107 0310 	add.w	r3, r7, #16
 800aecc:	4959      	ldr	r1, [pc, #356]	@ (800b034 <http_cb+0x3f8>)
 800aece:	4618      	mov	r0, r3
 800aed0:	f7fd fc2e 	bl	8008730 <mg_http_get_header>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f040 80bd 	bne.w	800b056 <http_cb+0x41a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 800aedc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800aee0:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2205      	movs	r2, #5
 800aee8:	4953      	ldr	r1, [pc, #332]	@ (800b038 <http_cb+0x3fc>)
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fd f991 	bl	8008212 <mg_ncasecmp>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	bf0c      	ite	eq
 800aef6:	2301      	moveq	r3, #1
 800aef8:	2300      	movne	r3, #0
 800aefa:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 800aefe:	2300      	movs	r3, #0
 800af00:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800af04:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800af08:	f083 0301 	eor.w	r3, r3, #1
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d030      	beq.n	800af74 <http_cb+0x338>
 800af12:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800af16:	4949      	ldr	r1, [pc, #292]	@ (800b03c <http_cb+0x400>)
 800af18:	4618      	mov	r0, r3
 800af1a:	f009 f85b 	bl	8013fd4 <mg_str_s>
 800af1e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800af22:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800af26:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800af2a:	cb0c      	ldmia	r3, {r2, r3}
 800af2c:	c903      	ldmia	r1, {r0, r1}
 800af2e:	f009 f914 	bl	801415a <mg_strcasecmp>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d012      	beq.n	800af5e <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 800af38:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800af3c:	4940      	ldr	r1, [pc, #256]	@ (800b040 <http_cb+0x404>)
 800af3e:	4618      	mov	r0, r3
 800af40:	f009 f848 	bl	8013fd4 <mg_str_s>
 800af44:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800af48:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800af4c:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800af50:	cb0c      	ldmia	r3, {r2, r3}
 800af52:	c903      	ldmia	r1, {r0, r1}
 800af54:	f009 f901 	bl	801415a <mg_strcasecmp>
 800af58:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d10a      	bne.n	800af74 <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 800af5e:	2301      	movs	r3, #1
 800af60:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 800af64:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800af68:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800af6c:	4413      	add	r3, r2
 800af6e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800af72:	e022      	b.n	800afba <http_cb+0x37e>
        } else if (is_response) {
 800af74:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01e      	beq.n	800afba <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 800af7c:	f107 0310 	add.w	r3, r7, #16
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff fd9c 	bl	800aabe <mg_http_status>
 800af86:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 800af8a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800af8e:	2bc7      	cmp	r3, #199	@ 0xc7
 800af90:	dd0a      	ble.n	800afa8 <http_cb+0x36c>
 800af92:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800af96:	2bcc      	cmp	r3, #204	@ 0xcc
 800af98:	d006      	beq.n	800afa8 <http_cb+0x36c>
 800af9a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800af9e:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800afa2:	d001      	beq.n	800afa8 <http_cb+0x36c>
 800afa4:	2301      	movs	r3, #1
 800afa6:	e000      	b.n	800afaa <http_cb+0x36e>
 800afa8:	2300      	movs	r3, #0
 800afaa:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 800afae:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 800afba:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d049      	beq.n	800b056 <http_cb+0x41a>
          if (!c->is_client) mg_http_reply(c, 411, "", "");
 800afc2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800afc6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800afd0:	f003 0302 	and.w	r3, r3, #2
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d10a      	bne.n	800aff0 <http_cb+0x3b4>
 800afda:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800afde:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 800afe2:	4b18      	ldr	r3, [pc, #96]	@ (800b044 <http_cb+0x408>)
 800afe4:	4a17      	ldr	r2, [pc, #92]	@ (800b044 <http_cb+0x408>)
 800afe6:	f240 119b 	movw	r1, #411	@ 0x19b
 800afea:	6800      	ldr	r0, [r0, #0]
 800afec:	f7fe fc16 	bl	800981c <mg_http_reply>
          MG_ERROR(("Content length missing from %s", is_response ? "response" : "request"));
 800aff0:	4b08      	ldr	r3, [pc, #32]	@ (800b014 <http_cb+0x3d8>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dd2e      	ble.n	800b056 <http_cb+0x41a>
 800aff8:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <http_cb+0x3dc>)
 800affa:	f640 12d3 	movw	r2, #2515	@ 0x9d3
 800affe:	4907      	ldr	r1, [pc, #28]	@ (800b01c <http_cb+0x3e0>)
 800b000:	2001      	movs	r0, #1
 800b002:	f001 f99b 	bl	800c33c <mg_log_prefix>
 800b006:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d01e      	beq.n	800b04c <http_cb+0x410>
 800b00e:	4b0e      	ldr	r3, [pc, #56]	@ (800b048 <http_cb+0x40c>)
 800b010:	e01d      	b.n	800b04e <http_cb+0x412>
 800b012:	bf00      	nop
 800b014:	24000258 	.word	0x24000258
 800b018:	08027d98 	.word	0x08027d98
 800b01c:	080241e8 	.word	0x080241e8
 800b020:	08024f7c 	.word	0x08024f7c
 800b024:	08024f94 	.word	0x08024f94
 800b028:	08024fb0 	.word	0x08024fb0
 800b02c:	08024fc4 	.word	0x08024fc4
 800b030:	08024fcc 	.word	0x08024fcc
 800b034:	08024fe8 	.word	0x08024fe8
 800b038:	08024544 	.word	0x08024544
 800b03c:	08024560 	.word	0x08024560
 800b040:	0802455c 	.word	0x0802455c
 800b044:	08024a28 	.word	0x08024a28
 800b048:	08024ff8 	.word	0x08024ff8
 800b04c:	4bc6      	ldr	r3, [pc, #792]	@ (800b368 <http_cb+0x72c>)
 800b04e:	4619      	mov	r1, r3
 800b050:	48c6      	ldr	r0, [pc, #792]	@ (800b36c <http_cb+0x730>)
 800b052:	f001 f9c3 	bl	800c3dc <mg_log>
        }
      }

      if (is_chunked) {
 800b056:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	f000 80c9 	beq.w	800b1f2 <http_cb+0x5b6>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 800b060:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b064:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b06c:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 800b070:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b074:	440b      	add	r3, r1
 800b076:	4413      	add	r3, r2
 800b078:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 800b07c:	2300      	movs	r3, #0
 800b07e:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800b082:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b086:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b08e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b092:	1ad2      	subs	r2, r2, r3
 800b094:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 800b09e:	e006      	b.n	800b0ae <http_cb+0x472>
 800b0a0:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800b0a4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800b0ae:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b0b2:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800b0b6:	18d0      	adds	r0, r2, r3
 800b0b8:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800b0bc:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b0c0:	1ad1      	subs	r1, r2, r3
 800b0c2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800b0c6:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800b0ca:	f7ff fd28 	bl	800ab1e <skip_chunk>
 800b0ce:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800b0d2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	dd03      	ble.n	800b0e2 <http_cb+0x4a6>
 800b0da:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1de      	bne.n	800b0a0 <http_cb+0x464>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800b0e2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	f000 8126 	beq.w	800b338 <http_cb+0x6fc>
        if (cl < 0) {
 800b0ec:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	da08      	bge.n	800b106 <http_cb+0x4ca>
          mg_error(c, "Invalid chunk");
 800b0f4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b0f8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b0fc:	499c      	ldr	r1, [pc, #624]	@ (800b370 <http_cb+0x734>)
 800b0fe:	6818      	ldr	r0, [r3, #0]
 800b100:	f7fb fc0c 	bl	800691c <mg_error>
          break;
 800b104:	e11b      	b.n	800b33e <http_cb+0x702>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 800b106:	2300      	movs	r3, #0
 800b108:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800b10c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b110:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b114:	2200      	movs	r2, #0
 800b116:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800b11a:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800b11e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b122:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b126:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800b12a:	e03e      	b.n	800b1aa <http_cb+0x56e>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 800b12c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b130:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b134:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b138:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800b13c:	18d0      	adds	r0, r2, r3
 800b13e:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b142:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800b146:	4413      	add	r3, r2
 800b148:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800b14c:	4413      	add	r3, r2
 800b14e:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800b152:	4619      	mov	r1, r3
 800b154:	f018 f9c5 	bl	80234e2 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 800b158:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800b15c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b160:	4413      	add	r3, r2
 800b162:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800b166:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b16a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b16e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b172:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800b176:	441a      	add	r2, r3
 800b178:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b17c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b180:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800b184:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b188:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b18c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b190:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800b194:	441a      	add	r2, r3
 800b196:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b19a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b19e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800b1a2:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d016      	beq.n	800b1d8 <http_cb+0x59c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800b1aa:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b1ae:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800b1b2:	18d0      	adds	r0, r2, r3
 800b1b4:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800b1b8:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b1bc:	1ad1      	subs	r1, r2, r3
 800b1be:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800b1c2:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800b1c6:	f7ff fcaa 	bl	800ab1e <skip_chunk>
 800b1ca:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800b1ce:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	dcaa      	bgt.n	800b12c <http_cb+0x4f0>
 800b1d6:	e000      	b.n	800b1da <http_cb+0x59e>
          if (dl == 0) break;
 800b1d8:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 800b1da:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800b1de:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b1e2:	4413      	add	r3, r2
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b1ea:	4413      	add	r3, r2
 800b1ec:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800b1f0:	e026      	b.n	800b240 <http_cb+0x604>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800b1f2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b1f6:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b1fe:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b202:	1ad2      	subs	r2, r2, r3
 800b204:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800b208:	1ad3      	subs	r3, r2, r3
 800b20a:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 800b20e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b212:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b216:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b21a:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800b21e:	429a      	cmp	r2, r3
 800b220:	f0c0 808c 	bcc.w	800b33c <http_cb+0x700>
        ofs += (size_t) n + hm.body.len;
 800b224:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b228:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b22c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b230:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800b234:	4413      	add	r3, r2
 800b236:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800b23a:	4413      	add	r3, r2
 800b23c:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 800b240:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b244:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	b2db      	uxtb	r3, r3
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00a      	beq.n	800b26e <http_cb+0x632>
 800b258:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b25c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800b266:	f043 0301 	orr.w	r3, r3, #1
 800b26a:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 800b26e:	f107 0210 	add.w	r2, r7, #16
 800b272:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b276:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b27a:	210b      	movs	r1, #11
 800b27c:	6818      	ldr	r0, [r3, #0]
 800b27e:	f7fb fb2c 	bl	80068da <mg_call>
      if (c->is_accepted && !c->is_resp) {
 800b282:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b286:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b290:	f003 0304 	and.w	r3, r3, #4
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d034      	beq.n	800b304 <http_cb+0x6c8>
 800b29a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b29e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800b2a8:	f003 0301 	and.w	r3, r3, #1
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d128      	bne.n	800b304 <http_cb+0x6c8>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 800b2b2:	f107 0310 	add.w	r3, r7, #16
 800b2b6:	492f      	ldr	r1, [pc, #188]	@ (800b374 <http_cb+0x738>)
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	f7fd fa39 	bl	8008730 <mg_http_get_header>
 800b2be:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 800b2c2:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d01c      	beq.n	800b304 <http_cb+0x6c8>
 800b2ca:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800b2ce:	492a      	ldr	r1, [pc, #168]	@ (800b378 <http_cb+0x73c>)
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f008 fe7f 	bl	8013fd4 <mg_str_s>
 800b2d6:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800b2da:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800b2de:	cb0c      	ldmia	r3, {r2, r3}
 800b2e0:	c903      	ldmia	r1, {r0, r1}
 800b2e2:	f008 ff3a 	bl	801415a <mg_strcasecmp>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10b      	bne.n	800b304 <http_cb+0x6c8>
          c->is_draining = 1;  // honor "Connection: close"
 800b2ec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b2f0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b2fa:	f043 0310 	orr.w	r3, r3, #16
 800b2fe:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 800b302:	e01c      	b.n	800b33e <http_cb+0x702>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800b304:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b308:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d110      	bne.n	800b33e <http_cb+0x702>
 800b31c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b320:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b328:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800b32c:	429a      	cmp	r2, r3
 800b32e:	f4ff acd5 	bcc.w	800acdc <http_cb+0xa0>
 800b332:	e004      	b.n	800b33e <http_cb+0x702>
      if (n == 0) break;                 // Request is not buffered yet
 800b334:	bf00      	nop
 800b336:	e002      	b.n	800b33e <http_cb+0x702>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800b338:	bf00      	nop
 800b33a:	e000      	b.n	800b33e <http_cb+0x702>
        if (hm.body.len > len) break;  // Buffer more data
 800b33c:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 800b33e:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00b      	beq.n	800b35e <http_cb+0x722>
 800b346:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b34a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	3338      	adds	r3, #56	@ 0x38
 800b352:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800b356:	2100      	movs	r1, #0
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 f923 	bl	800b5a4 <mg_iobuf_del>
  }
  (void) ev_data;
}
 800b35e:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	08025004 	.word	0x08025004
 800b36c:	0802500c 	.word	0x0802500c
 800b370:	0802502c 	.word	0x0802502c
 800b374:	0802503c 	.word	0x0802503c
 800b378:	08025048 	.word	0x08025048

0800b37c <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
 800b388:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	68b9      	ldr	r1, [r7, #8]
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f001 fc51 	bl	800cc38 <mg_listen>
 800b396:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d003      	beq.n	800b3a6 <mg_http_listen+0x2a>
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	4a03      	ldr	r2, [pc, #12]	@ (800b3b0 <mg_http_listen+0x34>)
 800b3a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800b3a6:	697b      	ldr	r3, [r7, #20]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3718      	adds	r7, #24
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	0800ac3d 	.word	0x0800ac3d

0800b3b4 <roundup>:





static size_t roundup(size_t size, size_t align) {
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00a      	beq.n	800b3da <roundup+0x26>
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	1e5a      	subs	r2, r3, #1
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d2:	683a      	ldr	r2, [r7, #0]
 800b3d4:	fb02 f303 	mul.w	r3, r2, r3
 800b3d8:	e000      	b.n	800b3dc <roundup+0x28>
 800b3da:	687b      	ldr	r3, [r7, #4]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800b3e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b3ec:	b088      	sub	sp, #32
 800b3ee:	af02      	add	r7, sp, #8
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  int ok = 1;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68db      	ldr	r3, [r3, #12]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6838      	ldr	r0, [r7, #0]
 800b400:	f7ff ffd8 	bl	800b3b4 <roundup>
 800b404:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d117      	bne.n	800b43c <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	685b      	ldr	r3, [r3, #4]
 800b414:	4619      	mov	r1, r3
 800b416:	4610      	mov	r0, r2
 800b418:	f013 ff96 	bl	801f348 <mg_bzero>
    free(io->buf);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4618      	mov	r0, r3
 800b422:	f017 fdc7 	bl	8022fb4 <free>
    io->buf = NULL;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	605a      	str	r2, [r3, #4]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	685a      	ldr	r2, [r3, #4]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	609a      	str	r2, [r3, #8]
 800b43a:	e053      	b.n	800b4e4 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	683a      	ldr	r2, [r7, #0]
 800b442:	429a      	cmp	r2, r3
 800b444:	d04e      	beq.n	800b4e4 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800b446:	6839      	ldr	r1, [r7, #0]
 800b448:	2001      	movs	r0, #1
 800b44a:	f017 fd8f 	bl	8022f6c <calloc>
 800b44e:	4603      	mov	r3, r0
 800b450:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d028      	beq.n	800b4aa <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	4293      	cmp	r3, r2
 800b460:	bf28      	it	cs
 800b462:	4613      	movcs	r3, r2
 800b464:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00a      	beq.n	800b482 <mg_iobuf_resize+0x9a>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d006      	beq.n	800b482 <mg_iobuf_resize+0x9a>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6938      	ldr	r0, [r7, #16]
 800b47e:	f018 f830 	bl	80234e2 <memmove>
      mg_bzero(io->buf, io->size);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	4619      	mov	r1, r3
 800b48c:	4610      	mov	r0, r2
 800b48e:	f013 ff5b 	bl	801f348 <mg_bzero>
      free(io->buf);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4618      	mov	r0, r3
 800b498:	f017 fd8c 	bl	8022fb4 <free>
      io->buf = (unsigned char *) p;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	605a      	str	r2, [r3, #4]
 800b4a8:	e01c      	b.n	800b4e4 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800b4ae:	4b10      	ldr	r3, [pc, #64]	@ (800b4f0 <mg_iobuf_resize+0x108>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	dd16      	ble.n	800b4e4 <mg_iobuf_resize+0xfc>
 800b4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f4 <mg_iobuf_resize+0x10c>)
 800b4b8:	f640 224d 	movw	r2, #2637	@ 0xa4d
 800b4bc:	490e      	ldr	r1, [pc, #56]	@ (800b4f8 <mg_iobuf_resize+0x110>)
 800b4be:	2001      	movs	r0, #1
 800b4c0:	f000 ff3c 	bl	800c33c <mg_log_prefix>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4698      	mov	r8, r3
 800b4cc:	4691      	mov	r9, r2
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	461c      	mov	r4, r3
 800b4d4:	4615      	mov	r5, r2
 800b4d6:	e9cd 4500 	strd	r4, r5, [sp]
 800b4da:	4642      	mov	r2, r8
 800b4dc:	464b      	mov	r3, r9
 800b4de:	4807      	ldr	r0, [pc, #28]	@ (800b4fc <mg_iobuf_resize+0x114>)
 800b4e0:	f000 ff7c 	bl	800c3dc <mg_log>
    }
  }
  return ok;
 800b4e4:	697b      	ldr	r3, [r7, #20]
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3718      	adds	r7, #24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b4f0:	24000258 	.word	0x24000258
 800b4f4:	08027da0 	.word	0x08027da0
 800b4f8:	080241e8 	.word	0x080241e8
 800b4fc:	08025088 	.word	0x08025088

0800b500 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	689a      	ldr	r2, [r3, #8]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	441a      	add	r2, r3
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	68db      	ldr	r3, [r3, #12]
 800b51a:	4619      	mov	r1, r3
 800b51c:	4610      	mov	r0, r2
 800b51e:	f7ff ff49 	bl	800b3b4 <roundup>
 800b522:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800b524:	6979      	ldr	r1, [r7, #20]
 800b526:	68f8      	ldr	r0, [r7, #12]
 800b528:	f7ff ff5e 	bl	800b3e8 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	429a      	cmp	r2, r3
 800b534:	d001      	beq.n	800b53a <mg_iobuf_add+0x3a>
 800b536:	2300      	movs	r3, #0
 800b538:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	429a      	cmp	r2, r3
 800b542:	d210      	bcs.n	800b566 <mg_iobuf_add+0x66>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	68b9      	ldr	r1, [r7, #8]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	440b      	add	r3, r1
 800b54e:	18d0      	adds	r0, r2, r3
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	18d1      	adds	r1, r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	689a      	ldr	r2, [r3, #8]
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	1ad3      	subs	r3, r2, r3
 800b560:	461a      	mov	r2, r3
 800b562:	f017 ffbe 	bl	80234e2 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d008      	beq.n	800b57e <mg_iobuf_add+0x7e>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	4413      	add	r3, r2
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	6879      	ldr	r1, [r7, #4]
 800b578:	4618      	mov	r0, r3
 800b57a:	f017 ffb2 	bl	80234e2 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	429a      	cmp	r2, r3
 800b586:	d902      	bls.n	800b58e <mg_iobuf_add+0x8e>
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	609a      	str	r2, [r3, #8]
  io->len += len;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	689a      	ldr	r2, [r3, #8]
 800b592:	683b      	ldr	r3, [r7, #0]
 800b594:	441a      	add	r2, r3
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	609a      	str	r2, [r3, #8]
  return len;
 800b59a:	683b      	ldr	r3, [r7, #0]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d902      	bls.n	800b5c0 <mg_iobuf_del+0x1c>
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	441a      	add	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	429a      	cmp	r2, r3
 800b5cc:	d904      	bls.n	800b5d8 <mg_iobuf_del+0x34>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	689a      	ldr	r2, [r3, #8]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	1ad3      	subs	r3, r2, r3
 800b5d6:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d012      	beq.n	800b606 <mg_iobuf_del+0x62>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	18d0      	adds	r0, r2, r3
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	68b9      	ldr	r1, [r7, #8]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	440b      	add	r3, r1
 800b5f2:	18d1      	adds	r1, r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	689a      	ldr	r2, [r3, #8]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	1ad2      	subs	r2, r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	1ad3      	subs	r3, r2, r3
 800b600:	461a      	mov	r2, r3
 800b602:	f017 ff6e 	bl	80234e2 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d00a      	beq.n	800b624 <mg_iobuf_del+0x80>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6899      	ldr	r1, [r3, #8]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	1acb      	subs	r3, r1, r3
 800b61a:	4413      	add	r3, r2
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	4618      	mov	r0, r3
 800b620:	f013 fe92 	bl	801f348 <mg_bzero>
  io->len -= len;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	689a      	ldr	r2, [r3, #8]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	1ad2      	subs	r2, r2, r3
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	609a      	str	r2, [r3, #8]
  return len;
 800b630:	687b      	ldr	r3, [r7, #4]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b082      	sub	sp, #8
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800b642:	2100      	movs	r1, #0
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff fecf 	bl	800b3e8 <mg_iobuf_resize>
}
 800b64a:	bf00      	nop
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
	...

0800b654 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <escapeseq+0x12>
 800b662:	4b04      	ldr	r3, [pc, #16]	@ (800b674 <escapeseq+0x20>)
 800b664:	e000      	b.n	800b668 <escapeseq+0x14>
 800b666:	4b04      	ldr	r3, [pc, #16]	@ (800b678 <escapeseq+0x24>)
}
 800b668:	4618      	mov	r0, r3
 800b66a:	370c      	adds	r7, #12
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr
 800b674:	08025094 	.word	0x08025094
 800b678:	0802509c 	.word	0x0802509c

0800b67c <json_esc>:

static char json_esc(int c, int esc) {
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800b686:	6838      	ldr	r0, [r7, #0]
 800b688:	f7ff ffe4 	bl	800b654 <escapeseq>
 800b68c:	6138      	str	r0, [r7, #16]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b00      	cmp	r3, #0
 800b692:	bf0c      	ite	eq
 800b694:	2301      	moveq	r3, #1
 800b696:	2300      	movne	r3, #0
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff ffda 	bl	800b654 <escapeseq>
 800b6a0:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	617b      	str	r3, [r7, #20]
 800b6a6:	e010      	b.n	800b6ca <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	461a      	mov	r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d107      	bne.n	800b6c4 <json_esc+0x48>
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	e007      	b.n	800b6d4 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	617b      	str	r3, [r7, #20]
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1ea      	bne.n	800b6a8 <json_esc+0x2c>
  }
  return 0;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3718      	adds	r7, #24
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	bd80      	pop	{r7, pc}

0800b6dc <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60fb      	str	r3, [r7, #12]
 800b6ea:	e02e      	b.n	800b74a <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	781b      	ldrb	r3, [r3, #0]
 800b6f4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b6f6:	d114      	bne.n	800b722 <mg_pass_string+0x46>
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	dd0f      	ble.n	800b722 <mg_pass_string+0x46>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	3301      	adds	r3, #1
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	4413      	add	r3, r2
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	2101      	movs	r1, #1
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff ffb4 	bl	800b67c <json_esc>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d003      	beq.n	800b722 <mg_pass_string+0x46>
      i++;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3301      	adds	r3, #1
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	e010      	b.n	800b744 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	4413      	add	r3, r2
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d102      	bne.n	800b734 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800b72e:	f06f 0301 	mvn.w	r3, #1
 800b732:	e010      	b.n	800b756 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	4413      	add	r3, r2
 800b73a:	781b      	ldrb	r3, [r3, #0]
 800b73c:	2b22      	cmp	r3, #34	@ 0x22
 800b73e:	d101      	bne.n	800b744 <mg_pass_string+0x68>
      return i;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	e008      	b.n	800b756 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	60fb      	str	r3, [r7, #12]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	dbcc      	blt.n	800b6ec <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800b752:	f06f 0301 	mvn.w	r3, #1
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 800b760:	b480      	push	{r7}
 800b762:	b091      	sub	sp, #68	@ 0x44
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800b76c:	f04f 0200 	mov.w	r2, #0
 800b770:	f04f 0300 	mov.w	r3, #0
 800b774:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 800b778:	2300      	movs	r3, #0
 800b77a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b77c:	2301      	movs	r3, #1
 800b77e:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 800b780:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	429a      	cmp	r2, r3
 800b786:	da0a      	bge.n	800b79e <mg_atod+0x3e>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	781b      	ldrb	r3, [r3, #0]
 800b78c:	2b2d      	cmp	r3, #45	@ 0x2d
 800b78e:	d106      	bne.n	800b79e <mg_atod+0x3e>
    sign = -1, i++;
 800b790:	f04f 33ff 	mov.w	r3, #4294967295
 800b794:	633b      	str	r3, [r7, #48]	@ 0x30
 800b796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b798:	3301      	adds	r3, #1
 800b79a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b79c:	e00a      	b.n	800b7b4 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800b79e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	da21      	bge.n	800b7ea <mg_atod+0x8a>
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7ac:	d11d      	bne.n	800b7ea <mg_atod+0x8a>
    i++;
 800b7ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b7b4:	e019      	b.n	800b7ea <mg_atod+0x8a>
    d *= 10.0;
 800b7b6:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b7ba:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b7be:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b7c2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 800b7c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	3b30      	subs	r3, #48	@ 0x30
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b7d8:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b7dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b7e0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	da0b      	bge.n	800b80a <mg_atod+0xaa>
 800b7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b2f      	cmp	r3, #47	@ 0x2f
 800b7fc:	d905      	bls.n	800b80a <mg_atod+0xaa>
 800b7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	4413      	add	r3, r2
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b39      	cmp	r3, #57	@ 0x39
 800b808:	d9d5      	bls.n	800b7b6 <mg_atod+0x56>
  }
  d *= sign;
 800b80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b80c:	ee07 3a90 	vmov	s15, r3
 800b810:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b814:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b818:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b81c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 800b820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	429a      	cmp	r2, r3
 800b826:	da51      	bge.n	800b8cc <mg_atod+0x16c>
 800b828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	4413      	add	r3, r2
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	2b2e      	cmp	r3, #46	@ 0x2e
 800b832:	d14b      	bne.n	800b8cc <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 800b834:	f04f 0200 	mov.w	r2, #0
 800b838:	f04f 0300 	mov.w	r3, #0
 800b83c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800b840:	a36d      	add	r3, pc, #436	@ (adr r3, 800b9f8 <mg_atod+0x298>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800b84a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b84c:	3301      	adds	r3, #1
 800b84e:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b850:	e01d      	b.n	800b88e <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 800b852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	4413      	add	r3, r2
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	3b30      	subs	r3, #48	@ 0x30
 800b85c:	ee07 3a90 	vmov	s15, r3
 800b860:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b864:	ed97 7b08 	vldr	d7, [r7, #32]
 800b868:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b86c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800b870:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b874:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 800b878:	ed97 6b08 	vldr	d6, [r7, #32]
 800b87c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800b880:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b884:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b88a:	3301      	adds	r3, #1
 800b88c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b88e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	429a      	cmp	r2, r3
 800b894:	da0b      	bge.n	800b8ae <mg_atod+0x14e>
 800b896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b898:	68fa      	ldr	r2, [r7, #12]
 800b89a:	4413      	add	r3, r2
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8a0:	d905      	bls.n	800b8ae <mg_atod+0x14e>
 800b8a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	4413      	add	r3, r2
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b39      	cmp	r3, #57	@ 0x39
 800b8ac:	d9d1      	bls.n	800b852 <mg_atod+0xf2>
    }
    d += frac * sign;
 800b8ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8b0:	ee07 3a90 	vmov	s15, r3
 800b8b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b8b8:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b8bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b8c0:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b8c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b8c8:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800b8cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	da7e      	bge.n	800b9d2 <mg_atod+0x272>
 800b8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	4413      	add	r3, r2
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	2b65      	cmp	r3, #101	@ 0x65
 800b8de:	d005      	beq.n	800b8ec <mg_atod+0x18c>
 800b8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b45      	cmp	r3, #69	@ 0x45
 800b8ea:	d172      	bne.n	800b9d2 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	61bb      	str	r3, [r7, #24]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	617b      	str	r3, [r7, #20]
    i++;
 800b8f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800b8fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	429a      	cmp	r2, r3
 800b900:	da0a      	bge.n	800b918 <mg_atod+0x1b8>
 800b902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	4413      	add	r3, r2
 800b908:	781b      	ldrb	r3, [r3, #0]
 800b90a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b90c:	d104      	bne.n	800b918 <mg_atod+0x1b8>
 800b90e:	2301      	movs	r3, #1
 800b910:	617b      	str	r3, [r7, #20]
 800b912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b914:	3301      	adds	r3, #1
 800b916:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 800b918:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	da19      	bge.n	800b954 <mg_atod+0x1f4>
 800b920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	4413      	add	r3, r2
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2b2b      	cmp	r3, #43	@ 0x2b
 800b92a:	d113      	bne.n	800b954 <mg_atod+0x1f4>
 800b92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b92e:	3301      	adds	r3, #1
 800b930:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800b932:	e00f      	b.n	800b954 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 800b934:	69ba      	ldr	r2, [r7, #24]
 800b936:	4613      	mov	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	4619      	mov	r1, r3
 800b940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b942:	1c5a      	adds	r2, r3, #1
 800b944:	637a      	str	r2, [r7, #52]	@ 0x34
 800b946:	461a      	mov	r2, r3
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	4413      	add	r3, r2
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	3b30      	subs	r3, #48	@ 0x30
 800b950:	440b      	add	r3, r1
 800b952:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800b954:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	429a      	cmp	r2, r3
 800b95a:	da0f      	bge.n	800b97c <mg_atod+0x21c>
 800b95c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	4413      	add	r3, r2
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	2b2f      	cmp	r3, #47	@ 0x2f
 800b966:	d909      	bls.n	800b97c <mg_atod+0x21c>
 800b968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	4413      	add	r3, r2
 800b96e:	781b      	ldrb	r3, [r3, #0]
 800b970:	2b39      	cmp	r3, #57	@ 0x39
 800b972:	d803      	bhi.n	800b97c <mg_atod+0x21c>
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800b97a:	dbdb      	blt.n	800b934 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d002      	beq.n	800b988 <mg_atod+0x228>
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	425b      	negs	r3, r3
 800b986:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 800b988:	2300      	movs	r3, #0
 800b98a:	61fb      	str	r3, [r7, #28]
 800b98c:	e00a      	b.n	800b9a4 <mg_atod+0x244>
 800b98e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b992:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b996:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b99a:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	61fb      	str	r3, [r7, #28]
 800b9a4:	69fa      	ldr	r2, [r7, #28]
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	dbf0      	blt.n	800b98e <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	61fb      	str	r3, [r7, #28]
 800b9b0:	e00a      	b.n	800b9c8 <mg_atod+0x268>
 800b9b2:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b9b6:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800b9ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b9be:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	3301      	adds	r3, #1
 800b9c6:	61fb      	str	r3, [r7, #28]
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	425b      	negs	r3, r3
 800b9cc:	69fa      	ldr	r2, [r7, #28]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	dbef      	blt.n	800b9b2 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d002      	beq.n	800b9de <mg_atod+0x27e>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9dc:	601a      	str	r2, [r3, #0]
  return d;
 800b9de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b9e2:	ec43 2b17 	vmov	d7, r2, r3
}
 800b9e6:	eeb0 0b47 	vmov.f64	d0, d7
 800b9ea:	3744      	adds	r7, #68	@ 0x44
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr
 800b9f4:	f3af 8000 	nop.w
 800b9f8:	9999999a 	.word	0x9999999a
 800b9fc:	3fb99999 	.word	0x3fb99999

0800ba00 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 800ba00:	b590      	push	{r4, r7, lr}
 800ba02:	b09b      	sub	sp, #108	@ 0x6c
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	f107 0408 	add.w	r4, r7, #8
 800ba0a:	e884 0003 	stmia.w	r4, {r0, r1}
 800ba0e:	607a      	str	r2, [r7, #4]
 800ba10:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 800ba20:	2300      	movs	r3, #0
 800ba22:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 800ba24:	2300      	movs	r3, #0
 800ba26:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 800ba28:	2300      	movs	r3, #0
 800ba2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 800ba30:	2301      	movs	r3, #1
 800ba32:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 800ba34:	f04f 33ff 	mov.w	r3, #4294967295
 800ba38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d002      	beq.n	800ba4c <mg_json_get+0x4c>
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b24      	cmp	r3, #36	@ 0x24
 800ba52:	d002      	beq.n	800ba5a <mg_json_get+0x5a>
 800ba54:	f06f 0301 	mvn.w	r3, #1
 800ba58:	e308      	b.n	800c06c <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ba5e:	e2fe      	b.n	800c05e <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 800ba60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba64:	4413      	add	r3, r2
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800ba6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba70:	2b20      	cmp	r3, #32
 800ba72:	f000 82ee 	beq.w	800c052 <mg_json_get+0x652>
 800ba76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba7a:	2b09      	cmp	r3, #9
 800ba7c:	f000 82e9 	beq.w	800c052 <mg_json_get+0x652>
 800ba80:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba84:	2b0a      	cmp	r3, #10
 800ba86:	f000 82e4 	beq.w	800c052 <mg_json_get+0x652>
 800ba8a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba8e:	2b0d      	cmp	r3, #13
 800ba90:	f000 82df 	beq.w	800c052 <mg_json_get+0x652>
    switch (expecting) {
 800ba94:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	f200 82dd 	bhi.w	800c058 <mg_json_get+0x658>
 800ba9e:	a201      	add	r2, pc, #4	@ (adr r2, 800baa4 <mg_json_get+0xa4>)
 800baa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa4:	0800bab5 	.word	0x0800bab5
 800baa8:	0800bd9d 	.word	0x0800bd9d
 800baac:	0800bf2b 	.word	0x0800bf2b
 800bab0:	0800bf41 	.word	0x0800bf41
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 800bab4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bab8:	429a      	cmp	r2, r3
 800baba:	d101      	bne.n	800bac0 <mg_json_get+0xc0>
 800babc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800babe:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 800bac0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bac4:	2b7b      	cmp	r3, #123	@ 0x7b
 800bac6:	d12b      	bne.n	800bb20 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800bac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baca:	2b1d      	cmp	r3, #29
 800bacc:	dd02      	ble.n	800bad4 <mg_json_get+0xd4>
 800bace:	f04f 33ff 	mov.w	r3, #4294967295
 800bad2:	e2cb      	b.n	800c06c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800bad4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bad8:	429a      	cmp	r2, r3
 800bada:	d114      	bne.n	800bb06 <mg_json_get+0x106>
 800badc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	4413      	add	r3, r2
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bae6:	d10e      	bne.n	800bb06 <mg_json_get+0x106>
 800bae8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800baea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baec:	429a      	cmp	r2, r3
 800baee:	d10a      	bne.n	800bb06 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 800baf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baf2:	3301      	adds	r3, #1
 800baf4:	657b      	str	r3, [r7, #84]	@ 0x54
 800baf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800baf8:	3301      	adds	r3, #1
 800bafa:	653b      	str	r3, [r7, #80]	@ 0x50
 800bafc:	f04f 33ff 	mov.w	r3, #4294967295
 800bb00:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb04:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 800bb06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb08:	1c5a      	adds	r2, r3, #1
 800bb0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bb0c:	3368      	adds	r3, #104	@ 0x68
 800bb0e:	443b      	add	r3, r7
 800bb10:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bb14:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 800bb1e:	e29b      	b.n	800c058 <mg_json_get+0x658>
        } else if (c == '[') {
 800bb20:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb24:	2b5b      	cmp	r3, #91	@ 0x5b
 800bb26:	d14e      	bne.n	800bbc6 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800bb28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb2a:	2b1d      	cmp	r3, #29
 800bb2c:	dd02      	ble.n	800bb34 <mg_json_get+0x134>
 800bb2e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb32:	e29b      	b.n	800c06c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 800bb34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bb36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d13a      	bne.n	800bbb2 <mg_json_get+0x1b2>
 800bb3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	4413      	add	r3, r2
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	2b5b      	cmp	r3, #91	@ 0x5b
 800bb46:	d134      	bne.n	800bbb2 <mg_json_get+0x1b2>
 800bb48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d130      	bne.n	800bbb2 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 800bb50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb52:	3301      	adds	r3, #1
 800bb54:	657b      	str	r3, [r7, #84]	@ 0x54
 800bb56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb58:	3301      	adds	r3, #1
 800bb5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800bb60:	2300      	movs	r3, #0
 800bb62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb64:	e010      	b.n	800bb88 <mg_json_get+0x188>
              ei *= 10;
 800bb66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb68:	4613      	mov	r3, r2
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	4413      	add	r3, r2
 800bb6e:	005b      	lsls	r3, r3, #1
 800bb70:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 800bb72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	4413      	add	r3, r2
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	3b30      	subs	r3, #48	@ 0x30
 800bb7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb7e:	4413      	add	r3, r2
 800bb80:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800bb82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb84:	3301      	adds	r3, #1
 800bb86:	653b      	str	r3, [r7, #80]	@ 0x50
 800bb88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b5d      	cmp	r3, #93	@ 0x5d
 800bb92:	d005      	beq.n	800bba0 <mg_json_get+0x1a0>
 800bb94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	4413      	add	r3, r2
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e2      	bne.n	800bb66 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 800bba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	4413      	add	r3, r2
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <mg_json_get+0x1b2>
 800bbac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbae:	3301      	adds	r3, #1
 800bbb0:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 800bbb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbb4:	1c5a      	adds	r2, r3, #1
 800bbb6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bbb8:	3368      	adds	r3, #104	@ 0x68
 800bbba:	443b      	add	r3, r7
 800bbbc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bbc0:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800bbc4:	e248      	b.n	800c058 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 800bbc6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bbca:	2b5d      	cmp	r3, #93	@ 0x5d
 800bbcc:	d13a      	bne.n	800bc44 <mg_json_get+0x244>
 800bbce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	dd37      	ble.n	800bc44 <mg_json_get+0x244>
          MG_EOO(']');
 800bbd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d106      	bne.n	800bbea <mg_json_get+0x1ea>
 800bbdc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bbde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d002      	beq.n	800bbea <mg_json_get+0x1ea>
 800bbe4:	f06f 0302 	mvn.w	r3, #2
 800bbe8:	e240      	b.n	800c06c <mg_json_get+0x66c>
 800bbea:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bbee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbf0:	3b01      	subs	r3, #1
 800bbf2:	3368      	adds	r3, #104	@ 0x68
 800bbf4:	443b      	add	r3, r7
 800bbf6:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800bbfa:	3302      	adds	r3, #2
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d002      	beq.n	800bc06 <mg_json_get+0x206>
 800bc00:	f06f 0301 	mvn.w	r3, #1
 800bc04:	e232      	b.n	800c06c <mg_json_get+0x66c>
 800bc06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc08:	3b01      	subs	r3, #1
 800bc0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bc0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc10:	429a      	cmp	r2, r3
 800bc12:	f040 809c 	bne.w	800bd4e <mg_json_get+0x34e>
 800bc16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f040 8095 	bne.w	800bd4e <mg_json_get+0x34e>
 800bc24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bc26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	f040 8090 	bne.w	800bd4e <mg_json_get+0x34e>
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d005      	beq.n	800bc40 <mg_json_get+0x240>
 800bc34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bc36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	1c5a      	adds	r2, r3, #1
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc42:	e213      	b.n	800c06c <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800bc44:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc48:	2b74      	cmp	r3, #116	@ 0x74
 800bc4a:	d113      	bne.n	800bc74 <mg_json_get+0x274>
 800bc4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc4e:	3303      	adds	r3, #3
 800bc50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc52:	429a      	cmp	r2, r3
 800bc54:	dd0e      	ble.n	800bc74 <mg_json_get+0x274>
 800bc56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc5a:	4413      	add	r3, r2
 800bc5c:	2204      	movs	r2, #4
 800bc5e:	4998      	ldr	r1, [pc, #608]	@ (800bec0 <mg_json_get+0x4c0>)
 800bc60:	4618      	mov	r0, r3
 800bc62:	f017 fc2e 	bl	80234c2 <memcmp>
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d103      	bne.n	800bc74 <mg_json_get+0x274>
          i += 3;
 800bc6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc6e:	3303      	adds	r3, #3
 800bc70:	663b      	str	r3, [r7, #96]	@ 0x60
 800bc72:	e06c      	b.n	800bd4e <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 800bc74:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc78:	2b6e      	cmp	r3, #110	@ 0x6e
 800bc7a:	d113      	bne.n	800bca4 <mg_json_get+0x2a4>
 800bc7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc7e:	3303      	adds	r3, #3
 800bc80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc82:	429a      	cmp	r2, r3
 800bc84:	dd0e      	ble.n	800bca4 <mg_json_get+0x2a4>
 800bc86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc8a:	4413      	add	r3, r2
 800bc8c:	2204      	movs	r2, #4
 800bc8e:	498d      	ldr	r1, [pc, #564]	@ (800bec4 <mg_json_get+0x4c4>)
 800bc90:	4618      	mov	r0, r3
 800bc92:	f017 fc16 	bl	80234c2 <memcmp>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d103      	bne.n	800bca4 <mg_json_get+0x2a4>
          i += 3;
 800bc9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc9e:	3303      	adds	r3, #3
 800bca0:	663b      	str	r3, [r7, #96]	@ 0x60
 800bca2:	e054      	b.n	800bd4e <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 800bca4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bca8:	2b66      	cmp	r3, #102	@ 0x66
 800bcaa:	d113      	bne.n	800bcd4 <mg_json_get+0x2d4>
 800bcac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcae:	3304      	adds	r3, #4
 800bcb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	dd0e      	ble.n	800bcd4 <mg_json_get+0x2d4>
 800bcb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcba:	4413      	add	r3, r2
 800bcbc:	2205      	movs	r2, #5
 800bcbe:	4982      	ldr	r1, [pc, #520]	@ (800bec8 <mg_json_get+0x4c8>)
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f017 fbfe 	bl	80234c2 <memcmp>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d103      	bne.n	800bcd4 <mg_json_get+0x2d4>
          i += 4;
 800bccc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcce:	3304      	adds	r3, #4
 800bcd0:	663b      	str	r3, [r7, #96]	@ 0x60
 800bcd2:	e03c      	b.n	800bd4e <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800bcd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bcd8:	2b2d      	cmp	r3, #45	@ 0x2d
 800bcda:	d007      	beq.n	800bcec <mg_json_get+0x2ec>
 800bcdc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bce0:	2b2f      	cmp	r3, #47	@ 0x2f
 800bce2:	d916      	bls.n	800bd12 <mg_json_get+0x312>
 800bce4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bce8:	2b39      	cmp	r3, #57	@ 0x39
 800bcea:	d812      	bhi.n	800bd12 <mg_json_get+0x312>
          int numlen = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 800bcf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bcf4:	18d0      	adds	r0, r2, r3
 800bcf6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bcf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bcfa:	1ad3      	subs	r3, r2, r3
 800bcfc:	f107 0210 	add.w	r2, r7, #16
 800bd00:	4619      	mov	r1, r3
 800bd02:	f7ff fd2d 	bl	800b760 <mg_atod>
          i += numlen - 1;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bd0c:	4413      	add	r3, r2
 800bd0e:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800bd10:	e01d      	b.n	800bd4e <mg_json_get+0x34e>
        } else if (c == '"') {
 800bd12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bd16:	2b22      	cmp	r3, #34	@ 0x22
 800bd18:	d116      	bne.n	800bd48 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800bd1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd20:	18d0      	adds	r0, r2, r3
 800bd22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd26:	1ad3      	subs	r3, r2, r3
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	f7ff fcd6 	bl	800b6dc <mg_pass_string>
 800bd30:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 800bd32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	da01      	bge.n	800bd3c <mg_json_get+0x33c>
 800bd38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3a:	e197      	b.n	800c06c <mg_json_get+0x66c>
          i += n + 1;
 800bd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd3e:	3301      	adds	r3, #1
 800bd40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bd42:	4413      	add	r3, r2
 800bd44:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd46:	e002      	b.n	800bd4e <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 800bd48:	f06f 0301 	mvn.w	r3, #1
 800bd4c:	e18e      	b.n	800c06c <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 800bd4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd52:	429a      	cmp	r2, r3
 800bd54:	d114      	bne.n	800bd80 <mg_json_get+0x380>
 800bd56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10e      	bne.n	800bd80 <mg_json_get+0x380>
 800bd62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d10a      	bne.n	800bd80 <mg_json_get+0x380>
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d005      	beq.n	800bd7c <mg_json_get+0x37c>
 800bd70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bd72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	1c5a      	adds	r2, r3, #1
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd7e:	e175      	b.n	800c06c <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 800bd80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d105      	bne.n	800bd94 <mg_json_get+0x394>
 800bd88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	db02      	blt.n	800bd94 <mg_json_get+0x394>
 800bd8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd90:	3301      	adds	r3, #1
 800bd92:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 800bd94:	2303      	movs	r3, #3
 800bd96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800bd9a:	e15d      	b.n	800c058 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800bd9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bda0:	2b22      	cmp	r3, #34	@ 0x22
 800bda2:	d170      	bne.n	800be86 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800bda4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bda6:	3301      	adds	r3, #1
 800bda8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdaa:	18d0      	adds	r0, r2, r3
 800bdac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bdae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	3b01      	subs	r3, #1
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	f7ff fc91 	bl	800b6dc <mg_pass_string>
 800bdba:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	da01      	bge.n	800bdc6 <mg_json_get+0x3c6>
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdc4:	e152      	b.n	800c06c <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 800bdc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdc8:	1c5a      	adds	r2, r3, #1
 800bdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bdcc:	4413      	add	r3, r2
 800bdce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	dc02      	bgt.n	800bdda <mg_json_get+0x3da>
 800bdd4:	f06f 0302 	mvn.w	r3, #2
 800bdd8:	e148      	b.n	800c06c <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800bdda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdde:	429a      	cmp	r2, r3
 800bde0:	da02      	bge.n	800bde8 <mg_json_get+0x3e8>
 800bde2:	f06f 0302 	mvn.w	r3, #2
 800bde6:	e141      	b.n	800c06c <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 800bde8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d109      	bne.n	800be04 <mg_json_get+0x404>
 800bdf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bdfc:	d002      	beq.n	800be04 <mg_json_get+0x404>
 800bdfe:	f06f 0302 	mvn.w	r3, #2
 800be02:	e133      	b.n	800c06c <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 800be04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be08:	429a      	cmp	r2, r3
 800be0a:	d133      	bne.n	800be74 <mg_json_get+0x474>
 800be0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be0e:	3b01      	subs	r3, #1
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	4413      	add	r3, r2
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	2b2e      	cmp	r3, #46	@ 0x2e
 800be18:	d12c      	bne.n	800be74 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800be1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be1c:	3301      	adds	r3, #1
 800be1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be20:	18d0      	adds	r0, r2, r3
 800be22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	4413      	add	r3, r2
 800be28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be2a:	4619      	mov	r1, r3
 800be2c:	f017 fb88 	bl	8023540 <strncmp>
 800be30:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 800be32:	2b00      	cmp	r3, #0
 800be34:	d11e      	bne.n	800be74 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800be36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be3a:	4413      	add	r3, r2
 800be3c:	461a      	mov	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4413      	add	r3, r2
 800be42:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800be44:	2b00      	cmp	r3, #0
 800be46:	d011      	beq.n	800be6c <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800be48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be4c:	4413      	add	r3, r2
 800be4e:	461a      	mov	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4413      	add	r3, r2
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b2e      	cmp	r3, #46	@ 0x2e
 800be58:	d008      	beq.n	800be6c <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800be5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be5e:	4413      	add	r3, r2
 800be60:	461a      	mov	r2, r3
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4413      	add	r3, r2
 800be66:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800be68:	2b5b      	cmp	r3, #91	@ 0x5b
 800be6a:	d103      	bne.n	800be74 <mg_json_get+0x474>
            pos += n;
 800be6c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be70:	4413      	add	r3, r2
 800be72:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 800be74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be76:	3301      	adds	r3, #1
 800be78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be7a:	4413      	add	r3, r2
 800be7c:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 800be7e:	2302      	movs	r3, #2
 800be80:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800be84:	e0e7      	b.n	800c056 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 800be86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be8a:	2b7d      	cmp	r3, #125	@ 0x7d
 800be8c:	d14a      	bne.n	800bf24 <mg_json_get+0x524>
          MG_EOO('}');
 800be8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be92:	429a      	cmp	r2, r3
 800be94:	d106      	bne.n	800bea4 <mg_json_get+0x4a4>
 800be96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d002      	beq.n	800bea4 <mg_json_get+0x4a4>
 800be9e:	f06f 0302 	mvn.w	r3, #2
 800bea2:	e0e3      	b.n	800c06c <mg_json_get+0x66c>
 800bea4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800beaa:	3b01      	subs	r3, #1
 800beac:	3368      	adds	r3, #104	@ 0x68
 800beae:	443b      	add	r3, r7
 800beb0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800beb4:	3302      	adds	r3, #2
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d008      	beq.n	800becc <mg_json_get+0x4cc>
 800beba:	f06f 0301 	mvn.w	r3, #1
 800bebe:	e0d5      	b.n	800c06c <mg_json_get+0x66c>
 800bec0:	080250a8 	.word	0x080250a8
 800bec4:	080250b0 	.word	0x080250b0
 800bec8:	080250b8 	.word	0x080250b8
 800becc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bece:	3b01      	subs	r3, #1
 800bed0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bed2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d114      	bne.n	800bf04 <mg_json_get+0x504>
 800beda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	4413      	add	r3, r2
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10e      	bne.n	800bf04 <mg_json_get+0x504>
 800bee6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bee8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800beea:	429a      	cmp	r2, r3
 800beec:	d10a      	bne.n	800bf04 <mg_json_get+0x504>
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d005      	beq.n	800bf00 <mg_json_get+0x500>
 800bef4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bef6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	1c5a      	adds	r2, r3, #1
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bf02:	e0b3      	b.n	800c06c <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 800bf04:	2303      	movs	r3, #3
 800bf06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 800bf0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	f040 80a1 	bne.w	800c056 <mg_json_get+0x656>
 800bf14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f2c0 809d 	blt.w	800c056 <mg_json_get+0x656>
 800bf1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf1e:	3301      	adds	r3, #1
 800bf20:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 800bf22:	e098      	b.n	800c056 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 800bf24:	f06f 0301 	mvn.w	r3, #1
 800bf28:	e0a0      	b.n	800c06c <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 800bf2a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf2e:	2b3a      	cmp	r3, #58	@ 0x3a
 800bf30:	d103      	bne.n	800bf3a <mg_json_get+0x53a>
          expecting = S_VALUE;
 800bf32:	2300      	movs	r3, #0
 800bf34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800bf38:	e08e      	b.n	800c058 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 800bf3a:	f06f 0301 	mvn.w	r3, #1
 800bf3e:	e095      	b.n	800c06c <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 800bf40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	dc02      	bgt.n	800bf4c <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 800bf46:	f06f 0301 	mvn.w	r3, #1
 800bf4a:	e08f      	b.n	800c06c <mg_json_get+0x66c>
        } else if (c == ',') {
 800bf4c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf50:	2b2c      	cmp	r3, #44	@ 0x2c
 800bf52:	d10d      	bne.n	800bf70 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 800bf54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bf56:	3b01      	subs	r3, #1
 800bf58:	3368      	adds	r3, #104	@ 0x68
 800bf5a:	443b      	add	r3, r7
 800bf5c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800bf60:	2b7b      	cmp	r3, #123	@ 0x7b
 800bf62:	bf0c      	ite	eq
 800bf64:	2301      	moveq	r3, #1
 800bf66:	2300      	movne	r3, #0
 800bf68:	b2db      	uxtb	r3, r3
 800bf6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800bf6e:	e073      	b.n	800c058 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 800bf70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf74:	2b5d      	cmp	r3, #93	@ 0x5d
 800bf76:	d003      	beq.n	800bf80 <mg_json_get+0x580>
 800bf78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf7c:	2b7d      	cmp	r3, #125	@ 0x7d
 800bf7e:	d163      	bne.n	800c048 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 800bf80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d10d      	bne.n	800bfa4 <mg_json_get+0x5a4>
 800bf88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf8c:	2b7d      	cmp	r3, #125	@ 0x7d
 800bf8e:	d109      	bne.n	800bfa4 <mg_json_get+0x5a4>
 800bf90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf92:	3b01      	subs	r3, #1
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	4413      	add	r3, r2
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf9c:	d102      	bne.n	800bfa4 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 800bf9e:	f06f 0302 	mvn.w	r3, #2
 800bfa2:	e063      	b.n	800c06c <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 800bfa4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bfa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d10d      	bne.n	800bfc8 <mg_json_get+0x5c8>
 800bfac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bfb0:	2b5d      	cmp	r3, #93	@ 0x5d
 800bfb2:	d109      	bne.n	800bfc8 <mg_json_get+0x5c8>
 800bfb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	687a      	ldr	r2, [r7, #4]
 800bfba:	4413      	add	r3, r2
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	2b2c      	cmp	r3, #44	@ 0x2c
 800bfc0:	d102      	bne.n	800bfc8 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 800bfc2:	f06f 0302 	mvn.w	r3, #2
 800bfc6:	e051      	b.n	800c06c <mg_json_get+0x66c>
          MG_EOO('O');
 800bfc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bfca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d106      	bne.n	800bfde <mg_json_get+0x5de>
 800bfd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bfd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d002      	beq.n	800bfde <mg_json_get+0x5de>
 800bfd8:	f06f 0302 	mvn.w	r3, #2
 800bfdc:	e046      	b.n	800c06c <mg_json_get+0x66c>
 800bfde:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bfe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfe4:	3b01      	subs	r3, #1
 800bfe6:	3368      	adds	r3, #104	@ 0x68
 800bfe8:	443b      	add	r3, r7
 800bfea:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800bfee:	3302      	adds	r3, #2
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d002      	beq.n	800bffa <mg_json_get+0x5fa>
 800bff4:	f06f 0301 	mvn.w	r3, #1
 800bff8:	e038      	b.n	800c06c <mg_json_get+0x66c>
 800bffa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bffc:	3b01      	subs	r3, #1
 800bffe:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c000:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c004:	429a      	cmp	r2, r3
 800c006:	d114      	bne.n	800c032 <mg_json_get+0x632>
 800c008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	4413      	add	r3, r2
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d10e      	bne.n	800c032 <mg_json_get+0x632>
 800c014:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c018:	429a      	cmp	r2, r3
 800c01a:	d10a      	bne.n	800c032 <mg_json_get+0x632>
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d005      	beq.n	800c02e <mg_json_get+0x62e>
 800c022:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	1c5a      	adds	r2, r3, #1
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c030:	e01c      	b.n	800c06c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800c032:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c036:	429a      	cmp	r2, r3
 800c038:	d109      	bne.n	800c04e <mg_json_get+0x64e>
 800c03a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	db06      	blt.n	800c04e <mg_json_get+0x64e>
 800c040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c042:	3301      	adds	r3, #1
 800c044:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c046:	e002      	b.n	800c04e <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 800c048:	f06f 0301 	mvn.w	r3, #1
 800c04c:	e00e      	b.n	800c06c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800c04e:	bf00      	nop
        break;
 800c050:	e002      	b.n	800c058 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800c052:	bf00      	nop
 800c054:	e000      	b.n	800c058 <mg_json_get+0x658>
        break;
 800c056:	bf00      	nop
  for (i = 0; i < len; i++) {
 800c058:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c05a:	3301      	adds	r3, #1
 800c05c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c05e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c060:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c062:	429a      	cmp	r2, r3
 800c064:	f6ff acfc 	blt.w	800ba60 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 800c068:	f06f 0302 	mvn.w	r3, #2
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	376c      	adds	r7, #108	@ 0x6c
 800c070:	46bd      	mov	sp, r7
 800c072:	bd90      	pop	{r4, r7, pc}

0800c074 <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	1d38      	adds	r0, r7, #4
 800c07e:	e880 0006 	stmia.w	r0, {r1, r2}
 800c082:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 800c084:	2300      	movs	r3, #0
 800c086:	613b      	str	r3, [r7, #16]
 800c088:	f107 0310 	add.w	r3, r7, #16
 800c08c:	683a      	ldr	r2, [r7, #0]
 800c08e:	1d39      	adds	r1, r7, #4
 800c090:	c903      	ldmia	r1, {r0, r1}
 800c092:	f7ff fcb5 	bl	800ba00 <mg_json_get>
 800c096:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	db03      	blt.n	800c0a6 <mg_json_get_tok+0x32>
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	4413      	add	r3, r2
 800c0a4:	e000      	b.n	800c0a8 <mg_json_get_tok+0x34>
 800c0a6:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 800c0a8:	693a      	ldr	r2, [r7, #16]
 800c0aa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	f007 ffac 	bl	801400e <mg_str_n>
}
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	3718      	adds	r7, #24
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800c0be:	b590      	push	{r4, r7, lr}
 800c0c0:	b089      	sub	sp, #36	@ 0x24
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	f107 0408 	add.w	r4, r7, #8
 800c0c8:	e884 0003 	stmia.w	r4, {r0, r1}
 800c0cc:	607a      	str	r2, [r7, #4]
 800c0ce:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800c0d4:	f107 0314 	add.w	r3, r7, #20
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	f107 0108 	add.w	r1, r7, #8
 800c0de:	c903      	ldmia	r1, {r0, r1}
 800c0e0:	f7ff fc8e 	bl	800ba00 <mg_json_get>
 800c0e4:	61b8      	str	r0, [r7, #24]
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	db23      	blt.n	800c134 <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800c0f4:	2b2d      	cmp	r3, #45	@ 0x2d
 800c0f6:	d00b      	beq.n	800c110 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	2b2f      	cmp	r3, #47	@ 0x2f
 800c102:	d917      	bls.n	800c134 <mg_json_get_num+0x76>
 800c104:	68ba      	ldr	r2, [r7, #8]
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	4413      	add	r3, r2
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b39      	cmp	r3, #57	@ 0x39
 800c10e:	d811      	bhi.n	800c134 <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d00c      	beq.n	800c130 <mg_json_get_num+0x72>
 800c116:	68ba      	ldr	r2, [r7, #8]
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	4413      	add	r3, r2
 800c11c:	6979      	ldr	r1, [r7, #20]
 800c11e:	2200      	movs	r2, #0
 800c120:	4618      	mov	r0, r3
 800c122:	f7ff fb1d 	bl	800b760 <mg_atod>
 800c126:	eeb0 7b40 	vmov.f64	d7, d0
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 800c130:	2301      	movs	r3, #1
 800c132:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	2b00      	cmp	r3, #0
 800c138:	bf14      	ite	ne
 800c13a:	2301      	movne	r3, #1
 800c13c:	2300      	moveq	r3, #0
 800c13e:	b2db      	uxtb	r3, r3
}
 800c140:	4618      	mov	r0, r3
 800c142:	3724      	adds	r7, #36	@ 0x24
 800c144:	46bd      	mov	sp, r7
 800c146:	bd90      	pop	{r4, r7, pc}

0800c148 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 800c148:	b590      	push	{r4, r7, lr}
 800c14a:	b087      	sub	sp, #28
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	f107 0408 	add.w	r4, r7, #8
 800c152:	e884 0003 	stmia.w	r4, {r0, r1}
 800c156:	607a      	str	r2, [r7, #4]
 800c158:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 800c15a:	2300      	movs	r3, #0
 800c15c:	617b      	str	r3, [r7, #20]
 800c15e:	2300      	movs	r3, #0
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	f107 0108 	add.w	r1, r7, #8
 800c166:	c903      	ldmia	r1, {r0, r1}
 800c168:	f7ff fc4a 	bl	800ba00 <mg_json_get>
 800c16c:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	2b00      	cmp	r3, #0
 800c172:	db1b      	blt.n	800c1ac <mg_json_get_bool+0x64>
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	4413      	add	r3, r2
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	2b74      	cmp	r3, #116	@ 0x74
 800c17e:	d005      	beq.n	800c18c <mg_json_get_bool+0x44>
 800c180:	68ba      	ldr	r2, [r7, #8]
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	4413      	add	r3, r2
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	2b66      	cmp	r3, #102	@ 0x66
 800c18a:	d10f      	bne.n	800c1ac <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00a      	beq.n	800c1a8 <mg_json_get_bool+0x60>
 800c192:	68ba      	ldr	r2, [r7, #8]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	4413      	add	r3, r2
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	2b74      	cmp	r3, #116	@ 0x74
 800c19c:	bf0c      	ite	eq
 800c19e:	2301      	moveq	r3, #1
 800c1a0:	2300      	movne	r3, #0
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	701a      	strb	r2, [r3, #0]
    found = 1;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	617b      	str	r3, [r7, #20]
  }
  return found;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	bf14      	ite	ne
 800c1b2:	2301      	movne	r3, #1
 800c1b4:	2300      	moveq	r3, #0
 800c1b6:	b2db      	uxtb	r3, r3
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	371c      	adds	r7, #28
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd90      	pop	{r4, r7, pc}

0800c1c0 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 800c1c0:	b590      	push	{r4, r7, lr}
 800c1c2:	b08d      	sub	sp, #52	@ 0x34
 800c1c4:	af02      	add	r7, sp, #8
 800c1c6:	f107 0408 	add.w	r4, r7, #8
 800c1ca:	e884 0003 	stmia.w	r4, {r0, r1}
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	623b      	str	r3, [r7, #32]
 800c1da:	e064      	b.n	800c2a6 <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 800c1dc:	68ba      	ldr	r2, [r7, #8]
 800c1de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e0:	4413      	add	r3, r2
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1e6:	d12c      	bne.n	800c242 <mg_json_unescape+0x82>
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ea:	1d5a      	adds	r2, r3, #5
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	d227      	bcs.n	800c242 <mg_json_unescape+0x82>
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	4413      	add	r3, r2
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	2b75      	cmp	r3, #117	@ 0x75
 800c1fe:	d120      	bne.n	800c242 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c204:	3302      	adds	r3, #2
 800c206:	18d1      	adds	r1, r2, r3
 800c208:	f107 0314 	add.w	r3, r7, #20
 800c20c:	2204      	movs	r2, #4
 800c20e:	4618      	mov	r0, r3
 800c210:	f007 fefd 	bl	801400e <mg_str_n>
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	6a3b      	ldr	r3, [r7, #32]
 800c218:	4413      	add	r3, r2
 800c21a:	2201      	movs	r2, #1
 800c21c:	9200      	str	r2, [sp, #0]
 800c21e:	2210      	movs	r2, #16
 800c220:	f107 0114 	add.w	r1, r7, #20
 800c224:	c903      	ldmia	r1, {r0, r1}
 800c226:	f008 f930 	bl	801448a <mg_str_to_num>
 800c22a:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 800c22c:	f083 0301 	eor.w	r3, r3, #1
 800c230:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <mg_json_unescape+0x7a>
        return false;
 800c236:	2300      	movs	r3, #0
 800c238:	e04c      	b.n	800c2d4 <mg_json_unescape+0x114>
      i += 5;
 800c23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c23c:	3305      	adds	r3, #5
 800c23e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c240:	e02b      	b.n	800c29a <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800c242:	68ba      	ldr	r2, [r7, #8]
 800c244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c246:	4413      	add	r3, r2
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	2b5c      	cmp	r3, #92	@ 0x5c
 800c24c:	d11d      	bne.n	800c28a <mg_json_unescape+0xca>
 800c24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	429a      	cmp	r2, r3
 800c256:	d218      	bcs.n	800c28a <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25c:	3301      	adds	r3, #1
 800c25e:	4413      	add	r3, r2
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2100      	movs	r1, #0
 800c264:	4618      	mov	r0, r3
 800c266:	f7ff fa09 	bl	800b67c <json_esc>
 800c26a:	4603      	mov	r3, r0
 800c26c:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 800c26e:	7ffb      	ldrb	r3, [r7, #31]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d101      	bne.n	800c278 <mg_json_unescape+0xb8>
 800c274:	2300      	movs	r3, #0
 800c276:	e02d      	b.n	800c2d4 <mg_json_unescape+0x114>
      to[j] = c;
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	6a3b      	ldr	r3, [r7, #32]
 800c27c:	4413      	add	r3, r2
 800c27e:	7ffa      	ldrb	r2, [r7, #31]
 800c280:	701a      	strb	r2, [r3, #0]
      i++;
 800c282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c284:	3301      	adds	r3, #1
 800c286:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800c288:	e007      	b.n	800c29a <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28e:	441a      	add	r2, r3
 800c290:	6879      	ldr	r1, [r7, #4]
 800c292:	6a3b      	ldr	r3, [r7, #32]
 800c294:	440b      	add	r3, r1
 800c296:	7812      	ldrb	r2, [r2, #0]
 800c298:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800c29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c29c:	3301      	adds	r3, #1
 800c29e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2a0:	6a3b      	ldr	r3, [r7, #32]
 800c2a2:	3301      	adds	r3, #1
 800c2a4:	623b      	str	r3, [r7, #32]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d203      	bcs.n	800c2b6 <mg_json_unescape+0xf6>
 800c2ae:	6a3a      	ldr	r2, [r7, #32]
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d392      	bcc.n	800c1dc <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 800c2b6:	6a3a      	ldr	r2, [r7, #32]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d301      	bcc.n	800c2c2 <mg_json_unescape+0x102>
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e008      	b.n	800c2d4 <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d004      	beq.n	800c2d2 <mg_json_unescape+0x112>
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	6a3b      	ldr	r3, [r7, #32]
 800c2cc:	4413      	add	r3, r2
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	701a      	strb	r2, [r3, #0]
  return true;
 800c2d2:	2301      	movs	r3, #1
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	372c      	adds	r7, #44	@ 0x2c
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd90      	pop	{r4, r7, pc}

0800c2dc <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b082      	sub	sp, #8
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800c2e6:	4b05      	ldr	r3, [pc, #20]	@ (800c2fc <logc+0x20>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a05      	ldr	r2, [pc, #20]	@ (800c300 <logc+0x24>)
 800c2ec:	6811      	ldr	r1, [r2, #0]
 800c2ee:	79fa      	ldrb	r2, [r7, #7]
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4798      	blx	r3
}
 800c2f4:	bf00      	nop
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	2400025c 	.word	0x2400025c
 800c300:	24001090 	.word	0x24001090

0800c304 <logs>:

static void logs(const char *buf, size_t len) {
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800c30e:	2300      	movs	r3, #0
 800c310:	60fb      	str	r3, [r7, #12]
 800c312:	e009      	b.n	800c328 <logs+0x24>
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	4413      	add	r3, r2
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7ff ffdd 	bl	800c2dc <logc>
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3301      	adds	r3, #1
 800c326:	60fb      	str	r3, [r7, #12]
 800c328:	68fa      	ldr	r2, [r7, #12]
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d3f1      	bcc.n	800c314 <logs+0x10>
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}
	...

0800c33c <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 800c33c:	b590      	push	{r4, r7, lr}
 800c33e:	b099      	sub	sp, #100	@ 0x64
 800c340:	af06      	add	r7, sp, #24
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
 800c348:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 800c34a:	212f      	movs	r1, #47	@ 0x2f
 800c34c:	68b8      	ldr	r0, [r7, #8]
 800c34e:	f017 f91c 	bl	802358a <strrchr>
 800c352:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 800c354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c356:	2b00      	cmp	r3, #0
 800c358:	d104      	bne.n	800c364 <mg_log_prefix+0x28>
 800c35a:	215c      	movs	r1, #92	@ 0x5c
 800c35c:	68b8      	ldr	r0, [r7, #8]
 800c35e:	f017 f914 	bl	802358a <strrchr>
 800c362:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800c364:	f7f4 fa00 	bl	8000768 <mg_millis>
 800c368:	4602      	mov	r2, r0
 800c36a:	460b      	mov	r3, r1
 800c36c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c36e:	2900      	cmp	r1, #0
 800c370:	d002      	beq.n	800c378 <mg_log_prefix+0x3c>
 800c372:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c374:	3101      	adds	r1, #1
 800c376:	e000      	b.n	800c37a <mg_log_prefix+0x3e>
 800c378:	68b9      	ldr	r1, [r7, #8]
 800c37a:	f107 0414 	add.w	r4, r7, #20
 800c37e:	6838      	ldr	r0, [r7, #0]
 800c380:	9005      	str	r0, [sp, #20]
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	9004      	str	r0, [sp, #16]
 800c386:	9103      	str	r1, [sp, #12]
 800c388:	68f9      	ldr	r1, [r7, #12]
 800c38a:	9102      	str	r1, [sp, #8]
 800c38c:	e9cd 2300 	strd	r2, r3, [sp]
 800c390:	4a11      	ldr	r2, [pc, #68]	@ (800c3d8 <mg_log_prefix+0x9c>)
 800c392:	2129      	movs	r1, #41	@ 0x29
 800c394:	4620      	mov	r0, r4
 800c396:	f004 fa57 	bl	8010848 <mg_snprintf>
 800c39a:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800c39c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c39e:	2b27      	cmp	r3, #39	@ 0x27
 800c3a0:	d90a      	bls.n	800c3b8 <mg_log_prefix+0x7c>
 800c3a2:	2327      	movs	r3, #39	@ 0x27
 800c3a4:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 800c3a6:	e007      	b.n	800c3b8 <mg_log_prefix+0x7c>
 800c3a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3aa:	1c5a      	adds	r2, r3, #1
 800c3ac:	643a      	str	r2, [r7, #64]	@ 0x40
 800c3ae:	3348      	adds	r3, #72	@ 0x48
 800c3b0:	443b      	add	r3, r7
 800c3b2:	2220      	movs	r2, #32
 800c3b4:	f803 2c34 	strb.w	r2, [r3, #-52]
 800c3b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3ba:	2b28      	cmp	r3, #40	@ 0x28
 800c3bc:	d9f4      	bls.n	800c3a8 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 800c3be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3c0:	1e5a      	subs	r2, r3, #1
 800c3c2:	f107 0314 	add.w	r3, r7, #20
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7ff ff9b 	bl	800c304 <logs>
}
 800c3ce:	bf00      	nop
 800c3d0:	374c      	adds	r7, #76	@ 0x4c
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd90      	pop	{r4, r7, pc}
 800c3d6:	bf00      	nop
 800c3d8:	080250c0 	.word	0x080250c0

0800c3dc <mg_log>:

void mg_log(const char *fmt, ...) {
 800c3dc:	b40f      	push	{r0, r1, r2, r3}
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b082      	sub	sp, #8
 800c3e2:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800c3e4:	f107 0314 	add.w	r3, r7, #20
 800c3e8:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800c3ea:	4b09      	ldr	r3, [pc, #36]	@ (800c410 <mg_log+0x34>)
 800c3ec:	6818      	ldr	r0, [r3, #0]
 800c3ee:	4b09      	ldr	r3, [pc, #36]	@ (800c414 <mg_log+0x38>)
 800c3f0:	6819      	ldr	r1, [r3, #0]
 800c3f2:	1d3b      	adds	r3, r7, #4
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	f7fb f923 	bl	8007640 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800c3fa:	2102      	movs	r1, #2
 800c3fc:	4806      	ldr	r0, [pc, #24]	@ (800c418 <mg_log+0x3c>)
 800c3fe:	f7ff ff81 	bl	800c304 <logs>
}
 800c402:	bf00      	nop
 800c404:	3708      	adds	r7, #8
 800c406:	46bd      	mov	sp, r7
 800c408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c40c:	b004      	add	sp, #16
 800c40e:	4770      	bx	lr
 800c410:	2400025c 	.word	0x2400025c
 800c414:	24001090 	.word	0x24001090
 800c418:	08024530 	.word	0x08024530

0800c41c <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b09      	cmp	r3, #9
 800c428:	d804      	bhi.n	800c434 <nibble+0x18>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	3330      	adds	r3, #48	@ 0x30
 800c430:	b2db      	uxtb	r3, r3
 800c432:	e003      	b.n	800c43c <nibble+0x20>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	b2db      	uxtb	r3, r3
 800c438:	3357      	adds	r3, #87	@ 0x57
 800c43a:	b2db      	uxtb	r3, r3
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08a      	sub	sp, #40	@ 0x28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800c45c:	2300      	movs	r3, #0
 800c45e:	623b      	str	r3, [r7, #32]
 800c460:	e07b      	b.n	800c55a <mg_hexdump+0x112>
    if ((i % 16) == 0) {
 800c462:	6a3b      	ldr	r3, [r7, #32]
 800c464:	f003 030f 	and.w	r3, r3, #15
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d13b      	bne.n	800c4e4 <mg_hexdump+0x9c>
      // Print buffered ascii chars
      if (i > 0)
 800c46c:	6a3b      	ldr	r3, [r7, #32]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d010      	beq.n	800c494 <mg_hexdump+0x4c>
        logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2), alen = 0;
 800c472:	2102      	movs	r1, #2
 800c474:	484e      	ldr	r0, [pc, #312]	@ (800c5b0 <mg_hexdump+0x168>)
 800c476:	f7ff ff45 	bl	800c304 <logs>
 800c47a:	f107 030c 	add.w	r3, r7, #12
 800c47e:	2110      	movs	r1, #16
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff ff3f 	bl	800c304 <logs>
 800c486:	2102      	movs	r1, #2
 800c488:	484a      	ldr	r0, [pc, #296]	@ (800c5b4 <mg_hexdump+0x16c>)
 800c48a:	f7ff ff3b 	bl	800c304 <logs>
 800c48e:	2300      	movs	r3, #0
 800c490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	0b1b      	lsrs	r3, r3, #12
 800c498:	f003 030f 	and.w	r3, r3, #15
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7ff ffbd 	bl	800c41c <nibble>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f7ff ff19 	bl	800c2dc <logc>
 800c4aa:	6a3b      	ldr	r3, [r7, #32]
 800c4ac:	0a1b      	lsrs	r3, r3, #8
 800c4ae:	f003 030f 	and.w	r3, r3, #15
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f7ff ffb2 	bl	800c41c <nibble>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7ff ff0e 	bl	800c2dc <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	091b      	lsrs	r3, r3, #4
 800c4c4:	f003 030f 	and.w	r3, r3, #15
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7ff ffa7 	bl	800c41c <nibble>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff ff03 	bl	800c2dc <logc>
 800c4d6:	2030      	movs	r0, #48	@ 0x30
 800c4d8:	f7ff ff00 	bl	800c2dc <logc>
 800c4dc:	2103      	movs	r1, #3
 800c4de:	4836      	ldr	r0, [pc, #216]	@ (800c5b8 <mg_hexdump+0x170>)
 800c4e0:	f7ff ff10 	bl	800c304 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800c4e4:	69fa      	ldr	r2, [r7, #28]
 800c4e6:	6a3b      	ldr	r3, [r7, #32]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	781b      	ldrb	r3, [r3, #0]
 800c4ec:	091b      	lsrs	r3, r3, #4
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	f7ff ff93 	bl	800c41c <nibble>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7ff feef 	bl	800c2dc <logc>
 800c4fe:	69fa      	ldr	r2, [r7, #28]
 800c500:	6a3b      	ldr	r3, [r7, #32]
 800c502:	4413      	add	r3, r2
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	f003 030f 	and.w	r3, r3, #15
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7ff ff86 	bl	800c41c <nibble>
 800c510:	4603      	mov	r3, r0
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff fee2 	bl	800c2dc <logc>
    logc(' ');                                         // Space after hex number
 800c518:	2020      	movs	r0, #32
 800c51a:	f7ff fedf 	bl	800c2dc <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800c51e:	69fa      	ldr	r2, [r7, #28]
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	4413      	add	r3, r2
 800c524:	781b      	ldrb	r3, [r3, #0]
 800c526:	2b1f      	cmp	r3, #31
 800c528:	d90a      	bls.n	800c540 <mg_hexdump+0xf8>
 800c52a:	69fa      	ldr	r2, [r7, #28]
 800c52c:	6a3b      	ldr	r3, [r7, #32]
 800c52e:	4413      	add	r3, r2
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	2b7e      	cmp	r3, #126	@ 0x7e
 800c534:	d804      	bhi.n	800c540 <mg_hexdump+0xf8>
 800c536:	69fa      	ldr	r2, [r7, #28]
 800c538:	6a3b      	ldr	r3, [r7, #32]
 800c53a:	4413      	add	r3, r2
 800c53c:	781a      	ldrb	r2, [r3, #0]
 800c53e:	e000      	b.n	800c542 <mg_hexdump+0xfa>
 800c540:	222e      	movs	r2, #46	@ 0x2e
 800c542:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c546:	1c59      	adds	r1, r3, #1
 800c548:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800c54c:	3328      	adds	r3, #40	@ 0x28
 800c54e:	443b      	add	r3, r7
 800c550:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	3301      	adds	r3, #1
 800c558:	623b      	str	r3, [r7, #32]
 800c55a:	6a3a      	ldr	r2, [r7, #32]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	429a      	cmp	r2, r3
 800c560:	f4ff af7f 	bcc.w	800c462 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800c564:	e00d      	b.n	800c582 <mg_hexdump+0x13a>
 800c566:	2103      	movs	r1, #3
 800c568:	4813      	ldr	r0, [pc, #76]	@ (800c5b8 <mg_hexdump+0x170>)
 800c56a:	f7ff fecb 	bl	800c304 <logs>
 800c56e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800c578:	3328      	adds	r3, #40	@ 0x28
 800c57a:	443b      	add	r3, r7
 800c57c:	2220      	movs	r2, #32
 800c57e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800c582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c586:	2b0f      	cmp	r3, #15
 800c588:	d9ed      	bls.n	800c566 <mg_hexdump+0x11e>
  logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2);
 800c58a:	2102      	movs	r1, #2
 800c58c:	4808      	ldr	r0, [pc, #32]	@ (800c5b0 <mg_hexdump+0x168>)
 800c58e:	f7ff feb9 	bl	800c304 <logs>
 800c592:	f107 030c 	add.w	r3, r7, #12
 800c596:	2110      	movs	r1, #16
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff feb3 	bl	800c304 <logs>
 800c59e:	2102      	movs	r1, #2
 800c5a0:	4804      	ldr	r0, [pc, #16]	@ (800c5b4 <mg_hexdump+0x16c>)
 800c5a2:	f7ff feaf 	bl	800c304 <logs>
}
 800c5a6:	bf00      	nop
 800c5a8:	3728      	adds	r7, #40	@ 0x28
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	080250d4 	.word	0x080250d4
 800c5b4:	08024530 	.word	0x08024530
 800c5b8:	080250d8 	.word	0x080250d8

0800c5bc <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5cc:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	4805      	ldr	r0, [pc, #20]	@ (800c5f0 <mg_vprintf+0x34>)
 800c5da:	f7fb f831 	bl	8007640 <mg_vxprintf>
  return c->send.len - old;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	1ad3      	subs	r3, r2, r3
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3718      	adds	r7, #24
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	080107d9 	.word	0x080107d9

0800c5f4 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 800c5f4:	b40e      	push	{r1, r2, r3}
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b085      	sub	sp, #20
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800c602:	f107 0320 	add.w	r3, r7, #32
 800c606:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800c608:	f107 0308 	add.w	r3, r7, #8
 800c60c:	461a      	mov	r2, r3
 800c60e:	69f9      	ldr	r1, [r7, #28]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff ffd3 	bl	800c5bc <mg_vprintf>
 800c616:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800c618:	68fb      	ldr	r3, [r7, #12]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3714      	adds	r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c624:	b003      	add	sp, #12
 800c626:	4770      	bx	lr

0800c628 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800c628:	b580      	push	{r7, lr}
 800c62a:	b088      	sub	sp, #32
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	f107 0308 	add.w	r3, r7, #8
 800c632:	e883 0003 	stmia.w	r3, {r0, r1}
 800c636:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800c638:	4811      	ldr	r0, [pc, #68]	@ (800c680 <mg_atonl+0x58>)
 800c63a:	f012 ff7c 	bl	801f536 <mg_ntohl>
 800c63e:	4603      	mov	r3, r0
 800c640:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 800c642:	f107 0318 	add.w	r3, r7, #24
 800c646:	490f      	ldr	r1, [pc, #60]	@ (800c684 <mg_atonl+0x5c>)
 800c648:	4618      	mov	r0, r3
 800c64a:	f007 fcc3 	bl	8013fd4 <mg_str_s>
 800c64e:	f107 0318 	add.w	r3, r7, #24
 800c652:	cb0c      	ldmia	r3, {r2, r3}
 800c654:	f107 0108 	add.w	r1, r7, #8
 800c658:	c903      	ldmia	r1, {r0, r1}
 800c65a:	f007 fd7e 	bl	801415a <mg_strcasecmp>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b00      	cmp	r3, #0
 800c662:	d001      	beq.n	800c668 <mg_atonl+0x40>
 800c664:	2300      	movs	r3, #0
 800c666:	e006      	b.n	800c676 <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	74da      	strb	r2, [r3, #19]
  return true;
 800c674:	2301      	movs	r3, #1
}
 800c676:	4618      	mov	r0, r3
 800c678:	3720      	adds	r7, #32
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	7f000001 	.word	0x7f000001
 800c684:	0802517c 	.word	0x0802517c

0800c688 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	f107 0308 	add.w	r3, r7, #8
 800c692:	e883 0003 	stmia.w	r3, {r0, r1}
 800c696:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d001      	beq.n	800c6a2 <mg_atone+0x1a>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	e009      	b.n	800c6b6 <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2210      	movs	r2, #16
 800c6a6:	2100      	movs	r1, #0
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f016 ff34 	bl	8023516 <memset>
  addr->is_ip6 = false;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	74da      	strb	r2, [r3, #19]
  return true;
 800c6b4:	2301      	movs	r3, #1
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800c6be:	b480      	push	{r7}
 800c6c0:	b089      	sub	sp, #36	@ 0x24
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	f107 0308 	add.w	r3, r7, #8
 800c6c8:	e883 0003 	stmia.w	r3, {r0, r1}
 800c6cc:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	61fb      	str	r3, [r7, #28]
 800c6da:	e049      	b.n	800c770 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	4413      	add	r3, r2
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c6e6:	d925      	bls.n	800c734 <mg_aton4+0x76>
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	2b39      	cmp	r3, #57	@ 0x39
 800c6f2:	d81f      	bhi.n	800c734 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 800c6f4:	f107 0210 	add.w	r2, r7, #16
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	4613      	mov	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4413      	add	r3, r2
 800c706:	005b      	lsls	r3, r3, #1
 800c708:	4619      	mov	r1, r3
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	4413      	add	r3, r2
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	3b30      	subs	r3, #48	@ 0x30
 800c714:	440b      	add	r3, r1
 800c716:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2bff      	cmp	r3, #255	@ 0xff
 800c71c:	dd01      	ble.n	800c722 <mg_aton4+0x64>
 800c71e:	2300      	movs	r3, #0
 800c720:	e03d      	b.n	800c79e <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	b2d9      	uxtb	r1, r3
 800c726:	f107 0210 	add.w	r2, r7, #16
 800c72a:	69bb      	ldr	r3, [r7, #24]
 800c72c:	4413      	add	r3, r2
 800c72e:	460a      	mov	r2, r1
 800c730:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800c732:	e01a      	b.n	800c76a <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 800c734:	68ba      	ldr	r2, [r7, #8]
 800c736:	69fb      	ldr	r3, [r7, #28]
 800c738:	4413      	add	r3, r2
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c73e:	d112      	bne.n	800c766 <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	2b02      	cmp	r3, #2
 800c744:	d809      	bhi.n	800c75a <mg_aton4+0x9c>
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d006      	beq.n	800c75a <mg_aton4+0x9c>
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	3b01      	subs	r3, #1
 800c752:	4413      	add	r3, r2
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	2b2e      	cmp	r3, #46	@ 0x2e
 800c758:	d101      	bne.n	800c75e <mg_aton4+0xa0>
 800c75a:	2300      	movs	r3, #0
 800c75c:	e01f      	b.n	800c79e <mg_aton4+0xe0>
      num_dots++;
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	3301      	adds	r3, #1
 800c762:	61bb      	str	r3, [r7, #24]
 800c764:	e001      	b.n	800c76a <mg_aton4+0xac>
    } else {
      return false;
 800c766:	2300      	movs	r3, #0
 800c768:	e019      	b.n	800c79e <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	3301      	adds	r3, #1
 800c76e:	61fb      	str	r3, [r7, #28]
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	69fa      	ldr	r2, [r7, #28]
 800c774:	429a      	cmp	r2, r3
 800c776:	d3b1      	bcc.n	800c6dc <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 800c778:	69bb      	ldr	r3, [r7, #24]
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d106      	bne.n	800c78c <mg_aton4+0xce>
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	69fb      	ldr	r3, [r7, #28]
 800c782:	3b01      	subs	r3, #1
 800c784:	4413      	add	r3, r2
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	2b2e      	cmp	r3, #46	@ 0x2e
 800c78a:	d101      	bne.n	800c790 <mg_aton4+0xd2>
 800c78c:	2300      	movs	r3, #0
 800c78e:	e006      	b.n	800c79e <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	693a      	ldr	r2, [r7, #16]
 800c794:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2200      	movs	r2, #0
 800c79a:	74da      	strb	r2, [r3, #19]
  return true;
 800c79c:	2301      	movs	r3, #1
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3724      	adds	r7, #36	@ 0x24
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b088      	sub	sp, #32
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	f107 0308 	add.w	r3, r7, #8
 800c7b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800c7b8:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2b0d      	cmp	r3, #13
 800c7be:	d801      	bhi.n	800c7c4 <mg_v4mapped+0x1a>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	e056      	b.n	800c872 <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7ca:	d109      	bne.n	800c7e0 <mg_v4mapped+0x36>
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7d4:	d104      	bne.n	800c7e0 <mg_v4mapped+0x36>
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	3306      	adds	r3, #6
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b3a      	cmp	r3, #58	@ 0x3a
 800c7de:	d001      	beq.n	800c7e4 <mg_v4mapped+0x3a>
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	e046      	b.n	800c872 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	61fb      	str	r3, [r7, #28]
 800c7e8:	e010      	b.n	800c80c <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b66      	cmp	r3, #102	@ 0x66
 800c7f4:	d007      	beq.n	800c806 <mg_v4mapped+0x5c>
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	69fb      	ldr	r3, [r7, #28]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	2b46      	cmp	r3, #70	@ 0x46
 800c800:	d001      	beq.n	800c806 <mg_v4mapped+0x5c>
 800c802:	2300      	movs	r3, #0
 800c804:	e035      	b.n	800c872 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	3301      	adds	r3, #1
 800c80a:	61fb      	str	r3, [r7, #28]
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	2b05      	cmp	r3, #5
 800c810:	ddeb      	ble.n	800c7ea <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	1dd9      	adds	r1, r3, #7
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	1fda      	subs	r2, r3, #7
 800c81a:	f107 0314 	add.w	r3, r7, #20
 800c81e:	4618      	mov	r0, r3
 800c820:	f007 fbf5 	bl	801400e <mg_str_n>
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	f107 0314 	add.w	r3, r7, #20
 800c82a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c82e:	f7ff ff46 	bl	800c6be <mg_aton4>
 800c832:	4603      	mov	r3, r0
 800c834:	f083 0301 	eor.w	r3, r3, #1
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <mg_v4mapped+0x98>
 800c83e:	2300      	movs	r3, #0
 800c840:	e017      	b.n	800c872 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2210      	movs	r2, #16
 800c84c:	2100      	movs	r1, #0
 800c84e:	4618      	mov	r0, r3
 800c850:	f016 fe61 	bl	8023516 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	22ff      	movs	r2, #255	@ 0xff
 800c858:	72da      	strb	r2, [r3, #11]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	7ada      	ldrb	r2, [r3, #11]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	330c      	adds	r3, #12
 800c866:	693a      	ldr	r2, [r7, #16]
 800c868:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2201      	movs	r2, #1
 800c86e:	74da      	strb	r2, [r3, #19]
  return true;
 800c870:	2301      	movs	r3, #1
}
 800c872:	4618      	mov	r0, r3
 800c874:	3720      	adds	r7, #32
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b090      	sub	sp, #64	@ 0x40
 800c87e:	af02      	add	r7, sp, #8
 800c880:	f107 0308 	add.w	r3, r7, #8
 800c884:	e883 0003 	stmia.w	r3, {r0, r1}
 800c888:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800c88a:	2300      	movs	r3, #0
 800c88c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c88e:	2300      	movs	r3, #0
 800c890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c892:	232a      	movs	r3, #42	@ 0x2a
 800c894:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2b02      	cmp	r3, #2
 800c8a0:	d909      	bls.n	800c8b6 <mg_aton6+0x3c>
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	2b5b      	cmp	r3, #91	@ 0x5b
 800c8a8:	d105      	bne.n	800c8b6 <mg_aton6+0x3c>
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	60bb      	str	r3, [r7, #8]
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	3b02      	subs	r3, #2
 800c8b4:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 800c8b6:	687a      	ldr	r2, [r7, #4]
 800c8b8:	f107 0308 	add.w	r3, r7, #8
 800c8bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c8c0:	f7ff ff73 	bl	800c7aa <mg_v4mapped>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <mg_aton6+0x54>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	e0e1      	b.n	800ca92 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8d2:	e0b0      	b.n	800ca36 <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d8:	4413      	add	r3, r2
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c8de:	d905      	bls.n	800c8ec <mg_aton6+0x72>
 800c8e0:	68ba      	ldr	r2, [r7, #8]
 800c8e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e4:	4413      	add	r3, r2
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	2b39      	cmp	r3, #57	@ 0x39
 800c8ea:	d917      	bls.n	800c91c <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f0:	4413      	add	r3, r2
 800c8f2:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800c8f4:	2b60      	cmp	r3, #96	@ 0x60
 800c8f6:	d905      	bls.n	800c904 <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800c8f8:	68ba      	ldr	r2, [r7, #8]
 800c8fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8fc:	4413      	add	r3, r2
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b66      	cmp	r3, #102	@ 0x66
 800c902:	d90b      	bls.n	800c91c <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c908:	4413      	add	r3, r2
 800c90a:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800c90c:	2b40      	cmp	r3, #64	@ 0x40
 800c90e:	d933      	bls.n	800c978 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c914:	4413      	add	r3, r2
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b46      	cmp	r3, #70	@ 0x46
 800c91a:	d82d      	bhi.n	800c978 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 800c91c:	2300      	movs	r3, #0
 800c91e:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 800c920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c922:	3303      	adds	r3, #3
 800c924:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c926:	429a      	cmp	r2, r3
 800c928:	d901      	bls.n	800c92e <mg_aton6+0xb4>
 800c92a:	2300      	movs	r3, #0
 800c92c:	e0b1      	b.n	800ca92 <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c932:	18d1      	adds	r1, r2, r3
 800c934:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	f107 0318 	add.w	r3, r7, #24
 800c940:	4618      	mov	r0, r3
 800c942:	f007 fb64 	bl	801400e <mg_str_n>
 800c946:	f107 0314 	add.w	r3, r7, #20
 800c94a:	2204      	movs	r2, #4
 800c94c:	9200      	str	r2, [sp, #0]
 800c94e:	2210      	movs	r2, #16
 800c950:	f107 0118 	add.w	r1, r7, #24
 800c954:	c903      	ldmia	r1, {r0, r1}
 800c956:	f007 fd98 	bl	801448a <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	0a1b      	lsrs	r3, r3, #8
 800c95e:	b2d9      	uxtb	r1, r3
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c964:	4413      	add	r3, r2
 800c966:	460a      	mov	r2, r1
 800c968:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96e:	3301      	adds	r3, #1
 800c970:	b2d1      	uxtb	r1, r2
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800c976:	e05b      	b.n	800ca30 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c97c:	4413      	add	r3, r2
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	2b3a      	cmp	r3, #58	@ 0x3a
 800c982:	d134      	bne.n	800c9ee <mg_aton6+0x174>
      j = i + 1;
 800c984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c986:	3301      	adds	r3, #1
 800c988:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 800c98a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d014      	beq.n	800c9ba <mg_aton6+0x140>
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c994:	3b01      	subs	r3, #1
 800c996:	4413      	add	r3, r2
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b3a      	cmp	r3, #58	@ 0x3a
 800c99c:	d10d      	bne.n	800c9ba <mg_aton6+0x140>
        dc = n;  // Double colon
 800c99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9a0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800c9a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d90f      	bls.n	800c9c8 <mg_aton6+0x14e>
 800c9a8:	68ba      	ldr	r2, [r7, #8]
 800c9aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ac:	3b02      	subs	r3, #2
 800c9ae:	4413      	add	r3, r2
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	2b3a      	cmp	r3, #58	@ 0x3a
 800c9b4:	d108      	bne.n	800c9c8 <mg_aton6+0x14e>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e06b      	b.n	800ca92 <mg_aton6+0x218>
      } else if (i > 0) {
 800c9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d004      	beq.n	800c9ca <mg_aton6+0x150>
        n += 2;
 800c9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9c2:	3302      	adds	r3, #2
 800c9c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c9c6:	e000      	b.n	800c9ca <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800c9c8:	bf00      	nop
      }
      if (n > 14) return false;
 800c9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9cc:	2b0e      	cmp	r3, #14
 800c9ce:	d901      	bls.n	800c9d4 <mg_aton6+0x15a>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e05e      	b.n	800ca92 <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 800c9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	2100      	movs	r1, #0
 800c9dc:	54d1      	strb	r1, [r2, r3]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	5cd1      	ldrb	r1, [r2, r3]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e6:	4413      	add	r3, r2
 800c9e8:	460a      	mov	r2, r1
 800c9ea:	701a      	strb	r2, [r3, #0]
 800c9ec:	e020      	b.n	800ca30 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f2:	4413      	add	r3, r2
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	2b25      	cmp	r3, #37	@ 0x25
 800c9f8:	d118      	bne.n	800ca2c <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9fe:	3301      	adds	r3, #1
 800ca00:	18d1      	adds	r1, r2, r3
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca06:	1ad3      	subs	r3, r2, r3
 800ca08:	1e5a      	subs	r2, r3, #1
 800ca0a:	f107 0320 	add.w	r3, r7, #32
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f007 fafd 	bl	801400e <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800ca18:	2201      	movs	r2, #1
 800ca1a:	9200      	str	r2, [sp, #0]
 800ca1c:	220a      	movs	r2, #10
 800ca1e:	f107 0120 	add.w	r1, r7, #32
 800ca22:	c903      	ldmia	r1, {r0, r1}
 800ca24:	f007 fd31 	bl	801448a <mg_str_to_num>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	e032      	b.n	800ca92 <mg_aton6+0x218>
    } else {
      return false;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	e030      	b.n	800ca92 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800ca30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca32:	3301      	adds	r3, #1
 800ca34:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	f4ff af4a 	bcc.w	800c8d4 <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 800ca40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca42:	2b0d      	cmp	r3, #13
 800ca44:	d804      	bhi.n	800ca50 <mg_aton6+0x1d6>
 800ca46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca4a:	d101      	bne.n	800ca50 <mg_aton6+0x1d6>
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	e020      	b.n	800ca92 <mg_aton6+0x218>
  if (n < 14) {
 800ca50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca52:	2b0d      	cmp	r3, #13
 800ca54:	d819      	bhi.n	800ca8a <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800ca56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	330e      	adds	r3, #14
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	18d0      	adds	r0, r2, r3
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca66:	18d1      	adds	r1, r2, r3
 800ca68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	3302      	adds	r3, #2
 800ca70:	461a      	mov	r2, r3
 800ca72:	f016 fd36 	bl	80234e2 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7a:	18d0      	adds	r0, r2, r3
 800ca7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca7e:	f1c3 030e 	rsb	r3, r3, #14
 800ca82:	461a      	mov	r2, r3
 800ca84:	2100      	movs	r1, #0
 800ca86:	f016 fd46 	bl	8023516 <memset>
  }

  addr->is_ip6 = true;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	74da      	strb	r2, [r3, #19]
  return true;
 800ca90:	2301      	movs	r3, #1
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3738      	adds	r7, #56	@ 0x38
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800ca9a:	b580      	push	{r7, lr}
 800ca9c:	b084      	sub	sp, #16
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	f107 0308 	add.w	r3, r7, #8
 800caa4:	e883 0003 	stmia.w	r3, {r0, r1}
 800caa8:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	f107 0308 	add.w	r3, r7, #8
 800cab0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cab4:	f7ff fde8 	bl	800c688 <mg_atone>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d11d      	bne.n	800cafa <mg_aton+0x60>
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	f107 0308 	add.w	r3, r7, #8
 800cac4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cac8:	f7ff fdae 	bl	800c628 <mg_atonl>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d113      	bne.n	800cafa <mg_aton+0x60>
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	f107 0308 	add.w	r3, r7, #8
 800cad8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cadc:	f7ff fdef 	bl	800c6be <mg_aton4>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d109      	bne.n	800cafa <mg_aton+0x60>
         mg_aton6(str, addr);
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	f107 0308 	add.w	r3, r7, #8
 800caec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800caf0:	f7ff fec3 	bl	800c87a <mg_aton6>
 800caf4:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d001      	beq.n	800cafe <mg_aton+0x64>
 800cafa:	2301      	movs	r3, #1
 800cafc:	e000      	b.n	800cb00 <mg_aton+0x66>
 800cafe:	2300      	movs	r3, #0
 800cb00:	f003 0301 	and.w	r3, r3, #1
 800cb04:	b2db      	uxtb	r3, r3
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3710      	adds	r7, #16
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b084      	sub	sp, #16
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb1a:	33b0      	adds	r3, #176	@ 0xb0
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	2001      	movs	r0, #1
 800cb20:	f016 fa24 	bl	8022f6c <calloc>
 800cb24:	4603      	mov	r3, r0
 800cb26:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d017      	beq.n	800cb5e <mg_alloc_conn+0x50>
    c->mgr = mgr;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cb3a:	675a      	str	r2, [r3, #116]	@ 0x74
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	645a      	str	r2, [r3, #68]	@ 0x44
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	69db      	ldr	r3, [r3, #28]
 800cb50:	1c5a      	adds	r2, r3, #1
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	61da      	str	r2, [r3, #28]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	69da      	ldr	r2, [r3, #28]
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
}
 800cb60:	4618      	mov	r0, r3
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7f9 fe90 	bl	8006896 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	e002      	b.n	800cb84 <mg_close_conn+0x1c>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d1f7      	bne.n	800cb7e <mg_close_conn+0x16>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	429a      	cmp	r2, r3
 800cba0:	d103      	bne.n	800cbaa <mg_close_conn+0x42>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d103      	bne.n	800cbbe <mg_close_conn+0x56>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	2200      	movs	r2, #0
 800cbbc:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	2109      	movs	r1, #9
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7f9 fe89 	bl	80068da <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 800cbc8:	4b17      	ldr	r3, [pc, #92]	@ (800cc28 <mg_close_conn+0xc0>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	dd0e      	ble.n	800cbee <mg_close_conn+0x86>
 800cbd0:	4b16      	ldr	r3, [pc, #88]	@ (800cc2c <mg_close_conn+0xc4>)
 800cbd2:	f640 72bb 	movw	r2, #4027	@ 0xfbb
 800cbd6:	4916      	ldr	r1, [pc, #88]	@ (800cc30 <mg_close_conn+0xc8>)
 800cbd8:	2003      	movs	r0, #3
 800cbda:	f7ff fbaf 	bl	800c33c <mg_log_prefix>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4812      	ldr	r0, [pc, #72]	@ (800cc34 <mg_close_conn+0xcc>)
 800cbea:	f7ff fbf7 	bl	800c3dc <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800cbee:	6878      	ldr	r0, [r7, #4]
 800cbf0:	f00b ff0c 	bl	8018a0c <mg_tls_free>
  mg_iobuf_free(&c->recv);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3338      	adds	r3, #56	@ 0x38
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe fd1e 	bl	800b63a <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	3348      	adds	r3, #72	@ 0x48
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fe fd19 	bl	800b63a <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	3368      	adds	r3, #104	@ 0x68
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7fe fd14 	bl	800b63a <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 800cc12:	21b0      	movs	r1, #176	@ 0xb0
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f012 fb97 	bl	801f348 <mg_bzero>
  free(c);
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f016 f9ca 	bl	8022fb4 <free>
}
 800cc20:	bf00      	nop
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	24000258 	.word	0x24000258
 800cc2c:	08027db0 	.word	0x08027db0
 800cc30:	080241e8 	.word	0x080241e8
 800cc34:	08025188 	.word	0x08025188

0800cc38 <mg_listen>:
  }
  return c;
}

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800cc46:	2300      	movs	r3, #0
 800cc48:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7ff ff5f 	bl	800cb0e <mg_alloc_conn>
 800cc50:	6178      	str	r0, [r7, #20]
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d10f      	bne.n	800cc78 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 800cc58:	4b43      	ldr	r3, [pc, #268]	@ (800cd68 <mg_listen+0x130>)
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	dd7d      	ble.n	800cd5c <mg_listen+0x124>
 800cc60:	4b42      	ldr	r3, [pc, #264]	@ (800cd6c <mg_listen+0x134>)
 800cc62:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800cc66:	4942      	ldr	r1, [pc, #264]	@ (800cd70 <mg_listen+0x138>)
 800cc68:	2001      	movs	r0, #1
 800cc6a:	f7ff fb67 	bl	800c33c <mg_log_prefix>
 800cc6e:	68b9      	ldr	r1, [r7, #8]
 800cc70:	4840      	ldr	r0, [pc, #256]	@ (800cd74 <mg_listen+0x13c>)
 800cc72:	f7ff fbb3 	bl	800c3dc <mg_log>
 800cc76:	e071      	b.n	800cd5c <mg_listen+0x124>
  } else if (!mg_open_listener(c, url)) {
 800cc78:	68b9      	ldr	r1, [r7, #8]
 800cc7a:	6978      	ldr	r0, [r7, #20]
 800cc7c:	f003 f9ee 	bl	801005c <mg_open_listener>
 800cc80:	4603      	mov	r3, r0
 800cc82:	f083 0301 	eor.w	r3, r3, #1
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d019      	beq.n	800ccc0 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800cc8c:	4b36      	ldr	r3, [pc, #216]	@ (800cd68 <mg_listen+0x130>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	dd0f      	ble.n	800ccb4 <mg_listen+0x7c>
 800cc94:	4b35      	ldr	r3, [pc, #212]	@ (800cd6c <mg_listen+0x134>)
 800cc96:	f640 72e3 	movw	r2, #4067	@ 0xfe3
 800cc9a:	4935      	ldr	r1, [pc, #212]	@ (800cd70 <mg_listen+0x138>)
 800cc9c:	2001      	movs	r0, #1
 800cc9e:	f7ff fb4d 	bl	800c33c <mg_log_prefix>
 800cca2:	f016 fd39 	bl	8023718 <__errno>
 800cca6:	4603      	mov	r3, r0
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	461a      	mov	r2, r3
 800ccac:	68b9      	ldr	r1, [r7, #8]
 800ccae:	4832      	ldr	r0, [pc, #200]	@ (800cd78 <mg_listen+0x140>)
 800ccb0:	f7ff fb94 	bl	800c3dc <mg_log>
    MG_PROF_FREE(c);
    free(c);
 800ccb4:	6978      	ldr	r0, [r7, #20]
 800ccb6:	f016 f97d 	bl	8022fb4 <free>
    c = NULL;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	617b      	str	r3, [r7, #20]
 800ccbe:	e04d      	b.n	800cd5c <mg_listen+0x124>
  } else {
    c->is_listening = 1;
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800ccc6:	f043 0301 	orr.w	r3, r3, #1
 800ccca:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800ccce:	2204      	movs	r2, #4
 800ccd0:	492a      	ldr	r1, [pc, #168]	@ (800cd7c <mg_listen+0x144>)
 800ccd2:	68b8      	ldr	r0, [r7, #8]
 800ccd4:	f016 fc34 	bl	8023540 <strncmp>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	bf0c      	ite	eq
 800ccde:	2301      	moveq	r3, #1
 800cce0:	2300      	movne	r3, #0
 800cce2:	b2d9      	uxtb	r1, r3
 800cce4:	697a      	ldr	r2, [r7, #20]
 800cce6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ccea:	f361 0300 	bfi	r3, r1, #0, #1
 800ccee:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	601a      	str	r2, [r3, #0]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800cd0c:	68b8      	ldr	r0, [r7, #8]
 800cd0e:	f012 f9bb 	bl	801f088 <mg_url_is_ssl>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	bf14      	ite	ne
 800cd18:	2301      	movne	r3, #1
 800cd1a:	2300      	moveq	r3, #0
 800cd1c:	b2d9      	uxtb	r1, r3
 800cd1e:	697a      	ldr	r2, [r7, #20]
 800cd20:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800cd24:	f361 1386 	bfi	r3, r1, #6, #1
 800cd28:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, NULL);
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2101      	movs	r1, #1
 800cd30:	6978      	ldr	r0, [r7, #20]
 800cd32:	f7f9 fdd2 	bl	80068da <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800cd36:	4b0c      	ldr	r3, [pc, #48]	@ (800cd68 <mg_listen+0x130>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	dd0e      	ble.n	800cd5c <mg_listen+0x124>
 800cd3e:	4b0b      	ldr	r3, [pc, #44]	@ (800cd6c <mg_listen+0x134>)
 800cd40:	f640 72ef 	movw	r2, #4079	@ 0xfef
 800cd44:	490a      	ldr	r1, [pc, #40]	@ (800cd70 <mg_listen+0x138>)
 800cd46:	2003      	movs	r0, #3
 800cd48:	f7ff faf8 	bl	800c33c <mg_log_prefix>
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	480a      	ldr	r0, [pc, #40]	@ (800cd80 <mg_listen+0x148>)
 800cd58:	f7ff fb40 	bl	800c3dc <mg_log>
  }
  return c;
 800cd5c:	697b      	ldr	r3, [r7, #20]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3718      	adds	r7, #24
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	24000258 	.word	0x24000258
 800cd6c:	08027dc0 	.word	0x08027dc0
 800cd70:	080241e8 	.word	0x080241e8
 800cd74:	080251b0 	.word	0x080251b0
 800cd78:	080251b8 	.word	0x080251b8
 800cd7c:	080251a8 	.word	0x080251a8
 800cd80:	08024398 	.word	0x08024398

0800cd84 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b08a      	sub	sp, #40	@ 0x28
 800cd88:	af04      	add	r7, sp, #16
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 800cd90:	2120      	movs	r1, #32
 800cd92:	2001      	movs	r0, #1
 800cd94:	f016 f8ea 	bl	8022f6c <calloc>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d011      	beq.n	800cdc6 <mg_timer_add+0x42>
    flags |= MG_TIMER_AUTODELETE;  // We have calloc-ed it, so autodelete
 800cda2:	6a3b      	ldr	r3, [r7, #32]
 800cda4:	f043 0308 	orr.w	r3, r3, #8
 800cda8:	623b      	str	r3, [r7, #32]
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb2:	9302      	str	r3, [sp, #8]
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb6:	9301      	str	r3, [sp, #4]
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	9300      	str	r3, [sp, #0]
 800cdbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdc0:	6979      	ldr	r1, [r7, #20]
 800cdc2:	f007 fd95 	bl	80148f0 <mg_timer_init>
  }
  return t;
 800cdc6:	697b      	ldr	r3, [r7, #20]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3718      	adds	r7, #24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <mg_mgr_init>:
#if MG_ENABLE_TCPIP
  if (mgr->ifp) mg_tcpip_free(mgr->ifp);
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 800cdd8:	2244      	movs	r2, #68	@ 0x44
 800cdda:	2100      	movs	r1, #0
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f016 fb9a 	bl	8023516 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f04f 32ff 	mov.w	r2, #4294967295
 800cde8:	635a      	str	r2, [r3, #52]	@ 0x34
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 800cdea:	4b34      	ldr	r3, [pc, #208]	@ (800cebc <mg_mgr_init+0xec>)
 800cdec:	2204      	movs	r2, #4
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	4b32      	ldr	r3, [pc, #200]	@ (800cebc <mg_mgr_init+0xec>)
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	711a      	strb	r2, [r3, #4]
 800cdf6:	4b31      	ldr	r3, [pc, #196]	@ (800cebc <mg_mgr_init+0xec>)
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	715a      	strb	r2, [r3, #5]
 800cdfc:	4830      	ldr	r0, [pc, #192]	@ (800cec0 <mg_mgr_init+0xf0>)
 800cdfe:	f012 fb9a 	bl	801f536 <mg_ntohl>
 800ce02:	4603      	mov	r3, r0
 800ce04:	4a2f      	ldr	r2, [pc, #188]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce06:	6093      	str	r3, [r2, #8]
 800ce08:	482f      	ldr	r0, [pc, #188]	@ (800cec8 <mg_mgr_init+0xf8>)
 800ce0a:	f012 fb94 	bl	801f536 <mg_ntohl>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	4a2c      	ldr	r2, [pc, #176]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce12:	60d3      	str	r3, [r2, #12]
 800ce14:	482a      	ldr	r0, [pc, #168]	@ (800cec0 <mg_mgr_init+0xf0>)
 800ce16:	f012 fb8e 	bl	801f536 <mg_ntohl>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	4a29      	ldr	r2, [pc, #164]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce1e:	6113      	str	r3, [r2, #16]
 800ce20:	4b28      	ldr	r3, [pc, #160]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce22:	4a2a      	ldr	r2, [pc, #168]	@ (800cecc <mg_mgr_init+0xfc>)
 800ce24:	625a      	str	r2, [r3, #36]	@ 0x24
 800ce26:	4b27      	ldr	r3, [pc, #156]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce28:	4a24      	ldr	r2, [pc, #144]	@ (800cebc <mg_mgr_init+0xec>)
 800ce2a:	629a      	str	r2, [r3, #40]	@ 0x28
 800ce2c:	4b25      	ldr	r3, [pc, #148]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce2e:	2202      	movs	r2, #2
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	4b27      	ldr	r3, [pc, #156]	@ (800ced0 <mg_mgr_init+0x100>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	4b22      	ldr	r3, [pc, #136]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce3a:	705a      	strb	r2, [r3, #1]
 800ce3c:	4b24      	ldr	r3, [pc, #144]	@ (800ced0 <mg_mgr_init+0x100>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	0a9b      	lsrs	r3, r3, #10
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	4b1f      	ldr	r3, [pc, #124]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce46:	709a      	strb	r2, [r3, #2]
 800ce48:	4b21      	ldr	r3, [pc, #132]	@ (800ced0 <mg_mgr_init+0x100>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	0cdb      	lsrs	r3, r3, #19
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	4b1c      	ldr	r3, [pc, #112]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce52:	70da      	strb	r2, [r3, #3]
 800ce54:	4b1f      	ldr	r3, [pc, #124]	@ (800ced4 <mg_mgr_init+0x104>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	b2da      	uxtb	r2, r3
 800ce5a:	4b1a      	ldr	r3, [pc, #104]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce5c:	711a      	strb	r2, [r3, #4]
 800ce5e:	4b1e      	ldr	r3, [pc, #120]	@ (800ced8 <mg_mgr_init+0x108>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	4b17      	ldr	r3, [pc, #92]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce66:	715a      	strb	r2, [r3, #5]
 800ce68:	4916      	ldr	r1, [pc, #88]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f002 ffb2 	bl	800fdd4 <mg_tcpip_init>
 800ce70:	4b1a      	ldr	r3, [pc, #104]	@ (800cedc <mg_mgr_init+0x10c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2b01      	cmp	r3, #1
 800ce76:	dd0b      	ble.n	800ce90 <mg_mgr_init+0xc0>
 800ce78:	4b19      	ldr	r3, [pc, #100]	@ (800cee0 <mg_mgr_init+0x110>)
 800ce7a:	f241 023b 	movw	r2, #4155	@ 0x103b
 800ce7e:	4919      	ldr	r1, [pc, #100]	@ (800cee4 <mg_mgr_init+0x114>)
 800ce80:	2002      	movs	r0, #2
 800ce82:	f7ff fa5b 	bl	800c33c <mg_log_prefix>
 800ce86:	4a0f      	ldr	r2, [pc, #60]	@ (800cec4 <mg_mgr_init+0xf4>)
 800ce88:	4917      	ldr	r1, [pc, #92]	@ (800cee8 <mg_mgr_init+0x118>)
 800ce8a:	4818      	ldr	r0, [pc, #96]	@ (800ceec <mg_mgr_init+0x11c>)
 800ce8c:	f7ff faa6 	bl	800c3dc <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f04f 32ff 	mov.w	r2, #4294967295
 800ce96:	641a      	str	r2, [r3, #64]	@ 0x40
  mgr->dnstimeout = 3000;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800ce9e:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	4a13      	ldr	r2, [pc, #76]	@ (800cef0 <mg_mgr_init+0x120>)
 800cea4:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4a12      	ldr	r2, [pc, #72]	@ (800cef4 <mg_mgr_init+0x124>)
 800ceaa:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f00b ff08 	bl	8018cc2 <mg_tls_ctx_init>
}
 800ceb2:	bf00      	nop
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	24004180 	.word	0x24004180
 800cec0:	c0a8010b 	.word	0xc0a8010b
 800cec4:	24004188 	.word	0x24004188
 800cec8:	ffff0000 	.word	0xffff0000
 800cecc:	240002a0 	.word	0x240002a0
 800ced0:	1ff1e800 	.word	0x1ff1e800
 800ced4:	1ff1e804 	.word	0x1ff1e804
 800ced8:	1ff1e808 	.word	0x1ff1e808
 800cedc:	24000258 	.word	0x24000258
 800cee0:	08027dcc 	.word	0x08027dcc
 800cee4:	080241e8 	.word	0x080241e8
 800cee8:	08010ac5 	.word	0x08010ac5
 800ceec:	080251e8 	.word	0x080251e8
 800cef0:	08025200 	.word	0x08025200
 800cef4:	08025214 	.word	0x08025214

0800cef8 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d005      	beq.n	800cf18 <mg_tcpip_call+0x20>
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	68b9      	ldr	r1, [r7, #8]
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	4798      	blx	r3
}
 800cf18:	bf00      	nop
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 800cf20:	b590      	push	{r4, r7, lr}
 800cf22:	b085      	sub	sp, #20
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	441a      	add	r2, r3
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	1ad3      	subs	r3, r2, r3
 800cf38:	461a      	mov	r2, r3
 800cf3a:	68fc      	ldr	r4, [r7, #12]
 800cf3c:	463b      	mov	r3, r7
 800cf3e:	68b9      	ldr	r1, [r7, #8]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f007 f864 	bl	801400e <mg_str_n>
 800cf46:	f104 0308 	add.w	r3, r4, #8
 800cf4a:	463a      	mov	r2, r7
 800cf4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf50:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800cf54:	bf00      	nop
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd90      	pop	{r4, r7, pc}

0800cf5c <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800cf5c:	b480      	push	{r7}
 800cf5e:	b087      	sub	sp, #28
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	e014      	b.n	800cf9c <csumup+0x40>
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f003 0301 	and.w	r3, r3, #1
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d004      	beq.n	800cf86 <csumup+0x2a>
 800cf7c:	693a      	ldr	r2, [r7, #16]
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	4413      	add	r3, r2
 800cf82:	781b      	ldrb	r3, [r3, #0]
 800cf84:	e004      	b.n	800cf90 <csumup+0x34>
 800cf86:	693a      	ldr	r2, [r7, #16]
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	781b      	ldrb	r3, [r3, #0]
 800cf8e:	021b      	lsls	r3, r3, #8
 800cf90:	68fa      	ldr	r2, [r7, #12]
 800cf92:	4413      	add	r3, r2
 800cf94:	60fb      	str	r3, [r7, #12]
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	617b      	str	r3, [r7, #20]
 800cf9c:	697a      	ldr	r2, [r7, #20]
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d3e6      	bcc.n	800cf72 <csumup+0x16>
  return sum;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	371c      	adds	r7, #28
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800cfb2:	b580      	push	{r7, lr}
 800cfb4:	b082      	sub	sp, #8
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800cfba:	e005      	b.n	800cfc8 <csumfin+0x16>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	0c1b      	lsrs	r3, r3, #16
 800cfc4:	4413      	add	r3, r2
 800cfc6:	607b      	str	r3, [r7, #4]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	0c1b      	lsrs	r3, r3, #16
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1f5      	bne.n	800cfbc <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	43db      	mvns	r3, r3
 800cfd6:	b29b      	uxth	r3, r3
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f012 fa95 	bl	801f508 <mg_ntohs>
 800cfde:	4603      	mov	r3, r0
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b084      	sub	sp, #16
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800cff2:	683a      	ldr	r2, [r7, #0]
 800cff4:	6879      	ldr	r1, [r7, #4]
 800cff6:	2000      	movs	r0, #0
 800cff8:	f7ff ffb0 	bl	800cf5c <csumup>
 800cffc:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7ff ffd7 	bl	800cfb2 <csumfin>
 800d004:	4603      	mov	r3, r0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3710      	adds	r7, #16
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
	...

0800d010 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800d010:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d014:	b088      	sub	sp, #32
 800d016:	af02      	add	r7, sp, #8
 800d018:	6078      	str	r0, [r7, #4]
 800d01a:	460b      	mov	r3, r1
 800d01c:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d024:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	33b0      	adds	r3, #176	@ 0xb0
 800d02a:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 800d02c:	78fb      	ldrb	r3, [r7, #3]
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d013      	beq.n	800d05a <settmout+0x4a>
 800d032:	78fb      	ldrb	r3, [r7, #3]
 800d034:	2b02      	cmp	r3, #2
 800d036:	d00e      	beq.n	800d056 <settmout+0x46>
 800d038:	78fb      	ldrb	r3, [r7, #3]
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	d008      	beq.n	800d050 <settmout+0x40>
 800d03e:	78fb      	ldrb	r3, [r7, #3]
 800d040:	2b04      	cmp	r3, #4
 800d042:	d102      	bne.n	800d04a <settmout+0x3a>
 800d044:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d048:	e008      	b.n	800d05c <settmout+0x4c>
 800d04a:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800d04e:	e005      	b.n	800d05c <settmout+0x4c>
 800d050:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800d054:	e002      	b.n	800d05c <settmout+0x4c>
 800d056:	2364      	movs	r3, #100	@ 0x64
 800d058:	e000      	b.n	800d05c <settmout+0x4c>
 800d05a:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 800d05c:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d064:	2b04      	cmp	r3, #4
 800d066:	d029      	beq.n	800d0bc <settmout+0xac>
  s->timer = ifp->now + n;
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800d06e:	68f9      	ldr	r1, [r7, #12]
 800d070:	2000      	movs	r0, #0
 800d072:	460c      	mov	r4, r1
 800d074:	4605      	mov	r5, r0
 800d076:	eb12 0804 	adds.w	r8, r2, r4
 800d07a:	eb43 0905 	adc.w	r9, r3, r5
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800d084:	693b      	ldr	r3, [r7, #16]
 800d086:	78fa      	ldrb	r2, [r7, #3]
 800d088:	f883 2020 	strb.w	r2, [r3, #32]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800d08c:	4b0e      	ldr	r3, [pc, #56]	@ (800d0c8 <settmout+0xb8>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b03      	cmp	r3, #3
 800d092:	dd14      	ble.n	800d0be <settmout+0xae>
 800d094:	4b0d      	ldr	r3, [pc, #52]	@ (800d0cc <settmout+0xbc>)
 800d096:	f241 02fd 	movw	r2, #4349	@ 0x10fd
 800d09a:	490d      	ldr	r1, [pc, #52]	@ (800d0d0 <settmout+0xc0>)
 800d09c:	2004      	movs	r0, #4
 800d09e:	f7ff f94d 	bl	800c33c <mg_log_prefix>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d0a6:	78f8      	ldrb	r0, [r7, #3]
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d0ae:	e9cd 2300 	strd	r2, r3, [sp]
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	4807      	ldr	r0, [pc, #28]	@ (800d0d4 <settmout+0xc4>)
 800d0b6:	f7ff f991 	bl	800c3dc <mg_log>
 800d0ba:	e000      	b.n	800d0be <settmout+0xae>
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800d0bc:	bf00      	nop
}
 800d0be:	3718      	adds	r7, #24
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d0c6:	bf00      	nop
 800d0c8:	24000258 	.word	0x24000258
 800d0cc:	08027dd8 	.word	0x08027dd8
 800d0d0:	080241e8 	.word	0x080241e8
 800d0d4:	08025234 	.word	0x08025234

0800d0d8 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	6950      	ldr	r0, [r2, #20]
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	4798      	blx	r3
 800d0f2:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	d104      	bne.n	800d106 <ether_output+0x2e>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d100:	1c5a      	adds	r2, r3, #1
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	67da      	str	r2, [r3, #124]	@ 0x7c
  return n;
 800d106:	68fb      	ldr	r3, [r7, #12]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	330e      	adds	r3, #14
 800d126:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2206      	movs	r2, #6
 800d12c:	21ff      	movs	r1, #255	@ 0xff
 800d12e:	4618      	mov	r0, r3
 800d130:	f016 f9f1 	bl	8023516 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	3306      	adds	r3, #6
 800d138:	68f9      	ldr	r1, [r7, #12]
 800d13a:	2206      	movs	r2, #6
 800d13c:	4618      	mov	r0, r3
 800d13e:	f016 fb20 	bl	8023782 <memcpy>
  eth->type = mg_htons(0x806);
 800d142:	f640 0006 	movw	r0, #2054	@ 0x806
 800d146:	f012 f9df 	bl	801f508 <mg_ntohs>
 800d14a:	4603      	mov	r3, r0
 800d14c:	461a      	mov	r2, r3
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800d152:	221c      	movs	r2, #28
 800d154:	2100      	movs	r1, #0
 800d156:	6938      	ldr	r0, [r7, #16]
 800d158:	f016 f9dd 	bl	8023516 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800d15c:	2001      	movs	r0, #1
 800d15e:	f012 f9d3 	bl	801f508 <mg_ntohs>
 800d162:	4603      	mov	r3, r0
 800d164:	461a      	mov	r2, r3
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	801a      	strh	r2, [r3, #0]
 800d16a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d16e:	f012 f9cb 	bl	801f508 <mg_ntohs>
 800d172:	4603      	mov	r3, r0
 800d174:	461a      	mov	r2, r3
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	805a      	strh	r2, [r3, #2]
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	2206      	movs	r2, #6
 800d17e:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	2204      	movs	r2, #4
 800d184:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800d186:	2001      	movs	r0, #1
 800d188:	f012 f9be 	bl	801f508 <mg_ntohs>
 800d18c:	4603      	mov	r3, r0
 800d18e:	461a      	mov	r2, r3
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	80da      	strh	r2, [r3, #6]
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	68ba      	ldr	r2, [r7, #8]
 800d198:	619a      	str	r2, [r3, #24]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	689a      	ldr	r2, [r3, #8]
 800d19e:	693b      	ldr	r3, [r7, #16]
 800d1a0:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	3308      	adds	r3, #8
 800d1a8:	68f9      	ldr	r1, [r7, #12]
 800d1aa:	2206      	movs	r2, #6
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f016 fae8 	bl	8023782 <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d006      	beq.n	800d1c6 <mg_tcpip_arp_request+0xb6>
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	3312      	adds	r3, #18
 800d1bc:	2206      	movs	r2, #6
 800d1be:	6879      	ldr	r1, [r7, #4]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f016 fade 	bl	8023782 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	f103 021c 	add.w	r2, r3, #28
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7ff ff80 	bl	800d0d8 <ether_output>
}
 800d1d8:	bf00      	nop
 800d1da:	3718      	adds	r7, #24
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b082      	sub	sp, #8
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1ee:	2b04      	cmp	r3, #4
 800d1f0:	d135      	bne.n	800d25e <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800d1f2:	4b45      	ldr	r3, [pc, #276]	@ (800d308 <onstatechange+0x128>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	dd0d      	ble.n	800d216 <onstatechange+0x36>
 800d1fa:	4b44      	ldr	r3, [pc, #272]	@ (800d30c <onstatechange+0x12c>)
 800d1fc:	f241 1217 	movw	r2, #4375	@ 0x1117
 800d200:	4943      	ldr	r1, [pc, #268]	@ (800d310 <onstatechange+0x130>)
 800d202:	2002      	movs	r0, #2
 800d204:	f7ff f89a 	bl	800c33c <mg_log_prefix>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	3308      	adds	r3, #8
 800d20c:	461a      	mov	r2, r3
 800d20e:	4941      	ldr	r1, [pc, #260]	@ (800d314 <onstatechange+0x134>)
 800d210:	4841      	ldr	r0, [pc, #260]	@ (800d318 <onstatechange+0x138>)
 800d212:	f7ff f8e3 	bl	800c3dc <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800d216:	4b3c      	ldr	r3, [pc, #240]	@ (800d308 <onstatechange+0x128>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	dd0d      	ble.n	800d23a <onstatechange+0x5a>
 800d21e:	4b3b      	ldr	r3, [pc, #236]	@ (800d30c <onstatechange+0x12c>)
 800d220:	f241 1218 	movw	r2, #4376	@ 0x1118
 800d224:	493a      	ldr	r1, [pc, #232]	@ (800d310 <onstatechange+0x130>)
 800d226:	2002      	movs	r0, #2
 800d228:	f7ff f888 	bl	800c33c <mg_log_prefix>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	3310      	adds	r3, #16
 800d230:	461a      	mov	r2, r3
 800d232:	4938      	ldr	r1, [pc, #224]	@ (800d314 <onstatechange+0x134>)
 800d234:	4839      	ldr	r0, [pc, #228]	@ (800d31c <onstatechange+0x13c>)
 800d236:	f7ff f8d1 	bl	800c3dc <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800d23a:	4b33      	ldr	r3, [pc, #204]	@ (800d308 <onstatechange+0x128>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2b01      	cmp	r3, #1
 800d240:	dd57      	ble.n	800d2f2 <onstatechange+0x112>
 800d242:	4b32      	ldr	r3, [pc, #200]	@ (800d30c <onstatechange+0x12c>)
 800d244:	f241 1219 	movw	r2, #4377	@ 0x1119
 800d248:	4931      	ldr	r1, [pc, #196]	@ (800d310 <onstatechange+0x130>)
 800d24a:	2002      	movs	r0, #2
 800d24c:	f7ff f876 	bl	800c33c <mg_log_prefix>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	461a      	mov	r2, r3
 800d254:	4932      	ldr	r1, [pc, #200]	@ (800d320 <onstatechange+0x140>)
 800d256:	4833      	ldr	r0, [pc, #204]	@ (800d324 <onstatechange+0x144>)
 800d258:	f7ff f8c0 	bl	800c3dc <mg_log>
 800d25c:	e049      	b.n	800d2f2 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d264:	2b03      	cmp	r3, #3
 800d266:	d115      	bne.n	800d294 <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 800d268:	4b27      	ldr	r3, [pc, #156]	@ (800d308 <onstatechange+0x128>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	dd09      	ble.n	800d284 <onstatechange+0xa4>
 800d270:	4b26      	ldr	r3, [pc, #152]	@ (800d30c <onstatechange+0x12c>)
 800d272:	f241 121b 	movw	r2, #4379	@ 0x111b
 800d276:	4926      	ldr	r1, [pc, #152]	@ (800d310 <onstatechange+0x130>)
 800d278:	2001      	movs	r0, #1
 800d27a:	f7ff f85f 	bl	800c33c <mg_log_prefix>
 800d27e:	482a      	ldr	r0, [pc, #168]	@ (800d328 <onstatechange+0x148>)
 800d280:	f7ff f8ac 	bl	800c3dc <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	2200      	movs	r2, #0
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7ff ff3f 	bl	800d110 <mg_tcpip_arp_request>
 800d292:	e02e      	b.n	800d2f2 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d116      	bne.n	800d2cc <onstatechange+0xec>
    MG_ERROR(("Link up"));
 800d29e:	4b1a      	ldr	r3, [pc, #104]	@ (800d308 <onstatechange+0x128>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	dd09      	ble.n	800d2ba <onstatechange+0xda>
 800d2a6:	4b19      	ldr	r3, [pc, #100]	@ (800d30c <onstatechange+0x12c>)
 800d2a8:	f241 121e 	movw	r2, #4382	@ 0x111e
 800d2ac:	4918      	ldr	r1, [pc, #96]	@ (800d310 <onstatechange+0x130>)
 800d2ae:	2001      	movs	r0, #1
 800d2b0:	f7ff f844 	bl	800c33c <mg_log_prefix>
 800d2b4:	481d      	ldr	r0, [pc, #116]	@ (800d32c <onstatechange+0x14c>)
 800d2b6:	f7ff f891 	bl	800c3dc <mg_log>
    srand((unsigned int) mg_millis());
 800d2ba:	f7f3 fa55 	bl	8000768 <mg_millis>
 800d2be:	4602      	mov	r2, r0
 800d2c0:	460b      	mov	r3, r1
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f015 ff2b 	bl	8023120 <srand>
 800d2ca:	e012      	b.n	800d2f2 <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10d      	bne.n	800d2f2 <onstatechange+0x112>
    MG_ERROR(("Link down"));
 800d2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d308 <onstatechange+0x128>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	dd09      	ble.n	800d2f2 <onstatechange+0x112>
 800d2de:	4b0b      	ldr	r3, [pc, #44]	@ (800d30c <onstatechange+0x12c>)
 800d2e0:	f241 1221 	movw	r2, #4385	@ 0x1121
 800d2e4:	490a      	ldr	r1, [pc, #40]	@ (800d310 <onstatechange+0x130>)
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	f7ff f828 	bl	800c33c <mg_log_prefix>
 800d2ec:	4810      	ldr	r0, [pc, #64]	@ (800d330 <onstatechange+0x150>)
 800d2ee:	f7ff f875 	bl	800c3dc <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3384      	adds	r3, #132	@ 0x84
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7ff fdfc 	bl	800cef8 <mg_tcpip_call>
}
 800d300:	bf00      	nop
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	24000258 	.word	0x24000258
 800d30c:	08027de4 	.word	0x08027de4
 800d310:	080241e8 	.word	0x080241e8
 800d314:	08010a01 	.word	0x08010a01
 800d318:	08025244 	.word	0x08025244
 800d31c:	08025254 	.word	0x08025254
 800d320:	08010ac5 	.word	0x08010ac5
 800d324:	08025264 	.word	0x08025264
 800d328:	08025274 	.word	0x08025274
 800d32c:	0802527c 	.word	0x0802527c
 800d330:	08025284 	.word	0x08025284

0800d334 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	603b      	str	r3, [r7, #0]
 800d340:	4613      	mov	r3, r2
 800d342:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	330e      	adds	r3, #14
 800d34e:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	2206      	movs	r2, #6
 800d354:	68b9      	ldr	r1, [r7, #8]
 800d356:	4618      	mov	r0, r3
 800d358:	f016 fa13 	bl	8023782 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	3306      	adds	r3, #6
 800d360:	68f9      	ldr	r1, [r7, #12]
 800d362:	2206      	movs	r2, #6
 800d364:	4618      	mov	r0, r3
 800d366:	f016 fa0c 	bl	8023782 <memcpy>
  eth->type = mg_htons(0x800);
 800d36a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d36e:	f012 f8cb 	bl	801f508 <mg_ntohs>
 800d372:	4603      	mov	r3, r0
 800d374:	461a      	mov	r2, r3
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800d37a:	2214      	movs	r2, #20
 800d37c:	2100      	movs	r1, #0
 800d37e:	6938      	ldr	r0, [r7, #16]
 800d380:	f016 f8c9 	bl	8023516 <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	2245      	movs	r2, #69	@ 0x45
 800d388:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 800d38a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d38e:	f012 f8bb 	bl	801f508 <mg_ntohs>
 800d392:	4603      	mov	r3, r0
 800d394:	461a      	mov	r2, r3
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800d39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39c:	b29b      	uxth	r3, r3
 800d39e:	3314      	adds	r3, #20
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f012 f8b0 	bl	801f508 <mg_ntohs>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	2240      	movs	r2, #64	@ 0x40
 800d3b4:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	79fa      	ldrb	r2, [r7, #7]
 800d3ba:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800d3bc:	693b      	ldr	r3, [r7, #16]
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	6a3a      	ldr	r2, [r7, #32]
 800d3c6:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800d3c8:	2114      	movs	r1, #20
 800d3ca:	6938      	ldr	r0, [r7, #16]
 800d3cc:	f7ff fe0c 	bl	800cfe8 <ipcsum>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	815a      	strh	r2, [r3, #10]
  return ip;
 800d3d8:	693b      	ldr	r3, [r7, #16]
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b08a      	sub	sp, #40	@ 0x28
 800d3e6:	af02      	add	r7, sp, #8
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	60b9      	str	r1, [r7, #8]
 800d3ec:	607a      	str	r2, [r7, #4]
 800d3ee:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800d3f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3f2:	3308      	adds	r3, #8
 800d3f4:	9301      	str	r3, [sp, #4]
 800d3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f8:	9300      	str	r3, [sp, #0]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2211      	movs	r2, #17
 800d3fe:	68b9      	ldr	r1, [r7, #8]
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f7ff ff97 	bl	800d334 <tx_ip>
 800d406:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	3314      	adds	r3, #20
 800d40c:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	887a      	ldrh	r2, [r7, #2]
 800d412:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800d418:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800d41a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	3308      	adds	r3, #8
 800d420:	b29b      	uxth	r3, r3
 800d422:	4618      	mov	r0, r3
 800d424:	f012 f870 	bl	801f508 <mg_ntohs>
 800d428:	4603      	mov	r3, r0
 800d42a:	461a      	mov	r2, r3
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	2200      	movs	r2, #0
 800d434:	719a      	strb	r2, [r3, #6]
 800d436:	2200      	movs	r2, #0
 800d438:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800d43a:	2208      	movs	r2, #8
 800d43c:	69b9      	ldr	r1, [r7, #24]
 800d43e:	2000      	movs	r0, #0
 800d440:	f7ff fd8c 	bl	800cf5c <csumup>
 800d444:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800d446:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d448:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d44a:	6978      	ldr	r0, [r7, #20]
 800d44c:	f7ff fd86 	bl	800cf5c <csumup>
 800d450:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	330c      	adds	r3, #12
 800d456:	2204      	movs	r2, #4
 800d458:	4619      	mov	r1, r3
 800d45a:	6978      	ldr	r0, [r7, #20]
 800d45c:	f7ff fd7e 	bl	800cf5c <csumup>
 800d460:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	3310      	adds	r3, #16
 800d466:	2204      	movs	r2, #4
 800d468:	4619      	mov	r1, r3
 800d46a:	6978      	ldr	r0, [r7, #20]
 800d46c:	f7ff fd76 	bl	800cf5c <csumup>
 800d470:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	7a5b      	ldrb	r3, [r3, #9]
 800d476:	461a      	mov	r2, r3
 800d478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d47a:	441a      	add	r2, r3
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	4413      	add	r3, r2
 800d480:	3308      	adds	r3, #8
 800d482:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800d484:	6978      	ldr	r0, [r7, #20]
 800d486:	f7ff fd94 	bl	800cfb2 <csumfin>
 800d48a:	4603      	mov	r3, r0
 800d48c:	461a      	mov	r2, r3
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	3308      	adds	r3, #8
 800d496:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d498:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d49a:	4618      	mov	r0, r3
 800d49c:	f016 f821 	bl	80234e2 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800d4a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4a2:	332a      	adds	r3, #42	@ 0x2a
 800d4a4:	4619      	mov	r1, r3
 800d4a6:	68f8      	ldr	r0, [r7, #12]
 800d4a8:	f7ff fe16 	bl	800d0d8 <ether_output>
}
 800d4ac:	bf00      	nop
 800d4ae:	3720      	adds	r7, #32
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	bd80      	pop	{r7, pc}

0800d4b4 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800d4b4:	b5b0      	push	{r4, r5, r7, lr}
 800d4b6:	b0d0      	sub	sp, #320	@ 0x140
 800d4b8:	af04      	add	r7, sp, #16
 800d4ba:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800d4be:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800d4c2:	6020      	str	r0, [r4, #0]
 800d4c4:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800d4c8:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800d4cc:	6001      	str	r1, [r0, #0]
 800d4ce:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800d4d2:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800d4d6:	600a      	str	r2, [r1, #0]
 800d4d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d4dc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d4e0:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800d4e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d4e6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d4ea:	4a38      	ldr	r2, [pc, #224]	@ (800d5cc <tx_dhcp+0x118>)
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	4611      	mov	r1, r2
 800d4f0:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	f016 f944 	bl	8023782 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800d4fa:	4835      	ldr	r0, [pc, #212]	@ (800d5d0 <tx_dhcp+0x11c>)
 800d4fc:	f012 f81b 	bl	801f536 <mg_ntohl>
 800d500:	4602      	mov	r2, r0
 800d502:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d506:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d50a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800d50e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d512:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d516:	6819      	ldr	r1, [r3, #0]
 800d518:	f107 0314 	add.w	r3, r7, #20
 800d51c:	331c      	adds	r3, #28
 800d51e:	2206      	movs	r2, #6
 800d520:	4618      	mov	r0, r3
 800d522:	f016 f92e 	bl	8023782 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800d526:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d52a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	3302      	adds	r3, #2
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	461a      	mov	r2, r3
 800d536:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d53a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d53e:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800d540:	f107 0314 	add.w	r3, r7, #20
 800d544:	33f0      	adds	r3, #240	@ 0xf0
 800d546:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800d54a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d54e:	4618      	mov	r0, r3
 800d550:	f016 f917 	bl	8023782 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800d554:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d009      	beq.n	800d570 <tx_dhcp+0xbc>
 800d55c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d560:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d564:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d568:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d56c:	6812      	ldr	r2, [r2, #0]
 800d56e:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800d570:	2044      	movs	r0, #68	@ 0x44
 800d572:	f011 ffc9 	bl	801f508 <mg_ntohs>
 800d576:	4603      	mov	r3, r0
 800d578:	461d      	mov	r5, r3
 800d57a:	2043      	movs	r0, #67	@ 0x43
 800d57c:	f011 ffc4 	bl	801f508 <mg_ntohs>
 800d580:	4603      	mov	r3, r0
 800d582:	461c      	mov	r4, r3
 800d584:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d588:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 800d58c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d590:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 800d594:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d598:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 800d59c:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800d5a0:	9303      	str	r3, [sp, #12]
 800d5a2:	f107 0314 	add.w	r3, r7, #20
 800d5a6:	9302      	str	r3, [sp, #8]
 800d5a8:	9401      	str	r4, [sp, #4]
 800d5aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	9300      	str	r3, [sp, #0]
 800d5b6:	462b      	mov	r3, r5
 800d5b8:	6812      	ldr	r2, [r2, #0]
 800d5ba:	6809      	ldr	r1, [r1, #0]
 800d5bc:	6800      	ldr	r0, [r0, #0]
 800d5be:	f7ff ff10 	bl	800d3e2 <tx_udp>
         sizeof(dhcp));
}
 800d5c2:	bf00      	nop
 800d5c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bdb0      	pop	{r4, r5, r7, pc}
 800d5cc:	08025290 	.word	0x08025290
 800d5d0:	63825363 	.word	0x63825363

0800d5d4 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b096      	sub	sp, #88	@ 0x58
 800d5d8:	af04      	add	r7, sp, #16
 800d5da:	60f8      	str	r0, [r7, #12]
 800d5dc:	60b9      	str	r1, [r7, #8]
 800d5de:	607a      	str	r2, [r7, #4]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	7fdb      	ldrb	r3, [r3, #31]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d001      	beq.n	800d5ec <tx_dhcp_request_sel+0x18>
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	e000      	b.n	800d5ee <tx_dhcp_request_sel+0x1a>
 800d5ec:	2200      	movs	r2, #0
                             (ifp->enable_req_sntp ? 1 : 0));
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	f893 3020 	ldrb.w	r3, [r3, #32]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d001      	beq.n	800d5fc <tx_dhcp_request_sel+0x28>
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e000      	b.n	800d5fe <tx_dhcp_request_sel+0x2a>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	4413      	add	r3, r2
 800d600:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  size_t len = strlen(ifp->dhcp_name);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	3344      	adds	r3, #68	@ 0x44
 800d608:	4618      	mov	r0, r3
 800d60a:	f7f2 fee1 	bl	80003d0 <strlen>
 800d60e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  size_t olen = 21 + len + extra + 2 + 1;  // Total length of options
 800d610:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800d614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d616:	4413      	add	r3, r2
 800d618:	3318      	adds	r3, #24
 800d61a:	63bb      	str	r3, [r7, #56]	@ 0x38
#define OPTS_MAXLEN (21 + sizeof(ifp->dhcp_name) + 2 + 2 + 1)
  uint8_t opts[OPTS_MAXLEN];  // Allocate options (max size possible)
  uint8_t *p = opts;
 800d61c:	f107 0310 	add.w	r3, r7, #16
 800d620:	647b      	str	r3, [r7, #68]	@ 0x44
  assert(olen <= sizeof(opts));
 800d622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d624:	2b26      	cmp	r3, #38	@ 0x26
 800d626:	d906      	bls.n	800d636 <tx_dhcp_request_sel+0x62>
 800d628:	4b50      	ldr	r3, [pc, #320]	@ (800d76c <tx_dhcp_request_sel+0x198>)
 800d62a:	4a51      	ldr	r2, [pc, #324]	@ (800d770 <tx_dhcp_request_sel+0x19c>)
 800d62c:	f241 116a 	movw	r1, #4458	@ 0x116a
 800d630:	4850      	ldr	r0, [pc, #320]	@ (800d774 <tx_dhcp_request_sel+0x1a0>)
 800d632:	f015 fc79 	bl	8022f28 <__assert_func>
  memset(opts, 0, sizeof(opts));
 800d636:	f107 0310 	add.w	r3, r7, #16
 800d63a:	2226      	movs	r2, #38	@ 0x26
 800d63c:	2100      	movs	r1, #0
 800d63e:	4618      	mov	r0, r3
 800d640:	f015 ff69 	bl	8023516 <memset>
  *p++ = 53, *p++ = 1, *p++ = 3;                       // Type: DHCP request
 800d644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d646:	1c5a      	adds	r2, r3, #1
 800d648:	647a      	str	r2, [r7, #68]	@ 0x44
 800d64a:	2235      	movs	r2, #53	@ 0x35
 800d64c:	701a      	strb	r2, [r3, #0]
 800d64e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d650:	1c5a      	adds	r2, r3, #1
 800d652:	647a      	str	r2, [r7, #68]	@ 0x44
 800d654:	2201      	movs	r2, #1
 800d656:	701a      	strb	r2, [r3, #0]
 800d658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d65a:	1c5a      	adds	r2, r3, #1
 800d65c:	647a      	str	r2, [r7, #68]	@ 0x44
 800d65e:	2203      	movs	r2, #3
 800d660:	701a      	strb	r2, [r3, #0]
  *p++ = 54, *p++ = 4, memcpy(p, &ip_srv, 4), p += 4;  // DHCP server ID
 800d662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d664:	1c5a      	adds	r2, r3, #1
 800d666:	647a      	str	r2, [r7, #68]	@ 0x44
 800d668:	2236      	movs	r2, #54	@ 0x36
 800d66a:	701a      	strb	r2, [r3, #0]
 800d66c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d66e:	1c5a      	adds	r2, r3, #1
 800d670:	647a      	str	r2, [r7, #68]	@ 0x44
 800d672:	2204      	movs	r2, #4
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d67a:	601a      	str	r2, [r3, #0]
 800d67c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d67e:	3304      	adds	r3, #4
 800d680:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 50, *p++ = 4, memcpy(p, &ip_req, 4), p += 4;  // Requested IP
 800d682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	647a      	str	r2, [r7, #68]	@ 0x44
 800d688:	2232      	movs	r2, #50	@ 0x32
 800d68a:	701a      	strb	r2, [r3, #0]
 800d68c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d68e:	1c5a      	adds	r2, r3, #1
 800d690:	647a      	str	r2, [r7, #68]	@ 0x44
 800d692:	2204      	movs	r2, #4
 800d694:	701a      	strb	r2, [r3, #0]
 800d696:	68ba      	ldr	r2, [r7, #8]
 800d698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d69a:	601a      	str	r2, [r3, #0]
 800d69c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d69e:	3304      	adds	r3, #4
 800d6a0:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 12, *p++ = (uint8_t) (len & 255);             // DHCP host
 800d6a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6a4:	1c5a      	adds	r2, r3, #1
 800d6a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800d6a8:	220c      	movs	r2, #12
 800d6aa:	701a      	strb	r2, [r3, #0]
 800d6ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6ae:	1c5a      	adds	r2, r3, #1
 800d6b0:	647a      	str	r2, [r7, #68]	@ 0x44
 800d6b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d6b4:	b2d2      	uxtb	r2, r2
 800d6b6:	701a      	strb	r2, [r3, #0]
  memcpy(p, ifp->dhcp_name, len), p += len;            // name
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3344      	adds	r3, #68	@ 0x44
 800d6bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d6be:	4619      	mov	r1, r3
 800d6c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d6c2:	f016 f85e 	bl	8023782 <memcpy>
 800d6c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6ca:	4413      	add	r3, r2
 800d6cc:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 55, *p++ = 2 + extra, *p++ = 1, *p++ = 3;     // GW, MASK
 800d6ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6d0:	1c5a      	adds	r2, r3, #1
 800d6d2:	647a      	str	r2, [r7, #68]	@ 0x44
 800d6d4:	2237      	movs	r2, #55	@ 0x37
 800d6d6:	701a      	strb	r2, [r3, #0]
 800d6d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	647a      	str	r2, [r7, #68]	@ 0x44
 800d6de:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800d6e2:	3202      	adds	r2, #2
 800d6e4:	b2d2      	uxtb	r2, r2
 800d6e6:	701a      	strb	r2, [r3, #0]
 800d6e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	647a      	str	r2, [r7, #68]	@ 0x44
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	701a      	strb	r2, [r3, #0]
 800d6f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6f4:	1c5a      	adds	r2, r3, #1
 800d6f6:	647a      	str	r2, [r7, #68]	@ 0x44
 800d6f8:	2203      	movs	r2, #3
 800d6fa:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_dns) *p++ = 6;                   // DNS
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	7fdb      	ldrb	r3, [r3, #31]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d004      	beq.n	800d70e <tx_dhcp_request_sel+0x13a>
 800d704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d706:	1c5a      	adds	r2, r3, #1
 800d708:	647a      	str	r2, [r7, #68]	@ 0x44
 800d70a:	2206      	movs	r2, #6
 800d70c:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_sntp) *p++ = 42;                 // SNTP
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d004      	beq.n	800d722 <tx_dhcp_request_sel+0x14e>
 800d718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d71a:	1c5a      	adds	r2, r3, #1
 800d71c:	647a      	str	r2, [r7, #68]	@ 0x44
 800d71e:	222a      	movs	r2, #42	@ 0x2a
 800d720:	701a      	strb	r2, [r3, #0]
  *p++ = 255;                                          // End of options
 800d722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d724:	1c5a      	adds	r2, r3, #1
 800d726:	647a      	str	r2, [r7, #68]	@ 0x44
 800d728:	22ff      	movs	r2, #255	@ 0xff
 800d72a:	701a      	strb	r2, [r3, #0]
  // assert((size_t) (p - opts) < olen);
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, olen, 0);
 800d72c:	2300      	movs	r3, #0
 800d72e:	9302      	str	r3, [sp, #8]
 800d730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d732:	9301      	str	r3, [sp, #4]
 800d734:	f107 0310 	add.w	r3, r7, #16
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	f04f 33ff 	mov.w	r3, #4294967295
 800d73e:	2200      	movs	r2, #0
 800d740:	490d      	ldr	r1, [pc, #52]	@ (800d778 <tx_dhcp_request_sel+0x1a4>)
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f7ff feb6 	bl	800d4b4 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800d748:	4b0c      	ldr	r3, [pc, #48]	@ (800d77c <tx_dhcp_request_sel+0x1a8>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	dd09      	ble.n	800d764 <tx_dhcp_request_sel+0x190>
 800d750:	4b07      	ldr	r3, [pc, #28]	@ (800d770 <tx_dhcp_request_sel+0x19c>)
 800d752:	f241 1277 	movw	r2, #4471	@ 0x1177
 800d756:	4907      	ldr	r1, [pc, #28]	@ (800d774 <tx_dhcp_request_sel+0x1a0>)
 800d758:	2003      	movs	r0, #3
 800d75a:	f7fe fdef 	bl	800c33c <mg_log_prefix>
 800d75e:	4808      	ldr	r0, [pc, #32]	@ (800d780 <tx_dhcp_request_sel+0x1ac>)
 800d760:	f7fe fe3c 	bl	800c3dc <mg_log>
}
 800d764:	bf00      	nop
 800d766:	3748      	adds	r7, #72	@ 0x48
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	080253ac 	.word	0x080253ac
 800d770:	08027df4 	.word	0x08027df4
 800d774:	080241e8 	.word	0x080241e8
 800d778:	080278dc 	.word	0x080278dc
 800d77c:	24000258 	.word	0x24000258
 800d780:	080253c4 	.word	0x080253c4

0800d784 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800d784:	b580      	push	{r7, lr}
 800d786:	b08a      	sub	sp, #40	@ 0x28
 800d788:	af04      	add	r7, sp, #16
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
 800d790:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800d792:	4b10      	ldr	r3, [pc, #64]	@ (800d7d4 <tx_dhcp_request_re+0x50>)
 800d794:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800d796:	2301      	movs	r3, #1
 800d798:	9302      	str	r3, [sp, #8]
 800d79a:	2304      	movs	r3, #4
 800d79c:	9301      	str	r3, [sp, #4]
 800d79e:	f107 0314 	add.w	r3, r7, #20
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	68b9      	ldr	r1, [r7, #8]
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7ff fe82 	bl	800d4b4 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800d7b0:	4b09      	ldr	r3, [pc, #36]	@ (800d7d8 <tx_dhcp_request_re+0x54>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b02      	cmp	r3, #2
 800d7b6:	dd09      	ble.n	800d7cc <tx_dhcp_request_re+0x48>
 800d7b8:	4b08      	ldr	r3, [pc, #32]	@ (800d7dc <tx_dhcp_request_re+0x58>)
 800d7ba:	f241 1282 	movw	r2, #4482	@ 0x1182
 800d7be:	4908      	ldr	r1, [pc, #32]	@ (800d7e0 <tx_dhcp_request_re+0x5c>)
 800d7c0:	2003      	movs	r0, #3
 800d7c2:	f7fe fdbb 	bl	800c33c <mg_log_prefix>
 800d7c6:	4807      	ldr	r0, [pc, #28]	@ (800d7e4 <tx_dhcp_request_re+0x60>)
 800d7c8:	f7fe fe08 	bl	800c3dc <mg_log>
}
 800d7cc:	bf00      	nop
 800d7ce:	3718      	adds	r7, #24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	ff030135 	.word	0xff030135
 800d7d8:	24000258 	.word	0x24000258
 800d7dc:	08027e08 	.word	0x08027e08
 800d7e0:	080241e8 	.word	0x080241e8
 800d7e4:	080253c4 	.word	0x080253c4

0800d7e8 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b088      	sub	sp, #32
 800d7ec:	af04      	add	r7, sp, #16
 800d7ee:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800d7f0:	4a14      	ldr	r2, [pc, #80]	@ (800d844 <tx_dhcp_discover+0x5c>)
 800d7f2:	f107 0308 	add.w	r3, r7, #8
 800d7f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d7fa:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800d7fe:	2300      	movs	r3, #0
 800d800:	9302      	str	r3, [sp, #8]
 800d802:	2308      	movs	r3, #8
 800d804:	9301      	str	r3, [sp, #4]
 800d806:	f107 0308 	add.w	r3, r7, #8
 800d80a:	9300      	str	r3, [sp, #0]
 800d80c:	f04f 33ff 	mov.w	r3, #4294967295
 800d810:	2200      	movs	r2, #0
 800d812:	490d      	ldr	r1, [pc, #52]	@ (800d848 <tx_dhcp_discover+0x60>)
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f7ff fe4d 	bl	800d4b4 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800d81a:	4b0c      	ldr	r3, [pc, #48]	@ (800d84c <tx_dhcp_discover+0x64>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b02      	cmp	r3, #2
 800d820:	dd0c      	ble.n	800d83c <tx_dhcp_discover+0x54>
 800d822:	4b0b      	ldr	r3, [pc, #44]	@ (800d850 <tx_dhcp_discover+0x68>)
 800d824:	f241 128c 	movw	r2, #4492	@ 0x118c
 800d828:	490a      	ldr	r1, [pc, #40]	@ (800d854 <tx_dhcp_discover+0x6c>)
 800d82a:	2003      	movs	r0, #3
 800d82c:	f7fe fd86 	bl	800c33c <mg_log_prefix>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	461a      	mov	r2, r3
 800d834:	4908      	ldr	r1, [pc, #32]	@ (800d858 <tx_dhcp_discover+0x70>)
 800d836:	4809      	ldr	r0, [pc, #36]	@ (800d85c <tx_dhcp_discover+0x74>)
 800d838:	f7fe fdd0 	bl	800c3dc <mg_log>
}
 800d83c:	bf00      	nop
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	080253f4 	.word	0x080253f4
 800d848:	080278dc 	.word	0x080278dc
 800d84c:	24000258 	.word	0x24000258
 800d850:	08027e1c 	.word	0x08027e1c
 800d854:	080241e8 	.word	0x080241e8
 800d858:	08010ac5 	.word	0x08010ac5
 800d85c:	080253d4 	.word	0x080253d4

0800d860 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	4613      	mov	r3, r2
 800d86c:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800d86e:	2300      	movs	r3, #0
 800d870:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	617b      	str	r3, [r7, #20]
 800d878:	e057      	b.n	800d92a <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d880:	f003 0310 	and.w	r3, r3, #16
 800d884:	b2db      	uxtb	r3, r3
 800d886:	2b00      	cmp	r3, #0
 800d888:	d010      	beq.n	800d8ac <getpeer+0x4c>
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	699b      	ldr	r3, [r3, #24]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d00c      	beq.n	800d8ac <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	699b      	ldr	r3, [r3, #24]
 800d896:	f103 000e 	add.w	r0, r3, #14
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	331c      	adds	r3, #28
 800d89e:	2204      	movs	r2, #4
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	f015 fe0e 	bl	80234c2 <memcmp>
 800d8a6:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d042      	beq.n	800d932 <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d8b2:	f003 0301 	and.w	r3, r3, #1
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00b      	beq.n	800d8d4 <getpeer+0x74>
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d007      	beq.n	800d8d4 <getpeer+0x74>
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	8b1a      	ldrh	r2, [r3, #24]
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8cc:	885b      	ldrh	r3, [r3, #2]
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d030      	beq.n	800d936 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d8da:	f003 0301 	and.w	r3, r3, #1
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d11f      	bne.n	800d924 <getpeer+0xc4>
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d01b      	beq.n	800d924 <getpeer+0xc4>
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	8b1a      	ldrh	r2, [r3, #24]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f4:	885b      	ldrh	r3, [r3, #2]
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d113      	bne.n	800d924 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d902:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d906:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800d908:	79fa      	ldrb	r2, [r7, #7]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d10a      	bne.n	800d924 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800d90e:	79fb      	ldrb	r3, [r7, #7]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d111      	bne.n	800d938 <getpeer+0xd8>
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d91c:	881b      	ldrh	r3, [r3, #0]
 800d91e:	b29b      	uxth	r3, r3
 800d920:	429a      	cmp	r2, r3
 800d922:	d009      	beq.n	800d938 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	617b      	str	r3, [r7, #20]
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d1a4      	bne.n	800d87a <getpeer+0x1a>
 800d930:	e002      	b.n	800d938 <getpeer+0xd8>
      break;
 800d932:	bf00      	nop
 800d934:	e000      	b.n	800d938 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800d936:	bf00      	nop
      break;
  }
  return c;
 800d938:	697b      	ldr	r3, [r7, #20]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3718      	adds	r7, #24
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
	...

0800d944 <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800d944:	b5b0      	push	{r4, r5, r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af02      	add	r7, sp, #8
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	88db      	ldrh	r3, [r3, #6]
 800d954:	b29c      	uxth	r4, r3
 800d956:	2001      	movs	r0, #1
 800d958:	f011 fdd6 	bl	801f508 <mg_ntohs>
 800d95c:	4603      	mov	r3, r0
 800d95e:	429c      	cmp	r4, r3
 800d960:	d176      	bne.n	800da50 <rx_arp+0x10c>
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	699b      	ldr	r3, [r3, #24]
 800d966:	699a      	ldr	r2, [r3, #24]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	689b      	ldr	r3, [r3, #8]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d16f      	bne.n	800da50 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	695b      	ldr	r3, [r3, #20]
 800d974:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	330e      	adds	r3, #14
 800d97a:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800d97c:	6978      	ldr	r0, [r7, #20]
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	3306      	adds	r3, #6
 800d984:	2206      	movs	r2, #6
 800d986:	4619      	mov	r1, r3
 800d988:	f015 fefb 	bl	8023782 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	3306      	adds	r3, #6
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	2206      	movs	r2, #6
 800d994:	4618      	mov	r0, r3
 800d996:	f015 fef4 	bl	8023782 <memcpy>
    eth->type = mg_htons(0x806);
 800d99a:	f640 0006 	movw	r0, #2054	@ 0x806
 800d99e:	f011 fdb3 	bl	801f508 <mg_ntohs>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	699a      	ldr	r2, [r3, #24]
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	6814      	ldr	r4, [r2, #0]
 800d9b2:	6850      	ldr	r0, [r2, #4]
 800d9b4:	6891      	ldr	r1, [r2, #8]
 800d9b6:	68d5      	ldr	r5, [r2, #12]
 800d9b8:	601c      	str	r4, [r3, #0]
 800d9ba:	6058      	str	r0, [r3, #4]
 800d9bc:	6099      	str	r1, [r3, #8]
 800d9be:	60dd      	str	r5, [r3, #12]
 800d9c0:	6914      	ldr	r4, [r2, #16]
 800d9c2:	6950      	ldr	r0, [r2, #20]
 800d9c4:	6991      	ldr	r1, [r2, #24]
 800d9c6:	611c      	str	r4, [r3, #16]
 800d9c8:	6158      	str	r0, [r3, #20]
 800d9ca:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800d9cc:	2002      	movs	r0, #2
 800d9ce:	f011 fd9b 	bl	801f508 <mg_ntohs>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	f103 0012 	add.w	r0, r3, #18
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	699b      	ldr	r3, [r3, #24]
 800d9e4:	3308      	adds	r3, #8
 800d9e6:	2206      	movs	r2, #6
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	f015 feca 	bl	8023782 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	2206      	movs	r2, #6
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f015 fec3 	bl	8023782 <memcpy>
    arp->tpa = pkt->arp->spa;
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	699b      	ldr	r3, [r3, #24]
 800da00:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	689a      	ldr	r2, [r3, #8]
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800da12:	4b4e      	ldr	r3, [pc, #312]	@ (800db4c <rx_arp+0x208>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b02      	cmp	r3, #2
 800da18:	dd10      	ble.n	800da3c <rx_arp+0xf8>
 800da1a:	4b4d      	ldr	r3, [pc, #308]	@ (800db50 <rx_arp+0x20c>)
 800da1c:	f241 12b0 	movw	r2, #4528	@ 0x11b0
 800da20:	494c      	ldr	r1, [pc, #304]	@ (800db54 <rx_arp+0x210>)
 800da22:	2003      	movs	r0, #3
 800da24:	f7fe fc8a 	bl	800c33c <mg_log_prefix>
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	f103 0218 	add.w	r2, r3, #24
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	4b49      	ldr	r3, [pc, #292]	@ (800db58 <rx_arp+0x214>)
 800da34:	4949      	ldr	r1, [pc, #292]	@ (800db5c <rx_arp+0x218>)
 800da36:	484a      	ldr	r0, [pc, #296]	@ (800db60 <rx_arp+0x21c>)
 800da38:	f7fe fcd0 	bl	800c3dc <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800da3c:	693b      	ldr	r3, [r7, #16]
 800da3e:	f103 021c 	add.w	r2, r3, #28
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	1ad3      	subs	r3, r2, r3
 800da46:	4619      	mov	r1, r3
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff fb45 	bl	800d0d8 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800da4e:	e079      	b.n	800db44 <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	699b      	ldr	r3, [r3, #24]
 800da54:	88db      	ldrh	r3, [r3, #6]
 800da56:	b29c      	uxth	r4, r3
 800da58:	2002      	movs	r0, #2
 800da5a:	f011 fd55 	bl	801f508 <mg_ntohs>
 800da5e:	4603      	mov	r3, r0
 800da60:	429c      	cmp	r4, r3
 800da62:	d16f      	bne.n	800db44 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	3312      	adds	r3, #18
 800da6a:	6879      	ldr	r1, [r7, #4]
 800da6c:	2206      	movs	r2, #6
 800da6e:	4618      	mov	r0, r3
 800da70:	f015 fd27 	bl	80234c2 <memcmp>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d163      	bne.n	800db42 <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	699b      	ldr	r3, [r3, #24]
 800da7e:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	691b      	ldr	r3, [r3, #16]
 800da86:	429a      	cmp	r2, r3
 800da88:	d116      	bne.n	800dab8 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	699b      	ldr	r3, [r3, #24]
 800da94:	3308      	adds	r3, #8
 800da96:	2206      	movs	r2, #6
 800da98:	4619      	mov	r1, r3
 800da9a:	f015 fe72 	bl	8023782 <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800daa4:	2b03      	cmp	r3, #3
 800daa6:	d14d      	bne.n	800db44 <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2204      	movs	r2, #4
 800daac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7ff fb95 	bl	800d1e0 <onstatechange>
 800dab6:	e045      	b.n	800db44 <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dabc:	2200      	movs	r2, #0
 800dabe:	6839      	ldr	r1, [r7, #0]
 800dac0:	4618      	mov	r0, r3
 800dac2:	f7ff fecd 	bl	800d860 <getpeer>
 800dac6:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d03a      	beq.n	800db44 <rx_arp+0x200>
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800dad4:	f003 0310 	and.w	r3, r3, #16
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d032      	beq.n	800db44 <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	33b0      	adds	r3, #176	@ 0xb0
 800dae2:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	f103 001a 	add.w	r0, r3, #26
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	699b      	ldr	r3, [r3, #24]
 800daee:	3308      	adds	r3, #8
 800daf0:	2206      	movs	r2, #6
 800daf2:	4619      	mov	r1, r3
 800daf4:	f015 fe45 	bl	8023782 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800daf8:	4b14      	ldr	r3, [pc, #80]	@ (800db4c <rx_arp+0x208>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b02      	cmp	r3, #2
 800dafe:	dd15      	ble.n	800db2c <rx_arp+0x1e8>
 800db00:	4b13      	ldr	r3, [pc, #76]	@ (800db50 <rx_arp+0x20c>)
 800db02:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 800db06:	4913      	ldr	r1, [pc, #76]	@ (800db54 <rx_arp+0x210>)
 800db08:	2003      	movs	r0, #3
 800db0a:	f7fe fc17 	bl	800c33c <mg_log_prefix>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f103 021c 	add.w	r2, r3, #28
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	331a      	adds	r3, #26
 800db1c:	9301      	str	r3, [sp, #4]
 800db1e:	4b0e      	ldr	r3, [pc, #56]	@ (800db58 <rx_arp+0x214>)
 800db20:	9300      	str	r3, [sp, #0]
 800db22:	4613      	mov	r3, r2
 800db24:	4a0d      	ldr	r2, [pc, #52]	@ (800db5c <rx_arp+0x218>)
 800db26:	480f      	ldr	r0, [pc, #60]	@ (800db64 <rx_arp+0x220>)
 800db28:	f7fe fc58 	bl	800c3dc <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800db32:	f023 0310 	bic.w	r3, r3, #16
 800db36:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 800db3a:	68f8      	ldr	r0, [r7, #12]
 800db3c:	f002 fa69 	bl	8010012 <mac_resolved>
 800db40:	e000      	b.n	800db44 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800db42:	bf00      	nop
      }
    }
  }
}
 800db44:	3718      	adds	r7, #24
 800db46:	46bd      	mov	sp, r7
 800db48:	bdb0      	pop	{r4, r5, r7, pc}
 800db4a:	bf00      	nop
 800db4c:	24000258 	.word	0x24000258
 800db50:	08027e30 	.word	0x08027e30
 800db54:	080241e8 	.word	0x080241e8
 800db58:	08010ac5 	.word	0x08010ac5
 800db5c:	08010a01 	.word	0x08010a01
 800db60:	080253fc 	.word	0x080253fc
 800db64:	08025414 	.word	0x08025414

0800db68 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800db68:	b580      	push	{r7, lr}
 800db6a:	b08a      	sub	sp, #40	@ 0x28
 800db6c:	af02      	add	r7, sp, #8
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	2b08      	cmp	r3, #8
 800db7a:	d14d      	bne.n	800dc18 <rx_icmp+0xb0>
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	69db      	ldr	r3, [r3, #28]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d049      	beq.n	800dc18 <rx_icmp+0xb0>
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	69db      	ldr	r3, [r3, #28]
 800db88:	691a      	ldr	r2, [r3, #16]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d142      	bne.n	800dc18 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800db92:	2326      	movs	r3, #38	@ 0x26
 800db94:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	699a      	ldr	r2, [r3, #24]
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	617b      	str	r3, [r7, #20]
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800dba6:	69fa      	ldr	r2, [r7, #28]
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d901      	bls.n	800dbb2 <rx_icmp+0x4a>
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	691b      	ldr	r3, [r3, #16]
 800dbb6:	1d99      	adds	r1, r3, #6
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6898      	ldr	r0, [r3, #8]
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	69db      	ldr	r3, [r3, #28]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	69fa      	ldr	r2, [r7, #28]
 800dbc4:	3204      	adds	r2, #4
 800dbc6:	9201      	str	r2, [sp, #4]
 800dbc8:	9300      	str	r3, [sp, #0]
 800dbca:	4603      	mov	r3, r0
 800dbcc:	2201      	movs	r2, #1
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7ff fbb0 	bl	800d334 <tx_ip>
 800dbd4:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	3314      	adds	r3, #20
 800dbda:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800dbdc:	2204      	movs	r2, #4
 800dbde:	2100      	movs	r1, #0
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f015 fc98 	bl	8023516 <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	1d18      	adds	r0, r3, #4
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	689b      	ldr	r3, [r3, #8]
 800dbee:	69fa      	ldr	r2, [r7, #28]
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	f015 fdc6 	bl	8023782 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	68f8      	ldr	r0, [r7, #12]
 800dbfe:	f7ff f9f3 	bl	800cfe8 <ipcsum>
 800dc02:	4603      	mov	r3, r0
 800dc04:	461a      	mov	r2, r3
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800dc0a:	69ba      	ldr	r2, [r7, #24]
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	4413      	add	r3, r2
 800dc10:	4619      	mov	r1, r3
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7ff fa60 	bl	800d0d8 <ether_output>
  }
}
 800dc18:	bf00      	nop
 800dc1a:	3720      	adds	r7, #32
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800dc20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dc24:	b090      	sub	sp, #64	@ 0x40
 800dc26:	af00      	add	r7, sp, #0
 800dc28:	60f8      	str	r0, [r7, #12]
 800dc2a:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc30:	2300      	movs	r3, #0
 800dc32:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc34:	2300      	movs	r3, #0
 800dc36:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc38:	2300      	movs	r3, #0
 800dc3a:	623b      	str	r3, [r7, #32]
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	61fb      	str	r3, [r7, #28]
 800dc40:	2300      	movs	r3, #0
 800dc42:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800dc44:	2300      	movs	r3, #0
 800dc46:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc58:	33f0      	adds	r3, #240	@ 0xf0
 800dc5a:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	681a      	ldr	r2, [r3, #0]
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	4413      	add	r3, r2
 800dc66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc6c:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800dc70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc72:	429a      	cmp	r2, r3
 800dc74:	f0c0 81ac 	bcc.w	800dfd0 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc7c:	1d18      	adds	r0, r3, #4
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3302      	adds	r3, #2
 800dc82:	2204      	movs	r2, #4
 800dc84:	4619      	mov	r1, r3
 800dc86:	f015 fc1c 	bl	80234c2 <memcmp>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f040 81a1 	bne.w	800dfd4 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800dc92:	e08a      	b.n	800ddaa <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800dc94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d10e      	bne.n	800dcba <rx_dhcp_client+0x9a>
 800dc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc9e:	3301      	adds	r3, #1
 800dca0:	781b      	ldrb	r3, [r3, #0]
 800dca2:	2b04      	cmp	r3, #4
 800dca4:	d109      	bne.n	800dcba <rx_dhcp_client+0x9a>
 800dca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dca8:	3306      	adds	r3, #6
 800dcaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d904      	bls.n	800dcba <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 800dcb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcb2:	3302      	adds	r3, #2
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcb8:	e070      	b.n	800dd9c <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800dcba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	2b03      	cmp	r3, #3
 800dcc0:	d112      	bne.n	800dce8 <rx_dhcp_client+0xc8>
 800dcc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	2b04      	cmp	r3, #4
 800dcca:	d10d      	bne.n	800dce8 <rx_dhcp_client+0xc8>
 800dccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcce:	3306      	adds	r3, #6
 800dcd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcd2:	429a      	cmp	r2, r3
 800dcd4:	d908      	bls.n	800dce8 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 800dcd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcd8:	3302      	adds	r3, #2
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dce2:	691b      	ldr	r3, [r3, #16]
 800dce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dce6:	e059      	b.n	800dd9c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	7fdb      	ldrb	r3, [r3, #31]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d012      	beq.n	800dd16 <rx_dhcp_client+0xf6>
 800dcf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	2b06      	cmp	r3, #6
 800dcf6:	d10e      	bne.n	800dd16 <rx_dhcp_client+0xf6>
 800dcf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	2b04      	cmp	r3, #4
 800dd00:	d109      	bne.n	800dd16 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 800dd02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd04:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800dd06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d904      	bls.n	800dd16 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 800dd0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd0e:	3302      	adds	r3, #2
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	61fb      	str	r3, [r7, #28]
 800dd14:	e042      	b.n	800dd9c <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d012      	beq.n	800dd46 <rx_dhcp_client+0x126>
 800dd20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	2b2a      	cmp	r3, #42	@ 0x2a
 800dd26:	d10e      	bne.n	800dd46 <rx_dhcp_client+0x126>
 800dd28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	2b04      	cmp	r3, #4
 800dd30:	d109      	bne.n	800dd46 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 800dd32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd34:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800dd36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d904      	bls.n	800dd46 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 800dd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd3e:	3302      	adds	r3, #2
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	61bb      	str	r3, [r7, #24]
 800dd44:	e02a      	b.n	800dd9c <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800dd46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	2b33      	cmp	r3, #51	@ 0x33
 800dd4c:	d114      	bne.n	800dd78 <rx_dhcp_client+0x158>
 800dd4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd50:	3301      	adds	r3, #1
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2b04      	cmp	r3, #4
 800dd56:	d10f      	bne.n	800dd78 <rx_dhcp_client+0x158>
 800dd58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd5a:	3306      	adds	r3, #6
 800dd5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	d90a      	bls.n	800dd78 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 800dd62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd64:	3302      	adds	r3, #2
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 800dd6a:	6a3b      	ldr	r3, [r7, #32]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f011 fbe2 	bl	801f536 <mg_ntohl>
 800dd72:	4603      	mov	r3, r0
 800dd74:	623b      	str	r3, [r7, #32]
 800dd76:	e011      	b.n	800dd9c <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800dd78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b35      	cmp	r3, #53	@ 0x35
 800dd7e:	d10d      	bne.n	800dd9c <rx_dhcp_client+0x17c>
 800dd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd82:	3301      	adds	r3, #1
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d108      	bne.n	800dd9c <rx_dhcp_client+0x17c>
 800dd8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd8c:	3306      	adds	r3, #6
 800dd8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d903      	bls.n	800dd9c <rx_dhcp_client+0x17c>
      msgtype = p[2];
 800dd94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd96:	789b      	ldrb	r3, [r3, #2]
 800dd98:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 800dd9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd9e:	3301      	adds	r3, #1
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	3302      	adds	r3, #2
 800dda4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dda6:	4413      	add	r3, r2
 800dda8:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800ddaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddac:	3301      	adds	r3, #1
 800ddae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d904      	bls.n	800ddbe <rx_dhcp_client+0x19e>
 800ddb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	2bff      	cmp	r3, #255	@ 0xff
 800ddba:	f47f af6b 	bne.w	800dc94 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800ddbe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800ddc2:	2b06      	cmp	r3, #6
 800ddc4:	d10c      	bne.n	800dde0 <rx_dhcp_client+0x1c0>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d107      	bne.n	800dde0 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2201      	movs	r2, #1
 800ddd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	2200      	movs	r2, #0
 800dddc:	609a      	str	r2, [r3, #8]
 800ddde:	e0ec      	b.n	800dfba <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800dde0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800dde4:	2b02      	cmp	r3, #2
 800dde6:	d123      	bne.n	800de30 <rx_dhcp_client+0x210>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d11e      	bne.n	800de30 <rx_dhcp_client+0x210>
 800ddf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d01b      	beq.n	800de30 <rx_dhcp_client+0x210>
 800ddf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d018      	beq.n	800de30 <rx_dhcp_client+0x210>
 800ddfe:	6a3b      	ldr	r3, [r7, #32]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d015      	beq.n	800de30 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de08:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d003      	beq.n	800de16 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 800de12:	695b      	ldr	r3, [r3, #20]
 800de14:	e002      	b.n	800de1c <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800de16:	68bb      	ldr	r3, [r7, #8]
 800de18:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 800de1a:	68db      	ldr	r3, [r3, #12]
 800de1c:	461a      	mov	r2, r3
 800de1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f7ff fbd7 	bl	800d5d4 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	2202      	movs	r2, #2
 800de2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800de2e:	e0c4      	b.n	800dfba <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 800de30:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800de34:	2b05      	cmp	r3, #5
 800de36:	f040 80c0 	bne.w	800dfba <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800de40:	2b02      	cmp	r3, #2
 800de42:	f040 8081 	bne.w	800df48 <rx_dhcp_client+0x328>
 800de46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d07d      	beq.n	800df48 <rx_dhcp_client+0x328>
 800de4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d07a      	beq.n	800df48 <rx_dhcp_client+0x328>
 800de52:	6a3b      	ldr	r3, [r7, #32]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d077      	beq.n	800df48 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800de5e:	6a39      	ldr	r1, [r7, #32]
 800de60:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800de64:	fb00 f101 	mul.w	r1, r0, r1
 800de68:	2000      	movs	r0, #0
 800de6a:	4688      	mov	r8, r1
 800de6c:	4681      	mov	r9, r0
 800de6e:	eb12 0108 	adds.w	r1, r2, r8
 800de72:	6039      	str	r1, [r7, #0]
 800de74:	eb43 0309 	adc.w	r3, r3, r9
 800de78:	607b      	str	r3, [r7, #4]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800de80:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800de84:	4b56      	ldr	r3, [pc, #344]	@ (800dfe0 <rx_dhcp_client+0x3c0>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2b01      	cmp	r3, #1
 800de8a:	dd16      	ble.n	800deba <rx_dhcp_client+0x29a>
 800de8c:	4b55      	ldr	r3, [pc, #340]	@ (800dfe4 <rx_dhcp_client+0x3c4>)
 800de8e:	f241 2202 	movw	r2, #4610	@ 0x1202
 800de92:	4955      	ldr	r1, [pc, #340]	@ (800dfe8 <rx_dhcp_client+0x3c8>)
 800de94:	2002      	movs	r0, #2
 800de96:	f7fe fa51 	bl	800c33c <mg_log_prefix>
 800de9a:	6a3c      	ldr	r4, [r7, #32]
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800dea2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dea6:	f04f 0300 	mov.w	r3, #0
 800deaa:	f7f2 fa99 	bl	80003e0 <__aeabi_uldivmod>
 800deae:	4602      	mov	r2, r0
 800deb0:	460b      	mov	r3, r1
 800deb2:	4621      	mov	r1, r4
 800deb4:	484d      	ldr	r0, [pc, #308]	@ (800dfec <rx_dhcp_client+0x3cc>)
 800deb6:	f7fe fa91 	bl	800c3dc <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	3306      	adds	r3, #6
 800dec6:	2206      	movs	r2, #6
 800dec8:	4619      	mov	r1, r3
 800deca:	f015 fc5a 	bl	8023782 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ded2:	609a      	str	r2, [r3, #8]
 800ded4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	611a      	str	r2, [r3, #16]
 800deda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2203      	movs	r2, #3
 800dee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800dee8:	f107 0310 	add.w	r3, r7, #16
 800deec:	2108      	movs	r1, #8
 800deee:	4618      	mov	r0, r3
 800def0:	f7f2 fc0c 	bl	800070c <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800def4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800def8:	4614      	mov	r4, r2
 800defa:	f7f2 fc35 	bl	8000768 <mg_millis>
 800defe:	4602      	mov	r2, r0
 800df00:	460b      	mov	r3, r1
 800df02:	4613      	mov	r3, r2
 800df04:	4423      	add	r3, r4
 800df06:	4618      	mov	r0, r3
 800df08:	f015 f90a 	bl	8023120 <srand>
      if (ifp->enable_req_dns && dns != 0)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	7fdb      	ldrb	r3, [r3, #31]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d009      	beq.n	800df28 <rx_dhcp_client+0x308>
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d006      	beq.n	800df28 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 800df1a:	f107 031c 	add.w	r3, r7, #28
 800df1e:	461a      	mov	r2, r3
 800df20:	2101      	movs	r1, #1
 800df22:	68f8      	ldr	r0, [r7, #12]
 800df24:	f7fe ffe8 	bl	800cef8 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d042      	beq.n	800dfb8 <rx_dhcp_client+0x398>
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d03f      	beq.n	800dfb8 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 800df38:	f107 0318 	add.w	r3, r7, #24
 800df3c:	461a      	mov	r2, r3
 800df3e:	2102      	movs	r1, #2
 800df40:	68f8      	ldr	r0, [r7, #12]
 800df42:	f7fe ffd9 	bl	800cef8 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800df46:	e037      	b.n	800dfb8 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800df4e:	2b04      	cmp	r3, #4
 800df50:	d133      	bne.n	800dfba <rx_dhcp_client+0x39a>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800df58:	429a      	cmp	r2, r3
 800df5a:	d12e      	bne.n	800dfba <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800df62:	6a39      	ldr	r1, [r7, #32]
 800df64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800df68:	fb00 f101 	mul.w	r1, r0, r1
 800df6c:	2000      	movs	r0, #0
 800df6e:	460c      	mov	r4, r1
 800df70:	4605      	mov	r5, r0
 800df72:	eb12 0a04 	adds.w	sl, r2, r4
 800df76:	eb43 0b05 	adc.w	fp, r3, r5
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800df80:	4b17      	ldr	r3, [pc, #92]	@ (800dfe0 <rx_dhcp_client+0x3c0>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b01      	cmp	r3, #1
 800df86:	dd18      	ble.n	800dfba <rx_dhcp_client+0x39a>
 800df88:	4b16      	ldr	r3, [pc, #88]	@ (800dfe4 <rx_dhcp_client+0x3c4>)
 800df8a:	f241 2210 	movw	r2, #4624	@ 0x1210
 800df8e:	4916      	ldr	r1, [pc, #88]	@ (800dfe8 <rx_dhcp_client+0x3c8>)
 800df90:	2002      	movs	r0, #2
 800df92:	f7fe f9d3 	bl	800c33c <mg_log_prefix>
 800df96:	6a3c      	ldr	r4, [r7, #32]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800df9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dfa2:	f04f 0300 	mov.w	r3, #0
 800dfa6:	f7f2 fa1b 	bl	80003e0 <__aeabi_uldivmod>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	4621      	mov	r1, r4
 800dfb0:	480e      	ldr	r0, [pc, #56]	@ (800dfec <rx_dhcp_client+0x3cc>)
 800dfb2:	f7fe fa13 	bl	800c3dc <mg_log>
 800dfb6:	e000      	b.n	800dfba <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800dfb8:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dfc0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d006      	beq.n	800dfd6 <rx_dhcp_client+0x3b6>
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f7ff f909 	bl	800d1e0 <onstatechange>
 800dfce:	e002      	b.n	800dfd6 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800dfd0:	bf00      	nop
 800dfd2:	e000      	b.n	800dfd6 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800dfd4:	bf00      	nop
}
 800dfd6:	3740      	adds	r7, #64	@ 0x40
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfde:	bf00      	nop
 800dfe0:	24000258 	.word	0x24000258
 800dfe4:	08027e38 	.word	0x08027e38
 800dfe8:	080241e8 	.word	0x080241e8
 800dfec:	08025430 	.word	0x08025430

0800dff0 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800dff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff4:	b0d8      	sub	sp, #352	@ 0x160
 800dff6:	af04      	add	r7, sp, #16
 800dff8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800dffc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e000:	6018      	str	r0, [r3, #0]
 800e002:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e006:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e00a:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800e00c:	2300      	movs	r3, #0
 800e00e:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 800e012:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e016:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e01e:	33f0      	adds	r3, #240	@ 0xf0
 800e020:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800e024:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e028:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e034:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	4413      	add	r3, r2
 800e03e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800e042:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e046:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e04e:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800e052:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800e056:	429a      	cmp	r2, r3
 800e058:	f0c0 81b0 	bcc.w	800e3bc <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800e05c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e060:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e064:	4ad8      	ldr	r2, [pc, #864]	@ (800e3c8 <rx_dhcp_server+0x3d8>)
 800e066:	4618      	mov	r0, r3
 800e068:	4611      	mov	r1, r2
 800e06a:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800e06e:	461a      	mov	r2, r3
 800e070:	f015 fb87 	bl	8023782 <memcpy>
  res.yiaddr = ifp->ip;
 800e074:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e078:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	689a      	ldr	r2, [r3, #8]
 800e080:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e084:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e088:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800e08a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e08e:	3310      	adds	r3, #16
 800e090:	3303      	adds	r3, #3
 800e092:	781a      	ldrb	r2, [r3, #0]
 800e094:	3201      	adds	r2, #1
 800e096:	b2d2      	uxtb	r2, r2
 800e098:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800e09a:	e020      	b.n	800e0de <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800e09c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	2b35      	cmp	r3, #53	@ 0x35
 800e0a4:	d111      	bne.n	800e0ca <rx_dhcp_server+0xda>
 800e0a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d10b      	bne.n	800e0ca <rx_dhcp_server+0xda>
 800e0b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e0b6:	3302      	adds	r3, #2
 800e0b8:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d904      	bls.n	800e0ca <rx_dhcp_server+0xda>
      op = p[2];
 800e0c0:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e0c4:	789b      	ldrb	r3, [r3, #2]
 800e0c6:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
    }
    p += p[1] + 2;
 800e0ca:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	3302      	adds	r3, #2
 800e0d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800e0d8:	4413      	add	r3, r2
 800e0da:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800e0de:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d904      	bls.n	800e0f6 <rx_dhcp_server+0x106>
 800e0ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	2bff      	cmp	r3, #255	@ 0xff
 800e0f4:	d1d2      	bne.n	800e09c <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800e0f6:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800e0fa:	2b01      	cmp	r3, #1
 800e0fc:	d004      	beq.n	800e108 <rx_dhcp_server+0x118>
 800e0fe:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800e102:	2b03      	cmp	r3, #3
 800e104:	f040 815b 	bne.w	800e3be <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800e108:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d101      	bne.n	800e114 <rx_dhcp_server+0x124>
 800e110:	2302      	movs	r3, #2
 800e112:	e000      	b.n	800e116 <rx_dhcp_server+0x126>
 800e114:	2305      	movs	r3, #5
 800e116:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
    uint8_t opts[] = {
 800e11a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e11e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e122:	2235      	movs	r2, #53	@ 0x35
 800e124:	701a      	strb	r2, [r3, #0]
 800e126:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e12a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e12e:	2201      	movs	r2, #1
 800e130:	705a      	strb	r2, [r3, #1]
 800e132:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e136:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e13a:	f897 2143 	ldrb.w	r2, [r7, #323]	@ 0x143
 800e13e:	709a      	strb	r2, [r3, #2]
 800e140:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e144:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e148:	2201      	movs	r2, #1
 800e14a:	70da      	strb	r2, [r3, #3]
 800e14c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e150:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e154:	2204      	movs	r2, #4
 800e156:	711a      	strb	r2, [r3, #4]
 800e158:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e15c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e160:	2200      	movs	r2, #0
 800e162:	715a      	strb	r2, [r3, #5]
 800e164:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e168:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e16c:	2200      	movs	r2, #0
 800e16e:	719a      	strb	r2, [r3, #6]
 800e170:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e174:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e178:	2200      	movs	r2, #0
 800e17a:	71da      	strb	r2, [r3, #7]
 800e17c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e180:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e184:	2200      	movs	r2, #0
 800e186:	721a      	strb	r2, [r3, #8]
 800e188:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e18c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e190:	2236      	movs	r2, #54	@ 0x36
 800e192:	725a      	strb	r2, [r3, #9]
 800e194:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e198:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e19c:	2204      	movs	r2, #4
 800e19e:	729a      	strb	r2, [r3, #10]
 800e1a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e1a4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	72da      	strb	r2, [r3, #11]
 800e1ac:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e1b0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	731a      	strb	r2, [r3, #12]
 800e1b8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e1bc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	735a      	strb	r2, [r3, #13]
 800e1c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e1c8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	739a      	strb	r2, [r3, #14]
 800e1d0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e1d4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1d8:	220c      	movs	r2, #12
 800e1da:	73da      	strb	r2, [r3, #15]
 800e1dc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e1e0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	741a      	strb	r2, [r3, #16]
 800e1e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e1ec:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1f0:	226d      	movs	r2, #109	@ 0x6d
 800e1f2:	745a      	strb	r2, [r3, #17]
 800e1f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e1f8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e1fc:	2269      	movs	r2, #105	@ 0x69
 800e1fe:	749a      	strb	r2, [r3, #18]
 800e200:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e204:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e208:	2270      	movs	r2, #112	@ 0x70
 800e20a:	74da      	strb	r2, [r3, #19]
 800e20c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e210:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e214:	2233      	movs	r2, #51	@ 0x33
 800e216:	751a      	strb	r2, [r3, #20]
 800e218:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e21c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e220:	2204      	movs	r2, #4
 800e222:	755a      	strb	r2, [r3, #21]
 800e224:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e228:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e22c:	22ff      	movs	r2, #255	@ 0xff
 800e22e:	759a      	strb	r2, [r3, #22]
 800e230:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e234:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e238:	22ff      	movs	r2, #255	@ 0xff
 800e23a:	75da      	strb	r2, [r3, #23]
 800e23c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e240:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e244:	22ff      	movs	r2, #255	@ 0xff
 800e246:	761a      	strb	r2, [r3, #24]
 800e248:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e24c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e250:	22ff      	movs	r2, #255	@ 0xff
 800e252:	765a      	strb	r2, [r3, #25]
 800e254:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e258:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e25c:	22ff      	movs	r2, #255	@ 0xff
 800e25e:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800e260:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e264:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e26c:	f103 011c 	add.w	r1, r3, #28
 800e270:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e274:	331c      	adds	r3, #28
 800e276:	2206      	movs	r2, #6
 800e278:	4618      	mov	r0, r3
 800e27a:	f015 fa82 	bl	8023782 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800e27e:	f107 030c 	add.w	r3, r7, #12
 800e282:	3305      	adds	r3, #5
 800e284:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800e288:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800e28c:	6812      	ldr	r2, [r2, #0]
 800e28e:	320c      	adds	r2, #12
 800e290:	6812      	ldr	r2, [r2, #0]
 800e292:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800e294:	f107 030c 	add.w	r3, r7, #12
 800e298:	330b      	adds	r3, #11
 800e29a:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800e29e:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800e2a2:	6812      	ldr	r2, [r2, #0]
 800e2a4:	3208      	adds	r2, #8
 800e2a6:	6812      	ldr	r2, [r2, #0]
 800e2a8:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800e2aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e2b2:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800e2b6:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e2ba:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800e2be:	4615      	mov	r5, r2
 800e2c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e2c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e2c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e2c8:	c403      	stmia	r4!, {r0, r1}
 800e2ca:	8022      	strh	r2, [r4, #0]
 800e2cc:	3402      	adds	r4, #2
 800e2ce:	0c13      	lsrs	r3, r2, #16
 800e2d0:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800e2d2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2d6:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2de:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800e2e2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e2ea:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800e2ee:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2f2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e300:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e304:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800e306:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e30a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	7f9b      	ldrb	r3, [r3, #30]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d01c      	beq.n	800e350 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 800e316:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e31a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e31e:	691a      	ldr	r2, [r3, #16]
 800e320:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e324:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800e32c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e330:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800e33a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e33e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	691b      	ldr	r3, [r3, #16]
 800e346:	3306      	adds	r3, #6
 800e348:	2206      	movs	r2, #6
 800e34a:	4619      	mov	r1, r3
 800e34c:	f015 fa19 	bl	8023782 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800e350:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e354:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	1d9d      	adds	r5, r3, #6
 800e35e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e362:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	689e      	ldr	r6, [r3, #8]
 800e36a:	2043      	movs	r0, #67	@ 0x43
 800e36c:	f011 f8cc 	bl	801f508 <mg_ntohs>
 800e370:	4603      	mov	r3, r0
 800e372:	4698      	mov	r8, r3
 800e374:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d005      	beq.n	800e388 <rx_dhcp_server+0x398>
 800e37c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e380:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e384:	691c      	ldr	r4, [r3, #16]
 800e386:	e001      	b.n	800e38c <rx_dhcp_server+0x39c>
 800e388:	f04f 34ff 	mov.w	r4, #4294967295
 800e38c:	2044      	movs	r0, #68	@ 0x44
 800e38e:	f011 f8bb 	bl	801f508 <mg_ntohs>
 800e392:	4603      	mov	r3, r0
 800e394:	461a      	mov	r2, r3
 800e396:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e39a:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 800e39e:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800e3a2:	9303      	str	r3, [sp, #12]
 800e3a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e3a8:	9302      	str	r3, [sp, #8]
 800e3aa:	9201      	str	r2, [sp, #4]
 800e3ac:	9400      	str	r4, [sp, #0]
 800e3ae:	4643      	mov	r3, r8
 800e3b0:	4632      	mov	r2, r6
 800e3b2:	4629      	mov	r1, r5
 800e3b4:	6800      	ldr	r0, [r0, #0]
 800e3b6:	f7ff f814 	bl	800d3e2 <tx_udp>
 800e3ba:	e000      	b.n	800e3be <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800e3bc:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800e3be:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c8:	08025448 	.word	0x08025448

0800e3cc <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3da:	2201      	movs	r2, #1
 800e3dc:	6839      	ldr	r1, [r7, #0]
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7ff fa3e 	bl	800d860 <getpeer>
 800e3e4:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d059      	beq.n	800e4a0 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f0:	881b      	ldrh	r3, [r3, #0]
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	331c      	adds	r3, #28
 800e3fc:	683a      	ldr	r2, [r7, #0]
 800e3fe:	69d2      	ldr	r2, [r2, #28]
 800e400:	320c      	adds	r2, #12
 800e402:	6812      	ldr	r2, [r2, #0]
 800e404:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	33b0      	adds	r3, #176	@ 0xb0
 800e40a:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	f103 001a 	add.w	r0, r3, #26
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	691b      	ldr	r3, [r3, #16]
 800e416:	3306      	adds	r3, #6
 800e418:	2206      	movs	r2, #6
 800e41a:	4619      	mov	r1, r3
 800e41c:	f015 f9b1 	bl	8023782 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e424:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e428:	d304      	bcc.n	800e434 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800e42a:	491f      	ldr	r1, [pc, #124]	@ (800e4a8 <rx_udp+0xdc>)
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f7f8 fa75 	bl	800691c <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800e432:	e035      	b.n	800e4a0 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e43c:	1ad2      	subs	r2, r2, r3
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	429a      	cmp	r2, r3
 800e444:	d212      	bcs.n	800e46c <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	4413      	add	r3, r2
 800e456:	4619      	mov	r1, r3
 800e458:	f7fc ffc6 	bl	800b3e8 <mg_iobuf_resize>
 800e45c:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d104      	bne.n	800e46c <rx_udp+0xa0>
      mg_error(c, "oom");
 800e462:	4912      	ldr	r1, [pc, #72]	@ (800e4ac <rx_udp+0xe0>)
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f7f8 fa59 	bl	800691c <mg_error>
}
 800e46a:	e019      	b.n	800e4a0 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e474:	18d0      	adds	r0, r2, r3
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	6899      	ldr	r1, [r3, #8]
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	461a      	mov	r2, r3
 800e480:	f015 f97f 	bl	8023782 <memcpy>
      c->recv.len += pkt->pay.len;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e488:	683b      	ldr	r3, [r7, #0]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	441a      	add	r2, r3
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	330c      	adds	r3, #12
 800e496:	461a      	mov	r2, r3
 800e498:	2107      	movs	r1, #7
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f7f8 fa1d 	bl	80068da <mg_call>
}
 800e4a0:	bf00      	nop
 800e4a2:	3710      	adds	r7, #16
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	bd80      	pop	{r7, pc}
 800e4a8:	08025564 	.word	0x08025564
 800e4ac:	08025580 	.word	0x08025580

0800e4b0 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800e4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4b2:	b091      	sub	sp, #68	@ 0x44
 800e4b4:	af06      	add	r7, sp, #24
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	70fb      	strb	r3, [r7, #3]
  struct ip *ip;
  struct tcp *tcp;
  uint16_t opts[4 / 2];
  if (flags & TH_SYN) {                 // Send MSS, RFC-9293 3.7.1
 800e4be:	78fb      	ldrb	r3, [r7, #3]
 800e4c0:	f003 0302 	and.w	r3, r3, #2
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d014      	beq.n	800e4f2 <tx_tcp+0x42>
    opts[0] = mg_htons(0x0204);         // RFC-9293 3.2
 800e4c8:	f44f 7001 	mov.w	r0, #516	@ 0x204
 800e4cc:	f011 f81c 	bl	801f508 <mg_ntohs>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	82bb      	strh	r3, [r7, #20]
    opts[1] = mg_htons(ifp->mtu - 40);  // RFC-6691
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e4da:	3b28      	subs	r3, #40	@ 0x28
 800e4dc:	b29b      	uxth	r3, r3
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f011 f812 	bl	801f508 <mg_ntohs>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	82fb      	strh	r3, [r7, #22]
    buf = opts;
 800e4e8:	f107 0314 	add.w	r3, r7, #20
 800e4ec:	653b      	str	r3, [r7, #80]	@ 0x50
    len = sizeof(opts);
 800e4ee:	2304      	movs	r3, #4
 800e4f0:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  ip = tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	689a      	ldr	r2, [r3, #8]
 800e4f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4f8:	3314      	adds	r3, #20
 800e4fa:	9301      	str	r3, [sp, #4]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	4613      	mov	r3, r2
 800e502:	2206      	movs	r2, #6
 800e504:	68b9      	ldr	r1, [r7, #8]
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f7fe ff14 	bl	800d334 <tx_ip>
 800e50c:	6278      	str	r0, [r7, #36]	@ 0x24
  tcp = (struct tcp *) (ip + 1);
 800e50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e510:	3314      	adds	r3, #20
 800e512:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800e514:	2214      	movs	r2, #20
 800e516:	2100      	movs	r1, #0
 800e518:	6a38      	ldr	r0, [r7, #32]
 800e51a:	f014 fffc 	bl	8023516 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800e51e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e520:	2b00      	cmp	r3, #0
 800e522:	d009      	beq.n	800e538 <tx_tcp+0x88>
 800e524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e526:	2b00      	cmp	r3, #0
 800e528:	d006      	beq.n	800e538 <tx_tcp+0x88>
 800e52a:	6a3b      	ldr	r3, [r7, #32]
 800e52c:	3314      	adds	r3, #20
 800e52e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e530:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e532:	4618      	mov	r0, r3
 800e534:	f014 ffd5 	bl	80234e2 <memmove>
  tcp->sport = sport;
 800e538:	6a3b      	ldr	r3, [r7, #32]
 800e53a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800e53e:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800e546:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800e548:	6a3b      	ldr	r3, [r7, #32]
 800e54a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e54c:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800e54e:	6a3b      	ldr	r3, [r7, #32]
 800e550:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e552:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800e554:	6a3b      	ldr	r3, [r7, #32]
 800e556:	78fa      	ldrb	r2, [r7, #3]
 800e558:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 800e55a:	f241 7070 	movw	r0, #6000	@ 0x1770
 800e55e:	f010 ffd3 	bl	801f508 <mg_ntohs>
 800e562:	4603      	mov	r3, r0
 800e564:	461a      	mov	r2, r3
 800e566:	6a3b      	ldr	r3, [r7, #32]
 800e568:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800e56a:	6a3b      	ldr	r3, [r7, #32]
 800e56c:	2250      	movs	r2, #80	@ 0x50
 800e56e:	731a      	strb	r2, [r3, #12]
  if (flags & TH_SYN) tcp->off += (uint8_t) (sizeof(opts) / 4 << 4);
 800e570:	78fb      	ldrb	r3, [r7, #3]
 800e572:	f003 0302 	and.w	r3, r3, #2
 800e576:	2b00      	cmp	r3, #0
 800e578:	d005      	beq.n	800e586 <tx_tcp+0xd6>
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	7b1b      	ldrb	r3, [r3, #12]
 800e57e:	3310      	adds	r3, #16
 800e580:	b2da      	uxtb	r2, r3
 800e582:	6a3b      	ldr	r3, [r7, #32]
 800e584:	731a      	strb	r2, [r3, #12]

  uint32_t cs = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800e58a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	3314      	adds	r3, #20
 800e590:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800e592:	2300      	movs	r3, #0
 800e594:	743b      	strb	r3, [r7, #16]
 800e596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e598:	7a5b      	ldrb	r3, [r3, #9]
 800e59a:	747b      	strb	r3, [r7, #17]
 800e59c:	8b7b      	ldrh	r3, [r7, #26]
 800e59e:	0a1b      	lsrs	r3, r3, #8
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	74bb      	strb	r3, [r7, #18]
 800e5a6:	8b7b      	ldrh	r3, [r7, #26]
 800e5a8:	b2db      	uxtb	r3, r3
 800e5aa:	74fb      	strb	r3, [r7, #19]
  cs = csumup(cs, tcp, n);
 800e5ac:	8b7b      	ldrh	r3, [r7, #26]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	6a39      	ldr	r1, [r7, #32]
 800e5b2:	69f8      	ldr	r0, [r7, #28]
 800e5b4:	f7fe fcd2 	bl	800cf5c <csumup>
 800e5b8:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800e5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5bc:	330c      	adds	r3, #12
 800e5be:	2204      	movs	r2, #4
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	69f8      	ldr	r0, [r7, #28]
 800e5c4:	f7fe fcca 	bl	800cf5c <csumup>
 800e5c8:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5cc:	3310      	adds	r3, #16
 800e5ce:	2204      	movs	r2, #4
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	69f8      	ldr	r0, [r7, #28]
 800e5d4:	f7fe fcc2 	bl	800cf5c <csumup>
 800e5d8:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800e5da:	f107 0310 	add.w	r3, r7, #16
 800e5de:	2204      	movs	r2, #4
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	69f8      	ldr	r0, [r7, #28]
 800e5e4:	f7fe fcba 	bl	800cf5c <csumup>
 800e5e8:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800e5ea:	69f8      	ldr	r0, [r7, #28]
 800e5ec:	f7fe fce1 	bl	800cfb2 <csumfin>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	461a      	mov	r2, r3
 800e5f4:	6a3b      	ldr	r3, [r7, #32]
 800e5f6:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800e5f8:	4b21      	ldr	r3, [pc, #132]	@ (800e680 <tx_tcp+0x1d0>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b03      	cmp	r3, #3
 800e5fe:	dd2c      	ble.n	800e65a <tx_tcp+0x1aa>
 800e600:	4b20      	ldr	r3, [pc, #128]	@ (800e684 <tx_tcp+0x1d4>)
 800e602:	f241 2275 	movw	r2, #4725	@ 0x1275
 800e606:	4920      	ldr	r1, [pc, #128]	@ (800e688 <tx_tcp+0x1d8>)
 800e608:	2004      	movs	r0, #4
 800e60a:	f7fd fe97 	bl	800c33c <mg_log_prefix>
 800e60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e610:	f103 050c 	add.w	r5, r3, #12
 800e614:	6a3b      	ldr	r3, [r7, #32]
 800e616:	881b      	ldrh	r3, [r3, #0]
 800e618:	b29b      	uxth	r3, r3
 800e61a:	4618      	mov	r0, r3
 800e61c:	f010 ff74 	bl	801f508 <mg_ntohs>
 800e620:	4603      	mov	r3, r0
 800e622:	461e      	mov	r6, r3
 800e624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e626:	f103 0410 	add.w	r4, r3, #16
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	885b      	ldrh	r3, [r3, #2]
 800e62e:	b29b      	uxth	r3, r3
 800e630:	4618      	mov	r0, r3
 800e632:	f010 ff69 	bl	801f508 <mg_ntohs>
 800e636:	4603      	mov	r3, r0
 800e638:	461a      	mov	r2, r3
 800e63a:	6a3b      	ldr	r3, [r7, #32]
 800e63c:	7b5b      	ldrb	r3, [r3, #13]
 800e63e:	4619      	mov	r1, r3
 800e640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e642:	9304      	str	r3, [sp, #16]
 800e644:	9103      	str	r1, [sp, #12]
 800e646:	9202      	str	r2, [sp, #8]
 800e648:	9401      	str	r4, [sp, #4]
 800e64a:	4b10      	ldr	r3, [pc, #64]	@ (800e68c <tx_tcp+0x1dc>)
 800e64c:	9300      	str	r3, [sp, #0]
 800e64e:	4633      	mov	r3, r6
 800e650:	462a      	mov	r2, r5
 800e652:	490e      	ldr	r1, [pc, #56]	@ (800e68c <tx_tcp+0x1dc>)
 800e654:	480e      	ldr	r0, [pc, #56]	@ (800e690 <tx_tcp+0x1e0>)
 800e656:	f7fd fec1 	bl	800c3dc <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800e65a:	6a3b      	ldr	r3, [r7, #32]
 800e65c:	f103 0214 	add.w	r2, r3, #20
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	695b      	ldr	r3, [r3, #20]
 800e664:	1ad3      	subs	r3, r2, r3
 800e666:	461a      	mov	r2, r3
 800e668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e66a:	4413      	add	r3, r2
 800e66c:	4619      	mov	r1, r3
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f7fe fd32 	bl	800d0d8 <ether_output>
 800e674:	4603      	mov	r3, r0
}
 800e676:	4618      	mov	r0, r3
 800e678:	372c      	adds	r7, #44	@ 0x2c
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e67e:	bf00      	nop
 800e680:	24000258 	.word	0x24000258
 800e684:	08027e48 	.word	0x08027e48
 800e688:	080241e8 	.word	0x080241e8
 800e68c:	08010a01 	.word	0x08010a01
 800e690:	08025584 	.word	0x08025584

0800e694 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800e694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e698:	b08c      	sub	sp, #48	@ 0x30
 800e69a:	af06      	add	r7, sp, #24
 800e69c:	60f8      	str	r0, [r7, #12]
 800e69e:	60b9      	str	r1, [r7, #8]
 800e6a0:	603b      	str	r3, [r7, #0]
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6aa:	7b5b      	ldrb	r3, [r3, #13]
 800e6ac:	f003 0303 	and.w	r3, r3, #3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	bf14      	ite	ne
 800e6b4:	2301      	movne	r3, #1
 800e6b6:	2300      	moveq	r3, #0
 800e6b8:	b2db      	uxtb	r3, r3
 800e6ba:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	1d9e      	adds	r6, r3, #6
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	69db      	ldr	r3, [r3, #28]
 800e6c6:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6ce:	885b      	ldrh	r3, [r3, #2]
 800e6d0:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800e6d6:	881b      	ldrh	r3, [r3, #0]
 800e6d8:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f010 ff28 	bl	801f536 <mg_ntohl>
 800e6e6:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f010 ff22 	bl	801f536 <mg_ntohl>
 800e6f2:	4601      	mov	r1, r0
 800e6f4:	79fa      	ldrb	r2, [r7, #7]
 800e6f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6f8:	9305      	str	r3, [sp, #20]
 800e6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6fc:	9304      	str	r3, [sp, #16]
 800e6fe:	9103      	str	r1, [sp, #12]
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	9302      	str	r3, [sp, #8]
 800e704:	9501      	str	r5, [sp, #4]
 800e706:	9400      	str	r4, [sp, #0]
 800e708:	4613      	mov	r3, r2
 800e70a:	4642      	mov	r2, r8
 800e70c:	4631      	mov	r1, r6
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7ff fece 	bl	800e4b0 <tx_tcp>
 800e714:	4603      	mov	r3, r0
                buf, len);
}
 800e716:	4618      	mov	r0, r3
 800e718:	3718      	adds	r7, #24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e720 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800e720:	b5b0      	push	{r4, r5, r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	4618      	mov	r0, r3
 800e730:	f7fe f9ed 	bl	800cb0e <mg_alloc_conn>
 800e734:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d10f      	bne.n	800e75c <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 800e73c:	4b5e      	ldr	r3, [pc, #376]	@ (800e8b8 <accept_conn+0x198>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	dd09      	ble.n	800e758 <accept_conn+0x38>
 800e744:	4b5d      	ldr	r3, [pc, #372]	@ (800e8bc <accept_conn+0x19c>)
 800e746:	f241 2289 	movw	r2, #4745	@ 0x1289
 800e74a:	495d      	ldr	r1, [pc, #372]	@ (800e8c0 <accept_conn+0x1a0>)
 800e74c:	2001      	movs	r0, #1
 800e74e:	f7fd fdf5 	bl	800c33c <mg_log_prefix>
 800e752:	485c      	ldr	r0, [pc, #368]	@ (800e8c4 <accept_conn+0x1a4>)
 800e754:	f7fd fe42 	bl	800c3dc <mg_log>
    return NULL;
 800e758:	2300      	movs	r3, #0
 800e75a:	e0a8      	b.n	800e8ae <accept_conn+0x18e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	33b0      	adds	r3, #176	@ 0xb0
 800e760:	60bb      	str	r3, [r7, #8]
  s->dmss = 536;  // assume default, RFC-9293 3.7.1
 800e762:	68bb      	ldr	r3, [r7, #8]
 800e764:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e768:	831a      	strh	r2, [r3, #24]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	4618      	mov	r0, r3
 800e772:	f010 fee0 	bl	801f536 <mg_ntohl>
 800e776:	4602      	mov	r2, r0
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	601a      	str	r2, [r3, #0]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	4618      	mov	r0, r3
 800e784:	f010 fed7 	bl	801f536 <mg_ntohl>
 800e788:	4602      	mov	r2, r0
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	f103 001a 	add.w	r0, r3, #26
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	3306      	adds	r3, #6
 800e79a:	2206      	movs	r2, #6
 800e79c:	4619      	mov	r1, r3
 800e79e:	f014 fff0 	bl	8023782 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800e7a2:	2100      	movs	r1, #0
 800e7a4:	68f8      	ldr	r0, [r7, #12]
 800e7a6:	f7fe fc33 	bl	800d010 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	331c      	adds	r3, #28
 800e7ae:	683a      	ldr	r2, [r7, #0]
 800e7b0:	69d2      	ldr	r2, [r2, #28]
 800e7b2:	320c      	adds	r2, #12
 800e7b4:	6812      	ldr	r2, [r2, #0]
 800e7b6:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7bc:	881b      	ldrh	r3, [r3, #0]
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800e7c4:	4b3c      	ldr	r3, [pc, #240]	@ (800e8b8 <accept_conn+0x198>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	dd0e      	ble.n	800e7ea <accept_conn+0xca>
 800e7cc:	4b3b      	ldr	r3, [pc, #236]	@ (800e8bc <accept_conn+0x19c>)
 800e7ce:	f241 2293 	movw	r2, #4755	@ 0x1293
 800e7d2:	493b      	ldr	r1, [pc, #236]	@ (800e8c0 <accept_conn+0x1a0>)
 800e7d4:	2003      	movs	r0, #3
 800e7d6:	f7fd fdb1 	bl	800c33c <mg_log_prefix>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	331c      	adds	r3, #28
 800e7e2:	4a39      	ldr	r2, [pc, #228]	@ (800e8c8 <accept_conn+0x1a8>)
 800e7e4:	4839      	ldr	r0, [pc, #228]	@ (800e8cc <accept_conn+0x1ac>)
 800e7e6:	f7fd fdf9 	bl	800c3dc <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	601a      	str	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e802:	f043 0304 	orr.w	r3, r3, #4
 800e806:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e810:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e814:	b2d9      	uxtb	r1, r3
 800e816:	68fa      	ldr	r2, [r7, #12]
 800e818:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800e81c:	f361 03c3 	bfi	r3, r1, #3, #1
 800e820:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 800e830:	68fa      	ldr	r2, [r7, #12]
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	f102 0408 	add.w	r4, r2, #8
 800e838:	f103 0508 	add.w	r5, r3, #8
 800e83c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e83e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e840:	682b      	ldr	r3, [r5, #0]
 800e842:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	67da      	str	r2, [r3, #124]	@ 0x7c
  c->is_tls = lsn->is_tls;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e866:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e86a:	b2d9      	uxtb	r1, r3
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e872:	f361 1386 	bfi	r3, r1, #6, #1
 800e876:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_call(c, MG_EV_OPEN, NULL);
 800e87a:	2200      	movs	r2, #0
 800e87c:	2101      	movs	r1, #1
 800e87e:	68f8      	ldr	r0, [r7, #12]
 800e880:	f7f8 f82b 	bl	80068da <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800e884:	2200      	movs	r2, #0
 800e886:	2105      	movs	r1, #5
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f7f8 f826 	bl	80068da <mg_call>
  if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e894:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d106      	bne.n	800e8ac <accept_conn+0x18c>
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e8a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8a8:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  return c;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	24000258 	.word	0x24000258
 800e8bc:	08027e50 	.word	0x08027e50
 800e8c0:	080241e8 	.word	0x080241e8
 800e8c4:	080251a4 	.word	0x080251a4
 800e8c8:	08010a79 	.word	0x08010a79
 800e8cc:	080255a8 	.word	0x080255a8

0800e8d0 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b08a      	sub	sp, #40	@ 0x28
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	685b      	ldr	r3, [r3, #4]
 800e8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8e0:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 800e8e2:	230e      	movs	r3, #14
 800e8e4:	623b      	str	r3, [r7, #32]
 800e8e6:	2318      	movs	r3, #24
 800e8e8:	61fb      	str	r3, [r7, #28]
 800e8ea:	233c      	movs	r3, #60	@ 0x3c
 800e8ec:	61bb      	str	r3, [r7, #24]
 800e8ee:	2308      	movs	r3, #8
 800e8f0:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 800e8f2:	6a3a      	ldr	r2, [r7, #32]
 800e8f4:	69fb      	ldr	r3, [r7, #28]
 800e8f6:	441a      	add	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e8fe:	f003 0301 	and.w	r3, r3, #1
 800e902:	b2db      	uxtb	r3, r3
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <trim_len+0x3c>
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	e000      	b.n	800e90e <trim_len+0x3e>
 800e90c:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800e90e:	4413      	add	r3, r2
 800e910:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e918:	f003 0301 	and.w	r3, r3, #1
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d103      	bne.n	800e92a <trim_len+0x5a>
 800e922:	693a      	ldr	r2, [r7, #16]
 800e924:	6a3b      	ldr	r3, [r7, #32]
 800e926:	1ad3      	subs	r3, r2, r3
 800e928:	e000      	b.n	800e92c <trim_len+0x5c>
 800e92a:	2344      	movs	r3, #68	@ 0x44
 800e92c:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	693b      	ldr	r3, [r7, #16]
 800e932:	441a      	add	r2, r3
 800e934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e936:	699b      	ldr	r3, [r3, #24]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d904      	bls.n	800e946 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800e93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e93e:	699a      	ldr	r2, [r3, #24]
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	1ad3      	subs	r3, r2, r3
 800e944:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 800e946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e94c:	461a      	mov	r2, r3
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	4293      	cmp	r3, r2
 800e952:	d913      	bls.n	800e97c <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 800e954:	4b20      	ldr	r3, [pc, #128]	@ (800e9d8 <trim_len+0x108>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	dd0a      	ble.n	800e972 <trim_len+0xa2>
 800e95c:	4b1f      	ldr	r3, [pc, #124]	@ (800e9dc <trim_len+0x10c>)
 800e95e:	f241 22b0 	movw	r2, #4784	@ 0x12b0
 800e962:	491f      	ldr	r1, [pc, #124]	@ (800e9e0 <trim_len+0x110>)
 800e964:	2001      	movs	r0, #1
 800e966:	f7fd fce9 	bl	800c33c <mg_log_prefix>
 800e96a:	68f9      	ldr	r1, [r7, #12]
 800e96c:	481d      	ldr	r0, [pc, #116]	@ (800e9e4 <trim_len+0x114>)
 800e96e:	f7fd fd35 	bl	800c3dc <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	b29a      	uxth	r2, r3
 800e976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e978:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800e97c:	683a      	ldr	r2, [r7, #0]
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	441a      	add	r2, r3
 800e982:	6a3b      	ldr	r3, [r7, #32]
 800e984:	1ad3      	subs	r3, r2, r3
 800e986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e988:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d91e      	bls.n	800e9ce <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 800e990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e992:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e996:	461a      	mov	r2, r3
 800e998:	693b      	ldr	r3, [r7, #16]
 800e99a:	1ad3      	subs	r3, r2, r3
 800e99c:	6a3a      	ldr	r2, [r7, #32]
 800e99e:	4413      	add	r3, r2
 800e9a0:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e9a8:	f003 0301 	and.w	r3, r3, #1
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00d      	beq.n	800e9ce <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 800e9b2:	4b09      	ldr	r3, [pc, #36]	@ (800e9d8 <trim_len+0x108>)
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	dd09      	ble.n	800e9ce <trim_len+0xfe>
 800e9ba:	4b08      	ldr	r3, [pc, #32]	@ (800e9dc <trim_len+0x10c>)
 800e9bc:	f241 22b7 	movw	r2, #4791	@ 0x12b7
 800e9c0:	4907      	ldr	r1, [pc, #28]	@ (800e9e0 <trim_len+0x110>)
 800e9c2:	2001      	movs	r0, #1
 800e9c4:	f7fd fcba 	bl	800c33c <mg_log_prefix>
 800e9c8:	4807      	ldr	r0, [pc, #28]	@ (800e9e8 <trim_len+0x118>)
 800e9ca:	f7fd fd07 	bl	800c3dc <mg_log>
    }
  }

  return len;
 800e9ce:	683b      	ldr	r3, [r7, #0]
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3728      	adds	r7, #40	@ 0x28
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	24000258 	.word	0x24000258
 800e9dc:	08027e5c 	.word	0x08027e5c
 800e9e0:	080241e8 	.word	0x080241e8
 800e9e4:	080255b8 	.word	0x080255b8
 800e9e8:	080255e4 	.word	0x080255e4

0800e9ec <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800e9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ee:	b08f      	sub	sp, #60	@ 0x3c
 800e9f0:	af06      	add	r7, sp, #24
 800e9f2:	60f8      	str	r0, [r7, #12]
 800e9f4:	60b9      	str	r1, [r7, #8]
 800e9f6:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9fe:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	33b0      	adds	r3, #176	@ 0xb0
 800ea04:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	331c      	adds	r3, #28
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800ea0e:	6879      	ldr	r1, [r7, #4]
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f7ff ff5d 	bl	800e8d0 <trim_len>
 800ea16:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ea1e:	f003 0301 	and.w	r3, r3, #1
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d015      	beq.n	800ea54 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 800ea28:	69bb      	ldr	r3, [r7, #24]
 800ea2a:	f103 011a 	add.w	r1, r3, #26
 800ea2e:	69fb      	ldr	r3, [r7, #28]
 800ea30:	6898      	ldr	r0, [r3, #8]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	8b1c      	ldrh	r4, [r3, #24]
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	9203      	str	r2, [sp, #12]
 800ea3e:	68ba      	ldr	r2, [r7, #8]
 800ea40:	9202      	str	r2, [sp, #8]
 800ea42:	9301      	str	r3, [sp, #4]
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	9300      	str	r3, [sp, #0]
 800ea48:	4623      	mov	r3, r4
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	69f8      	ldr	r0, [r7, #28]
 800ea4e:	f7fe fcc8 	bl	800d3e2 <tx_udp>
 800ea52:	e047      	b.n	800eae4 <mg_io_send+0xf8>
  } else {  // TCP, cap to peer's MSS
    size_t sent;
    if (len > s->dmss) len = s->dmss;  // RFC-6691: reduce if sending opts
 800ea54:	69bb      	ldr	r3, [r7, #24]
 800ea56:	8b1b      	ldrh	r3, [r3, #24]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d902      	bls.n	800ea66 <mg_io_send+0x7a>
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	8b1b      	ldrh	r3, [r3, #24]
 800ea64:	607b      	str	r3, [r7, #4]
    sent = tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port,
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	f103 061a 	add.w	r6, r3, #26
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	8b1c      	ldrh	r4, [r3, #24]
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f010 fd5c 	bl	801f536 <mg_ntohl>
 800ea7e:	6038      	str	r0, [r7, #0]
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f010 fd56 	bl	801f536 <mg_ntohl>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	9305      	str	r3, [sp, #20]
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	9304      	str	r3, [sp, #16]
 800ea94:	9203      	str	r2, [sp, #12]
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	9302      	str	r3, [sp, #8]
 800ea9a:	9501      	str	r5, [sp, #4]
 800ea9c:	9400      	str	r4, [sp, #0]
 800ea9e:	2318      	movs	r3, #24
 800eaa0:	697a      	ldr	r2, [r7, #20]
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	69f8      	ldr	r0, [r7, #28]
 800eaa6:	f7ff fd03 	bl	800e4b0 <tx_tcp>
 800eaaa:	6138      	str	r0, [r7, #16]
                  c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d102      	bne.n	800eab8 <mg_io_send+0xcc>
      return MG_IO_WAIT;
 800eab2:	f06f 0301 	mvn.w	r3, #1
 800eab6:	e016      	b.n	800eae6 <mg_io_send+0xfa>
    } else if (sent == (size_t) -1) {
 800eab8:	693b      	ldr	r3, [r7, #16]
 800eaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eabe:	d102      	bne.n	800eac6 <mg_io_send+0xda>
      return MG_IO_ERR;
 800eac0:	f04f 33ff 	mov.w	r3, #4294967295
 800eac4:	e00f      	b.n	800eae6 <mg_io_send+0xfa>
    } else {
      s->seq += (uint32_t) len;
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	441a      	add	r2, r3
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800ead2:	69bb      	ldr	r3, [r7, #24]
 800ead4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d103      	bne.n	800eae4 <mg_io_send+0xf8>
 800eadc:	2100      	movs	r1, #0
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	f7fe fa96 	bl	800d010 <settmout>
    }
  }
  return (long) len;
 800eae4:	687b      	ldr	r3, [r7, #4]
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3724      	adds	r7, #36	@ 0x24
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800eaf0 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c) {
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  size_t avail = mg_tls_pending(c);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f00a f8a9 	bl	8018c50 <mg_tls_pending>
 800eafe:	6178      	str	r0, [r7, #20]
  size_t min = avail > MG_MAX_RECV_SIZE ? MG_MAX_RECV_SIZE : avail;
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800eb06:	bf28      	it	cs
 800eb08:	f44f 1340 	movcs.w	r3, #3145728	@ 0x300000
 800eb0c:	613b      	str	r3, [r7, #16]
  struct mg_iobuf *io = &c->recv;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	3338      	adds	r3, #56	@ 0x38
 800eb12:	60fb      	str	r3, [r7, #12]
  if (io->size - io->len < min && !mg_iobuf_resize(io, io->len + min)) {
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	1ad3      	subs	r3, r2, r3
 800eb1e:	693a      	ldr	r2, [r7, #16]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d90f      	bls.n	800eb44 <handle_tls_recv+0x54>
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	689a      	ldr	r2, [r3, #8]
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	4413      	add	r3, r2
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f7fc fc5a 	bl	800b3e8 <mg_iobuf_resize>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d104      	bne.n	800eb44 <handle_tls_recv+0x54>
    mg_error(c, "oom");
 800eb3a:	491c      	ldr	r1, [pc, #112]	@ (800ebac <handle_tls_recv+0xbc>)
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	f7f7 feed 	bl	800691c <mg_error>
      // Decrypted successfully - trigger MG_EV_READ
      io->len += (size_t) n;
      mg_call(c, MG_EV_READ, &n);
    }  // else n < 0: outstanding data to be moved to c->recv
  }
}
 800eb42:	e02f      	b.n	800eba4 <handle_tls_recv+0xb4>
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d005      	beq.n	800eb58 <handle_tls_recv+0x68>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	689b      	ldr	r3, [r3, #8]
 800eb54:	4413      	add	r3, r2
 800eb56:	e001      	b.n	800eb5c <handle_tls_recv+0x6c>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
                         io->size - io->len);
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	6851      	ldr	r1, [r2, #4]
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	6892      	ldr	r2, [r2, #8]
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 800eb64:	1a8a      	subs	r2, r1, r2
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f00a f81d 	bl	8018ba8 <mg_tls_recv>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	60bb      	str	r3, [r7, #8]
    if (n == MG_IO_ERR) {
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb78:	d104      	bne.n	800eb84 <handle_tls_recv+0x94>
      mg_error(c, "TLS recv error");
 800eb7a:	490d      	ldr	r1, [pc, #52]	@ (800ebb0 <handle_tls_recv+0xc0>)
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7f7 fecd 	bl	800691c <mg_error>
}
 800eb82:	e00f      	b.n	800eba4 <handle_tls_recv+0xb4>
    } else if (n > 0) {
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	dd0c      	ble.n	800eba4 <handle_tls_recv+0xb4>
      io->len += (size_t) n;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	68ba      	ldr	r2, [r7, #8]
 800eb90:	441a      	add	r2, r3
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	609a      	str	r2, [r3, #8]
      mg_call(c, MG_EV_READ, &n);
 800eb96:	f107 0308 	add.w	r3, r7, #8
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	2107      	movs	r1, #7
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f7f7 fe9b 	bl	80068da <mg_call>
}
 800eba4:	bf00      	nop
 800eba6:	3718      	adds	r7, #24
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	08025580 	.word	0x08025580
 800ebb0:	08025610 	.word	0x08025610

0800ebb4 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800ebb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb8:	b090      	sub	sp, #64	@ 0x40
 800ebba:	af06      	add	r7, sp, #24
 800ebbc:	60f8      	str	r0, [r7, #12]
 800ebbe:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	33b0      	adds	r3, #176	@ 0xb0
 800ebc4:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ebcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d002      	beq.n	800ebdc <read_conn+0x28>
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	3368      	adds	r3, #104	@ 0x68
 800ebda:	e001      	b.n	800ebe0 <read_conn+0x2c>
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	3338      	adds	r3, #56	@ 0x38
 800ebe0:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebe6:	685b      	ldr	r3, [r3, #4]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f010 fca4 	bl	801f536 <mg_ntohl>
 800ebee:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	331c      	adds	r3, #28
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebfc:	7b5b      	ldrb	r3, [r3, #13]
 800ebfe:	f003 0301 	and.w	r3, r3, #1
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d07e      	beq.n	800ed04 <read_conn+0x150>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 800ec06:	2310      	movs	r3, #16
 800ec08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f010 fc8f 	bl	801f536 <mg_ntohl>
 800ec18:	4602      	mov	r2, r0
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	4413      	add	r3, r2
 800ec20:	1c5a      	adds	r2, r3, #1
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	605a      	str	r2, [r3, #4]
    s->fin_rcvd = true;
 800ec26:	6a3b      	ldr	r3, [r7, #32]
 800ec28:	2201      	movs	r2, #1
 800ec2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ec34:	f003 0310 	and.w	r3, r3, #16
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d023      	beq.n	800ec86 <read_conn+0xd2>
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec44:	2b04      	cmp	r3, #4
 800ec46:	d11e      	bne.n	800ec86 <read_conn+0xd2>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800ec48:	6a3b      	ldr	r3, [r7, #32]
 800ec4a:	681c      	ldr	r4, [r3, #0]
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	4618      	mov	r0, r3
 800ec54:	f010 fc6f 	bl	801f536 <mg_ntohl>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	429c      	cmp	r4, r3
 800ec5c:	d105      	bne.n	800ec6a <read_conn+0xb6>
        s->seq++;                               // Yes. Increment our SEQ
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	1c5a      	adds	r2, r3, #1
 800ec64:	6a3b      	ldr	r3, [r7, #32]
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	e008      	b.n	800ec7c <read_conn+0xc8>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ec6e:	689b      	ldr	r3, [r3, #8]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f010 fc60 	bl	801f536 <mg_ntohl>
 800ec76:	4602      	mov	r2, r0
 800ec78:	6a3b      	ldr	r3, [r7, #32]
 800ec7a:	601a      	str	r2, [r3, #0]
      }
      s->twclosure = true;
 800ec7c:	6a3b      	ldr	r3, [r7, #32]
 800ec7e:	2201      	movs	r2, #1
 800ec80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800ec84:	e010      	b.n	800eca8 <read_conn+0xf4>
    } else {
      flags |= TH_FIN;
 800ec86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec8a:	f043 0301 	orr.w	r3, r3, #1
 800ec8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 800ec92:	68fa      	ldr	r2, [r7, #12]
 800ec94:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ec98:	f043 0310 	orr.w	r3, r3, #16
 800ec9c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 800eca0:	2104      	movs	r1, #4
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f7fe f9b4 	bl	800d010 <settmout>
    }
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, flags, c->loc.port, c->rem.port,
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800ecae:	6a3b      	ldr	r3, [r7, #32]
 800ecb0:	f103 081a 	add.w	r8, r3, #26
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	607b      	str	r3, [r7, #4]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	8b1c      	ldrh	r4, [r3, #24]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800ecc0:	6a3b      	ldr	r3, [r7, #32]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f010 fc36 	bl	801f536 <mg_ntohl>
 800ecca:	6038      	str	r0, [r7, #0]
 800eccc:	6a3b      	ldr	r3, [r7, #32]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f010 fc30 	bl	801f536 <mg_ntohl>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecdc:	2100      	movs	r1, #0
 800ecde:	9105      	str	r1, [sp, #20]
 800ece0:	499b      	ldr	r1, [pc, #620]	@ (800ef50 <read_conn+0x39c>)
 800ece2:	9104      	str	r1, [sp, #16]
 800ece4:	9203      	str	r2, [sp, #12]
 800ece6:	6839      	ldr	r1, [r7, #0]
 800ece8:	9102      	str	r1, [sp, #8]
 800ecea:	9501      	str	r5, [sp, #4]
 800ecec:	9400      	str	r4, [sp, #0]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	4641      	mov	r1, r8
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	f7ff fbdc 	bl	800e4b0 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    if (pkt->pay.len == 0) return;  // if no data, we're done
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	f040 808f 	bne.w	800ee20 <read_conn+0x26c>
 800ed02:	e16b      	b.n	800efdc <read_conn+0x428>
  } else if (pkt->pay.len == 0) {   // this is an ACK
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	68db      	ldr	r3, [r3, #12]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d110      	bne.n	800ed2e <read_conn+0x17a>
    if (s->fin_rcvd && s->ttype == MIP_TTYPE_FIN) s->twclosure = true;
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
 800ed0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f000 815f 	beq.w	800efd6 <read_conn+0x422>
 800ed18:	6a3b      	ldr	r3, [r7, #32]
 800ed1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ed1e:	2b04      	cmp	r3, #4
 800ed20:	f040 8159 	bne.w	800efd6 <read_conn+0x422>
 800ed24:	6a3b      	ldr	r3, [r7, #32]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    return;  // no data to process
 800ed2c:	e153      	b.n	800efd6 <read_conn+0x422>
  } else if (seq != s->ack) {
 800ed2e:	6a3b      	ldr	r3, [r7, #32]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	69ba      	ldr	r2, [r7, #24]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d059      	beq.n	800edec <read_conn+0x238>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f010 fbf9 	bl	801f536 <mg_ntohl>
 800ed44:	4602      	mov	r2, r0
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	68db      	ldr	r3, [r3, #12]
 800ed4a:	4413      	add	r3, r2
 800ed4c:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 800ed4e:	6a3b      	ldr	r3, [r7, #32]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d10f      	bne.n	800ed78 <read_conn+0x1c4>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800ed58:	4b7e      	ldr	r3, [pc, #504]	@ (800ef54 <read_conn+0x3a0>)
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	2b03      	cmp	r3, #3
 800ed5e:	f340 813c 	ble.w	800efda <read_conn+0x426>
 800ed62:	4b7d      	ldr	r3, [pc, #500]	@ (800ef58 <read_conn+0x3a4>)
 800ed64:	f241 320c 	movw	r2, #4876	@ 0x130c
 800ed68:	497c      	ldr	r1, [pc, #496]	@ (800ef5c <read_conn+0x3a8>)
 800ed6a:	2004      	movs	r0, #4
 800ed6c:	f7fd fae6 	bl	800c33c <mg_log_prefix>
 800ed70:	487b      	ldr	r0, [pc, #492]	@ (800ef60 <read_conn+0x3ac>)
 800ed72:	f7fd fb33 	bl	800c3dc <mg_log>
    } else {
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
             mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    }
    return;  // drop it
 800ed76:	e130      	b.n	800efda <read_conn+0x426>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800ed78:	4b76      	ldr	r3, [pc, #472]	@ (800ef54 <read_conn+0x3a0>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b03      	cmp	r3, #3
 800ed7e:	dd0d      	ble.n	800ed9c <read_conn+0x1e8>
 800ed80:	4b75      	ldr	r3, [pc, #468]	@ (800ef58 <read_conn+0x3a4>)
 800ed82:	f241 320e 	movw	r2, #4878	@ 0x130e
 800ed86:	4975      	ldr	r1, [pc, #468]	@ (800ef5c <read_conn+0x3a8>)
 800ed88:	2004      	movs	r0, #4
 800ed8a:	f7fd fad7 	bl	800c33c <mg_log_prefix>
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	685a      	ldr	r2, [r3, #4]
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	69b9      	ldr	r1, [r7, #24]
 800ed96:	4873      	ldr	r0, [pc, #460]	@ (800ef64 <read_conn+0x3b0>)
 800ed98:	f7fd fb20 	bl	800c3dc <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800eda2:	6a3b      	ldr	r3, [r7, #32]
 800eda4:	f103 081a 	add.w	r8, r3, #26
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	607b      	str	r3, [r7, #4]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	8b1c      	ldrh	r4, [r3, #24]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800edb4:	6a3b      	ldr	r3, [r7, #32]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4618      	mov	r0, r3
 800edba:	f010 fbbc 	bl	801f536 <mg_ntohl>
 800edbe:	6038      	str	r0, [r7, #0]
 800edc0:	6a3b      	ldr	r3, [r7, #32]
 800edc2:	685b      	ldr	r3, [r3, #4]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f010 fbb6 	bl	801f536 <mg_ntohl>
 800edca:	4603      	mov	r3, r0
 800edcc:	2200      	movs	r2, #0
 800edce:	9205      	str	r2, [sp, #20]
 800edd0:	4a5f      	ldr	r2, [pc, #380]	@ (800ef50 <read_conn+0x39c>)
 800edd2:	9204      	str	r2, [sp, #16]
 800edd4:	9303      	str	r3, [sp, #12]
 800edd6:	6839      	ldr	r1, [r7, #0]
 800edd8:	9102      	str	r1, [sp, #8]
 800edda:	9501      	str	r5, [sp, #4]
 800eddc:	9400      	str	r4, [sp, #0]
 800edde:	2310      	movs	r3, #16
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	4641      	mov	r1, r8
 800ede4:	4630      	mov	r0, r6
 800ede6:	f7ff fb63 	bl	800e4b0 <tx_tcp>
    return;  // drop it
 800edea:	e0f6      	b.n	800efda <read_conn+0x426>
  } else if (io->size - io->len < pkt->pay.len &&
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	685a      	ldr	r2, [r3, #4]
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	1ad2      	subs	r2, r2, r3
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d210      	bcs.n	800ee20 <read_conn+0x26c>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	689a      	ldr	r2, [r3, #8]
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	4413      	add	r3, r2
 800ee08:	4619      	mov	r1, r3
 800ee0a:	69f8      	ldr	r0, [r7, #28]
 800ee0c:	f7fc faec 	bl	800b3e8 <mg_iobuf_resize>
 800ee10:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d104      	bne.n	800ee20 <read_conn+0x26c>
    mg_error(c, "oom");
 800ee16:	4954      	ldr	r1, [pc, #336]	@ (800ef68 <read_conn+0x3b4>)
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f7f7 fd7f 	bl	800691c <mg_error>
    return;  // drop it
 800ee1e:	e0dd      	b.n	800efdc <read_conn+0x428>
  // Copy TCP payload into the IO buffer. If the connection is plain text,
  // we copy to c->recv. If the connection is TLS, this data is encrypted,
  // therefore we copy that encrypted data to the c->rtls iobuffer instead,
  // and then call mg_tls_recv() to decrypt it. NOTE: mg_tls_recv() will
  // call back mg_io_recv() which grabs raw data from c->rtls
  memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	689b      	ldr	r3, [r3, #8]
 800ee28:	18d0      	adds	r0, r2, r3
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	6899      	ldr	r1, [r3, #8]
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	461a      	mov	r2, r3
 800ee34:	f014 fca5 	bl	8023782 <memcpy>
  io->len += pkt->pay.len;
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	689a      	ldr	r2, [r3, #8]
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	68db      	ldr	r3, [r3, #12]
 800ee40:	441a      	add	r2, r3
 800ee42:	69fb      	ldr	r3, [r7, #28]
 800ee44:	609a      	str	r2, [r3, #8]
  MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800ee46:	4b43      	ldr	r3, [pc, #268]	@ (800ef54 <read_conn+0x3a0>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	2b03      	cmp	r3, #3
 800ee4c:	dd15      	ble.n	800ee7a <read_conn+0x2c6>
 800ee4e:	4b42      	ldr	r3, [pc, #264]	@ (800ef58 <read_conn+0x3a4>)
 800ee50:	f241 321f 	movw	r2, #4895	@ 0x131f
 800ee54:	4941      	ldr	r1, [pc, #260]	@ (800ef5c <read_conn+0x3a8>)
 800ee56:	2004      	movs	r0, #4
 800ee58:	f7fd fa70 	bl	800c33c <mg_log_prefix>
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	4618      	mov	r0, r3
 800ee68:	f010 fb65 	bl	801f536 <mg_ntohl>
 800ee6c:	4602      	mov	r2, r0
 800ee6e:	6a3b      	ldr	r3, [r7, #32]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	4621      	mov	r1, r4
 800ee74:	483d      	ldr	r0, [pc, #244]	@ (800ef6c <read_conn+0x3b8>)
 800ee76:	f7fd fab1 	bl	800c3dc <mg_log>
  // Advance ACK counter
  s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	4618      	mov	r0, r3
 800ee82:	f010 fb58 	bl	801f536 <mg_ntohl>
 800ee86:	4602      	mov	r2, r0
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	441a      	add	r2, r3
 800ee8e:	6a3b      	ldr	r3, [r7, #32]
 800ee90:	605a      	str	r2, [r3, #4]
  s->unacked += pkt->pay.len;
 800ee92:	6a3b      	ldr	r3, [r7, #32]
 800ee94:	695a      	ldr	r2, [r3, #20]
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	68db      	ldr	r3, [r3, #12]
 800ee9a:	441a      	add	r2, r3
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
 800ee9e:	615a      	str	r2, [r3, #20]
  // size_t diff = s->acked <= s->ack ? s->ack - s->acked : s->ack;
  if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	695b      	ldr	r3, [r3, #20]
 800eea4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d963      	bls.n	800ef74 <read_conn+0x3c0>
 800eeac:	6a3b      	ldr	r3, [r7, #32]
 800eeae:	691a      	ldr	r2, [r3, #16]
 800eeb0:	6a3b      	ldr	r3, [r7, #32]
 800eeb2:	685b      	ldr	r3, [r3, #4]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d05d      	beq.n	800ef74 <read_conn+0x3c0>
    // Send ACK immediately
    MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 800eeb8:	4b26      	ldr	r3, [pc, #152]	@ (800ef54 <read_conn+0x3a0>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2b03      	cmp	r3, #3
 800eebe:	dd0e      	ble.n	800eede <read_conn+0x32a>
 800eec0:	4b25      	ldr	r3, [pc, #148]	@ (800ef58 <read_conn+0x3a4>)
 800eec2:	f241 3226 	movw	r2, #4902	@ 0x1326
 800eec6:	4925      	ldr	r1, [pc, #148]	@ (800ef5c <read_conn+0x3a8>)
 800eec8:	2004      	movs	r0, #4
 800eeca:	f7fd fa37 	bl	800c33c <mg_log_prefix>
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	691b      	ldr	r3, [r3, #16]
 800eed6:	461a      	mov	r2, r3
 800eed8:	4825      	ldr	r0, [pc, #148]	@ (800ef70 <read_conn+0x3bc>)
 800eeda:	f7fd fa7f 	bl	800c3dc <mg_log>
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	f103 081a 	add.w	r8, r3, #26
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	607b      	str	r3, [r7, #4]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	8b1c      	ldrh	r4, [r3, #24]
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4618      	mov	r0, r3
 800eefc:	f010 fb1b 	bl	801f536 <mg_ntohl>
 800ef00:	6038      	str	r0, [r7, #0]
 800ef02:	6a3b      	ldr	r3, [r7, #32]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f010 fb15 	bl	801f536 <mg_ntohl>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2200      	movs	r2, #0
 800ef10:	9205      	str	r2, [sp, #20]
 800ef12:	2200      	movs	r2, #0
 800ef14:	9204      	str	r2, [sp, #16]
 800ef16:	9303      	str	r3, [sp, #12]
 800ef18:	6839      	ldr	r1, [r7, #0]
 800ef1a:	9102      	str	r1, [sp, #8]
 800ef1c:	9501      	str	r5, [sp, #4]
 800ef1e:	9400      	str	r4, [sp, #0]
 800ef20:	2310      	movs	r3, #16
 800ef22:	687a      	ldr	r2, [r7, #4]
 800ef24:	4641      	mov	r1, r8
 800ef26:	4630      	mov	r0, r6
 800ef28:	f7ff fac2 	bl	800e4b0 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    s->unacked = 0;
 800ef2c:	6a3b      	ldr	r3, [r7, #32]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	615a      	str	r2, [r3, #20]
    s->acked = s->ack;
 800ef32:	6a3b      	ldr	r3, [r7, #32]
 800ef34:	685a      	ldr	r2, [r3, #4]
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	611a      	str	r2, [r3, #16]
    if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800ef3a:	6a3b      	ldr	r3, [r7, #32]
 800ef3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d020      	beq.n	800ef86 <read_conn+0x3d2>
 800ef44:	2100      	movs	r1, #0
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	f7fe f862 	bl	800d010 <settmout>
 800ef4c:	e01b      	b.n	800ef86 <read_conn+0x3d2>
 800ef4e:	bf00      	nop
 800ef50:	08024a28 	.word	0x08024a28
 800ef54:	24000258 	.word	0x24000258
 800ef58:	08027e68 	.word	0x08027e68
 800ef5c:	080241e8 	.word	0x080241e8
 800ef60:	08025620 	.word	0x08025620
 800ef64:	08025638 	.word	0x08025638
 800ef68:	08025580 	.word	0x08025580
 800ef6c:	08025650 	.word	0x08025650
 800ef70:	08025664 	.word	0x08025664
  } else {
    // if not already running, setup a timer to send an ACK later
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800ef74:	6a3b      	ldr	r3, [r7, #32]
 800ef76:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d003      	beq.n	800ef86 <read_conn+0x3d2>
 800ef7e:	2101      	movs	r1, #1
 800ef80:	68f8      	ldr	r0, [r7, #12]
 800ef82:	f7fe f845 	bl	800d010 <settmout>
  }
  if (c->is_tls && c->is_tls_hs) {
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ef8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef90:	b2db      	uxtb	r3, r3
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00b      	beq.n	800efae <read_conn+0x3fa>
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ef9c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d003      	beq.n	800efae <read_conn+0x3fa>
    mg_tls_handshake(c);
 800efa6:	68f8      	ldr	r0, [r7, #12]
 800efa8:	f009 fae0 	bl	801856c <mg_tls_handshake>
 800efac:	e016      	b.n	800efdc <read_conn+0x428>
  } else if (c->is_tls) {
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800efb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efb8:	b2db      	uxtb	r3, r3
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d003      	beq.n	800efc6 <read_conn+0x412>
    handle_tls_recv(c);
 800efbe:	68f8      	ldr	r0, [r7, #12]
 800efc0:	f7ff fd96 	bl	800eaf0 <handle_tls_recv>
 800efc4:	e00a      	b.n	800efdc <read_conn+0x428>
  } else {
    // Plain text connection, data is already in c->recv, trigger MG_EV_READ
    mg_call(c, MG_EV_READ, &pkt->pay.len);
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	330c      	adds	r3, #12
 800efca:	461a      	mov	r2, r3
 800efcc:	2107      	movs	r1, #7
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f7f7 fc83 	bl	80068da <mg_call>
 800efd4:	e002      	b.n	800efdc <read_conn+0x428>
    return;  // no data to process
 800efd6:	bf00      	nop
 800efd8:	e000      	b.n	800efdc <read_conn+0x428>
    return;  // drop it
 800efda:	bf00      	nop
  }
}
 800efdc:	3728      	adds	r7, #40	@ 0x28
 800efde:	46bd      	mov	sp, r7
 800efe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800efe4 <handle_opt>:

// process options (MSS)
static void handle_opt(struct connstate *s, struct tcp *tcp) {
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b086      	sub	sp, #24
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  uint8_t *opts = (uint8_t *) (tcp + 1);
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	3314      	adds	r3, #20
 800eff2:	617b      	str	r3, [r7, #20]
  int len = 4 * ((int) (tcp->off >> 4) - ((int) sizeof(*tcp) / 4));
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	7b1b      	ldrb	r3, [r3, #12]
 800eff8:	091b      	lsrs	r3, r3, #4
 800effa:	b2db      	uxtb	r3, r3
 800effc:	3b05      	subs	r3, #5
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	613b      	str	r3, [r7, #16]
  s->dmss = 536;     // assume default, RFC-9293 3.7.1
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f008:	831a      	strh	r2, [r3, #24]
  while (len > 0) {  // RFC-9293 3.1 3.2
 800f00a:	e038      	b.n	800f07e <handle_opt+0x9a>
    uint8_t kind = opts[0], optlen = 1;
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	781b      	ldrb	r3, [r3, #0]
 800f010:	73bb      	strb	r3, [r7, #14]
 800f012:	2301      	movs	r3, #1
 800f014:	73fb      	strb	r3, [r7, #15]
    if (kind != 1) {         // No-Operation
 800f016:	7bbb      	ldrb	r3, [r7, #14]
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d017      	beq.n	800f04c <handle_opt+0x68>
      if (kind == 0) break;  // End of Option List
 800f01c:	7bbb      	ldrb	r3, [r7, #14]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d031      	beq.n	800f086 <handle_opt+0xa2>
      optlen = opts[1];
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	785b      	ldrb	r3, [r3, #1]
 800f026:	73fb      	strb	r3, [r7, #15]
      if (kind == 2 && optlen == 4)  // set received MSS
 800f028:	7bbb      	ldrb	r3, [r7, #14]
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d10e      	bne.n	800f04c <handle_opt+0x68>
 800f02e:	7bfb      	ldrb	r3, [r7, #15]
 800f030:	2b04      	cmp	r3, #4
 800f032:	d10b      	bne.n	800f04c <handle_opt+0x68>
        s->dmss = (uint16_t) (((uint16_t) opts[2] << 8) + opts[3]);
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	3302      	adds	r3, #2
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	021b      	lsls	r3, r3, #8
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	697a      	ldr	r2, [r7, #20]
 800f040:	3203      	adds	r2, #3
 800f042:	7812      	ldrb	r2, [r2, #0]
 800f044:	4413      	add	r3, r2
 800f046:	b29a      	uxth	r2, r3
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	831a      	strh	r2, [r3, #24]
    }
    MG_VERBOSE(("kind: %u, optlen: %u, len: %d\n", kind, optlen, len));
 800f04c:	4b10      	ldr	r3, [pc, #64]	@ (800f090 <handle_opt+0xac>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	2b03      	cmp	r3, #3
 800f052:	dd0c      	ble.n	800f06e <handle_opt+0x8a>
 800f054:	4b0f      	ldr	r3, [pc, #60]	@ (800f094 <handle_opt+0xb0>)
 800f056:	f241 3247 	movw	r2, #4935	@ 0x1347
 800f05a:	490f      	ldr	r1, [pc, #60]	@ (800f098 <handle_opt+0xb4>)
 800f05c:	2004      	movs	r0, #4
 800f05e:	f7fd f96d 	bl	800c33c <mg_log_prefix>
 800f062:	7bb9      	ldrb	r1, [r7, #14]
 800f064:	7bfa      	ldrb	r2, [r7, #15]
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	480c      	ldr	r0, [pc, #48]	@ (800f09c <handle_opt+0xb8>)
 800f06a:	f7fd f9b7 	bl	800c3dc <mg_log>
    opts += optlen;
 800f06e:	7bfb      	ldrb	r3, [r7, #15]
 800f070:	697a      	ldr	r2, [r7, #20]
 800f072:	4413      	add	r3, r2
 800f074:	617b      	str	r3, [r7, #20]
    len -= optlen;
 800f076:	7bfb      	ldrb	r3, [r7, #15]
 800f078:	693a      	ldr	r2, [r7, #16]
 800f07a:	1ad3      	subs	r3, r2, r3
 800f07c:	613b      	str	r3, [r7, #16]
  while (len > 0) {  // RFC-9293 3.1 3.2
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	2b00      	cmp	r3, #0
 800f082:	dcc3      	bgt.n	800f00c <handle_opt+0x28>
  }
}
 800f084:	e000      	b.n	800f088 <handle_opt+0xa4>
      if (kind == 0) break;  // End of Option List
 800f086:	bf00      	nop
}
 800f088:	bf00      	nop
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	24000258 	.word	0x24000258
 800f094:	08027e74 	.word	0x08027e74
 800f098:	080241e8 	.word	0x080241e8
 800f09c:	08025674 	.word	0x08025674

0800f0a0 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f0a0:	b590      	push	{r4, r7, lr}
 800f0a2:	b089      	sub	sp, #36	@ 0x24
 800f0a4:	af02      	add	r7, sp, #8
 800f0a6:	6078      	str	r0, [r7, #4]
 800f0a8:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	6839      	ldr	r1, [r7, #0]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe fbd4 	bl	800d860 <getpeer>
 800f0b8:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <rx_tcp+0x26>
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	33b0      	adds	r3, #176	@ 0xb0
 800f0c4:	e000      	b.n	800f0c8 <rx_tcp+0x28>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d05d      	beq.n	800f18c <rx_tcp+0xec>
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f0d6:	f003 0320 	and.w	r3, r3, #32
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d055      	beq.n	800f18c <rx_tcp+0xec>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0e4:	7b5b      	ldrb	r3, [r3, #13]
 800f0e6:	2b12      	cmp	r3, #18
 800f0e8:	d150      	bne.n	800f18c <rx_tcp+0xec>
    handle_opt(s, pkt->tcp);  // process options (MSS)
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6938      	ldr	r0, [r7, #16]
 800f0f2:	f7ff ff77 	bl	800efe4 <handle_opt>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f010 fa1a 	bl	801f536 <mg_ntohl>
 800f102:	4602      	mov	r2, r0
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	601a      	str	r2, [r3, #0]
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	4618      	mov	r0, r3
 800f110:	f010 fa11 	bl	801f536 <mg_ntohl>
 800f114:	4603      	mov	r3, r0
 800f116:	1c5a      	adds	r2, r3, #1
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f120:	689b      	ldr	r3, [r3, #8]
 800f122:	2200      	movs	r2, #0
 800f124:	9201      	str	r2, [sp, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	9200      	str	r2, [sp, #0]
 800f12a:	2210      	movs	r2, #16
 800f12c:	6839      	ldr	r1, [r7, #0]
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff fab0 	bl	800e694 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800f134:	697a      	ldr	r2, [r7, #20]
 800f136:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f13a:	f023 0320 	bic.w	r3, r3, #32
 800f13e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800f142:	2100      	movs	r1, #0
 800f144:	6978      	ldr	r0, [r7, #20]
 800f146:	f7fd ff63 	bl	800d010 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800f14a:	2200      	movs	r2, #0
 800f14c:	2104      	movs	r1, #4
 800f14e:	6978      	ldr	r0, [r7, #20]
 800f150:	f7f7 fbc3 	bl	80068da <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f15a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	2b00      	cmp	r3, #0
 800f162:	d002      	beq.n	800f16a <rx_tcp+0xca>
 800f164:	6978      	ldr	r0, [r7, #20]
 800f166:	f009 fa01 	bl	801856c <mg_tls_handshake>
    if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f170:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b00      	cmp	r3, #0
 800f178:	f040 80d3 	bne.w	800f322 <rx_tcp+0x282>
 800f17c:	697a      	ldr	r2, [r7, #20]
 800f17e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f186:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800f18a:	e0ca      	b.n	800f322 <rx_tcp+0x282>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d019      	beq.n	800f1c6 <rx_tcp+0x126>
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f198:	f003 0320 	and.w	r3, r3, #32
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d011      	beq.n	800f1c6 <rx_tcp+0x126>
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1a6:	7b5b      	ldrb	r3, [r3, #13]
 800f1a8:	2b10      	cmp	r3, #16
 800f1aa:	d00c      	beq.n	800f1c6 <rx_tcp+0x126>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1b0:	689b      	ldr	r3, [r3, #8]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	9201      	str	r2, [sp, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	9200      	str	r2, [sp, #0]
 800f1ba:	2214      	movs	r2, #20
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f7ff fa68 	bl	800e694 <tx_tcp_pkt>
 800f1c4:	e0ad      	b.n	800f322 <rx_tcp+0x282>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00b      	beq.n	800f1e4 <rx_tcp+0x144>
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1d0:	7b5b      	ldrb	r3, [r3, #13]
 800f1d2:	f003 0304 	and.w	r3, r3, #4
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d004      	beq.n	800f1e4 <rx_tcp+0x144>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800f1da:	4954      	ldr	r1, [pc, #336]	@ (800f32c <rx_tcp+0x28c>)
 800f1dc:	6978      	ldr	r0, [r7, #20]
 800f1de:	f7f7 fb9d 	bl	800691c <mg_error>
 800f1e2:	e09e      	b.n	800f322 <rx_tcp+0x282>
  } else if (c != NULL) {
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d011      	beq.n	800f20e <rx_tcp+0x16e>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800f1f2:	693b      	ldr	r3, [r7, #16]
 800f1f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d103      	bne.n	800f204 <rx_tcp+0x164>
      settmout(c,
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	6978      	ldr	r0, [r7, #20]
 800f200:	f7fd ff06 	bl	800d010 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800f204:	6839      	ldr	r1, [r7, #0]
 800f206:	6978      	ldr	r0, [r7, #20]
 800f208:	f7ff fcd4 	bl	800ebb4 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 800f20c:	e089      	b.n	800f322 <rx_tcp+0x282>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f212:	2201      	movs	r2, #1
 800f214:	6839      	ldr	r1, [r7, #0]
 800f216:	4618      	mov	r0, r3
 800f218:	f7fe fb22 	bl	800d860 <getpeer>
 800f21c:	6178      	str	r0, [r7, #20]
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10c      	bne.n	800f23e <rx_tcp+0x19e>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	2200      	movs	r2, #0
 800f22c:	9201      	str	r2, [sp, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	9200      	str	r2, [sp, #0]
 800f232:	2214      	movs	r2, #20
 800f234:	6839      	ldr	r1, [r7, #0]
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f7ff fa2c 	bl	800e694 <tx_tcp_pkt>
}
 800f23c:	e071      	b.n	800f322 <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_RST) {
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f242:	7b5b      	ldrb	r3, [r3, #13]
 800f244:	f003 0304 	and.w	r3, r3, #4
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00c      	beq.n	800f266 <rx_tcp+0x1c6>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f252:	f003 0304 	and.w	r3, r3, #4
 800f256:	b2db      	uxtb	r3, r3
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d062      	beq.n	800f322 <rx_tcp+0x282>
 800f25c:	4933      	ldr	r1, [pc, #204]	@ (800f32c <rx_tcp+0x28c>)
 800f25e:	6978      	ldr	r0, [r7, #20]
 800f260:	f7f7 fb5c 	bl	800691c <mg_error>
}
 800f264:	e05d      	b.n	800f322 <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_SYN) {
 800f266:	683b      	ldr	r3, [r7, #0]
 800f268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f26a:	7b5b      	ldrb	r3, [r3, #13]
 800f26c:	f003 0302 	and.w	r3, r3, #2
 800f270:	2b00      	cmp	r3, #0
 800f272:	d016      	beq.n	800f2a2 <rx_tcp+0x202>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	4618      	mov	r0, r3
 800f27e:	f010 f943 	bl	801f508 <mg_ntohs>
 800f282:	4603      	mov	r3, r0
 800f284:	4618      	mov	r0, r3
 800f286:	f010 f956 	bl	801f536 <mg_ntohl>
 800f28a:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800f28c:	2300      	movs	r3, #0
 800f28e:	9301      	str	r3, [sp, #4]
 800f290:	2300      	movs	r3, #0
 800f292:	9300      	str	r3, [sp, #0]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	2212      	movs	r2, #18
 800f298:	6839      	ldr	r1, [r7, #0]
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f7ff f9fa 	bl	800e694 <tx_tcp_pkt>
}
 800f2a0:	e03f      	b.n	800f322 <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_FIN) {
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2a6:	7b5b      	ldrb	r3, [r3, #13]
 800f2a8:	f003 0301 	and.w	r3, r3, #1
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00c      	beq.n	800f2ca <rx_tcp+0x22a>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	9201      	str	r2, [sp, #4]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	9200      	str	r2, [sp, #0]
 800f2be:	2211      	movs	r2, #17
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f7ff f9e6 	bl	800e694 <tx_tcp_pkt>
}
 800f2c8:	e02b      	b.n	800f322 <rx_tcp+0x282>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f010 f930 	bl	801f536 <mg_ntohl>
 800f2d6:	4604      	mov	r4, r0
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2dc:	881b      	ldrh	r3, [r3, #0]
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	f010 f911 	bl	801f508 <mg_ntohs>
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	429c      	cmp	r4, r3
 800f2ec:	d104      	bne.n	800f2f8 <rx_tcp+0x258>
    accept_conn(c, pkt);
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	6978      	ldr	r0, [r7, #20]
 800f2f2:	f7ff fa15 	bl	800e720 <accept_conn>
}
 800f2f6:	e014      	b.n	800f322 <rx_tcp+0x282>
  } else if (!c->is_accepted) {  // no peer
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f2fe:	f003 0304 	and.w	r3, r3, #4
 800f302:	b2db      	uxtb	r3, r3
 800f304:	2b00      	cmp	r3, #0
 800f306:	d10c      	bne.n	800f322 <rx_tcp+0x282>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	2200      	movs	r2, #0
 800f310:	9201      	str	r2, [sp, #4]
 800f312:	2200      	movs	r2, #0
 800f314:	9200      	str	r2, [sp, #0]
 800f316:	2214      	movs	r2, #20
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7ff f9ba 	bl	800e694 <tx_tcp_pkt>
}
 800f320:	e7ff      	b.n	800f322 <rx_tcp+0x282>
 800f322:	bf00      	nop
 800f324:	371c      	adds	r7, #28
 800f326:	46bd      	mov	sp, r7
 800f328:	bd90      	pop	{r4, r7, pc}
 800f32a:	bf00      	nop
 800f32c:	08025694 	.word	0x08025694

0800f330 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f332:	b08b      	sub	sp, #44	@ 0x2c
 800f334:	af04      	add	r7, sp, #16
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	69db      	ldr	r3, [r3, #28]
 800f33e:	88db      	ldrh	r3, [r3, #6]
 800f340:	b29b      	uxth	r3, r3
 800f342:	4618      	mov	r0, r3
 800f344:	f010 f8e0 	bl	801f508 <mg_ntohs>
 800f348:	4603      	mov	r3, r0
 800f34a:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800f34c:	8afb      	ldrh	r3, [r7, #22]
 800f34e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f352:	2b00      	cmp	r3, #0
 800f354:	d104      	bne.n	800f360 <rx_ip+0x30>
 800f356:	8afb      	ldrh	r3, [r7, #22]
 800f358:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d026      	beq.n	800f3ae <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	69db      	ldr	r3, [r3, #28]
 800f364:	7a5b      	ldrb	r3, [r3, #9]
 800f366:	2b11      	cmp	r3, #17
 800f368:	d105      	bne.n	800f376 <rx_ip+0x46>
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	69db      	ldr	r3, [r3, #28]
 800f36e:	f103 0214 	add.w	r2, r3, #20
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	69db      	ldr	r3, [r3, #28]
 800f37a:	7a5b      	ldrb	r3, [r3, #9]
 800f37c:	2b06      	cmp	r3, #6
 800f37e:	d105      	bne.n	800f38c <rx_ip+0x5c>
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	69db      	ldr	r3, [r3, #28]
 800f384:	f103 0214 	add.w	r2, r3, #20
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f390:	2200      	movs	r2, #0
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	4618      	mov	r0, r3
 800f396:	f7fe fa63 	bl	800d860 <getpeer>
 800f39a:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f000 811b 	beq.w	800f5da <rx_ip+0x2aa>
 800f3a4:	4992      	ldr	r1, [pc, #584]	@ (800f5f0 <rx_ip+0x2c0>)
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f7f7 fab8 	bl	800691c <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800f3ac:	e115      	b.n	800f5da <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	69db      	ldr	r3, [r3, #28]
 800f3b2:	7a5b      	ldrb	r3, [r3, #9]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d116      	bne.n	800f3e6 <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	69db      	ldr	r3, [r3, #28]
 800f3bc:	f103 0214 	add.w	r2, r3, #20
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	2b03      	cmp	r3, #3
 800f3ca:	f240 8108 	bls.w	800f5de <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3d2:	3304      	adds	r3, #4
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6838      	ldr	r0, [r7, #0]
 800f3d8:	f7fd fda2 	bl	800cf20 <mkpay>
    rx_icmp(ifp, pkt);
 800f3dc:	6839      	ldr	r1, [r7, #0]
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f7fe fbc2 	bl	800db68 <rx_icmp>
 800f3e4:	e100      	b.n	800f5e8 <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	69db      	ldr	r3, [r3, #28]
 800f3ea:	7a5b      	ldrb	r3, [r3, #9]
 800f3ec:	2b11      	cmp	r3, #17
 800f3ee:	f040 808b 	bne.w	800f508 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	69db      	ldr	r3, [r3, #28]
 800f3f6:	f103 0214 	add.w	r2, r3, #20
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	2b07      	cmp	r3, #7
 800f404:	f240 80ed 	bls.w	800f5e2 <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f40c:	3308      	adds	r3, #8
 800f40e:	4619      	mov	r1, r3
 800f410:	6838      	ldr	r0, [r7, #0]
 800f412:	f7fd fd85 	bl	800cf20 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800f416:	4b77      	ldr	r3, [pc, #476]	@ (800f5f4 <rx_ip+0x2c4>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	2b03      	cmp	r3, #3
 800f41c:	dd2d      	ble.n	800f47a <rx_ip+0x14a>
 800f41e:	4b76      	ldr	r3, [pc, #472]	@ (800f5f8 <rx_ip+0x2c8>)
 800f420:	f241 3293 	movw	r2, #5011	@ 0x1393
 800f424:	4975      	ldr	r1, [pc, #468]	@ (800f5fc <rx_ip+0x2cc>)
 800f426:	2004      	movs	r0, #4
 800f428:	f7fc ff88 	bl	800c33c <mg_log_prefix>
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	69db      	ldr	r3, [r3, #28]
 800f430:	f103 050c 	add.w	r5, r3, #12
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	b29b      	uxth	r3, r3
 800f43c:	4618      	mov	r0, r3
 800f43e:	f010 f863 	bl	801f508 <mg_ntohs>
 800f442:	4603      	mov	r3, r0
 800f444:	461e      	mov	r6, r3
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	69db      	ldr	r3, [r3, #28]
 800f44a:	f103 0410 	add.w	r4, r3, #16
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f452:	885b      	ldrh	r3, [r3, #2]
 800f454:	b29b      	uxth	r3, r3
 800f456:	4618      	mov	r0, r3
 800f458:	f010 f856 	bl	801f508 <mg_ntohs>
 800f45c:	4603      	mov	r3, r0
 800f45e:	461a      	mov	r2, r3
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	9303      	str	r3, [sp, #12]
 800f466:	9202      	str	r2, [sp, #8]
 800f468:	9401      	str	r4, [sp, #4]
 800f46a:	4b65      	ldr	r3, [pc, #404]	@ (800f600 <rx_ip+0x2d0>)
 800f46c:	9300      	str	r3, [sp, #0]
 800f46e:	4633      	mov	r3, r6
 800f470:	462a      	mov	r2, r5
 800f472:	4963      	ldr	r1, [pc, #396]	@ (800f600 <rx_ip+0x2d0>)
 800f474:	4863      	ldr	r0, [pc, #396]	@ (800f604 <rx_ip+0x2d4>)
 800f476:	f7fc ffb1 	bl	800c3dc <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	7f1b      	ldrb	r3, [r3, #28]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d01c      	beq.n	800f4bc <rx_ip+0x18c>
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f486:	885b      	ldrh	r3, [r3, #2]
 800f488:	b29c      	uxth	r4, r3
 800f48a:	2044      	movs	r0, #68	@ 0x44
 800f48c:	f010 f83c 	bl	801f508 <mg_ntohs>
 800f490:	4603      	mov	r3, r0
 800f492:	429c      	cmp	r4, r3
 800f494:	d112      	bne.n	800f4bc <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f49a:	f103 0208 	add.w	r2, r3, #8
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4a6:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800f4aa:	4619      	mov	r1, r3
 800f4ac:	6838      	ldr	r0, [r7, #0]
 800f4ae:	f7fd fd37 	bl	800cf20 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800f4b2:	6839      	ldr	r1, [r7, #0]
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7fe fbb3 	bl	800dc20 <rx_dhcp_client>
 800f4ba:	e095      	b.n	800f5e8 <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	7f5b      	ldrb	r3, [r3, #29]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d01c      	beq.n	800f4fe <rx_ip+0x1ce>
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c8:	885b      	ldrh	r3, [r3, #2]
 800f4ca:	b29c      	uxth	r4, r3
 800f4cc:	2043      	movs	r0, #67	@ 0x43
 800f4ce:	f010 f81b 	bl	801f508 <mg_ntohs>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	429c      	cmp	r4, r3
 800f4d6:	d112      	bne.n	800f4fe <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4dc:	f103 0208 	add.w	r2, r3, #8
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f4e8:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	6838      	ldr	r0, [r7, #0]
 800f4f0:	f7fd fd16 	bl	800cf20 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800f4f4:	6839      	ldr	r1, [r7, #0]
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7fe fd7a 	bl	800dff0 <rx_dhcp_server>
 800f4fc:	e074      	b.n	800f5e8 <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 800f4fe:	6839      	ldr	r1, [r7, #0]
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7fe ff63 	bl	800e3cc <rx_udp>
 800f506:	e06f      	b.n	800f5e8 <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	69db      	ldr	r3, [r3, #28]
 800f50c:	7a5b      	ldrb	r3, [r3, #9]
 800f50e:	2b06      	cmp	r3, #6
 800f510:	d16a      	bne.n	800f5e8 <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	69db      	ldr	r3, [r3, #28]
 800f516:	f103 0214 	add.w	r2, r3, #20
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	2b13      	cmp	r3, #19
 800f524:	d95f      	bls.n	800f5e6 <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f52a:	3314      	adds	r3, #20
 800f52c:	4619      	mov	r1, r3
 800f52e:	6838      	ldr	r0, [r7, #0]
 800f530:	f7fd fcf6 	bl	800cf20 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	69db      	ldr	r3, [r3, #28]
 800f538:	885b      	ldrh	r3, [r3, #2]
 800f53a:	b29b      	uxth	r3, r3
 800f53c:	4618      	mov	r0, r3
 800f53e:	f00f ffe3 	bl	801f508 <mg_ntohs>
 800f542:	4603      	mov	r3, r0
 800f544:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f54a:	7b1b      	ldrb	r3, [r3, #12]
 800f54c:	091b      	lsrs	r3, r3, #4
 800f54e:	b2db      	uxtb	r3, r3
 800f550:	3305      	adds	r3, #5
 800f552:	b29b      	uxth	r3, r3
 800f554:	009b      	lsls	r3, r3, #2
 800f556:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800f558:	8aba      	ldrh	r2, [r7, #20]
 800f55a:	8a7b      	ldrh	r3, [r7, #18]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d305      	bcc.n	800f56c <rx_ip+0x23c>
 800f560:	8aba      	ldrh	r2, [r7, #20]
 800f562:	8a7b      	ldrh	r3, [r7, #18]
 800f564:	1ad3      	subs	r3, r2, r3
 800f566:	461a      	mov	r2, r3
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800f56c:	4b21      	ldr	r3, [pc, #132]	@ (800f5f4 <rx_ip+0x2c4>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2b03      	cmp	r3, #3
 800f572:	dd2d      	ble.n	800f5d0 <rx_ip+0x2a0>
 800f574:	4b20      	ldr	r3, [pc, #128]	@ (800f5f8 <rx_ip+0x2c8>)
 800f576:	f241 32a8 	movw	r2, #5032	@ 0x13a8
 800f57a:	4920      	ldr	r1, [pc, #128]	@ (800f5fc <rx_ip+0x2cc>)
 800f57c:	2004      	movs	r0, #4
 800f57e:	f7fc fedd 	bl	800c33c <mg_log_prefix>
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	69db      	ldr	r3, [r3, #28]
 800f586:	f103 050c 	add.w	r5, r3, #12
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f58e:	881b      	ldrh	r3, [r3, #0]
 800f590:	b29b      	uxth	r3, r3
 800f592:	4618      	mov	r0, r3
 800f594:	f00f ffb8 	bl	801f508 <mg_ntohs>
 800f598:	4603      	mov	r3, r0
 800f59a:	461e      	mov	r6, r3
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	69db      	ldr	r3, [r3, #28]
 800f5a0:	f103 0410 	add.w	r4, r3, #16
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5a8:	885b      	ldrh	r3, [r3, #2]
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f00f ffab 	bl	801f508 <mg_ntohs>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	683b      	ldr	r3, [r7, #0]
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	9303      	str	r3, [sp, #12]
 800f5bc:	9202      	str	r2, [sp, #8]
 800f5be:	9401      	str	r4, [sp, #4]
 800f5c0:	4b0f      	ldr	r3, [pc, #60]	@ (800f600 <rx_ip+0x2d0>)
 800f5c2:	9300      	str	r3, [sp, #0]
 800f5c4:	4633      	mov	r3, r6
 800f5c6:	462a      	mov	r2, r5
 800f5c8:	490d      	ldr	r1, [pc, #52]	@ (800f600 <rx_ip+0x2d0>)
 800f5ca:	480f      	ldr	r0, [pc, #60]	@ (800f608 <rx_ip+0x2d8>)
 800f5cc:	f7fc ff06 	bl	800c3dc <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800f5d0:	6839      	ldr	r1, [r7, #0]
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7ff fd64 	bl	800f0a0 <rx_tcp>
 800f5d8:	e006      	b.n	800f5e8 <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800f5da:	bf00      	nop
 800f5dc:	e004      	b.n	800f5e8 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800f5de:	bf00      	nop
 800f5e0:	e002      	b.n	800f5e8 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800f5e2:	bf00      	nop
 800f5e4:	e000      	b.n	800f5e8 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800f5e6:	bf00      	nop
  }
}
 800f5e8:	371c      	adds	r7, #28
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	080256a0 	.word	0x080256a0
 800f5f4:	24000258 	.word	0x24000258
 800f5f8:	08027e80 	.word	0x08027e80
 800f5fc:	080241e8 	.word	0x080241e8
 800f600:	08010a01 	.word	0x08010a01
 800f604:	080256bc 	.word	0x080256bc
 800f608:	080256d8 	.word	0x080256d8

0800f60c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b082      	sub	sp, #8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	6a1b      	ldr	r3, [r3, #32]
 800f61a:	799b      	ldrb	r3, [r3, #6]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d004      	beq.n	800f62a <rx_ip6+0x1e>
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	6a1b      	ldr	r3, [r3, #32]
 800f624:	799b      	ldrb	r3, [r3, #6]
 800f626:	2b3a      	cmp	r3, #58	@ 0x3a
 800f628:	d115      	bne.n	800f656 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	6a1b      	ldr	r3, [r3, #32]
 800f62e:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	2b03      	cmp	r3, #3
 800f63c:	d922      	bls.n	800f684 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f642:	3304      	adds	r3, #4
 800f644:	4619      	mov	r1, r3
 800f646:	6838      	ldr	r0, [r7, #0]
 800f648:	f7fd fc6a 	bl	800cf20 <mkpay>
    rx_icmp(ifp, pkt);
 800f64c:	6839      	ldr	r1, [r7, #0]
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f7fe fa8a 	bl	800db68 <rx_icmp>
 800f654:	e019      	b.n	800f68a <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	799b      	ldrb	r3, [r3, #6]
 800f65c:	2b11      	cmp	r3, #17
 800f65e:	d114      	bne.n	800f68a <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	6a1b      	ldr	r3, [r3, #32]
 800f664:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	2b07      	cmp	r3, #7
 800f672:	d909      	bls.n	800f688 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f678:	3308      	adds	r3, #8
 800f67a:	4619      	mov	r1, r3
 800f67c:	6838      	ldr	r0, [r7, #0]
 800f67e:	f7fd fc4f 	bl	800cf20 <mkpay>
 800f682:	e002      	b.n	800f68a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800f684:	bf00      	nop
 800f686:	e000      	b.n	800f68a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800f688:	bf00      	nop
  }
}
 800f68a:	3708      	adds	r7, #8
 800f68c:	46bd      	mov	sp, r7
 800f68e:	bd80      	pop	{r7, pc}

0800f690 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800f690:	b590      	push	{r4, r7, lr}
 800f692:	b093      	sub	sp, #76	@ 0x4c
 800f694:	af00      	add	r7, sp, #0
 800f696:	60f8      	str	r0, [r7, #12]
 800f698:	60b9      	str	r1, [r7, #8]
 800f69a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800f69c:	f107 0314 	add.w	r3, r7, #20
 800f6a0:	2234      	movs	r2, #52	@ 0x34
 800f6a2:	2100      	movs	r1, #0
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f013 ff36 	bl	8023516 <memset>
  pkt.raw.buf = (char *) buf;
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	2b0d      	cmp	r3, #13
 800f6ba:	f240 80df 	bls.w	800f87c <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d013      	beq.n	800f6f0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800f6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2206      	movs	r2, #6
 800f6d0:	4619      	mov	r1, r3
 800f6d2:	f013 fef6 	bl	80234c2 <memcmp>
 800f6d6:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d009      	beq.n	800f6f0 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800f6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6de:	2206      	movs	r2, #6
 800f6e0:	4970      	ldr	r1, [pc, #448]	@ (800f8a4 <mg_tcpip_rx+0x214>)
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f013 feed 	bl	80234c2 <memcmp>
 800f6e8:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f040 80c8 	bne.w	800f880 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d01a      	beq.n	800f730 <mg_tcpip_rx+0xa0>
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2b04      	cmp	r3, #4
 800f6fe:	d917      	bls.n	800f730 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	3b04      	subs	r3, #4
 800f704:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	68b9      	ldr	r1, [r7, #8]
 800f70a:	2000      	movs	r0, #0
 800f70c:	f00f fe7c 	bl	801f408 <mg_crc32>
 800f710:	4603      	mov	r3, r0
 800f712:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	4413      	add	r3, r2
 800f71a:	4618      	mov	r0, r3
 800f71c:	f107 0310 	add.w	r3, r7, #16
 800f720:	2204      	movs	r2, #4
 800f722:	4619      	mov	r1, r3
 800f724:	f013 fecd 	bl	80234c2 <memcmp>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f040 80aa 	bne.w	800f884 <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800f730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f732:	899b      	ldrh	r3, [r3, #12]
 800f734:	b29c      	uxth	r4, r3
 800f736:	f640 0006 	movw	r0, #2054	@ 0x806
 800f73a:	f00f fee5 	bl	801f508 <mg_ntohs>
 800f73e:	4603      	mov	r3, r0
 800f740:	429c      	cmp	r4, r3
 800f742:	d114      	bne.n	800f76e <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800f744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f746:	330e      	adds	r3, #14
 800f748:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	2b29      	cmp	r3, #41	@ 0x29
 800f74e:	f240 809b 	bls.w	800f888 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 800f752:	f107 0314 	add.w	r3, r7, #20
 800f756:	461a      	mov	r2, r3
 800f758:	2103      	movs	r1, #3
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f7fd fbcc 	bl	800cef8 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 800f760:	f107 0314 	add.w	r3, r7, #20
 800f764:	4619      	mov	r1, r3
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f7fe f8ec 	bl	800d944 <rx_arp>
 800f76c:	e097      	b.n	800f89e <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800f76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f770:	899b      	ldrh	r3, [r3, #12]
 800f772:	b29c      	uxth	r4, r3
 800f774:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 800f778:	f00f fec6 	bl	801f508 <mg_ntohs>
 800f77c:	4603      	mov	r3, r0
 800f77e:	429c      	cmp	r4, r3
 800f780:	d11b      	bne.n	800f7ba <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800f782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f784:	330e      	adds	r3, #14
 800f786:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800f788:	69bb      	ldr	r3, [r7, #24]
 800f78a:	2b35      	cmp	r3, #53	@ 0x35
 800f78c:	d97e      	bls.n	800f88c <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800f78e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	091b      	lsrs	r3, r3, #4
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b06      	cmp	r3, #6
 800f798:	d17a      	bne.n	800f890 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 800f79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f79c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f7a0:	f107 0314 	add.w	r3, r7, #20
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	f7fd fbba 	bl	800cf20 <mkpay>
    rx_ip6(ifp, &pkt);
 800f7ac:	f107 0314 	add.w	r3, r7, #20
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f7ff ff2a 	bl	800f60c <rx_ip6>
 800f7b8:	e071      	b.n	800f89e <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800f7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7bc:	899b      	ldrh	r3, [r3, #12]
 800f7be:	b29c      	uxth	r4, r3
 800f7c0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800f7c4:	f00f fea0 	bl	801f508 <mg_ntohs>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	429c      	cmp	r4, r3
 800f7cc:	d133      	bne.n	800f836 <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800f7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d0:	330e      	adds	r3, #14
 800f7d2:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800f7d4:	69bb      	ldr	r3, [r7, #24]
 800f7d6:	2b21      	cmp	r3, #33	@ 0x21
 800f7d8:	d95c      	bls.n	800f894 <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800f7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7dc:	885b      	ldrh	r3, [r3, #2]
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f00f fe91 	bl	801f508 <mg_ntohs>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	f103 020e 	add.w	r2, r3, #14
 800f7ec:	69bb      	ldr	r3, [r7, #24]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d208      	bcs.n	800f804 <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800f7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7f4:	885b      	ldrh	r3, [r3, #2]
 800f7f6:	b29b      	uxth	r3, r3
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f00f fe85 	bl	801f508 <mg_ntohs>
 800f7fe:	4603      	mov	r3, r0
 800f800:	330e      	adds	r3, #14
 800f802:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800f804:	69bb      	ldr	r3, [r7, #24]
 800f806:	2b21      	cmp	r3, #33	@ 0x21
 800f808:	d946      	bls.n	800f898 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800f80a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	091b      	lsrs	r3, r3, #4
 800f810:	b2db      	uxtb	r3, r3
 800f812:	2b04      	cmp	r3, #4
 800f814:	d142      	bne.n	800f89c <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 800f816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f818:	f103 0214 	add.w	r2, r3, #20
 800f81c:	f107 0314 	add.w	r3, r7, #20
 800f820:	4611      	mov	r1, r2
 800f822:	4618      	mov	r0, r3
 800f824:	f7fd fb7c 	bl	800cf20 <mkpay>
    rx_ip(ifp, &pkt);
 800f828:	f107 0314 	add.w	r3, r7, #20
 800f82c:	4619      	mov	r1, r3
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	f7ff fd7e 	bl	800f330 <rx_ip>
 800f834:	e033      	b.n	800f89e <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 800f836:	4b1c      	ldr	r3, [pc, #112]	@ (800f8a8 <mg_tcpip_rx+0x218>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2b02      	cmp	r3, #2
 800f83c:	dd11      	ble.n	800f862 <mg_tcpip_rx+0x1d2>
 800f83e:	4b1b      	ldr	r3, [pc, #108]	@ (800f8ac <mg_tcpip_rx+0x21c>)
 800f840:	f241 32e7 	movw	r2, #5095	@ 0x13e7
 800f844:	491a      	ldr	r1, [pc, #104]	@ (800f8b0 <mg_tcpip_rx+0x220>)
 800f846:	2003      	movs	r0, #3
 800f848:	f7fc fd78 	bl	800c33c <mg_log_prefix>
 800f84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f84e:	899b      	ldrh	r3, [r3, #12]
 800f850:	b29b      	uxth	r3, r3
 800f852:	4618      	mov	r0, r3
 800f854:	f00f fe58 	bl	801f508 <mg_ntohs>
 800f858:	4603      	mov	r3, r0
 800f85a:	4619      	mov	r1, r3
 800f85c:	4815      	ldr	r0, [pc, #84]	@ (800f8b4 <mg_tcpip_rx+0x224>)
 800f85e:	f7fc fdbd 	bl	800c3dc <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 800f862:	4b11      	ldr	r3, [pc, #68]	@ (800f8a8 <mg_tcpip_rx+0x218>)
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	2b03      	cmp	r3, #3
 800f868:	dd19      	ble.n	800f89e <mg_tcpip_rx+0x20e>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	2b20      	cmp	r3, #32
 800f86e:	bf28      	it	cs
 800f870:	2320      	movcs	r3, #32
 800f872:	4619      	mov	r1, r3
 800f874:	68b8      	ldr	r0, [r7, #8]
 800f876:	f7fc fde7 	bl	800c448 <mg_hexdump>
 800f87a:	e010      	b.n	800f89e <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800f87c:	bf00      	nop
 800f87e:	e00e      	b.n	800f89e <mg_tcpip_rx+0x20e>
    return;
 800f880:	bf00      	nop
 800f882:	e00c      	b.n	800f89e <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800f884:	bf00      	nop
 800f886:	e00a      	b.n	800f89e <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800f888:	bf00      	nop
 800f88a:	e008      	b.n	800f89e <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800f88c:	bf00      	nop
 800f88e:	e006      	b.n	800f89e <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800f890:	bf00      	nop
 800f892:	e004      	b.n	800f89e <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800f894:	bf00      	nop
 800f896:	e002      	b.n	800f89e <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800f898:	bf00      	nop
 800f89a:	e000      	b.n	800f89e <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800f89c:	bf00      	nop
  }
}
 800f89e:	374c      	adds	r7, #76	@ 0x4c
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd90      	pop	{r4, r7, pc}
 800f8a4:	080278dc 	.word	0x080278dc
 800f8a8:	24000258 	.word	0x24000258
 800f8ac:	08027e88 	.word	0x08027e88
 800f8b0:	080241e8 	.word	0x080241e8
 800f8b4:	080256f4 	.word	0x080256f4

0800f8b8 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 800f8b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ba:	b095      	sub	sp, #84	@ 0x54
 800f8bc:	af06      	add	r7, sp, #24
 800f8be:	6178      	str	r0, [r7, #20]
 800f8c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800f8ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f8ce:	e9cd 2300 	strd	r2, r3, [sp]
 800f8d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f8d6:	f04f 0300 	mov.w	r3, #0
 800f8da:	4608      	mov	r0, r1
 800f8dc:	f005 f852 	bl	8014984 <mg_timer_expired>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 800f8e6:	6979      	ldr	r1, [r7, #20]
 800f8e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f8ec:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 800f8f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d00b      	beq.n	800f910 <mg_tcpip_poll+0x58>
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f8fe:	2b03      	cmp	r3, #3
 800f900:	d106      	bne.n	800f910 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	2204      	movs	r2, #4
 800f906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    onstatechange(ifp);
 800f90a:	6978      	ldr	r0, [r7, #20]
 800f90c:	f7fd fc68 	bl	800d1e0 <onstatechange>
  }
  // poll driver
  if (ifp->driver->poll) {
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d075      	beq.n	800fa06 <mg_tcpip_poll+0x14e>
    bool up = ifp->driver->poll(ifp, expired_1000ms);
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f91e:	68db      	ldr	r3, [r3, #12]
 800f920:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800f924:	4611      	mov	r1, r2
 800f926:	6978      	ldr	r0, [r7, #20]
 800f928:	4798      	blx	r3
 800f92a:	4603      	mov	r3, r0
 800f92c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    // Handle physical interface up/down status
    if (expired_1000ms) {
 800f930:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f934:	2b00      	cmp	r3, #0
 800f936:	d066      	beq.n	800fa06 <mg_tcpip_poll+0x14e>
      bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f93e:	2b00      	cmp	r3, #0
 800f940:	bf14      	ite	ne
 800f942:	2301      	movne	r3, #1
 800f944:	2300      	moveq	r3, #0
 800f946:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800f94a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f94e:	f083 0301 	eor.w	r3, r3, #1
 800f952:	b2db      	uxtb	r3, r3
 800f954:	2b00      	cmp	r3, #0
 800f956:	d006      	beq.n	800f966 <mg_tcpip_poll+0xae>
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	7f1b      	ldrb	r3, [r3, #28]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <mg_tcpip_poll+0xae>
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	2200      	movs	r2, #0
 800f964:	609a      	str	r2, [r3, #8]
      if (up != current) {  // link state has changed
 800f966:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800f96a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800f96e:	429a      	cmp	r2, r3
 800f970:	d01a      	beq.n	800f9a8 <mg_tcpip_poll+0xf0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800f972:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800f976:	f083 0301 	eor.w	r3, r3, #1
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d001      	beq.n	800f984 <mg_tcpip_poll+0xcc>
 800f980:	2300      	movs	r3, #0
 800f982:	e00a      	b.n	800f99a <mg_tcpip_poll+0xe2>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	7f1b      	ldrb	r3, [r3, #28]
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d103      	bne.n	800f994 <mg_tcpip_poll+0xdc>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 800f98c:	697b      	ldr	r3, [r7, #20]
 800f98e:	689b      	ldr	r3, [r3, #8]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d101      	bne.n	800f998 <mg_tcpip_poll+0xe0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800f994:	2301      	movs	r3, #1
 800f996:	e000      	b.n	800f99a <mg_tcpip_poll+0xe2>
 800f998:	2303      	movs	r3, #3
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
                         ? MG_TCPIP_STATE_UP
                         : MG_TCPIP_STATE_IP;
        onstatechange(ifp);
 800f9a0:	6978      	ldr	r0, [r7, #20]
 800f9a2:	f7fd fc1d 	bl	800d1e0 <onstatechange>
 800f9a6:	e016      	b.n	800f9d6 <mg_tcpip_poll+0x11e>
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	7f1b      	ldrb	r3, [r3, #28]
 800f9ac:	f083 0301 	eor.w	r3, r3, #1
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d00f      	beq.n	800f9d6 <mg_tcpip_poll+0x11e>
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d10a      	bne.n	800f9d6 <mg_tcpip_poll+0x11e>
                 ifp->ip) {
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	689b      	ldr	r3, [r3, #8]
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d006      	beq.n	800f9d6 <mg_tcpip_poll+0x11e>
        ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	2203      	movs	r2, #3
 800f9cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 800f9d0:	6978      	ldr	r0, [r7, #20]
 800f9d2:	f7fd fc05 	bl	800d1e0 <onstatechange>
      }
      if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d10d      	bne.n	800f9fc <mg_tcpip_poll+0x144>
 800f9e0:	4ba4      	ldr	r3, [pc, #656]	@ (800fc74 <mg_tcpip_poll+0x3bc>)
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	dd09      	ble.n	800f9fc <mg_tcpip_poll+0x144>
 800f9e8:	4ba3      	ldr	r3, [pc, #652]	@ (800fc78 <mg_tcpip_poll+0x3c0>)
 800f9ea:	f241 4210 	movw	r2, #5136	@ 0x1410
 800f9ee:	49a3      	ldr	r1, [pc, #652]	@ (800fc7c <mg_tcpip_poll+0x3c4>)
 800f9f0:	2001      	movs	r0, #1
 800f9f2:	f7fc fca3 	bl	800c33c <mg_log_prefix>
 800f9f6:	48a2      	ldr	r0, [pc, #648]	@ (800fc80 <mg_tcpip_poll+0x3c8>)
 800f9f8:	f7fc fcf0 	bl	800c3dc <mg_log>
      mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	2104      	movs	r1, #4
 800fa00:	6978      	ldr	r0, [r7, #20]
 800fa02:	f7fd fa79 	bl	800cef8 <mg_tcpip_call>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	f000 81a5 	beq.w	800fd5c <mg_tcpip_poll+0x4a4>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	7f1b      	ldrb	r3, [r3, #28]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d055      	beq.n	800fac6 <mg_tcpip_poll+0x20e>
 800fa1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d051      	beq.n	800fac6 <mg_tcpip_poll+0x20e>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 800fa22:	697b      	ldr	r3, [r7, #20]
 800fa24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa28:	2b01      	cmp	r3, #1
 800fa2a:	d103      	bne.n	800fa34 <mg_tcpip_poll+0x17c>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800fa2c:	6978      	ldr	r0, [r7, #20]
 800fa2e:	f7fd fedb 	bl	800d7e8 <tx_dhcp_discover>
 800fa32:	e048      	b.n	800fac6 <mg_tcpip_poll+0x20e>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa3a:	2b04      	cmp	r3, #4
 800fa3c:	d143      	bne.n	800fac6 <mg_tcpip_poll+0x20e>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800fa44:	4313      	orrs	r3, r2
 800fa46:	d03e      	beq.n	800fac6 <mg_tcpip_poll+0x20e>
      if (ifp->now >= ifp->lease_expire) {
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800fa54:	4290      	cmp	r0, r2
 800fa56:	eb71 0303 	sbcs.w	r3, r1, r3
 800fa5a:	d30a      	bcc.n	800fa72 <mg_tcpip_poll+0x1ba>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	2200      	movs	r2, #0
 800fa68:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 800fa6a:	6978      	ldr	r0, [r7, #20]
 800fa6c:	f7fd fbb8 	bl	800d1e0 <onstatechange>
 800fa70:	e029      	b.n	800fac6 <mg_tcpip_poll+0x20e>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800fa78:	4982      	ldr	r1, [pc, #520]	@ (800fc84 <mg_tcpip_poll+0x3cc>)
 800fa7a:	1854      	adds	r4, r2, r1
 800fa7c:	f143 0500 	adc.w	r5, r3, #0
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800fa86:	42a2      	cmp	r2, r4
 800fa88:	41ab      	sbcs	r3, r5
 800fa8a:	d21c      	bcs.n	800fac6 <mg_tcpip_poll+0x20e>
                 ((ifp->now / 1000) % 60) == 0) {
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800fa92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fa96:	f04f 0300 	mov.w	r3, #0
 800fa9a:	f7f0 fca1 	bl	80003e0 <__aeabi_uldivmod>
 800fa9e:	4602      	mov	r2, r0
 800faa0:	460b      	mov	r3, r1
 800faa2:	4610      	mov	r0, r2
 800faa4:	4619      	mov	r1, r3
 800faa6:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800faaa:	f04f 0300 	mov.w	r3, #0
 800faae:	f7f0 fc97 	bl	80003e0 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800fab2:	4313      	orrs	r3, r2
 800fab4:	d107      	bne.n	800fac6 <mg_tcpip_poll+0x20e>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	689a      	ldr	r2, [r3, #8]
 800faba:	f04f 33ff 	mov.w	r3, #4294967295
 800fabe:	4972      	ldr	r1, [pc, #456]	@ (800fc88 <mg_tcpip_poll+0x3d0>)
 800fac0:	6978      	ldr	r0, [r7, #20]
 800fac2:	f7fd fe5f 	bl	800d784 <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Simple polling driver, returns one frame
 800fac6:	697b      	ldr	r3, [r7, #20]
 800fac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faca:	689b      	ldr	r3, [r3, #8]
 800facc:	2b00      	cmp	r3, #0
 800face:	d019      	beq.n	800fb04 <mg_tcpip_poll+0x24c>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800fad0:	697b      	ldr	r3, [r7, #20]
 800fad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800fada:	697a      	ldr	r2, [r7, #20]
 800fadc:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800fade:	697a      	ldr	r2, [r7, #20]
 800fae0:	4798      	blx	r3
 800fae2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 800fae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d024      	beq.n	800fb34 <mg_tcpip_poll+0x27c>
      ifp->nrecv++;
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800faee:	1c5a      	adds	r2, r3, #1
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	679a      	str	r2, [r3, #120]	@ 0x78
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fafa:	4619      	mov	r1, r3
 800fafc:	6978      	ldr	r0, [r7, #20]
 800fafe:	f7ff fdc7 	bl	800f690 <mg_tcpip_rx>
 800fb02:	e017      	b.n	800fb34 <mg_tcpip_poll+0x27c>
    }
  } else {  // Complex poll / Interrupt-based driver. Queues recvd frames
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	3334      	adds	r3, #52	@ 0x34
 800fb08:	f107 0220 	add.w	r2, r7, #32
 800fb0c:	4611      	mov	r1, r2
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f001 f9a4 	bl	8010e5c <mg_queue_next>
 800fb14:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 800fb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00b      	beq.n	800fb34 <mg_tcpip_poll+0x27c>
      mg_tcpip_rx(ifp, buf, len);
 800fb1c:	6a3b      	ldr	r3, [r7, #32]
 800fb1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb20:	4619      	mov	r1, r3
 800fb22:	6978      	ldr	r0, [r7, #20]
 800fb24:	f7ff fdb4 	bl	800f690 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	3334      	adds	r3, #52	@ 0x34
 800fb2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f001 fa12 	bl	8010f58 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	637b      	str	r3, [r7, #52]	@ 0x34
 800fb3c:	e109      	b.n	800fd52 <mg_tcpip_poll+0x49a>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 800fb3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb40:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800fb44:	f003 0301 	and.w	r3, r3, #1
 800fb48:	b2db      	uxtb	r3, r3
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d008      	beq.n	800fb60 <mg_tcpip_poll+0x2a8>
 800fb4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb50:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fb54:	f003 0310 	and.w	r3, r3, #16
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 80f3 	beq.w	800fd46 <mg_tcpip_poll+0x48e>
 800fb60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb62:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fb66:	f003 0301 	and.w	r3, r3, #1
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	f040 80ea 	bne.w	800fd46 <mg_tcpip_poll+0x48e>
 800fb72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb74:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fb78:	f003 0308 	and.w	r3, r3, #8
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	f040 80e1 	bne.w	800fd46 <mg_tcpip_poll+0x48e>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 800fb84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb86:	33b0      	adds	r3, #176	@ 0xb0
 800fb88:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800fb8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb8c:	331c      	adds	r3, #28
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	61fb      	str	r3, [r7, #28]
    if (ifp->now > s->timer) {
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800fb98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fb9a:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800fb9e:	4290      	cmp	r0, r2
 800fba0:	eb71 0303 	sbcs.w	r3, r1, r3
 800fba4:	f080 80d2 	bcs.w	800fd4c <mg_tcpip_poll+0x494>
      if (s->ttype == MIP_TTYPE_ARP) {
 800fba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fbae:	2b02      	cmp	r3, #2
 800fbb0:	d104      	bne.n	800fbbc <mg_tcpip_poll+0x304>
        mg_error(c, "ARP timeout");
 800fbb2:	4936      	ldr	r1, [pc, #216]	@ (800fc8c <mg_tcpip_poll+0x3d4>)
 800fbb4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fbb6:	f7f6 feb1 	bl	800691c <mg_error>
 800fbba:	e0bf      	b.n	800fd3c <mg_tcpip_poll+0x484>
      } else if (c->is_udp) {
 800fbbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbbe:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800fbc2:	f003 0301 	and.w	r3, r3, #1
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	f040 80be 	bne.w	800fd4a <mg_tcpip_poll+0x492>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 800fbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d142      	bne.n	800fc5e <mg_tcpip_poll+0x3a6>
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbda:	691a      	ldr	r2, [r3, #16]
 800fbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d03c      	beq.n	800fc5e <mg_tcpip_poll+0x3a6>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 800fbe4:	4b23      	ldr	r3, [pc, #140]	@ (800fc74 <mg_tcpip_poll+0x3bc>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	2b03      	cmp	r3, #3
 800fbea:	dd0f      	ble.n	800fc0c <mg_tcpip_poll+0x354>
 800fbec:	4b22      	ldr	r3, [pc, #136]	@ (800fc78 <mg_tcpip_poll+0x3c0>)
 800fbee:	f241 4245 	movw	r2, #5189	@ 0x1445
 800fbf2:	4922      	ldr	r1, [pc, #136]	@ (800fc7c <mg_tcpip_poll+0x3c4>)
 800fbf4:	2004      	movs	r0, #4
 800fbf6:	f7fc fba1 	bl	800c33c <mg_log_prefix>
 800fbfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fbfc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800fbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	4822      	ldr	r0, [pc, #136]	@ (800fc90 <mg_tcpip_poll+0x3d8>)
 800fc08:	f7fc fbe8 	bl	800c3dc <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800fc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc0e:	f103 061a 	add.w	r6, r3, #26
 800fc12:	69fb      	ldr	r3, [r7, #28]
 800fc14:	613b      	str	r3, [r7, #16]
 800fc16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc18:	8b1c      	ldrh	r4, [r3, #24]
 800fc1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc1c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800fc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	4618      	mov	r0, r3
 800fc24:	f00f fc87 	bl	801f536 <mg_ntohl>
 800fc28:	6078      	str	r0, [r7, #4]
 800fc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f00f fc81 	bl	801f536 <mg_ntohl>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2200      	movs	r2, #0
 800fc38:	9205      	str	r2, [sp, #20]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	9204      	str	r2, [sp, #16]
 800fc3e:	9303      	str	r3, [sp, #12]
 800fc40:	6879      	ldr	r1, [r7, #4]
 800fc42:	9102      	str	r1, [sp, #8]
 800fc44:	9501      	str	r5, [sp, #4]
 800fc46:	9400      	str	r4, [sp, #0]
 800fc48:	2310      	movs	r3, #16
 800fc4a:	693a      	ldr	r2, [r7, #16]
 800fc4c:	4631      	mov	r1, r6
 800fc4e:	6978      	ldr	r0, [r7, #20]
 800fc50:	f7fe fc2e 	bl	800e4b0 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 800fc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc56:	685a      	ldr	r2, [r3, #4]
 800fc58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc5a:	611a      	str	r2, [r3, #16]
 800fc5c:	e06e      	b.n	800fd3c <mg_tcpip_poll+0x484>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc60:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fc64:	2b03      	cmp	r3, #3
 800fc66:	d117      	bne.n	800fc98 <mg_tcpip_poll+0x3e0>
        mg_error(c, "Connection timeout");
 800fc68:	490a      	ldr	r1, [pc, #40]	@ (800fc94 <mg_tcpip_poll+0x3dc>)
 800fc6a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fc6c:	f7f6 fe56 	bl	800691c <mg_error>
 800fc70:	e064      	b.n	800fd3c <mg_tcpip_poll+0x484>
 800fc72:	bf00      	nop
 800fc74:	24000258 	.word	0x24000258
 800fc78:	08027e94 	.word	0x08027e94
 800fc7c:	080241e8 	.word	0x080241e8
 800fc80:	08025708 	.word	0x08025708
 800fc84:	001b7740 	.word	0x001b7740
 800fc88:	080278dc 	.word	0x080278dc
 800fc8c:	08025718 	.word	0x08025718
 800fc90:	08025724 	.word	0x08025724
 800fc94:	08025734 	.word	0x08025734
      } else if (s->ttype == MIP_TTYPE_FIN) {
 800fc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fc9e:	2b04      	cmp	r3, #4
 800fca0:	d107      	bne.n	800fcb2 <mg_tcpip_poll+0x3fa>
        c->is_closing = 1;
 800fca2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fca4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800fca8:	f043 0320 	orr.w	r3, r3, #32
 800fcac:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 800fcb0:	e04c      	b.n	800fd4c <mg_tcpip_poll+0x494>
      } else {
        if (s->tmiss++ > 2) {
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800fcb8:	1c5a      	adds	r2, r3, #1
 800fcba:	b2d1      	uxtb	r1, r2
 800fcbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcbe:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d904      	bls.n	800fcd0 <mg_tcpip_poll+0x418>
          mg_error(c, "keepalive");
 800fcc6:	4927      	ldr	r1, [pc, #156]	@ (800fd64 <mg_tcpip_poll+0x4ac>)
 800fcc8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fcca:	f7f6 fe27 	bl	800691c <mg_error>
 800fcce:	e035      	b.n	800fd3c <mg_tcpip_poll+0x484>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 800fcd0:	4b25      	ldr	r3, [pc, #148]	@ (800fd68 <mg_tcpip_poll+0x4b0>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	2b03      	cmp	r3, #3
 800fcd6:	dd0c      	ble.n	800fcf2 <mg_tcpip_poll+0x43a>
 800fcd8:	4b24      	ldr	r3, [pc, #144]	@ (800fd6c <mg_tcpip_poll+0x4b4>)
 800fcda:	f241 4252 	movw	r2, #5202	@ 0x1452
 800fcde:	4924      	ldr	r1, [pc, #144]	@ (800fd70 <mg_tcpip_poll+0x4b8>)
 800fce0:	2004      	movs	r0, #4
 800fce2:	f7fc fb2b 	bl	800c33c <mg_log_prefix>
 800fce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcea:	4619      	mov	r1, r3
 800fcec:	4821      	ldr	r0, [pc, #132]	@ (800fd74 <mg_tcpip_poll+0x4bc>)
 800fcee:	f7fc fb75 	bl	800c3dc <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800fcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf4:	f103 061a 	add.w	r6, r3, #26
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	613b      	str	r3, [r7, #16]
 800fcfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcfe:	8b1c      	ldrh	r4, [r3, #24]
 800fd00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd02:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 800fd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd06:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f00f fc13 	bl	801f536 <mg_ntohl>
 800fd10:	6078      	str	r0, [r7, #4]
 800fd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f00f fc0d 	bl	801f536 <mg_ntohl>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2200      	movs	r2, #0
 800fd20:	9205      	str	r2, [sp, #20]
 800fd22:	2200      	movs	r2, #0
 800fd24:	9204      	str	r2, [sp, #16]
 800fd26:	9303      	str	r3, [sp, #12]
 800fd28:	6879      	ldr	r1, [r7, #4]
 800fd2a:	9102      	str	r1, [sp, #8]
 800fd2c:	9501      	str	r5, [sp, #4]
 800fd2e:	9400      	str	r4, [sp, #0]
 800fd30:	2310      	movs	r3, #16
 800fd32:	693a      	ldr	r2, [r7, #16]
 800fd34:	4631      	mov	r1, r6
 800fd36:	6978      	ldr	r0, [r7, #20]
 800fd38:	f7fe fbba 	bl	800e4b0 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fd40:	f7fd f966 	bl	800d010 <settmout>
 800fd44:	e002      	b.n	800fd4c <mg_tcpip_poll+0x494>
      continue;
 800fd46:	bf00      	nop
 800fd48:	e000      	b.n	800fd4c <mg_tcpip_poll+0x494>
        continue;
 800fd4a:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800fd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	637b      	str	r3, [r7, #52]	@ 0x34
 800fd52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f47f aef2 	bne.w	800fb3e <mg_tcpip_poll+0x286>
 800fd5a:	e000      	b.n	800fd5e <mg_tcpip_poll+0x4a6>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800fd5c:	bf00      	nop
    }
  }
}
 800fd5e:	373c      	adds	r7, #60	@ 0x3c
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd64:	08025748 	.word	0x08025748
 800fd68:	24000258 	.word	0x24000258
 800fd6c:	08027e94 	.word	0x08027e94
 800fd70:	080241e8 	.word	0x080241e8
 800fd74:	08025754 	.word	0x08025754

0800fd78 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b086      	sub	sp, #24
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	3334      	adds	r3, #52	@ 0x34
 800fd88:	f107 0114 	add.w	r1, r7, #20
 800fd8c:	68ba      	ldr	r2, [r7, #8]
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f001 f80c 	bl	8010dac <mg_queue_book>
 800fd94:	4602      	mov	r2, r0
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d811      	bhi.n	800fdc0 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	68ba      	ldr	r2, [r7, #8]
 800fda0:	68f9      	ldr	r1, [r7, #12]
 800fda2:	4618      	mov	r0, r3
 800fda4:	f013 fced 	bl	8023782 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	3334      	adds	r3, #52	@ 0x34
 800fdac:	68b9      	ldr	r1, [r7, #8]
 800fdae:	4618      	mov	r0, r3
 800fdb0:	f001 f89a 	bl	8010ee8 <mg_queue_add>
    ifp->nrecv++;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fdb8:	1c5a      	adds	r2, r3, #1
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	679a      	str	r2, [r3, #120]	@ 0x78
  } else {
    ifp->ndrop++;
  }
}
 800fdbe:	e004      	b.n	800fdca <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fdc4:	1c5a      	adds	r2, r3, #1
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fdca:	bf00      	nop
 800fdcc:	3718      	adds	r7, #24
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
	...

0800fdd4 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d12d      	bne.n	800fe42 <mg_tcpip_init+0x6e>
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	785b      	ldrb	r3, [r3, #1]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d129      	bne.n	800fe42 <mg_tcpip_init+0x6e>
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	789b      	ldrb	r3, [r3, #2]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d125      	bne.n	800fe42 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d121      	bne.n	800fe42 <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800fdfe:	683b      	ldr	r3, [r7, #0]
 800fe00:	791b      	ldrb	r3, [r3, #4]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d11d      	bne.n	800fe42 <mg_tcpip_init+0x6e>
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	795b      	ldrb	r3, [r3, #5]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d119      	bne.n	800fe42 <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800fe0e:	683b      	ldr	r3, [r7, #0]
 800fe10:	2202      	movs	r2, #2
 800fe12:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	3301      	adds	r3, #1
 800fe18:	2105      	movs	r1, #5
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7f0 fc76 	bl	800070c <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800fe20:	4b59      	ldr	r3, [pc, #356]	@ (800ff88 <mg_tcpip_init+0x1b4>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	dd0c      	ble.n	800fe42 <mg_tcpip_init+0x6e>
 800fe28:	4b58      	ldr	r3, [pc, #352]	@ (800ff8c <mg_tcpip_init+0x1b8>)
 800fe2a:	f241 4271 	movw	r2, #5233	@ 0x1471
 800fe2e:	4958      	ldr	r1, [pc, #352]	@ (800ff90 <mg_tcpip_init+0x1bc>)
 800fe30:	2002      	movs	r0, #2
 800fe32:	f7fc fa83 	bl	800c33c <mg_log_prefix>
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	4956      	ldr	r1, [pc, #344]	@ (800ff94 <mg_tcpip_init+0x1c0>)
 800fe3c:	4856      	ldr	r0, [pc, #344]	@ (800ff98 <mg_tcpip_init+0x1c4>)
 800fe3e:	f7fc facd 	bl	800c3dc <mg_log>
  }

  // If DHCP name is not set, use "mip"
  if (ifp->dhcp_name[0] == '\0') {
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d106      	bne.n	800fe5a <mg_tcpip_init+0x86>
    memcpy(ifp->dhcp_name, "mip", 4);
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	3344      	adds	r3, #68	@ 0x44
 800fe50:	2204      	movs	r2, #4
 800fe52:	4952      	ldr	r1, [pc, #328]	@ (800ff9c <mg_tcpip_init+0x1c8>)
 800fe54:	4618      	mov	r0, r3
 800fe56:	f013 fc94 	bl	8023782 <memcpy>
  }
  ifp->dhcp_name[sizeof(ifp->dhcp_name) - 1] = '\0';  // Just in case
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d019      	beq.n	800fea0 <mg_tcpip_init+0xcc>
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	6838      	ldr	r0, [r7, #0]
 800fe74:	4798      	blx	r3
 800fe76:	4603      	mov	r3, r0
 800fe78:	f083 0301 	eor.w	r3, r3, #1
 800fe7c:	b2db      	uxtb	r3, r3
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d00e      	beq.n	800fea0 <mg_tcpip_init+0xcc>
    MG_ERROR(("driver init failed"));
 800fe82:	4b41      	ldr	r3, [pc, #260]	@ (800ff88 <mg_tcpip_init+0x1b4>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	dd7a      	ble.n	800ff80 <mg_tcpip_init+0x1ac>
 800fe8a:	4b40      	ldr	r3, [pc, #256]	@ (800ff8c <mg_tcpip_init+0x1b8>)
 800fe8c:	f241 427b 	movw	r2, #5243	@ 0x147b
 800fe90:	493f      	ldr	r1, [pc, #252]	@ (800ff90 <mg_tcpip_init+0x1bc>)
 800fe92:	2001      	movs	r0, #1
 800fe94:	f7fc fa52 	bl	800c33c <mg_log_prefix>
 800fe98:	4841      	ldr	r0, [pc, #260]	@ (800ffa0 <mg_tcpip_init+0x1cc>)
 800fe9a:	f7fc fa9f 	bl	800c3dc <mg_log>
 800fe9e:	e06f      	b.n	800ff80 <mg_tcpip_init+0x1ac>
  } else {
    size_t framesize = 1540;
 800fea0:	f240 6304 	movw	r3, #1540	@ 0x604
 800fea4:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800fea6:	68f9      	ldr	r1, [r7, #12]
 800fea8:	2001      	movs	r0, #1
 800feaa:	f013 f85f 	bl	8022f6c <calloc>
 800feae:	4603      	mov	r3, r0
 800feb0:	461a      	mov	r2, r3
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	615a      	str	r2, [r3, #20]
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	68fa      	ldr	r2, [r7, #12]
 800feba:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d10a      	bne.n	800feda <mg_tcpip_init+0x106>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fec8:	689b      	ldr	r3, [r3, #8]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d001      	beq.n	800fed2 <mg_tcpip_init+0xfe>
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	e001      	b.n	800fed6 <mg_tcpip_init+0x102>
 800fed2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fed6:	683a      	ldr	r2, [r7, #0]
 800fed8:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fede:	4619      	mov	r1, r3
 800fee0:	2001      	movs	r0, #1
 800fee2:	f013 f843 	bl	8022f6c <calloc>
 800fee6:	4603      	mov	r3, r0
 800fee8:	461a      	mov	r2, r3
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 800feee:	f7f0 fc3b 	bl	8000768 <mg_millis>
 800fef2:	4602      	mov	r2, r0
 800fef4:	460b      	mov	r3, r1
 800fef6:	6839      	ldr	r1, [r7, #0]
 800fef8:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    mgr->ifp = ifp;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	639a      	str	r2, [r3, #56]	@ 0x38
    ifp->mgr = mgr;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	687a      	ldr	r2, [r7, #4]
 800ff06:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800ff0e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    mgr->extraconnsize = sizeof(struct connstate);
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2238      	movs	r2, #56	@ 0x38
 800ff16:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d102      	bne.n	800ff26 <mg_tcpip_init+0x152>
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	2201      	movs	r2, #1
 800ff24:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	3352      	adds	r3, #82	@ 0x52
 800ff2a:	2206      	movs	r2, #6
 800ff2c:	21ff      	movs	r1, #255	@ 0xff
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f013 faf1 	bl	8023516 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	3370      	adds	r3, #112	@ 0x70
 800ff38:	2102      	movs	r1, #2
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7f0 fbe6 	bl	800070c <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800ff40:	683b      	ldr	r3, [r7, #0]
 800ff42:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800ff46:	4b17      	ldr	r3, [pc, #92]	@ (800ffa4 <mg_tcpip_init+0x1d0>)
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	695b      	ldr	r3, [r3, #20]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d003      	beq.n	800ff62 <mg_tcpip_init+0x18e>
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d10e      	bne.n	800ff80 <mg_tcpip_init+0x1ac>
 800ff62:	4b09      	ldr	r3, [pc, #36]	@ (800ff88 <mg_tcpip_init+0x1b4>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	dd0a      	ble.n	800ff80 <mg_tcpip_init+0x1ac>
 800ff6a:	4b08      	ldr	r3, [pc, #32]	@ (800ff8c <mg_tcpip_init+0x1b8>)
 800ff6c:	f241 428c 	movw	r2, #5260	@ 0x148c
 800ff70:	4907      	ldr	r1, [pc, #28]	@ (800ff90 <mg_tcpip_init+0x1bc>)
 800ff72:	2001      	movs	r0, #1
 800ff74:	f7fc f9e2 	bl	800c33c <mg_log_prefix>
 800ff78:	480b      	ldr	r0, [pc, #44]	@ (800ffa8 <mg_tcpip_init+0x1d4>)
 800ff7a:	f7fc fa2f 	bl	800c3dc <mg_log>
  }
}
 800ff7e:	e7ff      	b.n	800ff80 <mg_tcpip_init+0x1ac>
 800ff80:	bf00      	nop
 800ff82:	3710      	adds	r7, #16
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}
 800ff88:	24000258 	.word	0x24000258
 800ff8c:	08027ea4 	.word	0x08027ea4
 800ff90:	080241e8 	.word	0x080241e8
 800ff94:	08010ac5 	.word	0x08010ac5
 800ff98:	08025764 	.word	0x08025764
 800ff9c:	08025788 	.word	0x08025788
 800ffa0:	0802578c 	.word	0x0802578c
 800ffa4:	ffff8000 	.word	0xffff8000
 800ffa8:	080251a4 	.word	0x080251a4

0800ffac <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 800ffac:	b5b0      	push	{r4, r5, r7, lr}
 800ffae:	b08c      	sub	sp, #48	@ 0x30
 800ffb0:	af06      	add	r7, sp, #24
 800ffb2:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	33b0      	adds	r3, #176	@ 0xb0
 800ffb8:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	8b1b      	ldrh	r3, [r3, #24]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f00f faa2 	bl	801f508 <mg_ntohs>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f00f fab5 	bl	801f536 <mg_ntohl>
 800ffcc:	6138      	str	r0, [r7, #16]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	331c      	adds	r3, #28
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	60fb      	str	r3, [r7, #12]
  tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0,
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	f103 041a 	add.w	r4, r3, #26
 800ffe2:	68fd      	ldr	r5, [r7, #12]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	8b1b      	ldrh	r3, [r3, #24]
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800ffec:	2100      	movs	r1, #0
 800ffee:	9105      	str	r1, [sp, #20]
 800fff0:	2100      	movs	r1, #0
 800fff2:	9104      	str	r1, [sp, #16]
 800fff4:	2100      	movs	r1, #0
 800fff6:	9103      	str	r1, [sp, #12]
 800fff8:	6939      	ldr	r1, [r7, #16]
 800fffa:	9102      	str	r1, [sp, #8]
 800fffc:	9201      	str	r2, [sp, #4]
 800fffe:	9300      	str	r3, [sp, #0]
 8010000:	2302      	movs	r3, #2
 8010002:	462a      	mov	r2, r5
 8010004:	4621      	mov	r1, r4
 8010006:	f7fe fa53 	bl	800e4b0 <tx_tcp>
         NULL, 0);
}
 801000a:	bf00      	nop
 801000c:	3718      	adds	r7, #24
 801000e:	46bd      	mov	sp, r7
 8010010:	bdb0      	pop	{r4, r5, r7, pc}

08010012 <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 8010012:	b580      	push	{r7, lr}
 8010014:	b082      	sub	sp, #8
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010020:	f003 0301 	and.w	r3, r3, #1
 8010024:	b2db      	uxtb	r3, r3
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00c      	beq.n	8010044 <mac_resolved+0x32>
    c->is_connecting = 0;
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010030:	f023 0320 	bic.w	r3, r3, #32
 8010034:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 8010038:	2200      	movs	r2, #0
 801003a:	2104      	movs	r1, #4
 801003c:	6878      	ldr	r0, [r7, #4]
 801003e:	f7f6 fc4c 	bl	80068da <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 8010042:	e006      	b.n	8010052 <mac_resolved+0x40>
    send_syn(c);
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f7ff ffb1 	bl	800ffac <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 801004a:	2103      	movs	r1, #3
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f7fc ffdf 	bl	800d010 <settmout>
}
 8010052:	bf00      	nop
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
	...

0801005c <mg_open_listener>:
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}

bool mg_open_listener(struct mg_connection *c, const char *url) {
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8010066:	6838      	ldr	r0, [r7, #0]
 8010068:	f00f f90a 	bl	801f280 <mg_url_port>
 801006c:	4603      	mov	r3, r0
 801006e:	4618      	mov	r0, r3
 8010070:	f00f fa4a 	bl	801f508 <mg_ntohs>
 8010074:	4603      	mov	r3, r0
 8010076:	461a      	mov	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	831a      	strh	r2, [r3, #24]
  if (!mg_aton(mg_url_host(url), &c->loc)) {
 801007c:	f107 0308 	add.w	r3, r7, #8
 8010080:	6839      	ldr	r1, [r7, #0]
 8010082:	4618      	mov	r0, r3
 8010084:	f00f f8c9 	bl	801f21a <mg_url_host>
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	3308      	adds	r3, #8
 801008c:	461a      	mov	r2, r3
 801008e:	f107 0308 	add.w	r3, r7, #8
 8010092:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010096:	f7fc fd00 	bl	800ca9a <mg_aton>
 801009a:	4603      	mov	r3, r0
 801009c:	f083 0301 	eor.w	r3, r3, #1
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d010      	beq.n	80100c8 <mg_open_listener+0x6c>
    MG_ERROR(("invalid listening URL: %s", url));
 80100a6:	4b0b      	ldr	r3, [pc, #44]	@ (80100d4 <mg_open_listener+0x78>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	dd0a      	ble.n	80100c4 <mg_open_listener+0x68>
 80100ae:	4b0a      	ldr	r3, [pc, #40]	@ (80100d8 <mg_open_listener+0x7c>)
 80100b0:	f241 42d4 	movw	r2, #5332	@ 0x14d4
 80100b4:	4909      	ldr	r1, [pc, #36]	@ (80100dc <mg_open_listener+0x80>)
 80100b6:	2001      	movs	r0, #1
 80100b8:	f7fc f940 	bl	800c33c <mg_log_prefix>
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	4808      	ldr	r0, [pc, #32]	@ (80100e0 <mg_open_listener+0x84>)
 80100c0:	f7fc f98c 	bl	800c3dc <mg_log>
    return false;
 80100c4:	2300      	movs	r3, #0
 80100c6:	e000      	b.n	80100ca <mg_open_listener+0x6e>
  }
  return true;
 80100c8:	2301      	movs	r3, #1
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	24000258 	.word	0x24000258
 80100d8:	08027eb4 	.word	0x08027eb4
 80100dc:	080241e8 	.word	0x080241e8
 80100e0:	080257c8 	.word	0x080257c8

080100e4 <write_conn>:

static void write_conn(struct mg_connection *c) {
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80100f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100f6:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d009      	beq.n	8010110 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010104:	461a      	mov	r2, r3
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f008 fcaa 	bl	8018a60 <mg_tls_send>
 801010c:	4603      	mov	r3, r0
 801010e:	e008      	b.n	8010122 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010118:	461a      	mov	r2, r3
 801011a:	6878      	ldr	r0, [r7, #4]
 801011c:	f7fe fc66 	bl	800e9ec <mg_io_send>
 8010120:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8010122:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801012a:	d104      	bne.n	8010136 <write_conn+0x52>
    mg_error(c, "tx err");
 801012c:	490c      	ldr	r1, [pc, #48]	@ (8010160 <write_conn+0x7c>)
 801012e:	6878      	ldr	r0, [r7, #4]
 8010130:	f7f6 fbf4 	bl	800691c <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8010134:	e010      	b.n	8010158 <write_conn+0x74>
  } else if (len > 0) {
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2b00      	cmp	r3, #0
 801013a:	dd0d      	ble.n	8010158 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	3348      	adds	r3, #72	@ 0x48
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	2100      	movs	r1, #0
 8010144:	4618      	mov	r0, r3
 8010146:	f7fb fa2d 	bl	800b5a4 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 801014a:	f107 030c 	add.w	r3, r7, #12
 801014e:	461a      	mov	r2, r3
 8010150:	2108      	movs	r1, #8
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f7f6 fbc1 	bl	80068da <mg_call>
}
 8010158:	bf00      	nop
 801015a:	3710      	adds	r7, #16
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}
 8010160:	080257e4 	.word	0x080257e4

08010164 <init_closure>:

static void init_closure(struct mg_connection *c) {
 8010164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010168:	b08c      	sub	sp, #48	@ 0x30
 801016a:	af06      	add	r7, sp, #24
 801016c:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	33b0      	adds	r3, #176	@ 0xb0
 8010172:	617b      	str	r3, [r7, #20]
  if (c->is_udp == false && c->is_listening == false &&
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801017a:	f003 0301 	and.w	r3, r3, #1
 801017e:	b2db      	uxtb	r3, r3
 8010180:	2b00      	cmp	r3, #0
 8010182:	d13e      	bne.n	8010202 <init_closure+0x9e>
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801018a:	f003 0301 	and.w	r3, r3, #1
 801018e:	b2db      	uxtb	r3, r3
 8010190:	2b00      	cmp	r3, #0
 8010192:	d136      	bne.n	8010202 <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801019a:	f003 0320 	and.w	r3, r3, #32
 801019e:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d12e      	bne.n	8010202 <init_closure+0x9e>
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	331c      	adds	r3, #28
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	613b      	str	r3, [r7, #16]
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port,
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	f103 081a 	add.w	r8, r3, #26
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	60bb      	str	r3, [r7, #8]
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	8b1c      	ldrh	r4, [r3, #24]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f00f f9b4 	bl	801f536 <mg_ntohl>
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	697b      	ldr	r3, [r7, #20]
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	4618      	mov	r0, r3
 80101d6:	f00f f9ae 	bl	801f536 <mg_ntohl>
 80101da:	4603      	mov	r3, r0
 80101dc:	2200      	movs	r2, #0
 80101de:	9205      	str	r2, [sp, #20]
 80101e0:	2200      	movs	r2, #0
 80101e2:	9204      	str	r2, [sp, #16]
 80101e4:	9303      	str	r3, [sp, #12]
 80101e6:	6879      	ldr	r1, [r7, #4]
 80101e8:	9102      	str	r1, [sp, #8]
 80101ea:	9501      	str	r5, [sp, #4]
 80101ec:	9400      	str	r4, [sp, #0]
 80101ee:	2311      	movs	r3, #17
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	4641      	mov	r1, r8
 80101f4:	4630      	mov	r0, r6
 80101f6:	f7fe f95b 	bl	800e4b0 <tx_tcp>
           c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 80101fa:	2104      	movs	r1, #4
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f7fc ff07 	bl	800d010 <settmout>
  }
}
 8010202:	bf00      	nop
 8010204:	3718      	adds	r7, #24
 8010206:	46bd      	mov	sp, r7
 8010208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801020c <close_conn>:

static void close_conn(struct mg_connection *c) {
 801020c:	b580      	push	{r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	33b0      	adds	r3, #176	@ 0xb0
 8010218:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	3324      	adds	r3, #36	@ 0x24
 801021e:	4618      	mov	r0, r3
 8010220:	f7fb fa0b 	bl	800b63a <mg_iobuf_free>
  mg_close_conn(c);
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f7fc fc9f 	bl	800cb68 <mg_close_conn>
}
 801022a:	bf00      	nop
 801022c:	3710      	adds	r7, #16
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}

08010232 <can_write>:

static bool can_write(struct mg_connection *c) {
 8010232:	b480      	push	{r7}
 8010234:	b083      	sub	sp, #12
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010240:	f003 0320 	and.w	r3, r3, #32
 8010244:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8010246:	2b00      	cmp	r3, #0
 8010248:	d11d      	bne.n	8010286 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010250:	f003 0308 	and.w	r3, r3, #8
 8010254:	b2db      	uxtb	r3, r3
 8010256:	2b00      	cmp	r3, #0
 8010258:	d115      	bne.n	8010286 <can_write+0x54>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801025e:	2b00      	cmp	r3, #0
 8010260:	d011      	beq.n	8010286 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010268:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801026c:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 801026e:	2b00      	cmp	r3, #0
 8010270:	d109      	bne.n	8010286 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010278:	f003 0310 	and.w	r3, r3, #16
 801027c:	b2db      	uxtb	r3, r3
 801027e:	2b00      	cmp	r3, #0
 8010280:	d101      	bne.n	8010286 <can_write+0x54>
 8010282:	2301      	movs	r3, #1
 8010284:	e000      	b.n	8010288 <can_write+0x56>
 8010286:	2300      	movs	r3, #0
 8010288:	f003 0301 	and.w	r3, r3, #1
 801028c:	b2db      	uxtb	r3, r3
}
 801028e:	4618      	mov	r0, r3
 8010290:	370c      	adds	r7, #12
 8010292:	46bd      	mov	sp, r7
 8010294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010298:	4770      	bx	lr
	...

0801029c <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 801029c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102a0:	b091      	sub	sp, #68	@ 0x44
 80102a2:	af06      	add	r7, sp, #24
 80102a4:	60f8      	str	r0, [r7, #12]
 80102a6:	60b9      	str	r1, [r7, #8]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 80102a8:	f7f0 fa5e 	bl	8000768 <mg_millis>
 80102ac:	4602      	mov	r2, r0
 80102ae:	460b      	mov	r3, r1
 80102b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_timer_poll(&mgr->timers, now);
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80102ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80102be:	4608      	mov	r0, r1
 80102c0:	f004 fbc4 	bl	8014a4c <mg_timer_poll>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f000 810c 	beq.w	80104e6 <mg_mgr_poll+0x24a>
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	f000 8106 	beq.w	80104e6 <mg_mgr_poll+0x24a>
  mg_tcpip_poll(mgr->ifp, now);
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80102de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80102e2:	4608      	mov	r0, r1
 80102e4:	f7ff fae8 	bl	800f8b8 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80102ee:	e0f5      	b.n	80104dc <mg_mgr_poll+0x240>
    tmp = c->next;
 80102f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	623b      	str	r3, [r7, #32]
    struct connstate *s = (struct connstate *) (c + 1);
 80102f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f8:	33b0      	adds	r3, #176	@ 0xb0
 80102fa:	61fb      	str	r3, [r7, #28]
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 80102fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102fe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010302:	f003 0308 	and.w	r3, r3, #8
 8010306:	b2db      	uxtb	r3, r3
 8010308:	2b00      	cmp	r3, #0
 801030a:	d119      	bne.n	8010340 <mg_mgr_poll+0xa4>
 801030c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801030e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010312:	f003 0310 	and.w	r3, r3, #16
 8010316:	b2db      	uxtb	r3, r3
 8010318:	2b00      	cmp	r3, #0
 801031a:	d111      	bne.n	8010340 <mg_mgr_poll+0xa4>
 801031c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801031e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010322:	f003 0301 	and.w	r3, r3, #1
 8010326:	b2db      	uxtb	r3, r3
 8010328:	2b00      	cmp	r3, #0
 801032a:	d109      	bne.n	8010340 <mg_mgr_poll+0xa4>
                  !c->is_connecting;
 801032c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801032e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010332:	f003 0320 	and.w	r3, r3, #32
 8010336:	b2db      	uxtb	r3, r3
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 8010338:	2b00      	cmp	r3, #0
 801033a:	d101      	bne.n	8010340 <mg_mgr_poll+0xa4>
 801033c:	2301      	movs	r3, #1
 801033e:	e000      	b.n	8010342 <mg_mgr_poll+0xa6>
 8010340:	2300      	movs	r3, #0
 8010342:	76fb      	strb	r3, [r7, #27]
 8010344:	7efb      	ldrb	r3, [r7, #27]
 8010346:	f003 0301 	and.w	r3, r3, #1
 801034a:	76fb      	strb	r3, [r7, #27]
    mg_call(c, MG_EV_POLL, &now);
 801034c:	f107 0310 	add.w	r3, r7, #16
 8010350:	461a      	mov	r2, r3
 8010352:	2102      	movs	r1, #2
 8010354:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010356:	f7f6 fac0 	bl	80068da <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c %lu %lu", c->id, c->is_tls ? 'T' : 't',
 801035a:	4b65      	ldr	r3, [pc, #404]	@ (80104f0 <mg_mgr_poll+0x254>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b03      	cmp	r3, #3
 8010360:	dd55      	ble.n	801040e <mg_mgr_poll+0x172>
 8010362:	4b64      	ldr	r3, [pc, #400]	@ (80104f4 <mg_mgr_poll+0x258>)
 8010364:	f241 5208 	movw	r2, #5384	@ 0x1508
 8010368:	4963      	ldr	r1, [pc, #396]	@ (80104f8 <mg_mgr_poll+0x25c>)
 801036a:	2004      	movs	r0, #4
 801036c:	f7fb ffe6 	bl	800c33c <mg_log_prefix>
 8010370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010374:	607b      	str	r3, [r7, #4]
 8010376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010378:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801037c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010380:	b2db      	uxtb	r3, r3
 8010382:	2b00      	cmp	r3, #0
 8010384:	d002      	beq.n	801038c <mg_mgr_poll+0xf0>
 8010386:	f04f 0854 	mov.w	r8, #84	@ 0x54
 801038a:	e001      	b.n	8010390 <mg_mgr_poll+0xf4>
 801038c:	f04f 0874 	mov.w	r8, #116	@ 0x74
 8010390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010392:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010396:	f003 0320 	and.w	r3, r3, #32
 801039a:	b2db      	uxtb	r3, r3
 801039c:	2b00      	cmp	r3, #0
 801039e:	d002      	beq.n	80103a6 <mg_mgr_poll+0x10a>
 80103a0:	f04f 0943 	mov.w	r9, #67	@ 0x43
 80103a4:	e001      	b.n	80103aa <mg_mgr_poll+0x10e>
 80103a6:	f04f 0963 	mov.w	r9, #99	@ 0x63
 80103aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ac:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80103b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80103b4:	b2db      	uxtb	r3, r3
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d001      	beq.n	80103be <mg_mgr_poll+0x122>
 80103ba:	2448      	movs	r4, #72	@ 0x48
 80103bc:	e000      	b.n	80103c0 <mg_mgr_poll+0x124>
 80103be:	2468      	movs	r4, #104	@ 0x68
 80103c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80103c6:	f003 0308 	and.w	r3, r3, #8
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d001      	beq.n	80103d4 <mg_mgr_poll+0x138>
 80103d0:	2552      	movs	r5, #82	@ 0x52
 80103d2:	e000      	b.n	80103d6 <mg_mgr_poll+0x13a>
 80103d4:	2572      	movs	r5, #114	@ 0x72
 80103d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103d8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80103dc:	f003 0320 	and.w	r3, r3, #32
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d001      	beq.n	80103ea <mg_mgr_poll+0x14e>
 80103e6:	2643      	movs	r6, #67	@ 0x43
 80103e8:	e000      	b.n	80103ec <mg_mgr_poll+0x150>
 80103ea:	2663      	movs	r6, #99	@ 0x63
 80103ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80103ee:	f008 fc2f 	bl	8018c50 <mg_tls_pending>
 80103f2:	4602      	mov	r2, r0
 80103f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103f8:	9304      	str	r3, [sp, #16]
 80103fa:	9203      	str	r2, [sp, #12]
 80103fc:	9602      	str	r6, [sp, #8]
 80103fe:	9501      	str	r5, [sp, #4]
 8010400:	9400      	str	r4, [sp, #0]
 8010402:	464b      	mov	r3, r9
 8010404:	4642      	mov	r2, r8
 8010406:	6879      	ldr	r1, [r7, #4]
 8010408:	483c      	ldr	r0, [pc, #240]	@ (80104fc <mg_mgr_poll+0x260>)
 801040a:	f7fb ffe7 	bl	800c3dc <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c',
                mg_tls_pending(c), c->rtls.len));
    // order is important, TLS conn close with > 1 record in buffer (below)
    if (is_tls && (c->rtls.len > 0 || mg_tls_pending(c) > 0))
 801040e:	7efb      	ldrb	r3, [r7, #27]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00c      	beq.n	801042e <mg_mgr_poll+0x192>
 8010414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010418:	2b00      	cmp	r3, #0
 801041a:	d105      	bne.n	8010428 <mg_mgr_poll+0x18c>
 801041c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801041e:	f008 fc17 	bl	8018c50 <mg_tls_pending>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	d002      	beq.n	801042e <mg_mgr_poll+0x192>
      handle_tls_recv(c);
 8010428:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801042a:	f7fe fb61 	bl	800eaf0 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 801042e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010430:	f7ff feff 	bl	8010232 <can_write>
 8010434:	4603      	mov	r3, r0
 8010436:	2b00      	cmp	r3, #0
 8010438:	d002      	beq.n	8010440 <mg_mgr_poll+0x1a4>
 801043a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801043c:	f7ff fe52 	bl	80100e4 <write_conn>
    if (is_tls && c->tls && c->send.len == 0) mg_tls_flush(c);
 8010440:	7efb      	ldrb	r3, [r7, #27]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00b      	beq.n	801045e <mg_mgr_poll+0x1c2>
 8010446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010448:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801044c:	2b00      	cmp	r3, #0
 801044e:	d006      	beq.n	801045e <mg_mgr_poll+0x1c2>
 8010450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010454:	2b00      	cmp	r3, #0
 8010456:	d102      	bne.n	801045e <mg_mgr_poll+0x1c2>
 8010458:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801045a:	f008 fc0e 	bl	8018c7a <mg_tls_flush>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 801045e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010460:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010464:	f003 0310 	and.w	r3, r3, #16
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00b      	beq.n	8010486 <mg_mgr_poll+0x1ea>
 801046e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010472:	2b00      	cmp	r3, #0
 8010474:	d107      	bne.n	8010486 <mg_mgr_poll+0x1ea>
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	f893 3020 	ldrb.w	r3, [r3, #32]
 801047c:	2b04      	cmp	r3, #4
 801047e:	d002      	beq.n	8010486 <mg_mgr_poll+0x1ea>
      init_closure(c);
 8010480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010482:	f7ff fe6f 	bl	8010164 <init_closure>
    // For non-TLS, close immediately upon completing the 3-way closure
    // For TLS, handle any pending data (above) until MIP_TTYPE_FIN expires
    if (s->twclosure &&
 8010486:	69fb      	ldr	r3, [r7, #28]
 8010488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801048c:	2b00      	cmp	r3, #0
 801048e:	d018      	beq.n	80104c2 <mg_mgr_poll+0x226>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8010490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010492:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801049a:	b2db      	uxtb	r3, r3
    if (s->twclosure &&
 801049c:	2b00      	cmp	r3, #0
 801049e:	d009      	beq.n	80104b4 <mg_mgr_poll+0x218>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 80104a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d10c      	bne.n	80104c2 <mg_mgr_poll+0x226>
 80104a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104aa:	f008 fbd1 	bl	8018c50 <mg_tls_pending>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d106      	bne.n	80104c2 <mg_mgr_poll+0x226>
      c->is_closing = 1;
 80104b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104b6:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80104ba:	f043 0320 	orr.w	r3, r3, #32
 80104be:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    if (c->is_closing) close_conn(c);
 80104c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80104c8:	f003 0320 	and.w	r3, r3, #32
 80104cc:	b2db      	uxtb	r3, r3
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d002      	beq.n	80104d8 <mg_mgr_poll+0x23c>
 80104d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104d4:	f7ff fe9a 	bl	801020c <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 80104d8:	6a3b      	ldr	r3, [r7, #32]
 80104da:	627b      	str	r3, [r7, #36]	@ 0x24
 80104dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104de:	2b00      	cmp	r3, #0
 80104e0:	f47f af06 	bne.w	80102f0 <mg_mgr_poll+0x54>
 80104e4:	e000      	b.n	80104e8 <mg_mgr_poll+0x24c>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 80104e6:	bf00      	nop
  }
  (void) ms;
}
 80104e8:	372c      	adds	r7, #44	@ 0x2c
 80104ea:	46bd      	mov	sp, r7
 80104ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80104f0:	24000258 	.word	0x24000258
 80104f4:	08027ec8 	.word	0x08027ec8
 80104f8:	080241e8 	.word	0x080241e8
 80104fc:	080257ec 	.word	0x080257ec

08010500 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8010500:	b5b0      	push	{r4, r5, r7, lr}
 8010502:	b08c      	sub	sp, #48	@ 0x30
 8010504:	af04      	add	r7, sp, #16
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010512:	61bb      	str	r3, [r7, #24]
  bool res = false;
 8010514:	2300      	movs	r3, #0
 8010516:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	331c      	adds	r3, #28
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	689b      	ldr	r3, [r3, #8]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d004      	beq.n	8010532 <mg_send+0x32>
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801052e:	2b04      	cmp	r3, #4
 8010530:	d004      	beq.n	801053c <mg_send+0x3c>
    mg_error(c, "net down");
 8010532:	4934      	ldr	r1, [pc, #208]	@ (8010604 <mg_send+0x104>)
 8010534:	68f8      	ldr	r0, [r7, #12]
 8010536:	f7f6 f9f1 	bl	800691c <mg_error>
 801053a:	e05e      	b.n	80105fa <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010542:	f003 0301 	and.w	r3, r3, #1
 8010546:	b2db      	uxtb	r3, r3
 8010548:	2b00      	cmp	r3, #0
 801054a:	d01e      	beq.n	801058a <mg_send+0x8a>
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010552:	f003 0310 	and.w	r3, r3, #16
 8010556:	b2db      	uxtb	r3, r3
 8010558:	2b00      	cmp	r3, #0
 801055a:	d107      	bne.n	801056c <mg_send+0x6c>
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010562:	f003 0308 	and.w	r3, r3, #8
 8010566:	b2db      	uxtb	r3, r3
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00e      	beq.n	801058a <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 801056c:	4b26      	ldr	r3, [pc, #152]	@ (8010608 <mg_send+0x108>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2b03      	cmp	r3, #3
 8010572:	dd42      	ble.n	80105fa <mg_send+0xfa>
 8010574:	4b25      	ldr	r3, [pc, #148]	@ (801060c <mg_send+0x10c>)
 8010576:	f241 5226 	movw	r2, #5414	@ 0x1526
 801057a:	4925      	ldr	r1, [pc, #148]	@ (8010610 <mg_send+0x110>)
 801057c:	2004      	movs	r0, #4
 801057e:	f7fb fedd 	bl	800c33c <mg_log_prefix>
 8010582:	4824      	ldr	r0, [pc, #144]	@ (8010614 <mg_send+0x114>)
 8010584:	f7fb ff2a 	bl	800c3dc <mg_log>
 8010588:	e037      	b.n	80105fa <mg_send+0xfa>
  } else if (c->is_udp) {
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010590:	f003 0301 	and.w	r3, r3, #1
 8010594:	b2db      	uxtb	r3, r3
 8010596:	2b00      	cmp	r3, #0
 8010598:	d020      	beq.n	80105dc <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	33b0      	adds	r3, #176	@ 0xb0
 801059e:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 80105a0:	6879      	ldr	r1, [r7, #4]
 80105a2:	68f8      	ldr	r0, [r7, #12]
 80105a4:	f7fe f994 	bl	800e8d0 <trim_len>
 80105a8:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	f103 001a 	add.w	r0, r3, #26
 80105b0:	69bb      	ldr	r3, [r7, #24]
 80105b2:	689c      	ldr	r4, [r3, #8]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	8b1d      	ldrh	r5, [r3, #24]
 80105b8:	693b      	ldr	r3, [r7, #16]
 80105ba:	68fa      	ldr	r2, [r7, #12]
 80105bc:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80105be:	6879      	ldr	r1, [r7, #4]
 80105c0:	9103      	str	r1, [sp, #12]
 80105c2:	68b9      	ldr	r1, [r7, #8]
 80105c4:	9102      	str	r1, [sp, #8]
 80105c6:	9201      	str	r2, [sp, #4]
 80105c8:	9300      	str	r3, [sp, #0]
 80105ca:	462b      	mov	r3, r5
 80105cc:	4622      	mov	r2, r4
 80105ce:	4601      	mov	r1, r0
 80105d0:	69b8      	ldr	r0, [r7, #24]
 80105d2:	f7fc ff06 	bl	800d3e2 <tx_udp>
    res = true;
 80105d6:	2301      	movs	r3, #1
 80105d8:	77fb      	strb	r3, [r7, #31]
 80105da:	e00e      	b.n	80105fa <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	68ba      	ldr	r2, [r7, #8]
 80105ea:	f7fa ff89 	bl	800b500 <mg_iobuf_add>
 80105ee:	4603      	mov	r3, r0
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	bf14      	ite	ne
 80105f4:	2301      	movne	r3, #1
 80105f6:	2300      	moveq	r3, #0
 80105f8:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 80105fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3720      	adds	r7, #32
 8010600:	46bd      	mov	sp, r7
 8010602:	bdb0      	pop	{r4, r5, r7, pc}
 8010604:	08025808 	.word	0x08025808
 8010608:	24000258 	.word	0x24000258
 801060c:	08027ed4 	.word	0x08027ed4
 8010610:	080241e8 	.word	0x080241e8
 8010614:	08025814 	.word	0x08025814

08010618 <mg_ota_begin>:
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
  }
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
}

bool mg_ota_begin(size_t new_firmware_size) {
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  s_mg_flash_stm32h7.size = MG_REG(FLASH_SIZE_REG) * 1024;
 8010620:	4b06      	ldr	r3, [pc, #24]	@ (801063c <mg_ota_begin+0x24>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	029b      	lsls	r3, r3, #10
 8010626:	4a06      	ldr	r2, [pc, #24]	@ (8010640 <mg_ota_begin+0x28>)
 8010628:	6053      	str	r3, [r2, #4]
  if (IS_DUALCORE()) {
    // Using only the 1st bank (mapped to CM7)
    s_mg_flash_stm32h7.size /= 2;
  }
  return mg_ota_flash_begin(new_firmware_size, &s_mg_flash_stm32h7);
 801062a:	4905      	ldr	r1, [pc, #20]	@ (8010640 <mg_ota_begin+0x28>)
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f7f6 f9b7 	bl	80069a0 <mg_ota_flash_begin>
 8010632:	4603      	mov	r3, r0
}
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	1ff1e880 	.word	0x1ff1e880
 8010640:	24000268 	.word	0x24000268

08010644 <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
  return mg_ota_flash_write(buf, len, &s_mg_flash_stm32h7);
 801064e:	4a05      	ldr	r2, [pc, #20]	@ (8010664 <mg_ota_write+0x20>)
 8010650:	6839      	ldr	r1, [r7, #0]
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f7f6 fa20 	bl	8006a98 <mg_ota_flash_write>
 8010658:	4603      	mov	r3, r0
}
 801065a:	4618      	mov	r0, r3
 801065c:	3708      	adds	r7, #8
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	24000268 	.word	0x24000268

08010668 <mg_ota_end>:

bool mg_ota_end(void) {
 8010668:	b580      	push	{r7, lr}
 801066a:	af00      	add	r7, sp, #0
  if (mg_ota_flash_end(&s_mg_flash_stm32h7)) {
 801066c:	4825      	ldr	r0, [pc, #148]	@ (8010704 <mg_ota_end+0x9c>)
 801066e:	f7f6 fad7 	bl	8006c20 <mg_ota_flash_end>
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d042      	beq.n	80106fe <mg_ota_end+0x96>
    if (is_dualbank()) {
 8010678:	f013 fdae 	bl	80241d8 <__is_dualbank_veneer>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d003      	beq.n	801068a <mg_ota_end+0x22>
      // Bank swap is deferred until reset, been executing in flash, reset
      *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 8010682:	4b21      	ldr	r3, [pc, #132]	@ (8010708 <mg_ota_end+0xa0>)
 8010684:	4a21      	ldr	r2, [pc, #132]	@ (801070c <mg_ota_end+0xa4>)
 8010686:	601a      	str	r2, [r3, #0]
 8010688:	e039      	b.n	80106fe <mg_ota_end+0x96>
    } else {
      // Swap partitions. Pray power does not go away
      MG_INFO(("Swapping partitions, size %u (%u sectors)",
 801068a:	4b21      	ldr	r3, [pc, #132]	@ (8010710 <mg_ota_end+0xa8>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	2b01      	cmp	r3, #1
 8010690:	dd12      	ble.n	80106b8 <mg_ota_end+0x50>
 8010692:	4b20      	ldr	r3, [pc, #128]	@ (8010714 <mg_ota_end+0xac>)
 8010694:	f641 528d 	movw	r2, #7565	@ 0x1d8d
 8010698:	491f      	ldr	r1, [pc, #124]	@ (8010718 <mg_ota_end+0xb0>)
 801069a:	2002      	movs	r0, #2
 801069c:	f7fb fe4e 	bl	800c33c <mg_log_prefix>
 80106a0:	4b18      	ldr	r3, [pc, #96]	@ (8010704 <mg_ota_end+0x9c>)
 80106a2:	6859      	ldr	r1, [r3, #4]
 80106a4:	4b17      	ldr	r3, [pc, #92]	@ (8010704 <mg_ota_end+0x9c>)
 80106a6:	685a      	ldr	r2, [r3, #4]
 80106a8:	4b16      	ldr	r3, [pc, #88]	@ (8010704 <mg_ota_end+0x9c>)
 80106aa:	689b      	ldr	r3, [r3, #8]
 80106ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80106b0:	461a      	mov	r2, r3
 80106b2:	481a      	ldr	r0, [pc, #104]	@ (801071c <mg_ota_end+0xb4>)
 80106b4:	f7fb fe92 	bl	800c3dc <mg_log>
               s_mg_flash_stm32h7.size,
               s_mg_flash_stm32h7.size / s_mg_flash_stm32h7.secsz));
      MG_INFO(("Do NOT power off..."));
 80106b8:	4b15      	ldr	r3, [pc, #84]	@ (8010710 <mg_ota_end+0xa8>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	dd09      	ble.n	80106d4 <mg_ota_end+0x6c>
 80106c0:	4b14      	ldr	r3, [pc, #80]	@ (8010714 <mg_ota_end+0xac>)
 80106c2:	f641 5290 	movw	r2, #7568	@ 0x1d90
 80106c6:	4914      	ldr	r1, [pc, #80]	@ (8010718 <mg_ota_end+0xb0>)
 80106c8:	2002      	movs	r0, #2
 80106ca:	f7fb fe37 	bl	800c33c <mg_log_prefix>
 80106ce:	4814      	ldr	r0, [pc, #80]	@ (8010720 <mg_ota_end+0xb8>)
 80106d0:	f7fb fe84 	bl	800c3dc <mg_log>
      mg_log_level = MG_LL_NONE;
 80106d4:	4b0e      	ldr	r3, [pc, #56]	@ (8010710 <mg_ota_end+0xa8>)
 80106d6:	2200      	movs	r2, #0
 80106d8:	601a      	str	r2, [r3, #0]
      s_flash_irq_disabled = true;
 80106da:	4b12      	ldr	r3, [pc, #72]	@ (8010724 <mg_ota_end+0xbc>)
 80106dc:	2201      	movs	r2, #1
 80106de:	701a      	strb	r2, [r3, #0]
      // Runs in RAM, will reset when finished
      single_bank_swap(
          (char *) s_mg_flash_stm32h7.start,
 80106e0:	4b08      	ldr	r3, [pc, #32]	@ (8010704 <mg_ota_end+0x9c>)
 80106e2:	6818      	ldr	r0, [r3, #0]
          (char *) s_mg_flash_stm32h7.start + s_mg_flash_stm32h7.size / 2,
 80106e4:	4b07      	ldr	r3, [pc, #28]	@ (8010704 <mg_ota_end+0x9c>)
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	4b06      	ldr	r3, [pc, #24]	@ (8010704 <mg_ota_end+0x9c>)
 80106ea:	685b      	ldr	r3, [r3, #4]
 80106ec:	085b      	lsrs	r3, r3, #1
      single_bank_swap(
 80106ee:	18d1      	adds	r1, r2, r3
          s_mg_flash_stm32h7.size / 2, s_mg_flash_stm32h7.secsz);
 80106f0:	4b04      	ldr	r3, [pc, #16]	@ (8010704 <mg_ota_end+0x9c>)
 80106f2:	685b      	ldr	r3, [r3, #4]
      single_bank_swap(
 80106f4:	085a      	lsrs	r2, r3, #1
 80106f6:	4b03      	ldr	r3, [pc, #12]	@ (8010704 <mg_ota_end+0x9c>)
 80106f8:	689b      	ldr	r3, [r3, #8]
 80106fa:	f013 fd71 	bl	80241e0 <__single_bank_swap_veneer>
    }
  }
  return false;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	bd80      	pop	{r7, pc}
 8010704:	24000268 	.word	0x24000268
 8010708:	e000ed0c 	.word	0xe000ed0c
 801070c:	05fa0004 	.word	0x05fa0004
 8010710:	24000258 	.word	0x24000258
 8010714:	08027f04 	.word	0x08027f04
 8010718:	080241e8 	.word	0x080241e8
 801071c:	080258c0 	.word	0x080258c0
 8010720:	080258ec 	.word	0x080258ec
 8010724:	24001094 	.word	0x24001094

08010728 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8010728:	b580      	push	{r7, lr}
 801072a:	b084      	sub	sp, #16
 801072c:	af00      	add	r7, sp, #0
 801072e:	4603      	mov	r3, r0
 8010730:	6039      	str	r1, [r7, #0]
 8010732:	71fb      	strb	r3, [r7, #7]
 8010734:	4613      	mov	r3, r2
 8010736:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 801073c:	79bb      	ldrb	r3, [r7, #6]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d00d      	beq.n	801075e <mg_pfn_iobuf_private+0x36>
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	689b      	ldr	r3, [r3, #8]
 8010746:	1c9a      	adds	r2, r3, #2
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	685b      	ldr	r3, [r3, #4]
 801074c:	429a      	cmp	r2, r3
 801074e:	d906      	bls.n	801075e <mg_pfn_iobuf_private+0x36>
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	3302      	adds	r3, #2
 8010756:	4619      	mov	r1, r3
 8010758:	68f8      	ldr	r0, [r7, #12]
 801075a:	f7fa fe45 	bl	800b3e8 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	689b      	ldr	r3, [r3, #8]
 8010762:	1c9a      	adds	r2, r3, #2
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	429a      	cmp	r2, r3
 801076a:	d811      	bhi.n	8010790 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681a      	ldr	r2, [r3, #0]
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	689b      	ldr	r3, [r3, #8]
 8010774:	1c58      	adds	r0, r3, #1
 8010776:	68f9      	ldr	r1, [r7, #12]
 8010778:	6088      	str	r0, [r1, #8]
 801077a:	4413      	add	r3, r2
 801077c:	79fa      	ldrb	r2, [r7, #7]
 801077e:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	681a      	ldr	r2, [r3, #0]
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	689b      	ldr	r3, [r3, #8]
 8010788:	4413      	add	r3, r2
 801078a:	2200      	movs	r2, #0
 801078c:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 801078e:	e00f      	b.n	80107b0 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	689a      	ldr	r2, [r3, #8]
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	685b      	ldr	r3, [r3, #4]
 8010798:	429a      	cmp	r2, r3
 801079a:	d209      	bcs.n	80107b0 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681a      	ldr	r2, [r3, #0]
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	689b      	ldr	r3, [r3, #8]
 80107a4:	1c58      	adds	r0, r3, #1
 80107a6:	68f9      	ldr	r1, [r7, #12]
 80107a8:	6088      	str	r0, [r1, #8]
 80107aa:	4413      	add	r3, r2
 80107ac:	2200      	movs	r2, #0
 80107ae:	701a      	strb	r2, [r3, #0]
}
 80107b0:	bf00      	nop
 80107b2:	3710      	adds	r7, #16
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}

080107b8 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
 80107be:	4603      	mov	r3, r0
 80107c0:	6039      	str	r1, [r7, #0]
 80107c2:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 80107c4:	79fb      	ldrb	r3, [r7, #7]
 80107c6:	2200      	movs	r2, #0
 80107c8:	6839      	ldr	r1, [r7, #0]
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7ff ffac 	bl	8010728 <mg_pfn_iobuf_private>
}
 80107d0:	bf00      	nop
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	4603      	mov	r3, r0
 80107e0:	6039      	str	r1, [r7, #0]
 80107e2:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 80107e4:	79fb      	ldrb	r3, [r7, #7]
 80107e6:	2201      	movs	r2, #1
 80107e8:	6839      	ldr	r1, [r7, #0]
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7ff ff9c 	bl	8010728 <mg_pfn_iobuf_private>
}
 80107f0:	bf00      	nop
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}

080107f8 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b08a      	sub	sp, #40	@ 0x28
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	60b9      	str	r1, [r7, #8]
 8010802:	607a      	str	r2, [r7, #4]
 8010804:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	617b      	str	r3, [r7, #20]
 801080a:	68bb      	ldr	r3, [r7, #8]
 801080c:	61bb      	str	r3, [r7, #24]
 801080e:	2300      	movs	r3, #0
 8010810:	61fb      	str	r3, [r7, #28]
 8010812:	2300      	movs	r3, #0
 8010814:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8010816:	f107 0114 	add.w	r1, r7, #20
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	687a      	ldr	r2, [r7, #4]
 801081e:	4809      	ldr	r0, [pc, #36]	@ (8010844 <mg_vsnprintf+0x4c>)
 8010820:	f7f6 ff0e 	bl	8007640 <mg_vxprintf>
 8010824:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 8010826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	429a      	cmp	r2, r3
 801082c:	d204      	bcs.n	8010838 <mg_vsnprintf+0x40>
 801082e:	68fa      	ldr	r2, [r7, #12]
 8010830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010832:	4413      	add	r3, r2
 8010834:	2200      	movs	r2, #0
 8010836:	701a      	strb	r2, [r3, #0]
  return n;
 8010838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801083a:	4618      	mov	r0, r3
 801083c:	3728      	adds	r7, #40	@ 0x28
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	080107b9 	.word	0x080107b9

08010848 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8010848:	b40c      	push	{r2, r3}
 801084a:	b580      	push	{r7, lr}
 801084c:	b084      	sub	sp, #16
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
 8010852:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8010854:	f107 031c 	add.w	r3, r7, #28
 8010858:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 801085a:	f107 0308 	add.w	r3, r7, #8
 801085e:	69ba      	ldr	r2, [r7, #24]
 8010860:	6839      	ldr	r1, [r7, #0]
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f7ff ffc8 	bl	80107f8 <mg_vsnprintf>
 8010868:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 801086a:	68fb      	ldr	r3, [r7, #12]
}
 801086c:	4618      	mov	r0, r3
 801086e:	3710      	adds	r7, #16
 8010870:	46bd      	mov	sp, r7
 8010872:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010876:	b002      	add	sp, #8
 8010878:	4770      	bx	lr
	...

0801087c <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 801087c:	b580      	push	{r7, lr}
 801087e:	b086      	sub	sp, #24
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
 8010884:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 8010886:	2300      	movs	r3, #0
 8010888:	60bb      	str	r3, [r7, #8]
 801088a:	2300      	movs	r3, #0
 801088c:	60fb      	str	r3, [r7, #12]
 801088e:	2300      	movs	r3, #0
 8010890:	613b      	str	r3, [r7, #16]
 8010892:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010896:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8010898:	f107 0108 	add.w	r1, r7, #8
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	687a      	ldr	r2, [r7, #4]
 80108a0:	4803      	ldr	r0, [pc, #12]	@ (80108b0 <mg_vmprintf+0x34>)
 80108a2:	f7f6 fecd 	bl	8007640 <mg_vxprintf>
  return (char *) io.buf;
 80108a6:	68bb      	ldr	r3, [r7, #8]
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3718      	adds	r7, #24
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}
 80108b0:	080107d9 	.word	0x080107d9

080108b4 <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 80108b4:	b40f      	push	{r0, r1, r2, r3}
 80108b6:	b580      	push	{r7, lr}
 80108b8:	b082      	sub	sp, #8
 80108ba:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 80108bc:	f107 0314 	add.w	r3, r7, #20
 80108c0:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 80108c2:	463b      	mov	r3, r7
 80108c4:	4619      	mov	r1, r3
 80108c6:	6938      	ldr	r0, [r7, #16]
 80108c8:	f7ff ffd8 	bl	801087c <mg_vmprintf>
 80108cc:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 80108ce:	687b      	ldr	r3, [r7, #4]
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3708      	adds	r7, #8
 80108d4:	46bd      	mov	sp, r7
 80108d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80108da:	b004      	add	sp, #16
 80108dc:	4770      	bx	lr

080108de <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 80108de:	b580      	push	{r7, lr}
 80108e0:	b082      	sub	sp, #8
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	4603      	mov	r3, r0
 80108e6:	6039      	str	r1, [r7, #0]
 80108e8:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 80108ea:	79fb      	ldrb	r3, [r7, #7]
 80108ec:	4618      	mov	r0, r3
 80108ee:	f012 fd9d 	bl	802342c <putchar>
  (void) param;
}
 80108f2:	bf00      	nop
 80108f4:	3708      	adds	r7, #8
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}
	...

080108fc <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b088      	sub	sp, #32
 8010900:	af04      	add	r7, sp, #16
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	60b9      	str	r1, [r7, #8]
 8010906:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	4618      	mov	r0, r3
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	3301      	adds	r3, #1
 8010912:	781b      	ldrb	r3, [r3, #0]
 8010914:	461a      	mov	r2, r3
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	3302      	adds	r3, #2
 801091a:	781b      	ldrb	r3, [r3, #0]
 801091c:	4619      	mov	r1, r3
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	3303      	adds	r3, #3
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	9302      	str	r3, [sp, #8]
 8010926:	9101      	str	r1, [sp, #4]
 8010928:	9200      	str	r2, [sp, #0]
 801092a:	4603      	mov	r3, r0
 801092c:	4a04      	ldr	r2, [pc, #16]	@ (8010940 <print_ip4+0x44>)
 801092e:	68b9      	ldr	r1, [r7, #8]
 8010930:	68f8      	ldr	r0, [r7, #12]
 8010932:	f7f6 fe6a 	bl	800760a <mg_xprintf>
 8010936:	4603      	mov	r3, r0
}
 8010938:	4618      	mov	r0, r3
 801093a:	3710      	adds	r7, #16
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	08025900 	.word	0x08025900

08010944 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8010944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010948:	b08e      	sub	sp, #56	@ 0x38
 801094a:	af08      	add	r7, sp, #32
 801094c:	6178      	str	r0, [r7, #20]
 801094e:	6139      	str	r1, [r7, #16]
 8010950:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	4618      	mov	r0, r3
 8010958:	f00e fdd6 	bl	801f508 <mg_ntohs>
 801095c:	4603      	mov	r3, r0
 801095e:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	3302      	adds	r3, #2
 8010964:	881b      	ldrh	r3, [r3, #0]
 8010966:	4618      	mov	r0, r3
 8010968:	f00e fdce 	bl	801f508 <mg_ntohs>
 801096c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801096e:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	3304      	adds	r3, #4
 8010974:	881b      	ldrh	r3, [r3, #0]
 8010976:	4618      	mov	r0, r3
 8010978:	f00e fdc6 	bl	801f508 <mg_ntohs>
 801097c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801097e:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	3306      	adds	r3, #6
 8010984:	881b      	ldrh	r3, [r3, #0]
 8010986:	4618      	mov	r0, r3
 8010988:	f00e fdbe 	bl	801f508 <mg_ntohs>
 801098c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801098e:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	3308      	adds	r3, #8
 8010994:	881b      	ldrh	r3, [r3, #0]
 8010996:	4618      	mov	r0, r3
 8010998:	f00e fdb6 	bl	801f508 <mg_ntohs>
 801099c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 801099e:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	330a      	adds	r3, #10
 80109a4:	881b      	ldrh	r3, [r3, #0]
 80109a6:	4618      	mov	r0, r3
 80109a8:	f00e fdae 	bl	801f508 <mg_ntohs>
 80109ac:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80109ae:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	330c      	adds	r3, #12
 80109b4:	881b      	ldrh	r3, [r3, #0]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f00e fda6 	bl	801f508 <mg_ntohs>
 80109bc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80109be:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	330e      	adds	r3, #14
 80109c4:	881b      	ldrh	r3, [r3, #0]
 80109c6:	4618      	mov	r0, r3
 80109c8:	f00e fd9e 	bl	801f508 <mg_ntohs>
 80109cc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80109ce:	9306      	str	r3, [sp, #24]
 80109d0:	683a      	ldr	r2, [r7, #0]
 80109d2:	9205      	str	r2, [sp, #20]
 80109d4:	687a      	ldr	r2, [r7, #4]
 80109d6:	9204      	str	r2, [sp, #16]
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	9303      	str	r3, [sp, #12]
 80109dc:	9602      	str	r6, [sp, #8]
 80109de:	9501      	str	r5, [sp, #4]
 80109e0:	9400      	str	r4, [sp, #0]
 80109e2:	4643      	mov	r3, r8
 80109e4:	4a05      	ldr	r2, [pc, #20]	@ (80109fc <print_ip6+0xb8>)
 80109e6:	6939      	ldr	r1, [r7, #16]
 80109e8:	6978      	ldr	r0, [r7, #20]
 80109ea:	f7f6 fe0e 	bl	800760a <mg_xprintf>
 80109ee:	4603      	mov	r3, r0
}
 80109f0:	4618      	mov	r0, r3
 80109f2:	3718      	adds	r7, #24
 80109f4:	46bd      	mov	sp, r7
 80109f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109fa:	bf00      	nop
 80109fc:	0802590c 	.word	0x0802590c

08010a00 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b086      	sub	sp, #24
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	60f8      	str	r0, [r7, #12]
 8010a08:	60b9      	str	r1, [r7, #8]
 8010a0a:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	1d19      	adds	r1, r3, #4
 8010a12:	687a      	ldr	r2, [r7, #4]
 8010a14:	6011      	str	r1, [r2, #0]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8010a1a:	697a      	ldr	r2, [r7, #20]
 8010a1c:	68b9      	ldr	r1, [r7, #8]
 8010a1e:	68f8      	ldr	r0, [r7, #12]
 8010a20:	f7ff ff6c 	bl	80108fc <print_ip4>
 8010a24:	4603      	mov	r3, r0
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3718      	adds	r7, #24
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	b086      	sub	sp, #24
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	60f8      	str	r0, [r7, #12]
 8010a36:	60b9      	str	r1, [r7, #8]
 8010a38:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	1d19      	adds	r1, r3, #4
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	6011      	str	r1, [r2, #0]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	7cdb      	ldrb	r3, [r3, #19]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d007      	beq.n	8010a60 <mg_print_ip+0x32>
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	461a      	mov	r2, r3
 8010a54:	68b9      	ldr	r1, [r7, #8]
 8010a56:	68f8      	ldr	r0, [r7, #12]
 8010a58:	f7ff ff74 	bl	8010944 <print_ip6>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	e006      	b.n	8010a6e <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8010a60:	697b      	ldr	r3, [r7, #20]
 8010a62:	461a      	mov	r2, r3
 8010a64:	68b9      	ldr	r1, [r7, #8]
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f7ff ff48 	bl	80108fc <print_ip4>
 8010a6c:	4603      	mov	r3, r0
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3718      	adds	r7, #24
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
	...

08010a78 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b088      	sub	sp, #32
 8010a7c:	af02      	add	r7, sp, #8
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	1d19      	adds	r1, r3, #4
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	6011      	str	r1, [r2, #0]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	8a1b      	ldrh	r3, [r3, #16]
 8010a96:	4618      	mov	r0, r3
 8010a98:	f00e fd36 	bl	801f508 <mg_ntohs>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	9301      	str	r3, [sp, #4]
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	9300      	str	r3, [sp, #0]
 8010aa4:	4b05      	ldr	r3, [pc, #20]	@ (8010abc <mg_print_ip_port+0x44>)
 8010aa6:	4a06      	ldr	r2, [pc, #24]	@ (8010ac0 <mg_print_ip_port+0x48>)
 8010aa8:	68b9      	ldr	r1, [r7, #8]
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f7f6 fdad 	bl	800760a <mg_xprintf>
 8010ab0:	4603      	mov	r3, r0
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3718      	adds	r7, #24
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	08010a2f 	.word	0x08010a2f
 8010ac0:	08025928 	.word	0x08025928

08010ac4 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8010ac4:	b5b0      	push	{r4, r5, r7, lr}
 8010ac6:	b08c      	sub	sp, #48	@ 0x30
 8010ac8:	af06      	add	r7, sp, #24
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	1d19      	adds	r1, r3, #4
 8010ad6:	687a      	ldr	r2, [r7, #4]
 8010ad8:	6011      	str	r1, [r2, #0]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	781b      	ldrb	r3, [r3, #0]
 8010ae2:	461d      	mov	r5, r3
 8010ae4:	697b      	ldr	r3, [r7, #20]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	461a      	mov	r2, r3
 8010aec:	697b      	ldr	r3, [r7, #20]
 8010aee:	3302      	adds	r3, #2
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8010af4:	697b      	ldr	r3, [r7, #20]
 8010af6:	3303      	adds	r3, #3
 8010af8:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8010afa:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	3304      	adds	r3, #4
 8010b00:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8010b02:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	3305      	adds	r3, #5
 8010b08:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8010b0a:	9304      	str	r3, [sp, #16]
 8010b0c:	9403      	str	r4, [sp, #12]
 8010b0e:	9002      	str	r0, [sp, #8]
 8010b10:	9101      	str	r1, [sp, #4]
 8010b12:	9200      	str	r2, [sp, #0]
 8010b14:	462b      	mov	r3, r5
 8010b16:	4a05      	ldr	r2, [pc, #20]	@ (8010b2c <mg_print_mac+0x68>)
 8010b18:	68b9      	ldr	r1, [r7, #8]
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f7f6 fd75 	bl	800760a <mg_xprintf>
 8010b20:	4603      	mov	r3, r0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3718      	adds	r7, #24
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bdb0      	pop	{r4, r5, r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	08025930 	.word	0x08025930

08010b30 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8010b30:	b480      	push	{r7}
 8010b32:	b087      	sub	sp, #28
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	460b      	mov	r3, r1
 8010b3a:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8010b3c:	4b19      	ldr	r3, [pc, #100]	@ (8010ba4 <mg_esc+0x74>)
 8010b3e:	613b      	str	r3, [r7, #16]
 8010b40:	4b19      	ldr	r3, [pc, #100]	@ (8010ba8 <mg_esc+0x78>)
 8010b42:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8010b44:	78fb      	ldrb	r3, [r7, #3]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <mg_esc+0x1e>
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	e000      	b.n	8010b50 <mg_esc+0x20>
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	617b      	str	r3, [r7, #20]
 8010b52:	e01b      	b.n	8010b8c <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	781b      	ldrb	r3, [r3, #0]
 8010b58:	461a      	mov	r2, r3
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	d112      	bne.n	8010b86 <mg_esc+0x56>
 8010b60:	78fb      	ldrb	r3, [r7, #3]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d007      	beq.n	8010b76 <mg_esc+0x46>
 8010b66:	697a      	ldr	r2, [r7, #20]
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	4413      	add	r3, r2
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	e00f      	b.n	8010b96 <mg_esc+0x66>
 8010b76:	697a      	ldr	r2, [r7, #20]
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	693b      	ldr	r3, [r7, #16]
 8010b80:	4413      	add	r3, r2
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	e007      	b.n	8010b96 <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	617b      	str	r3, [r7, #20]
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d1df      	bne.n	8010b54 <mg_esc+0x24>
  }
  return 0;
 8010b94:	2300      	movs	r3, #0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	371c      	adds	r7, #28
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba0:	4770      	bx	lr
 8010ba2:	bf00      	nop
 8010ba4:	08025094 	.word	0x08025094
 8010ba8:	0802509c 	.word	0x0802509c

08010bac <mg_escape>:

static char mg_escape(int c) {
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8010bb4:	2101      	movs	r1, #1
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f7ff ffba 	bl	8010b30 <mg_esc>
 8010bbc:	4603      	mov	r3, r0
}
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	3708      	adds	r7, #8
 8010bc2:	46bd      	mov	sp, r7
 8010bc4:	bd80      	pop	{r7, pc}

08010bc6 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8010bc6:	b580      	push	{r7, lr}
 8010bc8:	b088      	sub	sp, #32
 8010bca:	af00      	add	r7, sp, #0
 8010bcc:	60f8      	str	r0, [r7, #12]
 8010bce:	60b9      	str	r1, [r7, #8]
 8010bd0:	607a      	str	r2, [r7, #4]
 8010bd2:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	61fb      	str	r3, [r7, #28]
 8010bd8:	2300      	movs	r3, #0
 8010bda:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8010bdc:	2300      	movs	r3, #0
 8010bde:	61fb      	str	r3, [r7, #28]
 8010be0:	e023      	b.n	8010c2a <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8010be2:	687a      	ldr	r2, [r7, #4]
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	4413      	add	r3, r2
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7ff ffde 	bl	8010bac <mg_escape>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8010bf4:	7dfb      	ldrb	r3, [r7, #23]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00c      	beq.n	8010c14 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	68b9      	ldr	r1, [r7, #8]
 8010bfe:	205c      	movs	r0, #92	@ 0x5c
 8010c00:	4798      	blx	r3
 8010c02:	7dfa      	ldrb	r2, [r7, #23]
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	68b9      	ldr	r1, [r7, #8]
 8010c08:	4610      	mov	r0, r2
 8010c0a:	4798      	blx	r3
 8010c0c:	69bb      	ldr	r3, [r7, #24]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	61bb      	str	r3, [r7, #24]
 8010c12:	e007      	b.n	8010c24 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	4413      	add	r3, r2
 8010c1a:	781a      	ldrb	r2, [r3, #0]
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	68b9      	ldr	r1, [r7, #8]
 8010c20:	4610      	mov	r0, r2
 8010c22:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	3301      	adds	r3, #1
 8010c28:	61fb      	str	r3, [r7, #28]
 8010c2a:	69fa      	ldr	r2, [r7, #28]
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	d205      	bcs.n	8010c3e <qcpy+0x78>
 8010c32:	687a      	ldr	r2, [r7, #4]
 8010c34:	69fb      	ldr	r3, [r7, #28]
 8010c36:	4413      	add	r3, r2
 8010c38:	781b      	ldrb	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1d1      	bne.n	8010be2 <qcpy+0x1c>
    }
  }
  return i + extra;
 8010c3e:	69fa      	ldr	r2, [r7, #28]
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	4413      	add	r3, r2
}
 8010c44:	4618      	mov	r0, r3
 8010c46:	3720      	adds	r7, #32
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}

08010c4c <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b088      	sub	sp, #32
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	60f8      	str	r0, [r7, #12]
 8010c54:	60b9      	str	r1, [r7, #8]
 8010c56:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	1d19      	adds	r1, r3, #4
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	6011      	str	r1, [r2, #0]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	1d19      	adds	r1, r3, #4
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	6011      	str	r1, [r2, #0]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8010c74:	4b16      	ldr	r3, [pc, #88]	@ (8010cd0 <mg_print_hex+0x84>)
 8010c76:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8010c78:	2300      	movs	r3, #0
 8010c7a:	61fb      	str	r3, [r7, #28]
 8010c7c:	e01e      	b.n	8010cbc <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8010c7e:	697a      	ldr	r2, [r7, #20]
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	4413      	add	r3, r2
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	091b      	lsrs	r3, r3, #4
 8010c88:	b2db      	uxtb	r3, r3
 8010c8a:	f003 030f 	and.w	r3, r3, #15
 8010c8e:	693a      	ldr	r2, [r7, #16]
 8010c90:	4413      	add	r3, r2
 8010c92:	781a      	ldrb	r2, [r3, #0]
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	68b9      	ldr	r1, [r7, #8]
 8010c98:	4610      	mov	r0, r2
 8010c9a:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 8010c9c:	697a      	ldr	r2, [r7, #20]
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	4413      	add	r3, r2
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	f003 030f 	and.w	r3, r3, #15
 8010ca8:	693a      	ldr	r2, [r7, #16]
 8010caa:	4413      	add	r3, r2
 8010cac:	781a      	ldrb	r2, [r3, #0]
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	68b9      	ldr	r1, [r7, #8]
 8010cb2:	4610      	mov	r0, r2
 8010cb4:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	61fb      	str	r3, [r7, #28]
 8010cbc:	69fa      	ldr	r2, [r7, #28]
 8010cbe:	69bb      	ldr	r3, [r7, #24]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d3dc      	bcc.n	8010c7e <mg_print_hex+0x32>
  }
  return 2 * bl;
 8010cc4:	69bb      	ldr	r3, [r7, #24]
 8010cc6:	005b      	lsls	r3, r3, #1
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	3720      	adds	r7, #32
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	080244d0 	.word	0x080244d0

08010cd4 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b086      	sub	sp, #24
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	1d19      	adds	r1, r3, #4
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	6011      	str	r1, [r2, #0]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	1d19      	adds	r1, r3, #4
 8010cf4:	687a      	ldr	r2, [r7, #4]
 8010cf6:	6011      	str	r1, [r2, #0]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d109      	bne.n	8010d16 <mg_print_esc+0x42>
 8010d02:	693b      	ldr	r3, [r7, #16]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d004      	beq.n	8010d12 <mg_print_esc+0x3e>
 8010d08:	6938      	ldr	r0, [r7, #16]
 8010d0a:	f7ef fb61 	bl	80003d0 <strlen>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	e000      	b.n	8010d14 <mg_print_esc+0x40>
 8010d12:	2300      	movs	r3, #0
 8010d14:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8010d16:	697b      	ldr	r3, [r7, #20]
 8010d18:	693a      	ldr	r2, [r7, #16]
 8010d1a:	68b9      	ldr	r1, [r7, #8]
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f7ff ff52 	bl	8010bc6 <qcpy>
 8010d22:	4603      	mov	r3, r0
}
 8010d24:	4618      	mov	r0, r3
 8010d26:	3718      	adds	r7, #24
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}

08010d2c <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8010d34:	2300      	movs	r3, #0
 8010d36:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8010d38:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681a      	ldr	r2, [r3, #0]
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	689b      	ldr	r3, [r3, #8]
 8010d44:	4413      	add	r3, r2
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	689a      	ldr	r2, [r3, #8]
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	4413      	add	r3, r2
 8010d52:	1d1a      	adds	r2, r3, #4
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	685b      	ldr	r3, [r3, #4]
 8010d58:	429a      	cmp	r2, r3
 8010d5a:	d906      	bls.n	8010d6a <mg_queue_read_len+0x3e>
 8010d5c:	4b05      	ldr	r3, [pc, #20]	@ (8010d74 <mg_queue_read_len+0x48>)
 8010d5e:	4a06      	ldr	r2, [pc, #24]	@ (8010d78 <mg_queue_read_len+0x4c>)
 8010d60:	f641 6181 	movw	r1, #7809	@ 0x1e81
 8010d64:	4805      	ldr	r0, [pc, #20]	@ (8010d7c <mg_queue_read_len+0x50>)
 8010d66:	f012 f8df 	bl	8022f28 <__assert_func>
  return n;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	08025994 	.word	0x08025994
 8010d78:	08027f10 	.word	0x08027f10
 8010d7c:	080241e8 	.word	0x080241e8

08010d80 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8010d80:	b480      	push	{r7}
 8010d82:	b085      	sub	sp, #20
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	6078      	str	r0, [r7, #4]
 8010d88:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681a      	ldr	r2, [r3, #0]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	4413      	add	r3, r2
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8010d9c:	f3bf 8f5b 	dmb	ish
}
 8010da0:	bf00      	nop
 8010da2:	3714      	adds	r7, #20
 8010da4:	46bd      	mov	sp, r7
 8010da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010daa:	4770      	bx	lr

08010dac <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b086      	sub	sp, #24
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8010db8:	2300      	movs	r3, #0
 8010dba:	617b      	str	r3, [r7, #20]
 8010dbc:	2308      	movs	r3, #8
 8010dbe:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	68da      	ldr	r2, [r3, #12]
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d312      	bcc.n	8010df2 <mg_queue_book+0x46>
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	68da      	ldr	r2, [r3, #12]
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	441a      	add	r2, r3
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	441a      	add	r2, r3
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	d808      	bhi.n	8010df2 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	685a      	ldr	r2, [r3, #4]
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	68db      	ldr	r3, [r3, #12]
 8010de8:	1ad2      	subs	r2, r2, r3
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	617b      	str	r3, [r7, #20]
 8010df0:	e011      	b.n	8010e16 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	68da      	ldr	r2, [r3, #12]
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	689b      	ldr	r3, [r3, #8]
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d30b      	bcc.n	8010e16 <mg_queue_book+0x6a>
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	693a      	ldr	r2, [r7, #16]
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d206      	bcs.n	8010e16 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8010e08:	2100      	movs	r1, #0
 8010e0a:	68f8      	ldr	r0, [r7, #12]
 8010e0c:	f7ff ffb8 	bl	8010d80 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	2200      	movs	r2, #0
 8010e14:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	68da      	ldr	r2, [r3, #12]
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	441a      	add	r2, r3
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	441a      	add	r2, r3
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	689b      	ldr	r3, [r3, #8]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d207      	bcs.n	8010e3a <mg_queue_book+0x8e>
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	689a      	ldr	r2, [r3, #8]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	1ad2      	subs	r2, r2, r3
 8010e34:	693b      	ldr	r3, [r7, #16]
 8010e36:	1ad3      	subs	r3, r2, r3
 8010e38:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d007      	beq.n	8010e50 <mg_queue_book+0xa4>
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	681a      	ldr	r2, [r3, #0]
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	3304      	adds	r3, #4
 8010e4a:	441a      	add	r2, r3
 8010e4c:	68bb      	ldr	r3, [r7, #8]
 8010e4e:	601a      	str	r2, [r3, #0]
  return space;
 8010e50:	697b      	ldr	r3, [r7, #20]
}
 8010e52:	4618      	mov	r0, r3
 8010e54:	3718      	adds	r7, #24
 8010e56:	46bd      	mov	sp, r7
 8010e58:	bd80      	pop	{r7, pc}
	...

08010e5c <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8010e66:	2300      	movs	r3, #0
 8010e68:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	689a      	ldr	r2, [r3, #8]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	429a      	cmp	r2, r3
 8010e74:	d013      	beq.n	8010e9e <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	f7ff ff58 	bl	8010d2c <mg_queue_read_len>
 8010e7c:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d10c      	bne.n	8010e9e <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	68da      	ldr	r2, [r3, #12]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	689b      	ldr	r3, [r3, #8]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d903      	bls.n	8010e9e <mg_queue_next+0x42>
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f7ff ff48 	bl	8010d2c <mg_queue_read_len>
 8010e9c:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d007      	beq.n	8010eb4 <mg_queue_next+0x58>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	681a      	ldr	r2, [r3, #0]
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	689b      	ldr	r3, [r3, #8]
 8010eac:	3304      	adds	r3, #4
 8010eae:	441a      	add	r2, r3
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	689a      	ldr	r2, [r3, #8]
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	441a      	add	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d906      	bls.n	8010ed2 <mg_queue_next+0x76>
 8010ec4:	4b05      	ldr	r3, [pc, #20]	@ (8010edc <mg_queue_next+0x80>)
 8010ec6:	4a06      	ldr	r2, [pc, #24]	@ (8010ee0 <mg_queue_next+0x84>)
 8010ec8:	f641 61a2 	movw	r1, #7842	@ 0x1ea2
 8010ecc:	4805      	ldr	r0, [pc, #20]	@ (8010ee4 <mg_queue_next+0x88>)
 8010ece:	f012 f82b 	bl	8022f28 <__assert_func>
  return len;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	080259b8 	.word	0x080259b8
 8010ee0:	08027f24 	.word	0x08027f24
 8010ee4:	080241e8 	.word	0x080241e8

08010ee8 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d106      	bne.n	8010f06 <mg_queue_add+0x1e>
 8010ef8:	4b13      	ldr	r3, [pc, #76]	@ (8010f48 <mg_queue_add+0x60>)
 8010efa:	4a14      	ldr	r2, [pc, #80]	@ (8010f4c <mg_queue_add+0x64>)
 8010efc:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 8010f00:	4813      	ldr	r0, [pc, #76]	@ (8010f50 <mg_queue_add+0x68>)
 8010f02:	f012 f811 	bl	8022f28 <__assert_func>
  mg_queue_write_len(q, len);
 8010f06:	6839      	ldr	r1, [r7, #0]
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7ff ff39 	bl	8010d80 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	68da      	ldr	r2, [r3, #12]
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	4413      	add	r3, r2
 8010f16:	f103 0208 	add.w	r2, r3, #8
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d906      	bls.n	8010f30 <mg_queue_add+0x48>
 8010f22:	4b0c      	ldr	r3, [pc, #48]	@ (8010f54 <mg_queue_add+0x6c>)
 8010f24:	4a09      	ldr	r2, [pc, #36]	@ (8010f4c <mg_queue_add+0x64>)
 8010f26:	f641 61a9 	movw	r1, #7849	@ 0x1ea9
 8010f2a:	4809      	ldr	r0, [pc, #36]	@ (8010f50 <mg_queue_add+0x68>)
 8010f2c:	f011 fffc 	bl	8022f28 <__assert_func>
  q->head += len + sizeof(uint32_t);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	68da      	ldr	r2, [r3, #12]
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	4413      	add	r3, r2
 8010f38:	1d1a      	adds	r2, r3, #4
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	60da      	str	r2, [r3, #12]
}
 8010f3e:	bf00      	nop
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	080259d4 	.word	0x080259d4
 8010f4c:	08027f34 	.word	0x08027f34
 8010f50:	080241e8 	.word	0x080241e8
 8010f54:	080259dc 	.word	0x080259dc

08010f58 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	689a      	ldr	r2, [r3, #8]
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	4413      	add	r3, r2
 8010f6a:	1d1a      	adds	r2, r3, #4
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	689b      	ldr	r3, [r3, #8]
 8010f74:	1d1a      	adds	r2, r3, #4
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	685b      	ldr	r3, [r3, #4]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d906      	bls.n	8010f8c <mg_queue_del+0x34>
 8010f7e:	4b05      	ldr	r3, [pc, #20]	@ (8010f94 <mg_queue_del+0x3c>)
 8010f80:	4a05      	ldr	r2, [pc, #20]	@ (8010f98 <mg_queue_del+0x40>)
 8010f82:	f641 61af 	movw	r1, #7855	@ 0x1eaf
 8010f86:	4805      	ldr	r0, [pc, #20]	@ (8010f9c <mg_queue_del+0x44>)
 8010f88:	f011 ffce 	bl	8022f28 <__assert_func>
}
 8010f8c:	bf00      	nop
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	08025a0c 	.word	0x08025a0c
 8010f98:	08027f44 	.word	0x08027f44
 8010f9c:	080241e8 	.word	0x080241e8

08010fa0 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 8010faa:	4b12      	ldr	r3, [pc, #72]	@ (8010ff4 <blk0+0x54>)
 8010fac:	881b      	ldrh	r3, [r3, #0]
 8010fae:	2bff      	cmp	r3, #255	@ 0xff
 8010fb0:	d915      	bls.n	8010fde <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	683a      	ldr	r2, [r7, #0]
 8010fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fba:	ea4f 2333 	mov.w	r3, r3, ror #8
 8010fbe:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	6839      	ldr	r1, [r7, #0]
 8010fc6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010fca:	ea4f 6333 	mov.w	r3, r3, ror #24
 8010fce:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8010fd2:	ea42 0103 	orr.w	r1, r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	683a      	ldr	r2, [r7, #0]
 8010fda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	683a      	ldr	r2, [r7, #0]
 8010fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	370c      	adds	r7, #12
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr
 8010ff2:	bf00      	nop
 8010ff4:	080250dc 	.word	0x080250dc

08010ff8 <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char *buffer) {
 8010ff8:	b590      	push	{r4, r7, lr}
 8010ffa:	b099      	sub	sp, #100	@ 0x64
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
 8011000:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 8011002:	f107 030c 	add.w	r3, r7, #12
 8011006:	2240      	movs	r2, #64	@ 0x40
 8011008:	6839      	ldr	r1, [r7, #0]
 801100a:	4618      	mov	r0, r3
 801100c:	f012 fbb9 	bl	8023782 <memcpy>
  a = state[0];
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	65fb      	str	r3, [r7, #92]	@ 0x5c
  b = state[1];
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	65bb      	str	r3, [r7, #88]	@ 0x58
  c = state[2];
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	689b      	ldr	r3, [r3, #8]
 8011020:	657b      	str	r3, [r7, #84]	@ 0x54
  d = state[3];
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	653b      	str	r3, [r7, #80]	@ 0x50
  e = state[4];
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	691b      	ldr	r3, [r3, #16]
 801102c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(a, b, c, d, e, 0);
 801102e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011032:	405a      	eors	r2, r3
 8011034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011036:	401a      	ands	r2, r3
 8011038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801103a:	ea82 0403 	eor.w	r4, r2, r3
 801103e:	f107 030c 	add.w	r3, r7, #12
 8011042:	2100      	movs	r1, #0
 8011044:	4618      	mov	r0, r3
 8011046:	f7ff ffab 	bl	8010fa0 <blk0>
 801104a:	4603      	mov	r3, r0
 801104c:	18e2      	adds	r2, r4, r3
 801104e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011050:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011054:	441a      	add	r2, r3
 8011056:	4bbd      	ldr	r3, [pc, #756]	@ (801134c <mg_sha1_transform+0x354>)
 8011058:	4413      	add	r3, r2
 801105a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801105c:	4413      	add	r3, r2
 801105e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011062:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011066:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 1);
 8011068:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801106a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801106c:	405a      	eors	r2, r3
 801106e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011070:	401a      	ands	r2, r3
 8011072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011074:	ea82 0403 	eor.w	r4, r2, r3
 8011078:	f107 030c 	add.w	r3, r7, #12
 801107c:	2101      	movs	r1, #1
 801107e:	4618      	mov	r0, r3
 8011080:	f7ff ff8e 	bl	8010fa0 <blk0>
 8011084:	4603      	mov	r3, r0
 8011086:	18e2      	adds	r2, r4, r3
 8011088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801108a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801108e:	441a      	add	r2, r3
 8011090:	4bae      	ldr	r3, [pc, #696]	@ (801134c <mg_sha1_transform+0x354>)
 8011092:	4413      	add	r3, r2
 8011094:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011096:	4413      	add	r3, r2
 8011098:	653b      	str	r3, [r7, #80]	@ 0x50
 801109a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801109c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80110a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 2);
 80110a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80110a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80110a6:	405a      	eors	r2, r3
 80110a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110aa:	401a      	ands	r2, r3
 80110ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80110ae:	ea82 0403 	eor.w	r4, r2, r3
 80110b2:	f107 030c 	add.w	r3, r7, #12
 80110b6:	2102      	movs	r1, #2
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7ff ff71 	bl	8010fa0 <blk0>
 80110be:	4603      	mov	r3, r0
 80110c0:	18e2      	adds	r2, r4, r3
 80110c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110c4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80110c8:	441a      	add	r2, r3
 80110ca:	4ba0      	ldr	r3, [pc, #640]	@ (801134c <mg_sha1_transform+0x354>)
 80110cc:	4413      	add	r3, r2
 80110ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80110d0:	4413      	add	r3, r2
 80110d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80110d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110d6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80110da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 3);
 80110dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80110de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110e0:	405a      	eors	r2, r3
 80110e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80110e4:	401a      	ands	r2, r3
 80110e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80110e8:	ea82 0403 	eor.w	r4, r2, r3
 80110ec:	f107 030c 	add.w	r3, r7, #12
 80110f0:	2103      	movs	r1, #3
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7ff ff54 	bl	8010fa0 <blk0>
 80110f8:	4603      	mov	r3, r0
 80110fa:	18e2      	adds	r2, r4, r3
 80110fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110fe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011102:	441a      	add	r2, r3
 8011104:	4b91      	ldr	r3, [pc, #580]	@ (801134c <mg_sha1_transform+0x354>)
 8011106:	4413      	add	r3, r2
 8011108:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801110a:	4413      	add	r3, r2
 801110c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801110e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011110:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011114:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 4);
 8011116:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801111a:	405a      	eors	r2, r3
 801111c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801111e:	401a      	ands	r2, r3
 8011120:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011122:	ea82 0403 	eor.w	r4, r2, r3
 8011126:	f107 030c 	add.w	r3, r7, #12
 801112a:	2104      	movs	r1, #4
 801112c:	4618      	mov	r0, r3
 801112e:	f7ff ff37 	bl	8010fa0 <blk0>
 8011132:	4603      	mov	r3, r0
 8011134:	18e2      	adds	r2, r4, r3
 8011136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011138:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801113c:	441a      	add	r2, r3
 801113e:	4b83      	ldr	r3, [pc, #524]	@ (801134c <mg_sha1_transform+0x354>)
 8011140:	4413      	add	r3, r2
 8011142:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011144:	4413      	add	r3, r2
 8011146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801114a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801114e:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 5);
 8011150:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011154:	405a      	eors	r2, r3
 8011156:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011158:	401a      	ands	r2, r3
 801115a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801115c:	ea82 0403 	eor.w	r4, r2, r3
 8011160:	f107 030c 	add.w	r3, r7, #12
 8011164:	2105      	movs	r1, #5
 8011166:	4618      	mov	r0, r3
 8011168:	f7ff ff1a 	bl	8010fa0 <blk0>
 801116c:	4603      	mov	r3, r0
 801116e:	18e2      	adds	r2, r4, r3
 8011170:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011172:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011176:	441a      	add	r2, r3
 8011178:	4b74      	ldr	r3, [pc, #464]	@ (801134c <mg_sha1_transform+0x354>)
 801117a:	4413      	add	r3, r2
 801117c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801117e:	4413      	add	r3, r2
 8011180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011182:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011184:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011188:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 6);
 801118a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801118c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801118e:	405a      	eors	r2, r3
 8011190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011192:	401a      	ands	r2, r3
 8011194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011196:	ea82 0403 	eor.w	r4, r2, r3
 801119a:	f107 030c 	add.w	r3, r7, #12
 801119e:	2106      	movs	r1, #6
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7ff fefd 	bl	8010fa0 <blk0>
 80111a6:	4603      	mov	r3, r0
 80111a8:	18e2      	adds	r2, r4, r3
 80111aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111ac:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80111b0:	441a      	add	r2, r3
 80111b2:	4b66      	ldr	r3, [pc, #408]	@ (801134c <mg_sha1_transform+0x354>)
 80111b4:	4413      	add	r3, r2
 80111b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80111b8:	4413      	add	r3, r2
 80111ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80111bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111be:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80111c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 7);
 80111c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80111c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111c8:	405a      	eors	r2, r3
 80111ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111cc:	401a      	ands	r2, r3
 80111ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111d0:	ea82 0403 	eor.w	r4, r2, r3
 80111d4:	f107 030c 	add.w	r3, r7, #12
 80111d8:	2107      	movs	r1, #7
 80111da:	4618      	mov	r0, r3
 80111dc:	f7ff fee0 	bl	8010fa0 <blk0>
 80111e0:	4603      	mov	r3, r0
 80111e2:	18e2      	adds	r2, r4, r3
 80111e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111e6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80111ea:	441a      	add	r2, r3
 80111ec:	4b57      	ldr	r3, [pc, #348]	@ (801134c <mg_sha1_transform+0x354>)
 80111ee:	4413      	add	r3, r2
 80111f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80111f2:	4413      	add	r3, r2
 80111f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80111f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80111fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 8);
 80111fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011200:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011202:	405a      	eors	r2, r3
 8011204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011206:	401a      	ands	r2, r3
 8011208:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801120a:	ea82 0403 	eor.w	r4, r2, r3
 801120e:	f107 030c 	add.w	r3, r7, #12
 8011212:	2108      	movs	r1, #8
 8011214:	4618      	mov	r0, r3
 8011216:	f7ff fec3 	bl	8010fa0 <blk0>
 801121a:	4603      	mov	r3, r0
 801121c:	18e2      	adds	r2, r4, r3
 801121e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011220:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011224:	441a      	add	r2, r3
 8011226:	4b49      	ldr	r3, [pc, #292]	@ (801134c <mg_sha1_transform+0x354>)
 8011228:	4413      	add	r3, r2
 801122a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801122c:	4413      	add	r3, r2
 801122e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011232:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011236:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 9);
 8011238:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801123a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801123c:	405a      	eors	r2, r3
 801123e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011240:	401a      	ands	r2, r3
 8011242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011244:	ea82 0403 	eor.w	r4, r2, r3
 8011248:	f107 030c 	add.w	r3, r7, #12
 801124c:	2109      	movs	r1, #9
 801124e:	4618      	mov	r0, r3
 8011250:	f7ff fea6 	bl	8010fa0 <blk0>
 8011254:	4603      	mov	r3, r0
 8011256:	18e2      	adds	r2, r4, r3
 8011258:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801125a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801125e:	441a      	add	r2, r3
 8011260:	4b3a      	ldr	r3, [pc, #232]	@ (801134c <mg_sha1_transform+0x354>)
 8011262:	4413      	add	r3, r2
 8011264:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011266:	4413      	add	r3, r2
 8011268:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801126a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801126c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011270:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 10);
 8011272:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011276:	405a      	eors	r2, r3
 8011278:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801127a:	401a      	ands	r2, r3
 801127c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801127e:	ea82 0403 	eor.w	r4, r2, r3
 8011282:	f107 030c 	add.w	r3, r7, #12
 8011286:	210a      	movs	r1, #10
 8011288:	4618      	mov	r0, r3
 801128a:	f7ff fe89 	bl	8010fa0 <blk0>
 801128e:	4603      	mov	r3, r0
 8011290:	18e2      	adds	r2, r4, r3
 8011292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011294:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011298:	441a      	add	r2, r3
 801129a:	4b2c      	ldr	r3, [pc, #176]	@ (801134c <mg_sha1_transform+0x354>)
 801129c:	4413      	add	r3, r2
 801129e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80112a0:	4413      	add	r3, r2
 80112a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80112a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112a6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80112aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 11);
 80112ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80112ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112b0:	405a      	eors	r2, r3
 80112b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112b4:	401a      	ands	r2, r3
 80112b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112b8:	ea82 0403 	eor.w	r4, r2, r3
 80112bc:	f107 030c 	add.w	r3, r7, #12
 80112c0:	210b      	movs	r1, #11
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7ff fe6c 	bl	8010fa0 <blk0>
 80112c8:	4603      	mov	r3, r0
 80112ca:	18e2      	adds	r2, r4, r3
 80112cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80112d2:	441a      	add	r2, r3
 80112d4:	4b1d      	ldr	r3, [pc, #116]	@ (801134c <mg_sha1_transform+0x354>)
 80112d6:	4413      	add	r3, r2
 80112d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80112da:	4413      	add	r3, r2
 80112dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80112de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80112e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 12);
 80112e6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80112e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112ea:	405a      	eors	r2, r3
 80112ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112ee:	401a      	ands	r2, r3
 80112f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112f2:	ea82 0403 	eor.w	r4, r2, r3
 80112f6:	f107 030c 	add.w	r3, r7, #12
 80112fa:	210c      	movs	r1, #12
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7ff fe4f 	bl	8010fa0 <blk0>
 8011302:	4603      	mov	r3, r0
 8011304:	18e2      	adds	r2, r4, r3
 8011306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011308:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801130c:	441a      	add	r2, r3
 801130e:	4b0f      	ldr	r3, [pc, #60]	@ (801134c <mg_sha1_transform+0x354>)
 8011310:	4413      	add	r3, r2
 8011312:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011314:	4413      	add	r3, r2
 8011316:	657b      	str	r3, [r7, #84]	@ 0x54
 8011318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801131a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801131e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 13);
 8011320:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011324:	405a      	eors	r2, r3
 8011326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011328:	401a      	ands	r2, r3
 801132a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801132c:	ea82 0403 	eor.w	r4, r2, r3
 8011330:	f107 030c 	add.w	r3, r7, #12
 8011334:	210d      	movs	r1, #13
 8011336:	4618      	mov	r0, r3
 8011338:	f7ff fe32 	bl	8010fa0 <blk0>
 801133c:	4603      	mov	r3, r0
 801133e:	18e2      	adds	r2, r4, r3
 8011340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011342:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011346:	441a      	add	r2, r3
 8011348:	e002      	b.n	8011350 <mg_sha1_transform+0x358>
 801134a:	bf00      	nop
 801134c:	5a827999 	.word	0x5a827999
 8011350:	4bac      	ldr	r3, [pc, #688]	@ (8011604 <mg_sha1_transform+0x60c>)
 8011352:	4413      	add	r3, r2
 8011354:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011356:	4413      	add	r3, r2
 8011358:	65bb      	str	r3, [r7, #88]	@ 0x58
 801135a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801135c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011360:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 14);
 8011362:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011366:	405a      	eors	r2, r3
 8011368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801136a:	401a      	ands	r2, r3
 801136c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801136e:	ea82 0403 	eor.w	r4, r2, r3
 8011372:	f107 030c 	add.w	r3, r7, #12
 8011376:	210e      	movs	r1, #14
 8011378:	4618      	mov	r0, r3
 801137a:	f7ff fe11 	bl	8010fa0 <blk0>
 801137e:	4603      	mov	r3, r0
 8011380:	18e2      	adds	r2, r4, r3
 8011382:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011384:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011388:	441a      	add	r2, r3
 801138a:	4b9e      	ldr	r3, [pc, #632]	@ (8011604 <mg_sha1_transform+0x60c>)
 801138c:	4413      	add	r3, r2
 801138e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011390:	4413      	add	r3, r2
 8011392:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011394:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011396:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801139a:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 15);
 801139c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801139e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113a0:	405a      	eors	r2, r3
 80113a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113a4:	401a      	ands	r2, r3
 80113a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80113a8:	ea82 0403 	eor.w	r4, r2, r3
 80113ac:	f107 030c 	add.w	r3, r7, #12
 80113b0:	210f      	movs	r1, #15
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7ff fdf4 	bl	8010fa0 <blk0>
 80113b8:	4603      	mov	r3, r0
 80113ba:	18e2      	adds	r2, r4, r3
 80113bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113be:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80113c2:	441a      	add	r2, r3
 80113c4:	4b8f      	ldr	r3, [pc, #572]	@ (8011604 <mg_sha1_transform+0x60c>)
 80113c6:	4413      	add	r3, r2
 80113c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80113ca:	4413      	add	r3, r2
 80113cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80113ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80113d4:	65bb      	str	r3, [r7, #88]	@ 0x58
  R1(e, a, b, c, d, 16);
 80113d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80113d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113da:	405a      	eors	r2, r3
 80113dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113de:	401a      	ands	r2, r3
 80113e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113e2:	405a      	eors	r2, r3
 80113e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80113e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e8:	4059      	eors	r1, r3
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	4059      	eors	r1, r3
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	404b      	eors	r3, r1
 80113f2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80113f6:	60fb      	str	r3, [r7, #12]
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	441a      	add	r2, r3
 80113fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113fe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011402:	441a      	add	r2, r3
 8011404:	4b7f      	ldr	r3, [pc, #508]	@ (8011604 <mg_sha1_transform+0x60c>)
 8011406:	4413      	add	r3, r2
 8011408:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801140a:	4413      	add	r3, r2
 801140c:	653b      	str	r3, [r7, #80]	@ 0x50
 801140e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011410:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011414:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R1(d, e, a, b, c, 17);
 8011416:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801141a:	405a      	eors	r2, r3
 801141c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801141e:	401a      	ands	r2, r3
 8011420:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011422:	405a      	eors	r2, r3
 8011424:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011428:	4059      	eors	r1, r3
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	4059      	eors	r1, r3
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	404b      	eors	r3, r1
 8011432:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011436:	613b      	str	r3, [r7, #16]
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	441a      	add	r2, r3
 801143c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801143e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011442:	441a      	add	r2, r3
 8011444:	4b6f      	ldr	r3, [pc, #444]	@ (8011604 <mg_sha1_transform+0x60c>)
 8011446:	4413      	add	r3, r2
 8011448:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801144a:	4413      	add	r3, r2
 801144c:	657b      	str	r3, [r7, #84]	@ 0x54
 801144e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011450:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011454:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R1(c, d, e, a, b, 18);
 8011456:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801145a:	405a      	eors	r2, r3
 801145c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801145e:	401a      	ands	r2, r3
 8011460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011462:	405a      	eors	r2, r3
 8011464:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011466:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011468:	4059      	eors	r1, r3
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	4059      	eors	r1, r3
 801146e:	697b      	ldr	r3, [r7, #20]
 8011470:	404b      	eors	r3, r1
 8011472:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011476:	617b      	str	r3, [r7, #20]
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	441a      	add	r2, r3
 801147c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801147e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011482:	441a      	add	r2, r3
 8011484:	4b5f      	ldr	r3, [pc, #380]	@ (8011604 <mg_sha1_transform+0x60c>)
 8011486:	4413      	add	r3, r2
 8011488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801148a:	4413      	add	r3, r2
 801148c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801148e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011490:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011494:	653b      	str	r3, [r7, #80]	@ 0x50
  R1(b, c, d, e, a, 19);
 8011496:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801149a:	405a      	eors	r2, r3
 801149c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801149e:	401a      	ands	r2, r3
 80114a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114a2:	405a      	eors	r2, r3
 80114a4:	68f9      	ldr	r1, [r7, #12]
 80114a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80114a8:	4059      	eors	r1, r3
 80114aa:	6a3b      	ldr	r3, [r7, #32]
 80114ac:	4059      	eors	r1, r3
 80114ae:	69bb      	ldr	r3, [r7, #24]
 80114b0:	404b      	eors	r3, r1
 80114b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80114b6:	61bb      	str	r3, [r7, #24]
 80114b8:	69bb      	ldr	r3, [r7, #24]
 80114ba:	441a      	add	r2, r3
 80114bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114be:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80114c2:	441a      	add	r2, r3
 80114c4:	4b4f      	ldr	r3, [pc, #316]	@ (8011604 <mg_sha1_transform+0x60c>)
 80114c6:	4413      	add	r3, r2
 80114c8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80114ca:	4413      	add	r3, r2
 80114cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80114ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80114d4:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 20);
 80114d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80114d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114da:	405a      	eors	r2, r3
 80114dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114de:	405a      	eors	r2, r3
 80114e0:	6939      	ldr	r1, [r7, #16]
 80114e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80114e4:	4059      	eors	r1, r3
 80114e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114e8:	4059      	eors	r1, r3
 80114ea:	69fb      	ldr	r3, [r7, #28]
 80114ec:	404b      	eors	r3, r1
 80114ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80114f2:	61fb      	str	r3, [r7, #28]
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	441a      	add	r2, r3
 80114f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114fa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80114fe:	441a      	add	r2, r3
 8011500:	4b41      	ldr	r3, [pc, #260]	@ (8011608 <mg_sha1_transform+0x610>)
 8011502:	4413      	add	r3, r2
 8011504:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011506:	4413      	add	r3, r2
 8011508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801150a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801150c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011510:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 21);
 8011512:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011516:	405a      	eors	r2, r3
 8011518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801151a:	405a      	eors	r2, r3
 801151c:	6979      	ldr	r1, [r7, #20]
 801151e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011520:	4059      	eors	r1, r3
 8011522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011524:	4059      	eors	r1, r3
 8011526:	6a3b      	ldr	r3, [r7, #32]
 8011528:	404b      	eors	r3, r1
 801152a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801152e:	623b      	str	r3, [r7, #32]
 8011530:	6a3b      	ldr	r3, [r7, #32]
 8011532:	441a      	add	r2, r3
 8011534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011536:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801153a:	441a      	add	r2, r3
 801153c:	4b32      	ldr	r3, [pc, #200]	@ (8011608 <mg_sha1_transform+0x610>)
 801153e:	4413      	add	r3, r2
 8011540:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011542:	4413      	add	r3, r2
 8011544:	653b      	str	r3, [r7, #80]	@ 0x50
 8011546:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011548:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801154c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 22);
 801154e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011552:	405a      	eors	r2, r3
 8011554:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011556:	405a      	eors	r2, r3
 8011558:	69b9      	ldr	r1, [r7, #24]
 801155a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801155c:	4059      	eors	r1, r3
 801155e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011560:	4059      	eors	r1, r3
 8011562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011564:	404b      	eors	r3, r1
 8011566:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801156a:	627b      	str	r3, [r7, #36]	@ 0x24
 801156c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156e:	441a      	add	r2, r3
 8011570:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011572:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011576:	441a      	add	r2, r3
 8011578:	4b23      	ldr	r3, [pc, #140]	@ (8011608 <mg_sha1_transform+0x610>)
 801157a:	4413      	add	r3, r2
 801157c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801157e:	4413      	add	r3, r2
 8011580:	657b      	str	r3, [r7, #84]	@ 0x54
 8011582:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011584:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 23);
 801158a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801158c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801158e:	405a      	eors	r2, r3
 8011590:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011592:	405a      	eors	r2, r3
 8011594:	69f9      	ldr	r1, [r7, #28]
 8011596:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011598:	4059      	eors	r1, r3
 801159a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801159c:	4059      	eors	r1, r3
 801159e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115a0:	404b      	eors	r3, r1
 80115a2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80115a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80115a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115aa:	441a      	add	r2, r3
 80115ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115ae:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80115b2:	441a      	add	r2, r3
 80115b4:	4b14      	ldr	r3, [pc, #80]	@ (8011608 <mg_sha1_transform+0x610>)
 80115b6:	4413      	add	r3, r2
 80115b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80115ba:	4413      	add	r3, r2
 80115bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80115be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115c0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80115c4:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 24);
 80115c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80115c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115ca:	405a      	eors	r2, r3
 80115cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115ce:	405a      	eors	r2, r3
 80115d0:	6a39      	ldr	r1, [r7, #32]
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	4059      	eors	r1, r3
 80115d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115d8:	4059      	eors	r1, r3
 80115da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115dc:	404b      	eors	r3, r1
 80115de:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80115e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80115e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115e6:	441a      	add	r2, r3
 80115e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80115ea:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80115ee:	441a      	add	r2, r3
 80115f0:	4b05      	ldr	r3, [pc, #20]	@ (8011608 <mg_sha1_transform+0x610>)
 80115f2:	4413      	add	r3, r2
 80115f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80115f6:	4413      	add	r3, r2
 80115f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80115fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115fc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011600:	e004      	b.n	801160c <mg_sha1_transform+0x614>
 8011602:	bf00      	nop
 8011604:	5a827999 	.word	0x5a827999
 8011608:	6ed9eba1 	.word	0x6ed9eba1
 801160c:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 25);
 801160e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011612:	405a      	eors	r2, r3
 8011614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011616:	405a      	eors	r2, r3
 8011618:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	4059      	eors	r1, r3
 801161e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011620:	4059      	eors	r1, r3
 8011622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011624:	404b      	eors	r3, r1
 8011626:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801162a:	633b      	str	r3, [r7, #48]	@ 0x30
 801162c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801162e:	441a      	add	r2, r3
 8011630:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011632:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011636:	441a      	add	r2, r3
 8011638:	4ba9      	ldr	r3, [pc, #676]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 801163a:	4413      	add	r3, r2
 801163c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801163e:	4413      	add	r3, r2
 8011640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011644:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011648:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 26);
 801164a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801164c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801164e:	405a      	eors	r2, r3
 8011650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011652:	405a      	eors	r2, r3
 8011654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	4059      	eors	r1, r3
 801165a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801165c:	4059      	eors	r1, r3
 801165e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011660:	404b      	eors	r3, r1
 8011662:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011666:	637b      	str	r3, [r7, #52]	@ 0x34
 8011668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801166a:	441a      	add	r2, r3
 801166c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801166e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011672:	441a      	add	r2, r3
 8011674:	4b9a      	ldr	r3, [pc, #616]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 8011676:	4413      	add	r3, r2
 8011678:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801167a:	4413      	add	r3, r2
 801167c:	653b      	str	r3, [r7, #80]	@ 0x50
 801167e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011680:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011684:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 27);
 8011686:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801168a:	405a      	eors	r2, r3
 801168c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801168e:	405a      	eors	r2, r3
 8011690:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011692:	69bb      	ldr	r3, [r7, #24]
 8011694:	4059      	eors	r1, r3
 8011696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011698:	4059      	eors	r1, r3
 801169a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801169c:	404b      	eors	r3, r1
 801169e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80116a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80116a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116a6:	441a      	add	r2, r3
 80116a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116aa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80116ae:	441a      	add	r2, r3
 80116b0:	4b8b      	ldr	r3, [pc, #556]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 80116b2:	4413      	add	r3, r2
 80116b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80116b6:	4413      	add	r3, r2
 80116b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80116ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80116c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 28);
 80116c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80116c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116c6:	405a      	eors	r2, r3
 80116c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116ca:	405a      	eors	r2, r3
 80116cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80116ce:	69fb      	ldr	r3, [r7, #28]
 80116d0:	4059      	eors	r1, r3
 80116d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116d4:	4059      	eors	r1, r3
 80116d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116d8:	404b      	eors	r3, r1
 80116da:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80116de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80116e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116e2:	441a      	add	r2, r3
 80116e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116e6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80116ea:	441a      	add	r2, r3
 80116ec:	4b7c      	ldr	r3, [pc, #496]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 80116ee:	4413      	add	r3, r2
 80116f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80116f2:	4413      	add	r3, r2
 80116f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80116f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80116fc:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 29);
 80116fe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011702:	405a      	eors	r2, r3
 8011704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011706:	405a      	eors	r2, r3
 8011708:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801170a:	6a3b      	ldr	r3, [r7, #32]
 801170c:	4059      	eors	r1, r3
 801170e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011710:	4059      	eors	r1, r3
 8011712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011714:	404b      	eors	r3, r1
 8011716:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801171a:	643b      	str	r3, [r7, #64]	@ 0x40
 801171c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801171e:	441a      	add	r2, r3
 8011720:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011722:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011726:	441a      	add	r2, r3
 8011728:	4b6d      	ldr	r3, [pc, #436]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 801172a:	4413      	add	r3, r2
 801172c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801172e:	4413      	add	r3, r2
 8011730:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011734:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011738:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 30);
 801173a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801173c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801173e:	405a      	eors	r2, r3
 8011740:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011742:	405a      	eors	r2, r3
 8011744:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011748:	4059      	eors	r1, r3
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	4059      	eors	r1, r3
 801174e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011750:	404b      	eors	r3, r1
 8011752:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011756:	647b      	str	r3, [r7, #68]	@ 0x44
 8011758:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801175a:	441a      	add	r2, r3
 801175c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801175e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011762:	441a      	add	r2, r3
 8011764:	4b5e      	ldr	r3, [pc, #376]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 8011766:	4413      	add	r3, r2
 8011768:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801176a:	4413      	add	r3, r2
 801176c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801176e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011770:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011774:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 31);
 8011776:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011778:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801177a:	405a      	eors	r2, r3
 801177c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801177e:	405a      	eors	r2, r3
 8011780:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011784:	4059      	eors	r1, r3
 8011786:	693b      	ldr	r3, [r7, #16]
 8011788:	4059      	eors	r1, r3
 801178a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801178c:	404b      	eors	r3, r1
 801178e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011794:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011796:	441a      	add	r2, r3
 8011798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801179a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801179e:	441a      	add	r2, r3
 80117a0:	4b4f      	ldr	r3, [pc, #316]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 80117a2:	4413      	add	r3, r2
 80117a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80117a6:	4413      	add	r3, r2
 80117a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80117aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80117b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 32);
 80117b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80117b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117b6:	405a      	eors	r2, r3
 80117b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117ba:	405a      	eors	r2, r3
 80117bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80117be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117c0:	4059      	eors	r1, r3
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	4059      	eors	r1, r3
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	404b      	eors	r3, r1
 80117ca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80117ce:	60fb      	str	r3, [r7, #12]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	441a      	add	r2, r3
 80117d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117d6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80117da:	441a      	add	r2, r3
 80117dc:	4b40      	ldr	r3, [pc, #256]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 80117de:	4413      	add	r3, r2
 80117e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80117e2:	4413      	add	r3, r2
 80117e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80117e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80117ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 33);
 80117ee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80117f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117f2:	405a      	eors	r2, r3
 80117f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117f6:	405a      	eors	r2, r3
 80117f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80117fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117fc:	4059      	eors	r1, r3
 80117fe:	69bb      	ldr	r3, [r7, #24]
 8011800:	4059      	eors	r1, r3
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	404b      	eors	r3, r1
 8011806:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801180a:	613b      	str	r3, [r7, #16]
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	441a      	add	r2, r3
 8011810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011812:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011816:	441a      	add	r2, r3
 8011818:	4b31      	ldr	r3, [pc, #196]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 801181a:	4413      	add	r3, r2
 801181c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801181e:	4413      	add	r3, r2
 8011820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011824:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011828:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 34);
 801182a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801182c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801182e:	405a      	eors	r2, r3
 8011830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011832:	405a      	eors	r2, r3
 8011834:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011838:	4059      	eors	r1, r3
 801183a:	69fb      	ldr	r3, [r7, #28]
 801183c:	4059      	eors	r1, r3
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	404b      	eors	r3, r1
 8011842:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011846:	617b      	str	r3, [r7, #20]
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	441a      	add	r2, r3
 801184c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801184e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011852:	441a      	add	r2, r3
 8011854:	4b22      	ldr	r3, [pc, #136]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 8011856:	4413      	add	r3, r2
 8011858:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801185a:	4413      	add	r3, r2
 801185c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801185e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011860:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011864:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 35);
 8011866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801186a:	405a      	eors	r2, r3
 801186c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801186e:	405a      	eors	r2, r3
 8011870:	68f9      	ldr	r1, [r7, #12]
 8011872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011874:	4059      	eors	r1, r3
 8011876:	6a3b      	ldr	r3, [r7, #32]
 8011878:	4059      	eors	r1, r3
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	404b      	eors	r3, r1
 801187e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011882:	61bb      	str	r3, [r7, #24]
 8011884:	69bb      	ldr	r3, [r7, #24]
 8011886:	441a      	add	r2, r3
 8011888:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801188a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801188e:	441a      	add	r2, r3
 8011890:	4b13      	ldr	r3, [pc, #76]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 8011892:	4413      	add	r3, r2
 8011894:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011896:	4413      	add	r3, r2
 8011898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801189a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801189c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80118a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 36);
 80118a2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80118a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118a6:	405a      	eors	r2, r3
 80118a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118aa:	405a      	eors	r2, r3
 80118ac:	6939      	ldr	r1, [r7, #16]
 80118ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118b0:	4059      	eors	r1, r3
 80118b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118b4:	4059      	eors	r1, r3
 80118b6:	69fb      	ldr	r3, [r7, #28]
 80118b8:	404b      	eors	r3, r1
 80118ba:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80118be:	61fb      	str	r3, [r7, #28]
 80118c0:	69fb      	ldr	r3, [r7, #28]
 80118c2:	441a      	add	r2, r3
 80118c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118c6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80118ca:	441a      	add	r2, r3
 80118cc:	4b04      	ldr	r3, [pc, #16]	@ (80118e0 <mg_sha1_transform+0x8e8>)
 80118ce:	4413      	add	r3, r2
 80118d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80118d2:	4413      	add	r3, r2
 80118d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80118d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118d8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80118dc:	e002      	b.n	80118e4 <mg_sha1_transform+0x8ec>
 80118de:	bf00      	nop
 80118e0:	6ed9eba1 	.word	0x6ed9eba1
 80118e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 37);
 80118e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80118e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118ea:	405a      	eors	r2, r3
 80118ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118ee:	405a      	eors	r2, r3
 80118f0:	6979      	ldr	r1, [r7, #20]
 80118f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118f4:	4059      	eors	r1, r3
 80118f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118f8:	4059      	eors	r1, r3
 80118fa:	6a3b      	ldr	r3, [r7, #32]
 80118fc:	404b      	eors	r3, r1
 80118fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011902:	623b      	str	r3, [r7, #32]
 8011904:	6a3b      	ldr	r3, [r7, #32]
 8011906:	441a      	add	r2, r3
 8011908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801190a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801190e:	441a      	add	r2, r3
 8011910:	4ba9      	ldr	r3, [pc, #676]	@ (8011bb8 <mg_sha1_transform+0xbc0>)
 8011912:	4413      	add	r3, r2
 8011914:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011916:	4413      	add	r3, r2
 8011918:	657b      	str	r3, [r7, #84]	@ 0x54
 801191a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801191c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011920:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 38);
 8011922:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011926:	405a      	eors	r2, r3
 8011928:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801192a:	405a      	eors	r2, r3
 801192c:	69b9      	ldr	r1, [r7, #24]
 801192e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011930:	4059      	eors	r1, r3
 8011932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011934:	4059      	eors	r1, r3
 8011936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011938:	404b      	eors	r3, r1
 801193a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801193e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011942:	441a      	add	r2, r3
 8011944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011946:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801194a:	441a      	add	r2, r3
 801194c:	4b9a      	ldr	r3, [pc, #616]	@ (8011bb8 <mg_sha1_transform+0xbc0>)
 801194e:	4413      	add	r3, r2
 8011950:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011952:	4413      	add	r3, r2
 8011954:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011956:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011958:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801195c:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 39);
 801195e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011962:	405a      	eors	r2, r3
 8011964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011966:	405a      	eors	r2, r3
 8011968:	69f9      	ldr	r1, [r7, #28]
 801196a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801196c:	4059      	eors	r1, r3
 801196e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011970:	4059      	eors	r1, r3
 8011972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011974:	404b      	eors	r3, r1
 8011976:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801197a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801197c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801197e:	441a      	add	r2, r3
 8011980:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011982:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011986:	441a      	add	r2, r3
 8011988:	4b8b      	ldr	r3, [pc, #556]	@ (8011bb8 <mg_sha1_transform+0xbc0>)
 801198a:	4413      	add	r3, r2
 801198c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801198e:	4413      	add	r3, r2
 8011990:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011994:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011998:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 40);
 801199a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801199c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801199e:	431a      	orrs	r2, r3
 80119a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119a2:	401a      	ands	r2, r3
 80119a4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80119a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119a8:	400b      	ands	r3, r1
 80119aa:	431a      	orrs	r2, r3
 80119ac:	6a39      	ldr	r1, [r7, #32]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	4059      	eors	r1, r3
 80119b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119b4:	4059      	eors	r1, r3
 80119b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119b8:	404b      	eors	r3, r1
 80119ba:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80119be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80119c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119c2:	441a      	add	r2, r3
 80119c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119c6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80119ca:	441a      	add	r2, r3
 80119cc:	4b7b      	ldr	r3, [pc, #492]	@ (8011bbc <mg_sha1_transform+0xbc4>)
 80119ce:	4413      	add	r3, r2
 80119d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80119d2:	4413      	add	r3, r2
 80119d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80119d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119d8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80119dc:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 41);
 80119de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80119e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119e2:	431a      	orrs	r2, r3
 80119e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119e6:	401a      	ands	r2, r3
 80119e8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80119ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119ec:	400b      	ands	r3, r1
 80119ee:	431a      	orrs	r2, r3
 80119f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	4059      	eors	r1, r3
 80119f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119f8:	4059      	eors	r1, r3
 80119fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119fc:	404b      	eors	r3, r1
 80119fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011a02:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a06:	441a      	add	r2, r3
 8011a08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a0a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011a0e:	441a      	add	r2, r3
 8011a10:	4b6a      	ldr	r3, [pc, #424]	@ (8011bbc <mg_sha1_transform+0xbc4>)
 8011a12:	4413      	add	r3, r2
 8011a14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011a16:	4413      	add	r3, r2
 8011a18:	653b      	str	r3, [r7, #80]	@ 0x50
 8011a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011a1c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 42);
 8011a22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011a24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011a26:	431a      	orrs	r2, r3
 8011a28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011a2a:	401a      	ands	r2, r3
 8011a2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011a2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011a30:	400b      	ands	r3, r1
 8011a32:	431a      	orrs	r2, r3
 8011a34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	4059      	eors	r1, r3
 8011a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a3c:	4059      	eors	r1, r3
 8011a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a40:	404b      	eors	r3, r1
 8011a42:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a4a:	441a      	add	r2, r3
 8011a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a4e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011a52:	441a      	add	r2, r3
 8011a54:	4b59      	ldr	r3, [pc, #356]	@ (8011bbc <mg_sha1_transform+0xbc4>)
 8011a56:	4413      	add	r3, r2
 8011a58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a5a:	4413      	add	r3, r2
 8011a5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a60:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 43);
 8011a66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a6a:	431a      	orrs	r2, r3
 8011a6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011a6e:	401a      	ands	r2, r3
 8011a70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a74:	400b      	ands	r3, r1
 8011a76:	431a      	orrs	r2, r3
 8011a78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	4059      	eors	r1, r3
 8011a7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a80:	4059      	eors	r1, r3
 8011a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a84:	404b      	eors	r3, r1
 8011a86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a8e:	441a      	add	r2, r3
 8011a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a92:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011a96:	441a      	add	r2, r3
 8011a98:	4b48      	ldr	r3, [pc, #288]	@ (8011bbc <mg_sha1_transform+0xbc4>)
 8011a9a:	4413      	add	r3, r2
 8011a9c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011a9e:	4413      	add	r3, r2
 8011aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011aa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011aa4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011aa8:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 44);
 8011aaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011aac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011aae:	431a      	orrs	r2, r3
 8011ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ab2:	401a      	ands	r2, r3
 8011ab4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ab8:	400b      	ands	r3, r1
 8011aba:	431a      	orrs	r2, r3
 8011abc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	4059      	eors	r1, r3
 8011ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011ac4:	4059      	eors	r1, r3
 8011ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ac8:	404b      	eors	r3, r1
 8011aca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ad0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ad2:	441a      	add	r2, r3
 8011ad4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ad6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011ada:	441a      	add	r2, r3
 8011adc:	4b37      	ldr	r3, [pc, #220]	@ (8011bbc <mg_sha1_transform+0xbc4>)
 8011ade:	4413      	add	r3, r2
 8011ae0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011ae2:	4413      	add	r3, r2
 8011ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ae8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011aec:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 45);
 8011aee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011af2:	431a      	orrs	r2, r3
 8011af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011af6:	401a      	ands	r2, r3
 8011af8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011afc:	400b      	ands	r3, r1
 8011afe:	431a      	orrs	r2, r3
 8011b00:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011b02:	6a3b      	ldr	r3, [r7, #32]
 8011b04:	4059      	eors	r1, r3
 8011b06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b08:	4059      	eors	r1, r3
 8011b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b0c:	404b      	eors	r3, r1
 8011b0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8011b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b16:	441a      	add	r2, r3
 8011b18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b1a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011b1e:	441a      	add	r2, r3
 8011b20:	4b26      	ldr	r3, [pc, #152]	@ (8011bbc <mg_sha1_transform+0xbc4>)
 8011b22:	4413      	add	r3, r2
 8011b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b26:	4413      	add	r3, r2
 8011b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011b2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011b30:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 46);
 8011b32:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011b34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b36:	431a      	orrs	r2, r3
 8011b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b3a:	401a      	ands	r2, r3
 8011b3c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8011b3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b40:	400b      	ands	r3, r1
 8011b42:	431a      	orrs	r2, r3
 8011b44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b48:	4059      	eors	r1, r3
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	4059      	eors	r1, r3
 8011b4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b50:	404b      	eors	r3, r1
 8011b52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b5a:	441a      	add	r2, r3
 8011b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011b62:	441a      	add	r2, r3
 8011b64:	4b15      	ldr	r3, [pc, #84]	@ (8011bbc <mg_sha1_transform+0xbc4>)
 8011b66:	4413      	add	r3, r2
 8011b68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011b6a:	4413      	add	r3, r2
 8011b6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b70:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011b74:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 47);
 8011b76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b7a:	431a      	orrs	r2, r3
 8011b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b7e:	401a      	ands	r2, r3
 8011b80:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011b82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b84:	400b      	ands	r3, r1
 8011b86:	431a      	orrs	r2, r3
 8011b88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b8c:	4059      	eors	r1, r3
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	4059      	eors	r1, r3
 8011b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b94:	404b      	eors	r3, r1
 8011b96:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b9e:	441a      	add	r2, r3
 8011ba0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ba2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011ba6:	441a      	add	r2, r3
 8011ba8:	4b04      	ldr	r3, [pc, #16]	@ (8011bbc <mg_sha1_transform+0xbc4>)
 8011baa:	4413      	add	r3, r2
 8011bac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011bae:	4413      	add	r3, r2
 8011bb0:	657b      	str	r3, [r7, #84]	@ 0x54
 8011bb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bb4:	e004      	b.n	8011bc0 <mg_sha1_transform+0xbc8>
 8011bb6:	bf00      	nop
 8011bb8:	6ed9eba1 	.word	0x6ed9eba1
 8011bbc:	8f1bbcdc 	.word	0x8f1bbcdc
 8011bc0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 48);
 8011bc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bca:	431a      	orrs	r2, r3
 8011bcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011bce:	401a      	ands	r2, r3
 8011bd0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011bd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bd4:	400b      	ands	r3, r1
 8011bd6:	431a      	orrs	r2, r3
 8011bd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bdc:	4059      	eors	r1, r3
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	4059      	eors	r1, r3
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	404b      	eors	r3, r1
 8011be6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011bea:	60fb      	str	r3, [r7, #12]
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	441a      	add	r2, r3
 8011bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bf2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011bf6:	441a      	add	r2, r3
 8011bf8:	4ba8      	ldr	r3, [pc, #672]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011bfa:	4413      	add	r3, r2
 8011bfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011bfe:	4413      	add	r3, r2
 8011c00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c04:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011c08:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 49);
 8011c0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c0e:	431a      	orrs	r2, r3
 8011c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c12:	401a      	ands	r2, r3
 8011c14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c18:	400b      	ands	r3, r1
 8011c1a:	431a      	orrs	r2, r3
 8011c1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c20:	4059      	eors	r1, r3
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	4059      	eors	r1, r3
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	404b      	eors	r3, r1
 8011c2a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011c2e:	613b      	str	r3, [r7, #16]
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	441a      	add	r2, r3
 8011c34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c36:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011c3a:	441a      	add	r2, r3
 8011c3c:	4b97      	ldr	r3, [pc, #604]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011c3e:	4413      	add	r3, r2
 8011c40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011c42:	4413      	add	r3, r2
 8011c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c48:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011c4c:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 50);
 8011c4e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c52:	431a      	orrs	r2, r3
 8011c54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c56:	401a      	ands	r2, r3
 8011c58:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c5c:	400b      	ands	r3, r1
 8011c5e:	431a      	orrs	r2, r3
 8011c60:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c64:	4059      	eors	r1, r3
 8011c66:	69fb      	ldr	r3, [r7, #28]
 8011c68:	4059      	eors	r1, r3
 8011c6a:	697b      	ldr	r3, [r7, #20]
 8011c6c:	404b      	eors	r3, r1
 8011c6e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011c72:	617b      	str	r3, [r7, #20]
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	441a      	add	r2, r3
 8011c78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c7a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011c7e:	441a      	add	r2, r3
 8011c80:	4b86      	ldr	r3, [pc, #536]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011c82:	4413      	add	r3, r2
 8011c84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011c86:	4413      	add	r3, r2
 8011c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c8c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011c90:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 51);
 8011c92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c96:	431a      	orrs	r2, r3
 8011c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c9a:	401a      	ands	r2, r3
 8011c9c:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8011c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ca0:	400b      	ands	r3, r1
 8011ca2:	431a      	orrs	r2, r3
 8011ca4:	68f9      	ldr	r1, [r7, #12]
 8011ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ca8:	4059      	eors	r1, r3
 8011caa:	6a3b      	ldr	r3, [r7, #32]
 8011cac:	4059      	eors	r1, r3
 8011cae:	69bb      	ldr	r3, [r7, #24]
 8011cb0:	404b      	eors	r3, r1
 8011cb2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011cb6:	61bb      	str	r3, [r7, #24]
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	441a      	add	r2, r3
 8011cbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cbe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011cc2:	441a      	add	r2, r3
 8011cc4:	4b75      	ldr	r3, [pc, #468]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011cc6:	4413      	add	r3, r2
 8011cc8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011cca:	4413      	add	r3, r2
 8011ccc:	653b      	str	r3, [r7, #80]	@ 0x50
 8011cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011cd0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 52);
 8011cd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011cda:	431a      	orrs	r2, r3
 8011cdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011cde:	401a      	ands	r2, r3
 8011ce0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011ce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ce4:	400b      	ands	r3, r1
 8011ce6:	431a      	orrs	r2, r3
 8011ce8:	6939      	ldr	r1, [r7, #16]
 8011cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cec:	4059      	eors	r1, r3
 8011cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf0:	4059      	eors	r1, r3
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	404b      	eors	r3, r1
 8011cf6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011cfa:	61fb      	str	r3, [r7, #28]
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	441a      	add	r2, r3
 8011d00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d02:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011d06:	441a      	add	r2, r3
 8011d08:	4b64      	ldr	r3, [pc, #400]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011d0a:	4413      	add	r3, r2
 8011d0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d0e:	4413      	add	r3, r2
 8011d10:	657b      	str	r3, [r7, #84]	@ 0x54
 8011d12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d14:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 53);
 8011d1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d1e:	431a      	orrs	r2, r3
 8011d20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d22:	401a      	ands	r2, r3
 8011d24:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d28:	400b      	ands	r3, r1
 8011d2a:	431a      	orrs	r2, r3
 8011d2c:	6979      	ldr	r1, [r7, #20]
 8011d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011d30:	4059      	eors	r1, r3
 8011d32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d34:	4059      	eors	r1, r3
 8011d36:	6a3b      	ldr	r3, [r7, #32]
 8011d38:	404b      	eors	r3, r1
 8011d3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011d3e:	623b      	str	r3, [r7, #32]
 8011d40:	6a3b      	ldr	r3, [r7, #32]
 8011d42:	441a      	add	r2, r3
 8011d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011d4a:	441a      	add	r2, r3
 8011d4c:	4b53      	ldr	r3, [pc, #332]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011d4e:	4413      	add	r3, r2
 8011d50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011d52:	4413      	add	r3, r2
 8011d54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011d5c:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 54);
 8011d5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d62:	431a      	orrs	r2, r3
 8011d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d66:	401a      	ands	r2, r3
 8011d68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d6c:	400b      	ands	r3, r1
 8011d6e:	431a      	orrs	r2, r3
 8011d70:	69b9      	ldr	r1, [r7, #24]
 8011d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011d74:	4059      	eors	r1, r3
 8011d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d78:	4059      	eors	r1, r3
 8011d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7c:	404b      	eors	r3, r1
 8011d7e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d86:	441a      	add	r2, r3
 8011d88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d8a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011d8e:	441a      	add	r2, r3
 8011d90:	4b42      	ldr	r3, [pc, #264]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011d92:	4413      	add	r3, r2
 8011d94:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011d96:	4413      	add	r3, r2
 8011d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d9c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011da0:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 55);
 8011da2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011da6:	431a      	orrs	r2, r3
 8011da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011daa:	401a      	ands	r2, r3
 8011dac:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011dae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011db0:	400b      	ands	r3, r1
 8011db2:	431a      	orrs	r2, r3
 8011db4:	69f9      	ldr	r1, [r7, #28]
 8011db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011db8:	4059      	eors	r1, r3
 8011dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dbc:	4059      	eors	r1, r3
 8011dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dc0:	404b      	eors	r3, r1
 8011dc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dca:	441a      	add	r2, r3
 8011dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011dce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011dd2:	441a      	add	r2, r3
 8011dd4:	4b31      	ldr	r3, [pc, #196]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011dd6:	4413      	add	r3, r2
 8011dd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011dda:	4413      	add	r3, r2
 8011ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011de0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011de4:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 56);
 8011de6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011de8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011dea:	431a      	orrs	r2, r3
 8011dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011dee:	401a      	ands	r2, r3
 8011df0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8011df2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011df4:	400b      	ands	r3, r1
 8011df6:	431a      	orrs	r2, r3
 8011df8:	6a39      	ldr	r1, [r7, #32]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	4059      	eors	r1, r3
 8011dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e00:	4059      	eors	r1, r3
 8011e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e04:	404b      	eors	r3, r1
 8011e06:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e0e:	441a      	add	r2, r3
 8011e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e12:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011e16:	441a      	add	r2, r3
 8011e18:	4b20      	ldr	r3, [pc, #128]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011e1a:	4413      	add	r3, r2
 8011e1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e1e:	4413      	add	r3, r2
 8011e20:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e24:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 57);
 8011e2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011e2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e2e:	431a      	orrs	r2, r3
 8011e30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e32:	401a      	ands	r2, r3
 8011e34:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e38:	400b      	ands	r3, r1
 8011e3a:	431a      	orrs	r2, r3
 8011e3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	4059      	eors	r1, r3
 8011e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e44:	4059      	eors	r1, r3
 8011e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e48:	404b      	eors	r3, r1
 8011e4a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011e4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e52:	441a      	add	r2, r3
 8011e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e56:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011e5a:	441a      	add	r2, r3
 8011e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8011e9c <mg_sha1_transform+0xea4>)
 8011e5e:	4413      	add	r3, r2
 8011e60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011e62:	4413      	add	r3, r2
 8011e64:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e68:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011e6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 58);
 8011e6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e72:	431a      	orrs	r2, r3
 8011e74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e76:	401a      	ands	r2, r3
 8011e78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011e7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e7c:	400b      	ands	r3, r1
 8011e7e:	431a      	orrs	r2, r3
 8011e80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	4059      	eors	r1, r3
 8011e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e88:	4059      	eors	r1, r3
 8011e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e8c:	404b      	eors	r3, r1
 8011e8e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8011e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e96:	441a      	add	r2, r3
 8011e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e9a:	e001      	b.n	8011ea0 <mg_sha1_transform+0xea8>
 8011e9c:	8f1bbcdc 	.word	0x8f1bbcdc
 8011ea0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011ea4:	441a      	add	r2, r3
 8011ea6:	4ba9      	ldr	r3, [pc, #676]	@ (801214c <mg_sha1_transform+0x1154>)
 8011ea8:	4413      	add	r3, r2
 8011eaa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011eac:	4413      	add	r3, r2
 8011eae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011eb2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011eb6:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 59);
 8011eb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011eba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ebc:	431a      	orrs	r2, r3
 8011ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ec0:	401a      	ands	r2, r3
 8011ec2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ec6:	400b      	ands	r3, r1
 8011ec8:	431a      	orrs	r2, r3
 8011eca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ecc:	69bb      	ldr	r3, [r7, #24]
 8011ece:	4059      	eors	r1, r3
 8011ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ed2:	4059      	eors	r1, r3
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ed6:	404b      	eors	r3, r1
 8011ed8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011edc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ee0:	441a      	add	r2, r3
 8011ee2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ee4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011ee8:	441a      	add	r2, r3
 8011eea:	4b98      	ldr	r3, [pc, #608]	@ (801214c <mg_sha1_transform+0x1154>)
 8011eec:	4413      	add	r3, r2
 8011eee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011ef0:	4413      	add	r3, r2
 8011ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ef6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011efa:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 60);
 8011efc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f00:	405a      	eors	r2, r3
 8011f02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f04:	405a      	eors	r2, r3
 8011f06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	4059      	eors	r1, r3
 8011f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f0e:	4059      	eors	r1, r3
 8011f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f12:	404b      	eors	r3, r1
 8011f14:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011f18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011f1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f1c:	441a      	add	r2, r3
 8011f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f20:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011f24:	441a      	add	r2, r3
 8011f26:	4b8a      	ldr	r3, [pc, #552]	@ (8012150 <mg_sha1_transform+0x1158>)
 8011f28:	4413      	add	r3, r2
 8011f2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011f2c:	4413      	add	r3, r2
 8011f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011f32:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011f36:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 61);
 8011f38:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011f3c:	405a      	eors	r2, r3
 8011f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f40:	405a      	eors	r2, r3
 8011f42:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011f44:	6a3b      	ldr	r3, [r7, #32]
 8011f46:	4059      	eors	r1, r3
 8011f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011f4a:	4059      	eors	r1, r3
 8011f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f4e:	404b      	eors	r3, r1
 8011f50:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8011f56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f58:	441a      	add	r2, r3
 8011f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f5c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011f60:	441a      	add	r2, r3
 8011f62:	4b7b      	ldr	r3, [pc, #492]	@ (8012150 <mg_sha1_transform+0x1158>)
 8011f64:	4413      	add	r3, r2
 8011f66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011f68:	4413      	add	r3, r2
 8011f6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f6e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011f72:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 62);
 8011f74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f78:	405a      	eors	r2, r3
 8011f7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011f7c:	405a      	eors	r2, r3
 8011f7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f82:	4059      	eors	r1, r3
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	4059      	eors	r1, r3
 8011f88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f8a:	404b      	eors	r3, r1
 8011f8c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011f90:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f94:	441a      	add	r2, r3
 8011f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f98:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011f9c:	441a      	add	r2, r3
 8011f9e:	4b6c      	ldr	r3, [pc, #432]	@ (8012150 <mg_sha1_transform+0x1158>)
 8011fa0:	4413      	add	r3, r2
 8011fa2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011fa4:	4413      	add	r3, r2
 8011fa6:	657b      	str	r3, [r7, #84]	@ 0x54
 8011fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011faa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 63);
 8011fb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fb4:	405a      	eors	r2, r3
 8011fb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011fb8:	405a      	eors	r2, r3
 8011fba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fbe:	4059      	eors	r1, r3
 8011fc0:	693b      	ldr	r3, [r7, #16]
 8011fc2:	4059      	eors	r1, r3
 8011fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011fc6:	404b      	eors	r3, r1
 8011fc8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011fd0:	441a      	add	r2, r3
 8011fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fd4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011fd8:	441a      	add	r2, r3
 8011fda:	4b5d      	ldr	r3, [pc, #372]	@ (8012150 <mg_sha1_transform+0x1158>)
 8011fdc:	4413      	add	r3, r2
 8011fde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011fe0:	4413      	add	r3, r2
 8011fe2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fe6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011fea:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 64);
 8011fec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011fee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ff0:	405a      	eors	r2, r3
 8011ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ff4:	405a      	eors	r2, r3
 8011ff6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ffa:	4059      	eors	r1, r3
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	4059      	eors	r1, r3
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	404b      	eors	r3, r1
 8012004:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012008:	60fb      	str	r3, [r7, #12]
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	441a      	add	r2, r3
 801200e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012010:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012014:	441a      	add	r2, r3
 8012016:	4b4e      	ldr	r3, [pc, #312]	@ (8012150 <mg_sha1_transform+0x1158>)
 8012018:	4413      	add	r3, r2
 801201a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801201c:	4413      	add	r3, r2
 801201e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012022:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012026:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 65);
 8012028:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801202a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801202c:	405a      	eors	r2, r3
 801202e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012030:	405a      	eors	r2, r3
 8012032:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012036:	4059      	eors	r1, r3
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	4059      	eors	r1, r3
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	404b      	eors	r3, r1
 8012040:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012044:	613b      	str	r3, [r7, #16]
 8012046:	693b      	ldr	r3, [r7, #16]
 8012048:	441a      	add	r2, r3
 801204a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801204c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012050:	441a      	add	r2, r3
 8012052:	4b3f      	ldr	r3, [pc, #252]	@ (8012150 <mg_sha1_transform+0x1158>)
 8012054:	4413      	add	r3, r2
 8012056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012058:	4413      	add	r3, r2
 801205a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801205c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801205e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012062:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 66);
 8012064:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012066:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012068:	405a      	eors	r2, r3
 801206a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801206c:	405a      	eors	r2, r3
 801206e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012072:	4059      	eors	r1, r3
 8012074:	69fb      	ldr	r3, [r7, #28]
 8012076:	4059      	eors	r1, r3
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	404b      	eors	r3, r1
 801207c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012080:	617b      	str	r3, [r7, #20]
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	441a      	add	r2, r3
 8012086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012088:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801208c:	441a      	add	r2, r3
 801208e:	4b30      	ldr	r3, [pc, #192]	@ (8012150 <mg_sha1_transform+0x1158>)
 8012090:	4413      	add	r3, r2
 8012092:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012094:	4413      	add	r3, r2
 8012096:	653b      	str	r3, [r7, #80]	@ 0x50
 8012098:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801209a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801209e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 67);
 80120a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80120a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80120a4:	405a      	eors	r2, r3
 80120a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80120a8:	405a      	eors	r2, r3
 80120aa:	68f9      	ldr	r1, [r7, #12]
 80120ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ae:	4059      	eors	r1, r3
 80120b0:	6a3b      	ldr	r3, [r7, #32]
 80120b2:	4059      	eors	r1, r3
 80120b4:	69bb      	ldr	r3, [r7, #24]
 80120b6:	404b      	eors	r3, r1
 80120b8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80120bc:	61bb      	str	r3, [r7, #24]
 80120be:	69bb      	ldr	r3, [r7, #24]
 80120c0:	441a      	add	r2, r3
 80120c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120c4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80120c8:	441a      	add	r2, r3
 80120ca:	4b21      	ldr	r3, [pc, #132]	@ (8012150 <mg_sha1_transform+0x1158>)
 80120cc:	4413      	add	r3, r2
 80120ce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80120d0:	4413      	add	r3, r2
 80120d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80120d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120d6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80120da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 68);
 80120dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80120de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120e0:	405a      	eors	r2, r3
 80120e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80120e4:	405a      	eors	r2, r3
 80120e6:	6939      	ldr	r1, [r7, #16]
 80120e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80120ea:	4059      	eors	r1, r3
 80120ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ee:	4059      	eors	r1, r3
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	404b      	eors	r3, r1
 80120f4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80120f8:	61fb      	str	r3, [r7, #28]
 80120fa:	69fb      	ldr	r3, [r7, #28]
 80120fc:	441a      	add	r2, r3
 80120fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012100:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012104:	441a      	add	r2, r3
 8012106:	4b12      	ldr	r3, [pc, #72]	@ (8012150 <mg_sha1_transform+0x1158>)
 8012108:	4413      	add	r3, r2
 801210a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801210c:	4413      	add	r3, r2
 801210e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012112:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012116:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 69);
 8012118:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801211a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801211c:	405a      	eors	r2, r3
 801211e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012120:	405a      	eors	r2, r3
 8012122:	6979      	ldr	r1, [r7, #20]
 8012124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012126:	4059      	eors	r1, r3
 8012128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801212a:	4059      	eors	r1, r3
 801212c:	6a3b      	ldr	r3, [r7, #32]
 801212e:	404b      	eors	r3, r1
 8012130:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012134:	623b      	str	r3, [r7, #32]
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	441a      	add	r2, r3
 801213a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801213c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012140:	441a      	add	r2, r3
 8012142:	4b03      	ldr	r3, [pc, #12]	@ (8012150 <mg_sha1_transform+0x1158>)
 8012144:	4413      	add	r3, r2
 8012146:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012148:	4413      	add	r3, r2
 801214a:	e003      	b.n	8012154 <mg_sha1_transform+0x115c>
 801214c:	8f1bbcdc 	.word	0x8f1bbcdc
 8012150:	ca62c1d6 	.word	0xca62c1d6
 8012154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012158:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801215c:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 70);
 801215e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012162:	405a      	eors	r2, r3
 8012164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012166:	405a      	eors	r2, r3
 8012168:	69b9      	ldr	r1, [r7, #24]
 801216a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801216c:	4059      	eors	r1, r3
 801216e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012170:	4059      	eors	r1, r3
 8012172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012174:	404b      	eors	r3, r1
 8012176:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801217a:	627b      	str	r3, [r7, #36]	@ 0x24
 801217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801217e:	441a      	add	r2, r3
 8012180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012182:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012186:	441a      	add	r2, r3
 8012188:	4ba7      	ldr	r3, [pc, #668]	@ (8012428 <mg_sha1_transform+0x1430>)
 801218a:	4413      	add	r3, r2
 801218c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801218e:	4413      	add	r3, r2
 8012190:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012194:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012198:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 71);
 801219a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801219c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801219e:	405a      	eors	r2, r3
 80121a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121a2:	405a      	eors	r2, r3
 80121a4:	69f9      	ldr	r1, [r7, #28]
 80121a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80121a8:	4059      	eors	r1, r3
 80121aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ac:	4059      	eors	r1, r3
 80121ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b0:	404b      	eors	r3, r1
 80121b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80121b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80121b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121ba:	441a      	add	r2, r3
 80121bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121be:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80121c2:	441a      	add	r2, r3
 80121c4:	4b98      	ldr	r3, [pc, #608]	@ (8012428 <mg_sha1_transform+0x1430>)
 80121c6:	4413      	add	r3, r2
 80121c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80121ca:	4413      	add	r3, r2
 80121cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80121ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80121d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 72);
 80121d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80121d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121da:	405a      	eors	r2, r3
 80121dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80121de:	405a      	eors	r2, r3
 80121e0:	6a39      	ldr	r1, [r7, #32]
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	4059      	eors	r1, r3
 80121e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121e8:	4059      	eors	r1, r3
 80121ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ec:	404b      	eors	r3, r1
 80121ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80121f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121f6:	441a      	add	r2, r3
 80121f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121fa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80121fe:	441a      	add	r2, r3
 8012200:	4b89      	ldr	r3, [pc, #548]	@ (8012428 <mg_sha1_transform+0x1430>)
 8012202:	4413      	add	r3, r2
 8012204:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012206:	4413      	add	r3, r2
 8012208:	657b      	str	r3, [r7, #84]	@ 0x54
 801220a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801220c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012210:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 73);
 8012212:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012216:	405a      	eors	r2, r3
 8012218:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801221a:	405a      	eors	r2, r3
 801221c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	4059      	eors	r1, r3
 8012222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012224:	4059      	eors	r1, r3
 8012226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012228:	404b      	eors	r3, r1
 801222a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801222e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012232:	441a      	add	r2, r3
 8012234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012236:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801223a:	441a      	add	r2, r3
 801223c:	4b7a      	ldr	r3, [pc, #488]	@ (8012428 <mg_sha1_transform+0x1430>)
 801223e:	4413      	add	r3, r2
 8012240:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012242:	4413      	add	r3, r2
 8012244:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012248:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801224c:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 74);
 801224e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012252:	405a      	eors	r2, r3
 8012254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012256:	405a      	eors	r2, r3
 8012258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	4059      	eors	r1, r3
 801225e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012260:	4059      	eors	r1, r3
 8012262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012264:	404b      	eors	r3, r1
 8012266:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801226a:	637b      	str	r3, [r7, #52]	@ 0x34
 801226c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801226e:	441a      	add	r2, r3
 8012270:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012272:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012276:	441a      	add	r2, r3
 8012278:	4b6b      	ldr	r3, [pc, #428]	@ (8012428 <mg_sha1_transform+0x1430>)
 801227a:	4413      	add	r3, r2
 801227c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801227e:	4413      	add	r3, r2
 8012280:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012284:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012288:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 75);
 801228a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801228c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801228e:	405a      	eors	r2, r3
 8012290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012292:	405a      	eors	r2, r3
 8012294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012296:	69bb      	ldr	r3, [r7, #24]
 8012298:	4059      	eors	r1, r3
 801229a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801229c:	4059      	eors	r1, r3
 801229e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122a0:	404b      	eors	r3, r1
 80122a2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80122a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80122a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122aa:	441a      	add	r2, r3
 80122ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122ae:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80122b2:	441a      	add	r2, r3
 80122b4:	4b5c      	ldr	r3, [pc, #368]	@ (8012428 <mg_sha1_transform+0x1430>)
 80122b6:	4413      	add	r3, r2
 80122b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80122ba:	4413      	add	r3, r2
 80122bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80122be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80122c0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80122c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 76);
 80122c6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80122c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80122ca:	405a      	eors	r2, r3
 80122cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80122ce:	405a      	eors	r2, r3
 80122d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80122d2:	69fb      	ldr	r3, [r7, #28]
 80122d4:	4059      	eors	r1, r3
 80122d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122d8:	4059      	eors	r1, r3
 80122da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122dc:	404b      	eors	r3, r1
 80122de:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80122e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80122e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122e6:	441a      	add	r2, r3
 80122e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122ea:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80122ee:	441a      	add	r2, r3
 80122f0:	4b4d      	ldr	r3, [pc, #308]	@ (8012428 <mg_sha1_transform+0x1430>)
 80122f2:	4413      	add	r3, r2
 80122f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80122f6:	4413      	add	r3, r2
 80122f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80122fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122fc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012300:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 77);
 8012302:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012306:	405a      	eors	r2, r3
 8012308:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801230a:	405a      	eors	r2, r3
 801230c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801230e:	6a3b      	ldr	r3, [r7, #32]
 8012310:	4059      	eors	r1, r3
 8012312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012314:	4059      	eors	r1, r3
 8012316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012318:	404b      	eors	r3, r1
 801231a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801231e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012322:	441a      	add	r2, r3
 8012324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012326:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801232a:	441a      	add	r2, r3
 801232c:	4b3e      	ldr	r3, [pc, #248]	@ (8012428 <mg_sha1_transform+0x1430>)
 801232e:	4413      	add	r3, r2
 8012330:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012332:	4413      	add	r3, r2
 8012334:	657b      	str	r3, [r7, #84]	@ 0x54
 8012336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012338:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801233c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 78);
 801233e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012342:	405a      	eors	r2, r3
 8012344:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012346:	405a      	eors	r2, r3
 8012348:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801234c:	4059      	eors	r1, r3
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	4059      	eors	r1, r3
 8012352:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012354:	404b      	eors	r3, r1
 8012356:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801235a:	647b      	str	r3, [r7, #68]	@ 0x44
 801235c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801235e:	441a      	add	r2, r3
 8012360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012362:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012366:	441a      	add	r2, r3
 8012368:	4b2f      	ldr	r3, [pc, #188]	@ (8012428 <mg_sha1_transform+0x1430>)
 801236a:	4413      	add	r3, r2
 801236c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801236e:	4413      	add	r3, r2
 8012370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012374:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012378:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 79);
 801237a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801237c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801237e:	405a      	eors	r2, r3
 8012380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012382:	405a      	eors	r2, r3
 8012384:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8012386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012388:	4059      	eors	r1, r3
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	4059      	eors	r1, r3
 801238e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012390:	404b      	eors	r3, r1
 8012392:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801239a:	441a      	add	r2, r3
 801239c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801239e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80123a2:	441a      	add	r2, r3
 80123a4:	4b20      	ldr	r3, [pc, #128]	@ (8012428 <mg_sha1_transform+0x1430>)
 80123a6:	4413      	add	r3, r2
 80123a8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80123aa:	4413      	add	r3, r2
 80123ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80123ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123b0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80123b4:	657b      	str	r3, [r7, #84]	@ 0x54
  state[0] += a;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123bc:	441a      	add	r2, r3
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	601a      	str	r2, [r3, #0]
  state[1] += b;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	3304      	adds	r3, #4
 80123c6:	6819      	ldr	r1, [r3, #0]
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	3304      	adds	r3, #4
 80123cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80123ce:	440a      	add	r2, r1
 80123d0:	601a      	str	r2, [r3, #0]
  state[2] += c;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	3308      	adds	r3, #8
 80123d6:	6819      	ldr	r1, [r3, #0]
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	3308      	adds	r3, #8
 80123dc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80123de:	440a      	add	r2, r1
 80123e0:	601a      	str	r2, [r3, #0]
  state[3] += d;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	330c      	adds	r3, #12
 80123e6:	6819      	ldr	r1, [r3, #0]
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	330c      	adds	r3, #12
 80123ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80123ee:	440a      	add	r2, r1
 80123f0:	601a      	str	r2, [r3, #0]
  state[4] += e;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	3310      	adds	r3, #16
 80123f6:	6819      	ldr	r1, [r3, #0]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	3310      	adds	r3, #16
 80123fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80123fe:	440a      	add	r2, r1
 8012400:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 8012402:	f107 030c 	add.w	r3, r7, #12
 8012406:	2240      	movs	r2, #64	@ 0x40
 8012408:	2100      	movs	r1, #0
 801240a:	4618      	mov	r0, r3
 801240c:	f011 f883 	bl	8023516 <memset>
  a = b = c = d = e = 0;
 8012410:	2300      	movs	r3, #0
 8012412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012416:	653b      	str	r3, [r7, #80]	@ 0x50
 8012418:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801241a:	657b      	str	r3, [r7, #84]	@ 0x54
 801241c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801241e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012420:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012422:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012424:	e002      	b.n	801242c <mg_sha1_transform+0x1434>
 8012426:	bf00      	nop
 8012428:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 801242c:	bf00      	nop
 801242e:	3764      	adds	r7, #100	@ 0x64
 8012430:	46bd      	mov	sp, r7
 8012432:	bd90      	pop	{r4, r7, pc}

08012434 <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 8012434:	b480      	push	{r7}
 8012436:	b083      	sub	sp, #12
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	4a0d      	ldr	r2, [pc, #52]	@ (8012474 <mg_sha1_init+0x40>)
 8012440:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4a0c      	ldr	r2, [pc, #48]	@ (8012478 <mg_sha1_init+0x44>)
 8012446:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	4a0c      	ldr	r2, [pc, #48]	@ (801247c <mg_sha1_init+0x48>)
 801244c:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	4a0b      	ldr	r2, [pc, #44]	@ (8012480 <mg_sha1_init+0x4c>)
 8012452:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	4a0b      	ldr	r2, [pc, #44]	@ (8012484 <mg_sha1_init+0x50>)
 8012458:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2200      	movs	r2, #0
 801245e:	619a      	str	r2, [r3, #24]
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	699a      	ldr	r2, [r3, #24]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	615a      	str	r2, [r3, #20]
}
 8012468:	bf00      	nop
 801246a:	370c      	adds	r7, #12
 801246c:	46bd      	mov	sp, r7
 801246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012472:	4770      	bx	lr
 8012474:	67452301 	.word	0x67452301
 8012478:	efcdab89 	.word	0xefcdab89
 801247c:	98badcfe 	.word	0x98badcfe
 8012480:	10325476 	.word	0x10325476
 8012484:	c3d2e1f0 	.word	0xc3d2e1f0

08012488 <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 8012488:	b580      	push	{r7, lr}
 801248a:	b086      	sub	sp, #24
 801248c:	af00      	add	r7, sp, #0
 801248e:	60f8      	str	r0, [r7, #12]
 8012490:	60b9      	str	r1, [r7, #8]
 8012492:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	695b      	ldr	r3, [r3, #20]
 8012498:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	695a      	ldr	r2, [r3, #20]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	00db      	lsls	r3, r3, #3
 80124a2:	441a      	add	r2, r3
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	615a      	str	r2, [r3, #20]
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	695b      	ldr	r3, [r3, #20]
 80124ac:	693a      	ldr	r2, [r7, #16]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d904      	bls.n	80124bc <mg_sha1_update+0x34>
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	699b      	ldr	r3, [r3, #24]
 80124b6:	1c5a      	adds	r2, r3, #1
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	699a      	ldr	r2, [r3, #24]
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	0f5b      	lsrs	r3, r3, #29
 80124c4:	441a      	add	r2, r3
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	08db      	lsrs	r3, r3, #3
 80124ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80124d2:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 80124d4:	693a      	ldr	r2, [r7, #16]
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	4413      	add	r3, r2
 80124da:	2b3f      	cmp	r3, #63	@ 0x3f
 80124dc:	d926      	bls.n	801252c <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	3318      	adds	r3, #24
 80124e2:	68fa      	ldr	r2, [r7, #12]
 80124e4:	4413      	add	r3, r2
 80124e6:	1d18      	adds	r0, r3, #4
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80124ee:	617b      	str	r3, [r7, #20]
 80124f0:	697a      	ldr	r2, [r7, #20]
 80124f2:	68b9      	ldr	r1, [r7, #8]
 80124f4:	f011 f945 	bl	8023782 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 80124f8:	68fa      	ldr	r2, [r7, #12]
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	331c      	adds	r3, #28
 80124fe:	4619      	mov	r1, r3
 8012500:	4610      	mov	r0, r2
 8012502:	f7fe fd79 	bl	8010ff8 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8012506:	e009      	b.n	801251c <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 8012508:	68f8      	ldr	r0, [r7, #12]
 801250a:	68ba      	ldr	r2, [r7, #8]
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	4413      	add	r3, r2
 8012510:	4619      	mov	r1, r3
 8012512:	f7fe fd71 	bl	8010ff8 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	3340      	adds	r3, #64	@ 0x40
 801251a:	617b      	str	r3, [r7, #20]
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	333f      	adds	r3, #63	@ 0x3f
 8012520:	687a      	ldr	r2, [r7, #4]
 8012522:	429a      	cmp	r2, r3
 8012524:	d8f0      	bhi.n	8012508 <mg_sha1_update+0x80>
    }
    j = 0;
 8012526:	2300      	movs	r3, #0
 8012528:	613b      	str	r3, [r7, #16]
 801252a:	e001      	b.n	8012530 <mg_sha1_update+0xa8>
  } else
    i = 0;
 801252c:	2300      	movs	r3, #0
 801252e:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	3318      	adds	r3, #24
 8012534:	68fa      	ldr	r2, [r7, #12]
 8012536:	4413      	add	r3, r2
 8012538:	1d18      	adds	r0, r3, #4
 801253a:	68ba      	ldr	r2, [r7, #8]
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	18d1      	adds	r1, r2, r3
 8012540:	687a      	ldr	r2, [r7, #4]
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	1ad3      	subs	r3, r2, r3
 8012546:	461a      	mov	r2, r3
 8012548:	f011 f91b 	bl	8023782 <memcpy>
}
 801254c:	bf00      	nop
 801254e:	3718      	adds	r7, #24
 8012550:	46bd      	mov	sp, r7
 8012552:	bd80      	pop	{r7, pc}

08012554 <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8012554:	b580      	push	{r7, lr}
 8012556:	b086      	sub	sp, #24
 8012558:	af00      	add	r7, sp, #0
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 801255e:	2300      	movs	r3, #0
 8012560:	617b      	str	r3, [r7, #20]
 8012562:	e01b      	b.n	801259c <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8012564:	697b      	ldr	r3, [r7, #20]
 8012566:	2b03      	cmp	r3, #3
 8012568:	bf94      	ite	ls
 801256a:	2301      	movls	r3, #1
 801256c:	2300      	movhi	r3, #0
 801256e:	b2db      	uxtb	r3, r3
 8012570:	683a      	ldr	r2, [r7, #0]
 8012572:	3304      	adds	r3, #4
 8012574:	009b      	lsls	r3, r3, #2
 8012576:	4413      	add	r3, r2
 8012578:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	43db      	mvns	r3, r3
 801257e:	f003 0303 	and.w	r3, r3, #3
 8012582:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8012584:	fa22 f303 	lsr.w	r3, r2, r3
 8012588:	b2d9      	uxtb	r1, r3
 801258a:	f107 020c 	add.w	r2, r7, #12
 801258e:	697b      	ldr	r3, [r7, #20]
 8012590:	4413      	add	r3, r2
 8012592:	460a      	mov	r2, r1
 8012594:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	3301      	adds	r3, #1
 801259a:	617b      	str	r3, [r7, #20]
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	2b07      	cmp	r3, #7
 80125a0:	d9e0      	bls.n	8012564 <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 80125a2:	2380      	movs	r3, #128	@ 0x80
 80125a4:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 80125a6:	f107 030b 	add.w	r3, r7, #11
 80125aa:	2201      	movs	r2, #1
 80125ac:	4619      	mov	r1, r3
 80125ae:	6838      	ldr	r0, [r7, #0]
 80125b0:	f7ff ff6a 	bl	8012488 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 80125b4:	e008      	b.n	80125c8 <mg_sha1_final+0x74>
    c = 0000;
 80125b6:	2300      	movs	r3, #0
 80125b8:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 80125ba:	f107 030b 	add.w	r3, r7, #11
 80125be:	2201      	movs	r2, #1
 80125c0:	4619      	mov	r1, r3
 80125c2:	6838      	ldr	r0, [r7, #0]
 80125c4:	f7ff ff60 	bl	8012488 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	695b      	ldr	r3, [r3, #20]
 80125cc:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 80125d0:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80125d4:	d1ef      	bne.n	80125b6 <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 80125d6:	f107 030c 	add.w	r3, r7, #12
 80125da:	2208      	movs	r2, #8
 80125dc:	4619      	mov	r1, r3
 80125de:	6838      	ldr	r0, [r7, #0]
 80125e0:	f7ff ff52 	bl	8012488 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 80125e4:	2300      	movs	r3, #0
 80125e6:	617b      	str	r3, [r7, #20]
 80125e8:	e013      	b.n	8012612 <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	089a      	lsrs	r2, r3, #2
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	43db      	mvns	r3, r3
 80125f8:	f003 0303 	and.w	r3, r3, #3
 80125fc:	00db      	lsls	r3, r3, #3
 80125fe:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8012608:	b2ca      	uxtb	r2, r1
    digest[i] =
 801260a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 801260c:	697b      	ldr	r3, [r7, #20]
 801260e:	3301      	adds	r3, #1
 8012610:	617b      	str	r3, [r7, #20]
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	2b13      	cmp	r3, #19
 8012616:	d9e8      	bls.n	80125ea <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 8012618:	225c      	movs	r2, #92	@ 0x5c
 801261a:	2100      	movs	r1, #0
 801261c:	6838      	ldr	r0, [r7, #0]
 801261e:	f010 ff7a 	bl	8023516 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8012622:	f107 030c 	add.w	r3, r7, #12
 8012626:	2208      	movs	r2, #8
 8012628:	2100      	movs	r1, #0
 801262a:	4618      	mov	r0, r3
 801262c:	f010 ff73 	bl	8023516 <memset>
}
 8012630:	bf00      	nop
 8012632:	3718      	adds	r7, #24
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 8012638:	b480      	push	{r7}
 801263a:	b083      	sub	sp, #12
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 8012646:	6879      	ldr	r1, [r7, #4]
 8012648:	f04f 0200 	mov.w	r2, #0
 801264c:	f04f 0300 	mov.w	r3, #0
 8012650:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	4a0e      	ldr	r2, [pc, #56]	@ (8012690 <mg_sha256_init+0x58>)
 8012658:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	4a0d      	ldr	r2, [pc, #52]	@ (8012694 <mg_sha256_init+0x5c>)
 801265e:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	4a0d      	ldr	r2, [pc, #52]	@ (8012698 <mg_sha256_init+0x60>)
 8012664:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	4a0c      	ldr	r2, [pc, #48]	@ (801269c <mg_sha256_init+0x64>)
 801266a:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	4a0c      	ldr	r2, [pc, #48]	@ (80126a0 <mg_sha256_init+0x68>)
 8012670:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	4a0b      	ldr	r2, [pc, #44]	@ (80126a4 <mg_sha256_init+0x6c>)
 8012676:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	4a0b      	ldr	r2, [pc, #44]	@ (80126a8 <mg_sha256_init+0x70>)
 801267c:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	4a0a      	ldr	r2, [pc, #40]	@ (80126ac <mg_sha256_init+0x74>)
 8012682:	61da      	str	r2, [r3, #28]
}
 8012684:	bf00      	nop
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr
 8012690:	6a09e667 	.word	0x6a09e667
 8012694:	bb67ae85 	.word	0xbb67ae85
 8012698:	3c6ef372 	.word	0x3c6ef372
 801269c:	a54ff53a 	.word	0xa54ff53a
 80126a0:	510e527f 	.word	0x510e527f
 80126a4:	9b05688c 	.word	0x9b05688c
 80126a8:	1f83d9ab 	.word	0x1f83d9ab
 80126ac:	5be0cd19 	.word	0x5be0cd19

080126b0 <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 80126b0:	b480      	push	{r7}
 80126b2:	b0cf      	sub	sp, #316	@ 0x13c
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80126ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80126be:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 80126c0:	2300      	movs	r3, #0
 80126c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80126c6:	2300      	movs	r3, #0
 80126c8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80126cc:	e043      	b.n	8012756 <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 80126ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80126d2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80126d6:	681a      	ldr	r2, [r3, #0]
 80126d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80126dc:	4413      	add	r3, r2
 80126de:	332c      	adds	r3, #44	@ 0x2c
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 80126e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80126e8:	3301      	adds	r3, #1
 80126ea:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80126ee:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80126f2:	6809      	ldr	r1, [r1, #0]
 80126f4:	440b      	add	r3, r1
 80126f6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80126fa:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 80126fc:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 80126fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012702:	3302      	adds	r3, #2
 8012704:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8012708:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 801270c:	6809      	ldr	r1, [r1, #0]
 801270e:	440b      	add	r3, r1
 8012710:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8012714:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 8012716:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 8012718:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801271c:	3203      	adds	r2, #3
 801271e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8012722:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8012726:	6809      	ldr	r1, [r1, #0]
 8012728:	440a      	add	r2, r1
 801272a:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 801272e:	ea43 0102 	orr.w	r1, r3, r2
 8012732:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012736:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801273a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801273e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 8012742:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012746:	3301      	adds	r3, #1
 8012748:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801274c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012750:	3304      	adds	r3, #4
 8012752:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8012756:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801275a:	2b0f      	cmp	r3, #15
 801275c:	ddb7      	ble.n	80126ce <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 801275e:	e069      	b.n	8012834 <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 8012760:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012764:	1e9a      	subs	r2, r3, #2
 8012766:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801276a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801276e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012772:	ea4f 4273 	mov.w	r2, r3, ror #17
 8012776:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801277a:	1e99      	subs	r1, r3, #2
 801277c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012780:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012784:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012788:	ea4f 43f3 	mov.w	r3, r3, ror #19
 801278c:	405a      	eors	r2, r3
 801278e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012792:	1e99      	subs	r1, r3, #2
 8012794:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012798:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801279c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80127a0:	0a9b      	lsrs	r3, r3, #10
 80127a2:	405a      	eors	r2, r3
 80127a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80127a8:	1fd9      	subs	r1, r3, #7
 80127aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80127ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80127b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80127b6:	441a      	add	r2, r3
 80127b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80127bc:	f1a3 010f 	sub.w	r1, r3, #15
 80127c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80127c4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80127c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80127cc:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80127d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80127d4:	f1a3 000f 	sub.w	r0, r3, #15
 80127d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80127dc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80127e0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80127e4:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80127e8:	4059      	eors	r1, r3
 80127ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80127ee:	f1a3 000f 	sub.w	r0, r3, #15
 80127f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80127f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80127fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80127fe:	08db      	lsrs	r3, r3, #3
 8012800:	404b      	eors	r3, r1
 8012802:	441a      	add	r2, r3
 8012804:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012808:	f1a3 0110 	sub.w	r1, r3, #16
 801280c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012810:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012814:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012818:	18d1      	adds	r1, r2, r3
 801281a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801281e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012822:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8012826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 801282a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801282e:	3301      	adds	r3, #1
 8012830:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8012834:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012838:	2b3f      	cmp	r3, #63	@ 0x3f
 801283a:	dd91      	ble.n	8012760 <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 801283c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012840:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 801284c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012850:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	685b      	ldr	r3, [r3, #4]
 8012858:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 801285c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012860:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	689b      	ldr	r3, [r3, #8]
 8012868:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 801286c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012870:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 801287c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012880:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	691b      	ldr	r3, [r3, #16]
 8012888:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 801288c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012890:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	695b      	ldr	r3, [r3, #20]
 8012898:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 801289c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80128a0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	699b      	ldr	r3, [r3, #24]
 80128a8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 80128ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80128b0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	69db      	ldr	r3, [r3, #28]
 80128b8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 80128bc:	2300      	movs	r3, #0
 80128be:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80128c2:	e078      	b.n	80129b6 <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 80128c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80128c8:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80128cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80128d0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80128d4:	405a      	eors	r2, r3
 80128d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80128da:	ea4f 6373 	mov.w	r3, r3, ror #25
 80128de:	405a      	eors	r2, r3
 80128e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80128e4:	441a      	add	r2, r3
 80128e6:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80128ea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80128ee:	4019      	ands	r1, r3
 80128f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80128f4:	43d8      	mvns	r0, r3
 80128f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80128fa:	4003      	ands	r3, r0
 80128fc:	404b      	eors	r3, r1
 80128fe:	441a      	add	r2, r3
 8012900:	496e      	ldr	r1, [pc, #440]	@ (8012abc <mg_sha256_chunk+0x40c>)
 8012902:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012906:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801290a:	441a      	add	r2, r3
 801290c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012910:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012914:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8012918:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801291c:	4413      	add	r3, r2
 801291e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 8012922:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012926:	ea4f 02b3 	mov.w	r2, r3, ror #2
 801292a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801292e:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012932:	405a      	eors	r2, r3
 8012934:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012938:	ea4f 53b3 	mov.w	r3, r3, ror #22
 801293c:	405a      	eors	r2, r3
 801293e:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8012942:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8012946:	4059      	eors	r1, r3
 8012948:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801294c:	4019      	ands	r1, r3
 801294e:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8012952:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8012956:	4003      	ands	r3, r0
 8012958:	404b      	eors	r3, r1
 801295a:	4413      	add	r3, r2
 801295c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 8012960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012964:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 8012968:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801296c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 8012970:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012974:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 8012978:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 801297c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012980:	4413      	add	r3, r2
 8012982:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 8012986:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801298a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 801298e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012992:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 8012996:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801299a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 801299e:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80129a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80129a6:	4413      	add	r3, r2
 80129a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 80129ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80129b0:	3301      	adds	r3, #1
 80129b2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80129b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80129ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80129bc:	dd82      	ble.n	80128c4 <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 80129be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80129c2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	681a      	ldr	r2, [r3, #0]
 80129ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80129ce:	441a      	add	r2, r3
 80129d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80129d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 80129dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80129e0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	685a      	ldr	r2, [r3, #4]
 80129e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80129ec:	441a      	add	r2, r3
 80129ee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80129f2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 80129fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80129fe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a02:	681b      	ldr	r3, [r3, #0]
 8012a04:	689a      	ldr	r2, [r3, #8]
 8012a06:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8012a0a:	441a      	add	r2, r3
 8012a0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a10:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 8012a18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	68da      	ldr	r2, [r3, #12]
 8012a24:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8012a28:	441a      	add	r2, r3
 8012a2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a2e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 8012a36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a3a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	691a      	ldr	r2, [r3, #16]
 8012a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012a46:	441a      	add	r2, r3
 8012a48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a4c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 8012a54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a58:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	695a      	ldr	r2, [r3, #20]
 8012a60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012a64:	441a      	add	r2, r3
 8012a66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a6a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 8012a72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a76:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	699a      	ldr	r2, [r3, #24]
 8012a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a82:	441a      	add	r2, r3
 8012a84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a88:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 8012a90:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a94:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	69da      	ldr	r2, [r3, #28]
 8012a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012aa0:	441a      	add	r2, r3
 8012aa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012aa6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	61da      	str	r2, [r3, #28]
}
 8012aae:	bf00      	nop
 8012ab0:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr
 8012abc:	080278e4 	.word	0x080278e4

08012ac0 <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 8012ac0:	b5b0      	push	{r4, r5, r7, lr}
 8012ac2:	b086      	sub	sp, #24
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 8012acc:	2300      	movs	r3, #0
 8012ace:	617b      	str	r3, [r7, #20]
 8012ad0:	e026      	b.n	8012b20 <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 8012ad2:	68ba      	ldr	r2, [r7, #8]
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	441a      	add	r2, r3
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012adc:	7811      	ldrb	r1, [r2, #0]
 8012ade:	68fa      	ldr	r2, [r7, #12]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	460a      	mov	r2, r1
 8012ae4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012aec:	1c5a      	adds	r2, r3, #1
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	629a      	str	r2, [r3, #40]	@ 0x28
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012af6:	2b40      	cmp	r3, #64	@ 0x40
 8012af8:	d10f      	bne.n	8012b1a <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 8012afa:	68f8      	ldr	r0, [r7, #12]
 8012afc:	f7ff fdd8 	bl	80126b0 <mg_sha256_chunk>
      ctx->bits += 512;
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012b06:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 8012b0a:	f143 0500 	adc.w	r5, r3, #0
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	2200      	movs	r2, #0
 8012b18:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	617b      	str	r3, [r7, #20]
 8012b20:	697a      	ldr	r2, [r7, #20]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d3d4      	bcc.n	8012ad2 <mg_sha256_update+0x12>
    }
  }
}
 8012b28:	bf00      	nop
 8012b2a:	bf00      	nop
 8012b2c:	3718      	adds	r7, #24
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bdb0      	pop	{r4, r5, r7, pc}

08012b32 <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 8012b32:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012b42:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	2b37      	cmp	r3, #55	@ 0x37
 8012b48:	d814      	bhi.n	8012b74 <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	1c5a      	adds	r2, r3, #1
 8012b4e:	60fa      	str	r2, [r7, #12]
 8012b50:	683a      	ldr	r2, [r7, #0]
 8012b52:	4413      	add	r3, r2
 8012b54:	2280      	movs	r2, #128	@ 0x80
 8012b56:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 8012b5a:	e007      	b.n	8012b6c <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	1c5a      	adds	r2, r3, #1
 8012b60:	60fa      	str	r2, [r7, #12]
 8012b62:	683a      	ldr	r2, [r7, #0]
 8012b64:	4413      	add	r3, r2
 8012b66:	2200      	movs	r2, #0
 8012b68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2b37      	cmp	r3, #55	@ 0x37
 8012b70:	d9f4      	bls.n	8012b5c <mg_sha256_final+0x2a>
 8012b72:	e01d      	b.n	8012bb0 <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	1c5a      	adds	r2, r3, #1
 8012b78:	60fa      	str	r2, [r7, #12]
 8012b7a:	683a      	ldr	r2, [r7, #0]
 8012b7c:	4413      	add	r3, r2
 8012b7e:	2280      	movs	r2, #128	@ 0x80
 8012b80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8012b84:	e007      	b.n	8012b96 <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	1c5a      	adds	r2, r3, #1
 8012b8a:	60fa      	str	r2, [r7, #12]
 8012b8c:	683a      	ldr	r2, [r7, #0]
 8012b8e:	4413      	add	r3, r2
 8012b90:	2200      	movs	r2, #0
 8012b92:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	2b3f      	cmp	r3, #63	@ 0x3f
 8012b9a:	d9f4      	bls.n	8012b86 <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 8012b9c:	6838      	ldr	r0, [r7, #0]
 8012b9e:	f7ff fd87 	bl	80126b0 <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	332c      	adds	r3, #44	@ 0x2c
 8012ba6:	2238      	movs	r2, #56	@ 0x38
 8012ba8:	2100      	movs	r1, #0
 8012baa:	4618      	mov	r0, r3
 8012bac:	f010 fcb3 	bl	8023516 <memset>
  }

  ctx->bits += ctx->len * 8;
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012bb6:	6839      	ldr	r1, [r7, #0]
 8012bb8:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8012bba:	00c9      	lsls	r1, r1, #3
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	460c      	mov	r4, r1
 8012bc0:	4605      	mov	r5, r0
 8012bc2:	eb12 0804 	adds.w	r8, r2, r4
 8012bc6:	eb43 0905 	adc.w	r9, r3, r5
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012bd6:	b2d2      	uxtb	r2, r2
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012be4:	f04f 0200 	mov.w	r2, #0
 8012be8:	f04f 0300 	mov.w	r3, #0
 8012bec:	0a02      	lsrs	r2, r0, #8
 8012bee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8012bf2:	0a0b      	lsrs	r3, r1, #8
 8012bf4:	b2d2      	uxtb	r2, r2
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012c02:	f04f 0200 	mov.w	r2, #0
 8012c06:	f04f 0300 	mov.w	r3, #0
 8012c0a:	0c02      	lsrs	r2, r0, #16
 8012c0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012c10:	0c0b      	lsrs	r3, r1, #16
 8012c12:	b2d2      	uxtb	r2, r2
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012c20:	f04f 0200 	mov.w	r2, #0
 8012c24:	f04f 0300 	mov.w	r3, #0
 8012c28:	0e02      	lsrs	r2, r0, #24
 8012c2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012c2e:	0e0b      	lsrs	r3, r1, #24
 8012c30:	b2d2      	uxtb	r2, r2
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012c3e:	f04f 0200 	mov.w	r2, #0
 8012c42:	f04f 0300 	mov.w	r3, #0
 8012c46:	000a      	movs	r2, r1
 8012c48:	2300      	movs	r3, #0
 8012c4a:	b2d2      	uxtb	r2, r2
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 8012c52:	683b      	ldr	r3, [r7, #0]
 8012c54:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012c58:	f04f 0200 	mov.w	r2, #0
 8012c5c:	f04f 0300 	mov.w	r3, #0
 8012c60:	0a0a      	lsrs	r2, r1, #8
 8012c62:	2300      	movs	r3, #0
 8012c64:	b2d2      	uxtb	r2, r2
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012c72:	f04f 0200 	mov.w	r2, #0
 8012c76:	f04f 0300 	mov.w	r3, #0
 8012c7a:	0c0a      	lsrs	r2, r1, #16
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	b2d2      	uxtb	r2, r2
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 8012c86:	683b      	ldr	r3, [r7, #0]
 8012c88:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012c8c:	f04f 0200 	mov.w	r2, #0
 8012c90:	f04f 0300 	mov.w	r3, #0
 8012c94:	0e0a      	lsrs	r2, r1, #24
 8012c96:	2300      	movs	r3, #0
 8012c98:	b2d2      	uxtb	r2, r2
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 8012ca0:	6838      	ldr	r0, [r7, #0]
 8012ca2:	f7ff fd05 	bl	80126b0 <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	60fb      	str	r3, [r7, #12]
 8012caa:	e071      	b.n	8012d90 <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	681a      	ldr	r2, [r3, #0]
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	f1c3 0303 	rsb	r3, r3, #3
 8012cb6:	00db      	lsls	r3, r3, #3
 8012cb8:	fa22 f103 	lsr.w	r1, r2, r3
 8012cbc:	687a      	ldr	r2, [r7, #4]
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	b2ca      	uxtb	r2, r1
 8012cc4:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 8012cc6:	683b      	ldr	r3, [r7, #0]
 8012cc8:	685a      	ldr	r2, [r3, #4]
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	f1c3 0303 	rsb	r3, r3, #3
 8012cd0:	00db      	lsls	r3, r3, #3
 8012cd2:	fa22 f103 	lsr.w	r1, r2, r3
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	3304      	adds	r3, #4
 8012cda:	687a      	ldr	r2, [r7, #4]
 8012cdc:	4413      	add	r3, r2
 8012cde:	b2ca      	uxtb	r2, r1
 8012ce0:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	689a      	ldr	r2, [r3, #8]
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	f1c3 0303 	rsb	r3, r3, #3
 8012cec:	00db      	lsls	r3, r3, #3
 8012cee:	fa22 f103 	lsr.w	r1, r2, r3
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	3308      	adds	r3, #8
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	4413      	add	r3, r2
 8012cfa:	b2ca      	uxtb	r2, r1
 8012cfc:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	68da      	ldr	r2, [r3, #12]
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	f1c3 0303 	rsb	r3, r3, #3
 8012d08:	00db      	lsls	r3, r3, #3
 8012d0a:	fa22 f103 	lsr.w	r1, r2, r3
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	330c      	adds	r3, #12
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	4413      	add	r3, r2
 8012d16:	b2ca      	uxtb	r2, r1
 8012d18:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	691a      	ldr	r2, [r3, #16]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	f1c3 0303 	rsb	r3, r3, #3
 8012d24:	00db      	lsls	r3, r3, #3
 8012d26:	fa22 f103 	lsr.w	r1, r2, r3
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	3310      	adds	r3, #16
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	4413      	add	r3, r2
 8012d32:	b2ca      	uxtb	r2, r1
 8012d34:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	695a      	ldr	r2, [r3, #20]
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	f1c3 0303 	rsb	r3, r3, #3
 8012d40:	00db      	lsls	r3, r3, #3
 8012d42:	fa22 f103 	lsr.w	r1, r2, r3
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	3314      	adds	r3, #20
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	b2ca      	uxtb	r2, r1
 8012d50:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	699a      	ldr	r2, [r3, #24]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	f1c3 0303 	rsb	r3, r3, #3
 8012d5c:	00db      	lsls	r3, r3, #3
 8012d5e:	fa22 f103 	lsr.w	r1, r2, r3
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	3318      	adds	r3, #24
 8012d66:	687a      	ldr	r2, [r7, #4]
 8012d68:	4413      	add	r3, r2
 8012d6a:	b2ca      	uxtb	r2, r1
 8012d6c:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	69da      	ldr	r2, [r3, #28]
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	f1c3 0303 	rsb	r3, r3, #3
 8012d78:	00db      	lsls	r3, r3, #3
 8012d7a:	fa22 f103 	lsr.w	r1, r2, r3
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	331c      	adds	r3, #28
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	4413      	add	r3, r2
 8012d86:	b2ca      	uxtb	r2, r1
 8012d88:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	60fb      	str	r3, [r7, #12]
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	2b03      	cmp	r3, #3
 8012d94:	d98a      	bls.n	8012cac <mg_sha256_final+0x17a>
  }
}
 8012d96:	bf00      	nop
 8012d98:	bf00      	nop
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08012da2 <mg_sha256>:

void mg_sha256(uint8_t dst[32], uint8_t *data, size_t datasz) {
 8012da2:	b580      	push	{r7, lr}
 8012da4:	b0a0      	sub	sp, #128	@ 0x80
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	60f8      	str	r0, [r7, #12]
 8012daa:	60b9      	str	r1, [r7, #8]
 8012dac:	607a      	str	r2, [r7, #4]
  mg_sha256_ctx ctx;
  mg_sha256_init(&ctx);
 8012dae:	f107 0310 	add.w	r3, r7, #16
 8012db2:	4618      	mov	r0, r3
 8012db4:	f7ff fc40 	bl	8012638 <mg_sha256_init>
  mg_sha256_update(&ctx, data, datasz);
 8012db8:	f107 0310 	add.w	r3, r7, #16
 8012dbc:	687a      	ldr	r2, [r7, #4]
 8012dbe:	68b9      	ldr	r1, [r7, #8]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7ff fe7d 	bl	8012ac0 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8012dc6:	f107 0310 	add.w	r3, r7, #16
 8012dca:	4619      	mov	r1, r3
 8012dcc:	68f8      	ldr	r0, [r7, #12]
 8012dce:	f7ff feb0 	bl	8012b32 <mg_sha256_final>
}
 8012dd2:	bf00      	nop
 8012dd4:	3780      	adds	r7, #128	@ 0x80
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}

08012dda <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 8012dda:	b590      	push	{r4, r7, lr}
 8012ddc:	b0d3      	sub	sp, #332	@ 0x14c
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8012de4:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8012de8:	6020      	str	r0, [r4, #0]
 8012dea:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8012dee:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8012df2:	6001      	str	r1, [r0, #0]
 8012df4:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8012df8:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8012dfc:	600a      	str	r2, [r1, #0]
 8012dfe:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8012e02:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8012e06:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 8012e08:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8012e0c:	2240      	movs	r2, #64	@ 0x40
 8012e0e:	2100      	movs	r1, #0
 8012e10:	4618      	mov	r0, r3
 8012e12:	f010 fb80 	bl	8023516 <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 8012e16:	f107 0310 	add.w	r3, r7, #16
 8012e1a:	2240      	movs	r2, #64	@ 0x40
 8012e1c:	2136      	movs	r1, #54	@ 0x36
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f010 fb79 	bl	8023516 <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 8012e24:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012e28:	2240      	movs	r2, #64	@ 0x40
 8012e2a:	215c      	movs	r1, #92	@ 0x5c
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f010 fb72 	bl	8023516 <memset>
  if (keysz < 64) {
 8012e32:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012e36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8012e3e:	d815      	bhi.n	8012e6c <mg_hmac_sha256+0x92>
    if (keysz > 0) memmove(k, key, keysz);
 8012e40:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012e44:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d029      	beq.n	8012ea2 <mg_hmac_sha256+0xc8>
 8012e4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012e52:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8012e56:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012e5a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8012e5e:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8012e62:	6812      	ldr	r2, [r2, #0]
 8012e64:	6819      	ldr	r1, [r3, #0]
 8012e66:	f010 fb3c 	bl	80234e2 <memmove>
 8012e6a:	e01a      	b.n	8012ea2 <mg_hmac_sha256+0xc8>
  } else {
    mg_sha256_init(&ctx);
 8012e6c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7ff fbe1 	bl	8012638 <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 8012e76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012e7a:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8012e7e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012e82:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8012e86:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8012e8a:	6812      	ldr	r2, [r2, #0]
 8012e8c:	6819      	ldr	r1, [r3, #0]
 8012e8e:	f7ff fe17 	bl	8012ac0 <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 8012e92:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8012e96:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8012e9a:	4611      	mov	r1, r2
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7ff fe48 	bl	8012b32 <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8012ea8:	e032      	b.n	8012f10 <mg_hmac_sha256+0x136>
    i_pad[i] ^= k[i];
 8012eaa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012eae:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8012eb2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012eb6:	4413      	add	r3, r2
 8012eb8:	781a      	ldrb	r2, [r3, #0]
 8012eba:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8012ebe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012ec2:	440b      	add	r3, r1
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	4053      	eors	r3, r2
 8012ec8:	b2d9      	uxtb	r1, r3
 8012eca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012ece:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8012ed2:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012ed6:	4413      	add	r3, r2
 8012ed8:	460a      	mov	r2, r1
 8012eda:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 8012edc:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012ee0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012ee4:	4413      	add	r3, r2
 8012ee6:	781a      	ldrb	r2, [r3, #0]
 8012ee8:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8012eec:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012ef0:	440b      	add	r3, r1
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	4053      	eors	r3, r2
 8012ef6:	b2d9      	uxtb	r1, r3
 8012ef8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012efc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012f00:	4413      	add	r3, r2
 8012f02:	460a      	mov	r2, r1
 8012f04:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 8012f06:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012f0a:	3301      	adds	r3, #1
 8012f0c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8012f10:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012f14:	2b3f      	cmp	r3, #63	@ 0x3f
 8012f16:	d9c8      	bls.n	8012eaa <mg_hmac_sha256+0xd0>
  }
  mg_sha256_init(&ctx);
 8012f18:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7ff fb8b 	bl	8012638 <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 8012f22:	f107 0110 	add.w	r1, r7, #16
 8012f26:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8012f2a:	2240      	movs	r2, #64	@ 0x40
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7ff fdc7 	bl	8012ac0 <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 8012f32:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f36:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8012f3a:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8012f3e:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8012f42:	6819      	ldr	r1, [r3, #0]
 8012f44:	f7ff fdbc 	bl	8012ac0 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8012f48:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8012f4c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8012f54:	4611      	mov	r1, r2
 8012f56:	6818      	ldr	r0, [r3, #0]
 8012f58:	f7ff fdeb 	bl	8012b32 <mg_sha256_final>
  mg_sha256_init(&ctx);
 8012f5c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8012f60:	4618      	mov	r0, r3
 8012f62:	f7ff fb69 	bl	8012638 <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 8012f66:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8012f6a:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8012f6e:	2240      	movs	r2, #64	@ 0x40
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7ff fda5 	bl	8012ac0 <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 8012f76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f7a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8012f7e:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8012f82:	2220      	movs	r2, #32
 8012f84:	6819      	ldr	r1, [r3, #0]
 8012f86:	f7ff fd9b 	bl	8012ac0 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8012f8a:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8012f8e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f92:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8012f96:	4611      	mov	r1, r2
 8012f98:	6818      	ldr	r0, [r3, #0]
 8012f9a:	f7ff fdca 	bl	8012b32 <mg_sha256_final>
}
 8012f9e:	bf00      	nop
 8012fa0:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd90      	pop	{r4, r7, pc}

08012fa8 <mg_sha384_transform>:
    0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,
    0x5fcb6fab3ad6faec, 0x6c44198c4a475817};

static void mg_sha384_transform(mg_sha384_ctx *ctx, const uint8_t data[]) {
 8012fa8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8012fac:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8012fb6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8012fba:	6018      	str	r0, [r3, #0]
 8012fbc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8012fc0:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012fc4:	6019      	str	r1, [r3, #0]
  uint64_t m[80];
  uint64_t a, b, c, d, e, f, g, h;
  int i, j;

  for (i = 0, j = 0; i < 16; ++i, j += 8)
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8012fcc:	2300      	movs	r3, #0
 8012fce:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8012fd2:	e113      	b.n	80131fc <mg_sha384_transform+0x254>
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8012fd4:	f8d7 2460 	ldr.w	r2, [r7, #1120]	@ 0x460
 8012fd8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8012fdc:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	4413      	add	r3, r2
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	2200      	movs	r2, #0
 8012fea:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8012fee:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8012ff2:	f04f 0000 	mov.w	r0, #0
 8012ff6:	f04f 0100 	mov.w	r1, #0
 8012ffa:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8012ffe:	0619      	lsls	r1, r3, #24
 8013000:	2000      	movs	r0, #0
 8013002:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8013006:	1c5a      	adds	r2, r3, #1
 8013008:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801300c:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	4413      	add	r3, r2
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	b2db      	uxtb	r3, r3
 8013018:	2200      	movs	r2, #0
 801301a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 801301e:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8013022:	f04f 0200 	mov.w	r2, #0
 8013026:	f04f 0300 	mov.w	r3, #0
 801302a:	f8d7 6190 	ldr.w	r6, [r7, #400]	@ 0x190
 801302e:	0433      	lsls	r3, r6, #16
 8013030:	2200      	movs	r2, #0
 8013032:	ea40 0602 	orr.w	r6, r0, r2
 8013036:	f8c7 61b0 	str.w	r6, [r7, #432]	@ 0x1b0
 801303a:	430b      	orrs	r3, r1
 801303c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8013040:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8013044:	1c9a      	adds	r2, r3, #2
 8013046:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801304a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	4413      	add	r3, r2
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	b2db      	uxtb	r3, r3
 8013056:	2200      	movs	r2, #0
 8013058:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 801305c:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8013060:	f04f 0200 	mov.w	r2, #0
 8013064:	f04f 0300 	mov.w	r3, #0
 8013068:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 801306c:	020b      	lsls	r3, r1, #8
 801306e:	2200      	movs	r2, #0
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8013070:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8013074:	4311      	orrs	r1, r2
 8013076:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 801307a:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 801307e:	430b      	orrs	r3, r1
 8013080:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8013084:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8013088:	1cda      	adds	r2, r3, #3
 801308a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801308e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4413      	add	r3, r2
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	b2db      	uxtb	r3, r3
 801309a:	2200      	movs	r2, #0
 801309c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80130a0:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80130a4:	f04f 0200 	mov.w	r2, #0
 80130a8:	f04f 0300 	mov.w	r3, #0
 80130ac:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 80130b0:	000b      	movs	r3, r1
 80130b2:	2200      	movs	r2, #0
 80130b4:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 80130b8:	4311      	orrs	r1, r2
 80130ba:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 80130be:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 80130c2:	430b      	orrs	r3, r1
 80130c4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 80130c8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80130cc:	1d1a      	adds	r2, r3, #4
 80130ce:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80130d2:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4413      	add	r3, r2
 80130da:	781b      	ldrb	r3, [r3, #0]
 80130dc:	b2db      	uxtb	r3, r3
 80130de:	2200      	movs	r2, #0
 80130e0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80130e4:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80130e8:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	@ 0x178
 80130ec:	460b      	mov	r3, r1
 80130ee:	0a1b      	lsrs	r3, r3, #8
 80130f0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80130f4:	460b      	mov	r3, r1
 80130f6:	061b      	lsls	r3, r3, #24
 80130f8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 80130fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8013100:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8013104:	4602      	mov	r2, r0
 8013106:	ea43 0a02 	orr.w	sl, r3, r2
 801310a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801310e:	460a      	mov	r2, r1
 8013110:	ea43 0b02 	orr.w	fp, r3, r2
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8013114:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8013118:	1d5a      	adds	r2, r3, #5
 801311a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801311e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	4413      	add	r3, r2
 8013126:	781b      	ldrb	r3, [r3, #0]
 8013128:	b2db      	uxtb	r3, r3
 801312a:	2200      	movs	r2, #0
 801312c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8013130:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8013134:	f04f 0200 	mov.w	r2, #0
 8013138:	f04f 0300 	mov.w	r3, #0
 801313c:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 8013140:	040b      	lsls	r3, r1, #16
 8013142:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8013146:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 801314a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 801314e:	040a      	lsls	r2, r1, #16
 8013150:	ea4a 0802 	orr.w	r8, sl, r2
 8013154:	ea4b 0903 	orr.w	r9, fp, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8013158:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 801315c:	1d9a      	adds	r2, r3, #6
 801315e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013162:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4413      	add	r3, r2
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	b2db      	uxtb	r3, r3
 801316e:	2200      	movs	r2, #0
 8013170:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8013174:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8013178:	f04f 0200 	mov.w	r2, #0
 801317c:	f04f 0300 	mov.w	r3, #0
 8013180:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8013184:	020b      	lsls	r3, r1, #8
 8013186:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 801318a:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 801318e:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8013192:	020a      	lsls	r2, r1, #8
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8013194:	ea48 0402 	orr.w	r4, r8, r2
 8013198:	ea49 0503 	orr.w	r5, r9, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 801319c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80131a0:	1dda      	adds	r2, r3, #7
 80131a2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80131a6:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	4413      	add	r3, r2
 80131ae:	781b      	ldrb	r3, [r3, #0]
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	2200      	movs	r2, #0
 80131b4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80131b8:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80131bc:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80131c0:	460b      	mov	r3, r1
 80131c2:	4323      	orrs	r3, r4
 80131c4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80131c8:	4613      	mov	r3, r2
 80131ca:	432b      	orrs	r3, r5
 80131cc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 80131d0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80131d4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80131d8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80131dc:	00db      	lsls	r3, r3, #3
 80131de:	4413      	add	r3, r2
 80131e0:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 80131e4:	e9c3 1200 	strd	r1, r2, [r3]
  for (i = 0, j = 0; i < 16; ++i, j += 8)
 80131e8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80131ec:	3301      	adds	r3, #1
 80131ee:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80131f2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80131f6:	3308      	adds	r3, #8
 80131f8:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 80131fc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013200:	2b0f      	cmp	r3, #15
 8013202:	f77f aee7 	ble.w	8012fd4 <mg_sha384_transform+0x2c>
  for (; i < 80; ++i)
 8013206:	e0f8      	b.n	80133fa <mg_sha384_transform+0x452>
    m[i] = sig164(m[i - 2]) + m[i - 7] + sig064(m[i - 15]) + m[i - 16];
 8013208:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801320c:	1e99      	subs	r1, r3, #2
 801320e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013212:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013216:	00cb      	lsls	r3, r1, #3
 8013218:	4413      	add	r3, r2
 801321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321e:	0358      	lsls	r0, r3, #13
 8013220:	0cd1      	lsrs	r1, r2, #19
 8013222:	4301      	orrs	r1, r0
 8013224:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 8013228:	0351      	lsls	r1, r2, #13
 801322a:	0cdb      	lsrs	r3, r3, #19
 801322c:	430b      	orrs	r3, r1
 801322e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8013232:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013236:	1e99      	subs	r1, r3, #2
 8013238:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801323c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013240:	00cb      	lsls	r3, r1, #3
 8013242:	4413      	add	r3, r2
 8013244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013248:	0f50      	lsrs	r0, r2, #29
 801324a:	00d9      	lsls	r1, r3, #3
 801324c:	4301      	orrs	r1, r0
 801324e:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8013252:	0f59      	lsrs	r1, r3, #29
 8013254:	00d3      	lsls	r3, r2, #3
 8013256:	430b      	orrs	r3, r1
 8013258:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 801325c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8013260:	4623      	mov	r3, r4
 8013262:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8013266:	4602      	mov	r2, r0
 8013268:	4053      	eors	r3, r2
 801326a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 801326e:	462b      	mov	r3, r5
 8013270:	460a      	mov	r2, r1
 8013272:	4053      	eors	r3, r2
 8013274:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8013278:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801327c:	1e99      	subs	r1, r3, #2
 801327e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013282:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013286:	00cb      	lsls	r3, r1, #3
 8013288:	4413      	add	r3, r2
 801328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328e:	f04f 0000 	mov.w	r0, #0
 8013292:	f04f 0100 	mov.w	r1, #0
 8013296:	0990      	lsrs	r0, r2, #6
 8013298:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 801329c:	0999      	lsrs	r1, r3, #6
 801329e:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 80132a2:	4623      	mov	r3, r4
 80132a4:	4043      	eors	r3, r0
 80132a6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80132aa:	462b      	mov	r3, r5
 80132ac:	404b      	eors	r3, r1
 80132ae:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80132b2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80132b6:	1fd9      	subs	r1, r3, #7
 80132b8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80132bc:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80132c0:	00cb      	lsls	r3, r1, #3
 80132c2:	4413      	add	r3, r2
 80132c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c8:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 80132cc:	4621      	mov	r1, r4
 80132ce:	1889      	adds	r1, r1, r2
 80132d0:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 80132d4:	4629      	mov	r1, r5
 80132d6:	eb41 0303 	adc.w	r3, r1, r3
 80132da:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80132de:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80132e2:	f1a3 010f 	sub.w	r1, r3, #15
 80132e6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80132ea:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80132ee:	00cb      	lsls	r3, r1, #3
 80132f0:	4413      	add	r3, r2
 80132f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f6:	07d8      	lsls	r0, r3, #31
 80132f8:	0851      	lsrs	r1, r2, #1
 80132fa:	4301      	orrs	r1, r0
 80132fc:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8013300:	07d1      	lsls	r1, r2, #31
 8013302:	085b      	lsrs	r3, r3, #1
 8013304:	430b      	orrs	r3, r1
 8013306:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801330a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801330e:	f1a3 010f 	sub.w	r1, r3, #15
 8013312:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013316:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 801331a:	00cb      	lsls	r3, r1, #3
 801331c:	4413      	add	r3, r2
 801331e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013322:	0618      	lsls	r0, r3, #24
 8013324:	0a11      	lsrs	r1, r2, #8
 8013326:	4301      	orrs	r1, r0
 8013328:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 801332c:	0611      	lsls	r1, r2, #24
 801332e:	0a1b      	lsrs	r3, r3, #8
 8013330:	430b      	orrs	r3, r1
 8013332:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8013336:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 801333a:	4623      	mov	r3, r4
 801333c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8013340:	4602      	mov	r2, r0
 8013342:	4053      	eors	r3, r2
 8013344:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8013348:	462b      	mov	r3, r5
 801334a:	460a      	mov	r2, r1
 801334c:	4053      	eors	r3, r2
 801334e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8013352:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013356:	f1a3 010f 	sub.w	r1, r3, #15
 801335a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801335e:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013362:	00cb      	lsls	r3, r1, #3
 8013364:	4413      	add	r3, r2
 8013366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336a:	f04f 0000 	mov.w	r0, #0
 801336e:	f04f 0100 	mov.w	r1, #0
 8013372:	09d0      	lsrs	r0, r2, #7
 8013374:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8013378:	09d9      	lsrs	r1, r3, #7
 801337a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 801337e:	4623      	mov	r3, r4
 8013380:	4043      	eors	r3, r0
 8013382:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8013386:	462b      	mov	r3, r5
 8013388:	404b      	eors	r3, r1
 801338a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 801338e:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 8013392:	4623      	mov	r3, r4
 8013394:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8013398:	4602      	mov	r2, r0
 801339a:	189b      	adds	r3, r3, r2
 801339c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80133a0:	462b      	mov	r3, r5
 80133a2:	460a      	mov	r2, r1
 80133a4:	4153      	adcs	r3, r2
 80133a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80133aa:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80133ae:	f1a3 0110 	sub.w	r1, r3, #16
 80133b2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80133b6:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80133ba:	00cb      	lsls	r3, r1, #3
 80133bc:	4413      	add	r3, r2
 80133be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c2:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 80133c6:	4621      	mov	r1, r4
 80133c8:	1889      	adds	r1, r1, r2
 80133ca:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 80133ce:	4629      	mov	r1, r5
 80133d0:	eb41 0303 	adc.w	r3, r1, r3
 80133d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80133d8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80133dc:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80133e0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80133e4:	00db      	lsls	r3, r3, #3
 80133e6:	4413      	add	r3, r2
 80133e8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80133ec:	e9c3 1200 	strd	r1, r2, [r3]
  for (; i < 80; ++i)
 80133f0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80133f4:	3301      	adds	r3, #1
 80133f6:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80133fa:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80133fe:	2b4f      	cmp	r3, #79	@ 0x4f
 8013400:	f77f af02 	ble.w	8013208 <mg_sha384_transform+0x260>

  a = ctx->state[0];
 8013404:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013408:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013412:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 8013416:	e9c1 2300 	strd	r2, r3, [r1]
  b = ctx->state[1];
 801341a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801341e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013428:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 801342c:	e9c1 2300 	strd	r2, r3, [r1]
  c = ctx->state[2];
 8013430:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013434:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801343e:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8013442:	e9c1 2300 	strd	r2, r3, [r1]
  d = ctx->state[3];
 8013446:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801344a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8013454:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8013458:	e9c1 2300 	strd	r2, r3, [r1]
  e = ctx->state[4];
 801345c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013460:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801346a:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 801346e:	e9c1 2300 	strd	r2, r3, [r1]
  f = ctx->state[5];
 8013472:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013476:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8013480:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 8013484:	e9c1 2300 	strd	r2, r3, [r1]
  g = ctx->state[6];
 8013488:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801348c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8013496:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 801349a:	e9c1 2300 	strd	r2, r3, [r1]
  h = ctx->state[7];
 801349e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80134a2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80134ac:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 80134b0:	e9c1 2300 	strd	r2, r3, [r1]

  for (i = 0; i < 80; ++i) {
 80134b4:	2300      	movs	r3, #0
 80134b6:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80134ba:	e1c3      	b.n	8013844 <mg_sha384_transform+0x89c>
    uint64_t t1 = h + ep164(e) + ch(e, f, g) + mg_sha256_k2[i] + m[i];
 80134bc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80134c0:	049a      	lsls	r2, r3, #18
 80134c2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80134c6:	0b9b      	lsrs	r3, r3, #14
 80134c8:	4313      	orrs	r3, r2
 80134ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80134ce:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80134d2:	049a      	lsls	r2, r3, #18
 80134d4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80134d8:	0b9b      	lsrs	r3, r3, #14
 80134da:	4313      	orrs	r3, r2
 80134dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80134e0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80134e4:	039a      	lsls	r2, r3, #14
 80134e6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80134ea:	0c9b      	lsrs	r3, r3, #18
 80134ec:	4313      	orrs	r3, r2
 80134ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80134f2:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80134f6:	039a      	lsls	r2, r3, #14
 80134f8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80134fc:	0c9b      	lsrs	r3, r3, #18
 80134fe:	4313      	orrs	r3, r2
 8013500:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8013504:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8013508:	4623      	mov	r3, r4
 801350a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 801350e:	4602      	mov	r2, r0
 8013510:	4053      	eors	r3, r2
 8013512:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8013516:	462b      	mov	r3, r5
 8013518:	460a      	mov	r2, r1
 801351a:	4053      	eors	r3, r2
 801351c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8013520:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8013524:	0a5a      	lsrs	r2, r3, #9
 8013526:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 801352a:	05db      	lsls	r3, r3, #23
 801352c:	4313      	orrs	r3, r2
 801352e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8013532:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8013536:	0a5a      	lsrs	r2, r3, #9
 8013538:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 801353c:	05db      	lsls	r3, r3, #23
 801353e:	4313      	orrs	r3, r2
 8013540:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8013544:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8013548:	4623      	mov	r3, r4
 801354a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 801354e:	4602      	mov	r2, r0
 8013550:	4053      	eors	r3, r2
 8013552:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8013556:	462b      	mov	r3, r5
 8013558:	460a      	mov	r2, r1
 801355a:	4053      	eors	r3, r2
 801355c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8013560:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8013564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013568:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 801356c:	4621      	mov	r1, r4
 801356e:	1889      	adds	r1, r1, r2
 8013570:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 8013574:	4629      	mov	r1, r5
 8013576:	eb41 0303 	adc.w	r3, r1, r3
 801357a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801357e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8013582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013586:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 801358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358e:	ea00 0402 	and.w	r4, r0, r2
 8013592:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 8013596:	400b      	ands	r3, r1
 8013598:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801359c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80135a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a4:	43d1      	mvns	r1, r2
 80135a6:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80135aa:	43db      	mvns	r3, r3
 80135ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80135b0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80135b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80135bc:	4621      	mov	r1, r4
 80135be:	4011      	ands	r1, r2
 80135c0:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80135c4:	4629      	mov	r1, r5
 80135c6:	400b      	ands	r3, r1
 80135c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80135cc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80135d0:	4623      	mov	r3, r4
 80135d2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80135d6:	4602      	mov	r2, r0
 80135d8:	4053      	eors	r3, r2
 80135da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80135de:	462b      	mov	r3, r5
 80135e0:	460a      	mov	r2, r1
 80135e2:	4053      	eors	r3, r2
 80135e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80135e8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80135ec:	4623      	mov	r3, r4
 80135ee:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80135f2:	4602      	mov	r2, r0
 80135f4:	189b      	adds	r3, r3, r2
 80135f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80135fa:	462b      	mov	r3, r5
 80135fc:	460a      	mov	r2, r1
 80135fe:	4153      	adcs	r3, r2
 8013600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8013604:	4a8e      	ldr	r2, [pc, #568]	@ (8013840 <mg_sha384_transform+0x898>)
 8013606:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801360a:	00db      	lsls	r3, r3, #3
 801360c:	4413      	add	r3, r2
 801360e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013612:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8013616:	4621      	mov	r1, r4
 8013618:	1889      	adds	r1, r1, r2
 801361a:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 801361e:	4629      	mov	r1, r5
 8013620:	eb41 0303 	adc.w	r3, r1, r3
 8013624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013628:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801362c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013630:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013634:	00db      	lsls	r3, r3, #3
 8013636:	4413      	add	r3, r2
 8013638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801363c:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8013640:	4621      	mov	r1, r4
 8013642:	1889      	adds	r1, r1, r2
 8013644:	61b9      	str	r1, [r7, #24]
 8013646:	4629      	mov	r1, r5
 8013648:	eb41 0303 	adc.w	r3, r1, r3
 801364c:	61fb      	str	r3, [r7, #28]
 801364e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013652:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8013656:	e9c2 3400 	strd	r3, r4, [r2]
    uint64_t t2 = ep064(a) + maj(a, b, c);
 801365a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 801365e:	011a      	lsls	r2, r3, #4
 8013660:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8013664:	0f1b      	lsrs	r3, r3, #28
 8013666:	4313      	orrs	r3, r2
 8013668:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801366c:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8013670:	011a      	lsls	r2, r3, #4
 8013672:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8013676:	0f1b      	lsrs	r3, r3, #28
 8013678:	4313      	orrs	r3, r2
 801367a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801367e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8013682:	089a      	lsrs	r2, r3, #2
 8013684:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8013688:	079b      	lsls	r3, r3, #30
 801368a:	4313      	orrs	r3, r2
 801368c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013690:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8013694:	089a      	lsrs	r2, r3, #2
 8013696:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 801369a:	079b      	lsls	r3, r3, #30
 801369c:	4313      	orrs	r3, r2
 801369e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80136a2:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 80136a6:	4623      	mov	r3, r4
 80136a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80136ac:	4602      	mov	r2, r0
 80136ae:	4053      	eors	r3, r2
 80136b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80136b4:	462b      	mov	r3, r5
 80136b6:	460a      	mov	r2, r1
 80136b8:	4053      	eors	r3, r2
 80136ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80136be:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 80136c2:	09da      	lsrs	r2, r3, #7
 80136c4:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80136c8:	065b      	lsls	r3, r3, #25
 80136ca:	4313      	orrs	r3, r2
 80136cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80136d0:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80136d4:	09da      	lsrs	r2, r3, #7
 80136d6:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 80136da:	065b      	lsls	r3, r3, #25
 80136dc:	4313      	orrs	r3, r2
 80136de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80136e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80136e6:	4623      	mov	r3, r4
 80136e8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80136ec:	4602      	mov	r2, r0
 80136ee:	4053      	eors	r3, r2
 80136f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80136f4:	462b      	mov	r3, r5
 80136f6:	460a      	mov	r2, r1
 80136f8:	4053      	eors	r3, r2
 80136fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80136fe:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8013702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013706:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 801370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370e:	ea80 0402 	eor.w	r4, r0, r2
 8013712:	67bc      	str	r4, [r7, #120]	@ 0x78
 8013714:	404b      	eors	r3, r1
 8013716:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013718:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 801371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013720:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8013724:	4621      	mov	r1, r4
 8013726:	4011      	ands	r1, r2
 8013728:	6739      	str	r1, [r7, #112]	@ 0x70
 801372a:	4629      	mov	r1, r5
 801372c:	400b      	ands	r3, r1
 801372e:	677b      	str	r3, [r7, #116]	@ 0x74
 8013730:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8013734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013738:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 801373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013740:	ea00 0402 	and.w	r4, r0, r2
 8013744:	66bc      	str	r4, [r7, #104]	@ 0x68
 8013746:	400b      	ands	r3, r1
 8013748:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801374a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 801374e:	4623      	mov	r3, r4
 8013750:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8013754:	4602      	mov	r2, r0
 8013756:	4053      	eors	r3, r2
 8013758:	663b      	str	r3, [r7, #96]	@ 0x60
 801375a:	462b      	mov	r3, r5
 801375c:	460a      	mov	r2, r1
 801375e:	4053      	eors	r3, r2
 8013760:	667b      	str	r3, [r7, #100]	@ 0x64
 8013762:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8013766:	4623      	mov	r3, r4
 8013768:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801376c:	4602      	mov	r2, r0
 801376e:	189b      	adds	r3, r3, r2
 8013770:	613b      	str	r3, [r7, #16]
 8013772:	462b      	mov	r3, r5
 8013774:	460a      	mov	r2, r1
 8013776:	4153      	adcs	r3, r2
 8013778:	617b      	str	r3, [r7, #20]
 801377a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801377e:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8013782:	e9c2 3400 	strd	r3, r4, [r2]
    h = g;
 8013786:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801378a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378e:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8013792:	e9c1 2300 	strd	r2, r3, [r1]
    g = f;
 8013796:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 801379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801379e:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 80137a2:	e9c1 2300 	strd	r2, r3, [r1]
    f = e;
 80137a6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80137aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137ae:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 80137b2:	e9c1 2300 	strd	r2, r3, [r1]
    e = d + t1;
 80137b6:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80137ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80137be:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80137c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c6:	1884      	adds	r4, r0, r2
 80137c8:	60bc      	str	r4, [r7, #8]
 80137ca:	eb41 0303 	adc.w	r3, r1, r3
 80137ce:	60fb      	str	r3, [r7, #12]
 80137d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80137d4:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 80137d8:	e9c2 3400 	strd	r3, r4, [r2]
    d = c;
 80137dc:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80137e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137e4:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 80137e8:	e9c1 2300 	strd	r2, r3, [r1]
    c = b;
 80137ec:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80137f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137f4:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 80137f8:	e9c1 2300 	strd	r2, r3, [r1]
    b = a;
 80137fc:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8013800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013804:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 8013808:	e9c1 2300 	strd	r2, r3, [r1]
    a = t1 + t2;
 801380c:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8013810:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013814:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8013818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801381c:	1884      	adds	r4, r0, r2
 801381e:	603c      	str	r4, [r7, #0]
 8013820:	eb41 0303 	adc.w	r3, r1, r3
 8013824:	607b      	str	r3, [r7, #4]
 8013826:	e9d7 3400 	ldrd	r3, r4, [r7]
 801382a:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 801382e:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 80; ++i) {
 8013832:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013836:	3301      	adds	r3, #1
 8013838:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 801383c:	e002      	b.n	8013844 <mg_sha384_transform+0x89c>
 801383e:	bf00      	nop
 8013840:	080279e8 	.word	0x080279e8
 8013844:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013848:	2b4f      	cmp	r3, #79	@ 0x4f
 801384a:	f77f ae37 	ble.w	80134bc <mg_sha384_transform+0x514>
  }

  ctx->state[0] += a;
 801384e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013852:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	e9d3 0100 	ldrd	r0, r1, [r3]
 801385c:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8013860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013864:	1884      	adds	r4, r0, r2
 8013866:	65bc      	str	r4, [r7, #88]	@ 0x58
 8013868:	eb41 0303 	adc.w	r3, r1, r3
 801386c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801386e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013872:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801387c:	e9c3 1200 	strd	r1, r2, [r3]
  ctx->state[1] += b;
 8013880:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013884:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 801388e:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8013892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013896:	1884      	adds	r4, r0, r2
 8013898:	653c      	str	r4, [r7, #80]	@ 0x50
 801389a:	eb41 0303 	adc.w	r3, r1, r3
 801389e:	657b      	str	r3, [r7, #84]	@ 0x54
 80138a0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80138a4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80138ae:	e9c3 1202 	strd	r1, r2, [r3, #8]
  ctx->state[2] += c;
 80138b2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80138b6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80138c0:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80138c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c8:	1884      	adds	r4, r0, r2
 80138ca:	64bc      	str	r4, [r7, #72]	@ 0x48
 80138cc:	eb41 0303 	adc.w	r3, r1, r3
 80138d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80138d2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80138d6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80138e0:	e9c3 1204 	strd	r1, r2, [r3, #16]
  ctx->state[3] += d;
 80138e4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80138e8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80138f2:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80138f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fa:	1884      	adds	r4, r0, r2
 80138fc:	643c      	str	r4, [r7, #64]	@ 0x40
 80138fe:	eb41 0303 	adc.w	r3, r1, r3
 8013902:	647b      	str	r3, [r7, #68]	@ 0x44
 8013904:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013908:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8013912:	e9c3 1206 	strd	r1, r2, [r3, #24]
  ctx->state[4] += e;
 8013916:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801391a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8013924:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8013928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801392c:	1884      	adds	r4, r0, r2
 801392e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8013930:	eb41 0303 	adc.w	r3, r1, r3
 8013934:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013936:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801393a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8013944:	e9c3 1208 	strd	r1, r2, [r3, #32]
  ctx->state[5] += f;
 8013948:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801394c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8013956:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 801395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395e:	1884      	adds	r4, r0, r2
 8013960:	633c      	str	r4, [r7, #48]	@ 0x30
 8013962:	eb41 0303 	adc.w	r3, r1, r3
 8013966:	637b      	str	r3, [r7, #52]	@ 0x34
 8013968:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801396c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8013976:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
  ctx->state[6] += g;
 801397a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801397e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8013988:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013990:	1884      	adds	r4, r0, r2
 8013992:	62bc      	str	r4, [r7, #40]	@ 0x28
 8013994:	eb41 0303 	adc.w	r3, r1, r3
 8013998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801399a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801399e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80139a8:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
  ctx->state[7] += h;
 80139ac:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80139b0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80139ba:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80139be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c2:	1884      	adds	r4, r0, r2
 80139c4:	623c      	str	r4, [r7, #32]
 80139c6:	eb41 0303 	adc.w	r3, r1, r3
 80139ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80139cc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80139d0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80139da:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
}
 80139de:	bf00      	nop
 80139e0:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 80139e4:	46bd      	mov	sp, r7
 80139e6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80139ea:	4770      	bx	lr
 80139ec:	0000      	movs	r0, r0
	...

080139f0 <mg_sha384_init>:

void mg_sha384_init(mg_sha384_ctx *ctx) {
 80139f0:	b480      	push	{r7}
 80139f2:	b083      	sub	sp, #12
 80139f4:	af00      	add	r7, sp, #0
 80139f6:	6078      	str	r0, [r7, #4]
  ctx->datalen = 0;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2200      	movs	r2, #0
 80139fc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  ctx->bitlen[0] = 0;
 8013a00:	6879      	ldr	r1, [r7, #4]
 8013a02:	f04f 0200 	mov.w	r2, #0
 8013a06:	f04f 0300 	mov.w	r3, #0
 8013a0a:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
  ctx->bitlen[1] = 0;
 8013a0e:	6879      	ldr	r1, [r7, #4]
 8013a10:	f04f 0200 	mov.w	r2, #0
 8013a14:	f04f 0300 	mov.w	r3, #0
 8013a18:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
  ctx->state[0] = 0xcbbb9d5dc1059ed8;
 8013a1c:	6879      	ldr	r1, [r7, #4]
 8013a1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8013a88 <mg_sha384_init+0x98>)
 8013a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a24:	e9c1 2300 	strd	r2, r3, [r1]
  ctx->state[1] = 0x629a292a367cd507;
 8013a28:	6879      	ldr	r1, [r7, #4]
 8013a2a:	a319      	add	r3, pc, #100	@ (adr r3, 8013a90 <mg_sha384_init+0xa0>)
 8013a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a30:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ctx->state[2] = 0x9159015a3070dd17;
 8013a34:	6879      	ldr	r1, [r7, #4]
 8013a36:	a318      	add	r3, pc, #96	@ (adr r3, 8013a98 <mg_sha384_init+0xa8>)
 8013a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
  ctx->state[3] = 0x152fecd8f70e5939;
 8013a40:	6879      	ldr	r1, [r7, #4]
 8013a42:	a317      	add	r3, pc, #92	@ (adr r3, 8013aa0 <mg_sha384_init+0xb0>)
 8013a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a48:	e9c1 2306 	strd	r2, r3, [r1, #24]
  ctx->state[4] = 0x67332667ffc00b31;
 8013a4c:	6879      	ldr	r1, [r7, #4]
 8013a4e:	a316      	add	r3, pc, #88	@ (adr r3, 8013aa8 <mg_sha384_init+0xb8>)
 8013a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a54:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[5] = 0x8eb44a8768581511;
 8013a58:	6879      	ldr	r1, [r7, #4]
 8013a5a:	a315      	add	r3, pc, #84	@ (adr r3, 8013ab0 <mg_sha384_init+0xc0>)
 8013a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a60:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  ctx->state[6] = 0xdb0c2e0d64f98fa7;
 8013a64:	6879      	ldr	r1, [r7, #4]
 8013a66:	a314      	add	r3, pc, #80	@ (adr r3, 8013ab8 <mg_sha384_init+0xc8>)
 8013a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a6c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  ctx->state[7] = 0x47b5481dbefa4fa4;
 8013a70:	6879      	ldr	r1, [r7, #4]
 8013a72:	a313      	add	r3, pc, #76	@ (adr r3, 8013ac0 <mg_sha384_init+0xd0>)
 8013a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a78:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8013a7c:	bf00      	nop
 8013a7e:	370c      	adds	r7, #12
 8013a80:	46bd      	mov	sp, r7
 8013a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a86:	4770      	bx	lr
 8013a88:	c1059ed8 	.word	0xc1059ed8
 8013a8c:	cbbb9d5d 	.word	0xcbbb9d5d
 8013a90:	367cd507 	.word	0x367cd507
 8013a94:	629a292a 	.word	0x629a292a
 8013a98:	3070dd17 	.word	0x3070dd17
 8013a9c:	9159015a 	.word	0x9159015a
 8013aa0:	f70e5939 	.word	0xf70e5939
 8013aa4:	152fecd8 	.word	0x152fecd8
 8013aa8:	ffc00b31 	.word	0xffc00b31
 8013aac:	67332667 	.word	0x67332667
 8013ab0:	68581511 	.word	0x68581511
 8013ab4:	8eb44a87 	.word	0x8eb44a87
 8013ab8:	64f98fa7 	.word	0x64f98fa7
 8013abc:	db0c2e0d 	.word	0xdb0c2e0d
 8013ac0:	befa4fa4 	.word	0xbefa4fa4
 8013ac4:	47b5481d 	.word	0x47b5481d

08013ac8 <mg_sha384_update>:

void mg_sha384_update(mg_sha384_ctx *ctx, const uint8_t *data, size_t len) {
 8013ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013acc:	b086      	sub	sp, #24
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	60f8      	str	r0, [r7, #12]
 8013ad2:	60b9      	str	r1, [r7, #8]
 8013ad4:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; ++i) {
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	617b      	str	r3, [r7, #20]
 8013ada:	e040      	b.n	8013b5e <mg_sha384_update+0x96>
    ctx->buffer[ctx->datalen] = data[i];
 8013adc:	68ba      	ldr	r2, [r7, #8]
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	441a      	add	r2, r3
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013ae8:	7811      	ldrb	r1, [r2, #0]
 8013aea:	68fa      	ldr	r2, [r7, #12]
 8013aec:	4413      	add	r3, r2
 8013aee:	460a      	mov	r2, r1
 8013af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ctx->datalen++;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013afa:	1c5a      	adds	r2, r3, #1
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (ctx->datalen == 128) {
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013b08:	2b80      	cmp	r3, #128	@ 0x80
 8013b0a:	d125      	bne.n	8013b58 <mg_sha384_update+0x90>
      mg_sha384_transform(ctx, ctx->buffer);
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	3340      	adds	r3, #64	@ 0x40
 8013b10:	4619      	mov	r1, r3
 8013b12:	68f8      	ldr	r0, [r7, #12]
 8013b14:	f7ff fa48 	bl	8012fa8 <mg_sha384_transform>
      ctx->bitlen[1] += 1024;
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013b1e:	f512 6480 	adds.w	r4, r2, #1024	@ 0x400
 8013b22:	f143 0500 	adc.w	r5, r3, #0
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	e9c3 4532 	strd	r4, r5, [r3, #200]	@ 0xc8
      if (ctx->bitlen[1] < 1024) ctx->bitlen[0]++;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013b32:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8013b36:	f173 0300 	sbcs.w	r3, r3, #0
 8013b3a:	d209      	bcs.n	8013b50 <mg_sha384_update+0x88>
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8013b42:	f112 0801 	adds.w	r8, r2, #1
 8013b46:	f143 0900 	adc.w	r9, r3, #0
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	e9c3 8930 	strd	r8, r9, [r3, #192]	@ 0xc0
      ctx->datalen = 0;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2200      	movs	r2, #0
 8013b54:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  for (i = 0; i < len; ++i) {
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	617b      	str	r3, [r7, #20]
 8013b5e:	697a      	ldr	r2, [r7, #20]
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d3ba      	bcc.n	8013adc <mg_sha384_update+0x14>
    }
  }
}
 8013b66:	bf00      	nop
 8013b68:	bf00      	nop
 8013b6a:	3718      	adds	r7, #24
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08013b72 <mg_sha384_final>:

void mg_sha384_final(uint8_t hash[48], mg_sha384_ctx *ctx) {
 8013b72:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013b76:	b086      	sub	sp, #24
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
  size_t i = ctx->datalen;
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013b84:	617b      	str	r3, [r7, #20]

  if (ctx->datalen < 112) {
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013b8c:	2b6f      	cmp	r3, #111	@ 0x6f
 8013b8e:	d814      	bhi.n	8013bba <mg_sha384_final+0x48>
    ctx->buffer[i++] = 0x80;
 8013b90:	697b      	ldr	r3, [r7, #20]
 8013b92:	1c5a      	adds	r2, r3, #1
 8013b94:	617a      	str	r2, [r7, #20]
 8013b96:	68ba      	ldr	r2, [r7, #8]
 8013b98:	4413      	add	r3, r2
 8013b9a:	2280      	movs	r2, #128	@ 0x80
 8013b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 112) ctx->buffer[i++] = 0x00;
 8013ba0:	e007      	b.n	8013bb2 <mg_sha384_final+0x40>
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	1c5a      	adds	r2, r3, #1
 8013ba6:	617a      	str	r2, [r7, #20]
 8013ba8:	68ba      	ldr	r2, [r7, #8]
 8013baa:	4413      	add	r3, r2
 8013bac:	2200      	movs	r2, #0
 8013bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	2b6f      	cmp	r3, #111	@ 0x6f
 8013bb6:	d9f4      	bls.n	8013ba2 <mg_sha384_final+0x30>
 8013bb8:	e020      	b.n	8013bfc <mg_sha384_final+0x8a>
  } else {
    ctx->buffer[i++] = 0x80;
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	1c5a      	adds	r2, r3, #1
 8013bbe:	617a      	str	r2, [r7, #20]
 8013bc0:	68ba      	ldr	r2, [r7, #8]
 8013bc2:	4413      	add	r3, r2
 8013bc4:	2280      	movs	r2, #128	@ 0x80
 8013bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 128) ctx->buffer[i++] = 0x00;
 8013bca:	e007      	b.n	8013bdc <mg_sha384_final+0x6a>
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	1c5a      	adds	r2, r3, #1
 8013bd0:	617a      	str	r2, [r7, #20]
 8013bd2:	68ba      	ldr	r2, [r7, #8]
 8013bd4:	4413      	add	r3, r2
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013bdc:	697b      	ldr	r3, [r7, #20]
 8013bde:	2b7f      	cmp	r3, #127	@ 0x7f
 8013be0:	d9f4      	bls.n	8013bcc <mg_sha384_final+0x5a>
    mg_sha384_transform(ctx, ctx->buffer);
 8013be2:	68bb      	ldr	r3, [r7, #8]
 8013be4:	3340      	adds	r3, #64	@ 0x40
 8013be6:	4619      	mov	r1, r3
 8013be8:	68b8      	ldr	r0, [r7, #8]
 8013bea:	f7ff f9dd 	bl	8012fa8 <mg_sha384_transform>
    memset(ctx->buffer, 0, 112);
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	3340      	adds	r3, #64	@ 0x40
 8013bf2:	2270      	movs	r2, #112	@ 0x70
 8013bf4:	2100      	movs	r1, #0
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	f00f fc8d 	bl	8023516 <memset>
  }

  ctx->bitlen[1] += ctx->datalen * 8;
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013c02:	68b9      	ldr	r1, [r7, #8]
 8013c04:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 8013c08:	00c9      	lsls	r1, r1, #3
 8013c0a:	2000      	movs	r0, #0
 8013c0c:	4688      	mov	r8, r1
 8013c0e:	4681      	mov	r9, r0
 8013c10:	eb12 0108 	adds.w	r1, r2, r8
 8013c14:	6039      	str	r1, [r7, #0]
 8013c16:	eb43 0309 	adc.w	r3, r3, r9
 8013c1a:	607b      	str	r3, [r7, #4]
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8013c22:	e9c3 1232 	strd	r1, r2, [r3, #200]	@ 0xc8
  if (ctx->bitlen[1] < ctx->datalen * 8) ctx->bitlen[0]++;
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013c2c:	68b9      	ldr	r1, [r7, #8]
 8013c2e:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 8013c32:	00c9      	lsls	r1, r1, #3
 8013c34:	2000      	movs	r0, #0
 8013c36:	460c      	mov	r4, r1
 8013c38:	4605      	mov	r5, r0
 8013c3a:	42a2      	cmp	r2, r4
 8013c3c:	41ab      	sbcs	r3, r5
 8013c3e:	d209      	bcs.n	8013c54 <mg_sha384_final+0xe2>
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8013c46:	f112 0a01 	adds.w	sl, r2, #1
 8013c4a:	f143 0b00 	adc.w	fp, r3, #0
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	e9c3 ab30 	strd	sl, fp, [r3, #192]	@ 0xc0
  ctx->buffer[127] = (uint8_t) (ctx->bitlen[1]);
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013c5a:	b2d2      	uxtb	r2, r2
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
  ctx->buffer[126] = (uint8_t) (ctx->bitlen[1] >> 8);
 8013c62:	68bb      	ldr	r3, [r7, #8]
 8013c64:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013c68:	f04f 0200 	mov.w	r2, #0
 8013c6c:	f04f 0300 	mov.w	r3, #0
 8013c70:	0a02      	lsrs	r2, r0, #8
 8013c72:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013c76:	0a0b      	lsrs	r3, r1, #8
 8013c78:	b2d2      	uxtb	r2, r2
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
  ctx->buffer[125] = (uint8_t) (ctx->bitlen[1] >> 16);
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013c86:	f04f 0200 	mov.w	r2, #0
 8013c8a:	f04f 0300 	mov.w	r3, #0
 8013c8e:	0c02      	lsrs	r2, r0, #16
 8013c90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013c94:	0c0b      	lsrs	r3, r1, #16
 8013c96:	b2d2      	uxtb	r2, r2
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
  ctx->buffer[124] = (uint8_t) (ctx->bitlen[1] >> 24);
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013ca4:	f04f 0200 	mov.w	r2, #0
 8013ca8:	f04f 0300 	mov.w	r3, #0
 8013cac:	0e02      	lsrs	r2, r0, #24
 8013cae:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8013cb2:	0e0b      	lsrs	r3, r1, #24
 8013cb4:	b2d2      	uxtb	r2, r2
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
  ctx->buffer[123] = (uint8_t) (ctx->bitlen[1] >> 32);
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013cc2:	f04f 0200 	mov.w	r2, #0
 8013cc6:	f04f 0300 	mov.w	r3, #0
 8013cca:	000a      	movs	r2, r1
 8013ccc:	2300      	movs	r3, #0
 8013cce:	b2d2      	uxtb	r2, r2
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ctx->buffer[122] = (uint8_t) (ctx->bitlen[1] >> 40);
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013cdc:	f04f 0200 	mov.w	r2, #0
 8013ce0:	f04f 0300 	mov.w	r3, #0
 8013ce4:	0a0a      	lsrs	r2, r1, #8
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	b2d2      	uxtb	r2, r2
 8013cea:	68bb      	ldr	r3, [r7, #8]
 8013cec:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ctx->buffer[121] = (uint8_t) (ctx->bitlen[1] >> 48);
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013cf6:	f04f 0200 	mov.w	r2, #0
 8013cfa:	f04f 0300 	mov.w	r3, #0
 8013cfe:	0c0a      	lsrs	r2, r1, #16
 8013d00:	2300      	movs	r3, #0
 8013d02:	b2d2      	uxtb	r2, r2
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ctx->buffer[120] = (uint8_t) (ctx->bitlen[1] >> 56);
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013d10:	f04f 0200 	mov.w	r2, #0
 8013d14:	f04f 0300 	mov.w	r3, #0
 8013d18:	0e0a      	lsrs	r2, r1, #24
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	b2d2      	uxtb	r2, r2
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ctx->buffer[119] = (uint8_t) (ctx->bitlen[0]);
 8013d24:	68bb      	ldr	r3, [r7, #8]
 8013d26:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8013d2a:	b2d2      	uxtb	r2, r2
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ctx->buffer[118] = (uint8_t) (ctx->bitlen[0] >> 8);
 8013d32:	68bb      	ldr	r3, [r7, #8]
 8013d34:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013d38:	f04f 0200 	mov.w	r2, #0
 8013d3c:	f04f 0300 	mov.w	r3, #0
 8013d40:	0a02      	lsrs	r2, r0, #8
 8013d42:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013d46:	0a0b      	lsrs	r3, r1, #8
 8013d48:	b2d2      	uxtb	r2, r2
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ctx->buffer[117] = (uint8_t) (ctx->bitlen[0] >> 16);
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013d56:	f04f 0200 	mov.w	r2, #0
 8013d5a:	f04f 0300 	mov.w	r3, #0
 8013d5e:	0c02      	lsrs	r2, r0, #16
 8013d60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013d64:	0c0b      	lsrs	r3, r1, #16
 8013d66:	b2d2      	uxtb	r2, r2
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
  ctx->buffer[116] = (uint8_t) (ctx->bitlen[0] >> 24);
 8013d6e:	68bb      	ldr	r3, [r7, #8]
 8013d70:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013d74:	f04f 0200 	mov.w	r2, #0
 8013d78:	f04f 0300 	mov.w	r3, #0
 8013d7c:	0e02      	lsrs	r2, r0, #24
 8013d7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8013d82:	0e0b      	lsrs	r3, r1, #24
 8013d84:	b2d2      	uxtb	r2, r2
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  ctx->buffer[115] = (uint8_t) (ctx->bitlen[0] >> 32);
 8013d8c:	68bb      	ldr	r3, [r7, #8]
 8013d8e:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013d92:	f04f 0200 	mov.w	r2, #0
 8013d96:	f04f 0300 	mov.w	r3, #0
 8013d9a:	000a      	movs	r2, r1
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	b2d2      	uxtb	r2, r2
 8013da0:	68bb      	ldr	r3, [r7, #8]
 8013da2:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
  ctx->buffer[114] = (uint8_t) (ctx->bitlen[0] >> 40);
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013dac:	f04f 0200 	mov.w	r2, #0
 8013db0:	f04f 0300 	mov.w	r3, #0
 8013db4:	0a0a      	lsrs	r2, r1, #8
 8013db6:	2300      	movs	r3, #0
 8013db8:	b2d2      	uxtb	r2, r2
 8013dba:	68bb      	ldr	r3, [r7, #8]
 8013dbc:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
  ctx->buffer[113] = (uint8_t) (ctx->bitlen[0] >> 48);
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013dc6:	f04f 0200 	mov.w	r2, #0
 8013dca:	f04f 0300 	mov.w	r3, #0
 8013dce:	0c0a      	lsrs	r2, r1, #16
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	b2d2      	uxtb	r2, r2
 8013dd4:	68bb      	ldr	r3, [r7, #8]
 8013dd6:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
  ctx->buffer[112] = (uint8_t) (ctx->bitlen[0] >> 56);
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013de0:	f04f 0200 	mov.w	r2, #0
 8013de4:	f04f 0300 	mov.w	r3, #0
 8013de8:	0e0a      	lsrs	r2, r1, #24
 8013dea:	2300      	movs	r3, #0
 8013dec:	b2d2      	uxtb	r2, r2
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
  mg_sha384_transform(ctx, ctx->buffer);
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	3340      	adds	r3, #64	@ 0x40
 8013df8:	4619      	mov	r1, r3
 8013dfa:	68b8      	ldr	r0, [r7, #8]
 8013dfc:	f7ff f8d4 	bl	8012fa8 <mg_sha384_transform>

  for (i = 0; i < 6; ++i) {
 8013e00:	2300      	movs	r3, #0
 8013e02:	617b      	str	r3, [r7, #20]
 8013e04:	e099      	b.n	8013f3a <mg_sha384_final+0x3c8>
    hash[i * 8] = (uint8_t) ((ctx->state[i] >> 56) & 0xff);
 8013e06:	68ba      	ldr	r2, [r7, #8]
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	00db      	lsls	r3, r3, #3
 8013e0c:	4413      	add	r3, r2
 8013e0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e12:	f04f 0200 	mov.w	r2, #0
 8013e16:	f04f 0300 	mov.w	r3, #0
 8013e1a:	0e0a      	lsrs	r2, r1, #24
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	6979      	ldr	r1, [r7, #20]
 8013e20:	00c9      	lsls	r1, r1, #3
 8013e22:	68f8      	ldr	r0, [r7, #12]
 8013e24:	4401      	add	r1, r0
 8013e26:	b2d3      	uxtb	r3, r2
 8013e28:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 1] = (uint8_t) ((ctx->state[i] >> 48) & 0xff);
 8013e2a:	68ba      	ldr	r2, [r7, #8]
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	00db      	lsls	r3, r3, #3
 8013e30:	4413      	add	r3, r2
 8013e32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e36:	f04f 0200 	mov.w	r2, #0
 8013e3a:	f04f 0300 	mov.w	r3, #0
 8013e3e:	0c0a      	lsrs	r2, r1, #16
 8013e40:	2300      	movs	r3, #0
 8013e42:	6979      	ldr	r1, [r7, #20]
 8013e44:	00c9      	lsls	r1, r1, #3
 8013e46:	3101      	adds	r1, #1
 8013e48:	68f8      	ldr	r0, [r7, #12]
 8013e4a:	4401      	add	r1, r0
 8013e4c:	b2d3      	uxtb	r3, r2
 8013e4e:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 2] = (uint8_t) ((ctx->state[i] >> 40) & 0xff);
 8013e50:	68ba      	ldr	r2, [r7, #8]
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	00db      	lsls	r3, r3, #3
 8013e56:	4413      	add	r3, r2
 8013e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e5c:	f04f 0200 	mov.w	r2, #0
 8013e60:	f04f 0300 	mov.w	r3, #0
 8013e64:	0a0a      	lsrs	r2, r1, #8
 8013e66:	2300      	movs	r3, #0
 8013e68:	6979      	ldr	r1, [r7, #20]
 8013e6a:	00c9      	lsls	r1, r1, #3
 8013e6c:	3102      	adds	r1, #2
 8013e6e:	68f8      	ldr	r0, [r7, #12]
 8013e70:	4401      	add	r1, r0
 8013e72:	b2d3      	uxtb	r3, r2
 8013e74:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 3] = (uint8_t) ((ctx->state[i] >> 32) & 0xff);
 8013e76:	68ba      	ldr	r2, [r7, #8]
 8013e78:	697b      	ldr	r3, [r7, #20]
 8013e7a:	00db      	lsls	r3, r3, #3
 8013e7c:	4413      	add	r3, r2
 8013e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013e82:	f04f 0200 	mov.w	r2, #0
 8013e86:	f04f 0300 	mov.w	r3, #0
 8013e8a:	000a      	movs	r2, r1
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	6979      	ldr	r1, [r7, #20]
 8013e90:	00c9      	lsls	r1, r1, #3
 8013e92:	3103      	adds	r1, #3
 8013e94:	68f8      	ldr	r0, [r7, #12]
 8013e96:	4401      	add	r1, r0
 8013e98:	b2d3      	uxtb	r3, r2
 8013e9a:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 4] = (uint8_t) ((ctx->state[i] >> 24) & 0xff);
 8013e9c:	68ba      	ldr	r2, [r7, #8]
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	00db      	lsls	r3, r3, #3
 8013ea2:	4413      	add	r3, r2
 8013ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013ea8:	f04f 0200 	mov.w	r2, #0
 8013eac:	f04f 0300 	mov.w	r3, #0
 8013eb0:	0e02      	lsrs	r2, r0, #24
 8013eb2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8013eb6:	0e0b      	lsrs	r3, r1, #24
 8013eb8:	6979      	ldr	r1, [r7, #20]
 8013eba:	00c9      	lsls	r1, r1, #3
 8013ebc:	3104      	adds	r1, #4
 8013ebe:	68f8      	ldr	r0, [r7, #12]
 8013ec0:	4401      	add	r1, r0
 8013ec2:	b2d3      	uxtb	r3, r2
 8013ec4:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 5] = (uint8_t) ((ctx->state[i] >> 16) & 0xff);
 8013ec6:	68ba      	ldr	r2, [r7, #8]
 8013ec8:	697b      	ldr	r3, [r7, #20]
 8013eca:	00db      	lsls	r3, r3, #3
 8013ecc:	4413      	add	r3, r2
 8013ece:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013ed2:	f04f 0200 	mov.w	r2, #0
 8013ed6:	f04f 0300 	mov.w	r3, #0
 8013eda:	0c02      	lsrs	r2, r0, #16
 8013edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013ee0:	0c0b      	lsrs	r3, r1, #16
 8013ee2:	6979      	ldr	r1, [r7, #20]
 8013ee4:	00c9      	lsls	r1, r1, #3
 8013ee6:	3105      	adds	r1, #5
 8013ee8:	68f8      	ldr	r0, [r7, #12]
 8013eea:	4401      	add	r1, r0
 8013eec:	b2d3      	uxtb	r3, r2
 8013eee:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 6] = (uint8_t) ((ctx->state[i] >> 8) & 0xff);
 8013ef0:	68ba      	ldr	r2, [r7, #8]
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	00db      	lsls	r3, r3, #3
 8013ef6:	4413      	add	r3, r2
 8013ef8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013efc:	f04f 0200 	mov.w	r2, #0
 8013f00:	f04f 0300 	mov.w	r3, #0
 8013f04:	0a02      	lsrs	r2, r0, #8
 8013f06:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013f0a:	0a0b      	lsrs	r3, r1, #8
 8013f0c:	6979      	ldr	r1, [r7, #20]
 8013f0e:	00c9      	lsls	r1, r1, #3
 8013f10:	3106      	adds	r1, #6
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	4401      	add	r1, r0
 8013f16:	b2d3      	uxtb	r3, r2
 8013f18:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 7] = (uint8_t) (ctx->state[i] & 0xff);
 8013f1a:	68ba      	ldr	r2, [r7, #8]
 8013f1c:	697b      	ldr	r3, [r7, #20]
 8013f1e:	00db      	lsls	r3, r3, #3
 8013f20:	4413      	add	r3, r2
 8013f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f26:	6979      	ldr	r1, [r7, #20]
 8013f28:	00c9      	lsls	r1, r1, #3
 8013f2a:	3107      	adds	r1, #7
 8013f2c:	68f8      	ldr	r0, [r7, #12]
 8013f2e:	4401      	add	r1, r0
 8013f30:	b2d3      	uxtb	r3, r2
 8013f32:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < 6; ++i) {
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	3301      	adds	r3, #1
 8013f38:	617b      	str	r3, [r7, #20]
 8013f3a:	697b      	ldr	r3, [r7, #20]
 8013f3c:	2b05      	cmp	r3, #5
 8013f3e:	f67f af62 	bls.w	8013e06 <mg_sha384_final+0x294>
  }
}
 8013f42:	bf00      	nop
 8013f44:	bf00      	nop
 8013f46:	3718      	adds	r7, #24
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08013f4e <mg_sha384>:

void mg_sha384(uint8_t dst[48], uint8_t *data, size_t datasz) {
 8013f4e:	b580      	push	{r7, lr}
 8013f50:	b0ba      	sub	sp, #232	@ 0xe8
 8013f52:	af00      	add	r7, sp, #0
 8013f54:	60f8      	str	r0, [r7, #12]
 8013f56:	60b9      	str	r1, [r7, #8]
 8013f58:	607a      	str	r2, [r7, #4]
  mg_sha384_ctx ctx;
  mg_sha384_init(&ctx);
 8013f5a:	f107 0310 	add.w	r3, r7, #16
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7ff fd46 	bl	80139f0 <mg_sha384_init>
  mg_sha384_update(&ctx, data, datasz);
 8013f64:	f107 0310 	add.w	r3, r7, #16
 8013f68:	687a      	ldr	r2, [r7, #4]
 8013f6a:	68b9      	ldr	r1, [r7, #8]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f7ff fdab 	bl	8013ac8 <mg_sha384_update>
  mg_sha384_final(dst, &ctx);
 8013f72:	f107 0310 	add.w	r3, r7, #16
 8013f76:	4619      	mov	r1, r3
 8013f78:	68f8      	ldr	r0, [r7, #12]
 8013f7a:	f7ff fdfa 	bl	8013b72 <mg_sha384_final>
}
 8013f7e:	bf00      	nop
 8013f80:	37e8      	adds	r7, #232	@ 0xe8
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}
	...

08013f88 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8013f88:	b5b0      	push	{r4, r5, r7, lr}
 8013f8a:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 8013f8c:	f7ec fbec 	bl	8000768 <mg_millis>
 8013f90:	4b05      	ldr	r3, [pc, #20]	@ (8013fa8 <mg_now+0x20>)
 8013f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f96:	1884      	adds	r4, r0, r2
 8013f98:	eb41 0503 	adc.w	r5, r1, r3
 8013f9c:	4622      	mov	r2, r4
 8013f9e:	462b      	mov	r3, r5
}
 8013fa0:	4610      	mov	r0, r2
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	24001098 	.word	0x24001098

08013fac <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8013fac:	b580      	push	{r7, lr}
 8013fae:	b084      	sub	sp, #16
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	60f8      	str	r0, [r7, #12]
 8013fb4:	60b9      	str	r1, [r7, #8]
 8013fb6:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8013fb8:	4b05      	ldr	r3, [pc, #20]	@ (8013fd0 <mg_http_serve_ssi+0x24>)
 8013fba:	2200      	movs	r2, #0
 8013fbc:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8013fc0:	68f8      	ldr	r0, [r7, #12]
 8013fc2:	f7f5 fc2b 	bl	800981c <mg_http_reply>
  (void) root, (void) fullpath;
}
 8013fc6:	bf00      	nop
 8013fc8:	3710      	adds	r7, #16
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	08025b94 	.word	0x08025b94

08013fd4 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b084      	sub	sp, #16
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
 8013fdc:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	60bb      	str	r3, [r7, #8]
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d004      	beq.n	8013ff2 <mg_str_s+0x1e>
 8013fe8:	6838      	ldr	r0, [r7, #0]
 8013fea:	f7ec f9f1 	bl	80003d0 <strlen>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	e000      	b.n	8013ff4 <mg_str_s+0x20>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	60fb      	str	r3, [r7, #12]
  return str;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	f107 0308 	add.w	r3, r7, #8
 8013ffe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014002:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	3710      	adds	r7, #16
 801400a:	46bd      	mov	sp, r7
 801400c:	bd80      	pop	{r7, pc}

0801400e <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 801400e:	b480      	push	{r7}
 8014010:	b087      	sub	sp, #28
 8014012:	af00      	add	r7, sp, #0
 8014014:	60f8      	str	r0, [r7, #12]
 8014016:	60b9      	str	r1, [r7, #8]
 8014018:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	613b      	str	r3, [r7, #16]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	617b      	str	r3, [r7, #20]
  return str;
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	461a      	mov	r2, r3
 8014026:	f107 0310 	add.w	r3, r7, #16
 801402a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801402e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8014032:	68f8      	ldr	r0, [r7, #12]
 8014034:	371c      	adds	r7, #28
 8014036:	46bd      	mov	sp, r7
 8014038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801403c:	4770      	bx	lr

0801403e <mg_tolc>:

static int mg_tolc(char c) {
 801403e:	b480      	push	{r7}
 8014040:	b083      	sub	sp, #12
 8014042:	af00      	add	r7, sp, #0
 8014044:	4603      	mov	r3, r0
 8014046:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8014048:	79fb      	ldrb	r3, [r7, #7]
 801404a:	2b40      	cmp	r3, #64	@ 0x40
 801404c:	d905      	bls.n	801405a <mg_tolc+0x1c>
 801404e:	79fb      	ldrb	r3, [r7, #7]
 8014050:	2b5a      	cmp	r3, #90	@ 0x5a
 8014052:	d802      	bhi.n	801405a <mg_tolc+0x1c>
 8014054:	79fb      	ldrb	r3, [r7, #7]
 8014056:	3320      	adds	r3, #32
 8014058:	e000      	b.n	801405c <mg_tolc+0x1e>
 801405a:	79fb      	ldrb	r3, [r7, #7]
}
 801405c:	4618      	mov	r0, r3
 801405e:	370c      	adds	r7, #12
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 8014068:	b580      	push	{r7, lr}
 801406a:	b088      	sub	sp, #32
 801406c:	af00      	add	r7, sp, #0
 801406e:	60f8      	str	r0, [r7, #12]
 8014070:	1d3b      	adds	r3, r7, #4
 8014072:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 8014076:	2300      	movs	r3, #0
 8014078:	617b      	str	r3, [r7, #20]
 801407a:	2300      	movs	r3, #0
 801407c:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d01c      	beq.n	80140be <mg_strdup+0x56>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d019      	beq.n	80140be <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	3301      	adds	r3, #1
 801408e:	4619      	mov	r1, r3
 8014090:	2001      	movs	r0, #1
 8014092:	f00e ff6b 	bl	8022f6c <calloc>
 8014096:	4603      	mov	r3, r0
 8014098:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 801409a:	69fb      	ldr	r3, [r7, #28]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d00e      	beq.n	80140be <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	68ba      	ldr	r2, [r7, #8]
 80140a4:	4619      	mov	r1, r3
 80140a6:	69f8      	ldr	r0, [r7, #28]
 80140a8:	f00f fb6b 	bl	8023782 <memcpy>
      sc[s.len] = '\0';
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	69fa      	ldr	r2, [r7, #28]
 80140b0:	4413      	add	r3, r2
 80140b2:	2200      	movs	r2, #0
 80140b4:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 80140b6:	69fb      	ldr	r3, [r7, #28]
 80140b8:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 80140ba:	68bb      	ldr	r3, [r7, #8]
 80140bc:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	461a      	mov	r2, r3
 80140c2:	f107 0314 	add.w	r3, r7, #20
 80140c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80140ca:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80140ce:	68f8      	ldr	r0, [r7, #12]
 80140d0:	3720      	adds	r7, #32
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}

080140d6 <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80140d6:	b490      	push	{r4, r7}
 80140d8:	b088      	sub	sp, #32
 80140da:	af00      	add	r7, sp, #0
 80140dc:	f107 0408 	add.w	r4, r7, #8
 80140e0:	e884 0003 	stmia.w	r4, {r0, r1}
 80140e4:	4639      	mov	r1, r7
 80140e6:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80140ea:	2300      	movs	r3, #0
 80140ec:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80140ee:	e019      	b.n	8014124 <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 80140f0:	68ba      	ldr	r2, [r7, #8]
 80140f2:	69fb      	ldr	r3, [r7, #28]
 80140f4:	4413      	add	r3, r2
 80140f6:	781b      	ldrb	r3, [r3, #0]
 80140f8:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 80140fa:	683a      	ldr	r2, [r7, #0]
 80140fc:	69fb      	ldr	r3, [r7, #28]
 80140fe:	4413      	add	r3, r2
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8014104:	69ba      	ldr	r2, [r7, #24]
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	429a      	cmp	r2, r3
 801410a:	da02      	bge.n	8014112 <mg_strcmp+0x3c>
 801410c:	f04f 33ff 	mov.w	r3, #4294967295
 8014110:	e01e      	b.n	8014150 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8014112:	69ba      	ldr	r2, [r7, #24]
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	429a      	cmp	r2, r3
 8014118:	dd01      	ble.n	801411e <mg_strcmp+0x48>
 801411a:	2301      	movs	r3, #1
 801411c:	e018      	b.n	8014150 <mg_strcmp+0x7a>
    i++;
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	3301      	adds	r3, #1
 8014122:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	69fa      	ldr	r2, [r7, #28]
 8014128:	429a      	cmp	r2, r3
 801412a:	d203      	bcs.n	8014134 <mg_strcmp+0x5e>
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	69fa      	ldr	r2, [r7, #28]
 8014130:	429a      	cmp	r2, r3
 8014132:	d3dd      	bcc.n	80140f0 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	69fa      	ldr	r2, [r7, #28]
 8014138:	429a      	cmp	r2, r3
 801413a:	d201      	bcs.n	8014140 <mg_strcmp+0x6a>
 801413c:	2301      	movs	r3, #1
 801413e:	e007      	b.n	8014150 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	69fa      	ldr	r2, [r7, #28]
 8014144:	429a      	cmp	r2, r3
 8014146:	d202      	bcs.n	801414e <mg_strcmp+0x78>
 8014148:	f04f 33ff 	mov.w	r3, #4294967295
 801414c:	e000      	b.n	8014150 <mg_strcmp+0x7a>
  return 0;
 801414e:	2300      	movs	r3, #0
}
 8014150:	4618      	mov	r0, r3
 8014152:	3720      	adds	r7, #32
 8014154:	46bd      	mov	sp, r7
 8014156:	bc90      	pop	{r4, r7}
 8014158:	4770      	bx	lr

0801415a <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 801415a:	b590      	push	{r4, r7, lr}
 801415c:	b089      	sub	sp, #36	@ 0x24
 801415e:	af00      	add	r7, sp, #0
 8014160:	f107 0408 	add.w	r4, r7, #8
 8014164:	e884 0003 	stmia.w	r4, {r0, r1}
 8014168:	4639      	mov	r1, r7
 801416a:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 801416e:	2300      	movs	r3, #0
 8014170:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8014172:	e01f      	b.n	80141b4 <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8014174:	68ba      	ldr	r2, [r7, #8]
 8014176:	69fb      	ldr	r3, [r7, #28]
 8014178:	4413      	add	r3, r2
 801417a:	781b      	ldrb	r3, [r3, #0]
 801417c:	4618      	mov	r0, r3
 801417e:	f7ff ff5e 	bl	801403e <mg_tolc>
 8014182:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8014184:	683a      	ldr	r2, [r7, #0]
 8014186:	69fb      	ldr	r3, [r7, #28]
 8014188:	4413      	add	r3, r2
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	4618      	mov	r0, r3
 801418e:	f7ff ff56 	bl	801403e <mg_tolc>
 8014192:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8014194:	69ba      	ldr	r2, [r7, #24]
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	429a      	cmp	r2, r3
 801419a:	da02      	bge.n	80141a2 <mg_strcasecmp+0x48>
 801419c:	f04f 33ff 	mov.w	r3, #4294967295
 80141a0:	e01e      	b.n	80141e0 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 80141a2:	69ba      	ldr	r2, [r7, #24]
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	dd01      	ble.n	80141ae <mg_strcasecmp+0x54>
 80141aa:	2301      	movs	r3, #1
 80141ac:	e018      	b.n	80141e0 <mg_strcasecmp+0x86>
    i++;
 80141ae:	69fb      	ldr	r3, [r7, #28]
 80141b0:	3301      	adds	r3, #1
 80141b2:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	69fa      	ldr	r2, [r7, #28]
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d203      	bcs.n	80141c4 <mg_strcasecmp+0x6a>
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	69fa      	ldr	r2, [r7, #28]
 80141c0:	429a      	cmp	r2, r3
 80141c2:	d3d7      	bcc.n	8014174 <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	69fa      	ldr	r2, [r7, #28]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d201      	bcs.n	80141d0 <mg_strcasecmp+0x76>
 80141cc:	2301      	movs	r3, #1
 80141ce:	e007      	b.n	80141e0 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	69fa      	ldr	r2, [r7, #28]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d202      	bcs.n	80141de <mg_strcasecmp+0x84>
 80141d8:	f04f 33ff 	mov.w	r3, #4294967295
 80141dc:	e000      	b.n	80141e0 <mg_strcasecmp+0x86>
  return 0;
 80141de:	2300      	movs	r3, #0
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3724      	adds	r7, #36	@ 0x24
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd90      	pop	{r4, r7, pc}

080141e8 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80141e8:	b490      	push	{r4, r7}
 80141ea:	b088      	sub	sp, #32
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	f107 0408 	add.w	r4, r7, #8
 80141f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80141f6:	4639      	mov	r1, r7
 80141f8:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 80141fc:	2300      	movs	r3, #0
 80141fe:	61fb      	str	r3, [r7, #28]
 8014200:	2300      	movs	r3, #0
 8014202:	61bb      	str	r3, [r7, #24]
 8014204:	2300      	movs	r3, #0
 8014206:	617b      	str	r3, [r7, #20]
 8014208:	2300      	movs	r3, #0
 801420a:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 801420c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801420e:	2b00      	cmp	r3, #0
 8014210:	f000 80ba 	beq.w	8014388 <mg_match+0x1a0>
 8014214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014216:	2200      	movs	r2, #0
 8014218:	601a      	str	r2, [r3, #0]
 801421a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801421c:	2200      	movs	r2, #0
 801421e:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8014220:	e0b2      	b.n	8014388 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	69fa      	ldr	r2, [r7, #28]
 8014226:	429a      	cmp	r2, r3
 8014228:	d25b      	bcs.n	80142e2 <mg_match+0xfa>
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	69ba      	ldr	r2, [r7, #24]
 801422e:	429a      	cmp	r2, r3
 8014230:	d257      	bcs.n	80142e2 <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8014232:	683a      	ldr	r2, [r7, #0]
 8014234:	69fb      	ldr	r3, [r7, #28]
 8014236:	4413      	add	r3, r2
 8014238:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 801423a:	2b3f      	cmp	r3, #63	@ 0x3f
 801423c:	d015      	beq.n	801426a <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 801423e:	683a      	ldr	r2, [r7, #0]
 8014240:	69fb      	ldr	r3, [r7, #28]
 8014242:	4413      	add	r3, r2
 8014244:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8014246:	2b2a      	cmp	r3, #42	@ 0x2a
 8014248:	d04b      	beq.n	80142e2 <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 801424a:	683a      	ldr	r2, [r7, #0]
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	4413      	add	r3, r2
 8014250:	781b      	ldrb	r3, [r3, #0]
 8014252:	2b23      	cmp	r3, #35	@ 0x23
 8014254:	d045      	beq.n	80142e2 <mg_match+0xfa>
 8014256:	68ba      	ldr	r2, [r7, #8]
 8014258:	69bb      	ldr	r3, [r7, #24]
 801425a:	4413      	add	r3, r2
 801425c:	781a      	ldrb	r2, [r3, #0]
 801425e:	6839      	ldr	r1, [r7, #0]
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	440b      	add	r3, r1
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	429a      	cmp	r2, r3
 8014268:	d13b      	bne.n	80142e2 <mg_match+0xfa>
      if (caps == NULL) {
 801426a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801426c:	2b00      	cmp	r3, #0
 801426e:	d031      	beq.n	80142d4 <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8014270:	683a      	ldr	r2, [r7, #0]
 8014272:	69fb      	ldr	r3, [r7, #28]
 8014274:	4413      	add	r3, r2
 8014276:	781b      	ldrb	r3, [r3, #0]
 8014278:	2b3f      	cmp	r3, #63	@ 0x3f
 801427a:	d111      	bne.n	80142a0 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 801427c:	68ba      	ldr	r2, [r7, #8]
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	441a      	add	r2, r3
 8014282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014284:	601a      	str	r2, [r3, #0]
 8014286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014288:	2201      	movs	r2, #1
 801428a:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 801428c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801428e:	3308      	adds	r3, #8
 8014290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014294:	2200      	movs	r2, #0
 8014296:	601a      	str	r2, [r3, #0]
 8014298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801429a:	2200      	movs	r2, #0
 801429c:	605a      	str	r2, [r3, #4]
 801429e:	e019      	b.n	80142d4 <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 80142a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d015      	beq.n	80142d4 <mg_match+0xec>
 80142a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142aa:	685b      	ldr	r3, [r3, #4]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d111      	bne.n	80142d4 <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 80142b0:	68ba      	ldr	r2, [r7, #8]
 80142b2:	69bb      	ldr	r3, [r7, #24]
 80142b4:	441a      	add	r2, r3
 80142b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	1ad3      	subs	r3, r2, r3
 80142bc:	461a      	mov	r2, r3
 80142be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142c0:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 80142c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142c4:	3308      	adds	r3, #8
 80142c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80142c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142ca:	2200      	movs	r2, #0
 80142cc:	605a      	str	r2, [r3, #4]
 80142ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142d0:	2200      	movs	r2, #0
 80142d2:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 80142d4:	69fb      	ldr	r3, [r7, #28]
 80142d6:	3301      	adds	r3, #1
 80142d8:	61fb      	str	r3, [r7, #28]
 80142da:	69bb      	ldr	r3, [r7, #24]
 80142dc:	3301      	adds	r3, #1
 80142de:	61bb      	str	r3, [r7, #24]
 80142e0:	e052      	b.n	8014388 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	69fa      	ldr	r2, [r7, #28]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d222      	bcs.n	8014330 <mg_match+0x148>
 80142ea:	683a      	ldr	r2, [r7, #0]
 80142ec:	69fb      	ldr	r3, [r7, #28]
 80142ee:	4413      	add	r3, r2
 80142f0:	781b      	ldrb	r3, [r3, #0]
 80142f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80142f4:	d005      	beq.n	8014302 <mg_match+0x11a>
 80142f6:	683a      	ldr	r2, [r7, #0]
 80142f8:	69fb      	ldr	r3, [r7, #28]
 80142fa:	4413      	add	r3, r2
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	2b23      	cmp	r3, #35	@ 0x23
 8014300:	d116      	bne.n	8014330 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 8014302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014304:	2b00      	cmp	r3, #0
 8014306:	d00b      	beq.n	8014320 <mg_match+0x138>
 8014308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d107      	bne.n	8014320 <mg_match+0x138>
 8014310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014312:	2200      	movs	r2, #0
 8014314:	605a      	str	r2, [r3, #4]
 8014316:	68ba      	ldr	r2, [r7, #8]
 8014318:	69bb      	ldr	r3, [r7, #24]
 801431a:	441a      	add	r2, r3
 801431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801431e:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8014320:	69fb      	ldr	r3, [r7, #28]
 8014322:	1c5a      	adds	r2, r3, #1
 8014324:	61fa      	str	r2, [r7, #28]
 8014326:	617b      	str	r3, [r7, #20]
 8014328:	69bb      	ldr	r3, [r7, #24]
 801432a:	3301      	adds	r3, #1
 801432c:	613b      	str	r3, [r7, #16]
 801432e:	e02b      	b.n	8014388 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8014330:	693b      	ldr	r3, [r7, #16]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d025      	beq.n	8014382 <mg_match+0x19a>
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	693a      	ldr	r2, [r7, #16]
 801433a:	429a      	cmp	r2, r3
 801433c:	d821      	bhi.n	8014382 <mg_match+0x19a>
 801433e:	683a      	ldr	r2, [r7, #0]
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	4413      	add	r3, r2
 8014344:	781b      	ldrb	r3, [r3, #0]
 8014346:	2b23      	cmp	r3, #35	@ 0x23
 8014348:	d005      	beq.n	8014356 <mg_match+0x16e>
 801434a:	68ba      	ldr	r2, [r7, #8]
 801434c:	69bb      	ldr	r3, [r7, #24]
 801434e:	4413      	add	r3, r2
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	2b2f      	cmp	r3, #47	@ 0x2f
 8014354:	d015      	beq.n	8014382 <mg_match+0x19a>
      i = ni, j = nj;
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	61fb      	str	r3, [r7, #28]
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 801435e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014360:	2b00      	cmp	r3, #0
 8014362:	d010      	beq.n	8014386 <mg_match+0x19e>
 8014364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d10c      	bne.n	8014386 <mg_match+0x19e>
 801436c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d108      	bne.n	8014386 <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 8014374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014376:	3b08      	subs	r3, #8
 8014378:	62bb      	str	r3, [r7, #40]	@ 0x28
 801437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801437c:	2200      	movs	r2, #0
 801437e:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8014380:	e001      	b.n	8014386 <mg_match+0x19e>
      }
    } else {
      return false;
 8014382:	2300      	movs	r3, #0
 8014384:	e01f      	b.n	80143c6 <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 8014386:	bf00      	nop
  while (i < p.len || j < s.len) {
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	69fa      	ldr	r2, [r7, #28]
 801438c:	429a      	cmp	r2, r3
 801438e:	f4ff af48 	bcc.w	8014222 <mg_match+0x3a>
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	69ba      	ldr	r2, [r7, #24]
 8014396:	429a      	cmp	r2, r3
 8014398:	f4ff af43 	bcc.w	8014222 <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 801439c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d010      	beq.n	80143c4 <mg_match+0x1dc>
 80143a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d00c      	beq.n	80143c4 <mg_match+0x1dc>
 80143aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143ac:	685b      	ldr	r3, [r3, #4]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d108      	bne.n	80143c4 <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 80143b2:	68ba      	ldr	r2, [r7, #8]
 80143b4:	69bb      	ldr	r3, [r7, #24]
 80143b6:	441a      	add	r2, r3
 80143b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	1ad3      	subs	r3, r2, r3
 80143be:	461a      	mov	r2, r3
 80143c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143c2:	605a      	str	r2, [r3, #4]
  }
  return true;
 80143c4:	2301      	movs	r3, #1
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3720      	adds	r7, #32
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bc90      	pop	{r4, r7}
 80143ce:	4770      	bx	lr

080143d0 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 80143d0:	b590      	push	{r4, r7, lr}
 80143d2:	b089      	sub	sp, #36	@ 0x24
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	f107 0410 	add.w	r4, r7, #16
 80143da:	e884 0003 	stmia.w	r4, {r0, r1}
 80143de:	60fa      	str	r2, [r7, #12]
 80143e0:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 80143e2:	697b      	ldr	r3, [r7, #20]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d002      	beq.n	80143ee <mg_span+0x1e>
 80143e8:	693b      	ldr	r3, [r7, #16]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d101      	bne.n	80143f2 <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 80143ee:	2300      	movs	r3, #0
 80143f0:	e047      	b.n	8014482 <mg_span+0xb2>
  } else {
    size_t len = 0;
 80143f2:	2300      	movs	r3, #0
 80143f4:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 80143f6:	e002      	b.n	80143fe <mg_span+0x2e>
 80143f8:	69fb      	ldr	r3, [r7, #28]
 80143fa:	3301      	adds	r3, #1
 80143fc:	61fb      	str	r3, [r7, #28]
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	69fa      	ldr	r2, [r7, #28]
 8014402:	429a      	cmp	r2, r3
 8014404:	d207      	bcs.n	8014416 <mg_span+0x46>
 8014406:	693a      	ldr	r2, [r7, #16]
 8014408:	69fb      	ldr	r3, [r7, #28]
 801440a:	4413      	add	r3, r2
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8014412:	429a      	cmp	r2, r3
 8014414:	d1f0      	bne.n	80143f8 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d00c      	beq.n	8014436 <mg_span+0x66>
 801441c:	6939      	ldr	r1, [r7, #16]
 801441e:	68fc      	ldr	r4, [r7, #12]
 8014420:	463b      	mov	r3, r7
 8014422:	69fa      	ldr	r2, [r7, #28]
 8014424:	4618      	mov	r0, r3
 8014426:	f7ff fdf2 	bl	801400e <mg_str_n>
 801442a:	4622      	mov	r2, r4
 801442c:	463b      	mov	r3, r7
 801442e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014432:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d010      	beq.n	801445e <mg_span+0x8e>
 801443c:	693a      	ldr	r2, [r7, #16]
 801443e:	69fb      	ldr	r3, [r7, #28]
 8014440:	18d1      	adds	r1, r2, r3
 8014442:	697a      	ldr	r2, [r7, #20]
 8014444:	69fb      	ldr	r3, [r7, #28]
 8014446:	1ad2      	subs	r2, r2, r3
 8014448:	68bc      	ldr	r4, [r7, #8]
 801444a:	463b      	mov	r3, r7
 801444c:	4618      	mov	r0, r3
 801444e:	f7ff fdde 	bl	801400e <mg_str_n>
 8014452:	4622      	mov	r2, r4
 8014454:	463b      	mov	r3, r7
 8014456:	e893 0003 	ldmia.w	r3, {r0, r1}
 801445a:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d00d      	beq.n	8014480 <mg_span+0xb0>
 8014464:	697b      	ldr	r3, [r7, #20]
 8014466:	69fa      	ldr	r2, [r7, #28]
 8014468:	429a      	cmp	r2, r3
 801446a:	d209      	bcs.n	8014480 <mg_span+0xb0>
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	1c5a      	adds	r2, r3, #1
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	601a      	str	r2, [r3, #0]
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	1e5a      	subs	r2, r3, #1
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	605a      	str	r2, [r3, #4]
    return true;
 8014480:	2301      	movs	r3, #1
  }
}
 8014482:	4618      	mov	r0, r3
 8014484:	3724      	adds	r7, #36	@ 0x24
 8014486:	46bd      	mov	sp, r7
 8014488:	bd90      	pop	{r4, r7, pc}

0801448a <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 801448a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801448e:	b0a5      	sub	sp, #148	@ 0x94
 8014490:	af00      	add	r7, sp, #0
 8014492:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 8014496:	e884 0003 	stmia.w	r4, {r0, r1}
 801449a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801449c:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 801449e:	2300      	movs	r3, #0
 80144a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80144a4:	2300      	movs	r3, #0
 80144a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 80144aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80144ae:	2b01      	cmp	r3, #1
 80144b0:	d016      	beq.n	80144e0 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 80144b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80144b6:	2b02      	cmp	r3, #2
 80144b8:	d00d      	beq.n	80144d6 <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 80144ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80144be:	2b04      	cmp	r3, #4
 80144c0:	d104      	bne.n	80144cc <mg_str_to_num+0x42>
 80144c2:	f04f 32ff 	mov.w	r2, #4294967295
 80144c6:	f04f 0300 	mov.w	r3, #0
 80144ca:	e00d      	b.n	80144e8 <mg_str_to_num+0x5e>
 80144cc:	f04f 32ff 	mov.w	r2, #4294967295
 80144d0:	f04f 33ff 	mov.w	r3, #4294967295
 80144d4:	e008      	b.n	80144e8 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 80144d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80144da:	f04f 0300 	mov.w	r3, #0
 80144de:	e003      	b.n	80144e8 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 80144e0:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 80144e4:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 80144e8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 80144ec:	f04f 0200 	mov.w	r2, #0
 80144f0:	f04f 0300 	mov.w	r3, #0
 80144f4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 80144f8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80144fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014500:	bf08      	it	eq
 8014502:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8014506:	d105      	bne.n	8014514 <mg_str_to_num+0x8a>
 8014508:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801450c:	2b08      	cmp	r3, #8
 801450e:	d001      	beq.n	8014514 <mg_str_to_num+0x8a>
 8014510:	2300      	movs	r3, #0
 8014512:	e1e8      	b.n	80148e6 <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 8014514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014516:	2b00      	cmp	r3, #0
 8014518:	d12d      	bne.n	8014576 <mg_str_to_num+0xec>
 801451a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801451c:	2b01      	cmp	r3, #1
 801451e:	d92a      	bls.n	8014576 <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8014520:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014526:	4413      	add	r3, r2
 8014528:	781b      	ldrb	r3, [r3, #0]
 801452a:	2b30      	cmp	r3, #48	@ 0x30
 801452c:	d121      	bne.n	8014572 <mg_str_to_num+0xe8>
      i++;
 801452e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014532:	3301      	adds	r3, #1
 8014534:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8014538:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801453a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801453e:	4413      	add	r3, r2
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	2b62      	cmp	r3, #98	@ 0x62
 8014544:	d00a      	beq.n	801455c <mg_str_to_num+0xd2>
 8014546:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801454c:	4413      	add	r3, r2
 801454e:	781b      	ldrb	r3, [r3, #0]
 8014550:	2b78      	cmp	r3, #120	@ 0x78
 8014552:	d101      	bne.n	8014558 <mg_str_to_num+0xce>
 8014554:	2310      	movs	r3, #16
 8014556:	e002      	b.n	801455e <mg_str_to_num+0xd4>
 8014558:	230a      	movs	r3, #10
 801455a:	e000      	b.n	801455e <mg_str_to_num+0xd4>
 801455c:	2302      	movs	r3, #2
 801455e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8014560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014562:	2b0a      	cmp	r3, #10
 8014564:	d007      	beq.n	8014576 <mg_str_to_num+0xec>
 8014566:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801456a:	3301      	adds	r3, #1
 801456c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014570:	e001      	b.n	8014576 <mg_str_to_num+0xec>
    } else {
      base = 10;
 8014572:	230a      	movs	r3, #10
 8014574:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 8014576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014578:	2b10      	cmp	r3, #16
 801457a:	f000 8178 	beq.w	801486e <mg_str_to_num+0x3e4>
 801457e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014580:	2b10      	cmp	r3, #16
 8014582:	f300 817d 	bgt.w	8014880 <mg_str_to_num+0x3f6>
 8014586:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014588:	2b02      	cmp	r3, #2
 801458a:	d052      	beq.n	8014632 <mg_str_to_num+0x1a8>
 801458c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801458e:	2b0a      	cmp	r3, #10
 8014590:	f000 80cd 	beq.w	801472e <mg_str_to_num+0x2a4>
 8014594:	e174      	b.n	8014880 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8014596:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014598:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801459c:	4413      	add	r3, r2
 801459e:	781b      	ldrb	r3, [r3, #0]
 80145a0:	3b30      	subs	r3, #48	@ 0x30
 80145a2:	17da      	asrs	r2, r3, #31
 80145a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80145a6:	637a      	str	r2, [r7, #52]	@ 0x34
 80145a8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80145ac:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 80145b0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80145b4:	f04f 0200 	mov.w	r2, #0
 80145b8:	f04f 0300 	mov.w	r3, #0
 80145bc:	0842      	lsrs	r2, r0, #1
 80145be:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80145c2:	084b      	lsrs	r3, r1, #1
 80145c4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80145c8:	4282      	cmp	r2, r0
 80145ca:	418b      	sbcs	r3, r1
 80145cc:	d201      	bcs.n	80145d2 <mg_str_to_num+0x148>
 80145ce:	2300      	movs	r3, #0
 80145d0:	e189      	b.n	80148e6 <mg_str_to_num+0x45c>
        result *= 2;
 80145d2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80145d6:	1891      	adds	r1, r2, r2
 80145d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80145da:	415b      	adcs	r3, r3
 80145dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80145de:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80145e2:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80145e6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80145ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80145ee:	1a85      	subs	r5, r0, r2
 80145f0:	eb61 0603 	sbc.w	r6, r1, r3
 80145f4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80145f8:	4295      	cmp	r5, r2
 80145fa:	eb76 0303 	sbcs.w	r3, r6, r3
 80145fe:	d201      	bcs.n	8014604 <mg_str_to_num+0x17a>
 8014600:	2300      	movs	r3, #0
 8014602:	e170      	b.n	80148e6 <mg_str_to_num+0x45c>
        result += digit;
 8014604:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014608:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801460c:	1884      	adds	r4, r0, r2
 801460e:	623c      	str	r4, [r7, #32]
 8014610:	eb41 0303 	adc.w	r3, r1, r3
 8014614:	627b      	str	r3, [r7, #36]	@ 0x24
 8014616:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801461a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 801461e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014622:	3301      	adds	r3, #1
 8014624:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801462c:	3301      	adds	r3, #1
 801462e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 8014632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014634:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8014638:	429a      	cmp	r2, r3
 801463a:	f080 8123 	bcs.w	8014884 <mg_str_to_num+0x3fa>
 801463e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014644:	4413      	add	r3, r2
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	2b30      	cmp	r3, #48	@ 0x30
 801464a:	d0a4      	beq.n	8014596 <mg_str_to_num+0x10c>
 801464c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801464e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014652:	4413      	add	r3, r2
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	2b31      	cmp	r3, #49	@ 0x31
 8014658:	d09d      	beq.n	8014596 <mg_str_to_num+0x10c>
      }
      break;
 801465a:	e113      	b.n	8014884 <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 801465c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801465e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014662:	4413      	add	r3, r2
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	3b30      	subs	r3, #48	@ 0x30
 8014668:	17da      	asrs	r2, r3, #31
 801466a:	61bb      	str	r3, [r7, #24]
 801466c:	61fa      	str	r2, [r7, #28]
 801466e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8014672:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 8014676:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801467a:	f04f 020a 	mov.w	r2, #10
 801467e:	f04f 0300 	mov.w	r3, #0
 8014682:	f7eb fead 	bl	80003e0 <__aeabi_uldivmod>
 8014686:	4602      	mov	r2, r0
 8014688:	460b      	mov	r3, r1
 801468a:	4610      	mov	r0, r2
 801468c:	4619      	mov	r1, r3
 801468e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8014692:	4290      	cmp	r0, r2
 8014694:	eb71 0303 	sbcs.w	r3, r1, r3
 8014698:	d201      	bcs.n	801469e <mg_str_to_num+0x214>
 801469a:	2300      	movs	r3, #0
 801469c:	e123      	b.n	80148e6 <mg_str_to_num+0x45c>
        result *= 10;
 801469e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80146a2:	4622      	mov	r2, r4
 80146a4:	462b      	mov	r3, r5
 80146a6:	f04f 0000 	mov.w	r0, #0
 80146aa:	f04f 0100 	mov.w	r1, #0
 80146ae:	0099      	lsls	r1, r3, #2
 80146b0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80146b4:	0090      	lsls	r0, r2, #2
 80146b6:	4602      	mov	r2, r0
 80146b8:	460b      	mov	r3, r1
 80146ba:	eb12 0804 	adds.w	r8, r2, r4
 80146be:	eb43 0905 	adc.w	r9, r3, r5
 80146c2:	eb18 0308 	adds.w	r3, r8, r8
 80146c6:	613b      	str	r3, [r7, #16]
 80146c8:	eb49 0309 	adc.w	r3, r9, r9
 80146cc:	617b      	str	r3, [r7, #20]
 80146ce:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80146d2:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80146d6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80146da:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80146de:	1a84      	subs	r4, r0, r2
 80146e0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80146e2:	eb61 0303 	sbc.w	r3, r1, r3
 80146e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80146e8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80146ec:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80146f0:	4621      	mov	r1, r4
 80146f2:	4291      	cmp	r1, r2
 80146f4:	4629      	mov	r1, r5
 80146f6:	eb71 0303 	sbcs.w	r3, r1, r3
 80146fa:	d201      	bcs.n	8014700 <mg_str_to_num+0x276>
 80146fc:	2300      	movs	r3, #0
 80146fe:	e0f2      	b.n	80148e6 <mg_str_to_num+0x45c>
        result += digit;
 8014700:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014704:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8014708:	1884      	adds	r4, r0, r2
 801470a:	60bc      	str	r4, [r7, #8]
 801470c:	eb41 0303 	adc.w	r3, r1, r3
 8014710:	60fb      	str	r3, [r7, #12]
 8014712:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014716:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 801471a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801471e:	3301      	adds	r3, #1
 8014720:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014724:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014728:	3301      	adds	r3, #1
 801472a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 801472e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014730:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8014734:	429a      	cmp	r2, r3
 8014736:	f080 80a7 	bcs.w	8014888 <mg_str_to_num+0x3fe>
 801473a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801473c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014740:	4413      	add	r3, r2
 8014742:	781b      	ldrb	r3, [r3, #0]
 8014744:	2b2f      	cmp	r3, #47	@ 0x2f
 8014746:	f240 809f 	bls.w	8014888 <mg_str_to_num+0x3fe>
 801474a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801474c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014750:	4413      	add	r3, r2
 8014752:	781b      	ldrb	r3, [r3, #0]
 8014754:	2b39      	cmp	r3, #57	@ 0x39
 8014756:	d981      	bls.n	801465c <mg_str_to_num+0x1d2>
      }
      break;
 8014758:	e096      	b.n	8014888 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 801475a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801475c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014760:	4413      	add	r3, r2
 8014762:	781b      	ldrb	r3, [r3, #0]
 8014764:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8014768:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801476c:	2b2f      	cmp	r3, #47	@ 0x2f
 801476e:	d90a      	bls.n	8014786 <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8014770:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014774:	2b39      	cmp	r3, #57	@ 0x39
 8014776:	d806      	bhi.n	8014786 <mg_str_to_num+0x2fc>
 8014778:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801477c:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 801477e:	17da      	asrs	r2, r3, #31
 8014780:	643b      	str	r3, [r7, #64]	@ 0x40
 8014782:	647a      	str	r2, [r7, #68]	@ 0x44
 8014784:	e023      	b.n	80147ce <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8014786:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801478a:	2b40      	cmp	r3, #64	@ 0x40
 801478c:	d90a      	bls.n	80147a4 <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 801478e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014792:	2b46      	cmp	r3, #70	@ 0x46
 8014794:	d806      	bhi.n	80147a4 <mg_str_to_num+0x31a>
 8014796:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801479a:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 801479c:	17da      	asrs	r2, r3, #31
 801479e:	643b      	str	r3, [r7, #64]	@ 0x40
 80147a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80147a2:	e014      	b.n	80147ce <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 80147a4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80147a8:	2b60      	cmp	r3, #96	@ 0x60
 80147aa:	d90a      	bls.n	80147c2 <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80147ac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80147b0:	2b66      	cmp	r3, #102	@ 0x66
 80147b2:	d806      	bhi.n	80147c2 <mg_str_to_num+0x338>
 80147b4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80147b8:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 80147ba:	17da      	asrs	r2, r3, #31
 80147bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80147be:	647a      	str	r2, [r7, #68]	@ 0x44
 80147c0:	e005      	b.n	80147ce <mg_str_to_num+0x344>
 80147c2:	f04f 33ff 	mov.w	r3, #4294967295
 80147c6:	f04f 34ff 	mov.w	r4, #4294967295
 80147ca:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80147ce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80147d2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 80147d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80147da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147de:	bf08      	it	eq
 80147e0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80147e4:	d04a      	beq.n	801487c <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 80147e6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80147ea:	f04f 0200 	mov.w	r2, #0
 80147ee:	f04f 0300 	mov.w	r3, #0
 80147f2:	0902      	lsrs	r2, r0, #4
 80147f4:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80147f8:	090b      	lsrs	r3, r1, #4
 80147fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80147fe:	4282      	cmp	r2, r0
 8014800:	418b      	sbcs	r3, r1
 8014802:	d201      	bcs.n	8014808 <mg_str_to_num+0x37e>
 8014804:	2300      	movs	r3, #0
 8014806:	e06e      	b.n	80148e6 <mg_str_to_num+0x45c>
        result *= 16;
 8014808:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801480c:	f04f 0200 	mov.w	r2, #0
 8014810:	f04f 0300 	mov.w	r3, #0
 8014814:	010b      	lsls	r3, r1, #4
 8014816:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 801481a:	0102      	lsls	r2, r0, #4
 801481c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8014820:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8014824:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8014828:	ebb0 0a02 	subs.w	sl, r0, r2
 801482c:	eb61 0b03 	sbc.w	fp, r1, r3
 8014830:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8014834:	4592      	cmp	sl, r2
 8014836:	eb7b 0303 	sbcs.w	r3, fp, r3
 801483a:	d201      	bcs.n	8014840 <mg_str_to_num+0x3b6>
 801483c:	2300      	movs	r3, #0
 801483e:	e052      	b.n	80148e6 <mg_str_to_num+0x45c>
        result += digit;
 8014840:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014844:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8014848:	1884      	adds	r4, r0, r2
 801484a:	603c      	str	r4, [r7, #0]
 801484c:	eb41 0303 	adc.w	r3, r1, r3
 8014850:	607b      	str	r3, [r7, #4]
 8014852:	e9d7 3400 	ldrd	r3, r4, [r7]
 8014856:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 801485a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801485e:	3301      	adds	r3, #1
 8014860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014864:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014868:	3301      	adds	r3, #1
 801486a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 801486e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014870:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8014874:	429a      	cmp	r2, r3
 8014876:	f4ff af70 	bcc.w	801475a <mg_str_to_num+0x2d0>
      }
      break;
 801487a:	e006      	b.n	801488a <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 801487c:	bf00      	nop
      break;
 801487e:	e004      	b.n	801488a <mg_str_to_num+0x400>
    default:
      return false;
 8014880:	2300      	movs	r3, #0
 8014882:	e030      	b.n	80148e6 <mg_str_to_num+0x45c>
      break;
 8014884:	bf00      	nop
 8014886:	e000      	b.n	801488a <mg_str_to_num+0x400>
      break;
 8014888:	bf00      	nop
  }
  if (ndigits == 0) return false;
 801488a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801488e:	2b00      	cmp	r3, #0
 8014890:	d101      	bne.n	8014896 <mg_str_to_num+0x40c>
 8014892:	2300      	movs	r3, #0
 8014894:	e027      	b.n	80148e6 <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 8014896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014898:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801489c:	429a      	cmp	r2, r3
 801489e:	d001      	beq.n	80148a4 <mg_str_to_num+0x41a>
 80148a0:	2300      	movs	r3, #0
 80148a2:	e020      	b.n	80148e6 <mg_str_to_num+0x45c>
  if (val_len == 1) {
 80148a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80148a8:	2b01      	cmp	r3, #1
 80148aa:	d104      	bne.n	80148b6 <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 80148ac:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80148b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148b2:	701a      	strb	r2, [r3, #0]
 80148b4:	e016      	b.n	80148e4 <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 80148b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80148ba:	2b02      	cmp	r3, #2
 80148bc:	d104      	bne.n	80148c8 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 80148be:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80148c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148c4:	801a      	strh	r2, [r3, #0]
 80148c6:	e00d      	b.n	80148e4 <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 80148c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80148cc:	2b04      	cmp	r3, #4
 80148ce:	d104      	bne.n	80148da <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 80148d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80148d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148d6:	601a      	str	r2, [r3, #0]
 80148d8:	e004      	b.n	80148e4 <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 80148da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80148dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80148e0:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 80148e4:	2301      	movs	r3, #1
}
 80148e6:	4618      	mov	r0, r3
 80148e8:	3794      	adds	r7, #148	@ 0x94
 80148ea:	46bd      	mov	sp, r7
 80148ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080148f0 <mg_timer_init>:
#endif



void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 80148f0:	b480      	push	{r7}
 80148f2:	b085      	sub	sp, #20
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	60f8      	str	r0, [r7, #12]
 80148f8:	60b9      	str	r1, [r7, #8]
 80148fa:	e9c7 2300 	strd	r2, r3, [r7]
  t->period_ms = ms, t->expire = 0;
 80148fe:	68b9      	ldr	r1, [r7, #8]
 8014900:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014904:	e9c1 2300 	strd	r2, r3, [r1]
 8014908:	68b9      	ldr	r1, [r7, #8]
 801490a:	f04f 0200 	mov.w	r2, #0
 801490e:	f04f 0300 	mov.w	r3, #0
 8014912:	e9c1 2302 	strd	r2, r3, [r1, #8]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	69ba      	ldr	r2, [r7, #24]
 801491a:	611a      	str	r2, [r3, #16]
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	69fa      	ldr	r2, [r7, #28]
 8014920:	615a      	str	r2, [r3, #20]
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	6a3a      	ldr	r2, [r7, #32]
 8014926:	619a      	str	r2, [r3, #24]
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	681a      	ldr	r2, [r3, #0]
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	61da      	str	r2, [r3, #28]
  *head = t;
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	68ba      	ldr	r2, [r7, #8]
 8014934:	601a      	str	r2, [r3, #0]
}
 8014936:	bf00      	nop
 8014938:	3714      	adds	r7, #20
 801493a:	46bd      	mov	sp, r7
 801493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014940:	4770      	bx	lr

08014942 <mg_timer_free>:

void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {
 8014942:	b480      	push	{r7}
 8014944:	b083      	sub	sp, #12
 8014946:	af00      	add	r7, sp, #0
 8014948:	6078      	str	r0, [r7, #4]
 801494a:	6039      	str	r1, [r7, #0]
  while (*head && *head != t) head = &(*head)->next;
 801494c:	e003      	b.n	8014956 <mg_timer_free+0x14>
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	331c      	adds	r3, #28
 8014954:	607b      	str	r3, [r7, #4]
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d004      	beq.n	8014968 <mg_timer_free+0x26>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	683a      	ldr	r2, [r7, #0]
 8014964:	429a      	cmp	r2, r3
 8014966:	d1f2      	bne.n	801494e <mg_timer_free+0xc>
  if (*head) *head = t->next;
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	681b      	ldr	r3, [r3, #0]
 801496c:	2b00      	cmp	r3, #0
 801496e:	d003      	beq.n	8014978 <mg_timer_free+0x36>
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	69da      	ldr	r2, [r3, #28]
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	601a      	str	r2, [r3, #0]
}
 8014978:	bf00      	nop
 801497a:	370c      	adds	r7, #12
 801497c:	46bd      	mov	sp, r7
 801497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014982:	4770      	bx	lr

08014984 <mg_timer_expired>:

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8014984:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014988:	b086      	sub	sp, #24
 801498a:	af00      	add	r7, sp, #0
 801498c:	6178      	str	r0, [r7, #20]
 801498e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8014992:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8014996:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801499a:	eb10 0a02 	adds.w	sl, r0, r2
 801499e:	eb41 0b03 	adc.w	fp, r1, r3
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a8:	4592      	cmp	sl, r2
 80149aa:	eb7b 0303 	sbcs.w	r3, fp, r3
 80149ae:	d206      	bcs.n	80149be <mg_timer_expired+0x3a>
 80149b0:	6979      	ldr	r1, [r7, #20]
 80149b2:	f04f 0200 	mov.w	r2, #0
 80149b6:	f04f 0300 	mov.w	r3, #0
 80149ba:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c4:	4313      	orrs	r3, r2
 80149c6:	d10d      	bne.n	80149e4 <mg_timer_expired+0x60>
 80149c8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80149cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80149d0:	1886      	adds	r6, r0, r2
 80149d2:	603e      	str	r6, [r7, #0]
 80149d4:	eb41 0303 	adc.w	r3, r1, r3
 80149d8:	607b      	str	r3, [r7, #4]
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80149e0:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ea:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80149ee:	4290      	cmp	r0, r2
 80149f0:	eb71 0303 	sbcs.w	r3, r1, r3
 80149f4:	d201      	bcs.n	80149fa <mg_timer_expired+0x76>
 80149f6:	2300      	movs	r3, #0
 80149f8:	e022      	b.n	8014a40 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a00:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8014a04:	ebb0 0802 	subs.w	r8, r0, r2
 8014a08:	eb61 0903 	sbc.w	r9, r1, r3
 8014a0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014a10:	4542      	cmp	r2, r8
 8014a12:	eb73 0309 	sbcs.w	r3, r3, r9
 8014a16:	d207      	bcs.n	8014a28 <mg_timer_expired+0xa4>
 8014a18:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8014a1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014a20:	1884      	adds	r4, r0, r2
 8014a22:	eb41 0503 	adc.w	r5, r1, r3
 8014a26:	e007      	b.n	8014a38 <mg_timer_expired+0xb4>
 8014a28:	697b      	ldr	r3, [r7, #20]
 8014a2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014a32:	1884      	adds	r4, r0, r2
 8014a34:	eb41 0503 	adc.w	r5, r1, r3
 8014a38:	697b      	ldr	r3, [r7, #20]
 8014a3a:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8014a3e:	2301      	movs	r3, #1
}
 8014a40:	4618      	mov	r0, r3
 8014a42:	3718      	adds	r7, #24
 8014a44:	46bd      	mov	sp, r7
 8014a46:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014a4a:	4770      	bx	lr

08014a4c <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8014a4c:	b590      	push	{r4, r7, lr}
 8014a4e:	b08b      	sub	sp, #44	@ 0x2c
 8014a50:	af02      	add	r7, sp, #8
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	61fb      	str	r3, [r7, #28]
 8014a5e:	e067      	b.n	8014b30 <mg_timer_poll+0xe4>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8014a60:	69fb      	ldr	r3, [r7, #28]
 8014a62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8014a66:	4313      	orrs	r3, r2
 8014a68:	d10d      	bne.n	8014a86 <mg_timer_poll+0x3a>
 8014a6a:	69fb      	ldr	r3, [r7, #28]
 8014a6c:	691b      	ldr	r3, [r3, #16]
 8014a6e:	f003 0302 	and.w	r3, r3, #2
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d007      	beq.n	8014a86 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8014a76:	69fb      	ldr	r3, [r7, #28]
 8014a78:	691b      	ldr	r3, [r3, #16]
 8014a7a:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d101      	bne.n	8014a86 <mg_timer_poll+0x3a>
 8014a82:	2301      	movs	r3, #1
 8014a84:	e000      	b.n	8014a88 <mg_timer_poll+0x3c>
 8014a86:	2300      	movs	r3, #0
 8014a88:	76fb      	strb	r3, [r7, #27]
 8014a8a:	7efb      	ldrb	r3, [r7, #27]
 8014a8c:	f003 0301 	and.w	r3, r3, #1
 8014a90:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	f103 0408 	add.w	r4, r3, #8
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014a9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014aa2:	e9cd 2300 	strd	r2, r3, [sp]
 8014aa6:	4602      	mov	r2, r0
 8014aa8:	460b      	mov	r3, r1
 8014aaa:	4620      	mov	r0, r4
 8014aac:	f7ff ff6a 	bl	8014984 <mg_timer_expired>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	69db      	ldr	r3, [r3, #28]
 8014ab8:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8014aba:	7efb      	ldrb	r3, [r7, #27]
 8014abc:	f083 0301 	eor.w	r3, r3, #1
 8014ac0:	b2db      	uxtb	r3, r3
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d005      	beq.n	8014ad2 <mg_timer_poll+0x86>
 8014ac6:	7ebb      	ldrb	r3, [r7, #26]
 8014ac8:	f083 0301 	eor.w	r3, r3, #1
 8014acc:	b2db      	uxtb	r3, r3
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d12b      	bne.n	8014b2a <mg_timer_poll+0xde>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	691b      	ldr	r3, [r3, #16]
 8014ad6:	f003 0301 	and.w	r3, r3, #1
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d105      	bne.n	8014aea <mg_timer_poll+0x9e>
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	691b      	ldr	r3, [r3, #16]
 8014ae2:	f003 0304 	and.w	r3, r3, #4
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d105      	bne.n	8014af6 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	695b      	ldr	r3, [r3, #20]
 8014aee:	69fa      	ldr	r2, [r7, #28]
 8014af0:	6992      	ldr	r2, [r2, #24]
 8014af2:	4610      	mov	r0, r2
 8014af4:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	691b      	ldr	r3, [r3, #16]
 8014afa:	f043 0204 	orr.w	r2, r3, #4
 8014afe:	69fb      	ldr	r3, [r7, #28]
 8014b00:	611a      	str	r2, [r3, #16]

    // If this timer is not repeating and marked AUTODELETE, remove it
    if (!(t->flags & MG_TIMER_REPEAT) && (t->flags & MG_TIMER_AUTODELETE)) {
 8014b02:	69fb      	ldr	r3, [r7, #28]
 8014b04:	691b      	ldr	r3, [r3, #16]
 8014b06:	f003 0301 	and.w	r3, r3, #1
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d10e      	bne.n	8014b2c <mg_timer_poll+0xe0>
 8014b0e:	69fb      	ldr	r3, [r7, #28]
 8014b10:	691b      	ldr	r3, [r3, #16]
 8014b12:	f003 0308 	and.w	r3, r3, #8
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d008      	beq.n	8014b2c <mg_timer_poll+0xe0>
      mg_timer_free(head, t);
 8014b1a:	69f9      	ldr	r1, [r7, #28]
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f7ff ff10 	bl	8014942 <mg_timer_free>
      free(t);
 8014b22:	69f8      	ldr	r0, [r7, #28]
 8014b24:	f00e fa46 	bl	8022fb4 <free>
 8014b28:	e000      	b.n	8014b2c <mg_timer_poll+0xe0>
    if (!once && !expired) continue;
 8014b2a:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	61fb      	str	r3, [r7, #28]
 8014b30:	69fb      	ldr	r3, [r7, #28]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d194      	bne.n	8014a60 <mg_timer_poll+0x14>
    }
  }
}
 8014b36:	bf00      	nop
 8014b38:	bf00      	nop
 8014b3a:	3724      	adds	r7, #36	@ 0x24
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd90      	pop	{r4, r7, pc}

08014b40 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b086      	sub	sp, #24
 8014b44:	af02      	add	r7, sp, #8
 8014b46:	60f8      	str	r0, [r7, #12]
 8014b48:	60b9      	str	r1, [r7, #8]
 8014b4a:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 8014b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8014b7c <mg_tls_hexdump+0x3c>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	2b03      	cmp	r3, #3
 8014b52:	dd0e      	ble.n	8014b72 <mg_tls_hexdump+0x32>
 8014b54:	4b0a      	ldr	r3, [pc, #40]	@ (8014b80 <mg_tls_hexdump+0x40>)
 8014b56:	f642 22dc 	movw	r2, #10972	@ 0x2adc
 8014b5a:	490a      	ldr	r1, [pc, #40]	@ (8014b84 <mg_tls_hexdump+0x44>)
 8014b5c:	2004      	movs	r0, #4
 8014b5e:	f7f7 fbed 	bl	800c33c <mg_log_prefix>
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	9300      	str	r3, [sp, #0]
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	4a07      	ldr	r2, [pc, #28]	@ (8014b88 <mg_tls_hexdump+0x48>)
 8014b6a:	68f9      	ldr	r1, [r7, #12]
 8014b6c:	4807      	ldr	r0, [pc, #28]	@ (8014b8c <mg_tls_hexdump+0x4c>)
 8014b6e:	f7f7 fc35 	bl	800c3dc <mg_log>
}
 8014b72:	bf00      	nop
 8014b74:	3710      	adds	r7, #16
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	24000258 	.word	0x24000258
 8014b80:	08027f54 	.word	0x08027f54
 8014b84:	080241e8 	.word	0x080241e8
 8014b88:	08010c4d 	.word	0x08010c4d
 8014b8c:	08025ba4 	.word	0x08025ba4

08014b90 <mg_der_parse>:
  uint8_t type;
  uint32_t len;
  uint8_t *value;
};

static int mg_der_parse(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8014b90:	b480      	push	{r7}
 8014b92:	b089      	sub	sp, #36	@ 0x24
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	607a      	str	r2, [r7, #4]
  size_t header_len = 2;
 8014b9c:	2302      	movs	r3, #2
 8014b9e:	61fb      	str	r3, [r7, #28]
  uint32_t len = dersz < 2 ? 0 : der[1];
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	2b01      	cmp	r3, #1
 8014ba4:	d903      	bls.n	8014bae <mg_der_parse+0x1e>
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	3301      	adds	r3, #1
 8014baa:	781b      	ldrb	r3, [r3, #0]
 8014bac:	e000      	b.n	8014bb0 <mg_der_parse+0x20>
 8014bae:	2300      	movs	r3, #0
 8014bb0:	61bb      	str	r3, [r7, #24]
  if (dersz < 2) return -1;  // Invalid DER
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	2b01      	cmp	r3, #1
 8014bb6:	d802      	bhi.n	8014bbe <mg_der_parse+0x2e>
 8014bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014bbc:	e042      	b.n	8014c44 <mg_der_parse+0xb4>
  tlv->type = der[0];
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	781a      	ldrb	r2, [r3, #0]
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	701a      	strb	r2, [r3, #0]
  if (len > 0x7F) {  // long-form length
 8014bc6:	69bb      	ldr	r3, [r7, #24]
 8014bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8014bca:	d927      	bls.n	8014c1c <mg_der_parse+0x8c>
    uint8_t len_bytes = len & 0x7F;
 8014bcc:	69bb      	ldr	r3, [r7, #24]
 8014bce:	b2db      	uxtb	r3, r3
 8014bd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014bd4:	75bb      	strb	r3, [r7, #22]
    if (dersz < (size_t) (2 + len_bytes)) return -1;
 8014bd6:	7dbb      	ldrb	r3, [r7, #22]
 8014bd8:	3302      	adds	r3, #2
 8014bda:	461a      	mov	r2, r3
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	4293      	cmp	r3, r2
 8014be0:	d202      	bcs.n	8014be8 <mg_der_parse+0x58>
 8014be2:	f04f 33ff 	mov.w	r3, #4294967295
 8014be6:	e02d      	b.n	8014c44 <mg_der_parse+0xb4>
    len = 0;
 8014be8:	2300      	movs	r3, #0
 8014bea:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 8014bec:	2300      	movs	r3, #0
 8014bee:	75fb      	strb	r3, [r7, #23]
 8014bf0:	e00c      	b.n	8014c0c <mg_der_parse+0x7c>
      len = (len << 8) | der[2 + i];
 8014bf2:	69bb      	ldr	r3, [r7, #24]
 8014bf4:	021b      	lsls	r3, r3, #8
 8014bf6:	7dfa      	ldrb	r2, [r7, #23]
 8014bf8:	3202      	adds	r2, #2
 8014bfa:	4611      	mov	r1, r2
 8014bfc:	68fa      	ldr	r2, [r7, #12]
 8014bfe:	440a      	add	r2, r1
 8014c00:	7812      	ldrb	r2, [r2, #0]
 8014c02:	4313      	orrs	r3, r2
 8014c04:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 8014c06:	7dfb      	ldrb	r3, [r7, #23]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	75fb      	strb	r3, [r7, #23]
 8014c0c:	7dfa      	ldrb	r2, [r7, #23]
 8014c0e:	7dbb      	ldrb	r3, [r7, #22]
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d3ee      	bcc.n	8014bf2 <mg_der_parse+0x62>
    }
    header_len += len_bytes;
 8014c14:	7dbb      	ldrb	r3, [r7, #22]
 8014c16:	69fa      	ldr	r2, [r7, #28]
 8014c18:	4413      	add	r3, r2
 8014c1a:	61fb      	str	r3, [r7, #28]
  }
  if (dersz < header_len + len) return -1;
 8014c1c:	69fa      	ldr	r2, [r7, #28]
 8014c1e:	69bb      	ldr	r3, [r7, #24]
 8014c20:	4413      	add	r3, r2
 8014c22:	68ba      	ldr	r2, [r7, #8]
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d202      	bcs.n	8014c2e <mg_der_parse+0x9e>
 8014c28:	f04f 33ff 	mov.w	r3, #4294967295
 8014c2c:	e00a      	b.n	8014c44 <mg_der_parse+0xb4>
  tlv->len = len;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	69ba      	ldr	r2, [r7, #24]
 8014c32:	605a      	str	r2, [r3, #4]
  tlv->value = der + header_len;
 8014c34:	68fa      	ldr	r2, [r7, #12]
 8014c36:	69fb      	ldr	r3, [r7, #28]
 8014c38:	441a      	add	r2, r3
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	609a      	str	r2, [r3, #8]
  return (int) (header_len + len);
 8014c3e:	69fa      	ldr	r2, [r7, #28]
 8014c40:	69bb      	ldr	r3, [r7, #24]
 8014c42:	4413      	add	r3, r2
}
 8014c44:	4618      	mov	r0, r3
 8014c46:	3724      	adds	r7, #36	@ 0x24
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c4e:	4770      	bx	lr

08014c50 <mg_der_next>:

static int mg_der_next(struct mg_der_tlv *parent, struct mg_der_tlv *child) {
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b084      	sub	sp, #16
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	6039      	str	r1, [r7, #0]
  if (parent->len == 0) return 0;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	685b      	ldr	r3, [r3, #4]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d101      	bne.n	8014c66 <mg_der_next+0x16>
 8014c62:	2300      	movs	r3, #0
 8014c64:	e01b      	b.n	8014c9e <mg_der_next+0x4e>
  int consumed = mg_der_parse(parent->value, parent->len, child);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	6898      	ldr	r0, [r3, #8]
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	685b      	ldr	r3, [r3, #4]
 8014c6e:	683a      	ldr	r2, [r7, #0]
 8014c70:	4619      	mov	r1, r3
 8014c72:	f7ff ff8d 	bl	8014b90 <mg_der_parse>
 8014c76:	60f8      	str	r0, [r7, #12]
  if (consumed < 0) return -1;
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	da02      	bge.n	8014c84 <mg_der_next+0x34>
 8014c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c82:	e00c      	b.n	8014c9e <mg_der_next+0x4e>
  parent->value += consumed;
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	689a      	ldr	r2, [r3, #8]
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	441a      	add	r2, r3
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	609a      	str	r2, [r3, #8]
  parent->len -= (uint32_t) consumed;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	685a      	ldr	r2, [r3, #4]
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	1ad2      	subs	r2, r2, r3
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	605a      	str	r2, [r3, #4]
  return 1;
 8014c9c:	2301      	movs	r3, #1
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3710      	adds	r7, #16
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}

08014ca6 <mg_der_find_oid>:

static int mg_der_find_oid(struct mg_der_tlv *tlv, const uint8_t *oid,
                           size_t oid_len, struct mg_der_tlv *found) {
 8014ca6:	b580      	push	{r7, lr}
 8014ca8:	b08e      	sub	sp, #56	@ 0x38
 8014caa:	af00      	add	r7, sp, #0
 8014cac:	60f8      	str	r0, [r7, #12]
 8014cae:	60b9      	str	r1, [r7, #8]
 8014cb0:	607a      	str	r2, [r7, #4]
 8014cb2:	603b      	str	r3, [r7, #0]
  struct mg_der_tlv parent, child;
  parent = *tlv;
 8014cb4:	68fa      	ldr	r2, [r7, #12]
 8014cb6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8014cbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (mg_der_next(&parent, &child) > 0) {
 8014cc0:	e031      	b.n	8014d26 <mg_der_find_oid+0x80>
    if (child.type == 0x06 && child.len == oid_len &&
 8014cc2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cc6:	2b06      	cmp	r3, #6
 8014cc8:	d114      	bne.n	8014cf4 <mg_der_find_oid+0x4e>
 8014cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ccc:	687a      	ldr	r2, [r7, #4]
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d110      	bne.n	8014cf4 <mg_der_find_oid+0x4e>
        memcmp(child.value, oid, oid_len) == 0) {
 8014cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	68b9      	ldr	r1, [r7, #8]
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f00e fbf2 	bl	80234c2 <memcmp>
 8014cde:	4603      	mov	r3, r0
    if (child.type == 0x06 && child.len == oid_len &&
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d107      	bne.n	8014cf4 <mg_der_find_oid+0x4e>
      return mg_der_next(&parent, found);
 8014ce4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014ce8:	6839      	ldr	r1, [r7, #0]
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7ff ffb0 	bl	8014c50 <mg_der_next>
 8014cf0:	4603      	mov	r3, r0
 8014cf2:	e024      	b.n	8014d3e <mg_der_find_oid+0x98>
    } else if (child.type & 0x20) {
 8014cf4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014cf8:	f003 0320 	and.w	r3, r3, #32
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d012      	beq.n	8014d26 <mg_der_find_oid+0x80>
      struct mg_der_tlv sub_parent = child;
 8014d00:	f107 0314 	add.w	r3, r7, #20
 8014d04:	f107 0220 	add.w	r2, r7, #32
 8014d08:	ca07      	ldmia	r2, {r0, r1, r2}
 8014d0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      if (mg_der_find_oid(&sub_parent, oid, oid_len, found)) return 1;
 8014d0e:	f107 0014 	add.w	r0, r7, #20
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	687a      	ldr	r2, [r7, #4]
 8014d16:	68b9      	ldr	r1, [r7, #8]
 8014d18:	f7ff ffc5 	bl	8014ca6 <mg_der_find_oid>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d001      	beq.n	8014d26 <mg_der_find_oid+0x80>
 8014d22:	2301      	movs	r3, #1
 8014d24:	e00b      	b.n	8014d3e <mg_der_find_oid+0x98>
  while (mg_der_next(&parent, &child) > 0) {
 8014d26:	f107 0220 	add.w	r2, r7, #32
 8014d2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014d2e:	4611      	mov	r1, r2
 8014d30:	4618      	mov	r0, r3
 8014d32:	f7ff ff8d 	bl	8014c50 <mg_der_next>
 8014d36:	4603      	mov	r3, r0
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	dcc2      	bgt.n	8014cc2 <mg_der_find_oid+0x1c>
    }
  }
  return 0;
 8014d3c:	2300      	movs	r3, #0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3738      	adds	r7, #56	@ 0x38
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}

08014d46 <mg_der_to_tlv>:
  }
}
#endif

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8014d46:	b480      	push	{r7}
 8014d48:	b087      	sub	sp, #28
 8014d4a:	af00      	add	r7, sp, #0
 8014d4c:	60f8      	str	r0, [r7, #12]
 8014d4e:	60b9      	str	r1, [r7, #8]
 8014d50:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	2b01      	cmp	r3, #1
 8014d56:	d802      	bhi.n	8014d5e <mg_der_to_tlv+0x18>
    return -1;
 8014d58:	f04f 33ff 	mov.w	r3, #4294967295
 8014d5c:	e041      	b.n	8014de2 <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	781a      	ldrb	r2, [r3, #0]
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	3301      	adds	r3, #1
 8014d6a:	781b      	ldrb	r3, [r3, #0]
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	1c9a      	adds	r2, r3, #2
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	685b      	ldr	r3, [r3, #4]
 8014d7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014d80:	d921      	bls.n	8014dc6 <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	685b      	ldr	r3, [r3, #4]
 8014d86:	3b80      	subs	r3, #128	@ 0x80
 8014d88:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8014d90:	2300      	movs	r3, #0
 8014d92:	617b      	str	r3, [r7, #20]
 8014d94:	e00d      	b.n	8014db2 <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	685b      	ldr	r3, [r3, #4]
 8014d9a:	021b      	lsls	r3, r3, #8
 8014d9c:	697a      	ldr	r2, [r7, #20]
 8014d9e:	3202      	adds	r2, #2
 8014da0:	68f9      	ldr	r1, [r7, #12]
 8014da2:	440a      	add	r2, r1
 8014da4:	7812      	ldrb	r2, [r2, #0]
 8014da6:	431a      	orrs	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	3301      	adds	r3, #1
 8014db0:	617b      	str	r3, [r7, #20]
 8014db2:	697a      	ldr	r2, [r7, #20]
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	429a      	cmp	r2, r3
 8014db8:	d3ed      	bcc.n	8014d96 <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	3302      	adds	r3, #2
 8014dbe:	68fa      	ldr	r2, [r7, #12]
 8014dc0:	441a      	add	r2, r3
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 8014dc6:	68fa      	ldr	r2, [r7, #12]
 8014dc8:	68bb      	ldr	r3, [r7, #8]
 8014dca:	441a      	add	r2, r3
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6899      	ldr	r1, [r3, #8]
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	685b      	ldr	r3, [r3, #4]
 8014dd4:	440b      	add	r3, r1
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d202      	bcs.n	8014de0 <mg_der_to_tlv+0x9a>
    return -1;
 8014dda:	f04f 33ff 	mov.w	r3, #4294967295
 8014dde:	e000      	b.n	8014de2 <mg_der_to_tlv+0x9c>
  }
  return 0;
 8014de0:	2300      	movs	r3, #0
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	371c      	adds	r7, #28
 8014de6:	46bd      	mov	sp, r7
 8014de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dec:	4770      	bx	lr

08014dee <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 8014dee:	b480      	push	{r7}
 8014df0:	b083      	sub	sp, #12
 8014df2:	af00      	add	r7, sp, #0
 8014df4:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014dfa:	2b04      	cmp	r3, #4
 8014dfc:	d915      	bls.n	8014e2a <mg_tls_got_record+0x3c>
         c->rtls.len >=
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014e06:	3203      	adds	r2, #3
 8014e08:	7812      	ldrb	r2, [r2, #0]
 8014e0a:	b212      	sxth	r2, r2
 8014e0c:	0212      	lsls	r2, r2, #8
 8014e0e:	b211      	sxth	r1, r2
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014e14:	3204      	adds	r2, #4
 8014e16:	7812      	ldrb	r2, [r2, #0]
 8014e18:	b212      	sxth	r2, r2
 8014e1a:	430a      	orrs	r2, r1
 8014e1c:	b212      	sxth	r2, r2
 8014e1e:	b292      	uxth	r2, r2
 8014e20:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8014e22:	4293      	cmp	r3, r2
 8014e24:	d301      	bcc.n	8014e2a <mg_tls_got_record+0x3c>
 8014e26:	2301      	movs	r3, #1
 8014e28:	e000      	b.n	8014e2c <mg_tls_got_record+0x3e>
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	f003 0301 	and.w	r3, r3, #1
 8014e30:	b2db      	uxtb	r3, r3
}
 8014e32:	4618      	mov	r0, r3
 8014e34:	370c      	adds	r7, #12
 8014e36:	46bd      	mov	sp, r7
 8014e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e3c:	4770      	bx	lr

08014e3e <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 8014e3e:	b580      	push	{r7, lr}
 8014e40:	b084      	sub	sp, #16
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	3368      	adds	r3, #104	@ 0x68
 8014e4a:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	3303      	adds	r3, #3
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	b21b      	sxth	r3, r3
 8014e56:	021b      	lsls	r3, r3, #8
 8014e58:	b21a      	sxth	r2, r3
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	3304      	adds	r3, #4
 8014e60:	781b      	ldrb	r3, [r3, #0]
 8014e62:	b21b      	sxth	r3, r3
 8014e64:	4313      	orrs	r3, r2
 8014e66:	b21b      	sxth	r3, r3
 8014e68:	b29b      	uxth	r3, r3
 8014e6a:	3305      	adds	r3, #5
 8014e6c:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 8014e6e:	897b      	ldrh	r3, [r7, #10]
 8014e70:	461a      	mov	r2, r3
 8014e72:	2100      	movs	r1, #0
 8014e74:	68f8      	ldr	r0, [r7, #12]
 8014e76:	f7f6 fb95 	bl	800b5a4 <mg_iobuf_del>
}
 8014e7a:	bf00      	nop
 8014e7c:	3710      	adds	r7, #16
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	bd80      	pop	{r7, pc}
	...

08014e84 <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b086      	sub	sp, #24
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014e92:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8014e98:	697b      	ldr	r3, [r7, #20]
 8014e9a:	695b      	ldr	r3, [r3, #20]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	699b      	ldr	r3, [r3, #24]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d033      	beq.n	8014f10 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 8014ea8:	693b      	ldr	r3, [r7, #16]
 8014eaa:	3301      	adds	r3, #1
 8014eac:	781b      	ldrb	r3, [r3, #0]
 8014eae:	041a      	lsls	r2, r3, #16
 8014eb0:	693b      	ldr	r3, [r7, #16]
 8014eb2:	3302      	adds	r3, #2
 8014eb4:	781b      	ldrb	r3, [r3, #0]
 8014eb6:	021b      	lsls	r3, r3, #8
 8014eb8:	4313      	orrs	r3, r2
 8014eba:	693a      	ldr	r2, [r7, #16]
 8014ebc:	3203      	adds	r2, #3
 8014ebe:	7812      	ldrb	r2, [r2, #0]
 8014ec0:	4313      	orrs	r3, r2
 8014ec2:	3304      	adds	r3, #4
 8014ec4:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	699b      	ldr	r3, [r3, #24]
 8014eca:	68fa      	ldr	r2, [r7, #12]
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d904      	bls.n	8014eda <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 8014ed0:	4911      	ldr	r1, [pc, #68]	@ (8014f18 <mg_tls_drop_message+0x94>)
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f7f1 fd22 	bl	800691c <mg_error>
    return;
 8014ed8:	e01b      	b.n	8014f12 <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	3320      	adds	r3, #32
 8014ede:	68fa      	ldr	r2, [r7, #12]
 8014ee0:	6939      	ldr	r1, [r7, #16]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7fd fdec 	bl	8012ac0 <mg_sha256_update>
  tls->recv_offset += len;
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	695a      	ldr	r2, [r3, #20]
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	441a      	add	r2, r3
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	699a      	ldr	r2, [r3, #24]
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	1ad2      	subs	r2, r2, r3
 8014efc:	697b      	ldr	r3, [r7, #20]
 8014efe:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	699b      	ldr	r3, [r3, #24]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d104      	bne.n	8014f12 <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f7ff ff98 	bl	8014e3e <mg_tls_drop_record>
 8014f0e:	e000      	b.n	8014f12 <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 8014f10:	bf00      	nop
  }
}
 8014f12:	3718      	adds	r7, #24
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	08025bac 	.word	0x08025bac

08014f1c <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 8014f1c:	b590      	push	{r4, r7, lr}
 8014f1e:	b0d1      	sub	sp, #324	@ 0x144
 8014f20:	af02      	add	r7, sp, #8
 8014f22:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8014f26:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8014f2a:	6020      	str	r0, [r4, #0]
 8014f2c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8014f30:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8014f34:	6001      	str	r1, [r0, #0]
 8014f36:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014f3a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8014f3e:	600a      	str	r2, [r1, #0]
 8014f40:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014f44:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8014f48:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 8014f4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f4e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f52:	6818      	ldr	r0, [r3, #0]
 8014f54:	f7eb fa3c 	bl	80003d0 <strlen>
 8014f58:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 8014f5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f60:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014f64:	4618      	mov	r0, r3
 8014f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	2100      	movs	r1, #0
 8014f6e:	f00e fad2 	bl	8023516 <memset>
 8014f72:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8014f76:	b2da      	uxtb	r2, r3
 8014f78:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f7c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014f80:	705a      	strb	r2, [r3, #1]
 8014f82:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f86:	b2da      	uxtb	r2, r3
 8014f88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014f8c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8014f90:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 8014f92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d00c      	beq.n	8014fb4 <mg_tls_derive_secret+0x98>
 8014f9a:	f107 0314 	add.w	r3, r7, #20
 8014f9e:	3303      	adds	r3, #3
 8014fa0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014fa4:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 8014fa8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8014fac:	6809      	ldr	r1, [r1, #0]
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f00e fa97 	bl	80234e2 <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 8014fb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fb8:	3303      	adds	r3, #3
 8014fba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8014fbe:	b2d1      	uxtb	r1, r2
 8014fc0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014fc4:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8014fc8:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 8014fca:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d00e      	beq.n	8014ff0 <mg_tls_derive_secret+0xd4>
 8014fd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014fd6:	3304      	adds	r3, #4
 8014fd8:	f107 0214 	add.w	r2, r7, #20
 8014fdc:	18d0      	adds	r0, r2, r3
 8014fde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fe2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8014fe6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8014fea:	6819      	ldr	r1, [r3, #0]
 8014fec:	f00e fa79 	bl	80234e2 <memmove>
  packed[4 + labelsz + datasz] = 1;
 8014ff0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8014ff4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8014ff8:	4413      	add	r3, r2
 8014ffa:	3304      	adds	r3, #4
 8014ffc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015000:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8015004:	2101      	movs	r1, #1
 8015006:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 8015008:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801500c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8015010:	4413      	add	r3, r2
 8015012:	3305      	adds	r3, #5
 8015014:	f107 0414 	add.w	r4, r7, #20
 8015018:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801501c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8015020:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015024:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 8015028:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 801502c:	9300      	str	r3, [sp, #0]
 801502e:	4623      	mov	r3, r4
 8015030:	6812      	ldr	r2, [r2, #0]
 8015032:	6809      	ldr	r1, [r1, #0]
 8015034:	f7fd fed1 	bl	8012dda <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 8015038:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 801503c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8015040:	4619      	mov	r1, r3
 8015042:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8015046:	f00e fa4c 	bl	80234e2 <memmove>
}
 801504a:	bf00      	nop
 801504c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8015050:	46bd      	mov	sp, r7
 8015052:	bd90      	pop	{r4, r7, pc}

08015054 <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 8015054:	b580      	push	{r7, lr}
 8015056:	b0cc      	sub	sp, #304	@ 0x130
 8015058:	af04      	add	r7, sp, #16
 801505a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801505e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015062:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015064:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015068:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015072:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8015076:	2320      	movs	r3, #32
 8015078:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 801507c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8015080:	2320      	movs	r3, #32
 8015082:	9300      	str	r3, [sp, #0]
 8015084:	4b89      	ldr	r3, [pc, #548]	@ (80152ac <mg_tls_generate_handshake_keys+0x258>)
 8015086:	2200      	movs	r2, #0
 8015088:	2100      	movs	r1, #0
 801508a:	f7fd fea6 	bl	8012dda <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 801508e:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8015092:	2320      	movs	r3, #32
 8015094:	9302      	str	r3, [sp, #8]
 8015096:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 801509a:	9301      	str	r3, [sp, #4]
 801509c:	2320      	movs	r3, #32
 801509e:	9300      	str	r3, [sp, #0]
 80150a0:	4b83      	ldr	r3, [pc, #524]	@ (80152b0 <mg_tls_generate_handshake_keys+0x25c>)
 80150a2:	2220      	movs	r2, #32
 80150a4:	4883      	ldr	r0, [pc, #524]	@ (80152b4 <mg_tls_generate_handshake_keys+0x260>)
 80150a6:	f7ff ff39 	bl	8014f1c <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 80150aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80150ae:	f503 6091 	add.w	r0, r3, #1160	@ 0x488
                 sizeof(pre_extract_secret), tls->x25519_sec,
 80150b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80150b6:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 80150b8:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80150bc:	2220      	movs	r2, #32
 80150be:	9200      	str	r2, [sp, #0]
 80150c0:	2220      	movs	r2, #32
 80150c2:	f7fd fe8a 	bl	8012dda <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 80150c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80150ca:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 80150ce:	2220      	movs	r2, #32
 80150d0:	4619      	mov	r1, r3
 80150d2:	4879      	ldr	r0, [pc, #484]	@ (80152b8 <mg_tls_generate_handshake_keys+0x264>)
 80150d4:	f7ff fd34 	bl	8014b40 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80150d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80150dc:	f103 0120 	add.w	r1, r3, #32
 80150e0:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80150e4:	2270      	movs	r2, #112	@ 0x70
 80150e6:	4618      	mov	r0, r3
 80150e8:	f00e f9fb 	bl	80234e2 <memmove>
  mg_sha256_final(hello_hash, &sha256);
 80150ec:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80150f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80150f4:	4611      	mov	r1, r2
 80150f6:	4618      	mov	r0, r3
 80150f8:	f7fd fd1b 	bl	8012b32 <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 80150fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8015100:	2220      	movs	r2, #32
 8015102:	4619      	mov	r1, r3
 8015104:	486d      	ldr	r0, [pc, #436]	@ (80152bc <mg_tls_generate_handshake_keys+0x268>)
 8015106:	f7ff fd1b 	bl	8014b40 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 801510a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801510e:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8015112:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8015116:	2320      	movs	r3, #32
 8015118:	9302      	str	r3, [sp, #8]
 801511a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801511e:	9301      	str	r3, [sp, #4]
 8015120:	2320      	movs	r3, #32
 8015122:	9300      	str	r3, [sp, #0]
 8015124:	4613      	mov	r3, r2
 8015126:	2220      	movs	r2, #32
 8015128:	4865      	ldr	r0, [pc, #404]	@ (80152c0 <mg_tls_generate_handshake_keys+0x26c>)
 801512a:	f7ff fef7 	bl	8014f1c <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 801512e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015132:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8015136:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801513a:	2320      	movs	r3, #32
 801513c:	9302      	str	r3, [sp, #8]
 801513e:	f107 0308 	add.w	r3, r7, #8
 8015142:	9301      	str	r3, [sp, #4]
 8015144:	2320      	movs	r3, #32
 8015146:	9300      	str	r3, [sp, #0]
 8015148:	4613      	mov	r3, r2
 801514a:	2220      	movs	r2, #32
 801514c:	485d      	ldr	r0, [pc, #372]	@ (80152c4 <mg_tls_generate_handshake_keys+0x270>)
 801514e:	f7ff fee5 	bl	8014f1c <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8015152:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015156:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 801515a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801515e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8015162:	9202      	str	r2, [sp, #8]
 8015164:	9301      	str	r3, [sp, #4]
 8015166:	2300      	movs	r3, #0
 8015168:	9300      	str	r3, [sp, #0]
 801516a:	2300      	movs	r3, #0
 801516c:	2220      	movs	r2, #32
 801516e:	4856      	ldr	r0, [pc, #344]	@ (80152c8 <mg_tls_generate_handshake_keys+0x274>)
 8015170:	f7ff fed4 	bl	8014f1c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8015174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015178:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 801517c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8015180:	220c      	movs	r2, #12
 8015182:	9202      	str	r2, [sp, #8]
 8015184:	9301      	str	r3, [sp, #4]
 8015186:	2300      	movs	r3, #0
 8015188:	9300      	str	r3, [sp, #0]
 801518a:	2300      	movs	r3, #0
 801518c:	2220      	movs	r2, #32
 801518e:	484f      	ldr	r0, [pc, #316]	@ (80152cc <mg_tls_generate_handshake_keys+0x278>)
 8015190:	f7ff fec4 	bl	8014f1c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 8015194:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015198:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 801519c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80151a0:	2220      	movs	r2, #32
 80151a2:	9202      	str	r2, [sp, #8]
 80151a4:	9301      	str	r3, [sp, #4]
 80151a6:	2300      	movs	r3, #0
 80151a8:	9300      	str	r3, [sp, #0]
 80151aa:	2300      	movs	r3, #0
 80151ac:	2220      	movs	r2, #32
 80151ae:	4848      	ldr	r0, [pc, #288]	@ (80152d0 <mg_tls_generate_handshake_keys+0x27c>)
 80151b0:	f7ff feb4 	bl	8014f1c <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 80151b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151b8:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 80151bc:	f107 0108 	add.w	r1, r7, #8
 80151c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80151c4:	9202      	str	r2, [sp, #8]
 80151c6:	9301      	str	r3, [sp, #4]
 80151c8:	2300      	movs	r3, #0
 80151ca:	9300      	str	r3, [sp, #0]
 80151cc:	2300      	movs	r3, #0
 80151ce:	2220      	movs	r2, #32
 80151d0:	483d      	ldr	r0, [pc, #244]	@ (80152c8 <mg_tls_generate_handshake_keys+0x274>)
 80151d2:	f7ff fea3 	bl	8014f1c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 80151d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151da:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 80151de:	f107 0108 	add.w	r1, r7, #8
 80151e2:	220c      	movs	r2, #12
 80151e4:	9202      	str	r2, [sp, #8]
 80151e6:	9301      	str	r3, [sp, #4]
 80151e8:	2300      	movs	r3, #0
 80151ea:	9300      	str	r3, [sp, #0]
 80151ec:	2300      	movs	r3, #0
 80151ee:	2220      	movs	r2, #32
 80151f0:	4836      	ldr	r0, [pc, #216]	@ (80152cc <mg_tls_generate_handshake_keys+0x278>)
 80151f2:	f7ff fe93 	bl	8014f1c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 80151f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151fa:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 80151fe:	f107 0108 	add.w	r1, r7, #8
 8015202:	2220      	movs	r2, #32
 8015204:	9202      	str	r2, [sp, #8]
 8015206:	9301      	str	r3, [sp, #4]
 8015208:	2300      	movs	r3, #0
 801520a:	9300      	str	r3, [sp, #0]
 801520c:	2300      	movs	r3, #0
 801520e:	2220      	movs	r2, #32
 8015210:	482f      	ldr	r0, [pc, #188]	@ (80152d0 <mg_tls_generate_handshake_keys+0x27c>)
 8015212:	f7ff fe83 	bl	8014f1c <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 8015216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801521a:	2220      	movs	r2, #32
 801521c:	4619      	mov	r1, r3
 801521e:	482d      	ldr	r0, [pc, #180]	@ (80152d4 <mg_tls_generate_handshake_keys+0x280>)
 8015220:	f7ff fc8e 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8015224:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015228:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 801522c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8015230:	4619      	mov	r1, r3
 8015232:	4829      	ldr	r0, [pc, #164]	@ (80152d8 <mg_tls_generate_handshake_keys+0x284>)
 8015234:	f7ff fc84 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8015238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801523c:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8015240:	220c      	movs	r2, #12
 8015242:	4619      	mov	r1, r3
 8015244:	4825      	ldr	r0, [pc, #148]	@ (80152dc <mg_tls_generate_handshake_keys+0x288>)
 8015246:	f7ff fc7b 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 801524a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801524e:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8015252:	2220      	movs	r2, #32
 8015254:	4619      	mov	r1, r3
 8015256:	4822      	ldr	r0, [pc, #136]	@ (80152e0 <mg_tls_generate_handshake_keys+0x28c>)
 8015258:	f7ff fc72 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 801525c:	f107 0308 	add.w	r3, r7, #8
 8015260:	2220      	movs	r2, #32
 8015262:	4619      	mov	r1, r3
 8015264:	481f      	ldr	r0, [pc, #124]	@ (80152e4 <mg_tls_generate_handshake_keys+0x290>)
 8015266:	f7ff fc6b 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 801526a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801526e:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8015272:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8015276:	4619      	mov	r1, r3
 8015278:	481b      	ldr	r0, [pc, #108]	@ (80152e8 <mg_tls_generate_handshake_keys+0x294>)
 801527a:	f7ff fc61 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 801527e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015282:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8015286:	220c      	movs	r2, #12
 8015288:	4619      	mov	r1, r3
 801528a:	4818      	ldr	r0, [pc, #96]	@ (80152ec <mg_tls_generate_handshake_keys+0x298>)
 801528c:	f7ff fc58 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8015290:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015294:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8015298:	2220      	movs	r2, #32
 801529a:	4619      	mov	r1, r3
 801529c:	4814      	ldr	r0, [pc, #80]	@ (80152f0 <mg_tls_generate_handshake_keys+0x29c>)
 801529e:	f7ff fc4f 	bl	8014b40 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 80152a2:	bf00      	nop
 80152a4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}
 80152ac:	240010a0 	.word	0x240010a0
 80152b0:	24000280 	.word	0x24000280
 80152b4:	08025bb8 	.word	0x08025bb8
 80152b8:	08025bc8 	.word	0x08025bc8
 80152bc:	08025bd4 	.word	0x08025bd4
 80152c0:	08025be0 	.word	0x08025be0
 80152c4:	08025bf4 	.word	0x08025bf4
 80152c8:	08025c08 	.word	0x08025c08
 80152cc:	08025c14 	.word	0x08025c14
 80152d0:	08025c20 	.word	0x08025c20
 80152d4:	08025c30 	.word	0x08025c30
 80152d8:	08025c40 	.word	0x08025c40
 80152dc:	08025c48 	.word	0x08025c48
 80152e0:	08025c50 	.word	0x08025c50
 80152e4:	08025c5c 	.word	0x08025c5c
 80152e8:	08025c6c 	.word	0x08025c6c
 80152ec:	08025c74 	.word	0x08025c74
 80152f0:	08025c7c 	.word	0x08025c7c

080152f4 <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b0cc      	sub	sp, #304	@ 0x130
 80152f8:	af04      	add	r7, sp, #16
 80152fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80152fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015302:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015304:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015308:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015312:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8015316:	2320      	movs	r3, #32
 8015318:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 801531c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015320:	f103 0120 	add.w	r1, r3, #32
 8015324:	f107 0308 	add.w	r3, r7, #8
 8015328:	2270      	movs	r2, #112	@ 0x70
 801532a:	4618      	mov	r0, r3
 801532c:	f00e f8d9 	bl	80234e2 <memmove>
  mg_sha256_final(hash, &sha256);
 8015330:	f107 0208 	add.w	r2, r7, #8
 8015334:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8015338:	4611      	mov	r1, r2
 801533a:	4618      	mov	r0, r3
 801533c:	f7fd fbf9 	bl	8012b32 <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 8015340:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015344:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8015348:	2320      	movs	r3, #32
 801534a:	9302      	str	r3, [sp, #8]
 801534c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8015350:	9301      	str	r3, [sp, #4]
 8015352:	2320      	movs	r3, #32
 8015354:	9300      	str	r3, [sp, #0]
 8015356:	4b64      	ldr	r3, [pc, #400]	@ (80154e8 <mg_tls_generate_application_keys+0x1f4>)
 8015358:	2220      	movs	r2, #32
 801535a:	4864      	ldr	r0, [pc, #400]	@ (80154ec <mg_tls_generate_application_keys+0x1f8>)
 801535c:	f7ff fdde 	bl	8014f1c <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 8015360:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8015364:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8015368:	2320      	movs	r3, #32
 801536a:	9300      	str	r3, [sp, #0]
 801536c:	4b60      	ldr	r3, [pc, #384]	@ (80154f0 <mg_tls_generate_application_keys+0x1fc>)
 801536e:	2220      	movs	r2, #32
 8015370:	f7fd fd33 	bl	8012dda <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 8015374:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8015378:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 801537c:	2320      	movs	r3, #32
 801537e:	9302      	str	r3, [sp, #8]
 8015380:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8015384:	9301      	str	r3, [sp, #4]
 8015386:	2320      	movs	r3, #32
 8015388:	9300      	str	r3, [sp, #0]
 801538a:	4613      	mov	r3, r2
 801538c:	2220      	movs	r2, #32
 801538e:	4859      	ldr	r0, [pc, #356]	@ (80154f4 <mg_tls_generate_application_keys+0x200>)
 8015390:	f7ff fdc4 	bl	8014f1c <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8015394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015398:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 801539c:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80153a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80153a4:	9202      	str	r2, [sp, #8]
 80153a6:	9301      	str	r3, [sp, #4]
 80153a8:	2300      	movs	r3, #0
 80153aa:	9300      	str	r3, [sp, #0]
 80153ac:	2300      	movs	r3, #0
 80153ae:	2220      	movs	r2, #32
 80153b0:	4851      	ldr	r0, [pc, #324]	@ (80154f8 <mg_tls_generate_application_keys+0x204>)
 80153b2:	f7ff fdb3 	bl	8014f1c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 80153b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80153ba:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 80153be:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80153c2:	220c      	movs	r2, #12
 80153c4:	9202      	str	r2, [sp, #8]
 80153c6:	9301      	str	r3, [sp, #4]
 80153c8:	2300      	movs	r3, #0
 80153ca:	9300      	str	r3, [sp, #0]
 80153cc:	2300      	movs	r3, #0
 80153ce:	2220      	movs	r2, #32
 80153d0:	484a      	ldr	r0, [pc, #296]	@ (80154fc <mg_tls_generate_application_keys+0x208>)
 80153d2:	f7ff fda3 	bl	8014f1c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 80153d6:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 80153da:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80153de:	2320      	movs	r3, #32
 80153e0:	9302      	str	r3, [sp, #8]
 80153e2:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80153e6:	9301      	str	r3, [sp, #4]
 80153e8:	2320      	movs	r3, #32
 80153ea:	9300      	str	r3, [sp, #0]
 80153ec:	4613      	mov	r3, r2
 80153ee:	2220      	movs	r2, #32
 80153f0:	4843      	ldr	r0, [pc, #268]	@ (8015500 <mg_tls_generate_application_keys+0x20c>)
 80153f2:	f7ff fd93 	bl	8014f1c <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 80153f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80153fa:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 80153fe:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8015402:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8015406:	9202      	str	r2, [sp, #8]
 8015408:	9301      	str	r3, [sp, #4]
 801540a:	2300      	movs	r3, #0
 801540c:	9300      	str	r3, [sp, #0]
 801540e:	2300      	movs	r3, #0
 8015410:	2220      	movs	r2, #32
 8015412:	4839      	ldr	r0, [pc, #228]	@ (80154f8 <mg_tls_generate_application_keys+0x204>)
 8015414:	f7ff fd82 	bl	8014f1c <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8015418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801541c:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 8015420:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8015424:	220c      	movs	r2, #12
 8015426:	9202      	str	r2, [sp, #8]
 8015428:	9301      	str	r3, [sp, #4]
 801542a:	2300      	movs	r3, #0
 801542c:	9300      	str	r3, [sp, #0]
 801542e:	2300      	movs	r3, #0
 8015430:	2220      	movs	r2, #32
 8015432:	4832      	ldr	r0, [pc, #200]	@ (80154fc <mg_tls_generate_application_keys+0x208>)
 8015434:	f7ff fd72 	bl	8014f1c <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 8015438:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801543c:	2220      	movs	r2, #32
 801543e:	4619      	mov	r1, r3
 8015440:	4830      	ldr	r0, [pc, #192]	@ (8015504 <mg_tls_generate_application_keys+0x210>)
 8015442:	f7ff fb7d 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8015446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801544a:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 801544e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8015452:	4619      	mov	r1, r3
 8015454:	482c      	ldr	r0, [pc, #176]	@ (8015508 <mg_tls_generate_application_keys+0x214>)
 8015456:	f7ff fb73 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 801545a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801545e:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8015462:	220c      	movs	r2, #12
 8015464:	4619      	mov	r1, r3
 8015466:	4829      	ldr	r0, [pc, #164]	@ (801550c <mg_tls_generate_application_keys+0x218>)
 8015468:	f7ff fb6a 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 801546c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015470:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8015474:	2220      	movs	r2, #32
 8015476:	4619      	mov	r1, r3
 8015478:	4825      	ldr	r0, [pc, #148]	@ (8015510 <mg_tls_generate_application_keys+0x21c>)
 801547a:	f7ff fb61 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 801547e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8015482:	2220      	movs	r2, #32
 8015484:	4619      	mov	r1, r3
 8015486:	4823      	ldr	r0, [pc, #140]	@ (8015514 <mg_tls_generate_application_keys+0x220>)
 8015488:	f7ff fb5a 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 801548c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015490:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8015494:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8015498:	4619      	mov	r1, r3
 801549a:	481f      	ldr	r0, [pc, #124]	@ (8015518 <mg_tls_generate_application_keys+0x224>)
 801549c:	f7ff fb50 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 80154a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80154a4:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 80154a8:	220c      	movs	r2, #12
 80154aa:	4619      	mov	r1, r3
 80154ac:	481b      	ldr	r0, [pc, #108]	@ (801551c <mg_tls_generate_application_keys+0x228>)
 80154ae:	f7ff fb47 	bl	8014b40 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 80154b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80154b6:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 80154ba:	2220      	movs	r2, #32
 80154bc:	4619      	mov	r1, r3
 80154be:	4818      	ldr	r0, [pc, #96]	@ (8015520 <mg_tls_generate_application_keys+0x22c>)
 80154c0:	f7ff fb3e 	bl	8014b40 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 80154c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80154c8:	2200      	movs	r2, #0
 80154ca:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 80154ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80154d2:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 80154d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80154da:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 80154de:	bf00      	nop
 80154e0:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}
 80154e8:	24000280 	.word	0x24000280
 80154ec:	08025bb8 	.word	0x08025bb8
 80154f0:	240010a0 	.word	0x240010a0
 80154f4:	08025c88 	.word	0x08025c88
 80154f8:	08025c08 	.word	0x08025c08
 80154fc:	08025c14 	.word	0x08025c14
 8015500:	08025c9c 	.word	0x08025c9c
 8015504:	08025cb0 	.word	0x08025cb0
 8015508:	08025c40 	.word	0x08025c40
 801550c:	08025c48 	.word	0x08025c48
 8015510:	08025c50 	.word	0x08025c50
 8015514:	08025cc0 	.word	0x08025cc0
 8015518:	08025c6c 	.word	0x08025c6c
 801551c:	08025c74 	.word	0x08025c74
 8015520:	08025c7c 	.word	0x08025c7c

08015524 <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 8015524:	b580      	push	{r7, lr}
 8015526:	b09a      	sub	sp, #104	@ 0x68
 8015528:	af04      	add	r7, sp, #16
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
 8015530:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015538:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 801553a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801553c:	3304      	adds	r3, #4
 801553e:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	3311      	adds	r3, #17
 8015544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8015546:	2317      	movs	r3, #23
 8015548:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 801554c:	2303      	movs	r3, #3
 801554e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8015552:	2303      	movs	r3, #3
 8015554:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8015558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801555a:	0a1b      	lsrs	r3, r3, #8
 801555c:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801555e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8015562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015564:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8015566:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801556a:	2317      	movs	r3, #23
 801556c:	773b      	strb	r3, [r7, #28]
 801556e:	2303      	movs	r3, #3
 8015570:	777b      	strb	r3, [r7, #29]
 8015572:	2303      	movs	r3, #3
 8015574:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 8015576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015578:	0a1b      	lsrs	r3, r3, #8
 801557a:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801557c:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 801557e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015580:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8015582:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801558c:	f003 0302 	and.w	r3, r3, #2
 8015590:	b2db      	uxtb	r3, r3
 8015592:	2b00      	cmp	r3, #0
 8015594:	d003      	beq.n	801559e <mg_tls_encrypt+0x7a>
 8015596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015598:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 801559c:	e002      	b.n	80155a4 <mg_tls_encrypt+0x80>
 801559e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80155a0:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80155a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80155ac:	f003 0302 	and.w	r3, r3, #2
 80155b0:	b2db      	uxtb	r3, r3
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d003      	beq.n	80155be <mg_tls_encrypt+0x9a>
 80155b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80155b8:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 80155bc:	e002      	b.n	80155c4 <mg_tls_encrypt+0xa0>
 80155be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80155c0:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  uint8_t *key =
 80155c4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80155cc:	f003 0302 	and.w	r3, r3, #2
 80155d0:	b2db      	uxtb	r3, r3
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d003      	beq.n	80155de <mg_tls_encrypt+0xba>
 80155d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80155d8:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 80155dc:	e002      	b.n	80155e4 <mg_tls_encrypt+0xc0>
 80155de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80155e0:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  uint8_t *iv =
 80155e4:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 80155e6:	f107 0310 	add.w	r3, r7, #16
 80155ea:	220c      	movs	r2, #12
 80155ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80155ee:	4618      	mov	r0, r3
 80155f0:	f00d ff77 	bl	80234e2 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 80155f4:	7e3a      	ldrb	r2, [r7, #24]
 80155f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80155f8:	0e1b      	lsrs	r3, r3, #24
 80155fa:	b2db      	uxtb	r3, r3
 80155fc:	4053      	eors	r3, r2
 80155fe:	b2db      	uxtb	r3, r3
 8015600:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8015602:	7e7a      	ldrb	r2, [r7, #25]
 8015604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015606:	0c1b      	lsrs	r3, r3, #16
 8015608:	b2db      	uxtb	r3, r3
 801560a:	4053      	eors	r3, r2
 801560c:	b2db      	uxtb	r3, r3
 801560e:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8015610:	7eba      	ldrb	r2, [r7, #26]
 8015612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015614:	0a1b      	lsrs	r3, r3, #8
 8015616:	b2db      	uxtb	r3, r3
 8015618:	4053      	eors	r3, r2
 801561a:	b2db      	uxtb	r3, r3
 801561c:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 801561e:	7efa      	ldrb	r2, [r7, #27]
 8015620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015622:	b2db      	uxtb	r3, r3
 8015624:	4053      	eors	r3, r2
 8015626:	b2db      	uxtb	r3, r3
 8015628:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 801562a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801562c:	6899      	ldr	r1, [r3, #8]
 801562e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8015632:	2305      	movs	r3, #5
 8015634:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8015636:	f7f5 ff63 	bl	800b500 <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 801563a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801563c:	689a      	ldr	r2, [r3, #8]
 801563e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015640:	4413      	add	r3, r2
 8015642:	4619      	mov	r1, r3
 8015644:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8015646:	f7f5 fecf 	bl	800b3e8 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 801564a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801564c:	681a      	ldr	r2, [r3, #0]
 801564e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015650:	689b      	ldr	r3, [r3, #8]
 8015652:	4413      	add	r3, r2
 8015654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 8015656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015658:	681a      	ldr	r2, [r3, #0]
 801565a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801565c:	6899      	ldr	r1, [r3, #8]
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	440b      	add	r3, r1
 8015662:	3301      	adds	r3, #1
 8015664:	4413      	add	r3, r2
 8015666:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8015668:	687a      	ldr	r2, [r7, #4]
 801566a:	68b9      	ldr	r1, [r7, #8]
 801566c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801566e:	f00d ff38 	bl	80234e2 <memmove>
  outmsg[msgsz] = msgtype;
 8015672:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	4413      	add	r3, r2
 8015678:	78fa      	ldrb	r2, [r7, #3]
 801567a:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 801567c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015680:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 8015682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015684:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015688:	4619      	mov	r1, r3
 801568a:	2001      	movs	r0, #1
 801568c:	f00d fc6e 	bl	8022f6c <calloc>
 8015690:	4603      	mov	r3, r0
 8015692:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 8015694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015696:	2b00      	cmp	r3, #0
 8015698:	d104      	bne.n	80156a4 <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 801569a:	491f      	ldr	r1, [pc, #124]	@ (8015718 <mg_tls_encrypt+0x1f4>)
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f7f1 f93d 	bl	800691c <mg_error>
 80156a2:	e035      	b.n	8015710 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	3301      	adds	r3, #1
 80156a8:	f107 011c 	add.w	r1, r7, #28
 80156ac:	f107 0210 	add.w	r2, r7, #16
 80156b0:	9302      	str	r3, [sp, #8]
 80156b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156b4:	9301      	str	r3, [sp, #4]
 80156b6:	2305      	movs	r3, #5
 80156b8:	9300      	str	r3, [sp, #0]
 80156ba:	460b      	mov	r3, r1
 80156bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80156be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156c0:	f005 fa61 	bl	801ab86 <mg_chacha20_poly1305_encrypt>
 80156c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 80156c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80156c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80156ca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80156cc:	f00d ff09 	bl	80234e2 <memmove>
      free(enc);
 80156d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80156d2:	f00d fc6f 	bl	8022fb4 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80156dc:	f003 0302 	and.w	r3, r3, #2
 80156e0:	b2db      	uxtb	r3, r3
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d007      	beq.n	80156f6 <mg_tls_encrypt+0x1d2>
 80156e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156e8:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 80156ec:	1c5a      	adds	r2, r3, #1
 80156ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156f0:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 80156f4:	e006      	b.n	8015704 <mg_tls_encrypt+0x1e0>
 80156f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156f8:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80156fc:	1c5a      	adds	r2, r3, #1
 80156fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015700:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
  wio->len += encsz;
 8015704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015706:	689a      	ldr	r2, [r3, #8]
 8015708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801570a:	441a      	add	r2, r3
 801570c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801570e:	609a      	str	r2, [r3, #8]
}
 8015710:	3758      	adds	r7, #88	@ 0x58
 8015712:	46bd      	mov	sp, r7
 8015714:	bd80      	pop	{r7, pc}
 8015716:	bf00      	nop
 8015718:	08025cd0 	.word	0x08025cd0

0801571c <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 801571c:	b580      	push	{r7, lr}
 801571e:	b092      	sub	sp, #72	@ 0x48
 8015720:	af02      	add	r7, sp, #8
 8015722:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801572a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	3368      	adds	r3, #104	@ 0x68
 8015730:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015738:	f003 0302 	and.w	r3, r3, #2
 801573c:	b2db      	uxtb	r3, r3
 801573e:	2b00      	cmp	r3, #0
 8015740:	d003      	beq.n	801574a <mg_tls_recv_record+0x2e>
 8015742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015744:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8015748:	e002      	b.n	8015750 <mg_tls_recv_record+0x34>
 801574a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801574c:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8015750:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015758:	f003 0302 	and.w	r3, r3, #2
 801575c:	b2db      	uxtb	r3, r3
 801575e:	2b00      	cmp	r3, #0
 8015760:	d003      	beq.n	801576a <mg_tls_recv_record+0x4e>
 8015762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015764:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8015768:	e002      	b.n	8015770 <mg_tls_recv_record+0x54>
 801576a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801576c:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  uint8_t *key =
 8015770:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015778:	f003 0302 	and.w	r3, r3, #2
 801577c:	b2db      	uxtb	r3, r3
 801577e:	2b00      	cmp	r3, #0
 8015780:	d003      	beq.n	801578a <mg_tls_recv_record+0x6e>
 8015782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015784:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8015788:	e002      	b.n	8015790 <mg_tls_recv_record+0x74>
 801578a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801578c:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  uint8_t *iv =
 8015790:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 8015792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015794:	699b      	ldr	r3, [r3, #24]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d001      	beq.n	801579e <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 801579a:	2300      	movs	r3, #0
 801579c:	e0c7      	b.n	801592e <mg_tls_recv_record+0x212>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f7ff fb25 	bl	8014dee <mg_tls_got_record>
 80157a4:	4603      	mov	r3, r0
 80157a6:	f083 0301 	eor.w	r3, r3, #1
 80157aa:	b2db      	uxtb	r3, r3
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d002      	beq.n	80157b6 <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 80157b0:	f06f 0301 	mvn.w	r3, #1
 80157b4:	e0bb      	b.n	801592e <mg_tls_recv_record+0x212>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 80157b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	2b17      	cmp	r3, #23
 80157be:	d026      	beq.n	801580e <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 80157c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	781b      	ldrb	r3, [r3, #0]
 80157c6:	2b14      	cmp	r3, #20
 80157c8:	d103      	bne.n	80157d2 <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 80157ca:	6878      	ldr	r0, [r7, #4]
 80157cc:	f7ff fb37 	bl	8014e3e <mg_tls_drop_record>
 80157d0:	e7e5      	b.n	801579e <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 80157d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	2b15      	cmp	r3, #21
 80157da:	d111      	bne.n	8015800 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 80157dc:	4b56      	ldr	r3, [pc, #344]	@ (8015938 <mg_tls_recv_record+0x21c>)
 80157de:	681b      	ldr	r3, [r3, #0]
 80157e0:	2b01      	cmp	r3, #1
 80157e2:	dd09      	ble.n	80157f8 <mg_tls_recv_record+0xdc>
 80157e4:	4b55      	ldr	r3, [pc, #340]	@ (801593c <mg_tls_recv_record+0x220>)
 80157e6:	f642 423a 	movw	r2, #11322	@ 0x2c3a
 80157ea:	4955      	ldr	r1, [pc, #340]	@ (8015940 <mg_tls_recv_record+0x224>)
 80157ec:	2002      	movs	r0, #2
 80157ee:	f7f6 fda5 	bl	800c33c <mg_log_prefix>
 80157f2:	4854      	ldr	r0, [pc, #336]	@ (8015944 <mg_tls_recv_record+0x228>)
 80157f4:	f7f6 fdf2 	bl	800c3dc <mg_log>
      mg_tls_drop_record(c);
 80157f8:	6878      	ldr	r0, [r7, #4]
 80157fa:	f7ff fb20 	bl	8014e3e <mg_tls_drop_record>
 80157fe:	e7ce      	b.n	801579e <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 8015800:	4951      	ldr	r1, [pc, #324]	@ (8015948 <mg_tls_recv_record+0x22c>)
 8015802:	6878      	ldr	r0, [r7, #4]
 8015804:	f7f1 f88a 	bl	800691c <mg_error>
      return -1;
 8015808:	f04f 33ff 	mov.w	r3, #4294967295
 801580c:	e08f      	b.n	801592e <mg_tls_recv_record+0x212>
      break;
 801580e:	bf00      	nop
    }
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8015810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	3303      	adds	r3, #3
 8015816:	781b      	ldrb	r3, [r3, #0]
 8015818:	b21b      	sxth	r3, r3
 801581a:	021b      	lsls	r3, r3, #8
 801581c:	b21a      	sxth	r2, r3
 801581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	3304      	adds	r3, #4
 8015824:	781b      	ldrb	r3, [r3, #0]
 8015826:	b21b      	sxth	r3, r3
 8015828:	4313      	orrs	r3, r2
 801582a:	b21b      	sxth	r3, r3
 801582c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 801582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	3305      	adds	r3, #5
 8015834:	627b      	str	r3, [r7, #36]	@ 0x24
  if (msgsz < 16) {
 8015836:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015838:	2b0f      	cmp	r3, #15
 801583a:	d806      	bhi.n	801584a <mg_tls_recv_record+0x12e>
    mg_error(c, "wrong size");
 801583c:	4943      	ldr	r1, [pc, #268]	@ (801594c <mg_tls_recv_record+0x230>)
 801583e:	6878      	ldr	r0, [r7, #4]
 8015840:	f7f1 f86c 	bl	800691c <mg_error>
    return -1;
 8015844:	f04f 33ff 	mov.w	r3, #4294967295
 8015848:	e071      	b.n	801592e <mg_tls_recv_record+0x212>
  }

  memmove(nonce, iv, sizeof(nonce));
 801584a:	f107 030c 	add.w	r3, r7, #12
 801584e:	220c      	movs	r2, #12
 8015850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015852:	4618      	mov	r0, r3
 8015854:	f00d fe45 	bl	80234e2 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8015858:	7d3a      	ldrb	r2, [r7, #20]
 801585a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801585c:	0e1b      	lsrs	r3, r3, #24
 801585e:	b2db      	uxtb	r3, r3
 8015860:	4053      	eors	r3, r2
 8015862:	b2db      	uxtb	r3, r3
 8015864:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 8015866:	7d7a      	ldrb	r2, [r7, #21]
 8015868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801586a:	0c1b      	lsrs	r3, r3, #16
 801586c:	b2db      	uxtb	r3, r3
 801586e:	4053      	eors	r3, r2
 8015870:	b2db      	uxtb	r3, r3
 8015872:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8015874:	7dba      	ldrb	r2, [r7, #22]
 8015876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015878:	0a1b      	lsrs	r3, r3, #8
 801587a:	b2db      	uxtb	r3, r3
 801587c:	4053      	eors	r3, r2
 801587e:	b2db      	uxtb	r3, r3
 8015880:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8015882:	7dfa      	ldrb	r2, [r7, #23]
 8015884:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015886:	b2db      	uxtb	r3, r3
 8015888:	4053      	eors	r3, r2
 801588a:	b2db      	uxtb	r3, r3
 801588c:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 801588e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015890:	4619      	mov	r1, r3
 8015892:	2001      	movs	r0, #1
 8015894:	f00d fb6a 	bl	8022f6c <calloc>
 8015898:	4603      	mov	r3, r0
 801589a:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 801589c:	6a3b      	ldr	r3, [r7, #32]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d106      	bne.n	80158b0 <mg_tls_recv_record+0x194>
      mg_error(c, "TLS OOM");
 80158a2:	492b      	ldr	r1, [pc, #172]	@ (8015950 <mg_tls_recv_record+0x234>)
 80158a4:	6878      	ldr	r0, [r7, #4]
 80158a6:	f7f1 f839 	bl	800691c <mg_error>
      return -1;
 80158aa:	f04f 33ff 	mov.w	r3, #4294967295
 80158ae:	e03e      	b.n	801592e <mg_tls_recv_record+0x212>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 80158b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158b2:	f107 020c 	add.w	r2, r7, #12
 80158b6:	9300      	str	r3, [sp, #0]
 80158b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80158bc:	6a38      	ldr	r0, [r7, #32]
 80158be:	f005 f99a 	bl	801abf6 <mg_chacha20_poly1305_decrypt>
 80158c2:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 80158c4:	69fa      	ldr	r2, [r7, #28]
 80158c6:	6a39      	ldr	r1, [r7, #32]
 80158c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80158ca:	f00d fe0a 	bl	80234e2 <memmove>
    free(dec);
 80158ce:	6a38      	ldr	r0, [r7, #32]
 80158d0:	f00d fb70 	bl	8022fb4 <free>
#else
  mg_gcm_initialize();
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif

  r = msgsz - 16 - 1;
 80158d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158d6:	3b11      	subs	r3, #17
 80158d8:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 80158da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158dc:	3b11      	subs	r3, #17
 80158de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80158e0:	4413      	add	r3, r2
 80158e2:	781a      	ldrb	r2, [r3, #0]
 80158e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158e6:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 80158e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80158ec:	6812      	ldr	r2, [r2, #0]
 80158ee:	1a9a      	subs	r2, r3, r2
 80158f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158f2:	615a      	str	r2, [r3, #20]
  tls->recv_len = (size_t) msgsz - 16 - 1;
 80158f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80158f6:	f1a3 0211 	sub.w	r2, r3, #17
 80158fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158fc:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015904:	f003 0302 	and.w	r3, r3, #2
 8015908:	b2db      	uxtb	r3, r3
 801590a:	2b00      	cmp	r3, #0
 801590c:	d007      	beq.n	801591e <mg_tls_recv_record+0x202>
 801590e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015910:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8015914:	1c5a      	adds	r2, r3, #1
 8015916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015918:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
 801591c:	e006      	b.n	801592c <mg_tls_recv_record+0x210>
 801591e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015920:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8015924:	1c5a      	adds	r2, r3, #1
 8015926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015928:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
  return r;
 801592c:	69bb      	ldr	r3, [r7, #24]
}
 801592e:	4618      	mov	r0, r3
 8015930:	3740      	adds	r7, #64	@ 0x40
 8015932:	46bd      	mov	sp, r7
 8015934:	bd80      	pop	{r7, pc}
 8015936:	bf00      	nop
 8015938:	24000258 	.word	0x24000258
 801593c:	08027f64 	.word	0x08027f64
 8015940:	080241e8 	.word	0x080241e8
 8015944:	08025cd8 	.word	0x08025cd8
 8015948:	08025cf4 	.word	0x08025cf4
 801594c:	08025bac 	.word	0x08025bac
 8015950:	08025cd0 	.word	0x08025cd0

08015954 <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 8015954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015956:	b0d5      	sub	sp, #340	@ 0x154
 8015958:	af00      	add	r7, sp, #0
 801595a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801595e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8015962:	6018      	str	r0, [r3, #0]
 8015964:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8015968:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801596c:	6019      	str	r1, [r3, #0]
 801596e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8015972:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015976:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015978:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801597c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015986:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 801598a:	4b41      	ldr	r3, [pc, #260]	@ (8015a90 <mg_tls_calc_cert_verify_hash+0x13c>)
 801598c:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8015990:	461d      	mov	r5, r3
 8015992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801599a:	682b      	ldr	r3, [r5, #0]
 801599c:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 801599e:	4b3d      	ldr	r3, [pc, #244]	@ (8015a94 <mg_tls_calc_cert_verify_hash+0x140>)
 80159a0:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 80159a4:	461d      	mov	r5, r3
 80159a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80159ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80159ae:	682b      	ldr	r3, [r5, #0]
 80159b0:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 80159b2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80159b6:	2240      	movs	r2, #64	@ 0x40
 80159b8:	2120      	movs	r1, #32
 80159ba:	4618      	mov	r0, r3
 80159bc:	f00d fdab 	bl	8023516 <memset>
  if (is_client) {
 80159c0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80159c4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d018      	beq.n	8015a00 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 80159ce:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80159d2:	3340      	adds	r3, #64	@ 0x40
 80159d4:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 80159d8:	469c      	mov	ip, r3
 80159da:	f104 0e20 	add.w	lr, r4, #32
 80159de:	4665      	mov	r5, ip
 80159e0:	4626      	mov	r6, r4
 80159e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80159e4:	6028      	str	r0, [r5, #0]
 80159e6:	6069      	str	r1, [r5, #4]
 80159e8:	60aa      	str	r2, [r5, #8]
 80159ea:	60eb      	str	r3, [r5, #12]
 80159ec:	3410      	adds	r4, #16
 80159ee:	f10c 0c10 	add.w	ip, ip, #16
 80159f2:	4574      	cmp	r4, lr
 80159f4:	d1f3      	bne.n	80159de <mg_tls_calc_cert_verify_hash+0x8a>
 80159f6:	4662      	mov	r2, ip
 80159f8:	4623      	mov	r3, r4
 80159fa:	881b      	ldrh	r3, [r3, #0]
 80159fc:	8013      	strh	r3, [r2, #0]
 80159fe:	e017      	b.n	8015a30 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 8015a00:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8015a04:	3340      	adds	r3, #64	@ 0x40
 8015a06:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8015a0a:	469c      	mov	ip, r3
 8015a0c:	f104 0e20 	add.w	lr, r4, #32
 8015a10:	4665      	mov	r5, ip
 8015a12:	4626      	mov	r6, r4
 8015a14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015a16:	6028      	str	r0, [r5, #0]
 8015a18:	6069      	str	r1, [r5, #4]
 8015a1a:	60aa      	str	r2, [r5, #8]
 8015a1c:	60eb      	str	r3, [r5, #12]
 8015a1e:	3410      	adds	r4, #16
 8015a20:	f10c 0c10 	add.w	ip, ip, #16
 8015a24:	4574      	cmp	r4, lr
 8015a26:	d1f3      	bne.n	8015a10 <mg_tls_calc_cert_verify_hash+0xbc>
 8015a28:	4662      	mov	r2, ip
 8015a2a:	4623      	mov	r3, r4
 8015a2c:	881b      	ldrh	r3, [r3, #0]
 8015a2e:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8015a30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015a34:	f103 0120 	add.w	r1, r3, #32
 8015a38:	f107 0310 	add.w	r3, r7, #16
 8015a3c:	2270      	movs	r2, #112	@ 0x70
 8015a3e:	4618      	mov	r0, r3
 8015a40:	f00d fd4f 	bl	80234e2 <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 8015a44:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8015a48:	3362      	adds	r3, #98	@ 0x62
 8015a4a:	f107 0210 	add.w	r2, r7, #16
 8015a4e:	4611      	mov	r1, r2
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7fd f86e 	bl	8012b32 <mg_sha256_final>

  mg_sha256_init(&sha256);
 8015a56:	f107 0310 	add.w	r3, r7, #16
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f7fc fdec 	bl	8012638 <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 8015a60:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8015a64:	f107 0310 	add.w	r3, r7, #16
 8015a68:	2282      	movs	r2, #130	@ 0x82
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7fd f828 	bl	8012ac0 <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 8015a70:	f107 0210 	add.w	r2, r7, #16
 8015a74:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8015a78:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8015a7c:	4611      	mov	r1, r2
 8015a7e:	6818      	ldr	r0, [r3, #0]
 8015a80:	f7fd f857 	bl	8012b32 <mg_sha256_final>
}
 8015a84:	bf00      	nop
 8015a86:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a8e:	bf00      	nop
 8015a90:	08025d08 	.word	0x08025d08
 8015a94:	08025d2c 	.word	0x08025d2c

08015a98 <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b08c      	sub	sp, #48	@ 0x30
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	3368      	adds	r3, #104	@ 0x68
 8015aac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	f7ff f99d 	bl	8014dee <mg_tls_got_record>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	f083 0301 	eor.w	r3, r3, #1
 8015aba:	b2db      	uxtb	r3, r3
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d002      	beq.n	8015ac6 <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8015ac0:	f06f 0301 	mvn.w	r3, #1
 8015ac4:	e16d      	b.n	8015da2 <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 8015ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	781b      	ldrb	r3, [r3, #0]
 8015acc:	2b16      	cmp	r3, #22
 8015ace:	d105      	bne.n	8015adc <mg_tls_server_recv_hello+0x44>
 8015ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	3305      	adds	r3, #5
 8015ad6:	781b      	ldrb	r3, [r3, #0]
 8015ad8:	2b01      	cmp	r3, #1
 8015ada:	d006      	beq.n	8015aea <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 8015adc:	4998      	ldr	r1, [pc, #608]	@ (8015d40 <mg_tls_server_recv_hello+0x2a8>)
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f7f0 ff1c 	bl	800691c <mg_error>
    return -1;
 8015ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ae8:	e15b      	b.n	8015da2 <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->len < 50) goto fail;
 8015aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015aec:	689b      	ldr	r3, [r3, #8]
 8015aee:	2b31      	cmp	r3, #49	@ 0x31
 8015af0:	f240 8146 	bls.w	8015d80 <mg_tls_server_recv_hello+0x2e8>
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8015af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	3303      	adds	r3, #3
 8015afa:	781b      	ldrb	r3, [r3, #0]
 8015afc:	b21b      	sxth	r3, r3
 8015afe:	021b      	lsls	r3, r3, #8
 8015b00:	b21a      	sxth	r2, r3
 8015b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	3304      	adds	r3, #4
 8015b08:	781b      	ldrb	r3, [r3, #0]
 8015b0a:	b21b      	sxth	r3, r3
 8015b0c:	4313      	orrs	r3, r2
 8015b0e:	b21b      	sxth	r3, r3
 8015b10:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 8015b12:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015b14:	1d1a      	adds	r2, r3, #4
 8015b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b18:	689b      	ldr	r3, [r3, #8]
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	f200 8132 	bhi.w	8015d84 <mg_tls_server_recv_hello+0x2ec>
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8015b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b22:	f103 0020 	add.w	r0, r3, #32
 8015b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	3305      	adds	r3, #5
 8015b2c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015b2e:	4619      	mov	r1, r3
 8015b30:	f7fc ffc6 	bl	8012ac0 <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 8015b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b36:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8015b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	330b      	adds	r3, #11
 8015b40:	2220      	movs	r2, #32
 8015b42:	4619      	mov	r1, r3
 8015b44:	f00d fccd 	bl	80234e2 <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 8015b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8015b50:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 8015b54:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015b58:	2b20      	cmp	r3, #32
 8015b5a:	d10b      	bne.n	8015b74 <mg_tls_server_recv_hello+0xdc>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 8015b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b5e:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8015b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	332c      	adds	r3, #44	@ 0x2c
 8015b68:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	f00d fcb8 	bl	80234e2 <memmove>
 8015b72:	e011      	b.n	8015b98 <mg_tls_server_recv_hello+0x100>
  } else if (session_id_len != 0) {
 8015b74:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d00d      	beq.n	8015b98 <mg_tls_server_recv_hello+0x100>
    MG_INFO(("bad session id len"));
 8015b7c:	4b71      	ldr	r3, [pc, #452]	@ (8015d44 <mg_tls_server_recv_hello+0x2ac>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b01      	cmp	r3, #1
 8015b82:	dd09      	ble.n	8015b98 <mg_tls_server_recv_hello+0x100>
 8015b84:	4b70      	ldr	r3, [pc, #448]	@ (8015d48 <mg_tls_server_recv_hello+0x2b0>)
 8015b86:	f642 429b 	movw	r2, #11419	@ 0x2c9b
 8015b8a:	4970      	ldr	r1, [pc, #448]	@ (8015d4c <mg_tls_server_recv_hello+0x2b4>)
 8015b8c:	2002      	movs	r0, #2
 8015b8e:	f7f6 fbd5 	bl	800c33c <mg_log_prefix>
 8015b92:	486f      	ldr	r0, [pc, #444]	@ (8015d50 <mg_tls_server_recv_hello+0x2b8>)
 8015b94:	f7f6 fc22 	bl	800c3dc <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 8015b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b9a:	681a      	ldr	r2, [r3, #0]
 8015b9c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015ba0:	332c      	adds	r3, #44	@ 0x2c
 8015ba2:	4413      	add	r3, r2
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	b21b      	sxth	r3, r3
 8015ba8:	021b      	lsls	r3, r3, #8
 8015baa:	b21a      	sxth	r2, r3
 8015bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bae:	6819      	ldr	r1, [r3, #0]
 8015bb0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015bb4:	332d      	adds	r3, #45	@ 0x2d
 8015bb6:	440b      	add	r3, r1
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	b21b      	sxth	r3, r3
 8015bbc:	4313      	orrs	r3, r2
 8015bbe:	b21b      	sxth	r3, r3
 8015bc0:	83fb      	strh	r3, [r7, #30]
  if (((uint32_t) cipher_suites_len + 46 + session_id_len) > rio->len)
 8015bc2:	8bfa      	ldrh	r2, [r7, #30]
 8015bc4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015bc8:	4413      	add	r3, r2
 8015bca:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8015bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bd0:	689b      	ldr	r3, [r3, #8]
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	f200 80d8 	bhi.w	8015d88 <mg_tls_server_recv_hello+0x2f0>
    goto fail;
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 8015bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bda:	681a      	ldr	r2, [r3, #0]
 8015bdc:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8015be0:	8bfb      	ldrh	r3, [r7, #30]
 8015be2:	440b      	add	r3, r1
 8015be4:	3330      	adds	r3, #48	@ 0x30
 8015be6:	4413      	add	r3, r2
 8015be8:	781b      	ldrb	r3, [r3, #0]
 8015bea:	b21b      	sxth	r3, r3
 8015bec:	021b      	lsls	r3, r3, #8
 8015bee:	b21a      	sxth	r2, r3
 8015bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bf2:	6819      	ldr	r1, [r3, #0]
 8015bf4:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 8015bf8:	8bfb      	ldrh	r3, [r7, #30]
 8015bfa:	4403      	add	r3, r0
 8015bfc:	3331      	adds	r3, #49	@ 0x31
 8015bfe:	440b      	add	r3, r1
 8015c00:	781b      	ldrb	r3, [r3, #0]
 8015c02:	b21b      	sxth	r3, r3
 8015c04:	4313      	orrs	r3, r2
 8015c06:	b21b      	sxth	r3, r3
 8015c08:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 8015c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c0c:	681a      	ldr	r2, [r3, #0]
 8015c0e:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8015c12:	8bfb      	ldrh	r3, [r7, #30]
 8015c14:	440b      	add	r3, r1
 8015c16:	3332      	adds	r3, #50	@ 0x32
 8015c18:	4413      	add	r3, r2
 8015c1a:	61bb      	str	r3, [r7, #24]
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 8015c1c:	8bbb      	ldrh	r3, [r7, #28]
 8015c1e:	69ba      	ldr	r2, [r7, #24]
 8015c20:	441a      	add	r2, r3
 8015c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c24:	6819      	ldr	r1, [r3, #0]
 8015c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c28:	689b      	ldr	r3, [r3, #8]
 8015c2a:	440b      	add	r3, r1
 8015c2c:	429a      	cmp	r2, r3
 8015c2e:	f200 80ad 	bhi.w	8015d8c <mg_tls_server_recv_hello+0x2f4>
  for (j = 0; j < ext_len;) {
 8015c32:	2300      	movs	r3, #0
 8015c34:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8015c36:	e09d      	b.n	8015d74 <mg_tls_server_recv_hello+0x2dc>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 8015c38:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c3a:	3302      	adds	r3, #2
 8015c3c:	69ba      	ldr	r2, [r7, #24]
 8015c3e:	4413      	add	r3, r2
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	b21b      	sxth	r3, r3
 8015c44:	021b      	lsls	r3, r3, #8
 8015c46:	b21a      	sxth	r2, r3
 8015c48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c4a:	3303      	adds	r3, #3
 8015c4c:	69b9      	ldr	r1, [r7, #24]
 8015c4e:	440b      	add	r3, r1
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	b21b      	sxth	r3, r3
 8015c54:	4313      	orrs	r3, r2
 8015c56:	b21b      	sxth	r3, r3
 8015c58:	82fb      	strh	r3, [r7, #22]
    if (MG_LOAD_BE16(ext + j) != 0x0033) {  // not a key share extension, ignore
 8015c5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c5c:	69ba      	ldr	r2, [r7, #24]
 8015c5e:	4413      	add	r3, r2
 8015c60:	781b      	ldrb	r3, [r3, #0]
 8015c62:	b21b      	sxth	r3, r3
 8015c64:	021b      	lsls	r3, r3, #8
 8015c66:	b21a      	sxth	r2, r3
 8015c68:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c6a:	3301      	adds	r3, #1
 8015c6c:	69b9      	ldr	r1, [r7, #24]
 8015c6e:	440b      	add	r3, r1
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	b21b      	sxth	r3, r3
 8015c74:	4313      	orrs	r3, r2
 8015c76:	b21b      	sxth	r3, r3
 8015c78:	2b33      	cmp	r3, #51	@ 0x33
 8015c7a:	d006      	beq.n	8015c8a <mg_tls_server_recv_hello+0x1f2>
      j += (uint16_t) (n + 4);
 8015c7c:	8afa      	ldrh	r2, [r7, #22]
 8015c7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c80:	4413      	add	r3, r2
 8015c82:	b29b      	uxth	r3, r3
 8015c84:	3304      	adds	r3, #4
 8015c86:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 8015c88:	e074      	b.n	8015d74 <mg_tls_server_recv_hello+0x2dc>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 8015c8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c8c:	3304      	adds	r3, #4
 8015c8e:	69ba      	ldr	r2, [r7, #24]
 8015c90:	4413      	add	r3, r2
 8015c92:	781b      	ldrb	r3, [r3, #0]
 8015c94:	b21b      	sxth	r3, r3
 8015c96:	021b      	lsls	r3, r3, #8
 8015c98:	b21a      	sxth	r2, r3
 8015c9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015c9c:	3305      	adds	r3, #5
 8015c9e:	69b9      	ldr	r1, [r7, #24]
 8015ca0:	440b      	add	r3, r1
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	b21b      	sxth	r3, r3
 8015ca6:	4313      	orrs	r3, r2
 8015ca8:	b21b      	sxth	r3, r3
 8015caa:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 8015cac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015cae:	3306      	adds	r3, #6
 8015cb0:	69ba      	ldr	r2, [r7, #24]
 8015cb2:	4413      	add	r3, r2
 8015cb4:	613b      	str	r3, [r7, #16]
    if (((size_t) key_exchange_len +
 8015cb6:	8aba      	ldrh	r2, [r7, #20]
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015cbc:	6809      	ldr	r1, [r1, #0]
 8015cbe:	1a5b      	subs	r3, r3, r1
    if (((size_t) key_exchange_len +
 8015cc0:	441a      	add	r2, r3
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8015cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cc4:	689b      	ldr	r3, [r3, #8]
    if (((size_t) key_exchange_len +
 8015cc6:	429a      	cmp	r2, r3
 8015cc8:	d862      	bhi.n	8015d90 <mg_tls_server_recv_hello+0x2f8>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 8015cca:	2300      	movs	r3, #0
 8015ccc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8015cce:	e047      	b.n	8015d60 <mg_tls_server_recv_hello+0x2c8>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 8015cd0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015cd2:	3302      	adds	r3, #2
 8015cd4:	693a      	ldr	r2, [r7, #16]
 8015cd6:	4413      	add	r3, r2
 8015cd8:	781b      	ldrb	r3, [r3, #0]
 8015cda:	b21b      	sxth	r3, r3
 8015cdc:	021b      	lsls	r3, r3, #8
 8015cde:	b21a      	sxth	r2, r3
 8015ce0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015ce2:	3303      	adds	r3, #3
 8015ce4:	6939      	ldr	r1, [r7, #16]
 8015ce6:	440b      	add	r3, r1
 8015ce8:	781b      	ldrb	r3, [r3, #0]
 8015cea:	b21b      	sxth	r3, r3
 8015cec:	4313      	orrs	r3, r2
 8015cee:	b21b      	sxth	r3, r3
 8015cf0:	81fb      	strh	r3, [r7, #14]
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8015cf2:	89fa      	ldrh	r2, [r7, #14]
 8015cf4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015cf6:	4413      	add	r3, r2
 8015cf8:	1d1a      	adds	r2, r3, #4
 8015cfa:	8abb      	ldrh	r3, [r7, #20]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d849      	bhi.n	8015d94 <mg_tls_server_recv_hello+0x2fc>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 8015d00:	89fb      	ldrh	r3, [r7, #14]
 8015d02:	2b20      	cmp	r3, #32
 8015d04:	d126      	bne.n	8015d54 <mg_tls_server_recv_hello+0x2bc>
 8015d06:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015d08:	693a      	ldr	r2, [r7, #16]
 8015d0a:	4413      	add	r3, r2
 8015d0c:	781b      	ldrb	r3, [r3, #0]
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d120      	bne.n	8015d54 <mg_tls_server_recv_hello+0x2bc>
 8015d12:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015d14:	3301      	adds	r3, #1
 8015d16:	693a      	ldr	r2, [r7, #16]
 8015d18:	4413      	add	r3, r2
 8015d1a:	781b      	ldrb	r3, [r3, #0]
 8015d1c:	2b1d      	cmp	r3, #29
 8015d1e:	d119      	bne.n	8015d54 <mg_tls_server_recv_hello+0x2bc>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 8015d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015d22:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8015d26:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015d28:	3304      	adds	r3, #4
 8015d2a:	693a      	ldr	r2, [r7, #16]
 8015d2c:	4413      	add	r3, r2
 8015d2e:	89fa      	ldrh	r2, [r7, #14]
 8015d30:	4619      	mov	r1, r3
 8015d32:	f00d fbd6 	bl	80234e2 <memmove>
        mg_tls_drop_record(c);
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f7ff f881 	bl	8014e3e <mg_tls_drop_record>
        return 0;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	e030      	b.n	8015da2 <mg_tls_server_recv_hello+0x30a>
 8015d40:	08025d50 	.word	0x08025d50
 8015d44:	24000258 	.word	0x24000258
 8015d48:	08027f78 	.word	0x08027f78
 8015d4c:	080241e8 	.word	0x080241e8
 8015d50:	08025d6c 	.word	0x08025d6c
      }
      k += (uint16_t) (m + 4);
 8015d54:	89fa      	ldrh	r2, [r7, #14]
 8015d56:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015d58:	4413      	add	r3, r2
 8015d5a:	b29b      	uxth	r3, r3
 8015d5c:	3304      	adds	r3, #4
 8015d5e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 8015d60:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8015d62:	8abb      	ldrh	r3, [r7, #20]
 8015d64:	429a      	cmp	r2, r3
 8015d66:	d3b3      	bcc.n	8015cd0 <mg_tls_server_recv_hello+0x238>
    }
    j += (uint16_t) (n + 4);
 8015d68:	8afa      	ldrh	r2, [r7, #22]
 8015d6a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d6c:	4413      	add	r3, r2
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	3304      	adds	r3, #4
 8015d72:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 8015d74:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015d76:	8bbb      	ldrh	r3, [r7, #28]
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	f4ff af5d 	bcc.w	8015c38 <mg_tls_server_recv_hello+0x1a0>
  }
fail:
 8015d7e:	e00a      	b.n	8015d96 <mg_tls_server_recv_hello+0x2fe>
  if (rio->len < 50) goto fail;
 8015d80:	bf00      	nop
 8015d82:	e008      	b.n	8015d96 <mg_tls_server_recv_hello+0x2fe>
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 8015d84:	bf00      	nop
 8015d86:	e006      	b.n	8015d96 <mg_tls_server_recv_hello+0x2fe>
    goto fail;
 8015d88:	bf00      	nop
 8015d8a:	e004      	b.n	8015d96 <mg_tls_server_recv_hello+0x2fe>
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 8015d8c:	bf00      	nop
 8015d8e:	e002      	b.n	8015d96 <mg_tls_server_recv_hello+0x2fe>
      goto fail;
 8015d90:	bf00      	nop
 8015d92:	e000      	b.n	8015d96 <mg_tls_server_recv_hello+0x2fe>
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8015d94:	bf00      	nop
  mg_error(c, "bad client hello");
 8015d96:	4905      	ldr	r1, [pc, #20]	@ (8015dac <mg_tls_server_recv_hello+0x314>)
 8015d98:	6878      	ldr	r0, [r7, #4]
 8015d9a:	f7f0 fdbf 	bl	800691c <mg_error>
  return -1;
 8015d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	3730      	adds	r7, #48	@ 0x30
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}
 8015daa:	bf00      	nop
 8015dac:	08025d80 	.word	0x08025d80

08015db0 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 8015db0:	b5b0      	push	{r4, r5, r7, lr}
 8015db2:	b0b4      	sub	sp, #208	@ 0xd0
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015dbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 8015dc2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015dc6:	3304      	adds	r3, #4
 8015dc8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 8015dcc:	4a4c      	ldr	r2, [pc, #304]	@ (8015f00 <mg_tls_server_send_hello+0x150>)
 8015dce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015dd2:	4611      	mov	r1, r2
 8015dd4:	227a      	movs	r2, #122	@ 0x7a
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f00d fcd3 	bl	8023782 <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 8015ddc:	f107 030c 	add.w	r3, r7, #12
 8015de0:	2120      	movs	r1, #32
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7ea fc92 	bl	800070c <mg_random>
 8015de8:	4603      	mov	r3, r0
 8015dea:	f083 0301 	eor.w	r3, r3, #1
 8015dee:	b2db      	uxtb	r3, r3
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d003      	beq.n	8015dfc <mg_tls_server_send_hello+0x4c>
 8015df4:	4943      	ldr	r1, [pc, #268]	@ (8015f04 <mg_tls_server_send_hello+0x154>)
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f7f0 fd90 	bl	800691c <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 8015dfc:	f107 010c 	add.w	r1, r7, #12
 8015e00:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015e04:	2301      	movs	r3, #1
 8015e06:	4a40      	ldr	r2, [pc, #256]	@ (8015f08 <mg_tls_server_send_hello+0x158>)
 8015e08:	f009 f872 	bl	801eef0 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 8015e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015e10:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8015e14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015e18:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8015e1c:	f107 010c 	add.w	r1, r7, #12
 8015e20:	2301      	movs	r3, #1
 8015e22:	f009 f865 	bl	801eef0 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 8015e26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015e2a:	33f0      	adds	r3, #240	@ 0xf0
 8015e2c:	2220      	movs	r2, #32
 8015e2e:	4619      	mov	r1, r3
 8015e30:	4836      	ldr	r0, [pc, #216]	@ (8015f0c <mg_tls_server_send_hello+0x15c>)
 8015e32:	f7fe fe85 	bl	8014b40 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 8015e36:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015e3a:	3306      	adds	r3, #6
 8015e3c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8015e40:	3290      	adds	r2, #144	@ 0x90
 8015e42:	6815      	ldr	r5, [r2, #0]
 8015e44:	6854      	ldr	r4, [r2, #4]
 8015e46:	6890      	ldr	r0, [r2, #8]
 8015e48:	68d1      	ldr	r1, [r2, #12]
 8015e4a:	601d      	str	r5, [r3, #0]
 8015e4c:	605c      	str	r4, [r3, #4]
 8015e4e:	6098      	str	r0, [r3, #8]
 8015e50:	60d9      	str	r1, [r3, #12]
 8015e52:	6915      	ldr	r5, [r2, #16]
 8015e54:	6954      	ldr	r4, [r2, #20]
 8015e56:	6990      	ldr	r0, [r2, #24]
 8015e58:	69d1      	ldr	r1, [r2, #28]
 8015e5a:	611d      	str	r5, [r3, #16]
 8015e5c:	615c      	str	r4, [r3, #20]
 8015e5e:	6198      	str	r0, [r3, #24]
 8015e60:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 8015e62:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015e66:	3327      	adds	r3, #39	@ 0x27
 8015e68:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8015e6c:	32b0      	adds	r2, #176	@ 0xb0
 8015e6e:	6815      	ldr	r5, [r2, #0]
 8015e70:	6854      	ldr	r4, [r2, #4]
 8015e72:	6890      	ldr	r0, [r2, #8]
 8015e74:	68d1      	ldr	r1, [r2, #12]
 8015e76:	601d      	str	r5, [r3, #0]
 8015e78:	605c      	str	r4, [r3, #4]
 8015e7a:	6098      	str	r0, [r3, #8]
 8015e7c:	60d9      	str	r1, [r3, #12]
 8015e7e:	6915      	ldr	r5, [r2, #16]
 8015e80:	6954      	ldr	r4, [r2, #20]
 8015e82:	6990      	ldr	r0, [r2, #24]
 8015e84:	69d1      	ldr	r1, [r2, #28]
 8015e86:	611d      	str	r5, [r3, #16]
 8015e88:	615c      	str	r4, [r3, #20]
 8015e8a:	6198      	str	r0, [r3, #24]
 8015e8c:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 8015e8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015e92:	3354      	adds	r3, #84	@ 0x54
 8015e94:	461d      	mov	r5, r3
 8015e96:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8015e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015e9c:	6028      	str	r0, [r5, #0]
 8015e9e:	6069      	str	r1, [r5, #4]
 8015ea0:	60aa      	str	r2, [r5, #8]
 8015ea2:	60eb      	str	r3, [r5, #12]
 8015ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ea6:	6128      	str	r0, [r5, #16]
 8015ea8:	6169      	str	r1, [r5, #20]
 8015eaa:	61aa      	str	r2, [r5, #24]
 8015eac:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 8015eae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015eb2:	6899      	ldr	r1, [r3, #8]
 8015eb4:	2305      	movs	r3, #5
 8015eb6:	4a16      	ldr	r2, [pc, #88]	@ (8015f10 <mg_tls_server_send_hello+0x160>)
 8015eb8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8015ebc:	f7f5 fb20 	bl	800b500 <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 8015ec0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015ec4:	6899      	ldr	r1, [r3, #8]
 8015ec6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015eca:	237a      	movs	r3, #122	@ 0x7a
 8015ecc:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8015ed0:	f7f5 fb16 	bl	800b500 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 8015ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015ed8:	3320      	adds	r3, #32
 8015eda:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8015ede:	227a      	movs	r2, #122	@ 0x7a
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	f7fc fded 	bl	8012ac0 <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 8015ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015eea:	6899      	ldr	r1, [r3, #8]
 8015eec:	2306      	movs	r3, #6
 8015eee:	4a09      	ldr	r2, [pc, #36]	@ (8015f14 <mg_tls_server_send_hello+0x164>)
 8015ef0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8015ef4:	f7f5 fb04 	bl	800b500 <mg_iobuf_add>
}
 8015ef8:	bf00      	nop
 8015efa:	37d0      	adds	r7, #208	@ 0xd0
 8015efc:	46bd      	mov	sp, r7
 8015efe:	bdb0      	pop	{r4, r5, r7, pc}
 8015f00:	08025db8 	.word	0x08025db8
 8015f04:	08025d94 	.word	0x08025d94
 8015f08:	08027d1c 	.word	0x08027d1c
 8015f0c:	08025d98 	.word	0x08025d98
 8015f10:	08025da8 	.word	0x08025da8
 8015f14:	08025db0 	.word	0x08025db0

08015f18 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b086      	sub	sp, #24
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015f26:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 8015f28:	4b0b      	ldr	r3, [pc, #44]	@ (8015f58 <mg_tls_server_send_ext+0x40>)
 8015f2a:	60fb      	str	r3, [r7, #12]
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	823b      	strh	r3, [r7, #16]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 8015f30:	697b      	ldr	r3, [r7, #20]
 8015f32:	3320      	adds	r3, #32
 8015f34:	f107 010c 	add.w	r1, r7, #12
 8015f38:	2206      	movs	r2, #6
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	f7fc fdc0 	bl	8012ac0 <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 8015f40:	f107 010c 	add.w	r1, r7, #12
 8015f44:	2316      	movs	r3, #22
 8015f46:	2206      	movs	r2, #6
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f7ff faeb 	bl	8015524 <mg_tls_encrypt>
}
 8015f4e:	bf00      	nop
 8015f50:	3718      	adds	r7, #24
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}
 8015f56:	bf00      	nop
 8015f58:	02000008 	.word	0x02000008

08015f5c <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b088      	sub	sp, #32
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015f6a:	61fb      	str	r3, [r7, #28]
  int send_ca = !c->is_client && tls->ca_der.len > 0;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015f72:	f003 0302 	and.w	r3, r3, #2
 8015f76:	b2db      	uxtb	r3, r3
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d106      	bne.n	8015f8a <mg_tls_server_send_cert+0x2e>
 8015f7c:	69fb      	ldr	r3, [r7, #28]
 8015f7e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d001      	beq.n	8015f8a <mg_tls_server_send_cert+0x2e>
 8015f86:	2301      	movs	r3, #1
 8015f88:	e000      	b.n	8015f8c <mg_tls_server_send_cert+0x30>
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	61bb      	str	r3, [r7, #24]
  // server DER certificate + CA (optional)
  size_t n = tls->cert_der.len + (send_ca ? tls->ca_der.len + 5 : 0);
 8015f8e:	69fb      	ldr	r3, [r7, #28]
 8015f90:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8015f94:	69bb      	ldr	r3, [r7, #24]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d004      	beq.n	8015fa4 <mg_tls_server_send_cert+0x48>
 8015f9a:	69fb      	ldr	r3, [r7, #28]
 8015f9c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8015fa0:	3305      	adds	r3, #5
 8015fa2:	e000      	b.n	8015fa6 <mg_tls_server_send_cert+0x4a>
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	4413      	add	r3, r2
 8015fa8:	617b      	str	r3, [r7, #20]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	330d      	adds	r3, #13
 8015fae:	4619      	mov	r1, r3
 8015fb0:	2001      	movs	r0, #1
 8015fb2:	f00c ffdb 	bl	8022f6c <calloc>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	613b      	str	r3, [r7, #16]
  if (cert == NULL) {
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d104      	bne.n	8015fca <mg_tls_server_send_cert+0x6e>
    mg_error(c, "tls cert oom");
 8015fc0:	495e      	ldr	r1, [pc, #376]	@ (801613c <mg_tls_server_send_cert+0x1e0>)
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	f7f0 fcaa 	bl	800691c <mg_error>
    return;
 8015fc8:	e0b4      	b.n	8016134 <mg_tls_server_send_cert+0x1d8>
  }
  cert[0] = 0x0b;  // handshake header
 8015fca:	693b      	ldr	r3, [r7, #16]
 8015fcc:	220b      	movs	r2, #11
 8015fce:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 1, n + 9);
 8015fd0:	697b      	ldr	r3, [r7, #20]
 8015fd2:	3309      	adds	r3, #9
 8015fd4:	0c1a      	lsrs	r2, r3, #16
 8015fd6:	693b      	ldr	r3, [r7, #16]
 8015fd8:	3301      	adds	r3, #1
 8015fda:	b2d2      	uxtb	r2, r2
 8015fdc:	701a      	strb	r2, [r3, #0]
 8015fde:	697b      	ldr	r3, [r7, #20]
 8015fe0:	3309      	adds	r3, #9
 8015fe2:	0a1a      	lsrs	r2, r3, #8
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	3302      	adds	r3, #2
 8015fe8:	b2d2      	uxtb	r2, r2
 8015fea:	701a      	strb	r2, [r3, #0]
 8015fec:	697b      	ldr	r3, [r7, #20]
 8015fee:	b2da      	uxtb	r2, r3
 8015ff0:	693b      	ldr	r3, [r7, #16]
 8015ff2:	3303      	adds	r3, #3
 8015ff4:	3209      	adds	r2, #9
 8015ff6:	b2d2      	uxtb	r2, r2
 8015ff8:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                 // request context
 8015ffa:	693b      	ldr	r3, [r7, #16]
 8015ffc:	3304      	adds	r3, #4
 8015ffe:	2200      	movs	r2, #0
 8016000:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 5, n + 5);              // 3 bytes: cert (s) length
 8016002:	697b      	ldr	r3, [r7, #20]
 8016004:	3305      	adds	r3, #5
 8016006:	0c1a      	lsrs	r2, r3, #16
 8016008:	693b      	ldr	r3, [r7, #16]
 801600a:	3305      	adds	r3, #5
 801600c:	b2d2      	uxtb	r2, r2
 801600e:	701a      	strb	r2, [r3, #0]
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	3305      	adds	r3, #5
 8016014:	0a1a      	lsrs	r2, r3, #8
 8016016:	693b      	ldr	r3, [r7, #16]
 8016018:	3306      	adds	r3, #6
 801601a:	b2d2      	uxtb	r2, r2
 801601c:	701a      	strb	r2, [r3, #0]
 801601e:	697b      	ldr	r3, [r7, #20]
 8016020:	b2da      	uxtb	r2, r3
 8016022:	693b      	ldr	r3, [r7, #16]
 8016024:	3307      	adds	r3, #7
 8016026:	3205      	adds	r2, #5
 8016028:	b2d2      	uxtb	r2, r2
 801602a:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 8, tls->cert_der.len);  // 3 bytes: first cert len
 801602c:	69fb      	ldr	r3, [r7, #28]
 801602e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016032:	0c1a      	lsrs	r2, r3, #16
 8016034:	693b      	ldr	r3, [r7, #16]
 8016036:	3308      	adds	r3, #8
 8016038:	b2d2      	uxtb	r2, r2
 801603a:	701a      	strb	r2, [r3, #0]
 801603c:	69fb      	ldr	r3, [r7, #28]
 801603e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016042:	0a1a      	lsrs	r2, r3, #8
 8016044:	693b      	ldr	r3, [r7, #16]
 8016046:	3309      	adds	r3, #9
 8016048:	b2d2      	uxtb	r2, r2
 801604a:	701a      	strb	r2, [r3, #0]
 801604c:	69fb      	ldr	r3, [r7, #28]
 801604e:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	330a      	adds	r3, #10
 8016056:	b2d2      	uxtb	r2, r2
 8016058:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, tls->cert_der.len);
 801605a:	693b      	ldr	r3, [r7, #16]
 801605c:	f103 000b 	add.w	r0, r3, #11
 8016060:	69fb      	ldr	r3, [r7, #28]
 8016062:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8016066:	69fb      	ldr	r3, [r7, #28]
 8016068:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801606c:	461a      	mov	r2, r3
 801606e:	f00d fa38 	bl	80234e2 <memmove>
  MG_STORE_BE16(cert + 11 + tls->cert_der.len,
 8016072:	69fb      	ldr	r3, [r7, #28]
 8016074:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016078:	330b      	adds	r3, #11
 801607a:	693a      	ldr	r2, [r7, #16]
 801607c:	4413      	add	r3, r2
 801607e:	2200      	movs	r2, #0
 8016080:	701a      	strb	r2, [r3, #0]
 8016082:	69fb      	ldr	r3, [r7, #28]
 8016084:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016088:	330c      	adds	r3, #12
 801608a:	693a      	ldr	r2, [r7, #16]
 801608c:	4413      	add	r3, r2
 801608e:	2200      	movs	r2, #0
 8016090:	701a      	strb	r2, [r3, #0]
                0);  // certificate extensions (none)
  if (send_ca) {
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d039      	beq.n	801610c <mg_tls_server_send_cert+0x1b0>
    size_t offset = 13 + tls->cert_der.len;
 8016098:	69fb      	ldr	r3, [r7, #28]
 801609a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801609e:	330d      	adds	r3, #13
 80160a0:	60fb      	str	r3, [r7, #12]
    MG_STORE_BE24(cert + offset, tls->ca_der.len);  // 3 bytes: CA cert length
 80160a2:	69fb      	ldr	r3, [r7, #28]
 80160a4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80160a8:	0c19      	lsrs	r1, r3, #16
 80160aa:	693a      	ldr	r2, [r7, #16]
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	4413      	add	r3, r2
 80160b0:	b2ca      	uxtb	r2, r1
 80160b2:	701a      	strb	r2, [r3, #0]
 80160b4:	69fb      	ldr	r3, [r7, #28]
 80160b6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80160ba:	0a19      	lsrs	r1, r3, #8
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	3301      	adds	r3, #1
 80160c0:	693a      	ldr	r2, [r7, #16]
 80160c2:	4413      	add	r3, r2
 80160c4:	b2ca      	uxtb	r2, r1
 80160c6:	701a      	strb	r2, [r3, #0]
 80160c8:	69fb      	ldr	r3, [r7, #28]
 80160ca:	f8d3 1124 	ldr.w	r1, [r3, #292]	@ 0x124
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	3302      	adds	r3, #2
 80160d2:	693a      	ldr	r2, [r7, #16]
 80160d4:	4413      	add	r3, r2
 80160d6:	b2ca      	uxtb	r2, r1
 80160d8:	701a      	strb	r2, [r3, #0]
    memmove(cert + offset + 3, tls->ca_der.buf,
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	3303      	adds	r3, #3
 80160de:	693a      	ldr	r2, [r7, #16]
 80160e0:	18d0      	adds	r0, r2, r3
 80160e2:	69fb      	ldr	r3, [r7, #28]
 80160e4:	f8d3 1120 	ldr.w	r1, [r3, #288]	@ 0x120
 80160e8:	69fb      	ldr	r3, [r7, #28]
 80160ea:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80160ee:	461a      	mov	r2, r3
 80160f0:	f00d f9f7 	bl	80234e2 <memmove>
            tls->ca_der.len);         // CA cert data
    MG_STORE_BE16(cert + 11 + n, 0);  // certificate extensions (none)
 80160f4:	697b      	ldr	r3, [r7, #20]
 80160f6:	330b      	adds	r3, #11
 80160f8:	693a      	ldr	r2, [r7, #16]
 80160fa:	4413      	add	r3, r2
 80160fc:	2200      	movs	r2, #0
 80160fe:	701a      	strb	r2, [r3, #0]
 8016100:	697b      	ldr	r3, [r7, #20]
 8016102:	330c      	adds	r3, #12
 8016104:	693a      	ldr	r2, [r7, #16]
 8016106:	4413      	add	r3, r2
 8016108:	2200      	movs	r2, #0
 801610a:	701a      	strb	r2, [r3, #0]
  }
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 801610c:	69fb      	ldr	r3, [r7, #28]
 801610e:	f103 0020 	add.w	r0, r3, #32
 8016112:	697b      	ldr	r3, [r7, #20]
 8016114:	330d      	adds	r3, #13
 8016116:	461a      	mov	r2, r3
 8016118:	6939      	ldr	r1, [r7, #16]
 801611a:	f7fc fcd1 	bl	8012ac0 <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	f103 020d 	add.w	r2, r3, #13
 8016124:	2316      	movs	r3, #22
 8016126:	6939      	ldr	r1, [r7, #16]
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f7ff f9fb 	bl	8015524 <mg_tls_encrypt>
  free(cert);
 801612e:	6938      	ldr	r0, [r7, #16]
 8016130:	f00c ff40 	bl	8022fb4 <free>
}
 8016134:	3720      	adds	r7, #32
 8016136:	46bd      	mov	sp, r7
 8016138:	bd80      	pop	{r7, pc}
 801613a:	bf00      	nop
 801613c:	08025e34 	.word	0x08025e34

08016140 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	3318      	adds	r3, #24
 8016150:	4618      	mov	r0, r3
 8016152:	f7fc fa71 	bl	8012638 <mg_sha256_init>
}
 8016156:	bf00      	nop
 8016158:	3710      	adds	r7, #16
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}

0801615e <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 801615e:	b580      	push	{r7, lr}
 8016160:	b086      	sub	sp, #24
 8016162:	af00      	add	r7, sp, #0
 8016164:	60f8      	str	r0, [r7, #12]
 8016166:	60b9      	str	r1, [r7, #8]
 8016168:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 801616e:	697b      	ldr	r3, [r7, #20]
 8016170:	3318      	adds	r3, #24
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	68b9      	ldr	r1, [r7, #8]
 8016176:	4618      	mov	r0, r3
 8016178:	f7fc fca2 	bl	8012ac0 <mg_sha256_update>
}
 801617c:	bf00      	nop
 801617e:	3718      	adds	r7, #24
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}

08016184 <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 8016184:	b580      	push	{r7, lr}
 8016186:	b084      	sub	sp, #16
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
 801618c:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	3318      	adds	r3, #24
 8016196:	4619      	mov	r1, r3
 8016198:	6838      	ldr	r0, [r7, #0]
 801619a:	f7fc fcca 	bl	8012b32 <mg_sha256_final>
}
 801619e:	bf00      	nop
 80161a0:	3710      	adds	r7, #16
 80161a2:	46bd      	mov	sp, r7
 80161a4:	bd80      	pop	{r7, pc}
	...

080161a8 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 80161a8:	b590      	push	{r4, r7, lr}
 80161aa:	b0f9      	sub	sp, #484	@ 0x1e4
 80161ac:	af02      	add	r7, sp, #8
 80161ae:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80161b2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80161b6:	6018      	str	r0, [r3, #0]
 80161b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80161bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80161c0:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80161c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80161c6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80161d0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 80161d4:	4a8a      	ldr	r2, [pc, #552]	@ (8016400 <mg_tls_send_cert_verify+0x258>)
 80161d6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80161da:	6810      	ldr	r0, [r2, #0]
 80161dc:	6851      	ldr	r1, [r2, #4]
 80161de:	c303      	stmia	r3!, {r0, r1}
 80161e0:	7a12      	ldrb	r2, [r2, #8]
 80161e2:	701a      	strb	r2, [r3, #0]
 80161e4:	f207 1379 	addw	r3, r7, #377	@ 0x179
 80161e8:	2249      	movs	r2, #73	@ 0x49
 80161ea:	2100      	movs	r1, #0
 80161ec:	4618      	mov	r0, r3
 80161ee:	f00d f992 	bl	8023516 <memset>
  size_t sigsz, verifysz = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 80161f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80161fc:	2220      	movs	r2, #32
 80161fe:	2100      	movs	r1, #0
 8016200:	4618      	mov	r0, r3
 8016202:	f00d f988 	bl	8023516 <memset>
 8016206:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801620a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801620e:	4618      	mov	r0, r3
 8016210:	2380      	movs	r3, #128	@ 0x80
 8016212:	461a      	mov	r2, r3
 8016214:	2100      	movs	r1, #0
 8016216:	f00d f97e 	bl	8023516 <memset>
  struct SHA256_HashContext ctx = {
 801621a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801621e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8016222:	4618      	mov	r0, r3
 8016224:	2388      	movs	r3, #136	@ 0x88
 8016226:	461a      	mov	r2, r3
 8016228:	2100      	movs	r1, #0
 801622a:	f00d f974 	bl	8023516 <memset>
 801622e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016232:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8016236:	4a73      	ldr	r2, [pc, #460]	@ (8016404 <mg_tls_send_cert_verify+0x25c>)
 8016238:	601a      	str	r2, [r3, #0]
 801623a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801623e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8016242:	4a71      	ldr	r2, [pc, #452]	@ (8016408 <mg_tls_send_cert_verify+0x260>)
 8016244:	605a      	str	r2, [r3, #4]
 8016246:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801624a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801624e:	4a6f      	ldr	r2, [pc, #444]	@ (801640c <mg_tls_send_cert_verify+0x264>)
 8016250:	609a      	str	r2, [r3, #8]
 8016252:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016256:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801625a:	2240      	movs	r2, #64	@ 0x40
 801625c:	60da      	str	r2, [r3, #12]
 801625e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016262:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8016266:	2220      	movs	r2, #32
 8016268:	611a      	str	r2, [r3, #16]
 801626a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801626e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8016272:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8016276:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8016278:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801627c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8016280:	4618      	mov	r0, r3
 8016282:	2340      	movs	r3, #64	@ 0x40
 8016284:	461a      	mov	r2, r3
 8016286:	2100      	movs	r1, #0
 8016288:	f00d f945 	bl	8023516 <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 801628c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016290:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8016294:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8016298:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801629c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80162a0:	6812      	ldr	r2, [r2, #0]
 80162a2:	6818      	ldr	r0, [r3, #0]
 80162a4:	f7ff fb56 	bl	8015954 <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 80162a8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80162ac:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 80162b0:	f006 fdca 	bl	801ce48 <mg_uecc_secp256r1>
 80162b4:	4603      	mov	r3, r0
 80162b6:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80162ba:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80162be:	9301      	str	r3, [sp, #4]
 80162c0:	f107 0308 	add.w	r3, r7, #8
 80162c4:	9300      	str	r3, [sp, #0]
 80162c6:	4613      	mov	r3, r2
 80162c8:	2220      	movs	r2, #32
 80162ca:	4620      	mov	r0, r4
 80162cc:	f007 fe2c 	bl	801df28 <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 80162d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80162d4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80162d8:	781b      	ldrb	r3, [r3, #0]
 80162da:	b25b      	sxtb	r3, r3
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	09db      	lsrs	r3, r3, #7
 80162e0:	b2db      	uxtb	r3, r3
 80162e2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 80162e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80162ea:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80162ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162f2:	b25b      	sxtb	r3, r3
 80162f4:	b2db      	uxtb	r3, r3
 80162f6:	09db      	lsrs	r3, r3, #7
 80162f8:	b2db      	uxtb	r3, r3
 80162fa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 80162fe:	2330      	movs	r3, #48	@ 0x30
 8016300:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 8016304:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8016308:	b2da      	uxtb	r2, r3
 801630a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801630e:	b2db      	uxtb	r3, r3
 8016310:	4413      	add	r3, r2
 8016312:	b2db      	uxtb	r3, r3
 8016314:	3344      	adds	r3, #68	@ 0x44
 8016316:	b2db      	uxtb	r3, r3
 8016318:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 801631c:	2302      	movs	r3, #2
 801631e:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 8016322:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8016326:	b2db      	uxtb	r3, r3
 8016328:	3320      	adds	r3, #32
 801632a:	b2db      	uxtb	r3, r3
 801632c:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8016330:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8016334:	330c      	adds	r3, #12
 8016336:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 801633a:	4413      	add	r3, r2
 801633c:	f107 0108 	add.w	r1, r7, #8
 8016340:	2220      	movs	r2, #32
 8016342:	4618      	mov	r0, r3
 8016344:	f00d f8cd 	bl	80234e2 <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8016348:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 801634c:	332c      	adds	r3, #44	@ 0x2c
 801634e:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8016352:	443b      	add	r3, r7
 8016354:	2202      	movs	r2, #2
 8016356:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 801635a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801635e:	b2da      	uxtb	r2, r3
 8016360:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8016364:	332d      	adds	r3, #45	@ 0x2d
 8016366:	3220      	adds	r2, #32
 8016368:	b2d2      	uxtb	r2, r2
 801636a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 801636e:	443b      	add	r3, r7
 8016370:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 8016374:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8016378:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801637c:	4413      	add	r3, r2
 801637e:	332e      	adds	r3, #46	@ 0x2e
 8016380:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8016384:	18d0      	adds	r0, r2, r3
 8016386:	f107 0308 	add.w	r3, r7, #8
 801638a:	3320      	adds	r3, #32
 801638c:	2220      	movs	r2, #32
 801638e:	4619      	mov	r1, r3
 8016390:	f00d f8a7 	bl	80234e2 <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 8016394:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8016398:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 801639c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80163a0:	4413      	add	r3, r2
 80163a2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 80163a6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80163aa:	3308      	adds	r3, #8
 80163ac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 80163b0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80163b4:	b2db      	uxtb	r3, r3
 80163b6:	3304      	adds	r3, #4
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 80163be:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80163c2:	b2db      	uxtb	r3, r3
 80163c4:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 80163c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80163cc:	3320      	adds	r3, #32
 80163ce:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80163d2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80163d6:	4618      	mov	r0, r3
 80163d8:	f7fc fb72 	bl	8012ac0 <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 80163dc:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80163e0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80163e4:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 80163e8:	2316      	movs	r3, #22
 80163ea:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80163ee:	6800      	ldr	r0, [r0, #0]
 80163f0:	f7ff f898 	bl	8015524 <mg_tls_encrypt>
}
 80163f4:	bf00      	nop
 80163f6:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 80163fa:	46bd      	mov	sp, r7
 80163fc:	bd90      	pop	{r4, r7, pc}
 80163fe:	bf00      	nop
 8016400:	08025e44 	.word	0x08025e44
 8016404:	08016141 	.word	0x08016141
 8016408:	0801615f 	.word	0x0801615f
 801640c:	08016185 	.word	0x08016185

08016410 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8016410:	b580      	push	{r7, lr}
 8016412:	b0b4      	sub	sp, #208	@ 0xd0
 8016414:	af02      	add	r7, sp, #8
 8016416:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801641e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8016422:	4b1e      	ldr	r3, [pc, #120]	@ (801649c <mg_tls_server_send_finish+0x8c>)
 8016424:	60fb      	str	r3, [r7, #12]
 8016426:	f107 0310 	add.w	r3, r7, #16
 801642a:	2220      	movs	r2, #32
 801642c:	2100      	movs	r1, #0
 801642e:	4618      	mov	r0, r3
 8016430:	f00d f871 	bl	8023516 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8016434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016438:	f103 0120 	add.w	r1, r3, #32
 801643c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8016440:	2270      	movs	r2, #112	@ 0x70
 8016442:	4618      	mov	r0, r3
 8016444:	f00d f84d 	bl	80234e2 <memmove>
  mg_sha256_final(hash, &sha256);
 8016448:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801644c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016450:	4611      	mov	r1, r2
 8016452:	4618      	mov	r0, r3
 8016454:	f7fc fb6d 	bl	8012b32 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 8016458:	f107 000c 	add.w	r0, r7, #12
 801645c:	3004      	adds	r0, #4
 801645e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016462:	f203 41d4 	addw	r1, r3, #1236	@ 0x4d4
 8016466:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801646a:	2220      	movs	r2, #32
 801646c:	9200      	str	r2, [sp, #0]
 801646e:	2220      	movs	r2, #32
 8016470:	f7fc fcb3 	bl	8012dda <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8016474:	f107 010c 	add.w	r1, r7, #12
 8016478:	2316      	movs	r3, #22
 801647a:	2224      	movs	r2, #36	@ 0x24
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	f7ff f851 	bl	8015524 <mg_tls_encrypt>
  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 8016482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016486:	3320      	adds	r3, #32
 8016488:	f107 010c 	add.w	r1, r7, #12
 801648c:	2224      	movs	r2, #36	@ 0x24
 801648e:	4618      	mov	r0, r3
 8016490:	f7fc fb16 	bl	8012ac0 <mg_sha256_update>
}
 8016494:	bf00      	nop
 8016496:	37c8      	adds	r7, #200	@ 0xc8
 8016498:	46bd      	mov	sp, r7
 801649a:	bd80      	pop	{r7, pc}
 801649c:	20000014 	.word	0x20000014

080164a0 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b0a0      	sub	sp, #128	@ 0x80
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80164ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 80164b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80164b2:	f107 0008 	add.w	r0, r7, #8
 80164b6:	3320      	adds	r3, #32
 80164b8:	2270      	movs	r2, #112	@ 0x70
 80164ba:	4619      	mov	r1, r3
 80164bc:	f00d f961 	bl	8023782 <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 80164c0:	6878      	ldr	r0, [r7, #4]
 80164c2:	f7ff f92b 	bl	801571c <mg_tls_recv_record>
 80164c6:	4603      	mov	r3, r0
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	da02      	bge.n	80164d2 <mg_tls_server_recv_finish+0x32>
    return -1;
 80164cc:	f04f 33ff 	mov.w	r3, #4294967295
 80164d0:	e01f      	b.n	8016512 <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80164d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80164d8:	695b      	ldr	r3, [r3, #20]
 80164da:	4413      	add	r3, r2
 80164dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 80164de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80164e0:	781b      	ldrb	r3, [r3, #0]
 80164e2:	2b14      	cmp	r3, #20
 80164e4:	d009      	beq.n	80164fa <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 80164e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80164e8:	781b      	ldrb	r3, [r3, #0]
 80164ea:	461a      	mov	r2, r3
 80164ec:	490b      	ldr	r1, [pc, #44]	@ (801651c <mg_tls_server_recv_finish+0x7c>)
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f7f0 fa14 	bl	800691c <mg_error>
    return -1;
 80164f4:	f04f 33ff 	mov.w	r3, #4294967295
 80164f8:	e00b      	b.n	8016512 <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 80164fa:	6878      	ldr	r0, [r7, #4]
 80164fc:	f7fe fcc2 	bl	8014e84 <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 8016500:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016502:	3320      	adds	r3, #32
 8016504:	f107 0108 	add.w	r1, r7, #8
 8016508:	2270      	movs	r2, #112	@ 0x70
 801650a:	4618      	mov	r0, r3
 801650c:	f00d f939 	bl	8023782 <memcpy>
  return 0;
 8016510:	2300      	movs	r3, #0
}
 8016512:	4618      	mov	r0, r3
 8016514:	3780      	adds	r7, #128	@ 0x80
 8016516:	46bd      	mov	sp, r7
 8016518:	bd80      	pop	{r7, pc}
 801651a:	bf00      	nop
 801651c:	08025e50 	.word	0x08025e50

08016520 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8016520:	b5b0      	push	{r4, r5, r7, lr}
 8016522:	b0c6      	sub	sp, #280	@ 0x118
 8016524:	af00      	add	r7, sp, #0
 8016526:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801652a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801652e:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016530:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016534:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801653e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  struct mg_iobuf *wio = &tls->send;
 8016542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016546:	3304      	adds	r3, #4
 8016548:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  uint8_t x25519_pub[X25519_BYTES];

  // signature algorithms we actually support:
  // rsa_pkcs1_sha256, rsa_pss_rsae_sha256 and ecdsa_secp256r1_sha256
  uint8_t secp256r1_sig_algs[12] = {
 801654c:	4a27      	ldr	r2, [pc, #156]	@ (80165ec <mg_tls_client_send_hello+0xcc>)
 801654e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8016552:	ca07      	ldmia	r2, {r0, r1, r2}
 8016554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      0x00, 0x0d, 0x00, 0x08, 0x00, 0x06, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 8016558:	4b25      	ldr	r3, [pc, #148]	@ (80165f0 <mg_tls_client_send_hello+0xd0>)
 801655a:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 801655e:	461d      	mov	r5, r3
 8016560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016568:	682b      	ldr	r3, [r5, #0]
 801656a:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 801656c:	4a21      	ldr	r2, [pc, #132]	@ (80165f4 <mg_tls_client_send_hello+0xd4>)
 801656e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8016572:	ca07      	ldmia	r2, {r0, r1, r2}
 8016574:	c303      	stmia	r3!, {r0, r1}
 8016576:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 8016578:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801657c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016580:	4a1d      	ldr	r2, [pc, #116]	@ (80165f8 <mg_tls_client_send_hello+0xd8>)
 8016582:	4618      	mov	r0, r3
 8016584:	4611      	mov	r1, r2
 8016586:	2391      	movs	r3, #145	@ 0x91
 8016588:	461a      	mov	r2, r3
 801658a:	f00d f8fa 	bl	8023782 <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 801658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016592:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8016596:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  size_t hostnamesz = strlen(tls->hostname);
 801659a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801659e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80165a2:	4618      	mov	r0, r3
 80165a4:	f7e9 ff14 	bl	80003d0 <strlen>
 80165a8:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 80165ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d003      	beq.n	80165bc <mg_tls_client_send_hello+0x9c>
 80165b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80165b8:	3309      	adds	r3, #9
 80165ba:	e000      	b.n	80165be <mg_tls_client_send_hello+0x9e>
 80165bc:	2300      	movs	r3, #0
 80165be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 80165c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165c6:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d002      	beq.n	80165d4 <mg_tls_client_send_hello+0xb4>
 80165ce:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80165d2:	e001      	b.n	80165d8 <mg_tls_client_send_hello+0xb8>
 80165d4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80165d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 80165dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80165e0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d009      	beq.n	80165fc <mg_tls_client_send_hello+0xdc>
 80165e8:	2322      	movs	r3, #34	@ 0x22
 80165ea:	e008      	b.n	80165fe <mg_tls_client_send_hello+0xde>
 80165ec:	08025e74 	.word	0x08025e74
 80165f0:	08025e80 	.word	0x08025e80
 80165f4:	08025ea4 	.word	0x08025ea4
 80165f8:	08025eb0 	.word	0x08025eb0
 80165fc:	230c      	movs	r3, #12
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 80165fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 8016602:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8016606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801660a:	4413      	add	r3, r2
 801660c:	338c      	adds	r3, #140	@ 0x8c
 801660e:	0a1b      	lsrs	r3, r3, #8
 8016610:	b2da      	uxtb	r2, r3
 8016612:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016616:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801661a:	70da      	strb	r2, [r3, #3]
 801661c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8016620:	b2da      	uxtb	r2, r3
 8016622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016626:	b2db      	uxtb	r3, r3
 8016628:	4413      	add	r3, r2
 801662a:	b2db      	uxtb	r3, r3
 801662c:	3b74      	subs	r3, #116	@ 0x74
 801662e:	b2da      	uxtb	r2, r3
 8016630:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016634:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016638:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 801663a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801663e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016642:	4413      	add	r3, r2
 8016644:	3388      	adds	r3, #136	@ 0x88
 8016646:	0a1b      	lsrs	r3, r3, #8
 8016648:	b2da      	uxtb	r2, r3
 801664a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801664e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016652:	71da      	strb	r2, [r3, #7]
 8016654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8016658:	b2da      	uxtb	r2, r3
 801665a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801665e:	b2db      	uxtb	r3, r3
 8016660:	4413      	add	r3, r2
 8016662:	b2db      	uxtb	r3, r3
 8016664:	3b78      	subs	r3, #120	@ 0x78
 8016666:	b2da      	uxtb	r2, r3
 8016668:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801666c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016670:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 8016672:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8016676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801667a:	4413      	add	r3, r2
 801667c:	333d      	adds	r3, #61	@ 0x3d
 801667e:	0a1b      	lsrs	r3, r3, #8
 8016680:	b2da      	uxtb	r2, r3
 8016682:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016686:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801668a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 801668e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8016692:	b2da      	uxtb	r2, r3
 8016694:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016698:	b2db      	uxtb	r3, r3
 801669a:	4413      	add	r3, r2
 801669c:	b2db      	uxtb	r3, r3
 801669e:	333d      	adds	r3, #61	@ 0x3d
 80166a0:	b2da      	uxtb	r2, r3
 80166a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80166a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80166aa:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 80166ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d026      	beq.n	8016704 <mg_tls_client_send_hello+0x1e4>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 80166b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80166ba:	3305      	adds	r3, #5
 80166bc:	0a1b      	lsrs	r3, r3, #8
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80166c4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80166c8:	b2db      	uxtb	r3, r3
 80166ca:	3305      	adds	r3, #5
 80166cc:	b2db      	uxtb	r3, r3
 80166ce:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 80166d2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80166d6:	3303      	adds	r3, #3
 80166d8:	0a1b      	lsrs	r3, r3, #8
 80166da:	b2db      	uxtb	r3, r3
 80166dc:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 80166e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80166e4:	b2db      	uxtb	r3, r3
 80166e6:	3303      	adds	r3, #3
 80166e8:	b2db      	uxtb	r3, r3
 80166ea:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 80166ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80166f2:	0a1b      	lsrs	r3, r3, #8
 80166f4:	b2db      	uxtb	r3, r3
 80166f6:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80166fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80166fe:	b2db      	uxtb	r3, r3
 8016700:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 8016704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016708:	33d0      	adds	r3, #208	@ 0xd0
 801670a:	2120      	movs	r1, #32
 801670c:	4618      	mov	r0, r3
 801670e:	f7e9 fffd 	bl	800070c <mg_random>
 8016712:	4603      	mov	r3, r0
 8016714:	f083 0301 	eor.w	r3, r3, #1
 8016718:	b2db      	uxtb	r3, r3
 801671a:	2b00      	cmp	r3, #0
 801671c:	d007      	beq.n	801672e <mg_tls_client_send_hello+0x20e>
 801671e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016722:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016726:	496c      	ldr	r1, [pc, #432]	@ (80168d8 <mg_tls_client_send_hello+0x3b8>)
 8016728:	6818      	ldr	r0, [r3, #0]
 801672a:	f7f0 f8f7 	bl	800691c <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 801672e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016732:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8016736:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 801673a:	2301      	movs	r3, #1
 801673c:	4a67      	ldr	r2, [pc, #412]	@ (80168dc <mg_tls_client_send_hello+0x3bc>)
 801673e:	f008 fbd7 	bl	801eef0 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 8016742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016746:	33b0      	adds	r3, #176	@ 0xb0
 8016748:	2120      	movs	r1, #32
 801674a:	4618      	mov	r0, r3
 801674c:	f7e9 ffde 	bl	800070c <mg_random>
 8016750:	4603      	mov	r3, r0
 8016752:	f083 0301 	eor.w	r3, r3, #1
 8016756:	b2db      	uxtb	r3, r3
 8016758:	2b00      	cmp	r3, #0
 801675a:	d007      	beq.n	801676c <mg_tls_client_send_hello+0x24c>
 801675c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016760:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016764:	495c      	ldr	r1, [pc, #368]	@ (80168d8 <mg_tls_client_send_hello+0x3b8>)
 8016766:	6818      	ldr	r0, [r3, #0]
 8016768:	f7f0 f8d8 	bl	800691c <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 801676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016770:	3390      	adds	r3, #144	@ 0x90
 8016772:	2120      	movs	r1, #32
 8016774:	4618      	mov	r0, r3
 8016776:	f7e9 ffc9 	bl	800070c <mg_random>
 801677a:	4603      	mov	r3, r0
 801677c:	f083 0301 	eor.w	r3, r3, #1
 8016780:	b2db      	uxtb	r3, r3
 8016782:	2b00      	cmp	r3, #0
 8016784:	d007      	beq.n	8016796 <mg_tls_client_send_hello+0x276>
 8016786:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801678a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801678e:	4952      	ldr	r1, [pc, #328]	@ (80168d8 <mg_tls_client_send_hello+0x3b8>)
 8016790:	6818      	ldr	r0, [r3, #0]
 8016792:	f7f0 f8c3 	bl	800691c <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 8016796:	f107 030c 	add.w	r3, r7, #12
 801679a:	330b      	adds	r3, #11
 801679c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80167a0:	3290      	adds	r2, #144	@ 0x90
 80167a2:	6815      	ldr	r5, [r2, #0]
 80167a4:	6854      	ldr	r4, [r2, #4]
 80167a6:	6890      	ldr	r0, [r2, #8]
 80167a8:	68d1      	ldr	r1, [r2, #12]
 80167aa:	601d      	str	r5, [r3, #0]
 80167ac:	605c      	str	r4, [r3, #4]
 80167ae:	6098      	str	r0, [r3, #8]
 80167b0:	60d9      	str	r1, [r3, #12]
 80167b2:	6915      	ldr	r5, [r2, #16]
 80167b4:	6954      	ldr	r4, [r2, #20]
 80167b6:	6990      	ldr	r0, [r2, #24]
 80167b8:	69d1      	ldr	r1, [r2, #28]
 80167ba:	611d      	str	r5, [r3, #16]
 80167bc:	615c      	str	r4, [r3, #20]
 80167be:	6198      	str	r0, [r3, #24]
 80167c0:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 80167c2:	f107 030c 	add.w	r3, r7, #12
 80167c6:	332c      	adds	r3, #44	@ 0x2c
 80167c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80167cc:	32b0      	adds	r2, #176	@ 0xb0
 80167ce:	6815      	ldr	r5, [r2, #0]
 80167d0:	6854      	ldr	r4, [r2, #4]
 80167d2:	6890      	ldr	r0, [r2, #8]
 80167d4:	68d1      	ldr	r1, [r2, #12]
 80167d6:	601d      	str	r5, [r3, #0]
 80167d8:	605c      	str	r4, [r3, #4]
 80167da:	6098      	str	r0, [r3, #8]
 80167dc:	60d9      	str	r1, [r3, #12]
 80167de:	6915      	ldr	r5, [r2, #16]
 80167e0:	6954      	ldr	r4, [r2, #20]
 80167e2:	6990      	ldr	r0, [r2, #24]
 80167e4:	69d1      	ldr	r1, [r2, #28]
 80167e6:	611d      	str	r5, [r3, #16]
 80167e8:	615c      	str	r4, [r3, #20]
 80167ea:	6198      	str	r0, [r3, #24]
 80167ec:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 80167ee:	f107 030c 	add.w	r3, r7, #12
 80167f2:	335e      	adds	r3, #94	@ 0x5e
 80167f4:	461d      	mov	r5, r3
 80167f6:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 80167fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167fc:	6028      	str	r0, [r5, #0]
 80167fe:	6069      	str	r1, [r5, #4]
 8016800:	60aa      	str	r2, [r5, #8]
 8016802:	60eb      	str	r3, [r5, #12]
 8016804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016806:	6128      	str	r0, [r5, #16]
 8016808:	6169      	str	r1, [r5, #20]
 801680a:	61aa      	str	r2, [r5, #24]
 801680c:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 801680e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8016812:	6899      	ldr	r1, [r3, #8]
 8016814:	f107 020c 	add.w	r2, r7, #12
 8016818:	2391      	movs	r3, #145	@ 0x91
 801681a:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 801681e:	f7f4 fe6f 	bl	800b500 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 8016822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016826:	f103 0020 	add.w	r0, r3, #32
 801682a:	f107 030c 	add.w	r3, r7, #12
 801682e:	3305      	adds	r3, #5
 8016830:	228c      	movs	r2, #140	@ 0x8c
 8016832:	4619      	mov	r1, r3
 8016834:	f7fc f944 	bl	8012ac0 <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 8016838:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801683c:	6899      	ldr	r1, [r3, #8]
 801683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016842:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8016846:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 801684a:	f7f4 fe59 	bl	800b500 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 801684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016852:	3320      	adds	r3, #32
 8016854:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8016858:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801685c:	4618      	mov	r0, r3
 801685e:	f7fc f92f 	bl	8012ac0 <mg_sha256_update>
  if (hostnamesz > 0) {
 8016862:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8016866:	2b00      	cmp	r3, #0
 8016868:	d027      	beq.n	80168ba <mg_tls_client_send_hello+0x39a>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 801686a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801686e:	6899      	ldr	r1, [r3, #8]
 8016870:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8016874:	2309      	movs	r3, #9
 8016876:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 801687a:	f7f4 fe41 	bl	800b500 <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 801687e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8016882:	6899      	ldr	r1, [r3, #8]
 8016884:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8016888:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801688c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8016890:	f7f4 fe36 	bl	800b500 <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 8016894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016898:	3320      	adds	r3, #32
 801689a:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 801689e:	2209      	movs	r2, #9
 80168a0:	4618      	mov	r0, r3
 80168a2:	f7fc f90d 	bl	8012ac0 <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 80168a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80168aa:	3320      	adds	r3, #32
 80168ac:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80168b0:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 80168b4:	4618      	mov	r0, r3
 80168b6:	f7fc f903 	bl	8012ac0 <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 80168ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80168be:	6899      	ldr	r1, [r3, #8]
 80168c0:	2306      	movs	r3, #6
 80168c2:	4a07      	ldr	r2, [pc, #28]	@ (80168e0 <mg_tls_client_send_hello+0x3c0>)
 80168c4:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80168c8:	f7f4 fe1a 	bl	800b500 <mg_iobuf_add>
}
 80168cc:	bf00      	nop
 80168ce:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80168d2:	46bd      	mov	sp, r7
 80168d4:	bdb0      	pop	{r4, r5, r7, pc}
 80168d6:	bf00      	nop
 80168d8:	08025d94 	.word	0x08025d94
 80168dc:	08027d1c 	.word	0x08027d1c
 80168e0:	08025db0 	.word	0x08025db0

080168e4 <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b08a      	sub	sp, #40	@ 0x28
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80168f2:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	3368      	adds	r3, #104	@ 0x68
 80168f8:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 80168fa:	6878      	ldr	r0, [r7, #4]
 80168fc:	f7fe fa77 	bl	8014dee <mg_tls_got_record>
 8016900:	4603      	mov	r3, r0
 8016902:	f083 0301 	eor.w	r3, r3, #1
 8016906:	b2db      	uxtb	r3, r3
 8016908:	2b00      	cmp	r3, #0
 801690a:	d002      	beq.n	8016912 <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 801690c:	f06f 0301 	mvn.w	r3, #1
 8016910:	e109      	b.n	8016b26 <mg_tls_client_recv_hello+0x242>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 8016912:	69fb      	ldr	r3, [r7, #28]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	781b      	ldrb	r3, [r3, #0]
 8016918:	2b16      	cmp	r3, #22
 801691a:	d105      	bne.n	8016928 <mg_tls_client_recv_hello+0x44>
 801691c:	69fb      	ldr	r3, [r7, #28]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	3305      	adds	r3, #5
 8016922:	781b      	ldrb	r3, [r3, #0]
 8016924:	2b02      	cmp	r3, #2
 8016926:	d032      	beq.n	801698e <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 8016928:	69fb      	ldr	r3, [r7, #28]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	781b      	ldrb	r3, [r3, #0]
 801692e:	2b15      	cmp	r3, #21
 8016930:	d10f      	bne.n	8016952 <mg_tls_client_recv_hello+0x6e>
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	689b      	ldr	r3, [r3, #8]
 8016936:	2b06      	cmp	r3, #6
 8016938:	d90b      	bls.n	8016952 <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 801693a:	69fb      	ldr	r3, [r7, #28]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	3306      	adds	r3, #6
 8016940:	781b      	ldrb	r3, [r3, #0]
 8016942:	461a      	mov	r2, r3
 8016944:	497a      	ldr	r1, [pc, #488]	@ (8016b30 <mg_tls_client_recv_hello+0x24c>)
 8016946:	6878      	ldr	r0, [r7, #4]
 8016948:	f7ef ffe8 	bl	800691c <mg_error>
      return -1;
 801694c:	f04f 33ff 	mov.w	r3, #4294967295
 8016950:	e0e9      	b.n	8016b26 <mg_tls_client_recv_hello+0x242>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 8016952:	4b78      	ldr	r3, [pc, #480]	@ (8016b34 <mg_tls_client_recv_hello+0x250>)
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	2b01      	cmp	r3, #1
 8016958:	dd12      	ble.n	8016980 <mg_tls_client_recv_hello+0x9c>
 801695a:	4b77      	ldr	r3, [pc, #476]	@ (8016b38 <mg_tls_client_recv_hello+0x254>)
 801695c:	f642 52f1 	movw	r2, #11761	@ 0x2df1
 8016960:	4976      	ldr	r1, [pc, #472]	@ (8016b3c <mg_tls_client_recv_hello+0x258>)
 8016962:	2002      	movs	r0, #2
 8016964:	f7f5 fcea 	bl	800c33c <mg_log_prefix>
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	4619      	mov	r1, r3
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	3305      	adds	r3, #5
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	461a      	mov	r2, r3
 801697a:	4871      	ldr	r0, [pc, #452]	@ (8016b40 <mg_tls_client_recv_hello+0x25c>)
 801697c:	f7f5 fd2e 	bl	800c3dc <mg_log>
    mg_error(c, "not a server hello packet");
 8016980:	4970      	ldr	r1, [pc, #448]	@ (8016b44 <mg_tls_client_recv_hello+0x260>)
 8016982:	6878      	ldr	r0, [r7, #4]
 8016984:	f7ef ffca 	bl	800691c <mg_error>
    return -1;
 8016988:	f04f 33ff 	mov.w	r3, #4294967295
 801698c:	e0cb      	b.n	8016b26 <mg_tls_client_recv_hello+0x242>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 801698e:	69fb      	ldr	r3, [r7, #28]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	3303      	adds	r3, #3
 8016994:	781b      	ldrb	r3, [r3, #0]
 8016996:	b21b      	sxth	r3, r3
 8016998:	021b      	lsls	r3, r3, #8
 801699a:	b21a      	sxth	r2, r3
 801699c:	69fb      	ldr	r3, [r7, #28]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	3304      	adds	r3, #4
 80169a2:	781b      	ldrb	r3, [r3, #0]
 80169a4:	b21b      	sxth	r3, r3
 80169a6:	4313      	orrs	r3, r2
 80169a8:	b21b      	sxth	r3, r3
 80169aa:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 80169ac:	6a3b      	ldr	r3, [r7, #32]
 80169ae:	f103 0020 	add.w	r0, r3, #32
 80169b2:	69fb      	ldr	r3, [r7, #28]
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	3305      	adds	r3, #5
 80169b8:	8b7a      	ldrh	r2, [r7, #26]
 80169ba:	4619      	mov	r1, r3
 80169bc:	f7fc f880 	bl	8012ac0 <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 80169c0:	69fb      	ldr	r3, [r7, #28]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	334f      	adds	r3, #79	@ 0x4f
 80169c6:	781b      	ldrb	r3, [r3, #0]
 80169c8:	b21b      	sxth	r3, r3
 80169ca:	021b      	lsls	r3, r3, #8
 80169cc:	b21a      	sxth	r2, r3
 80169ce:	69fb      	ldr	r3, [r7, #28]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	3350      	adds	r3, #80	@ 0x50
 80169d4:	781b      	ldrb	r3, [r3, #0]
 80169d6:	b21b      	sxth	r3, r3
 80169d8:	4313      	orrs	r3, r2
 80169da:	b21b      	sxth	r3, r3
 80169dc:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 80169de:	69fb      	ldr	r3, [r7, #28]
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	3351      	adds	r3, #81	@ 0x51
 80169e4:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 80169e6:	8b3a      	ldrh	r2, [r7, #24]
 80169e8:	69fb      	ldr	r3, [r7, #28]
 80169ea:	689b      	ldr	r3, [r3, #8]
 80169ec:	3b51      	subs	r3, #81	@ 0x51
 80169ee:	429a      	cmp	r2, r3
 80169f0:	f200 8090 	bhi.w	8016b14 <mg_tls_client_recv_hello+0x230>

  for (j = 0; j < ext_len;) {
 80169f4:	2300      	movs	r3, #0
 80169f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80169f8:	e086      	b.n	8016b08 <mg_tls_client_recv_hello+0x224>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 80169fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169fc:	697a      	ldr	r2, [r7, #20]
 80169fe:	4413      	add	r3, r2
 8016a00:	781b      	ldrb	r3, [r3, #0]
 8016a02:	b21b      	sxth	r3, r3
 8016a04:	021b      	lsls	r3, r3, #8
 8016a06:	b21a      	sxth	r2, r3
 8016a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a0a:	3301      	adds	r3, #1
 8016a0c:	6979      	ldr	r1, [r7, #20]
 8016a0e:	440b      	add	r3, r1
 8016a10:	781b      	ldrb	r3, [r3, #0]
 8016a12:	b21b      	sxth	r3, r3
 8016a14:	4313      	orrs	r3, r2
 8016a16:	b21b      	sxth	r3, r3
 8016a18:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 8016a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a1c:	3302      	adds	r3, #2
 8016a1e:	697a      	ldr	r2, [r7, #20]
 8016a20:	4413      	add	r3, r2
 8016a22:	781b      	ldrb	r3, [r3, #0]
 8016a24:	b21b      	sxth	r3, r3
 8016a26:	021b      	lsls	r3, r3, #8
 8016a28:	b21a      	sxth	r2, r3
 8016a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a2c:	3303      	adds	r3, #3
 8016a2e:	6979      	ldr	r1, [r7, #20]
 8016a30:	440b      	add	r3, r1
 8016a32:	781b      	ldrb	r3, [r3, #0]
 8016a34:	b21b      	sxth	r3, r3
 8016a36:	4313      	orrs	r3, r2
 8016a38:	b21b      	sxth	r3, r3
 8016a3a:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8016a3c:	8b3a      	ldrh	r2, [r7, #24]
 8016a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a40:	1ad3      	subs	r3, r2, r3
 8016a42:	1eda      	subs	r2, r3, #3
 8016a44:	8a3b      	ldrh	r3, [r7, #16]
 8016a46:	429a      	cmp	r2, r3
 8016a48:	dd66      	ble.n	8016b18 <mg_tls_client_recv_hello+0x234>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 8016a4a:	8a7b      	ldrh	r3, [r7, #18]
 8016a4c:	2b33      	cmp	r3, #51	@ 0x33
 8016a4e:	d007      	beq.n	8016a60 <mg_tls_client_recv_hello+0x17c>
      j += (uint16_t) (ext_len2 + 4);
 8016a50:	8a3b      	ldrh	r3, [r7, #16]
 8016a52:	3304      	adds	r3, #4
 8016a54:	b29b      	uxth	r3, r3
 8016a56:	461a      	mov	r2, r3
 8016a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a5a:	4413      	add	r3, r2
 8016a5c:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8016a5e:	e053      	b.n	8016b08 <mg_tls_client_recv_hello+0x224>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 8016a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a62:	3304      	adds	r3, #4
 8016a64:	697a      	ldr	r2, [r7, #20]
 8016a66:	4413      	add	r3, r2
 8016a68:	781b      	ldrb	r3, [r3, #0]
 8016a6a:	b21b      	sxth	r3, r3
 8016a6c:	021b      	lsls	r3, r3, #8
 8016a6e:	b21a      	sxth	r2, r3
 8016a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a72:	3305      	adds	r3, #5
 8016a74:	6979      	ldr	r1, [r7, #20]
 8016a76:	440b      	add	r3, r1
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	b21b      	sxth	r3, r3
 8016a7c:	4313      	orrs	r3, r2
 8016a7e:	b21b      	sxth	r3, r3
 8016a80:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 8016a82:	89fb      	ldrh	r3, [r7, #14]
 8016a84:	2b1d      	cmp	r3, #29
 8016a86:	d006      	beq.n	8016a96 <mg_tls_client_recv_hello+0x1b2>
      mg_error(c, "bad key exchange group");
 8016a88:	492f      	ldr	r1, [pc, #188]	@ (8016b48 <mg_tls_client_recv_hello+0x264>)
 8016a8a:	6878      	ldr	r0, [r7, #4]
 8016a8c:	f7ef ff46 	bl	800691c <mg_error>
      return -1;
 8016a90:	f04f 33ff 	mov.w	r3, #4294967295
 8016a94:	e047      	b.n	8016b26 <mg_tls_client_recv_hello+0x242>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 8016a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a98:	3306      	adds	r3, #6
 8016a9a:	697a      	ldr	r2, [r7, #20]
 8016a9c:	4413      	add	r3, r2
 8016a9e:	781b      	ldrb	r3, [r3, #0]
 8016aa0:	b21b      	sxth	r3, r3
 8016aa2:	021b      	lsls	r3, r3, #8
 8016aa4:	b21a      	sxth	r2, r3
 8016aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa8:	3307      	adds	r3, #7
 8016aaa:	6979      	ldr	r1, [r7, #20]
 8016aac:	440b      	add	r3, r1
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	b21b      	sxth	r3, r3
 8016ab2:	4313      	orrs	r3, r2
 8016ab4:	b21b      	sxth	r3, r3
 8016ab6:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 8016ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aba:	3308      	adds	r3, #8
 8016abc:	697a      	ldr	r2, [r7, #20]
 8016abe:	4413      	add	r3, r2
 8016ac0:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 8016ac2:	89bb      	ldrh	r3, [r7, #12]
 8016ac4:	2b20      	cmp	r3, #32
 8016ac6:	d006      	beq.n	8016ad6 <mg_tls_client_recv_hello+0x1f2>
      mg_error(c, "bad key exchange length");
 8016ac8:	4920      	ldr	r1, [pc, #128]	@ (8016b4c <mg_tls_client_recv_hello+0x268>)
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f7ef ff26 	bl	800691c <mg_error>
      return -1;
 8016ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ad4:	e027      	b.n	8016b26 <mg_tls_client_recv_hello+0x242>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 8016ad6:	6a3b      	ldr	r3, [r7, #32]
 8016ad8:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8016adc:	6a3b      	ldr	r3, [r7, #32]
 8016ade:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8016ae2:	2301      	movs	r3, #1
 8016ae4:	68ba      	ldr	r2, [r7, #8]
 8016ae6:	f008 fa03 	bl	801eef0 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 8016aea:	6a3b      	ldr	r3, [r7, #32]
 8016aec:	33f0      	adds	r3, #240	@ 0xf0
 8016aee:	2220      	movs	r2, #32
 8016af0:	4619      	mov	r1, r3
 8016af2:	4817      	ldr	r0, [pc, #92]	@ (8016b50 <mg_tls_client_recv_hello+0x26c>)
 8016af4:	f7fe f824 	bl	8014b40 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 8016af8:	6878      	ldr	r0, [r7, #4]
 8016afa:	f7fe f9a0 	bl	8014e3e <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f7fe faa8 	bl	8015054 <mg_tls_generate_handshake_keys>
    return 0;
 8016b04:	2300      	movs	r3, #0
 8016b06:	e00e      	b.n	8016b26 <mg_tls_client_recv_hello+0x242>
  for (j = 0; j < ext_len;) {
 8016b08:	8b3b      	ldrh	r3, [r7, #24]
 8016b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b0c:	429a      	cmp	r2, r3
 8016b0e:	f6ff af74 	blt.w	80169fa <mg_tls_client_recv_hello+0x116>
  }
fail:
 8016b12:	e002      	b.n	8016b1a <mg_tls_client_recv_hello+0x236>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8016b14:	bf00      	nop
 8016b16:	e000      	b.n	8016b1a <mg_tls_client_recv_hello+0x236>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8016b18:	bf00      	nop
  mg_error(c, "bad server hello");
 8016b1a:	490e      	ldr	r1, [pc, #56]	@ (8016b54 <mg_tls_client_recv_hello+0x270>)
 8016b1c:	6878      	ldr	r0, [r7, #4]
 8016b1e:	f7ef fefd 	bl	800691c <mg_error>
  return -1;
 8016b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016b26:	4618      	mov	r0, r3
 8016b28:	3728      	adds	r7, #40	@ 0x28
 8016b2a:	46bd      	mov	sp, r7
 8016b2c:	bd80      	pop	{r7, pc}
 8016b2e:	bf00      	nop
 8016b30:	08025f44 	.word	0x08025f44
 8016b34:	24000258 	.word	0x24000258
 8016b38:	08027f94 	.word	0x08027f94
 8016b3c:	080241e8 	.word	0x080241e8
 8016b40:	08025f54 	.word	0x08025f54
 8016b44:	08025f74 	.word	0x08025f74
 8016b48:	08025f90 	.word	0x08025f90
 8016b4c:	08025fa8 	.word	0x08025fa8
 8016b50:	08025fc0 	.word	0x08025fc0
 8016b54:	08025fd0 	.word	0x08025fd0

08016b58 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b084      	sub	sp, #16
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016b66:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8016b68:	6878      	ldr	r0, [r7, #4]
 8016b6a:	f7fe fdd7 	bl	801571c <mg_tls_recv_record>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	da02      	bge.n	8016b7a <mg_tls_client_recv_ext+0x22>
    return -1;
 8016b74:	f04f 33ff 	mov.w	r3, #4294967295
 8016b78:	e017      	b.n	8016baa <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	695b      	ldr	r3, [r3, #20]
 8016b82:	4413      	add	r3, r2
 8016b84:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 8016b86:	68bb      	ldr	r3, [r7, #8]
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	2b08      	cmp	r3, #8
 8016b8c:	d009      	beq.n	8016ba2 <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 8016b8e:	68bb      	ldr	r3, [r7, #8]
 8016b90:	781b      	ldrb	r3, [r3, #0]
 8016b92:	461a      	mov	r2, r3
 8016b94:	4907      	ldr	r1, [pc, #28]	@ (8016bb4 <mg_tls_client_recv_ext+0x5c>)
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f7ef fec0 	bl	800691c <mg_error>
    return -1;
 8016b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8016ba0:	e003      	b.n	8016baa <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 8016ba2:	6878      	ldr	r0, [r7, #4]
 8016ba4:	f7fe f96e 	bl	8014e84 <mg_tls_drop_message>
  return 0;
 8016ba8:	2300      	movs	r3, #0
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	3710      	adds	r7, #16
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}
 8016bb2:	bf00      	nop
 8016bb4:	08025fe4 	.word	0x08025fe4

08016bb8 <mg_der_debug_cert_name>:
  struct mg_str sig;    // signature
  uint8_t tbshash[48];  // 32b for sha256/secp256, 48b for sha384/secp384
  size_t tbshashsz;     // actual TBS hash size
};

static void mg_der_debug_cert_name(const char *name, struct mg_der_tlv *tlv) {
 8016bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016bba:	b099      	sub	sp, #100	@ 0x64
 8016bbc:	af06      	add	r7, sp, #24
 8016bbe:	6178      	str	r0, [r7, #20]
 8016bc0:	6139      	str	r1, [r7, #16]
  struct mg_der_tlv v;
  struct mg_str cn, c, o, ou;
  cn = c = o = ou = mg_str("");
 8016bc2:	f107 031c 	add.w	r3, r7, #28
 8016bc6:	4946      	ldr	r1, [pc, #280]	@ (8016ce0 <mg_der_debug_cert_name+0x128>)
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7fd fa03 	bl	8013fd4 <mg_str_s>
 8016bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016bd2:	f107 021c 	add.w	r2, r7, #28
 8016bd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016bda:	e883 0003 	stmia.w	r3, {r0, r1}
 8016bde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016be2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016bea:	e883 0003 	stmia.w	r3, {r0, r1}
 8016bee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016bf2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016bfa:	e883 0003 	stmia.w	r3, {r0, r1}
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x03", 3, &v))
 8016bfe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016c02:	2203      	movs	r2, #3
 8016c04:	4937      	ldr	r1, [pc, #220]	@ (8016ce4 <mg_der_debug_cert_name+0x12c>)
 8016c06:	6938      	ldr	r0, [r7, #16]
 8016c08:	f7fe f84d 	bl	8014ca6 <mg_der_find_oid>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d006      	beq.n	8016c20 <mg_der_debug_cert_name+0x68>
    cn = mg_str_n((const char *) v.value, v.len);
 8016c12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016c14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016c16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f7fd f9f7 	bl	801400e <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x06", 3, &v))
 8016c20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016c24:	2203      	movs	r2, #3
 8016c26:	4930      	ldr	r1, [pc, #192]	@ (8016ce8 <mg_der_debug_cert_name+0x130>)
 8016c28:	6938      	ldr	r0, [r7, #16]
 8016c2a:	f7fe f83c 	bl	8014ca6 <mg_der_find_oid>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d006      	beq.n	8016c42 <mg_der_debug_cert_name+0x8a>
    c = mg_str_n((const char *) v.value, v.len);
 8016c34:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016c36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016c38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f7fd f9e6 	bl	801400e <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0a", 3, &v))
 8016c42:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016c46:	2203      	movs	r2, #3
 8016c48:	4928      	ldr	r1, [pc, #160]	@ (8016cec <mg_der_debug_cert_name+0x134>)
 8016c4a:	6938      	ldr	r0, [r7, #16]
 8016c4c:	f7fe f82b 	bl	8014ca6 <mg_der_find_oid>
 8016c50:	4603      	mov	r3, r0
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d006      	beq.n	8016c64 <mg_der_debug_cert_name+0xac>
    o = mg_str_n((const char *) v.value, v.len);
 8016c56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016c58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f7fd f9d5 	bl	801400e <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0b", 3, &v))
 8016c64:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016c68:	2203      	movs	r2, #3
 8016c6a:	4921      	ldr	r1, [pc, #132]	@ (8016cf0 <mg_der_debug_cert_name+0x138>)
 8016c6c:	6938      	ldr	r0, [r7, #16]
 8016c6e:	f7fe f81a 	bl	8014ca6 <mg_der_find_oid>
 8016c72:	4603      	mov	r3, r0
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d00e      	beq.n	8016c96 <mg_der_debug_cert_name+0xde>
    ou = mg_str_n((const char *) v.value, v.len);
 8016c78:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016c7c:	f107 0308 	add.w	r3, r7, #8
 8016c80:	4618      	mov	r0, r3
 8016c82:	f7fd f9c4 	bl	801400e <mg_str_n>
 8016c86:	f107 031c 	add.w	r3, r7, #28
 8016c8a:	f107 0208 	add.w	r2, r7, #8
 8016c8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c92:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("%s: CN=%.*s, C=%.*s, O=%.*s, OU=%.*s", name, cn.len, cn.buf,
 8016c96:	4b17      	ldr	r3, [pc, #92]	@ (8016cf4 <mg_der_debug_cert_name+0x13c>)
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	2b03      	cmp	r3, #3
 8016c9c:	dd1b      	ble.n	8016cd6 <mg_der_debug_cert_name+0x11e>
 8016c9e:	4b16      	ldr	r3, [pc, #88]	@ (8016cf8 <mg_der_debug_cert_name+0x140>)
 8016ca0:	f642 6243 	movw	r2, #11843	@ 0x2e43
 8016ca4:	4915      	ldr	r1, [pc, #84]	@ (8016cfc <mg_der_debug_cert_name+0x144>)
 8016ca6:	2004      	movs	r0, #4
 8016ca8:	f7f5 fb48 	bl	800c33c <mg_log_prefix>
 8016cac:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8016cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016cb0:	607b      	str	r3, [r7, #4]
 8016cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016cb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016cb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016cba:	6a3c      	ldr	r4, [r7, #32]
 8016cbc:	69fd      	ldr	r5, [r7, #28]
 8016cbe:	9505      	str	r5, [sp, #20]
 8016cc0:	9404      	str	r4, [sp, #16]
 8016cc2:	9003      	str	r0, [sp, #12]
 8016cc4:	9102      	str	r1, [sp, #8]
 8016cc6:	9201      	str	r2, [sp, #4]
 8016cc8:	9300      	str	r3, [sp, #0]
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	4632      	mov	r2, r6
 8016cce:	6979      	ldr	r1, [r7, #20]
 8016cd0:	480b      	ldr	r0, [pc, #44]	@ (8016d00 <mg_der_debug_cert_name+0x148>)
 8016cd2:	f7f5 fb83 	bl	800c3dc <mg_log>
              c.len, c.buf, o.len, o.buf, ou.len, ou.buf));
}
 8016cd6:	bf00      	nop
 8016cd8:	374c      	adds	r7, #76	@ 0x4c
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016cde:	bf00      	nop
 8016ce0:	08024a28 	.word	0x08024a28
 8016ce4:	08026014 	.word	0x08026014
 8016ce8:	08026018 	.word	0x08026018
 8016cec:	0802601c 	.word	0x0802601c
 8016cf0:	08026020 	.word	0x08026020
 8016cf4:	24000258 	.word	0x24000258
 8016cf8:	08027fb0 	.word	0x08027fb0
 8016cfc:	080241e8 	.word	0x080241e8
 8016d00:	08026024 	.word	0x08026024

08016d04 <mg_tls_parse_cert_der>:

static int mg_tls_parse_cert_der(void *buf, size_t dersz,
                                 struct mg_tls_cert *cert) {
 8016d04:	b590      	push	{r4, r7, lr}
 8016d06:	b0af      	sub	sp, #188	@ 0xbc
 8016d08:	af04      	add	r7, sp, #16
 8016d0a:	6178      	str	r0, [r7, #20]
 8016d0c:	6139      	str	r1, [r7, #16]
 8016d0e:	60fa      	str	r2, [r7, #12]
  uint8_t *tbs, *der = (uint8_t *) buf;
 8016d10:	697b      	ldr	r3, [r7, #20]
 8016d12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  size_t tbssz;
  struct mg_der_tlv root, tbs_cert, field, algo;  // pubkey, signature;
  struct mg_der_tlv pki, pki_algo, pki_key, pki_curve, raw_sig;

  // Parse outermost SEQUENCE
  if (mg_der_parse(der, dersz, &root) <= 0 || root.type != 0x30) return -1;
 8016d16:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8016d1a:	461a      	mov	r2, r3
 8016d1c:	6939      	ldr	r1, [r7, #16]
 8016d1e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8016d22:	f7fd ff35 	bl	8014b90 <mg_der_parse>
 8016d26:	4603      	mov	r3, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	dd03      	ble.n	8016d34 <mg_tls_parse_cert_der+0x30>
 8016d2c:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8016d30:	2b30      	cmp	r3, #48	@ 0x30
 8016d32:	d002      	beq.n	8016d3a <mg_tls_parse_cert_der+0x36>
 8016d34:	f04f 33ff 	mov.w	r3, #4294967295
 8016d38:	e38a      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>

  // Parse TBSCertificate SEQUENCE
  tbs = root.value;
 8016d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (mg_der_next(&root, &tbs_cert) <= 0 || tbs_cert.type != 0x30) return -1;
 8016d42:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8016d46:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8016d4a:	4611      	mov	r1, r2
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7fd ff7f 	bl	8014c50 <mg_der_next>
 8016d52:	4603      	mov	r3, r0
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	dd03      	ble.n	8016d60 <mg_tls_parse_cert_der+0x5c>
 8016d58:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8016d5c:	2b30      	cmp	r3, #48	@ 0x30
 8016d5e:	d002      	beq.n	8016d66 <mg_tls_parse_cert_der+0x62>
 8016d60:	f04f 33ff 	mov.w	r3, #4294967295
 8016d64:	e374      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  tbssz = (size_t) (tbs_cert.value + tbs_cert.len - tbs);
 8016d66:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016d6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016d6e:	441a      	add	r2, r3
 8016d70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016d74:	1ad3      	subs	r3, r2, r3
 8016d76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  // Parse Version (optional field)
  if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 8016d7a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8016d7e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8016d82:	4611      	mov	r1, r2
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7fd ff63 	bl	8014c50 <mg_der_next>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	dc02      	bgt.n	8016d96 <mg_tls_parse_cert_der+0x92>
 8016d90:	f04f 33ff 	mov.w	r3, #4294967295
 8016d94:	e35c      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  if (field.type == 0xa0) {  // v3
 8016d96:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8016d9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8016d9c:	d123      	bne.n	8016de6 <mg_tls_parse_cert_der+0xe2>
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8016d9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016da2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8016da4:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8016da8:	4618      	mov	r0, r3
 8016daa:	f7fd fef1 	bl	8014b90 <mg_der_parse>
 8016dae:	4603      	mov	r3, r0
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	dd07      	ble.n	8016dc4 <mg_tls_parse_cert_der+0xc0>
 8016db4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016db6:	2b01      	cmp	r3, #1
 8016db8:	d104      	bne.n	8016dc4 <mg_tls_parse_cert_der+0xc0>
        field.value[0] != 2)
 8016dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016dbe:	781b      	ldrb	r3, [r3, #0]
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8016dc0:	2b02      	cmp	r3, #2
 8016dc2:	d002      	beq.n	8016dca <mg_tls_parse_cert_der+0xc6>
      return -1;
 8016dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8016dc8:	e342      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
    if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 8016dca:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8016dce:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8016dd2:	4611      	mov	r1, r2
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	f7fd ff3b 	bl	8014c50 <mg_der_next>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	dc02      	bgt.n	8016de6 <mg_tls_parse_cert_der+0xe2>
 8016de0:	f04f 33ff 	mov.w	r3, #4294967295
 8016de4:	e334      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse Serial Number
  if (field.type != 2) return -1;
 8016de6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8016dea:	2b02      	cmp	r3, #2
 8016dec:	d002      	beq.n	8016df4 <mg_tls_parse_cert_der+0xf0>
 8016dee:	f04f 33ff 	mov.w	r3, #4294967295
 8016df2:	e32d      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  cert->sn = mg_str_n((char *) field.value, field.len);
 8016df4:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8016df8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8016dfa:	68fc      	ldr	r4, [r7, #12]
 8016dfc:	463b      	mov	r3, r7
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f7fd f905 	bl	801400e <mg_str_n>
 8016e04:	1d23      	adds	r3, r4, #4
 8016e06:	463a      	mov	r2, r7
 8016e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016e0c:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("cert s/n: %M", mg_print_hex, cert->sn.len, cert->sn.buf));
 8016e10:	4bae      	ldr	r3, [pc, #696]	@ (80170cc <mg_tls_parse_cert_der+0x3c8>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	2b03      	cmp	r3, #3
 8016e16:	dd0e      	ble.n	8016e36 <mg_tls_parse_cert_der+0x132>
 8016e18:	4bad      	ldr	r3, [pc, #692]	@ (80170d0 <mg_tls_parse_cert_der+0x3cc>)
 8016e1a:	f642 6262 	movw	r2, #11874	@ 0x2e62
 8016e1e:	49ad      	ldr	r1, [pc, #692]	@ (80170d4 <mg_tls_parse_cert_der+0x3d0>)
 8016e20:	2004      	movs	r0, #4
 8016e22:	f7f5 fa8b 	bl	800c33c <mg_log_prefix>
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	689a      	ldr	r2, [r3, #8]
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	685b      	ldr	r3, [r3, #4]
 8016e2e:	49aa      	ldr	r1, [pc, #680]	@ (80170d8 <mg_tls_parse_cert_der+0x3d4>)
 8016e30:	48aa      	ldr	r0, [pc, #680]	@ (80170dc <mg_tls_parse_cert_der+0x3d8>)
 8016e32:	f7f5 fad3 	bl	800c3dc <mg_log>

  // Parse signature algorithm (first occurrence)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8016e36:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8016e3a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8016e3e:	4611      	mov	r1, r2
 8016e40:	4618      	mov	r0, r3
 8016e42:	f7fd ff05 	bl	8014c50 <mg_der_next>
 8016e46:	4603      	mov	r3, r0
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	dd03      	ble.n	8016e54 <mg_tls_parse_cert_der+0x150>
 8016e4c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8016e50:	2b30      	cmp	r3, #48	@ 0x30
 8016e52:	d002      	beq.n	8016e5a <mg_tls_parse_cert_der+0x156>
 8016e54:	f04f 33ff 	mov.w	r3, #4294967295
 8016e58:	e2fa      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&field, &algo) <= 0 || algo.type != 0x06) return -1;
 8016e5a:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8016e5e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8016e62:	4611      	mov	r1, r2
 8016e64:	4618      	mov	r0, r3
 8016e66:	f7fd fef3 	bl	8014c50 <mg_der_next>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	dd03      	ble.n	8016e78 <mg_tls_parse_cert_der+0x174>
 8016e70:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8016e74:	2b06      	cmp	r3, #6
 8016e76:	d002      	beq.n	8016e7e <mg_tls_parse_cert_der+0x17a>
 8016e78:	f04f 33ff 	mov.w	r3, #4294967295
 8016e7c:	e2e8      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>

  MG_VERBOSE(("sig algo (oid): %M", mg_print_hex, algo.len, algo.value));
 8016e7e:	4b93      	ldr	r3, [pc, #588]	@ (80170cc <mg_tls_parse_cert_der+0x3c8>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	2b03      	cmp	r3, #3
 8016e84:	dd0c      	ble.n	8016ea0 <mg_tls_parse_cert_der+0x19c>
 8016e86:	4b92      	ldr	r3, [pc, #584]	@ (80170d0 <mg_tls_parse_cert_der+0x3cc>)
 8016e88:	f642 6268 	movw	r2, #11880	@ 0x2e68
 8016e8c:	4991      	ldr	r1, [pc, #580]	@ (80170d4 <mg_tls_parse_cert_der+0x3d0>)
 8016e8e:	2004      	movs	r0, #4
 8016e90:	f7f5 fa54 	bl	800c33c <mg_log_prefix>
 8016e94:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016e96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016e98:	498f      	ldr	r1, [pc, #572]	@ (80170d8 <mg_tls_parse_cert_der+0x3d4>)
 8016e9a:	4891      	ldr	r0, [pc, #580]	@ (80170e0 <mg_tls_parse_cert_der+0x3dc>)
 8016e9c:	f7f5 fa9e 	bl	800c3dc <mg_log>
  // Signature algorithm OID mapping
  if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x02", algo.len) == 0) {
 8016ea0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016ea2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016ea4:	498f      	ldr	r1, [pc, #572]	@ (80170e4 <mg_tls_parse_cert_der+0x3e0>)
 8016ea6:	4618      	mov	r0, r3
 8016ea8:	f00c fb0b 	bl	80234c2 <memcmp>
 8016eac:	4603      	mov	r3, r0
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d11a      	bne.n	8016ee8 <mg_tls_parse_cert_der+0x1e4>
    MG_VERBOSE(("sig algo: ECDSA with SHA256"));
 8016eb2:	4b86      	ldr	r3, [pc, #536]	@ (80170cc <mg_tls_parse_cert_der+0x3c8>)
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	2b03      	cmp	r3, #3
 8016eb8:	dd09      	ble.n	8016ece <mg_tls_parse_cert_der+0x1ca>
 8016eba:	4b85      	ldr	r3, [pc, #532]	@ (80170d0 <mg_tls_parse_cert_der+0x3cc>)
 8016ebc:	f642 626b 	movw	r2, #11883	@ 0x2e6b
 8016ec0:	4984      	ldr	r1, [pc, #528]	@ (80170d4 <mg_tls_parse_cert_der+0x3d0>)
 8016ec2:	2004      	movs	r0, #4
 8016ec4:	f7f5 fa3a 	bl	800c33c <mg_log_prefix>
 8016ec8:	4887      	ldr	r0, [pc, #540]	@ (80170e8 <mg_tls_parse_cert_der+0x3e4>)
 8016eca:	f7f5 fa87 	bl	800c3dc <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	331c      	adds	r3, #28
 8016ed2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8016ed6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8016eda:	4618      	mov	r0, r3
 8016edc:	f7fb ff61 	bl	8012da2 <mg_sha256>
    cert->tbshashsz = 32;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	2220      	movs	r2, #32
 8016ee4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8016ee6:	e07f      	b.n	8016fe8 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 8016ee8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 8016eea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 8016eec:	497f      	ldr	r1, [pc, #508]	@ (80170ec <mg_tls_parse_cert_der+0x3e8>)
 8016eee:	4618      	mov	r0, r3
 8016ef0:	f00c fae7 	bl	80234c2 <memcmp>
 8016ef4:	4603      	mov	r3, r0
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d11a      	bne.n	8016f30 <mg_tls_parse_cert_der+0x22c>
    MG_VERBOSE(("sig algo: RSA with SHA256"));
 8016efa:	4b74      	ldr	r3, [pc, #464]	@ (80170cc <mg_tls_parse_cert_der+0x3c8>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	2b03      	cmp	r3, #3
 8016f00:	dd09      	ble.n	8016f16 <mg_tls_parse_cert_der+0x212>
 8016f02:	4b73      	ldr	r3, [pc, #460]	@ (80170d0 <mg_tls_parse_cert_der+0x3cc>)
 8016f04:	f642 6270 	movw	r2, #11888	@ 0x2e70
 8016f08:	4972      	ldr	r1, [pc, #456]	@ (80170d4 <mg_tls_parse_cert_der+0x3d0>)
 8016f0a:	2004      	movs	r0, #4
 8016f0c:	f7f5 fa16 	bl	800c33c <mg_log_prefix>
 8016f10:	4877      	ldr	r0, [pc, #476]	@ (80170f0 <mg_tls_parse_cert_der+0x3ec>)
 8016f12:	f7f5 fa63 	bl	800c3dc <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	331c      	adds	r3, #28
 8016f1a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8016f1e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7fb ff3d 	bl	8012da2 <mg_sha256>
    cert->tbshashsz = 32;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	2220      	movs	r2, #32
 8016f2c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8016f2e:	e05b      	b.n	8016fe8 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x03", algo.len) ==
 8016f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016f32:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016f34:	496f      	ldr	r1, [pc, #444]	@ (80170f4 <mg_tls_parse_cert_der+0x3f0>)
 8016f36:	4618      	mov	r0, r3
 8016f38:	f00c fac3 	bl	80234c2 <memcmp>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d11a      	bne.n	8016f78 <mg_tls_parse_cert_der+0x274>
             0) {
    MG_VERBOSE(("sig algo: ECDSA with SHA384"));
 8016f42:	4b62      	ldr	r3, [pc, #392]	@ (80170cc <mg_tls_parse_cert_der+0x3c8>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	2b03      	cmp	r3, #3
 8016f48:	dd09      	ble.n	8016f5e <mg_tls_parse_cert_der+0x25a>
 8016f4a:	4b61      	ldr	r3, [pc, #388]	@ (80170d0 <mg_tls_parse_cert_der+0x3cc>)
 8016f4c:	f642 6275 	movw	r2, #11893	@ 0x2e75
 8016f50:	4960      	ldr	r1, [pc, #384]	@ (80170d4 <mg_tls_parse_cert_der+0x3d0>)
 8016f52:	2004      	movs	r0, #4
 8016f54:	f7f5 f9f2 	bl	800c33c <mg_log_prefix>
 8016f58:	4867      	ldr	r0, [pc, #412]	@ (80170f8 <mg_tls_parse_cert_der+0x3f4>)
 8016f5a:	f7f5 fa3f 	bl	800c3dc <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	331c      	adds	r3, #28
 8016f62:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8016f66:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f7fc ffef 	bl	8013f4e <mg_sha384>
    cert->tbshashsz = 48;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	2230      	movs	r2, #48	@ 0x30
 8016f74:	64da      	str	r2, [r3, #76]	@ 0x4c
 8016f76:	e037      	b.n	8016fe8 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 8016f78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 8016f7a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 8016f7c:	495f      	ldr	r1, [pc, #380]	@ (80170fc <mg_tls_parse_cert_der+0x3f8>)
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f00c fa9f 	bl	80234c2 <memcmp>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d11a      	bne.n	8016fc0 <mg_tls_parse_cert_der+0x2bc>
    MG_VERBOSE(("sig algo: RSA with SHA384"));
 8016f8a:	4b50      	ldr	r3, [pc, #320]	@ (80170cc <mg_tls_parse_cert_der+0x3c8>)
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	2b03      	cmp	r3, #3
 8016f90:	dd09      	ble.n	8016fa6 <mg_tls_parse_cert_der+0x2a2>
 8016f92:	4b4f      	ldr	r3, [pc, #316]	@ (80170d0 <mg_tls_parse_cert_der+0x3cc>)
 8016f94:	f642 627a 	movw	r2, #11898	@ 0x2e7a
 8016f98:	494e      	ldr	r1, [pc, #312]	@ (80170d4 <mg_tls_parse_cert_der+0x3d0>)
 8016f9a:	2004      	movs	r0, #4
 8016f9c:	f7f5 f9ce 	bl	800c33c <mg_log_prefix>
 8016fa0:	4857      	ldr	r0, [pc, #348]	@ (8017100 <mg_tls_parse_cert_der+0x3fc>)
 8016fa2:	f7f5 fa1b 	bl	800c3dc <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	331c      	adds	r3, #28
 8016faa:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8016fae:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f7fc ffcb 	bl	8013f4e <mg_sha384>
    cert->tbshashsz = 48;
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	2230      	movs	r2, #48	@ 0x30
 8016fbc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8016fbe:	e013      	b.n	8016fe8 <mg_tls_parse_cert_der+0x2e4>
  } else {
    MG_ERROR(
 8016fc0:	4b42      	ldr	r3, [pc, #264]	@ (80170cc <mg_tls_parse_cert_der+0x3c8>)
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	dd0c      	ble.n	8016fe2 <mg_tls_parse_cert_der+0x2de>
 8016fc8:	4b41      	ldr	r3, [pc, #260]	@ (80170d0 <mg_tls_parse_cert_der+0x3cc>)
 8016fca:	f642 627e 	movw	r2, #11902	@ 0x2e7e
 8016fce:	4941      	ldr	r1, [pc, #260]	@ (80170d4 <mg_tls_parse_cert_der+0x3d0>)
 8016fd0:	2001      	movs	r0, #1
 8016fd2:	f7f5 f9b3 	bl	800c33c <mg_log_prefix>
 8016fd6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016fd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016fda:	493f      	ldr	r1, [pc, #252]	@ (80170d8 <mg_tls_parse_cert_der+0x3d4>)
 8016fdc:	4849      	ldr	r0, [pc, #292]	@ (8017104 <mg_tls_parse_cert_der+0x400>)
 8016fde:	f7f5 f9fd 	bl	800c3dc <mg_log>
        ("sig algo: unsupported OID: %M", mg_print_hex, algo.len, algo.value));
    return -1;
 8016fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8016fe6:	e233      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  }
  MG_VERBOSE(("tbs hash: %M", mg_print_hex, cert->tbshashsz, cert->tbshash));
 8016fe8:	4b38      	ldr	r3, [pc, #224]	@ (80170cc <mg_tls_parse_cert_der+0x3c8>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	2b03      	cmp	r3, #3
 8016fee:	dd0e      	ble.n	801700e <mg_tls_parse_cert_der+0x30a>
 8016ff0:	4b37      	ldr	r3, [pc, #220]	@ (80170d0 <mg_tls_parse_cert_der+0x3cc>)
 8016ff2:	f642 6282 	movw	r2, #11906	@ 0x2e82
 8016ff6:	4937      	ldr	r1, [pc, #220]	@ (80170d4 <mg_tls_parse_cert_der+0x3d0>)
 8016ff8:	2004      	movs	r0, #4
 8016ffa:	f7f5 f99f 	bl	800c33c <mg_log_prefix>
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	331c      	adds	r3, #28
 8017006:	4934      	ldr	r1, [pc, #208]	@ (80170d8 <mg_tls_parse_cert_der+0x3d4>)
 8017008:	483f      	ldr	r0, [pc, #252]	@ (8017108 <mg_tls_parse_cert_der+0x404>)
 801700a:	f7f5 f9e7 	bl	800c3dc <mg_log>

  // issuer
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801700e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8017012:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017016:	4611      	mov	r1, r2
 8017018:	4618      	mov	r0, r3
 801701a:	f7fd fe19 	bl	8014c50 <mg_der_next>
 801701e:	4603      	mov	r3, r0
 8017020:	2b00      	cmp	r3, #0
 8017022:	dd03      	ble.n	801702c <mg_tls_parse_cert_der+0x328>
 8017024:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8017028:	2b30      	cmp	r3, #48	@ 0x30
 801702a:	d002      	beq.n	8017032 <mg_tls_parse_cert_der+0x32e>
 801702c:	f04f 33ff 	mov.w	r3, #4294967295
 8017030:	e20e      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("issuer", &field);
 8017032:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017036:	4619      	mov	r1, r3
 8017038:	4834      	ldr	r0, [pc, #208]	@ (801710c <mg_tls_parse_cert_der+0x408>)
 801703a:	f7ff fdbd 	bl	8016bb8 <mg_der_debug_cert_name>

  // validity dates (before/after)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 801703e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8017042:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017046:	4611      	mov	r1, r2
 8017048:	4618      	mov	r0, r3
 801704a:	f7fd fe01 	bl	8014c50 <mg_der_next>
 801704e:	4603      	mov	r3, r0
 8017050:	2b00      	cmp	r3, #0
 8017052:	dd03      	ble.n	801705c <mg_tls_parse_cert_der+0x358>
 8017054:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8017058:	2b30      	cmp	r3, #48	@ 0x30
 801705a:	d002      	beq.n	8017062 <mg_tls_parse_cert_der+0x35e>
 801705c:	f04f 33ff 	mov.w	r3, #4294967295
 8017060:	e1f6      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  if (1) {
    struct mg_der_tlv before, after;
    mg_der_next(&field, &before);
 8017062:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8017066:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801706a:	4611      	mov	r1, r2
 801706c:	4618      	mov	r0, r3
 801706e:	f7fd fdef 	bl	8014c50 <mg_der_next>
    mg_der_next(&field, &after);
 8017072:	f107 0218 	add.w	r2, r7, #24
 8017076:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801707a:	4611      	mov	r1, r2
 801707c:	4618      	mov	r0, r3
 801707e:	f7fd fde7 	bl	8014c50 <mg_der_next>
    if (memcmp(after.value, "250101000000Z", after.len) < 0) {
 8017082:	6a3b      	ldr	r3, [r7, #32]
 8017084:	69fa      	ldr	r2, [r7, #28]
 8017086:	4922      	ldr	r1, [pc, #136]	@ (8017110 <mg_tls_parse_cert_der+0x40c>)
 8017088:	4618      	mov	r0, r3
 801708a:	f00c fa1a 	bl	80234c2 <memcmp>
 801708e:	4603      	mov	r3, r0
 8017090:	2b00      	cmp	r3, #0
 8017092:	da41      	bge.n	8017118 <mg_tls_parse_cert_der+0x414>
      MG_ERROR(("invalid validity dates: before=%M after=%M", mg_print_hex,
 8017094:	4b0d      	ldr	r3, [pc, #52]	@ (80170cc <mg_tls_parse_cert_der+0x3c8>)
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	2b00      	cmp	r3, #0
 801709a:	dd14      	ble.n	80170c6 <mg_tls_parse_cert_der+0x3c2>
 801709c:	4b0c      	ldr	r3, [pc, #48]	@ (80170d0 <mg_tls_parse_cert_der+0x3cc>)
 801709e:	f642 628f 	movw	r2, #11919	@ 0x2e8f
 80170a2:	490c      	ldr	r1, [pc, #48]	@ (80170d4 <mg_tls_parse_cert_der+0x3d0>)
 80170a4:	2001      	movs	r0, #1
 80170a6:	f7f5 f949 	bl	800c33c <mg_log_prefix>
 80170aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80170ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80170ae:	69fb      	ldr	r3, [r7, #28]
 80170b0:	6a3a      	ldr	r2, [r7, #32]
 80170b2:	9202      	str	r2, [sp, #8]
 80170b4:	9301      	str	r3, [sp, #4]
 80170b6:	4b08      	ldr	r3, [pc, #32]	@ (80170d8 <mg_tls_parse_cert_der+0x3d4>)
 80170b8:	9300      	str	r3, [sp, #0]
 80170ba:	4603      	mov	r3, r0
 80170bc:	460a      	mov	r2, r1
 80170be:	4906      	ldr	r1, [pc, #24]	@ (80170d8 <mg_tls_parse_cert_der+0x3d4>)
 80170c0:	4814      	ldr	r0, [pc, #80]	@ (8017114 <mg_tls_parse_cert_der+0x410>)
 80170c2:	f7f5 f98b 	bl	800c3dc <mg_log>
                before.len, before.value, mg_print_hex, after.len,
                after.value));
      return -1;
 80170c6:	f04f 33ff 	mov.w	r3, #4294967295
 80170ca:	e1c1      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
 80170cc:	24000258 	.word	0x24000258
 80170d0:	08027fc8 	.word	0x08027fc8
 80170d4:	080241e8 	.word	0x080241e8
 80170d8:	08010c4d 	.word	0x08010c4d
 80170dc:	0802604c 	.word	0x0802604c
 80170e0:	0802605c 	.word	0x0802605c
 80170e4:	08026070 	.word	0x08026070
 80170e8:	0802607c 	.word	0x0802607c
 80170ec:	08026098 	.word	0x08026098
 80170f0:	080260a4 	.word	0x080260a4
 80170f4:	080260c0 	.word	0x080260c0
 80170f8:	080260cc 	.word	0x080260cc
 80170fc:	080260e8 	.word	0x080260e8
 8017100:	080260f4 	.word	0x080260f4
 8017104:	08026110 	.word	0x08026110
 8017108:	08026130 	.word	0x08026130
 801710c:	08026140 	.word	0x08026140
 8017110:	08026148 	.word	0x08026148
 8017114:	08026158 	.word	0x08026158
    }
  }

  // subject
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8017118:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801711c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017120:	4611      	mov	r1, r2
 8017122:	4618      	mov	r0, r3
 8017124:	f7fd fd94 	bl	8014c50 <mg_der_next>
 8017128:	4603      	mov	r3, r0
 801712a:	2b00      	cmp	r3, #0
 801712c:	dd03      	ble.n	8017136 <mg_tls_parse_cert_der+0x432>
 801712e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8017132:	2b30      	cmp	r3, #48	@ 0x30
 8017134:	d002      	beq.n	801713c <mg_tls_parse_cert_der+0x438>
 8017136:	f04f 33ff 	mov.w	r3, #4294967295
 801713a:	e189      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("subject", &field);
 801713c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017140:	4619      	mov	r1, r3
 8017142:	48a2      	ldr	r0, [pc, #648]	@ (80173cc <mg_tls_parse_cert_der+0x6c8>)
 8017144:	f7ff fd38 	bl	8016bb8 <mg_der_debug_cert_name>

  // subject public key info
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8017148:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801714c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017150:	4611      	mov	r1, r2
 8017152:	4618      	mov	r0, r3
 8017154:	f7fd fd7c 	bl	8014c50 <mg_der_next>
 8017158:	4603      	mov	r3, r0
 801715a:	2b00      	cmp	r3, #0
 801715c:	dd03      	ble.n	8017166 <mg_tls_parse_cert_der+0x462>
 801715e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8017162:	2b30      	cmp	r3, #48	@ 0x30
 8017164:	d002      	beq.n	801716c <mg_tls_parse_cert_der+0x468>
 8017166:	f04f 33ff 	mov.w	r3, #4294967295
 801716a:	e171      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>

  if (mg_der_next(&field, &pki) <= 0 || pki.type != 0x30) return -1;
 801716c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8017170:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017174:	4611      	mov	r1, r2
 8017176:	4618      	mov	r0, r3
 8017178:	f7fd fd6a 	bl	8014c50 <mg_der_next>
 801717c:	4603      	mov	r3, r0
 801717e:	2b00      	cmp	r3, #0
 8017180:	dd03      	ble.n	801718a <mg_tls_parse_cert_der+0x486>
 8017182:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8017186:	2b30      	cmp	r3, #48	@ 0x30
 8017188:	d002      	beq.n	8017190 <mg_tls_parse_cert_der+0x48c>
 801718a:	f04f 33ff 	mov.w	r3, #4294967295
 801718e:	e15f      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&pki, &pki_algo) <= 0 || pki_algo.type != 0x06) return -1;
 8017190:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8017194:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8017198:	4611      	mov	r1, r2
 801719a:	4618      	mov	r0, r3
 801719c:	f7fd fd58 	bl	8014c50 <mg_der_next>
 80171a0:	4603      	mov	r3, r0
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	dd03      	ble.n	80171ae <mg_tls_parse_cert_der+0x4aa>
 80171a6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80171aa:	2b06      	cmp	r3, #6
 80171ac:	d002      	beq.n	80171b4 <mg_tls_parse_cert_der+0x4b0>
 80171ae:	f04f 33ff 	mov.w	r3, #4294967295
 80171b2:	e14d      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>

  // public key algorithm
  MG_VERBOSE(("pk algo (oid): %M", mg_print_hex, pki_algo.len, pki_algo.value));
 80171b4:	4b86      	ldr	r3, [pc, #536]	@ (80173d0 <mg_tls_parse_cert_der+0x6cc>)
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	2b03      	cmp	r3, #3
 80171ba:	dd0c      	ble.n	80171d6 <mg_tls_parse_cert_der+0x4d2>
 80171bc:	4b85      	ldr	r3, [pc, #532]	@ (80173d4 <mg_tls_parse_cert_der+0x6d0>)
 80171be:	f642 62a1 	movw	r2, #11937	@ 0x2ea1
 80171c2:	4985      	ldr	r1, [pc, #532]	@ (80173d8 <mg_tls_parse_cert_der+0x6d4>)
 80171c4:	2004      	movs	r0, #4
 80171c6:	f7f5 f8b9 	bl	800c33c <mg_log_prefix>
 80171ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80171cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80171ce:	4983      	ldr	r1, [pc, #524]	@ (80173dc <mg_tls_parse_cert_der+0x6d8>)
 80171d0:	4883      	ldr	r0, [pc, #524]	@ (80173e0 <mg_tls_parse_cert_der+0x6dc>)
 80171d2:	f7f5 f903 	bl	800c3dc <mg_log>
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 80171d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
             pki_algo.len) == 0) {
 80171d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 80171da:	4982      	ldr	r1, [pc, #520]	@ (80173e4 <mg_tls_parse_cert_der+0x6e0>)
 80171dc:	4618      	mov	r0, r3
 80171de:	f00c f970 	bl	80234c2 <memcmp>
 80171e2:	4603      	mov	r3, r0
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d111      	bne.n	801720c <mg_tls_parse_cert_der+0x508>
    cert->is_ec_pubkey = 1;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2201      	movs	r2, #1
 80171ec:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp256r1"));
 80171ee:	4b78      	ldr	r3, [pc, #480]	@ (80173d0 <mg_tls_parse_cert_der+0x6cc>)
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	2b03      	cmp	r3, #3
 80171f4:	dd6f      	ble.n	80172d6 <mg_tls_parse_cert_der+0x5d2>
 80171f6:	4b77      	ldr	r3, [pc, #476]	@ (80173d4 <mg_tls_parse_cert_der+0x6d0>)
 80171f8:	f642 62a5 	movw	r2, #11941	@ 0x2ea5
 80171fc:	4976      	ldr	r1, [pc, #472]	@ (80173d8 <mg_tls_parse_cert_der+0x6d4>)
 80171fe:	2004      	movs	r0, #4
 8017200:	f7f5 f89c 	bl	800c33c <mg_log_prefix>
 8017204:	4878      	ldr	r0, [pc, #480]	@ (80173e8 <mg_tls_parse_cert_der+0x6e4>)
 8017206:	f7f5 f8e9 	bl	800c3dc <mg_log>
 801720a:	e064      	b.n	80172d6 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 801720c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 801720e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8017210:	4976      	ldr	r1, [pc, #472]	@ (80173ec <mg_tls_parse_cert_der+0x6e8>)
 8017212:	4618      	mov	r0, r3
 8017214:	f00c f955 	bl	80234c2 <memcmp>
 8017218:	4603      	mov	r3, r0
 801721a:	2b00      	cmp	r3, #0
 801721c:	d111      	bne.n	8017242 <mg_tls_parse_cert_der+0x53e>
    cert->is_ec_pubkey = 1;
 801721e:	68fb      	ldr	r3, [r7, #12]
 8017220:	2201      	movs	r2, #1
 8017222:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp384r1"));
 8017224:	4b6a      	ldr	r3, [pc, #424]	@ (80173d0 <mg_tls_parse_cert_der+0x6cc>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	2b03      	cmp	r3, #3
 801722a:	dd54      	ble.n	80172d6 <mg_tls_parse_cert_der+0x5d2>
 801722c:	4b69      	ldr	r3, [pc, #420]	@ (80173d4 <mg_tls_parse_cert_der+0x6d0>)
 801722e:	f642 62a9 	movw	r2, #11945	@ 0x2ea9
 8017232:	4969      	ldr	r1, [pc, #420]	@ (80173d8 <mg_tls_parse_cert_der+0x6d4>)
 8017234:	2004      	movs	r0, #4
 8017236:	f7f5 f881 	bl	800c33c <mg_log_prefix>
 801723a:	486d      	ldr	r0, [pc, #436]	@ (80173f0 <mg_tls_parse_cert_der+0x6ec>)
 801723c:	f7f5 f8ce 	bl	800c3dc <mg_log>
 8017240:	e049      	b.n	80172d6 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8017242:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8017244:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8017246:	496b      	ldr	r1, [pc, #428]	@ (80173f4 <mg_tls_parse_cert_der+0x6f0>)
 8017248:	4618      	mov	r0, r3
 801724a:	f00c f93a 	bl	80234c2 <memcmp>
 801724e:	4603      	mov	r3, r0
 8017250:	2b00      	cmp	r3, #0
 8017252:	d111      	bne.n	8017278 <mg_tls_parse_cert_der+0x574>
    cert->is_ec_pubkey = 1;
 8017254:	68fb      	ldr	r3, [r7, #12]
 8017256:	2201      	movs	r2, #1
 8017258:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: EC public key"));
 801725a:	4b5d      	ldr	r3, [pc, #372]	@ (80173d0 <mg_tls_parse_cert_der+0x6cc>)
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	2b03      	cmp	r3, #3
 8017260:	dd39      	ble.n	80172d6 <mg_tls_parse_cert_der+0x5d2>
 8017262:	4b5c      	ldr	r3, [pc, #368]	@ (80173d4 <mg_tls_parse_cert_der+0x6d0>)
 8017264:	f642 62ad 	movw	r2, #11949	@ 0x2ead
 8017268:	495b      	ldr	r1, [pc, #364]	@ (80173d8 <mg_tls_parse_cert_der+0x6d4>)
 801726a:	2004      	movs	r0, #4
 801726c:	f7f5 f866 	bl	800c33c <mg_log_prefix>
 8017270:	4861      	ldr	r0, [pc, #388]	@ (80173f8 <mg_tls_parse_cert_der+0x6f4>)
 8017272:	f7f5 f8b3 	bl	800c3dc <mg_log>
 8017276:	e02e      	b.n	80172d6 <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8017278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 801727a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 801727c:	495f      	ldr	r1, [pc, #380]	@ (80173fc <mg_tls_parse_cert_der+0x6f8>)
 801727e:	4618      	mov	r0, r3
 8017280:	f00c f91f 	bl	80234c2 <memcmp>
 8017284:	4603      	mov	r3, r0
 8017286:	2b00      	cmp	r3, #0
 8017288:	d111      	bne.n	80172ae <mg_tls_parse_cert_der+0x5aa>
    cert->is_ec_pubkey = 0;
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	2200      	movs	r2, #0
 801728e:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: RSA"));
 8017290:	4b4f      	ldr	r3, [pc, #316]	@ (80173d0 <mg_tls_parse_cert_der+0x6cc>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	2b03      	cmp	r3, #3
 8017296:	dd1e      	ble.n	80172d6 <mg_tls_parse_cert_der+0x5d2>
 8017298:	4b4e      	ldr	r3, [pc, #312]	@ (80173d4 <mg_tls_parse_cert_der+0x6d0>)
 801729a:	f642 62b1 	movw	r2, #11953	@ 0x2eb1
 801729e:	494e      	ldr	r1, [pc, #312]	@ (80173d8 <mg_tls_parse_cert_der+0x6d4>)
 80172a0:	2004      	movs	r0, #4
 80172a2:	f7f5 f84b 	bl	800c33c <mg_log_prefix>
 80172a6:	4856      	ldr	r0, [pc, #344]	@ (8017400 <mg_tls_parse_cert_der+0x6fc>)
 80172a8:	f7f5 f898 	bl	800c3dc <mg_log>
 80172ac:	e013      	b.n	80172d6 <mg_tls_parse_cert_der+0x5d2>
  } else {
    MG_ERROR(("unsupported pk algo: %M", mg_print_hex, pki_algo.len,
 80172ae:	4b48      	ldr	r3, [pc, #288]	@ (80173d0 <mg_tls_parse_cert_der+0x6cc>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	dd0c      	ble.n	80172d0 <mg_tls_parse_cert_der+0x5cc>
 80172b6:	4b47      	ldr	r3, [pc, #284]	@ (80173d4 <mg_tls_parse_cert_der+0x6d0>)
 80172b8:	f642 62b3 	movw	r2, #11955	@ 0x2eb3
 80172bc:	4946      	ldr	r1, [pc, #280]	@ (80173d8 <mg_tls_parse_cert_der+0x6d4>)
 80172be:	2001      	movs	r0, #1
 80172c0:	f7f5 f83c 	bl	800c33c <mg_log_prefix>
 80172c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80172c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80172c8:	4944      	ldr	r1, [pc, #272]	@ (80173dc <mg_tls_parse_cert_der+0x6d8>)
 80172ca:	484e      	ldr	r0, [pc, #312]	@ (8017404 <mg_tls_parse_cert_der+0x700>)
 80172cc:	f7f5 f886 	bl	800c3dc <mg_log>
              pki_algo.value));
    return -1;
 80172d0:	f04f 33ff 	mov.w	r3, #4294967295
 80172d4:	e0bc      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse public key
  if (cert->is_ec_pubkey) {
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d011      	beq.n	8017302 <mg_tls_parse_cert_der+0x5fe>
    if (mg_der_next(&pki, &pki_curve) <= 0 || pki_curve.type != 0x06) return -1;
 80172de:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80172e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80172e6:	4611      	mov	r1, r2
 80172e8:	4618      	mov	r0, r3
 80172ea:	f7fd fcb1 	bl	8014c50 <mg_der_next>
 80172ee:	4603      	mov	r3, r0
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	dd03      	ble.n	80172fc <mg_tls_parse_cert_der+0x5f8>
 80172f4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80172f8:	2b06      	cmp	r3, #6
 80172fa:	d002      	beq.n	8017302 <mg_tls_parse_cert_der+0x5fe>
 80172fc:	f04f 33ff 	mov.w	r3, #4294967295
 8017300:	e0a6      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  }
  if (mg_der_next(&field, &pki_key) <= 0 || pki_key.type != 0x03) return -1;
 8017302:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8017306:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801730a:	4611      	mov	r1, r2
 801730c:	4618      	mov	r0, r3
 801730e:	f7fd fc9f 	bl	8014c50 <mg_der_next>
 8017312:	4603      	mov	r3, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	dd03      	ble.n	8017320 <mg_tls_parse_cert_der+0x61c>
 8017318:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801731c:	2b03      	cmp	r3, #3
 801731e:	d002      	beq.n	8017326 <mg_tls_parse_cert_der+0x622>
 8017320:	f04f 33ff 	mov.w	r3, #4294967295
 8017324:	e094      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>

  if (cert->is_ec_pubkey) {  // Skip leading 0x00 and 0x04 (=uncompressed)
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d010      	beq.n	8017350 <mg_tls_parse_cert_der+0x64c>
    cert->pubkey = mg_str_n((char *) pki_key.value + 2, pki_key.len - 2);
 801732e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017330:	1c99      	adds	r1, r3, #2
 8017332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017334:	1e9a      	subs	r2, r3, #2
 8017336:	68fc      	ldr	r4, [r7, #12]
 8017338:	463b      	mov	r3, r7
 801733a:	4618      	mov	r0, r3
 801733c:	f7fc fe67 	bl	801400e <mg_str_n>
 8017340:	f104 030c 	add.w	r3, r4, #12
 8017344:	463a      	mov	r2, r7
 8017346:	e892 0003 	ldmia.w	r2, {r0, r1}
 801734a:	e883 0003 	stmia.w	r3, {r0, r1}
 801734e:	e00f      	b.n	8017370 <mg_tls_parse_cert_der+0x66c>
  } else {  // Skip leading 0x00 byte
    cert->pubkey = mg_str_n((char *) pki_key.value + 1, pki_key.len - 1);
 8017350:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017352:	1c59      	adds	r1, r3, #1
 8017354:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017356:	1e5a      	subs	r2, r3, #1
 8017358:	68fc      	ldr	r4, [r7, #12]
 801735a:	463b      	mov	r3, r7
 801735c:	4618      	mov	r0, r3
 801735e:	f7fc fe56 	bl	801400e <mg_str_n>
 8017362:	f104 030c 	add.w	r3, r4, #12
 8017366:	463a      	mov	r2, r7
 8017368:	e892 0003 	ldmia.w	r2, {r0, r1}
 801736c:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  // Parse signature
  if (mg_der_next(&root, &field) <= 0 || field.type != 0x30) return -1;
 8017370:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8017374:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8017378:	4611      	mov	r1, r2
 801737a:	4618      	mov	r0, r3
 801737c:	f7fd fc68 	bl	8014c50 <mg_der_next>
 8017380:	4603      	mov	r3, r0
 8017382:	2b00      	cmp	r3, #0
 8017384:	dd03      	ble.n	801738e <mg_tls_parse_cert_der+0x68a>
 8017386:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801738a:	2b30      	cmp	r3, #48	@ 0x30
 801738c:	d002      	beq.n	8017394 <mg_tls_parse_cert_der+0x690>
 801738e:	f04f 33ff 	mov.w	r3, #4294967295
 8017392:	e05d      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&root, &raw_sig) <= 0 || raw_sig.type != 0x03) return -1;
 8017394:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8017398:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801739c:	4611      	mov	r1, r2
 801739e:	4618      	mov	r0, r3
 80173a0:	f7fd fc56 	bl	8014c50 <mg_der_next>
 80173a4:	4603      	mov	r3, r0
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	dd03      	ble.n	80173b2 <mg_tls_parse_cert_der+0x6ae>
 80173aa:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80173ae:	2b03      	cmp	r3, #3
 80173b0:	d002      	beq.n	80173b8 <mg_tls_parse_cert_der+0x6b4>
 80173b2:	f04f 33ff 	mov.w	r3, #4294967295
 80173b6:	e04b      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
  if (raw_sig.len < 1 || raw_sig.value[0] != 0x00) return -1;
 80173b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d003      	beq.n	80173c6 <mg_tls_parse_cert_der+0x6c2>
 80173be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173c0:	781b      	ldrb	r3, [r3, #0]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d020      	beq.n	8017408 <mg_tls_parse_cert_der+0x704>
 80173c6:	f04f 33ff 	mov.w	r3, #4294967295
 80173ca:	e041      	b.n	8017450 <mg_tls_parse_cert_der+0x74c>
 80173cc:	08026184 	.word	0x08026184
 80173d0:	24000258 	.word	0x24000258
 80173d4:	08027fc8 	.word	0x08027fc8
 80173d8:	080241e8 	.word	0x080241e8
 80173dc:	08010c4d 	.word	0x08010c4d
 80173e0:	0802618c 	.word	0x0802618c
 80173e4:	080261a0 	.word	0x080261a0
 80173e8:	080261ac 	.word	0x080261ac
 80173ec:	080261c8 	.word	0x080261c8
 80173f0:	080261d4 	.word	0x080261d4
 80173f4:	080261f0 	.word	0x080261f0
 80173f8:	080261f8 	.word	0x080261f8
 80173fc:	08026210 	.word	0x08026210
 8017400:	0802621c 	.word	0x0802621c
 8017404:	0802622c 	.word	0x0802622c

  cert->sig = mg_str_n((char *) raw_sig.value + 1, raw_sig.len - 1);
 8017408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801740a:	1c59      	adds	r1, r3, #1
 801740c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801740e:	1e5a      	subs	r2, r3, #1
 8017410:	68fc      	ldr	r4, [r7, #12]
 8017412:	463b      	mov	r3, r7
 8017414:	4618      	mov	r0, r3
 8017416:	f7fc fdfa 	bl	801400e <mg_str_n>
 801741a:	f104 0314 	add.w	r3, r4, #20
 801741e:	463a      	mov	r2, r7
 8017420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017424:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("sig: %M", mg_print_hex, cert->sig.len, cert->sig.buf));
 8017428:	4b0b      	ldr	r3, [pc, #44]	@ (8017458 <mg_tls_parse_cert_der+0x754>)
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	2b03      	cmp	r3, #3
 801742e:	dd0e      	ble.n	801744e <mg_tls_parse_cert_der+0x74a>
 8017430:	4b0a      	ldr	r3, [pc, #40]	@ (801745c <mg_tls_parse_cert_der+0x758>)
 8017432:	f642 62ca 	movw	r2, #11978	@ 0x2eca
 8017436:	490a      	ldr	r1, [pc, #40]	@ (8017460 <mg_tls_parse_cert_der+0x75c>)
 8017438:	2004      	movs	r0, #4
 801743a:	f7f4 ff7f 	bl	800c33c <mg_log_prefix>
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	699a      	ldr	r2, [r3, #24]
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	695b      	ldr	r3, [r3, #20]
 8017446:	4907      	ldr	r1, [pc, #28]	@ (8017464 <mg_tls_parse_cert_der+0x760>)
 8017448:	4807      	ldr	r0, [pc, #28]	@ (8017468 <mg_tls_parse_cert_der+0x764>)
 801744a:	f7f4 ffc7 	bl	800c3dc <mg_log>

  return 0;
 801744e:	2300      	movs	r3, #0
}
 8017450:	4618      	mov	r0, r3
 8017452:	37ac      	adds	r7, #172	@ 0xac
 8017454:	46bd      	mov	sp, r7
 8017456:	bd90      	pop	{r4, r7, pc}
 8017458:	24000258 	.word	0x24000258
 801745c:	08027fc8 	.word	0x08027fc8
 8017460:	080241e8 	.word	0x080241e8
 8017464:	08010c4d 	.word	0x08010c4d
 8017468:	08026244 	.word	0x08026244

0801746c <mg_tls_verify_cert_san>:

static int mg_tls_verify_cert_san(const uint8_t *der, size_t dersz,
                                  const char *server_name) {
 801746c:	b580      	push	{r7, lr}
 801746e:	b094      	sub	sp, #80	@ 0x50
 8017470:	af02      	add	r7, sp, #8
 8017472:	60f8      	str	r0, [r7, #12]
 8017474:	60b9      	str	r1, [r7, #8]
 8017476:	607a      	str	r2, [r7, #4]
  struct mg_der_tlv root, field, name;
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 8017478:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801747c:	461a      	mov	r2, r3
 801747e:	68b9      	ldr	r1, [r7, #8]
 8017480:	68f8      	ldr	r0, [r7, #12]
 8017482:	f7fd fb85 	bl	8014b90 <mg_der_parse>
 8017486:	4603      	mov	r3, r0
 8017488:	2b00      	cmp	r3, #0
 801748a:	db0a      	blt.n	80174a2 <mg_tls_verify_cert_san+0x36>
      mg_der_find_oid(&root, (uint8_t *) "\x55\x1d\x11", 3, &field) < 0) {
 801748c:	f107 0320 	add.w	r3, r7, #32
 8017490:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017494:	2203      	movs	r2, #3
 8017496:	492f      	ldr	r1, [pc, #188]	@ (8017554 <mg_tls_verify_cert_san+0xe8>)
 8017498:	f7fd fc05 	bl	8014ca6 <mg_der_find_oid>
 801749c:	4603      	mov	r3, r0
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 801749e:	2b00      	cmp	r3, #0
 80174a0:	da10      	bge.n	80174c4 <mg_tls_verify_cert_san+0x58>
    MG_ERROR(("failed to parse certificate to extract SAN"));
 80174a2:	4b2d      	ldr	r3, [pc, #180]	@ (8017558 <mg_tls_verify_cert_san+0xec>)
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	dd09      	ble.n	80174be <mg_tls_verify_cert_san+0x52>
 80174aa:	4b2c      	ldr	r3, [pc, #176]	@ (801755c <mg_tls_verify_cert_san+0xf0>)
 80174ac:	f642 62d4 	movw	r2, #11988	@ 0x2ed4
 80174b0:	492b      	ldr	r1, [pc, #172]	@ (8017560 <mg_tls_verify_cert_san+0xf4>)
 80174b2:	2001      	movs	r0, #1
 80174b4:	f7f4 ff42 	bl	800c33c <mg_log_prefix>
 80174b8:	482a      	ldr	r0, [pc, #168]	@ (8017564 <mg_tls_verify_cert_san+0xf8>)
 80174ba:	f7f4 ff8f 	bl	800c3dc <mg_log>
    return -1;
 80174be:	f04f 33ff 	mov.w	r3, #4294967295
 80174c2:	e043      	b.n	801754c <mg_tls_verify_cert_san+0xe0>
  }
  if (mg_der_parse(field.value, field.len, &field) < 0) {
 80174c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80174c8:	f107 0220 	add.w	r2, r7, #32
 80174cc:	4618      	mov	r0, r3
 80174ce:	f7fd fb5f 	bl	8014b90 <mg_der_parse>
 80174d2:	4603      	mov	r3, r0
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	da2c      	bge.n	8017532 <mg_tls_verify_cert_san+0xc6>
    MG_ERROR(
 80174d8:	4b1f      	ldr	r3, [pc, #124]	@ (8017558 <mg_tls_verify_cert_san+0xec>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	dd09      	ble.n	80174f4 <mg_tls_verify_cert_san+0x88>
 80174e0:	4b1e      	ldr	r3, [pc, #120]	@ (801755c <mg_tls_verify_cert_san+0xf0>)
 80174e2:	f642 62d8 	movw	r2, #11992	@ 0x2ed8
 80174e6:	491e      	ldr	r1, [pc, #120]	@ (8017560 <mg_tls_verify_cert_san+0xf4>)
 80174e8:	2001      	movs	r0, #1
 80174ea:	f7f4 ff27 	bl	800c33c <mg_log_prefix>
 80174ee:	481e      	ldr	r0, [pc, #120]	@ (8017568 <mg_tls_verify_cert_san+0xfc>)
 80174f0:	f7f4 ff74 	bl	800c3dc <mg_log>
        ("certificate subject alternative names is not a constructed object"));
    return -1;
 80174f4:	f04f 33ff 	mov.w	r3, #4294967295
 80174f8:	e028      	b.n	801754c <mg_tls_verify_cert_san+0xe0>
  }
  while (mg_der_next(&field, &name) > 0) {
    if (mg_match(mg_str(server_name),
 80174fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80174fe:	6879      	ldr	r1, [r7, #4]
 8017500:	4618      	mov	r0, r3
 8017502:	f7fc fd67 	bl	8013fd4 <mg_str_s>
                 mg_str_n((const char *) name.value, name.len), NULL)) {
 8017506:	69f9      	ldr	r1, [r7, #28]
 8017508:	69ba      	ldr	r2, [r7, #24]
    if (mg_match(mg_str(server_name),
 801750a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801750e:	4618      	mov	r0, r3
 8017510:	f7fc fd7d 	bl	801400e <mg_str_n>
 8017514:	2300      	movs	r3, #0
 8017516:	9300      	str	r3, [sp, #0]
 8017518:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801751c:	cb0c      	ldmia	r3, {r2, r3}
 801751e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8017522:	c903      	ldmia	r1, {r0, r1}
 8017524:	f7fc fe60 	bl	80141e8 <mg_match>
 8017528:	4603      	mov	r3, r0
 801752a:	2b00      	cmp	r3, #0
 801752c:	d001      	beq.n	8017532 <mg_tls_verify_cert_san+0xc6>
      // Found SAN that matches the host name
      return 1;
 801752e:	2301      	movs	r3, #1
 8017530:	e00c      	b.n	801754c <mg_tls_verify_cert_san+0xe0>
  while (mg_der_next(&field, &name) > 0) {
 8017532:	f107 0214 	add.w	r2, r7, #20
 8017536:	f107 0320 	add.w	r3, r7, #32
 801753a:	4611      	mov	r1, r2
 801753c:	4618      	mov	r0, r3
 801753e:	f7fd fb87 	bl	8014c50 <mg_der_next>
 8017542:	4603      	mov	r3, r0
 8017544:	2b00      	cmp	r3, #0
 8017546:	dcd8      	bgt.n	80174fa <mg_tls_verify_cert_san+0x8e>
    }
  }
  return -1;
 8017548:	f04f 33ff 	mov.w	r3, #4294967295
}
 801754c:	4618      	mov	r0, r3
 801754e:	3748      	adds	r7, #72	@ 0x48
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}
 8017554:	0802624c 	.word	0x0802624c
 8017558:	24000258 	.word	0x24000258
 801755c:	08027fe0 	.word	0x08027fe0
 8017560:	080241e8 	.word	0x080241e8
 8017564:	08026250 	.word	0x08026250
 8017568:	0802627c 	.word	0x0802627c

0801756c <mg_tls_verify_cert_signature>:

static int mg_tls_verify_cert_signature(const struct mg_tls_cert *cert,
                                        const struct mg_tls_cert *issuer) {
 801756c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801756e:	b0db      	sub	sp, #364	@ 0x16c
 8017570:	af04      	add	r7, sp, #16
 8017572:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017576:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801757a:	6018      	str	r0, [r3, #0]
 801757c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017580:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8017584:	6019      	str	r1, [r3, #0]
  if (issuer->is_ec_pubkey) {
 8017586:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801758a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	2b00      	cmp	r3, #0
 8017594:	f000 80eb 	beq.w	801776e <mg_tls_verify_cert_signature+0x202>
    uint8_t sig[128];
    struct mg_der_tlv seq = {0, 0, 0}, a = {0, 0, 0}, b = {0, 0, 0};
 8017598:	2300      	movs	r3, #0
 801759a:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 801759e:	2300      	movs	r3, #0
 80175a0:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80175a4:	2300      	movs	r3, #0
 80175a6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80175aa:	2300      	movs	r3, #0
 80175ac:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 80175b0:	2300      	movs	r3, #0
 80175b2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80175b6:	2300      	movs	r3, #0
 80175b8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80175bc:	2300      	movs	r3, #0
 80175be:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 80175c2:	2300      	movs	r3, #0
 80175c4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80175c8:	2300      	movs	r3, #0
 80175ca:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    mg_der_parse((uint8_t *) cert->sig.buf, cert->sig.len, &seq);
 80175ce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80175d2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	6958      	ldr	r0, [r3, #20]
 80175da:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80175de:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	699b      	ldr	r3, [r3, #24]
 80175e6:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 80175ea:	4619      	mov	r1, r3
 80175ec:	f7fd fad0 	bl	8014b90 <mg_der_parse>
    mg_der_next(&seq, &a);
 80175f0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80175f4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80175f8:	4611      	mov	r1, r2
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7fd fb28 	bl	8014c50 <mg_der_next>
    mg_der_next(&seq, &b);
 8017600:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 8017604:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8017608:	4611      	mov	r1, r2
 801760a:	4618      	mov	r0, r3
 801760c:	f7fd fb20 	bl	8014c50 <mg_der_next>
    if (a.len == 0 || b.len == 0) {
 8017610:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8017614:	2b00      	cmp	r3, #0
 8017616:	d003      	beq.n	8017620 <mg_tls_verify_cert_signature+0xb4>
 8017618:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801761c:	2b00      	cmp	r3, #0
 801761e:	d10f      	bne.n	8017640 <mg_tls_verify_cert_signature+0xd4>
      MG_ERROR(("cert verification error"));
 8017620:	4b92      	ldr	r3, [pc, #584]	@ (801786c <mg_tls_verify_cert_signature+0x300>)
 8017622:	681b      	ldr	r3, [r3, #0]
 8017624:	2b00      	cmp	r3, #0
 8017626:	dd09      	ble.n	801763c <mg_tls_verify_cert_signature+0xd0>
 8017628:	4b91      	ldr	r3, [pc, #580]	@ (8017870 <mg_tls_verify_cert_signature+0x304>)
 801762a:	f642 62ef 	movw	r2, #12015	@ 0x2eef
 801762e:	4991      	ldr	r1, [pc, #580]	@ (8017874 <mg_tls_verify_cert_signature+0x308>)
 8017630:	2001      	movs	r0, #1
 8017632:	f7f4 fe83 	bl	800c33c <mg_log_prefix>
 8017636:	4890      	ldr	r0, [pc, #576]	@ (8017878 <mg_tls_verify_cert_signature+0x30c>)
 8017638:	f7f4 fed0 	bl	800c3dc <mg_log>
      return 0;
 801763c:	2300      	movs	r3, #0
 801763e:	e110      	b.n	8017862 <mg_tls_verify_cert_signature+0x2f6>
    }
    if (issuer->pubkey.len == 64) {
 8017640:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017644:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	691b      	ldr	r3, [r3, #16]
 801764c:	2b40      	cmp	r3, #64	@ 0x40
 801764e:	d15f      	bne.n	8017710 <mg_tls_verify_cert_signature+0x1a4>
      const uint32_t N = 32;
 8017650:	2320      	movs	r3, #32
 8017652:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      if (a.len > N) a.value += (a.len - N), a.len = N;
 8017656:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801765a:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801765e:	429a      	cmp	r2, r3
 8017660:	d20d      	bcs.n	801767e <mg_tls_verify_cert_signature+0x112>
 8017662:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8017666:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 801766a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801766e:	1acb      	subs	r3, r1, r3
 8017670:	4413      	add	r3, r2
 8017672:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8017676:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801767a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      if (b.len > N) b.value += (b.len - N), b.len = N;
 801767e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017682:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8017686:	429a      	cmp	r2, r3
 8017688:	d20d      	bcs.n	80176a6 <mg_tls_verify_cert_signature+0x13a>
 801768a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801768e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8017692:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8017696:	1acb      	subs	r3, r1, r3
 8017698:	4413      	add	r3, r2
 801769a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801769e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80176a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      memmove(sig, a.value, N);
 80176a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80176aa:	f107 0308 	add.w	r3, r7, #8
 80176ae:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80176b2:	4618      	mov	r0, r3
 80176b4:	f00b ff15 	bl	80234e2 <memmove>
      memmove(sig + N, b.value, N);
 80176b8:	f107 0208 	add.w	r2, r7, #8
 80176bc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80176c0:	4413      	add	r3, r2
 80176c2:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80176c6:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80176ca:	4618      	mov	r0, r3
 80176cc:	f00b ff09 	bl	80234e2 <memmove>
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 80176d0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80176d4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	68dc      	ldr	r4, [r3, #12]
 80176dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80176e0:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	f103 051c 	add.w	r5, r3, #28
                            (unsigned) cert->tbshashsz, sig,
 80176ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80176ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 80176f6:	f005 fba7 	bl	801ce48 <mg_uecc_secp256r1>
 80176fa:	4602      	mov	r2, r0
 80176fc:	f107 0308 	add.w	r3, r7, #8
 8017700:	9200      	str	r2, [sp, #0]
 8017702:	4632      	mov	r2, r6
 8017704:	4629      	mov	r1, r5
 8017706:	4620      	mov	r0, r4
 8017708:	f006 fd3a 	bl	801e180 <mg_uecc_verify>
 801770c:	4603      	mov	r3, r0
 801770e:	e0a8      	b.n	8017862 <mg_tls_verify_cert_signature+0x2f6>
                            mg_uecc_secp256r1());
    } else if (issuer->pubkey.len == 96) {
 8017710:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017714:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	691b      	ldr	r3, [r3, #16]
 801771c:	2b60      	cmp	r3, #96	@ 0x60
 801771e:	d10f      	bne.n	8017740 <mg_tls_verify_cert_signature+0x1d4>
      MG_DEBUG(("ignore secp386 for now"));
 8017720:	4b52      	ldr	r3, [pc, #328]	@ (801786c <mg_tls_verify_cert_signature+0x300>)
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	2b02      	cmp	r3, #2
 8017726:	dd09      	ble.n	801773c <mg_tls_verify_cert_signature+0x1d0>
 8017728:	4b51      	ldr	r3, [pc, #324]	@ (8017870 <mg_tls_verify_cert_signature+0x304>)
 801772a:	f642 62fc 	movw	r2, #12028	@ 0x2efc
 801772e:	4951      	ldr	r1, [pc, #324]	@ (8017874 <mg_tls_verify_cert_signature+0x308>)
 8017730:	2003      	movs	r0, #3
 8017732:	f7f4 fe03 	bl	800c33c <mg_log_prefix>
 8017736:	4851      	ldr	r0, [pc, #324]	@ (801787c <mg_tls_verify_cert_signature+0x310>)
 8017738:	f7f4 fe50 	bl	800c3dc <mg_log>
      return 1;
 801773c:	2301      	movs	r3, #1
 801773e:	e090      	b.n	8017862 <mg_tls_verify_cert_signature+0x2f6>
    } else {
      MG_ERROR(("unsupported public key length: %d", issuer->pubkey.len));
 8017740:	4b4a      	ldr	r3, [pc, #296]	@ (801786c <mg_tls_verify_cert_signature+0x300>)
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	2b00      	cmp	r3, #0
 8017746:	dd10      	ble.n	801776a <mg_tls_verify_cert_signature+0x1fe>
 8017748:	4b49      	ldr	r3, [pc, #292]	@ (8017870 <mg_tls_verify_cert_signature+0x304>)
 801774a:	f642 62ff 	movw	r2, #12031	@ 0x2eff
 801774e:	4949      	ldr	r1, [pc, #292]	@ (8017874 <mg_tls_verify_cert_signature+0x308>)
 8017750:	2001      	movs	r0, #1
 8017752:	f7f4 fdf3 	bl	800c33c <mg_log_prefix>
 8017756:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801775a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	691b      	ldr	r3, [r3, #16]
 8017762:	4619      	mov	r1, r3
 8017764:	4846      	ldr	r0, [pc, #280]	@ (8017880 <mg_tls_verify_cert_signature+0x314>)
 8017766:	f7f4 fe39 	bl	800c3dc <mg_log>
      return 0;
 801776a:	2300      	movs	r3, #0
 801776c:	e079      	b.n	8017862 <mg_tls_verify_cert_signature+0x2f6>
    }
  } else {
    int r;
    uint8_t sig2[256];  // 2048 bits
    struct mg_der_tlv seq, modulus, exponent;
    if (mg_der_parse((uint8_t *) issuer->pubkey.buf, issuer->pubkey.len,
 801776e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017772:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	68d8      	ldr	r0, [r3, #12]
 801777a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801777e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	691b      	ldr	r3, [r3, #16]
 8017786:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801778a:	4619      	mov	r1, r3
 801778c:	f7fd fa00 	bl	8014b90 <mg_der_parse>
 8017790:	4603      	mov	r3, r0
 8017792:	2b00      	cmp	r3, #0
 8017794:	dd1d      	ble.n	80177d2 <mg_tls_verify_cert_signature+0x266>
                     &seq) <= 0 ||
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8017796:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 801779a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801779e:	4611      	mov	r1, r2
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7fd fa55 	bl	8014c50 <mg_der_next>
 80177a6:	4603      	mov	r3, r0
                     &seq) <= 0 ||
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	dd12      	ble.n	80177d2 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 80177ac:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 80177b0:	2b02      	cmp	r3, #2
 80177b2:	d10e      	bne.n	80177d2 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 80177b4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80177b8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80177bc:	4611      	mov	r1, r2
 80177be:	4618      	mov	r0, r3
 80177c0:	f7fd fa46 	bl	8014c50 <mg_der_next>
 80177c4:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	dd03      	ble.n	80177d2 <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 80177ca:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80177ce:	2b02      	cmp	r3, #2
 80177d0:	d002      	beq.n	80177d8 <mg_tls_verify_cert_signature+0x26c>
      return -1;
 80177d2:	f04f 33ff 	mov.w	r3, #4294967295
 80177d6:	e044      	b.n	8017862 <mg_tls_verify_cert_signature+0x2f6>
    }
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 80177d8:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80177dc:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80177e0:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
 80177e4:	f8d7 610c 	ldr.w	r6, [r7, #268]	@ 0x10c
                   (uint8_t *) cert->sig.buf, cert->sig.len, sig2,
 80177e8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80177ec:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	695b      	ldr	r3, [r3, #20]
 80177f4:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80177f8:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80177fc:	6812      	ldr	r2, [r2, #0]
 80177fe:	6992      	ldr	r2, [r2, #24]
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 8017800:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8017804:	9103      	str	r1, [sp, #12]
 8017806:	f107 0108 	add.w	r1, r7, #8
 801780a:	9102      	str	r1, [sp, #8]
 801780c:	9201      	str	r2, [sp, #4]
 801780e:	9300      	str	r3, [sp, #0]
 8017810:	4633      	mov	r3, r6
 8017812:	462a      	mov	r2, r5
 8017814:	4621      	mov	r1, r4
 8017816:	f004 fae8 	bl	801bdea <mg_rsa_mod_pow>
                   sizeof(sig2));

    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 801781a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801781e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017826:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801782a:	f107 0208 	add.w	r2, r7, #8
 801782e:	18d0      	adds	r0, r2, r3
 8017830:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017834:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	f103 011c 	add.w	r1, r3, #28
               cert->tbshashsz);
 801783e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017842:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 801784a:	461a      	mov	r2, r3
 801784c:	f00b fe39 	bl	80234c2 <memcmp>
 8017850:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    return r == 0;
 8017854:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8017858:	2b00      	cmp	r3, #0
 801785a:	bf0c      	ite	eq
 801785c:	2301      	moveq	r3, #1
 801785e:	2300      	movne	r3, #0
 8017860:	b2db      	uxtb	r3, r3
  }
}
 8017862:	4618      	mov	r0, r3
 8017864:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8017868:	46bd      	mov	sp, r7
 801786a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801786c:	24000258 	.word	0x24000258
 8017870:	08027ff8 	.word	0x08027ff8
 8017874:	080241e8 	.word	0x080241e8
 8017878:	080262c0 	.word	0x080262c0
 801787c:	080262d8 	.word	0x080262d8
 8017880:	080262f0 	.word	0x080262f0

08017884 <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 8017884:	b580      	push	{r7, lr}
 8017886:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 801788a:	af00      	add	r7, sp, #0
 801788c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017890:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017894:	6018      	str	r0, [r3, #0]
  int subj_match = 0;
 8017896:	2300      	movs	r3, #0
 8017898:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
  struct tls_data *tls = (struct tls_data *) c->tls;
 801789c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80178a0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80178aa:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
  unsigned char *recv_buf;
  (void) subj_match;

  if (mg_tls_recv_record(c) < 0) {
 80178ae:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80178b2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80178b6:	6818      	ldr	r0, [r3, #0]
 80178b8:	f7fd ff30 	bl	801571c <mg_tls_recv_record>
 80178bc:	4603      	mov	r3, r0
 80178be:	2b00      	cmp	r3, #0
 80178c0:	da02      	bge.n	80178c8 <mg_tls_client_recv_cert+0x44>
    return -1;
 80178c2:	f04f 33ff 	mov.w	r3, #4294967295
 80178c6:	e24a      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
  }

  recv_buf = &c->rtls.buf[tls->recv_offset];
 80178c8:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80178cc:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80178d4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80178d8:	695b      	ldr	r3, [r3, #20]
 80178da:	4413      	add	r3, r2
 80178dc:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 80178e0:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	2b0d      	cmp	r3, #13
 80178e8:	d11c      	bne.n	8017924 <mg_tls_client_recv_cert+0xa0>
    MG_VERBOSE(("got certificate request"));
 80178ea:	4bcb      	ldr	r3, [pc, #812]	@ (8017c18 <mg_tls_client_recv_cert+0x394>)
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	2b03      	cmp	r3, #3
 80178f0:	dd09      	ble.n	8017906 <mg_tls_client_recv_cert+0x82>
 80178f2:	4bca      	ldr	r3, [pc, #808]	@ (8017c1c <mg_tls_client_recv_cert+0x398>)
 80178f4:	f642 7223 	movw	r2, #12067	@ 0x2f23
 80178f8:	49c9      	ldr	r1, [pc, #804]	@ (8017c20 <mg_tls_client_recv_cert+0x39c>)
 80178fa:	2004      	movs	r0, #4
 80178fc:	f7f4 fd1e 	bl	800c33c <mg_log_prefix>
 8017900:	48c8      	ldr	r0, [pc, #800]	@ (8017c24 <mg_tls_client_recv_cert+0x3a0>)
 8017902:	f7f4 fd6b 	bl	800c3dc <mg_log>
    mg_tls_drop_message(c);
 8017906:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801790a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801790e:	6818      	ldr	r0, [r3, #0]
 8017910:	f7fd fab8 	bl	8014e84 <mg_tls_drop_message>
    tls->cert_requested = 1;
 8017914:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017918:	2201      	movs	r2, #1
 801791a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 801791e:	f04f 33ff 	mov.w	r3, #4294967295
 8017922:	e21c      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
  }

  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 8017924:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017928:	781b      	ldrb	r3, [r3, #0]
 801792a:	2b0b      	cmp	r3, #11
 801792c:	d00e      	beq.n	801794c <mg_tls_client_recv_cert+0xc8>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 801792e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017932:	781b      	ldrb	r3, [r3, #0]
 8017934:	461a      	mov	r2, r3
 8017936:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801793a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801793e:	49ba      	ldr	r1, [pc, #744]	@ (8017c28 <mg_tls_client_recv_cert+0x3a4>)
 8017940:	6818      	ldr	r0, [r3, #0]
 8017942:	f7ee ffeb 	bl	800691c <mg_error>
    return -1;
 8017946:	f04f 33ff 	mov.w	r3, #4294967295
 801794a:	e208      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
  }

  if (tls->recv_len < 11) {
 801794c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017950:	699b      	ldr	r3, [r3, #24]
 8017952:	2b0a      	cmp	r3, #10
 8017954:	d80a      	bhi.n	801796c <mg_tls_client_recv_cert+0xe8>
    mg_error(c, "certificate list too short");
 8017956:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801795a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801795e:	49b3      	ldr	r1, [pc, #716]	@ (8017c2c <mg_tls_client_recv_cert+0x3a8>)
 8017960:	6818      	ldr	r0, [r3, #0]
 8017962:	f7ee ffdb 	bl	800691c <mg_error>
    return -1;
 8017966:	f04f 33ff 	mov.w	r3, #4294967295
 801796a:	e1f8      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
  }

  uint32_t full_cert_chain_len = MG_LOAD_BE24(recv_buf + 1);
 801796c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017970:	3301      	adds	r3, #1
 8017972:	781b      	ldrb	r3, [r3, #0]
 8017974:	041a      	lsls	r2, r3, #16
 8017976:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801797a:	3302      	adds	r3, #2
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	021b      	lsls	r3, r3, #8
 8017980:	4313      	orrs	r3, r2
 8017982:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8017986:	3203      	adds	r2, #3
 8017988:	7812      	ldrb	r2, [r2, #0]
 801798a:	4313      	orrs	r3, r2
 801798c:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  uint32_t cert_chain_len = MG_LOAD_BE24(recv_buf + 5);
 8017990:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017994:	3305      	adds	r3, #5
 8017996:	781b      	ldrb	r3, [r3, #0]
 8017998:	041a      	lsls	r2, r3, #16
 801799a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801799e:	3306      	adds	r3, #6
 80179a0:	781b      	ldrb	r3, [r3, #0]
 80179a2:	021b      	lsls	r3, r3, #8
 80179a4:	4313      	orrs	r3, r2
 80179a6:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 80179aa:	3207      	adds	r2, #7
 80179ac:	7812      	ldrb	r2, [r2, #0]
 80179ae:	4313      	orrs	r3, r2
 80179b0:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
  if (cert_chain_len != full_cert_chain_len - 4) {
 80179b4:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 80179b8:	3b04      	subs	r3, #4
 80179ba:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 80179be:	429a      	cmp	r2, r3
 80179c0:	d01c      	beq.n	80179fc <mg_tls_client_recv_cert+0x178>
    MG_ERROR(("full chain length: %d, chain length: %d", full_cert_chain_len,
 80179c2:	4b95      	ldr	r3, [pc, #596]	@ (8017c18 <mg_tls_client_recv_cert+0x394>)
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	dd0d      	ble.n	80179e6 <mg_tls_client_recv_cert+0x162>
 80179ca:	4b94      	ldr	r3, [pc, #592]	@ (8017c1c <mg_tls_client_recv_cert+0x398>)
 80179cc:	f642 7236 	movw	r2, #12086	@ 0x2f36
 80179d0:	4993      	ldr	r1, [pc, #588]	@ (8017c20 <mg_tls_client_recv_cert+0x39c>)
 80179d2:	2001      	movs	r0, #1
 80179d4:	f7f4 fcb2 	bl	800c33c <mg_log_prefix>
 80179d8:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 80179dc:	f8d7 12f4 	ldr.w	r1, [r7, #756]	@ 0x2f4
 80179e0:	4893      	ldr	r0, [pc, #588]	@ (8017c30 <mg_tls_client_recv_cert+0x3ac>)
 80179e2:	f7f4 fcfb 	bl	800c3dc <mg_log>
              cert_chain_len));
    mg_error(c, "certificate chain length mismatch");
 80179e6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80179ea:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80179ee:	4991      	ldr	r1, [pc, #580]	@ (8017c34 <mg_tls_client_recv_cert+0x3b0>)
 80179f0:	6818      	ldr	r0, [r3, #0]
 80179f2:	f7ee ff93 	bl	800691c <mg_error>
    return -1;
 80179f6:	f04f 33ff 	mov.w	r3, #4294967295
 80179fa:	e1b0      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
  }

  // Normally, there are 2-3 certs in a chain
  struct mg_tls_cert certs[8];
  int certnum = 0;
 80179fc:	2300      	movs	r3, #0
 80179fe:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  uint8_t *p = recv_buf + 8;
 8017a02:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017a06:	3308      	adds	r3, #8
 8017a08:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  // uint8_t *endp = recv_buf + tls->recv_len;
  uint8_t *endp = recv_buf + cert_chain_len;
 8017a0c:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8017a10:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8017a14:	4413      	add	r3, r2
 8017a16:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec

  int found_ca = 0;
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
  struct mg_tls_cert ca;

  memset(certs, 0, sizeof(certs));
 8017a20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017a24:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017a28:	2100      	movs	r1, #0
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f00b fd73 	bl	8023516 <memset>
  memset(&ca, 0, sizeof(ca));
 8017a30:	f107 030c 	add.w	r3, r7, #12
 8017a34:	2250      	movs	r2, #80	@ 0x50
 8017a36:	2100      	movs	r1, #0
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f00b fd6c 	bl	8023516 <memset>

  if (tls->ca_der.len > 0) {
 8017a3e:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017a42:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	f000 8134 	beq.w	8017cb4 <mg_tls_client_recv_cert+0x430>
    if (mg_tls_parse_cert_der(tls->ca_der.buf, tls->ca_der.len, &ca) < 0) {
 8017a4c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017a50:	f8d3 0120 	ldr.w	r0, [r3, #288]	@ 0x120
 8017a54:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017a58:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017a5c:	f107 020c 	add.w	r2, r7, #12
 8017a60:	4619      	mov	r1, r3
 8017a62:	f7ff f94f 	bl	8016d04 <mg_tls_parse_cert_der>
 8017a66:	4603      	mov	r3, r0
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	da0a      	bge.n	8017a82 <mg_tls_client_recv_cert+0x1fe>
      mg_error(c, "failed to parse CA certificate");
 8017a6c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017a70:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017a74:	4970      	ldr	r1, [pc, #448]	@ (8017c38 <mg_tls_client_recv_cert+0x3b4>)
 8017a76:	6818      	ldr	r0, [r3, #0]
 8017a78:	f7ee ff50 	bl	800691c <mg_error>
      return -1;
 8017a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a80:	e16d      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
    }
    MG_VERBOSE(("CA serial: %M", mg_print_hex, ca.sn.len, ca.sn.buf));
 8017a82:	4b65      	ldr	r3, [pc, #404]	@ (8017c18 <mg_tls_client_recv_cert+0x394>)
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	2b03      	cmp	r3, #3
 8017a88:	f340 8114 	ble.w	8017cb4 <mg_tls_client_recv_cert+0x430>
 8017a8c:	4b63      	ldr	r3, [pc, #396]	@ (8017c1c <mg_tls_client_recv_cert+0x398>)
 8017a8e:	f642 724e 	movw	r2, #12110	@ 0x2f4e
 8017a92:	4963      	ldr	r1, [pc, #396]	@ (8017c20 <mg_tls_client_recv_cert+0x39c>)
 8017a94:	2004      	movs	r0, #4
 8017a96:	f7f4 fc51 	bl	800c33c <mg_log_prefix>
 8017a9a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017a9e:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017aa2:	689a      	ldr	r2, [r3, #8]
 8017aa4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017aa8:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017aac:	685b      	ldr	r3, [r3, #4]
 8017aae:	4963      	ldr	r1, [pc, #396]	@ (8017c3c <mg_tls_client_recv_cert+0x3b8>)
 8017ab0:	4863      	ldr	r0, [pc, #396]	@ (8017c40 <mg_tls_client_recv_cert+0x3bc>)
 8017ab2:	f7f4 fc93 	bl	800c3dc <mg_log>
  }

  while (p < endp) {
 8017ab6:	e0fd      	b.n	8017cb4 <mg_tls_client_recv_cert+0x430>
    struct mg_tls_cert *ci = &certs[certnum++];
 8017ab8:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8017abc:	1c53      	adds	r3, r2, #1
 8017abe:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8017ac2:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8017ac6:	4613      	mov	r3, r2
 8017ac8:	009b      	lsls	r3, r3, #2
 8017aca:	4413      	add	r3, r2
 8017acc:	011b      	lsls	r3, r3, #4
 8017ace:	440b      	add	r3, r1
 8017ad0:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
    uint32_t certsz = MG_LOAD_BE24(p);
 8017ad4:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8017ad8:	781b      	ldrb	r3, [r3, #0]
 8017ada:	041a      	lsls	r2, r3, #16
 8017adc:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8017ae0:	3301      	adds	r3, #1
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	021b      	lsls	r3, r3, #8
 8017ae6:	4313      	orrs	r3, r2
 8017ae8:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8017aec:	3202      	adds	r2, #2
 8017aee:	7812      	ldrb	r2, [r2, #0]
 8017af0:	4313      	orrs	r3, r2
 8017af2:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
    uint8_t *cert = p + 3;
 8017af6:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8017afa:	3303      	adds	r3, #3
 8017afc:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    uint16_t certext = MG_LOAD_BE16(cert + certsz);
 8017b00:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8017b04:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8017b08:	4413      	add	r3, r2
 8017b0a:	781b      	ldrb	r3, [r3, #0]
 8017b0c:	b21b      	sxth	r3, r3
 8017b0e:	021b      	lsls	r3, r3, #8
 8017b10:	b21a      	sxth	r2, r3
 8017b12:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8017b16:	3301      	adds	r3, #1
 8017b18:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 8017b1c:	440b      	add	r3, r1
 8017b1e:	781b      	ldrb	r3, [r3, #0]
 8017b20:	b21b      	sxth	r3, r3
 8017b22:	4313      	orrs	r3, r2
 8017b24:	b21b      	sxth	r3, r3
 8017b26:	f8a7 32de 	strh.w	r3, [r7, #734]	@ 0x2de
    if (certext != 0) {
 8017b2a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	@ 0x2de
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d00a      	beq.n	8017b48 <mg_tls_client_recv_cert+0x2c4>
      mg_error(c, "certificate extensions are not supported");
 8017b32:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017b36:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017b3a:	4942      	ldr	r1, [pc, #264]	@ (8017c44 <mg_tls_client_recv_cert+0x3c0>)
 8017b3c:	6818      	ldr	r0, [r3, #0]
 8017b3e:	f7ee feed 	bl	800691c <mg_error>
      return -1;
 8017b42:	f04f 33ff 	mov.w	r3, #4294967295
 8017b46:	e10a      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
    }
    p = cert + certsz + 2;
 8017b48:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8017b4c:	3302      	adds	r3, #2
 8017b4e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8017b52:	4413      	add	r3, r2
 8017b54:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

    if (mg_tls_parse_cert_der(cert, certsz, ci) < 0) {
 8017b58:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 8017b5c:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 8017b60:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 8017b64:	f7ff f8ce 	bl	8016d04 <mg_tls_parse_cert_der>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	da0a      	bge.n	8017b84 <mg_tls_client_recv_cert+0x300>
      mg_error(c, "failed to parse certificate");
 8017b6e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017b72:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017b76:	4934      	ldr	r1, [pc, #208]	@ (8017c48 <mg_tls_client_recv_cert+0x3c4>)
 8017b78:	6818      	ldr	r0, [r3, #0]
 8017b7a:	f7ee fecf 	bl	800691c <mg_error>
      return -1;
 8017b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8017b82:	e0ec      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
    }

    if (ci == certs) {
 8017b84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017b88:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 8017b8c:	429a      	cmp	r2, r3
 8017b8e:	d12d      	bne.n	8017bec <mg_tls_client_recv_cert+0x368>
      // First certificate in the chain is peer cert, check SAN and store
      // public key for further CertVerify step
      if (mg_tls_verify_cert_san(cert, certsz, tls->hostname) <= 0) {
 8017b90:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017b94:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8017b98:	461a      	mov	r2, r3
 8017b9a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 8017b9e:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 8017ba2:	f7ff fc63 	bl	801746c <mg_tls_verify_cert_san>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	dc0a      	bgt.n	8017bc2 <mg_tls_client_recv_cert+0x33e>
        mg_error(c, "failed to verify hostname");
 8017bac:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017bb0:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017bb4:	4925      	ldr	r1, [pc, #148]	@ (8017c4c <mg_tls_client_recv_cert+0x3c8>)
 8017bb6:	6818      	ldr	r0, [r3, #0]
 8017bb8:	f7ee feb0 	bl	800691c <mg_error>
        return -1;
 8017bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8017bc0:	e0cd      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
      }
      memmove(tls->pubkey, ci->pubkey.buf, ci->pubkey.len);
 8017bc2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017bc6:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8017bca:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017bce:	68d9      	ldr	r1, [r3, #12]
 8017bd0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017bd4:	691b      	ldr	r3, [r3, #16]
 8017bd6:	461a      	mov	r2, r3
 8017bd8:	f00b fc83 	bl	80234e2 <memmove>
      tls->pubkeysz = ci->pubkey.len;
 8017bdc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017be0:	691a      	ldr	r2, [r3, #16]
 8017be2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017be6:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
 8017bea:	e033      	b.n	8017c54 <mg_tls_client_recv_cert+0x3d0>
    } else {
      if (!mg_tls_verify_cert_signature(ci - 1, ci)) {
 8017bec:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017bf0:	3b50      	subs	r3, #80	@ 0x50
 8017bf2:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f7ff fcb8 	bl	801756c <mg_tls_verify_cert_signature>
 8017bfc:	4603      	mov	r3, r0
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d128      	bne.n	8017c54 <mg_tls_client_recv_cert+0x3d0>
        mg_error(c, "failed to verify certificate chain");
 8017c02:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017c06:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017c0a:	4911      	ldr	r1, [pc, #68]	@ (8017c50 <mg_tls_client_recv_cert+0x3cc>)
 8017c0c:	6818      	ldr	r0, [r3, #0]
 8017c0e:	f7ee fe85 	bl	800691c <mg_error>
        return -1;
 8017c12:	f04f 33ff 	mov.w	r3, #4294967295
 8017c16:	e0a2      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
 8017c18:	24000258 	.word	0x24000258
 8017c1c:	08028018 	.word	0x08028018
 8017c20:	080241e8 	.word	0x080241e8
 8017c24:	08026314 	.word	0x08026314
 8017c28:	0802632c 	.word	0x0802632c
 8017c2c:	0802635c 	.word	0x0802635c
 8017c30:	08026378 	.word	0x08026378
 8017c34:	080263a0 	.word	0x080263a0
 8017c38:	080263c4 	.word	0x080263c4
 8017c3c:	08010c4d 	.word	0x08010c4d
 8017c40:	080263e4 	.word	0x080263e4
 8017c44:	080263f4 	.word	0x080263f4
 8017c48:	08026420 	.word	0x08026420
 8017c4c:	0802643c 	.word	0x0802643c
 8017c50:	08026458 	.word	0x08026458
      }
    }

    if (ca.pubkey.len == ci->pubkey.len &&
 8017c54:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017c58:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017c5c:	691a      	ldr	r2, [r3, #16]
 8017c5e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017c62:	691b      	ldr	r3, [r3, #16]
 8017c64:	429a      	cmp	r2, r3
 8017c66:	d116      	bne.n	8017c96 <mg_tls_client_recv_cert+0x412>
        memcmp(ca.pubkey.buf, ci->pubkey.buf, ca.pubkey.len) == 0) {
 8017c68:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017c6c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017c70:	68d8      	ldr	r0, [r3, #12]
 8017c72:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017c76:	68d9      	ldr	r1, [r3, #12]
 8017c78:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017c7c:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017c80:	691b      	ldr	r3, [r3, #16]
 8017c82:	461a      	mov	r2, r3
 8017c84:	f00b fc1d 	bl	80234c2 <memcmp>
 8017c88:	4603      	mov	r3, r0
    if (ca.pubkey.len == ci->pubkey.len &&
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d103      	bne.n	8017c96 <mg_tls_client_recv_cert+0x412>
      found_ca = 1;
 8017c8e:	2301      	movs	r3, #1
 8017c90:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      break;
 8017c94:	e015      	b.n	8017cc2 <mg_tls_client_recv_cert+0x43e>
    }

    if (certnum == sizeof(certs) / sizeof(certs[0]) - 1) {
 8017c96:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8017c9a:	2b07      	cmp	r3, #7
 8017c9c:	d10a      	bne.n	8017cb4 <mg_tls_client_recv_cert+0x430>
      mg_error(c, "too many certificates in the chain");
 8017c9e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017ca2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017ca6:	4930      	ldr	r1, [pc, #192]	@ (8017d68 <mg_tls_client_recv_cert+0x4e4>)
 8017ca8:	6818      	ldr	r0, [r3, #0]
 8017caa:	f7ee fe37 	bl	800691c <mg_error>
      return -1;
 8017cae:	f04f 33ff 	mov.w	r3, #4294967295
 8017cb2:	e054      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
  while (p < endp) {
 8017cb4:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8017cb8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8017cbc:	429a      	cmp	r2, r3
 8017cbe:	f4ff aefb 	bcc.w	8017ab8 <mg_tls_client_recv_cert+0x234>
    }
  }

  if (!found_ca && tls->ca_der.len > 0) {
 8017cc2:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d135      	bne.n	8017d36 <mg_tls_client_recv_cert+0x4b2>
 8017cca:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017cce:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d02f      	beq.n	8017d36 <mg_tls_client_recv_cert+0x4b2>
    if (certnum < 1 ||
 8017cd6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	dd12      	ble.n	8017d04 <mg_tls_client_recv_cert+0x480>
        !mg_tls_verify_cert_signature(&certs[certnum - 1], &ca)) {
 8017cde:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8017ce2:	1e5a      	subs	r2, r3, #1
 8017ce4:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8017ce8:	4613      	mov	r3, r2
 8017cea:	009b      	lsls	r3, r3, #2
 8017cec:	4413      	add	r3, r2
 8017cee:	011b      	lsls	r3, r3, #4
 8017cf0:	440b      	add	r3, r1
 8017cf2:	f107 020c 	add.w	r2, r7, #12
 8017cf6:	4611      	mov	r1, r2
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	f7ff fc37 	bl	801756c <mg_tls_verify_cert_signature>
 8017cfe:	4603      	mov	r3, r0
    if (certnum < 1 ||
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d10a      	bne.n	8017d1a <mg_tls_client_recv_cert+0x496>
      mg_error(c, "failed to verify CA");
 8017d04:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017d08:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017d0c:	4917      	ldr	r1, [pc, #92]	@ (8017d6c <mg_tls_client_recv_cert+0x4e8>)
 8017d0e:	6818      	ldr	r0, [r3, #0]
 8017d10:	f7ee fe04 	bl	800691c <mg_error>
      return -1;
 8017d14:	f04f 33ff 	mov.w	r3, #4294967295
 8017d18:	e021      	b.n	8017d5e <mg_tls_client_recv_cert+0x4da>
    } else {
      MG_VERBOSE(
 8017d1a:	4b15      	ldr	r3, [pc, #84]	@ (8017d70 <mg_tls_client_recv_cert+0x4ec>)
 8017d1c:	681b      	ldr	r3, [r3, #0]
 8017d1e:	2b03      	cmp	r3, #3
 8017d20:	dd09      	ble.n	8017d36 <mg_tls_client_recv_cert+0x4b2>
 8017d22:	4b14      	ldr	r3, [pc, #80]	@ (8017d74 <mg_tls_client_recv_cert+0x4f0>)
 8017d24:	f642 7283 	movw	r2, #12163	@ 0x2f83
 8017d28:	4913      	ldr	r1, [pc, #76]	@ (8017d78 <mg_tls_client_recv_cert+0x4f4>)
 8017d2a:	2004      	movs	r0, #4
 8017d2c:	f7f4 fb06 	bl	800c33c <mg_log_prefix>
 8017d30:	4812      	ldr	r0, [pc, #72]	@ (8017d7c <mg_tls_client_recv_cert+0x4f8>)
 8017d32:	f7f4 fb53 	bl	800c3dc <mg_log>
          ("CA was not in the chain, but verification with builtin CA passed"));
    }
  }

  mg_tls_drop_message(c);
 8017d36:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017d3a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017d3e:	6818      	ldr	r0, [r3, #0]
 8017d40:	f7fd f8a0 	bl	8014e84 <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 8017d44:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017d48:	f503 618c 	add.w	r1, r3, #1120	@ 0x460
 8017d4c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017d50:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017d54:	2200      	movs	r2, #0
 8017d56:	6818      	ldr	r0, [r3, #0]
 8017d58:	f7fd fdfc 	bl	8015954 <mg_tls_calc_cert_verify_hash>
  return 0;
 8017d5c:	2300      	movs	r3, #0
}
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}
 8017d68:	0802647c 	.word	0x0802647c
 8017d6c:	080264a0 	.word	0x080264a0
 8017d70:	24000258 	.word	0x24000258
 8017d74:	08028018 	.word	0x08028018
 8017d78:	080241e8 	.word	0x080241e8
 8017d7c:	080264b4 	.word	0x080264b4

08017d80 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 8017d80:	b5b0      	push	{r4, r5, r7, lr}
 8017d82:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8017d86:	af04      	add	r7, sp, #16
 8017d88:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017d8c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017d90:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017d92:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017d96:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017da0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8017da4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017da8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017dac:	6818      	ldr	r0, [r3, #0]
 8017dae:	f7fd fcb5 	bl	801571c <mg_tls_recv_record>
 8017db2:	4603      	mov	r3, r0
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	da02      	bge.n	8017dbe <mg_tls_client_recv_cert_verify+0x3e>
    return -1;
 8017db8:	f04f 33ff 	mov.w	r3, #4294967295
 8017dbc:	e1f9      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8017dbe:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017dc2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017dca:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017dce:	695b      	ldr	r3, [r3, #20]
 8017dd0:	4413      	add	r3, r2
 8017dd2:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 8017dd6:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017dda:	781b      	ldrb	r3, [r3, #0]
 8017ddc:	2b0f      	cmp	r3, #15
 8017dde:	d00e      	beq.n	8017dfe <mg_tls_client_recv_cert_verify+0x7e>
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
             recv_buf[0]);
 8017de0:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017de4:	781b      	ldrb	r3, [r3, #0]
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
 8017de6:	461a      	mov	r2, r3
 8017de8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017dec:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017df0:	49cb      	ldr	r1, [pc, #812]	@ (8018120 <mg_tls_client_recv_cert_verify+0x3a0>)
 8017df2:	6818      	ldr	r0, [r3, #0]
 8017df4:	f7ee fd92 	bl	800691c <mg_error>
    return -1;
 8017df8:	f04f 33ff 	mov.w	r3, #4294967295
 8017dfc:	e1d9      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
  }
  if (tls->recv_len < 8) {
 8017dfe:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017e02:	699b      	ldr	r3, [r3, #24]
 8017e04:	2b07      	cmp	r3, #7
 8017e06:	d80d      	bhi.n	8017e24 <mg_tls_client_recv_cert_verify+0xa4>
    mg_error(c, "server certificate verify is too short: %d bytes",
 8017e08:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017e0c:	699a      	ldr	r2, [r3, #24]
 8017e0e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017e12:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017e16:	49c3      	ldr	r1, [pc, #780]	@ (8018124 <mg_tls_client_recv_cert_verify+0x3a4>)
 8017e18:	6818      	ldr	r0, [r3, #0]
 8017e1a:	f7ee fd7f 	bl	800691c <mg_error>
             tls->recv_len);
    return -1;
 8017e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8017e22:	e1c6      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
  }

  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 8017e24:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017e28:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d008      	beq.n	8017e42 <mg_tls_client_recv_cert_verify+0xc2>
    mg_tls_drop_message(c);
 8017e30:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017e34:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017e38:	6818      	ldr	r0, [r3, #0]
 8017e3a:	f7fd f823 	bl	8014e84 <mg_tls_drop_message>
    return 0;
 8017e3e:	2300      	movs	r3, #0
 8017e40:	e1b7      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
  }

  uint16_t sigalg = MG_LOAD_BE16(recv_buf + 4);
 8017e42:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017e46:	3304      	adds	r3, #4
 8017e48:	781b      	ldrb	r3, [r3, #0]
 8017e4a:	b21b      	sxth	r3, r3
 8017e4c:	021b      	lsls	r3, r3, #8
 8017e4e:	b21a      	sxth	r2, r3
 8017e50:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017e54:	3305      	adds	r3, #5
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	b21b      	sxth	r3, r3
 8017e5a:	4313      	orrs	r3, r2
 8017e5c:	b21b      	sxth	r3, r3
 8017e5e:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
  uint16_t siglen = MG_LOAD_BE16(recv_buf + 6);
 8017e62:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017e66:	3306      	adds	r3, #6
 8017e68:	781b      	ldrb	r3, [r3, #0]
 8017e6a:	b21b      	sxth	r3, r3
 8017e6c:	021b      	lsls	r3, r3, #8
 8017e6e:	b21a      	sxth	r2, r3
 8017e70:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017e74:	3307      	adds	r3, #7
 8017e76:	781b      	ldrb	r3, [r3, #0]
 8017e78:	b21b      	sxth	r3, r3
 8017e7a:	4313      	orrs	r3, r2
 8017e7c:	b21b      	sxth	r3, r3
 8017e7e:	f8a7 3254 	strh.w	r3, [r7, #596]	@ 0x254
  uint8_t *sigbuf = recv_buf + 8;
 8017e82:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017e86:	3308      	adds	r3, #8
 8017e88:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  if (siglen > tls->recv_len - 8) {
 8017e8c:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8017e90:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017e94:	699b      	ldr	r3, [r3, #24]
 8017e96:	3b08      	subs	r3, #8
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d910      	bls.n	8017ebe <mg_tls_client_recv_cert_verify+0x13e>
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 8017e9c:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
             tls->recv_len - 8);
 8017ea0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017ea4:	699b      	ldr	r3, [r3, #24]
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 8017ea6:	3b08      	subs	r3, #8
 8017ea8:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8017eac:	f5a1 7017 	sub.w	r0, r1, #604	@ 0x25c
 8017eb0:	499d      	ldr	r1, [pc, #628]	@ (8018128 <mg_tls_client_recv_cert_verify+0x3a8>)
 8017eb2:	6800      	ldr	r0, [r0, #0]
 8017eb4:	f7ee fd32 	bl	800691c <mg_error>
    return -1;
 8017eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8017ebc:	e179      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
  }
  MG_VERBOSE(
 8017ebe:	4b9b      	ldr	r3, [pc, #620]	@ (801812c <mg_tls_client_recv_cert_verify+0x3ac>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	2b03      	cmp	r3, #3
 8017ec4:	dd0e      	ble.n	8017ee4 <mg_tls_client_recv_cert_verify+0x164>
 8017ec6:	4b9a      	ldr	r3, [pc, #616]	@ (8018130 <mg_tls_client_recv_cert_verify+0x3b0>)
 8017ec8:	f642 72ad 	movw	r2, #12205	@ 0x2fad
 8017ecc:	4999      	ldr	r1, [pc, #612]	@ (8018134 <mg_tls_client_recv_cert_verify+0x3b4>)
 8017ece:	2004      	movs	r0, #4
 8017ed0:	f7f4 fa34 	bl	800c33c <mg_log_prefix>
 8017ed4:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8017ed8:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8017edc:	4619      	mov	r1, r3
 8017ede:	4896      	ldr	r0, [pc, #600]	@ (8018138 <mg_tls_client_recv_cert_verify+0x3b8>)
 8017ee0:	f7f4 fa7c 	bl	800c3dc <mg_log>
      ("certificate verification, algo=%04x, siglen=%d", sigalg, siglen));

  if (sigalg == 0x0804) {  // rsa_pss_rsae_sha256
 8017ee4:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8017ee8:	f640 0204 	movw	r2, #2052	@ 0x804
 8017eec:	4293      	cmp	r3, r2
 8017eee:	d173      	bne.n	8017fd8 <mg_tls_client_recv_cert_verify+0x258>
    uint8_t sig2[512];     // 2048 or 4096 bits
    struct mg_der_tlv seq, modulus, exponent;

    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 8017ef0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017ef4:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8017ef8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017efc:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 8017f00:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 8017f04:	4619      	mov	r1, r3
 8017f06:	f7fc fe43 	bl	8014b90 <mg_der_parse>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	dd1d      	ble.n	8017f4c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8017f10:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8017f14:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8017f18:	4611      	mov	r1, r2
 8017f1a:	4618      	mov	r0, r3
 8017f1c:	f7fc fe98 	bl	8014c50 <mg_der_next>
 8017f20:	4603      	mov	r3, r0
    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	dd12      	ble.n	8017f4c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8017f26:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8017f2a:	2b02      	cmp	r3, #2
 8017f2c:	d10e      	bne.n	8017f4c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8017f2e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8017f32:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8017f36:	4611      	mov	r1, r2
 8017f38:	4618      	mov	r0, r3
 8017f3a:	f7fc fe89 	bl	8014c50 <mg_der_next>
 8017f3e:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	dd03      	ble.n	8017f4c <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8017f44:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8017f48:	2b02      	cmp	r3, #2
 8017f4a:	d00a      	beq.n	8017f62 <mg_tls_client_recv_cert_verify+0x1e2>
      mg_error(c, "invalid public key");
 8017f4c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017f50:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017f54:	4979      	ldr	r1, [pc, #484]	@ (801813c <mg_tls_client_recv_cert_verify+0x3bc>)
 8017f56:	6818      	ldr	r0, [r3, #0]
 8017f58:	f7ee fce0 	bl	800691c <mg_error>
      return -1;
 8017f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8017f60:	e127      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
    }

    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 8017f62:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8017f66:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 8017f6a:	f8d7 4234 	ldr.w	r4, [r7, #564]	@ 0x234
 8017f6e:	f8d7 5230 	ldr.w	r5, [r7, #560]	@ 0x230
 8017f72:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 8017f76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017f7a:	9203      	str	r2, [sp, #12]
 8017f7c:	f107 0208 	add.w	r2, r7, #8
 8017f80:	9202      	str	r2, [sp, #8]
 8017f82:	9301      	str	r3, [sp, #4]
 8017f84:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8017f88:	9300      	str	r3, [sp, #0]
 8017f8a:	462b      	mov	r3, r5
 8017f8c:	4622      	mov	r2, r4
 8017f8e:	f003 ff2c 	bl	801bdea <mg_rsa_mod_pow>
                   sigbuf, siglen, sig2, sizeof(sig2));

    if (sig2[sizeof(sig2) - 1] != 0xbc) {
 8017f92:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017f96:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8017f9a:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8017f9e:	2bbc      	cmp	r3, #188	@ 0xbc
 8017fa0:	d00a      	beq.n	8017fb8 <mg_tls_client_recv_cert_verify+0x238>
      mg_error(c, "failed to verify RSA certificate (certverify)");
 8017fa2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017fa6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017faa:	4965      	ldr	r1, [pc, #404]	@ (8018140 <mg_tls_client_recv_cert_verify+0x3c0>)
 8017fac:	6818      	ldr	r0, [r3, #0]
 8017fae:	f7ee fcb5 	bl	800691c <mg_error>
      return -1;
 8017fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8017fb6:	e0fc      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
    }
    MG_DEBUG(("certificate verification successful (RSA)"));
 8017fb8:	4b5c      	ldr	r3, [pc, #368]	@ (801812c <mg_tls_client_recv_cert_verify+0x3ac>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	2b02      	cmp	r3, #2
 8017fbe:	f340 80f0 	ble.w	80181a2 <mg_tls_client_recv_cert_verify+0x422>
 8017fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8018130 <mg_tls_client_recv_cert_verify+0x3b0>)
 8017fc4:	f642 72c2 	movw	r2, #12226	@ 0x2fc2
 8017fc8:	495a      	ldr	r1, [pc, #360]	@ (8018134 <mg_tls_client_recv_cert_verify+0x3b4>)
 8017fca:	2003      	movs	r0, #3
 8017fcc:	f7f4 f9b6 	bl	800c33c <mg_log_prefix>
 8017fd0:	485c      	ldr	r0, [pc, #368]	@ (8018144 <mg_tls_client_recv_cert_verify+0x3c4>)
 8017fd2:	f7f4 fa03 	bl	800c3dc <mg_log>
 8017fd6:	e0e4      	b.n	80181a2 <mg_tls_client_recv_cert_verify+0x422>
  } else if (sigalg == 0x0403) {  // ecdsa_secp256r1_sha256
 8017fd8:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8017fdc:	f240 4203 	movw	r2, #1027	@ 0x403
 8017fe0:	4293      	cmp	r3, r2
 8017fe2:	f040 80c8 	bne.w	8018176 <mg_tls_client_recv_cert_verify+0x3f6>
    // Extract certificate signature and verify it using pubkey and sighash
    uint8_t sig[64];
    struct mg_der_tlv seq, r, s;
    if (mg_der_to_tlv(sigbuf, siglen, &seq) < 0) {
 8017fe6:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 8017fea:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8017fee:	4619      	mov	r1, r3
 8017ff0:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8017ff4:	f7fc fea7 	bl	8014d46 <mg_der_to_tlv>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	da0a      	bge.n	8018014 <mg_tls_client_recv_cert_verify+0x294>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 8017ffe:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8018002:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8018006:	4950      	ldr	r1, [pc, #320]	@ (8018148 <mg_tls_client_recv_cert_verify+0x3c8>)
 8018008:	6818      	ldr	r0, [r3, #0]
 801800a:	f7ee fc87 	bl	800691c <mg_error>
      return -1;
 801800e:	f04f 33ff 	mov.w	r3, #4294967295
 8018012:	e0ce      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &r) < 0) {
 8018014:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8018018:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 801801c:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8018020:	4618      	mov	r0, r3
 8018022:	f7fc fe90 	bl	8014d46 <mg_der_to_tlv>
 8018026:	4603      	mov	r3, r0
 8018028:	2b00      	cmp	r3, #0
 801802a:	da0a      	bge.n	8018042 <mg_tls_client_recv_cert_verify+0x2c2>
      mg_error(c, "missing first part of the signature");
 801802c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8018030:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8018034:	4945      	ldr	r1, [pc, #276]	@ (801814c <mg_tls_client_recv_cert_verify+0x3cc>)
 8018036:	6818      	ldr	r0, [r3, #0]
 8018038:	f7ee fc70 	bl	800691c <mg_error>
      return -1;
 801803c:	f04f 33ff 	mov.w	r3, #4294967295
 8018040:	e0b7      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(r.value + r.len, seq.len - r.len, &s) < 0) {
 8018042:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8018046:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801804a:	18d0      	adds	r0, r2, r3
 801804c:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8018050:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8018054:	1ad3      	subs	r3, r2, r3
 8018056:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 801805a:	4619      	mov	r1, r3
 801805c:	f7fc fe73 	bl	8014d46 <mg_der_to_tlv>
 8018060:	4603      	mov	r3, r0
 8018062:	2b00      	cmp	r3, #0
 8018064:	da0a      	bge.n	801807c <mg_tls_client_recv_cert_verify+0x2fc>
      mg_error(c, "missing second part of the signature");
 8018066:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801806a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801806e:	4938      	ldr	r1, [pc, #224]	@ (8018150 <mg_tls_client_recv_cert_verify+0x3d0>)
 8018070:	6818      	ldr	r0, [r3, #0]
 8018072:	f7ee fc53 	bl	800691c <mg_error>
      return -1;
 8018076:	f04f 33ff 	mov.w	r3, #4294967295
 801807a:	e09a      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
    }
    // Integers may be padded with zeroes
    if (r.len > 32) r.value = r.value + (r.len - 32), r.len = 32;
 801807c:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8018080:	2b20      	cmp	r3, #32
 8018082:	d90a      	bls.n	801809a <mg_tls_client_recv_cert_verify+0x31a>
 8018084:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8018088:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801808c:	3b20      	subs	r3, #32
 801808e:	4413      	add	r3, r2
 8018090:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8018094:	2320      	movs	r3, #32
 8018096:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    if (s.len > 32) s.value = s.value + (s.len - 32), s.len = 32;
 801809a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801809e:	2b20      	cmp	r3, #32
 80180a0:	d90a      	bls.n	80180b8 <mg_tls_client_recv_cert_verify+0x338>
 80180a2:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 80180a6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80180aa:	3b20      	subs	r3, #32
 80180ac:	4413      	add	r3, r2
 80180ae:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80180b2:	2320      	movs	r3, #32
 80180b4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    memmove(sig, r.value, r.len);
 80180b8:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 80180bc:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80180c0:	f107 0308 	add.w	r3, r7, #8
 80180c4:	4618      	mov	r0, r3
 80180c6:	f00b fa0c 	bl	80234e2 <memmove>
    memmove(sig + 32, s.value, s.len);
 80180ca:	f107 0308 	add.w	r3, r7, #8
 80180ce:	3320      	adds	r3, #32
 80180d0:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 80180d4:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 80180d8:	4618      	mov	r0, r3
 80180da:	f00b fa02 	bl	80234e2 <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 80180de:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80180e2:	f503 7413 	add.w	r4, r3, #588	@ 0x24c
 80180e6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80180ea:	f503 658c 	add.w	r5, r3, #1120	@ 0x460
 80180ee:	f004 feab 	bl	801ce48 <mg_uecc_secp256r1>
 80180f2:	4602      	mov	r2, r0
 80180f4:	f107 0308 	add.w	r3, r7, #8
 80180f8:	9200      	str	r2, [sp, #0]
 80180fa:	2220      	movs	r2, #32
 80180fc:	4629      	mov	r1, r5
 80180fe:	4620      	mov	r0, r4
 8018100:	f006 f83e 	bl	801e180 <mg_uecc_verify>
 8018104:	4603      	mov	r3, r0
 8018106:	2b01      	cmp	r3, #1
 8018108:	d026      	beq.n	8018158 <mg_tls_client_recv_cert_verify+0x3d8>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify EC certificate (certverify)");
 801810a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801810e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8018112:	4910      	ldr	r1, [pc, #64]	@ (8018154 <mg_tls_client_recv_cert_verify+0x3d4>)
 8018114:	6818      	ldr	r0, [r3, #0]
 8018116:	f7ee fc01 	bl	800691c <mg_error>
      return -1;
 801811a:	f04f 33ff 	mov.w	r3, #4294967295
 801811e:	e048      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
 8018120:	080264f8 	.word	0x080264f8
 8018124:	08026530 	.word	0x08026530
 8018128:	08026564 	.word	0x08026564
 801812c:	24000258 	.word	0x24000258
 8018130:	08028030 	.word	0x08028030
 8018134:	080241e8 	.word	0x080241e8
 8018138:	0802659c 	.word	0x0802659c
 801813c:	080265cc 	.word	0x080265cc
 8018140:	080265e0 	.word	0x080265e0
 8018144:	08026610 	.word	0x08026610
 8018148:	0802663c 	.word	0x0802663c
 801814c:	08026670 	.word	0x08026670
 8018150:	08026694 	.word	0x08026694
 8018154:	080266bc 	.word	0x080266bc
    }
    MG_DEBUG(("certificate verification successful (EC)"));
 8018158:	4b18      	ldr	r3, [pc, #96]	@ (80181bc <mg_tls_client_recv_cert_verify+0x43c>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	2b02      	cmp	r3, #2
 801815e:	dd20      	ble.n	80181a2 <mg_tls_client_recv_cert_verify+0x422>
 8018160:	4b17      	ldr	r3, [pc, #92]	@ (80181c0 <mg_tls_client_recv_cert_verify+0x440>)
 8018162:	f642 72df 	movw	r2, #12255	@ 0x2fdf
 8018166:	4917      	ldr	r1, [pc, #92]	@ (80181c4 <mg_tls_client_recv_cert_verify+0x444>)
 8018168:	2003      	movs	r0, #3
 801816a:	f7f4 f8e7 	bl	800c33c <mg_log_prefix>
 801816e:	4816      	ldr	r0, [pc, #88]	@ (80181c8 <mg_tls_client_recv_cert_verify+0x448>)
 8018170:	f7f4 f934 	bl	800c3dc <mg_log>
 8018174:	e015      	b.n	80181a2 <mg_tls_client_recv_cert_verify+0x422>
    //   0807 = ed25519
    //   0808 = ed448
    //   0809 = rsa_pss_pss_sha256
    //   080A = rsa_pss_pss_sha384
    //   080B = rsa_pss_pss_sha512
    MG_ERROR(("unsupported certverify signature scheme: %x of %d bytes", sigalg,
 8018176:	4b11      	ldr	r3, [pc, #68]	@ (80181bc <mg_tls_client_recv_cert_verify+0x43c>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	2b00      	cmp	r3, #0
 801817c:	dd0e      	ble.n	801819c <mg_tls_client_recv_cert_verify+0x41c>
 801817e:	4b10      	ldr	r3, [pc, #64]	@ (80181c0 <mg_tls_client_recv_cert_verify+0x440>)
 8018180:	f642 72ea 	movw	r2, #12266	@ 0x2fea
 8018184:	490f      	ldr	r1, [pc, #60]	@ (80181c4 <mg_tls_client_recv_cert_verify+0x444>)
 8018186:	2001      	movs	r0, #1
 8018188:	f7f4 f8d8 	bl	800c33c <mg_log_prefix>
 801818c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8018190:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8018194:	4619      	mov	r1, r3
 8018196:	480d      	ldr	r0, [pc, #52]	@ (80181cc <mg_tls_client_recv_cert_verify+0x44c>)
 8018198:	f7f4 f920 	bl	800c3dc <mg_log>
              siglen));
    return -1;
 801819c:	f04f 33ff 	mov.w	r3, #4294967295
 80181a0:	e007      	b.n	80181b2 <mg_tls_client_recv_cert_verify+0x432>
  }
  mg_tls_drop_message(c);
 80181a2:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80181a6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80181aa:	6818      	ldr	r0, [r3, #0]
 80181ac:	f7fc fe6a 	bl	8014e84 <mg_tls_drop_message>
  return 0;
 80181b0:	2300      	movs	r3, #0
}
 80181b2:	4618      	mov	r0, r3
 80181b4:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bdb0      	pop	{r4, r5, r7, pc}
 80181bc:	24000258 	.word	0x24000258
 80181c0:	08028030 	.word	0x08028030
 80181c4:	080241e8 	.word	0x080241e8
 80181c8:	080266ec 	.word	0x080266ec
 80181cc:	08026718 	.word	0x08026718

080181d0 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b084      	sub	sp, #16
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80181de:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80181e0:	6878      	ldr	r0, [r7, #4]
 80181e2:	f7fd fa9b 	bl	801571c <mg_tls_recv_record>
 80181e6:	4603      	mov	r3, r0
 80181e8:	2b00      	cmp	r3, #0
 80181ea:	da02      	bge.n	80181f2 <mg_tls_client_recv_finish+0x22>
    return -1;
 80181ec:	f04f 33ff 	mov.w	r3, #4294967295
 80181f0:	e017      	b.n	8018222 <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	695b      	ldr	r3, [r3, #20]
 80181fa:	4413      	add	r3, r2
 80181fc:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 80181fe:	68bb      	ldr	r3, [r7, #8]
 8018200:	781b      	ldrb	r3, [r3, #0]
 8018202:	2b14      	cmp	r3, #20
 8018204:	d009      	beq.n	801821a <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	461a      	mov	r2, r3
 801820c:	4907      	ldr	r1, [pc, #28]	@ (801822c <mg_tls_client_recv_finish+0x5c>)
 801820e:	6878      	ldr	r0, [r7, #4]
 8018210:	f7ee fb84 	bl	800691c <mg_error>
    return -1;
 8018214:	f04f 33ff 	mov.w	r3, #4294967295
 8018218:	e003      	b.n	8018222 <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 801821a:	6878      	ldr	r0, [r7, #4]
 801821c:	f7fc fe32 	bl	8014e84 <mg_tls_drop_message>
  return 0;
 8018220:	2300      	movs	r3, #0
}
 8018222:	4618      	mov	r0, r3
 8018224:	3710      	adds	r7, #16
 8018226:	46bd      	mov	sp, r7
 8018228:	bd80      	pop	{r7, pc}
 801822a:	bf00      	nop
 801822c:	08026750 	.word	0x08026750

08018230 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 8018230:	b580      	push	{r7, lr}
 8018232:	b0b4      	sub	sp, #208	@ 0xd0
 8018234:	af02      	add	r7, sp, #8
 8018236:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801823e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8018242:	4b1a      	ldr	r3, [pc, #104]	@ (80182ac <mg_tls_client_send_finish+0x7c>)
 8018244:	60fb      	str	r3, [r7, #12]
 8018246:	f107 0310 	add.w	r3, r7, #16
 801824a:	2220      	movs	r2, #32
 801824c:	2100      	movs	r1, #0
 801824e:	4618      	mov	r0, r3
 8018250:	f00b f961 	bl	8023516 <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8018254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018258:	f103 0120 	add.w	r1, r3, #32
 801825c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8018260:	2270      	movs	r2, #112	@ 0x70
 8018262:	4618      	mov	r0, r3
 8018264:	f00b f93d 	bl	80234e2 <memmove>
  mg_sha256_final(hash, &sha256);
 8018268:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801826c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018270:	4611      	mov	r1, r2
 8018272:	4618      	mov	r0, r3
 8018274:	f7fa fc5d 	bl	8012b32 <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 8018278:	f107 000c 	add.w	r0, r7, #12
 801827c:	3004      	adds	r0, #4
 801827e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018282:	f503 61a4 	add.w	r1, r3, #1312	@ 0x520
 8018286:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801828a:	2220      	movs	r2, #32
 801828c:	9200      	str	r2, [sp, #0]
 801828e:	2220      	movs	r2, #32
 8018290:	f7fa fda3 	bl	8012dda <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 8018294:	f107 010c 	add.w	r1, r7, #12
 8018298:	2316      	movs	r3, #22
 801829a:	2224      	movs	r2, #36	@ 0x24
 801829c:	6878      	ldr	r0, [r7, #4]
 801829e:	f7fd f941 	bl	8015524 <mg_tls_encrypt>
}
 80182a2:	bf00      	nop
 80182a4:	37c8      	adds	r7, #200	@ 0xc8
 80182a6:	46bd      	mov	sp, r7
 80182a8:	bd80      	pop	{r7, pc}
 80182aa:	bf00      	nop
 80182ac:	20000014 	.word	0x20000014

080182b0 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b0e4      	sub	sp, #400	@ 0x190
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80182ba:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80182be:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80182c0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80182c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80182ce:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 80182d2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80182d6:	781b      	ldrb	r3, [r3, #0]
 80182d8:	2b05      	cmp	r3, #5
 80182da:	f200 80da 	bhi.w	8018492 <mg_tls_client_handshake+0x1e2>
 80182de:	a201      	add	r2, pc, #4	@ (adr r2, 80182e4 <mg_tls_client_handshake+0x34>)
 80182e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182e4:	080182fd 	.word	0x080182fd
 80182e8:	08018313 	.word	0x08018313
 80182ec:	08018331 	.word	0x08018331
 80182f0:	0801834f 	.word	0x0801834f
 80182f4:	0801836d 	.word	0x0801836d
 80182f8:	0801838b 	.word	0x0801838b
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 80182fc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018300:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018304:	6818      	ldr	r0, [r3, #0]
 8018306:	f7fe f90b 	bl	8016520 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 801830a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801830e:	2201      	movs	r2, #1
 8018310:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 8018312:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018316:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801831a:	6818      	ldr	r0, [r3, #0]
 801831c:	f7fe fae2 	bl	80168e4 <mg_tls_client_recv_hello>
 8018320:	4603      	mov	r3, r0
 8018322:	2b00      	cmp	r3, #0
 8018324:	f2c0 80c2 	blt.w	80184ac <mg_tls_client_handshake+0x1fc>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 8018328:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801832c:	2202      	movs	r2, #2
 801832e:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 8018330:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018334:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018338:	6818      	ldr	r0, [r3, #0]
 801833a:	f7fe fc0d 	bl	8016b58 <mg_tls_client_recv_ext>
 801833e:	4603      	mov	r3, r0
 8018340:	2b00      	cmp	r3, #0
 8018342:	f2c0 80b5 	blt.w	80184b0 <mg_tls_client_handshake+0x200>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 8018346:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801834a:	2203      	movs	r2, #3
 801834c:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 801834e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018352:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018356:	6818      	ldr	r0, [r3, #0]
 8018358:	f7ff fa94 	bl	8017884 <mg_tls_client_recv_cert>
 801835c:	4603      	mov	r3, r0
 801835e:	2b00      	cmp	r3, #0
 8018360:	f2c0 80a8 	blt.w	80184b4 <mg_tls_client_handshake+0x204>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 8018364:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018368:	2204      	movs	r2, #4
 801836a:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 801836c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018370:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018374:	6818      	ldr	r0, [r3, #0]
 8018376:	f7ff fd03 	bl	8017d80 <mg_tls_client_recv_cert_verify>
 801837a:	4603      	mov	r3, r0
 801837c:	2b00      	cmp	r3, #0
 801837e:	f2c0 809b 	blt.w	80184b8 <mg_tls_client_handshake+0x208>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISH;
 8018382:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018386:	2205      	movs	r2, #5
 8018388:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISH:
      if (mg_tls_client_recv_finish(c) < 0) {
 801838a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801838e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018392:	6818      	ldr	r0, [r3, #0]
 8018394:	f7ff ff1c 	bl	80181d0 <mg_tls_client_recv_finish>
 8018398:	4603      	mov	r3, r0
 801839a:	2b00      	cmp	r3, #0
 801839c:	f2c0 808e 	blt.w	80184bc <mg_tls_client_handshake+0x20c>
        break;
      }
      if (tls->cert_requested) {
 80183a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80183a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d04b      	beq.n	8018444 <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 80183ac:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80183b0:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80183b4:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80183b8:	22c0      	movs	r2, #192	@ 0xc0
 80183ba:	4619      	mov	r1, r3
 80183bc:	f00b f9e1 	bl	8023782 <memcpy>
        mg_tls_generate_application_keys(c);
 80183c0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80183c4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80183c8:	6818      	ldr	r0, [r3, #0]
 80183ca:	f7fc ff93 	bl	80152f4 <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 80183ce:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80183d2:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 80183d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80183da:	4610      	mov	r0, r2
 80183dc:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80183e0:	22c0      	movs	r2, #192	@ 0xc0
 80183e2:	4619      	mov	r1, r3
 80183e4:	f00b f9cd 	bl	8023782 <memcpy>
        tls->enc = hs_keys;
 80183e8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80183ec:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80183f0:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80183f4:	22c0      	movs	r2, #192	@ 0xc0
 80183f6:	4618      	mov	r0, r3
 80183f8:	f00b f9c3 	bl	8023782 <memcpy>
        mg_tls_server_send_cert(c);
 80183fc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018400:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018404:	6818      	ldr	r0, [r3, #0]
 8018406:	f7fd fda9 	bl	8015f5c <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 801840a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801840e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018412:	2101      	movs	r1, #1
 8018414:	6818      	ldr	r0, [r3, #0]
 8018416:	f7fd fec7 	bl	80161a8 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 801841a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801841e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018422:	6818      	ldr	r0, [r3, #0]
 8018424:	f7ff ff04 	bl	8018230 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 8018428:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801842c:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8018430:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 8018434:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8018438:	4611      	mov	r1, r2
 801843a:	22c0      	movs	r2, #192	@ 0xc0
 801843c:	4618      	mov	r0, r3
 801843e:	f00b f9a0 	bl	8023782 <memcpy>
 8018442:	e00d      	b.n	8018460 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 8018444:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018448:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801844c:	6818      	ldr	r0, [r3, #0]
 801844e:	f7ff feef 	bl	8018230 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 8018452:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018456:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801845a:	6818      	ldr	r0, [r3, #0]
 801845c:	f7fc ff4a 	bl	80152f4 <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 8018460:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018464:	2206      	movs	r2, #6
 8018466:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8018468:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801846c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018470:	681a      	ldr	r2, [r3, #0]
 8018472:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8018476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801847a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      mg_call(c, MG_EV_TLS_HS, NULL);
 801847e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018482:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018486:	2200      	movs	r2, #0
 8018488:	2106      	movs	r1, #6
 801848a:	6818      	ldr	r0, [r3, #0]
 801848c:	f7ee fa25 	bl	80068da <mg_call>
      break;
 8018490:	e015      	b.n	80184be <mg_tls_client_handshake+0x20e>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 8018492:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018496:	781b      	ldrb	r3, [r3, #0]
 8018498:	461a      	mov	r2, r3
 801849a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801849e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80184a2:	4909      	ldr	r1, [pc, #36]	@ (80184c8 <mg_tls_client_handshake+0x218>)
 80184a4:	6818      	ldr	r0, [r3, #0]
 80184a6:	f7ee fa39 	bl	800691c <mg_error>
      break;
 80184aa:	e008      	b.n	80184be <mg_tls_client_handshake+0x20e>
        break;
 80184ac:	bf00      	nop
 80184ae:	e006      	b.n	80184be <mg_tls_client_handshake+0x20e>
        break;
 80184b0:	bf00      	nop
 80184b2:	e004      	b.n	80184be <mg_tls_client_handshake+0x20e>
        break;
 80184b4:	bf00      	nop
 80184b6:	e002      	b.n	80184be <mg_tls_client_handshake+0x20e>
        break;
 80184b8:	bf00      	nop
 80184ba:	e000      	b.n	80184be <mg_tls_client_handshake+0x20e>
        break;
 80184bc:	bf00      	nop
  }
}
 80184be:	bf00      	nop
 80184c0:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80184c4:	46bd      	mov	sp, r7
 80184c6:	bd80      	pop	{r7, pc}
 80184c8:	0802677c 	.word	0x0802677c

080184cc <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 80184cc:	b580      	push	{r7, lr}
 80184ce:	b084      	sub	sp, #16
 80184d0:	af00      	add	r7, sp, #0
 80184d2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80184da:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	781b      	ldrb	r3, [r3, #0]
 80184e0:	2b07      	cmp	r3, #7
 80184e2:	d002      	beq.n	80184ea <mg_tls_server_handshake+0x1e>
 80184e4:	2b08      	cmp	r3, #8
 80184e6:	d01c      	beq.n	8018522 <mg_tls_server_handshake+0x56>
 80184e8:	e02f      	b.n	801854a <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 80184ea:	6878      	ldr	r0, [r7, #4]
 80184ec:	f7fd fad4 	bl	8015a98 <mg_tls_server_recv_hello>
 80184f0:	4603      	mov	r3, r0
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	db31      	blt.n	801855a <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 80184f6:	6878      	ldr	r0, [r7, #4]
 80184f8:	f7fd fc5a 	bl	8015db0 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 80184fc:	6878      	ldr	r0, [r7, #4]
 80184fe:	f7fc fda9 	bl	8015054 <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 8018502:	6878      	ldr	r0, [r7, #4]
 8018504:	f7fd fd08 	bl	8015f18 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 8018508:	6878      	ldr	r0, [r7, #4]
 801850a:	f7fd fd27 	bl	8015f5c <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 801850e:	2100      	movs	r1, #0
 8018510:	6878      	ldr	r0, [r7, #4]
 8018512:	f7fd fe49 	bl	80161a8 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 8018516:	6878      	ldr	r0, [r7, #4]
 8018518:	f7fd ff7a 	bl	8016410 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 801851c:	68fb      	ldr	r3, [r7, #12]
 801851e:	2208      	movs	r2, #8
 8018520:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 8018522:	6878      	ldr	r0, [r7, #4]
 8018524:	f7fd ffbc 	bl	80164a0 <mg_tls_server_recv_finish>
 8018528:	4603      	mov	r3, r0
 801852a:	2b00      	cmp	r3, #0
 801852c:	db17      	blt.n	801855e <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 801852e:	6878      	ldr	r0, [r7, #4]
 8018530:	f7fc fee0 	bl	80152f4 <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	2209      	movs	r2, #9
 8018538:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801853a:	687a      	ldr	r2, [r7, #4]
 801853c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8018540:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018544:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 8018548:	e00a      	b.n	8018560 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 801854a:	68fb      	ldr	r3, [r7, #12]
 801854c:	781b      	ldrb	r3, [r3, #0]
 801854e:	461a      	mov	r2, r3
 8018550:	4905      	ldr	r1, [pc, #20]	@ (8018568 <mg_tls_server_handshake+0x9c>)
 8018552:	6878      	ldr	r0, [r7, #4]
 8018554:	f7ee f9e2 	bl	800691c <mg_error>
      break;
 8018558:	e002      	b.n	8018560 <mg_tls_server_handshake+0x94>
        return;
 801855a:	bf00      	nop
 801855c:	e000      	b.n	8018560 <mg_tls_server_handshake+0x94>
        return;
 801855e:	bf00      	nop
  }
}
 8018560:	3710      	adds	r7, #16
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}
 8018566:	bf00      	nop
 8018568:	08026798 	.word	0x08026798

0801856c <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 801856c:	b580      	push	{r7, lr}
 801856e:	b084      	sub	sp, #16
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801857a:	60fb      	str	r3, [r7, #12]
  long n;
  if (c->is_client) {
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018582:	f003 0302 	and.w	r3, r3, #2
 8018586:	b2db      	uxtb	r3, r3
 8018588:	2b00      	cmp	r3, #0
 801858a:	d003      	beq.n	8018594 <mg_tls_handshake+0x28>
    // will clear is_hs when sending last chunk
    mg_tls_client_handshake(c);
 801858c:	6878      	ldr	r0, [r7, #4]
 801858e:	f7ff fe8f 	bl	80182b0 <mg_tls_client_handshake>
 8018592:	e00a      	b.n	80185aa <mg_tls_handshake+0x3e>
  } else {
    mg_tls_server_handshake(c);
 8018594:	6878      	ldr	r0, [r7, #4]
 8018596:	f7ff ff99 	bl	80184cc <mg_tls_server_handshake>
  }
  while (tls->send.len > 0 &&
 801859a:	e006      	b.n	80185aa <mg_tls_handshake+0x3e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	3304      	adds	r3, #4
 80185a0:	68ba      	ldr	r2, [r7, #8]
 80185a2:	2100      	movs	r1, #0
 80185a4:	4618      	mov	r0, r3
 80185a6:	f7f2 fffd 	bl	800b5a4 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	68db      	ldr	r3, [r3, #12]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d00b      	beq.n	80185ca <mg_tls_handshake+0x5e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	6859      	ldr	r1, [r3, #4]
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	68db      	ldr	r3, [r3, #12]
 80185ba:	461a      	mov	r2, r3
 80185bc:	6878      	ldr	r0, [r7, #4]
 80185be:	f7f6 fa15 	bl	800e9ec <mg_io_send>
 80185c2:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 80185c4:	68bb      	ldr	r3, [r7, #8]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	dce8      	bgt.n	801859c <mg_tls_handshake+0x30>
  } // if last chunk fails to be sent, it will be sent with first app data,
    // otherwise, it needs to be flushed
}
 80185ca:	bf00      	nop
 80185cc:	3710      	adds	r7, #16
 80185ce:	46bd      	mov	sp, r7
 80185d0:	bd80      	pop	{r7, pc}
	...

080185d4 <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 80185d4:	b590      	push	{r4, r7, lr}
 80185d6:	b09b      	sub	sp, #108	@ 0x6c
 80185d8:	af02      	add	r7, sp, #8
 80185da:	f107 0410 	add.w	r4, r7, #16
 80185de:	e884 0003 	stmia.w	r4, {r0, r1}
 80185e2:	f107 0108 	add.w	r1, r7, #8
 80185e6:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 80185ea:	2300      	movs	r3, #0
 80185ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80185ee:	2300      	movs	r3, #0
 80185f0:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 80185f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80185f6:	4946      	ldr	r1, [pc, #280]	@ (8018710 <mg_parse_pem+0x13c>)
 80185f8:	4618      	mov	r0, r3
 80185fa:	f7fb fceb 	bl	8013fd4 <mg_str_s>
 80185fe:	f107 0318 	add.w	r3, r7, #24
 8018602:	9300      	str	r3, [sp, #0]
 8018604:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8018608:	cb0c      	ldmia	r3, {r2, r3}
 801860a:	f107 0110 	add.w	r1, r7, #16
 801860e:	c903      	ldmia	r1, {r0, r1}
 8018610:	f7fb fdea 	bl	80141e8 <mg_match>
 8018614:	4603      	mov	r3, r0
 8018616:	f083 0301 	eor.w	r3, r3, #1
 801861a:	b2db      	uxtb	r3, r3
 801861c:	2b00      	cmp	r3, #0
 801861e:	d00f      	beq.n	8018640 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 8018620:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 8018622:	4638      	mov	r0, r7
 8018624:	f107 0310 	add.w	r3, r7, #16
 8018628:	e893 0006 	ldmia.w	r3, {r1, r2}
 801862c:	f7fb fd1c 	bl	8014068 <mg_strdup>
 8018630:	4622      	mov	r2, r4
 8018632:	463b      	mov	r3, r7
 8018634:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018638:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 801863c:	2300      	movs	r3, #0
 801863e:	e062      	b.n	8018706 <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 8018640:	f107 0308 	add.w	r3, r7, #8
 8018644:	cb0c      	ldmia	r3, {r2, r3}
 8018646:	f107 0120 	add.w	r1, r7, #32
 801864a:	c903      	ldmia	r1, {r0, r1}
 801864c:	f7fb fd43 	bl	80140d6 <mg_strcmp>
 8018650:	4603      	mov	r3, r0
 8018652:	2b00      	cmp	r3, #0
 8018654:	d10a      	bne.n	801866c <mg_parse_pem+0x98>
 8018656:	f107 0308 	add.w	r3, r7, #8
 801865a:	cb0c      	ldmia	r3, {r2, r3}
 801865c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8018660:	c903      	ldmia	r1, {r0, r1}
 8018662:	f7fb fd38 	bl	80140d6 <mg_strcmp>
 8018666:	4603      	mov	r3, r0
 8018668:	2b00      	cmp	r3, #0
 801866a:	d002      	beq.n	8018672 <mg_parse_pem+0x9e>
    return -1;  // bad label
 801866c:	f04f 33ff 	mov.w	r3, #4294967295
 8018670:	e049      	b.n	8018706 <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 8018672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018674:	4619      	mov	r1, r3
 8018676:	2001      	movs	r0, #1
 8018678:	f00a fc78 	bl	8022f6c <calloc>
 801867c:	4603      	mov	r3, r0
 801867e:	653b      	str	r3, [r7, #80]	@ 0x50
 8018680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8018682:	2b00      	cmp	r3, #0
 8018684:	d102      	bne.n	801868c <mg_parse_pem+0xb8>
    return -1;
 8018686:	f04f 33ff 	mov.w	r3, #4294967295
 801868a:	e03c      	b.n	8018706 <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801868c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801868e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018690:	e01c      	b.n	80186cc <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 8018692:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	2b20      	cmp	r3, #32
 8018698:	d014      	beq.n	80186c4 <mg_parse_pem+0xf0>
 801869a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801869c:	781b      	ldrb	r3, [r3, #0]
 801869e:	2b0a      	cmp	r3, #10
 80186a0:	d010      	beq.n	80186c4 <mg_parse_pem+0xf0>
 80186a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	2b0d      	cmp	r3, #13
 80186a8:	d00c      	beq.n	80186c4 <mg_parse_pem+0xf0>
 80186aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80186ac:	781b      	ldrb	r3, [r3, #0]
 80186ae:	2b09      	cmp	r3, #9
 80186b0:	d008      	beq.n	80186c4 <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 80186b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80186b4:	1c5a      	adds	r2, r3, #1
 80186b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80186b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80186ba:	4413      	add	r3, r2
 80186bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80186be:	7812      	ldrb	r2, [r2, #0]
 80186c0:	701a      	strb	r2, [r3, #0]
 80186c2:	e000      	b.n	80186c6 <mg_parse_pem+0xf2>
      continue;
 80186c4:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 80186c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80186c8:	3301      	adds	r3, #1
 80186ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 80186cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80186ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80186d0:	4413      	add	r3, r2
 80186d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80186d4:	429a      	cmp	r2, r3
 80186d6:	d3dc      	bcc.n	8018692 <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 80186d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80186da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80186dc:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80186de:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80186e0:	f7ee f81c 	bl	800671c <mg_base64_decode>
 80186e4:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 80186e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d105      	bne.n	80186f8 <mg_parse_pem+0x124>
    free(s);
 80186ec:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80186ee:	f00a fc61 	bl	8022fb4 <free>
    return -1;
 80186f2:	f04f 33ff 	mov.w	r3, #4294967295
 80186f6:	e006      	b.n	8018706 <mg_parse_pem+0x132>
  }
  der->buf = s;
 80186f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80186fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80186fc:	601a      	str	r2, [r3, #0]
  der->len = m;
 80186fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018700:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018702:	605a      	str	r2, [r3, #4]
  return 0;
 8018704:	2300      	movs	r3, #0
}
 8018706:	4618      	mov	r0, r3
 8018708:	3764      	adds	r7, #100	@ 0x64
 801870a:	46bd      	mov	sp, r7
 801870c:	bd90      	pop	{r4, r7, pc}
 801870e:	bf00      	nop
 8018710:	080267b4 	.word	0x080267b4

08018714 <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 8018714:	b580      	push	{r7, lr}
 8018716:	b090      	sub	sp, #64	@ 0x40
 8018718:	af02      	add	r7, sp, #8
 801871a:	6078      	str	r0, [r7, #4]
 801871c:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 801871e:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 8018722:	2001      	movs	r0, #1
 8018724:	f00a fc22 	bl	8022f6c <calloc>
 8018728:	4603      	mov	r3, r0
 801872a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (tls == NULL) {
 801872c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801872e:	2b00      	cmp	r3, #0
 8018730:	d104      	bne.n	801873c <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 8018732:	49a5      	ldr	r1, [pc, #660]	@ (80189c8 <mg_tls_init+0x2b4>)
 8018734:	6878      	ldr	r0, [r7, #4]
 8018736:	f7ee f8f1 	bl	800691c <mg_error>
    return;
 801873a:	e141      	b.n	80189c0 <mg_tls_init+0x2ac>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018742:	f003 0302 	and.w	r3, r3, #2
 8018746:	b2db      	uxtb	r3, r3
 8018748:	2b00      	cmp	r3, #0
 801874a:	d001      	beq.n	8018750 <mg_tls_init+0x3c>
 801874c:	2200      	movs	r2, #0
 801874e:	e000      	b.n	8018752 <mg_tls_init+0x3e>
 8018750:	2207      	movs	r2, #7
  tls->state =
 8018752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018754:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 8018756:	683b      	ldr	r3, [r7, #0]
 8018758:	6a1a      	ldr	r2, [r3, #32]
 801875a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801875c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  // tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018764:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 8018768:	687a      	ldr	r2, [r7, #4]
 801876a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801876e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018772:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801877c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8018780:	b2d9      	uxtb	r1, r3
 8018782:	687a      	ldr	r2, [r7, #4]
 8018784:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8018788:	f361 1386 	bfi	r3, r1, #6, #1
 801878c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 8018790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018792:	3320      	adds	r3, #32
 8018794:	4618      	mov	r0, r3
 8018796:	f7f9 ff4f 	bl	8012638 <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 801879a:	683b      	ldr	r3, [r7, #0]
 801879c:	69db      	ldr	r3, [r3, #28]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d018      	beq.n	80187d4 <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 80187a2:	683b      	ldr	r3, [r7, #0]
 80187a4:	69db      	ldr	r3, [r3, #28]
 80187a6:	2bfc      	cmp	r3, #252	@ 0xfc
 80187a8:	d904      	bls.n	80187b4 <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 80187aa:	4988      	ldr	r1, [pc, #544]	@ (80189cc <mg_tls_init+0x2b8>)
 80187ac:	6878      	ldr	r0, [r7, #4]
 80187ae:	f7ee f8b5 	bl	800691c <mg_error>
      return;
 80187b2:	e105      	b.n	80189c0 <mg_tls_init+0x2ac>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 80187b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187b6:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	699b      	ldr	r3, [r3, #24]
 80187be:	22fd      	movs	r2, #253	@ 0xfd
 80187c0:	4619      	mov	r1, r3
 80187c2:	f00a fecf 	bl	8023564 <strncpy>
    tls->hostname[opts->name.len] = 0;
 80187c6:	683b      	ldr	r3, [r7, #0]
 80187c8:	69db      	ldr	r3, [r3, #28]
 80187ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80187cc:	4413      	add	r3, r2
 80187ce:	2200      	movs	r2, #0
 80187d0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
  }
  // server CA certificate, store serial number
  if (opts->ca.len > 0) {
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	685b      	ldr	r3, [r3, #4]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d023      	beq.n	8018824 <mg_tls_init+0x110>
    if (mg_parse_pem(opts->ca, mg_str_s("CERTIFICATE"), &tls->ca_der) < 0) {
 80187dc:	f107 0314 	add.w	r3, r7, #20
 80187e0:	497b      	ldr	r1, [pc, #492]	@ (80189d0 <mg_tls_init+0x2bc>)
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7fb fbf6 	bl	8013fd4 <mg_str_s>
 80187e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80187ea:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80187ee:	6839      	ldr	r1, [r7, #0]
 80187f0:	9300      	str	r3, [sp, #0]
 80187f2:	f107 0314 	add.w	r3, r7, #20
 80187f6:	cb0c      	ldmia	r3, {r2, r3}
 80187f8:	c903      	ldmia	r1, {r0, r1}
 80187fa:	f7ff feeb 	bl	80185d4 <mg_parse_pem>
 80187fe:	4603      	mov	r3, r0
 8018800:	2b00      	cmp	r3, #0
 8018802:	da0f      	bge.n	8018824 <mg_tls_init+0x110>
      MG_ERROR(("Failed to load certificate"));
 8018804:	4b73      	ldr	r3, [pc, #460]	@ (80189d4 <mg_tls_init+0x2c0>)
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	2b00      	cmp	r3, #0
 801880a:	f340 80d0 	ble.w	80189ae <mg_tls_init+0x29a>
 801880e:	4b72      	ldr	r3, [pc, #456]	@ (80189d8 <mg_tls_init+0x2c4>)
 8018810:	f243 02b6 	movw	r2, #12470	@ 0x30b6
 8018814:	4971      	ldr	r1, [pc, #452]	@ (80189dc <mg_tls_init+0x2c8>)
 8018816:	2001      	movs	r0, #1
 8018818:	f7f3 fd90 	bl	800c33c <mg_log_prefix>
 801881c:	4870      	ldr	r0, [pc, #448]	@ (80189e0 <mg_tls_init+0x2cc>)
 801881e:	f7f3 fddd 	bl	800c3dc <mg_log>
      return;
 8018822:	e0c4      	b.n	80189ae <mg_tls_init+0x29a>
    }
  }

  if (opts->cert.buf == NULL) {
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	689b      	ldr	r3, [r3, #8]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d10f      	bne.n	801884c <mg_tls_init+0x138>
    MG_VERBOSE(("No certificate provided"));
 801882c:	4b69      	ldr	r3, [pc, #420]	@ (80189d4 <mg_tls_init+0x2c0>)
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	2b03      	cmp	r3, #3
 8018832:	f340 80be 	ble.w	80189b2 <mg_tls_init+0x29e>
 8018836:	4b68      	ldr	r3, [pc, #416]	@ (80189d8 <mg_tls_init+0x2c4>)
 8018838:	f243 02bc 	movw	r2, #12476	@ 0x30bc
 801883c:	4967      	ldr	r1, [pc, #412]	@ (80189dc <mg_tls_init+0x2c8>)
 801883e:	2004      	movs	r0, #4
 8018840:	f7f3 fd7c 	bl	800c33c <mg_log_prefix>
 8018844:	4867      	ldr	r0, [pc, #412]	@ (80189e4 <mg_tls_init+0x2d0>)
 8018846:	f7f3 fdc9 	bl	800c3dc <mg_log>
    return;
 801884a:	e0b2      	b.n	80189b2 <mg_tls_init+0x29e>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 801884c:	f107 031c 	add.w	r3, r7, #28
 8018850:	495f      	ldr	r1, [pc, #380]	@ (80189d0 <mg_tls_init+0x2bc>)
 8018852:	4618      	mov	r0, r3
 8018854:	f7fb fbbe 	bl	8013fd4 <mg_str_s>
 8018858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801885a:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 801885e:	6839      	ldr	r1, [r7, #0]
 8018860:	9300      	str	r3, [sp, #0]
 8018862:	f107 031c 	add.w	r3, r7, #28
 8018866:	cb0c      	ldmia	r3, {r2, r3}
 8018868:	3108      	adds	r1, #8
 801886a:	c903      	ldmia	r1, {r0, r1}
 801886c:	f7ff feb2 	bl	80185d4 <mg_parse_pem>
 8018870:	4603      	mov	r3, r0
 8018872:	2b00      	cmp	r3, #0
 8018874:	da0f      	bge.n	8018896 <mg_tls_init+0x182>
    MG_ERROR(("Failed to load certificate"));
 8018876:	4b57      	ldr	r3, [pc, #348]	@ (80189d4 <mg_tls_init+0x2c0>)
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	2b00      	cmp	r3, #0
 801887c:	f340 809b 	ble.w	80189b6 <mg_tls_init+0x2a2>
 8018880:	4b55      	ldr	r3, [pc, #340]	@ (80189d8 <mg_tls_init+0x2c4>)
 8018882:	f243 02c2 	movw	r2, #12482	@ 0x30c2
 8018886:	4955      	ldr	r1, [pc, #340]	@ (80189dc <mg_tls_init+0x2c8>)
 8018888:	2001      	movs	r0, #1
 801888a:	f7f3 fd57 	bl	800c33c <mg_log_prefix>
 801888e:	4854      	ldr	r0, [pc, #336]	@ (80189e0 <mg_tls_init+0x2cc>)
 8018890:	f7f3 fda4 	bl	800c3dc <mg_log>
    return;
 8018894:	e08f      	b.n	80189b6 <mg_tls_init+0x2a2>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 8018896:	683b      	ldr	r3, [r7, #0]
 8018898:	691b      	ldr	r3, [r3, #16]
 801889a:	2b00      	cmp	r3, #0
 801889c:	d104      	bne.n	80188a8 <mg_tls_init+0x194>
    mg_error(c, "Certificate provided without a private key");
 801889e:	4952      	ldr	r1, [pc, #328]	@ (80189e8 <mg_tls_init+0x2d4>)
 80188a0:	6878      	ldr	r0, [r7, #4]
 80188a2:	f7ee f83b 	bl	800691c <mg_error>
    return;
 80188a6:	e08b      	b.n	80189c0 <mg_tls_init+0x2ac>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 80188a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80188ac:	494f      	ldr	r1, [pc, #316]	@ (80189ec <mg_tls_init+0x2d8>)
 80188ae:	4618      	mov	r0, r3
 80188b0:	f7fb fb90 	bl	8013fd4 <mg_str_s>
 80188b4:	6839      	ldr	r1, [r7, #0]
 80188b6:	f107 030c 	add.w	r3, r7, #12
 80188ba:	9300      	str	r3, [sp, #0]
 80188bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80188c0:	cb0c      	ldmia	r3, {r2, r3}
 80188c2:	3110      	adds	r1, #16
 80188c4:	c903      	ldmia	r1, {r0, r1}
 80188c6:	f7ff fe85 	bl	80185d4 <mg_parse_pem>
 80188ca:	4603      	mov	r3, r0
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d150      	bne.n	8018972 <mg_tls_init+0x25e>
    if (key.len < 39) {
 80188d0:	693b      	ldr	r3, [r7, #16]
 80188d2:	2b26      	cmp	r3, #38	@ 0x26
 80188d4:	d80e      	bhi.n	80188f4 <mg_tls_init+0x1e0>
      MG_ERROR(("EC private key too short"));
 80188d6:	4b3f      	ldr	r3, [pc, #252]	@ (80189d4 <mg_tls_init+0x2c0>)
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	dd6d      	ble.n	80189ba <mg_tls_init+0x2a6>
 80188de:	4b3e      	ldr	r3, [pc, #248]	@ (80189d8 <mg_tls_init+0x2c4>)
 80188e0:	f243 02ce 	movw	r2, #12494	@ 0x30ce
 80188e4:	493d      	ldr	r1, [pc, #244]	@ (80189dc <mg_tls_init+0x2c8>)
 80188e6:	2001      	movs	r0, #1
 80188e8:	f7f3 fd28 	bl	800c33c <mg_log_prefix>
 80188ec:	4840      	ldr	r0, [pc, #256]	@ (80189f0 <mg_tls_init+0x2dc>)
 80188ee:	f7f3 fd75 	bl	800c3dc <mg_log>
      return;
 80188f2:	e062      	b.n	80189ba <mg_tls_init+0x2a6>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	781b      	ldrb	r3, [r3, #0]
 80188f8:	2b30      	cmp	r3, #48	@ 0x30
 80188fa:	d105      	bne.n	8018908 <mg_tls_init+0x1f4>
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	3301      	adds	r3, #1
 8018900:	781b      	ldrb	r3, [r3, #0]
 8018902:	b25b      	sxtb	r3, r3
 8018904:	2b00      	cmp	r3, #0
 8018906:	da0e      	bge.n	8018926 <mg_tls_init+0x212>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 8018908:	4b32      	ldr	r3, [pc, #200]	@ (80189d4 <mg_tls_init+0x2c0>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	2b00      	cmp	r3, #0
 801890e:	dd56      	ble.n	80189be <mg_tls_init+0x2aa>
 8018910:	4b31      	ldr	r3, [pc, #196]	@ (80189d8 <mg_tls_init+0x2c4>)
 8018912:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8018916:	4931      	ldr	r1, [pc, #196]	@ (80189dc <mg_tls_init+0x2c8>)
 8018918:	2001      	movs	r0, #1
 801891a:	f7f3 fd0f 	bl	800c33c <mg_log_prefix>
 801891e:	4835      	ldr	r0, [pc, #212]	@ (80189f4 <mg_tls_init+0x2e0>)
 8018920:	f7f3 fd5c 	bl	800c3dc <mg_log>
      return;
 8018924:	e04b      	b.n	80189be <mg_tls_init+0x2aa>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	3302      	adds	r3, #2
 801892a:	2205      	movs	r2, #5
 801892c:	4932      	ldr	r1, [pc, #200]	@ (80189f8 <mg_tls_init+0x2e4>)
 801892e:	4618      	mov	r0, r3
 8018930:	f00a fdc7 	bl	80234c2 <memcmp>
 8018934:	4603      	mov	r3, r0
 8018936:	2b00      	cmp	r3, #0
 8018938:	d00d      	beq.n	8018956 <mg_tls_init+0x242>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 801893a:	4b26      	ldr	r3, [pc, #152]	@ (80189d4 <mg_tls_init+0x2c0>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	2b00      	cmp	r3, #0
 8018940:	dd09      	ble.n	8018956 <mg_tls_init+0x242>
 8018942:	4b25      	ldr	r3, [pc, #148]	@ (80189d8 <mg_tls_init+0x2c4>)
 8018944:	f243 02d8 	movw	r2, #12504	@ 0x30d8
 8018948:	4924      	ldr	r1, [pc, #144]	@ (80189dc <mg_tls_init+0x2c8>)
 801894a:	2001      	movs	r0, #1
 801894c:	f7f3 fcf6 	bl	800c33c <mg_log_prefix>
 8018950:	482a      	ldr	r0, [pc, #168]	@ (80189fc <mg_tls_init+0x2e8>)
 8018952:	f7f3 fd43 	bl	800c3dc <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 8018956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018958:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 801895c:	68fb      	ldr	r3, [r7, #12]
 801895e:	3307      	adds	r3, #7
 8018960:	2220      	movs	r2, #32
 8018962:	4619      	mov	r1, r3
 8018964:	f00a fdbd 	bl	80234e2 <memmove>
    free((void *) key.buf);
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	4618      	mov	r0, r3
 801896c:	f00a fb22 	bl	8022fb4 <free>
 8018970:	e026      	b.n	80189c0 <mg_tls_init+0x2ac>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 8018972:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018976:	4922      	ldr	r1, [pc, #136]	@ (8018a00 <mg_tls_init+0x2ec>)
 8018978:	4618      	mov	r0, r3
 801897a:	f7fb fb2b 	bl	8013fd4 <mg_str_s>
 801897e:	6839      	ldr	r1, [r7, #0]
 8018980:	f107 030c 	add.w	r3, r7, #12
 8018984:	9300      	str	r3, [sp, #0]
 8018986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801898a:	cb0c      	ldmia	r3, {r2, r3}
 801898c:	3110      	adds	r1, #16
 801898e:	c903      	ldmia	r1, {r0, r1}
 8018990:	f7ff fe20 	bl	80185d4 <mg_parse_pem>
 8018994:	4603      	mov	r3, r0
 8018996:	2b00      	cmp	r3, #0
 8018998:	d104      	bne.n	80189a4 <mg_tls_init+0x290>
    mg_error(c, "PKCS8 private key format is not supported");
 801899a:	491a      	ldr	r1, [pc, #104]	@ (8018a04 <mg_tls_init+0x2f0>)
 801899c:	6878      	ldr	r0, [r7, #4]
 801899e:	f7ed ffbd 	bl	800691c <mg_error>
 80189a2:	e00d      	b.n	80189c0 <mg_tls_init+0x2ac>
  } else {
    mg_error(c, "Expected EC PRIVATE KEY or PRIVATE KEY");
 80189a4:	4918      	ldr	r1, [pc, #96]	@ (8018a08 <mg_tls_init+0x2f4>)
 80189a6:	6878      	ldr	r0, [r7, #4]
 80189a8:	f7ed ffb8 	bl	800691c <mg_error>
 80189ac:	e008      	b.n	80189c0 <mg_tls_init+0x2ac>
      return;
 80189ae:	bf00      	nop
 80189b0:	e006      	b.n	80189c0 <mg_tls_init+0x2ac>
    return;
 80189b2:	bf00      	nop
 80189b4:	e004      	b.n	80189c0 <mg_tls_init+0x2ac>
    return;
 80189b6:	bf00      	nop
 80189b8:	e002      	b.n	80189c0 <mg_tls_init+0x2ac>
      return;
 80189ba:	bf00      	nop
 80189bc:	e000      	b.n	80189c0 <mg_tls_init+0x2ac>
      return;
 80189be:	bf00      	nop
  }
}
 80189c0:	3738      	adds	r7, #56	@ 0x38
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd80      	pop	{r7, pc}
 80189c6:	bf00      	nop
 80189c8:	080267d8 	.word	0x080267d8
 80189cc:	080267e0 	.word	0x080267e0
 80189d0:	080267f4 	.word	0x080267f4
 80189d4:	24000258 	.word	0x24000258
 80189d8:	08028050 	.word	0x08028050
 80189dc:	080241e8 	.word	0x080241e8
 80189e0:	08026800 	.word	0x08026800
 80189e4:	0802681c 	.word	0x0802681c
 80189e8:	08026834 	.word	0x08026834
 80189ec:	08026860 	.word	0x08026860
 80189f0:	08026870 	.word	0x08026870
 80189f4:	0802688c 	.word	0x0802688c
 80189f8:	080268b0 	.word	0x080268b0
 80189fc:	080268b8 	.word	0x080268b8
 8018a00:	080268d8 	.word	0x080268d8
 8018a04:	080268e4 	.word	0x080268e4
 8018a08:	08026910 	.word	0x08026910

08018a0c <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b084      	sub	sp, #16
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018a1a:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d010      	beq.n	8018a44 <mg_tls_free+0x38>
    mg_iobuf_free(&tls->send);
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	3304      	adds	r3, #4
 8018a26:	4618      	mov	r0, r3
 8018a28:	f7f2 fe07 	bl	800b63a <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8018a32:	4618      	mov	r0, r3
 8018a34:	f00a fabe 	bl	8022fb4 <free>
    free((void *) tls->ca_der.buf);
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f00a fab8 	bl	8022fb4 <free>
  }
  free(c->tls);
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f00a fab2 	bl	8022fb4 <free>
  c->tls = NULL;
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	2200      	movs	r2, #0
 8018a54:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 8018a58:	bf00      	nop
 8018a5a:	3710      	adds	r7, #16
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}

08018a60 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8018a60:	b590      	push	{r4, r7, lr}
 8018a62:	b08d      	sub	sp, #52	@ 0x34
 8018a64:	af04      	add	r7, sp, #16
 8018a66:	60f8      	str	r0, [r7, #12]
 8018a68:	60b9      	str	r1, [r7, #8]
 8018a6a:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018a72:	61bb      	str	r3, [r7, #24]
  long n = MG_IO_WAIT;
 8018a74:	f06f 0301 	mvn.w	r3, #1
 8018a78:	61fb      	str	r3, [r7, #28]
  bool was_throttled = c->is_tls_throttled;  // see #3074
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8018a80:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8018a84:	b2db      	uxtb	r3, r3
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	bf14      	ite	ne
 8018a8a:	2301      	movne	r3, #1
 8018a8c:	2300      	moveq	r3, #0
 8018a8e:	75fb      	strb	r3, [r7, #23]
  if (!was_throttled) {                      // encrypt new data
 8018a90:	7dfb      	ldrb	r3, [r7, #23]
 8018a92:	f083 0301 	eor.w	r3, r3, #1
 8018a96:	b2db      	uxtb	r3, r3
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d01b      	beq.n	8018ad4 <mg_tls_send+0x74>
    if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018aa2:	d902      	bls.n	8018aaa <mg_tls_send+0x4a>
 8018aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018aa8:	607b      	str	r3, [r7, #4]
    if (len > 16384) len = 16384;
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018ab0:	d902      	bls.n	8018ab8 <mg_tls_send+0x58>
 8018ab2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018ab6:	607b      	str	r3, [r7, #4]
    mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 8018ab8:	2317      	movs	r3, #23
 8018aba:	687a      	ldr	r2, [r7, #4]
 8018abc:	68b9      	ldr	r1, [r7, #8]
 8018abe:	68f8      	ldr	r0, [r7, #12]
 8018ac0:	f7fc fd30 	bl	8015524 <mg_tls_encrypt>
  }  // else, resend outstanding encrypted data in tls->send
  while (tls->send.len > 0 &&
 8018ac4:	e006      	b.n	8018ad4 <mg_tls_send+0x74>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 8018ac6:	69bb      	ldr	r3, [r7, #24]
 8018ac8:	3304      	adds	r3, #4
 8018aca:	69fa      	ldr	r2, [r7, #28]
 8018acc:	2100      	movs	r1, #0
 8018ace:	4618      	mov	r0, r3
 8018ad0:	f7f2 fd68 	bl	800b5a4 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 8018ad4:	69bb      	ldr	r3, [r7, #24]
 8018ad6:	68db      	ldr	r3, [r3, #12]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d00b      	beq.n	8018af4 <mg_tls_send+0x94>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 8018adc:	69bb      	ldr	r3, [r7, #24]
 8018ade:	6859      	ldr	r1, [r3, #4]
 8018ae0:	69bb      	ldr	r3, [r7, #24]
 8018ae2:	68db      	ldr	r3, [r3, #12]
 8018ae4:	461a      	mov	r2, r3
 8018ae6:	68f8      	ldr	r0, [r7, #12]
 8018ae8:	f7f5 ff80 	bl	800e9ec <mg_io_send>
 8018aec:	61f8      	str	r0, [r7, #28]
  while (tls->send.len > 0 &&
 8018aee:	69fb      	ldr	r3, [r7, #28]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	dce8      	bgt.n	8018ac6 <mg_tls_send+0x66>
  } // if last chunk fails to be sent, it needs to be flushed
  c->is_tls_throttled = (tls->send.len > 0 && n == MG_IO_WAIT);
 8018af4:	69bb      	ldr	r3, [r7, #24]
 8018af6:	68db      	ldr	r3, [r3, #12]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d005      	beq.n	8018b08 <mg_tls_send+0xa8>
 8018afc:	69fb      	ldr	r3, [r7, #28]
 8018afe:	f113 0f02 	cmn.w	r3, #2
 8018b02:	d101      	bne.n	8018b08 <mg_tls_send+0xa8>
 8018b04:	2301      	movs	r3, #1
 8018b06:	e000      	b.n	8018b0a <mg_tls_send+0xaa>
 8018b08:	2300      	movs	r3, #0
 8018b0a:	f003 0301 	and.w	r3, r3, #1
 8018b0e:	b2d9      	uxtb	r1, r3
 8018b10:	68fa      	ldr	r2, [r7, #12]
 8018b12:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018b16:	f361 13c7 	bfi	r3, r1, #7, #1
 8018b1a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  MG_VERBOSE(("%lu %ld %ld %ld %c %c", c->id, (long) len, (long) tls->send.len,
 8018b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8018b98 <mg_tls_send+0x138>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	2b03      	cmp	r3, #3
 8018b24:	dd26      	ble.n	8018b74 <mg_tls_send+0x114>
 8018b26:	4b1d      	ldr	r3, [pc, #116]	@ (8018b9c <mg_tls_send+0x13c>)
 8018b28:	f243 02fc 	movw	r2, #12540	@ 0x30fc
 8018b2c:	491c      	ldr	r1, [pc, #112]	@ (8018ba0 <mg_tls_send+0x140>)
 8018b2e:	2004      	movs	r0, #4
 8018b30:	f7f3 fc04 	bl	800c33c <mg_log_prefix>
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018b38:	6878      	ldr	r0, [r7, #4]
 8018b3a:	69bb      	ldr	r3, [r7, #24]
 8018b3c:	68db      	ldr	r3, [r3, #12]
 8018b3e:	461c      	mov	r4, r3
 8018b40:	7dfb      	ldrb	r3, [r7, #23]
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	d001      	beq.n	8018b4a <mg_tls_send+0xea>
 8018b46:	2354      	movs	r3, #84	@ 0x54
 8018b48:	e000      	b.n	8018b4c <mg_tls_send+0xec>
 8018b4a:	2374      	movs	r3, #116	@ 0x74
 8018b4c:	68fa      	ldr	r2, [r7, #12]
 8018b4e:	f892 20ad 	ldrb.w	r2, [r2, #173]	@ 0xad
 8018b52:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8018b56:	b2d2      	uxtb	r2, r2
 8018b58:	2a00      	cmp	r2, #0
 8018b5a:	d001      	beq.n	8018b60 <mg_tls_send+0x100>
 8018b5c:	2254      	movs	r2, #84	@ 0x54
 8018b5e:	e000      	b.n	8018b62 <mg_tls_send+0x102>
 8018b60:	2274      	movs	r2, #116	@ 0x74
 8018b62:	9202      	str	r2, [sp, #8]
 8018b64:	9301      	str	r3, [sp, #4]
 8018b66:	69fb      	ldr	r3, [r7, #28]
 8018b68:	9300      	str	r3, [sp, #0]
 8018b6a:	4623      	mov	r3, r4
 8018b6c:	4602      	mov	r2, r0
 8018b6e:	480d      	ldr	r0, [pc, #52]	@ (8018ba4 <mg_tls_send+0x144>)
 8018b70:	f7f3 fc34 	bl	800c3dc <mg_log>
              n, was_throttled ? 'T' : 't', c->is_tls_throttled ? 'T' : 't'));
  if (n == MG_IO_ERR) return MG_IO_ERR;
 8018b74:	69fb      	ldr	r3, [r7, #28]
 8018b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b7a:	d102      	bne.n	8018b82 <mg_tls_send+0x122>
 8018b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b80:	e006      	b.n	8018b90 <mg_tls_send+0x130>
  if (was_throttled) return MG_IO_WAIT;  // sent throttled data instead
 8018b82:	7dfb      	ldrb	r3, [r7, #23]
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d002      	beq.n	8018b8e <mg_tls_send+0x12e>
 8018b88:	f06f 0301 	mvn.w	r3, #1
 8018b8c:	e000      	b.n	8018b90 <mg_tls_send+0x130>
  return (long) len;  // return len even when throttled, already encripted that
 8018b8e:	687b      	ldr	r3, [r7, #4]
}
 8018b90:	4618      	mov	r0, r3
 8018b92:	3724      	adds	r7, #36	@ 0x24
 8018b94:	46bd      	mov	sp, r7
 8018b96:	bd90      	pop	{r4, r7, pc}
 8018b98:	24000258 	.word	0x24000258
 8018b9c:	0802805c 	.word	0x0802805c
 8018ba0:	080241e8 	.word	0x080241e8
 8018ba4:	08026938 	.word	0x08026938

08018ba8 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b088      	sub	sp, #32
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	60f8      	str	r0, [r7, #12]
 8018bb0:	60b9      	str	r1, [r7, #8]
 8018bb2:	607a      	str	r2, [r7, #4]
  int r = 0;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018bbe:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 8018bc0:	68f8      	ldr	r0, [r7, #12]
 8018bc2:	f7fc fdab 	bl	801571c <mg_tls_recv_record>
 8018bc6:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 8018bc8:	69fb      	ldr	r3, [r7, #28]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	da01      	bge.n	8018bd2 <mg_tls_recv+0x2a>
    return r;
 8018bce:	69fb      	ldr	r3, [r7, #28]
 8018bd0:	e03a      	b.n	8018c48 <mg_tls_recv+0xa0>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8018bd6:	69bb      	ldr	r3, [r7, #24]
 8018bd8:	695b      	ldr	r3, [r3, #20]
 8018bda:	4413      	add	r3, r2
 8018bdc:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 8018bde:	69bb      	ldr	r3, [r7, #24]
 8018be0:	7f1b      	ldrb	r3, [r3, #28]
 8018be2:	2b17      	cmp	r3, #23
 8018be4:	d008      	beq.n	8018bf8 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 8018be6:	69bb      	ldr	r3, [r7, #24]
 8018be8:	2200      	movs	r2, #0
 8018bea:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 8018bec:	68f8      	ldr	r0, [r7, #12]
 8018bee:	f7fc f926 	bl	8014e3e <mg_tls_drop_record>
    return MG_IO_WAIT;
 8018bf2:	f06f 0301 	mvn.w	r3, #1
 8018bf6:	e027      	b.n	8018c48 <mg_tls_recv+0xa0>
  }
  if (buf == NULL || len == 0) return 0L;
 8018bf8:	68bb      	ldr	r3, [r7, #8]
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d002      	beq.n	8018c04 <mg_tls_recv+0x5c>
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d101      	bne.n	8018c08 <mg_tls_recv+0x60>
 8018c04:	2300      	movs	r3, #0
 8018c06:	e01f      	b.n	8018c48 <mg_tls_recv+0xa0>
  minlen = len < tls->recv_len ? len : tls->recv_len;
 8018c08:	69bb      	ldr	r3, [r7, #24]
 8018c0a:	699b      	ldr	r3, [r3, #24]
 8018c0c:	687a      	ldr	r2, [r7, #4]
 8018c0e:	4293      	cmp	r3, r2
 8018c10:	bf28      	it	cs
 8018c12:	4613      	movcs	r3, r2
 8018c14:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 8018c16:	693a      	ldr	r2, [r7, #16]
 8018c18:	6979      	ldr	r1, [r7, #20]
 8018c1a:	68b8      	ldr	r0, [r7, #8]
 8018c1c:	f00a fc61 	bl	80234e2 <memmove>
  tls->recv_offset += minlen;
 8018c20:	69bb      	ldr	r3, [r7, #24]
 8018c22:	695a      	ldr	r2, [r3, #20]
 8018c24:	693b      	ldr	r3, [r7, #16]
 8018c26:	441a      	add	r2, r3
 8018c28:	69bb      	ldr	r3, [r7, #24]
 8018c2a:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 8018c2c:	69bb      	ldr	r3, [r7, #24]
 8018c2e:	699a      	ldr	r2, [r3, #24]
 8018c30:	693b      	ldr	r3, [r7, #16]
 8018c32:	1ad2      	subs	r2, r2, r3
 8018c34:	69bb      	ldr	r3, [r7, #24]
 8018c36:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8018c38:	69bb      	ldr	r3, [r7, #24]
 8018c3a:	699b      	ldr	r3, [r3, #24]
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d102      	bne.n	8018c46 <mg_tls_recv+0x9e>
    mg_tls_drop_record(c);
 8018c40:	68f8      	ldr	r0, [r7, #12]
 8018c42:	f7fc f8fc 	bl	8014e3e <mg_tls_drop_record>
  }
  return (long) minlen;
 8018c46:	693b      	ldr	r3, [r7, #16]
}
 8018c48:	4618      	mov	r0, r3
 8018c4a:	3720      	adds	r7, #32
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	bd80      	pop	{r7, pc}

08018c50 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 8018c50:	b480      	push	{r7}
 8018c52:	b085      	sub	sp, #20
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018c5e:	60fb      	str	r3, [r7, #12]
  return tls != NULL ? tls->recv_len : 0;
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d002      	beq.n	8018c6c <mg_tls_pending+0x1c>
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	699b      	ldr	r3, [r3, #24]
 8018c6a:	e000      	b.n	8018c6e <mg_tls_pending+0x1e>
 8018c6c:	2300      	movs	r3, #0
}
 8018c6e:	4618      	mov	r0, r3
 8018c70:	3714      	adds	r7, #20
 8018c72:	46bd      	mov	sp, r7
 8018c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c78:	4770      	bx	lr

08018c7a <mg_tls_flush>:

void mg_tls_flush(struct mg_connection *c) {
 8018c7a:	b580      	push	{r7, lr}
 8018c7c:	b084      	sub	sp, #16
 8018c7e:	af00      	add	r7, sp, #0
 8018c80:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018c88:	60fb      	str	r3, [r7, #12]
  long n;
  while (tls->send.len > 0 &&
 8018c8a:	e006      	b.n	8018c9a <mg_tls_flush+0x20>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	3304      	adds	r3, #4
 8018c90:	68ba      	ldr	r2, [r7, #8]
 8018c92:	2100      	movs	r1, #0
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7f2 fc85 	bl	800b5a4 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	68db      	ldr	r3, [r3, #12]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d00b      	beq.n	8018cba <mg_tls_flush+0x40>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	6859      	ldr	r1, [r3, #4]
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	68db      	ldr	r3, [r3, #12]
 8018caa:	461a      	mov	r2, r3
 8018cac:	6878      	ldr	r0, [r7, #4]
 8018cae:	f7f5 fe9d 	bl	800e9ec <mg_io_send>
 8018cb2:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 8018cb4:	68bb      	ldr	r3, [r7, #8]
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	dce8      	bgt.n	8018c8c <mg_tls_flush+0x12>
  }
}
 8018cba:	bf00      	nop
 8018cbc:	3710      	adds	r7, #16
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}

08018cc2 <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8018cc2:	b480      	push	{r7}
 8018cc4:	b083      	sub	sp, #12
 8018cc6:	af00      	add	r7, sp, #0
 8018cc8:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 8018cca:	bf00      	nop
 8018ccc:	370c      	adds	r7, #12
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd4:	4770      	bx	lr
	...

08018cd8 <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 8018cd8:	b480      	push	{r7}
 8018cda:	b085      	sub	sp, #20
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	60f8      	str	r0, [r7, #12]
 8018ce0:	60b9      	str	r1, [r7, #8]
 8018ce2:	607a      	str	r2, [r7, #4]
 8018ce4:	603b      	str	r3, [r7, #0]
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
#endif
  state[0] = 0x61707865;
 8018ce6:	68fb      	ldr	r3, [r7, #12]
 8018ce8:	4a2b      	ldr	r2, [pc, #172]	@ (8018d98 <initialize_state+0xc0>)
 8018cea:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	3304      	adds	r3, #4
 8018cf0:	4a2a      	ldr	r2, [pc, #168]	@ (8018d9c <initialize_state+0xc4>)
 8018cf2:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	3308      	adds	r3, #8
 8018cf8:	4a29      	ldr	r2, [pc, #164]	@ (8018da0 <initialize_state+0xc8>)
 8018cfa:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	330c      	adds	r3, #12
 8018d00:	4a28      	ldr	r2, [pc, #160]	@ (8018da4 <initialize_state+0xcc>)
 8018d02:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	3310      	adds	r3, #16
 8018d08:	68ba      	ldr	r2, [r7, #8]
 8018d0a:	6812      	ldr	r2, [r2, #0]
 8018d0c:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 8018d0e:	68fb      	ldr	r3, [r7, #12]
 8018d10:	3314      	adds	r3, #20
 8018d12:	68ba      	ldr	r2, [r7, #8]
 8018d14:	3204      	adds	r2, #4
 8018d16:	6812      	ldr	r2, [r2, #0]
 8018d18:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 8018d1a:	68fb      	ldr	r3, [r7, #12]
 8018d1c:	3318      	adds	r3, #24
 8018d1e:	68ba      	ldr	r2, [r7, #8]
 8018d20:	3208      	adds	r2, #8
 8018d22:	6812      	ldr	r2, [r2, #0]
 8018d24:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	331c      	adds	r3, #28
 8018d2a:	68ba      	ldr	r2, [r7, #8]
 8018d2c:	320c      	adds	r2, #12
 8018d2e:	6812      	ldr	r2, [r2, #0]
 8018d30:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 8018d32:	68fb      	ldr	r3, [r7, #12]
 8018d34:	3320      	adds	r3, #32
 8018d36:	68ba      	ldr	r2, [r7, #8]
 8018d38:	3210      	adds	r2, #16
 8018d3a:	6812      	ldr	r2, [r2, #0]
 8018d3c:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	3324      	adds	r3, #36	@ 0x24
 8018d42:	68ba      	ldr	r2, [r7, #8]
 8018d44:	3214      	adds	r2, #20
 8018d46:	6812      	ldr	r2, [r2, #0]
 8018d48:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	3328      	adds	r3, #40	@ 0x28
 8018d4e:	68ba      	ldr	r2, [r7, #8]
 8018d50:	3218      	adds	r2, #24
 8018d52:	6812      	ldr	r2, [r2, #0]
 8018d54:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	332c      	adds	r3, #44	@ 0x2c
 8018d5a:	68ba      	ldr	r2, [r7, #8]
 8018d5c:	321c      	adds	r2, #28
 8018d5e:	6812      	ldr	r2, [r2, #0]
 8018d60:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	3330      	adds	r3, #48	@ 0x30
 8018d66:	683a      	ldr	r2, [r7, #0]
 8018d68:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	3334      	adds	r3, #52	@ 0x34
 8018d6e:	687a      	ldr	r2, [r7, #4]
 8018d70:	6812      	ldr	r2, [r2, #0]
 8018d72:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	3338      	adds	r3, #56	@ 0x38
 8018d78:	687a      	ldr	r2, [r7, #4]
 8018d7a:	3204      	adds	r2, #4
 8018d7c:	6812      	ldr	r2, [r2, #0]
 8018d7e:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	333c      	adds	r3, #60	@ 0x3c
 8018d84:	687a      	ldr	r2, [r7, #4]
 8018d86:	3208      	adds	r2, #8
 8018d88:	6812      	ldr	r2, [r2, #0]
 8018d8a:	601a      	str	r2, [r3, #0]
}
 8018d8c:	bf00      	nop
 8018d8e:	3714      	adds	r7, #20
 8018d90:	46bd      	mov	sp, r7
 8018d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d96:	4770      	bx	lr
 8018d98:	61707865 	.word	0x61707865
 8018d9c:	3320646e 	.word	0x3320646e
 8018da0:	79622d32 	.word	0x79622d32
 8018da4:	6b206574 	.word	0x6b206574

08018da8 <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 8018da8:	b480      	push	{r7}
 8018daa:	b095      	sub	sp, #84	@ 0x54
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
 8018db0:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	3304      	adds	r3, #4
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	3308      	adds	r3, #8
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	643b      	str	r3, [r7, #64]	@ 0x40
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	330c      	adds	r3, #12
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	3310      	adds	r3, #16
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	3314      	adds	r3, #20
 8018ddc:	681b      	ldr	r3, [r3, #0]
 8018dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	3318      	adds	r3, #24
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	331c      	adds	r3, #28
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	3320      	adds	r3, #32
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	3324      	adds	r3, #36	@ 0x24
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	3328      	adds	r3, #40	@ 0x28
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	623b      	str	r3, [r7, #32]
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	332c      	adds	r3, #44	@ 0x2c
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	61fb      	str	r3, [r7, #28]
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	3330      	adds	r3, #48	@ 0x30
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	61bb      	str	r3, [r7, #24]
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	3334      	adds	r3, #52	@ 0x34
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	617b      	str	r3, [r7, #20]
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	3338      	adds	r3, #56	@ 0x38
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	613b      	str	r3, [r7, #16]
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	333c      	adds	r3, #60	@ 0x3c
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 8018e30:	2300      	movs	r3, #0
 8018e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018e34:	e182      	b.n	801913c <core_block+0x394>
    __Q(0, 4, 8, 12);
 8018e36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e3a:	4413      	add	r3, r2
 8018e3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e3e:	69ba      	ldr	r2, [r7, #24]
 8018e40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018e42:	4053      	eors	r3, r2
 8018e44:	61bb      	str	r3, [r7, #24]
 8018e46:	69bb      	ldr	r3, [r7, #24]
 8018e48:	ea4f 4333 	mov.w	r3, r3, ror #16
 8018e4c:	61bb      	str	r3, [r7, #24]
 8018e4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018e50:	69bb      	ldr	r3, [r7, #24]
 8018e52:	4413      	add	r3, r2
 8018e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e5a:	4053      	eors	r3, r2
 8018e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e60:	ea4f 5333 	mov.w	r3, r3, ror #20
 8018e64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e6a:	4413      	add	r3, r2
 8018e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018e6e:	69ba      	ldr	r2, [r7, #24]
 8018e70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018e72:	4053      	eors	r3, r2
 8018e74:	61bb      	str	r3, [r7, #24]
 8018e76:	69bb      	ldr	r3, [r7, #24]
 8018e78:	ea4f 6333 	mov.w	r3, r3, ror #24
 8018e7c:	61bb      	str	r3, [r7, #24]
 8018e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018e80:	69bb      	ldr	r3, [r7, #24]
 8018e82:	4413      	add	r3, r2
 8018e84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018e86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018e8a:	4053      	eors	r3, r2
 8018e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018e90:	ea4f 6373 	mov.w	r3, r3, ror #25
 8018e94:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 8018e96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018e9a:	4413      	add	r3, r2
 8018e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8018e9e:	697a      	ldr	r2, [r7, #20]
 8018ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ea2:	4053      	eors	r3, r2
 8018ea4:	617b      	str	r3, [r7, #20]
 8018ea6:	697b      	ldr	r3, [r7, #20]
 8018ea8:	ea4f 4333 	mov.w	r3, r3, ror #16
 8018eac:	617b      	str	r3, [r7, #20]
 8018eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018eb0:	697b      	ldr	r3, [r7, #20]
 8018eb2:	4413      	add	r3, r2
 8018eb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8018eb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eba:	4053      	eors	r3, r2
 8018ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ec0:	ea4f 5333 	mov.w	r3, r3, ror #20
 8018ec4:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ec6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018eca:	4413      	add	r3, r2
 8018ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8018ece:	697a      	ldr	r2, [r7, #20]
 8018ed0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ed2:	4053      	eors	r3, r2
 8018ed4:	617b      	str	r3, [r7, #20]
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	ea4f 6333 	mov.w	r3, r3, ror #24
 8018edc:	617b      	str	r3, [r7, #20]
 8018ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018ee0:	697b      	ldr	r3, [r7, #20]
 8018ee2:	4413      	add	r3, r2
 8018ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8018ee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018eea:	4053      	eors	r3, r2
 8018eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8018eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018ef0:	ea4f 6373 	mov.w	r3, r3, ror #25
 8018ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 8018ef6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018efa:	4413      	add	r3, r2
 8018efc:	643b      	str	r3, [r7, #64]	@ 0x40
 8018efe:	693a      	ldr	r2, [r7, #16]
 8018f00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f02:	4053      	eors	r3, r2
 8018f04:	613b      	str	r3, [r7, #16]
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	ea4f 4333 	mov.w	r3, r3, ror #16
 8018f0c:	613b      	str	r3, [r7, #16]
 8018f0e:	6a3a      	ldr	r2, [r7, #32]
 8018f10:	693b      	ldr	r3, [r7, #16]
 8018f12:	4413      	add	r3, r2
 8018f14:	623b      	str	r3, [r7, #32]
 8018f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018f18:	6a3b      	ldr	r3, [r7, #32]
 8018f1a:	4053      	eors	r3, r2
 8018f1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8018f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f20:	ea4f 5333 	mov.w	r3, r3, ror #20
 8018f24:	633b      	str	r3, [r7, #48]	@ 0x30
 8018f26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f2a:	4413      	add	r3, r2
 8018f2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8018f2e:	693a      	ldr	r2, [r7, #16]
 8018f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018f32:	4053      	eors	r3, r2
 8018f34:	613b      	str	r3, [r7, #16]
 8018f36:	693b      	ldr	r3, [r7, #16]
 8018f38:	ea4f 6333 	mov.w	r3, r3, ror #24
 8018f3c:	613b      	str	r3, [r7, #16]
 8018f3e:	6a3a      	ldr	r2, [r7, #32]
 8018f40:	693b      	ldr	r3, [r7, #16]
 8018f42:	4413      	add	r3, r2
 8018f44:	623b      	str	r3, [r7, #32]
 8018f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018f48:	6a3b      	ldr	r3, [r7, #32]
 8018f4a:	4053      	eors	r3, r2
 8018f4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8018f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018f50:	ea4f 6373 	mov.w	r3, r3, ror #25
 8018f54:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 8018f56:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f5a:	4413      	add	r3, r2
 8018f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f5e:	68fa      	ldr	r2, [r7, #12]
 8018f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f62:	4053      	eors	r3, r2
 8018f64:	60fb      	str	r3, [r7, #12]
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	ea4f 4333 	mov.w	r3, r3, ror #16
 8018f6c:	60fb      	str	r3, [r7, #12]
 8018f6e:	69fa      	ldr	r2, [r7, #28]
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	4413      	add	r3, r2
 8018f74:	61fb      	str	r3, [r7, #28]
 8018f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018f78:	69fb      	ldr	r3, [r7, #28]
 8018f7a:	4053      	eors	r3, r2
 8018f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f80:	ea4f 5333 	mov.w	r3, r3, ror #20
 8018f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018f86:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018f8a:	4413      	add	r3, r2
 8018f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018f8e:	68fa      	ldr	r2, [r7, #12]
 8018f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018f92:	4053      	eors	r3, r2
 8018f94:	60fb      	str	r3, [r7, #12]
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	ea4f 6333 	mov.w	r3, r3, ror #24
 8018f9c:	60fb      	str	r3, [r7, #12]
 8018f9e:	69fa      	ldr	r2, [r7, #28]
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	4413      	add	r3, r2
 8018fa4:	61fb      	str	r3, [r7, #28]
 8018fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018fa8:	69fb      	ldr	r3, [r7, #28]
 8018faa:	4053      	eors	r3, r2
 8018fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018fb0:	ea4f 6373 	mov.w	r3, r3, ror #25
 8018fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 8018fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fba:	4413      	add	r3, r2
 8018fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018fbe:	68fa      	ldr	r2, [r7, #12]
 8018fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018fc2:	4053      	eors	r3, r2
 8018fc4:	60fb      	str	r3, [r7, #12]
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	ea4f 4333 	mov.w	r3, r3, ror #16
 8018fcc:	60fb      	str	r3, [r7, #12]
 8018fce:	6a3a      	ldr	r2, [r7, #32]
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	4413      	add	r3, r2
 8018fd4:	623b      	str	r3, [r7, #32]
 8018fd6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018fd8:	6a3b      	ldr	r3, [r7, #32]
 8018fda:	4053      	eors	r3, r2
 8018fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8018fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fe0:	ea4f 5333 	mov.w	r3, r3, ror #20
 8018fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8018fe6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fea:	4413      	add	r3, r2
 8018fec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018fee:	68fa      	ldr	r2, [r7, #12]
 8018ff0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ff2:	4053      	eors	r3, r2
 8018ff4:	60fb      	str	r3, [r7, #12]
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	ea4f 6333 	mov.w	r3, r3, ror #24
 8018ffc:	60fb      	str	r3, [r7, #12]
 8018ffe:	6a3a      	ldr	r2, [r7, #32]
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	4413      	add	r3, r2
 8019004:	623b      	str	r3, [r7, #32]
 8019006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019008:	6a3b      	ldr	r3, [r7, #32]
 801900a:	4053      	eors	r3, r2
 801900c:	637b      	str	r3, [r7, #52]	@ 0x34
 801900e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019010:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019014:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 8019016:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801901a:	4413      	add	r3, r2
 801901c:	647b      	str	r3, [r7, #68]	@ 0x44
 801901e:	69ba      	ldr	r2, [r7, #24]
 8019020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019022:	4053      	eors	r3, r2
 8019024:	61bb      	str	r3, [r7, #24]
 8019026:	69bb      	ldr	r3, [r7, #24]
 8019028:	ea4f 4333 	mov.w	r3, r3, ror #16
 801902c:	61bb      	str	r3, [r7, #24]
 801902e:	69fa      	ldr	r2, [r7, #28]
 8019030:	69bb      	ldr	r3, [r7, #24]
 8019032:	4413      	add	r3, r2
 8019034:	61fb      	str	r3, [r7, #28]
 8019036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019038:	69fb      	ldr	r3, [r7, #28]
 801903a:	4053      	eors	r3, r2
 801903c:	633b      	str	r3, [r7, #48]	@ 0x30
 801903e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019040:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019044:	633b      	str	r3, [r7, #48]	@ 0x30
 8019046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801904a:	4413      	add	r3, r2
 801904c:	647b      	str	r3, [r7, #68]	@ 0x44
 801904e:	69ba      	ldr	r2, [r7, #24]
 8019050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019052:	4053      	eors	r3, r2
 8019054:	61bb      	str	r3, [r7, #24]
 8019056:	69bb      	ldr	r3, [r7, #24]
 8019058:	ea4f 6333 	mov.w	r3, r3, ror #24
 801905c:	61bb      	str	r3, [r7, #24]
 801905e:	69fa      	ldr	r2, [r7, #28]
 8019060:	69bb      	ldr	r3, [r7, #24]
 8019062:	4413      	add	r3, r2
 8019064:	61fb      	str	r3, [r7, #28]
 8019066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019068:	69fb      	ldr	r3, [r7, #28]
 801906a:	4053      	eors	r3, r2
 801906c:	633b      	str	r3, [r7, #48]	@ 0x30
 801906e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019070:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019074:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 8019076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801907a:	4413      	add	r3, r2
 801907c:	643b      	str	r3, [r7, #64]	@ 0x40
 801907e:	697a      	ldr	r2, [r7, #20]
 8019080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8019082:	4053      	eors	r3, r2
 8019084:	617b      	str	r3, [r7, #20]
 8019086:	697b      	ldr	r3, [r7, #20]
 8019088:	ea4f 4333 	mov.w	r3, r3, ror #16
 801908c:	617b      	str	r3, [r7, #20]
 801908e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019090:	697b      	ldr	r3, [r7, #20]
 8019092:	4413      	add	r3, r2
 8019094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801909a:	4053      	eors	r3, r2
 801909c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801909e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190a0:	ea4f 5333 	mov.w	r3, r3, ror #20
 80190a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80190a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80190a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190aa:	4413      	add	r3, r2
 80190ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80190ae:	697a      	ldr	r2, [r7, #20]
 80190b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80190b2:	4053      	eors	r3, r2
 80190b4:	617b      	str	r3, [r7, #20]
 80190b6:	697b      	ldr	r3, [r7, #20]
 80190b8:	ea4f 6333 	mov.w	r3, r3, ror #24
 80190bc:	617b      	str	r3, [r7, #20]
 80190be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80190c0:	697b      	ldr	r3, [r7, #20]
 80190c2:	4413      	add	r3, r2
 80190c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80190c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80190c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190ca:	4053      	eors	r3, r2
 80190cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80190ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190d0:	ea4f 6373 	mov.w	r3, r3, ror #25
 80190d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 80190d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80190d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190da:	4413      	add	r3, r2
 80190dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80190de:	693a      	ldr	r2, [r7, #16]
 80190e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80190e2:	4053      	eors	r3, r2
 80190e4:	613b      	str	r3, [r7, #16]
 80190e6:	693b      	ldr	r3, [r7, #16]
 80190e8:	ea4f 4333 	mov.w	r3, r3, ror #16
 80190ec:	613b      	str	r3, [r7, #16]
 80190ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80190f0:	693b      	ldr	r3, [r7, #16]
 80190f2:	4413      	add	r3, r2
 80190f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80190f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80190f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190fa:	4053      	eors	r3, r2
 80190fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80190fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019100:	ea4f 5333 	mov.w	r3, r3, ror #20
 8019104:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019106:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801910a:	4413      	add	r3, r2
 801910c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801910e:	693a      	ldr	r2, [r7, #16]
 8019110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019112:	4053      	eors	r3, r2
 8019114:	613b      	str	r3, [r7, #16]
 8019116:	693b      	ldr	r3, [r7, #16]
 8019118:	ea4f 6333 	mov.w	r3, r3, ror #24
 801911c:	613b      	str	r3, [r7, #16]
 801911e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019120:	693b      	ldr	r3, [r7, #16]
 8019122:	4413      	add	r3, r2
 8019124:	627b      	str	r3, [r7, #36]	@ 0x24
 8019126:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801912a:	4053      	eors	r3, r2
 801912c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801912e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019130:	ea4f 6373 	mov.w	r3, r3, ror #25
 8019134:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 8019136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019138:	3301      	adds	r3, #1
 801913a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801913c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801913e:	2b09      	cmp	r3, #9
 8019140:	f77f ae79 	ble.w	8018e36 <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	681a      	ldr	r2, [r3, #0]
 8019148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801914a:	441a      	add	r2, r3
 801914c:	683b      	ldr	r3, [r7, #0]
 801914e:	601a      	str	r2, [r3, #0]
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	3304      	adds	r3, #4
 8019154:	6819      	ldr	r1, [r3, #0]
 8019156:	683b      	ldr	r3, [r7, #0]
 8019158:	3304      	adds	r3, #4
 801915a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801915c:	440a      	add	r2, r1
 801915e:	601a      	str	r2, [r3, #0]
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	3308      	adds	r3, #8
 8019164:	6819      	ldr	r1, [r3, #0]
 8019166:	683b      	ldr	r3, [r7, #0]
 8019168:	3308      	adds	r3, #8
 801916a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801916c:	440a      	add	r2, r1
 801916e:	601a      	str	r2, [r3, #0]
 8019170:	687b      	ldr	r3, [r7, #4]
 8019172:	330c      	adds	r3, #12
 8019174:	6819      	ldr	r1, [r3, #0]
 8019176:	683b      	ldr	r3, [r7, #0]
 8019178:	330c      	adds	r3, #12
 801917a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801917c:	440a      	add	r2, r1
 801917e:	601a      	str	r2, [r3, #0]
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	3310      	adds	r3, #16
 8019184:	6819      	ldr	r1, [r3, #0]
 8019186:	683b      	ldr	r3, [r7, #0]
 8019188:	3310      	adds	r3, #16
 801918a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801918c:	440a      	add	r2, r1
 801918e:	601a      	str	r2, [r3, #0]
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	3314      	adds	r3, #20
 8019194:	6819      	ldr	r1, [r3, #0]
 8019196:	683b      	ldr	r3, [r7, #0]
 8019198:	3314      	adds	r3, #20
 801919a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801919c:	440a      	add	r2, r1
 801919e:	601a      	str	r2, [r3, #0]
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	3318      	adds	r3, #24
 80191a4:	6819      	ldr	r1, [r3, #0]
 80191a6:	683b      	ldr	r3, [r7, #0]
 80191a8:	3318      	adds	r3, #24
 80191aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80191ac:	440a      	add	r2, r1
 80191ae:	601a      	str	r2, [r3, #0]
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	331c      	adds	r3, #28
 80191b4:	6819      	ldr	r1, [r3, #0]
 80191b6:	683b      	ldr	r3, [r7, #0]
 80191b8:	331c      	adds	r3, #28
 80191ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80191bc:	440a      	add	r2, r1
 80191be:	601a      	str	r2, [r3, #0]
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	3320      	adds	r3, #32
 80191c4:	6819      	ldr	r1, [r3, #0]
 80191c6:	683b      	ldr	r3, [r7, #0]
 80191c8:	3320      	adds	r3, #32
 80191ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80191cc:	440a      	add	r2, r1
 80191ce:	601a      	str	r2, [r3, #0]
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	3324      	adds	r3, #36	@ 0x24
 80191d4:	6819      	ldr	r1, [r3, #0]
 80191d6:	683b      	ldr	r3, [r7, #0]
 80191d8:	3324      	adds	r3, #36	@ 0x24
 80191da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80191dc:	440a      	add	r2, r1
 80191de:	601a      	str	r2, [r3, #0]
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	3328      	adds	r3, #40	@ 0x28
 80191e4:	6819      	ldr	r1, [r3, #0]
 80191e6:	683b      	ldr	r3, [r7, #0]
 80191e8:	3328      	adds	r3, #40	@ 0x28
 80191ea:	6a3a      	ldr	r2, [r7, #32]
 80191ec:	440a      	add	r2, r1
 80191ee:	601a      	str	r2, [r3, #0]
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	332c      	adds	r3, #44	@ 0x2c
 80191f4:	6819      	ldr	r1, [r3, #0]
 80191f6:	683b      	ldr	r3, [r7, #0]
 80191f8:	332c      	adds	r3, #44	@ 0x2c
 80191fa:	69fa      	ldr	r2, [r7, #28]
 80191fc:	440a      	add	r2, r1
 80191fe:	601a      	str	r2, [r3, #0]
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	3330      	adds	r3, #48	@ 0x30
 8019204:	6819      	ldr	r1, [r3, #0]
 8019206:	683b      	ldr	r3, [r7, #0]
 8019208:	3330      	adds	r3, #48	@ 0x30
 801920a:	69ba      	ldr	r2, [r7, #24]
 801920c:	440a      	add	r2, r1
 801920e:	601a      	str	r2, [r3, #0]
 8019210:	687b      	ldr	r3, [r7, #4]
 8019212:	3334      	adds	r3, #52	@ 0x34
 8019214:	6819      	ldr	r1, [r3, #0]
 8019216:	683b      	ldr	r3, [r7, #0]
 8019218:	3334      	adds	r3, #52	@ 0x34
 801921a:	697a      	ldr	r2, [r7, #20]
 801921c:	440a      	add	r2, r1
 801921e:	601a      	str	r2, [r3, #0]
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	3338      	adds	r3, #56	@ 0x38
 8019224:	6819      	ldr	r1, [r3, #0]
 8019226:	683b      	ldr	r3, [r7, #0]
 8019228:	3338      	adds	r3, #56	@ 0x38
 801922a:	693a      	ldr	r2, [r7, #16]
 801922c:	440a      	add	r2, r1
 801922e:	601a      	str	r2, [r3, #0]
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	333c      	adds	r3, #60	@ 0x3c
 8019234:	6819      	ldr	r1, [r3, #0]
 8019236:	683b      	ldr	r3, [r7, #0]
 8019238:	333c      	adds	r3, #60	@ 0x3c
 801923a:	68fa      	ldr	r2, [r7, #12]
 801923c:	440a      	add	r2, r1
 801923e:	601a      	str	r2, [r3, #0]
}
 8019240:	bf00      	nop
 8019242:	3754      	adds	r7, #84	@ 0x54
 8019244:	46bd      	mov	sp, r7
 8019246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924a:	4770      	bx	lr

0801924c <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 801924c:	b480      	push	{r7}
 801924e:	b089      	sub	sp, #36	@ 0x24
 8019250:	af00      	add	r7, sp, #0
 8019252:	60f8      	str	r0, [r7, #12]
 8019254:	60b9      	str	r1, [r7, #8]
 8019256:	607a      	str	r2, [r7, #4]
 8019258:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	089b      	lsrs	r3, r3, #2
 801925e:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 8019260:	2300      	movs	r3, #0
 8019262:	61fb      	str	r3, [r7, #28]
 8019264:	e016      	b.n	8019294 <xor_block+0x48>
 8019266:	69fb      	ldr	r3, [r7, #28]
 8019268:	009b      	lsls	r3, r3, #2
 801926a:	68ba      	ldr	r2, [r7, #8]
 801926c:	4413      	add	r3, r2
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	617b      	str	r3, [r7, #20]
 8019272:	69fb      	ldr	r3, [r7, #28]
 8019274:	009b      	lsls	r3, r3, #2
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	4413      	add	r3, r2
 801927a:	681a      	ldr	r2, [r3, #0]
 801927c:	697b      	ldr	r3, [r7, #20]
 801927e:	4053      	eors	r3, r2
 8019280:	617b      	str	r3, [r7, #20]
 8019282:	69fb      	ldr	r3, [r7, #28]
 8019284:	009b      	lsls	r3, r3, #2
 8019286:	68fa      	ldr	r2, [r7, #12]
 8019288:	4413      	add	r3, r2
 801928a:	697a      	ldr	r2, [r7, #20]
 801928c:	601a      	str	r2, [r3, #0]
 801928e:	69fb      	ldr	r3, [r7, #28]
 8019290:	3301      	adds	r3, #1
 8019292:	61fb      	str	r3, [r7, #28]
 8019294:	69fa      	ldr	r2, [r7, #28]
 8019296:	69bb      	ldr	r3, [r7, #24]
 8019298:	429a      	cmp	r2, r3
 801929a:	d3e4      	bcc.n	8019266 <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 801929c:	69bb      	ldr	r3, [r7, #24]
 801929e:	009b      	lsls	r3, r3, #2
 80192a0:	68fa      	ldr	r2, [r7, #12]
 80192a2:	4413      	add	r3, r2
 80192a4:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 80192a6:	69bb      	ldr	r3, [r7, #24]
 80192a8:	009b      	lsls	r3, r3, #2
 80192aa:	68ba      	ldr	r2, [r7, #8]
 80192ac:	4413      	add	r3, r2
 80192ae:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 80192b0:	69bb      	ldr	r3, [r7, #24]
 80192b2:	009b      	lsls	r3, r3, #2
 80192b4:	687a      	ldr	r2, [r7, #4]
 80192b6:	4413      	add	r3, r2
 80192b8:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 80192ba:	683b      	ldr	r3, [r7, #0]
 80192bc:	f003 0303 	and.w	r3, r3, #3
 80192c0:	2b03      	cmp	r3, #3
 80192c2:	d026      	beq.n	8019312 <xor_block+0xc6>
 80192c4:	2b03      	cmp	r3, #3
 80192c6:	d846      	bhi.n	8019356 <xor_block+0x10a>
 80192c8:	2b01      	cmp	r3, #1
 80192ca:	d002      	beq.n	80192d2 <xor_block+0x86>
 80192cc:	2b02      	cmp	r3, #2
 80192ce:	d00a      	beq.n	80192e6 <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 80192d0:	e041      	b.n	8019356 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 80192d2:	68bb      	ldr	r3, [r7, #8]
 80192d4:	781a      	ldrb	r2, [r3, #0]
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	b2db      	uxtb	r3, r3
 80192dc:	4053      	eors	r3, r2
 80192de:	b2da      	uxtb	r2, r3
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	701a      	strb	r2, [r3, #0]
      break;
 80192e4:	e037      	b.n	8019356 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 80192e6:	68bb      	ldr	r3, [r7, #8]
 80192e8:	781a      	ldrb	r2, [r3, #0]
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	b2db      	uxtb	r3, r3
 80192f0:	4053      	eors	r3, r2
 80192f2:	b2da      	uxtb	r2, r3
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	3301      	adds	r3, #1
 80192fc:	7819      	ldrb	r1, [r3, #0]
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	0a1b      	lsrs	r3, r3, #8
 8019304:	b2da      	uxtb	r2, r3
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	3301      	adds	r3, #1
 801930a:	404a      	eors	r2, r1
 801930c:	b2d2      	uxtb	r2, r2
 801930e:	701a      	strb	r2, [r3, #0]
      break;
 8019310:	e021      	b.n	8019356 <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 8019312:	68bb      	ldr	r3, [r7, #8]
 8019314:	781a      	ldrb	r2, [r3, #0]
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	b2db      	uxtb	r3, r3
 801931c:	4053      	eors	r3, r2
 801931e:	b2da      	uxtb	r2, r3
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	3301      	adds	r3, #1
 8019328:	7819      	ldrb	r1, [r3, #0]
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	0a1b      	lsrs	r3, r3, #8
 8019330:	b2da      	uxtb	r2, r3
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	3301      	adds	r3, #1
 8019336:	404a      	eors	r2, r1
 8019338:	b2d2      	uxtb	r2, r2
 801933a:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 801933c:	68bb      	ldr	r3, [r7, #8]
 801933e:	3302      	adds	r3, #2
 8019340:	7819      	ldrb	r1, [r3, #0]
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	681b      	ldr	r3, [r3, #0]
 8019346:	0c1b      	lsrs	r3, r3, #16
 8019348:	b2da      	uxtb	r2, r3
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	3302      	adds	r3, #2
 801934e:	404a      	eors	r2, r1
 8019350:	b2d2      	uxtb	r2, r2
 8019352:	701a      	strb	r2, [r3, #0]
      break;
 8019354:	bf00      	nop
}
 8019356:	bf00      	nop
 8019358:	3724      	adds	r7, #36	@ 0x24
 801935a:	46bd      	mov	sp, r7
 801935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019360:	4770      	bx	lr

08019362 <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 8019362:	b580      	push	{r7, lr}
 8019364:	b0aa      	sub	sp, #168	@ 0xa8
 8019366:	af00      	add	r7, sp, #0
 8019368:	60f8      	str	r0, [r7, #12]
 801936a:	60b9      	str	r1, [r7, #8]
 801936c:	607a      	str	r2, [r7, #4]
 801936e:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	099b      	lsrs	r3, r3, #6
 8019374:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 8019378:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801937c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019380:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8019384:	6839      	ldr	r1, [r7, #0]
 8019386:	f7ff fca7 	bl	8018cd8 <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 801938a:	2300      	movs	r3, #0
 801938c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8019390:	e03c      	b.n	801940c <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 8019392:	f107 0218 	add.w	r2, r7, #24
 8019396:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801939a:	4611      	mov	r1, r2
 801939c:	4618      	mov	r0, r3
 801939e:	f7ff fd03 	bl	8018da8 <core_block>
    increment_counter(state);
 80193a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80193a6:	3301      	adds	r3, #1
 80193a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 80193ac:	2300      	movs	r3, #0
 80193ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80193b2:	e01c      	b.n	80193ee <chacha20_xor_stream+0x8c>
 80193b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80193b8:	009b      	lsls	r3, r3, #2
 80193ba:	68ba      	ldr	r2, [r7, #8]
 80193bc:	4413      	add	r3, r2
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	617b      	str	r3, [r7, #20]
 80193c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80193c6:	009b      	lsls	r3, r3, #2
 80193c8:	f107 0218 	add.w	r2, r7, #24
 80193cc:	4413      	add	r3, r2
 80193ce:	681a      	ldr	r2, [r3, #0]
 80193d0:	697b      	ldr	r3, [r7, #20]
 80193d2:	4053      	eors	r3, r2
 80193d4:	617b      	str	r3, [r7, #20]
 80193d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80193da:	009b      	lsls	r3, r3, #2
 80193dc:	68fa      	ldr	r2, [r7, #12]
 80193de:	4413      	add	r3, r2
 80193e0:	697a      	ldr	r2, [r7, #20]
 80193e2:	601a      	str	r2, [r3, #0]
 80193e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80193e8:	3301      	adds	r3, #1
 80193ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80193ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80193f2:	2b0f      	cmp	r3, #15
 80193f4:	d9de      	bls.n	80193b4 <chacha20_xor_stream+0x52>
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	3340      	adds	r3, #64	@ 0x40
 80193fa:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 80193fc:	68bb      	ldr	r3, [r7, #8]
 80193fe:	3340      	adds	r3, #64	@ 0x40
 8019400:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 8019402:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019406:	3301      	adds	r3, #1
 8019408:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801940c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8019410:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8019414:	429a      	cmp	r2, r3
 8019416:	d3bc      	bcc.n	8019392 <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801941e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 8019422:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019426:	2b00      	cmp	r3, #0
 8019428:	d00f      	beq.n	801944a <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 801942a:	f107 0218 	add.w	r2, r7, #24
 801942e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8019432:	4611      	mov	r1, r2
 8019434:	4618      	mov	r0, r3
 8019436:	f7ff fcb7 	bl	8018da8 <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 801943a:	f107 0218 	add.w	r2, r7, #24
 801943e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8019442:	68b9      	ldr	r1, [r7, #8]
 8019444:	68f8      	ldr	r0, [r7, #12]
 8019446:	f7ff ff01 	bl	801924c <xor_block>
  }
}
 801944a:	bf00      	nop
 801944c:	37a8      	adds	r7, #168	@ 0xa8
 801944e:	46bd      	mov	sp, r7
 8019450:	bd80      	pop	{r7, pc}

08019452 <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 8019452:	b580      	push	{r7, lr}
 8019454:	b0a4      	sub	sp, #144	@ 0x90
 8019456:	af00      	add	r7, sp, #0
 8019458:	60f8      	str	r0, [r7, #12]
 801945a:	60b9      	str	r1, [r7, #8]
 801945c:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 801945e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8019462:	2300      	movs	r3, #0
 8019464:	687a      	ldr	r2, [r7, #4]
 8019466:	68b9      	ldr	r1, [r7, #8]
 8019468:	f7ff fc36 	bl	8018cd8 <initialize_state>
  core_block(state, result);
 801946c:	f107 0210 	add.w	r2, r7, #16
 8019470:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019474:	4611      	mov	r1, r2
 8019476:	4618      	mov	r0, r3
 8019478:	f7ff fc96 	bl	8018da8 <core_block>
  serialize(poly_key, result);
 801947c:	f107 0310 	add.w	r3, r7, #16
 8019480:	2220      	movs	r2, #32
 8019482:	4619      	mov	r1, r3
 8019484:	68f8      	ldr	r0, [r7, #12]
 8019486:	f00a f97c 	bl	8023782 <memcpy>
  (void) i;
}
 801948a:	bf00      	nop
 801948c:	3790      	adds	r7, #144	@ 0x90
 801948e:	46bd      	mov	sp, r7
 8019490:	bd80      	pop	{r7, pc}

08019492 <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 8019492:	b480      	push	{r7}
 8019494:	b083      	sub	sp, #12
 8019496:	af00      	add	r7, sp, #0
 8019498:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	781b      	ldrb	r3, [r3, #0]
 801949e:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	3301      	adds	r3, #1
 80194a4:	781b      	ldrb	r3, [r3, #0]
 80194a6:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 80194a8:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	3302      	adds	r3, #2
 80194ae:	781b      	ldrb	r3, [r3, #0]
 80194b0:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 80194b2:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	3303      	adds	r3, #3
 80194b8:	781b      	ldrb	r3, [r3, #0]
 80194ba:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 80194bc:	4313      	orrs	r3, r2
}
 80194be:	4618      	mov	r0, r3
 80194c0:	370c      	adds	r7, #12
 80194c2:	46bd      	mov	sp, r7
 80194c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194c8:	4770      	bx	lr

080194ca <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 80194ca:	b480      	push	{r7}
 80194cc:	b083      	sub	sp, #12
 80194ce:	af00      	add	r7, sp, #0
 80194d0:	6078      	str	r0, [r7, #4]
 80194d2:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 80194d4:	683b      	ldr	r3, [r7, #0]
 80194d6:	b2da      	uxtb	r2, r3
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 80194dc:	683b      	ldr	r3, [r7, #0]
 80194de:	0a1a      	lsrs	r2, r3, #8
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	3301      	adds	r3, #1
 80194e4:	b2d2      	uxtb	r2, r2
 80194e6:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 80194e8:	683b      	ldr	r3, [r7, #0]
 80194ea:	0c1a      	lsrs	r2, r3, #16
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	3302      	adds	r3, #2
 80194f0:	b2d2      	uxtb	r2, r2
 80194f2:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 80194f4:	683b      	ldr	r3, [r7, #0]
 80194f6:	0e1a      	lsrs	r2, r3, #24
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	3303      	adds	r3, #3
 80194fc:	b2d2      	uxtb	r2, r2
 80194fe:	701a      	strb	r2, [r3, #0]
}
 8019500:	bf00      	nop
 8019502:	370c      	adds	r7, #12
 8019504:	46bd      	mov	sp, r7
 8019506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801950a:	4770      	bx	lr

0801950c <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 801950c:	b580      	push	{r7, lr}
 801950e:	b084      	sub	sp, #16
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
 8019514:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 801951a:	6838      	ldr	r0, [r7, #0]
 801951c:	f7ff ffb9 	bl	8019492 <U8TO32>
 8019520:	4603      	mov	r3, r0
 8019522:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8019526:	68fb      	ldr	r3, [r7, #12]
 8019528:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 801952a:	683b      	ldr	r3, [r7, #0]
 801952c:	3303      	adds	r3, #3
 801952e:	4618      	mov	r0, r3
 8019530:	f7ff ffaf 	bl	8019492 <U8TO32>
 8019534:	4603      	mov	r3, r0
 8019536:	089a      	lsrs	r2, r3, #2
 8019538:	4b2f      	ldr	r3, [pc, #188]	@ (80195f8 <poly1305_init+0xec>)
 801953a:	4013      	ands	r3, r2
 801953c:	68fa      	ldr	r2, [r7, #12]
 801953e:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 8019540:	683b      	ldr	r3, [r7, #0]
 8019542:	3306      	adds	r3, #6
 8019544:	4618      	mov	r0, r3
 8019546:	f7ff ffa4 	bl	8019492 <U8TO32>
 801954a:	4603      	mov	r3, r0
 801954c:	091a      	lsrs	r2, r3, #4
 801954e:	4b2b      	ldr	r3, [pc, #172]	@ (80195fc <poly1305_init+0xf0>)
 8019550:	4013      	ands	r3, r2
 8019552:	68fa      	ldr	r2, [r7, #12]
 8019554:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 8019556:	683b      	ldr	r3, [r7, #0]
 8019558:	3309      	adds	r3, #9
 801955a:	4618      	mov	r0, r3
 801955c:	f7ff ff99 	bl	8019492 <U8TO32>
 8019560:	4603      	mov	r3, r0
 8019562:	099a      	lsrs	r2, r3, #6
 8019564:	4b26      	ldr	r3, [pc, #152]	@ (8019600 <poly1305_init+0xf4>)
 8019566:	4013      	ands	r3, r2
 8019568:	68fa      	ldr	r2, [r7, #12]
 801956a:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 801956c:	683b      	ldr	r3, [r7, #0]
 801956e:	330c      	adds	r3, #12
 8019570:	4618      	mov	r0, r3
 8019572:	f7ff ff8e 	bl	8019492 <U8TO32>
 8019576:	4603      	mov	r3, r0
 8019578:	0a1b      	lsrs	r3, r3, #8
 801957a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801957e:	68fb      	ldr	r3, [r7, #12]
 8019580:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 8019582:	68fb      	ldr	r3, [r7, #12]
 8019584:	2200      	movs	r2, #0
 8019586:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	2200      	movs	r2, #0
 801958c:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801958e:	68fb      	ldr	r3, [r7, #12]
 8019590:	2200      	movs	r2, #0
 8019592:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	2200      	movs	r2, #0
 8019598:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801959a:	68fb      	ldr	r3, [r7, #12]
 801959c:	2200      	movs	r2, #0
 801959e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	3310      	adds	r3, #16
 80195a4:	4618      	mov	r0, r3
 80195a6:	f7ff ff74 	bl	8019492 <U8TO32>
 80195aa:	4602      	mov	r2, r0
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	3314      	adds	r3, #20
 80195b4:	4618      	mov	r0, r3
 80195b6:	f7ff ff6c 	bl	8019492 <U8TO32>
 80195ba:	4602      	mov	r2, r0
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 80195c0:	683b      	ldr	r3, [r7, #0]
 80195c2:	3318      	adds	r3, #24
 80195c4:	4618      	mov	r0, r3
 80195c6:	f7ff ff64 	bl	8019492 <U8TO32>
 80195ca:	4602      	mov	r2, r0
 80195cc:	68fb      	ldr	r3, [r7, #12]
 80195ce:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	331c      	adds	r3, #28
 80195d4:	4618      	mov	r0, r3
 80195d6:	f7ff ff5c 	bl	8019492 <U8TO32>
 80195da:	4602      	mov	r2, r0
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	2200      	movs	r2, #0
 80195e4:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	2200      	movs	r2, #0
 80195ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80195ee:	bf00      	nop
 80195f0:	3710      	adds	r7, #16
 80195f2:	46bd      	mov	sp, r7
 80195f4:	bd80      	pop	{r7, pc}
 80195f6:	bf00      	nop
 80195f8:	03ffff03 	.word	0x03ffff03
 80195fc:	03ffc0ff 	.word	0x03ffc0ff
 8019600:	03f03fff 	.word	0x03f03fff

08019604 <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 8019604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019608:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 801960c:	af00      	add	r7, sp, #0
 801960e:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 8019612:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 8019616:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 801961a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801961e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8019622:	2b00      	cmp	r3, #0
 8019624:	d001      	beq.n	801962a <poly1305_blocks+0x26>
 8019626:	2300      	movs	r3, #0
 8019628:	e001      	b.n	801962e <poly1305_blocks+0x2a>
 801962a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801962e:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 8019632:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 801963c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8019640:	685b      	ldr	r3, [r3, #4]
 8019642:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 8019646:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801964a:	689b      	ldr	r3, [r3, #8]
 801964c:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 8019650:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8019654:	68db      	ldr	r3, [r3, #12]
 8019656:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 801965a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801965e:	691b      	ldr	r3, [r3, #16]
 8019660:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 8019664:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 8019668:	4613      	mov	r3, r2
 801966a:	009b      	lsls	r3, r3, #2
 801966c:	4413      	add	r3, r2
 801966e:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 8019672:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 8019676:	4613      	mov	r3, r2
 8019678:	009b      	lsls	r3, r3, #2
 801967a:	4413      	add	r3, r2
 801967c:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 8019680:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 8019684:	4613      	mov	r3, r2
 8019686:	009b      	lsls	r3, r3, #2
 8019688:	4413      	add	r3, r2
 801968a:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 801968e:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 8019692:	4613      	mov	r3, r2
 8019694:	009b      	lsls	r3, r3, #2
 8019696:	4413      	add	r3, r2
 8019698:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 801969c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80196a0:	695b      	ldr	r3, [r3, #20]
 80196a2:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 80196a6:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80196aa:	699b      	ldr	r3, [r3, #24]
 80196ac:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 80196b0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80196b4:	69db      	ldr	r3, [r3, #28]
 80196b6:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 80196ba:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80196be:	6a1b      	ldr	r3, [r3, #32]
 80196c0:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 80196c4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80196c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196ca:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 80196ce:	f000 be78 	b.w	801a3c2 <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 80196d2:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 80196d6:	f7ff fedc 	bl	8019492 <U8TO32>
 80196da:	4603      	mov	r3, r0
 80196dc:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 80196e0:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80196e4:	4413      	add	r3, r2
 80196e6:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 80196ea:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80196ee:	3303      	adds	r3, #3
 80196f0:	4618      	mov	r0, r3
 80196f2:	f7ff fece 	bl	8019492 <U8TO32>
 80196f6:	4603      	mov	r3, r0
 80196f8:	089b      	lsrs	r3, r3, #2
 80196fa:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 80196fe:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8019702:	4413      	add	r3, r2
 8019704:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 8019708:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801970c:	3306      	adds	r3, #6
 801970e:	4618      	mov	r0, r3
 8019710:	f7ff febf 	bl	8019492 <U8TO32>
 8019714:	4603      	mov	r3, r0
 8019716:	091b      	lsrs	r3, r3, #4
 8019718:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801971c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8019720:	4413      	add	r3, r2
 8019722:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 8019726:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801972a:	3309      	adds	r3, #9
 801972c:	4618      	mov	r0, r3
 801972e:	f7ff feb0 	bl	8019492 <U8TO32>
 8019732:	4603      	mov	r3, r0
 8019734:	099b      	lsrs	r3, r3, #6
 8019736:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801973a:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801973e:	4413      	add	r3, r2
 8019740:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 8019744:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8019748:	330c      	adds	r3, #12
 801974a:	4618      	mov	r0, r3
 801974c:	f7ff fea1 	bl	8019492 <U8TO32>
 8019750:	4603      	mov	r3, r0
 8019752:	0a1a      	lsrs	r2, r3, #8
 8019754:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8019758:	431a      	orrs	r2, r3
 801975a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801975e:	4413      	add	r3, r2
 8019760:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8019764:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8019768:	2200      	movs	r2, #0
 801976a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801976e:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 8019772:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8019776:	2200      	movs	r2, #0
 8019778:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 801977c:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8019780:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8019784:	460b      	mov	r3, r1
 8019786:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 801978a:	fb02 f203 	mul.w	r2, r2, r3
 801978e:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 8019792:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 8019796:	4601      	mov	r1, r0
 8019798:	fb01 f303 	mul.w	r3, r1, r3
 801979c:	4413      	add	r3, r2
 801979e:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 80197a2:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 80197a6:	fba2 1201 	umull	r1, r2, r2, r1
 80197aa:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 80197ae:	460a      	mov	r2, r1
 80197b0:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 80197b4:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 80197b8:	4413      	add	r3, r2
 80197ba:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80197be:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80197c2:	2200      	movs	r2, #0
 80197c4:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80197c8:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 80197cc:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80197d0:	2200      	movs	r2, #0
 80197d2:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 80197d6:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 80197da:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 80197de:	460b      	mov	r3, r1
 80197e0:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 80197e4:	fb02 f203 	mul.w	r2, r2, r3
 80197e8:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80197ec:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 80197f0:	4601      	mov	r1, r0
 80197f2:	fb01 f303 	mul.w	r3, r1, r3
 80197f6:	4413      	add	r3, r2
 80197f8:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 80197fc:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 8019800:	fba2 1201 	umull	r1, r2, r2, r1
 8019804:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8019808:	460a      	mov	r2, r1
 801980a:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 801980e:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 8019812:	4413      	add	r3, r2
 8019814:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8019818:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 801981c:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8019820:	4602      	mov	r2, r0
 8019822:	189b      	adds	r3, r3, r2
 8019824:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8019828:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801982c:	460a      	mov	r2, r1
 801982e:	4153      	adcs	r3, r2
 8019830:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8019834:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019838:	2200      	movs	r2, #0
 801983a:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 801983e:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8019842:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8019846:	2200      	movs	r2, #0
 8019848:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 801984c:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8019850:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 8019854:	460b      	mov	r3, r1
 8019856:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 801985a:	fb02 f203 	mul.w	r2, r2, r3
 801985e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8019862:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 8019866:	4601      	mov	r1, r0
 8019868:	fb01 f303 	mul.w	r3, r1, r3
 801986c:	4413      	add	r3, r2
 801986e:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8019872:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 8019876:	fba2 1201 	umull	r1, r2, r2, r1
 801987a:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 801987e:	460a      	mov	r2, r1
 8019880:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 8019884:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8019888:	4413      	add	r3, r2
 801988a:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801988e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8019892:	2200      	movs	r2, #0
 8019894:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8019898:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 801989c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 80198a0:	2200      	movs	r2, #0
 80198a2:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80198a6:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 80198aa:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 80198ae:	460b      	mov	r3, r1
 80198b0:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80198b4:	fb02 f203 	mul.w	r2, r2, r3
 80198b8:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80198bc:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 80198c0:	4601      	mov	r1, r0
 80198c2:	fb01 f303 	mul.w	r3, r1, r3
 80198c6:	4413      	add	r3, r2
 80198c8:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 80198cc:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 80198d0:	fba2 1201 	umull	r1, r2, r2, r1
 80198d4:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 80198d8:	460a      	mov	r2, r1
 80198da:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 80198de:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 80198e2:	4413      	add	r3, r2
 80198e4:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80198e8:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 80198ec:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 80198f0:	4602      	mov	r2, r0
 80198f2:	189b      	adds	r3, r3, r2
 80198f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80198f6:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80198fa:	460a      	mov	r2, r1
 80198fc:	4153      	adcs	r3, r2
 80198fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8019900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8019904:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8019908:	4602      	mov	r2, r0
 801990a:	189b      	adds	r3, r3, r2
 801990c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8019910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019914:	460a      	mov	r2, r1
 8019916:	4153      	adcs	r3, r2
 8019918:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801991c:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8019920:	2200      	movs	r2, #0
 8019922:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8019926:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 801992a:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 801992e:	2200      	movs	r2, #0
 8019930:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8019934:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8019938:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 801993c:	460b      	mov	r3, r1
 801993e:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8019942:	fb02 f203 	mul.w	r2, r2, r3
 8019946:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 801994a:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 801994e:	4601      	mov	r1, r0
 8019950:	fb01 f303 	mul.w	r3, r1, r3
 8019954:	4413      	add	r3, r2
 8019956:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 801995a:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 801995e:	fba2 1201 	umull	r1, r2, r2, r1
 8019962:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8019966:	460a      	mov	r2, r1
 8019968:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 801996c:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019970:	4413      	add	r3, r2
 8019972:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8019976:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801997a:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 801997e:	4602      	mov	r2, r0
 8019980:	189b      	adds	r3, r3, r2
 8019982:	643b      	str	r3, [r7, #64]	@ 0x40
 8019984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8019988:	460a      	mov	r2, r1
 801998a:	4153      	adcs	r3, r2
 801998c:	647b      	str	r3, [r7, #68]	@ 0x44
 801998e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8019992:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8019996:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801999a:	2200      	movs	r2, #0
 801999c:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 80199a0:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 80199a4:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80199a8:	2200      	movs	r2, #0
 80199aa:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 80199ae:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 80199b2:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 80199b6:	460b      	mov	r3, r1
 80199b8:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 80199bc:	fb02 f203 	mul.w	r2, r2, r3
 80199c0:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 80199c4:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 80199c8:	4601      	mov	r1, r0
 80199ca:	fb01 f303 	mul.w	r3, r1, r3
 80199ce:	4413      	add	r3, r2
 80199d0:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 80199d4:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 80199d8:	fba2 1201 	umull	r1, r2, r2, r1
 80199dc:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 80199e0:	460a      	mov	r2, r1
 80199e2:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 80199e6:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 80199ea:	4413      	add	r3, r2
 80199ec:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 80199f0:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80199f4:	2200      	movs	r2, #0
 80199f6:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80199fa:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 80199fe:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8019a02:	2200      	movs	r2, #0
 8019a04:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8019a08:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8019a0c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8019a10:	460b      	mov	r3, r1
 8019a12:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019a16:	fb02 f203 	mul.w	r2, r2, r3
 8019a1a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8019a1e:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 8019a22:	4601      	mov	r1, r0
 8019a24:	fb01 f303 	mul.w	r3, r1, r3
 8019a28:	4413      	add	r3, r2
 8019a2a:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8019a2e:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8019a32:	fba2 1201 	umull	r1, r2, r2, r1
 8019a36:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8019a3a:	460a      	mov	r2, r1
 8019a3c:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 8019a40:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8019a44:	4413      	add	r3, r2
 8019a46:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8019a4a:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8019a4e:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8019a52:	4602      	mov	r2, r0
 8019a54:	189b      	adds	r3, r3, r2
 8019a56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8019a5a:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8019a5e:	460a      	mov	r2, r1
 8019a60:	4153      	adcs	r3, r2
 8019a62:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8019a66:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8019a70:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8019a74:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019a78:	2200      	movs	r2, #0
 8019a7a:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8019a7e:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8019a82:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8019a86:	460b      	mov	r3, r1
 8019a88:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8019a8c:	fb02 f203 	mul.w	r2, r2, r3
 8019a90:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8019a94:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 8019a98:	4601      	mov	r1, r0
 8019a9a:	fb01 f303 	mul.w	r3, r1, r3
 8019a9e:	4413      	add	r3, r2
 8019aa0:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8019aa4:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8019aa8:	fba2 1201 	umull	r1, r2, r2, r1
 8019aac:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 8019ab0:	460a      	mov	r2, r1
 8019ab2:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 8019ab6:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 8019aba:	4413      	add	r3, r2
 8019abc:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8019ac0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8019aca:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8019ace:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8019ad2:	2200      	movs	r2, #0
 8019ad4:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8019ad8:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8019adc:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8019ae0:	460b      	mov	r3, r1
 8019ae2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8019ae6:	fb02 f203 	mul.w	r2, r2, r3
 8019aea:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8019aee:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 8019af2:	4601      	mov	r1, r0
 8019af4:	fb01 f303 	mul.w	r3, r1, r3
 8019af8:	4413      	add	r3, r2
 8019afa:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8019afe:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8019b02:	fba2 1201 	umull	r1, r2, r2, r1
 8019b06:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8019b0a:	460a      	mov	r2, r1
 8019b0c:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 8019b10:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8019b14:	4413      	add	r3, r2
 8019b16:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8019b1a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8019b1e:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8019b22:	4602      	mov	r2, r0
 8019b24:	189b      	adds	r3, r3, r2
 8019b26:	663b      	str	r3, [r7, #96]	@ 0x60
 8019b28:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8019b2c:	460a      	mov	r2, r1
 8019b2e:	4153      	adcs	r3, r2
 8019b30:	667b      	str	r3, [r7, #100]	@ 0x64
 8019b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8019b36:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8019b3a:	4602      	mov	r2, r0
 8019b3c:	189b      	adds	r3, r3, r2
 8019b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8019b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019b46:	460a      	mov	r2, r1
 8019b48:	4153      	adcs	r3, r2
 8019b4a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8019b4e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8019b52:	2200      	movs	r2, #0
 8019b54:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8019b58:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8019b5c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8019b60:	2200      	movs	r2, #0
 8019b62:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8019b66:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 8019b6a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8019b6e:	460b      	mov	r3, r1
 8019b70:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8019b74:	fb02 f203 	mul.w	r2, r2, r3
 8019b78:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8019b7c:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 8019b80:	4601      	mov	r1, r0
 8019b82:	fb01 f303 	mul.w	r3, r1, r3
 8019b86:	4413      	add	r3, r2
 8019b88:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8019b8c:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 8019b90:	fba2 1201 	umull	r1, r2, r2, r1
 8019b94:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8019b98:	460a      	mov	r2, r1
 8019b9a:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8019b9e:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8019ba2:	4413      	add	r3, r2
 8019ba4:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8019ba8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8019bac:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8019bb0:	4602      	mov	r2, r0
 8019bb2:	189b      	adds	r3, r3, r2
 8019bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019bb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8019bba:	460a      	mov	r2, r1
 8019bbc:	4153      	adcs	r3, r2
 8019bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8019bc4:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8019bc8:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8019bcc:	2200      	movs	r2, #0
 8019bce:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8019bd2:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8019bd6:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8019bda:	2200      	movs	r2, #0
 8019bdc:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8019be0:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8019be4:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8019be8:	460b      	mov	r3, r1
 8019bea:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8019bee:	fb02 f203 	mul.w	r2, r2, r3
 8019bf2:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8019bf6:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 8019bfa:	4601      	mov	r1, r0
 8019bfc:	fb01 f303 	mul.w	r3, r1, r3
 8019c00:	4413      	add	r3, r2
 8019c02:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8019c06:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 8019c0a:	fba2 1201 	umull	r1, r2, r2, r1
 8019c0e:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8019c12:	460a      	mov	r2, r1
 8019c14:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 8019c18:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8019c1c:	4413      	add	r3, r2
 8019c1e:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8019c22:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8019c26:	2200      	movs	r2, #0
 8019c28:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8019c2c:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8019c30:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8019c34:	2200      	movs	r2, #0
 8019c36:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8019c3a:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8019c3e:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8019c42:	460b      	mov	r3, r1
 8019c44:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8019c48:	fb02 f203 	mul.w	r2, r2, r3
 8019c4c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8019c50:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 8019c54:	4601      	mov	r1, r0
 8019c56:	fb01 f303 	mul.w	r3, r1, r3
 8019c5a:	4413      	add	r3, r2
 8019c5c:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8019c60:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8019c64:	fba2 1201 	umull	r1, r2, r2, r1
 8019c68:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8019c6c:	460a      	mov	r2, r1
 8019c6e:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 8019c72:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8019c76:	4413      	add	r3, r2
 8019c78:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8019c7c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8019c80:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8019c84:	4602      	mov	r2, r0
 8019c86:	189b      	adds	r3, r3, r2
 8019c88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8019c8c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8019c90:	460a      	mov	r2, r1
 8019c92:	4153      	adcs	r3, r2
 8019c94:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 8019c98:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019c9c:	2200      	movs	r2, #0
 8019c9e:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8019ca2:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8019ca6:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8019caa:	2200      	movs	r2, #0
 8019cac:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8019cb0:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8019cb4:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8019cb8:	460b      	mov	r3, r1
 8019cba:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8019cbe:	fb02 f203 	mul.w	r2, r2, r3
 8019cc2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8019cc6:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 8019cca:	4601      	mov	r1, r0
 8019ccc:	fb01 f303 	mul.w	r3, r1, r3
 8019cd0:	4413      	add	r3, r2
 8019cd2:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8019cd6:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 8019cda:	fba2 1201 	umull	r1, r2, r2, r1
 8019cde:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8019ce2:	460a      	mov	r2, r1
 8019ce4:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 8019ce8:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8019cec:	4413      	add	r3, r2
 8019cee:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8019cf2:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8019cf6:	2200      	movs	r2, #0
 8019cf8:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8019cfc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8019d00:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8019d04:	2200      	movs	r2, #0
 8019d06:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8019d0a:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8019d0e:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8019d12:	460b      	mov	r3, r1
 8019d14:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8019d18:	fb02 f203 	mul.w	r2, r2, r3
 8019d1c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8019d20:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 8019d24:	4601      	mov	r1, r0
 8019d26:	fb01 f303 	mul.w	r3, r1, r3
 8019d2a:	4413      	add	r3, r2
 8019d2c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8019d30:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8019d34:	fba2 1201 	umull	r1, r2, r2, r1
 8019d38:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8019d3c:	460a      	mov	r2, r1
 8019d3e:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 8019d42:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8019d46:	4413      	add	r3, r2
 8019d48:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8019d4c:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8019d50:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8019d54:	4602      	mov	r2, r0
 8019d56:	189b      	adds	r3, r3, r2
 8019d58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019d5a:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8019d5e:	460a      	mov	r2, r1
 8019d60:	4153      	adcs	r3, r2
 8019d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019d64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8019d68:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8019d6c:	4602      	mov	r2, r0
 8019d6e:	189b      	adds	r3, r3, r2
 8019d70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8019d74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8019d78:	460a      	mov	r2, r1
 8019d7a:	4153      	adcs	r3, r2
 8019d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 8019d80:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8019d84:	2200      	movs	r2, #0
 8019d86:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8019d8a:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8019d8e:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019d92:	2200      	movs	r2, #0
 8019d94:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8019d98:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8019d9c:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8019da0:	460b      	mov	r3, r1
 8019da2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8019da6:	fb02 f203 	mul.w	r2, r2, r3
 8019daa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8019dae:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 8019db2:	4601      	mov	r1, r0
 8019db4:	fb01 f303 	mul.w	r3, r1, r3
 8019db8:	4413      	add	r3, r2
 8019dba:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8019dbe:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8019dc2:	fba2 1201 	umull	r1, r2, r2, r1
 8019dc6:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8019dca:	460a      	mov	r2, r1
 8019dcc:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8019dd0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8019dd4:	4413      	add	r3, r2
 8019dd6:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8019dda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019dde:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8019de2:	4602      	mov	r2, r0
 8019de4:	189b      	adds	r3, r3, r2
 8019de6:	633b      	str	r3, [r7, #48]	@ 0x30
 8019de8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019dec:	460a      	mov	r2, r1
 8019dee:	4153      	adcs	r3, r2
 8019df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8019df2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8019df6:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8019dfa:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8019dfe:	2200      	movs	r2, #0
 8019e00:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8019e04:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8019e08:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8019e0c:	2200      	movs	r2, #0
 8019e0e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8019e12:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8019e16:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8019e1a:	460b      	mov	r3, r1
 8019e1c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8019e20:	fb02 f203 	mul.w	r2, r2, r3
 8019e24:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8019e28:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 8019e2c:	4601      	mov	r1, r0
 8019e2e:	fb01 f303 	mul.w	r3, r1, r3
 8019e32:	4413      	add	r3, r2
 8019e34:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8019e38:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8019e3c:	fba2 1201 	umull	r1, r2, r2, r1
 8019e40:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 8019e44:	460a      	mov	r2, r1
 8019e46:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 8019e4a:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8019e4e:	4413      	add	r3, r2
 8019e50:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8019e54:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8019e58:	2200      	movs	r2, #0
 8019e5a:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8019e5e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8019e62:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8019e66:	2200      	movs	r2, #0
 8019e68:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8019e6c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8019e70:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8019e74:	460b      	mov	r3, r1
 8019e76:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8019e7a:	fb02 f203 	mul.w	r2, r2, r3
 8019e7e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8019e82:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 8019e86:	4601      	mov	r1, r0
 8019e88:	fb01 f303 	mul.w	r3, r1, r3
 8019e8c:	4413      	add	r3, r2
 8019e8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8019e92:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 8019e96:	fba2 1201 	umull	r1, r2, r2, r1
 8019e9a:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8019e9e:	460a      	mov	r2, r1
 8019ea0:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 8019ea4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8019ea8:	4413      	add	r3, r2
 8019eaa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8019eae:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8019eb2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8019eb6:	4602      	mov	r2, r0
 8019eb8:	189b      	adds	r3, r3, r2
 8019eba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8019ebe:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8019ec2:	460a      	mov	r2, r1
 8019ec4:	4153      	adcs	r3, r2
 8019ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 8019eca:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019ece:	2200      	movs	r2, #0
 8019ed0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8019ed4:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8019ed8:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8019edc:	2200      	movs	r2, #0
 8019ede:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8019ee2:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8019ee6:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8019eea:	460b      	mov	r3, r1
 8019eec:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8019ef0:	fb02 f203 	mul.w	r2, r2, r3
 8019ef4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8019ef8:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 8019efc:	4601      	mov	r1, r0
 8019efe:	fb01 f303 	mul.w	r3, r1, r3
 8019f02:	4413      	add	r3, r2
 8019f04:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8019f08:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 8019f0c:	fba2 ab01 	umull	sl, fp, r2, r1
 8019f10:	445b      	add	r3, fp
 8019f12:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8019f14:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8019f18:	2200      	movs	r2, #0
 8019f1a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8019f1e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8019f22:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8019f26:	2200      	movs	r2, #0
 8019f28:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8019f2c:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8019f30:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8019f34:	460b      	mov	r3, r1
 8019f36:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8019f3a:	fb02 f203 	mul.w	r2, r2, r3
 8019f3e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8019f42:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 8019f46:	4601      	mov	r1, r0
 8019f48:	fb01 f303 	mul.w	r3, r1, r3
 8019f4c:	4413      	add	r3, r2
 8019f4e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8019f52:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 8019f56:	fba2 1201 	umull	r1, r2, r2, r1
 8019f5a:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8019f5e:	460a      	mov	r2, r1
 8019f60:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 8019f64:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8019f68:	4413      	add	r3, r2
 8019f6a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8019f6e:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8019f72:	460b      	mov	r3, r1
 8019f74:	eb1a 0303 	adds.w	r3, sl, r3
 8019f78:	653b      	str	r3, [r7, #80]	@ 0x50
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	eb4b 0303 	adc.w	r3, fp, r3
 8019f80:	657b      	str	r3, [r7, #84]	@ 0x54
 8019f82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8019f86:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8019f8a:	4602      	mov	r2, r0
 8019f8c:	189b      	adds	r3, r3, r2
 8019f8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8019f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8019f96:	460a      	mov	r2, r1
 8019f98:	4153      	adcs	r3, r2
 8019f9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 8019f9e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8019fa8:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 8019fac:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8019fb0:	2200      	movs	r2, #0
 8019fb2:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8019fb6:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 8019fba:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8019fbe:	460b      	mov	r3, r1
 8019fc0:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019fc4:	fb02 f203 	mul.w	r2, r2, r3
 8019fc8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8019fcc:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 8019fd0:	4601      	mov	r1, r0
 8019fd2:	fb01 f303 	mul.w	r3, r1, r3
 8019fd6:	4413      	add	r3, r2
 8019fd8:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8019fdc:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8019fe0:	fba2 1201 	umull	r1, r2, r2, r1
 8019fe4:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8019fe8:	460a      	mov	r2, r1
 8019fea:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8019fee:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8019ff2:	4413      	add	r3, r2
 8019ff4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8019ff8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8019ffc:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801a000:	4602      	mov	r2, r0
 801a002:	189b      	adds	r3, r3, r2
 801a004:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a006:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a00a:	460a      	mov	r2, r1
 801a00c:	4153      	adcs	r3, r2
 801a00e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a010:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801a014:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801a018:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801a01c:	2200      	movs	r2, #0
 801a01e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801a022:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 801a026:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801a02a:	2200      	movs	r2, #0
 801a02c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801a030:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 801a034:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801a038:	460b      	mov	r3, r1
 801a03a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801a03e:	fb02 f203 	mul.w	r2, r2, r3
 801a042:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801a046:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 801a04a:	4601      	mov	r1, r0
 801a04c:	fb01 f303 	mul.w	r3, r1, r3
 801a050:	4413      	add	r3, r2
 801a052:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801a056:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801a05a:	fba2 8901 	umull	r8, r9, r2, r1
 801a05e:	444b      	add	r3, r9
 801a060:	4699      	mov	r9, r3
 801a062:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801a066:	2200      	movs	r2, #0
 801a068:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801a06c:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 801a070:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801a074:	2200      	movs	r2, #0
 801a076:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801a07a:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 801a07e:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 801a082:	460b      	mov	r3, r1
 801a084:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801a088:	fb02 f203 	mul.w	r2, r2, r3
 801a08c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a090:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 801a094:	4601      	mov	r1, r0
 801a096:	fb01 f303 	mul.w	r3, r1, r3
 801a09a:	4413      	add	r3, r2
 801a09c:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801a0a0:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 801a0a4:	fba2 1201 	umull	r1, r2, r2, r1
 801a0a8:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 801a0ac:	460a      	mov	r2, r1
 801a0ae:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 801a0b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801a0b6:	4413      	add	r3, r2
 801a0b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801a0bc:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 801a0c0:	460b      	mov	r3, r1
 801a0c2:	eb18 0303 	adds.w	r3, r8, r3
 801a0c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a0ca:	4613      	mov	r3, r2
 801a0cc:	eb49 0303 	adc.w	r3, r9, r3
 801a0d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801a0d4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801a0d8:	2200      	movs	r2, #0
 801a0da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801a0de:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801a0e2:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801a0e6:	2200      	movs	r2, #0
 801a0e8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801a0ec:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801a0f0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 801a0f4:	460b      	mov	r3, r1
 801a0f6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801a0fa:	fb02 f203 	mul.w	r2, r2, r3
 801a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a102:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 801a106:	4601      	mov	r1, r0
 801a108:	fb01 f303 	mul.w	r3, r1, r3
 801a10c:	4413      	add	r3, r2
 801a10e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801a112:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 801a116:	fba2 4501 	umull	r4, r5, r2, r1
 801a11a:	442b      	add	r3, r5
 801a11c:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801a11e:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801a122:	2200      	movs	r2, #0
 801a124:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801a128:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801a12c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801a130:	2200      	movs	r2, #0
 801a132:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801a136:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 801a13a:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 801a13e:	460b      	mov	r3, r1
 801a140:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a144:	fb02 f203 	mul.w	r2, r2, r3
 801a148:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a14c:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 801a150:	4601      	mov	r1, r0
 801a152:	fb01 f303 	mul.w	r3, r1, r3
 801a156:	4413      	add	r3, r2
 801a158:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801a15c:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801a160:	fba2 1201 	umull	r1, r2, r2, r1
 801a164:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 801a168:	460a      	mov	r2, r1
 801a16a:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 801a16e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801a172:	4413      	add	r3, r2
 801a174:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801a178:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801a17c:	460b      	mov	r3, r1
 801a17e:	18e3      	adds	r3, r4, r3
 801a180:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a182:	4613      	mov	r3, r2
 801a184:	eb45 0303 	adc.w	r3, r5, r3
 801a188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a18a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a18e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801a192:	4602      	mov	r2, r0
 801a194:	189b      	adds	r3, r3, r2
 801a196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a19a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a19e:	460a      	mov	r2, r1
 801a1a0:	4153      	adcs	r3, r2
 801a1a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801a1a6:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801a1aa:	2200      	movs	r2, #0
 801a1ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801a1b0:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801a1b4:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801a1b8:	2200      	movs	r2, #0
 801a1ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801a1be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801a1c2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 801a1c6:	460b      	mov	r3, r1
 801a1c8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801a1cc:	fb02 f203 	mul.w	r2, r2, r3
 801a1d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801a1d4:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 801a1d8:	4601      	mov	r1, r0
 801a1da:	fb01 f303 	mul.w	r3, r1, r3
 801a1de:	4413      	add	r3, r2
 801a1e0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801a1e4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 801a1e8:	fba2 1201 	umull	r1, r2, r2, r1
 801a1ec:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801a1f0:	460a      	mov	r2, r1
 801a1f2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 801a1f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801a1fa:	4413      	add	r3, r2
 801a1fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801a200:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801a208:	4602      	mov	r2, r0
 801a20a:	189b      	adds	r3, r3, r2
 801a20c:	623b      	str	r3, [r7, #32]
 801a20e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a212:	460a      	mov	r2, r1
 801a214:	4153      	adcs	r3, r2
 801a216:	627b      	str	r3, [r7, #36]	@ 0x24
 801a218:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a21c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 801a220:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 801a224:	f04f 0000 	mov.w	r0, #0
 801a228:	f04f 0100 	mov.w	r1, #0
 801a22c:	0e90      	lsrs	r0, r2, #26
 801a22e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a232:	0e99      	lsrs	r1, r3, #26
 801a234:	4603      	mov	r3, r0
 801a236:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 801a23a:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801a23e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a242:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 801a246:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a24a:	2200      	movs	r2, #0
 801a24c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a250:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801a254:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801a258:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801a25c:	1851      	adds	r1, r2, r1
 801a25e:	61b9      	str	r1, [r7, #24]
 801a260:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801a264:	414b      	adcs	r3, r1
 801a266:	61fb      	str	r3, [r7, #28]
 801a268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a26c:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 801a270:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801a274:	f04f 0000 	mov.w	r0, #0
 801a278:	f04f 0100 	mov.w	r1, #0
 801a27c:	0e90      	lsrs	r0, r2, #26
 801a27e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a282:	0e99      	lsrs	r1, r3, #26
 801a284:	4603      	mov	r3, r0
 801a286:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 801a28a:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801a28e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a292:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 801a296:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a29a:	2200      	movs	r2, #0
 801a29c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a2a0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801a2a4:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801a2a8:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801a2ac:	1851      	adds	r1, r2, r1
 801a2ae:	6139      	str	r1, [r7, #16]
 801a2b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801a2b4:	414b      	adcs	r3, r1
 801a2b6:	617b      	str	r3, [r7, #20]
 801a2b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a2bc:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 801a2c0:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801a2c4:	f04f 0000 	mov.w	r0, #0
 801a2c8:	f04f 0100 	mov.w	r1, #0
 801a2cc:	0e90      	lsrs	r0, r2, #26
 801a2ce:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a2d2:	0e99      	lsrs	r1, r3, #26
 801a2d4:	4603      	mov	r3, r0
 801a2d6:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 801a2da:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 801a2de:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a2e2:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 801a2e6:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a2ea:	2200      	movs	r2, #0
 801a2ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a2ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801a2f0:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801a2f4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a2f6:	1851      	adds	r1, r2, r1
 801a2f8:	60b9      	str	r1, [r7, #8]
 801a2fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a2fc:	414b      	adcs	r3, r1
 801a2fe:	60fb      	str	r3, [r7, #12]
 801a300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a304:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 801a308:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801a30c:	f04f 0000 	mov.w	r0, #0
 801a310:	f04f 0100 	mov.w	r1, #0
 801a314:	0e90      	lsrs	r0, r2, #26
 801a316:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a31a:	0e99      	lsrs	r1, r3, #26
 801a31c:	4603      	mov	r3, r0
 801a31e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 801a322:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801a326:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a32a:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 801a32e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a332:	2200      	movs	r2, #0
 801a334:	673b      	str	r3, [r7, #112]	@ 0x70
 801a336:	677a      	str	r2, [r7, #116]	@ 0x74
 801a338:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801a33c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801a33e:	1851      	adds	r1, r2, r1
 801a340:	6039      	str	r1, [r7, #0]
 801a342:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801a344:	414b      	adcs	r3, r1
 801a346:	607b      	str	r3, [r7, #4]
 801a348:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a34c:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 801a350:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801a354:	f04f 0000 	mov.w	r0, #0
 801a358:	f04f 0100 	mov.w	r1, #0
 801a35c:	0e90      	lsrs	r0, r2, #26
 801a35e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a362:	0e99      	lsrs	r1, r3, #26
 801a364:	4603      	mov	r3, r0
 801a366:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 801a36a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 801a36e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a372:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 801a376:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 801a37a:	4613      	mov	r3, r2
 801a37c:	009b      	lsls	r3, r3, #2
 801a37e:	441a      	add	r2, r3
 801a380:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801a384:	4413      	add	r3, r2
 801a386:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 801a38a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801a38e:	0e9b      	lsrs	r3, r3, #26
 801a390:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 801a394:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801a398:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a39c:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 801a3a0:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801a3a4:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a3a8:	4413      	add	r3, r2
 801a3aa:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 801a3ae:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801a3b2:	3310      	adds	r3, #16
 801a3b4:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 801a3b8:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801a3bc:	3b10      	subs	r3, #16
 801a3be:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 801a3c2:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801a3c6:	2b0f      	cmp	r3, #15
 801a3c8:	f63f a983 	bhi.w	80196d2 <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 801a3cc:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a3d0:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 801a3d4:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 801a3d6:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a3da:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801a3de:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 801a3e0:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a3e4:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 801a3e8:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 801a3ea:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a3ee:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 801a3f2:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 801a3f4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a3f8:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 801a3fc:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801a3fe:	bf00      	nop
 801a400:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 801a404:	46bd      	mov	sp, r7
 801a406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801a40a <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 801a40a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a40e:	b0aa      	sub	sp, #168	@ 0xa8
 801a410:	af00      	add	r7, sp, #0
 801a412:	6678      	str	r0, [r7, #100]	@ 0x64
 801a414:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801a416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a418:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 801a41c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a422:	2b00      	cmp	r3, #0
 801a424:	d030      	beq.n	801a488 <poly1305_finish+0x7e>
    size_t i = st->leftover;
 801a426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a42c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 801a430:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801a434:	1c53      	adds	r3, r2, #1
 801a436:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801a43a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a43e:	441a      	add	r2, r3
 801a440:	2301      	movs	r3, #1
 801a442:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 801a446:	e00d      	b.n	801a464 <poly1305_finish+0x5a>
 801a448:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801a44c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a450:	4413      	add	r3, r2
 801a452:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801a456:	2300      	movs	r3, #0
 801a458:	7013      	strb	r3, [r2, #0]
 801a45a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a45e:	3301      	adds	r3, #1
 801a460:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801a464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a468:	2b0f      	cmp	r3, #15
 801a46a:	d9ed      	bls.n	801a448 <poly1305_finish+0x3e>
    st->final = 1;
 801a46c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801a470:	2301      	movs	r3, #1
 801a472:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801a476:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a47a:	333c      	adds	r3, #60	@ 0x3c
 801a47c:	2210      	movs	r2, #16
 801a47e:	4619      	mov	r1, r3
 801a480:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801a484:	f7ff f8be 	bl	8019604 <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 801a488:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a48c:	695b      	ldr	r3, [r3, #20]
 801a48e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 801a492:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a496:	699b      	ldr	r3, [r3, #24]
 801a498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 801a49c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a4a0:	69db      	ldr	r3, [r3, #28]
 801a4a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 801a4a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a4aa:	6a1b      	ldr	r3, [r3, #32]
 801a4ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 801a4b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 801a4ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a4be:	0e9b      	lsrs	r3, r3, #26
 801a4c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 801a4c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a4c8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a4cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 801a4d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a4d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a4d8:	4413      	add	r3, r2
 801a4da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 801a4de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a4e2:	0e9b      	lsrs	r3, r3, #26
 801a4e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 801a4e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a4ec:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a4f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 801a4f4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801a4f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a4fc:	4413      	add	r3, r2
 801a4fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 801a502:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a506:	0e9b      	lsrs	r3, r3, #26
 801a508:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 801a50c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a510:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a514:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 801a518:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a51c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a520:	4413      	add	r3, r2
 801a522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 801a526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a52a:	0e9b      	lsrs	r3, r3, #26
 801a52c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 801a530:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a534:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 801a53c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a540:	4613      	mov	r3, r2
 801a542:	009b      	lsls	r3, r3, #2
 801a544:	441a      	add	r2, r3
 801a546:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a54a:	4413      	add	r3, r2
 801a54c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 801a550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a554:	0e9b      	lsrs	r3, r3, #26
 801a556:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 801a55a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a55e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a562:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 801a566:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a56a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a56e:	4413      	add	r3, r2
 801a570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 801a574:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a578:	3305      	adds	r3, #5
 801a57a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 801a57e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a582:	0e9b      	lsrs	r3, r3, #26
 801a584:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 801a588:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a58c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a590:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 801a594:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a598:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a59c:	4413      	add	r3, r2
 801a59e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 801a5a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a5a6:	0e9b      	lsrs	r3, r3, #26
 801a5a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 801a5ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a5b0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a5b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 801a5b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a5bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a5c0:	4413      	add	r3, r2
 801a5c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 801a5c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a5c6:	0e9b      	lsrs	r3, r3, #26
 801a5c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 801a5cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a5ce:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a5d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 801a5d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801a5d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a5dc:	4413      	add	r3, r2
 801a5de:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 801a5e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5e2:	0e9b      	lsrs	r3, r3, #26
 801a5e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 801a5e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a5ea:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a5ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 801a5f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a5f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a5f8:	4413      	add	r3, r2
 801a5fa:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 801a5fe:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 801a600:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a602:	0fdb      	lsrs	r3, r3, #31
 801a604:	3b01      	subs	r3, #1
 801a606:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 801a608:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a60c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a60e:	4013      	ands	r3, r2
 801a610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 801a614:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a618:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a61a:	4013      	ands	r3, r2
 801a61c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 801a620:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a622:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a624:	4013      	ands	r3, r2
 801a626:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 801a628:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801a62a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a62c:	4013      	ands	r3, r2
 801a62e:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 801a630:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801a632:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a634:	4013      	ands	r3, r2
 801a636:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 801a638:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a63a:	43db      	mvns	r3, r3
 801a63c:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 801a63e:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801a642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a644:	401a      	ands	r2, r3
 801a646:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a64a:	4313      	orrs	r3, r2
 801a64c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 801a650:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a654:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a656:	401a      	ands	r2, r3
 801a658:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a65c:	4313      	orrs	r3, r2
 801a65e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 801a662:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a668:	401a      	ands	r2, r3
 801a66a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a66c:	4313      	orrs	r3, r2
 801a66e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 801a672:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801a676:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a678:	401a      	ands	r2, r3
 801a67a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a67c:	4313      	orrs	r3, r2
 801a67e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 801a682:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a686:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a688:	401a      	ands	r2, r3
 801a68a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a68c:	4313      	orrs	r3, r2
 801a68e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 801a692:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a696:	069a      	lsls	r2, r3, #26
 801a698:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a69c:	4313      	orrs	r3, r2
 801a69e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 801a6a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a6a6:	099a      	lsrs	r2, r3, #6
 801a6a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a6ac:	051b      	lsls	r3, r3, #20
 801a6ae:	4313      	orrs	r3, r2
 801a6b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 801a6b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a6b8:	0b1a      	lsrs	r2, r3, #12
 801a6ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a6be:	039b      	lsls	r3, r3, #14
 801a6c0:	4313      	orrs	r3, r2
 801a6c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 801a6c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a6ca:	0c9a      	lsrs	r2, r3, #18
 801a6cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a6d0:	021b      	lsls	r3, r3, #8
 801a6d2:	4313      	orrs	r3, r2
 801a6d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 801a6d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a6dc:	2200      	movs	r2, #0
 801a6de:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a6e0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801a6e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a6e8:	2200      	movs	r2, #0
 801a6ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a6ec:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801a6ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a6f0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801a6f4:	4602      	mov	r2, r0
 801a6f6:	189b      	adds	r3, r3, r2
 801a6f8:	61bb      	str	r3, [r7, #24]
 801a6fa:	460b      	mov	r3, r1
 801a6fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a6fe:	eb42 0303 	adc.w	r3, r2, r3
 801a702:	61fb      	str	r3, [r7, #28]
 801a704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a708:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 801a70c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a70e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 801a712:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a716:	2200      	movs	r2, #0
 801a718:	653b      	str	r3, [r7, #80]	@ 0x50
 801a71a:	657a      	str	r2, [r7, #84]	@ 0x54
 801a71c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a722:	2200      	movs	r2, #0
 801a724:	643b      	str	r3, [r7, #64]	@ 0x40
 801a726:	647a      	str	r2, [r7, #68]	@ 0x44
 801a728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a72a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801a72e:	4602      	mov	r2, r0
 801a730:	189c      	adds	r4, r3, r2
 801a732:	460b      	mov	r3, r1
 801a734:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a736:	eb42 0303 	adc.w	r3, r2, r3
 801a73a:	461d      	mov	r5, r3
 801a73c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801a740:	f04f 0000 	mov.w	r0, #0
 801a744:	f04f 0100 	mov.w	r1, #0
 801a748:	0018      	movs	r0, r3
 801a74a:	2100      	movs	r1, #0
 801a74c:	1823      	adds	r3, r4, r0
 801a74e:	613b      	str	r3, [r7, #16]
 801a750:	eb45 0301 	adc.w	r3, r5, r1
 801a754:	617b      	str	r3, [r7, #20]
 801a756:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801a75a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 801a75e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 801a764:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a768:	2200      	movs	r2, #0
 801a76a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a76c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801a76e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a774:	2200      	movs	r2, #0
 801a776:	633b      	str	r3, [r7, #48]	@ 0x30
 801a778:	637a      	str	r2, [r7, #52]	@ 0x34
 801a77a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801a77e:	4623      	mov	r3, r4
 801a780:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801a784:	4602      	mov	r2, r0
 801a786:	eb13 0a02 	adds.w	sl, r3, r2
 801a78a:	462b      	mov	r3, r5
 801a78c:	460a      	mov	r2, r1
 801a78e:	eb43 0b02 	adc.w	fp, r3, r2
 801a792:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801a796:	f04f 0200 	mov.w	r2, #0
 801a79a:	f04f 0300 	mov.w	r3, #0
 801a79e:	000a      	movs	r2, r1
 801a7a0:	2300      	movs	r3, #0
 801a7a2:	eb1a 0102 	adds.w	r1, sl, r2
 801a7a6:	60b9      	str	r1, [r7, #8]
 801a7a8:	eb4b 0303 	adc.w	r3, fp, r3
 801a7ac:	60fb      	str	r3, [r7, #12]
 801a7ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801a7b2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 801a7b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a7b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 801a7bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a7c0:	2200      	movs	r2, #0
 801a7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a7c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a7ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a7cc:	2200      	movs	r2, #0
 801a7ce:	623b      	str	r3, [r7, #32]
 801a7d0:	627a      	str	r2, [r7, #36]	@ 0x24
 801a7d2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801a7d6:	4623      	mov	r3, r4
 801a7d8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a7dc:	4602      	mov	r2, r0
 801a7de:	eb13 0802 	adds.w	r8, r3, r2
 801a7e2:	462b      	mov	r3, r5
 801a7e4:	460a      	mov	r2, r1
 801a7e6:	eb43 0902 	adc.w	r9, r3, r2
 801a7ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801a7ee:	f04f 0200 	mov.w	r2, #0
 801a7f2:	f04f 0300 	mov.w	r3, #0
 801a7f6:	000a      	movs	r2, r1
 801a7f8:	2300      	movs	r3, #0
 801a7fa:	eb18 0102 	adds.w	r1, r8, r2
 801a7fe:	6039      	str	r1, [r7, #0]
 801a800:	eb49 0303 	adc.w	r3, r9, r3
 801a804:	607b      	str	r3, [r7, #4]
 801a806:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a80a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 801a80e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a810:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 801a814:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801a818:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a81a:	f7fe fe56 	bl	80194ca <U32TO8>
  U32TO8(mac + 4, h1);
 801a81e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a820:	3304      	adds	r3, #4
 801a822:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801a826:	4618      	mov	r0, r3
 801a828:	f7fe fe4f 	bl	80194ca <U32TO8>
  U32TO8(mac + 8, h2);
 801a82c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a82e:	3308      	adds	r3, #8
 801a830:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801a834:	4618      	mov	r0, r3
 801a836:	f7fe fe48 	bl	80194ca <U32TO8>
  U32TO8(mac + 12, h3);
 801a83a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a83c:	330c      	adds	r3, #12
 801a83e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a842:	4618      	mov	r0, r3
 801a844:	f7fe fe41 	bl	80194ca <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 801a848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a84c:	2200      	movs	r2, #0
 801a84e:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801a850:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a854:	2200      	movs	r2, #0
 801a856:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801a858:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a85c:	2200      	movs	r2, #0
 801a85e:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801a860:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a864:	2200      	movs	r2, #0
 801a866:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801a868:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a86c:	2200      	movs	r2, #0
 801a86e:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 801a870:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a874:	2200      	movs	r2, #0
 801a876:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 801a878:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a87c:	2200      	movs	r2, #0
 801a87e:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 801a880:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a884:	2200      	movs	r2, #0
 801a886:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 801a888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a88c:	2200      	movs	r2, #0
 801a88e:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 801a890:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a894:	2200      	movs	r2, #0
 801a896:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 801a898:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a89c:	2200      	movs	r2, #0
 801a89e:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 801a8a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a8a4:	2200      	movs	r2, #0
 801a8a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 801a8a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 801a8b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a8b4:	2200      	movs	r2, #0
 801a8b6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801a8b8:	bf00      	nop
 801a8ba:	37a8      	adds	r7, #168	@ 0xa8
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801a8c2 <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 801a8c2:	b580      	push	{r7, lr}
 801a8c4:	b088      	sub	sp, #32
 801a8c6:	af00      	add	r7, sp, #0
 801a8c8:	60f8      	str	r0, [r7, #12]
 801a8ca:	60b9      	str	r1, [r7, #8]
 801a8cc:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 801a8d2:	697b      	ldr	r3, [r7, #20]
 801a8d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d03d      	beq.n	801a956 <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 801a8da:	697b      	ldr	r3, [r7, #20]
 801a8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a8de:	f1c3 0310 	rsb	r3, r3, #16
 801a8e2:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 801a8e4:	69ba      	ldr	r2, [r7, #24]
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	429a      	cmp	r2, r3
 801a8ea:	d901      	bls.n	801a8f0 <poly1305_update+0x2e>
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	61fb      	str	r3, [r7, #28]
 801a8f4:	e00f      	b.n	801a916 <poly1305_update+0x54>
 801a8f6:	68ba      	ldr	r2, [r7, #8]
 801a8f8:	69fb      	ldr	r3, [r7, #28]
 801a8fa:	441a      	add	r2, r3
 801a8fc:	697b      	ldr	r3, [r7, #20]
 801a8fe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801a900:	69fb      	ldr	r3, [r7, #28]
 801a902:	440b      	add	r3, r1
 801a904:	7811      	ldrb	r1, [r2, #0]
 801a906:	697a      	ldr	r2, [r7, #20]
 801a908:	4413      	add	r3, r2
 801a90a:	460a      	mov	r2, r1
 801a90c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801a910:	69fb      	ldr	r3, [r7, #28]
 801a912:	3301      	adds	r3, #1
 801a914:	61fb      	str	r3, [r7, #28]
 801a916:	69fa      	ldr	r2, [r7, #28]
 801a918:	69bb      	ldr	r3, [r7, #24]
 801a91a:	429a      	cmp	r2, r3
 801a91c:	d3eb      	bcc.n	801a8f6 <poly1305_update+0x34>
    bytes -= want;
 801a91e:	687a      	ldr	r2, [r7, #4]
 801a920:	69bb      	ldr	r3, [r7, #24]
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	607b      	str	r3, [r7, #4]
    m += want;
 801a926:	68ba      	ldr	r2, [r7, #8]
 801a928:	69bb      	ldr	r3, [r7, #24]
 801a92a:	4413      	add	r3, r2
 801a92c:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 801a92e:	697b      	ldr	r3, [r7, #20]
 801a930:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a932:	69bb      	ldr	r3, [r7, #24]
 801a934:	441a      	add	r2, r3
 801a936:	697b      	ldr	r3, [r7, #20]
 801a938:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 801a93a:	697b      	ldr	r3, [r7, #20]
 801a93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a93e:	2b0f      	cmp	r3, #15
 801a940:	d93e      	bls.n	801a9c0 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801a942:	697b      	ldr	r3, [r7, #20]
 801a944:	333c      	adds	r3, #60	@ 0x3c
 801a946:	2210      	movs	r2, #16
 801a948:	4619      	mov	r1, r3
 801a94a:	6978      	ldr	r0, [r7, #20]
 801a94c:	f7fe fe5a 	bl	8019604 <poly1305_blocks>
    st->leftover = 0;
 801a950:	697b      	ldr	r3, [r7, #20]
 801a952:	2200      	movs	r2, #0
 801a954:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	2b0f      	cmp	r3, #15
 801a95a:	d910      	bls.n	801a97e <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	f023 030f 	bic.w	r3, r3, #15
 801a962:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 801a964:	693a      	ldr	r2, [r7, #16]
 801a966:	68b9      	ldr	r1, [r7, #8]
 801a968:	6978      	ldr	r0, [r7, #20]
 801a96a:	f7fe fe4b 	bl	8019604 <poly1305_blocks>
    m += want;
 801a96e:	68ba      	ldr	r2, [r7, #8]
 801a970:	693b      	ldr	r3, [r7, #16]
 801a972:	4413      	add	r3, r2
 801a974:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 801a976:	687a      	ldr	r2, [r7, #4]
 801a978:	693b      	ldr	r3, [r7, #16]
 801a97a:	1ad3      	subs	r3, r2, r3
 801a97c:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d01e      	beq.n	801a9c2 <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 801a984:	2300      	movs	r3, #0
 801a986:	61fb      	str	r3, [r7, #28]
 801a988:	e00f      	b.n	801a9aa <poly1305_update+0xe8>
 801a98a:	68ba      	ldr	r2, [r7, #8]
 801a98c:	69fb      	ldr	r3, [r7, #28]
 801a98e:	441a      	add	r2, r3
 801a990:	697b      	ldr	r3, [r7, #20]
 801a992:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801a994:	69fb      	ldr	r3, [r7, #28]
 801a996:	440b      	add	r3, r1
 801a998:	7811      	ldrb	r1, [r2, #0]
 801a99a:	697a      	ldr	r2, [r7, #20]
 801a99c:	4413      	add	r3, r2
 801a99e:	460a      	mov	r2, r1
 801a9a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801a9a4:	69fb      	ldr	r3, [r7, #28]
 801a9a6:	3301      	adds	r3, #1
 801a9a8:	61fb      	str	r3, [r7, #28]
 801a9aa:	69fa      	ldr	r2, [r7, #28]
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	429a      	cmp	r2, r3
 801a9b0:	d3eb      	bcc.n	801a98a <poly1305_update+0xc8>
    st->leftover += bytes;
 801a9b2:	697b      	ldr	r3, [r7, #20]
 801a9b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	441a      	add	r2, r3
 801a9ba:	697b      	ldr	r3, [r7, #20]
 801a9bc:	639a      	str	r2, [r3, #56]	@ 0x38
 801a9be:	e000      	b.n	801a9c2 <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 801a9c0:	bf00      	nop
  }
}
 801a9c2:	3720      	adds	r7, #32
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	bd80      	pop	{r7, pc}

0801a9c8 <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b084      	sub	sp, #16
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	6078      	str	r0, [r7, #4]
 801a9d0:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 801a9d2:	683b      	ldr	r3, [r7, #0]
 801a9d4:	f003 030f 	and.w	r3, r3, #15
 801a9d8:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d007      	beq.n	801a9f0 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	f1c3 0310 	rsb	r3, r3, #16
 801a9e6:	461a      	mov	r2, r3
 801a9e8:	4903      	ldr	r1, [pc, #12]	@ (801a9f8 <pad_if_needed+0x30>)
 801a9ea:	6878      	ldr	r0, [r7, #4]
 801a9ec:	f7ff ff69 	bl	801a8c2 <poly1305_update>
  }
}
 801a9f0:	bf00      	nop
 801a9f2:	3710      	adds	r7, #16
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}
 801a9f8:	240010c0 	.word	0x240010c0

0801a9fc <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b086      	sub	sp, #24
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	60f8      	str	r0, [r7, #12]
 801aa04:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 801aa08:	783b      	ldrb	r3, [r7, #0]
 801aa0a:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 801aa0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801aa10:	f04f 0200 	mov.w	r2, #0
 801aa14:	f04f 0300 	mov.w	r3, #0
 801aa18:	0a02      	lsrs	r2, r0, #8
 801aa1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801aa1e:	0a0b      	lsrs	r3, r1, #8
 801aa20:	b2d3      	uxtb	r3, r2
 801aa22:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 801aa24:	e9d7 0100 	ldrd	r0, r1, [r7]
 801aa28:	f04f 0200 	mov.w	r2, #0
 801aa2c:	f04f 0300 	mov.w	r3, #0
 801aa30:	0c02      	lsrs	r2, r0, #16
 801aa32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801aa36:	0c0b      	lsrs	r3, r1, #16
 801aa38:	b2d3      	uxtb	r3, r2
 801aa3a:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 801aa3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801aa40:	f04f 0200 	mov.w	r2, #0
 801aa44:	f04f 0300 	mov.w	r3, #0
 801aa48:	0e02      	lsrs	r2, r0, #24
 801aa4a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801aa4e:	0e0b      	lsrs	r3, r1, #24
 801aa50:	b2d3      	uxtb	r3, r2
 801aa52:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 801aa54:	e9d7 0100 	ldrd	r0, r1, [r7]
 801aa58:	f04f 0200 	mov.w	r2, #0
 801aa5c:	f04f 0300 	mov.w	r3, #0
 801aa60:	000a      	movs	r2, r1
 801aa62:	2300      	movs	r3, #0
 801aa64:	b2d3      	uxtb	r3, r2
 801aa66:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 801aa68:	e9d7 0100 	ldrd	r0, r1, [r7]
 801aa6c:	f04f 0200 	mov.w	r2, #0
 801aa70:	f04f 0300 	mov.w	r3, #0
 801aa74:	0a0a      	lsrs	r2, r1, #8
 801aa76:	2300      	movs	r3, #0
 801aa78:	b2d3      	uxtb	r3, r2
 801aa7a:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 801aa7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801aa80:	f04f 0200 	mov.w	r2, #0
 801aa84:	f04f 0300 	mov.w	r3, #0
 801aa88:	0c0a      	lsrs	r2, r1, #16
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	b2d3      	uxtb	r3, r2
 801aa8e:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 801aa90:	e9d7 0100 	ldrd	r0, r1, [r7]
 801aa94:	f04f 0200 	mov.w	r2, #0
 801aa98:	f04f 0300 	mov.w	r3, #0
 801aa9c:	0e0a      	lsrs	r2, r1, #24
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	b2d3      	uxtb	r3, r2
 801aaa2:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 801aaa4:	f107 0310 	add.w	r3, r7, #16
 801aaa8:	2208      	movs	r2, #8
 801aaaa:	4619      	mov	r1, r3
 801aaac:	68f8      	ldr	r0, [r7, #12]
 801aaae:	f7ff ff08 	bl	801a8c2 <poly1305_update>
}
 801aab2:	bf00      	nop
 801aab4:	3718      	adds	r7, #24
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}

0801aaba <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 801aaba:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801aabe:	b0b0      	sub	sp, #192	@ 0xc0
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	60f8      	str	r0, [r7, #12]
 801aac4:	60b9      	str	r1, [r7, #8]
 801aac6:	607a      	str	r2, [r7, #4]
 801aac8:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 801aaca:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801aace:	2220      	movs	r2, #32
 801aad0:	2100      	movs	r1, #0
 801aad2:	4618      	mov	r0, r3
 801aad4:	f008 fd1f 	bl	8023516 <memset>
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 801aad8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801aadc:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801aae0:	6839      	ldr	r1, [r7, #0]
 801aae2:	4618      	mov	r0, r3
 801aae4:	f7fe fcb5 	bl	8019452 <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 801aae8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801aaec:	f107 0314 	add.w	r3, r7, #20
 801aaf0:	4611      	mov	r1, r2
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	f7fe fd0a 	bl	801950c <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 801aaf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d013      	beq.n	801ab28 <poly1305_calculate_mac+0x6e>
 801ab00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ab04:	2b00      	cmp	r3, #0
 801ab06:	d00f      	beq.n	801ab28 <poly1305_calculate_mac+0x6e>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 801ab08:	f107 0314 	add.w	r3, r7, #20
 801ab0c:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801ab10:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801ab14:	4618      	mov	r0, r3
 801ab16:	f7ff fed4 	bl	801a8c2 <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 801ab1a:	f107 0314 	add.w	r3, r7, #20
 801ab1e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801ab22:	4618      	mov	r0, r3
 801ab24:	f7ff ff50 	bl	801a9c8 <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 801ab28:	f107 0314 	add.w	r3, r7, #20
 801ab2c:	687a      	ldr	r2, [r7, #4]
 801ab2e:	68b9      	ldr	r1, [r7, #8]
 801ab30:	4618      	mov	r0, r3
 801ab32:	f7ff fec6 	bl	801a8c2 <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801ab36:	f107 0314 	add.w	r3, r7, #20
 801ab3a:	6879      	ldr	r1, [r7, #4]
 801ab3c:	4618      	mov	r0, r3
 801ab3e:	f7ff ff43 	bl	801a9c8 <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 801ab42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ab46:	2200      	movs	r2, #0
 801ab48:	4698      	mov	r8, r3
 801ab4a:	4691      	mov	r9, r2
 801ab4c:	f107 0114 	add.w	r1, r7, #20
 801ab50:	4642      	mov	r2, r8
 801ab52:	464b      	mov	r3, r9
 801ab54:	4608      	mov	r0, r1
 801ab56:	f7ff ff51 	bl	801a9fc <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801ab5a:	687b      	ldr	r3, [r7, #4]
 801ab5c:	2200      	movs	r2, #0
 801ab5e:	461c      	mov	r4, r3
 801ab60:	4615      	mov	r5, r2
 801ab62:	f107 0114 	add.w	r1, r7, #20
 801ab66:	4622      	mov	r2, r4
 801ab68:	462b      	mov	r3, r5
 801ab6a:	4608      	mov	r0, r1
 801ab6c:	f7ff ff46 	bl	801a9fc <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 801ab70:	f107 0314 	add.w	r3, r7, #20
 801ab74:	68f9      	ldr	r1, [r7, #12]
 801ab76:	4618      	mov	r0, r3
 801ab78:	f7ff fc47 	bl	801a40a <poly1305_finish>
}
 801ab7c:	bf00      	nop
 801ab7e:	37c0      	adds	r7, #192	@ 0xc0
 801ab80:	46bd      	mov	sp, r7
 801ab82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801ab86 <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 801ab86:	b580      	push	{r7, lr}
 801ab88:	b08a      	sub	sp, #40	@ 0x28
 801ab8a:	af04      	add	r7, sp, #16
 801ab8c:	60f8      	str	r0, [r7, #12]
 801ab8e:	60b9      	str	r1, [r7, #8]
 801ab90:	607a      	str	r2, [r7, #4]
 801ab92:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 801ab94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ab96:	3310      	adds	r3, #16
 801ab98:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 801ab9a:	68fa      	ldr	r2, [r7, #12]
 801ab9c:	697b      	ldr	r3, [r7, #20]
 801ab9e:	4413      	add	r3, r2
 801aba0:	461a      	mov	r2, r3
 801aba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aba4:	429a      	cmp	r2, r3
 801aba6:	d909      	bls.n	801abbc <mg_chacha20_poly1305_encrypt+0x36>
 801aba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801abaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abac:	4413      	add	r3, r2
 801abae:	461a      	mov	r2, r3
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	429a      	cmp	r2, r3
 801abb4:	d902      	bls.n	801abbc <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 801abb6:	f04f 33ff 	mov.w	r3, #4294967295
 801abba:	e018      	b.n	801abee <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 801abbc:	2301      	movs	r3, #1
 801abbe:	9301      	str	r3, [sp, #4]
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	9300      	str	r3, [sp, #0]
 801abc4:	68bb      	ldr	r3, [r7, #8]
 801abc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801abc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801abca:	68f8      	ldr	r0, [r7, #12]
 801abcc:	f7fe fbc9 	bl	8019362 <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 801abd0:	68fa      	ldr	r2, [r7, #12]
 801abd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abd4:	18d0      	adds	r0, r2, r3
 801abd6:	6a3b      	ldr	r3, [r7, #32]
 801abd8:	9302      	str	r3, [sp, #8]
 801abda:	683b      	ldr	r3, [r7, #0]
 801abdc:	9301      	str	r3, [sp, #4]
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	9300      	str	r3, [sp, #0]
 801abe2:	68bb      	ldr	r3, [r7, #8]
 801abe4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801abe6:	68f9      	ldr	r1, [r7, #12]
 801abe8:	f7ff ff67 	bl	801aaba <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 801abec:	697b      	ldr	r3, [r7, #20]
}
 801abee:	4618      	mov	r0, r3
 801abf0:	3718      	adds	r7, #24
 801abf2:	46bd      	mov	sp, r7
 801abf4:	bd80      	pop	{r7, pc}

0801abf6 <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 801abf6:	b580      	push	{r7, lr}
 801abf8:	b088      	sub	sp, #32
 801abfa:	af02      	add	r7, sp, #8
 801abfc:	60f8      	str	r0, [r7, #12]
 801abfe:	60b9      	str	r1, [r7, #8]
 801ac00:	607a      	str	r2, [r7, #4]
 801ac02:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 801ac04:	6a3b      	ldr	r3, [r7, #32]
 801ac06:	3b10      	subs	r3, #16
 801ac08:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 801ac0a:	683a      	ldr	r2, [r7, #0]
 801ac0c:	6a3b      	ldr	r3, [r7, #32]
 801ac0e:	4413      	add	r3, r2
 801ac10:	461a      	mov	r2, r3
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	429a      	cmp	r2, r3
 801ac16:	d909      	bls.n	801ac2c <mg_chacha20_poly1305_decrypt+0x36>
 801ac18:	68fa      	ldr	r2, [r7, #12]
 801ac1a:	697b      	ldr	r3, [r7, #20]
 801ac1c:	4413      	add	r3, r2
 801ac1e:	461a      	mov	r2, r3
 801ac20:	683b      	ldr	r3, [r7, #0]
 801ac22:	429a      	cmp	r2, r3
 801ac24:	d902      	bls.n	801ac2c <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801ac26:	f04f 33ff 	mov.w	r3, #4294967295
 801ac2a:	e00a      	b.n	801ac42 <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 801ac2c:	2301      	movs	r3, #1
 801ac2e:	9301      	str	r3, [sp, #4]
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	9300      	str	r3, [sp, #0]
 801ac34:	68bb      	ldr	r3, [r7, #8]
 801ac36:	697a      	ldr	r2, [r7, #20]
 801ac38:	6839      	ldr	r1, [r7, #0]
 801ac3a:	68f8      	ldr	r0, [r7, #12]
 801ac3c:	f7fe fb91 	bl	8019362 <chacha20_xor_stream>
  return actual_size;
 801ac40:	697b      	ldr	r3, [r7, #20]
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	3718      	adds	r7, #24
 801ac46:	46bd      	mov	sp, r7
 801ac48:	bd80      	pop	{r7, pc}

0801ac4a <bi_initialize>:

/**
 * @brief Start a new bigint context.
 * @return A bigint context.
 */
NS_INTERNAL BI_CTX *bi_initialize(void) {
 801ac4a:	b580      	push	{r7, lr}
 801ac4c:	b082      	sub	sp, #8
 801ac4e:	af00      	add	r7, sp, #0
  /* calloc() sets everything to zero */
  BI_CTX *ctx = (BI_CTX *) calloc(1, sizeof(BI_CTX));
 801ac50:	2138      	movs	r1, #56	@ 0x38
 801ac52:	2001      	movs	r0, #1
 801ac54:	f008 f98a 	bl	8022f6c <calloc>
 801ac58:	4603      	mov	r3, r0
 801ac5a:	607b      	str	r3, [r7, #4]

  /* the radix */
  ctx->bi_radix = alloc(ctx, 2);
 801ac5c:	2102      	movs	r1, #2
 801ac5e:	6878      	ldr	r0, [r7, #4]
 801ac60:	f000 fefe 	bl	801ba60 <alloc>
 801ac64:	4602      	mov	r2, r0
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	609a      	str	r2, [r3, #8]
  ctx->bi_radix->comps[0] = 0;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	689b      	ldr	r3, [r3, #8]
 801ac6e:	68db      	ldr	r3, [r3, #12]
 801ac70:	2200      	movs	r2, #0
 801ac72:	601a      	str	r2, [r3, #0]
  ctx->bi_radix->comps[1] = 1;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	689b      	ldr	r3, [r3, #8]
 801ac78:	68db      	ldr	r3, [r3, #12]
 801ac7a:	3304      	adds	r3, #4
 801ac7c:	2201      	movs	r2, #1
 801ac7e:	601a      	str	r2, [r3, #0]
  bi_permanent(ctx->bi_radix);
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	689b      	ldr	r3, [r3, #8]
 801ac84:	4618      	mov	r0, r3
 801ac86:	f000 f81d 	bl	801acc4 <bi_permanent>
  return ctx;
 801ac8a:	687b      	ldr	r3, [r7, #4]
}
 801ac8c:	4618      	mov	r0, r3
 801ac8e:	3708      	adds	r7, #8
 801ac90:	46bd      	mov	sp, r7
 801ac92:	bd80      	pop	{r7, pc}

0801ac94 <bi_copy>:
 * @brief Increment the number of references to this object.
 * It does not do a full copy.
 * @param bi [in]   The bigint to copy.
 * @return A reference to the same bigint.
 */
NS_INTERNAL bigint *bi_copy(bigint *bi) {
 801ac94:	b480      	push	{r7}
 801ac96:	b083      	sub	sp, #12
 801ac98:	af00      	add	r7, sp, #0
 801ac9a:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) bi->refs++;
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	689b      	ldr	r3, [r3, #8]
 801aca0:	4a07      	ldr	r2, [pc, #28]	@ (801acc0 <bi_copy+0x2c>)
 801aca2:	4293      	cmp	r3, r2
 801aca4:	d004      	beq.n	801acb0 <bi_copy+0x1c>
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	689b      	ldr	r3, [r3, #8]
 801acaa:	1c5a      	adds	r2, r3, #1
 801acac:	687b      	ldr	r3, [r7, #4]
 801acae:	609a      	str	r2, [r3, #8]
  return bi;
 801acb0:	687b      	ldr	r3, [r7, #4]
}
 801acb2:	4618      	mov	r0, r3
 801acb4:	370c      	adds	r7, #12
 801acb6:	46bd      	mov	sp, r7
 801acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acbc:	4770      	bx	lr
 801acbe:	bf00      	nop
 801acc0:	7fff55aa 	.word	0x7fff55aa

0801acc4 <bi_permanent>:
 * @brief Simply make a bigint object "unfreeable" if bi_free() is called on it.
 *
 * For this object to be freed, bi_depermanent() must be called.
 * @param bi [in]   The bigint to be made permanent.
 */
NS_INTERNAL void bi_permanent(bigint *bi) {
 801acc4:	b580      	push	{r7, lr}
 801acc6:	b082      	sub	sp, #8
 801acc8:	af00      	add	r7, sp, #0
 801acca:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != 1) {
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	689b      	ldr	r3, [r3, #8]
 801acd0:	2b01      	cmp	r3, #1
 801acd2:	d001      	beq.n	801acd8 <bi_permanent+0x14>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_permanent: refs was not 1\n");
#endif
    abort();
 801acd4:	f008 f920 	bl	8022f18 <abort>
  }

  bi->refs = PERMANENT;
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	4a03      	ldr	r2, [pc, #12]	@ (801ace8 <bi_permanent+0x24>)
 801acdc:	609a      	str	r2, [r3, #8]
}
 801acde:	bf00      	nop
 801ace0:	3708      	adds	r7, #8
 801ace2:	46bd      	mov	sp, r7
 801ace4:	bd80      	pop	{r7, pc}
 801ace6:	bf00      	nop
 801ace8:	7fff55aa 	.word	0x7fff55aa

0801acec <bi_depermanent>:

/**
 * @brief Take a permanent object and make it eligible for freedom.
 * @param bi [in]   The bigint to be made back to temporary.
 */
NS_INTERNAL void bi_depermanent(bigint *bi) {
 801acec:	b580      	push	{r7, lr}
 801acee:	b082      	sub	sp, #8
 801acf0:	af00      	add	r7, sp, #0
 801acf2:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) {
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	689b      	ldr	r3, [r3, #8]
 801acf8:	4a05      	ldr	r2, [pc, #20]	@ (801ad10 <bi_depermanent+0x24>)
 801acfa:	4293      	cmp	r3, r2
 801acfc:	d001      	beq.n	801ad02 <bi_depermanent+0x16>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_depermanent: bigint was not permanent\n");
#endif
    abort();
 801acfe:	f008 f90b 	bl	8022f18 <abort>
  }

  bi->refs = 1;
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	2201      	movs	r2, #1
 801ad06:	609a      	str	r2, [r3, #8]
}
 801ad08:	bf00      	nop
 801ad0a:	3708      	adds	r7, #8
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	bd80      	pop	{r7, pc}
 801ad10:	7fff55aa 	.word	0x7fff55aa

0801ad14 <bi_free>:
 *
 * The memory itself it not actually freed, just tagged as being available
 * @param ctx [in]   The bigint session context.
 * @param bi [in]    The bigint to be freed.
 */
NS_INTERNAL void bi_free(BI_CTX *ctx, bigint *bi) {
 801ad14:	b580      	push	{r7, lr}
 801ad16:	b082      	sub	sp, #8
 801ad18:	af00      	add	r7, sp, #0
 801ad1a:	6078      	str	r0, [r7, #4]
 801ad1c:	6039      	str	r1, [r7, #0]
  check(bi);
  if (bi->refs == PERMANENT) {
 801ad1e:	683b      	ldr	r3, [r7, #0]
 801ad20:	689b      	ldr	r3, [r3, #8]
 801ad22:	4a14      	ldr	r2, [pc, #80]	@ (801ad74 <bi_free+0x60>)
 801ad24:	4293      	cmp	r3, r2
 801ad26:	d01f      	beq.n	801ad68 <bi_free+0x54>
    return;
  }

  if (--bi->refs > 0) {
 801ad28:	683b      	ldr	r3, [r7, #0]
 801ad2a:	689b      	ldr	r3, [r3, #8]
 801ad2c:	1e5a      	subs	r2, r3, #1
 801ad2e:	683b      	ldr	r3, [r7, #0]
 801ad30:	609a      	str	r2, [r3, #8]
 801ad32:	683b      	ldr	r3, [r7, #0]
 801ad34:	689b      	ldr	r3, [r3, #8]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	dc18      	bgt.n	801ad6c <bi_free+0x58>
    return;
  }

  bi->next = ctx->free_list;
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	685a      	ldr	r2, [r3, #4]
 801ad3e:	683b      	ldr	r3, [r7, #0]
 801ad40:	601a      	str	r2, [r3, #0]
  ctx->free_list = bi;
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	683a      	ldr	r2, [r7, #0]
 801ad46:	605a      	str	r2, [r3, #4]
  ctx->free_count++;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ad4c:	1c5a      	adds	r2, r3, #1
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	631a      	str	r2, [r3, #48]	@ 0x30

  if (--ctx->active_count < 0) {
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad56:	1e5a      	subs	r2, r3, #1
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ad60:	2b00      	cmp	r3, #0
 801ad62:	da04      	bge.n	801ad6e <bi_free+0x5a>
#ifdef CONFIG_SSL_FULL_MODE
    printf(
        "bi_free: active_count went negative "
        "- double-freed bigint?\n");
#endif
    abort();
 801ad64:	f008 f8d8 	bl	8022f18 <abort>
    return;
 801ad68:	bf00      	nop
 801ad6a:	e000      	b.n	801ad6e <bi_free+0x5a>
    return;
 801ad6c:	bf00      	nop
  }
}
 801ad6e:	3708      	adds	r7, #8
 801ad70:	46bd      	mov	sp, r7
 801ad72:	bd80      	pop	{r7, pc}
 801ad74:	7fff55aa 	.word	0x7fff55aa

0801ad78 <int_to_bi>:
 * @brief Convert an (unsigned) integer into a bigint.
 * @param ctx [in]   The bigint session context.
 * @param i [in]     The (unsigned) integer to be converted.
 *
 */
NS_INTERNAL bigint *int_to_bi(BI_CTX *ctx, comp i) {
 801ad78:	b580      	push	{r7, lr}
 801ad7a:	b084      	sub	sp, #16
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
 801ad80:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, 1);
 801ad82:	2101      	movs	r1, #1
 801ad84:	6878      	ldr	r0, [r7, #4]
 801ad86:	f000 fe6b 	bl	801ba60 <alloc>
 801ad8a:	60f8      	str	r0, [r7, #12]
  biR->comps[0] = i;
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	68db      	ldr	r3, [r3, #12]
 801ad90:	683a      	ldr	r2, [r7, #0]
 801ad92:	601a      	str	r2, [r3, #0]
  return biR;
 801ad94:	68fb      	ldr	r3, [r7, #12]
}
 801ad96:	4618      	mov	r0, r3
 801ad98:	3710      	adds	r7, #16
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	bd80      	pop	{r7, pc}

0801ad9e <bi_clone>:
/**
 * @brief Do a full copy of the bigint object.
 * @param ctx [in]   The bigint session context.
 * @param bi  [in]   The bigint object to be copied.
 */
NS_INTERNAL bigint *bi_clone(BI_CTX *ctx, const bigint *bi) {
 801ad9e:	b580      	push	{r7, lr}
 801ada0:	b084      	sub	sp, #16
 801ada2:	af00      	add	r7, sp, #0
 801ada4:	6078      	str	r0, [r7, #4]
 801ada6:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, bi->size);
 801ada8:	683b      	ldr	r3, [r7, #0]
 801adaa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801adae:	4619      	mov	r1, r3
 801adb0:	6878      	ldr	r0, [r7, #4]
 801adb2:	f000 fe55 	bl	801ba60 <alloc>
 801adb6:	60f8      	str	r0, [r7, #12]
  check(bi);
  memcpy(biR->comps, bi->comps, (size_t) bi->size * COMP_BYTE_SIZE);
 801adb8:	68fb      	ldr	r3, [r7, #12]
 801adba:	68d8      	ldr	r0, [r3, #12]
 801adbc:	683b      	ldr	r3, [r7, #0]
 801adbe:	68d9      	ldr	r1, [r3, #12]
 801adc0:	683b      	ldr	r3, [r7, #0]
 801adc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801adc6:	009b      	lsls	r3, r3, #2
 801adc8:	461a      	mov	r2, r3
 801adca:	f008 fcda 	bl	8023782 <memcpy>
  return biR;
 801adce:	68fb      	ldr	r3, [r7, #12]
}
 801add0:	4618      	mov	r0, r3
 801add2:	3710      	adds	r7, #16
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}

0801add8 <bi_add>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the addition.
 */
NS_INTERNAL bigint *bi_add(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801add8:	b580      	push	{r7, lr}
 801adda:	b08c      	sub	sp, #48	@ 0x30
 801addc:	af00      	add	r7, sp, #0
 801adde:	60f8      	str	r0, [r7, #12]
 801ade0:	60b9      	str	r1, [r7, #8]
 801ade2:	607a      	str	r2, [r7, #4]
  int n;
  comp carry = 0;
 801ade4:	2300      	movs	r3, #0
 801ade6:	62bb      	str	r3, [r7, #40]	@ 0x28
  comp *pa, *pb;

  check(bia);
  check(bib);

  n = MAX(bia->size, bib->size);
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801adee:	68bb      	ldr	r3, [r7, #8]
 801adf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801adf4:	4293      	cmp	r3, r2
 801adf6:	bfb8      	it	lt
 801adf8:	4613      	movlt	r3, r2
 801adfa:	b21b      	sxth	r3, r3
 801adfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  more_comps(bia, n + 1);
 801adfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae00:	3301      	adds	r3, #1
 801ae02:	4619      	mov	r1, r3
 801ae04:	68b8      	ldr	r0, [r7, #8]
 801ae06:	f000 fdcf 	bl	801b9a8 <more_comps>
  more_comps(bib, n);
 801ae0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ae0c:	6878      	ldr	r0, [r7, #4]
 801ae0e:	f000 fdcb 	bl	801b9a8 <more_comps>
  pa = bia->comps;
 801ae12:	68bb      	ldr	r3, [r7, #8]
 801ae14:	68db      	ldr	r3, [r3, #12]
 801ae16:	627b      	str	r3, [r7, #36]	@ 0x24
  pb = bib->comps;
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	68db      	ldr	r3, [r3, #12]
 801ae1c:	623b      	str	r3, [r7, #32]

  do {
    comp sl, rl, cy1;
    sl = *pa + *pb++;
 801ae1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae20:	681a      	ldr	r2, [r3, #0]
 801ae22:	6a3b      	ldr	r3, [r7, #32]
 801ae24:	1d19      	adds	r1, r3, #4
 801ae26:	6239      	str	r1, [r7, #32]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	4413      	add	r3, r2
 801ae2c:	61fb      	str	r3, [r7, #28]
    rl = sl + carry;
 801ae2e:	69fa      	ldr	r2, [r7, #28]
 801ae30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae32:	4413      	add	r3, r2
 801ae34:	61bb      	str	r3, [r7, #24]
    cy1 = sl < *pa;
 801ae36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	69fa      	ldr	r2, [r7, #28]
 801ae3c:	429a      	cmp	r2, r3
 801ae3e:	bf34      	ite	cc
 801ae40:	2301      	movcc	r3, #1
 801ae42:	2300      	movcs	r3, #0
 801ae44:	b2db      	uxtb	r3, r3
 801ae46:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl < sl);
 801ae48:	69ba      	ldr	r2, [r7, #24]
 801ae4a:	69fb      	ldr	r3, [r7, #28]
 801ae4c:	429a      	cmp	r2, r3
 801ae4e:	bf34      	ite	cc
 801ae50:	2301      	movcc	r3, #1
 801ae52:	2300      	movcs	r3, #0
 801ae54:	b2db      	uxtb	r3, r3
 801ae56:	461a      	mov	r2, r3
 801ae58:	697b      	ldr	r3, [r7, #20]
 801ae5a:	4313      	orrs	r3, r2
 801ae5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pa++ = rl;
 801ae5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae60:	1d1a      	adds	r2, r3, #4
 801ae62:	627a      	str	r2, [r7, #36]	@ 0x24
 801ae64:	69ba      	ldr	r2, [r7, #24]
 801ae66:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801ae68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae6a:	3b01      	subs	r3, #1
 801ae6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ae6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d1d4      	bne.n	801ae1e <bi_add+0x46>

  *pa = carry; /* do overflow */
 801ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ae78:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bib);
 801ae7a:	6879      	ldr	r1, [r7, #4]
 801ae7c:	68f8      	ldr	r0, [r7, #12]
 801ae7e:	f7ff ff49 	bl	801ad14 <bi_free>
  return trim(bia);
 801ae82:	68b8      	ldr	r0, [r7, #8]
 801ae84:	f000 fe9d 	bl	801bbc2 <trim>
 801ae88:	4603      	mov	r3, r0
}
 801ae8a:	4618      	mov	r0, r3
 801ae8c:	3730      	adds	r7, #48	@ 0x30
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	bd80      	pop	{r7, pc}

0801ae92 <bi_subtract>:
 * @param is_negative [out] If defined, indicates that the result was negative.
 * is_negative may be null.
 * @return The result of the subtraction. The result is always positive.
 */
NS_INTERNAL bigint *bi_subtract(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int *is_negative) {
 801ae92:	b580      	push	{r7, lr}
 801ae94:	b08c      	sub	sp, #48	@ 0x30
 801ae96:	af00      	add	r7, sp, #0
 801ae98:	60f8      	str	r0, [r7, #12]
 801ae9a:	60b9      	str	r1, [r7, #8]
 801ae9c:	607a      	str	r2, [r7, #4]
 801ae9e:	603b      	str	r3, [r7, #0]
  int n = bia->size;
 801aea0:	68bb      	ldr	r3, [r7, #8]
 801aea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  comp *pa, *pb, carry = 0;
 801aea8:	2300      	movs	r3, #0
 801aeaa:	623b      	str	r3, [r7, #32]

  check(bia);
  check(bib);

  more_comps(bib, n);
 801aeac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aeae:	6878      	ldr	r0, [r7, #4]
 801aeb0:	f000 fd7a 	bl	801b9a8 <more_comps>
  pa = bia->comps;
 801aeb4:	68bb      	ldr	r3, [r7, #8]
 801aeb6:	68db      	ldr	r3, [r3, #12]
 801aeb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pb = bib->comps;
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	68db      	ldr	r3, [r3, #12]
 801aebe:	627b      	str	r3, [r7, #36]	@ 0x24

  do {
    comp sl, rl, cy1;
    sl = *pa - *pb++;
 801aec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aec2:	681a      	ldr	r2, [r3, #0]
 801aec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aec6:	1d19      	adds	r1, r3, #4
 801aec8:	6279      	str	r1, [r7, #36]	@ 0x24
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	1ad3      	subs	r3, r2, r3
 801aece:	61fb      	str	r3, [r7, #28]
    rl = sl - carry;
 801aed0:	69fa      	ldr	r2, [r7, #28]
 801aed2:	6a3b      	ldr	r3, [r7, #32]
 801aed4:	1ad3      	subs	r3, r2, r3
 801aed6:	61bb      	str	r3, [r7, #24]
    cy1 = sl > *pa;
 801aed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	69fa      	ldr	r2, [r7, #28]
 801aede:	429a      	cmp	r2, r3
 801aee0:	bf8c      	ite	hi
 801aee2:	2301      	movhi	r3, #1
 801aee4:	2300      	movls	r3, #0
 801aee6:	b2db      	uxtb	r3, r3
 801aee8:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl > sl);
 801aeea:	69ba      	ldr	r2, [r7, #24]
 801aeec:	69fb      	ldr	r3, [r7, #28]
 801aeee:	429a      	cmp	r2, r3
 801aef0:	bf8c      	ite	hi
 801aef2:	2301      	movhi	r3, #1
 801aef4:	2300      	movls	r3, #0
 801aef6:	b2db      	uxtb	r3, r3
 801aef8:	461a      	mov	r2, r3
 801aefa:	697b      	ldr	r3, [r7, #20]
 801aefc:	4313      	orrs	r3, r2
 801aefe:	623b      	str	r3, [r7, #32]
    *pa++ = rl;
 801af00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af02:	1d1a      	adds	r2, r3, #4
 801af04:	62ba      	str	r2, [r7, #40]	@ 0x28
 801af06:	69ba      	ldr	r2, [r7, #24]
 801af08:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801af0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af0c:	3b01      	subs	r3, #1
 801af0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801af10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af12:	2b00      	cmp	r3, #0
 801af14:	d1d4      	bne.n	801aec0 <bi_subtract+0x2e>

  if (is_negative) /* indicate a negative result */
 801af16:	683b      	ldr	r3, [r7, #0]
 801af18:	2b00      	cmp	r3, #0
 801af1a:	d002      	beq.n	801af22 <bi_subtract+0x90>
  {
    *is_negative = (int) carry;
 801af1c:	6a3a      	ldr	r2, [r7, #32]
 801af1e:	683b      	ldr	r3, [r7, #0]
 801af20:	601a      	str	r2, [r3, #0]
  }

  bi_free(ctx, trim(bib)); /* put bib back to the way it was */
 801af22:	6878      	ldr	r0, [r7, #4]
 801af24:	f000 fe4d 	bl	801bbc2 <trim>
 801af28:	4603      	mov	r3, r0
 801af2a:	4619      	mov	r1, r3
 801af2c:	68f8      	ldr	r0, [r7, #12]
 801af2e:	f7ff fef1 	bl	801ad14 <bi_free>
  return trim(bia);
 801af32:	68b8      	ldr	r0, [r7, #8]
 801af34:	f000 fe45 	bl	801bbc2 <trim>
 801af38:	4603      	mov	r3, r0
}
 801af3a:	4618      	mov	r0, r3
 801af3c:	3730      	adds	r7, #48	@ 0x30
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}

0801af42 <bi_int_multiply>:

/**
 * Perform a multiply between a bigint an an (unsigned) integer
 */
static bigint *bi_int_multiply(BI_CTX *ctx, bigint *bia, comp b) {
 801af42:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801af46:	b094      	sub	sp, #80	@ 0x50
 801af48:	af00      	add	r7, sp, #0
 801af4a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801af4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 801af4e:	627a      	str	r2, [r7, #36]	@ 0x24
  int j = 0, n = bia->size;
 801af50:	2300      	movs	r3, #0
 801af52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801af54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801af5a:	643b      	str	r3, [r7, #64]	@ 0x40
  bigint *biR = alloc(ctx, n + 1);
 801af5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801af5e:	3301      	adds	r3, #1
 801af60:	4619      	mov	r1, r3
 801af62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801af64:	f000 fd7c 	bl	801ba60 <alloc>
 801af68:	63f8      	str	r0, [r7, #60]	@ 0x3c
  comp carry = 0;
 801af6a:	2300      	movs	r3, #0
 801af6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  comp *r = biR->comps;
 801af6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801af70:	68db      	ldr	r3, [r3, #12]
 801af72:	647b      	str	r3, [r7, #68]	@ 0x44
  comp *a = bia->comps;
 801af74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af76:	68db      	ldr	r3, [r3, #12]
 801af78:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);

  /* clear things to start with */
  memset(r, 0, (size_t) ((n + 1) * COMP_BYTE_SIZE));
 801af7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801af7c:	3301      	adds	r3, #1
 801af7e:	009b      	lsls	r3, r3, #2
 801af80:	461a      	mov	r2, r3
 801af82:	2100      	movs	r1, #0
 801af84:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801af86:	f008 fac6 	bl	8023516 <memset>

  do {
    long_comp tmp = *r + (long_comp) a[j] * b + carry;
 801af8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	2200      	movs	r2, #0
 801af90:	61bb      	str	r3, [r7, #24]
 801af92:	61fa      	str	r2, [r7, #28]
 801af94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801af96:	009a      	lsls	r2, r3, #2
 801af98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801af9a:	4413      	add	r3, r2
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	2200      	movs	r2, #0
 801afa0:	613b      	str	r3, [r7, #16]
 801afa2:	617a      	str	r2, [r7, #20]
 801afa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afa6:	2200      	movs	r2, #0
 801afa8:	469a      	mov	sl, r3
 801afaa:	4693      	mov	fp, r2
 801afac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801afb0:	460b      	mov	r3, r1
 801afb2:	fb0a f203 	mul.w	r2, sl, r3
 801afb6:	4603      	mov	r3, r0
 801afb8:	fb03 f30b 	mul.w	r3, r3, fp
 801afbc:	4413      	add	r3, r2
 801afbe:	4602      	mov	r2, r0
 801afc0:	fba2 450a 	umull	r4, r5, r2, sl
 801afc4:	442b      	add	r3, r5
 801afc6:	461d      	mov	r5, r3
 801afc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801afcc:	460b      	mov	r3, r1
 801afce:	eb13 0804 	adds.w	r8, r3, r4
 801afd2:	4613      	mov	r3, r2
 801afd4:	eb43 0905 	adc.w	r9, r3, r5
 801afd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801afda:	2200      	movs	r2, #0
 801afdc:	60bb      	str	r3, [r7, #8]
 801afde:	60fa      	str	r2, [r7, #12]
 801afe0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801afe4:	460b      	mov	r3, r1
 801afe6:	eb18 0303 	adds.w	r3, r8, r3
 801afea:	603b      	str	r3, [r7, #0]
 801afec:	4613      	mov	r3, r2
 801afee:	eb49 0303 	adc.w	r3, r9, r3
 801aff2:	607b      	str	r3, [r7, #4]
 801aff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801aff8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    *r++ = (comp) tmp; /* downsize */
 801affc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801affe:	1d13      	adds	r3, r2, #4
 801b000:	647b      	str	r3, [r7, #68]	@ 0x44
 801b002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b004:	6013      	str	r3, [r2, #0]
    carry = (comp)(tmp >> COMP_BIT_SIZE);
 801b006:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801b00a:	f04f 0000 	mov.w	r0, #0
 801b00e:	f04f 0100 	mov.w	r1, #0
 801b012:	0018      	movs	r0, r3
 801b014:	2100      	movs	r1, #0
 801b016:	4603      	mov	r3, r0
 801b018:	64bb      	str	r3, [r7, #72]	@ 0x48
  } while (++j < n);
 801b01a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b01c:	3301      	adds	r3, #1
 801b01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b020:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b024:	429a      	cmp	r2, r3
 801b026:	dbb0      	blt.n	801af8a <bi_int_multiply+0x48>

  *r = carry;
 801b028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b02a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b02c:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bia);
 801b02e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b030:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b032:	f7ff fe6f 	bl	801ad14 <bi_free>
  return trim(biR);
 801b036:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801b038:	f000 fdc3 	bl	801bbc2 <trim>
 801b03c:	4603      	mov	r3, r0
}
 801b03e:	4618      	mov	r0, r3
 801b040:	3750      	adds	r7, #80	@ 0x50
 801b042:	46bd      	mov	sp, r7
 801b044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b048 <bi_divide>:
 * @param v [in]    Either the denominator or the modulus depending on the mode.
 * @param is_mod [n] Determines if this is a normal division (0) or a reduction
 * (1).
 * @return  The result of the division/reduction.
 */
NS_INTERNAL bigint *bi_divide(BI_CTX *ctx, bigint *u, bigint *v, int is_mod) {
 801b048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b04c:	b0a0      	sub	sp, #128	@ 0x80
 801b04e:	af00      	add	r7, sp, #0
 801b050:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801b052:	64b9      	str	r1, [r7, #72]	@ 0x48
 801b054:	647a      	str	r2, [r7, #68]	@ 0x44
 801b056:	643b      	str	r3, [r7, #64]	@ 0x40
  int n = v->size, m = u->size - n;
 801b058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b05a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b05e:	673b      	str	r3, [r7, #112]	@ 0x70
 801b060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b062:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b066:	461a      	mov	r2, r3
 801b068:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b06a:	1ad3      	subs	r3, r2, r3
 801b06c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int j = 0, orig_u_size = u->size;
 801b06e:	2300      	movs	r3, #0
 801b070:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801b072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b074:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b078:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint8_t mod_offset = ctx->mod_offset;
 801b07a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b07c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801b080:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  check(u);
  check(v);

  /* if doing reduction and we are < mod, then return mod */
  if (is_mod && bi_compare(v, u) > 0) {
 801b084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b086:	2b00      	cmp	r3, #0
 801b088:	d00c      	beq.n	801b0a4 <bi_divide+0x5c>
 801b08a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801b08c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b08e:	f000 fc36 	bl	801b8fe <bi_compare>
 801b092:	4603      	mov	r3, r0
 801b094:	2b00      	cmp	r3, #0
 801b096:	dd05      	ble.n	801b0a4 <bi_divide+0x5c>
    bi_free(ctx, v);
 801b098:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b09a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b09c:	f7ff fe3a 	bl	801ad14 <bi_free>
    return u;
 801b0a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b0a2:	e1fe      	b.n	801b4a2 <bi_divide+0x45a>
  }

  quotient = alloc(ctx, m + 1);
 801b0a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b0a6:	3301      	adds	r3, #1
 801b0a8:	4619      	mov	r1, r3
 801b0aa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b0ac:	f000 fcd8 	bl	801ba60 <alloc>
 801b0b0:	6638      	str	r0, [r7, #96]	@ 0x60
  tmp_u = alloc(ctx, n + 1);
 801b0b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b0b4:	3301      	adds	r3, #1
 801b0b6:	4619      	mov	r1, r3
 801b0b8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b0ba:	f000 fcd1 	bl	801ba60 <alloc>
 801b0be:	67b8      	str	r0, [r7, #120]	@ 0x78
  v = trim(v); /* make sure we have no leading 0's */
 801b0c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b0c2:	f000 fd7e 	bl	801bbc2 <trim>
 801b0c6:	6478      	str	r0, [r7, #68]	@ 0x44
  d = (comp)((long_comp) COMP_RADIX / (V1 + 1));
 801b0c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b0ca:	68d9      	ldr	r1, [r3, #12]
 801b0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b0ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b0d2:	461a      	mov	r2, r3
 801b0d4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b0d8:	4413      	add	r3, r2
 801b0da:	009b      	lsls	r3, r3, #2
 801b0dc:	440b      	add	r3, r1
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	3301      	adds	r3, #1
 801b0e2:	2200      	movs	r2, #0
 801b0e4:	461c      	mov	r4, r3
 801b0e6:	4615      	mov	r5, r2
 801b0e8:	4622      	mov	r2, r4
 801b0ea:	462b      	mov	r3, r5
 801b0ec:	f04f 0000 	mov.w	r0, #0
 801b0f0:	f04f 0101 	mov.w	r1, #1
 801b0f4:	f7e5 f974 	bl	80003e0 <__aeabi_uldivmod>
 801b0f8:	4602      	mov	r2, r0
 801b0fa:	460b      	mov	r3, r1
 801b0fc:	4613      	mov	r3, r2
 801b0fe:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* clear things to start with */
  memset(quotient->comps, 0, (size_t) ((quotient->size) * COMP_BYTE_SIZE));
 801b100:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b102:	68d8      	ldr	r0, [r3, #12]
 801b104:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b106:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b10a:	009b      	lsls	r3, r3, #2
 801b10c:	461a      	mov	r2, r3
 801b10e:	2100      	movs	r1, #0
 801b110:	f008 fa01 	bl	8023516 <memset>

  /* normalise */
  if (d > 1) {
 801b114:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b116:	2b01      	cmp	r3, #1
 801b118:	d916      	bls.n	801b148 <bi_divide+0x100>
    u = bi_int_multiply(ctx, u, d);
 801b11a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b11c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801b11e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b120:	f7ff ff0f 	bl	801af42 <bi_int_multiply>
 801b124:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (is_mod) {
 801b126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d007      	beq.n	801b13c <bi_divide+0xf4>
      v = ctx->bi_normalised_mod[mod_offset];
 801b12c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b130:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b132:	3306      	adds	r3, #6
 801b134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b138:	647b      	str	r3, [r7, #68]	@ 0x44
 801b13a:	e005      	b.n	801b148 <bi_divide+0x100>
    } else {
      v = bi_int_multiply(ctx, v, d);
 801b13c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b13e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b140:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b142:	f7ff fefe 	bl	801af42 <bi_int_multiply>
 801b146:	6478      	str	r0, [r7, #68]	@ 0x44
    }
  }

  if (orig_u_size == u->size) /* new digit position u0 */
 801b148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b14a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b14e:	461a      	mov	r2, r3
 801b150:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b152:	4293      	cmp	r3, r2
 801b154:	d105      	bne.n	801b162 <bi_divide+0x11a>
  {
    more_comps(u, orig_u_size + 1);
 801b156:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b158:	3301      	adds	r3, #1
 801b15a:	4619      	mov	r1, r3
 801b15c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801b15e:	f000 fc23 	bl	801b9a8 <more_comps>
  }

  do {
    /* get a temporary short version of u */
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801b162:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b164:	68d8      	ldr	r0, [r3, #12]
 801b166:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b168:	68d9      	ldr	r1, [r3, #12]
 801b16a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b16c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b170:	461a      	mov	r2, r3
 801b172:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b174:	1ad3      	subs	r3, r2, r3
 801b176:	1e5a      	subs	r2, r3, #1
 801b178:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b17a:	1ad3      	subs	r3, r2, r3
 801b17c:	009b      	lsls	r3, r3, #2
 801b17e:	4419      	add	r1, r3
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801b180:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b182:	3301      	adds	r3, #1
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801b184:	009b      	lsls	r3, r3, #2
 801b186:	461a      	mov	r2, r3
 801b188:	f008 fafb 	bl	8023782 <memcpy>

    /* calculate q' */
    if (U(0) == V1) {
 801b18c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b18e:	68d9      	ldr	r1, [r3, #12]
 801b190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b192:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b196:	461a      	mov	r2, r3
 801b198:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b19c:	4413      	add	r3, r2
 801b19e:	009b      	lsls	r3, r3, #2
 801b1a0:	440b      	add	r3, r1
 801b1a2:	6818      	ldr	r0, [r3, #0]
 801b1a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b1a6:	68d9      	ldr	r1, [r3, #12]
 801b1a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b1aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b1ae:	461a      	mov	r2, r3
 801b1b0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b1b4:	4413      	add	r3, r2
 801b1b6:	009b      	lsls	r3, r3, #2
 801b1b8:	440b      	add	r3, r1
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	4298      	cmp	r0, r3
 801b1be:	d103      	bne.n	801b1c8 <bi_divide+0x180>
      q_dash = COMP_RADIX - 1;
 801b1c0:	f04f 33ff 	mov.w	r3, #4294967295
 801b1c4:	677b      	str	r3, [r7, #116]	@ 0x74
 801b1c6:	e0c2      	b.n	801b34e <bi_divide+0x306>
    } else {
      q_dash = (comp)(((long_comp) U(0) * COMP_RADIX + U(1)) / V1);
 801b1c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b1ca:	68d9      	ldr	r1, [r3, #12]
 801b1cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b1ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b1d2:	461a      	mov	r2, r3
 801b1d4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b1d8:	4413      	add	r3, r2
 801b1da:	009b      	lsls	r3, r3, #2
 801b1dc:	440b      	add	r3, r1
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	633b      	str	r3, [r7, #48]	@ 0x30
 801b1e4:	637a      	str	r2, [r7, #52]	@ 0x34
 801b1e6:	f04f 0000 	mov.w	r0, #0
 801b1ea:	f04f 0100 	mov.w	r1, #0
 801b1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b1f0:	0019      	movs	r1, r3
 801b1f2:	2000      	movs	r0, #0
 801b1f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b1f6:	68dc      	ldr	r4, [r3, #12]
 801b1f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b1fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b1fe:	461a      	mov	r2, r3
 801b200:	4baa      	ldr	r3, [pc, #680]	@ (801b4ac <bi_divide+0x464>)
 801b202:	4413      	add	r3, r2
 801b204:	009b      	lsls	r3, r3, #2
 801b206:	4423      	add	r3, r4
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	2200      	movs	r2, #0
 801b20c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b20e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b210:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801b214:	4623      	mov	r3, r4
 801b216:	18c3      	adds	r3, r0, r3
 801b218:	623b      	str	r3, [r7, #32]
 801b21a:	462b      	mov	r3, r5
 801b21c:	eb41 0303 	adc.w	r3, r1, r3
 801b220:	627b      	str	r3, [r7, #36]	@ 0x24
 801b222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b224:	68d9      	ldr	r1, [r3, #12]
 801b226:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b228:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b22c:	461a      	mov	r2, r3
 801b22e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b232:	4413      	add	r3, r2
 801b234:	009b      	lsls	r3, r3, #2
 801b236:	440b      	add	r3, r1
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	2200      	movs	r2, #0
 801b23c:	61bb      	str	r3, [r7, #24]
 801b23e:	61fa      	str	r2, [r7, #28]
 801b240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b244:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801b248:	f7e5 f8ca 	bl	80003e0 <__aeabi_uldivmod>
 801b24c:	4602      	mov	r2, r0
 801b24e:	460b      	mov	r3, r1
 801b250:	4613      	mov	r3, r2
 801b252:	677b      	str	r3, [r7, #116]	@ 0x74

      if (v->size > 1 && V2) {
 801b254:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b256:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b25a:	2b01      	cmp	r3, #1
 801b25c:	dd77      	ble.n	801b34e <bi_divide+0x306>
 801b25e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b260:	68d9      	ldr	r1, [r3, #12]
 801b262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b264:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b268:	461a      	mov	r2, r3
 801b26a:	4b90      	ldr	r3, [pc, #576]	@ (801b4ac <bi_divide+0x464>)
 801b26c:	4413      	add	r3, r2
 801b26e:	009b      	lsls	r3, r3, #2
 801b270:	440b      	add	r3, r1
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d06a      	beq.n	801b34e <bi_divide+0x306>
        /* we are implementing the following:
        if (V2*q_dash > (((U(0)*COMP_RADIX + U(1) -
                q_dash*V1)*COMP_RADIX) + U(2))) ... */
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801b278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b27a:	68d9      	ldr	r1, [r3, #12]
 801b27c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b27e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b282:	461a      	mov	r2, r3
 801b284:	4b89      	ldr	r3, [pc, #548]	@ (801b4ac <bi_divide+0x464>)
 801b286:	4413      	add	r3, r2
 801b288:	009b      	lsls	r3, r3, #2
 801b28a:	440b      	add	r3, r1
 801b28c:	6818      	ldr	r0, [r3, #0]
                            (long_comp) q_dash * V1);
 801b28e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b290:	68d9      	ldr	r1, [r3, #12]
 801b292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b294:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b298:	461a      	mov	r2, r3
 801b29a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b29e:	4413      	add	r3, r2
 801b2a0:	009b      	lsls	r3, r3, #2
 801b2a2:	440b      	add	r3, r1
 801b2a4:	681a      	ldr	r2, [r3, #0]
 801b2a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b2a8:	fb02 f303 	mul.w	r3, r2, r3
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801b2ac:	1ac3      	subs	r3, r0, r3
 801b2ae:	65bb      	str	r3, [r7, #88]	@ 0x58
        if ((long_comp) V2 * q_dash > (long_comp) inner * COMP_RADIX + U(2)) {
 801b2b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b2b2:	68d9      	ldr	r1, [r3, #12]
 801b2b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b2b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b2ba:	461a      	mov	r2, r3
 801b2bc:	4b7b      	ldr	r3, [pc, #492]	@ (801b4ac <bi_divide+0x464>)
 801b2be:	4413      	add	r3, r2
 801b2c0:	009b      	lsls	r3, r3, #2
 801b2c2:	440b      	add	r3, r1
 801b2c4:	681b      	ldr	r3, [r3, #0]
 801b2c6:	2200      	movs	r2, #0
 801b2c8:	613b      	str	r3, [r7, #16]
 801b2ca:	617a      	str	r2, [r7, #20]
 801b2cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b2d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801b2d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801b2d8:	462b      	mov	r3, r5
 801b2da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801b2de:	4602      	mov	r2, r0
 801b2e0:	fb02 f203 	mul.w	r2, r2, r3
 801b2e4:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 801b2e8:	460b      	mov	r3, r1
 801b2ea:	4621      	mov	r1, r4
 801b2ec:	fb01 f303 	mul.w	r3, r1, r3
 801b2f0:	4413      	add	r3, r2
 801b2f2:	4622      	mov	r2, r4
 801b2f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b2f6:	fba2 8901 	umull	r8, r9, r2, r1
 801b2fa:	444b      	add	r3, r9
 801b2fc:	4699      	mov	r9, r3
 801b2fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b300:	2200      	movs	r2, #0
 801b302:	60bb      	str	r3, [r7, #8]
 801b304:	60fa      	str	r2, [r7, #12]
 801b306:	f04f 0000 	mov.w	r0, #0
 801b30a:	f04f 0100 	mov.w	r1, #0
 801b30e:	68bb      	ldr	r3, [r7, #8]
 801b310:	0019      	movs	r1, r3
 801b312:	2000      	movs	r0, #0
 801b314:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b316:	68dc      	ldr	r4, [r3, #12]
 801b318:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b31a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b31e:	461a      	mov	r2, r3
 801b320:	4b63      	ldr	r3, [pc, #396]	@ (801b4b0 <bi_divide+0x468>)
 801b322:	4413      	add	r3, r2
 801b324:	009b      	lsls	r3, r3, #2
 801b326:	4423      	add	r3, r4
 801b328:	681b      	ldr	r3, [r3, #0]
 801b32a:	2200      	movs	r2, #0
 801b32c:	603b      	str	r3, [r7, #0]
 801b32e:	607a      	str	r2, [r7, #4]
 801b330:	e9d7 4500 	ldrd	r4, r5, [r7]
 801b334:	4623      	mov	r3, r4
 801b336:	eb10 0a03 	adds.w	sl, r0, r3
 801b33a:	462b      	mov	r3, r5
 801b33c:	eb41 0b03 	adc.w	fp, r1, r3
 801b340:	45c2      	cmp	sl, r8
 801b342:	eb7b 0309 	sbcs.w	r3, fp, r9
 801b346:	d202      	bcs.n	801b34e <bi_divide+0x306>
          q_dash--;
 801b348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b34a:	3b01      	subs	r3, #1
 801b34c:	677b      	str	r3, [r7, #116]	@ 0x74
        }
      }
    }

    /* multiply and subtract */
    if (q_dash) {
 801b34e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b350:	2b00      	cmp	r3, #0
 801b352:	d057      	beq.n	801b404 <bi_divide+0x3bc>
      int is_negative;
      tmp_u = bi_subtract(ctx, tmp_u, bi_int_multiply(ctx, bi_copy(v), q_dash),
 801b354:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b356:	f7ff fc9d 	bl	801ac94 <bi_copy>
 801b35a:	4603      	mov	r3, r0
 801b35c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801b35e:	4619      	mov	r1, r3
 801b360:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b362:	f7ff fdee 	bl	801af42 <bi_int_multiply>
 801b366:	4602      	mov	r2, r0
 801b368:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801b36c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801b36e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b370:	f7ff fd8f 	bl	801ae92 <bi_subtract>
 801b374:	67b8      	str	r0, [r7, #120]	@ 0x78
                          &is_negative);
      more_comps(tmp_u, n + 1);
 801b376:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b378:	3301      	adds	r3, #1
 801b37a:	4619      	mov	r1, r3
 801b37c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 801b37e:	f000 fb13 	bl	801b9a8 <more_comps>

      Q(j) = q_dash;
 801b382:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b384:	68d9      	ldr	r1, [r3, #12]
 801b386:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b388:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b38c:	461a      	mov	r2, r3
 801b38e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b390:	1ad3      	subs	r3, r2, r3
 801b392:	461a      	mov	r2, r3
 801b394:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b398:	4413      	add	r3, r2
 801b39a:	009b      	lsls	r3, r3, #2
 801b39c:	18ca      	adds	r2, r1, r3
 801b39e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b3a0:	6013      	str	r3, [r2, #0]

      /* add back */
      if (is_negative) {
 801b3a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d03d      	beq.n	801b424 <bi_divide+0x3dc>
        Q(j)--;
 801b3a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b3aa:	68d9      	ldr	r1, [r3, #12]
 801b3ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b3ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b3b2:	461a      	mov	r2, r3
 801b3b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b3b6:	1ad3      	subs	r3, r2, r3
 801b3b8:	461a      	mov	r2, r3
 801b3ba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b3be:	4413      	add	r3, r2
 801b3c0:	009b      	lsls	r3, r3, #2
 801b3c2:	18ca      	adds	r2, r1, r3
 801b3c4:	6813      	ldr	r3, [r2, #0]
 801b3c6:	3b01      	subs	r3, #1
 801b3c8:	6013      	str	r3, [r2, #0]
        tmp_u = bi_add(ctx, tmp_u, bi_copy(v));
 801b3ca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b3cc:	f7ff fc62 	bl	801ac94 <bi_copy>
 801b3d0:	4603      	mov	r3, r0
 801b3d2:	461a      	mov	r2, r3
 801b3d4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801b3d6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b3d8:	f7ff fcfe 	bl	801add8 <bi_add>
 801b3dc:	67b8      	str	r0, [r7, #120]	@ 0x78

        /* lop off the carry */
        tmp_u->size--;
 801b3de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b3e0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b3e4:	b29b      	uxth	r3, r3
 801b3e6:	3b01      	subs	r3, #1
 801b3e8:	b29b      	uxth	r3, r3
 801b3ea:	b21b      	sxth	r3, r3
 801b3ec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801b3ee:	8093      	strh	r3, [r2, #4]
        v->size--;
 801b3f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b3f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b3f6:	b29b      	uxth	r3, r3
 801b3f8:	3b01      	subs	r3, #1
 801b3fa:	b29b      	uxth	r3, r3
 801b3fc:	b21b      	sxth	r3, r3
 801b3fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b400:	8093      	strh	r3, [r2, #4]
 801b402:	e00f      	b.n	801b424 <bi_divide+0x3dc>
      }
    } else {
      Q(j) = 0;
 801b404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b406:	68d9      	ldr	r1, [r3, #12]
 801b408:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b40a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b40e:	461a      	mov	r2, r3
 801b410:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b412:	1ad3      	subs	r3, r2, r3
 801b414:	461a      	mov	r2, r3
 801b416:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b41a:	4413      	add	r3, r2
 801b41c:	009b      	lsls	r3, r3, #2
 801b41e:	18ca      	adds	r2, r1, r3
 801b420:	2300      	movs	r3, #0
 801b422:	6013      	str	r3, [r2, #0]
    }

    /* copy back to u */
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801b424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b426:	68d9      	ldr	r1, [r3, #12]
 801b428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b42a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b42e:	461a      	mov	r2, r3
 801b430:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b432:	1ad3      	subs	r3, r2, r3
 801b434:	1e5a      	subs	r2, r3, #1
 801b436:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b438:	1ad3      	subs	r3, r2, r3
 801b43a:	009b      	lsls	r3, r3, #2
 801b43c:	18c8      	adds	r0, r1, r3
 801b43e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b440:	68d9      	ldr	r1, [r3, #12]
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801b442:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b444:	3301      	adds	r3, #1
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801b446:	009b      	lsls	r3, r3, #2
 801b448:	461a      	mov	r2, r3
 801b44a:	f008 f99a 	bl	8023782 <memcpy>
  } while (++j <= m);
 801b44e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b450:	3301      	adds	r3, #1
 801b452:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801b454:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801b456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b458:	429a      	cmp	r2, r3
 801b45a:	f77f ae82 	ble.w	801b162 <bi_divide+0x11a>

  bi_free(ctx, tmp_u);
 801b45e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801b460:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b462:	f7ff fc57 	bl	801ad14 <bi_free>
  bi_free(ctx, v);
 801b466:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b468:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b46a:	f7ff fc53 	bl	801ad14 <bi_free>

  if (is_mod) /* get the remainder */
 801b46e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b470:	2b00      	cmp	r3, #0
 801b472:	d00e      	beq.n	801b492 <bi_divide+0x44a>
  {
    bi_free(ctx, quotient);
 801b474:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b476:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b478:	f7ff fc4c 	bl	801ad14 <bi_free>
    return bi_int_divide(ctx, trim(u), d);
 801b47c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801b47e:	f000 fba0 	bl	801bbc2 <trim>
 801b482:	4603      	mov	r3, r0
 801b484:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b486:	4619      	mov	r1, r3
 801b488:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b48a:	f000 f813 	bl	801b4b4 <bi_int_divide>
 801b48e:	4603      	mov	r3, r0
 801b490:	e007      	b.n	801b4a2 <bi_divide+0x45a>
  } else /* get the quotient */
  {
    bi_free(ctx, u);
 801b492:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801b494:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b496:	f7ff fc3d 	bl	801ad14 <bi_free>
    return trim(quotient);
 801b49a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801b49c:	f000 fb91 	bl	801bbc2 <trim>
 801b4a0:	4603      	mov	r3, r0
  }
}
 801b4a2:	4618      	mov	r0, r3
 801b4a4:	3780      	adds	r7, #128	@ 0x80
 801b4a6:	46bd      	mov	sp, r7
 801b4a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b4ac:	3ffffffe 	.word	0x3ffffffe
 801b4b0:	3ffffffd 	.word	0x3ffffffd

0801b4b4 <bi_int_divide>:

/*
 * Perform an integer divide on a bigint.
 */
static bigint *bi_int_divide(BI_CTX *ctx, bigint *biR, comp denom) {
 801b4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b4b8:	b08a      	sub	sp, #40	@ 0x28
 801b4ba:	af00      	add	r7, sp, #0
 801b4bc:	6178      	str	r0, [r7, #20]
 801b4be:	6139      	str	r1, [r7, #16]
 801b4c0:	60fa      	str	r2, [r7, #12]
  int i = biR->size - 1;
 801b4c2:	693b      	ldr	r3, [r7, #16]
 801b4c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b4c8:	3b01      	subs	r3, #1
 801b4ca:	627b      	str	r3, [r7, #36]	@ 0x24
  long_comp r = 0;
 801b4cc:	f04f 0200 	mov.w	r2, #0
 801b4d0:	f04f 0300 	mov.w	r3, #0
 801b4d4:	e9c7 2306 	strd	r2, r3, [r7, #24]

  (void) ctx;
  check(biR);

  do {
    r = (r << COMP_BIT_SIZE) + biR->comps[i];
 801b4d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b4dc:	f04f 0200 	mov.w	r2, #0
 801b4e0:	f04f 0300 	mov.w	r3, #0
 801b4e4:	0003      	movs	r3, r0
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	6939      	ldr	r1, [r7, #16]
 801b4ea:	68c8      	ldr	r0, [r1, #12]
 801b4ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b4ee:	0089      	lsls	r1, r1, #2
 801b4f0:	4401      	add	r1, r0
 801b4f2:	6809      	ldr	r1, [r1, #0]
 801b4f4:	2000      	movs	r0, #0
 801b4f6:	460c      	mov	r4, r1
 801b4f8:	4605      	mov	r5, r0
 801b4fa:	eb12 0804 	adds.w	r8, r2, r4
 801b4fe:	eb43 0905 	adc.w	r9, r3, r5
 801b502:	e9c7 8906 	strd	r8, r9, [r7, #24]
    biR->comps[i] = (comp)(r / denom);
 801b506:	68fb      	ldr	r3, [r7, #12]
 801b508:	2200      	movs	r2, #0
 801b50a:	603b      	str	r3, [r7, #0]
 801b50c:	607a      	str	r2, [r7, #4]
 801b50e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b512:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b516:	f7e4 ff63 	bl	80003e0 <__aeabi_uldivmod>
 801b51a:	4602      	mov	r2, r0
 801b51c:	460b      	mov	r3, r1
 801b51e:	4610      	mov	r0, r2
 801b520:	4619      	mov	r1, r3
 801b522:	693b      	ldr	r3, [r7, #16]
 801b524:	68da      	ldr	r2, [r3, #12]
 801b526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b528:	009b      	lsls	r3, r3, #2
 801b52a:	4413      	add	r3, r2
 801b52c:	4602      	mov	r2, r0
 801b52e:	601a      	str	r2, [r3, #0]
    r %= denom;
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	2200      	movs	r2, #0
 801b534:	469a      	mov	sl, r3
 801b536:	4693      	mov	fp, r2
 801b538:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b53c:	4652      	mov	r2, sl
 801b53e:	465b      	mov	r3, fp
 801b540:	f7e4 ff4e 	bl	80003e0 <__aeabi_uldivmod>
 801b544:	e9c7 2306 	strd	r2, r3, [r7, #24]
  } while (--i >= 0);
 801b548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b54a:	3b01      	subs	r3, #1
 801b54c:	627b      	str	r3, [r7, #36]	@ 0x24
 801b54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b550:	2b00      	cmp	r3, #0
 801b552:	dac1      	bge.n	801b4d8 <bi_int_divide+0x24>

  return trim(biR);
 801b554:	6938      	ldr	r0, [r7, #16]
 801b556:	f000 fb34 	bl	801bbc2 <trim>
 801b55a:	4603      	mov	r3, r0
}
 801b55c:	4618      	mov	r0, r3
 801b55e:	3728      	adds	r7, #40	@ 0x28
 801b560:	46bd      	mov	sp, r7
 801b562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b566 <bi_import>:
 * @param ctx [in]  The bigint session context.
 * @param data [in] The data to be converted.
 * @param size [in] The number of bytes of data.
 * @return A bigint representing this data.
 */
NS_INTERNAL bigint *bi_import(BI_CTX *ctx, const uint8_t *data, int size) {
 801b566:	b580      	push	{r7, lr}
 801b568:	b088      	sub	sp, #32
 801b56a:	af00      	add	r7, sp, #0
 801b56c:	60f8      	str	r0, [r7, #12]
 801b56e:	60b9      	str	r1, [r7, #8]
 801b570:	607a      	str	r2, [r7, #4]
  bigint *biR = alloc(ctx, (size + COMP_BYTE_SIZE - 1) / COMP_BYTE_SIZE);
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	3303      	adds	r3, #3
 801b576:	2b00      	cmp	r3, #0
 801b578:	da00      	bge.n	801b57c <bi_import+0x16>
 801b57a:	3303      	adds	r3, #3
 801b57c:	109b      	asrs	r3, r3, #2
 801b57e:	4619      	mov	r1, r3
 801b580:	68f8      	ldr	r0, [r7, #12]
 801b582:	f000 fa6d 	bl	801ba60 <alloc>
 801b586:	6138      	str	r0, [r7, #16]
  int i, j = 0, offset = 0;
 801b588:	2300      	movs	r3, #0
 801b58a:	61bb      	str	r3, [r7, #24]
 801b58c:	2300      	movs	r3, #0
 801b58e:	617b      	str	r3, [r7, #20]

  memset(biR->comps, 0, (size_t) (biR->size * COMP_BYTE_SIZE));
 801b590:	693b      	ldr	r3, [r7, #16]
 801b592:	68d8      	ldr	r0, [r3, #12]
 801b594:	693b      	ldr	r3, [r7, #16]
 801b596:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b59a:	009b      	lsls	r3, r3, #2
 801b59c:	461a      	mov	r2, r3
 801b59e:	2100      	movs	r1, #0
 801b5a0:	f007 ffb9 	bl	8023516 <memset>

  for (i = size - 1; i >= 0; i--) {
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	3b01      	subs	r3, #1
 801b5a8:	61fb      	str	r3, [r7, #28]
 801b5aa:	e022      	b.n	801b5f2 <bi_import+0x8c>
    biR->comps[offset] += (comp) data[i] << (j * 8);
 801b5ac:	693b      	ldr	r3, [r7, #16]
 801b5ae:	68da      	ldr	r2, [r3, #12]
 801b5b0:	697b      	ldr	r3, [r7, #20]
 801b5b2:	009b      	lsls	r3, r3, #2
 801b5b4:	4413      	add	r3, r2
 801b5b6:	6819      	ldr	r1, [r3, #0]
 801b5b8:	69fb      	ldr	r3, [r7, #28]
 801b5ba:	68ba      	ldr	r2, [r7, #8]
 801b5bc:	4413      	add	r3, r2
 801b5be:	781b      	ldrb	r3, [r3, #0]
 801b5c0:	461a      	mov	r2, r3
 801b5c2:	69bb      	ldr	r3, [r7, #24]
 801b5c4:	00db      	lsls	r3, r3, #3
 801b5c6:	409a      	lsls	r2, r3
 801b5c8:	693b      	ldr	r3, [r7, #16]
 801b5ca:	68d8      	ldr	r0, [r3, #12]
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	009b      	lsls	r3, r3, #2
 801b5d0:	4403      	add	r3, r0
 801b5d2:	440a      	add	r2, r1
 801b5d4:	601a      	str	r2, [r3, #0]

    if (++j == COMP_BYTE_SIZE) {
 801b5d6:	69bb      	ldr	r3, [r7, #24]
 801b5d8:	3301      	adds	r3, #1
 801b5da:	61bb      	str	r3, [r7, #24]
 801b5dc:	69bb      	ldr	r3, [r7, #24]
 801b5de:	2b04      	cmp	r3, #4
 801b5e0:	d104      	bne.n	801b5ec <bi_import+0x86>
      j = 0;
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	61bb      	str	r3, [r7, #24]
      offset++;
 801b5e6:	697b      	ldr	r3, [r7, #20]
 801b5e8:	3301      	adds	r3, #1
 801b5ea:	617b      	str	r3, [r7, #20]
  for (i = size - 1; i >= 0; i--) {
 801b5ec:	69fb      	ldr	r3, [r7, #28]
 801b5ee:	3b01      	subs	r3, #1
 801b5f0:	61fb      	str	r3, [r7, #28]
 801b5f2:	69fb      	ldr	r3, [r7, #28]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	dad9      	bge.n	801b5ac <bi_import+0x46>
    }
  }

  return trim(biR);
 801b5f8:	6938      	ldr	r0, [r7, #16]
 801b5fa:	f000 fae2 	bl	801bbc2 <trim>
 801b5fe:	4603      	mov	r3, r0
}
 801b600:	4618      	mov	r0, r3
 801b602:	3720      	adds	r7, #32
 801b604:	46bd      	mov	sp, r7
 801b606:	bd80      	pop	{r7, pc}

0801b608 <bi_export>:
 * @param x [in]  The bigint to be converted.
 * @param data [out] The converted data as a byte stream.
 * @param size [in] The maximum size of the byte stream. Unused bytes will be
 * zeroed.
 */
NS_INTERNAL void bi_export(BI_CTX *ctx, bigint *x, uint8_t *data, int size) {
 801b608:	b580      	push	{r7, lr}
 801b60a:	b08a      	sub	sp, #40	@ 0x28
 801b60c:	af00      	add	r7, sp, #0
 801b60e:	60f8      	str	r0, [r7, #12]
 801b610:	60b9      	str	r1, [r7, #8]
 801b612:	607a      	str	r2, [r7, #4]
 801b614:	603b      	str	r3, [r7, #0]
  int i, j, k = size - 1;
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	3b01      	subs	r3, #1
 801b61a:	61fb      	str	r3, [r7, #28]

  check(x);
  memset(data, 0, (size_t) size); /* ensure all leading 0's are cleared */
 801b61c:	683b      	ldr	r3, [r7, #0]
 801b61e:	461a      	mov	r2, r3
 801b620:	2100      	movs	r1, #0
 801b622:	6878      	ldr	r0, [r7, #4]
 801b624:	f007 ff77 	bl	8023516 <memset>

  for (i = 0; i < x->size; i++) {
 801b628:	2300      	movs	r3, #0
 801b62a:	627b      	str	r3, [r7, #36]	@ 0x24
 801b62c:	e02b      	b.n	801b686 <bi_export+0x7e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801b62e:	2300      	movs	r3, #0
 801b630:	623b      	str	r3, [r7, #32]
 801b632:	e022      	b.n	801b67a <bi_export+0x72>
      comp mask = (comp) 0xff << (j * 8);
 801b634:	6a3b      	ldr	r3, [r7, #32]
 801b636:	00db      	lsls	r3, r3, #3
 801b638:	22ff      	movs	r2, #255	@ 0xff
 801b63a:	fa02 f303 	lsl.w	r3, r2, r3
 801b63e:	61bb      	str	r3, [r7, #24]
      int num = (int) (x->comps[i] & mask) >> (j * 8);
 801b640:	68bb      	ldr	r3, [r7, #8]
 801b642:	68da      	ldr	r2, [r3, #12]
 801b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b646:	009b      	lsls	r3, r3, #2
 801b648:	4413      	add	r3, r2
 801b64a:	681a      	ldr	r2, [r3, #0]
 801b64c:	69bb      	ldr	r3, [r7, #24]
 801b64e:	4013      	ands	r3, r2
 801b650:	461a      	mov	r2, r3
 801b652:	6a3b      	ldr	r3, [r7, #32]
 801b654:	00db      	lsls	r3, r3, #3
 801b656:	fa42 f303 	asr.w	r3, r2, r3
 801b65a:	617b      	str	r3, [r7, #20]
      data[k--] = (uint8_t) num;
 801b65c:	69fb      	ldr	r3, [r7, #28]
 801b65e:	1e5a      	subs	r2, r3, #1
 801b660:	61fa      	str	r2, [r7, #28]
 801b662:	461a      	mov	r2, r3
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	4413      	add	r3, r2
 801b668:	697a      	ldr	r2, [r7, #20]
 801b66a:	b2d2      	uxtb	r2, r2
 801b66c:	701a      	strb	r2, [r3, #0]

      if (k < 0) {
 801b66e:	69fb      	ldr	r3, [r7, #28]
 801b670:	2b00      	cmp	r3, #0
 801b672:	db10      	blt.n	801b696 <bi_export+0x8e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801b674:	6a3b      	ldr	r3, [r7, #32]
 801b676:	3301      	adds	r3, #1
 801b678:	623b      	str	r3, [r7, #32]
 801b67a:	6a3b      	ldr	r3, [r7, #32]
 801b67c:	2b03      	cmp	r3, #3
 801b67e:	ddd9      	ble.n	801b634 <bi_export+0x2c>
  for (i = 0; i < x->size; i++) {
 801b680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b682:	3301      	adds	r3, #1
 801b684:	627b      	str	r3, [r7, #36]	@ 0x24
 801b686:	68bb      	ldr	r3, [r7, #8]
 801b688:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b68c:	461a      	mov	r2, r3
 801b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b690:	4293      	cmp	r3, r2
 801b692:	dbcc      	blt.n	801b62e <bi_export+0x26>
        goto buf_done;
      }
    }
  }
buf_done:
 801b694:	e000      	b.n	801b698 <bi_export+0x90>
        goto buf_done;
 801b696:	bf00      	nop

  bi_free(ctx, x);
 801b698:	68b9      	ldr	r1, [r7, #8]
 801b69a:	68f8      	ldr	r0, [r7, #12]
 801b69c:	f7ff fb3a 	bl	801ad14 <bi_free>
}
 801b6a0:	bf00      	nop
 801b6a2:	3728      	adds	r7, #40	@ 0x28
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd80      	pop	{r7, pc}

0801b6a8 <bi_set_mod>:
 * @param mod_offset [in] There are three moduluii that can be stored - the
 * standard modulus, and its two primes p and q. This offset refers to which
 * modulus we are referring to.
 * @see bi_free_mod(), bi_mod_power().
 */
NS_INTERNAL void bi_set_mod(BI_CTX *ctx, bigint *bim, int mod_offset) {
 801b6a8:	b5b0      	push	{r4, r5, r7, lr}
 801b6aa:	b086      	sub	sp, #24
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	60f8      	str	r0, [r7, #12]
 801b6b0:	60b9      	str	r1, [r7, #8]
 801b6b2:	607a      	str	r2, [r7, #4]
  int k = bim->size;
 801b6b4:	68bb      	ldr	r3, [r7, #8]
 801b6b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b6ba:	617b      	str	r3, [r7, #20]
  comp d = (comp)((long_comp) COMP_RADIX / (bim->comps[k - 1] + 1));
 801b6bc:	68bb      	ldr	r3, [r7, #8]
 801b6be:	68da      	ldr	r2, [r3, #12]
 801b6c0:	6979      	ldr	r1, [r7, #20]
 801b6c2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b6c6:	440b      	add	r3, r1
 801b6c8:	009b      	lsls	r3, r3, #2
 801b6ca:	4413      	add	r3, r2
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	3301      	adds	r3, #1
 801b6d0:	2200      	movs	r2, #0
 801b6d2:	461c      	mov	r4, r3
 801b6d4:	4615      	mov	r5, r2
 801b6d6:	4622      	mov	r2, r4
 801b6d8:	462b      	mov	r3, r5
 801b6da:	f04f 0000 	mov.w	r0, #0
 801b6de:	f04f 0101 	mov.w	r1, #1
 801b6e2:	f7e4 fe7d 	bl	80003e0 <__aeabi_uldivmod>
 801b6e6:	4602      	mov	r2, r0
 801b6e8:	460b      	mov	r3, r1
 801b6ea:	4613      	mov	r3, r2
 801b6ec:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_BIGINT_MONTGOMERY
  bigint *R, *R2;
#endif

  ctx->bi_mod[mod_offset] = bim;
 801b6ee:	68fa      	ldr	r2, [r7, #12]
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	3302      	adds	r3, #2
 801b6f4:	009b      	lsls	r3, r3, #2
 801b6f6:	4413      	add	r3, r2
 801b6f8:	68ba      	ldr	r2, [r7, #8]
 801b6fa:	605a      	str	r2, [r3, #4]
  bi_permanent(ctx->bi_mod[mod_offset]);
 801b6fc:	68fa      	ldr	r2, [r7, #12]
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	3302      	adds	r3, #2
 801b702:	009b      	lsls	r3, r3, #2
 801b704:	4413      	add	r3, r2
 801b706:	685b      	ldr	r3, [r3, #4]
 801b708:	4618      	mov	r0, r3
 801b70a:	f7ff fadb 	bl	801acc4 <bi_permanent>
  ctx->bi_normalised_mod[mod_offset] = bi_int_multiply(ctx, bim, d);
 801b70e:	693a      	ldr	r2, [r7, #16]
 801b710:	68b9      	ldr	r1, [r7, #8]
 801b712:	68f8      	ldr	r0, [r7, #12]
 801b714:	f7ff fc15 	bl	801af42 <bi_int_multiply>
 801b718:	4601      	mov	r1, r0
 801b71a:	68fb      	ldr	r3, [r7, #12]
 801b71c:	687a      	ldr	r2, [r7, #4]
 801b71e:	3206      	adds	r2, #6
 801b720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  bi_permanent(ctx->bi_normalised_mod[mod_offset]);
 801b724:	68fb      	ldr	r3, [r7, #12]
 801b726:	687a      	ldr	r2, [r7, #4]
 801b728:	3206      	adds	r2, #6
 801b72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b72e:	4618      	mov	r0, r3
 801b730:	f7ff fac8 	bl	801acc4 <bi_permanent>
  ctx->bi_mu[mod_offset] =
      bi_divide(ctx, comp_left_shift(bi_clone(ctx, ctx->bi_radix), k * 2 - 1),
                ctx->bi_mod[mod_offset], 0);
  bi_permanent(ctx->bi_mu[mod_offset]);
#endif
}
 801b734:	bf00      	nop
 801b736:	3718      	adds	r7, #24
 801b738:	46bd      	mov	sp, r7
 801b73a:	bdb0      	pop	{r4, r5, r7, pc}

0801b73c <regular_multiply>:
 * Barrett reduction has no need for some parts of the product, so ignore bits
 * of the multiply. This routine gives Barrett its big performance
 * improvements over Classical/Montgomery reduction methods.
 */
static bigint *regular_multiply(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int inner_partial, int outer_partial) {
 801b73c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b740:	b098      	sub	sp, #96	@ 0x60
 801b742:	af00      	add	r7, sp, #0
 801b744:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b746:	62b9      	str	r1, [r7, #40]	@ 0x28
 801b748:	627a      	str	r2, [r7, #36]	@ 0x24
 801b74a:	623b      	str	r3, [r7, #32]
  int i = 0, j;
 801b74c:	2300      	movs	r3, #0
 801b74e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int n = bia->size;
 801b750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b752:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b756:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int t = bib->size;
 801b758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b75a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b75e:	64bb      	str	r3, [r7, #72]	@ 0x48
  bigint *biR = alloc(ctx, n + t);
 801b760:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b764:	4413      	add	r3, r2
 801b766:	4619      	mov	r1, r3
 801b768:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b76a:	f000 f979 	bl	801ba60 <alloc>
 801b76e:	6478      	str	r0, [r7, #68]	@ 0x44
  comp *sr = biR->comps;
 801b770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b772:	68db      	ldr	r3, [r3, #12]
 801b774:	643b      	str	r3, [r7, #64]	@ 0x40
  comp *sa = bia->comps;
 801b776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b778:	68db      	ldr	r3, [r3, #12]
 801b77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  comp *sb = bib->comps;
 801b77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b77e:	68db      	ldr	r3, [r3, #12]
 801b780:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);
  check(bib);

  /* clear things to start with */
  memset(biR->comps, 0, (size_t) ((n + t) * COMP_BYTE_SIZE));
 801b782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b784:	68d8      	ldr	r0, [r3, #12]
 801b786:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b78a:	4413      	add	r3, r2
 801b78c:	009b      	lsls	r3, r3, #2
 801b78e:	461a      	mov	r2, r3
 801b790:	2100      	movs	r1, #0
 801b792:	f007 fec0 	bl	8023516 <memset>

  do {
    long_comp tmp;
    comp carry = 0;
 801b796:	2300      	movs	r3, #0
 801b798:	657b      	str	r3, [r7, #84]	@ 0x54
    int r_index = i;
 801b79a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b79c:	653b      	str	r3, [r7, #80]	@ 0x50
    j = 0;
 801b79e:	2300      	movs	r3, #0
 801b7a0:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (outer_partial && outer_partial - i > 0 && outer_partial < n) {
 801b7a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d014      	beq.n	801b7d4 <regular_multiply+0x98>
 801b7aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b7ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b7b0:	1ad3      	subs	r3, r2, r3
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	dd0e      	ble.n	801b7d4 <regular_multiply+0x98>
 801b7b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b7ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	da09      	bge.n	801b7d4 <regular_multiply+0x98>
      r_index = outer_partial - 1;
 801b7c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b7c4:	3b01      	subs	r3, #1
 801b7c6:	653b      	str	r3, [r7, #80]	@ 0x50
      j = outer_partial - i - 1;
 801b7c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b7cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b7ce:	1ad3      	subs	r3, r2, r3
 801b7d0:	3b01      	subs	r3, #1
 801b7d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    do {
      if (inner_partial && r_index >= inner_partial) {
 801b7d4:	6a3b      	ldr	r3, [r7, #32]
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	d003      	beq.n	801b7e2 <regular_multiply+0xa6>
 801b7da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b7dc:	6a3b      	ldr	r3, [r7, #32]
 801b7de:	429a      	cmp	r2, r3
 801b7e0:	da5a      	bge.n	801b898 <regular_multiply+0x15c>
        break;
      }

      tmp = sr[r_index] + ((long_comp) sa[j]) * sb[i] + carry;
 801b7e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b7e4:	009a      	lsls	r2, r3, #2
 801b7e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b7e8:	4413      	add	r3, r2
 801b7ea:	681b      	ldr	r3, [r3, #0]
 801b7ec:	2200      	movs	r2, #0
 801b7ee:	61bb      	str	r3, [r7, #24]
 801b7f0:	61fa      	str	r2, [r7, #28]
 801b7f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b7f4:	009a      	lsls	r2, r3, #2
 801b7f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7f8:	4413      	add	r3, r2
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	2200      	movs	r2, #0
 801b7fe:	469a      	mov	sl, r3
 801b800:	4693      	mov	fp, r2
 801b802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b804:	009a      	lsls	r2, r3, #2
 801b806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b808:	4413      	add	r3, r2
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	2200      	movs	r2, #0
 801b80e:	613b      	str	r3, [r7, #16]
 801b810:	617a      	str	r2, [r7, #20]
 801b812:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b816:	4603      	mov	r3, r0
 801b818:	fb03 f20b 	mul.w	r2, r3, fp
 801b81c:	460b      	mov	r3, r1
 801b81e:	fb0a f303 	mul.w	r3, sl, r3
 801b822:	4413      	add	r3, r2
 801b824:	4602      	mov	r2, r0
 801b826:	fbaa 4502 	umull	r4, r5, sl, r2
 801b82a:	442b      	add	r3, r5
 801b82c:	461d      	mov	r5, r3
 801b82e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801b832:	460b      	mov	r3, r1
 801b834:	eb13 0804 	adds.w	r8, r3, r4
 801b838:	4613      	mov	r3, r2
 801b83a:	eb43 0905 	adc.w	r9, r3, r5
 801b83e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b840:	2200      	movs	r2, #0
 801b842:	60bb      	str	r3, [r7, #8]
 801b844:	60fa      	str	r2, [r7, #12]
 801b846:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801b84a:	460b      	mov	r3, r1
 801b84c:	eb18 0303 	adds.w	r3, r8, r3
 801b850:	603b      	str	r3, [r7, #0]
 801b852:	4613      	mov	r3, r2
 801b854:	eb49 0303 	adc.w	r3, r9, r3
 801b858:	607b      	str	r3, [r7, #4]
 801b85a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b85e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      sr[r_index++] = (comp) tmp; /* downsize */
 801b862:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b864:	1c53      	adds	r3, r2, #1
 801b866:	653b      	str	r3, [r7, #80]	@ 0x50
 801b868:	4613      	mov	r3, r2
 801b86a:	009a      	lsls	r2, r3, #2
 801b86c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b86e:	441a      	add	r2, r3
 801b870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b872:	6013      	str	r3, [r2, #0]
      carry = (comp) (tmp >> COMP_BIT_SIZE);
 801b874:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801b878:	f04f 0000 	mov.w	r0, #0
 801b87c:	f04f 0100 	mov.w	r1, #0
 801b880:	0018      	movs	r0, r3
 801b882:	2100      	movs	r1, #0
 801b884:	4603      	mov	r3, r0
 801b886:	657b      	str	r3, [r7, #84]	@ 0x54
    } while (++j < n);
 801b888:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b88a:	3301      	adds	r3, #1
 801b88c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b88e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b892:	429a      	cmp	r2, r3
 801b894:	db9e      	blt.n	801b7d4 <regular_multiply+0x98>
 801b896:	e000      	b.n	801b89a <regular_multiply+0x15e>
        break;
 801b898:	bf00      	nop

    sr[r_index] = carry;
 801b89a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b89c:	009a      	lsls	r2, r3, #2
 801b89e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b8a0:	441a      	add	r2, r3
 801b8a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b8a4:	6013      	str	r3, [r2, #0]
  } while (++i < t);
 801b8a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8a8:	3301      	adds	r3, #1
 801b8aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b8ac:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b8ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b8b0:	429a      	cmp	r2, r3
 801b8b2:	f6ff af70 	blt.w	801b796 <regular_multiply+0x5a>

  bi_free(ctx, bia);
 801b8b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b8b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b8ba:	f7ff fa2b 	bl	801ad14 <bi_free>
  bi_free(ctx, bib);
 801b8be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b8c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b8c2:	f7ff fa27 	bl	801ad14 <bi_free>
  return trim(biR);
 801b8c6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b8c8:	f000 f97b 	bl	801bbc2 <trim>
 801b8cc:	4603      	mov	r3, r0
}
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	3760      	adds	r7, #96	@ 0x60
 801b8d2:	46bd      	mov	sp, r7
 801b8d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b8d8 <bi_multiply>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the multiplication.
 */
NS_INTERNAL bigint *bi_multiply(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801b8d8:	b580      	push	{r7, lr}
 801b8da:	b086      	sub	sp, #24
 801b8dc:	af02      	add	r7, sp, #8
 801b8de:	60f8      	str	r0, [r7, #12]
 801b8e0:	60b9      	str	r1, [r7, #8]
 801b8e2:	607a      	str	r2, [r7, #4]
    return regular_multiply(ctx, bia, bib, 0, 0);
  }

  return karatsuba(ctx, bia, bib, 0);
#else
  return regular_multiply(ctx, bia, bib, 0, 0);
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	9300      	str	r3, [sp, #0]
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	687a      	ldr	r2, [r7, #4]
 801b8ec:	68b9      	ldr	r1, [r7, #8]
 801b8ee:	68f8      	ldr	r0, [r7, #12]
 801b8f0:	f7ff ff24 	bl	801b73c <regular_multiply>
 801b8f4:	4603      	mov	r3, r0
#endif
}
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	3710      	adds	r7, #16
 801b8fa:	46bd      	mov	sp, r7
 801b8fc:	bd80      	pop	{r7, pc}

0801b8fe <bi_compare>:
 * @brief Compare two bigints.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return -1 if smaller, 1 if larger and 0 if equal.
 */
NS_INTERNAL int bi_compare(bigint *bia, bigint *bib) {
 801b8fe:	b480      	push	{r7}
 801b900:	b087      	sub	sp, #28
 801b902:	af00      	add	r7, sp, #0
 801b904:	6078      	str	r0, [r7, #4]
 801b906:	6039      	str	r1, [r7, #0]
  int r, i;

  check(bia);
  check(bib);

  if (bia->size > bib->size)
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b90e:	683b      	ldr	r3, [r7, #0]
 801b910:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b914:	429a      	cmp	r2, r3
 801b916:	dd02      	ble.n	801b91e <bi_compare+0x20>
    r = 1;
 801b918:	2301      	movs	r3, #1
 801b91a:	617b      	str	r3, [r7, #20]
 801b91c:	e03d      	b.n	801b99a <bi_compare+0x9c>
  else if (bia->size < bib->size)
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801b924:	683b      	ldr	r3, [r7, #0]
 801b926:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b92a:	429a      	cmp	r2, r3
 801b92c:	da03      	bge.n	801b936 <bi_compare+0x38>
    r = -1;
 801b92e:	f04f 33ff 	mov.w	r3, #4294967295
 801b932:	617b      	str	r3, [r7, #20]
 801b934:	e031      	b.n	801b99a <bi_compare+0x9c>
  else {
    comp *a = bia->comps;
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	68db      	ldr	r3, [r3, #12]
 801b93a:	60fb      	str	r3, [r7, #12]
    comp *b = bib->comps;
 801b93c:	683b      	ldr	r3, [r7, #0]
 801b93e:	68db      	ldr	r3, [r3, #12]
 801b940:	60bb      	str	r3, [r7, #8]

    /* Same number of components.  Compare starting from the high end
     * and working down. */
    r = 0;
 801b942:	2300      	movs	r3, #0
 801b944:	617b      	str	r3, [r7, #20]
    i = bia->size - 1;
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b94c:	3b01      	subs	r3, #1
 801b94e:	613b      	str	r3, [r7, #16]

    do {
      if (a[i] > b[i]) {
 801b950:	693b      	ldr	r3, [r7, #16]
 801b952:	009b      	lsls	r3, r3, #2
 801b954:	68fa      	ldr	r2, [r7, #12]
 801b956:	4413      	add	r3, r2
 801b958:	681a      	ldr	r2, [r3, #0]
 801b95a:	693b      	ldr	r3, [r7, #16]
 801b95c:	009b      	lsls	r3, r3, #2
 801b95e:	68b9      	ldr	r1, [r7, #8]
 801b960:	440b      	add	r3, r1
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	429a      	cmp	r2, r3
 801b966:	d902      	bls.n	801b96e <bi_compare+0x70>
        r = 1;
 801b968:	2301      	movs	r3, #1
 801b96a:	617b      	str	r3, [r7, #20]
        break;
 801b96c:	e015      	b.n	801b99a <bi_compare+0x9c>
      } else if (a[i] < b[i]) {
 801b96e:	693b      	ldr	r3, [r7, #16]
 801b970:	009b      	lsls	r3, r3, #2
 801b972:	68fa      	ldr	r2, [r7, #12]
 801b974:	4413      	add	r3, r2
 801b976:	681a      	ldr	r2, [r3, #0]
 801b978:	693b      	ldr	r3, [r7, #16]
 801b97a:	009b      	lsls	r3, r3, #2
 801b97c:	68b9      	ldr	r1, [r7, #8]
 801b97e:	440b      	add	r3, r1
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	429a      	cmp	r2, r3
 801b984:	d203      	bcs.n	801b98e <bi_compare+0x90>
        r = -1;
 801b986:	f04f 33ff 	mov.w	r3, #4294967295
 801b98a:	617b      	str	r3, [r7, #20]
        break;
 801b98c:	e005      	b.n	801b99a <bi_compare+0x9c>
      }
    } while (--i >= 0);
 801b98e:	693b      	ldr	r3, [r7, #16]
 801b990:	3b01      	subs	r3, #1
 801b992:	613b      	str	r3, [r7, #16]
 801b994:	693b      	ldr	r3, [r7, #16]
 801b996:	2b00      	cmp	r3, #0
 801b998:	dada      	bge.n	801b950 <bi_compare+0x52>
  }

  return r;
 801b99a:	697b      	ldr	r3, [r7, #20]
}
 801b99c:	4618      	mov	r0, r3
 801b99e:	371c      	adds	r7, #28
 801b9a0:	46bd      	mov	sp, r7
 801b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9a6:	4770      	bx	lr

0801b9a8 <more_comps>:

/*
 * Allocate and zero more components.  Does not consume bi.
 */
static void more_comps(bigint *bi, int n) {
 801b9a8:	b580      	push	{r7, lr}
 801b9aa:	b084      	sub	sp, #16
 801b9ac:	af00      	add	r7, sp, #0
 801b9ae:	6078      	str	r0, [r7, #4]
 801b9b0:	6039      	str	r1, [r7, #0]
  if (n > bi->max_comps) {
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b9b8:	461a      	mov	r2, r3
 801b9ba:	683b      	ldr	r3, [r7, #0]
 801b9bc:	4293      	cmp	r3, r2
 801b9be:	dd2e      	ble.n	801ba1e <more_comps+0x76>
    int max = MAX(bi->max_comps * 2, n);
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b9c6:	005b      	lsls	r3, r3, #1
 801b9c8:	683a      	ldr	r2, [r7, #0]
 801b9ca:	4293      	cmp	r3, r2
 801b9cc:	bfb8      	it	lt
 801b9ce:	4613      	movlt	r3, r2
 801b9d0:	60fb      	str	r3, [r7, #12]
    void *p = calloc(1, (size_t) max * COMP_BYTE_SIZE);
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	009b      	lsls	r3, r3, #2
 801b9d6:	4619      	mov	r1, r3
 801b9d8:	2001      	movs	r0, #1
 801b9da:	f007 fac7 	bl	8022f6c <calloc>
 801b9de:	4603      	mov	r3, r0
 801b9e0:	60bb      	str	r3, [r7, #8]
    if (p != NULL && bi->size > 0) memcpy(p, bi->comps, (size_t) bi->max_comps * COMP_BYTE_SIZE);
 801b9e2:	68bb      	ldr	r3, [r7, #8]
 801b9e4:	2b00      	cmp	r3, #0
 801b9e6:	d00e      	beq.n	801ba06 <more_comps+0x5e>
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	dd09      	ble.n	801ba06 <more_comps+0x5e>
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	68d9      	ldr	r1, [r3, #12]
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801b9fc:	009b      	lsls	r3, r3, #2
 801b9fe:	461a      	mov	r2, r3
 801ba00:	68b8      	ldr	r0, [r7, #8]
 801ba02:	f007 febe 	bl	8023782 <memcpy>
    free(bi->comps);
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	68db      	ldr	r3, [r3, #12]
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	f007 fad2 	bl	8022fb4 <free>
    bi->max_comps = (short) max;
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	b21a      	sxth	r2, r3
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	80da      	strh	r2, [r3, #6]
    bi->comps = (comp *) p;
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	68ba      	ldr	r2, [r7, #8]
 801ba1c:	60da      	str	r2, [r3, #12]
  }

  if (n > bi->size) {
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ba24:	461a      	mov	r2, r3
 801ba26:	683b      	ldr	r3, [r7, #0]
 801ba28:	4293      	cmp	r3, r2
 801ba2a:	dd11      	ble.n	801ba50 <more_comps+0xa8>
    memset(&bi->comps[bi->size], 0, (size_t) (n - bi->size) * COMP_BYTE_SIZE);
 801ba2c:	687b      	ldr	r3, [r7, #4]
 801ba2e:	68da      	ldr	r2, [r3, #12]
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ba36:	009b      	lsls	r3, r3, #2
 801ba38:	18d0      	adds	r0, r2, r3
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ba40:	461a      	mov	r2, r3
 801ba42:	683b      	ldr	r3, [r7, #0]
 801ba44:	1a9b      	subs	r3, r3, r2
 801ba46:	009b      	lsls	r3, r3, #2
 801ba48:	461a      	mov	r2, r3
 801ba4a:	2100      	movs	r1, #0
 801ba4c:	f007 fd63 	bl	8023516 <memset>
  }

  bi->size = (short) n;
 801ba50:	683b      	ldr	r3, [r7, #0]
 801ba52:	b21a      	sxth	r2, r3
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	809a      	strh	r2, [r3, #4]
}
 801ba58:	bf00      	nop
 801ba5a:	3710      	adds	r7, #16
 801ba5c:	46bd      	mov	sp, r7
 801ba5e:	bd80      	pop	{r7, pc}

0801ba60 <alloc>:

/*
 * Make a new empty bigint. It may just use an old one if one is available.
 * Otherwise get one off the heap.
 */
static bigint *alloc(BI_CTX *ctx, int size) {
 801ba60:	b580      	push	{r7, lr}
 801ba62:	b084      	sub	sp, #16
 801ba64:	af00      	add	r7, sp, #0
 801ba66:	6078      	str	r0, [r7, #4]
 801ba68:	6039      	str	r1, [r7, #0]
  bigint *biR;

  /* Can we recycle an old bigint? */
  if (ctx->free_list != NULL) {
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	685b      	ldr	r3, [r3, #4]
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	d016      	beq.n	801baa0 <alloc+0x40>
    biR = ctx->free_list;
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	685b      	ldr	r3, [r3, #4]
 801ba76:	60fb      	str	r3, [r7, #12]
    ctx->free_list = biR->next;
 801ba78:	68fb      	ldr	r3, [r7, #12]
 801ba7a:	681a      	ldr	r2, [r3, #0]
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	605a      	str	r2, [r3, #4]
    ctx->free_count--;
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ba84:	1e5a      	subs	r2, r3, #1
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	631a      	str	r2, [r3, #48]	@ 0x30

    if (biR->refs != 0) {
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	689b      	ldr	r3, [r3, #8]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d001      	beq.n	801ba96 <alloc+0x36>
#ifdef CONFIG_SSL_FULL_MODE
      printf("alloc: refs was not 0\n");
#endif
      abort(); /* create a stack trace from a core dump */
 801ba92:	f007 fa41 	bl	8022f18 <abort>
    }

    more_comps(biR, size);
 801ba96:	6839      	ldr	r1, [r7, #0]
 801ba98:	68f8      	ldr	r0, [r7, #12]
 801ba9a:	f7ff ff85 	bl	801b9a8 <more_comps>
 801ba9e:	e013      	b.n	801bac8 <alloc+0x68>
  } else {
    /* No free bigints available - create a new one. */
    biR = (bigint *) calloc(1, sizeof(bigint));
 801baa0:	2110      	movs	r1, #16
 801baa2:	2001      	movs	r0, #1
 801baa4:	f007 fa62 	bl	8022f6c <calloc>
 801baa8:	4603      	mov	r3, r0
 801baaa:	60fb      	str	r3, [r7, #12]
    biR->comps = (comp *) calloc(1, (size_t) size * COMP_BYTE_SIZE);
 801baac:	683b      	ldr	r3, [r7, #0]
 801baae:	009b      	lsls	r3, r3, #2
 801bab0:	4619      	mov	r1, r3
 801bab2:	2001      	movs	r0, #1
 801bab4:	f007 fa5a 	bl	8022f6c <calloc>
 801bab8:	4603      	mov	r3, r0
 801baba:	461a      	mov	r2, r3
 801babc:	68fb      	ldr	r3, [r7, #12]
 801babe:	60da      	str	r2, [r3, #12]
    biR->max_comps = (short) size; /* give some space to spare */
 801bac0:	683b      	ldr	r3, [r7, #0]
 801bac2:	b21a      	sxth	r2, r3
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	80da      	strh	r2, [r3, #6]
  }

  biR->size = (short) size;
 801bac8:	683b      	ldr	r3, [r7, #0]
 801baca:	b21a      	sxth	r2, r3
 801bacc:	68fb      	ldr	r3, [r7, #12]
 801bace:	809a      	strh	r2, [r3, #4]
  biR->refs = 1;
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	2201      	movs	r2, #1
 801bad4:	609a      	str	r2, [r3, #8]
  biR->next = NULL;
 801bad6:	68fb      	ldr	r3, [r7, #12]
 801bad8:	2200      	movs	r2, #0
 801bada:	601a      	str	r2, [r3, #0]
  ctx->active_count++;
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bae0:	1c5a      	adds	r2, r3, #1
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	62da      	str	r2, [r3, #44]	@ 0x2c
  return biR;
 801bae6:	68fb      	ldr	r3, [r7, #12]
}
 801bae8:	4618      	mov	r0, r3
 801baea:	3710      	adds	r7, #16
 801baec:	46bd      	mov	sp, r7
 801baee:	bd80      	pop	{r7, pc}

0801baf0 <find_max_exp_index>:

/*
 * Work out the highest '1' bit in an exponent. Used when doing sliding-window
 * exponentiation.
 */
static int find_max_exp_index(bigint *biexp) {
 801baf0:	b480      	push	{r7}
 801baf2:	b087      	sub	sp, #28
 801baf4:	af00      	add	r7, sp, #0
 801baf6:	6078      	str	r0, [r7, #4]
  int i = COMP_BIT_SIZE - 1;
 801baf8:	231f      	movs	r3, #31
 801bafa:	617b      	str	r3, [r7, #20]
  comp shift = COMP_RADIX / 2;
 801bafc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801bb00:	613b      	str	r3, [r7, #16]
  comp test = biexp->comps[biexp->size - 1]; /* assume no leading zeroes */
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	68da      	ldr	r2, [r3, #12]
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bb0c:	4619      	mov	r1, r3
 801bb0e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801bb12:	440b      	add	r3, r1
 801bb14:	009b      	lsls	r3, r3, #2
 801bb16:	4413      	add	r3, r2
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	60fb      	str	r3, [r7, #12]

  check(biexp);

  do {
    if (test & shift) {
 801bb1c:	68fa      	ldr	r2, [r7, #12]
 801bb1e:	693b      	ldr	r3, [r7, #16]
 801bb20:	4013      	ands	r3, r2
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d007      	beq.n	801bb36 <find_max_exp_index+0x46>
      return i + (biexp->size - 1) * COMP_BIT_SIZE;
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bb2c:	3b01      	subs	r3, #1
 801bb2e:	015a      	lsls	r2, r3, #5
 801bb30:	697b      	ldr	r3, [r7, #20]
 801bb32:	4413      	add	r3, r2
 801bb34:	e009      	b.n	801bb4a <find_max_exp_index+0x5a>
    }

    shift >>= 1;
 801bb36:	693b      	ldr	r3, [r7, #16]
 801bb38:	085b      	lsrs	r3, r3, #1
 801bb3a:	613b      	str	r3, [r7, #16]
  } while (i-- != 0);
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	1e5a      	subs	r2, r3, #1
 801bb40:	617a      	str	r2, [r7, #20]
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d1ea      	bne.n	801bb1c <find_max_exp_index+0x2c>

  return -1; /* error - must have been a leading 0 */
 801bb46:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bb4a:	4618      	mov	r0, r3
 801bb4c:	371c      	adds	r7, #28
 801bb4e:	46bd      	mov	sp, r7
 801bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb54:	4770      	bx	lr

0801bb56 <exp_bit_is_one>:

/*
 * Is a particular bit is an exponent 1 or 0? Used when doing sliding-window
 * exponentiation.
 */
static int exp_bit_is_one(bigint *biexp, int offset) {
 801bb56:	b480      	push	{r7}
 801bb58:	b087      	sub	sp, #28
 801bb5a:	af00      	add	r7, sp, #0
 801bb5c:	6078      	str	r0, [r7, #4]
 801bb5e:	6039      	str	r1, [r7, #0]
  comp test = biexp->comps[offset / COMP_BIT_SIZE];
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	68da      	ldr	r2, [r3, #12]
 801bb64:	683b      	ldr	r3, [r7, #0]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	da00      	bge.n	801bb6c <exp_bit_is_one+0x16>
 801bb6a:	331f      	adds	r3, #31
 801bb6c:	115b      	asrs	r3, r3, #5
 801bb6e:	009b      	lsls	r3, r3, #2
 801bb70:	4413      	add	r3, r2
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	60fb      	str	r3, [r7, #12]
  int num_shifts = offset % COMP_BIT_SIZE;
 801bb76:	683b      	ldr	r3, [r7, #0]
 801bb78:	425a      	negs	r2, r3
 801bb7a:	f003 031f 	and.w	r3, r3, #31
 801bb7e:	f002 021f 	and.w	r2, r2, #31
 801bb82:	bf58      	it	pl
 801bb84:	4253      	negpl	r3, r2
 801bb86:	60bb      	str	r3, [r7, #8]
  comp shift = 1;
 801bb88:	2301      	movs	r3, #1
 801bb8a:	617b      	str	r3, [r7, #20]
  int i;

  check(biexp);

  for (i = 0; i < num_shifts; i++) {
 801bb8c:	2300      	movs	r3, #0
 801bb8e:	613b      	str	r3, [r7, #16]
 801bb90:	e005      	b.n	801bb9e <exp_bit_is_one+0x48>
    shift <<= 1;
 801bb92:	697b      	ldr	r3, [r7, #20]
 801bb94:	005b      	lsls	r3, r3, #1
 801bb96:	617b      	str	r3, [r7, #20]
  for (i = 0; i < num_shifts; i++) {
 801bb98:	693b      	ldr	r3, [r7, #16]
 801bb9a:	3301      	adds	r3, #1
 801bb9c:	613b      	str	r3, [r7, #16]
 801bb9e:	693a      	ldr	r2, [r7, #16]
 801bba0:	68bb      	ldr	r3, [r7, #8]
 801bba2:	429a      	cmp	r2, r3
 801bba4:	dbf5      	blt.n	801bb92 <exp_bit_is_one+0x3c>
  }

  return (test & shift) != 0;
 801bba6:	68fa      	ldr	r2, [r7, #12]
 801bba8:	697b      	ldr	r3, [r7, #20]
 801bbaa:	4013      	ands	r3, r2
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	bf14      	ite	ne
 801bbb0:	2301      	movne	r3, #1
 801bbb2:	2300      	moveq	r3, #0
 801bbb4:	b2db      	uxtb	r3, r3
}
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	371c      	adds	r7, #28
 801bbba:	46bd      	mov	sp, r7
 801bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbc0:	4770      	bx	lr

0801bbc2 <trim>:
#endif

/*
 * Delete any leading 0's (and allow for 0).
 */
static bigint *trim(bigint *bi) {
 801bbc2:	b480      	push	{r7}
 801bbc4:	b083      	sub	sp, #12
 801bbc6:	af00      	add	r7, sp, #0
 801bbc8:	6078      	str	r0, [r7, #4]
  check(bi);

  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801bbca:	e008      	b.n	801bbde <trim+0x1c>
    bi->size--;
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bbd2:	b29b      	uxth	r3, r3
 801bbd4:	3b01      	subs	r3, #1
 801bbd6:	b29b      	uxth	r3, r3
 801bbd8:	b21a      	sxth	r2, r3
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	809a      	strh	r2, [r3, #4]
  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	68da      	ldr	r2, [r3, #12]
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bbe8:	4619      	mov	r1, r3
 801bbea:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801bbee:	440b      	add	r3, r1
 801bbf0:	009b      	lsls	r3, r3, #2
 801bbf2:	4413      	add	r3, r2
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	2b00      	cmp	r3, #0
 801bbf8:	d104      	bne.n	801bc04 <trim+0x42>
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bc00:	2b01      	cmp	r3, #1
 801bc02:	dce3      	bgt.n	801bbcc <trim+0xa>
  }

  return bi;
 801bc04:	687b      	ldr	r3, [r7, #4]
}
 801bc06:	4618      	mov	r0, r3
 801bc08:	370c      	adds	r7, #12
 801bc0a:	46bd      	mov	sp, r7
 801bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc10:	4770      	bx	lr

0801bc12 <bi_mod_power>:
 * @param bi  [in]  The bigint on which to perform the mod power operation.
 * @param biexp [in] The bigint exponent.
 * @return The result of the mod exponentiation operation
 * @see bi_set_mod().
 */
NS_INTERNAL bigint *bi_mod_power(BI_CTX *ctx, bigint *bi, bigint *biexp) {
 801bc12:	b590      	push	{r4, r7, lr}
 801bc14:	b08b      	sub	sp, #44	@ 0x2c
 801bc16:	af00      	add	r7, sp, #0
 801bc18:	60f8      	str	r0, [r7, #12]
 801bc1a:	60b9      	str	r1, [r7, #8]
 801bc1c:	607a      	str	r2, [r7, #4]
  int i = find_max_exp_index(biexp), j, window_size = 1;
 801bc1e:	6878      	ldr	r0, [r7, #4]
 801bc20:	f7ff ff66 	bl	801baf0 <find_max_exp_index>
 801bc24:	6278      	str	r0, [r7, #36]	@ 0x24
 801bc26:	2301      	movs	r3, #1
 801bc28:	613b      	str	r3, [r7, #16]
  bigint *biR = int_to_bi(ctx, 1);
 801bc2a:	2101      	movs	r1, #1
 801bc2c:	68f8      	ldr	r0, [r7, #12]
 801bc2e:	f7ff f8a3 	bl	801ad78 <int_to_bi>
 801bc32:	61f8      	str	r0, [r7, #28]
    window_size++;

  /* work out the slide constants */
  precompute_slide_window(ctx, window_size, bi);
#else /* just one constant */
  ctx->g = (bigint **) calloc(1, sizeof(bigint *));
 801bc34:	2104      	movs	r1, #4
 801bc36:	2001      	movs	r0, #1
 801bc38:	f007 f998 	bl	8022f6c <calloc>
 801bc3c:	4603      	mov	r3, r0
 801bc3e:	461a      	mov	r2, r3
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	625a      	str	r2, [r3, #36]	@ 0x24
  ctx->g[0] = bi_clone(ctx, bi);
 801bc44:	68fb      	ldr	r3, [r7, #12]
 801bc46:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801bc48:	68b9      	ldr	r1, [r7, #8]
 801bc4a:	68f8      	ldr	r0, [r7, #12]
 801bc4c:	f7ff f8a7 	bl	801ad9e <bi_clone>
 801bc50:	4603      	mov	r3, r0
 801bc52:	6023      	str	r3, [r4, #0]
  ctx->window = 1;
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	2201      	movs	r2, #1
 801bc58:	629a      	str	r2, [r3, #40]	@ 0x28
  bi_permanent(ctx->g[0]);
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc5e:	681b      	ldr	r3, [r3, #0]
 801bc60:	4618      	mov	r0, r3
 801bc62:	f7ff f82f 	bl	801acc4 <bi_permanent>
#endif

  /* if sliding-window is off, then only one bit will be done at a time and
   * will reduce to standard left-to-right exponentiation */
  do {
    if (exp_bit_is_one(biexp, i)) {
 801bc66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bc68:	6878      	ldr	r0, [r7, #4]
 801bc6a:	f7ff ff74 	bl	801bb56 <exp_bit_is_one>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d06c      	beq.n	801bd4e <bi_mod_power+0x13c>
      int l = i - window_size + 1;
 801bc74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bc76:	693b      	ldr	r3, [r7, #16]
 801bc78:	1ad3      	subs	r3, r2, r3
 801bc7a:	3301      	adds	r3, #1
 801bc7c:	61bb      	str	r3, [r7, #24]
      int part_exp = 0;
 801bc7e:	2300      	movs	r3, #0
 801bc80:	617b      	str	r3, [r7, #20]

      if (l < 0) /* LSB of exponent will always be 1 */
 801bc82:	69bb      	ldr	r3, [r7, #24]
 801bc84:	2b00      	cmp	r3, #0
 801bc86:	da05      	bge.n	801bc94 <bi_mod_power+0x82>
        l = 0;
 801bc88:	2300      	movs	r3, #0
 801bc8a:	61bb      	str	r3, [r7, #24]
 801bc8c:	e009      	b.n	801bca2 <bi_mod_power+0x90>
      else {
        while (exp_bit_is_one(biexp, l) == 0) l++; /* go back up */
 801bc8e:	69bb      	ldr	r3, [r7, #24]
 801bc90:	3301      	adds	r3, #1
 801bc92:	61bb      	str	r3, [r7, #24]
 801bc94:	69b9      	ldr	r1, [r7, #24]
 801bc96:	6878      	ldr	r0, [r7, #4]
 801bc98:	f7ff ff5d 	bl	801bb56 <exp_bit_is_one>
 801bc9c:	4603      	mov	r3, r0
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d0f5      	beq.n	801bc8e <bi_mod_power+0x7c>
      }

      /* build up the section of the exponent */
      for (j = i; j >= l; j--) {
 801bca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bca4:	623b      	str	r3, [r7, #32]
 801bca6:	e02a      	b.n	801bcfe <bi_mod_power+0xec>
        biR = bi_residue(ctx, bi_square(ctx, biR));
 801bca8:	69f8      	ldr	r0, [r7, #28]
 801bcaa:	f7fe fff3 	bl	801ac94 <bi_copy>
 801bcae:	4603      	mov	r3, r0
 801bcb0:	69fa      	ldr	r2, [r7, #28]
 801bcb2:	4619      	mov	r1, r3
 801bcb4:	68f8      	ldr	r0, [r7, #12]
 801bcb6:	f7ff fe0f 	bl	801b8d8 <bi_multiply>
 801bcba:	4601      	mov	r1, r0
 801bcbc:	68fb      	ldr	r3, [r7, #12]
 801bcbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801bcc2:	68fa      	ldr	r2, [r7, #12]
 801bcc4:	3302      	adds	r3, #2
 801bcc6:	009b      	lsls	r3, r3, #2
 801bcc8:	4413      	add	r3, r2
 801bcca:	685a      	ldr	r2, [r3, #4]
 801bccc:	2301      	movs	r3, #1
 801bcce:	68f8      	ldr	r0, [r7, #12]
 801bcd0:	f7ff f9ba 	bl	801b048 <bi_divide>
 801bcd4:	61f8      	str	r0, [r7, #28]
        if (exp_bit_is_one(biexp, j)) part_exp++;
 801bcd6:	6a39      	ldr	r1, [r7, #32]
 801bcd8:	6878      	ldr	r0, [r7, #4]
 801bcda:	f7ff ff3c 	bl	801bb56 <exp_bit_is_one>
 801bcde:	4603      	mov	r3, r0
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d002      	beq.n	801bcea <bi_mod_power+0xd8>
 801bce4:	697b      	ldr	r3, [r7, #20]
 801bce6:	3301      	adds	r3, #1
 801bce8:	617b      	str	r3, [r7, #20]

        if (j != l) part_exp <<= 1;
 801bcea:	6a3a      	ldr	r2, [r7, #32]
 801bcec:	69bb      	ldr	r3, [r7, #24]
 801bcee:	429a      	cmp	r2, r3
 801bcf0:	d002      	beq.n	801bcf8 <bi_mod_power+0xe6>
 801bcf2:	697b      	ldr	r3, [r7, #20]
 801bcf4:	005b      	lsls	r3, r3, #1
 801bcf6:	617b      	str	r3, [r7, #20]
      for (j = i; j >= l; j--) {
 801bcf8:	6a3b      	ldr	r3, [r7, #32]
 801bcfa:	3b01      	subs	r3, #1
 801bcfc:	623b      	str	r3, [r7, #32]
 801bcfe:	6a3a      	ldr	r2, [r7, #32]
 801bd00:	69bb      	ldr	r3, [r7, #24]
 801bd02:	429a      	cmp	r2, r3
 801bd04:	dad0      	bge.n	801bca8 <bi_mod_power+0x96>
      }

      part_exp = (part_exp - 1) / 2; /* adjust for array */
 801bd06:	697b      	ldr	r3, [r7, #20]
 801bd08:	3b01      	subs	r3, #1
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	da00      	bge.n	801bd10 <bi_mod_power+0xfe>
 801bd0e:	3301      	adds	r3, #1
 801bd10:	105b      	asrs	r3, r3, #1
 801bd12:	617b      	str	r3, [r7, #20]
      biR = bi_residue(ctx, bi_multiply(ctx, biR, ctx->g[part_exp]));
 801bd14:	68fb      	ldr	r3, [r7, #12]
 801bd16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801bd18:	697b      	ldr	r3, [r7, #20]
 801bd1a:	009b      	lsls	r3, r3, #2
 801bd1c:	4413      	add	r3, r2
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	461a      	mov	r2, r3
 801bd22:	69f9      	ldr	r1, [r7, #28]
 801bd24:	68f8      	ldr	r0, [r7, #12]
 801bd26:	f7ff fdd7 	bl	801b8d8 <bi_multiply>
 801bd2a:	4601      	mov	r1, r0
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801bd32:	68fa      	ldr	r2, [r7, #12]
 801bd34:	3302      	adds	r3, #2
 801bd36:	009b      	lsls	r3, r3, #2
 801bd38:	4413      	add	r3, r2
 801bd3a:	685a      	ldr	r2, [r3, #4]
 801bd3c:	2301      	movs	r3, #1
 801bd3e:	68f8      	ldr	r0, [r7, #12]
 801bd40:	f7ff f982 	bl	801b048 <bi_divide>
 801bd44:	61f8      	str	r0, [r7, #28]
      i = l - 1;
 801bd46:	69bb      	ldr	r3, [r7, #24]
 801bd48:	3b01      	subs	r3, #1
 801bd4a:	627b      	str	r3, [r7, #36]	@ 0x24
 801bd4c:	e019      	b.n	801bd82 <bi_mod_power+0x170>
    } else /* square it */
    {
      biR = bi_residue(ctx, bi_square(ctx, biR));
 801bd4e:	69f8      	ldr	r0, [r7, #28]
 801bd50:	f7fe ffa0 	bl	801ac94 <bi_copy>
 801bd54:	4603      	mov	r3, r0
 801bd56:	69fa      	ldr	r2, [r7, #28]
 801bd58:	4619      	mov	r1, r3
 801bd5a:	68f8      	ldr	r0, [r7, #12]
 801bd5c:	f7ff fdbc 	bl	801b8d8 <bi_multiply>
 801bd60:	4601      	mov	r1, r0
 801bd62:	68fb      	ldr	r3, [r7, #12]
 801bd64:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801bd68:	68fa      	ldr	r2, [r7, #12]
 801bd6a:	3302      	adds	r3, #2
 801bd6c:	009b      	lsls	r3, r3, #2
 801bd6e:	4413      	add	r3, r2
 801bd70:	685a      	ldr	r2, [r3, #4]
 801bd72:	2301      	movs	r3, #1
 801bd74:	68f8      	ldr	r0, [r7, #12]
 801bd76:	f7ff f967 	bl	801b048 <bi_divide>
 801bd7a:	61f8      	str	r0, [r7, #28]
      i--;
 801bd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd7e:	3b01      	subs	r3, #1
 801bd80:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  } while (i >= 0);
 801bd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	f6bf af6e 	bge.w	801bc66 <bi_mod_power+0x54>

  /* cleanup */
  for (i = 0; i < ctx->window; i++) {
 801bd8a:	2300      	movs	r3, #0
 801bd8c:	627b      	str	r3, [r7, #36]	@ 0x24
 801bd8e:	e015      	b.n	801bdbc <bi_mod_power+0x1aa>
    bi_depermanent(ctx->g[i]);
 801bd90:	68fb      	ldr	r3, [r7, #12]
 801bd92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd96:	009b      	lsls	r3, r3, #2
 801bd98:	4413      	add	r3, r2
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	4618      	mov	r0, r3
 801bd9e:	f7fe ffa5 	bl	801acec <bi_depermanent>
    bi_free(ctx, ctx->g[i]);
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801bda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bda8:	009b      	lsls	r3, r3, #2
 801bdaa:	4413      	add	r3, r2
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	4619      	mov	r1, r3
 801bdb0:	68f8      	ldr	r0, [r7, #12]
 801bdb2:	f7fe ffaf 	bl	801ad14 <bi_free>
  for (i = 0; i < ctx->window; i++) {
 801bdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdb8:	3301      	adds	r3, #1
 801bdba:	627b      	str	r3, [r7, #36]	@ 0x24
 801bdbc:	68fb      	ldr	r3, [r7, #12]
 801bdbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bdc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bdc2:	429a      	cmp	r2, r3
 801bdc4:	dbe4      	blt.n	801bd90 <bi_mod_power+0x17e>
  }

  free(ctx->g);
 801bdc6:	68fb      	ldr	r3, [r7, #12]
 801bdc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bdca:	4618      	mov	r0, r3
 801bdcc:	f007 f8f2 	bl	8022fb4 <free>
  bi_free(ctx, bi);
 801bdd0:	68b9      	ldr	r1, [r7, #8]
 801bdd2:	68f8      	ldr	r0, [r7, #12]
 801bdd4:	f7fe ff9e 	bl	801ad14 <bi_free>
  bi_free(ctx, biexp);
 801bdd8:	6879      	ldr	r1, [r7, #4]
 801bdda:	68f8      	ldr	r0, [r7, #12]
 801bddc:	f7fe ff9a 	bl	801ad14 <bi_free>
#if defined CONFIG_BIGINT_MONTGOMERY
  return ctx->use_classical ? biR : bi_mont(ctx, biR); /* convert back */
#else /* CONFIG_BIGINT_CLASSICAL or CONFIG_BIGINT_BARRETT */
  return biR;
 801bde0:	69fb      	ldr	r3, [r7, #28]
#endif
}
 801bde2:	4618      	mov	r0, r3
 801bde4:	372c      	adds	r7, #44	@ 0x2c
 801bde6:	46bd      	mov	sp, r7
 801bde8:	bd90      	pop	{r4, r7, pc}

0801bdea <mg_rsa_mod_pow>:
#endif
  return bi_add(ctx, m2, bi_multiply(ctx, q, h));
}
#endif

int mg_rsa_mod_pow(const uint8_t *mod, size_t modsz, const uint8_t *exp, size_t expsz, const uint8_t *msg, size_t msgsz, uint8_t *out, size_t outsz) {
 801bdea:	b580      	push	{r7, lr}
 801bdec:	b08a      	sub	sp, #40	@ 0x28
 801bdee:	af00      	add	r7, sp, #0
 801bdf0:	60f8      	str	r0, [r7, #12]
 801bdf2:	60b9      	str	r1, [r7, #8]
 801bdf4:	607a      	str	r2, [r7, #4]
 801bdf6:	603b      	str	r3, [r7, #0]
	BI_CTX *bi_ctx = bi_initialize();
 801bdf8:	f7fe ff27 	bl	801ac4a <bi_initialize>
 801bdfc:	6278      	str	r0, [r7, #36]	@ 0x24
	bigint *n = bi_import(bi_ctx, mod, (int) modsz);
 801bdfe:	68bb      	ldr	r3, [r7, #8]
 801be00:	461a      	mov	r2, r3
 801be02:	68f9      	ldr	r1, [r7, #12]
 801be04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be06:	f7ff fbae 	bl	801b566 <bi_import>
 801be0a:	6238      	str	r0, [r7, #32]
	bigint *e = bi_import(bi_ctx, exp, (int) expsz);
 801be0c:	683b      	ldr	r3, [r7, #0]
 801be0e:	461a      	mov	r2, r3
 801be10:	6879      	ldr	r1, [r7, #4]
 801be12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be14:	f7ff fba7 	bl	801b566 <bi_import>
 801be18:	61f8      	str	r0, [r7, #28]
	bigint *h = bi_import(bi_ctx, msg, (int) msgsz);
 801be1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801be1c:	461a      	mov	r2, r3
 801be1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801be20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be22:	f7ff fba0 	bl	801b566 <bi_import>
 801be26:	61b8      	str	r0, [r7, #24]
	bi_set_mod(bi_ctx, n, 0);
 801be28:	2200      	movs	r2, #0
 801be2a:	6a39      	ldr	r1, [r7, #32]
 801be2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be2e:	f7ff fc3b 	bl	801b6a8 <bi_set_mod>
	bigint *m1 = bi_mod_power(bi_ctx, h, e);
 801be32:	69fa      	ldr	r2, [r7, #28]
 801be34:	69b9      	ldr	r1, [r7, #24]
 801be36:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be38:	f7ff feeb 	bl	801bc12 <bi_mod_power>
 801be3c:	6178      	str	r0, [r7, #20]
	bi_export(bi_ctx, m1, out, (int) outsz);
 801be3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801be40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801be42:	6979      	ldr	r1, [r7, #20]
 801be44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be46:	f7ff fbdf 	bl	801b608 <bi_export>
	bi_free(bi_ctx, n);
 801be4a:	6a39      	ldr	r1, [r7, #32]
 801be4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be4e:	f7fe ff61 	bl	801ad14 <bi_free>
	bi_free(bi_ctx, e);
 801be52:	69f9      	ldr	r1, [r7, #28]
 801be54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be56:	f7fe ff5d 	bl	801ad14 <bi_free>
	bi_free(bi_ctx, h);
 801be5a:	69b9      	ldr	r1, [r7, #24]
 801be5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be5e:	f7fe ff59 	bl	801ad14 <bi_free>
	bi_free(bi_ctx, m1);
 801be62:	6979      	ldr	r1, [r7, #20]
 801be64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801be66:	f7fe ff55 	bl	801ad14 <bi_free>
	return 0;
 801be6a:	2300      	movs	r3, #0
}
 801be6c:	4618      	mov	r0, r3
 801be6e:	3728      	adds	r7, #40	@ 0x28
 801be70:	46bd      	mov	sp, r7
 801be72:	bd80      	pop	{r7, pc}

0801be74 <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 801be74:	b480      	push	{r7}
 801be76:	b085      	sub	sp, #20
 801be78:	af00      	add	r7, sp, #0
 801be7a:	6078      	str	r0, [r7, #4]
 801be7c:	460b      	mov	r3, r1
 801be7e:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801be80:	2300      	movs	r3, #0
 801be82:	73fb      	strb	r3, [r7, #15]
 801be84:	e00a      	b.n	801be9c <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 801be86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801be8a:	009b      	lsls	r3, r3, #2
 801be8c:	687a      	ldr	r2, [r7, #4]
 801be8e:	4413      	add	r3, r2
 801be90:	2200      	movs	r2, #0
 801be92:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801be94:	7bfb      	ldrb	r3, [r7, #15]
 801be96:	3301      	adds	r3, #1
 801be98:	b2db      	uxtb	r3, r3
 801be9a:	73fb      	strb	r3, [r7, #15]
 801be9c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801bea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bea4:	429a      	cmp	r2, r3
 801bea6:	dbee      	blt.n	801be86 <mg_uecc_vli_clear+0x12>
  }
}
 801bea8:	bf00      	nop
 801beaa:	bf00      	nop
 801beac:	3714      	adds	r7, #20
 801beae:	46bd      	mov	sp, r7
 801beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801beb4:	4770      	bx	lr

0801beb6 <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 801beb6:	b480      	push	{r7}
 801beb8:	b085      	sub	sp, #20
 801beba:	af00      	add	r7, sp, #0
 801bebc:	6078      	str	r0, [r7, #4]
 801bebe:	460b      	mov	r3, r1
 801bec0:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 801bec2:	2300      	movs	r3, #0
 801bec4:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801bec6:	2300      	movs	r3, #0
 801bec8:	72fb      	strb	r3, [r7, #11]
 801beca:	e00c      	b.n	801bee6 <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 801becc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801bed0:	009b      	lsls	r3, r3, #2
 801bed2:	687a      	ldr	r2, [r7, #4]
 801bed4:	4413      	add	r3, r2
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	68fa      	ldr	r2, [r7, #12]
 801beda:	4313      	orrs	r3, r2
 801bedc:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 801bede:	7afb      	ldrb	r3, [r7, #11]
 801bee0:	3301      	adds	r3, #1
 801bee2:	b2db      	uxtb	r3, r3
 801bee4:	72fb      	strb	r3, [r7, #11]
 801bee6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801beea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801beee:	429a      	cmp	r2, r3
 801bef0:	dbec      	blt.n	801becc <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 801bef2:	68fb      	ldr	r3, [r7, #12]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	bf0c      	ite	eq
 801bef8:	2301      	moveq	r3, #1
 801befa:	2300      	movne	r3, #0
 801befc:	b2db      	uxtb	r3, r3
}
 801befe:	4618      	mov	r0, r3
 801bf00:	3714      	adds	r7, #20
 801bf02:	46bd      	mov	sp, r7
 801bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf08:	4770      	bx	lr

0801bf0a <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 801bf0a:	b480      	push	{r7}
 801bf0c:	b083      	sub	sp, #12
 801bf0e:	af00      	add	r7, sp, #0
 801bf10:	6078      	str	r0, [r7, #4]
 801bf12:	460b      	mov	r3, r1
 801bf14:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801bf16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801bf1a:	115b      	asrs	r3, r3, #5
 801bf1c:	b21b      	sxth	r3, r3
 801bf1e:	009b      	lsls	r3, r3, #2
 801bf20:	687a      	ldr	r2, [r7, #4]
 801bf22:	4413      	add	r3, r2
 801bf24:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 801bf26:	887b      	ldrh	r3, [r7, #2]
 801bf28:	f003 031f 	and.w	r3, r3, #31
 801bf2c:	2101      	movs	r1, #1
 801bf2e:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801bf32:	4013      	ands	r3, r2
}
 801bf34:	4618      	mov	r0, r3
 801bf36:	370c      	adds	r7, #12
 801bf38:	46bd      	mov	sp, r7
 801bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf3e:	4770      	bx	lr

0801bf40 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 801bf40:	b480      	push	{r7}
 801bf42:	b085      	sub	sp, #20
 801bf44:	af00      	add	r7, sp, #0
 801bf46:	6078      	str	r0, [r7, #4]
 801bf48:	460b      	mov	r3, r1
 801bf4a:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 801bf4c:	78fb      	ldrb	r3, [r7, #3]
 801bf4e:	3b01      	subs	r3, #1
 801bf50:	b2db      	uxtb	r3, r3
 801bf52:	73fb      	strb	r3, [r7, #15]
 801bf54:	e003      	b.n	801bf5e <vli_numDigits+0x1e>
 801bf56:	7bfb      	ldrb	r3, [r7, #15]
 801bf58:	3b01      	subs	r3, #1
 801bf5a:	b2db      	uxtb	r3, r3
 801bf5c:	73fb      	strb	r3, [r7, #15]
 801bf5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	db07      	blt.n	801bf76 <vli_numDigits+0x36>
 801bf66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf6a:	009b      	lsls	r3, r3, #2
 801bf6c:	687a      	ldr	r2, [r7, #4]
 801bf6e:	4413      	add	r3, r2
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d0ef      	beq.n	801bf56 <vli_numDigits+0x16>
  }

  return (i + 1);
 801bf76:	7bfb      	ldrb	r3, [r7, #15]
 801bf78:	3301      	adds	r3, #1
 801bf7a:	b2db      	uxtb	r3, r3
 801bf7c:	b25b      	sxtb	r3, r3
}
 801bf7e:	4618      	mov	r0, r3
 801bf80:	3714      	adds	r7, #20
 801bf82:	46bd      	mov	sp, r7
 801bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf88:	4770      	bx	lr

0801bf8a <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 801bf8a:	b580      	push	{r7, lr}
 801bf8c:	b086      	sub	sp, #24
 801bf8e:	af00      	add	r7, sp, #0
 801bf90:	6078      	str	r0, [r7, #4]
 801bf92:	460b      	mov	r3, r1
 801bf94:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 801bf96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bf9a:	4619      	mov	r1, r3
 801bf9c:	6878      	ldr	r0, [r7, #4]
 801bf9e:	f7ff ffcf 	bl	801bf40 <vli_numDigits>
 801bfa2:	4603      	mov	r3, r0
 801bfa4:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 801bfa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d101      	bne.n	801bfb2 <mg_uecc_vli_numBits+0x28>
    return 0;
 801bfae:	2300      	movs	r3, #0
 801bfb0:	e020      	b.n	801bff4 <mg_uecc_vli_numBits+0x6a>
  }

  digit = vli[num_digits - 1];
 801bfb2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801bfb6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801bfba:	4413      	add	r3, r2
 801bfbc:	009b      	lsls	r3, r3, #2
 801bfbe:	687a      	ldr	r2, [r7, #4]
 801bfc0:	4413      	add	r3, r2
 801bfc2:	681b      	ldr	r3, [r3, #0]
 801bfc4:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	617b      	str	r3, [r7, #20]
 801bfca:	e005      	b.n	801bfd8 <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 801bfcc:	693b      	ldr	r3, [r7, #16]
 801bfce:	085b      	lsrs	r3, r3, #1
 801bfd0:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801bfd2:	697b      	ldr	r3, [r7, #20]
 801bfd4:	3301      	adds	r3, #1
 801bfd6:	617b      	str	r3, [r7, #20]
 801bfd8:	693b      	ldr	r3, [r7, #16]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d1f6      	bne.n	801bfcc <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801bfde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfe2:	3b01      	subs	r3, #1
 801bfe4:	b29b      	uxth	r3, r3
 801bfe6:	015b      	lsls	r3, r3, #5
 801bfe8:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 801bfea:	697b      	ldr	r3, [r7, #20]
 801bfec:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801bfee:	4413      	add	r3, r2
 801bff0:	b29b      	uxth	r3, r3
 801bff2:	b21b      	sxth	r3, r3
}
 801bff4:	4618      	mov	r0, r3
 801bff6:	3718      	adds	r7, #24
 801bff8:	46bd      	mov	sp, r7
 801bffa:	bd80      	pop	{r7, pc}

0801bffc <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 801bffc:	b480      	push	{r7}
 801bffe:	b087      	sub	sp, #28
 801c000:	af00      	add	r7, sp, #0
 801c002:	60f8      	str	r0, [r7, #12]
 801c004:	60b9      	str	r1, [r7, #8]
 801c006:	4613      	mov	r3, r2
 801c008:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801c00a:	2300      	movs	r3, #0
 801c00c:	75fb      	strb	r3, [r7, #23]
 801c00e:	e00f      	b.n	801c030 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 801c010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c014:	009b      	lsls	r3, r3, #2
 801c016:	68ba      	ldr	r2, [r7, #8]
 801c018:	441a      	add	r2, r3
 801c01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c01e:	009b      	lsls	r3, r3, #2
 801c020:	68f9      	ldr	r1, [r7, #12]
 801c022:	440b      	add	r3, r1
 801c024:	6812      	ldr	r2, [r2, #0]
 801c026:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801c028:	7dfb      	ldrb	r3, [r7, #23]
 801c02a:	3301      	adds	r3, #1
 801c02c:	b2db      	uxtb	r3, r3
 801c02e:	75fb      	strb	r3, [r7, #23]
 801c030:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801c034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c038:	429a      	cmp	r2, r3
 801c03a:	dbe9      	blt.n	801c010 <mg_uecc_vli_set+0x14>
  }
}
 801c03c:	bf00      	nop
 801c03e:	bf00      	nop
 801c040:	371c      	adds	r7, #28
 801c042:	46bd      	mov	sp, r7
 801c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c048:	4770      	bx	lr

0801c04a <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 801c04a:	b480      	push	{r7}
 801c04c:	b087      	sub	sp, #28
 801c04e:	af00      	add	r7, sp, #0
 801c050:	60f8      	str	r0, [r7, #12]
 801c052:	60b9      	str	r1, [r7, #8]
 801c054:	4613      	mov	r3, r2
 801c056:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801c058:	79fb      	ldrb	r3, [r7, #7]
 801c05a:	3b01      	subs	r3, #1
 801c05c:	b2db      	uxtb	r3, r3
 801c05e:	75fb      	strb	r3, [r7, #23]
 801c060:	e024      	b.n	801c0ac <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 801c062:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c066:	009b      	lsls	r3, r3, #2
 801c068:	68fa      	ldr	r2, [r7, #12]
 801c06a:	4413      	add	r3, r2
 801c06c:	681a      	ldr	r2, [r3, #0]
 801c06e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c072:	009b      	lsls	r3, r3, #2
 801c074:	68b9      	ldr	r1, [r7, #8]
 801c076:	440b      	add	r3, r1
 801c078:	681b      	ldr	r3, [r3, #0]
 801c07a:	429a      	cmp	r2, r3
 801c07c:	d901      	bls.n	801c082 <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 801c07e:	2301      	movs	r3, #1
 801c080:	e019      	b.n	801c0b6 <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 801c082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c086:	009b      	lsls	r3, r3, #2
 801c088:	68fa      	ldr	r2, [r7, #12]
 801c08a:	4413      	add	r3, r2
 801c08c:	681a      	ldr	r2, [r3, #0]
 801c08e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c092:	009b      	lsls	r3, r3, #2
 801c094:	68b9      	ldr	r1, [r7, #8]
 801c096:	440b      	add	r3, r1
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	429a      	cmp	r2, r3
 801c09c:	d202      	bcs.n	801c0a4 <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 801c09e:	f04f 33ff 	mov.w	r3, #4294967295
 801c0a2:	e008      	b.n	801c0b6 <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 801c0a4:	7dfb      	ldrb	r3, [r7, #23]
 801c0a6:	3b01      	subs	r3, #1
 801c0a8:	b2db      	uxtb	r3, r3
 801c0aa:	75fb      	strb	r3, [r7, #23]
 801c0ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	dad6      	bge.n	801c062 <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 801c0b4:	2300      	movs	r3, #0
}
 801c0b6:	4618      	mov	r0, r3
 801c0b8:	371c      	adds	r7, #28
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c0:	4770      	bx	lr

0801c0c2 <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 801c0c2:	b480      	push	{r7}
 801c0c4:	b087      	sub	sp, #28
 801c0c6:	af00      	add	r7, sp, #0
 801c0c8:	60f8      	str	r0, [r7, #12]
 801c0ca:	60b9      	str	r1, [r7, #8]
 801c0cc:	4613      	mov	r3, r2
 801c0ce:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801c0d4:	79fb      	ldrb	r3, [r7, #7]
 801c0d6:	3b01      	subs	r3, #1
 801c0d8:	b2db      	uxtb	r3, r3
 801c0da:	74fb      	strb	r3, [r7, #19]
 801c0dc:	e013      	b.n	801c106 <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 801c0de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c0e2:	009b      	lsls	r3, r3, #2
 801c0e4:	68fa      	ldr	r2, [r7, #12]
 801c0e6:	4413      	add	r3, r2
 801c0e8:	681a      	ldr	r2, [r3, #0]
 801c0ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c0ee:	009b      	lsls	r3, r3, #2
 801c0f0:	68b9      	ldr	r1, [r7, #8]
 801c0f2:	440b      	add	r3, r1
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	4053      	eors	r3, r2
 801c0f8:	697a      	ldr	r2, [r7, #20]
 801c0fa:	4313      	orrs	r3, r2
 801c0fc:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 801c0fe:	7cfb      	ldrb	r3, [r7, #19]
 801c100:	3b01      	subs	r3, #1
 801c102:	b2db      	uxtb	r3, r3
 801c104:	74fb      	strb	r3, [r7, #19]
 801c106:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	dae7      	bge.n	801c0de <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 801c10e:	697b      	ldr	r3, [r7, #20]
 801c110:	2b00      	cmp	r3, #0
 801c112:	bf0c      	ite	eq
 801c114:	2301      	moveq	r3, #1
 801c116:	2300      	movne	r3, #0
 801c118:	b2db      	uxtb	r3, r3
}
 801c11a:	4618      	mov	r0, r3
 801c11c:	371c      	adds	r7, #28
 801c11e:	46bd      	mov	sp, r7
 801c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c124:	4770      	bx	lr

0801c126 <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 801c126:	b580      	push	{r7, lr}
 801c128:	b08e      	sub	sp, #56	@ 0x38
 801c12a:	af00      	add	r7, sp, #0
 801c12c:	60f8      	str	r0, [r7, #12]
 801c12e:	60b9      	str	r1, [r7, #8]
 801c130:	4613      	mov	r3, r2
 801c132:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 801c134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c138:	f107 0010 	add.w	r0, r7, #16
 801c13c:	68ba      	ldr	r2, [r7, #8]
 801c13e:	68f9      	ldr	r1, [r7, #12]
 801c140:	f000 f896 	bl	801c270 <mg_uecc_vli_sub>
 801c144:	4603      	mov	r3, r0
 801c146:	2b00      	cmp	r3, #0
 801c148:	bf14      	ite	ne
 801c14a:	2301      	movne	r3, #1
 801c14c:	2300      	moveq	r3, #0
 801c14e:	b2db      	uxtb	r3, r3
 801c150:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 801c152:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801c156:	f107 0310 	add.w	r3, r7, #16
 801c15a:	4611      	mov	r1, r2
 801c15c:	4618      	mov	r0, r3
 801c15e:	f7ff feaa 	bl	801beb6 <mg_uecc_vli_isZero>
 801c162:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 801c164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c166:	2b00      	cmp	r3, #0
 801c168:	bf0c      	ite	eq
 801c16a:	2301      	moveq	r3, #1
 801c16c:	2300      	movne	r3, #0
 801c16e:	b2db      	uxtb	r3, r3
 801c170:	461a      	mov	r2, r3
 801c172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c174:	b2db      	uxtb	r3, r3
 801c176:	005b      	lsls	r3, r3, #1
 801c178:	b2db      	uxtb	r3, r3
 801c17a:	1ad3      	subs	r3, r2, r3
 801c17c:	b2db      	uxtb	r3, r3
 801c17e:	b25b      	sxtb	r3, r3
}
 801c180:	4618      	mov	r0, r3
 801c182:	3738      	adds	r7, #56	@ 0x38
 801c184:	46bd      	mov	sp, r7
 801c186:	bd80      	pop	{r7, pc}

0801c188 <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 801c188:	b480      	push	{r7}
 801c18a:	b087      	sub	sp, #28
 801c18c:	af00      	add	r7, sp, #0
 801c18e:	6078      	str	r0, [r7, #4]
 801c190:	460b      	mov	r3, r1
 801c192:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 801c194:	687b      	ldr	r3, [r7, #4]
 801c196:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 801c198:	2300      	movs	r3, #0
 801c19a:	617b      	str	r3, [r7, #20]

  vli += num_words;
 801c19c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c1a0:	009b      	lsls	r3, r3, #2
 801c1a2:	687a      	ldr	r2, [r7, #4]
 801c1a4:	4413      	add	r3, r2
 801c1a6:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 801c1a8:	e00b      	b.n	801c1c2 <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 801c1aa:	687b      	ldr	r3, [r7, #4]
 801c1ac:	681b      	ldr	r3, [r3, #0]
 801c1ae:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 801c1b0:	68fb      	ldr	r3, [r7, #12]
 801c1b2:	085a      	lsrs	r2, r3, #1
 801c1b4:	697b      	ldr	r3, [r7, #20]
 801c1b6:	431a      	orrs	r2, r3
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	07db      	lsls	r3, r3, #31
 801c1c0:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	1f1a      	subs	r2, r3, #4
 801c1c6:	607a      	str	r2, [r7, #4]
 801c1c8:	693a      	ldr	r2, [r7, #16]
 801c1ca:	429a      	cmp	r2, r3
 801c1cc:	d3ed      	bcc.n	801c1aa <mg_uecc_vli_rshift1+0x22>
  }
}
 801c1ce:	bf00      	nop
 801c1d0:	bf00      	nop
 801c1d2:	371c      	adds	r7, #28
 801c1d4:	46bd      	mov	sp, r7
 801c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1da:	4770      	bx	lr

0801c1dc <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801c1dc:	b480      	push	{r7}
 801c1de:	b089      	sub	sp, #36	@ 0x24
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	60f8      	str	r0, [r7, #12]
 801c1e4:	60b9      	str	r1, [r7, #8]
 801c1e6:	607a      	str	r2, [r7, #4]
 801c1e8:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 801c1ea:	2300      	movs	r3, #0
 801c1ec:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801c1ee:	2300      	movs	r3, #0
 801c1f0:	76fb      	strb	r3, [r7, #27]
 801c1f2:	e030      	b.n	801c256 <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 801c1f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c1f8:	009b      	lsls	r3, r3, #2
 801c1fa:	68ba      	ldr	r2, [r7, #8]
 801c1fc:	4413      	add	r3, r2
 801c1fe:	681a      	ldr	r2, [r3, #0]
 801c200:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c204:	009b      	lsls	r3, r3, #2
 801c206:	6879      	ldr	r1, [r7, #4]
 801c208:	440b      	add	r3, r1
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	4413      	add	r3, r2
 801c20e:	69fa      	ldr	r2, [r7, #28]
 801c210:	4413      	add	r3, r2
 801c212:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 801c214:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c218:	009b      	lsls	r3, r3, #2
 801c21a:	68ba      	ldr	r2, [r7, #8]
 801c21c:	4413      	add	r3, r2
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	697a      	ldr	r2, [r7, #20]
 801c222:	429a      	cmp	r2, r3
 801c224:	d00c      	beq.n	801c240 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 801c226:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c22a:	009b      	lsls	r3, r3, #2
 801c22c:	68ba      	ldr	r2, [r7, #8]
 801c22e:	4413      	add	r3, r2
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	697a      	ldr	r2, [r7, #20]
 801c234:	429a      	cmp	r2, r3
 801c236:	bf34      	ite	cc
 801c238:	2301      	movcc	r3, #1
 801c23a:	2300      	movcs	r3, #0
 801c23c:	b2db      	uxtb	r3, r3
 801c23e:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 801c240:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c244:	009b      	lsls	r3, r3, #2
 801c246:	68fa      	ldr	r2, [r7, #12]
 801c248:	4413      	add	r3, r2
 801c24a:	697a      	ldr	r2, [r7, #20]
 801c24c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801c24e:	7efb      	ldrb	r3, [r7, #27]
 801c250:	3301      	adds	r3, #1
 801c252:	b2db      	uxtb	r3, r3
 801c254:	76fb      	strb	r3, [r7, #27]
 801c256:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801c25a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c25e:	429a      	cmp	r2, r3
 801c260:	dbc8      	blt.n	801c1f4 <mg_uecc_vli_add+0x18>
  }
  return carry;
 801c262:	69fb      	ldr	r3, [r7, #28]
}
 801c264:	4618      	mov	r0, r3
 801c266:	3724      	adds	r7, #36	@ 0x24
 801c268:	46bd      	mov	sp, r7
 801c26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c26e:	4770      	bx	lr

0801c270 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801c270:	b480      	push	{r7}
 801c272:	b089      	sub	sp, #36	@ 0x24
 801c274:	af00      	add	r7, sp, #0
 801c276:	60f8      	str	r0, [r7, #12]
 801c278:	60b9      	str	r1, [r7, #8]
 801c27a:	607a      	str	r2, [r7, #4]
 801c27c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 801c27e:	2300      	movs	r3, #0
 801c280:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801c282:	2300      	movs	r3, #0
 801c284:	76fb      	strb	r3, [r7, #27]
 801c286:	e030      	b.n	801c2ea <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 801c288:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c28c:	009b      	lsls	r3, r3, #2
 801c28e:	68ba      	ldr	r2, [r7, #8]
 801c290:	4413      	add	r3, r2
 801c292:	681a      	ldr	r2, [r3, #0]
 801c294:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c298:	009b      	lsls	r3, r3, #2
 801c29a:	6879      	ldr	r1, [r7, #4]
 801c29c:	440b      	add	r3, r1
 801c29e:	681b      	ldr	r3, [r3, #0]
 801c2a0:	1ad2      	subs	r2, r2, r3
 801c2a2:	69fb      	ldr	r3, [r7, #28]
 801c2a4:	1ad3      	subs	r3, r2, r3
 801c2a6:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 801c2a8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c2ac:	009b      	lsls	r3, r3, #2
 801c2ae:	68ba      	ldr	r2, [r7, #8]
 801c2b0:	4413      	add	r3, r2
 801c2b2:	681b      	ldr	r3, [r3, #0]
 801c2b4:	697a      	ldr	r2, [r7, #20]
 801c2b6:	429a      	cmp	r2, r3
 801c2b8:	d00c      	beq.n	801c2d4 <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 801c2ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c2be:	009b      	lsls	r3, r3, #2
 801c2c0:	68ba      	ldr	r2, [r7, #8]
 801c2c2:	4413      	add	r3, r2
 801c2c4:	681b      	ldr	r3, [r3, #0]
 801c2c6:	697a      	ldr	r2, [r7, #20]
 801c2c8:	429a      	cmp	r2, r3
 801c2ca:	bf8c      	ite	hi
 801c2cc:	2301      	movhi	r3, #1
 801c2ce:	2300      	movls	r3, #0
 801c2d0:	b2db      	uxtb	r3, r3
 801c2d2:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 801c2d4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c2d8:	009b      	lsls	r3, r3, #2
 801c2da:	68fa      	ldr	r2, [r7, #12]
 801c2dc:	4413      	add	r3, r2
 801c2de:	697a      	ldr	r2, [r7, #20]
 801c2e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801c2e2:	7efb      	ldrb	r3, [r7, #27]
 801c2e4:	3301      	adds	r3, #1
 801c2e6:	b2db      	uxtb	r3, r3
 801c2e8:	76fb      	strb	r3, [r7, #27]
 801c2ea:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801c2ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c2f2:	429a      	cmp	r2, r3
 801c2f4:	dbc8      	blt.n	801c288 <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 801c2f6:	69fb      	ldr	r3, [r7, #28]
}
 801c2f8:	4618      	mov	r0, r3
 801c2fa:	3724      	adds	r7, #36	@ 0x24
 801c2fc:	46bd      	mov	sp, r7
 801c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c302:	4770      	bx	lr

0801c304 <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 801c304:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c308:	b091      	sub	sp, #68	@ 0x44
 801c30a:	af00      	add	r7, sp, #0
 801c30c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801c30e:	62b9      	str	r1, [r7, #40]	@ 0x28
 801c310:	627a      	str	r2, [r7, #36]	@ 0x24
 801c312:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 801c314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c316:	2200      	movs	r2, #0
 801c318:	4698      	mov	r8, r3
 801c31a:	4691      	mov	r9, r2
 801c31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c31e:	2200      	movs	r2, #0
 801c320:	469a      	mov	sl, r3
 801c322:	4693      	mov	fp, r2
 801c324:	fb0a f209 	mul.w	r2, sl, r9
 801c328:	fb08 f30b 	mul.w	r3, r8, fp
 801c32c:	4413      	add	r3, r2
 801c32e:	fba8 450a 	umull	r4, r5, r8, sl
 801c332:	442b      	add	r3, r5
 801c334:	461d      	mov	r5, r3
 801c336:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 801c33a:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 801c33e:	6a3b      	ldr	r3, [r7, #32]
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	2200      	movs	r2, #0
 801c344:	61bb      	str	r3, [r7, #24]
 801c346:	61fa      	str	r2, [r7, #28]
 801c348:	f04f 0200 	mov.w	r2, #0
 801c34c:	f04f 0300 	mov.w	r3, #0
 801c350:	69b9      	ldr	r1, [r7, #24]
 801c352:	000b      	movs	r3, r1
 801c354:	2200      	movs	r2, #0
 801c356:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c358:	6809      	ldr	r1, [r1, #0]
 801c35a:	2000      	movs	r0, #0
 801c35c:	6139      	str	r1, [r7, #16]
 801c35e:	6178      	str	r0, [r7, #20]
 801c360:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801c364:	4621      	mov	r1, r4
 801c366:	4311      	orrs	r1, r2
 801c368:	60b9      	str	r1, [r7, #8]
 801c36a:	4629      	mov	r1, r5
 801c36c:	4319      	orrs	r1, r3
 801c36e:	60f9      	str	r1, [r7, #12]
 801c370:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801c374:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 801c378:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801c37c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801c380:	1884      	adds	r4, r0, r2
 801c382:	603c      	str	r4, [r7, #0]
 801c384:	eb41 0303 	adc.w	r3, r1, r3
 801c388:	607b      	str	r3, [r7, #4]
 801c38a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c38e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 801c392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c394:	681c      	ldr	r4, [r3, #0]
 801c396:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801c39a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801c39e:	4290      	cmp	r0, r2
 801c3a0:	eb71 0303 	sbcs.w	r3, r1, r3
 801c3a4:	bf34      	ite	cc
 801c3a6:	2301      	movcc	r3, #1
 801c3a8:	2300      	movcs	r3, #0
 801c3aa:	b2db      	uxtb	r3, r3
 801c3ac:	18e2      	adds	r2, r4, r3
 801c3ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c3b0:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 801c3b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801c3b6:	f04f 0200 	mov.w	r2, #0
 801c3ba:	f04f 0300 	mov.w	r3, #0
 801c3be:	000a      	movs	r2, r1
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	6a3b      	ldr	r3, [r7, #32]
 801c3c4:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 801c3c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3ca:	601a      	str	r2, [r3, #0]
#endif
}
 801c3cc:	bf00      	nop
 801c3ce:	3744      	adds	r7, #68	@ 0x44
 801c3d0:	46bd      	mov	sp, r7
 801c3d2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c3d6:	4770      	bx	lr

0801c3d8 <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 801c3d8:	b590      	push	{r4, r7, lr}
 801c3da:	b08b      	sub	sp, #44	@ 0x2c
 801c3dc:	af02      	add	r7, sp, #8
 801c3de:	60f8      	str	r0, [r7, #12]
 801c3e0:	60b9      	str	r1, [r7, #8]
 801c3e2:	607a      	str	r2, [r7, #4]
 801c3e4:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 801c3e6:	2300      	movs	r3, #0
 801c3e8:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 801c3ea:	2300      	movs	r3, #0
 801c3ec:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 801c3ee:	2300      	movs	r3, #0
 801c3f0:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 801c3f2:	2300      	movs	r3, #0
 801c3f4:	77bb      	strb	r3, [r7, #30]
 801c3f6:	e036      	b.n	801c466 <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	77fb      	strb	r3, [r7, #31]
 801c3fc:	e01c      	b.n	801c438 <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801c3fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801c402:	009b      	lsls	r3, r3, #2
 801c404:	68ba      	ldr	r2, [r7, #8]
 801c406:	4413      	add	r3, r2
 801c408:	6818      	ldr	r0, [r3, #0]
 801c40a:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c40e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801c412:	1ad3      	subs	r3, r2, r3
 801c414:	009b      	lsls	r3, r3, #2
 801c416:	687a      	ldr	r2, [r7, #4]
 801c418:	4413      	add	r3, r2
 801c41a:	6819      	ldr	r1, [r3, #0]
 801c41c:	f107 0414 	add.w	r4, r7, #20
 801c420:	f107 0218 	add.w	r2, r7, #24
 801c424:	f107 0310 	add.w	r3, r7, #16
 801c428:	9300      	str	r3, [sp, #0]
 801c42a:	4623      	mov	r3, r4
 801c42c:	f7ff ff6a 	bl	801c304 <muladd>
    for (i = 0; i <= k; ++i) {
 801c430:	7ffb      	ldrb	r3, [r7, #31]
 801c432:	3301      	adds	r3, #1
 801c434:	b2db      	uxtb	r3, r3
 801c436:	77fb      	strb	r3, [r7, #31]
 801c438:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801c43c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c440:	429a      	cmp	r2, r3
 801c442:	dddc      	ble.n	801c3fe <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 801c444:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c448:	009b      	lsls	r3, r3, #2
 801c44a:	68fa      	ldr	r2, [r7, #12]
 801c44c:	4413      	add	r3, r2
 801c44e:	69ba      	ldr	r2, [r7, #24]
 801c450:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801c452:	697b      	ldr	r3, [r7, #20]
 801c454:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801c456:	693b      	ldr	r3, [r7, #16]
 801c458:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801c45a:	2300      	movs	r3, #0
 801c45c:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 801c45e:	7fbb      	ldrb	r3, [r7, #30]
 801c460:	3301      	adds	r3, #1
 801c462:	b2db      	uxtb	r3, r3
 801c464:	77bb      	strb	r3, [r7, #30]
 801c466:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c46a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c46e:	429a      	cmp	r2, r3
 801c470:	dbc2      	blt.n	801c3f8 <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801c472:	78fb      	ldrb	r3, [r7, #3]
 801c474:	77bb      	strb	r3, [r7, #30]
 801c476:	e03b      	b.n	801c4f0 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801c478:	7fba      	ldrb	r2, [r7, #30]
 801c47a:	78fb      	ldrb	r3, [r7, #3]
 801c47c:	1ad3      	subs	r3, r2, r3
 801c47e:	b2db      	uxtb	r3, r3
 801c480:	3301      	adds	r3, #1
 801c482:	b2db      	uxtb	r3, r3
 801c484:	77fb      	strb	r3, [r7, #31]
 801c486:	e01c      	b.n	801c4c2 <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801c488:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801c48c:	009b      	lsls	r3, r3, #2
 801c48e:	68ba      	ldr	r2, [r7, #8]
 801c490:	4413      	add	r3, r2
 801c492:	6818      	ldr	r0, [r3, #0]
 801c494:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c498:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801c49c:	1ad3      	subs	r3, r2, r3
 801c49e:	009b      	lsls	r3, r3, #2
 801c4a0:	687a      	ldr	r2, [r7, #4]
 801c4a2:	4413      	add	r3, r2
 801c4a4:	6819      	ldr	r1, [r3, #0]
 801c4a6:	f107 0414 	add.w	r4, r7, #20
 801c4aa:	f107 0218 	add.w	r2, r7, #24
 801c4ae:	f107 0310 	add.w	r3, r7, #16
 801c4b2:	9300      	str	r3, [sp, #0]
 801c4b4:	4623      	mov	r3, r4
 801c4b6:	f7ff ff25 	bl	801c304 <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801c4ba:	7ffb      	ldrb	r3, [r7, #31]
 801c4bc:	3301      	adds	r3, #1
 801c4be:	b2db      	uxtb	r3, r3
 801c4c0:	77fb      	strb	r3, [r7, #31]
 801c4c2:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801c4c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c4ca:	429a      	cmp	r2, r3
 801c4cc:	dbdc      	blt.n	801c488 <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 801c4ce:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c4d2:	009b      	lsls	r3, r3, #2
 801c4d4:	68fa      	ldr	r2, [r7, #12]
 801c4d6:	4413      	add	r3, r2
 801c4d8:	69ba      	ldr	r2, [r7, #24]
 801c4da:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801c4dc:	697b      	ldr	r3, [r7, #20]
 801c4de:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801c4e0:	693b      	ldr	r3, [r7, #16]
 801c4e2:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801c4e4:	2300      	movs	r3, #0
 801c4e6:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801c4e8:	7fbb      	ldrb	r3, [r7, #30]
 801c4ea:	3301      	adds	r3, #1
 801c4ec:	b2db      	uxtb	r3, r3
 801c4ee:	77bb      	strb	r3, [r7, #30]
 801c4f0:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c4f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c4f8:	005b      	lsls	r3, r3, #1
 801c4fa:	3b01      	subs	r3, #1
 801c4fc:	429a      	cmp	r2, r3
 801c4fe:	dbbb      	blt.n	801c478 <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 801c500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c504:	00db      	lsls	r3, r3, #3
 801c506:	3b04      	subs	r3, #4
 801c508:	68fa      	ldr	r2, [r7, #12]
 801c50a:	4413      	add	r3, r2
 801c50c:	69ba      	ldr	r2, [r7, #24]
 801c50e:	601a      	str	r2, [r3, #0]
}
 801c510:	bf00      	nop
 801c512:	3724      	adds	r7, #36	@ 0x24
 801c514:	46bd      	mov	sp, r7
 801c516:	bd90      	pop	{r4, r7, pc}

0801c518 <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801c518:	b580      	push	{r7, lr}
 801c51a:	b086      	sub	sp, #24
 801c51c:	af00      	add	r7, sp, #0
 801c51e:	60f8      	str	r0, [r7, #12]
 801c520:	60b9      	str	r1, [r7, #8]
 801c522:	607a      	str	r2, [r7, #4]
 801c524:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 801c526:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c52a:	687a      	ldr	r2, [r7, #4]
 801c52c:	68b9      	ldr	r1, [r7, #8]
 801c52e:	68f8      	ldr	r0, [r7, #12]
 801c530:	f7ff fe54 	bl	801c1dc <mg_uecc_vli_add>
 801c534:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 801c536:	697b      	ldr	r3, [r7, #20]
 801c538:	2b00      	cmp	r3, #0
 801c53a:	d109      	bne.n	801c550 <mg_uecc_vli_modAdd+0x38>
 801c53c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c540:	461a      	mov	r2, r3
 801c542:	68f9      	ldr	r1, [r7, #12]
 801c544:	6838      	ldr	r0, [r7, #0]
 801c546:	f7ff fd80 	bl	801c04a <mg_uecc_vli_cmp_unsafe>
 801c54a:	4603      	mov	r3, r0
 801c54c:	2b01      	cmp	r3, #1
 801c54e:	d006      	beq.n	801c55e <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 801c550:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c554:	683a      	ldr	r2, [r7, #0]
 801c556:	68f9      	ldr	r1, [r7, #12]
 801c558:	68f8      	ldr	r0, [r7, #12]
 801c55a:	f7ff fe89 	bl	801c270 <mg_uecc_vli_sub>
  }
}
 801c55e:	bf00      	nop
 801c560:	3718      	adds	r7, #24
 801c562:	46bd      	mov	sp, r7
 801c564:	bd80      	pop	{r7, pc}

0801c566 <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801c566:	b580      	push	{r7, lr}
 801c568:	b086      	sub	sp, #24
 801c56a:	af00      	add	r7, sp, #0
 801c56c:	60f8      	str	r0, [r7, #12]
 801c56e:	60b9      	str	r1, [r7, #8]
 801c570:	607a      	str	r2, [r7, #4]
 801c572:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 801c574:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c578:	687a      	ldr	r2, [r7, #4]
 801c57a:	68b9      	ldr	r1, [r7, #8]
 801c57c:	68f8      	ldr	r0, [r7, #12]
 801c57e:	f7ff fe77 	bl	801c270 <mg_uecc_vli_sub>
 801c582:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 801c584:	697b      	ldr	r3, [r7, #20]
 801c586:	2b00      	cmp	r3, #0
 801c588:	d006      	beq.n	801c598 <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 801c58a:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c58e:	683a      	ldr	r2, [r7, #0]
 801c590:	68f9      	ldr	r1, [r7, #12]
 801c592:	68f8      	ldr	r0, [r7, #12]
 801c594:	f7ff fe22 	bl	801c1dc <mg_uecc_vli_add>
  }
}
 801c598:	bf00      	nop
 801c59a:	3718      	adds	r7, #24
 801c59c:	46bd      	mov	sp, r7
 801c59e:	bd80      	pop	{r7, pc}

0801c5a0 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 801c5a0:	b590      	push	{r4, r7, lr}
 801c5a2:	b0ad      	sub	sp, #180	@ 0xb4
 801c5a4:	af00      	add	r7, sp, #0
 801c5a6:	60f8      	str	r0, [r7, #12]
 801c5a8:	60b9      	str	r1, [r7, #8]
 801c5aa:	607a      	str	r2, [r7, #4]
 801c5ac:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 801c5ae:	f107 0318 	add.w	r3, r7, #24
 801c5b2:	613b      	str	r3, [r7, #16]
 801c5b4:	68bb      	ldr	r3, [r7, #8]
 801c5b6:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801c5b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c5bc:	b29b      	uxth	r3, r3
 801c5be:	019b      	lsls	r3, r3, #6
 801c5c0:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 801c5c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c5c6:	4619      	mov	r1, r3
 801c5c8:	6878      	ldr	r0, [r7, #4]
 801c5ca:	f7ff fcde 	bl	801bf8a <mg_uecc_vli_numBits>
 801c5ce:	4603      	mov	r3, r0
 801c5d0:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801c5d2:	1ae3      	subs	r3, r4, r3
 801c5d4:	b29b      	uxth	r3, r3
 801c5d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 801c5da:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	da00      	bge.n	801c5e4 <mg_uecc_vli_mmod+0x44>
 801c5e2:	331f      	adds	r3, #31
 801c5e4:	115b      	asrs	r3, r3, #5
 801c5e6:	b21b      	sxth	r3, r3
 801c5e8:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 801c5ec:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801c5f0:	425a      	negs	r2, r3
 801c5f2:	f003 031f 	and.w	r3, r3, #31
 801c5f6:	f002 021f 	and.w	r2, r2, #31
 801c5fa:	bf58      	it	pl
 801c5fc:	4253      	negpl	r3, r2
 801c5fe:	b21b      	sxth	r3, r3
 801c600:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 801c604:	2300      	movs	r3, #0
 801c606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 801c60a:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801c60e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801c612:	4611      	mov	r1, r2
 801c614:	4618      	mov	r0, r3
 801c616:	f7ff fc2d 	bl	801be74 <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 801c61a:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801c61e:	2b00      	cmp	r3, #0
 801c620:	dd34      	ble.n	801c68c <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801c622:	2300      	movs	r3, #0
 801c624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801c628:	e029      	b.n	801c67e <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801c62a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c62e:	009b      	lsls	r3, r3, #2
 801c630:	687a      	ldr	r2, [r7, #4]
 801c632:	4413      	add	r3, r2
 801c634:	681a      	ldr	r2, [r3, #0]
 801c636:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801c63a:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801c63e:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801c642:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c646:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801c648:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801c64c:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801c64e:	009b      	lsls	r3, r3, #2
 801c650:	33b0      	adds	r3, #176	@ 0xb0
 801c652:	443b      	add	r3, r7
 801c654:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 801c658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c65c:	009b      	lsls	r3, r3, #2
 801c65e:	687a      	ldr	r2, [r7, #4]
 801c660:	4413      	add	r3, r2
 801c662:	681a      	ldr	r2, [r3, #0]
 801c664:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801c668:	f1c3 0320 	rsb	r3, r3, #32
 801c66c:	fa22 f303 	lsr.w	r3, r2, r3
 801c670:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801c674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c678:	3301      	adds	r3, #1
 801c67a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801c67e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c682:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801c686:	429a      	cmp	r2, r3
 801c688:	d3cf      	bcc.n	801c62a <mg_uecc_vli_mmod+0x8a>
 801c68a:	e00b      	b.n	801c6a4 <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 801c68c:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 801c690:	009b      	lsls	r3, r3, #2
 801c692:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801c696:	4413      	add	r3, r2
 801c698:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c69c:	6879      	ldr	r1, [r7, #4]
 801c69e:	4618      	mov	r0, r3
 801c6a0:	f7ff fcac 	bl	801bffc <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 801c6a4:	2301      	movs	r3, #1
 801c6a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801c6aa:	e09f      	b.n	801c7ec <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 801c6b2:	2300      	movs	r3, #0
 801c6b4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801c6b8:	e053      	b.n	801c762 <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 801c6ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c6be:	009b      	lsls	r3, r3, #2
 801c6c0:	33b0      	adds	r3, #176	@ 0xb0
 801c6c2:	443b      	add	r3, r7
 801c6c4:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801c6c8:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c6cc:	009b      	lsls	r3, r3, #2
 801c6ce:	4413      	add	r3, r2
 801c6d0:	681a      	ldr	r2, [r3, #0]
 801c6d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c6d6:	009b      	lsls	r3, r3, #2
 801c6d8:	33b0      	adds	r3, #176	@ 0xb0
 801c6da:	443b      	add	r3, r7
 801c6dc:	f853 3c58 	ldr.w	r3, [r3, #-88]
 801c6e0:	1ad2      	subs	r2, r2, r3
 801c6e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c6e6:	1ad3      	subs	r3, r2, r3
 801c6e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 801c6ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c6f0:	009b      	lsls	r3, r3, #2
 801c6f2:	33b0      	adds	r3, #176	@ 0xb0
 801c6f4:	443b      	add	r3, r7
 801c6f6:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801c6fa:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c6fe:	009b      	lsls	r3, r3, #2
 801c700:	4413      	add	r3, r2
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c708:	429a      	cmp	r2, r3
 801c70a:	d014      	beq.n	801c736 <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 801c70c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c710:	009b      	lsls	r3, r3, #2
 801c712:	33b0      	adds	r3, #176	@ 0xb0
 801c714:	443b      	add	r3, r7
 801c716:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801c71a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c71e:	009b      	lsls	r3, r3, #2
 801c720:	4413      	add	r3, r2
 801c722:	681b      	ldr	r3, [r3, #0]
 801c724:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c728:	429a      	cmp	r2, r3
 801c72a:	bf8c      	ite	hi
 801c72c:	2301      	movhi	r3, #1
 801c72e:	2300      	movls	r3, #0
 801c730:	b2db      	uxtb	r3, r3
 801c732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 801c736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c73a:	f1c3 0301 	rsb	r3, r3, #1
 801c73e:	009b      	lsls	r3, r3, #2
 801c740:	33b0      	adds	r3, #176	@ 0xb0
 801c742:	443b      	add	r3, r7
 801c744:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801c748:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c74c:	009b      	lsls	r3, r3, #2
 801c74e:	4413      	add	r3, r2
 801c750:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c754:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 801c756:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801c75a:	3301      	adds	r3, #1
 801c75c:	b2db      	uxtb	r3, r3
 801c75e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801c762:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 801c766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c76a:	005b      	lsls	r3, r3, #1
 801c76c:	429a      	cmp	r2, r3
 801c76e:	dba4      	blt.n	801c6ba <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 801c770:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801c774:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c778:	429a      	cmp	r2, r3
 801c77a:	bf0c      	ite	eq
 801c77c:	2301      	moveq	r3, #1
 801c77e:	2300      	movne	r3, #0
 801c780:	b2db      	uxtb	r3, r3
 801c782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 801c786:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c78a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801c78e:	4611      	mov	r1, r2
 801c790:	4618      	mov	r0, r3
 801c792:	f7ff fcf9 	bl	801c188 <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801c796:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c79a:	3b01      	subs	r3, #1
 801c79c:	009b      	lsls	r3, r3, #2
 801c79e:	33b0      	adds	r3, #176	@ 0xb0
 801c7a0:	443b      	add	r3, r7
 801c7a2:	f853 1c58 	ldr.w	r1, [r3, #-88]
 801c7a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c7aa:	009b      	lsls	r3, r3, #2
 801c7ac:	33b0      	adds	r3, #176	@ 0xb0
 801c7ae:	443b      	add	r3, r7
 801c7b0:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 801c7b4:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801c7b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c7ba:	3b01      	subs	r3, #1
 801c7bc:	430a      	orrs	r2, r1
 801c7be:	009b      	lsls	r3, r3, #2
 801c7c0:	33b0      	adds	r3, #176	@ 0xb0
 801c7c2:	443b      	add	r3, r7
 801c7c4:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 801c7c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c7cc:	009b      	lsls	r3, r3, #2
 801c7ce:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801c7d2:	4413      	add	r3, r2
 801c7d4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c7d8:	4611      	mov	r1, r2
 801c7da:	4618      	mov	r0, r3
 801c7dc:	f7ff fcd4 	bl	801c188 <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 801c7e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801c7e4:	3b01      	subs	r3, #1
 801c7e6:	b29b      	uxth	r3, r3
 801c7e8:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 801c7ec:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	f6bf af5b 	bge.w	801c6ac <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 801c7f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c7fa:	009b      	lsls	r3, r3, #2
 801c7fc:	33b0      	adds	r3, #176	@ 0xb0
 801c7fe:	443b      	add	r3, r7
 801c800:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 801c804:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c808:	4619      	mov	r1, r3
 801c80a:	68f8      	ldr	r0, [r7, #12]
 801c80c:	f7ff fbf6 	bl	801bffc <mg_uecc_vli_set>
}
 801c810:	bf00      	nop
 801c812:	37b4      	adds	r7, #180	@ 0xb4
 801c814:	46bd      	mov	sp, r7
 801c816:	bd90      	pop	{r4, r7, pc}

0801c818 <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 801c818:	b580      	push	{r7, lr}
 801c81a:	b094      	sub	sp, #80	@ 0x50
 801c81c:	af00      	add	r7, sp, #0
 801c81e:	60f8      	str	r0, [r7, #12]
 801c820:	60b9      	str	r1, [r7, #8]
 801c822:	607a      	str	r2, [r7, #4]
 801c824:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 801c826:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801c82a:	f107 0010 	add.w	r0, r7, #16
 801c82e:	687a      	ldr	r2, [r7, #4]
 801c830:	68b9      	ldr	r1, [r7, #8]
 801c832:	f7ff fdd1 	bl	801c3d8 <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 801c836:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801c83a:	f107 0110 	add.w	r1, r7, #16
 801c83e:	683a      	ldr	r2, [r7, #0]
 801c840:	68f8      	ldr	r0, [r7, #12]
 801c842:	f7ff fead 	bl	801c5a0 <mg_uecc_vli_mmod>
}
 801c846:	bf00      	nop
 801c848:	3750      	adds	r7, #80	@ 0x50
 801c84a:	46bd      	mov	sp, r7
 801c84c:	bd80      	pop	{r7, pc}

0801c84e <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 801c84e:	b580      	push	{r7, lr}
 801c850:	b094      	sub	sp, #80	@ 0x50
 801c852:	af00      	add	r7, sp, #0
 801c854:	60f8      	str	r0, [r7, #12]
 801c856:	60b9      	str	r1, [r7, #8]
 801c858:	607a      	str	r2, [r7, #4]
 801c85a:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 801c85c:	683b      	ldr	r3, [r7, #0]
 801c85e:	f993 3000 	ldrsb.w	r3, [r3]
 801c862:	f107 0010 	add.w	r0, r7, #16
 801c866:	687a      	ldr	r2, [r7, #4]
 801c868:	68b9      	ldr	r1, [r7, #8]
 801c86a:	f7ff fdb5 	bl	801c3d8 <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 801c86e:	683b      	ldr	r3, [r7, #0]
 801c870:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801c874:	f107 0210 	add.w	r2, r7, #16
 801c878:	4611      	mov	r1, r2
 801c87a:	68f8      	ldr	r0, [r7, #12]
 801c87c:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 801c87e:	bf00      	nop
 801c880:	3750      	adds	r7, #80	@ 0x50
 801c882:	46bd      	mov	sp, r7
 801c884:	bd80      	pop	{r7, pc}

0801c886 <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 801c886:	b580      	push	{r7, lr}
 801c888:	b084      	sub	sp, #16
 801c88a:	af00      	add	r7, sp, #0
 801c88c:	60f8      	str	r0, [r7, #12]
 801c88e:	60b9      	str	r1, [r7, #8]
 801c890:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	68ba      	ldr	r2, [r7, #8]
 801c896:	68b9      	ldr	r1, [r7, #8]
 801c898:	68f8      	ldr	r0, [r7, #12]
 801c89a:	f7ff ffd8 	bl	801c84e <mg_uecc_vli_modMult_fast>
}
 801c89e:	bf00      	nop
 801c8a0:	3710      	adds	r7, #16
 801c8a2:	46bd      	mov	sp, r7
 801c8a4:	bd80      	pop	{r7, pc}

0801c8a6 <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 801c8a6:	b580      	push	{r7, lr}
 801c8a8:	b086      	sub	sp, #24
 801c8aa:	af00      	add	r7, sp, #0
 801c8ac:	60f8      	str	r0, [r7, #12]
 801c8ae:	60b9      	str	r1, [r7, #8]
 801c8b0:	4613      	mov	r3, r2
 801c8b2:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 801c8b4:	2300      	movs	r3, #0
 801c8b6:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	f003 0301 	and.w	r3, r3, #1
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d007      	beq.n	801c8d4 <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 801c8c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c8c8:	68ba      	ldr	r2, [r7, #8]
 801c8ca:	68f9      	ldr	r1, [r7, #12]
 801c8cc:	68f8      	ldr	r0, [r7, #12]
 801c8ce:	f7ff fc85 	bl	801c1dc <mg_uecc_vli_add>
 801c8d2:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 801c8d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c8d8:	4619      	mov	r1, r3
 801c8da:	68f8      	ldr	r0, [r7, #12]
 801c8dc:	f7ff fc54 	bl	801c188 <mg_uecc_vli_rshift1>
  if (carry) {
 801c8e0:	697b      	ldr	r3, [r7, #20]
 801c8e2:	2b00      	cmp	r3, #0
 801c8e4:	d013      	beq.n	801c90e <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 801c8e6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801c8ea:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801c8ee:	4413      	add	r3, r2
 801c8f0:	009b      	lsls	r3, r3, #2
 801c8f2:	68fa      	ldr	r2, [r7, #12]
 801c8f4:	4413      	add	r3, r2
 801c8f6:	681a      	ldr	r2, [r3, #0]
 801c8f8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c8fc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801c900:	440b      	add	r3, r1
 801c902:	009b      	lsls	r3, r3, #2
 801c904:	68f9      	ldr	r1, [r7, #12]
 801c906:	440b      	add	r3, r1
 801c908:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801c90c:	601a      	str	r2, [r3, #0]
  }
}
 801c90e:	bf00      	nop
 801c910:	3718      	adds	r7, #24
 801c912:	46bd      	mov	sp, r7
 801c914:	bd80      	pop	{r7, pc}

0801c916 <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801c916:	b580      	push	{r7, lr}
 801c918:	b0a6      	sub	sp, #152	@ 0x98
 801c91a:	af00      	add	r7, sp, #0
 801c91c:	60f8      	str	r0, [r7, #12]
 801c91e:	60b9      	str	r1, [r7, #8]
 801c920:	607a      	str	r2, [r7, #4]
 801c922:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 801c924:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c928:	4619      	mov	r1, r3
 801c92a:	68b8      	ldr	r0, [r7, #8]
 801c92c:	f7ff fac3 	bl	801beb6 <mg_uecc_vli_isZero>
 801c930:	4603      	mov	r3, r0
 801c932:	2b00      	cmp	r3, #0
 801c934:	d006      	beq.n	801c944 <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 801c936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c93a:	4619      	mov	r1, r3
 801c93c:	68f8      	ldr	r0, [r7, #12]
 801c93e:	f7ff fa99 	bl	801be74 <mg_uecc_vli_clear>
 801c942:	e0de      	b.n	801cb02 <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 801c944:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c948:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801c94c:	68b9      	ldr	r1, [r7, #8]
 801c94e:	4618      	mov	r0, r3
 801c950:	f7ff fb54 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 801c954:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c958:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801c95c:	6879      	ldr	r1, [r7, #4]
 801c95e:	4618      	mov	r0, r3
 801c960:	f7ff fb4c 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 801c964:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c968:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801c96c:	4611      	mov	r1, r2
 801c96e:	4618      	mov	r0, r3
 801c970:	f7ff fa80 	bl	801be74 <mg_uecc_vli_clear>
  u[0] = 1;
 801c974:	2301      	movs	r3, #1
 801c976:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 801c978:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c97c:	f107 0314 	add.w	r3, r7, #20
 801c980:	4611      	mov	r1, r2
 801c982:	4618      	mov	r0, r3
 801c984:	f7ff fa76 	bl	801be74 <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801c988:	e0a2      	b.n	801cad0 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 801c98a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c98c:	f003 0301 	and.w	r3, r3, #1
 801c990:	2b00      	cmp	r3, #0
 801c992:	d110      	bne.n	801c9b6 <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 801c994:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c998:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801c99c:	4611      	mov	r1, r2
 801c99e:	4618      	mov	r0, r3
 801c9a0:	f7ff fbf2 	bl	801c188 <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 801c9a4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c9a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801c9ac:	6879      	ldr	r1, [r7, #4]
 801c9ae:	4618      	mov	r0, r3
 801c9b0:	f7ff ff79 	bl	801c8a6 <vli_modInv_update>
 801c9b4:	e08c      	b.n	801cad0 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 801c9b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801c9b8:	f003 0301 	and.w	r3, r3, #1
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d110      	bne.n	801c9e2 <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 801c9c0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c9c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801c9c8:	4611      	mov	r1, r2
 801c9ca:	4618      	mov	r0, r3
 801c9cc:	f7ff fbdc 	bl	801c188 <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 801c9d0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c9d4:	f107 0314 	add.w	r3, r7, #20
 801c9d8:	6879      	ldr	r1, [r7, #4]
 801c9da:	4618      	mov	r0, r3
 801c9dc:	f7ff ff63 	bl	801c8a6 <vli_modInv_update>
 801c9e0:	e076      	b.n	801cad0 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 801c9e2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801c9e6:	2b00      	cmp	r3, #0
 801c9e8:	dd39      	ble.n	801ca5e <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 801c9ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c9ee:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801c9f2:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801c9f6:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801c9fa:	f7ff fc39 	bl	801c270 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 801c9fe:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca02:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801ca06:	4611      	mov	r1, r2
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f7ff fbbd 	bl	801c188 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 801ca0e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca12:	f107 0114 	add.w	r1, r7, #20
 801ca16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801ca1a:	4618      	mov	r0, r3
 801ca1c:	f7ff fb15 	bl	801c04a <mg_uecc_vli_cmp_unsafe>
 801ca20:	4603      	mov	r3, r0
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	da08      	bge.n	801ca38 <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 801ca26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ca2a:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801ca2e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801ca32:	687a      	ldr	r2, [r7, #4]
 801ca34:	f7ff fbd2 	bl	801c1dc <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 801ca38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ca3c:	f107 0214 	add.w	r2, r7, #20
 801ca40:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801ca44:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801ca48:	f7ff fc12 	bl	801c270 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 801ca4c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca50:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801ca54:	6879      	ldr	r1, [r7, #4]
 801ca56:	4618      	mov	r0, r3
 801ca58:	f7ff ff25 	bl	801c8a6 <vli_modInv_update>
 801ca5c:	e038      	b.n	801cad0 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 801ca5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ca62:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801ca66:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801ca6a:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801ca6e:	f7ff fbff 	bl	801c270 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 801ca72:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801ca7a:	4611      	mov	r1, r2
 801ca7c:	4618      	mov	r0, r3
 801ca7e:	f7ff fb83 	bl	801c188 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 801ca82:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca86:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801ca8a:	f107 0314 	add.w	r3, r7, #20
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f7ff fadb 	bl	801c04a <mg_uecc_vli_cmp_unsafe>
 801ca94:	4603      	mov	r3, r0
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	da08      	bge.n	801caac <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 801ca9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ca9e:	f107 0114 	add.w	r1, r7, #20
 801caa2:	f107 0014 	add.w	r0, r7, #20
 801caa6:	687a      	ldr	r2, [r7, #4]
 801caa8:	f7ff fb98 	bl	801c1dc <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 801caac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cab0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801cab4:	f107 0114 	add.w	r1, r7, #20
 801cab8:	f107 0014 	add.w	r0, r7, #20
 801cabc:	f7ff fbd8 	bl	801c270 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 801cac0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cac4:	f107 0314 	add.w	r3, r7, #20
 801cac8:	6879      	ldr	r1, [r7, #4]
 801caca:	4618      	mov	r0, r3
 801cacc:	f7ff feeb 	bl	801c8a6 <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801cad0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cad4:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801cad8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801cadc:	4618      	mov	r0, r3
 801cade:	f7ff fab4 	bl	801c04a <mg_uecc_vli_cmp_unsafe>
 801cae2:	4603      	mov	r3, r0
 801cae4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801cae8:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801caec:	2b00      	cmp	r3, #0
 801caee:	f47f af4c 	bne.w	801c98a <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 801caf2:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801caf6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801cafa:	4619      	mov	r1, r3
 801cafc:	68f8      	ldr	r0, [r7, #12]
 801cafe:	f7ff fa7d 	bl	801bffc <mg_uecc_vli_set>
}
 801cb02:	3798      	adds	r7, #152	@ 0x98
 801cb04:	46bd      	mov	sp, r7
 801cb06:	bd80      	pop	{r7, pc}

0801cb08 <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 801cb08:	b580      	push	{r7, lr}
 801cb0a:	b098      	sub	sp, #96	@ 0x60
 801cb0c:	af02      	add	r7, sp, #8
 801cb0e:	60f8      	str	r0, [r7, #12]
 801cb10:	60b9      	str	r1, [r7, #8]
 801cb12:	607a      	str	r2, [r7, #4]
 801cb14:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801cb16:	683b      	ldr	r3, [r7, #0]
 801cb18:	781b      	ldrb	r3, [r3, #0]
 801cb1a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 801cb1e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cb22:	4619      	mov	r1, r3
 801cb24:	6878      	ldr	r0, [r7, #4]
 801cb26:	f7ff f9c6 	bl	801beb6 <mg_uecc_vli_isZero>
 801cb2a:	4603      	mov	r3, r0
 801cb2c:	2b00      	cmp	r3, #0
 801cb2e:	f040 80e6 	bne.w	801ccfe <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 801cb32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801cb36:	683a      	ldr	r2, [r7, #0]
 801cb38:	68b9      	ldr	r1, [r7, #8]
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	f7ff fea3 	bl	801c886 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 801cb40:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801cb44:	f107 0010 	add.w	r0, r7, #16
 801cb48:	683b      	ldr	r3, [r7, #0]
 801cb4a:	68f9      	ldr	r1, [r7, #12]
 801cb4c:	f7ff fe7f 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 801cb50:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801cb54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801cb58:	683a      	ldr	r2, [r7, #0]
 801cb5a:	4618      	mov	r0, r3
 801cb5c:	f7ff fe93 	bl	801c886 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 801cb60:	683b      	ldr	r3, [r7, #0]
 801cb62:	687a      	ldr	r2, [r7, #4]
 801cb64:	68b9      	ldr	r1, [r7, #8]
 801cb66:	68b8      	ldr	r0, [r7, #8]
 801cb68:	f7ff fe71 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 801cb6c:	683a      	ldr	r2, [r7, #0]
 801cb6e:	6879      	ldr	r1, [r7, #4]
 801cb70:	6878      	ldr	r0, [r7, #4]
 801cb72:	f7ff fe88 	bl	801c886 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 801cb76:	683b      	ldr	r3, [r7, #0]
 801cb78:	1d1a      	adds	r2, r3, #4
 801cb7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cb7e:	9300      	str	r3, [sp, #0]
 801cb80:	4613      	mov	r3, r2
 801cb82:	687a      	ldr	r2, [r7, #4]
 801cb84:	68f9      	ldr	r1, [r7, #12]
 801cb86:	68f8      	ldr	r0, [r7, #12]
 801cb88:	f7ff fcc6 	bl	801c518 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 801cb8c:	683b      	ldr	r3, [r7, #0]
 801cb8e:	1d1a      	adds	r2, r3, #4
 801cb90:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cb94:	9300      	str	r3, [sp, #0]
 801cb96:	4613      	mov	r3, r2
 801cb98:	687a      	ldr	r2, [r7, #4]
 801cb9a:	6879      	ldr	r1, [r7, #4]
 801cb9c:	6878      	ldr	r0, [r7, #4]
 801cb9e:	f7ff fcbb 	bl	801c518 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 801cba2:	683b      	ldr	r3, [r7, #0]
 801cba4:	1d1a      	adds	r2, r3, #4
 801cba6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cbaa:	9300      	str	r3, [sp, #0]
 801cbac:	4613      	mov	r3, r2
 801cbae:	687a      	ldr	r2, [r7, #4]
 801cbb0:	68f9      	ldr	r1, [r7, #12]
 801cbb2:	6878      	ldr	r0, [r7, #4]
 801cbb4:	f7ff fcd7 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 801cbb8:	683b      	ldr	r3, [r7, #0]
 801cbba:	687a      	ldr	r2, [r7, #4]
 801cbbc:	68f9      	ldr	r1, [r7, #12]
 801cbbe:	68f8      	ldr	r0, [r7, #12]
 801cbc0:	f7ff fe45 	bl	801c84e <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 801cbc4:	683b      	ldr	r3, [r7, #0]
 801cbc6:	1d1a      	adds	r2, r3, #4
 801cbc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cbcc:	9300      	str	r3, [sp, #0]
 801cbce:	4613      	mov	r3, r2
 801cbd0:	68fa      	ldr	r2, [r7, #12]
 801cbd2:	68f9      	ldr	r1, [r7, #12]
 801cbd4:	6878      	ldr	r0, [r7, #4]
 801cbd6:	f7ff fc9f 	bl	801c518 <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 801cbda:	683b      	ldr	r3, [r7, #0]
 801cbdc:	1d1a      	adds	r2, r3, #4
 801cbde:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cbe2:	9300      	str	r3, [sp, #0]
 801cbe4:	4613      	mov	r3, r2
 801cbe6:	687a      	ldr	r2, [r7, #4]
 801cbe8:	68f9      	ldr	r1, [r7, #12]
 801cbea:	68f8      	ldr	r0, [r7, #12]
 801cbec:	f7ff fc94 	bl	801c518 <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 801cbf0:	2100      	movs	r1, #0
 801cbf2:	68f8      	ldr	r0, [r7, #12]
 801cbf4:	f7ff f989 	bl	801bf0a <mg_uecc_vli_testBit>
 801cbf8:	4603      	mov	r3, r0
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d024      	beq.n	801cc48 <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 801cbfe:	683b      	ldr	r3, [r7, #0]
 801cc00:	1d1a      	adds	r2, r3, #4
 801cc02:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cc06:	68f9      	ldr	r1, [r7, #12]
 801cc08:	68f8      	ldr	r0, [r7, #12]
 801cc0a:	f7ff fae7 	bl	801c1dc <mg_uecc_vli_add>
 801cc0e:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 801cc10:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cc14:	4619      	mov	r1, r3
 801cc16:	68f8      	ldr	r0, [r7, #12]
 801cc18:	f7ff fab6 	bl	801c188 <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 801cc1c:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801cc20:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cc24:	4413      	add	r3, r2
 801cc26:	009b      	lsls	r3, r3, #2
 801cc28:	68fa      	ldr	r2, [r7, #12]
 801cc2a:	4413      	add	r3, r2
 801cc2c:	6819      	ldr	r1, [r3, #0]
 801cc2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cc30:	07da      	lsls	r2, r3, #31
 801cc32:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 801cc36:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cc3a:	4403      	add	r3, r0
 801cc3c:	009b      	lsls	r3, r3, #2
 801cc3e:	68f8      	ldr	r0, [r7, #12]
 801cc40:	4403      	add	r3, r0
 801cc42:	430a      	orrs	r2, r1
 801cc44:	601a      	str	r2, [r3, #0]
 801cc46:	e005      	b.n	801cc54 <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 801cc48:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cc4c:	4619      	mov	r1, r3
 801cc4e:	68f8      	ldr	r0, [r7, #12]
 801cc50:	f7ff fa9a 	bl	801c188 <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 801cc54:	683a      	ldr	r2, [r7, #0]
 801cc56:	68f9      	ldr	r1, [r7, #12]
 801cc58:	6878      	ldr	r0, [r7, #4]
 801cc5a:	f7ff fe14 	bl	801c886 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 801cc5e:	683b      	ldr	r3, [r7, #0]
 801cc60:	1d19      	adds	r1, r3, #4
 801cc62:	f107 0210 	add.w	r2, r7, #16
 801cc66:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cc6a:	9300      	str	r3, [sp, #0]
 801cc6c:	460b      	mov	r3, r1
 801cc6e:	6879      	ldr	r1, [r7, #4]
 801cc70:	6878      	ldr	r0, [r7, #4]
 801cc72:	f7ff fc78 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 801cc76:	683b      	ldr	r3, [r7, #0]
 801cc78:	1d19      	adds	r1, r3, #4
 801cc7a:	f107 0210 	add.w	r2, r7, #16
 801cc7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cc82:	9300      	str	r3, [sp, #0]
 801cc84:	460b      	mov	r3, r1
 801cc86:	6879      	ldr	r1, [r7, #4]
 801cc88:	6878      	ldr	r0, [r7, #4]
 801cc8a:	f7ff fc6c 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 801cc8e:	683b      	ldr	r3, [r7, #0]
 801cc90:	1d1a      	adds	r2, r3, #4
 801cc92:	f107 0110 	add.w	r1, r7, #16
 801cc96:	f107 0010 	add.w	r0, r7, #16
 801cc9a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cc9e:	9300      	str	r3, [sp, #0]
 801cca0:	4613      	mov	r3, r2
 801cca2:	687a      	ldr	r2, [r7, #4]
 801cca4:	f7ff fc5f 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 801cca8:	f107 0210 	add.w	r2, r7, #16
 801ccac:	683b      	ldr	r3, [r7, #0]
 801ccae:	68f9      	ldr	r1, [r7, #12]
 801ccb0:	68f8      	ldr	r0, [r7, #12]
 801ccb2:	f7ff fdcc 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 801ccb6:	683b      	ldr	r3, [r7, #0]
 801ccb8:	1d19      	adds	r1, r3, #4
 801ccba:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ccbe:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801ccc2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801ccc6:	9300      	str	r3, [sp, #0]
 801ccc8:	460b      	mov	r3, r1
 801ccca:	68f9      	ldr	r1, [r7, #12]
 801cccc:	f7ff fc4b 	bl	801c566 <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 801ccd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801ccd4:	461a      	mov	r2, r3
 801ccd6:	6879      	ldr	r1, [r7, #4]
 801ccd8:	68f8      	ldr	r0, [r7, #12]
 801ccda:	f7ff f98f 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 801ccde:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cce2:	461a      	mov	r2, r3
 801cce4:	68b9      	ldr	r1, [r7, #8]
 801cce6:	6878      	ldr	r0, [r7, #4]
 801cce8:	f7ff f988 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 801ccec:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801ccf0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801ccf4:	4619      	mov	r1, r3
 801ccf6:	68b8      	ldr	r0, [r7, #8]
 801ccf8:	f7ff f980 	bl	801bffc <mg_uecc_vli_set>
 801ccfc:	e000      	b.n	801cd00 <double_jacobian_default+0x1f8>
    return;
 801ccfe:	bf00      	nop
}
 801cd00:	3758      	adds	r7, #88	@ 0x58
 801cd02:	46bd      	mov	sp, r7
 801cd04:	bd80      	pop	{r7, pc}

0801cd06 <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 801cd06:	b580      	push	{r7, lr}
 801cd08:	b090      	sub	sp, #64	@ 0x40
 801cd0a:	af02      	add	r7, sp, #8
 801cd0c:	60f8      	str	r0, [r7, #12]
 801cd0e:	60b9      	str	r1, [r7, #8]
 801cd10:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 801cd12:	f107 0314 	add.w	r3, r7, #20
 801cd16:	2220      	movs	r2, #32
 801cd18:	2100      	movs	r1, #0
 801cd1a:	4618      	mov	r0, r3
 801cd1c:	f006 fbfb 	bl	8023516 <memset>
 801cd20:	2303      	movs	r3, #3
 801cd22:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	781b      	ldrb	r3, [r3, #0]
 801cd28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 801cd2c:	687a      	ldr	r2, [r7, #4]
 801cd2e:	68b9      	ldr	r1, [r7, #8]
 801cd30:	68f8      	ldr	r0, [r7, #12]
 801cd32:	f7ff fda8 	bl	801c886 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	1d19      	adds	r1, r3, #4
 801cd3a:	f107 0214 	add.w	r2, r7, #20
 801cd3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801cd42:	9300      	str	r3, [sp, #0]
 801cd44:	460b      	mov	r3, r1
 801cd46:	68f9      	ldr	r1, [r7, #12]
 801cd48:	68f8      	ldr	r0, [r7, #12]
 801cd4a:	f7ff fc0c 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	68ba      	ldr	r2, [r7, #8]
 801cd52:	68f9      	ldr	r1, [r7, #12]
 801cd54:	68f8      	ldr	r0, [r7, #12]
 801cd56:	f7ff fd7a 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	1d19      	adds	r1, r3, #4
 801cd64:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801cd68:	9300      	str	r3, [sp, #0]
 801cd6a:	460b      	mov	r3, r1
 801cd6c:	68f9      	ldr	r1, [r7, #12]
 801cd6e:	68f8      	ldr	r0, [r7, #12]
 801cd70:	f7ff fbd2 	bl	801c518 <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 801cd74:	bf00      	nop
 801cd76:	3738      	adds	r7, #56	@ 0x38
 801cd78:	46bd      	mov	sp, r7
 801cd7a:	bd80      	pop	{r7, pc}

0801cd7c <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 801cd7c:	b580      	push	{r7, lr}
 801cd7e:	b094      	sub	sp, #80	@ 0x50
 801cd80:	af00      	add	r7, sp, #0
 801cd82:	6078      	str	r0, [r7, #4]
 801cd84:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 801cd86:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801cd8a:	2220      	movs	r2, #32
 801cd8c:	2100      	movs	r1, #0
 801cd8e:	4618      	mov	r0, r3
 801cd90:	f006 fbc1 	bl	8023516 <memset>
 801cd94:	2301      	movs	r3, #1
 801cd96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 801cd98:	f107 030c 	add.w	r3, r7, #12
 801cd9c:	2220      	movs	r2, #32
 801cd9e:	2100      	movs	r1, #0
 801cda0:	4618      	mov	r0, r3
 801cda2:	f006 fbb8 	bl	8023516 <memset>
 801cda6:	2301      	movs	r3, #1
 801cda8:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 801cdaa:	683b      	ldr	r3, [r7, #0]
 801cdac:	781b      	ldrb	r3, [r3, #0]
 801cdae:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 801cdb2:	683b      	ldr	r3, [r7, #0]
 801cdb4:	1d19      	adds	r1, r3, #4
 801cdb6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801cdba:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801cdbe:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801cdc2:	f7ff fa0b 	bl	801c1dc <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801cdc6:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801cdca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801cdce:	4611      	mov	r1, r2
 801cdd0:	4618      	mov	r0, r3
 801cdd2:	f7ff f8da 	bl	801bf8a <mg_uecc_vli_numBits>
 801cdd6:	4603      	mov	r3, r0
 801cdd8:	b29b      	uxth	r3, r3
 801cdda:	3b01      	subs	r3, #1
 801cddc:	b29b      	uxth	r3, r3
 801cdde:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801cde2:	e020      	b.n	801ce26 <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 801cde4:	f107 010c 	add.w	r1, r7, #12
 801cde8:	f107 030c 	add.w	r3, r7, #12
 801cdec:	683a      	ldr	r2, [r7, #0]
 801cdee:	4618      	mov	r0, r3
 801cdf0:	f7ff fd49 	bl	801c886 <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 801cdf4:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 801cdf8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801cdfc:	4611      	mov	r1, r2
 801cdfe:	4618      	mov	r0, r3
 801ce00:	f7ff f883 	bl	801bf0a <mg_uecc_vli_testBit>
 801ce04:	4603      	mov	r3, r0
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d007      	beq.n	801ce1a <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 801ce0a:	f107 010c 	add.w	r1, r7, #12
 801ce0e:	f107 000c 	add.w	r0, r7, #12
 801ce12:	683b      	ldr	r3, [r7, #0]
 801ce14:	687a      	ldr	r2, [r7, #4]
 801ce16:	f7ff fd1a 	bl	801c84e <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801ce1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801ce1e:	3b01      	subs	r3, #1
 801ce20:	b29b      	uxth	r3, r3
 801ce22:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801ce26:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801ce2a:	2b01      	cmp	r3, #1
 801ce2c:	dcda      	bgt.n	801cde4 <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 801ce2e:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801ce32:	f107 030c 	add.w	r3, r7, #12
 801ce36:	4619      	mov	r1, r3
 801ce38:	6878      	ldr	r0, [r7, #4]
 801ce3a:	f7ff f8df 	bl	801bffc <mg_uecc_vli_set>
}
 801ce3e:	bf00      	nop
 801ce40:	3750      	adds	r7, #80	@ 0x50
 801ce42:	46bd      	mov	sp, r7
 801ce44:	bd80      	pop	{r7, pc}
	...

0801ce48 <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 801ce48:	b480      	push	{r7}
 801ce4a:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 801ce4c:	4b02      	ldr	r3, [pc, #8]	@ (801ce58 <mg_uecc_secp256r1+0x10>)
}
 801ce4e:	4618      	mov	r0, r3
 801ce50:	46bd      	mov	sp, r7
 801ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce56:	4770      	bx	lr
 801ce58:	08027c68 	.word	0x08027c68

0801ce5c <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 801ce5c:	b580      	push	{r7, lr}
 801ce5e:	b08c      	sub	sp, #48	@ 0x30
 801ce60:	af00      	add	r7, sp, #0
 801ce62:	6078      	str	r0, [r7, #4]
 801ce64:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 801ce66:	2208      	movs	r2, #8
 801ce68:	6839      	ldr	r1, [r7, #0]
 801ce6a:	6878      	ldr	r0, [r7, #4]
 801ce6c:	f7ff f8c6 	bl	801bffc <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 801ce70:	2300      	movs	r3, #0
 801ce72:	617b      	str	r3, [r7, #20]
 801ce74:	697b      	ldr	r3, [r7, #20]
 801ce76:	613b      	str	r3, [r7, #16]
 801ce78:	693b      	ldr	r3, [r7, #16]
 801ce7a:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 801ce7c:	683b      	ldr	r3, [r7, #0]
 801ce7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce80:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 801ce82:	683b      	ldr	r3, [r7, #0]
 801ce84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ce86:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 801ce88:	683b      	ldr	r3, [r7, #0]
 801ce8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ce8c:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 801ce8e:	683b      	ldr	r3, [r7, #0]
 801ce90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ce92:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801ce94:	683b      	ldr	r3, [r7, #0]
 801ce96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ce98:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801ce9a:	f107 020c 	add.w	r2, r7, #12
 801ce9e:	f107 010c 	add.w	r1, r7, #12
 801cea2:	f107 000c 	add.w	r0, r7, #12
 801cea6:	2308      	movs	r3, #8
 801cea8:	f7ff f998 	bl	801c1dc <mg_uecc_vli_add>
 801ceac:	4603      	mov	r3, r0
 801ceae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801ceb0:	f107 020c 	add.w	r2, r7, #12
 801ceb4:	2308      	movs	r3, #8
 801ceb6:	6879      	ldr	r1, [r7, #4]
 801ceb8:	6878      	ldr	r0, [r7, #4]
 801ceba:	f7ff f98f 	bl	801c1dc <mg_uecc_vli_add>
 801cebe:	4603      	mov	r3, r0
 801cec0:	461a      	mov	r2, r3
 801cec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cec4:	4413      	add	r3, r2
 801cec6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 801cec8:	683b      	ldr	r3, [r7, #0]
 801ceca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cecc:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 801cece:	683b      	ldr	r3, [r7, #0]
 801ced0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ced2:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 801ced4:	683b      	ldr	r3, [r7, #0]
 801ced6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ced8:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 801ceda:	683b      	ldr	r3, [r7, #0]
 801cedc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cede:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 801cee0:	2300      	movs	r3, #0
 801cee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801cee4:	f107 020c 	add.w	r2, r7, #12
 801cee8:	f107 010c 	add.w	r1, r7, #12
 801ceec:	f107 000c 	add.w	r0, r7, #12
 801cef0:	2308      	movs	r3, #8
 801cef2:	f7ff f973 	bl	801c1dc <mg_uecc_vli_add>
 801cef6:	4603      	mov	r3, r0
 801cef8:	461a      	mov	r2, r3
 801cefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cefc:	4413      	add	r3, r2
 801cefe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801cf00:	f107 020c 	add.w	r2, r7, #12
 801cf04:	2308      	movs	r3, #8
 801cf06:	6879      	ldr	r1, [r7, #4]
 801cf08:	6878      	ldr	r0, [r7, #4]
 801cf0a:	f7ff f967 	bl	801c1dc <mg_uecc_vli_add>
 801cf0e:	4603      	mov	r3, r0
 801cf10:	461a      	mov	r2, r3
 801cf12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf14:	4413      	add	r3, r2
 801cf16:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 801cf18:	683b      	ldr	r3, [r7, #0]
 801cf1a:	6a1b      	ldr	r3, [r3, #32]
 801cf1c:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 801cf1e:	683b      	ldr	r3, [r7, #0]
 801cf20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf22:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 801cf24:	683b      	ldr	r3, [r7, #0]
 801cf26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf28:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801cf2a:	2300      	movs	r3, #0
 801cf2c:	623b      	str	r3, [r7, #32]
 801cf2e:	6a3b      	ldr	r3, [r7, #32]
 801cf30:	61fb      	str	r3, [r7, #28]
 801cf32:	69fb      	ldr	r3, [r7, #28]
 801cf34:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 801cf36:	683b      	ldr	r3, [r7, #0]
 801cf38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cf3a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801cf3c:	683b      	ldr	r3, [r7, #0]
 801cf3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cf40:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801cf42:	f107 020c 	add.w	r2, r7, #12
 801cf46:	2308      	movs	r3, #8
 801cf48:	6879      	ldr	r1, [r7, #4]
 801cf4a:	6878      	ldr	r0, [r7, #4]
 801cf4c:	f7ff f946 	bl	801c1dc <mg_uecc_vli_add>
 801cf50:	4603      	mov	r3, r0
 801cf52:	461a      	mov	r2, r3
 801cf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf56:	4413      	add	r3, r2
 801cf58:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 801cf5a:	683b      	ldr	r3, [r7, #0]
 801cf5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cf5e:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 801cf60:	683b      	ldr	r3, [r7, #0]
 801cf62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf64:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 801cf66:	683b      	ldr	r3, [r7, #0]
 801cf68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf6a:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 801cf6c:	683b      	ldr	r3, [r7, #0]
 801cf6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf70:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 801cf72:	683b      	ldr	r3, [r7, #0]
 801cf74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cf76:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 801cf78:	683b      	ldr	r3, [r7, #0]
 801cf7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cf7c:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 801cf7e:	683b      	ldr	r3, [r7, #0]
 801cf80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf82:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 801cf84:	683b      	ldr	r3, [r7, #0]
 801cf86:	6a1b      	ldr	r3, [r3, #32]
 801cf88:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801cf8a:	f107 020c 	add.w	r2, r7, #12
 801cf8e:	2308      	movs	r3, #8
 801cf90:	6879      	ldr	r1, [r7, #4]
 801cf92:	6878      	ldr	r0, [r7, #4]
 801cf94:	f7ff f922 	bl	801c1dc <mg_uecc_vli_add>
 801cf98:	4603      	mov	r3, r0
 801cf9a:	461a      	mov	r2, r3
 801cf9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf9e:	4413      	add	r3, r2
 801cfa0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 801cfa2:	683b      	ldr	r3, [r7, #0]
 801cfa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cfa6:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 801cfa8:	683b      	ldr	r3, [r7, #0]
 801cfaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cfac:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 801cfae:	683b      	ldr	r3, [r7, #0]
 801cfb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cfb2:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801cfb4:	2300      	movs	r3, #0
 801cfb6:	623b      	str	r3, [r7, #32]
 801cfb8:	6a3b      	ldr	r3, [r7, #32]
 801cfba:	61fb      	str	r3, [r7, #28]
 801cfbc:	69fb      	ldr	r3, [r7, #28]
 801cfbe:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 801cfc0:	683b      	ldr	r3, [r7, #0]
 801cfc2:	6a1b      	ldr	r3, [r3, #32]
 801cfc4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 801cfc6:	683b      	ldr	r3, [r7, #0]
 801cfc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cfca:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801cfcc:	f107 020c 	add.w	r2, r7, #12
 801cfd0:	2308      	movs	r3, #8
 801cfd2:	6879      	ldr	r1, [r7, #4]
 801cfd4:	6878      	ldr	r0, [r7, #4]
 801cfd6:	f7ff f94b 	bl	801c270 <mg_uecc_vli_sub>
 801cfda:	4603      	mov	r3, r0
 801cfdc:	461a      	mov	r2, r3
 801cfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfe0:	1a9b      	subs	r3, r3, r2
 801cfe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 801cfe4:	683b      	ldr	r3, [r7, #0]
 801cfe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cfe8:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 801cfea:	683b      	ldr	r3, [r7, #0]
 801cfec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cfee:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 801cff0:	683b      	ldr	r3, [r7, #0]
 801cff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cff4:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 801cff6:	683b      	ldr	r3, [r7, #0]
 801cff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cffa:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 801cffc:	2300      	movs	r3, #0
 801cffe:	623b      	str	r3, [r7, #32]
 801d000:	6a3b      	ldr	r3, [r7, #32]
 801d002:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 801d004:	683b      	ldr	r3, [r7, #0]
 801d006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d008:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 801d00a:	683b      	ldr	r3, [r7, #0]
 801d00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d00e:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801d010:	f107 020c 	add.w	r2, r7, #12
 801d014:	2308      	movs	r3, #8
 801d016:	6879      	ldr	r1, [r7, #4]
 801d018:	6878      	ldr	r0, [r7, #4]
 801d01a:	f7ff f929 	bl	801c270 <mg_uecc_vli_sub>
 801d01e:	4603      	mov	r3, r0
 801d020:	461a      	mov	r2, r3
 801d022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d024:	1a9b      	subs	r3, r3, r2
 801d026:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 801d028:	683b      	ldr	r3, [r7, #0]
 801d02a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d02c:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d032:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 801d034:	683b      	ldr	r3, [r7, #0]
 801d036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d038:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 801d03a:	683b      	ldr	r3, [r7, #0]
 801d03c:	6a1b      	ldr	r3, [r3, #32]
 801d03e:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 801d040:	683b      	ldr	r3, [r7, #0]
 801d042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d044:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 801d046:	683b      	ldr	r3, [r7, #0]
 801d048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d04a:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801d04c:	2300      	movs	r3, #0
 801d04e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 801d050:	683b      	ldr	r3, [r7, #0]
 801d052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d054:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801d056:	f107 020c 	add.w	r2, r7, #12
 801d05a:	2308      	movs	r3, #8
 801d05c:	6879      	ldr	r1, [r7, #4]
 801d05e:	6878      	ldr	r0, [r7, #4]
 801d060:	f7ff f906 	bl	801c270 <mg_uecc_vli_sub>
 801d064:	4603      	mov	r3, r0
 801d066:	461a      	mov	r2, r3
 801d068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d06a:	1a9b      	subs	r3, r3, r2
 801d06c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 801d06e:	683b      	ldr	r3, [r7, #0]
 801d070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d072:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 801d074:	683b      	ldr	r3, [r7, #0]
 801d076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d078:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 801d07a:	2300      	movs	r3, #0
 801d07c:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 801d07e:	683b      	ldr	r3, [r7, #0]
 801d080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d082:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 801d084:	683b      	ldr	r3, [r7, #0]
 801d086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d088:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 801d08a:	683b      	ldr	r3, [r7, #0]
 801d08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d08e:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801d090:	2300      	movs	r3, #0
 801d092:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 801d094:	683b      	ldr	r3, [r7, #0]
 801d096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d098:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801d09a:	f107 020c 	add.w	r2, r7, #12
 801d09e:	2308      	movs	r3, #8
 801d0a0:	6879      	ldr	r1, [r7, #4]
 801d0a2:	6878      	ldr	r0, [r7, #4]
 801d0a4:	f7ff f8e4 	bl	801c270 <mg_uecc_vli_sub>
 801d0a8:	4603      	mov	r3, r0
 801d0aa:	461a      	mov	r2, r3
 801d0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0ae:	1a9b      	subs	r3, r3, r2
 801d0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 801d0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	da19      	bge.n	801d0ec <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 801d0b8:	2308      	movs	r3, #8
 801d0ba:	4a14      	ldr	r2, [pc, #80]	@ (801d10c <vli_mmod_fast_secp256r1+0x2b0>)
 801d0bc:	6879      	ldr	r1, [r7, #4]
 801d0be:	6878      	ldr	r0, [r7, #4]
 801d0c0:	f7ff f88c 	bl	801c1dc <mg_uecc_vli_add>
 801d0c4:	4603      	mov	r3, r0
 801d0c6:	461a      	mov	r2, r3
 801d0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0ca:	4413      	add	r3, r2
 801d0cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 801d0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	dbf1      	blt.n	801d0b8 <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 801d0d4:	e015      	b.n	801d102 <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 801d0d6:	2308      	movs	r3, #8
 801d0d8:	4a0c      	ldr	r2, [pc, #48]	@ (801d10c <vli_mmod_fast_secp256r1+0x2b0>)
 801d0da:	6879      	ldr	r1, [r7, #4]
 801d0dc:	6878      	ldr	r0, [r7, #4]
 801d0de:	f7ff f8c7 	bl	801c270 <mg_uecc_vli_sub>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	461a      	mov	r2, r3
 801d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0e8:	1a9b      	subs	r3, r3, r2
 801d0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 801d0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d1f1      	bne.n	801d0d6 <vli_mmod_fast_secp256r1+0x27a>
 801d0f2:	2208      	movs	r2, #8
 801d0f4:	6879      	ldr	r1, [r7, #4]
 801d0f6:	4805      	ldr	r0, [pc, #20]	@ (801d10c <vli_mmod_fast_secp256r1+0x2b0>)
 801d0f8:	f7fe ffa7 	bl	801c04a <mg_uecc_vli_cmp_unsafe>
 801d0fc:	4603      	mov	r3, r0
 801d0fe:	2b01      	cmp	r3, #1
 801d100:	d1e9      	bne.n	801d0d6 <vli_mmod_fast_secp256r1+0x27a>
}
 801d102:	bf00      	nop
 801d104:	3730      	adds	r7, #48	@ 0x30
 801d106:	46bd      	mov	sp, r7
 801d108:	bd80      	pop	{r7, pc}
 801d10a:	bf00      	nop
 801d10c:	08027c6c 	.word	0x08027c6c

0801d110 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 801d110:	b580      	push	{r7, lr}
 801d112:	b08c      	sub	sp, #48	@ 0x30
 801d114:	af00      	add	r7, sp, #0
 801d116:	60f8      	str	r0, [r7, #12]
 801d118:	60b9      	str	r1, [r7, #8]
 801d11a:	607a      	str	r2, [r7, #4]
 801d11c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 801d11e:	f107 0310 	add.w	r3, r7, #16
 801d122:	683a      	ldr	r2, [r7, #0]
 801d124:	6879      	ldr	r1, [r7, #4]
 801d126:	4618      	mov	r0, r3
 801d128:	f7ff fbad 	bl	801c886 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 801d12c:	f107 0210 	add.w	r2, r7, #16
 801d130:	683b      	ldr	r3, [r7, #0]
 801d132:	68f9      	ldr	r1, [r7, #12]
 801d134:	68f8      	ldr	r0, [r7, #12]
 801d136:	f7ff fb8a 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 801d13a:	f107 0110 	add.w	r1, r7, #16
 801d13e:	f107 0010 	add.w	r0, r7, #16
 801d142:	683b      	ldr	r3, [r7, #0]
 801d144:	687a      	ldr	r2, [r7, #4]
 801d146:	f7ff fb82 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 801d14a:	f107 0210 	add.w	r2, r7, #16
 801d14e:	683b      	ldr	r3, [r7, #0]
 801d150:	68b9      	ldr	r1, [r7, #8]
 801d152:	68b8      	ldr	r0, [r7, #8]
 801d154:	f7ff fb7b 	bl	801c84e <mg_uecc_vli_modMult_fast>
}
 801d158:	bf00      	nop
 801d15a:	3730      	adds	r7, #48	@ 0x30
 801d15c:	46bd      	mov	sp, r7
 801d15e:	bd80      	pop	{r7, pc}

0801d160 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 801d160:	b590      	push	{r4, r7, lr}
 801d162:	b08f      	sub	sp, #60	@ 0x3c
 801d164:	af00      	add	r7, sp, #0
 801d166:	60f8      	str	r0, [r7, #12]
 801d168:	60b9      	str	r1, [r7, #8]
 801d16a:	607a      	str	r2, [r7, #4]
 801d16c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801d16e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d170:	781b      	ldrb	r3, [r3, #0]
 801d172:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 801d176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d008      	beq.n	801d18e <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 801d17c:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801d180:	f107 0314 	add.w	r3, r7, #20
 801d184:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801d186:	4618      	mov	r0, r3
 801d188:	f7fe ff38 	bl	801bffc <mg_uecc_vli_set>
 801d18c:	e009      	b.n	801d1a2 <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 801d18e:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801d192:	f107 0314 	add.w	r3, r7, #20
 801d196:	4611      	mov	r1, r2
 801d198:	4618      	mov	r0, r3
 801d19a:	f7fe fe6b 	bl	801be74 <mg_uecc_vli_clear>
    z[0] = 1;
 801d19e:	2301      	movs	r3, #1
 801d1a0:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 801d1a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d1a6:	461a      	mov	r2, r3
 801d1a8:	68f9      	ldr	r1, [r7, #12]
 801d1aa:	6878      	ldr	r0, [r7, #4]
 801d1ac:	f7fe ff26 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 801d1b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d1b4:	461a      	mov	r2, r3
 801d1b6:	68b9      	ldr	r1, [r7, #8]
 801d1b8:	6838      	ldr	r0, [r7, #0]
 801d1ba:	f7fe ff1f 	bl	801bffc <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 801d1be:	f107 0214 	add.w	r2, r7, #20
 801d1c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1c4:	68b9      	ldr	r1, [r7, #8]
 801d1c6:	68f8      	ldr	r0, [r7, #12]
 801d1c8:	f7ff ffa2 	bl	801d110 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 801d1cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1ce:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801d1d2:	f107 0214 	add.w	r2, r7, #20
 801d1d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1d8:	68b9      	ldr	r1, [r7, #8]
 801d1da:	68f8      	ldr	r0, [r7, #12]
 801d1dc:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 801d1de:	f107 0214 	add.w	r2, r7, #20
 801d1e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d1e4:	6839      	ldr	r1, [r7, #0]
 801d1e6:	6878      	ldr	r0, [r7, #4]
 801d1e8:	f7ff ff92 	bl	801d110 <apply_z>
}
 801d1ec:	bf00      	nop
 801d1ee:	373c      	adds	r7, #60	@ 0x3c
 801d1f0:	46bd      	mov	sp, r7
 801d1f2:	bd90      	pop	{r4, r7, pc}

0801d1f4 <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 801d1f4:	b580      	push	{r7, lr}
 801d1f6:	b090      	sub	sp, #64	@ 0x40
 801d1f8:	af02      	add	r7, sp, #8
 801d1fa:	60f8      	str	r0, [r7, #12]
 801d1fc:	60b9      	str	r1, [r7, #8]
 801d1fe:	607a      	str	r2, [r7, #4]
 801d200:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801d202:	f107 0314 	add.w	r3, r7, #20
 801d206:	2220      	movs	r2, #32
 801d208:	2100      	movs	r1, #0
 801d20a:	4618      	mov	r0, r3
 801d20c:	f006 f983 	bl	8023516 <memset>
  wordcount_t num_words = curve->num_words;
 801d210:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d212:	781b      	ldrb	r3, [r3, #0]
 801d214:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801d218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d21a:	1d1a      	adds	r2, r3, #4
 801d21c:	f107 0014 	add.w	r0, r7, #20
 801d220:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d224:	9300      	str	r3, [sp, #0]
 801d226:	4613      	mov	r3, r2
 801d228:	68fa      	ldr	r2, [r7, #12]
 801d22a:	6879      	ldr	r1, [r7, #4]
 801d22c:	f7ff f99b 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801d230:	f107 0114 	add.w	r1, r7, #20
 801d234:	f107 0314 	add.w	r3, r7, #20
 801d238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801d23a:	4618      	mov	r0, r3
 801d23c:	f7ff fb23 	bl	801c886 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801d240:	f107 0214 	add.w	r2, r7, #20
 801d244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d246:	68f9      	ldr	r1, [r7, #12]
 801d248:	68f8      	ldr	r0, [r7, #12]
 801d24a:	f7ff fb00 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801d24e:	f107 0214 	add.w	r2, r7, #20
 801d252:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d254:	6879      	ldr	r1, [r7, #4]
 801d256:	6878      	ldr	r0, [r7, #4]
 801d258:	f7ff faf9 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801d25c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d25e:	1d1a      	adds	r2, r3, #4
 801d260:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d264:	9300      	str	r3, [sp, #0]
 801d266:	4613      	mov	r3, r2
 801d268:	68ba      	ldr	r2, [r7, #8]
 801d26a:	6839      	ldr	r1, [r7, #0]
 801d26c:	6838      	ldr	r0, [r7, #0]
 801d26e:	f7ff f97a 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 801d272:	f107 0314 	add.w	r3, r7, #20
 801d276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801d278:	6839      	ldr	r1, [r7, #0]
 801d27a:	4618      	mov	r0, r3
 801d27c:	f7ff fb03 	bl	801c886 <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 801d280:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d282:	1d1a      	adds	r2, r3, #4
 801d284:	f107 0114 	add.w	r1, r7, #20
 801d288:	f107 0014 	add.w	r0, r7, #20
 801d28c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d290:	9300      	str	r3, [sp, #0]
 801d292:	4613      	mov	r3, r2
 801d294:	68fa      	ldr	r2, [r7, #12]
 801d296:	f7ff f966 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 801d29a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d29c:	1d1a      	adds	r2, r3, #4
 801d29e:	f107 0114 	add.w	r1, r7, #20
 801d2a2:	f107 0014 	add.w	r0, r7, #20
 801d2a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d2aa:	9300      	str	r3, [sp, #0]
 801d2ac:	4613      	mov	r3, r2
 801d2ae:	687a      	ldr	r2, [r7, #4]
 801d2b0:	f7ff f959 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 801d2b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d2b6:	1d1a      	adds	r2, r3, #4
 801d2b8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d2bc:	9300      	str	r3, [sp, #0]
 801d2be:	4613      	mov	r3, r2
 801d2c0:	68fa      	ldr	r2, [r7, #12]
 801d2c2:	6879      	ldr	r1, [r7, #4]
 801d2c4:	6878      	ldr	r0, [r7, #4]
 801d2c6:	f7ff f94e 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 801d2ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d2cc:	687a      	ldr	r2, [r7, #4]
 801d2ce:	68b9      	ldr	r1, [r7, #8]
 801d2d0:	68b8      	ldr	r0, [r7, #8]
 801d2d2:	f7ff fabc 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 801d2d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d2d8:	1d19      	adds	r1, r3, #4
 801d2da:	f107 0214 	add.w	r2, r7, #20
 801d2de:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d2e2:	9300      	str	r3, [sp, #0]
 801d2e4:	460b      	mov	r3, r1
 801d2e6:	68f9      	ldr	r1, [r7, #12]
 801d2e8:	6878      	ldr	r0, [r7, #4]
 801d2ea:	f7ff f93c 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 801d2ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d2f0:	687a      	ldr	r2, [r7, #4]
 801d2f2:	6839      	ldr	r1, [r7, #0]
 801d2f4:	6838      	ldr	r0, [r7, #0]
 801d2f6:	f7ff faaa 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 801d2fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d2fc:	1d1a      	adds	r2, r3, #4
 801d2fe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d302:	9300      	str	r3, [sp, #0]
 801d304:	4613      	mov	r3, r2
 801d306:	68ba      	ldr	r2, [r7, #8]
 801d308:	6839      	ldr	r1, [r7, #0]
 801d30a:	6838      	ldr	r0, [r7, #0]
 801d30c:	f7ff f92b 	bl	801c566 <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 801d310:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801d314:	f107 0314 	add.w	r3, r7, #20
 801d318:	4619      	mov	r1, r3
 801d31a:	6878      	ldr	r0, [r7, #4]
 801d31c:	f7fe fe6e 	bl	801bffc <mg_uecc_vli_set>
}
 801d320:	bf00      	nop
 801d322:	3738      	adds	r7, #56	@ 0x38
 801d324:	46bd      	mov	sp, r7
 801d326:	bd80      	pop	{r7, pc}

0801d328 <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 801d328:	b590      	push	{r4, r7, lr}
 801d32a:	b0a1      	sub	sp, #132	@ 0x84
 801d32c:	af02      	add	r7, sp, #8
 801d32e:	60f8      	str	r0, [r7, #12]
 801d330:	60b9      	str	r1, [r7, #8]
 801d332:	607a      	str	r2, [r7, #4]
 801d334:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801d336:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801d33a:	2220      	movs	r2, #32
 801d33c:	2100      	movs	r1, #0
 801d33e:	4618      	mov	r0, r3
 801d340:	f006 f8e9 	bl	8023516 <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801d344:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d348:	781b      	ldrb	r3, [r3, #0]
 801d34a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801d34e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d352:	1d1a      	adds	r2, r3, #4
 801d354:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801d358:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d35c:	9300      	str	r3, [sp, #0]
 801d35e:	4613      	mov	r3, r2
 801d360:	68fa      	ldr	r2, [r7, #12]
 801d362:	6879      	ldr	r1, [r7, #4]
 801d364:	f7ff f8ff 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801d368:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801d36c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801d370:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801d374:	4618      	mov	r0, r3
 801d376:	f7ff fa86 	bl	801c886 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801d37a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801d37e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d382:	68f9      	ldr	r1, [r7, #12]
 801d384:	68f8      	ldr	r0, [r7, #12]
 801d386:	f7ff fa62 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801d38a:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801d38e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d392:	6879      	ldr	r1, [r7, #4]
 801d394:	6878      	ldr	r0, [r7, #4]
 801d396:	f7ff fa5a 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 801d39a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d39e:	1d1a      	adds	r2, r3, #4
 801d3a0:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801d3a4:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d3a8:	9300      	str	r3, [sp, #0]
 801d3aa:	4613      	mov	r3, r2
 801d3ac:	68ba      	ldr	r2, [r7, #8]
 801d3ae:	6839      	ldr	r1, [r7, #0]
 801d3b0:	f7ff f8b2 	bl	801c518 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801d3b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d3b8:	1d1a      	adds	r2, r3, #4
 801d3ba:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d3be:	9300      	str	r3, [sp, #0]
 801d3c0:	4613      	mov	r3, r2
 801d3c2:	68ba      	ldr	r2, [r7, #8]
 801d3c4:	6839      	ldr	r1, [r7, #0]
 801d3c6:	6838      	ldr	r0, [r7, #0]
 801d3c8:	f7ff f8cd 	bl	801c566 <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 801d3cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d3d0:	1d1a      	adds	r2, r3, #4
 801d3d2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801d3d6:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d3da:	9300      	str	r3, [sp, #0]
 801d3dc:	4613      	mov	r3, r2
 801d3de:	68fa      	ldr	r2, [r7, #12]
 801d3e0:	6879      	ldr	r1, [r7, #4]
 801d3e2:	f7ff f8c0 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 801d3e6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801d3ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d3ee:	68b9      	ldr	r1, [r7, #8]
 801d3f0:	68b8      	ldr	r0, [r7, #8]
 801d3f2:	f7ff fa2c 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 801d3f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d3fa:	1d1a      	adds	r2, r3, #4
 801d3fc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801d400:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d404:	9300      	str	r3, [sp, #0]
 801d406:	4613      	mov	r3, r2
 801d408:	687a      	ldr	r2, [r7, #4]
 801d40a:	68f9      	ldr	r1, [r7, #12]
 801d40c:	f7ff f884 	bl	801c518 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 801d410:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801d414:	6839      	ldr	r1, [r7, #0]
 801d416:	6878      	ldr	r0, [r7, #4]
 801d418:	f7ff fa35 	bl	801c886 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 801d41c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d420:	1d19      	adds	r1, r3, #4
 801d422:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801d426:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d42a:	9300      	str	r3, [sp, #0]
 801d42c:	460b      	mov	r3, r1
 801d42e:	6879      	ldr	r1, [r7, #4]
 801d430:	6878      	ldr	r0, [r7, #4]
 801d432:	f7ff f898 	bl	801c566 <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 801d436:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d43a:	1d1a      	adds	r2, r3, #4
 801d43c:	f107 0014 	add.w	r0, r7, #20
 801d440:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d444:	9300      	str	r3, [sp, #0]
 801d446:	4613      	mov	r3, r2
 801d448:	687a      	ldr	r2, [r7, #4]
 801d44a:	68f9      	ldr	r1, [r7, #12]
 801d44c:	f7ff f88b 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 801d450:	f107 0214 	add.w	r2, r7, #20
 801d454:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d458:	6839      	ldr	r1, [r7, #0]
 801d45a:	6838      	ldr	r0, [r7, #0]
 801d45c:	f7ff f9f7 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 801d460:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d464:	1d1a      	adds	r2, r3, #4
 801d466:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d46a:	9300      	str	r3, [sp, #0]
 801d46c:	4613      	mov	r3, r2
 801d46e:	68ba      	ldr	r2, [r7, #8]
 801d470:	6839      	ldr	r1, [r7, #0]
 801d472:	6838      	ldr	r0, [r7, #0]
 801d474:	f7ff f877 	bl	801c566 <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 801d478:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801d47c:	f107 0314 	add.w	r3, r7, #20
 801d480:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801d484:	4618      	mov	r0, r3
 801d486:	f7ff f9fe 	bl	801c886 <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 801d48a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d48e:	1d1c      	adds	r4, r3, #4
 801d490:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801d494:	f107 0114 	add.w	r1, r7, #20
 801d498:	f107 0014 	add.w	r0, r7, #20
 801d49c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d4a0:	9300      	str	r3, [sp, #0]
 801d4a2:	4623      	mov	r3, r4
 801d4a4:	f7ff f85f 	bl	801c566 <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 801d4a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d4ac:	1d1a      	adds	r2, r3, #4
 801d4ae:	f107 0114 	add.w	r1, r7, #20
 801d4b2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801d4b6:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d4ba:	9300      	str	r3, [sp, #0]
 801d4bc:	4613      	mov	r3, r2
 801d4be:	68fa      	ldr	r2, [r7, #12]
 801d4c0:	f7ff f851 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 801d4c4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801d4c8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801d4cc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801d4d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d4d4:	f7ff f9bb 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 801d4d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d4dc:	1d1a      	adds	r2, r3, #4
 801d4de:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801d4e2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d4e6:	9300      	str	r3, [sp, #0]
 801d4e8:	4613      	mov	r3, r2
 801d4ea:	68ba      	ldr	r2, [r7, #8]
 801d4ec:	68b8      	ldr	r0, [r7, #8]
 801d4ee:	f7ff f83a 	bl	801c566 <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 801d4f2:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 801d4f6:	f107 0314 	add.w	r3, r7, #20
 801d4fa:	4619      	mov	r1, r3
 801d4fc:	68f8      	ldr	r0, [r7, #12]
 801d4fe:	f7fe fd7d 	bl	801bffc <mg_uecc_vli_set>
}
 801d502:	bf00      	nop
 801d504:	377c      	adds	r7, #124	@ 0x7c
 801d506:	46bd      	mov	sp, r7
 801d508:	bd90      	pop	{r4, r7, pc}

0801d50a <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 801d50a:	b590      	push	{r4, r7, lr}
 801d50c:	b0b1      	sub	sp, #196	@ 0xc4
 801d50e:	af02      	add	r7, sp, #8
 801d510:	60f8      	str	r0, [r7, #12]
 801d512:	60b9      	str	r1, [r7, #8]
 801d514:	607a      	str	r2, [r7, #4]
 801d516:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 801d518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d51c:	781b      	ldrb	r3, [r3, #0]
 801d51e:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 801d522:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801d526:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d52a:	3320      	adds	r3, #32
 801d52c:	68b9      	ldr	r1, [r7, #8]
 801d52e:	4618      	mov	r0, r3
 801d530:	f7fe fd64 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 801d534:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d538:	009b      	lsls	r3, r3, #2
 801d53a:	68ba      	ldr	r2, [r7, #8]
 801d53c:	18d1      	adds	r1, r2, r3
 801d53e:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801d542:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801d546:	3320      	adds	r3, #32
 801d548:	4618      	mov	r0, r3
 801d54a:	f7fe fd57 	bl	801bffc <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 801d54e:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801d552:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d556:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801d55a:	f103 0120 	add.w	r1, r3, #32
 801d55e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d562:	f103 0020 	add.w	r0, r3, #32
 801d566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d56a:	9301      	str	r3, [sp, #4]
 801d56c:	683b      	ldr	r3, [r7, #0]
 801d56e:	9300      	str	r3, [sp, #0]
 801d570:	4623      	mov	r3, r4
 801d572:	f7ff fdf5 	bl	801d160 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 801d576:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801d57a:	3b02      	subs	r3, #2
 801d57c:	b29b      	uxth	r3, r3
 801d57e:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801d582:	e059      	b.n	801d638 <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 801d584:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801d588:	4619      	mov	r1, r3
 801d58a:	6878      	ldr	r0, [r7, #4]
 801d58c:	f7fe fcbd 	bl	801bf0a <mg_uecc_vli_testBit>
 801d590:	4603      	mov	r3, r0
 801d592:	2b00      	cmp	r3, #0
 801d594:	bf0c      	ite	eq
 801d596:	2301      	moveq	r3, #1
 801d598:	2300      	movne	r3, #0
 801d59a:	b2db      	uxtb	r3, r3
 801d59c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801d5a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d5a4:	f1c3 0301 	rsb	r3, r3, #1
 801d5a8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d5ac:	015b      	lsls	r3, r3, #5
 801d5ae:	18d0      	adds	r0, r2, r3
 801d5b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d5b4:	f1c3 0301 	rsb	r3, r3, #1
 801d5b8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d5bc:	015b      	lsls	r3, r3, #5
 801d5be:	18d1      	adds	r1, r2, r3
 801d5c0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d5c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d5c8:	015b      	lsls	r3, r3, #5
 801d5ca:	18d4      	adds	r4, r2, r3
 801d5cc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d5d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d5d4:	015b      	lsls	r3, r3, #5
 801d5d6:	441a      	add	r2, r3
 801d5d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d5dc:	9300      	str	r3, [sp, #0]
 801d5de:	4613      	mov	r3, r2
 801d5e0:	4622      	mov	r2, r4
 801d5e2:	f7ff fea1 	bl	801d328 <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801d5e6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d5ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d5ee:	015b      	lsls	r3, r3, #5
 801d5f0:	18d0      	adds	r0, r2, r3
 801d5f2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d5f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d5fa:	015b      	lsls	r3, r3, #5
 801d5fc:	18d1      	adds	r1, r2, r3
 801d5fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d602:	f1c3 0301 	rsb	r3, r3, #1
 801d606:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d60a:	015b      	lsls	r3, r3, #5
 801d60c:	18d4      	adds	r4, r2, r3
 801d60e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d612:	f1c3 0301 	rsb	r3, r3, #1
 801d616:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d61a:	015b      	lsls	r3, r3, #5
 801d61c:	441a      	add	r2, r3
 801d61e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d622:	9300      	str	r3, [sp, #0]
 801d624:	4613      	mov	r3, r2
 801d626:	4622      	mov	r2, r4
 801d628:	f7ff fde4 	bl	801d1f4 <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 801d62c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 801d630:	3b01      	subs	r3, #1
 801d632:	b29b      	uxth	r3, r3
 801d634:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801d638:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	dca1      	bgt.n	801d584 <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 801d640:	2100      	movs	r1, #0
 801d642:	6878      	ldr	r0, [r7, #4]
 801d644:	f7fe fc61 	bl	801bf0a <mg_uecc_vli_testBit>
 801d648:	4603      	mov	r3, r0
 801d64a:	2b00      	cmp	r3, #0
 801d64c:	bf0c      	ite	eq
 801d64e:	2301      	moveq	r3, #1
 801d650:	2300      	movne	r3, #0
 801d652:	b2db      	uxtb	r3, r3
 801d654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801d658:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d65c:	f1c3 0301 	rsb	r3, r3, #1
 801d660:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d664:	015b      	lsls	r3, r3, #5
 801d666:	18d0      	adds	r0, r2, r3
 801d668:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d66c:	f1c3 0301 	rsb	r3, r3, #1
 801d670:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d674:	015b      	lsls	r3, r3, #5
 801d676:	18d1      	adds	r1, r2, r3
 801d678:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d67c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d680:	015b      	lsls	r3, r3, #5
 801d682:	18d4      	adds	r4, r2, r3
 801d684:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d688:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d68c:	015b      	lsls	r3, r3, #5
 801d68e:	441a      	add	r2, r3
 801d690:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d694:	9300      	str	r3, [sp, #0]
 801d696:	4613      	mov	r3, r2
 801d698:	4622      	mov	r2, r4
 801d69a:	f7ff fe45 	bl	801d328 <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 801d69e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d6a2:	1d1c      	adds	r4, r3, #4
 801d6a4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d6a8:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d6ac:	f103 0120 	add.w	r1, r3, #32
 801d6b0:	f107 0010 	add.w	r0, r7, #16
 801d6b4:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d6b8:	9300      	str	r3, [sp, #0]
 801d6ba:	4623      	mov	r3, r4
 801d6bc:	f7fe ff53 	bl	801c566 <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 801d6c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d6c4:	f1c3 0301 	rsb	r3, r3, #1
 801d6c8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d6cc:	015b      	lsls	r3, r3, #5
 801d6ce:	441a      	add	r2, r3
 801d6d0:	f107 0110 	add.w	r1, r7, #16
 801d6d4:	f107 0010 	add.w	r0, r7, #16
 801d6d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d6dc:	f7ff f8b7 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 801d6e0:	f107 0110 	add.w	r1, r7, #16
 801d6e4:	f107 0010 	add.w	r0, r7, #16
 801d6e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d6ec:	68ba      	ldr	r2, [r7, #8]
 801d6ee:	f7ff f8ae 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 801d6f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d6f6:	1d1a      	adds	r2, r3, #4
 801d6f8:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d6fc:	f107 0110 	add.w	r1, r7, #16
 801d700:	f107 0010 	add.w	r0, r7, #16
 801d704:	f7ff f907 	bl	801c916 <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 801d708:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d70c:	009b      	lsls	r3, r3, #2
 801d70e:	68ba      	ldr	r2, [r7, #8]
 801d710:	441a      	add	r2, r3
 801d712:	f107 0110 	add.w	r1, r7, #16
 801d716:	f107 0010 	add.w	r0, r7, #16
 801d71a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d71e:	f7ff f896 	bl	801c84e <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 801d722:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d726:	f1c3 0301 	rsb	r3, r3, #1
 801d72a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d72e:	015b      	lsls	r3, r3, #5
 801d730:	441a      	add	r2, r3
 801d732:	f107 0110 	add.w	r1, r7, #16
 801d736:	f107 0010 	add.w	r0, r7, #16
 801d73a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d73e:	f7ff f886 	bl	801c84e <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801d742:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d746:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d74a:	015b      	lsls	r3, r3, #5
 801d74c:	18d0      	adds	r0, r2, r3
 801d74e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d752:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d756:	015b      	lsls	r3, r3, #5
 801d758:	18d1      	adds	r1, r2, r3
 801d75a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d75e:	f1c3 0301 	rsb	r3, r3, #1
 801d762:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d766:	015b      	lsls	r3, r3, #5
 801d768:	18d4      	adds	r4, r2, r3
 801d76a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d76e:	f1c3 0301 	rsb	r3, r3, #1
 801d772:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d776:	015b      	lsls	r3, r3, #5
 801d778:	441a      	add	r2, r3
 801d77a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d77e:	9300      	str	r3, [sp, #0]
 801d780:	4613      	mov	r3, r2
 801d782:	4622      	mov	r2, r4
 801d784:	f7ff fd36 	bl	801d1f4 <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 801d788:	f107 0210 	add.w	r2, r7, #16
 801d78c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d790:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 801d794:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d798:	f7ff fcba 	bl	801d110 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 801d79c:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801d7a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d7a4:	4619      	mov	r1, r3
 801d7a6:	68f8      	ldr	r0, [r7, #12]
 801d7a8:	f7fe fc28 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 801d7ac:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d7b0:	009b      	lsls	r3, r3, #2
 801d7b2:	68fa      	ldr	r2, [r7, #12]
 801d7b4:	4413      	add	r3, r2
 801d7b6:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801d7ba:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d7be:	4618      	mov	r0, r3
 801d7c0:	f7fe fc1c 	bl	801bffc <mg_uecc_vli_set>
}
 801d7c4:	bf00      	nop
 801d7c6:	37bc      	adds	r7, #188	@ 0xbc
 801d7c8:	46bd      	mov	sp, r7
 801d7ca:	bd90      	pop	{r4, r7, pc}

0801d7cc <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 801d7cc:	b580      	push	{r7, lr}
 801d7ce:	b086      	sub	sp, #24
 801d7d0:	af00      	add	r7, sp, #0
 801d7d2:	60f8      	str	r0, [r7, #12]
 801d7d4:	60b9      	str	r1, [r7, #8]
 801d7d6:	607a      	str	r2, [r7, #4]
 801d7d8:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801d7da:	683b      	ldr	r3, [r7, #0]
 801d7dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d7e0:	331f      	adds	r3, #31
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	da00      	bge.n	801d7e8 <regularize_k+0x1c>
 801d7e6:	331f      	adds	r3, #31
 801d7e8:	115b      	asrs	r3, r3, #5
 801d7ea:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 801d7ec:	683b      	ldr	r3, [r7, #0]
 801d7ee:	885b      	ldrh	r3, [r3, #2]
 801d7f0:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801d7f2:	683b      	ldr	r3, [r7, #0]
 801d7f4:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801d7f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d7fc:	68f9      	ldr	r1, [r7, #12]
 801d7fe:	68b8      	ldr	r0, [r7, #8]
 801d800:	f7fe fcec 	bl	801c1dc <mg_uecc_vli_add>
 801d804:	4603      	mov	r3, r0
 801d806:	2b00      	cmp	r3, #0
 801d808:	d10f      	bne.n	801d82a <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 801d80a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d80e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d812:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801d814:	429a      	cmp	r2, r3
 801d816:	da0a      	bge.n	801d82e <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 801d818:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d81c:	4619      	mov	r1, r3
 801d81e:	68b8      	ldr	r0, [r7, #8]
 801d820:	f7fe fb73 	bl	801bf0a <mg_uecc_vli_testBit>
 801d824:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 801d826:	2b00      	cmp	r3, #0
 801d828:	d001      	beq.n	801d82e <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801d82a:	2301      	movs	r3, #1
 801d82c:	e000      	b.n	801d830 <regularize_k+0x64>
 801d82e:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 801d830:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 801d832:	683b      	ldr	r3, [r7, #0]
 801d834:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801d838:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d83c:	68b9      	ldr	r1, [r7, #8]
 801d83e:	6878      	ldr	r0, [r7, #4]
 801d840:	f7fe fccc 	bl	801c1dc <mg_uecc_vli_add>
  return carry;
 801d844:	693b      	ldr	r3, [r7, #16]
}
 801d846:	4618      	mov	r0, r3
 801d848:	3718      	adds	r7, #24
 801d84a:	46bd      	mov	sp, r7
 801d84c:	bd80      	pop	{r7, pc}
	...

0801d850 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 801d850:	b580      	push	{r7, lr}
 801d852:	b088      	sub	sp, #32
 801d854:	af00      	add	r7, sp, #0
 801d856:	60f8      	str	r0, [r7, #12]
 801d858:	60b9      	str	r1, [r7, #8]
 801d85a:	4613      	mov	r3, r2
 801d85c:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801d85e:	f04f 33ff 	mov.w	r3, #4294967295
 801d862:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 801d864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d868:	4619      	mov	r1, r3
 801d86a:	68b8      	ldr	r0, [r7, #8]
 801d86c:	f7fe fb8d 	bl	801bf8a <mg_uecc_vli_numBits>
 801d870:	4603      	mov	r3, r0
 801d872:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 801d874:	4b2a      	ldr	r3, [pc, #168]	@ (801d920 <mg_uecc_generate_random_int+0xd0>)
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	2b00      	cmp	r3, #0
 801d87a:	d101      	bne.n	801d880 <mg_uecc_generate_random_int+0x30>
    return 0;
 801d87c:	2300      	movs	r3, #0
 801d87e:	e04b      	b.n	801d918 <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801d880:	2300      	movs	r3, #0
 801d882:	61fb      	str	r3, [r7, #28]
 801d884:	e044      	b.n	801d910 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 801d886:	4b26      	ldr	r3, [pc, #152]	@ (801d920 <mg_uecc_generate_random_int+0xd0>)
 801d888:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 801d88a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801d88e:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 801d890:	4611      	mov	r1, r2
 801d892:	68f8      	ldr	r0, [r7, #12]
 801d894:	4798      	blx	r3
 801d896:	4603      	mov	r3, r0
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d101      	bne.n	801d8a0 <mg_uecc_generate_random_int+0x50>
      return 0;
 801d89c:	2300      	movs	r3, #0
 801d89e:	e03b      	b.n	801d918 <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 801d8a0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801d8a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d8a8:	4413      	add	r3, r2
 801d8aa:	009b      	lsls	r3, r3, #2
 801d8ac:	68fa      	ldr	r2, [r7, #12]
 801d8ae:	4413      	add	r3, r2
 801d8b0:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 801d8b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d8b6:	b29b      	uxth	r3, r3
 801d8b8:	015b      	lsls	r3, r3, #5
 801d8ba:	b29a      	uxth	r2, r3
 801d8bc:	8afb      	ldrh	r3, [r7, #22]
 801d8be:	1ad3      	subs	r3, r2, r3
 801d8c0:	b29b      	uxth	r3, r3
 801d8c2:	b21b      	sxth	r3, r3
 801d8c4:	461a      	mov	r2, r3
 801d8c6:	69bb      	ldr	r3, [r7, #24]
 801d8c8:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 801d8cc:	f997 0007 	ldrsb.w	r0, [r7, #7]
 801d8d0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d8d4:	4403      	add	r3, r0
 801d8d6:	009b      	lsls	r3, r3, #2
 801d8d8:	68f8      	ldr	r0, [r7, #12]
 801d8da:	4403      	add	r3, r0
 801d8dc:	400a      	ands	r2, r1
 801d8de:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 801d8e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d8e4:	4619      	mov	r1, r3
 801d8e6:	68f8      	ldr	r0, [r7, #12]
 801d8e8:	f7fe fae5 	bl	801beb6 <mg_uecc_vli_isZero>
 801d8ec:	4603      	mov	r3, r0
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d10b      	bne.n	801d90a <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 801d8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d8f6:	461a      	mov	r2, r3
 801d8f8:	68f9      	ldr	r1, [r7, #12]
 801d8fa:	68b8      	ldr	r0, [r7, #8]
 801d8fc:	f7fe fc13 	bl	801c126 <mg_uecc_vli_cmp>
 801d900:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 801d902:	2b01      	cmp	r3, #1
 801d904:	d101      	bne.n	801d90a <mg_uecc_generate_random_int+0xba>
      return 1;
 801d906:	2301      	movs	r3, #1
 801d908:	e006      	b.n	801d918 <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801d90a:	69fb      	ldr	r3, [r7, #28]
 801d90c:	3301      	adds	r3, #1
 801d90e:	61fb      	str	r3, [r7, #28]
 801d910:	69fb      	ldr	r3, [r7, #28]
 801d912:	2b3f      	cmp	r3, #63	@ 0x3f
 801d914:	d9b7      	bls.n	801d886 <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 801d916:	2300      	movs	r3, #0
}
 801d918:	4618      	mov	r0, r3
 801d91a:	3720      	adds	r7, #32
 801d91c:	46bd      	mov	sp, r7
 801d91e:	bd80      	pop	{r7, pc}
 801d920:	240010d0 	.word	0x240010d0

0801d924 <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 801d924:	b480      	push	{r7}
 801d926:	b087      	sub	sp, #28
 801d928:	af00      	add	r7, sp, #0
 801d92a:	60f8      	str	r0, [r7, #12]
 801d92c:	60b9      	str	r1, [r7, #8]
 801d92e:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 801d930:	2300      	movs	r3, #0
 801d932:	617b      	str	r3, [r7, #20]
 801d934:	e018      	b.n	801d968 <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801d936:	68bb      	ldr	r3, [r7, #8]
 801d938:	1e5a      	subs	r2, r3, #1
 801d93a:	697b      	ldr	r3, [r7, #20]
 801d93c:	1ad3      	subs	r3, r2, r3
 801d93e:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 801d940:	693b      	ldr	r3, [r7, #16]
 801d942:	f023 0303 	bic.w	r3, r3, #3
 801d946:	687a      	ldr	r2, [r7, #4]
 801d948:	4413      	add	r3, r2
 801d94a:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 801d94c:	693b      	ldr	r3, [r7, #16]
 801d94e:	f003 0303 	and.w	r3, r3, #3
 801d952:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 801d954:	fa22 f103 	lsr.w	r1, r2, r3
 801d958:	697b      	ldr	r3, [r7, #20]
 801d95a:	68fa      	ldr	r2, [r7, #12]
 801d95c:	4413      	add	r3, r2
 801d95e:	b2ca      	uxtb	r2, r1
 801d960:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 801d962:	697b      	ldr	r3, [r7, #20]
 801d964:	3301      	adds	r3, #1
 801d966:	617b      	str	r3, [r7, #20]
 801d968:	697a      	ldr	r2, [r7, #20]
 801d96a:	68bb      	ldr	r3, [r7, #8]
 801d96c:	429a      	cmp	r2, r3
 801d96e:	dbe2      	blt.n	801d936 <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 801d970:	bf00      	nop
 801d972:	bf00      	nop
 801d974:	371c      	adds	r7, #28
 801d976:	46bd      	mov	sp, r7
 801d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d97c:	4770      	bx	lr

0801d97e <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 801d97e:	b580      	push	{r7, lr}
 801d980:	b086      	sub	sp, #24
 801d982:	af00      	add	r7, sp, #0
 801d984:	60f8      	str	r0, [r7, #12]
 801d986:	60b9      	str	r1, [r7, #8]
 801d988:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	3303      	adds	r3, #3
 801d98e:	2b00      	cmp	r3, #0
 801d990:	da00      	bge.n	801d994 <mg_uecc_vli_bytesToNative+0x16>
 801d992:	3303      	adds	r3, #3
 801d994:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 801d996:	b25b      	sxtb	r3, r3
 801d998:	4619      	mov	r1, r3
 801d99a:	68f8      	ldr	r0, [r7, #12]
 801d99c:	f7fe fa6a 	bl	801be74 <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 801d9a0:	2300      	movs	r3, #0
 801d9a2:	617b      	str	r3, [r7, #20]
 801d9a4:	e01e      	b.n	801d9e4 <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801d9a6:	687b      	ldr	r3, [r7, #4]
 801d9a8:	1e5a      	subs	r2, r3, #1
 801d9aa:	697b      	ldr	r3, [r7, #20]
 801d9ac:	1ad3      	subs	r3, r2, r3
 801d9ae:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 801d9b0:	693b      	ldr	r3, [r7, #16]
 801d9b2:	f023 0303 	bic.w	r3, r3, #3
 801d9b6:	68fa      	ldr	r2, [r7, #12]
 801d9b8:	4413      	add	r3, r2
 801d9ba:	6819      	ldr	r1, [r3, #0]
 801d9bc:	697b      	ldr	r3, [r7, #20]
 801d9be:	68ba      	ldr	r2, [r7, #8]
 801d9c0:	4413      	add	r3, r2
 801d9c2:	781b      	ldrb	r3, [r3, #0]
 801d9c4:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 801d9c6:	693b      	ldr	r3, [r7, #16]
 801d9c8:	f003 0303 	and.w	r3, r3, #3
 801d9cc:	00db      	lsls	r3, r3, #3
 801d9ce:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 801d9d0:	693b      	ldr	r3, [r7, #16]
 801d9d2:	f023 0303 	bic.w	r3, r3, #3
 801d9d6:	68f8      	ldr	r0, [r7, #12]
 801d9d8:	4403      	add	r3, r0
 801d9da:	430a      	orrs	r2, r1
 801d9dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 801d9de:	697b      	ldr	r3, [r7, #20]
 801d9e0:	3301      	adds	r3, #1
 801d9e2:	617b      	str	r3, [r7, #20]
 801d9e4:	697a      	ldr	r2, [r7, #20]
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	429a      	cmp	r2, r3
 801d9ea:	dbdc      	blt.n	801d9a6 <mg_uecc_vli_bytesToNative+0x28>
  }
}
 801d9ec:	bf00      	nop
 801d9ee:	bf00      	nop
 801d9f0:	3718      	adds	r7, #24
 801d9f2:	46bd      	mov	sp, r7
 801d9f4:	bd80      	pop	{r7, pc}

0801d9f6 <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 801d9f6:	b580      	push	{r7, lr}
 801d9f8:	b08a      	sub	sp, #40	@ 0x28
 801d9fa:	af00      	add	r7, sp, #0
 801d9fc:	60f8      	str	r0, [r7, #12]
 801d9fe:	60b9      	str	r1, [r7, #8]
 801da00:	607a      	str	r2, [r7, #4]
 801da02:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 801da04:	683b      	ldr	r3, [r7, #0]
 801da06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801da0a:	3307      	adds	r3, #7
 801da0c:	2b00      	cmp	r3, #0
 801da0e:	da00      	bge.n	801da12 <bits2int+0x1c>
 801da10:	3307      	adds	r3, #7
 801da12:	10db      	asrs	r3, r3, #3
 801da14:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 801da16:	683b      	ldr	r3, [r7, #0]
 801da18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801da1c:	331f      	adds	r3, #31
 801da1e:	2b00      	cmp	r3, #0
 801da20:	da00      	bge.n	801da24 <bits2int+0x2e>
 801da22:	331f      	adds	r3, #31
 801da24:	115b      	asrs	r3, r3, #5
 801da26:	b25b      	sxtb	r3, r3
 801da28:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 801da2a:	687a      	ldr	r2, [r7, #4]
 801da2c:	69fb      	ldr	r3, [r7, #28]
 801da2e:	429a      	cmp	r2, r3
 801da30:	d901      	bls.n	801da36 <bits2int+0x40>
    bits_size = num_n_bytes;
 801da32:	69fb      	ldr	r3, [r7, #28]
 801da34:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 801da36:	69bb      	ldr	r3, [r7, #24]
 801da38:	b25b      	sxtb	r3, r3
 801da3a:	4619      	mov	r1, r3
 801da3c:	68f8      	ldr	r0, [r7, #12]
 801da3e:	f7fe fa19 	bl	801be74 <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 801da42:	687b      	ldr	r3, [r7, #4]
 801da44:	461a      	mov	r2, r3
 801da46:	68b9      	ldr	r1, [r7, #8]
 801da48:	68f8      	ldr	r0, [r7, #12]
 801da4a:	f7ff ff98 	bl	801d97e <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	00db      	lsls	r3, r3, #3
 801da52:	683a      	ldr	r2, [r7, #0]
 801da54:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801da58:	4293      	cmp	r3, r2
 801da5a:	d93a      	bls.n	801dad2 <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 801da5c:	687b      	ldr	r3, [r7, #4]
 801da5e:	00db      	lsls	r3, r3, #3
 801da60:	683a      	ldr	r2, [r7, #0]
 801da62:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801da66:	1a9b      	subs	r3, r3, r2
 801da68:	617b      	str	r3, [r7, #20]
  carry = 0;
 801da6a:	2300      	movs	r3, #0
 801da6c:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 801da6e:	69bb      	ldr	r3, [r7, #24]
 801da70:	009b      	lsls	r3, r3, #2
 801da72:	68fa      	ldr	r2, [r7, #12]
 801da74:	4413      	add	r3, r2
 801da76:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 801da78:	e010      	b.n	801da9c <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 801da7a:	6a3b      	ldr	r3, [r7, #32]
 801da7c:	681b      	ldr	r3, [r3, #0]
 801da7e:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 801da80:	693a      	ldr	r2, [r7, #16]
 801da82:	697b      	ldr	r3, [r7, #20]
 801da84:	40da      	lsrs	r2, r3
 801da86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da88:	431a      	orrs	r2, r3
 801da8a:	6a3b      	ldr	r3, [r7, #32]
 801da8c:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 801da8e:	697b      	ldr	r3, [r7, #20]
 801da90:	f1c3 0320 	rsb	r3, r3, #32
 801da94:	693a      	ldr	r2, [r7, #16]
 801da96:	fa02 f303 	lsl.w	r3, r2, r3
 801da9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 801da9c:	6a3b      	ldr	r3, [r7, #32]
 801da9e:	1f1a      	subs	r2, r3, #4
 801daa0:	623a      	str	r2, [r7, #32]
 801daa2:	68fa      	ldr	r2, [r7, #12]
 801daa4:	429a      	cmp	r2, r3
 801daa6:	d3e8      	bcc.n	801da7a <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 801daa8:	683b      	ldr	r3, [r7, #0]
 801daaa:	3324      	adds	r3, #36	@ 0x24
 801daac:	69ba      	ldr	r2, [r7, #24]
 801daae:	b252      	sxtb	r2, r2
 801dab0:	68f9      	ldr	r1, [r7, #12]
 801dab2:	4618      	mov	r0, r3
 801dab4:	f7fe fac9 	bl	801c04a <mg_uecc_vli_cmp_unsafe>
 801dab8:	4603      	mov	r3, r0
 801daba:	2b01      	cmp	r3, #1
 801dabc:	d00a      	beq.n	801dad4 <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 801dabe:	683b      	ldr	r3, [r7, #0]
 801dac0:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801dac4:	69bb      	ldr	r3, [r7, #24]
 801dac6:	b25b      	sxtb	r3, r3
 801dac8:	68f9      	ldr	r1, [r7, #12]
 801daca:	68f8      	ldr	r0, [r7, #12]
 801dacc:	f7fe fbd0 	bl	801c270 <mg_uecc_vli_sub>
 801dad0:	e000      	b.n	801dad4 <bits2int+0xde>
    return;
 801dad2:	bf00      	nop
  }
}
 801dad4:	3728      	adds	r7, #40	@ 0x28
 801dad6:	46bd      	mov	sp, r7
 801dad8:	bd80      	pop	{r7, pc}
	...

0801dadc <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 801dadc:	b590      	push	{r4, r7, lr}
 801dade:	b0ad      	sub	sp, #180	@ 0xb4
 801dae0:	af02      	add	r7, sp, #8
 801dae2:	60f8      	str	r0, [r7, #12]
 801dae4:	60b9      	str	r1, [r7, #8]
 801dae6:	607a      	str	r2, [r7, #4]
 801dae8:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 801daea:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801daee:	657b      	str	r3, [r7, #84]	@ 0x54
 801daf0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801daf4:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 801daf6:	2300      	movs	r3, #0
 801daf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 801dafc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801db00:	781b      	ldrb	r3, [r3, #0]
 801db02:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801db06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801db0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801db0e:	331f      	adds	r3, #31
 801db10:	2b00      	cmp	r3, #0
 801db12:	da00      	bge.n	801db16 <mg_uecc_sign_with_k_internal+0x3a>
 801db14:	331f      	adds	r3, #31
 801db16:	115b      	asrs	r3, r3, #5
 801db18:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 801db1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801db20:	885b      	ldrh	r3, [r3, #2]
 801db22:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 801db26:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 801db2a:	4619      	mov	r1, r3
 801db2c:	6838      	ldr	r0, [r7, #0]
 801db2e:	f7fe f9c2 	bl	801beb6 <mg_uecc_vli_isZero>
 801db32:	4603      	mov	r3, r0
 801db34:	2b00      	cmp	r3, #0
 801db36:	d10b      	bne.n	801db50 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 801db38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801db3c:	3324      	adds	r3, #36	@ 0x24
 801db3e:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801db42:	6839      	ldr	r1, [r7, #0]
 801db44:	4618      	mov	r0, r3
 801db46:	f7fe faee 	bl	801c126 <mg_uecc_vli_cmp>
 801db4a:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 801db4c:	2b01      	cmp	r3, #1
 801db4e:	d001      	beq.n	801db54 <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 801db50:	2300      	movs	r3, #0
 801db52:	e128      	b.n	801dda6 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 801db54:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801db58:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801db5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801db60:	6838      	ldr	r0, [r7, #0]
 801db62:	f7ff fe33 	bl	801d7cc <regularize_k>
 801db66:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 801db6a:	4b91      	ldr	r3, [pc, #580]	@ (801ddb0 <mg_uecc_sign_with_k_internal+0x2d4>)
 801db6c:	681b      	ldr	r3, [r3, #0]
 801db6e:	2b00      	cmp	r3, #0
 801db70:	d01c      	beq.n	801dbac <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 801db72:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801db76:	009b      	lsls	r3, r3, #2
 801db78:	33a8      	adds	r3, #168	@ 0xa8
 801db7a:	443b      	add	r3, r7
 801db7c:	f853 0c54 	ldr.w	r0, [r3, #-84]
 801db80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801db84:	3304      	adds	r3, #4
 801db86:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801db8a:	4619      	mov	r1, r3
 801db8c:	f7ff fe60 	bl	801d850 <mg_uecc_generate_random_int>
 801db90:	4603      	mov	r3, r0
 801db92:	2b00      	cmp	r3, #0
 801db94:	d101      	bne.n	801db9a <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 801db96:	2300      	movs	r3, #0
 801db98:	e105      	b.n	801dda6 <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 801db9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801db9e:	009b      	lsls	r3, r3, #2
 801dba0:	33a8      	adds	r3, #168	@ 0xa8
 801dba2:	443b      	add	r3, r7
 801dba4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801dba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801dbac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dbb0:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 801dbb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	bf0c      	ite	eq
 801dbbc:	2301      	moveq	r3, #1
 801dbbe:	2300      	movne	r3, #0
 801dbc0:	b2db      	uxtb	r3, r3
 801dbc2:	009b      	lsls	r3, r3, #2
 801dbc4:	33a8      	adds	r3, #168	@ 0xa8
 801dbc6:	443b      	add	r3, r7
 801dbc8:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 801dbcc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 801dbd0:	3301      	adds	r3, #1
 801dbd2:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801dbd4:	b21b      	sxth	r3, r3
 801dbd6:	f107 0014 	add.w	r0, r7, #20
 801dbda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801dbde:	9201      	str	r2, [sp, #4]
 801dbe0:	9300      	str	r3, [sp, #0]
 801dbe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801dbe6:	4622      	mov	r2, r4
 801dbe8:	f7ff fc8f 	bl	801d50a <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 801dbec:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801dbf0:	f107 0314 	add.w	r3, r7, #20
 801dbf4:	4611      	mov	r1, r2
 801dbf6:	4618      	mov	r0, r3
 801dbf8:	f7fe f95d 	bl	801beb6 <mg_uecc_vli_isZero>
 801dbfc:	4603      	mov	r3, r0
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d001      	beq.n	801dc06 <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 801dc02:	2300      	movs	r3, #0
 801dc04:	e0cf      	b.n	801dda6 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 801dc06:	4b6a      	ldr	r3, [pc, #424]	@ (801ddb0 <mg_uecc_sign_with_k_internal+0x2d4>)
 801dc08:	681b      	ldr	r3, [r3, #0]
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	d10a      	bne.n	801dc24 <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 801dc0e:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801dc12:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801dc16:	4611      	mov	r1, r2
 801dc18:	4618      	mov	r0, r3
 801dc1a:	f7fe f92b 	bl	801be74 <mg_uecc_vli_clear>
    tmp[0] = 1;
 801dc1e:	2301      	movs	r3, #1
 801dc20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dc22:	e00f      	b.n	801dc44 <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 801dc24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc28:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801dc2c:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801dc30:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801dc34:	4618      	mov	r0, r3
 801dc36:	f7ff fe0b 	bl	801d850 <mg_uecc_generate_random_int>
 801dc3a:	4603      	mov	r3, r0
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d101      	bne.n	801dc44 <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 801dc40:	2300      	movs	r3, #0
 801dc42:	e0b0      	b.n	801dda6 <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 801dc44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc48:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801dc4c:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801dc50:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dc54:	9300      	str	r3, [sp, #0]
 801dc56:	460b      	mov	r3, r1
 801dc58:	6839      	ldr	r1, [r7, #0]
 801dc5a:	6838      	ldr	r0, [r7, #0]
 801dc5c:	f7fe fddc 	bl	801c818 <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 801dc60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc64:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801dc68:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dc6c:	6839      	ldr	r1, [r7, #0]
 801dc6e:	6838      	ldr	r0, [r7, #0]
 801dc70:	f7fe fe51 	bl	801c916 <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 801dc74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc78:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801dc7c:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801dc80:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dc84:	9300      	str	r3, [sp, #0]
 801dc86:	460b      	mov	r3, r1
 801dc88:	6839      	ldr	r1, [r7, #0]
 801dc8a:	6838      	ldr	r0, [r7, #0]
 801dc8c:	f7fe fdc4 	bl	801c818 <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 801dc90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dc98:	4619      	mov	r1, r3
 801dc9a:	f107 0314 	add.w	r3, r7, #20
 801dc9e:	461a      	mov	r2, r3
 801dca0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 801dca4:	f7ff fe3e 	bl	801d924 <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 801dca8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dcac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dcb0:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 801dcb2:	2b00      	cmp	r3, #0
 801dcb4:	da00      	bge.n	801dcb8 <mg_uecc_sign_with_k_internal+0x1dc>
 801dcb6:	3307      	adds	r3, #7
 801dcb8:	10db      	asrs	r3, r3, #3
 801dcba:	461a      	mov	r2, r3
 801dcbc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801dcc0:	68f9      	ldr	r1, [r7, #12]
 801dcc2:	4618      	mov	r0, r3
 801dcc4:	f7ff fe5b 	bl	801d97e <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 801dcc8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dccc:	3b01      	subs	r3, #1
 801dcce:	009b      	lsls	r3, r3, #2
 801dcd0:	33a8      	adds	r3, #168	@ 0xa8
 801dcd2:	443b      	add	r3, r7
 801dcd4:	2200      	movs	r2, #0
 801dcd6:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 801dcda:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801dcde:	f107 0114 	add.w	r1, r7, #20
 801dce2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801dce6:	4618      	mov	r0, r3
 801dce8:	f7fe f988 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 801dcec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dcf0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801dcf4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801dcf8:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801dcfc:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801dd00:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dd04:	9300      	str	r3, [sp, #0]
 801dd06:	4623      	mov	r3, r4
 801dd08:	f7fe fd86 	bl	801c818 <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 801dd0c:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801dd10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd14:	687a      	ldr	r2, [r7, #4]
 801dd16:	68b9      	ldr	r1, [r7, #8]
 801dd18:	f7ff fe6d 	bl	801d9f6 <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 801dd1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd20:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801dd24:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801dd28:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801dd2c:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801dd30:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dd34:	9300      	str	r3, [sp, #0]
 801dd36:	4623      	mov	r3, r4
 801dd38:	f7fe fbee 	bl	801c518 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 801dd3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd40:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801dd44:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801dd48:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801dd4c:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dd50:	9300      	str	r3, [sp, #0]
 801dd52:	4613      	mov	r3, r2
 801dd54:	683a      	ldr	r2, [r7, #0]
 801dd56:	f7fe fd5f 	bl	801c818 <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 801dd5a:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801dd5e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801dd62:	4611      	mov	r1, r2
 801dd64:	4618      	mov	r0, r3
 801dd66:	f7fe f910 	bl	801bf8a <mg_uecc_vli_numBits>
 801dd6a:	4603      	mov	r3, r0
 801dd6c:	461a      	mov	r2, r3
 801dd6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd72:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dd76:	00db      	lsls	r3, r3, #3
 801dd78:	429a      	cmp	r2, r3
 801dd7a:	dd01      	ble.n	801dd80 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	e012      	b.n	801dda6 <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 801dd80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dd88:	461a      	mov	r2, r3
 801dd8a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801dd8e:	1898      	adds	r0, r3, r2
 801dd90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd94:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dd98:	4619      	mov	r1, r3
 801dd9a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801dd9e:	461a      	mov	r2, r3
 801dda0:	f7ff fdc0 	bl	801d924 <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 801dda4:	2301      	movs	r3, #1
}
 801dda6:	4618      	mov	r0, r3
 801dda8:	37ac      	adds	r7, #172	@ 0xac
 801ddaa:	46bd      	mov	sp, r7
 801ddac:	bd90      	pop	{r4, r7, pc}
 801ddae:	bf00      	nop
 801ddb0:	240010d0 	.word	0x240010d0

0801ddb4 <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	b084      	sub	sp, #16
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	6078      	str	r0, [r7, #4]
 801ddbc:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	695a      	ldr	r2, [r3, #20]
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	691b      	ldr	r3, [r3, #16]
 801ddc6:	005b      	lsls	r3, r3, #1
 801ddc8:	4413      	add	r3, r2
 801ddca:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 801ddcc:	2300      	movs	r3, #0
 801ddce:	60fb      	str	r3, [r7, #12]
 801ddd0:	e00d      	b.n	801ddee <HMAC_init+0x3a>
 801ddd2:	683a      	ldr	r2, [r7, #0]
 801ddd4:	68fb      	ldr	r3, [r7, #12]
 801ddd6:	4413      	add	r3, r2
 801ddd8:	781a      	ldrb	r2, [r3, #0]
 801ddda:	68b9      	ldr	r1, [r7, #8]
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	440b      	add	r3, r1
 801dde0:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 801dde4:	b2d2      	uxtb	r2, r2
 801dde6:	701a      	strb	r2, [r3, #0]
 801dde8:	68fb      	ldr	r3, [r7, #12]
 801ddea:	3301      	adds	r3, #1
 801ddec:	60fb      	str	r3, [r7, #12]
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	691b      	ldr	r3, [r3, #16]
 801ddf2:	68fa      	ldr	r2, [r7, #12]
 801ddf4:	429a      	cmp	r2, r3
 801ddf6:	d3ec      	bcc.n	801ddd2 <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 801ddf8:	e007      	b.n	801de0a <HMAC_init+0x56>
 801ddfa:	68ba      	ldr	r2, [r7, #8]
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	4413      	add	r3, r2
 801de00:	2236      	movs	r2, #54	@ 0x36
 801de02:	701a      	strb	r2, [r3, #0]
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	3301      	adds	r3, #1
 801de08:	60fb      	str	r3, [r7, #12]
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	68db      	ldr	r3, [r3, #12]
 801de0e:	68fa      	ldr	r2, [r7, #12]
 801de10:	429a      	cmp	r2, r3
 801de12:	d3f2      	bcc.n	801ddfa <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	681b      	ldr	r3, [r3, #0]
 801de18:	6878      	ldr	r0, [r7, #4]
 801de1a:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801de1c:	687b      	ldr	r3, [r7, #4]
 801de1e:	685b      	ldr	r3, [r3, #4]
 801de20:	687a      	ldr	r2, [r7, #4]
 801de22:	68d2      	ldr	r2, [r2, #12]
 801de24:	68b9      	ldr	r1, [r7, #8]
 801de26:	6878      	ldr	r0, [r7, #4]
 801de28:	4798      	blx	r3
}
 801de2a:	bf00      	nop
 801de2c:	3710      	adds	r7, #16
 801de2e:	46bd      	mov	sp, r7
 801de30:	bd80      	pop	{r7, pc}

0801de32 <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 801de32:	b580      	push	{r7, lr}
 801de34:	b084      	sub	sp, #16
 801de36:	af00      	add	r7, sp, #0
 801de38:	60f8      	str	r0, [r7, #12]
 801de3a:	60b9      	str	r1, [r7, #8]
 801de3c:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 801de3e:	68fb      	ldr	r3, [r7, #12]
 801de40:	685b      	ldr	r3, [r3, #4]
 801de42:	687a      	ldr	r2, [r7, #4]
 801de44:	68b9      	ldr	r1, [r7, #8]
 801de46:	68f8      	ldr	r0, [r7, #12]
 801de48:	4798      	blx	r3
}
 801de4a:	bf00      	nop
 801de4c:	3710      	adds	r7, #16
 801de4e:	46bd      	mov	sp, r7
 801de50:	bd80      	pop	{r7, pc}

0801de52 <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 801de52:	b580      	push	{r7, lr}
 801de54:	b086      	sub	sp, #24
 801de56:	af00      	add	r7, sp, #0
 801de58:	60f8      	str	r0, [r7, #12]
 801de5a:	60b9      	str	r1, [r7, #8]
 801de5c:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	695a      	ldr	r2, [r3, #20]
 801de62:	68fb      	ldr	r3, [r7, #12]
 801de64:	691b      	ldr	r3, [r3, #16]
 801de66:	005b      	lsls	r3, r3, #1
 801de68:	4413      	add	r3, r2
 801de6a:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 801de6c:	2300      	movs	r3, #0
 801de6e:	617b      	str	r3, [r7, #20]
 801de70:	e00d      	b.n	801de8e <HMAC_finish+0x3c>
 801de72:	68ba      	ldr	r2, [r7, #8]
 801de74:	697b      	ldr	r3, [r7, #20]
 801de76:	4413      	add	r3, r2
 801de78:	781a      	ldrb	r2, [r3, #0]
 801de7a:	6939      	ldr	r1, [r7, #16]
 801de7c:	697b      	ldr	r3, [r7, #20]
 801de7e:	440b      	add	r3, r1
 801de80:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 801de84:	b2d2      	uxtb	r2, r2
 801de86:	701a      	strb	r2, [r3, #0]
 801de88:	697b      	ldr	r3, [r7, #20]
 801de8a:	3301      	adds	r3, #1
 801de8c:	617b      	str	r3, [r7, #20]
 801de8e:	68fb      	ldr	r3, [r7, #12]
 801de90:	691b      	ldr	r3, [r3, #16]
 801de92:	697a      	ldr	r2, [r7, #20]
 801de94:	429a      	cmp	r2, r3
 801de96:	d3ec      	bcc.n	801de72 <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 801de98:	e007      	b.n	801deaa <HMAC_finish+0x58>
 801de9a:	693a      	ldr	r2, [r7, #16]
 801de9c:	697b      	ldr	r3, [r7, #20]
 801de9e:	4413      	add	r3, r2
 801dea0:	225c      	movs	r2, #92	@ 0x5c
 801dea2:	701a      	strb	r2, [r3, #0]
 801dea4:	697b      	ldr	r3, [r7, #20]
 801dea6:	3301      	adds	r3, #1
 801dea8:	617b      	str	r3, [r7, #20]
 801deaa:	68fb      	ldr	r3, [r7, #12]
 801deac:	68db      	ldr	r3, [r3, #12]
 801deae:	697a      	ldr	r2, [r7, #20]
 801deb0:	429a      	cmp	r2, r3
 801deb2:	d3f2      	bcc.n	801de9a <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	689b      	ldr	r3, [r3, #8]
 801deb8:	6879      	ldr	r1, [r7, #4]
 801deba:	68f8      	ldr	r0, [r7, #12]
 801debc:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 801debe:	68fb      	ldr	r3, [r7, #12]
 801dec0:	681b      	ldr	r3, [r3, #0]
 801dec2:	68f8      	ldr	r0, [r7, #12]
 801dec4:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801dec6:	68fb      	ldr	r3, [r7, #12]
 801dec8:	685b      	ldr	r3, [r3, #4]
 801deca:	68fa      	ldr	r2, [r7, #12]
 801decc:	68d2      	ldr	r2, [r2, #12]
 801dece:	6939      	ldr	r1, [r7, #16]
 801ded0:	68f8      	ldr	r0, [r7, #12]
 801ded2:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	685b      	ldr	r3, [r3, #4]
 801ded8:	68fa      	ldr	r2, [r7, #12]
 801deda:	6912      	ldr	r2, [r2, #16]
 801dedc:	6879      	ldr	r1, [r7, #4]
 801dede:	68f8      	ldr	r0, [r7, #12]
 801dee0:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 801dee2:	68fb      	ldr	r3, [r7, #12]
 801dee4:	689b      	ldr	r3, [r3, #8]
 801dee6:	6879      	ldr	r1, [r7, #4]
 801dee8:	68f8      	ldr	r0, [r7, #12]
 801deea:	4798      	blx	r3
}
 801deec:	bf00      	nop
 801deee:	3718      	adds	r7, #24
 801def0:	46bd      	mov	sp, r7
 801def2:	bd80      	pop	{r7, pc}

0801def4 <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 801def4:	b580      	push	{r7, lr}
 801def6:	b084      	sub	sp, #16
 801def8:	af00      	add	r7, sp, #0
 801defa:	60f8      	str	r0, [r7, #12]
 801defc:	60b9      	str	r1, [r7, #8]
 801defe:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 801df00:	68b9      	ldr	r1, [r7, #8]
 801df02:	68f8      	ldr	r0, [r7, #12]
 801df04:	f7ff ff56 	bl	801ddb4 <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	691b      	ldr	r3, [r3, #16]
 801df0c:	461a      	mov	r2, r3
 801df0e:	6879      	ldr	r1, [r7, #4]
 801df10:	68f8      	ldr	r0, [r7, #12]
 801df12:	f7ff ff8e 	bl	801de32 <HMAC_update>
  HMAC_finish(hash_context, K, V);
 801df16:	687a      	ldr	r2, [r7, #4]
 801df18:	68b9      	ldr	r1, [r7, #8]
 801df1a:	68f8      	ldr	r0, [r7, #12]
 801df1c:	f7ff ff99 	bl	801de52 <HMAC_finish>
}
 801df20:	bf00      	nop
 801df22:	3710      	adds	r7, #16
 801df24:	46bd      	mov	sp, r7
 801df26:	bd80      	pop	{r7, pc}

0801df28 <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 801df28:	b580      	push	{r7, lr}
 801df2a:	b096      	sub	sp, #88	@ 0x58
 801df2c:	af02      	add	r7, sp, #8
 801df2e:	60f8      	str	r0, [r7, #12]
 801df30:	60b9      	str	r1, [r7, #8]
 801df32:	607a      	str	r2, [r7, #4]
 801df34:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 801df36:	683b      	ldr	r3, [r7, #0]
 801df38:	695b      	ldr	r3, [r3, #20]
 801df3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 801df3c:	683b      	ldr	r3, [r7, #0]
 801df3e:	691b      	ldr	r3, [r3, #16]
 801df40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801df42:	4413      	add	r3, r2
 801df44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 801df46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801df48:	785b      	ldrb	r3, [r3, #1]
 801df4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801df4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801df50:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801df54:	331f      	adds	r3, #31
 801df56:	2b00      	cmp	r3, #0
 801df58:	da00      	bge.n	801df5c <mg_uecc_sign_deterministic+0x34>
 801df5a:	331f      	adds	r3, #31
 801df5c:	115b      	asrs	r3, r3, #5
 801df5e:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 801df62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801df64:	885b      	ldrh	r3, [r3, #2]
 801df66:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 801df68:	2300      	movs	r3, #0
 801df6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801df6c:	e00c      	b.n	801df88 <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 801df6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801df70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801df72:	4413      	add	r3, r2
 801df74:	2201      	movs	r2, #1
 801df76:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 801df78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801df7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801df7c:	4413      	add	r3, r2
 801df7e:	2200      	movs	r2, #0
 801df80:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 801df82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801df84:	3301      	adds	r3, #1
 801df86:	64bb      	str	r3, [r7, #72]	@ 0x48
 801df88:	683b      	ldr	r3, [r7, #0]
 801df8a:	691b      	ldr	r3, [r3, #16]
 801df8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801df8e:	429a      	cmp	r2, r3
 801df90:	d3ed      	bcc.n	801df6e <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801df92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801df94:	6838      	ldr	r0, [r7, #0]
 801df96:	f7ff ff0d 	bl	801ddb4 <HMAC_init>
  V[hash_context->result_size] = 0x00;
 801df9a:	683b      	ldr	r3, [r7, #0]
 801df9c:	691b      	ldr	r3, [r3, #16]
 801df9e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801dfa0:	4413      	add	r3, r2
 801dfa2:	2200      	movs	r2, #0
 801dfa4:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801dfa6:	683b      	ldr	r3, [r7, #0]
 801dfa8:	691b      	ldr	r3, [r3, #16]
 801dfaa:	3301      	adds	r3, #1
 801dfac:	461a      	mov	r2, r3
 801dfae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801dfb0:	6838      	ldr	r0, [r7, #0]
 801dfb2:	f7ff ff3e 	bl	801de32 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801dfb6:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801dfba:	461a      	mov	r2, r3
 801dfbc:	68f9      	ldr	r1, [r7, #12]
 801dfbe:	6838      	ldr	r0, [r7, #0]
 801dfc0:	f7ff ff37 	bl	801de32 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801dfc4:	687a      	ldr	r2, [r7, #4]
 801dfc6:	68b9      	ldr	r1, [r7, #8]
 801dfc8:	6838      	ldr	r0, [r7, #0]
 801dfca:	f7ff ff32 	bl	801de32 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801dfce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801dfd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801dfd2:	6838      	ldr	r0, [r7, #0]
 801dfd4:	f7ff ff3d 	bl	801de52 <HMAC_finish>

  update_V(hash_context, K, V);
 801dfd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801dfda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801dfdc:	6838      	ldr	r0, [r7, #0]
 801dfde:	f7ff ff89 	bl	801def4 <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801dfe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801dfe4:	6838      	ldr	r0, [r7, #0]
 801dfe6:	f7ff fee5 	bl	801ddb4 <HMAC_init>
  V[hash_context->result_size] = 0x01;
 801dfea:	683b      	ldr	r3, [r7, #0]
 801dfec:	691b      	ldr	r3, [r3, #16]
 801dfee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801dff0:	4413      	add	r3, r2
 801dff2:	2201      	movs	r2, #1
 801dff4:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801dff6:	683b      	ldr	r3, [r7, #0]
 801dff8:	691b      	ldr	r3, [r3, #16]
 801dffa:	3301      	adds	r3, #1
 801dffc:	461a      	mov	r2, r3
 801dffe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e000:	6838      	ldr	r0, [r7, #0]
 801e002:	f7ff ff16 	bl	801de32 <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801e006:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801e00a:	461a      	mov	r2, r3
 801e00c:	68f9      	ldr	r1, [r7, #12]
 801e00e:	6838      	ldr	r0, [r7, #0]
 801e010:	f7ff ff0f 	bl	801de32 <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801e014:	687a      	ldr	r2, [r7, #4]
 801e016:	68b9      	ldr	r1, [r7, #8]
 801e018:	6838      	ldr	r0, [r7, #0]
 801e01a:	f7ff ff0a 	bl	801de32 <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801e01e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e020:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e022:	6838      	ldr	r0, [r7, #0]
 801e024:	f7ff ff15 	bl	801de52 <HMAC_finish>

  update_V(hash_context, K, V);
 801e028:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e02a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e02c:	6838      	ldr	r0, [r7, #0]
 801e02e:	f7ff ff61 	bl	801def4 <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801e032:	2300      	movs	r3, #0
 801e034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e036:	e084      	b.n	801e142 <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 801e038:	f107 0310 	add.w	r3, r7, #16
 801e03c:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 801e03e:	2300      	movs	r3, #0
 801e040:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 801e044:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e046:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e048:	6838      	ldr	r0, [r7, #0]
 801e04a:	f7ff ff53 	bl	801def4 <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 801e04e:	2300      	movs	r3, #0
 801e050:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e052:	e017      	b.n	801e084 <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 801e054:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e058:	441a      	add	r2, r3
 801e05a:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 801e05e:	b2cb      	uxtb	r3, r1
 801e060:	3301      	adds	r3, #1
 801e062:	b2db      	uxtb	r3, r3
 801e064:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801e068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e06a:	440b      	add	r3, r1
 801e06c:	7812      	ldrb	r2, [r2, #0]
 801e06e:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 801e070:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 801e074:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e078:	009b      	lsls	r3, r3, #2
 801e07a:	429a      	cmp	r2, r3
 801e07c:	da08      	bge.n	801e090 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 801e07e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e080:	3301      	adds	r3, #1
 801e082:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e084:	683b      	ldr	r3, [r7, #0]
 801e086:	691b      	ldr	r3, [r3, #16]
 801e088:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e08a:	429a      	cmp	r2, r3
 801e08c:	d3e2      	bcc.n	801e054 <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 801e08e:	e7d9      	b.n	801e044 <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 801e090:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 801e092:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e096:	015a      	lsls	r2, r3, #5
 801e098:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801e09c:	429a      	cmp	r2, r3
 801e09e:	dd20      	ble.n	801e0e2 <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801e0a0:	f04f 33ff 	mov.w	r3, #4294967295
 801e0a4:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 801e0a6:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e0aa:	3b01      	subs	r3, #1
 801e0ac:	009b      	lsls	r3, r3, #2
 801e0ae:	3350      	adds	r3, #80	@ 0x50
 801e0b0:	443b      	add	r3, r7
 801e0b2:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 801e0b6:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e0ba:	b29b      	uxth	r3, r3
 801e0bc:	015b      	lsls	r3, r3, #5
 801e0be:	b29a      	uxth	r2, r3
 801e0c0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801e0c2:	1ad3      	subs	r3, r2, r3
 801e0c4:	b29b      	uxth	r3, r3
 801e0c6:	b21b      	sxth	r3, r3
 801e0c8:	461a      	mov	r2, r3
          mask >>
 801e0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e0cc:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 801e0d0:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e0d4:	3b01      	subs	r3, #1
 801e0d6:	400a      	ands	r2, r1
 801e0d8:	009b      	lsls	r3, r3, #2
 801e0da:	3350      	adds	r3, #80	@ 0x50
 801e0dc:	443b      	add	r3, r7
 801e0de:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 801e0e2:	f107 0210 	add.w	r2, r7, #16
 801e0e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e0e8:	9301      	str	r3, [sp, #4]
 801e0ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e0ec:	9300      	str	r3, [sp, #0]
 801e0ee:	4613      	mov	r3, r2
 801e0f0:	687a      	ldr	r2, [r7, #4]
 801e0f2:	68b9      	ldr	r1, [r7, #8]
 801e0f4:	68f8      	ldr	r0, [r7, #12]
 801e0f6:	f7ff fcf1 	bl	801dadc <mg_uecc_sign_with_k_internal>
 801e0fa:	4603      	mov	r3, r0
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	d001      	beq.n	801e104 <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 801e100:	2301      	movs	r3, #1
 801e102:	e023      	b.n	801e14c <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 801e104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e106:	6838      	ldr	r0, [r7, #0]
 801e108:	f7ff fe54 	bl	801ddb4 <HMAC_init>
    V[hash_context->result_size] = 0x00;
 801e10c:	683b      	ldr	r3, [r7, #0]
 801e10e:	691b      	ldr	r3, [r3, #16]
 801e110:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e112:	4413      	add	r3, r2
 801e114:	2200      	movs	r2, #0
 801e116:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 801e118:	683b      	ldr	r3, [r7, #0]
 801e11a:	691b      	ldr	r3, [r3, #16]
 801e11c:	3301      	adds	r3, #1
 801e11e:	461a      	mov	r2, r3
 801e120:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e122:	6838      	ldr	r0, [r7, #0]
 801e124:	f7ff fe85 	bl	801de32 <HMAC_update>
    HMAC_finish(hash_context, K, K);
 801e128:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e12a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e12c:	6838      	ldr	r0, [r7, #0]
 801e12e:	f7ff fe90 	bl	801de52 <HMAC_finish>

    update_V(hash_context, K, V);
 801e132:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e134:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e136:	6838      	ldr	r0, [r7, #0]
 801e138:	f7ff fedc 	bl	801def4 <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801e13c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e13e:	3301      	adds	r3, #1
 801e140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e142:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e144:	2b3f      	cmp	r3, #63	@ 0x3f
 801e146:	f67f af77 	bls.w	801e038 <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 801e14a:	2300      	movs	r3, #0
}
 801e14c:	4618      	mov	r0, r3
 801e14e:	3750      	adds	r7, #80	@ 0x50
 801e150:	46bd      	mov	sp, r7
 801e152:	bd80      	pop	{r7, pc}

0801e154 <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 801e154:	b480      	push	{r7}
 801e156:	b083      	sub	sp, #12
 801e158:	af00      	add	r7, sp, #0
 801e15a:	4603      	mov	r3, r0
 801e15c:	460a      	mov	r2, r1
 801e15e:	80fb      	strh	r3, [r7, #6]
 801e160:	4613      	mov	r3, r2
 801e162:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 801e164:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801e168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e16c:	4293      	cmp	r3, r2
 801e16e:	bfb8      	it	lt
 801e170:	4613      	movlt	r3, r2
 801e172:	b21b      	sxth	r3, r3
}
 801e174:	4618      	mov	r0, r3
 801e176:	370c      	adds	r7, #12
 801e178:	46bd      	mov	sp, r7
 801e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e17e:	4770      	bx	lr

0801e180 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 801e180:	b590      	push	{r4, r7, lr}
 801e182:	b0ff      	sub	sp, #508	@ 0x1fc
 801e184:	af02      	add	r7, sp, #8
 801e186:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 801e18a:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 801e18e:	6020      	str	r0, [r4, #0]
 801e190:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 801e194:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 801e198:	6001      	str	r1, [r0, #0]
 801e19a:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 801e19e:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 801e1a2:	600a      	str	r2, [r1, #0]
 801e1a4:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 801e1a8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 801e1ac:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801e1ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e1b2:	781b      	ldrb	r3, [r3, #0]
 801e1b4:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801e1b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e1bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e1c0:	331f      	adds	r3, #31
 801e1c2:	2b00      	cmp	r3, #0
 801e1c4:	da00      	bge.n	801e1c8 <mg_uecc_verify+0x48>
 801e1c6:	331f      	adds	r3, #31
 801e1c8:	115b      	asrs	r3, r3, #5
 801e1ca:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 801e1ce:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e1d2:	3b01      	subs	r3, #1
 801e1d4:	009b      	lsls	r3, r3, #2
 801e1d6:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801e1da:	443b      	add	r3, r7
 801e1dc:	2200      	movs	r2, #0
 801e1de:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 801e1e2:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e1e6:	1e5a      	subs	r2, r3, #1
 801e1e8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e1ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801e1f0:	2100      	movs	r1, #0
 801e1f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 801e1f6:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e1fa:	1e5a      	subs	r2, r3, #1
 801e1fc:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e200:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801e204:	2100      	movs	r1, #0
 801e206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 801e20a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e20e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e212:	461a      	mov	r2, r3
 801e214:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e218:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801e21c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801e220:	6819      	ldr	r1, [r3, #0]
 801e222:	f7ff fbac 	bl	801d97e <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801e226:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e22a:	009b      	lsls	r3, r3, #2
 801e22c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801e230:	18d0      	adds	r0, r2, r3
 801e232:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e236:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e23a:	461a      	mov	r2, r3
 801e23c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e240:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801e244:	681b      	ldr	r3, [r3, #0]
 801e246:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 801e248:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e24c:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801e250:	461a      	mov	r2, r3
 801e252:	f7ff fb94 	bl	801d97e <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 801e256:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e25a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e25e:	461a      	mov	r2, r3
 801e260:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e264:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801e268:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801e26c:	6819      	ldr	r1, [r3, #0]
 801e26e:	f7ff fb86 	bl	801d97e <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 801e272:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e276:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e27a:	461a      	mov	r2, r3
 801e27c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e280:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	1899      	adds	r1, r3, r2
 801e288:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e28c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e290:	461a      	mov	r2, r3
 801e292:	f107 0310 	add.w	r3, r7, #16
 801e296:	4618      	mov	r0, r3
 801e298:	f7ff fb71 	bl	801d97e <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 801e29c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e2a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e2a4:	4611      	mov	r1, r2
 801e2a6:	4618      	mov	r0, r3
 801e2a8:	f7fd fe05 	bl	801beb6 <mg_uecc_vli_isZero>
 801e2ac:	4603      	mov	r3, r0
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d10a      	bne.n	801e2c8 <mg_uecc_verify+0x148>
 801e2b2:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e2b6:	f107 0310 	add.w	r3, r7, #16
 801e2ba:	4611      	mov	r1, r2
 801e2bc:	4618      	mov	r0, r3
 801e2be:	f7fd fdfa 	bl	801beb6 <mg_uecc_vli_isZero>
 801e2c2:	4603      	mov	r3, r0
 801e2c4:	2b00      	cmp	r3, #0
 801e2c6:	d001      	beq.n	801e2cc <mg_uecc_verify+0x14c>
    return 0;
 801e2c8:	2300      	movs	r3, #0
 801e2ca:	e220      	b.n	801e70e <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 801e2cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e2d0:	3324      	adds	r3, #36	@ 0x24
 801e2d2:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e2d6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e2da:	4618      	mov	r0, r3
 801e2dc:	f7fd feb5 	bl	801c04a <mg_uecc_vli_cmp_unsafe>
 801e2e0:	4603      	mov	r3, r0
 801e2e2:	2b01      	cmp	r3, #1
 801e2e4:	d10c      	bne.n	801e300 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 801e2e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e2ea:	3324      	adds	r3, #36	@ 0x24
 801e2ec:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e2f0:	f107 0110 	add.w	r1, r7, #16
 801e2f4:	4618      	mov	r0, r3
 801e2f6:	f7fd fea8 	bl	801c04a <mg_uecc_vli_cmp_unsafe>
 801e2fa:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 801e2fc:	2b01      	cmp	r3, #1
 801e2fe:	d001      	beq.n	801e304 <mg_uecc_verify+0x184>
    return 0;
 801e300:	2300      	movs	r3, #0
 801e302:	e204      	b.n	801e70e <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 801e304:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e308:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801e30c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e310:	f107 0110 	add.w	r1, r7, #16
 801e314:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e318:	f7fe fafd 	bl	801c916 <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 801e31c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e320:	3b01      	subs	r3, #1
 801e322:	009b      	lsls	r3, r3, #2
 801e324:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801e328:	443b      	add	r3, r7
 801e32a:	2200      	movs	r2, #0
 801e32c:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 801e330:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e334:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 801e338:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e33c:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 801e340:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 801e344:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e348:	6812      	ldr	r2, [r2, #0]
 801e34a:	6809      	ldr	r1, [r1, #0]
 801e34c:	f7ff fb53 	bl	801d9f6 <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 801e350:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e354:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801e358:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e35c:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 801e360:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 801e364:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e368:	9300      	str	r3, [sp, #0]
 801e36a:	4623      	mov	r3, r4
 801e36c:	f7fe fa54 	bl	801c818 <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 801e370:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e374:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801e378:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e37c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e380:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 801e384:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e388:	9300      	str	r3, [sp, #0]
 801e38a:	4623      	mov	r3, r4
 801e38c:	f7fe fa44 	bl	801c818 <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 801e390:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e394:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 801e398:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801e39c:	4618      	mov	r0, r3
 801e39e:	f7fd fe2d 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 801e3a2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e3a6:	009b      	lsls	r3, r3, #2
 801e3a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e3ac:	18d0      	adds	r0, r2, r3
 801e3ae:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e3b2:	009b      	lsls	r3, r3, #2
 801e3b4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801e3b8:	4413      	add	r3, r2
 801e3ba:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e3be:	4619      	mov	r1, r3
 801e3c0:	f7fd fe1c 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 801e3c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e3c8:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 801e3cc:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e3d0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 801e3d4:	4618      	mov	r0, r3
 801e3d6:	f7fd fe11 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 801e3da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e3de:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 801e3e2:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e3e6:	009b      	lsls	r3, r3, #2
 801e3e8:	18d1      	adds	r1, r2, r3
 801e3ea:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e3ee:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e3f2:	4618      	mov	r0, r3
 801e3f4:	f7fd fe02 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 801e3f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e3fc:	1d1c      	adds	r4, r3, #4
 801e3fe:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801e402:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801e406:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e40a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e40e:	9300      	str	r3, [sp, #0]
 801e410:	4623      	mov	r3, r4
 801e412:	f7fe f8a8 	bl	801c566 <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 801e416:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e41a:	009b      	lsls	r3, r3, #2
 801e41c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e420:	18d4      	adds	r4, r2, r3
 801e422:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e426:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801e42a:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801e42e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e432:	9300      	str	r3, [sp, #0]
 801e434:	4623      	mov	r3, r4
 801e436:	f7fe fedd 	bl	801d1f4 <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 801e43a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e43e:	1d1a      	adds	r2, r3, #4
 801e440:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e444:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 801e448:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e44c:	f7fe fa63 	bl	801c916 <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 801e450:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e454:	009b      	lsls	r3, r3, #2
 801e456:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e45a:	18d1      	adds	r1, r2, r3
 801e45c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e460:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 801e464:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e468:	f7fe fe52 	bl	801d110 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 801e46c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e470:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e474:	2200      	movs	r2, #0
 801e476:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 801e478:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e47c:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 801e480:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e484:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e488:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 801e48a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e48e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e492:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801e496:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 801e498:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e49c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e4a0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e4a4:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 801e4a6:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e4aa:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e4ae:	4611      	mov	r1, r2
 801e4b0:	4618      	mov	r0, r3
 801e4b2:	f7fd fd6a 	bl	801bf8a <mg_uecc_vli_numBits>
 801e4b6:	4603      	mov	r3, r0
 801e4b8:	461c      	mov	r4, r3
 801e4ba:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e4be:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801e4c2:	4611      	mov	r1, r2
 801e4c4:	4618      	mov	r0, r3
 801e4c6:	f7fd fd60 	bl	801bf8a <mg_uecc_vli_numBits>
 801e4ca:	4603      	mov	r3, r0
 801e4cc:	4619      	mov	r1, r3
 801e4ce:	4620      	mov	r0, r4
 801e4d0:	f7ff fe40 	bl	801e154 <smax>
 801e4d4:	4603      	mov	r3, r0
 801e4d6:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 801e4da:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801e4de:	3b01      	subs	r3, #1
 801e4e0:	b29b      	uxth	r3, r3
 801e4e2:	b21a      	sxth	r2, r3
 801e4e4:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e4e8:	4611      	mov	r1, r2
 801e4ea:	4618      	mov	r0, r3
 801e4ec:	f7fd fd0d 	bl	801bf0a <mg_uecc_vli_testBit>
 801e4f0:	4603      	mov	r3, r0
 801e4f2:	2b00      	cmp	r3, #0
 801e4f4:	bf14      	ite	ne
 801e4f6:	2301      	movne	r3, #1
 801e4f8:	2300      	moveq	r3, #0
 801e4fa:	b2db      	uxtb	r3, r3
 801e4fc:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 801e4fe:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801e502:	3b01      	subs	r3, #1
 801e504:	b29b      	uxth	r3, r3
 801e506:	b21a      	sxth	r2, r3
 801e508:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801e50c:	4611      	mov	r1, r2
 801e50e:	4618      	mov	r0, r3
 801e510:	f7fd fcfb 	bl	801bf0a <mg_uecc_vli_testBit>
 801e514:	4603      	mov	r3, r0
 801e516:	2b00      	cmp	r3, #0
 801e518:	d001      	beq.n	801e51e <mg_uecc_verify+0x39e>
 801e51a:	2302      	movs	r3, #2
 801e51c:	e000      	b.n	801e520 <mg_uecc_verify+0x3a0>
 801e51e:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 801e520:	ea43 0204 	orr.w	r2, r3, r4
  point =
 801e524:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e528:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e530:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 801e534:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e538:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e53c:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 801e540:	4618      	mov	r0, r3
 801e542:	f7fd fd5b 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 801e546:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e54a:	009b      	lsls	r3, r3, #2
 801e54c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801e550:	18d1      	adds	r1, r2, r3
 801e552:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e556:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801e55a:	4618      	mov	r0, r3
 801e55c:	f7fd fd4e 	bl	801bffc <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 801e560:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e564:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 801e568:	4611      	mov	r1, r2
 801e56a:	4618      	mov	r0, r3
 801e56c:	f7fd fc82 	bl	801be74 <mg_uecc_vli_clear>
  z[0] = 1;
 801e570:	2301      	movs	r3, #1
 801e572:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 801e576:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801e57a:	3b02      	subs	r3, #2
 801e57c:	b29b      	uxth	r3, r3
 801e57e:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 801e582:	e087      	b.n	801e694 <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 801e584:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e588:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801e58c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e590:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 801e594:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801e598:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e59c:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 801e59e:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 801e5a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e5a6:	4611      	mov	r1, r2
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	f7fd fcae 	bl	801bf0a <mg_uecc_vli_testBit>
 801e5ae:	4603      	mov	r3, r0
 801e5b0:	2b00      	cmp	r3, #0
 801e5b2:	bf14      	ite	ne
 801e5b4:	2301      	movne	r3, #1
 801e5b6:	2300      	moveq	r3, #0
 801e5b8:	b2db      	uxtb	r3, r3
 801e5ba:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 801e5bc:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 801e5c0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801e5c4:	4611      	mov	r1, r2
 801e5c6:	4618      	mov	r0, r3
 801e5c8:	f7fd fc9f 	bl	801bf0a <mg_uecc_vli_testBit>
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	d001      	beq.n	801e5d6 <mg_uecc_verify+0x456>
 801e5d2:	2302      	movs	r3, #2
 801e5d4:	e000      	b.n	801e5d8 <mg_uecc_verify+0x458>
 801e5d6:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 801e5d8:	4323      	orrs	r3, r4
 801e5da:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 801e5de:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e5e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e5e6:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801e5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e5ee:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 801e5f2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d046      	beq.n	801e688 <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 801e5fa:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e5fe:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 801e602:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 801e606:	4618      	mov	r0, r3
 801e608:	f7fd fcf8 	bl	801bffc <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 801e60c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e610:	009b      	lsls	r3, r3, #2
 801e612:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801e616:	18d1      	adds	r1, r2, r3
 801e618:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e61c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e620:	4618      	mov	r0, r3
 801e622:	f7fd fceb 	bl	801bffc <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 801e626:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e62a:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801e62e:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801e632:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e636:	f7fe fd6b 	bl	801d110 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 801e63a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e63e:	1d1c      	adds	r4, r3, #4
 801e640:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801e644:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801e648:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801e64c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e650:	9300      	str	r3, [sp, #0]
 801e652:	4623      	mov	r3, r4
 801e654:	f7fd ff87 	bl	801c566 <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 801e658:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 801e65c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801e660:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801e664:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801e668:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e66c:	9300      	str	r3, [sp, #0]
 801e66e:	4623      	mov	r3, r4
 801e670:	f7fe fdc0 	bl	801d1f4 <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 801e674:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801e678:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 801e67c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e680:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e684:	f7fe f8e3 	bl	801c84e <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 801e688:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 801e68c:	3b01      	subs	r3, #1
 801e68e:	b29b      	uxth	r3, r3
 801e690:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 801e694:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 801e698:	2b00      	cmp	r3, #0
 801e69a:	f6bf af73 	bge.w	801e584 <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 801e69e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e6a2:	1d1a      	adds	r2, r3, #4
 801e6a4:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e6a8:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 801e6ac:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e6b0:	f7fe f931 	bl	801c916 <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 801e6b4:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e6b8:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 801e6bc:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801e6c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e6c4:	f7fe fd24 	bl	801d110 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 801e6c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e6cc:	3324      	adds	r3, #36	@ 0x24
 801e6ce:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e6d2:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801e6d6:	4618      	mov	r0, r3
 801e6d8:	f7fd fcb7 	bl	801c04a <mg_uecc_vli_cmp_unsafe>
 801e6dc:	4603      	mov	r3, r0
 801e6de:	2b01      	cmp	r3, #1
 801e6e0:	d00b      	beq.n	801e6fa <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 801e6e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e6e6:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801e6ea:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e6ee:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801e6f2:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801e6f6:	f7fd fdbb 	bl	801c270 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 801e6fa:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e6fe:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e702:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e706:	4618      	mov	r0, r3
 801e708:	f7fd fcdb 	bl	801c0c2 <mg_uecc_vli_equal>
 801e70c:	4603      	mov	r3, r0
}
 801e70e:	4618      	mov	r0, r3
 801e710:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 801e714:	46bd      	mov	sp, r7
 801e716:	bd90      	pop	{r4, r7, pc}

0801e718 <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 801e718:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e71c:	b08f      	sub	sp, #60	@ 0x3c
 801e71e:	af00      	add	r7, sp, #0
 801e720:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801e722:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e724:	627a      	str	r2, [r7, #36]	@ 0x24
 801e726:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 801e728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e72a:	2200      	movs	r2, #0
 801e72c:	469a      	mov	sl, r3
 801e72e:	4693      	mov	fp, r2
 801e730:	6a3b      	ldr	r3, [r7, #32]
 801e732:	2200      	movs	r2, #0
 801e734:	61bb      	str	r3, [r7, #24]
 801e736:	61fa      	str	r2, [r7, #28]
 801e738:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801e73c:	4603      	mov	r3, r0
 801e73e:	fb03 f20b 	mul.w	r2, r3, fp
 801e742:	460b      	mov	r3, r1
 801e744:	fb0a f303 	mul.w	r3, sl, r3
 801e748:	4413      	add	r3, r2
 801e74a:	4602      	mov	r2, r0
 801e74c:	fbaa 4502 	umull	r4, r5, sl, r2
 801e750:	442b      	add	r3, r5
 801e752:	461d      	mov	r5, r3
 801e754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e756:	2200      	movs	r2, #0
 801e758:	613b      	str	r3, [r7, #16]
 801e75a:	617a      	str	r2, [r7, #20]
 801e75c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e760:	460b      	mov	r3, r1
 801e762:	eb14 0803 	adds.w	r8, r4, r3
 801e766:	4613      	mov	r3, r2
 801e768:	eb45 0903 	adc.w	r9, r5, r3
 801e76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	2200      	movs	r2, #0
 801e772:	60bb      	str	r3, [r7, #8]
 801e774:	60fa      	str	r2, [r7, #12]
 801e776:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e77a:	460b      	mov	r3, r1
 801e77c:	eb18 0303 	adds.w	r3, r8, r3
 801e780:	603b      	str	r3, [r7, #0]
 801e782:	4613      	mov	r3, r2
 801e784:	eb49 0303 	adc.w	r3, r9, r3
 801e788:	607b      	str	r3, [r7, #4]
 801e78a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e78e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 801e792:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e796:	f04f 0200 	mov.w	r2, #0
 801e79a:	f04f 0300 	mov.w	r3, #0
 801e79e:	000a      	movs	r2, r1
 801e7a0:	2300      	movs	r3, #0
 801e7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e7a4:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 801e7a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801e7a8:	4618      	mov	r0, r3
 801e7aa:	373c      	adds	r7, #60	@ 0x3c
 801e7ac:	46bd      	mov	sp, r7
 801e7ae:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e7b2:	4770      	bx	lr

0801e7b4 <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 801e7b4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e7b8:	b08b      	sub	sp, #44	@ 0x2c
 801e7ba:	af00      	add	r7, sp, #0
 801e7bc:	61f8      	str	r0, [r7, #28]
 801e7be:	61b9      	str	r1, [r7, #24]
 801e7c0:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 801e7c2:	69fb      	ldr	r3, [r7, #28]
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	2200      	movs	r2, #0
 801e7c8:	60bb      	str	r3, [r7, #8]
 801e7ca:	60fa      	str	r2, [r7, #12]
 801e7cc:	69bb      	ldr	r3, [r7, #24]
 801e7ce:	2200      	movs	r2, #0
 801e7d0:	469a      	mov	sl, r3
 801e7d2:	4693      	mov	fp, r2
 801e7d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e7d8:	460b      	mov	r3, r1
 801e7da:	eb13 040a 	adds.w	r4, r3, sl
 801e7de:	4613      	mov	r3, r2
 801e7e0:	eb43 050b 	adc.w	r5, r3, fp
 801e7e4:	697b      	ldr	r3, [r7, #20]
 801e7e6:	2200      	movs	r2, #0
 801e7e8:	4698      	mov	r8, r3
 801e7ea:	4691      	mov	r9, r2
 801e7ec:	eb14 0308 	adds.w	r3, r4, r8
 801e7f0:	603b      	str	r3, [r7, #0]
 801e7f2:	eb45 0309 	adc.w	r3, r5, r9
 801e7f6:	607b      	str	r3, [r7, #4]
 801e7f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e7fc:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 801e800:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801e804:	f04f 0200 	mov.w	r2, #0
 801e808:	f04f 0300 	mov.w	r3, #0
 801e80c:	000a      	movs	r2, r1
 801e80e:	2300      	movs	r3, #0
 801e810:	69fb      	ldr	r3, [r7, #28]
 801e812:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 801e814:	6a3b      	ldr	r3, [r7, #32]
}
 801e816:	4618      	mov	r0, r3
 801e818:	372c      	adds	r7, #44	@ 0x2c
 801e81a:	46bd      	mov	sp, r7
 801e81c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e820:	4770      	bx	lr

0801e822 <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 801e822:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801e826:	b085      	sub	sp, #20
 801e828:	af00      	add	r7, sp, #0
 801e82a:	6078      	str	r0, [r7, #4]
 801e82c:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 801e82e:	6879      	ldr	r1, [r7, #4]
 801e830:	6809      	ldr	r1, [r1, #0]
 801e832:	2000      	movs	r0, #0
 801e834:	460c      	mov	r4, r1
 801e836:	4605      	mov	r5, r0
 801e838:	6839      	ldr	r1, [r7, #0]
 801e83a:	2000      	movs	r0, #0
 801e83c:	460a      	mov	r2, r1
 801e83e:	4603      	mov	r3, r0
 801e840:	eb14 0802 	adds.w	r8, r4, r2
 801e844:	eb45 0903 	adc.w	r9, r5, r3
 801e848:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 801e84c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801e850:	f04f 0200 	mov.w	r2, #0
 801e854:	f04f 0300 	mov.w	r3, #0
 801e858:	000a      	movs	r2, r1
 801e85a:	2300      	movs	r3, #0
 801e85c:	687b      	ldr	r3, [r7, #4]
 801e85e:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 801e860:	68bb      	ldr	r3, [r7, #8]
}
 801e862:	4618      	mov	r0, r3
 801e864:	3714      	adds	r7, #20
 801e866:	46bd      	mov	sp, r7
 801e868:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801e86c:	4770      	bx	lr

0801e86e <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 801e86e:	b590      	push	{r4, r7, lr}
 801e870:	b085      	sub	sp, #20
 801e872:	af00      	add	r7, sp, #0
 801e874:	6078      	str	r0, [r7, #4]
 801e876:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 801e878:	687b      	ldr	r3, [r7, #4]
 801e87a:	331c      	adds	r3, #28
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	0fda      	lsrs	r2, r3, #31
 801e880:	683b      	ldr	r3, [r7, #0]
 801e882:	005b      	lsls	r3, r3, #1
 801e884:	4313      	orrs	r3, r2
 801e886:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	331c      	adds	r3, #28
 801e88c:	681a      	ldr	r2, [r3, #0]
 801e88e:	687b      	ldr	r3, [r7, #4]
 801e890:	331c      	adds	r3, #28
 801e892:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 801e896:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 801e898:	683a      	ldr	r2, [r7, #0]
 801e89a:	4613      	mov	r3, r2
 801e89c:	00db      	lsls	r3, r3, #3
 801e89e:	4413      	add	r3, r2
 801e8a0:	005b      	lsls	r3, r3, #1
 801e8a2:	4413      	add	r3, r2
 801e8a4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 801e8a6:	2300      	movs	r3, #0
 801e8a8:	60fb      	str	r3, [r7, #12]
 801e8aa:	e012      	b.n	801e8d2 <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 801e8ac:	68fb      	ldr	r3, [r7, #12]
 801e8ae:	009b      	lsls	r3, r3, #2
 801e8b0:	687a      	ldr	r2, [r7, #4]
 801e8b2:	4413      	add	r3, r2
 801e8b4:	6819      	ldr	r1, [r3, #0]
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	009b      	lsls	r3, r3, #2
 801e8ba:	687a      	ldr	r2, [r7, #4]
 801e8bc:	18d4      	adds	r4, r2, r3
 801e8be:	f107 0308 	add.w	r3, r7, #8
 801e8c2:	4618      	mov	r0, r3
 801e8c4:	f7ff ffad 	bl	801e822 <adc0>
 801e8c8:	4603      	mov	r3, r0
 801e8ca:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 801e8cc:	68fb      	ldr	r3, [r7, #12]
 801e8ce:	3301      	adds	r3, #1
 801e8d0:	60fb      	str	r3, [r7, #12]
 801e8d2:	68fb      	ldr	r3, [r7, #12]
 801e8d4:	2b07      	cmp	r3, #7
 801e8d6:	d9e9      	bls.n	801e8ac <propagate+0x3e>
  }
}
 801e8d8:	bf00      	nop
 801e8da:	bf00      	nop
 801e8dc:	3714      	adds	r7, #20
 801e8de:	46bd      	mov	sp, r7
 801e8e0:	bd90      	pop	{r4, r7, pc}

0801e8e2 <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 801e8e2:	b590      	push	{r4, r7, lr}
 801e8e4:	b087      	sub	sp, #28
 801e8e6:	af00      	add	r7, sp, #0
 801e8e8:	60f8      	str	r0, [r7, #12]
 801e8ea:	60b9      	str	r1, [r7, #8]
 801e8ec:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 801e8ee:	2300      	movs	r3, #0
 801e8f0:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 801e8f2:	2300      	movs	r3, #0
 801e8f4:	617b      	str	r3, [r7, #20]
 801e8f6:	e018      	b.n	801e92a <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 801e8f8:	697b      	ldr	r3, [r7, #20]
 801e8fa:	009b      	lsls	r3, r3, #2
 801e8fc:	68ba      	ldr	r2, [r7, #8]
 801e8fe:	4413      	add	r3, r2
 801e900:	6819      	ldr	r1, [r3, #0]
 801e902:	697b      	ldr	r3, [r7, #20]
 801e904:	009b      	lsls	r3, r3, #2
 801e906:	687a      	ldr	r2, [r7, #4]
 801e908:	4413      	add	r3, r2
 801e90a:	6818      	ldr	r0, [r3, #0]
 801e90c:	697b      	ldr	r3, [r7, #20]
 801e90e:	009b      	lsls	r3, r3, #2
 801e910:	68fa      	ldr	r2, [r7, #12]
 801e912:	18d4      	adds	r4, r2, r3
 801e914:	f107 0310 	add.w	r3, r7, #16
 801e918:	4602      	mov	r2, r0
 801e91a:	4618      	mov	r0, r3
 801e91c:	f7ff ff4a 	bl	801e7b4 <adc>
 801e920:	4603      	mov	r3, r0
 801e922:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 801e924:	697b      	ldr	r3, [r7, #20]
 801e926:	3301      	adds	r3, #1
 801e928:	617b      	str	r3, [r7, #20]
 801e92a:	697b      	ldr	r3, [r7, #20]
 801e92c:	2b07      	cmp	r3, #7
 801e92e:	d9e3      	bls.n	801e8f8 <add+0x16>
  }
  propagate(out, carry);
 801e930:	693b      	ldr	r3, [r7, #16]
 801e932:	4619      	mov	r1, r3
 801e934:	68f8      	ldr	r0, [r7, #12]
 801e936:	f7ff ff9a 	bl	801e86e <propagate>
}
 801e93a:	bf00      	nop
 801e93c:	371c      	adds	r7, #28
 801e93e:	46bd      	mov	sp, r7
 801e940:	bd90      	pop	{r4, r7, pc}

0801e942 <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 801e942:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e946:	b08a      	sub	sp, #40	@ 0x28
 801e948:	af00      	add	r7, sp, #0
 801e94a:	6178      	str	r0, [r7, #20]
 801e94c:	6139      	str	r1, [r7, #16]
 801e94e:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 801e950:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 801e954:	f04f 33ff 	mov.w	r3, #4294967295
 801e958:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801e95c:	2300      	movs	r3, #0
 801e95e:	627b      	str	r3, [r7, #36]	@ 0x24
 801e960:	e032      	b.n	801e9c8 <sub+0x86>
    carry = carry + a[i] - b[i];
 801e962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e964:	009b      	lsls	r3, r3, #2
 801e966:	693a      	ldr	r2, [r7, #16]
 801e968:	4413      	add	r3, r2
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	2200      	movs	r2, #0
 801e96e:	4698      	mov	r8, r3
 801e970:	4691      	mov	r9, r2
 801e972:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e976:	eb18 0402 	adds.w	r4, r8, r2
 801e97a:	eb49 0503 	adc.w	r5, r9, r3
 801e97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e980:	009b      	lsls	r3, r3, #2
 801e982:	68fa      	ldr	r2, [r7, #12]
 801e984:	4413      	add	r3, r2
 801e986:	681b      	ldr	r3, [r3, #0]
 801e988:	2200      	movs	r2, #0
 801e98a:	469a      	mov	sl, r3
 801e98c:	4693      	mov	fp, r2
 801e98e:	ebb4 030a 	subs.w	r3, r4, sl
 801e992:	603b      	str	r3, [r7, #0]
 801e994:	eb65 030b 	sbc.w	r3, r5, fp
 801e998:	607b      	str	r3, [r7, #4]
 801e99a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e99e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 801e9a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9a4:	009b      	lsls	r3, r3, #2
 801e9a6:	697a      	ldr	r2, [r7, #20]
 801e9a8:	4413      	add	r3, r2
 801e9aa:	69ba      	ldr	r2, [r7, #24]
 801e9ac:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 801e9ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801e9b2:	f04f 0200 	mov.w	r2, #0
 801e9b6:	f04f 0300 	mov.w	r3, #0
 801e9ba:	000a      	movs	r2, r1
 801e9bc:	17cb      	asrs	r3, r1, #31
 801e9be:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801e9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9c4:	3301      	adds	r3, #1
 801e9c6:	627b      	str	r3, [r7, #36]	@ 0x24
 801e9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9ca:	2b07      	cmp	r3, #7
 801e9cc:	d9c9      	bls.n	801e962 <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 801e9ce:	69bb      	ldr	r3, [r7, #24]
 801e9d0:	3301      	adds	r3, #1
 801e9d2:	4619      	mov	r1, r3
 801e9d4:	6978      	ldr	r0, [r7, #20]
 801e9d6:	f7ff ff4a 	bl	801e86e <propagate>
}
 801e9da:	bf00      	nop
 801e9dc:	3728      	adds	r7, #40	@ 0x28
 801e9de:	46bd      	mov	sp, r7
 801e9e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801e9e4 <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 801e9e4:	b5b0      	push	{r4, r5, r7, lr}
 801e9e6:	b09a      	sub	sp, #104	@ 0x68
 801e9e8:	af00      	add	r7, sp, #0
 801e9ea:	60f8      	str	r0, [r7, #12]
 801e9ec:	60b9      	str	r1, [r7, #8]
 801e9ee:	607a      	str	r2, [r7, #4]
 801e9f0:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 801e9f2:	f107 031c 	add.w	r3, r7, #28
 801e9f6:	2240      	movs	r2, #64	@ 0x40
 801e9f8:	2100      	movs	r1, #0
 801e9fa:	4618      	mov	r0, r3
 801e9fc:	f004 fd8b 	bl	8023516 <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 801ea00:	2300      	movs	r3, #0
 801ea02:	667b      	str	r3, [r7, #100]	@ 0x64
 801ea04:	e03a      	b.n	801ea7c <mul+0x98>
    limb_t mand = b[i];
 801ea06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ea08:	009b      	lsls	r3, r3, #2
 801ea0a:	687a      	ldr	r2, [r7, #4]
 801ea0c:	4413      	add	r3, r2
 801ea0e:	681b      	ldr	r3, [r3, #0]
 801ea10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 801ea12:	2300      	movs	r3, #0
 801ea14:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 801ea16:	2300      	movs	r3, #0
 801ea18:	663b      	str	r3, [r7, #96]	@ 0x60
 801ea1a:	e020      	b.n	801ea5e <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 801ea1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ea1e:	009b      	lsls	r3, r3, #2
 801ea20:	68ba      	ldr	r2, [r7, #8]
 801ea22:	4413      	add	r3, r2
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 801ea28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801ea2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ea2c:	4413      	add	r3, r2
 801ea2e:	009b      	lsls	r3, r3, #2
 801ea30:	3368      	adds	r3, #104	@ 0x68
 801ea32:	443b      	add	r3, r7
 801ea34:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801ea38:	697d      	ldr	r5, [r7, #20]
 801ea3a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801ea3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ea3e:	18d4      	adds	r4, r2, r3
 801ea40:	f107 0018 	add.w	r0, r7, #24
 801ea44:	462b      	mov	r3, r5
 801ea46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801ea48:	f7ff fe66 	bl	801e718 <umaal>
 801ea4c:	4602      	mov	r2, r0
 801ea4e:	00a3      	lsls	r3, r4, #2
 801ea50:	3368      	adds	r3, #104	@ 0x68
 801ea52:	443b      	add	r3, r7
 801ea54:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 801ea58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ea5a:	3301      	adds	r3, #1
 801ea5c:	663b      	str	r3, [r7, #96]	@ 0x60
 801ea5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ea60:	2b07      	cmp	r3, #7
 801ea62:	d9db      	bls.n	801ea1c <mul+0x38>
    }
    accum[i + j] = carry2;
 801ea64:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801ea66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ea68:	4413      	add	r3, r2
 801ea6a:	69ba      	ldr	r2, [r7, #24]
 801ea6c:	009b      	lsls	r3, r3, #2
 801ea6e:	3368      	adds	r3, #104	@ 0x68
 801ea70:	443b      	add	r3, r7
 801ea72:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 801ea76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ea78:	3301      	adds	r3, #1
 801ea7a:	667b      	str	r3, [r7, #100]	@ 0x64
 801ea7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801ea7e:	683b      	ldr	r3, [r7, #0]
 801ea80:	429a      	cmp	r2, r3
 801ea82:	d3c0      	bcc.n	801ea06 <mul+0x22>
  }

  carry2 = 0;
 801ea84:	2300      	movs	r3, #0
 801ea86:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 801ea88:	2300      	movs	r3, #0
 801ea8a:	663b      	str	r3, [r7, #96]	@ 0x60
 801ea8c:	e01b      	b.n	801eac6 <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 801ea8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ea90:	009b      	lsls	r3, r3, #2
 801ea92:	3368      	adds	r3, #104	@ 0x68
 801ea94:	443b      	add	r3, r7
 801ea96:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801ea9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ea9c:	3308      	adds	r3, #8
 801ea9e:	009b      	lsls	r3, r3, #2
 801eaa0:	3368      	adds	r3, #104	@ 0x68
 801eaa2:	443b      	add	r3, r7
 801eaa4:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 801eaa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eaaa:	009b      	lsls	r3, r3, #2
 801eaac:	68fa      	ldr	r2, [r7, #12]
 801eaae:	18d4      	adds	r4, r2, r3
 801eab0:	f107 0018 	add.w	r0, r7, #24
 801eab4:	462b      	mov	r3, r5
 801eab6:	2226      	movs	r2, #38	@ 0x26
 801eab8:	f7ff fe2e 	bl	801e718 <umaal>
 801eabc:	4603      	mov	r3, r0
 801eabe:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 801eac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eac2:	3301      	adds	r3, #1
 801eac4:	663b      	str	r3, [r7, #96]	@ 0x60
 801eac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eac8:	2b07      	cmp	r3, #7
 801eaca:	d9e0      	bls.n	801ea8e <mul+0xaa>
  }
  propagate(out, carry2);
 801eacc:	69bb      	ldr	r3, [r7, #24]
 801eace:	4619      	mov	r1, r3
 801ead0:	68f8      	ldr	r0, [r7, #12]
 801ead2:	f7ff fecc 	bl	801e86e <propagate>
}
 801ead6:	bf00      	nop
 801ead8:	3768      	adds	r7, #104	@ 0x68
 801eada:	46bd      	mov	sp, r7
 801eadc:	bdb0      	pop	{r4, r5, r7, pc}

0801eade <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 801eade:	b580      	push	{r7, lr}
 801eae0:	b082      	sub	sp, #8
 801eae2:	af00      	add	r7, sp, #0
 801eae4:	6078      	str	r0, [r7, #4]
 801eae6:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 801eae8:	2308      	movs	r3, #8
 801eaea:	683a      	ldr	r2, [r7, #0]
 801eaec:	6839      	ldr	r1, [r7, #0]
 801eaee:	6878      	ldr	r0, [r7, #4]
 801eaf0:	f7ff ff78 	bl	801e9e4 <mul>
}
 801eaf4:	bf00      	nop
 801eaf6:	3708      	adds	r7, #8
 801eaf8:	46bd      	mov	sp, r7
 801eafa:	bd80      	pop	{r7, pc}

0801eafc <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 801eafc:	b580      	push	{r7, lr}
 801eafe:	b082      	sub	sp, #8
 801eb00:	af00      	add	r7, sp, #0
 801eb02:	6078      	str	r0, [r7, #4]
 801eb04:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 801eb06:	2308      	movs	r3, #8
 801eb08:	687a      	ldr	r2, [r7, #4]
 801eb0a:	6839      	ldr	r1, [r7, #0]
 801eb0c:	6878      	ldr	r0, [r7, #4]
 801eb0e:	f7ff ff69 	bl	801e9e4 <mul>
}
 801eb12:	bf00      	nop
 801eb14:	3708      	adds	r7, #8
 801eb16:	46bd      	mov	sp, r7
 801eb18:	bd80      	pop	{r7, pc}

0801eb1a <sqr1>:
static void sqr1(mg_fe a) {
 801eb1a:	b580      	push	{r7, lr}
 801eb1c:	b082      	sub	sp, #8
 801eb1e:	af00      	add	r7, sp, #0
 801eb20:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 801eb22:	6879      	ldr	r1, [r7, #4]
 801eb24:	6878      	ldr	r0, [r7, #4]
 801eb26:	f7ff ffe9 	bl	801eafc <mul1>
}
 801eb2a:	bf00      	nop
 801eb2c:	3708      	adds	r7, #8
 801eb2e:	46bd      	mov	sp, r7
 801eb30:	bd80      	pop	{r7, pc}

0801eb32 <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 801eb32:	b480      	push	{r7}
 801eb34:	b087      	sub	sp, #28
 801eb36:	af00      	add	r7, sp, #0
 801eb38:	60f8      	str	r0, [r7, #12]
 801eb3a:	60b9      	str	r1, [r7, #8]
 801eb3c:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 801eb3e:	2300      	movs	r3, #0
 801eb40:	617b      	str	r3, [r7, #20]
 801eb42:	e028      	b.n	801eb96 <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 801eb44:	697b      	ldr	r3, [r7, #20]
 801eb46:	009b      	lsls	r3, r3, #2
 801eb48:	68fa      	ldr	r2, [r7, #12]
 801eb4a:	4413      	add	r3, r2
 801eb4c:	681a      	ldr	r2, [r3, #0]
 801eb4e:	697b      	ldr	r3, [r7, #20]
 801eb50:	009b      	lsls	r3, r3, #2
 801eb52:	68b9      	ldr	r1, [r7, #8]
 801eb54:	440b      	add	r3, r1
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	4053      	eors	r3, r2
 801eb5a:	687a      	ldr	r2, [r7, #4]
 801eb5c:	4013      	ands	r3, r2
 801eb5e:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 801eb60:	697b      	ldr	r3, [r7, #20]
 801eb62:	009b      	lsls	r3, r3, #2
 801eb64:	68fa      	ldr	r2, [r7, #12]
 801eb66:	4413      	add	r3, r2
 801eb68:	6819      	ldr	r1, [r3, #0]
 801eb6a:	697b      	ldr	r3, [r7, #20]
 801eb6c:	009b      	lsls	r3, r3, #2
 801eb6e:	68fa      	ldr	r2, [r7, #12]
 801eb70:	4413      	add	r3, r2
 801eb72:	693a      	ldr	r2, [r7, #16]
 801eb74:	404a      	eors	r2, r1
 801eb76:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 801eb78:	697b      	ldr	r3, [r7, #20]
 801eb7a:	009b      	lsls	r3, r3, #2
 801eb7c:	68ba      	ldr	r2, [r7, #8]
 801eb7e:	4413      	add	r3, r2
 801eb80:	6819      	ldr	r1, [r3, #0]
 801eb82:	697b      	ldr	r3, [r7, #20]
 801eb84:	009b      	lsls	r3, r3, #2
 801eb86:	68ba      	ldr	r2, [r7, #8]
 801eb88:	4413      	add	r3, r2
 801eb8a:	693a      	ldr	r2, [r7, #16]
 801eb8c:	404a      	eors	r2, r1
 801eb8e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 801eb90:	697b      	ldr	r3, [r7, #20]
 801eb92:	3301      	adds	r3, #1
 801eb94:	617b      	str	r3, [r7, #20]
 801eb96:	697b      	ldr	r3, [r7, #20]
 801eb98:	2b0f      	cmp	r3, #15
 801eb9a:	d9d3      	bls.n	801eb44 <condswap+0x12>
  }
}
 801eb9c:	bf00      	nop
 801eb9e:	bf00      	nop
 801eba0:	371c      	adds	r7, #28
 801eba2:	46bd      	mov	sp, r7
 801eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eba8:	4770      	bx	lr

0801ebaa <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 801ebaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebae:	b08b      	sub	sp, #44	@ 0x2c
 801ebb0:	af00      	add	r7, sp, #0
 801ebb2:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 801ebb4:	2313      	movs	r3, #19
 801ebb6:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 801ebb8:	2300      	movs	r3, #0
 801ebba:	627b      	str	r3, [r7, #36]	@ 0x24
 801ebbc:	e012      	b.n	801ebe4 <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 801ebbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebc0:	009b      	lsls	r3, r3, #2
 801ebc2:	68fa      	ldr	r2, [r7, #12]
 801ebc4:	4413      	add	r3, r2
 801ebc6:	6819      	ldr	r1, [r3, #0]
 801ebc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebca:	009b      	lsls	r3, r3, #2
 801ebcc:	68fa      	ldr	r2, [r7, #12]
 801ebce:	18d6      	adds	r6, r2, r3
 801ebd0:	f107 0314 	add.w	r3, r7, #20
 801ebd4:	4618      	mov	r0, r3
 801ebd6:	f7ff fe24 	bl	801e822 <adc0>
 801ebda:	4603      	mov	r3, r0
 801ebdc:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 801ebde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebe0:	3301      	adds	r3, #1
 801ebe2:	627b      	str	r3, [r7, #36]	@ 0x24
 801ebe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ebe6:	2b07      	cmp	r3, #7
 801ebe8:	d9e9      	bls.n	801ebbe <canon+0x14>
  }
  propagate(x, carry0);
 801ebea:	697b      	ldr	r3, [r7, #20]
 801ebec:	4619      	mov	r1, r3
 801ebee:	68f8      	ldr	r0, [r7, #12]
 801ebf0:	f7ff fe3d 	bl	801e86e <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 801ebf4:	f06f 0212 	mvn.w	r2, #18
 801ebf8:	f04f 33ff 	mov.w	r3, #4294967295
 801ebfc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 801ec00:	2300      	movs	r3, #0
 801ec02:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 801ec04:	2300      	movs	r3, #0
 801ec06:	627b      	str	r3, [r7, #36]	@ 0x24
 801ec08:	e02a      	b.n	801ec60 <canon+0xb6>
    carry += x[i];
 801ec0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec0c:	009b      	lsls	r3, r3, #2
 801ec0e:	68fa      	ldr	r2, [r7, #12]
 801ec10:	4413      	add	r3, r2
 801ec12:	681b      	ldr	r3, [r3, #0]
 801ec14:	2200      	movs	r2, #0
 801ec16:	4698      	mov	r8, r3
 801ec18:	4691      	mov	r9, r2
 801ec1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ec1e:	eb12 0108 	adds.w	r1, r2, r8
 801ec22:	6039      	str	r1, [r7, #0]
 801ec24:	eb43 0309 	adc.w	r3, r3, r9
 801ec28:	607b      	str	r3, [r7, #4]
 801ec2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ec2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 801ec32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec34:	009b      	lsls	r3, r3, #2
 801ec36:	68fa      	ldr	r2, [r7, #12]
 801ec38:	4413      	add	r3, r2
 801ec3a:	69ba      	ldr	r2, [r7, #24]
 801ec3c:	601a      	str	r2, [r3, #0]
 801ec3e:	681b      	ldr	r3, [r3, #0]
 801ec40:	6a3a      	ldr	r2, [r7, #32]
 801ec42:	4313      	orrs	r3, r2
 801ec44:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 801ec46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801ec4a:	f04f 0200 	mov.w	r2, #0
 801ec4e:	f04f 0300 	mov.w	r3, #0
 801ec52:	000a      	movs	r2, r1
 801ec54:	17cb      	asrs	r3, r1, #31
 801ec56:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801ec5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec5c:	3301      	adds	r3, #1
 801ec5e:	627b      	str	r3, [r7, #36]	@ 0x24
 801ec60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec62:	2b07      	cmp	r3, #7
 801ec64:	d9d1      	bls.n	801ec0a <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 801ec66:	6a3b      	ldr	r3, [r7, #32]
 801ec68:	2200      	movs	r2, #0
 801ec6a:	461c      	mov	r4, r3
 801ec6c:	4615      	mov	r5, r2
 801ec6e:	f114 3aff 	adds.w	sl, r4, #4294967295
 801ec72:	f145 3bff 	adc.w	fp, r5, #4294967295
 801ec76:	f04f 0200 	mov.w	r2, #0
 801ec7a:	f04f 0300 	mov.w	r3, #0
 801ec7e:	465a      	mov	r2, fp
 801ec80:	2300      	movs	r3, #0
 801ec82:	4613      	mov	r3, r2
}
 801ec84:	4618      	mov	r0, r3
 801ec86:	372c      	adds	r7, #44	@ 0x2c
 801ec88:	46bd      	mov	sp, r7
 801ec8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ec90 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 801ec90:	b580      	push	{r7, lr}
 801ec92:	b088      	sub	sp, #32
 801ec94:	af00      	add	r7, sp, #0
 801ec96:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801ec98:	687b      	ldr	r3, [r7, #4]
 801ec9a:	61fb      	str	r3, [r7, #28]
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	3320      	adds	r3, #32
 801eca0:	61bb      	str	r3, [r7, #24]
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	3340      	adds	r3, #64	@ 0x40
 801eca6:	617b      	str	r3, [r7, #20]
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	3360      	adds	r3, #96	@ 0x60
 801ecac:	613b      	str	r3, [r7, #16]
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	3380      	adds	r3, #128	@ 0x80
 801ecb2:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 801ecb4:	69ba      	ldr	r2, [r7, #24]
 801ecb6:	69f9      	ldr	r1, [r7, #28]
 801ecb8:	68f8      	ldr	r0, [r7, #12]
 801ecba:	f7ff fe12 	bl	801e8e2 <add>
  sub(z2, x2, z2);                                 // z2 = B
 801ecbe:	69ba      	ldr	r2, [r7, #24]
 801ecc0:	69f9      	ldr	r1, [r7, #28]
 801ecc2:	69b8      	ldr	r0, [r7, #24]
 801ecc4:	f7ff fe3d 	bl	801e942 <sub>
  add(x2, x3, z3);                                 // x2 = C
 801ecc8:	693a      	ldr	r2, [r7, #16]
 801ecca:	6979      	ldr	r1, [r7, #20]
 801eccc:	69f8      	ldr	r0, [r7, #28]
 801ecce:	f7ff fe08 	bl	801e8e2 <add>
  sub(z3, x3, z3);                                 // z3 = D
 801ecd2:	693a      	ldr	r2, [r7, #16]
 801ecd4:	6979      	ldr	r1, [r7, #20]
 801ecd6:	6938      	ldr	r0, [r7, #16]
 801ecd8:	f7ff fe33 	bl	801e942 <sub>
  mul1(z3, t1);                                    // z3 = DA
 801ecdc:	68f9      	ldr	r1, [r7, #12]
 801ecde:	6938      	ldr	r0, [r7, #16]
 801ece0:	f7ff ff0c 	bl	801eafc <mul1>
  mul1(x2, z2);                                    // x3 = BC
 801ece4:	69b9      	ldr	r1, [r7, #24]
 801ece6:	69f8      	ldr	r0, [r7, #28]
 801ece8:	f7ff ff08 	bl	801eafc <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 801ecec:	69fa      	ldr	r2, [r7, #28]
 801ecee:	6939      	ldr	r1, [r7, #16]
 801ecf0:	6978      	ldr	r0, [r7, #20]
 801ecf2:	f7ff fdf6 	bl	801e8e2 <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 801ecf6:	69fa      	ldr	r2, [r7, #28]
 801ecf8:	6939      	ldr	r1, [r7, #16]
 801ecfa:	6938      	ldr	r0, [r7, #16]
 801ecfc:	f7ff fe21 	bl	801e942 <sub>
  sqr1(t1);                                        // t1 = AA
 801ed00:	68f8      	ldr	r0, [r7, #12]
 801ed02:	f7ff ff0a 	bl	801eb1a <sqr1>
  sqr1(z2);                                        // z2 = BB
 801ed06:	69b8      	ldr	r0, [r7, #24]
 801ed08:	f7ff ff07 	bl	801eb1a <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 801ed0c:	69ba      	ldr	r2, [r7, #24]
 801ed0e:	68f9      	ldr	r1, [r7, #12]
 801ed10:	69f8      	ldr	r0, [r7, #28]
 801ed12:	f7ff fe16 	bl	801e942 <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 801ed16:	2301      	movs	r3, #1
 801ed18:	4a06      	ldr	r2, [pc, #24]	@ (801ed34 <ladder_part1+0xa4>)
 801ed1a:	69f9      	ldr	r1, [r7, #28]
 801ed1c:	69b8      	ldr	r0, [r7, #24]
 801ed1e:	f7ff fe61 	bl	801e9e4 <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 801ed22:	68fa      	ldr	r2, [r7, #12]
 801ed24:	69b9      	ldr	r1, [r7, #24]
 801ed26:	69b8      	ldr	r0, [r7, #24]
 801ed28:	f7ff fddb 	bl	801e8e2 <add>
}
 801ed2c:	bf00      	nop
 801ed2e:	3720      	adds	r7, #32
 801ed30:	46bd      	mov	sp, r7
 801ed32:	bd80      	pop	{r7, pc}
 801ed34:	08027d3c 	.word	0x08027d3c

0801ed38 <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 801ed38:	b580      	push	{r7, lr}
 801ed3a:	b088      	sub	sp, #32
 801ed3c:	af00      	add	r7, sp, #0
 801ed3e:	6078      	str	r0, [r7, #4]
 801ed40:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	61fb      	str	r3, [r7, #28]
 801ed46:	687b      	ldr	r3, [r7, #4]
 801ed48:	3320      	adds	r3, #32
 801ed4a:	61bb      	str	r3, [r7, #24]
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	3340      	adds	r3, #64	@ 0x40
 801ed50:	617b      	str	r3, [r7, #20]
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	3360      	adds	r3, #96	@ 0x60
 801ed56:	613b      	str	r3, [r7, #16]
 801ed58:	687b      	ldr	r3, [r7, #4]
 801ed5a:	3380      	adds	r3, #128	@ 0x80
 801ed5c:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 801ed5e:	6938      	ldr	r0, [r7, #16]
 801ed60:	f7ff fedb 	bl	801eb1a <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 801ed64:	6839      	ldr	r1, [r7, #0]
 801ed66:	6938      	ldr	r0, [r7, #16]
 801ed68:	f7ff fec8 	bl	801eafc <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 801ed6c:	6978      	ldr	r0, [r7, #20]
 801ed6e:	f7ff fed4 	bl	801eb1a <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 801ed72:	69f9      	ldr	r1, [r7, #28]
 801ed74:	69b8      	ldr	r0, [r7, #24]
 801ed76:	f7ff fec1 	bl	801eafc <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 801ed7a:	69fa      	ldr	r2, [r7, #28]
 801ed7c:	68f9      	ldr	r1, [r7, #12]
 801ed7e:	69f8      	ldr	r0, [r7, #28]
 801ed80:	f7ff fddf 	bl	801e942 <sub>
  mul1(x2, t1);     // x2 = AA*BB
 801ed84:	68f9      	ldr	r1, [r7, #12]
 801ed86:	69f8      	ldr	r0, [r7, #28]
 801ed88:	f7ff feb8 	bl	801eafc <mul1>
}
 801ed8c:	bf00      	nop
 801ed8e:	3720      	adds	r7, #32
 801ed90:	46bd      	mov	sp, r7
 801ed92:	bd80      	pop	{r7, pc}

0801ed94 <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 801ed94:	b580      	push	{r7, lr}
 801ed96:	b094      	sub	sp, #80	@ 0x50
 801ed98:	af00      	add	r7, sp, #0
 801ed9a:	60f8      	str	r0, [r7, #12]
 801ed9c:	60b9      	str	r1, [r7, #8]
 801ed9e:	607a      	str	r2, [r7, #4]
 801eda0:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 801eda2:	2300      	movs	r3, #0
 801eda4:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 801eda6:	68fb      	ldr	r3, [r7, #12]
 801eda8:	643b      	str	r3, [r7, #64]	@ 0x40
 801edaa:	68fb      	ldr	r3, [r7, #12]
 801edac:	3340      	adds	r3, #64	@ 0x40
 801edae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801edb0:	68fb      	ldr	r3, [r7, #12]
 801edb2:	3360      	adds	r3, #96	@ 0x60
 801edb4:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 801edb6:	2280      	movs	r2, #128	@ 0x80
 801edb8:	2100      	movs	r1, #0
 801edba:	68f8      	ldr	r0, [r7, #12]
 801edbc:	f004 fbab 	bl	8023516 <memset>
  x2[0] = z3[0] = 1;
 801edc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801edc2:	2201      	movs	r2, #1
 801edc4:	601a      	str	r2, [r3, #0]
 801edc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801edc8:	681a      	ldr	r2, [r3, #0]
 801edca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801edcc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 801edce:	2300      	movs	r3, #0
 801edd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801edd2:	e031      	b.n	801ee38 <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 801edd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edd6:	009b      	lsls	r3, r3, #2
 801edd8:	3303      	adds	r3, #3
 801edda:	687a      	ldr	r2, [r7, #4]
 801eddc:	4413      	add	r3, r2
 801edde:	781b      	ldrb	r3, [r3, #0]
 801ede0:	061a      	lsls	r2, r3, #24
 801ede2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ede4:	009b      	lsls	r3, r3, #2
 801ede6:	3302      	adds	r3, #2
 801ede8:	6879      	ldr	r1, [r7, #4]
 801edea:	440b      	add	r3, r1
 801edec:	781b      	ldrb	r3, [r3, #0]
 801edee:	041b      	lsls	r3, r3, #16
 801edf0:	431a      	orrs	r2, r3
 801edf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801edf4:	009b      	lsls	r3, r3, #2
 801edf6:	3301      	adds	r3, #1
 801edf8:	6879      	ldr	r1, [r7, #4]
 801edfa:	440b      	add	r3, r1
 801edfc:	781b      	ldrb	r3, [r3, #0]
 801edfe:	021b      	lsls	r3, r3, #8
 801ee00:	4313      	orrs	r3, r2
 801ee02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ee04:	0092      	lsls	r2, r2, #2
 801ee06:	4611      	mov	r1, r2
 801ee08:	687a      	ldr	r2, [r7, #4]
 801ee0a:	440a      	add	r2, r1
 801ee0c:	7812      	ldrb	r2, [r2, #0]
 801ee0e:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 801ee10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee12:	009b      	lsls	r3, r3, #2
 801ee14:	3350      	adds	r3, #80	@ 0x50
 801ee16:	443b      	add	r3, r7
 801ee18:	f843 2c3c 	str.w	r2, [r3, #-60]
 801ee1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee1e:	009b      	lsls	r3, r3, #2
 801ee20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ee22:	441a      	add	r2, r3
 801ee24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee26:	009b      	lsls	r3, r3, #2
 801ee28:	3350      	adds	r3, #80	@ 0x50
 801ee2a:	443b      	add	r3, r7
 801ee2c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801ee30:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 801ee32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee34:	3301      	adds	r3, #1
 801ee36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ee38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee3a:	2b07      	cmp	r3, #7
 801ee3c:	ddca      	ble.n	801edd4 <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 801ee3e:	23ff      	movs	r3, #255	@ 0xff
 801ee40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ee42:	e049      	b.n	801eed8 <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 801ee44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	da00      	bge.n	801ee4c <x25519_core+0xb8>
 801ee4a:	3307      	adds	r3, #7
 801ee4c:	10db      	asrs	r3, r3, #3
 801ee4e:	461a      	mov	r2, r3
 801ee50:	68bb      	ldr	r3, [r7, #8]
 801ee52:	4413      	add	r3, r2
 801ee54:	781b      	ldrb	r3, [r3, #0]
 801ee56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 801ee5a:	683b      	ldr	r3, [r7, #0]
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	d01a      	beq.n	801ee96 <x25519_core+0x102>
      if (i / 8 == 0) {
 801ee60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee62:	3307      	adds	r3, #7
 801ee64:	2b0e      	cmp	r3, #14
 801ee66:	d806      	bhi.n	801ee76 <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 801ee68:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ee6c:	f023 0307 	bic.w	r3, r3, #7
 801ee70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801ee74:	e00f      	b.n	801ee96 <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 801ee76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee78:	3bf8      	subs	r3, #248	@ 0xf8
 801ee7a:	2b07      	cmp	r3, #7
 801ee7c:	d80b      	bhi.n	801ee96 <x25519_core+0x102>
        bytei &= 0x7F;
 801ee7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ee82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ee86:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 801ee8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ee8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ee92:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 801ee96:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801ee9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ee9c:	f003 0307 	and.w	r3, r3, #7
 801eea0:	fa42 f303 	asr.w	r3, r2, r3
 801eea4:	f003 0301 	and.w	r3, r3, #1
 801eea8:	425b      	negs	r3, r3
 801eeaa:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 801eeac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801eeae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eeb0:	4053      	eors	r3, r2
 801eeb2:	461a      	mov	r2, r3
 801eeb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801eeb6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801eeb8:	f7ff fe3b 	bl	801eb32 <condswap>
    swap = doswap;
 801eebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801eebe:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 801eec0:	68f8      	ldr	r0, [r7, #12]
 801eec2:	f7ff fee5 	bl	801ec90 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 801eec6:	f107 0314 	add.w	r3, r7, #20
 801eeca:	4619      	mov	r1, r3
 801eecc:	68f8      	ldr	r0, [r7, #12]
 801eece:	f7ff ff33 	bl	801ed38 <ladder_part2>
  for (i = 255; i >= 0; i--) {
 801eed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eed4:	3b01      	subs	r3, #1
 801eed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801eed8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	dab2      	bge.n	801ee44 <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 801eede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801eee0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801eee2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801eee4:	f7ff fe25 	bl	801eb32 <condswap>
}
 801eee8:	bf00      	nop
 801eeea:	3750      	adds	r7, #80	@ 0x50
 801eeec:	46bd      	mov	sp, r7
 801eeee:	bd80      	pop	{r7, pc}

0801eef0 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 801eef0:	b580      	push	{r7, lr}
 801eef2:	b0be      	sub	sp, #248	@ 0xf8
 801eef4:	af00      	add	r7, sp, #0
 801eef6:	60f8      	str	r0, [r7, #12]
 801eef8:	60b9      	str	r1, [r7, #8]
 801eefa:	607a      	str	r2, [r7, #4]
 801eefc:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 801eefe:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801ef02:	683b      	ldr	r3, [r7, #0]
 801ef04:	687a      	ldr	r2, [r7, #4]
 801ef06:	68b9      	ldr	r1, [r7, #8]
 801ef08:	f7ff ff44 	bl	801ed94 <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 801ef0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801ef10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 801ef14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801ef18:	3320      	adds	r3, #32
 801ef1a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 801ef1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801ef22:	3360      	adds	r3, #96	@ 0x60
 801ef24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 801ef28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ef2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 801ef30:	2300      	movs	r3, #0
 801ef32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801ef36:	e043      	b.n	801efc0 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 801ef38:	4952      	ldr	r1, [pc, #328]	@ (801f084 <mg_tls_x25519+0x194>)
 801ef3a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801ef3e:	4613      	mov	r3, r2
 801ef40:	005b      	lsls	r3, r3, #1
 801ef42:	4413      	add	r3, r2
 801ef44:	440b      	add	r3, r1
 801ef46:	781b      	ldrb	r3, [r3, #0]
 801ef48:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801ef4c:	015b      	lsls	r3, r3, #5
 801ef4e:	4413      	add	r3, r2
 801ef50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 801ef54:	494b      	ldr	r1, [pc, #300]	@ (801f084 <mg_tls_x25519+0x194>)
 801ef56:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801ef5a:	4613      	mov	r3, r2
 801ef5c:	005b      	lsls	r3, r3, #1
 801ef5e:	4413      	add	r3, r2
 801ef60:	440b      	add	r3, r1
 801ef62:	3302      	adds	r3, #2
 801ef64:	781b      	ldrb	r3, [r3, #0]
 801ef66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801ef6a:	e00e      	b.n	801ef8a <mg_tls_x25519+0x9a>
      sqr(a, prev);
 801ef6c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 801ef70:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 801ef74:	f7ff fdb3 	bl	801eade <sqr>
      prev = a;
 801ef78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801ef7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 801ef80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ef84:	3b01      	subs	r3, #1
 801ef86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801ef8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	dcec      	bgt.n	801ef6c <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 801ef92:	493c      	ldr	r1, [pc, #240]	@ (801f084 <mg_tls_x25519+0x194>)
 801ef94:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801ef98:	4613      	mov	r3, r2
 801ef9a:	005b      	lsls	r3, r3, #1
 801ef9c:	4413      	add	r3, r2
 801ef9e:	440b      	add	r3, r1
 801efa0:	3301      	adds	r3, #1
 801efa2:	781b      	ldrb	r3, [r3, #0]
 801efa4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801efa8:	015b      	lsls	r3, r3, #5
 801efaa:	4413      	add	r3, r2
 801efac:	4619      	mov	r1, r3
 801efae:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 801efb2:	f7ff fda3 	bl	801eafc <mul1>
  for (i = 0; i < 13; i++) {
 801efb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801efba:	3301      	adds	r3, #1
 801efbc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801efc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801efc4:	2b0c      	cmp	r3, #12
 801efc6:	ddb7      	ble.n	801ef38 <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 801efc8:	f107 0014 	add.w	r0, r7, #20
 801efcc:	2308      	movs	r3, #8
 801efce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801efd2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 801efd6:	f7ff fd05 	bl	801e9e4 <mul>
  ret = (int) canon(out_limbs);
 801efda:	f107 0314 	add.w	r3, r7, #20
 801efde:	4618      	mov	r0, r3
 801efe0:	f7ff fde3 	bl	801ebaa <canon>
 801efe4:	4603      	mov	r3, r0
 801efe6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 801efea:	683b      	ldr	r3, [r7, #0]
 801efec:	2b00      	cmp	r3, #0
 801efee:	d102      	bne.n	801eff6 <mg_tls_x25519+0x106>
 801eff0:	2300      	movs	r3, #0
 801eff2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 801eff6:	2300      	movs	r3, #0
 801eff8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801effc:	e038      	b.n	801f070 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 801effe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f002:	009b      	lsls	r3, r3, #2
 801f004:	33f8      	adds	r3, #248	@ 0xf8
 801f006:	443b      	add	r3, r7
 801f008:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 801f00c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 801f010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f014:	009b      	lsls	r3, r3, #2
 801f016:	461a      	mov	r2, r3
 801f018:	68fb      	ldr	r3, [r7, #12]
 801f01a:	4413      	add	r3, r2
 801f01c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801f020:	b2d2      	uxtb	r2, r2
 801f022:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 801f024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801f028:	0a19      	lsrs	r1, r3, #8
 801f02a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f02e:	009b      	lsls	r3, r3, #2
 801f030:	3301      	adds	r3, #1
 801f032:	68fa      	ldr	r2, [r7, #12]
 801f034:	4413      	add	r3, r2
 801f036:	b2ca      	uxtb	r2, r1
 801f038:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 801f03a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801f03e:	0c19      	lsrs	r1, r3, #16
 801f040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f044:	009b      	lsls	r3, r3, #2
 801f046:	3302      	adds	r3, #2
 801f048:	68fa      	ldr	r2, [r7, #12]
 801f04a:	4413      	add	r3, r2
 801f04c:	b2ca      	uxtb	r2, r1
 801f04e:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 801f050:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801f054:	0e19      	lsrs	r1, r3, #24
 801f056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f05a:	009b      	lsls	r3, r3, #2
 801f05c:	3303      	adds	r3, #3
 801f05e:	68fa      	ldr	r2, [r7, #12]
 801f060:	4413      	add	r3, r2
 801f062:	b2ca      	uxtb	r2, r1
 801f064:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 801f066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f06a:	3301      	adds	r3, #1
 801f06c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801f070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f074:	2b07      	cmp	r3, #7
 801f076:	ddc2      	ble.n	801effe <mg_tls_x25519+0x10e>
  }
  return ret;
 801f078:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 801f07c:	4618      	mov	r0, r3
 801f07e:	37f8      	adds	r7, #248	@ 0xf8
 801f080:	46bd      	mov	sp, r7
 801f082:	bd80      	pop	{r7, pc}
 801f084:	08028068 	.word	0x08028068

0801f088 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 801f088:	b580      	push	{r7, lr}
 801f08a:	b082      	sub	sp, #8
 801f08c:	af00      	add	r7, sp, #0
 801f08e:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801f090:	2204      	movs	r2, #4
 801f092:	491b      	ldr	r1, [pc, #108]	@ (801f100 <mg_url_is_ssl+0x78>)
 801f094:	6878      	ldr	r0, [r7, #4]
 801f096:	f004 fa53 	bl	8023540 <strncmp>
 801f09a:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801f09c:	2b00      	cmp	r3, #0
 801f09e:	d027      	beq.n	801f0f0 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801f0a0:	2206      	movs	r2, #6
 801f0a2:	4918      	ldr	r1, [pc, #96]	@ (801f104 <mg_url_is_ssl+0x7c>)
 801f0a4:	6878      	ldr	r0, [r7, #4]
 801f0a6:	f004 fa4b 	bl	8023540 <strncmp>
 801f0aa:	4603      	mov	r3, r0
 801f0ac:	2b00      	cmp	r3, #0
 801f0ae:	d01f      	beq.n	801f0f0 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801f0b0:	2206      	movs	r2, #6
 801f0b2:	4915      	ldr	r1, [pc, #84]	@ (801f108 <mg_url_is_ssl+0x80>)
 801f0b4:	6878      	ldr	r0, [r7, #4]
 801f0b6:	f004 fa43 	bl	8023540 <strncmp>
 801f0ba:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801f0bc:	2b00      	cmp	r3, #0
 801f0be:	d017      	beq.n	801f0f0 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801f0c0:	2204      	movs	r2, #4
 801f0c2:	4912      	ldr	r1, [pc, #72]	@ (801f10c <mg_url_is_ssl+0x84>)
 801f0c4:	6878      	ldr	r0, [r7, #4]
 801f0c6:	f004 fa3b 	bl	8023540 <strncmp>
 801f0ca:	4603      	mov	r3, r0
 801f0cc:	2b00      	cmp	r3, #0
 801f0ce:	d00f      	beq.n	801f0f0 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801f0d0:	2204      	movs	r2, #4
 801f0d2:	490f      	ldr	r1, [pc, #60]	@ (801f110 <mg_url_is_ssl+0x88>)
 801f0d4:	6878      	ldr	r0, [r7, #4]
 801f0d6:	f004 fa33 	bl	8023540 <strncmp>
 801f0da:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801f0dc:	2b00      	cmp	r3, #0
 801f0de:	d007      	beq.n	801f0f0 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801f0e0:	2205      	movs	r2, #5
 801f0e2:	490c      	ldr	r1, [pc, #48]	@ (801f114 <mg_url_is_ssl+0x8c>)
 801f0e4:	6878      	ldr	r0, [r7, #4]
 801f0e6:	f004 fa2b 	bl	8023540 <strncmp>
 801f0ea:	4603      	mov	r3, r0
 801f0ec:	2b00      	cmp	r3, #0
 801f0ee:	d101      	bne.n	801f0f4 <mg_url_is_ssl+0x6c>
 801f0f0:	2301      	movs	r3, #1
 801f0f2:	e000      	b.n	801f0f6 <mg_url_is_ssl+0x6e>
 801f0f4:	2300      	movs	r3, #0
}
 801f0f6:	4618      	mov	r0, r3
 801f0f8:	3708      	adds	r7, #8
 801f0fa:	46bd      	mov	sp, r7
 801f0fc:	bd80      	pop	{r7, pc}
 801f0fe:	bf00      	nop
 801f100:	08026950 	.word	0x08026950
 801f104:	08026958 	.word	0x08026958
 801f108:	08026960 	.word	0x08026960
 801f10c:	08026968 	.word	0x08026968
 801f110:	08026970 	.word	0x08026970
 801f114:	08026978 	.word	0x08026978

0801f118 <urlparse>:

static struct url urlparse(const char *url) {
 801f118:	b5b0      	push	{r4, r5, r7, lr}
 801f11a:	b08a      	sub	sp, #40	@ 0x28
 801f11c:	af00      	add	r7, sp, #0
 801f11e:	6078      	str	r0, [r7, #4]
 801f120:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 801f122:	f107 0308 	add.w	r3, r7, #8
 801f126:	221c      	movs	r2, #28
 801f128:	2100      	movs	r1, #0
 801f12a:	4618      	mov	r0, r3
 801f12c:	f004 f9f3 	bl	8023516 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 801f130:	2300      	movs	r3, #0
 801f132:	627b      	str	r3, [r7, #36]	@ 0x24
 801f134:	e05b      	b.n	801f1ee <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 801f136:	683a      	ldr	r2, [r7, #0]
 801f138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f13a:	4413      	add	r3, r2
 801f13c:	781b      	ldrb	r3, [r3, #0]
 801f13e:	2b2f      	cmp	r3, #47	@ 0x2f
 801f140:	d112      	bne.n	801f168 <urlparse+0x50>
 801f142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f144:	2b00      	cmp	r3, #0
 801f146:	d00f      	beq.n	801f168 <urlparse+0x50>
 801f148:	697b      	ldr	r3, [r7, #20]
 801f14a:	2b00      	cmp	r3, #0
 801f14c:	d10c      	bne.n	801f168 <urlparse+0x50>
 801f14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f150:	3b01      	subs	r3, #1
 801f152:	683a      	ldr	r2, [r7, #0]
 801f154:	4413      	add	r3, r2
 801f156:	781b      	ldrb	r3, [r3, #0]
 801f158:	2b2f      	cmp	r3, #47	@ 0x2f
 801f15a:	d105      	bne.n	801f168 <urlparse+0x50>
      u.host = i + 1;
 801f15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f15e:	3301      	adds	r3, #1
 801f160:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801f162:	2300      	movs	r3, #0
 801f164:	61bb      	str	r3, [r7, #24]
 801f166:	e03f      	b.n	801f1e8 <urlparse+0xd0>
    } else if (url[i] == ']') {
 801f168:	683a      	ldr	r2, [r7, #0]
 801f16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f16c:	4413      	add	r3, r2
 801f16e:	781b      	ldrb	r3, [r3, #0]
 801f170:	2b5d      	cmp	r3, #93	@ 0x5d
 801f172:	d102      	bne.n	801f17a <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 801f174:	2300      	movs	r3, #0
 801f176:	61bb      	str	r3, [r7, #24]
 801f178:	e036      	b.n	801f1e8 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 801f17a:	683a      	ldr	r2, [r7, #0]
 801f17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f17e:	4413      	add	r3, r2
 801f180:	781b      	ldrb	r3, [r3, #0]
 801f182:	2b3a      	cmp	r3, #58	@ 0x3a
 801f184:	d109      	bne.n	801f19a <urlparse+0x82>
 801f186:	69bb      	ldr	r3, [r7, #24]
 801f188:	2b00      	cmp	r3, #0
 801f18a:	d106      	bne.n	801f19a <urlparse+0x82>
 801f18c:	69fb      	ldr	r3, [r7, #28]
 801f18e:	2b00      	cmp	r3, #0
 801f190:	d103      	bne.n	801f19a <urlparse+0x82>
      u.port = i + 1;
 801f192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f194:	3301      	adds	r3, #1
 801f196:	61bb      	str	r3, [r7, #24]
 801f198:	e026      	b.n	801f1e8 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 801f19a:	683a      	ldr	r2, [r7, #0]
 801f19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f19e:	4413      	add	r3, r2
 801f1a0:	781b      	ldrb	r3, [r3, #0]
 801f1a2:	2b40      	cmp	r3, #64	@ 0x40
 801f1a4:	d112      	bne.n	801f1cc <urlparse+0xb4>
 801f1a6:	68fb      	ldr	r3, [r7, #12]
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	d10f      	bne.n	801f1cc <urlparse+0xb4>
 801f1ac:	693b      	ldr	r3, [r7, #16]
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d10c      	bne.n	801f1cc <urlparse+0xb4>
 801f1b2:	69fb      	ldr	r3, [r7, #28]
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	d109      	bne.n	801f1cc <urlparse+0xb4>
      u.user = u.host;
 801f1b8:	697b      	ldr	r3, [r7, #20]
 801f1ba:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 801f1bc:	69bb      	ldr	r3, [r7, #24]
 801f1be:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 801f1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1c2:	3301      	adds	r3, #1
 801f1c4:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801f1c6:	2300      	movs	r3, #0
 801f1c8:	61bb      	str	r3, [r7, #24]
 801f1ca:	e00d      	b.n	801f1e8 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 801f1cc:	683a      	ldr	r2, [r7, #0]
 801f1ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1d0:	4413      	add	r3, r2
 801f1d2:	781b      	ldrb	r3, [r3, #0]
 801f1d4:	2b2f      	cmp	r3, #47	@ 0x2f
 801f1d6:	d107      	bne.n	801f1e8 <urlparse+0xd0>
 801f1d8:	697b      	ldr	r3, [r7, #20]
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	d004      	beq.n	801f1e8 <urlparse+0xd0>
 801f1de:	69fb      	ldr	r3, [r7, #28]
 801f1e0:	2b00      	cmp	r3, #0
 801f1e2:	d101      	bne.n	801f1e8 <urlparse+0xd0>
      u.uri = i;
 801f1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1e6:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 801f1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1ea:	3301      	adds	r3, #1
 801f1ec:	627b      	str	r3, [r7, #36]	@ 0x24
 801f1ee:	683a      	ldr	r2, [r7, #0]
 801f1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1f2:	4413      	add	r3, r2
 801f1f4:	781b      	ldrb	r3, [r3, #0]
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	d19d      	bne.n	801f136 <urlparse+0x1e>
    }
  }
  u.end = i;
 801f1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f1fc:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	461d      	mov	r5, r3
 801f202:	f107 0408 	add.w	r4, r7, #8
 801f206:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f208:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801f20a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801f20e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801f212:	6878      	ldr	r0, [r7, #4]
 801f214:	3728      	adds	r7, #40	@ 0x28
 801f216:	46bd      	mov	sp, r7
 801f218:	bdb0      	pop	{r4, r5, r7, pc}

0801f21a <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 801f21a:	b580      	push	{r7, lr}
 801f21c:	b08c      	sub	sp, #48	@ 0x30
 801f21e:	af00      	add	r7, sp, #0
 801f220:	6078      	str	r0, [r7, #4]
 801f222:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 801f224:	f107 0310 	add.w	r3, r7, #16
 801f228:	6839      	ldr	r1, [r7, #0]
 801f22a:	4618      	mov	r0, r3
 801f22c:	f7ff ff74 	bl	801f118 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 801f230:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 801f232:	2b00      	cmp	r3, #0
 801f234:	d004      	beq.n	801f240 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 801f236:	6a3a      	ldr	r2, [r7, #32]
 801f238:	69fb      	ldr	r3, [r7, #28]
 801f23a:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 801f23c:	3b01      	subs	r3, #1
 801f23e:	e009      	b.n	801f254 <mg_url_host+0x3a>
 801f240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 801f242:	2b00      	cmp	r3, #0
 801f244:	d003      	beq.n	801f24e <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 801f246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f248:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 801f24a:	1ad3      	subs	r3, r2, r3
 801f24c:	e002      	b.n	801f254 <mg_url_host+0x3a>
 801f24e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f250:	69fb      	ldr	r3, [r7, #28]
 801f252:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 801f254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 801f256:	69fb      	ldr	r3, [r7, #28]
 801f258:	683a      	ldr	r2, [r7, #0]
 801f25a:	18d1      	adds	r1, r2, r3
 801f25c:	f107 0308 	add.w	r3, r7, #8
 801f260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f262:	4618      	mov	r0, r3
 801f264:	f7f4 fed3 	bl	801400e <mg_str_n>
  return s;
 801f268:	687b      	ldr	r3, [r7, #4]
 801f26a:	461a      	mov	r2, r3
 801f26c:	f107 0308 	add.w	r3, r7, #8
 801f270:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f274:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f278:	6878      	ldr	r0, [r7, #4]
 801f27a:	3730      	adds	r7, #48	@ 0x30
 801f27c:	46bd      	mov	sp, r7
 801f27e:	bd80      	pop	{r7, pc}

0801f280 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 801f280:	b580      	push	{r7, lr}
 801f282:	b08a      	sub	sp, #40	@ 0x28
 801f284:	af00      	add	r7, sp, #0
 801f286:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 801f288:	f107 0308 	add.w	r3, r7, #8
 801f28c:	6879      	ldr	r1, [r7, #4]
 801f28e:	4618      	mov	r0, r3
 801f290:	f7ff ff42 	bl	801f118 <urlparse>
  unsigned short port = 0;
 801f294:	2300      	movs	r3, #0
 801f296:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 801f298:	2205      	movs	r2, #5
 801f29a:	4925      	ldr	r1, [pc, #148]	@ (801f330 <mg_url_port+0xb0>)
 801f29c:	6878      	ldr	r0, [r7, #4]
 801f29e:	f004 f94f 	bl	8023540 <strncmp>
 801f2a2:	4603      	mov	r3, r0
 801f2a4:	2b00      	cmp	r3, #0
 801f2a6:	d007      	beq.n	801f2b8 <mg_url_port+0x38>
 801f2a8:	2203      	movs	r2, #3
 801f2aa:	4922      	ldr	r1, [pc, #136]	@ (801f334 <mg_url_port+0xb4>)
 801f2ac:	6878      	ldr	r0, [r7, #4]
 801f2ae:	f004 f947 	bl	8023540 <strncmp>
 801f2b2:	4603      	mov	r3, r0
 801f2b4:	2b00      	cmp	r3, #0
 801f2b6:	d101      	bne.n	801f2bc <mg_url_port+0x3c>
 801f2b8:	2350      	movs	r3, #80	@ 0x50
 801f2ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 801f2bc:	2204      	movs	r2, #4
 801f2be:	491e      	ldr	r1, [pc, #120]	@ (801f338 <mg_url_port+0xb8>)
 801f2c0:	6878      	ldr	r0, [r7, #4]
 801f2c2:	f004 f93d 	bl	8023540 <strncmp>
 801f2c6:	4603      	mov	r3, r0
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d007      	beq.n	801f2dc <mg_url_port+0x5c>
 801f2cc:	2206      	movs	r2, #6
 801f2ce:	491b      	ldr	r1, [pc, #108]	@ (801f33c <mg_url_port+0xbc>)
 801f2d0:	6878      	ldr	r0, [r7, #4]
 801f2d2:	f004 f935 	bl	8023540 <strncmp>
 801f2d6:	4603      	mov	r3, r0
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d102      	bne.n	801f2e2 <mg_url_port+0x62>
    port = 443;
 801f2dc:	f240 13bb 	movw	r3, #443	@ 0x1bb
 801f2e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 801f2e2:	2205      	movs	r2, #5
 801f2e4:	4916      	ldr	r1, [pc, #88]	@ (801f340 <mg_url_port+0xc0>)
 801f2e6:	6878      	ldr	r0, [r7, #4]
 801f2e8:	f004 f92a 	bl	8023540 <strncmp>
 801f2ec:	4603      	mov	r3, r0
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d102      	bne.n	801f2f8 <mg_url_port+0x78>
 801f2f2:	f240 735b 	movw	r3, #1883	@ 0x75b
 801f2f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 801f2f8:	2206      	movs	r2, #6
 801f2fa:	4912      	ldr	r1, [pc, #72]	@ (801f344 <mg_url_port+0xc4>)
 801f2fc:	6878      	ldr	r0, [r7, #4]
 801f2fe:	f004 f91f 	bl	8023540 <strncmp>
 801f302:	4603      	mov	r3, r0
 801f304:	2b00      	cmp	r3, #0
 801f306:	d102      	bne.n	801f30e <mg_url_port+0x8e>
 801f308:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 801f30c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 801f30e:	69bb      	ldr	r3, [r7, #24]
 801f310:	2b00      	cmp	r3, #0
 801f312:	d007      	beq.n	801f324 <mg_url_port+0xa4>
 801f314:	69bb      	ldr	r3, [r7, #24]
 801f316:	687a      	ldr	r2, [r7, #4]
 801f318:	4413      	add	r3, r2
 801f31a:	4618      	mov	r0, r3
 801f31c:	f003 fe22 	bl	8022f64 <atoi>
 801f320:	4603      	mov	r3, r0
 801f322:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 801f324:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 801f326:	4618      	mov	r0, r3
 801f328:	3728      	adds	r7, #40	@ 0x28
 801f32a:	46bd      	mov	sp, r7
 801f32c:	bd80      	pop	{r7, pc}
 801f32e:	bf00      	nop
 801f330:	08026980 	.word	0x08026980
 801f334:	08026988 	.word	0x08026988
 801f338:	08026950 	.word	0x08026950
 801f33c:	08026958 	.word	0x08026958
 801f340:	0802698c 	.word	0x0802698c
 801f344:	08026960 	.word	0x08026960

0801f348 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 801f348:	b480      	push	{r7}
 801f34a:	b083      	sub	sp, #12
 801f34c:	af00      	add	r7, sp, #0
 801f34e:	6078      	str	r0, [r7, #4]
 801f350:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 801f352:	687b      	ldr	r3, [r7, #4]
 801f354:	2b00      	cmp	r3, #0
 801f356:	d00a      	beq.n	801f36e <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 801f358:	e004      	b.n	801f364 <mg_bzero+0x1c>
 801f35a:	687b      	ldr	r3, [r7, #4]
 801f35c:	1c5a      	adds	r2, r3, #1
 801f35e:	607a      	str	r2, [r7, #4]
 801f360:	2200      	movs	r2, #0
 801f362:	701a      	strb	r2, [r3, #0]
 801f364:	683b      	ldr	r3, [r7, #0]
 801f366:	1e5a      	subs	r2, r3, #1
 801f368:	603a      	str	r2, [r7, #0]
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d1f5      	bne.n	801f35a <mg_bzero+0x12>
  }
}
 801f36e:	bf00      	nop
 801f370:	370c      	adds	r7, #12
 801f372:	46bd      	mov	sp, r7
 801f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f378:	4770      	bx	lr
	...

0801f37c <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 801f37c:	b580      	push	{r7, lr}
 801f37e:	b084      	sub	sp, #16
 801f380:	af00      	add	r7, sp, #0
 801f382:	6078      	str	r0, [r7, #4]
 801f384:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 801f386:	6839      	ldr	r1, [r7, #0]
 801f388:	6878      	ldr	r0, [r7, #4]
 801f38a:	f7e1 f9bf 	bl	800070c <mg_random>
  for (i = 0; i < len; i++) {
 801f38e:	2300      	movs	r3, #0
 801f390:	60fb      	str	r3, [r7, #12]
 801f392:	e02d      	b.n	801f3f0 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 801f394:	687a      	ldr	r2, [r7, #4]
 801f396:	68fb      	ldr	r3, [r7, #12]
 801f398:	4413      	add	r3, r2
 801f39a:	781a      	ldrb	r2, [r3, #0]
 801f39c:	0853      	lsrs	r3, r2, #1
 801f39e:	4919      	ldr	r1, [pc, #100]	@ (801f404 <mg_random_str+0x88>)
 801f3a0:	fba1 1303 	umull	r1, r3, r1, r3
 801f3a4:	0919      	lsrs	r1, r3, #4
 801f3a6:	460b      	mov	r3, r1
 801f3a8:	015b      	lsls	r3, r3, #5
 801f3aa:	1a5b      	subs	r3, r3, r1
 801f3ac:	005b      	lsls	r3, r3, #1
 801f3ae:	1ad3      	subs	r3, r2, r3
 801f3b0:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 801f3b2:	683b      	ldr	r3, [r7, #0]
 801f3b4:	3b01      	subs	r3, #1
 801f3b6:	68fa      	ldr	r2, [r7, #12]
 801f3b8:	429a      	cmp	r2, r3
 801f3ba:	d011      	beq.n	801f3e0 <mg_random_str+0x64>
 801f3bc:	7afb      	ldrb	r3, [r7, #11]
 801f3be:	2b19      	cmp	r3, #25
 801f3c0:	d803      	bhi.n	801f3ca <mg_random_str+0x4e>
 801f3c2:	7afb      	ldrb	r3, [r7, #11]
 801f3c4:	3361      	adds	r3, #97	@ 0x61
 801f3c6:	b2db      	uxtb	r3, r3
 801f3c8:	e00b      	b.n	801f3e2 <mg_random_str+0x66>
 801f3ca:	7afb      	ldrb	r3, [r7, #11]
 801f3cc:	2b33      	cmp	r3, #51	@ 0x33
 801f3ce:	d803      	bhi.n	801f3d8 <mg_random_str+0x5c>
 801f3d0:	7afb      	ldrb	r3, [r7, #11]
 801f3d2:	3327      	adds	r3, #39	@ 0x27
 801f3d4:	b2db      	uxtb	r3, r3
 801f3d6:	e004      	b.n	801f3e2 <mg_random_str+0x66>
 801f3d8:	7afb      	ldrb	r3, [r7, #11]
 801f3da:	3b04      	subs	r3, #4
 801f3dc:	b2db      	uxtb	r3, r3
 801f3de:	e000      	b.n	801f3e2 <mg_random_str+0x66>
 801f3e0:	2300      	movs	r3, #0
 801f3e2:	6879      	ldr	r1, [r7, #4]
 801f3e4:	68fa      	ldr	r2, [r7, #12]
 801f3e6:	440a      	add	r2, r1
 801f3e8:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 801f3ea:	68fb      	ldr	r3, [r7, #12]
 801f3ec:	3301      	adds	r3, #1
 801f3ee:	60fb      	str	r3, [r7, #12]
 801f3f0:	68fa      	ldr	r2, [r7, #12]
 801f3f2:	683b      	ldr	r3, [r7, #0]
 801f3f4:	429a      	cmp	r2, r3
 801f3f6:	d3cd      	bcc.n	801f394 <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 801f3f8:	687b      	ldr	r3, [r7, #4]
}
 801f3fa:	4618      	mov	r0, r3
 801f3fc:	3710      	adds	r7, #16
 801f3fe:	46bd      	mov	sp, r7
 801f400:	bd80      	pop	{r7, pc}
 801f402:	bf00      	nop
 801f404:	84210843 	.word	0x84210843

0801f408 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 801f408:	b480      	push	{r7}
 801f40a:	b087      	sub	sp, #28
 801f40c:	af00      	add	r7, sp, #0
 801f40e:	60f8      	str	r0, [r7, #12]
 801f410:	60b9      	str	r1, [r7, #8]
 801f412:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	43db      	mvns	r3, r3
 801f418:	60fb      	str	r3, [r7, #12]
  while (len--) {
 801f41a:	e01f      	b.n	801f45c <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 801f41c:	68bb      	ldr	r3, [r7, #8]
 801f41e:	1c5a      	adds	r2, r3, #1
 801f420:	60ba      	str	r2, [r7, #8]
 801f422:	781b      	ldrb	r3, [r3, #0]
 801f424:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 801f426:	7dfa      	ldrb	r2, [r7, #23]
 801f428:	68fb      	ldr	r3, [r7, #12]
 801f42a:	4053      	eors	r3, r2
 801f42c:	f003 030f 	and.w	r3, r3, #15
 801f430:	4a11      	ldr	r2, [pc, #68]	@ (801f478 <mg_crc32+0x70>)
 801f432:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	091b      	lsrs	r3, r3, #4
 801f43a:	4053      	eors	r3, r2
 801f43c:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 801f43e:	7dfb      	ldrb	r3, [r7, #23]
 801f440:	091b      	lsrs	r3, r3, #4
 801f442:	b2db      	uxtb	r3, r3
 801f444:	461a      	mov	r2, r3
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	4053      	eors	r3, r2
 801f44a:	f003 030f 	and.w	r3, r3, #15
 801f44e:	4a0a      	ldr	r2, [pc, #40]	@ (801f478 <mg_crc32+0x70>)
 801f450:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f454:	68fb      	ldr	r3, [r7, #12]
 801f456:	091b      	lsrs	r3, r3, #4
 801f458:	4053      	eors	r3, r2
 801f45a:	60fb      	str	r3, [r7, #12]
  while (len--) {
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	1e5a      	subs	r2, r3, #1
 801f460:	607a      	str	r2, [r7, #4]
 801f462:	2b00      	cmp	r3, #0
 801f464:	d1da      	bne.n	801f41c <mg_crc32+0x14>
  }
  return ~crc;
 801f466:	68fb      	ldr	r3, [r7, #12]
 801f468:	43db      	mvns	r3, r3
}
 801f46a:	4618      	mov	r0, r3
 801f46c:	371c      	adds	r7, #28
 801f46e:	46bd      	mov	sp, r7
 801f470:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f474:	4770      	bx	lr
 801f476:	bf00      	nop
 801f478:	08028090 	.word	0x08028090

0801f47c <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 801f47c:	b480      	push	{r7}
 801f47e:	b085      	sub	sp, #20
 801f480:	af00      	add	r7, sp, #0
 801f482:	463b      	mov	r3, r7
 801f484:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 801f488:	683b      	ldr	r3, [r7, #0]
 801f48a:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '~') return false;  // Starts with ~
 801f490:	683b      	ldr	r3, [r7, #0]
 801f492:	781b      	ldrb	r3, [r3, #0]
 801f494:	2b7e      	cmp	r3, #126	@ 0x7e
 801f496:	d101      	bne.n	801f49c <mg_path_is_sane+0x20>
 801f498:	2300      	movs	r3, #0
 801f49a:	e02f      	b.n	801f4fc <mg_path_is_sane+0x80>
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 801f49c:	683b      	ldr	r3, [r7, #0]
 801f49e:	781b      	ldrb	r3, [r3, #0]
 801f4a0:	2b2e      	cmp	r3, #46	@ 0x2e
 801f4a2:	d123      	bne.n	801f4ec <mg_path_is_sane+0x70>
 801f4a4:	683b      	ldr	r3, [r7, #0]
 801f4a6:	3301      	adds	r3, #1
 801f4a8:	781b      	ldrb	r3, [r3, #0]
 801f4aa:	2b2e      	cmp	r3, #46	@ 0x2e
 801f4ac:	d11e      	bne.n	801f4ec <mg_path_is_sane+0x70>
 801f4ae:	2300      	movs	r3, #0
 801f4b0:	e024      	b.n	801f4fc <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 801f4b2:	68fb      	ldr	r3, [r7, #12]
 801f4b4:	781b      	ldrb	r3, [r3, #0]
 801f4b6:	2b2f      	cmp	r3, #47	@ 0x2f
 801f4b8:	d003      	beq.n	801f4c2 <mg_path_is_sane+0x46>
 801f4ba:	68fb      	ldr	r3, [r7, #12]
 801f4bc:	781b      	ldrb	r3, [r3, #0]
 801f4be:	2b5c      	cmp	r3, #92	@ 0x5c
 801f4c0:	d10e      	bne.n	801f4e0 <mg_path_is_sane+0x64>
 801f4c2:	68bb      	ldr	r3, [r7, #8]
 801f4c4:	2b01      	cmp	r3, #1
 801f4c6:	d90b      	bls.n	801f4e0 <mg_path_is_sane+0x64>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 801f4c8:	68fb      	ldr	r3, [r7, #12]
 801f4ca:	3301      	adds	r3, #1
 801f4cc:	781b      	ldrb	r3, [r3, #0]
 801f4ce:	2b2e      	cmp	r3, #46	@ 0x2e
 801f4d0:	d106      	bne.n	801f4e0 <mg_path_is_sane+0x64>
 801f4d2:	68fb      	ldr	r3, [r7, #12]
 801f4d4:	3302      	adds	r3, #2
 801f4d6:	781b      	ldrb	r3, [r3, #0]
 801f4d8:	2b2e      	cmp	r3, #46	@ 0x2e
 801f4da:	d101      	bne.n	801f4e0 <mg_path_is_sane+0x64>
 801f4dc:	2300      	movs	r3, #0
 801f4de:	e00d      	b.n	801f4fc <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 801f4e0:	68fb      	ldr	r3, [r7, #12]
 801f4e2:	3301      	adds	r3, #1
 801f4e4:	60fb      	str	r3, [r7, #12]
 801f4e6:	68bb      	ldr	r3, [r7, #8]
 801f4e8:	3b01      	subs	r3, #1
 801f4ea:	60bb      	str	r3, [r7, #8]
 801f4ec:	68fb      	ldr	r3, [r7, #12]
 801f4ee:	781b      	ldrb	r3, [r3, #0]
 801f4f0:	2b00      	cmp	r3, #0
 801f4f2:	d002      	beq.n	801f4fa <mg_path_is_sane+0x7e>
 801f4f4:	68bb      	ldr	r3, [r7, #8]
 801f4f6:	2b00      	cmp	r3, #0
 801f4f8:	d1db      	bne.n	801f4b2 <mg_path_is_sane+0x36>
    }
  }
  return true;
 801f4fa:	2301      	movs	r3, #1
}
 801f4fc:	4618      	mov	r0, r3
 801f4fe:	3714      	adds	r7, #20
 801f500:	46bd      	mov	sp, r7
 801f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f506:	4770      	bx	lr

0801f508 <mg_ntohs>:
#endif
}
#endif

// network format equates big endian order
uint16_t mg_ntohs(uint16_t net) {
 801f508:	b480      	push	{r7}
 801f50a:	b083      	sub	sp, #12
 801f50c:	af00      	add	r7, sp, #0
 801f50e:	4603      	mov	r3, r0
 801f510:	80fb      	strh	r3, [r7, #6]
  return MG_LOAD_BE16(&net);
 801f512:	1dbb      	adds	r3, r7, #6
 801f514:	781b      	ldrb	r3, [r3, #0]
 801f516:	b21b      	sxth	r3, r3
 801f518:	021b      	lsls	r3, r3, #8
 801f51a:	b21a      	sxth	r2, r3
 801f51c:	1dbb      	adds	r3, r7, #6
 801f51e:	3301      	adds	r3, #1
 801f520:	781b      	ldrb	r3, [r3, #0]
 801f522:	b21b      	sxth	r3, r3
 801f524:	4313      	orrs	r3, r2
 801f526:	b21b      	sxth	r3, r3
 801f528:	b29b      	uxth	r3, r3
}
 801f52a:	4618      	mov	r0, r3
 801f52c:	370c      	adds	r7, #12
 801f52e:	46bd      	mov	sp, r7
 801f530:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f534:	4770      	bx	lr

0801f536 <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 801f536:	b480      	push	{r7}
 801f538:	b083      	sub	sp, #12
 801f53a:	af00      	add	r7, sp, #0
 801f53c:	6078      	str	r0, [r7, #4]
  return MG_LOAD_BE32(&net);
 801f53e:	1d3b      	adds	r3, r7, #4
 801f540:	781b      	ldrb	r3, [r3, #0]
 801f542:	061a      	lsls	r2, r3, #24
 801f544:	1d3b      	adds	r3, r7, #4
 801f546:	3301      	adds	r3, #1
 801f548:	781b      	ldrb	r3, [r3, #0]
 801f54a:	041b      	lsls	r3, r3, #16
 801f54c:	431a      	orrs	r2, r3
 801f54e:	1d3b      	adds	r3, r7, #4
 801f550:	3302      	adds	r3, #2
 801f552:	781b      	ldrb	r3, [r3, #0]
 801f554:	021b      	lsls	r3, r3, #8
 801f556:	431a      	orrs	r2, r3
 801f558:	1d3b      	adds	r3, r7, #4
 801f55a:	3303      	adds	r3, #3
 801f55c:	781b      	ldrb	r3, [r3, #0]
 801f55e:	4313      	orrs	r3, r2
}
 801f560:	4618      	mov	r0, r3
 801f562:	370c      	adds	r7, #12
 801f564:	46bd      	mov	sp, r7
 801f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f56a:	4770      	bx	lr

0801f56c <ws_handshake>:
  return len;
}

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 801f56c:	b580      	push	{r7, lr}
 801f56e:	b0aa      	sub	sp, #168	@ 0xa8
 801f570:	af00      	add	r7, sp, #0
 801f572:	60f8      	str	r0, [r7, #12]
 801f574:	60b9      	str	r1, [r7, #8]
 801f576:	607a      	str	r2, [r7, #4]
 801f578:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 801f57a:	4b29      	ldr	r3, [pc, #164]	@ (801f620 <ws_handshake+0xb4>)
 801f57c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 801f580:	f107 0314 	add.w	r3, r7, #20
 801f584:	4618      	mov	r0, r3
 801f586:	f7f2 ff55 	bl	8012434 <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->buf, wskey->len);
 801f58a:	68bb      	ldr	r3, [r7, #8]
 801f58c:	6819      	ldr	r1, [r3, #0]
 801f58e:	68bb      	ldr	r3, [r7, #8]
 801f590:	685a      	ldr	r2, [r3, #4]
 801f592:	f107 0314 	add.w	r3, r7, #20
 801f596:	4618      	mov	r0, r3
 801f598:	f7f2 ff76 	bl	8012488 <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 801f59c:	f107 0314 	add.w	r3, r7, #20
 801f5a0:	2224      	movs	r2, #36	@ 0x24
 801f5a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801f5a6:	4618      	mov	r0, r3
 801f5a8:	f7f2 ff6e 	bl	8012488 <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 801f5ac:	f107 0214 	add.w	r2, r7, #20
 801f5b0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801f5b4:	4611      	mov	r1, r2
 801f5b6:	4618      	mov	r0, r3
 801f5b8:	f7f2 ffcc 	bl	8012554 <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha, sizeof(b64_sha));
 801f5bc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f5c0:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 801f5c4:	231e      	movs	r3, #30
 801f5c6:	2114      	movs	r1, #20
 801f5c8:	f7e7 f85e 	bl	8006688 <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 801f5cc:	68fb      	ldr	r3, [r7, #12]
 801f5ce:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801f5d2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f5d6:	4a13      	ldr	r2, [pc, #76]	@ (801f624 <ws_handshake+0xb8>)
 801f5d8:	4813      	ldr	r0, [pc, #76]	@ (801f628 <ws_handshake+0xbc>)
 801f5da:	f7e8 f816 	bl	800760a <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 801f5de:	683b      	ldr	r3, [r7, #0]
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d008      	beq.n	801f5f6 <ws_handshake+0x8a>
 801f5e4:	68fb      	ldr	r3, [r7, #12]
 801f5e6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801f5ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f5ee:	683a      	ldr	r2, [r7, #0]
 801f5f0:	480d      	ldr	r0, [pc, #52]	@ (801f628 <ws_handshake+0xbc>)
 801f5f2:	f7e8 f825 	bl	8007640 <mg_vxprintf>
  if (wsproto != NULL) {
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	d008      	beq.n	801f60e <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 801f5fc:	687b      	ldr	r3, [r7, #4]
 801f5fe:	685b      	ldr	r3, [r3, #4]
 801f600:	461a      	mov	r2, r3
              wsproto->buf);
 801f602:	687b      	ldr	r3, [r7, #4]
 801f604:	681b      	ldr	r3, [r3, #0]
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 801f606:	4909      	ldr	r1, [pc, #36]	@ (801f62c <ws_handshake+0xc0>)
 801f608:	68f8      	ldr	r0, [r7, #12]
 801f60a:	f7ec fff3 	bl	800c5f4 <mg_printf>
  }
  mg_send(c, "\r\n", 2);
 801f60e:	2202      	movs	r2, #2
 801f610:	4907      	ldr	r1, [pc, #28]	@ (801f630 <ws_handshake+0xc4>)
 801f612:	68f8      	ldr	r0, [r7, #12]
 801f614:	f7f0 ff74 	bl	8010500 <mg_send>
}
 801f618:	bf00      	nop
 801f61a:	37a8      	adds	r7, #168	@ 0xa8
 801f61c:	46bd      	mov	sp, r7
 801f61e:	bd80      	pop	{r7, pc}
 801f620:	080269d0 	.word	0x080269d0
 801f624:	080269f8 	.word	0x080269f8
 801f628:	080107d9 	.word	0x080107d9
 801f62c:	08026a60 	.word	0x08026a60
 801f630:	08024530 	.word	0x08024530

0801f634 <be32>:

static uint32_t be32(const uint8_t *p) {
 801f634:	b480      	push	{r7}
 801f636:	b083      	sub	sp, #12
 801f638:	af00      	add	r7, sp, #0
 801f63a:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 801f63c:	687b      	ldr	r3, [r7, #4]
 801f63e:	3303      	adds	r3, #3
 801f640:	781b      	ldrb	r3, [r3, #0]
 801f642:	461a      	mov	r2, r3
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	3302      	adds	r3, #2
 801f648:	781b      	ldrb	r3, [r3, #0]
 801f64a:	021b      	lsls	r3, r3, #8
 801f64c:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	3301      	adds	r3, #1
 801f652:	781b      	ldrb	r3, [r3, #0]
 801f654:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 801f656:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 801f658:	687b      	ldr	r3, [r7, #4]
 801f65a:	781b      	ldrb	r3, [r3, #0]
 801f65c:	061b      	lsls	r3, r3, #24
 801f65e:	4313      	orrs	r3, r2
}
 801f660:	4618      	mov	r0, r3
 801f662:	370c      	adds	r7, #12
 801f664:	46bd      	mov	sp, r7
 801f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f66a:	4770      	bx	lr

0801f66c <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 801f66c:	b5b0      	push	{r4, r5, r7, lr}
 801f66e:	b08a      	sub	sp, #40	@ 0x28
 801f670:	af00      	add	r7, sp, #0
 801f672:	60f8      	str	r0, [r7, #12]
 801f674:	60b9      	str	r1, [r7, #8]
 801f676:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 801f678:	2300      	movs	r3, #0
 801f67a:	61fb      	str	r3, [r7, #28]
 801f67c:	2300      	movs	r3, #0
 801f67e:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 801f680:	220c      	movs	r2, #12
 801f682:	2100      	movs	r1, #0
 801f684:	6878      	ldr	r0, [r7, #4]
 801f686:	f003 ff46 	bl	8023516 <memset>
  if (len >= 2) {
 801f68a:	68bb      	ldr	r3, [r7, #8]
 801f68c:	2b01      	cmp	r3, #1
 801f68e:	d953      	bls.n	801f738 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 801f690:	68fb      	ldr	r3, [r7, #12]
 801f692:	3301      	adds	r3, #1
 801f694:	781b      	ldrb	r3, [r3, #0]
 801f696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f69a:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 801f69c:	68fb      	ldr	r3, [r7, #12]
 801f69e:	3301      	adds	r3, #1
 801f6a0:	781b      	ldrb	r3, [r3, #0]
 801f6a2:	b25b      	sxtb	r3, r3
 801f6a4:	115b      	asrs	r3, r3, #5
 801f6a6:	b25b      	sxtb	r3, r3
 801f6a8:	f003 0304 	and.w	r3, r3, #4
 801f6ac:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 801f6ae:	68fb      	ldr	r3, [r7, #12]
 801f6b0:	781a      	ldrb	r2, [r3, #0]
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 801f6b6:	69fb      	ldr	r3, [r7, #28]
 801f6b8:	2b7d      	cmp	r3, #125	@ 0x7d
 801f6ba:	d80b      	bhi.n	801f6d4 <ws_process+0x68>
 801f6bc:	68ba      	ldr	r2, [r7, #8]
 801f6be:	6a3b      	ldr	r3, [r7, #32]
 801f6c0:	429a      	cmp	r2, r3
 801f6c2:	d307      	bcc.n	801f6d4 <ws_process+0x68>
      msg->data_len = n;
 801f6c4:	687b      	ldr	r3, [r7, #4]
 801f6c6:	69fa      	ldr	r2, [r7, #28]
 801f6c8:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 801f6ca:	6a3b      	ldr	r3, [r7, #32]
 801f6cc:	1c9a      	adds	r2, r3, #2
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	605a      	str	r2, [r3, #4]
 801f6d2:	e031      	b.n	801f738 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 801f6d4:	69fb      	ldr	r3, [r7, #28]
 801f6d6:	2b7e      	cmp	r3, #126	@ 0x7e
 801f6d8:	d113      	bne.n	801f702 <ws_process+0x96>
 801f6da:	6a3b      	ldr	r3, [r7, #32]
 801f6dc:	3304      	adds	r3, #4
 801f6de:	68ba      	ldr	r2, [r7, #8]
 801f6e0:	429a      	cmp	r2, r3
 801f6e2:	d30e      	bcc.n	801f702 <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 801f6e4:	6a3b      	ldr	r3, [r7, #32]
 801f6e6:	1d1a      	adds	r2, r3, #4
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 801f6ec:	68fb      	ldr	r3, [r7, #12]
 801f6ee:	3302      	adds	r3, #2
 801f6f0:	781b      	ldrb	r3, [r3, #0]
 801f6f2:	021b      	lsls	r3, r3, #8
 801f6f4:	68fa      	ldr	r2, [r7, #12]
 801f6f6:	3203      	adds	r2, #3
 801f6f8:	7812      	ldrb	r2, [r2, #0]
 801f6fa:	431a      	orrs	r2, r3
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	609a      	str	r2, [r3, #8]
 801f700:	e01a      	b.n	801f738 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 801f702:	6a3b      	ldr	r3, [r7, #32]
 801f704:	330a      	adds	r3, #10
 801f706:	68ba      	ldr	r2, [r7, #8]
 801f708:	429a      	cmp	r2, r3
 801f70a:	d315      	bcc.n	801f738 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 801f70c:	6a3b      	ldr	r3, [r7, #32]
 801f70e:	f103 020a 	add.w	r2, r3, #10
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 801f716:	68fb      	ldr	r3, [r7, #12]
 801f718:	3302      	adds	r3, #2
 801f71a:	4618      	mov	r0, r3
 801f71c:	f7ff ff8a 	bl	801f634 <be32>
 801f720:	4603      	mov	r3, r0
 801f722:	2200      	movs	r2, #0
 801f724:	461c      	mov	r4, r3
 801f726:	4615      	mov	r5, r2
 801f728:	68fb      	ldr	r3, [r7, #12]
 801f72a:	3306      	adds	r3, #6
 801f72c:	4618      	mov	r0, r3
 801f72e:	f7ff ff81 	bl	801f634 <be32>
 801f732:	4602      	mov	r2, r0
      msg->data_len =
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 801f738:	687b      	ldr	r3, [r7, #4]
 801f73a:	689b      	ldr	r3, [r3, #8]
 801f73c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f740:	d901      	bls.n	801f746 <ws_process+0xda>
 801f742:	2300      	movs	r3, #0
 801f744:	e036      	b.n	801f7b4 <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	685a      	ldr	r2, [r3, #4]
 801f74a:	687b      	ldr	r3, [r7, #4]
 801f74c:	689b      	ldr	r3, [r3, #8]
 801f74e:	4413      	add	r3, r2
 801f750:	68ba      	ldr	r2, [r7, #8]
 801f752:	429a      	cmp	r2, r3
 801f754:	d201      	bcs.n	801f75a <ws_process+0xee>
 801f756:	2300      	movs	r3, #0
 801f758:	e02c      	b.n	801f7b4 <ws_process+0x148>
  if (mask_len > 0) {
 801f75a:	6a3b      	ldr	r3, [r7, #32]
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d024      	beq.n	801f7aa <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	685b      	ldr	r3, [r3, #4]
 801f764:	68fa      	ldr	r2, [r7, #12]
 801f766:	4413      	add	r3, r2
 801f768:	61bb      	str	r3, [r7, #24]
 801f76a:	6a3b      	ldr	r3, [r7, #32]
 801f76c:	425b      	negs	r3, r3
 801f76e:	69ba      	ldr	r2, [r7, #24]
 801f770:	4413      	add	r3, r2
 801f772:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 801f774:	2300      	movs	r3, #0
 801f776:	627b      	str	r3, [r7, #36]	@ 0x24
 801f778:	e012      	b.n	801f7a0 <ws_process+0x134>
 801f77a:	69ba      	ldr	r2, [r7, #24]
 801f77c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f77e:	4413      	add	r3, r2
 801f780:	7819      	ldrb	r1, [r3, #0]
 801f782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f784:	f003 0303 	and.w	r3, r3, #3
 801f788:	697a      	ldr	r2, [r7, #20]
 801f78a:	4413      	add	r3, r2
 801f78c:	781a      	ldrb	r2, [r3, #0]
 801f78e:	69b8      	ldr	r0, [r7, #24]
 801f790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f792:	4403      	add	r3, r0
 801f794:	404a      	eors	r2, r1
 801f796:	b2d2      	uxtb	r2, r2
 801f798:	701a      	strb	r2, [r3, #0]
 801f79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f79c:	3301      	adds	r3, #1
 801f79e:	627b      	str	r3, [r7, #36]	@ 0x24
 801f7a0:	687b      	ldr	r3, [r7, #4]
 801f7a2:	689b      	ldr	r3, [r3, #8]
 801f7a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f7a6:	429a      	cmp	r2, r3
 801f7a8:	d3e7      	bcc.n	801f77a <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	685a      	ldr	r2, [r3, #4]
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	689b      	ldr	r3, [r3, #8]
 801f7b2:	4413      	add	r3, r2
}
 801f7b4:	4618      	mov	r0, r3
 801f7b6:	3728      	adds	r7, #40	@ 0x28
 801f7b8:	46bd      	mov	sp, r7
 801f7ba:	bdb0      	pop	{r4, r5, r7, pc}

0801f7bc <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 801f7bc:	b5b0      	push	{r4, r5, r7, lr}
 801f7be:	b088      	sub	sp, #32
 801f7c0:	af00      	add	r7, sp, #0
 801f7c2:	60f8      	str	r0, [r7, #12]
 801f7c4:	60b9      	str	r1, [r7, #8]
 801f7c6:	603b      	str	r3, [r7, #0]
 801f7c8:	4613      	mov	r3, r2
 801f7ca:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 801f7cc:	2300      	movs	r3, #0
 801f7ce:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 801f7d0:	68bb      	ldr	r3, [r7, #8]
 801f7d2:	b25b      	sxtb	r3, r3
 801f7d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801f7d8:	b25b      	sxtb	r3, r3
 801f7da:	b2da      	uxtb	r2, r3
 801f7dc:	683b      	ldr	r3, [r7, #0]
 801f7de:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 801f7e0:	68fb      	ldr	r3, [r7, #12]
 801f7e2:	2b7d      	cmp	r3, #125	@ 0x7d
 801f7e4:	d807      	bhi.n	801f7f6 <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 801f7e6:	683b      	ldr	r3, [r7, #0]
 801f7e8:	3301      	adds	r3, #1
 801f7ea:	68fa      	ldr	r2, [r7, #12]
 801f7ec:	b2d2      	uxtb	r2, r2
 801f7ee:	701a      	strb	r2, [r3, #0]
    n = 2;
 801f7f0:	2302      	movs	r3, #2
 801f7f2:	61fb      	str	r3, [r7, #28]
 801f7f4:	e038      	b.n	801f868 <mkhdr+0xac>
  } else if (len < 65536) {
 801f7f6:	68fb      	ldr	r3, [r7, #12]
 801f7f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f7fc:	d211      	bcs.n	801f822 <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 801f7fe:	68fb      	ldr	r3, [r7, #12]
 801f800:	b29b      	uxth	r3, r3
 801f802:	4618      	mov	r0, r3
 801f804:	f7ff fe80 	bl	801f508 <mg_ntohs>
 801f808:	4603      	mov	r3, r0
 801f80a:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 801f80c:	683b      	ldr	r3, [r7, #0]
 801f80e:	3301      	adds	r3, #1
 801f810:	227e      	movs	r2, #126	@ 0x7e
 801f812:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 801f814:	683b      	ldr	r3, [r7, #0]
 801f816:	3302      	adds	r3, #2
 801f818:	8b7a      	ldrh	r2, [r7, #26]
 801f81a:	801a      	strh	r2, [r3, #0]
    n = 4;
 801f81c:	2304      	movs	r3, #4
 801f81e:	61fb      	str	r3, [r7, #28]
 801f820:	e022      	b.n	801f868 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 801f822:	683b      	ldr	r3, [r7, #0]
 801f824:	3301      	adds	r3, #1
 801f826:	227f      	movs	r2, #127	@ 0x7f
 801f828:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 801f82a:	68fb      	ldr	r3, [r7, #12]
 801f82c:	2200      	movs	r2, #0
 801f82e:	461c      	mov	r4, r3
 801f830:	4615      	mov	r5, r2
 801f832:	f04f 0200 	mov.w	r2, #0
 801f836:	f04f 0300 	mov.w	r3, #0
 801f83a:	002a      	movs	r2, r5
 801f83c:	2300      	movs	r3, #0
 801f83e:	4613      	mov	r3, r2
 801f840:	4618      	mov	r0, r3
 801f842:	f7ff fe78 	bl	801f536 <mg_ntohl>
 801f846:	4603      	mov	r3, r0
 801f848:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 801f84a:	683b      	ldr	r3, [r7, #0]
 801f84c:	3302      	adds	r3, #2
 801f84e:	697a      	ldr	r2, [r7, #20]
 801f850:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 801f852:	68f8      	ldr	r0, [r7, #12]
 801f854:	f7ff fe6f 	bl	801f536 <mg_ntohl>
 801f858:	4603      	mov	r3, r0
 801f85a:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 801f85c:	683b      	ldr	r3, [r7, #0]
 801f85e:	3306      	adds	r3, #6
 801f860:	697a      	ldr	r2, [r7, #20]
 801f862:	601a      	str	r2, [r3, #0]
    n = 10;
 801f864:	230a      	movs	r3, #10
 801f866:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 801f868:	79fb      	ldrb	r3, [r7, #7]
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	d012      	beq.n	801f894 <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 801f86e:	683b      	ldr	r3, [r7, #0]
 801f870:	3301      	adds	r3, #1
 801f872:	781a      	ldrb	r2, [r3, #0]
 801f874:	683b      	ldr	r3, [r7, #0]
 801f876:	3301      	adds	r3, #1
 801f878:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801f87c:	b2d2      	uxtb	r2, r2
 801f87e:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 801f880:	683a      	ldr	r2, [r7, #0]
 801f882:	69fb      	ldr	r3, [r7, #28]
 801f884:	4413      	add	r3, r2
 801f886:	2104      	movs	r1, #4
 801f888:	4618      	mov	r0, r3
 801f88a:	f7e0 ff3f 	bl	800070c <mg_random>
    n += 4;
 801f88e:	69fb      	ldr	r3, [r7, #28]
 801f890:	3304      	adds	r3, #4
 801f892:	61fb      	str	r3, [r7, #28]
  }
  return n;
 801f894:	69fb      	ldr	r3, [r7, #28]
}
 801f896:	4618      	mov	r0, r3
 801f898:	3720      	adds	r7, #32
 801f89a:	46bd      	mov	sp, r7
 801f89c:	bdb0      	pop	{r4, r5, r7, pc}

0801f89e <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 801f89e:	b480      	push	{r7}
 801f8a0:	b087      	sub	sp, #28
 801f8a2:	af00      	add	r7, sp, #0
 801f8a4:	6078      	str	r0, [r7, #4]
 801f8a6:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f8ae:	f003 0302 	and.w	r3, r3, #2
 801f8b2:	b2db      	uxtb	r3, r3
 801f8b4:	2b00      	cmp	r3, #0
 801f8b6:	d028      	beq.n	801f90a <mg_ws_mask+0x6c>
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f8bc:	2b00      	cmp	r3, #0
 801f8be:	d024      	beq.n	801f90a <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 801f8c0:	687b      	ldr	r3, [r7, #4]
 801f8c2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801f8c8:	683b      	ldr	r3, [r7, #0]
 801f8ca:	1acb      	subs	r3, r1, r3
 801f8cc:	4413      	add	r3, r2
 801f8ce:	613b      	str	r3, [r7, #16]
 801f8d0:	693b      	ldr	r3, [r7, #16]
 801f8d2:	3b04      	subs	r3, #4
 801f8d4:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 801f8d6:	2300      	movs	r3, #0
 801f8d8:	617b      	str	r3, [r7, #20]
 801f8da:	e012      	b.n	801f902 <mg_ws_mask+0x64>
 801f8dc:	693a      	ldr	r2, [r7, #16]
 801f8de:	697b      	ldr	r3, [r7, #20]
 801f8e0:	4413      	add	r3, r2
 801f8e2:	7819      	ldrb	r1, [r3, #0]
 801f8e4:	697b      	ldr	r3, [r7, #20]
 801f8e6:	f003 0303 	and.w	r3, r3, #3
 801f8ea:	68fa      	ldr	r2, [r7, #12]
 801f8ec:	4413      	add	r3, r2
 801f8ee:	781a      	ldrb	r2, [r3, #0]
 801f8f0:	6938      	ldr	r0, [r7, #16]
 801f8f2:	697b      	ldr	r3, [r7, #20]
 801f8f4:	4403      	add	r3, r0
 801f8f6:	404a      	eors	r2, r1
 801f8f8:	b2d2      	uxtb	r2, r2
 801f8fa:	701a      	strb	r2, [r3, #0]
 801f8fc:	697b      	ldr	r3, [r7, #20]
 801f8fe:	3301      	adds	r3, #1
 801f900:	617b      	str	r3, [r7, #20]
 801f902:	697a      	ldr	r2, [r7, #20]
 801f904:	683b      	ldr	r3, [r7, #0]
 801f906:	429a      	cmp	r2, r3
 801f908:	d3e8      	bcc.n	801f8dc <mg_ws_mask+0x3e>
  }
}
 801f90a:	bf00      	nop
 801f90c:	371c      	adds	r7, #28
 801f90e:	46bd      	mov	sp, r7
 801f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f914:	4770      	bx	lr
	...

0801f918 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 801f918:	b580      	push	{r7, lr}
 801f91a:	b08a      	sub	sp, #40	@ 0x28
 801f91c:	af00      	add	r7, sp, #0
 801f91e:	60f8      	str	r0, [r7, #12]
 801f920:	60b9      	str	r1, [r7, #8]
 801f922:	607a      	str	r2, [r7, #4]
 801f924:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 801f926:	68fb      	ldr	r3, [r7, #12]
 801f928:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f92c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801f930:	b2db      	uxtb	r3, r3
 801f932:	2b00      	cmp	r3, #0
 801f934:	bf14      	ite	ne
 801f936:	2301      	movne	r3, #1
 801f938:	2300      	moveq	r3, #0
 801f93a:	b2da      	uxtb	r2, r3
 801f93c:	f107 0314 	add.w	r3, r7, #20
 801f940:	6839      	ldr	r1, [r7, #0]
 801f942:	6878      	ldr	r0, [r7, #4]
 801f944:	f7ff ff3a 	bl	801f7bc <mkhdr>
 801f948:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!mg_send(c, header, header_len)) return 0;
 801f94a:	f107 0314 	add.w	r3, r7, #20
 801f94e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f950:	4619      	mov	r1, r3
 801f952:	68f8      	ldr	r0, [r7, #12]
 801f954:	f7f0 fdd4 	bl	8010500 <mg_send>
 801f958:	4603      	mov	r3, r0
 801f95a:	f083 0301 	eor.w	r3, r3, #1
 801f95e:	b2db      	uxtb	r3, r3
 801f960:	2b00      	cmp	r3, #0
 801f962:	d001      	beq.n	801f968 <mg_ws_send+0x50>
 801f964:	2300      	movs	r3, #0
 801f966:	e024      	b.n	801f9b2 <mg_ws_send+0x9a>
  if (!mg_send(c, buf, len)) return header_len;
 801f968:	687a      	ldr	r2, [r7, #4]
 801f96a:	68b9      	ldr	r1, [r7, #8]
 801f96c:	68f8      	ldr	r0, [r7, #12]
 801f96e:	f7f0 fdc7 	bl	8010500 <mg_send>
 801f972:	4603      	mov	r3, r0
 801f974:	f083 0301 	eor.w	r3, r3, #1
 801f978:	b2db      	uxtb	r3, r3
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d001      	beq.n	801f982 <mg_ws_send+0x6a>
 801f97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f980:	e017      	b.n	801f9b2 <mg_ws_send+0x9a>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 801f982:	4b0e      	ldr	r3, [pc, #56]	@ (801f9bc <mg_ws_send+0xa4>)
 801f984:	681b      	ldr	r3, [r3, #0]
 801f986:	2b03      	cmp	r3, #3
 801f988:	dd0c      	ble.n	801f9a4 <mg_ws_send+0x8c>
 801f98a:	4b0d      	ldr	r3, [pc, #52]	@ (801f9c0 <mg_ws_send+0xa8>)
 801f98c:	f644 6268 	movw	r2, #20072	@ 0x4e68
 801f990:	490c      	ldr	r1, [pc, #48]	@ (801f9c4 <mg_ws_send+0xac>)
 801f992:	2004      	movs	r0, #4
 801f994:	f7ec fcd2 	bl	800c33c <mg_log_prefix>
 801f998:	6879      	ldr	r1, [r7, #4]
 801f99a:	687a      	ldr	r2, [r7, #4]
 801f99c:	68bb      	ldr	r3, [r7, #8]
 801f99e:	480a      	ldr	r0, [pc, #40]	@ (801f9c8 <mg_ws_send+0xb0>)
 801f9a0:	f7ec fd1c 	bl	800c3dc <mg_log>
  mg_ws_mask(c, len);
 801f9a4:	6879      	ldr	r1, [r7, #4]
 801f9a6:	68f8      	ldr	r0, [r7, #12]
 801f9a8:	f7ff ff79 	bl	801f89e <mg_ws_mask>
  return header_len + len;
 801f9ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f9ae:	687b      	ldr	r3, [r7, #4]
 801f9b0:	4413      	add	r3, r2
}
 801f9b2:	4618      	mov	r0, r3
 801f9b4:	3728      	adds	r7, #40	@ 0x28
 801f9b6:	46bd      	mov	sp, r7
 801f9b8:	bd80      	pop	{r7, pc}
 801f9ba:	bf00      	nop
 801f9bc:	24000258 	.word	0x24000258
 801f9c0:	080280d0 	.word	0x080280d0
 801f9c4:	080241e8 	.word	0x080241e8
 801f9c8:	08026a80 	.word	0x08026a80

0801f9cc <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 801f9cc:	b580      	push	{r7, lr}
 801f9ce:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 801f9d2:	af00      	add	r7, sp, #0
 801f9d4:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f9d8:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801f9dc:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 801f9de:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f9e2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801f9e6:	681b      	ldr	r3, [r3, #0]
 801f9e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801f9ea:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801f9ee:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f9f6:	4619      	mov	r1, r3
 801f9f8:	4610      	mov	r0, r2
 801f9fa:	f7e8 fe4b 	bl	8008694 <mg_http_get_request_len>
 801f9fe:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
  if (n < 0) {
 801fa02:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801fa06:	2b00      	cmp	r3, #0
 801fa08:	da08      	bge.n	801fa1c <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 801fa0a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fa0e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fa12:	4936      	ldr	r1, [pc, #216]	@ (801faec <mg_ws_client_handshake+0x120>)
 801fa14:	6818      	ldr	r0, [r3, #0]
 801fa16:	f7e6 ff81 	bl	800691c <mg_error>
 801fa1a:	e060      	b.n	801fade <mg_ws_client_handshake+0x112>
  } else if (n > 0) {
 801fa1c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801fa20:	2b00      	cmp	r3, #0
 801fa22:	dd5a      	ble.n	801fada <mg_ws_client_handshake+0x10e>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 801fa24:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801fa28:	2b0e      	cmp	r3, #14
 801fa2a:	dd0e      	ble.n	801fa4a <mg_ws_client_handshake+0x7e>
 801fa2c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fa30:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fa38:	3309      	adds	r3, #9
 801fa3a:	2203      	movs	r2, #3
 801fa3c:	492c      	ldr	r1, [pc, #176]	@ (801faf0 <mg_ws_client_handshake+0x124>)
 801fa3e:	4618      	mov	r0, r3
 801fa40:	f003 fd3f 	bl	80234c2 <memcmp>
 801fa44:	4603      	mov	r3, r0
 801fa46:	2b00      	cmp	r3, #0
 801fa48:	d008      	beq.n	801fa5c <mg_ws_client_handshake+0x90>
      mg_error(c, "ws handshake error");
 801fa4a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fa4e:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fa52:	4928      	ldr	r1, [pc, #160]	@ (801faf4 <mg_ws_client_handshake+0x128>)
 801fa54:	6818      	ldr	r0, [r3, #0]
 801fa56:	f7e6 ff61 	bl	800691c <mg_error>
 801fa5a:	e031      	b.n	801fac0 <mg_ws_client_handshake+0xf4>
    } else {
      struct mg_http_message hm;
      if (mg_http_parse((char *) c->recv.buf, c->recv.len, &hm)) {
 801fa5c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fa60:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801fa68:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fa6c:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fa70:	681b      	ldr	r3, [r3, #0]
 801fa72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fa74:	f107 020c 	add.w	r2, r7, #12
 801fa78:	4619      	mov	r1, r3
 801fa7a:	f7e9 f815 	bl	8008aa8 <mg_http_parse>
 801fa7e:	4603      	mov	r3, r0
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d015      	beq.n	801fab0 <mg_ws_client_handshake+0xe4>
        c->is_websocket = 1;
 801fa84:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fa88:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fa8c:	681a      	ldr	r2, [r3, #0]
 801fa8e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801fa92:	f043 0302 	orr.w	r3, r3, #2
 801fa96:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_call(c, MG_EV_WS_OPEN, &hm);
 801fa9a:	f107 020c 	add.w	r2, r7, #12
 801fa9e:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801faa2:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801faa6:	210c      	movs	r1, #12
 801faa8:	6818      	ldr	r0, [r3, #0]
 801faaa:	f7e6 ff16 	bl	80068da <mg_call>
 801faae:	e007      	b.n	801fac0 <mg_ws_client_handshake+0xf4>
      } else {
        mg_error(c, "ws handshake error");
 801fab0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fab4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fab8:	490e      	ldr	r1, [pc, #56]	@ (801faf4 <mg_ws_client_handshake+0x128>)
 801faba:	6818      	ldr	r0, [r3, #0]
 801fabc:	f7e6 ff2e 	bl	800691c <mg_error>
      }
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 801fac0:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fac4:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fac8:	681b      	ldr	r3, [r3, #0]
 801faca:	3338      	adds	r3, #56	@ 0x38
 801facc:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 801fad0:	2100      	movs	r1, #0
 801fad2:	4618      	mov	r0, r3
 801fad4:	f7eb fd66 	bl	800b5a4 <mg_iobuf_del>
 801fad8:	e001      	b.n	801fade <mg_ws_client_handshake+0x112>
  } else {
    return true;  // Request is not yet received, quit event handler
 801fada:	2301      	movs	r3, #1
 801fadc:	e000      	b.n	801fae0 <mg_ws_client_handshake+0x114>
  }
  return false;  // Continue event handler
 801fade:	2300      	movs	r3, #0
}
 801fae0:	4618      	mov	r0, r3
 801fae2:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 801fae6:	46bd      	mov	sp, r7
 801fae8:	bd80      	pop	{r7, pc}
 801faea:	bf00      	nop
 801faec:	08026a94 	.word	0x08026a94
 801faf0:	08026aa0 	.word	0x08026aa0
 801faf4:	08026aa4 	.word	0x08026aa4

0801faf8 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {
 801faf8:	b580      	push	{r7, lr}
 801fafa:	b090      	sub	sp, #64	@ 0x40
 801fafc:	af00      	add	r7, sp, #0
 801fafe:	6178      	str	r0, [r7, #20]
 801fb00:	6139      	str	r1, [r7, #16]
 801fb02:	60fa      	str	r2, [r7, #12]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 801fb04:	697b      	ldr	r3, [r7, #20]
 801fb06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fb0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 801fb0c:	693b      	ldr	r3, [r7, #16]
 801fb0e:	2b07      	cmp	r3, #7
 801fb10:	f040 813c 	bne.w	801fd8c <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 801fb14:	697b      	ldr	r3, [r7, #20]
 801fb16:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fb1a:	f003 0302 	and.w	r3, r3, #2
 801fb1e:	b2db      	uxtb	r3, r3
 801fb20:	2b00      	cmp	r3, #0
 801fb22:	f000 8120 	beq.w	801fd66 <mg_ws_cb+0x26e>
 801fb26:	697b      	ldr	r3, [r7, #20]
 801fb28:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801fb2c:	f003 0302 	and.w	r3, r3, #2
 801fb30:	b2db      	uxtb	r3, r3
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	f040 8117 	bne.w	801fd66 <mg_ws_cb+0x26e>
 801fb38:	6978      	ldr	r0, [r7, #20]
 801fb3a:	f7ff ff47 	bl	801f9cc <mg_ws_client_handshake>
 801fb3e:	4603      	mov	r3, r0
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	f040 8122 	bne.w	801fd8a <mg_ws_cb+0x292>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 801fb46:	e10e      	b.n	801fd66 <mg_ws_cb+0x26e>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 801fb48:	697b      	ldr	r3, [r7, #20]
 801fb4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fb4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801fb4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fb50:	440b      	add	r3, r1
 801fb52:	4413      	add	r3, r2
 801fb54:	637b      	str	r3, [r7, #52]	@ 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 801fb56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fb58:	61bb      	str	r3, [r7, #24]
 801fb5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fb5c:	61fb      	str	r3, [r7, #28]
 801fb5e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801fb62:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 801fb66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fb68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fb6a:	4413      	add	r3, r2
 801fb6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 801fb6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801fb72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801fb76:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801fb7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801fb7e:	f003 030f 	and.w	r3, r3, #15
 801fb82:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.buf));
      switch (op) {
 801fb86:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fb8a:	2b0a      	cmp	r3, #10
 801fb8c:	d877      	bhi.n	801fc7e <mg_ws_cb+0x186>
 801fb8e:	a201      	add	r2, pc, #4	@ (adr r2, 801fb94 <mg_ws_cb+0x9c>)
 801fb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb94:	0801fbc1 	.word	0x0801fbc1
 801fb98:	0801fc1b 	.word	0x0801fc1b
 801fb9c:	0801fc1b 	.word	0x0801fc1b
 801fba0:	0801fc7f 	.word	0x0801fc7f
 801fba4:	0801fc7f 	.word	0x0801fc7f
 801fba8:	0801fc7f 	.word	0x0801fc7f
 801fbac:	0801fc7f 	.word	0x0801fc7f
 801fbb0:	0801fc7f 	.word	0x0801fc7f
 801fbb4:	0801fc33 	.word	0x0801fc33
 801fbb8:	0801fbd1 	.word	0x0801fbd1
 801fbbc:	0801fc0b 	.word	0x0801fc0b
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 801fbc0:	f107 0318 	add.w	r3, r7, #24
 801fbc4:	461a      	mov	r2, r3
 801fbc6:	210e      	movs	r1, #14
 801fbc8:	6978      	ldr	r0, [r7, #20]
 801fbca:	f7e6 fe86 	bl	80068da <mg_call>
          break;
 801fbce:	e05f      	b.n	801fc90 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 801fbd0:	4b70      	ldr	r3, [pc, #448]	@ (801fd94 <mg_ws_cb+0x29c>)
 801fbd2:	681b      	ldr	r3, [r3, #0]
 801fbd4:	2b02      	cmp	r3, #2
 801fbd6:	dd0a      	ble.n	801fbee <mg_ws_cb+0xf6>
 801fbd8:	4b6f      	ldr	r3, [pc, #444]	@ (801fd98 <mg_ws_cb+0x2a0>)
 801fbda:	f644 6298 	movw	r2, #20120	@ 0x4e98
 801fbde:	496f      	ldr	r1, [pc, #444]	@ (801fd9c <mg_ws_cb+0x2a4>)
 801fbe0:	2003      	movs	r0, #3
 801fbe2:	f7ec fbab 	bl	800c33c <mg_log_prefix>
 801fbe6:	496e      	ldr	r1, [pc, #440]	@ (801fda0 <mg_ws_cb+0x2a8>)
 801fbe8:	486e      	ldr	r0, [pc, #440]	@ (801fda4 <mg_ws_cb+0x2ac>)
 801fbea:	f7ec fbf7 	bl	800c3dc <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 801fbee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fbf0:	230a      	movs	r3, #10
 801fbf2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801fbf4:	6978      	ldr	r0, [r7, #20]
 801fbf6:	f7ff fe8f 	bl	801f918 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 801fbfa:	f107 0318 	add.w	r3, r7, #24
 801fbfe:	461a      	mov	r2, r3
 801fc00:	210e      	movs	r1, #14
 801fc02:	6978      	ldr	r0, [r7, #20]
 801fc04:	f7e6 fe69 	bl	80068da <mg_call>
          break;
 801fc08:	e042      	b.n	801fc90 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 801fc0a:	f107 0318 	add.w	r3, r7, #24
 801fc0e:	461a      	mov	r2, r3
 801fc10:	210e      	movs	r1, #14
 801fc12:	6978      	ldr	r0, [r7, #20]
 801fc14:	f7e6 fe61 	bl	80068da <mg_call>
          break;
 801fc18:	e03a      	b.n	801fc90 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 801fc1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d035      	beq.n	801fc8e <mg_ws_cb+0x196>
 801fc22:	f107 0318 	add.w	r3, r7, #24
 801fc26:	461a      	mov	r2, r3
 801fc28:	210d      	movs	r1, #13
 801fc2a:	6978      	ldr	r0, [r7, #20]
 801fc2c:	f7e6 fe55 	bl	80068da <mg_call>
          break;
 801fc30:	e02d      	b.n	801fc8e <mg_ws_cb+0x196>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 801fc32:	4b58      	ldr	r3, [pc, #352]	@ (801fd94 <mg_ws_cb+0x29c>)
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	2b02      	cmp	r3, #2
 801fc38:	dd0c      	ble.n	801fc54 <mg_ws_cb+0x15c>
 801fc3a:	4b57      	ldr	r3, [pc, #348]	@ (801fd98 <mg_ws_cb+0x2a0>)
 801fc3c:	f644 62a4 	movw	r2, #20132	@ 0x4ea4
 801fc40:	4956      	ldr	r1, [pc, #344]	@ (801fd9c <mg_ws_cb+0x2a4>)
 801fc42:	2003      	movs	r0, #3
 801fc44:	f7ec fb7a 	bl	800c33c <mg_log_prefix>
 801fc48:	697b      	ldr	r3, [r7, #20]
 801fc4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fc4c:	4619      	mov	r1, r3
 801fc4e:	4856      	ldr	r0, [pc, #344]	@ (801fda8 <mg_ws_cb+0x2b0>)
 801fc50:	f7ec fbc4 	bl	800c3dc <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 801fc54:	f107 0318 	add.w	r3, r7, #24
 801fc58:	461a      	mov	r2, r3
 801fc5a:	210e      	movs	r1, #14
 801fc5c:	6978      	ldr	r0, [r7, #20]
 801fc5e:	f7e6 fe3c 	bl	80068da <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.buf, m.data.len, WEBSOCKET_OP_CLOSE);
 801fc62:	69b9      	ldr	r1, [r7, #24]
 801fc64:	69fa      	ldr	r2, [r7, #28]
 801fc66:	2308      	movs	r3, #8
 801fc68:	6978      	ldr	r0, [r7, #20]
 801fc6a:	f7ff fe55 	bl	801f918 <mg_ws_send>
          c->is_draining = 1;
 801fc6e:	697a      	ldr	r2, [r7, #20]
 801fc70:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801fc74:	f043 0310 	orr.w	r3, r3, #16
 801fc78:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 801fc7c:	e008      	b.n	801fc90 <mg_ws_cb+0x198>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 801fc7e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fc82:	461a      	mov	r2, r3
 801fc84:	4949      	ldr	r1, [pc, #292]	@ (801fdac <mg_ws_cb+0x2b4>)
 801fc86:	6978      	ldr	r0, [r7, #20]
 801fc88:	f7e6 fe48 	bl	800691c <mg_error>
          break;
 801fc8c:	e000      	b.n	801fc90 <mg_ws_cb+0x198>
          break;
 801fc8e:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 801fc90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d003      	beq.n	801fca0 <mg_ws_cb+0x1a8>
 801fc98:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d11f      	bne.n	801fce0 <mg_ws_cb+0x1e8>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 801fca0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	d008      	beq.n	801fcba <mg_ws_cb+0x1c2>
 801fca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fcaa:	3301      	adds	r3, #1
 801fcac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801fcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fcb0:	3b01      	subs	r3, #1
 801fcb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801fcb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fcb6:	3b01      	subs	r3, #1
 801fcb8:	62bb      	str	r3, [r7, #40]	@ 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 801fcba:	697b      	ldr	r3, [r7, #20]
 801fcbc:	3338      	adds	r3, #56	@ 0x38
 801fcbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fcc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fcc2:	4618      	mov	r0, r3
 801fcc4:	f7eb fc6e 	bl	800b5a4 <mg_iobuf_del>
        len -= msg.header_len;
 801fcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fcca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801fccc:	1ad3      	subs	r3, r2, r3
 801fcce:	63bb      	str	r3, [r7, #56]	@ 0x38
        ofs += len;
 801fcd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fcd4:	4413      	add	r3, r2
 801fcd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = (void *) ofs;
 801fcd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fcda:	697b      	ldr	r3, [r7, #20]
 801fcdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 801fce0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fce4:	2b00      	cmp	r3, #0
 801fce6:	d00a      	beq.n	801fcfe <mg_ws_cb+0x206>
 801fce8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fcec:	2b00      	cmp	r3, #0
 801fcee:	d006      	beq.n	801fcfe <mg_ws_cb+0x206>
 801fcf0:	697b      	ldr	r3, [r7, #20]
 801fcf2:	3338      	adds	r3, #56	@ 0x38
 801fcf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801fcf6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fcf8:	4618      	mov	r0, r3
 801fcfa:	f7eb fc53 	bl	800b5a4 <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op && (ofs > 0)) {
 801fcfe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fd02:	2b00      	cmp	r3, #0
 801fd04:	d02f      	beq.n	801fd66 <mg_ws_cb+0x26e>
 801fd06:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fd0a:	2b00      	cmp	r3, #0
 801fd0c:	d12b      	bne.n	801fd66 <mg_ws_cb+0x26e>
 801fd0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fd10:	2b00      	cmp	r3, #0
 801fd12:	d028      	beq.n	801fd66 <mg_ws_cb+0x26e>
        m.flags = c->recv.buf[0];
 801fd14:	697b      	ldr	r3, [r7, #20]
 801fd16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fd18:	781b      	ldrb	r3, [r3, #0]
 801fd1a:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 801fd1e:	697b      	ldr	r3, [r7, #20]
 801fd20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fd22:	1c59      	adds	r1, r3, #1
 801fd24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fd26:	1e5a      	subs	r2, r3, #1
 801fd28:	463b      	mov	r3, r7
 801fd2a:	4618      	mov	r0, r3
 801fd2c:	f7f4 f96f 	bl	801400e <mg_str_n>
 801fd30:	f107 0318 	add.w	r3, r7, #24
 801fd34:	463a      	mov	r2, r7
 801fd36:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fd3a:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 801fd3e:	f107 0318 	add.w	r3, r7, #24
 801fd42:	461a      	mov	r2, r3
 801fd44:	210d      	movs	r1, #13
 801fd46:	6978      	ldr	r0, [r7, #20]
 801fd48:	f7e6 fdc7 	bl	80068da <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 801fd4c:	697b      	ldr	r3, [r7, #20]
 801fd4e:	3338      	adds	r3, #56	@ 0x38
 801fd50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fd52:	2100      	movs	r1, #0
 801fd54:	4618      	mov	r0, r3
 801fd56:	f7eb fc25 	bl	800b5a4 <mg_iobuf_del>
        ofs = 0;
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = NULL;
 801fd5e:	697b      	ldr	r3, [r7, #20]
 801fd60:	2200      	movs	r2, #0
 801fd62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 801fd66:	697b      	ldr	r3, [r7, #20]
 801fd68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fd6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fd6c:	18d0      	adds	r0, r2, r3
 801fd6e:	697b      	ldr	r3, [r7, #20]
 801fd70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801fd72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fd74:	1ad3      	subs	r3, r2, r3
 801fd76:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801fd7a:	4619      	mov	r1, r3
 801fd7c:	f7ff fc76 	bl	801f66c <ws_process>
 801fd80:	4603      	mov	r3, r0
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	f47f aee0 	bne.w	801fb48 <mg_ws_cb+0x50>
 801fd88:	e000      	b.n	801fd8c <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 801fd8a:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 801fd8c:	3740      	adds	r7, #64	@ 0x40
 801fd8e:	46bd      	mov	sp, r7
 801fd90:	bd80      	pop	{r7, pc}
 801fd92:	bf00      	nop
 801fd94:	24000258 	.word	0x24000258
 801fd98:	080280dc 	.word	0x080280dc
 801fd9c:	080241e8 	.word	0x080241e8
 801fda0:	08026ab8 	.word	0x08026ab8
 801fda4:	080244b4 	.word	0x080244b4
 801fda8:	08026ac0 	.word	0x08026ac0
 801fdac:	08026ad0 	.word	0x08026ad0

0801fdb0 <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 801fdb0:	b40c      	push	{r2, r3}
 801fdb2:	b580      	push	{r7, lr}
 801fdb4:	b088      	sub	sp, #32
 801fdb6:	af02      	add	r7, sp, #8
 801fdb8:	6078      	str	r0, [r7, #4]
 801fdba:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 801fdbc:	4924      	ldr	r1, [pc, #144]	@ (801fe50 <mg_ws_upgrade+0xa0>)
 801fdbe:	6838      	ldr	r0, [r7, #0]
 801fdc0:	f7e8 fcb6 	bl	8008730 <mg_http_get_header>
 801fdc4:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 801fdc6:	687b      	ldr	r3, [r7, #4]
 801fdc8:	4a22      	ldr	r2, [pc, #136]	@ (801fe54 <mg_ws_upgrade+0xa4>)
 801fdca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->pfn_data = NULL;
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	2200      	movs	r2, #0
 801fdd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  if (wskey == NULL) {
 801fdd6:	697b      	ldr	r3, [r7, #20]
 801fdd8:	2b00      	cmp	r3, #0
 801fdda:	d10e      	bne.n	801fdfa <mg_ws_upgrade+0x4a>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 801fddc:	4b1e      	ldr	r3, [pc, #120]	@ (801fe58 <mg_ws_upgrade+0xa8>)
 801fdde:	4a1f      	ldr	r2, [pc, #124]	@ (801fe5c <mg_ws_upgrade+0xac>)
 801fde0:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 801fde4:	6878      	ldr	r0, [r7, #4]
 801fde6:	f7e9 fd19 	bl	800981c <mg_http_reply>
    c->is_draining = 1;
 801fdea:	687a      	ldr	r2, [r7, #4]
 801fdec:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801fdf0:	f043 0310 	orr.w	r3, r3, #16
 801fdf4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 801fdf8:	e023      	b.n	801fe42 <mg_ws_upgrade+0x92>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 801fdfa:	4919      	ldr	r1, [pc, #100]	@ (801fe60 <mg_ws_upgrade+0xb0>)
 801fdfc:	6838      	ldr	r0, [r7, #0]
 801fdfe:	f7e8 fc97 	bl	8008730 <mg_http_get_header>
 801fe02:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 801fe04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fe08:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 801fe0a:	f107 030c 	add.w	r3, r7, #12
 801fe0e:	9300      	str	r3, [sp, #0]
 801fe10:	6a3b      	ldr	r3, [r7, #32]
 801fe12:	693a      	ldr	r2, [r7, #16]
 801fe14:	6979      	ldr	r1, [r7, #20]
 801fe16:	6878      	ldr	r0, [r7, #4]
 801fe18:	f7ff fba8 	bl	801f56c <ws_handshake>
    c->is_websocket = 1;
 801fe1c:	687a      	ldr	r2, [r7, #4]
 801fe1e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801fe22:	f043 0302 	orr.w	r3, r3, #2
 801fe26:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->is_resp = 0;
 801fe2a:	687a      	ldr	r2, [r7, #4]
 801fe2c:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 801fe30:	f023 0301 	bic.w	r3, r3, #1
 801fe34:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    mg_call(c, MG_EV_WS_OPEN, hm);
 801fe38:	683a      	ldr	r2, [r7, #0]
 801fe3a:	210c      	movs	r1, #12
 801fe3c:	6878      	ldr	r0, [r7, #4]
 801fe3e:	f7e6 fd4c 	bl	80068da <mg_call>
}
 801fe42:	bf00      	nop
 801fe44:	3718      	adds	r7, #24
 801fe46:	46bd      	mov	sp, r7
 801fe48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fe4c:	b002      	add	sp, #8
 801fe4e:	4770      	bx	lr
 801fe50:	08026b60 	.word	0x08026b60
 801fe54:	0801faf9 	.word	0x0801faf9
 801fe58:	08026b74 	.word	0x08026b74
 801fe5c:	08024a28 	.word	0x08024a28
 801fe60:	08026b8c 	.word	0x08026b8c

0801fe64 <mg_phy_id_to_str>:
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31,
  MG_PHY_ICS189432_REG_POLL = 17
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 801fe64:	b480      	push	{r7}
 801fe66:	b083      	sub	sp, #12
 801fe68:	af00      	add	r7, sp, #0
 801fe6a:	4603      	mov	r3, r0
 801fe6c:	460a      	mov	r2, r1
 801fe6e:	80fb      	strh	r3, [r7, #6]
 801fe70:	4613      	mov	r3, r2
 801fe72:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 801fe74:	88fb      	ldrh	r3, [r7, #6]
 801fe76:	2b22      	cmp	r3, #34	@ 0x22
 801fe78:	dc40      	bgt.n	801fefc <mg_phy_id_to_str+0x98>
 801fe7a:	2b07      	cmp	r3, #7
 801fe7c:	db63      	blt.n	801ff46 <mg_phy_id_to_str+0xe2>
 801fe7e:	3b07      	subs	r3, #7
 801fe80:	2b1b      	cmp	r3, #27
 801fe82:	d860      	bhi.n	801ff46 <mg_phy_id_to_str+0xe2>
 801fe84:	a201      	add	r2, pc, #4	@ (adr r2, 801fe8c <mg_phy_id_to_str+0x28>)
 801fe86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe8a:	bf00      	nop
 801fe8c:	0801ff3b 	.word	0x0801ff3b
 801fe90:	0801ff47 	.word	0x0801ff47
 801fe94:	0801ff47 	.word	0x0801ff47
 801fe98:	0801ff47 	.word	0x0801ff47
 801fe9c:	0801ff47 	.word	0x0801ff47
 801fea0:	0801ff47 	.word	0x0801ff47
 801fea4:	0801ff47 	.word	0x0801ff47
 801fea8:	0801ff47 	.word	0x0801ff47
 801feac:	0801ff47 	.word	0x0801ff47
 801feb0:	0801ff47 	.word	0x0801ff47
 801feb4:	0801ff47 	.word	0x0801ff47
 801feb8:	0801ff47 	.word	0x0801ff47
 801febc:	0801ff47 	.word	0x0801ff47
 801fec0:	0801ff47 	.word	0x0801ff47
 801fec4:	0801ff43 	.word	0x0801ff43
 801fec8:	0801ff47 	.word	0x0801ff47
 801fecc:	0801ff47 	.word	0x0801ff47
 801fed0:	0801ff47 	.word	0x0801ff47
 801fed4:	0801ff47 	.word	0x0801ff47
 801fed8:	0801ff47 	.word	0x0801ff47
 801fedc:	0801ff47 	.word	0x0801ff47
 801fee0:	0801ff3f 	.word	0x0801ff3f
 801fee4:	0801ff47 	.word	0x0801ff47
 801fee8:	0801ff47 	.word	0x0801ff47
 801feec:	0801ff47 	.word	0x0801ff47
 801fef0:	0801ff47 	.word	0x0801ff47
 801fef4:	0801ff47 	.word	0x0801ff47
 801fef8:	0801ff37 	.word	0x0801ff37
 801fefc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ff00:	d121      	bne.n	801ff46 <mg_phy_id_to_str+0xe2>
    case MG_PHY_DP83x:
      switch (id2) {
 801ff02:	88bb      	ldrh	r3, [r7, #4]
 801ff04:	f24a 2231 	movw	r2, #41521	@ 0xa231
 801ff08:	4293      	cmp	r3, r2
 801ff0a:	d00c      	beq.n	801ff26 <mg_phy_id_to_str+0xc2>
 801ff0c:	f24a 2231 	movw	r2, #41521	@ 0xa231
 801ff10:	4293      	cmp	r3, r2
 801ff12:	dc0e      	bgt.n	801ff32 <mg_phy_id_to_str+0xce>
 801ff14:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 801ff18:	4293      	cmp	r3, r2
 801ff1a:	d006      	beq.n	801ff2a <mg_phy_id_to_str+0xc6>
 801ff1c:	f24a 1240 	movw	r2, #41280	@ 0xa140
 801ff20:	4293      	cmp	r3, r2
 801ff22:	d004      	beq.n	801ff2e <mg_phy_id_to_str+0xca>
 801ff24:	e005      	b.n	801ff32 <mg_phy_id_to_str+0xce>
        case MG_PHY_DP83867:
          return "DP83867";
 801ff26:	4b0b      	ldr	r3, [pc, #44]	@ (801ff54 <mg_phy_id_to_str+0xf0>)
 801ff28:	e00e      	b.n	801ff48 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83848:
          return "DP83848";
 801ff2a:	4b0b      	ldr	r3, [pc, #44]	@ (801ff58 <mg_phy_id_to_str+0xf4>)
 801ff2c:	e00c      	b.n	801ff48 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83825:
          return "DP83825";
 801ff2e:	4b0b      	ldr	r3, [pc, #44]	@ (801ff5c <mg_phy_id_to_str+0xf8>)
 801ff30:	e00a      	b.n	801ff48 <mg_phy_id_to_str+0xe4>
        default:
          return "DP83x";
 801ff32:	4b0b      	ldr	r3, [pc, #44]	@ (801ff60 <mg_phy_id_to_str+0xfc>)
 801ff34:	e008      	b.n	801ff48 <mg_phy_id_to_str+0xe4>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 801ff36:	4b0b      	ldr	r3, [pc, #44]	@ (801ff64 <mg_phy_id_to_str+0x100>)
 801ff38:	e006      	b.n	801ff48 <mg_phy_id_to_str+0xe4>
    case MG_PHY_LAN87x:
      return "LAN87x";
 801ff3a:	4b0b      	ldr	r3, [pc, #44]	@ (801ff68 <mg_phy_id_to_str+0x104>)
 801ff3c:	e004      	b.n	801ff48 <mg_phy_id_to_str+0xe4>
    case MG_PHY_RTL8201:
      return "RTL8201";
 801ff3e:	4b0b      	ldr	r3, [pc, #44]	@ (801ff6c <mg_phy_id_to_str+0x108>)
 801ff40:	e002      	b.n	801ff48 <mg_phy_id_to_str+0xe4>
    case MG_PHY_ICS1894x:
      return "ICS1894x";
 801ff42:	4b0b      	ldr	r3, [pc, #44]	@ (801ff70 <mg_phy_id_to_str+0x10c>)
 801ff44:	e000      	b.n	801ff48 <mg_phy_id_to_str+0xe4>
    default:
      return "unknown";
 801ff46:	4b0b      	ldr	r3, [pc, #44]	@ (801ff74 <mg_phy_id_to_str+0x110>)
  }
  (void) id2;
}
 801ff48:	4618      	mov	r0, r3
 801ff4a:	370c      	adds	r7, #12
 801ff4c:	46bd      	mov	sp, r7
 801ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff52:	4770      	bx	lr
 801ff54:	08026ba4 	.word	0x08026ba4
 801ff58:	08026bac 	.word	0x08026bac
 801ff5c:	08026bb4 	.word	0x08026bb4
 801ff60:	08026bbc 	.word	0x08026bbc
 801ff64:	08026bc4 	.word	0x08026bc4
 801ff68:	08026bcc 	.word	0x08026bcc
 801ff6c:	08026bd4 	.word	0x08026bd4
 801ff70:	08026bdc 	.word	0x08026bdc
 801ff74:	08026be8 	.word	0x08026be8

0801ff78 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 801ff78:	b5b0      	push	{r4, r5, r7, lr}
 801ff7a:	b084      	sub	sp, #16
 801ff7c:	af00      	add	r7, sp, #0
 801ff7e:	6078      	str	r0, [r7, #4]
 801ff80:	460b      	mov	r3, r1
 801ff82:	70fb      	strb	r3, [r7, #3]
 801ff84:	4613      	mov	r3, r2
 801ff86:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	685b      	ldr	r3, [r3, #4]
 801ff8c:	78f8      	ldrb	r0, [r7, #3]
 801ff8e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801ff92:	2100      	movs	r1, #0
 801ff94:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 801ff96:	bf00      	nop
 801ff98:	687b      	ldr	r3, [r7, #4]
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	78fa      	ldrb	r2, [r7, #3]
 801ff9e:	2100      	movs	r1, #0
 801ffa0:	4610      	mov	r0, r2
 801ffa2:	4798      	blx	r3
 801ffa4:	4603      	mov	r3, r0
 801ffa6:	b21b      	sxth	r3, r3
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	dbf5      	blt.n	801ff98 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 801ffac:	687b      	ldr	r3, [r7, #4]
 801ffae:	681b      	ldr	r3, [r3, #0]
 801ffb0:	78fa      	ldrb	r2, [r7, #3]
 801ffb2:	2102      	movs	r1, #2
 801ffb4:	4610      	mov	r0, r2
 801ffb6:	4798      	blx	r3
 801ffb8:	4603      	mov	r3, r0
 801ffba:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 801ffbc:	687b      	ldr	r3, [r7, #4]
 801ffbe:	681b      	ldr	r3, [r3, #0]
 801ffc0:	78fa      	ldrb	r2, [r7, #3]
 801ffc2:	2103      	movs	r1, #3
 801ffc4:	4610      	mov	r0, r2
 801ffc6:	4798      	blx	r3
 801ffc8:	4603      	mov	r3, r0
 801ffca:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 801ffcc:	4b42      	ldr	r3, [pc, #264]	@ (80200d8 <mg_phy_init+0x160>)
 801ffce:	681b      	ldr	r3, [r3, #0]
 801ffd0:	2b01      	cmp	r3, #1
 801ffd2:	dd14      	ble.n	801fffe <mg_phy_init+0x86>
 801ffd4:	4b41      	ldr	r3, [pc, #260]	@ (80200dc <mg_phy_init+0x164>)
 801ffd6:	f245 6224 	movw	r2, #22052	@ 0x5624
 801ffda:	4941      	ldr	r1, [pc, #260]	@ (80200e0 <mg_phy_init+0x168>)
 801ffdc:	2002      	movs	r0, #2
 801ffde:	f7ec f9ad 	bl	800c33c <mg_log_prefix>
 801ffe2:	89fc      	ldrh	r4, [r7, #14]
 801ffe4:	89bd      	ldrh	r5, [r7, #12]
 801ffe6:	89ba      	ldrh	r2, [r7, #12]
 801ffe8:	89fb      	ldrh	r3, [r7, #14]
 801ffea:	4611      	mov	r1, r2
 801ffec:	4618      	mov	r0, r3
 801ffee:	f7ff ff39 	bl	801fe64 <mg_phy_id_to_str>
 801fff2:	4603      	mov	r3, r0
 801fff4:	462a      	mov	r2, r5
 801fff6:	4621      	mov	r1, r4
 801fff8:	483a      	ldr	r0, [pc, #232]	@ (80200e4 <mg_phy_init+0x16c>)
 801fffa:	f7ec f9ef 	bl	800c3dc <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 801fffe:	89fb      	ldrh	r3, [r7, #14]
 8020000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020004:	d11f      	bne.n	8020046 <mg_phy_init+0xce>
 8020006:	89bb      	ldrh	r3, [r7, #12]
 8020008:	f24a 2231 	movw	r2, #41521	@ 0xa231
 802000c:	4293      	cmp	r3, r2
 802000e:	d11a      	bne.n	8020046 <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 8020010:	687b      	ldr	r3, [r7, #4]
 8020012:	685b      	ldr	r3, [r3, #4]
 8020014:	78f8      	ldrb	r0, [r7, #3]
 8020016:	221f      	movs	r2, #31
 8020018:	210d      	movs	r1, #13
 802001a:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 802001c:	687b      	ldr	r3, [r7, #4]
 802001e:	685b      	ldr	r3, [r3, #4]
 8020020:	78f8      	ldrb	r0, [r7, #3]
 8020022:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8020026:	210e      	movs	r1, #14
 8020028:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 802002a:	687b      	ldr	r3, [r7, #4]
 802002c:	685b      	ldr	r3, [r3, #4]
 802002e:	78f8      	ldrb	r0, [r7, #3]
 8020030:	f244 021f 	movw	r2, #16415	@ 0x401f
 8020034:	210d      	movs	r1, #13
 8020036:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	685b      	ldr	r3, [r3, #4]
 802003c:	78f8      	ldrb	r0, [r7, #3]
 802003e:	f240 120d 	movw	r2, #269	@ 0x10d
 8020042:	210e      	movs	r1, #14
 8020044:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 8020046:	78bb      	ldrb	r3, [r7, #2]
 8020048:	f003 0302 	and.w	r3, r3, #2
 802004c:	2b00      	cmp	r3, #0
 802004e:	d12e      	bne.n	80200ae <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8020050:	89fb      	ldrh	r3, [r7, #14]
 8020052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020056:	d110      	bne.n	802007a <mg_phy_init+0x102>
 8020058:	89bb      	ldrh	r3, [r7, #12]
 802005a:	f24a 2231 	movw	r2, #41521	@ 0xa231
 802005e:	4293      	cmp	r3, r2
 8020060:	d00b      	beq.n	802007a <mg_phy_init+0x102>
 8020062:	89bb      	ldrh	r3, [r7, #12]
 8020064:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8020068:	4293      	cmp	r3, r2
 802006a:	d006      	beq.n	802007a <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 802006c:	687b      	ldr	r3, [r7, #4]
 802006e:	685b      	ldr	r3, [r3, #4]
 8020070:	78f8      	ldrb	r0, [r7, #3]
 8020072:	2281      	movs	r2, #129	@ 0x81
 8020074:	2117      	movs	r1, #23
 8020076:	4798      	blx	r3
 8020078:	e019      	b.n	80200ae <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 802007a:	89fb      	ldrh	r3, [r7, #14]
 802007c:	2b22      	cmp	r3, #34	@ 0x22
 802007e:	d116      	bne.n	80200ae <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 8020084:	687b      	ldr	r3, [r7, #4]
 8020086:	681b      	ldr	r3, [r3, #0]
 8020088:	78fa      	ldrb	r2, [r7, #3]
 802008a:	2100      	movs	r1, #0
 802008c:	4610      	mov	r0, r2
 802008e:	4798      	blx	r3
 8020090:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8020092:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020096:	b29a      	uxth	r2, r3
 8020098:	78fb      	ldrb	r3, [r7, #3]
 802009a:	2100      	movs	r1, #0
 802009c:	4618      	mov	r0, r3
 802009e:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	685b      	ldr	r3, [r3, #4]
 80200a4:	78f8      	ldrb	r0, [r7, #3]
 80200a6:	f248 1280 	movw	r2, #33152	@ 0x8180
 80200aa:	211f      	movs	r1, #31
 80200ac:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 80200ae:	78bb      	ldrb	r3, [r7, #2]
 80200b0:	f003 0301 	and.w	r3, r3, #1
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	d00a      	beq.n	80200ce <mg_phy_init+0x156>
 80200b8:	89fb      	ldrh	r3, [r7, #14]
 80200ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80200be:	d106      	bne.n	80200ce <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	685b      	ldr	r3, [r3, #4]
 80200c4:	78f8      	ldrb	r0, [r7, #3]
 80200c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80200ca:	2118      	movs	r1, #24
 80200cc:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 80200ce:	bf00      	nop
 80200d0:	3710      	adds	r7, #16
 80200d2:	46bd      	mov	sp, r7
 80200d4:	bdb0      	pop	{r4, r5, r7, pc}
 80200d6:	bf00      	nop
 80200d8:	24000258 	.word	0x24000258
 80200dc:	080280e8 	.word	0x080280e8
 80200e0:	080241e8 	.word	0x080241e8
 80200e4:	08026bf0 	.word	0x08026bf0

080200e8 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 80200e8:	b580      	push	{r7, lr}
 80200ea:	b08a      	sub	sp, #40	@ 0x28
 80200ec:	af00      	add	r7, sp, #0
 80200ee:	60f8      	str	r0, [r7, #12]
 80200f0:	607a      	str	r2, [r7, #4]
 80200f2:	603b      	str	r3, [r7, #0]
 80200f4:	460b      	mov	r3, r1
 80200f6:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 80200f8:	2300      	movs	r3, #0
 80200fa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 80200fe:	68fb      	ldr	r3, [r7, #12]
 8020100:	681b      	ldr	r3, [r3, #0]
 8020102:	7afa      	ldrb	r2, [r7, #11]
 8020104:	2101      	movs	r1, #1
 8020106:	4610      	mov	r0, r2
 8020108:	4798      	blx	r3
 802010a:	4603      	mov	r3, r0
 802010c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 802010e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020110:	f003 0320 	and.w	r3, r3, #32
 8020114:	2b00      	cmp	r3, #0
 8020116:	d00c      	beq.n	8020132 <mg_phy_up+0x4a>
 8020118:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802011a:	f003 0304 	and.w	r3, r3, #4
 802011e:	2b00      	cmp	r3, #0
 8020120:	d107      	bne.n	8020132 <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8020122:	68fb      	ldr	r3, [r7, #12]
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	7afa      	ldrb	r2, [r7, #11]
 8020128:	2101      	movs	r1, #1
 802012a:	4610      	mov	r0, r2
 802012c:	4798      	blx	r3
 802012e:	4603      	mov	r3, r0
 8020130:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8020132:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020134:	f003 0304 	and.w	r3, r3, #4
 8020138:	2b00      	cmp	r3, #0
 802013a:	bf14      	ite	ne
 802013c:	2301      	movne	r3, #1
 802013e:	2300      	moveq	r3, #0
 8020140:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8020144:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8020148:	2b00      	cmp	r3, #0
 802014a:	f000 80dc 	beq.w	8020306 <mg_phy_up+0x21e>
 802014e:	687b      	ldr	r3, [r7, #4]
 8020150:	2b00      	cmp	r3, #0
 8020152:	f000 80d8 	beq.w	8020306 <mg_phy_up+0x21e>
 8020156:	683b      	ldr	r3, [r7, #0]
 8020158:	2b00      	cmp	r3, #0
 802015a:	f000 80d4 	beq.w	8020306 <mg_phy_up+0x21e>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 802015e:	68fb      	ldr	r3, [r7, #12]
 8020160:	681b      	ldr	r3, [r3, #0]
 8020162:	7afa      	ldrb	r2, [r7, #11]
 8020164:	2102      	movs	r1, #2
 8020166:	4610      	mov	r0, r2
 8020168:	4798      	blx	r3
 802016a:	4603      	mov	r3, r0
 802016c:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 802016e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020174:	d14b      	bne.n	802020e <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8020176:	68fb      	ldr	r3, [r7, #12]
 8020178:	681b      	ldr	r3, [r3, #0]
 802017a:	7afa      	ldrb	r2, [r7, #11]
 802017c:	2103      	movs	r1, #3
 802017e:	4610      	mov	r0, r2
 8020180:	4798      	blx	r3
 8020182:	4603      	mov	r3, r0
 8020184:	833b      	strh	r3, [r7, #24]
      if (id2 == MG_PHY_DP83867) {
 8020186:	8b3b      	ldrh	r3, [r7, #24]
 8020188:	f24a 2231 	movw	r2, #41521	@ 0xa231
 802018c:	4293      	cmp	r3, r2
 802018e:	d120      	bne.n	80201d2 <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8020190:	68fb      	ldr	r3, [r7, #12]
 8020192:	681b      	ldr	r3, [r3, #0]
 8020194:	7afa      	ldrb	r2, [r7, #11]
 8020196:	2111      	movs	r1, #17
 8020198:	4610      	mov	r0, r2
 802019a:	4798      	blx	r3
 802019c:	4603      	mov	r3, r0
 802019e:	82bb      	strh	r3, [r7, #20]
        *full_duplex = physts & MG_BIT(13);
 80201a0:	8abb      	ldrh	r3, [r7, #20]
 80201a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80201a6:	2b00      	cmp	r3, #0
 80201a8:	bf14      	ite	ne
 80201aa:	2301      	movne	r3, #1
 80201ac:	2300      	moveq	r3, #0
 80201ae:	b2da      	uxtb	r2, r3
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 80201b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80201b8:	2b00      	cmp	r3, #0
 80201ba:	db06      	blt.n	80201ca <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 80201bc:	8abb      	ldrh	r3, [r7, #20]
 80201be:	0b9b      	lsrs	r3, r3, #14
 80201c0:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 80201c2:	f003 0301 	and.w	r3, r3, #1
 80201c6:	b2da      	uxtb	r2, r3
 80201c8:	e000      	b.n	80201cc <mg_phy_up+0xe4>
 80201ca:	2202      	movs	r2, #2
 80201cc:	683b      	ldr	r3, [r7, #0]
 80201ce:	701a      	strb	r2, [r3, #0]
 80201d0:	e099      	b.n	8020306 <mg_phy_up+0x21e>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 80201d2:	68fb      	ldr	r3, [r7, #12]
 80201d4:	681b      	ldr	r3, [r3, #0]
 80201d6:	7afa      	ldrb	r2, [r7, #11]
 80201d8:	2110      	movs	r1, #16
 80201da:	4610      	mov	r0, r2
 80201dc:	4798      	blx	r3
 80201de:	4603      	mov	r3, r0
 80201e0:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(2);
 80201e2:	8afb      	ldrh	r3, [r7, #22]
 80201e4:	f003 0304 	and.w	r3, r3, #4
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	bf14      	ite	ne
 80201ec:	2301      	movne	r3, #1
 80201ee:	2300      	moveq	r3, #0
 80201f0:	b2da      	uxtb	r2, r3
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 80201f6:	8afb      	ldrh	r3, [r7, #22]
 80201f8:	f003 0302 	and.w	r3, r3, #2
 80201fc:	2b00      	cmp	r3, #0
 80201fe:	bf0c      	ite	eq
 8020200:	2301      	moveq	r3, #1
 8020202:	2300      	movne	r3, #0
 8020204:	b2db      	uxtb	r3, r3
 8020206:	461a      	mov	r2, r3
 8020208:	683b      	ldr	r3, [r7, #0]
 802020a:	701a      	strb	r2, [r3, #0]
 802020c:	e07b      	b.n	8020306 <mg_phy_up+0x21e>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 802020e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020210:	2b22      	cmp	r3, #34	@ 0x22
 8020212:	d11d      	bne.n	8020250 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 8020214:	68fb      	ldr	r3, [r7, #12]
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	7afa      	ldrb	r2, [r7, #11]
 802021a:	211e      	movs	r1, #30
 802021c:	4610      	mov	r0, r2
 802021e:	4798      	blx	r3
 8020220:	4603      	mov	r3, r0
 8020222:	837b      	strh	r3, [r7, #26]
      *full_duplex = pc1r & MG_BIT(2);
 8020224:	8b7b      	ldrh	r3, [r7, #26]
 8020226:	f003 0304 	and.w	r3, r3, #4
 802022a:	2b00      	cmp	r3, #0
 802022c:	bf14      	ite	ne
 802022e:	2301      	movne	r3, #1
 8020230:	2300      	moveq	r3, #0
 8020232:	b2da      	uxtb	r2, r3
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8020238:	8b7b      	ldrh	r3, [r7, #26]
 802023a:	f003 0303 	and.w	r3, r3, #3
 802023e:	2b01      	cmp	r3, #1
 8020240:	bf14      	ite	ne
 8020242:	2301      	movne	r3, #1
 8020244:	2300      	moveq	r3, #0
 8020246:	b2db      	uxtb	r3, r3
 8020248:	461a      	mov	r2, r3
 802024a:	683b      	ldr	r3, [r7, #0]
 802024c:	701a      	strb	r2, [r3, #0]
 802024e:	e05a      	b.n	8020306 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_LAN87x) {
 8020250:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020252:	2b07      	cmp	r3, #7
 8020254:	d11a      	bne.n	802028c <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 8020256:	68fb      	ldr	r3, [r7, #12]
 8020258:	681b      	ldr	r3, [r3, #0]
 802025a:	7afa      	ldrb	r2, [r7, #11]
 802025c:	211f      	movs	r1, #31
 802025e:	4610      	mov	r0, r2
 8020260:	4798      	blx	r3
 8020262:	4603      	mov	r3, r0
 8020264:	83bb      	strh	r3, [r7, #28]
      *full_duplex = scsr & MG_BIT(4);
 8020266:	8bbb      	ldrh	r3, [r7, #28]
 8020268:	f003 0310 	and.w	r3, r3, #16
 802026c:	2b00      	cmp	r3, #0
 802026e:	bf14      	ite	ne
 8020270:	2301      	movne	r3, #1
 8020272:	2300      	moveq	r3, #0
 8020274:	b2da      	uxtb	r2, r3
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 802027a:	8bbb      	ldrh	r3, [r7, #28]
 802027c:	08db      	lsrs	r3, r3, #3
 802027e:	b2db      	uxtb	r3, r3
 8020280:	f003 0301 	and.w	r3, r3, #1
 8020284:	b2da      	uxtb	r2, r3
 8020286:	683b      	ldr	r3, [r7, #0]
 8020288:	701a      	strb	r2, [r3, #0]
 802028a:	e03c      	b.n	8020306 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_RTL8201) {
 802028c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802028e:	2b1c      	cmp	r3, #28
 8020290:	d11a      	bne.n	80202c8 <mg_phy_up+0x1e0>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 8020292:	68fb      	ldr	r3, [r7, #12]
 8020294:	681b      	ldr	r3, [r3, #0]
 8020296:	7afa      	ldrb	r2, [r7, #11]
 8020298:	2100      	movs	r1, #0
 802029a:	4610      	mov	r0, r2
 802029c:	4798      	blx	r3
 802029e:	4603      	mov	r3, r0
 80202a0:	83fb      	strh	r3, [r7, #30]
      *full_duplex = bcr & MG_BIT(8);
 80202a2:	8bfb      	ldrh	r3, [r7, #30]
 80202a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80202a8:	2b00      	cmp	r3, #0
 80202aa:	bf14      	ite	ne
 80202ac:	2301      	movne	r3, #1
 80202ae:	2300      	moveq	r3, #0
 80202b0:	b2da      	uxtb	r2, r3
 80202b2:	687b      	ldr	r3, [r7, #4]
 80202b4:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 80202b6:	8bfb      	ldrh	r3, [r7, #30]
 80202b8:	0b5b      	lsrs	r3, r3, #13
 80202ba:	b2db      	uxtb	r3, r3
 80202bc:	f003 0301 	and.w	r3, r3, #1
 80202c0:	b2da      	uxtb	r2, r3
 80202c2:	683b      	ldr	r3, [r7, #0]
 80202c4:	701a      	strb	r2, [r3, #0]
 80202c6:	e01e      	b.n	8020306 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_ICS1894x) {
 80202c8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80202ca:	2b15      	cmp	r3, #21
 80202cc:	d11b      	bne.n	8020306 <mg_phy_up+0x21e>
      uint16_t poll_reg = phy->read_reg(phy_addr, MG_PHY_ICS189432_REG_POLL);
 80202ce:	68fb      	ldr	r3, [r7, #12]
 80202d0:	681b      	ldr	r3, [r3, #0]
 80202d2:	7afa      	ldrb	r2, [r7, #11]
 80202d4:	2111      	movs	r1, #17
 80202d6:	4610      	mov	r0, r2
 80202d8:	4798      	blx	r3
 80202da:	4603      	mov	r3, r0
 80202dc:	843b      	strh	r3, [r7, #32]
      *full_duplex = poll_reg & MG_BIT(14);
 80202de:	8c3b      	ldrh	r3, [r7, #32]
 80202e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80202e4:	2b00      	cmp	r3, #0
 80202e6:	bf14      	ite	ne
 80202e8:	2301      	movne	r3, #1
 80202ea:	2300      	moveq	r3, #0
 80202ec:	b2da      	uxtb	r2, r3
 80202ee:	687b      	ldr	r3, [r7, #4]
 80202f0:	701a      	strb	r2, [r3, #0]
      *speed = (poll_reg & MG_BIT(15)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 80202f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80202f6:	13db      	asrs	r3, r3, #15
 80202f8:	b21b      	sxth	r3, r3
 80202fa:	b2db      	uxtb	r3, r3
 80202fc:	f003 0301 	and.w	r3, r3, #1
 8020300:	b2da      	uxtb	r2, r3
 8020302:	683b      	ldr	r3, [r7, #0]
 8020304:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 8020306:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 802030a:	4618      	mov	r0, r3
 802030c:	3728      	adds	r7, #40	@ 0x28
 802030e:	46bd      	mov	sp, r7
 8020310:	bd80      	pop	{r7, pc}
	...

08020314 <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 8020314:	b480      	push	{r7}
 8020316:	b083      	sub	sp, #12
 8020318:	af00      	add	r7, sp, #0
 802031a:	4603      	mov	r3, r0
 802031c:	460a      	mov	r2, r1
 802031e:	71fb      	strb	r3, [r7, #7]
 8020320:	4613      	mov	r3, r2
 8020322:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 8020324:	4b17      	ldr	r3, [pc, #92]	@ (8020384 <eth_read_phy+0x70>)
 8020326:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 802032a:	4a16      	ldr	r2, [pc, #88]	@ (8020384 <eth_read_phy+0x70>)
 802032c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8020330:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 8020334:	4b13      	ldr	r3, [pc, #76]	@ (8020384 <eth_read_phy+0x70>)
 8020336:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 802033a:	79fb      	ldrb	r3, [r7, #7]
 802033c:	0559      	lsls	r1, r3, #21
 802033e:	79bb      	ldrb	r3, [r7, #6]
 8020340:	041b      	lsls	r3, r3, #16
 8020342:	430b      	orrs	r3, r1
 8020344:	4313      	orrs	r3, r2
 8020346:	4a0f      	ldr	r2, [pc, #60]	@ (8020384 <eth_read_phy+0x70>)
 8020348:	f043 030c 	orr.w	r3, r3, #12
 802034c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8020350:	4b0c      	ldr	r3, [pc, #48]	@ (8020384 <eth_read_phy+0x70>)
 8020352:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8020356:	4a0b      	ldr	r2, [pc, #44]	@ (8020384 <eth_read_phy+0x70>)
 8020358:	f043 0301 	orr.w	r3, r3, #1
 802035c:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8020360:	bf00      	nop
 8020362:	4b08      	ldr	r3, [pc, #32]	@ (8020384 <eth_read_phy+0x70>)
 8020364:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8020368:	f003 0301 	and.w	r3, r3, #1
 802036c:	2b00      	cmp	r3, #0
 802036e:	d1f8      	bne.n	8020362 <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 8020370:	4b04      	ldr	r3, [pc, #16]	@ (8020384 <eth_read_phy+0x70>)
 8020372:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8020376:	b29b      	uxth	r3, r3
}
 8020378:	4618      	mov	r0, r3
 802037a:	370c      	adds	r7, #12
 802037c:	46bd      	mov	sp, r7
 802037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020382:	4770      	bx	lr
 8020384:	40028000 	.word	0x40028000

08020388 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8020388:	b480      	push	{r7}
 802038a:	b083      	sub	sp, #12
 802038c:	af00      	add	r7, sp, #0
 802038e:	4603      	mov	r3, r0
 8020390:	71fb      	strb	r3, [r7, #7]
 8020392:	460b      	mov	r3, r1
 8020394:	71bb      	strb	r3, [r7, #6]
 8020396:	4613      	mov	r3, r2
 8020398:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 802039a:	4a18      	ldr	r2, [pc, #96]	@ (80203fc <eth_write_phy+0x74>)
 802039c:	88bb      	ldrh	r3, [r7, #4]
 802039e:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 80203a2:	4b16      	ldr	r3, [pc, #88]	@ (80203fc <eth_write_phy+0x74>)
 80203a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80203a8:	4a14      	ldr	r2, [pc, #80]	@ (80203fc <eth_write_phy+0x74>)
 80203aa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80203ae:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 80203b2:	4b12      	ldr	r3, [pc, #72]	@ (80203fc <eth_write_phy+0x74>)
 80203b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80203b8:	79fb      	ldrb	r3, [r7, #7]
 80203ba:	0559      	lsls	r1, r3, #21
 80203bc:	79bb      	ldrb	r3, [r7, #6]
 80203be:	041b      	lsls	r3, r3, #16
 80203c0:	430b      	orrs	r3, r1
 80203c2:	4313      	orrs	r3, r2
 80203c4:	4a0d      	ldr	r2, [pc, #52]	@ (80203fc <eth_write_phy+0x74>)
 80203c6:	f043 0304 	orr.w	r3, r3, #4
 80203ca:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 80203ce:	4b0b      	ldr	r3, [pc, #44]	@ (80203fc <eth_write_phy+0x74>)
 80203d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80203d4:	4a09      	ldr	r2, [pc, #36]	@ (80203fc <eth_write_phy+0x74>)
 80203d6:	f043 0301 	orr.w	r3, r3, #1
 80203da:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 80203de:	bf00      	nop
 80203e0:	4b06      	ldr	r3, [pc, #24]	@ (80203fc <eth_write_phy+0x74>)
 80203e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80203e6:	f003 0301 	and.w	r3, r3, #1
 80203ea:	2b00      	cmp	r3, #0
 80203ec:	d1f8      	bne.n	80203e0 <eth_write_phy+0x58>
}
 80203ee:	bf00      	nop
 80203f0:	bf00      	nop
 80203f2:	370c      	adds	r7, #12
 80203f4:	46bd      	mov	sp, r7
 80203f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203fa:	4770      	bx	lr
 80203fc:	40028000 	.word	0x40028000

08020400 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 8020400:	b580      	push	{r7, lr}
 8020402:	b08a      	sub	sp, #40	@ 0x28
 8020404:	af00      	add	r7, sp, #0
 8020406:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8020408:	687b      	ldr	r3, [r7, #4]
 802040a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802040c:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 802040e:	4a90      	ldr	r2, [pc, #576]	@ (8020650 <mg_tcpip_driver_stm32h_init+0x250>)
 8020410:	687b      	ldr	r3, [r7, #4]
 8020412:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8020414:	69bb      	ldr	r3, [r7, #24]
 8020416:	2b00      	cmp	r3, #0
 8020418:	d002      	beq.n	8020420 <mg_tcpip_driver_stm32h_init+0x20>
 802041a:	69bb      	ldr	r3, [r7, #24]
 802041c:	791b      	ldrb	r3, [r3, #4]
 802041e:	e000      	b.n	8020422 <mg_tcpip_driver_stm32h_init+0x22>
 8020420:	2300      	movs	r3, #0
 8020422:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 8020424:	69bb      	ldr	r3, [r7, #24]
 8020426:	2b00      	cmp	r3, #0
 8020428:	d002      	beq.n	8020430 <mg_tcpip_driver_stm32h_init+0x30>
 802042a:	69bb      	ldr	r3, [r7, #24]
 802042c:	795b      	ldrb	r3, [r3, #5]
 802042e:	e000      	b.n	8020432 <mg_tcpip_driver_stm32h_init+0x32>
 8020430:	2302      	movs	r3, #2
 8020432:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8020434:	2300      	movs	r3, #0
 8020436:	627b      	str	r3, [r7, #36]	@ 0x24
 8020438:	e017      	b.n	802046a <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 802043a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802043c:	f240 6204 	movw	r2, #1540	@ 0x604
 8020440:	fb02 f303 	mul.w	r3, r2, r3
 8020444:	4a83      	ldr	r2, [pc, #524]	@ (8020654 <mg_tcpip_driver_stm32h_init+0x254>)
 8020446:	4413      	add	r3, r2
 8020448:	4619      	mov	r1, r3
 802044a:	4a83      	ldr	r2, [pc, #524]	@ (8020658 <mg_tcpip_driver_stm32h_init+0x258>)
 802044c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802044e:	011b      	lsls	r3, r3, #4
 8020450:	4413      	add	r3, r2
 8020452:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 8020454:	4a80      	ldr	r2, [pc, #512]	@ (8020658 <mg_tcpip_driver_stm32h_init+0x258>)
 8020456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020458:	011b      	lsls	r3, r3, #4
 802045a:	4413      	add	r3, r2
 802045c:	330c      	adds	r3, #12
 802045e:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8020462:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8020464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020466:	3301      	adds	r3, #1
 8020468:	627b      	str	r3, [r7, #36]	@ 0x24
 802046a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802046c:	2b03      	cmp	r3, #3
 802046e:	dde4      	ble.n	802043a <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8020470:	2300      	movs	r3, #0
 8020472:	623b      	str	r3, [r7, #32]
 8020474:	e00f      	b.n	8020496 <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8020476:	6a3b      	ldr	r3, [r7, #32]
 8020478:	f240 6204 	movw	r2, #1540	@ 0x604
 802047c:	fb02 f303 	mul.w	r3, r2, r3
 8020480:	4a76      	ldr	r2, [pc, #472]	@ (802065c <mg_tcpip_driver_stm32h_init+0x25c>)
 8020482:	4413      	add	r3, r2
 8020484:	4619      	mov	r1, r3
 8020486:	4a76      	ldr	r2, [pc, #472]	@ (8020660 <mg_tcpip_driver_stm32h_init+0x260>)
 8020488:	6a3b      	ldr	r3, [r7, #32]
 802048a:	011b      	lsls	r3, r3, #4
 802048c:	4413      	add	r3, r2
 802048e:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8020490:	6a3b      	ldr	r3, [r7, #32]
 8020492:	3301      	adds	r3, #1
 8020494:	623b      	str	r3, [r7, #32]
 8020496:	6a3b      	ldr	r3, [r7, #32]
 8020498:	2b03      	cmp	r3, #3
 802049a:	ddec      	ble.n	8020476 <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 802049c:	4b71      	ldr	r3, [pc, #452]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 802049e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80204a2:	681b      	ldr	r3, [r3, #0]
 80204a4:	4a6f      	ldr	r2, [pc, #444]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80204a6:	f043 0301 	orr.w	r3, r3, #1
 80204aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80204ae:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 80204b0:	2300      	movs	r3, #0
 80204b2:	61fb      	str	r3, [r7, #28]
 80204b4:	e002      	b.n	80204bc <mg_tcpip_driver_stm32h_init+0xbc>
 80204b6:	69fb      	ldr	r3, [r7, #28]
 80204b8:	3301      	adds	r3, #1
 80204ba:	61fb      	str	r3, [r7, #28]
 80204bc:	69fb      	ldr	r3, [r7, #28]
 80204be:	2b03      	cmp	r3, #3
 80204c0:	ddf9      	ble.n	80204b6 <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 80204c2:	bf00      	nop
 80204c4:	4b67      	ldr	r3, [pc, #412]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80204c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80204ca:	681b      	ldr	r3, [r3, #0]
 80204cc:	f003 0301 	and.w	r3, r3, #1
 80204d0:	2b00      	cmp	r3, #0
 80204d2:	d1f7      	bne.n	80204c4 <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 80204d4:	69bb      	ldr	r3, [r7, #24]
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	d006      	beq.n	80204e8 <mg_tcpip_driver_stm32h_init+0xe8>
 80204da:	69bb      	ldr	r3, [r7, #24]
 80204dc:	681b      	ldr	r3, [r3, #0]
 80204de:	2b00      	cmp	r3, #0
 80204e0:	db02      	blt.n	80204e8 <mg_tcpip_driver_stm32h_init+0xe8>
 80204e2:	69bb      	ldr	r3, [r7, #24]
 80204e4:	681b      	ldr	r3, [r3, #0]
 80204e6:	e000      	b.n	80204ea <mg_tcpip_driver_stm32h_init+0xea>
 80204e8:	2307      	movs	r3, #7
 80204ea:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 80204ec:	693b      	ldr	r3, [r7, #16]
 80204ee:	021b      	lsls	r3, r3, #8
 80204f0:	4a5c      	ldr	r2, [pc, #368]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80204f2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80204f6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 80204fa:	4b5a      	ldr	r3, [pc, #360]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80204fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020500:	461a      	mov	r2, r3
 8020502:	2300      	movs	r3, #0
 8020504:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 8020506:	4b57      	ldr	r3, [pc, #348]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 8020508:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802050c:	685b      	ldr	r3, [r3, #4]
 802050e:	4a55      	ldr	r2, [pc, #340]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 8020510:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8020514:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8020518:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 802051a:	4b52      	ldr	r3, [pc, #328]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 802051c:	2200      	movs	r2, #0
 802051e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 8020522:	4b50      	ldr	r3, [pc, #320]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 8020524:	2280      	movs	r2, #128	@ 0x80
 8020526:	671a      	str	r2, [r3, #112]	@ 0x70
#if !MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(10);  // Perfect filtering
 8020528:	4b4e      	ldr	r3, [pc, #312]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 802052a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 802052e:	609a      	str	r2, [r3, #8]
#endif
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8020530:	4a4d      	ldr	r2, [pc, #308]	@ (8020668 <mg_tcpip_driver_stm32h_init+0x268>)
 8020532:	f107 0308 	add.w	r3, r7, #8
 8020536:	e892 0003 	ldmia.w	r2, {r0, r1}
 802053a:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 802053e:	7dba      	ldrb	r2, [r7, #22]
 8020540:	7df9      	ldrb	r1, [r7, #23]
 8020542:	f107 0308 	add.w	r3, r7, #8
 8020546:	4618      	mov	r0, r3
 8020548:	f7ff fd16 	bl	801ff78 <mg_phy_init>
  ETH->DMACRDLAR =
 802054c:	4a45      	ldr	r2, [pc, #276]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 802054e:	4b42      	ldr	r3, [pc, #264]	@ (8020658 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACRDLAR =
 8020550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8020554:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 8020558:	4b42      	ldr	r3, [pc, #264]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 802055a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802055e:	461a      	mov	r2, r3
 8020560:	2303      	movs	r3, #3
 8020562:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 8020566:	4a3f      	ldr	r2, [pc, #252]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 8020568:	4b40      	ldr	r3, [pc, #256]	@ (802066c <mg_tcpip_driver_stm32h_init+0x26c>)
  ETH->DMACRDTPR =
 802056a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802056e:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 8020572:	4a3c      	ldr	r2, [pc, #240]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 8020574:	4b3a      	ldr	r3, [pc, #232]	@ (8020660 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDLAR =
 8020576:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802057a:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 802057e:	4b39      	ldr	r3, [pc, #228]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 8020580:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020584:	461a      	mov	r2, r3
 8020586:	2303      	movs	r3, #3
 8020588:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 802058c:	4a35      	ldr	r2, [pc, #212]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 802058e:	4b34      	ldr	r3, [pc, #208]	@ (8020660 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDTPR =
 8020590:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8020594:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 8020598:	4b32      	ldr	r3, [pc, #200]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 802059a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802059e:	461a      	mov	r2, r3
 80205a0:	2300      	movs	r3, #0
 80205a2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 80205a6:	4b2f      	ldr	r3, [pc, #188]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80205a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80205ac:	461a      	mov	r2, r3
 80205ae:	f248 0340 	movw	r3, #32832	@ 0x8040
 80205b2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 80205b6:	4b2b      	ldr	r3, [pc, #172]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80205b8:	f24e 0203 	movw	r2, #57347	@ 0xe003
 80205bc:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 80205be:	4b29      	ldr	r3, [pc, #164]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80205c0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80205c4:	4a27      	ldr	r2, [pc, #156]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80205c6:	f043 0302 	orr.w	r3, r3, #2
 80205ca:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 80205ce:	4b25      	ldr	r3, [pc, #148]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80205d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80205d4:	4a23      	ldr	r2, [pc, #140]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80205d6:	f043 0320 	orr.w	r3, r3, #32
 80205da:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 80205de:	4b21      	ldr	r3, [pc, #132]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80205e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80205e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80205e8:	4a1e      	ldr	r2, [pc, #120]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80205ea:	f043 0301 	orr.w	r3, r3, #1
 80205ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80205f2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 80205f6:	4b1b      	ldr	r3, [pc, #108]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 80205f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80205fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8020600:	4a18      	ldr	r2, [pc, #96]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 8020602:	f043 0301 	orr.w	r3, r3, #1
 8020606:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802060a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 802060e:	687b      	ldr	r3, [r7, #4]
 8020610:	795b      	ldrb	r3, [r3, #5]
 8020612:	021b      	lsls	r3, r3, #8
 8020614:	687a      	ldr	r2, [r7, #4]
 8020616:	7912      	ldrb	r2, [r2, #4]
 8020618:	4611      	mov	r1, r2
 802061a:	4a12      	ldr	r2, [pc, #72]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
 802061c:	430b      	orrs	r3, r1
 802061e:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8020622:	687b      	ldr	r3, [r7, #4]
 8020624:	78db      	ldrb	r3, [r3, #3]
 8020626:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	789b      	ldrb	r3, [r3, #2]
 802062c:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 802062e:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	785b      	ldrb	r3, [r3, #1]
 8020634:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 8020636:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8020638:	687a      	ldr	r2, [r7, #4]
 802063a:	7812      	ldrb	r2, [r2, #0]
 802063c:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 802063e:	4a09      	ldr	r2, [pc, #36]	@ (8020664 <mg_tcpip_driver_stm32h_init+0x264>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8020640:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8020642:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 8020646:	2301      	movs	r3, #1
}
 8020648:	4618      	mov	r0, r3
 802064a:	3728      	adds	r7, #40	@ 0x28
 802064c:	46bd      	mov	sp, r7
 802064e:	bd80      	pop	{r7, pc}
 8020650:	24004174 	.word	0x24004174
 8020654:	24001154 	.word	0x24001154
 8020658:	240010d4 	.word	0x240010d4
 802065c:	24002964 	.word	0x24002964
 8020660:	24001114 	.word	0x24001114
 8020664:	40028000 	.word	0x40028000
 8020668:	08026c0c 	.word	0x08026c0c
 802066c:	24001104 	.word	0x24001104

08020670 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 8020670:	b580      	push	{r7, lr}
 8020672:	b088      	sub	sp, #32
 8020674:	af02      	add	r7, sp, #8
 8020676:	60f8      	str	r0, [r7, #12]
 8020678:	60b9      	str	r1, [r7, #8]
 802067a:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 802067c:	68bb      	ldr	r3, [r7, #8]
 802067e:	f240 6204 	movw	r2, #1540	@ 0x604
 8020682:	4293      	cmp	r3, r2
 8020684:	d912      	bls.n	80206ac <mg_tcpip_driver_stm32h_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8020686:	4b5e      	ldr	r3, [pc, #376]	@ (8020800 <mg_tcpip_driver_stm32h_tx+0x190>)
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	2b00      	cmp	r3, #0
 802068c:	dd0b      	ble.n	80206a6 <mg_tcpip_driver_stm32h_tx+0x36>
 802068e:	4b5d      	ldr	r3, [pc, #372]	@ (8020804 <mg_tcpip_driver_stm32h_tx+0x194>)
 8020690:	f645 526f 	movw	r2, #23919	@ 0x5d6f
 8020694:	495c      	ldr	r1, [pc, #368]	@ (8020808 <mg_tcpip_driver_stm32h_tx+0x198>)
 8020696:	2001      	movs	r0, #1
 8020698:	f7eb fe50 	bl	800c33c <mg_log_prefix>
 802069c:	68bb      	ldr	r3, [r7, #8]
 802069e:	4619      	mov	r1, r3
 80206a0:	485a      	ldr	r0, [pc, #360]	@ (802080c <mg_tcpip_driver_stm32h_tx+0x19c>)
 80206a2:	f7eb fe9b 	bl	800c3dc <mg_log>
    len = 0;  // Frame is too big
 80206a6:	2300      	movs	r3, #0
 80206a8:	60bb      	str	r3, [r7, #8]
 80206aa:	e08d      	b.n	80207c8 <mg_tcpip_driver_stm32h_tx+0x158>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 80206ac:	4b58      	ldr	r3, [pc, #352]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80206ae:	681b      	ldr	r3, [r3, #0]
 80206b0:	4a58      	ldr	r2, [pc, #352]	@ (8020814 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80206b2:	011b      	lsls	r3, r3, #4
 80206b4:	4413      	add	r3, r2
 80206b6:	330c      	adds	r3, #12
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	da4a      	bge.n	8020754 <mg_tcpip_driver_stm32h_tx+0xe4>
    ifp->nerr++;
 80206be:	687b      	ldr	r3, [r7, #4]
 80206c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80206c4:	1c5a      	adds	r2, r3, #1
 80206c6:	687b      	ldr	r3, [r7, #4]
 80206c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 80206cc:	4b4c      	ldr	r3, [pc, #304]	@ (8020800 <mg_tcpip_driver_stm32h_tx+0x190>)
 80206ce:	681b      	ldr	r3, [r3, #0]
 80206d0:	2b00      	cmp	r3, #0
 80206d2:	dd1e      	ble.n	8020712 <mg_tcpip_driver_stm32h_tx+0xa2>
 80206d4:	4b4b      	ldr	r3, [pc, #300]	@ (8020804 <mg_tcpip_driver_stm32h_tx+0x194>)
 80206d6:	f645 5273 	movw	r2, #23923	@ 0x5d73
 80206da:	494b      	ldr	r1, [pc, #300]	@ (8020808 <mg_tcpip_driver_stm32h_tx+0x198>)
 80206dc:	2001      	movs	r0, #1
 80206de:	f7eb fe2d 	bl	800c33c <mg_log_prefix>
 80206e2:	4b4b      	ldr	r3, [pc, #300]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80206e4:	6819      	ldr	r1, [r3, #0]
 80206e6:	4b4a      	ldr	r3, [pc, #296]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	4a4a      	ldr	r2, [pc, #296]	@ (8020814 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80206ec:	011b      	lsls	r3, r3, #4
 80206ee:	4413      	add	r3, r2
 80206f0:	330c      	adds	r3, #12
 80206f2:	681a      	ldr	r2, [r3, #0]
 80206f4:	4b48      	ldr	r3, [pc, #288]	@ (8020818 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80206f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80206fa:	f8d3 0160 	ldr.w	r0, [r3, #352]	@ 0x160
 80206fe:	4b46      	ldr	r3, [pc, #280]	@ (8020818 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8020700:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020704:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8020708:	9300      	str	r3, [sp, #0]
 802070a:	4603      	mov	r3, r0
 802070c:	4843      	ldr	r0, [pc, #268]	@ (802081c <mg_tcpip_driver_stm32h_tx+0x1ac>)
 802070e:	f7eb fe65 	bl	800c3dc <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 8020712:	2300      	movs	r3, #0
 8020714:	617b      	str	r3, [r7, #20]
 8020716:	e017      	b.n	8020748 <mg_tcpip_driver_stm32h_tx+0xd8>
 8020718:	4b39      	ldr	r3, [pc, #228]	@ (8020800 <mg_tcpip_driver_stm32h_tx+0x190>)
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	2b00      	cmp	r3, #0
 802071e:	dd10      	ble.n	8020742 <mg_tcpip_driver_stm32h_tx+0xd2>
 8020720:	4b38      	ldr	r3, [pc, #224]	@ (8020804 <mg_tcpip_driver_stm32h_tx+0x194>)
 8020722:	f645 5275 	movw	r2, #23925	@ 0x5d75
 8020726:	4938      	ldr	r1, [pc, #224]	@ (8020808 <mg_tcpip_driver_stm32h_tx+0x198>)
 8020728:	2001      	movs	r0, #1
 802072a:	f7eb fe07 	bl	800c33c <mg_log_prefix>
 802072e:	4a39      	ldr	r2, [pc, #228]	@ (8020814 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8020730:	697b      	ldr	r3, [r7, #20]
 8020732:	011b      	lsls	r3, r3, #4
 8020734:	4413      	add	r3, r2
 8020736:	330c      	adds	r3, #12
 8020738:	681b      	ldr	r3, [r3, #0]
 802073a:	4619      	mov	r1, r3
 802073c:	4838      	ldr	r0, [pc, #224]	@ (8020820 <mg_tcpip_driver_stm32h_tx+0x1b0>)
 802073e:	f7eb fe4d 	bl	800c3dc <mg_log>
 8020742:	697b      	ldr	r3, [r7, #20]
 8020744:	3301      	adds	r3, #1
 8020746:	617b      	str	r3, [r7, #20]
 8020748:	697b      	ldr	r3, [r7, #20]
 802074a:	2b03      	cmp	r3, #3
 802074c:	dde4      	ble.n	8020718 <mg_tcpip_driver_stm32h_tx+0xa8>
    len = 0;  // All descriptors are busy, fail
 802074e:	2300      	movs	r3, #0
 8020750:	60bb      	str	r3, [r7, #8]
 8020752:	e039      	b.n	80207c8 <mg_tcpip_driver_stm32h_tx+0x158>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 8020754:	4b2e      	ldr	r3, [pc, #184]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8020756:	681b      	ldr	r3, [r3, #0]
 8020758:	f240 6204 	movw	r2, #1540	@ 0x604
 802075c:	fb02 f303 	mul.w	r3, r2, r3
 8020760:	4a30      	ldr	r2, [pc, #192]	@ (8020824 <mg_tcpip_driver_stm32h_tx+0x1b4>)
 8020762:	4413      	add	r3, r2
 8020764:	68ba      	ldr	r2, [r7, #8]
 8020766:	68f9      	ldr	r1, [r7, #12]
 8020768:	4618      	mov	r0, r3
 802076a:	f003 f80a 	bl	8023782 <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 802076e:	4b28      	ldr	r3, [pc, #160]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8020770:	681b      	ldr	r3, [r3, #0]
 8020772:	4a28      	ldr	r2, [pc, #160]	@ (8020814 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8020774:	011b      	lsls	r3, r3, #4
 8020776:	4413      	add	r3, r2
 8020778:	3308      	adds	r3, #8
 802077a:	68ba      	ldr	r2, [r7, #8]
 802077c:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 802077e:	4b24      	ldr	r3, [pc, #144]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8020780:	681b      	ldr	r3, [r3, #0]
 8020782:	4a24      	ldr	r2, [pc, #144]	@ (8020814 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8020784:	011b      	lsls	r3, r3, #4
 8020786:	4413      	add	r3, r2
 8020788:	330c      	adds	r3, #12
 802078a:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 802078e:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 8020790:	4b1f      	ldr	r3, [pc, #124]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	4a1f      	ldr	r2, [pc, #124]	@ (8020814 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8020796:	011b      	lsls	r3, r3, #4
 8020798:	4413      	add	r3, r2
 802079a:	330c      	adds	r3, #12
 802079c:	681a      	ldr	r2, [r3, #0]
 802079e:	4b1c      	ldr	r3, [pc, #112]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80207a6:	491b      	ldr	r1, [pc, #108]	@ (8020814 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80207a8:	011b      	lsls	r3, r3, #4
 80207aa:	440b      	add	r3, r1
 80207ac:	330c      	adds	r3, #12
 80207ae:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 80207b0:	4b17      	ldr	r3, [pc, #92]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80207b2:	681b      	ldr	r3, [r3, #0]
 80207b4:	3301      	adds	r3, #1
 80207b6:	4a16      	ldr	r2, [pc, #88]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80207b8:	6013      	str	r3, [r2, #0]
 80207ba:	4b15      	ldr	r3, [pc, #84]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80207bc:	681b      	ldr	r3, [r3, #0]
 80207be:	2b03      	cmp	r3, #3
 80207c0:	d902      	bls.n	80207c8 <mg_tcpip_driver_stm32h_tx+0x158>
 80207c2:	4b13      	ldr	r3, [pc, #76]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80207c4:	2200      	movs	r2, #0
 80207c6:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 80207c8:	4b13      	ldr	r3, [pc, #76]	@ (8020818 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80207ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80207ce:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80207d2:	4a11      	ldr	r2, [pc, #68]	@ (8020818 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80207d4:	f043 0306 	orr.w	r3, r3, #6
 80207d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80207dc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 80207e0:	4b0b      	ldr	r3, [pc, #44]	@ (8020810 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	011b      	lsls	r3, r3, #4
 80207e6:	4a0b      	ldr	r2, [pc, #44]	@ (8020814 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80207e8:	441a      	add	r2, r3
 80207ea:	4b0b      	ldr	r3, [pc, #44]	@ (8020818 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80207ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80207f0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 80207f4:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 80207f6:	4618      	mov	r0, r3
 80207f8:	3718      	adds	r7, #24
 80207fa:	46bd      	mov	sp, r7
 80207fc:	bd80      	pop	{r7, pc}
 80207fe:	bf00      	nop
 8020800:	24000258 	.word	0x24000258
 8020804:	080280f4 	.word	0x080280f4
 8020808:	080241e8 	.word	0x080241e8
 802080c:	08026c14 	.word	0x08026c14
 8020810:	24004178 	.word	0x24004178
 8020814:	24001114 	.word	0x24001114
 8020818:	40028000 	.word	0x40028000
 802081c:	08026c28 	.word	0x08026c28
 8020820:	08026c50 	.word	0x08026c50
 8020824:	24002964 	.word	0x24002964

08020828 <mg_tcpip_driver_stm32h_update_hash_table>:

static void mg_tcpip_driver_stm32h_update_hash_table(struct mg_tcpip_if *ifp) {
 8020828:	b480      	push	{r7}
 802082a:	b083      	sub	sp, #12
 802082c:	af00      	add	r7, sp, #0
 802082e:	6078      	str	r0, [r7, #4]
#if MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(4);  // Pass Multicast (pass all multicast frames)
#else
  // TODO(): read database, rebuild hash table
  // add mDNS / DNS-SD multicast address
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8020830:	4b14      	ldr	r3, [pc, #80]	@ (8020884 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8020832:	78db      	ldrb	r3, [r3, #3]
 8020834:	061a      	lsls	r2, r3, #24
                 (uint32_t) mcast_addr[2] << 16 |
 8020836:	4b13      	ldr	r3, [pc, #76]	@ (8020884 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8020838:	789b      	ldrb	r3, [r3, #2]
 802083a:	041b      	lsls	r3, r3, #16
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 802083c:	431a      	orrs	r2, r3
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 802083e:	4b11      	ldr	r3, [pc, #68]	@ (8020884 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8020840:	785b      	ldrb	r3, [r3, #1]
 8020842:	021b      	lsls	r3, r3, #8
                 (uint32_t) mcast_addr[2] << 16 |
 8020844:	4313      	orrs	r3, r2
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 8020846:	4a0f      	ldr	r2, [pc, #60]	@ (8020884 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8020848:	7812      	ldrb	r2, [r2, #0]
 802084a:	4611      	mov	r1, r2
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 802084c:	4a0e      	ldr	r2, [pc, #56]	@ (8020888 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 802084e:	430b      	orrs	r3, r1
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8020850:	f8c2 330c 	str.w	r3, [r2, #780]	@ 0x30c
  ETH->MACA1HR = (uint32_t) mcast_addr[5] << 8 | (uint32_t) mcast_addr[4];
 8020854:	4b0b      	ldr	r3, [pc, #44]	@ (8020884 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8020856:	795b      	ldrb	r3, [r3, #5]
 8020858:	021b      	lsls	r3, r3, #8
 802085a:	4a0a      	ldr	r2, [pc, #40]	@ (8020884 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 802085c:	7912      	ldrb	r2, [r2, #4]
 802085e:	4611      	mov	r1, r2
 8020860:	4a09      	ldr	r2, [pc, #36]	@ (8020888 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8020862:	430b      	orrs	r3, r1
 8020864:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
  ETH->MACA1HR |= MG_BIT(31);  // AE
 8020868:	4b07      	ldr	r3, [pc, #28]	@ (8020888 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 802086a:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 802086e:	4a06      	ldr	r2, [pc, #24]	@ (8020888 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8020870:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8020874:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
#endif
(void) ifp;
}
 8020878:	bf00      	nop
 802087a:	370c      	adds	r7, #12
 802087c:	46bd      	mov	sp, r7
 802087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020882:	4770      	bx	lr
 8020884:	24000260 	.word	0x24000260
 8020888:	40028000 	.word	0x40028000

0802088c <mg_tcpip_driver_stm32h_poll>:

static bool mg_tcpip_driver_stm32h_poll(struct mg_tcpip_if *ifp, bool s1) {
 802088c:	b580      	push	{r7, lr}
 802088e:	b088      	sub	sp, #32
 8020890:	af00      	add	r7, sp, #0
 8020892:	6078      	str	r0, [r7, #4]
 8020894:	460b      	mov	r3, r1
 8020896:	70fb      	strb	r3, [r7, #3]
  if (ifp->update_mac_hash_table) {
 8020898:	687b      	ldr	r3, [r7, #4]
 802089a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d006      	beq.n	80208b0 <mg_tcpip_driver_stm32h_poll+0x24>
    mg_tcpip_driver_stm32h_update_hash_table(ifp);
 80208a2:	6878      	ldr	r0, [r7, #4]
 80208a4:	f7ff ffc0 	bl	8020828 <mg_tcpip_driver_stm32h_update_hash_table>
    ifp->update_mac_hash_table = false;
 80208a8:	687b      	ldr	r3, [r7, #4]
 80208aa:	2200      	movs	r2, #0
 80208ac:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  }
  if (!s1) return false;
 80208b0:	78fb      	ldrb	r3, [r7, #3]
 80208b2:	f083 0301 	eor.w	r3, r3, #1
 80208b6:	b2db      	uxtb	r3, r3
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	d001      	beq.n	80208c0 <mg_tcpip_driver_stm32h_poll+0x34>
 80208bc:	2300      	movs	r3, #0
 80208be:	e063      	b.n	8020988 <mg_tcpip_driver_stm32h_poll+0xfc>
  struct mg_tcpip_driver_stm32h_data *d =
 80208c0:	687b      	ldr	r3, [r7, #4]
 80208c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80208c4:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 80208c6:	69bb      	ldr	r3, [r7, #24]
 80208c8:	2b00      	cmp	r3, #0
 80208ca:	d002      	beq.n	80208d2 <mg_tcpip_driver_stm32h_poll+0x46>
 80208cc:	69bb      	ldr	r3, [r7, #24]
 80208ce:	791b      	ldrb	r3, [r3, #4]
 80208d0:	e000      	b.n	80208d4 <mg_tcpip_driver_stm32h_poll+0x48>
 80208d2:	2300      	movs	r3, #0
 80208d4:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 80208d6:	2300      	movs	r3, #0
 80208d8:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 80208da:	2300      	movs	r3, #0
 80208dc:	75bb      	strb	r3, [r7, #22]
 80208de:	2300      	movs	r3, #0
 80208e0:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 80208e2:	4a2b      	ldr	r2, [pc, #172]	@ (8020990 <mg_tcpip_driver_stm32h_poll+0x104>)
 80208e4:	f107 030c 	add.w	r3, r7, #12
 80208e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80208ec:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 80208f0:	f107 0315 	add.w	r3, r7, #21
 80208f4:	f107 0214 	add.w	r2, r7, #20
 80208f8:	7df9      	ldrb	r1, [r7, #23]
 80208fa:	f107 000c 	add.w	r0, r7, #12
 80208fe:	f7ff fbf3 	bl	80200e8 <mg_phy_up>
 8020902:	4603      	mov	r3, r0
 8020904:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802090c:	2b00      	cmp	r3, #0
 802090e:	d13a      	bne.n	8020986 <mg_tcpip_driver_stm32h_poll+0xfa>
 8020910:	7dbb      	ldrb	r3, [r7, #22]
 8020912:	2b00      	cmp	r3, #0
 8020914:	d037      	beq.n	8020986 <mg_tcpip_driver_stm32h_poll+0xfa>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 8020916:	4b1f      	ldr	r3, [pc, #124]	@ (8020994 <mg_tcpip_driver_stm32h_poll+0x108>)
 8020918:	681b      	ldr	r3, [r3, #0]
 802091a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 802091e:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 8020920:	7d7b      	ldrb	r3, [r7, #21]
 8020922:	2b00      	cmp	r3, #0
 8020924:	d103      	bne.n	802092e <mg_tcpip_driver_stm32h_poll+0xa2>
 8020926:	69fb      	ldr	r3, [r7, #28]
 8020928:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 802092c:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 802092e:	7d3b      	ldrb	r3, [r7, #20]
 8020930:	f083 0301 	eor.w	r3, r3, #1
 8020934:	b2db      	uxtb	r3, r3
 8020936:	2b00      	cmp	r3, #0
 8020938:	d003      	beq.n	8020942 <mg_tcpip_driver_stm32h_poll+0xb6>
 802093a:	69fb      	ldr	r3, [r7, #28]
 802093c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020940:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8020942:	4a14      	ldr	r2, [pc, #80]	@ (8020994 <mg_tcpip_driver_stm32h_poll+0x108>)
 8020944:	69fb      	ldr	r3, [r7, #28]
 8020946:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 8020948:	4b13      	ldr	r3, [pc, #76]	@ (8020998 <mg_tcpip_driver_stm32h_poll+0x10c>)
 802094a:	681b      	ldr	r3, [r3, #0]
 802094c:	2b02      	cmp	r3, #2
 802094e:	dd1a      	ble.n	8020986 <mg_tcpip_driver_stm32h_poll+0xfa>
 8020950:	4b12      	ldr	r3, [pc, #72]	@ (802099c <mg_tcpip_driver_stm32h_poll+0x110>)
 8020952:	f645 52a8 	movw	r2, #23976	@ 0x5da8
 8020956:	4912      	ldr	r1, [pc, #72]	@ (80209a0 <mg_tcpip_driver_stm32h_poll+0x114>)
 8020958:	2003      	movs	r0, #3
 802095a:	f7eb fcef 	bl	800c33c <mg_log_prefix>
 802095e:	69fb      	ldr	r3, [r7, #28]
 8020960:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8020964:	2b00      	cmp	r3, #0
 8020966:	d001      	beq.n	802096c <mg_tcpip_driver_stm32h_poll+0xe0>
 8020968:	2164      	movs	r1, #100	@ 0x64
 802096a:	e000      	b.n	802096e <mg_tcpip_driver_stm32h_poll+0xe2>
 802096c:	210a      	movs	r1, #10
 802096e:	69fb      	ldr	r3, [r7, #28]
 8020970:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8020974:	2b00      	cmp	r3, #0
 8020976:	d001      	beq.n	802097c <mg_tcpip_driver_stm32h_poll+0xf0>
 8020978:	4b0a      	ldr	r3, [pc, #40]	@ (80209a4 <mg_tcpip_driver_stm32h_poll+0x118>)
 802097a:	e000      	b.n	802097e <mg_tcpip_driver_stm32h_poll+0xf2>
 802097c:	4b0a      	ldr	r3, [pc, #40]	@ (80209a8 <mg_tcpip_driver_stm32h_poll+0x11c>)
 802097e:	461a      	mov	r2, r3
 8020980:	480a      	ldr	r0, [pc, #40]	@ (80209ac <mg_tcpip_driver_stm32h_poll+0x120>)
 8020982:	f7eb fd2b 	bl	800c3dc <mg_log>
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 8020986:	7dbb      	ldrb	r3, [r7, #22]
}
 8020988:	4618      	mov	r0, r3
 802098a:	3720      	adds	r7, #32
 802098c:	46bd      	mov	sp, r7
 802098e:	bd80      	pop	{r7, pc}
 8020990:	08026c0c 	.word	0x08026c0c
 8020994:	40028000 	.word	0x40028000
 8020998:	24000258 	.word	0x24000258
 802099c:	08028110 	.word	0x08028110
 80209a0:	080241e8 	.word	0x080241e8
 80209a4:	08026c58 	.word	0x08026c58
 80209a8:	08026c60 	.word	0x08026c60
 80209ac:	08026c68 	.word	0x08026c68

080209b0 <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 80209b0:	b580      	push	{r7, lr}
 80209b2:	b082      	sub	sp, #8
 80209b4:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 80209b6:	4b40      	ldr	r3, [pc, #256]	@ (8020ab8 <ETH_IRQHandler+0x108>)
 80209b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80209bc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80209c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80209c4:	2b00      	cmp	r3, #0
 80209c6:	d065      	beq.n	8020a94 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 80209c8:	4b3b      	ldr	r3, [pc, #236]	@ (8020ab8 <ETH_IRQHandler+0x108>)
 80209ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80209ce:	461a      	mov	r2, r3
 80209d0:	f248 0340 	movw	r3, #32832	@ 0x8040
 80209d4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 80209d8:	2300      	movs	r3, #0
 80209da:	607b      	str	r3, [r7, #4]
 80209dc:	e055      	b.n	8020a8a <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 80209de:	4b37      	ldr	r3, [pc, #220]	@ (8020abc <ETH_IRQHandler+0x10c>)
 80209e0:	681b      	ldr	r3, [r3, #0]
 80209e2:	4a37      	ldr	r2, [pc, #220]	@ (8020ac0 <ETH_IRQHandler+0x110>)
 80209e4:	011b      	lsls	r3, r3, #4
 80209e6:	4413      	add	r3, r2
 80209e8:	330c      	adds	r3, #12
 80209ea:	681b      	ldr	r3, [r3, #0]
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	db50      	blt.n	8020a92 <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 80209f0:	4b32      	ldr	r3, [pc, #200]	@ (8020abc <ETH_IRQHandler+0x10c>)
 80209f2:	681b      	ldr	r3, [r3, #0]
 80209f4:	4a32      	ldr	r2, [pc, #200]	@ (8020ac0 <ETH_IRQHandler+0x110>)
 80209f6:	011b      	lsls	r3, r3, #4
 80209f8:	4413      	add	r3, r2
 80209fa:	330c      	adds	r3, #12
 80209fc:	681b      	ldr	r3, [r3, #0]
 80209fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8020a02:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8020a06:	d128      	bne.n	8020a5a <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 8020a08:	4b2c      	ldr	r3, [pc, #176]	@ (8020abc <ETH_IRQHandler+0x10c>)
 8020a0a:	681b      	ldr	r3, [r3, #0]
 8020a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8020ac0 <ETH_IRQHandler+0x110>)
 8020a0e:	011b      	lsls	r3, r3, #4
 8020a10:	4413      	add	r3, r2
 8020a12:	330c      	adds	r3, #12
 8020a14:	681b      	ldr	r3, [r3, #0]
 8020a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d11d      	bne.n	8020a5a <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 8020a1e:	4b27      	ldr	r3, [pc, #156]	@ (8020abc <ETH_IRQHandler+0x10c>)
 8020a20:	681b      	ldr	r3, [r3, #0]
 8020a22:	4a27      	ldr	r2, [pc, #156]	@ (8020ac0 <ETH_IRQHandler+0x110>)
 8020a24:	011b      	lsls	r3, r3, #4
 8020a26:	4413      	add	r3, r2
 8020a28:	330c      	adds	r3, #12
 8020a2a:	681b      	ldr	r3, [r3, #0]
 8020a2c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8020a30:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 8020a32:	4b22      	ldr	r3, [pc, #136]	@ (8020abc <ETH_IRQHandler+0x10c>)
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	f240 6204 	movw	r2, #1540	@ 0x604
 8020a3a:	fb02 f303 	mul.w	r3, r2, r3
 8020a3e:	4a21      	ldr	r2, [pc, #132]	@ (8020ac4 <ETH_IRQHandler+0x114>)
 8020a40:	1898      	adds	r0, r3, r2
 8020a42:	683b      	ldr	r3, [r7, #0]
 8020a44:	2b04      	cmp	r3, #4
 8020a46:	d902      	bls.n	8020a4e <ETH_IRQHandler+0x9e>
 8020a48:	683b      	ldr	r3, [r7, #0]
 8020a4a:	3b04      	subs	r3, #4
 8020a4c:	e000      	b.n	8020a50 <ETH_IRQHandler+0xa0>
 8020a4e:	683b      	ldr	r3, [r7, #0]
 8020a50:	4a1d      	ldr	r2, [pc, #116]	@ (8020ac8 <ETH_IRQHandler+0x118>)
 8020a52:	6812      	ldr	r2, [r2, #0]
 8020a54:	4619      	mov	r1, r3
 8020a56:	f7ef f98f 	bl	800fd78 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 8020a5a:	4b18      	ldr	r3, [pc, #96]	@ (8020abc <ETH_IRQHandler+0x10c>)
 8020a5c:	681b      	ldr	r3, [r3, #0]
 8020a5e:	4a18      	ldr	r2, [pc, #96]	@ (8020ac0 <ETH_IRQHandler+0x110>)
 8020a60:	011b      	lsls	r3, r3, #4
 8020a62:	4413      	add	r3, r2
 8020a64:	330c      	adds	r3, #12
 8020a66:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8020a6a:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8020a6c:	4b13      	ldr	r3, [pc, #76]	@ (8020abc <ETH_IRQHandler+0x10c>)
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	3301      	adds	r3, #1
 8020a72:	4a12      	ldr	r2, [pc, #72]	@ (8020abc <ETH_IRQHandler+0x10c>)
 8020a74:	6013      	str	r3, [r2, #0]
 8020a76:	4b11      	ldr	r3, [pc, #68]	@ (8020abc <ETH_IRQHandler+0x10c>)
 8020a78:	681b      	ldr	r3, [r3, #0]
 8020a7a:	2b03      	cmp	r3, #3
 8020a7c:	d902      	bls.n	8020a84 <ETH_IRQHandler+0xd4>
 8020a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8020abc <ETH_IRQHandler+0x10c>)
 8020a80:	2200      	movs	r2, #0
 8020a82:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8020a84:	687b      	ldr	r3, [r7, #4]
 8020a86:	3301      	adds	r3, #1
 8020a88:	607b      	str	r3, [r7, #4]
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	2b09      	cmp	r3, #9
 8020a8e:	d9a6      	bls.n	80209de <ETH_IRQHandler+0x2e>
 8020a90:	e000      	b.n	8020a94 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8020a92:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8020a94:	4b08      	ldr	r3, [pc, #32]	@ (8020ab8 <ETH_IRQHandler+0x108>)
 8020a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020a9a:	461a      	mov	r2, r3
 8020a9c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8020aa0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8020aa4:	4a04      	ldr	r2, [pc, #16]	@ (8020ab8 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 8020aa6:	4b09      	ldr	r3, [pc, #36]	@ (8020acc <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8020aa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8020aac:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8020ab0:	bf00      	nop
 8020ab2:	3708      	adds	r7, #8
 8020ab4:	46bd      	mov	sp, r7
 8020ab6:	bd80      	pop	{r7, pc}
 8020ab8:	40028000 	.word	0x40028000
 8020abc:	2400417c 	.word	0x2400417c
 8020ac0:	240010d4 	.word	0x240010d4
 8020ac4:	24001154 	.word	0x24001154
 8020ac8:	24004174 	.word	0x24004174
 8020acc:	24001104 	.word	0x24001104

08020ad0 <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1749138029},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 8020ad0:	b480      	push	{r7}
 8020ad2:	b083      	sub	sp, #12
 8020ad4:	af00      	add	r7, sp, #0
 8020ad6:	6078      	str	r0, [r7, #4]
 8020ad8:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 8020ada:	e005      	b.n	8020ae8 <scmp+0x18>
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	3301      	adds	r3, #1
 8020ae0:	607b      	str	r3, [r7, #4]
 8020ae2:	683b      	ldr	r3, [r7, #0]
 8020ae4:	3301      	adds	r3, #1
 8020ae6:	603b      	str	r3, [r7, #0]
 8020ae8:	687b      	ldr	r3, [r7, #4]
 8020aea:	781b      	ldrb	r3, [r3, #0]
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	d005      	beq.n	8020afc <scmp+0x2c>
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	781a      	ldrb	r2, [r3, #0]
 8020af4:	683b      	ldr	r3, [r7, #0]
 8020af6:	781b      	ldrb	r3, [r3, #0]
 8020af8:	429a      	cmp	r2, r3
 8020afa:	d0ef      	beq.n	8020adc <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 8020afc:	687b      	ldr	r3, [r7, #4]
 8020afe:	781b      	ldrb	r3, [r3, #0]
 8020b00:	461a      	mov	r2, r3
 8020b02:	683b      	ldr	r3, [r7, #0]
 8020b04:	781b      	ldrb	r3, [r3, #0]
 8020b06:	1ad3      	subs	r3, r2, r3
}
 8020b08:	4618      	mov	r0, r3
 8020b0a:	370c      	adds	r7, #12
 8020b0c:	46bd      	mov	sp, r7
 8020b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b12:	4770      	bx	lr

08020b14 <mg_unlist>:
const char *mg_unlist(size_t no) {
 8020b14:	b480      	push	{r7}
 8020b16:	b083      	sub	sp, #12
 8020b18:	af00      	add	r7, sp, #0
 8020b1a:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 8020b1c:	4906      	ldr	r1, [pc, #24]	@ (8020b38 <mg_unlist+0x24>)
 8020b1e:	687a      	ldr	r2, [r7, #4]
 8020b20:	4613      	mov	r3, r2
 8020b22:	005b      	lsls	r3, r3, #1
 8020b24:	4413      	add	r3, r2
 8020b26:	00db      	lsls	r3, r3, #3
 8020b28:	440b      	add	r3, r1
 8020b2a:	681b      	ldr	r3, [r3, #0]
}
 8020b2c:	4618      	mov	r0, r3
 8020b2e:	370c      	adds	r7, #12
 8020b30:	46bd      	mov	sp, r7
 8020b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b36:	4770      	bx	lr
 8020b38:	08035218 	.word	0x08035218

08020b3c <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 8020b3c:	b580      	push	{r7, lr}
 8020b3e:	b086      	sub	sp, #24
 8020b40:	af00      	add	r7, sp, #0
 8020b42:	60f8      	str	r0, [r7, #12]
 8020b44:	60b9      	str	r1, [r7, #8]
 8020b46:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 8020b48:	4b16      	ldr	r3, [pc, #88]	@ (8020ba4 <mg_unpack+0x68>)
 8020b4a:	617b      	str	r3, [r7, #20]
 8020b4c:	e020      	b.n	8020b90 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 8020b4e:	697b      	ldr	r3, [r7, #20]
 8020b50:	681b      	ldr	r3, [r3, #0]
 8020b52:	68f9      	ldr	r1, [r7, #12]
 8020b54:	4618      	mov	r0, r3
 8020b56:	f7ff ffbb 	bl	8020ad0 <scmp>
 8020b5a:	4603      	mov	r3, r0
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	d113      	bne.n	8020b88 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 8020b60:	68bb      	ldr	r3, [r7, #8]
 8020b62:	2b00      	cmp	r3, #0
 8020b64:	d004      	beq.n	8020b70 <mg_unpack+0x34>
 8020b66:	697b      	ldr	r3, [r7, #20]
 8020b68:	689b      	ldr	r3, [r3, #8]
 8020b6a:	1e5a      	subs	r2, r3, #1
 8020b6c:	68bb      	ldr	r3, [r7, #8]
 8020b6e:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 8020b70:	687b      	ldr	r3, [r7, #4]
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	d005      	beq.n	8020b82 <mg_unpack+0x46>
 8020b76:	697b      	ldr	r3, [r7, #20]
 8020b78:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020b7c:	6879      	ldr	r1, [r7, #4]
 8020b7e:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 8020b82:	697b      	ldr	r3, [r7, #20]
 8020b84:	685b      	ldr	r3, [r3, #4]
 8020b86:	e008      	b.n	8020b9a <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 8020b88:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 8020b8a:	697b      	ldr	r3, [r7, #20]
 8020b8c:	3318      	adds	r3, #24
 8020b8e:	617b      	str	r3, [r7, #20]
 8020b90:	697b      	ldr	r3, [r7, #20]
 8020b92:	681b      	ldr	r3, [r3, #0]
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d1da      	bne.n	8020b4e <mg_unpack+0x12>
  }
  return NULL;
 8020b98:	2300      	movs	r3, #0
}
 8020b9a:	4618      	mov	r0, r3
 8020b9c:	3718      	adds	r7, #24
 8020b9e:	46bd      	mov	sp, r7
 8020ba0:	bd80      	pop	{r7, pc}
 8020ba2:	bf00      	nop
 8020ba4:	08035218 	.word	0x08035218

08020ba8 <glue_modbus_read_reg>:

// Read/write registers via Modbus API
// Return true if the register is read/written successfully, false otherwise
// The address is a 16-bit unsigned integer, the value is also a 16-bit unsigned integer
// The address is in the range [s_modbus_base, s_modbus_base + count), where count is the number of registers
bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 8020ba8:	b580      	push	{r7, lr}
 8020baa:	b084      	sub	sp, #16
 8020bac:	af00      	add	r7, sp, #0
 8020bae:	4603      	mov	r3, r0
 8020bb0:	6039      	str	r1, [r7, #0]
 8020bb2:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 8020bb4:	2300      	movs	r3, #0
 8020bb6:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8020bb8:	2364      	movs	r3, #100	@ 0x64
 8020bba:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8020bbc:	4b19      	ldr	r3, [pc, #100]	@ (8020c24 <glue_modbus_read_reg+0x7c>)
 8020bbe:	881b      	ldrh	r3, [r3, #0]
 8020bc0:	88fa      	ldrh	r2, [r7, #6]
 8020bc2:	429a      	cmp	r2, r3
 8020bc4:	d312      	bcc.n	8020bec <glue_modbus_read_reg+0x44>
 8020bc6:	88fa      	ldrh	r2, [r7, #6]
 8020bc8:	4b16      	ldr	r3, [pc, #88]	@ (8020c24 <glue_modbus_read_reg+0x7c>)
 8020bca:	881b      	ldrh	r3, [r3, #0]
 8020bcc:	4619      	mov	r1, r3
 8020bce:	68bb      	ldr	r3, [r7, #8]
 8020bd0:	440b      	add	r3, r1
 8020bd2:	429a      	cmp	r2, r3
 8020bd4:	d20a      	bcs.n	8020bec <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 8020bd6:	88fb      	ldrh	r3, [r7, #6]
 8020bd8:	4a12      	ldr	r2, [pc, #72]	@ (8020c24 <glue_modbus_read_reg+0x7c>)
 8020bda:	8812      	ldrh	r2, [r2, #0]
 8020bdc:	1a9b      	subs	r3, r3, r2
 8020bde:	4a12      	ldr	r2, [pc, #72]	@ (8020c28 <glue_modbus_read_reg+0x80>)
 8020be0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8020be4:	683b      	ldr	r3, [r7, #0]
 8020be6:	801a      	strh	r2, [r3, #0]
    success = true;
 8020be8:	2301      	movs	r3, #1
 8020bea:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, *value));
 8020bec:	4b0f      	ldr	r3, [pc, #60]	@ (8020c2c <glue_modbus_read_reg+0x84>)
 8020bee:	681b      	ldr	r3, [r3, #0]
 8020bf0:	2b01      	cmp	r3, #1
 8020bf2:	dd11      	ble.n	8020c18 <glue_modbus_read_reg+0x70>
 8020bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8020c30 <glue_modbus_read_reg+0x88>)
 8020bf6:	2219      	movs	r2, #25
 8020bf8:	490e      	ldr	r1, [pc, #56]	@ (8020c34 <glue_modbus_read_reg+0x8c>)
 8020bfa:	2002      	movs	r0, #2
 8020bfc:	f7eb fb9e 	bl	800c33c <mg_log_prefix>
 8020c00:	7bfb      	ldrb	r3, [r7, #15]
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	d001      	beq.n	8020c0a <glue_modbus_read_reg+0x62>
 8020c06:	490c      	ldr	r1, [pc, #48]	@ (8020c38 <glue_modbus_read_reg+0x90>)
 8020c08:	e000      	b.n	8020c0c <glue_modbus_read_reg+0x64>
 8020c0a:	490c      	ldr	r1, [pc, #48]	@ (8020c3c <glue_modbus_read_reg+0x94>)
 8020c0c:	88fa      	ldrh	r2, [r7, #6]
 8020c0e:	683b      	ldr	r3, [r7, #0]
 8020c10:	881b      	ldrh	r3, [r3, #0]
 8020c12:	480b      	ldr	r0, [pc, #44]	@ (8020c40 <glue_modbus_read_reg+0x98>)
 8020c14:	f7eb fbe2 	bl	800c3dc <mg_log>
  return success;
 8020c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	3710      	adds	r7, #16
 8020c1e:	46bd      	mov	sp, r7
 8020c20:	bd80      	pop	{r7, pc}
 8020c22:	bf00      	nop
 8020c24:	240002b0 	.word	0x240002b0
 8020c28:	24004214 	.word	0x24004214
 8020c2c:	24000258 	.word	0x24000258
 8020c30:	08035248 	.word	0x08035248
 8020c34:	08026c98 	.word	0x08026c98
 8020c38:	08026cb4 	.word	0x08026cb4
 8020c3c:	08026cb8 	.word	0x08026cb8
 8020c40:	08026cc0 	.word	0x08026cc0

08020c44 <glue_modbus_write_reg>:

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 8020c44:	b580      	push	{r7, lr}
 8020c46:	b084      	sub	sp, #16
 8020c48:	af00      	add	r7, sp, #0
 8020c4a:	4603      	mov	r3, r0
 8020c4c:	460a      	mov	r2, r1
 8020c4e:	80fb      	strh	r3, [r7, #6]
 8020c50:	4613      	mov	r3, r2
 8020c52:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 8020c54:	2300      	movs	r3, #0
 8020c56:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8020c58:	2364      	movs	r3, #100	@ 0x64
 8020c5a:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8020c5c:	4b18      	ldr	r3, [pc, #96]	@ (8020cc0 <glue_modbus_write_reg+0x7c>)
 8020c5e:	881b      	ldrh	r3, [r3, #0]
 8020c60:	88fa      	ldrh	r2, [r7, #6]
 8020c62:	429a      	cmp	r2, r3
 8020c64:	d311      	bcc.n	8020c8a <glue_modbus_write_reg+0x46>
 8020c66:	88fa      	ldrh	r2, [r7, #6]
 8020c68:	4b15      	ldr	r3, [pc, #84]	@ (8020cc0 <glue_modbus_write_reg+0x7c>)
 8020c6a:	881b      	ldrh	r3, [r3, #0]
 8020c6c:	4619      	mov	r1, r3
 8020c6e:	68bb      	ldr	r3, [r7, #8]
 8020c70:	440b      	add	r3, r1
 8020c72:	429a      	cmp	r2, r3
 8020c74:	d209      	bcs.n	8020c8a <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 8020c76:	88fb      	ldrh	r3, [r7, #6]
 8020c78:	4a11      	ldr	r2, [pc, #68]	@ (8020cc0 <glue_modbus_write_reg+0x7c>)
 8020c7a:	8812      	ldrh	r2, [r2, #0]
 8020c7c:	1a9b      	subs	r3, r3, r2
 8020c7e:	4911      	ldr	r1, [pc, #68]	@ (8020cc4 <glue_modbus_write_reg+0x80>)
 8020c80:	88ba      	ldrh	r2, [r7, #4]
 8020c82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 8020c86:	2301      	movs	r3, #1
 8020c88:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "OK" : "FAIL", address, value));
 8020c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8020cc8 <glue_modbus_write_reg+0x84>)
 8020c8c:	681b      	ldr	r3, [r3, #0]
 8020c8e:	2b01      	cmp	r3, #1
 8020c90:	dd10      	ble.n	8020cb4 <glue_modbus_write_reg+0x70>
 8020c92:	4b0e      	ldr	r3, [pc, #56]	@ (8020ccc <glue_modbus_write_reg+0x88>)
 8020c94:	2224      	movs	r2, #36	@ 0x24
 8020c96:	490e      	ldr	r1, [pc, #56]	@ (8020cd0 <glue_modbus_write_reg+0x8c>)
 8020c98:	2002      	movs	r0, #2
 8020c9a:	f7eb fb4f 	bl	800c33c <mg_log_prefix>
 8020c9e:	7bfb      	ldrb	r3, [r7, #15]
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d001      	beq.n	8020ca8 <glue_modbus_write_reg+0x64>
 8020ca4:	490b      	ldr	r1, [pc, #44]	@ (8020cd4 <glue_modbus_write_reg+0x90>)
 8020ca6:	e000      	b.n	8020caa <glue_modbus_write_reg+0x66>
 8020ca8:	490b      	ldr	r1, [pc, #44]	@ (8020cd8 <glue_modbus_write_reg+0x94>)
 8020caa:	88fa      	ldrh	r2, [r7, #6]
 8020cac:	88bb      	ldrh	r3, [r7, #4]
 8020cae:	480b      	ldr	r0, [pc, #44]	@ (8020cdc <glue_modbus_write_reg+0x98>)
 8020cb0:	f7eb fb94 	bl	800c3dc <mg_log>
  return success;
 8020cb4:	7bfb      	ldrb	r3, [r7, #15]

}
 8020cb6:	4618      	mov	r0, r3
 8020cb8:	3710      	adds	r7, #16
 8020cba:	46bd      	mov	sp, r7
 8020cbc:	bd80      	pop	{r7, pc}
 8020cbe:	bf00      	nop
 8020cc0:	240002b0 	.word	0x240002b0
 8020cc4:	24004214 	.word	0x24004214
 8020cc8:	24000258 	.word	0x24000258
 8020ccc:	08035260 	.word	0x08035260
 8020cd0:	08026c98 	.word	0x08026c98
 8020cd4:	08026cb4 	.word	0x08026cb4
 8020cd8:	08026cb8 	.word	0x08026cb8
 8020cdc:	08026cc0 	.word	0x08026cc0

08020ce0 <glue_authenticate>:


// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 8020ce0:	b580      	push	{r7, lr}
 8020ce2:	b084      	sub	sp, #16
 8020ce4:	af00      	add	r7, sp, #0
 8020ce6:	6078      	str	r0, [r7, #4]
 8020ce8:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 8020cea:	2300      	movs	r3, #0
 8020cec:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "admin") == 0 && strcmp(pass, "admin") == 0) {
 8020cee:	4913      	ldr	r1, [pc, #76]	@ (8020d3c <glue_authenticate+0x5c>)
 8020cf0:	6878      	ldr	r0, [r7, #4]
 8020cf2:	f7df fb0d 	bl	8000310 <strcmp>
 8020cf6:	4603      	mov	r3, r0
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	d109      	bne.n	8020d10 <glue_authenticate+0x30>
 8020cfc:	490f      	ldr	r1, [pc, #60]	@ (8020d3c <glue_authenticate+0x5c>)
 8020cfe:	6838      	ldr	r0, [r7, #0]
 8020d00:	f7df fb06 	bl	8000310 <strcmp>
 8020d04:	4603      	mov	r3, r0
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d102      	bne.n	8020d10 <glue_authenticate+0x30>
    level = 7;  // Administrator
 8020d0a:	2307      	movs	r3, #7
 8020d0c:	60fb      	str	r3, [r7, #12]
 8020d0e:	e00f      	b.n	8020d30 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 8020d10:	490b      	ldr	r1, [pc, #44]	@ (8020d40 <glue_authenticate+0x60>)
 8020d12:	6878      	ldr	r0, [r7, #4]
 8020d14:	f7df fafc 	bl	8000310 <strcmp>
 8020d18:	4603      	mov	r3, r0
 8020d1a:	2b00      	cmp	r3, #0
 8020d1c:	d108      	bne.n	8020d30 <glue_authenticate+0x50>
 8020d1e:	4908      	ldr	r1, [pc, #32]	@ (8020d40 <glue_authenticate+0x60>)
 8020d20:	6838      	ldr	r0, [r7, #0]
 8020d22:	f7df faf5 	bl	8000310 <strcmp>
 8020d26:	4603      	mov	r3, r0
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d101      	bne.n	8020d30 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 8020d2c:	2303      	movs	r3, #3
 8020d2e:	60fb      	str	r3, [r7, #12]
  }
  return level;
 8020d30:	68fb      	ldr	r3, [r7, #12]
}
 8020d32:	4618      	mov	r0, r3
 8020d34:	3710      	adds	r7, #16
 8020d36:	46bd      	mov	sp, r7
 8020d38:	bd80      	pop	{r7, pc}
 8020d3a:	bf00      	nop
 8020d3c:	08026cd0 	.word	0x08026cd0
 8020d40:	08026cd8 	.word	0x08026cd8

08020d44 <glue_check_reboot>:

static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 8020d44:	b580      	push	{r7, lr}
 8020d46:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 8020d48:	f7f3 f91e 	bl	8013f88 <mg_now>
 8020d4c:	4b05      	ldr	r3, [pc, #20]	@ (8020d64 <glue_check_reboot+0x20>)
 8020d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d52:	4290      	cmp	r0, r2
 8020d54:	eb71 0303 	sbcs.w	r3, r1, r3
 8020d58:	bf34      	ite	cc
 8020d5a:	2301      	movcc	r3, #1
 8020d5c:	2300      	movcs	r3, #0
 8020d5e:	b2db      	uxtb	r3, r3
}
 8020d60:	4618      	mov	r0, r3
 8020d62:	bd80      	pop	{r7, pc}
 8020d64:	240042e0 	.word	0x240042e0

08020d68 <glue_start_reboot>:
void glue_start_reboot(struct mg_str params) {
 8020d68:	b5b0      	push	{r4, r5, r7, lr}
 8020d6a:	b082      	sub	sp, #8
 8020d6c:	af00      	add	r7, sp, #0
 8020d6e:	463b      	mov	r3, r7
 8020d70:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 8020d74:	4b0f      	ldr	r3, [pc, #60]	@ (8020db4 <glue_start_reboot+0x4c>)
 8020d76:	681b      	ldr	r3, [r3, #0]
 8020d78:	2b02      	cmp	r3, #2
 8020d7a:	dd0b      	ble.n	8020d94 <glue_start_reboot+0x2c>
 8020d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8020db8 <glue_start_reboot+0x50>)
 8020d7e:	223c      	movs	r2, #60	@ 0x3c
 8020d80:	490e      	ldr	r1, [pc, #56]	@ (8020dbc <glue_start_reboot+0x54>)
 8020d82:	2003      	movs	r0, #3
 8020d84:	f7eb fada 	bl	800c33c <mg_log_prefix>
 8020d88:	687b      	ldr	r3, [r7, #4]
 8020d8a:	683a      	ldr	r2, [r7, #0]
 8020d8c:	4619      	mov	r1, r3
 8020d8e:	480c      	ldr	r0, [pc, #48]	@ (8020dc0 <glue_start_reboot+0x58>)
 8020d90:	f7eb fb24 	bl	800c3dc <mg_log>
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 8020d94:	f7f3 f8f8 	bl	8013f88 <mg_now>
 8020d98:	4602      	mov	r2, r0
 8020d9a:	460b      	mov	r3, r1
 8020d9c:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8020da0:	f143 0500 	adc.w	r5, r3, #0
 8020da4:	4b07      	ldr	r3, [pc, #28]	@ (8020dc4 <glue_start_reboot+0x5c>)
 8020da6:	e9c3 4500 	strd	r4, r5, [r3]
}
 8020daa:	bf00      	nop
 8020dac:	3708      	adds	r7, #8
 8020dae:	46bd      	mov	sp, r7
 8020db0:	bdb0      	pop	{r4, r5, r7, pc}
 8020db2:	bf00      	nop
 8020db4:	24000258 	.word	0x24000258
 8020db8:	08035278 	.word	0x08035278
 8020dbc:	08026c98 	.word	0x08026c98
 8020dc0:	08026ce0 	.word	0x08026ce0
 8020dc4:	240042e0 	.word	0x240042e0

08020dc8 <glue_check_reformat>:

static uint64_t s_action_timeout_reformat;  // Time when reformat ends
bool glue_check_reformat(void) {
 8020dc8:	b580      	push	{r7, lr}
 8020dca:	af00      	add	r7, sp, #0
  return s_action_timeout_reformat > mg_now(); // Return true if reformat is in progress
 8020dcc:	f7f3 f8dc 	bl	8013f88 <mg_now>
 8020dd0:	4b05      	ldr	r3, [pc, #20]	@ (8020de8 <glue_check_reformat+0x20>)
 8020dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dd6:	4290      	cmp	r0, r2
 8020dd8:	eb71 0303 	sbcs.w	r3, r1, r3
 8020ddc:	bf34      	ite	cc
 8020dde:	2301      	movcc	r3, #1
 8020de0:	2300      	movcs	r3, #0
 8020de2:	b2db      	uxtb	r3, r3
}
 8020de4:	4618      	mov	r0, r3
 8020de6:	bd80      	pop	{r7, pc}
 8020de8:	240042e8 	.word	0x240042e8

08020dec <glue_start_reformat>:
void glue_start_reformat(struct mg_str params) {
 8020dec:	b5b0      	push	{r4, r5, r7, lr}
 8020dee:	b082      	sub	sp, #8
 8020df0:	af00      	add	r7, sp, #0
 8020df2:	463b      	mov	r3, r7
 8020df4:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 8020df8:	4b0f      	ldr	r3, [pc, #60]	@ (8020e38 <glue_start_reformat+0x4c>)
 8020dfa:	681b      	ldr	r3, [r3, #0]
 8020dfc:	2b02      	cmp	r3, #2
 8020dfe:	dd0b      	ble.n	8020e18 <glue_start_reformat+0x2c>
 8020e00:	4b0e      	ldr	r3, [pc, #56]	@ (8020e3c <glue_start_reformat+0x50>)
 8020e02:	2245      	movs	r2, #69	@ 0x45
 8020e04:	490e      	ldr	r1, [pc, #56]	@ (8020e40 <glue_start_reformat+0x54>)
 8020e06:	2003      	movs	r0, #3
 8020e08:	f7eb fa98 	bl	800c33c <mg_log_prefix>
 8020e0c:	687b      	ldr	r3, [r7, #4]
 8020e0e:	683a      	ldr	r2, [r7, #0]
 8020e10:	4619      	mov	r1, r3
 8020e12:	480c      	ldr	r0, [pc, #48]	@ (8020e44 <glue_start_reformat+0x58>)
 8020e14:	f7eb fae2 	bl	800c3dc <mg_log>
  s_action_timeout_reformat = mg_now() + 1000; // Start reformat, finish after 1 second
 8020e18:	f7f3 f8b6 	bl	8013f88 <mg_now>
 8020e1c:	4602      	mov	r2, r0
 8020e1e:	460b      	mov	r3, r1
 8020e20:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8020e24:	f143 0500 	adc.w	r5, r3, #0
 8020e28:	4b07      	ldr	r3, [pc, #28]	@ (8020e48 <glue_start_reformat+0x5c>)
 8020e2a:	e9c3 4500 	strd	r4, r5, [r3]
}
 8020e2e:	bf00      	nop
 8020e30:	3708      	adds	r7, #8
 8020e32:	46bd      	mov	sp, r7
 8020e34:	bdb0      	pop	{r4, r5, r7, pc}
 8020e36:	bf00      	nop
 8020e38:	24000258 	.word	0x24000258
 8020e3c:	0803528c 	.word	0x0803528c
 8020e40:	08026c98 	.word	0x08026c98
 8020e44:	08026ce0 	.word	0x08026ce0
 8020e48:	240042e8 	.word	0x240042e8

08020e4c <glue_ota_begin_firmware_update>:

void *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 8020e4c:	b580      	push	{r7, lr}
 8020e4e:	b084      	sub	sp, #16
 8020e50:	af00      	add	r7, sp, #0
 8020e52:	6078      	str	r0, [r7, #4]
 8020e54:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 8020e56:	6838      	ldr	r0, [r7, #0]
 8020e58:	f7ef fbde 	bl	8010618 <mg_ota_begin>
 8020e5c:	4603      	mov	r3, r0
 8020e5e:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
 8020e60:	4b0c      	ldr	r3, [pc, #48]	@ (8020e94 <glue_ota_begin_firmware_update+0x48>)
 8020e62:	681b      	ldr	r3, [r3, #0]
 8020e64:	2b02      	cmp	r3, #2
 8020e66:	dd0b      	ble.n	8020e80 <glue_ota_begin_firmware_update+0x34>
 8020e68:	4b0b      	ldr	r3, [pc, #44]	@ (8020e98 <glue_ota_begin_firmware_update+0x4c>)
 8020e6a:	224b      	movs	r2, #75	@ 0x4b
 8020e6c:	490b      	ldr	r1, [pc, #44]	@ (8020e9c <glue_ota_begin_firmware_update+0x50>)
 8020e6e:	2003      	movs	r0, #3
 8020e70:	f7eb fa64 	bl	800c33c <mg_log_prefix>
 8020e74:	7bfb      	ldrb	r3, [r7, #15]
 8020e76:	683a      	ldr	r2, [r7, #0]
 8020e78:	6879      	ldr	r1, [r7, #4]
 8020e7a:	4809      	ldr	r0, [pc, #36]	@ (8020ea0 <glue_ota_begin_firmware_update+0x54>)
 8020e7c:	f7eb faae 	bl	800c3dc <mg_log>
  return ok ? (void *) 1 : NULL;
 8020e80:	7bfb      	ldrb	r3, [r7, #15]
 8020e82:	2b00      	cmp	r3, #0
 8020e84:	d001      	beq.n	8020e8a <glue_ota_begin_firmware_update+0x3e>
 8020e86:	2301      	movs	r3, #1
 8020e88:	e000      	b.n	8020e8c <glue_ota_begin_firmware_update+0x40>
 8020e8a:	2300      	movs	r3, #0
}
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	3710      	adds	r7, #16
 8020e90:	46bd      	mov	sp, r7
 8020e92:	bd80      	pop	{r7, pc}
 8020e94:	24000258 	.word	0x24000258
 8020e98:	080352a0 	.word	0x080352a0
 8020e9c:	08026c98 	.word	0x08026c98
 8020ea0:	08026cfc 	.word	0x08026cfc

08020ea4 <glue_ota_end_firmware_update>:
bool glue_ota_end_firmware_update(void *context) {
 8020ea4:	b580      	push	{r7, lr}
 8020ea6:	b086      	sub	sp, #24
 8020ea8:	af04      	add	r7, sp, #16
 8020eaa:	6078      	str	r0, [r7, #4]
  mg_timer_add(&g_mgr, 500, 0, (void (*)(void *)) (void *) mg_ota_end, context);
 8020eac:	687b      	ldr	r3, [r7, #4]
 8020eae:	9302      	str	r3, [sp, #8]
 8020eb0:	4b07      	ldr	r3, [pc, #28]	@ (8020ed0 <glue_ota_end_firmware_update+0x2c>)
 8020eb2:	9301      	str	r3, [sp, #4]
 8020eb4:	2300      	movs	r3, #0
 8020eb6:	9300      	str	r3, [sp, #0]
 8020eb8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8020ebc:	f04f 0300 	mov.w	r3, #0
 8020ec0:	4804      	ldr	r0, [pc, #16]	@ (8020ed4 <glue_ota_end_firmware_update+0x30>)
 8020ec2:	f7eb ff5f 	bl	800cd84 <mg_timer_add>
  return true;
 8020ec6:	2301      	movs	r3, #1
}
 8020ec8:	4618      	mov	r0, r3
 8020eca:	3708      	adds	r7, #8
 8020ecc:	46bd      	mov	sp, r7
 8020ece:	bd80      	pop	{r7, pc}
 8020ed0:	08010669 	.word	0x08010669
 8020ed4:	240042f0 	.word	0x240042f0

08020ed8 <glue_ota_write_firmware_update>:
bool glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 8020ed8:	b580      	push	{r7, lr}
 8020eda:	b084      	sub	sp, #16
 8020edc:	af00      	add	r7, sp, #0
 8020ede:	60f8      	str	r0, [r7, #12]
 8020ee0:	60b9      	str	r1, [r7, #8]
 8020ee2:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
 8020ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8020f18 <glue_ota_write_firmware_update+0x40>)
 8020ee6:	681b      	ldr	r3, [r3, #0]
 8020ee8:	2b02      	cmp	r3, #2
 8020eea:	dd0b      	ble.n	8020f04 <glue_ota_write_firmware_update+0x2c>
 8020eec:	4b0b      	ldr	r3, [pc, #44]	@ (8020f1c <glue_ota_write_firmware_update+0x44>)
 8020eee:	2253      	movs	r2, #83	@ 0x53
 8020ef0:	490b      	ldr	r1, [pc, #44]	@ (8020f20 <glue_ota_write_firmware_update+0x48>)
 8020ef2:	2003      	movs	r0, #3
 8020ef4:	f7eb fa22 	bl	800c33c <mg_log_prefix>
 8020ef8:	687b      	ldr	r3, [r7, #4]
 8020efa:	68ba      	ldr	r2, [r7, #8]
 8020efc:	68f9      	ldr	r1, [r7, #12]
 8020efe:	4809      	ldr	r0, [pc, #36]	@ (8020f24 <glue_ota_write_firmware_update+0x4c>)
 8020f00:	f7eb fa6c 	bl	800c3dc <mg_log>
  return mg_ota_write(buf, len);
 8020f04:	6879      	ldr	r1, [r7, #4]
 8020f06:	68b8      	ldr	r0, [r7, #8]
 8020f08:	f7ef fb9c 	bl	8010644 <mg_ota_write>
 8020f0c:	4603      	mov	r3, r0
}
 8020f0e:	4618      	mov	r0, r3
 8020f10:	3710      	adds	r7, #16
 8020f12:	46bd      	mov	sp, r7
 8020f14:	bd80      	pop	{r7, pc}
 8020f16:	bf00      	nop
 8020f18:	24000258 	.word	0x24000258
 8020f1c:	080352c0 	.word	0x080352c0
 8020f20:	08026c98 	.word	0x08026c98
 8020f24:	08026d10 	.word	0x08026d10

08020f28 <glue_upload_open_file_upload>:

void *glue_upload_open_file_upload(char *file_name, size_t total_size) {
 8020f28:	b580      	push	{r7, lr}
 8020f2a:	b0a4      	sub	sp, #144	@ 0x90
 8020f2c:	af00      	add	r7, sp, #0
 8020f2e:	6078      	str	r0, [r7, #4]
 8020f30:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 8020f32:	2300      	movs	r3, #0
 8020f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 8020f38:	2300      	movs	r3, #0
 8020f3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 8020f3e:	212f      	movs	r1, #47	@ 0x2f
 8020f40:	6878      	ldr	r0, [r7, #4]
 8020f42:	f002 fb22 	bl	802358a <strrchr>
 8020f46:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8020f4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8020f4e:	2b00      	cmp	r3, #0
 8020f50:	d102      	bne.n	8020f58 <glue_upload_open_file_upload+0x30>
 8020f52:	687b      	ldr	r3, [r7, #4]
 8020f54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 8020f58:	f107 0008 	add.w	r0, r7, #8
 8020f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8020f60:	4a0d      	ldr	r2, [pc, #52]	@ (8020f98 <glue_upload_open_file_upload+0x70>)
 8020f62:	2180      	movs	r1, #128	@ 0x80
 8020f64:	f7ef fc70 	bl	8010848 <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
 8020f68:	4b0c      	ldr	r3, [pc, #48]	@ (8020f9c <glue_upload_open_file_upload+0x74>)
 8020f6a:	681b      	ldr	r3, [r3, #0]
 8020f6c:	2b02      	cmp	r3, #2
 8020f6e:	dd0d      	ble.n	8020f8c <glue_upload_open_file_upload+0x64>
 8020f70:	4b0b      	ldr	r3, [pc, #44]	@ (8020fa0 <glue_upload_open_file_upload+0x78>)
 8020f72:	225f      	movs	r2, #95	@ 0x5f
 8020f74:	490b      	ldr	r1, [pc, #44]	@ (8020fa4 <glue_upload_open_file_upload+0x7c>)
 8020f76:	2003      	movs	r0, #3
 8020f78:	f7eb f9e0 	bl	800c33c <mg_log_prefix>
 8020f7c:	f107 0108 	add.w	r1, r7, #8
 8020f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8020f84:	683a      	ldr	r2, [r7, #0]
 8020f86:	4808      	ldr	r0, [pc, #32]	@ (8020fa8 <glue_upload_open_file_upload+0x80>)
 8020f88:	f7eb fa28 	bl	800c3dc <mg_log>
  return fp;
 8020f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8020f90:	4618      	mov	r0, r3
 8020f92:	3790      	adds	r7, #144	@ 0x90
 8020f94:	46bd      	mov	sp, r7
 8020f96:	bd80      	pop	{r7, pc}
 8020f98:	08026d20 	.word	0x08026d20
 8020f9c:	24000258 	.word	0x24000258
 8020fa0:	080352e0 	.word	0x080352e0
 8020fa4:	08026c98 	.word	0x08026c98
 8020fa8:	08026d28 	.word	0x08026d28

08020fac <glue_upload_close_file_upload>:
bool glue_upload_close_file_upload(void *fp) {
 8020fac:	b580      	push	{r7, lr}
 8020fae:	b082      	sub	sp, #8
 8020fb0:	af00      	add	r7, sp, #0
 8020fb2:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
 8020fb4:	4b09      	ldr	r3, [pc, #36]	@ (8020fdc <glue_upload_close_file_upload+0x30>)
 8020fb6:	681b      	ldr	r3, [r3, #0]
 8020fb8:	2b02      	cmp	r3, #2
 8020fba:	dd09      	ble.n	8020fd0 <glue_upload_close_file_upload+0x24>
 8020fbc:	4b08      	ldr	r3, [pc, #32]	@ (8020fe0 <glue_upload_close_file_upload+0x34>)
 8020fbe:	2263      	movs	r2, #99	@ 0x63
 8020fc0:	4908      	ldr	r1, [pc, #32]	@ (8020fe4 <glue_upload_close_file_upload+0x38>)
 8020fc2:	2003      	movs	r0, #3
 8020fc4:	f7eb f9ba 	bl	800c33c <mg_log_prefix>
 8020fc8:	6879      	ldr	r1, [r7, #4]
 8020fca:	4807      	ldr	r0, [pc, #28]	@ (8020fe8 <glue_upload_close_file_upload+0x3c>)
 8020fcc:	f7eb fa06 	bl	800c3dc <mg_log>
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 8020fd0:	2300      	movs	r3, #0
#endif
}
 8020fd2:	4618      	mov	r0, r3
 8020fd4:	3708      	adds	r7, #8
 8020fd6:	46bd      	mov	sp, r7
 8020fd8:	bd80      	pop	{r7, pc}
 8020fda:	bf00      	nop
 8020fdc:	24000258 	.word	0x24000258
 8020fe0:	08035300 	.word	0x08035300
 8020fe4:	08026c98 	.word	0x08026c98
 8020fe8:	08026d48 	.word	0x08026d48

08020fec <glue_upload_write_file_upload>:
bool glue_upload_write_file_upload(void *fp, void *buf, size_t len) {
 8020fec:	b580      	push	{r7, lr}
 8020fee:	b084      	sub	sp, #16
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	60f8      	str	r0, [r7, #12]
 8020ff4:	60b9      	str	r1, [r7, #8]
 8020ff6:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
 8020ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8021024 <glue_upload_write_file_upload+0x38>)
 8020ffa:	681b      	ldr	r3, [r3, #0]
 8020ffc:	2b02      	cmp	r3, #2
 8020ffe:	dd0b      	ble.n	8021018 <glue_upload_write_file_upload+0x2c>
 8021000:	4b09      	ldr	r3, [pc, #36]	@ (8021028 <glue_upload_write_file_upload+0x3c>)
 8021002:	226b      	movs	r2, #107	@ 0x6b
 8021004:	4909      	ldr	r1, [pc, #36]	@ (802102c <glue_upload_write_file_upload+0x40>)
 8021006:	2003      	movs	r0, #3
 8021008:	f7eb f998 	bl	800c33c <mg_log_prefix>
 802100c:	687b      	ldr	r3, [r7, #4]
 802100e:	68ba      	ldr	r2, [r7, #8]
 8021010:	68f9      	ldr	r1, [r7, #12]
 8021012:	4807      	ldr	r0, [pc, #28]	@ (8021030 <glue_upload_write_file_upload+0x44>)
 8021014:	f7eb f9e2 	bl	800c3dc <mg_log>
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 8021018:	2300      	movs	r3, #0
#endif
}
 802101a:	4618      	mov	r0, r3
 802101c:	3710      	adds	r7, #16
 802101e:	46bd      	mov	sp, r7
 8021020:	bd80      	pop	{r7, pc}
 8021022:	bf00      	nop
 8021024:	24000258 	.word	0x24000258
 8021028:	08035320 	.word	0x08035320
 802102c:	08026c98 	.word	0x08026c98
 8021030:	08026d54 	.word	0x08026d54

08021034 <glue_reply_graph_data>:

void glue_reply_graph_data(struct mg_connection *c, struct mg_http_message *hm) {
 8021034:	b580      	push	{r7, lr}
 8021036:	b086      	sub	sp, #24
 8021038:	af02      	add	r7, sp, #8
 802103a:	6078      	str	r0, [r7, #4]
 802103c:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 802103e:	4b08      	ldr	r3, [pc, #32]	@ (8021060 <glue_reply_graph_data+0x2c>)
 8021040:	60fb      	str	r3, [r7, #12]
  const char *value = "[[1724576787,20.3],[1724576847,27.2],[1724576907,29.7],[1724576967,27.9],[1724577027,25.1],[1724577087,23.8],[1724577147,22.5],[1724577207,22.2],[1724577267,23.3],[1724577327,23.9]]";
 8021042:	4b08      	ldr	r3, [pc, #32]	@ (8021064 <glue_reply_graph_data+0x30>)
 8021044:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8021046:	68bb      	ldr	r3, [r7, #8]
 8021048:	9300      	str	r3, [sp, #0]
 802104a:	4b07      	ldr	r3, [pc, #28]	@ (8021068 <glue_reply_graph_data+0x34>)
 802104c:	68fa      	ldr	r2, [r7, #12]
 802104e:	21c8      	movs	r1, #200	@ 0xc8
 8021050:	6878      	ldr	r0, [r7, #4]
 8021052:	f7e8 fbe3 	bl	800981c <mg_http_reply>
}
 8021056:	bf00      	nop
 8021058:	3710      	adds	r7, #16
 802105a:	46bd      	mov	sp, r7
 802105c:	bd80      	pop	{r7, pc}
 802105e:	bf00      	nop
 8021060:	08026d70 	.word	0x08026d70
 8021064:	08026dac 	.word	0x08026dac
 8021068:	08026e64 	.word	0x08026e64

0802106c <glue_get_state>:
static struct state s_state = {42, 27, 67, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 802106c:	b4b0      	push	{r4, r5, r7}
 802106e:	b083      	sub	sp, #12
 8021070:	af00      	add	r7, sp, #0
 8021072:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 8021074:	687b      	ldr	r3, [r7, #4]
 8021076:	4a08      	ldr	r2, [pc, #32]	@ (8021098 <glue_get_state+0x2c>)
 8021078:	461c      	mov	r4, r3
 802107a:	4615      	mov	r5, r2
 802107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021084:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8021088:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 802108c:	bf00      	nop
 802108e:	370c      	adds	r7, #12
 8021090:	46bd      	mov	sp, r7
 8021092:	bcb0      	pop	{r4, r5, r7}
 8021094:	4770      	bx	lr
 8021096:	bf00      	nop
 8021098:	240002b4 	.word	0x240002b4

0802109c <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 802109c:	b480      	push	{r7}
 802109e:	b083      	sub	sp, #12
 80210a0:	af00      	add	r7, sp, #0
 80210a2:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 80210a4:	687b      	ldr	r3, [r7, #4]
 80210a6:	4a05      	ldr	r2, [pc, #20]	@ (80210bc <glue_get_leds+0x20>)
 80210a8:	8811      	ldrh	r1, [r2, #0]
 80210aa:	7892      	ldrb	r2, [r2, #2]
 80210ac:	8019      	strh	r1, [r3, #0]
 80210ae:	709a      	strb	r2, [r3, #2]
}
 80210b0:	bf00      	nop
 80210b2:	370c      	adds	r7, #12
 80210b4:	46bd      	mov	sp, r7
 80210b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210ba:	4770      	bx	lr
 80210bc:	240002e0 	.word	0x240002e0

080210c0 <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 80210c0:	b480      	push	{r7}
 80210c2:	b083      	sub	sp, #12
 80210c4:	af00      	add	r7, sp, #0
 80210c6:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 80210c8:	4b05      	ldr	r3, [pc, #20]	@ (80210e0 <glue_set_leds+0x20>)
 80210ca:	687a      	ldr	r2, [r7, #4]
 80210cc:	8811      	ldrh	r1, [r2, #0]
 80210ce:	7892      	ldrb	r2, [r2, #2]
 80210d0:	8019      	strh	r1, [r3, #0]
 80210d2:	709a      	strb	r2, [r3, #2]
}
 80210d4:	bf00      	nop
 80210d6:	370c      	adds	r7, #12
 80210d8:	46bd      	mov	sp, r7
 80210da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210de:	4770      	bx	lr
 80210e0:	240002e0 	.word	0x240002e0

080210e4 <glue_get_network_settings>:

static struct network_settings s_network_settings = {"192.168.0.42", "192.168.0.1", "255.255.255.0", true};
void glue_get_network_settings(struct network_settings *data) {
 80210e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80210e6:	b083      	sub	sp, #12
 80210e8:	af00      	add	r7, sp, #0
 80210ea:	6078      	str	r0, [r7, #4]
  *data = s_network_settings;  // Sync with your device
 80210ec:	687b      	ldr	r3, [r7, #4]
 80210ee:	4a0e      	ldr	r2, [pc, #56]	@ (8021128 <glue_get_network_settings+0x44>)
 80210f0:	4614      	mov	r4, r2
 80210f2:	469c      	mov	ip, r3
 80210f4:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80210f8:	4665      	mov	r5, ip
 80210fa:	4626      	mov	r6, r4
 80210fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80210fe:	6028      	str	r0, [r5, #0]
 8021100:	6069      	str	r1, [r5, #4]
 8021102:	60aa      	str	r2, [r5, #8]
 8021104:	60eb      	str	r3, [r5, #12]
 8021106:	3410      	adds	r4, #16
 8021108:	f10c 0c10 	add.w	ip, ip, #16
 802110c:	4574      	cmp	r4, lr
 802110e:	d1f3      	bne.n	80210f8 <glue_get_network_settings+0x14>
 8021110:	4665      	mov	r5, ip
 8021112:	4623      	mov	r3, r4
 8021114:	cb07      	ldmia	r3!, {r0, r1, r2}
 8021116:	6028      	str	r0, [r5, #0]
 8021118:	6069      	str	r1, [r5, #4]
 802111a:	60aa      	str	r2, [r5, #8]
 802111c:	781b      	ldrb	r3, [r3, #0]
 802111e:	732b      	strb	r3, [r5, #12]
}
 8021120:	bf00      	nop
 8021122:	370c      	adds	r7, #12
 8021124:	46bd      	mov	sp, r7
 8021126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021128:	240002e4 	.word	0x240002e4

0802112c <glue_set_network_settings>:
void glue_set_network_settings(struct network_settings *data) {
 802112c:	b4f0      	push	{r4, r5, r6, r7}
 802112e:	b082      	sub	sp, #8
 8021130:	af00      	add	r7, sp, #0
 8021132:	6078      	str	r0, [r7, #4]
  s_network_settings = *data; // Sync with your device
 8021134:	4a0e      	ldr	r2, [pc, #56]	@ (8021170 <glue_set_network_settings+0x44>)
 8021136:	687b      	ldr	r3, [r7, #4]
 8021138:	461c      	mov	r4, r3
 802113a:	4616      	mov	r6, r2
 802113c:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8021140:	4635      	mov	r5, r6
 8021142:	4623      	mov	r3, r4
 8021144:	6818      	ldr	r0, [r3, #0]
 8021146:	6859      	ldr	r1, [r3, #4]
 8021148:	689a      	ldr	r2, [r3, #8]
 802114a:	68db      	ldr	r3, [r3, #12]
 802114c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802114e:	3410      	adds	r4, #16
 8021150:	3610      	adds	r6, #16
 8021152:	4564      	cmp	r4, ip
 8021154:	d1f4      	bne.n	8021140 <glue_set_network_settings+0x14>
 8021156:	4633      	mov	r3, r6
 8021158:	6820      	ldr	r0, [r4, #0]
 802115a:	6861      	ldr	r1, [r4, #4]
 802115c:	68a2      	ldr	r2, [r4, #8]
 802115e:	c307      	stmia	r3!, {r0, r1, r2}
 8021160:	7b22      	ldrb	r2, [r4, #12]
 8021162:	701a      	strb	r2, [r3, #0]
}
 8021164:	bf00      	nop
 8021166:	3708      	adds	r7, #8
 8021168:	46bd      	mov	sp, r7
 802116a:	bcf0      	pop	{r4, r5, r6, r7}
 802116c:	4770      	bx	lr
 802116e:	bf00      	nop
 8021170:	240002e4 	.word	0x240002e4

08021174 <glue_get_settings>:

static struct settings s_settings = {"edit & save me", "info", 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 8021174:	b580      	push	{r7, lr}
 8021176:	b082      	sub	sp, #8
 8021178:	af00      	add	r7, sp, #0
 802117a:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 802117c:	687b      	ldr	r3, [r7, #4]
 802117e:	4a05      	ldr	r2, [pc, #20]	@ (8021194 <glue_get_settings+0x20>)
 8021180:	4618      	mov	r0, r3
 8021182:	4611      	mov	r1, r2
 8021184:	2348      	movs	r3, #72	@ 0x48
 8021186:	461a      	mov	r2, r3
 8021188:	f002 fafb 	bl	8023782 <memcpy>
}
 802118c:	bf00      	nop
 802118e:	3708      	adds	r7, #8
 8021190:	46bd      	mov	sp, r7
 8021192:	bd80      	pop	{r7, pc}
 8021194:	24000328 	.word	0x24000328

08021198 <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 8021198:	b580      	push	{r7, lr}
 802119a:	b082      	sub	sp, #8
 802119c:	af00      	add	r7, sp, #0
 802119e:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 80211a0:	4a05      	ldr	r2, [pc, #20]	@ (80211b8 <glue_set_settings+0x20>)
 80211a2:	687b      	ldr	r3, [r7, #4]
 80211a4:	4610      	mov	r0, r2
 80211a6:	4619      	mov	r1, r3
 80211a8:	2348      	movs	r3, #72	@ 0x48
 80211aa:	461a      	mov	r2, r3
 80211ac:	f002 fae9 	bl	8023782 <memcpy>
}
 80211b0:	bf00      	nop
 80211b2:	3708      	adds	r7, #8
 80211b4:	46bd      	mov	sp, r7
 80211b6:	bd80      	pop	{r7, pc}
 80211b8:	24000328 	.word	0x24000328

080211bc <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 80211bc:	b580      	push	{r7, lr}
 80211be:	b082      	sub	sp, #8
 80211c0:	af00      	add	r7, sp, #0
 80211c2:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	4a05      	ldr	r2, [pc, #20]	@ (80211dc <glue_get_security+0x20>)
 80211c8:	4618      	mov	r0, r3
 80211ca:	4611      	mov	r1, r2
 80211cc:	2350      	movs	r3, #80	@ 0x50
 80211ce:	461a      	mov	r2, r3
 80211d0:	f002 fad7 	bl	8023782 <memcpy>
}
 80211d4:	bf00      	nop
 80211d6:	3708      	adds	r7, #8
 80211d8:	46bd      	mov	sp, r7
 80211da:	bd80      	pop	{r7, pc}
 80211dc:	24000370 	.word	0x24000370

080211e0 <glue_set_security>:
void glue_set_security(struct security *data) {
 80211e0:	b580      	push	{r7, lr}
 80211e2:	b082      	sub	sp, #8
 80211e4:	af00      	add	r7, sp, #0
 80211e6:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 80211e8:	4a05      	ldr	r2, [pc, #20]	@ (8021200 <glue_set_security+0x20>)
 80211ea:	687b      	ldr	r3, [r7, #4]
 80211ec:	4610      	mov	r0, r2
 80211ee:	4619      	mov	r1, r3
 80211f0:	2350      	movs	r3, #80	@ 0x50
 80211f2:	461a      	mov	r2, r3
 80211f4:	f002 fac5 	bl	8023782 <memcpy>
}
 80211f8:	bf00      	nop
 80211fa:	3708      	adds	r7, #8
 80211fc:	46bd      	mov	sp, r7
 80211fe:	bd80      	pop	{r7, pc}
 8021200:	24000370 	.word	0x24000370

08021204 <glue_reply_loglevels>:

void glue_reply_loglevels(struct mg_connection *c, struct mg_http_message *hm) {
 8021204:	b580      	push	{r7, lr}
 8021206:	b086      	sub	sp, #24
 8021208:	af02      	add	r7, sp, #8
 802120a:	6078      	str	r0, [r7, #4]
 802120c:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 802120e:	4b08      	ldr	r3, [pc, #32]	@ (8021230 <glue_reply_loglevels+0x2c>)
 8021210:	60fb      	str	r3, [r7, #12]
  const char *value = "[\"disabled\",\"error\",\"info\",\"debug\",\"verbose\"]";
 8021212:	4b08      	ldr	r3, [pc, #32]	@ (8021234 <glue_reply_loglevels+0x30>)
 8021214:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8021216:	68bb      	ldr	r3, [r7, #8]
 8021218:	9300      	str	r3, [sp, #0]
 802121a:	4b07      	ldr	r3, [pc, #28]	@ (8021238 <glue_reply_loglevels+0x34>)
 802121c:	68fa      	ldr	r2, [r7, #12]
 802121e:	21c8      	movs	r1, #200	@ 0xc8
 8021220:	6878      	ldr	r0, [r7, #4]
 8021222:	f7e8 fafb 	bl	800981c <mg_http_reply>
}
 8021226:	bf00      	nop
 8021228:	3710      	adds	r7, #16
 802122a:	46bd      	mov	sp, r7
 802122c:	bd80      	pop	{r7, pc}
 802122e:	bf00      	nop
 8021230:	08026d70 	.word	0x08026d70
 8021234:	08026e68 	.word	0x08026e68
 8021238:	08026e64 	.word	0x08026e64

0802123c <glue_reply_events>:
void glue_reply_events(struct mg_connection *c, struct mg_http_message *hm) {
 802123c:	b580      	push	{r7, lr}
 802123e:	b086      	sub	sp, #24
 8021240:	af02      	add	r7, sp, #8
 8021242:	6078      	str	r0, [r7, #4]
 8021244:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8021246:	4b08      	ldr	r3, [pc, #32]	@ (8021268 <glue_reply_events+0x2c>)
 8021248:	60fb      	str	r3, [r7, #12]
  const char *value = "[{\"priority\":1,\"timestamp\":1738653279,\"active\":false,\"message\":\"event 1\"},{\"priority\":2,\"timestamp\":1738653390,\"active\":true,\"message\":\"event 2\"}]";
 802124a:	4b08      	ldr	r3, [pc, #32]	@ (802126c <glue_reply_events+0x30>)
 802124c:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 802124e:	68bb      	ldr	r3, [r7, #8]
 8021250:	9300      	str	r3, [sp, #0]
 8021252:	4b07      	ldr	r3, [pc, #28]	@ (8021270 <glue_reply_events+0x34>)
 8021254:	68fa      	ldr	r2, [r7, #12]
 8021256:	21c8      	movs	r1, #200	@ 0xc8
 8021258:	6878      	ldr	r0, [r7, #4]
 802125a:	f7e8 fadf 	bl	800981c <mg_http_reply>
}
 802125e:	bf00      	nop
 8021260:	3710      	adds	r7, #16
 8021262:	46bd      	mov	sp, r7
 8021264:	bd80      	pop	{r7, pc}
 8021266:	bf00      	nop
 8021268:	08026d70 	.word	0x08026d70
 802126c:	08026e98 	.word	0x08026e98
 8021270:	08026e64 	.word	0x08026e64

08021274 <get_api_handler>:
  (struct apihandler *) &s_apihandler_security,
  (struct apihandler *) &s_apihandler_loglevels,
  (struct apihandler *) &s_apihandler_events
};

static struct apihandler *get_api_handler(struct mg_str name) {
 8021274:	b580      	push	{r7, lr}
 8021276:	b086      	sub	sp, #24
 8021278:	af00      	add	r7, sp, #0
 802127a:	463b      	mov	r3, r7
 802127c:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t num_handlers = sizeof(s_apihandlers) / sizeof(s_apihandlers[0]);
 8021280:	230c      	movs	r3, #12
 8021282:	613b      	str	r3, [r7, #16]
  size_t i;
  if (name.len == 0) return NULL;
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	2b00      	cmp	r3, #0
 8021288:	d101      	bne.n	802128e <get_api_handler+0x1a>
 802128a:	2300      	movs	r3, #0
 802128c:	e039      	b.n	8021302 <get_api_handler+0x8e>
  if (num_handlers == 0) return NULL;
 802128e:	693b      	ldr	r3, [r7, #16]
 8021290:	2b00      	cmp	r3, #0
 8021292:	d101      	bne.n	8021298 <get_api_handler+0x24>
 8021294:	2300      	movs	r3, #0
 8021296:	e034      	b.n	8021302 <get_api_handler+0x8e>
  for (i = 0; i < num_handlers; i++) {
 8021298:	2300      	movs	r3, #0
 802129a:	617b      	str	r3, [r7, #20]
 802129c:	e02c      	b.n	80212f8 <get_api_handler+0x84>
    struct apihandler *h = s_apihandlers[i];
 802129e:	4a1b      	ldr	r2, [pc, #108]	@ (802130c <get_api_handler+0x98>)
 80212a0:	697b      	ldr	r3, [r7, #20]
 80212a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80212a6:	60fb      	str	r3, [r7, #12]
    size_t n = strlen(h->name);
 80212a8:	68fb      	ldr	r3, [r7, #12]
 80212aa:	681b      	ldr	r3, [r3, #0]
 80212ac:	4618      	mov	r0, r3
 80212ae:	f7df f88f 	bl	80003d0 <strlen>
 80212b2:	60b8      	str	r0, [r7, #8]
    if (n > name.len) continue;
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	68ba      	ldr	r2, [r7, #8]
 80212b8:	429a      	cmp	r2, r3
 80212ba:	d815      	bhi.n	80212e8 <get_api_handler+0x74>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 80212bc:	6838      	ldr	r0, [r7, #0]
 80212be:	68fb      	ldr	r3, [r7, #12]
 80212c0:	681b      	ldr	r3, [r3, #0]
 80212c2:	68ba      	ldr	r2, [r7, #8]
 80212c4:	4619      	mov	r1, r3
 80212c6:	f002 f93b 	bl	8023540 <strncmp>
 80212ca:	4603      	mov	r3, r0
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d10d      	bne.n	80212ec <get_api_handler+0x78>
    if (name.len > n && name.buf[n] != '/') continue;
 80212d0:	687b      	ldr	r3, [r7, #4]
 80212d2:	68ba      	ldr	r2, [r7, #8]
 80212d4:	429a      	cmp	r2, r3
 80212d6:	d205      	bcs.n	80212e4 <get_api_handler+0x70>
 80212d8:	683a      	ldr	r2, [r7, #0]
 80212da:	68bb      	ldr	r3, [r7, #8]
 80212dc:	4413      	add	r3, r2
 80212de:	781b      	ldrb	r3, [r3, #0]
 80212e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80212e2:	d105      	bne.n	80212f0 <get_api_handler+0x7c>
    return h;
 80212e4:	68fb      	ldr	r3, [r7, #12]
 80212e6:	e00c      	b.n	8021302 <get_api_handler+0x8e>
    if (n > name.len) continue;
 80212e8:	bf00      	nop
 80212ea:	e002      	b.n	80212f2 <get_api_handler+0x7e>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 80212ec:	bf00      	nop
 80212ee:	e000      	b.n	80212f2 <get_api_handler+0x7e>
    if (name.len > n && name.buf[n] != '/') continue;
 80212f0:	bf00      	nop
  for (i = 0; i < num_handlers; i++) {
 80212f2:	697b      	ldr	r3, [r7, #20]
 80212f4:	3301      	adds	r3, #1
 80212f6:	617b      	str	r3, [r7, #20]
 80212f8:	697a      	ldr	r2, [r7, #20]
 80212fa:	693b      	ldr	r3, [r7, #16]
 80212fc:	429a      	cmp	r2, r3
 80212fe:	d3ce      	bcc.n	802129e <get_api_handler+0x2a>
  }
  return NULL;
 8021300:	2300      	movs	r3, #0
}
 8021302:	4618      	mov	r0, r3
 8021304:	3718      	adds	r7, #24
 8021306:	46bd      	mov	sp, r7
 8021308:	bd80      	pop	{r7, pc}
 802130a:	bf00      	nop
 802130c:	240007ec 	.word	0x240007ec

08021310 <find_handler>:

static struct apihandler *find_handler(struct mg_http_message *hm) {
 8021310:	b580      	push	{r7, lr}
 8021312:	b084      	sub	sp, #16
 8021314:	af00      	add	r7, sp, #0
 8021316:	6078      	str	r0, [r7, #4]
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 8021318:	687b      	ldr	r3, [r7, #4]
 802131a:	68db      	ldr	r3, [r3, #12]
 802131c:	2b05      	cmp	r3, #5
 802131e:	d909      	bls.n	8021334 <find_handler+0x24>
 8021320:	687b      	ldr	r3, [r7, #4]
 8021322:	689b      	ldr	r3, [r3, #8]
 8021324:	2205      	movs	r2, #5
 8021326:	490f      	ldr	r1, [pc, #60]	@ (8021364 <find_handler+0x54>)
 8021328:	4618      	mov	r0, r3
 802132a:	f002 f909 	bl	8023540 <strncmp>
 802132e:	4603      	mov	r3, r0
 8021330:	2b00      	cmp	r3, #0
 8021332:	d001      	beq.n	8021338 <find_handler+0x28>
 8021334:	2300      	movs	r3, #0
 8021336:	e011      	b.n	802135c <find_handler+0x4c>
  return get_api_handler(mg_str_n(hm->uri.buf + 5, hm->uri.len - 5));
 8021338:	687b      	ldr	r3, [r7, #4]
 802133a:	689b      	ldr	r3, [r3, #8]
 802133c:	1d59      	adds	r1, r3, #5
 802133e:	687b      	ldr	r3, [r7, #4]
 8021340:	68db      	ldr	r3, [r3, #12]
 8021342:	1f5a      	subs	r2, r3, #5
 8021344:	f107 0308 	add.w	r3, r7, #8
 8021348:	4618      	mov	r0, r3
 802134a:	f7f2 fe60 	bl	801400e <mg_str_n>
 802134e:	f107 0308 	add.w	r3, r7, #8
 8021352:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021356:	f7ff ff8d 	bl	8021274 <get_api_handler>
 802135a:	4603      	mov	r3, r0
}
 802135c:	4618      	mov	r0, r3
 802135e:	3710      	adds	r7, #16
 8021360:	46bd      	mov	sp, r7
 8021362:	bd80      	pop	{r7, pc}
 8021364:	080270e0 	.word	0x080270e0

08021368 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 8021368:	b590      	push	{r4, r7, lr}
 802136a:	b089      	sub	sp, #36	@ 0x24
 802136c:	af00      	add	r7, sp, #0
 802136e:	f107 0408 	add.w	r4, r7, #8
 8021372:	e884 0003 	stmia.w	r4, {r0, r1}
 8021376:	607a      	str	r2, [r7, #4]
 8021378:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 802137a:	f107 0010 	add.w	r0, r7, #16
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	f107 0208 	add.w	r2, r7, #8
 8021384:	ca06      	ldmia	r2, {r1, r2}
 8021386:	f7ea fe75 	bl	800c074 <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 802138a:	697b      	ldr	r3, [r7, #20]
 802138c:	2b01      	cmp	r3, #1
 802138e:	d913      	bls.n	80213b8 <mg_json_get_str2+0x50>
 8021390:	693b      	ldr	r3, [r7, #16]
 8021392:	781b      	ldrb	r3, [r3, #0]
 8021394:	2b22      	cmp	r3, #34	@ 0x22
 8021396:	d10f      	bne.n	80213b8 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 8021398:	693b      	ldr	r3, [r7, #16]
 802139a:	1c59      	adds	r1, r3, #1
 802139c:	697b      	ldr	r3, [r7, #20]
 802139e:	1e9a      	subs	r2, r3, #2
 80213a0:	f107 0318 	add.w	r3, r7, #24
 80213a4:	4618      	mov	r0, r3
 80213a6:	f7f2 fe32 	bl	801400e <mg_str_n>
 80213aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80213ac:	683a      	ldr	r2, [r7, #0]
 80213ae:	f107 0118 	add.w	r1, r7, #24
 80213b2:	c903      	ldmia	r1, {r0, r1}
 80213b4:	f7ea ff04 	bl	800c1c0 <mg_json_unescape>
  }
}
 80213b8:	bf00      	nop
 80213ba:	3724      	adds	r7, #36	@ 0x24
 80213bc:	46bd      	mov	sp, r7
 80213be:	bd90      	pop	{r4, r7, pc}

080213c0 <authenticate>:
void mongoose_set_auth_handler(int (*fn)(const char *, const char *)) {
  s_auth = fn;
}

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 80213c0:	b580      	push	{r7, lr}
 80213c2:	b0ba      	sub	sp, #232	@ 0xe8
 80213c4:	af02      	add	r7, sp, #8
 80213c6:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 80213c8:	2300      	movs	r3, #0
 80213ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 80213ce:	f107 030c 	add.w	r3, r7, #12
 80213d2:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80213d6:	2264      	movs	r2, #100	@ 0x64
 80213d8:	9200      	str	r2, [sp, #0]
 80213da:	2264      	movs	r2, #100	@ 0x64
 80213dc:	6878      	ldr	r0, [r7, #4]
 80213de:	f7e9 f993 	bl	800a708 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 80213e2:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d06f      	beq.n	80214ca <authenticate+0x10a>
 80213ea:	7b3b      	ldrb	r3, [r7, #12]
 80213ec:	2b00      	cmp	r3, #0
 80213ee:	d06c      	beq.n	80214ca <authenticate+0x10a>
    // Both user and password is set, auth by user/password via glue API
    int level = s_auth(user, pass);
 80213f0:	4b5b      	ldr	r3, [pc, #364]	@ (8021560 <authenticate+0x1a0>)
 80213f2:	681b      	ldr	r3, [r3, #0]
 80213f4:	f107 010c 	add.w	r1, r7, #12
 80213f8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80213fc:	4610      	mov	r0, r2
 80213fe:	4798      	blx	r3
 8021400:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
 8021404:	4b57      	ldr	r3, [pc, #348]	@ (8021564 <authenticate+0x1a4>)
 8021406:	681b      	ldr	r3, [r3, #0]
 8021408:	2b02      	cmp	r3, #2
 802140a:	dd0e      	ble.n	802142a <authenticate+0x6a>
 802140c:	4b56      	ldr	r3, [pc, #344]	@ (8021568 <authenticate+0x1a8>)
 802140e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8021412:	4956      	ldr	r1, [pc, #344]	@ (802156c <authenticate+0x1ac>)
 8021414:	2003      	movs	r0, #3
 8021416:	f7ea ff91 	bl	800c33c <mg_log_prefix>
 802141a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802141e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8021422:	4619      	mov	r1, r3
 8021424:	4852      	ldr	r0, [pc, #328]	@ (8021570 <authenticate+0x1b0>)
 8021426:	f7ea ffd9 	bl	800c3dc <mg_log>
    if (level > 0) {  // Proceed only if the firmware authenticated us
 802142a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 802142e:	2b00      	cmp	r3, #0
 8021430:	dd75      	ble.n	802151e <authenticate+0x15e>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8021432:	4b50      	ldr	r3, [pc, #320]	@ (8021574 <authenticate+0x1b4>)
 8021434:	681b      	ldr	r3, [r3, #0]
 8021436:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802143a:	e014      	b.n	8021466 <authenticate+0xa6>
        if (strcmp(user, u->name) == 0) result = u;
 802143c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021440:	1d1a      	adds	r2, r3, #4
 8021442:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8021446:	4611      	mov	r1, r2
 8021448:	4618      	mov	r0, r3
 802144a:	f7de ff61 	bl	8000310 <strcmp>
 802144e:	4603      	mov	r3, r0
 8021450:	2b00      	cmp	r3, #0
 8021452:	d103      	bne.n	802145c <authenticate+0x9c>
 8021454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021458:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 802145c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021460:	681b      	ldr	r3, [r3, #0]
 8021462:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8021466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802146a:	2b00      	cmp	r3, #0
 802146c:	d003      	beq.n	8021476 <authenticate+0xb6>
 802146e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021472:	2b00      	cmp	r3, #0
 8021474:	d0e2      	beq.n	802143c <authenticate+0x7c>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 8021476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802147a:	2b00      	cmp	r3, #0
 802147c:	d14f      	bne.n	802151e <authenticate+0x15e>
        result = (struct user *) calloc(1, sizeof(*result));
 802147e:	2140      	movs	r1, #64	@ 0x40
 8021480:	2001      	movs	r0, #1
 8021482:	f001 fd73 	bl	8022f6c <calloc>
 8021486:	4603      	mov	r3, r0
 8021488:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 802148c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021490:	1d18      	adds	r0, r3, #4
 8021492:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8021496:	4a38      	ldr	r2, [pc, #224]	@ (8021578 <authenticate+0x1b8>)
 8021498:	2120      	movs	r1, #32
 802149a:	f7ef f9d5 	bl	8010848 <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 802149e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80214a2:	3324      	adds	r3, #36	@ 0x24
 80214a4:	2114      	movs	r1, #20
 80214a6:	4618      	mov	r0, r3
 80214a8:	f7fd ff68 	bl	801f37c <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 80214ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80214b0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80214b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80214b6:	4b2f      	ldr	r3, [pc, #188]	@ (8021574 <authenticate+0x1b4>)
 80214b8:	681a      	ldr	r2, [r3, #0]
 80214ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80214be:	601a      	str	r2, [r3, #0]
 80214c0:	4a2c      	ldr	r2, [pc, #176]	@ (8021574 <authenticate+0x1b4>)
 80214c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80214c6:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 80214c8:	e029      	b.n	802151e <authenticate+0x15e>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 80214ca:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80214ce:	2b00      	cmp	r3, #0
 80214d0:	d126      	bne.n	8021520 <authenticate+0x160>
 80214d2:	7b3b      	ldrb	r3, [r7, #12]
 80214d4:	2b00      	cmp	r3, #0
 80214d6:	d023      	beq.n	8021520 <authenticate+0x160>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 80214d8:	4b26      	ldr	r3, [pc, #152]	@ (8021574 <authenticate+0x1b4>)
 80214da:	681b      	ldr	r3, [r3, #0]
 80214dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80214e0:	e014      	b.n	802150c <authenticate+0x14c>
      if (strcmp(u->token, pass) == 0) result = u;
 80214e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80214e6:	3324      	adds	r3, #36	@ 0x24
 80214e8:	f107 020c 	add.w	r2, r7, #12
 80214ec:	4611      	mov	r1, r2
 80214ee:	4618      	mov	r0, r3
 80214f0:	f7de ff0e 	bl	8000310 <strcmp>
 80214f4:	4603      	mov	r3, r0
 80214f6:	2b00      	cmp	r3, #0
 80214f8:	d103      	bne.n	8021502 <authenticate+0x142>
 80214fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80214fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8021502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021506:	681b      	ldr	r3, [r3, #0]
 8021508:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802150c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021510:	2b00      	cmp	r3, #0
 8021512:	d005      	beq.n	8021520 <authenticate+0x160>
 8021514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021518:	2b00      	cmp	r3, #0
 802151a:	d0e2      	beq.n	80214e2 <authenticate+0x122>
 802151c:	e000      	b.n	8021520 <authenticate+0x160>
  if (user[0] != '\0' && pass[0] != '\0') {
 802151e:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
 8021520:	4b10      	ldr	r3, [pc, #64]	@ (8021564 <authenticate+0x1a4>)
 8021522:	681b      	ldr	r3, [r3, #0]
 8021524:	2b03      	cmp	r3, #3
 8021526:	dd14      	ble.n	8021552 <authenticate+0x192>
 8021528:	4b0f      	ldr	r3, [pc, #60]	@ (8021568 <authenticate+0x1a8>)
 802152a:	f240 122b 	movw	r2, #299	@ 0x12b
 802152e:	490f      	ldr	r1, [pc, #60]	@ (802156c <authenticate+0x1ac>)
 8021530:	2004      	movs	r0, #4
 8021532:	f7ea ff03 	bl	800c33c <mg_log_prefix>
 8021536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802153a:	2b00      	cmp	r3, #0
 802153c:	d001      	beq.n	8021542 <authenticate+0x182>
 802153e:	4b0f      	ldr	r3, [pc, #60]	@ (802157c <authenticate+0x1bc>)
 8021540:	e000      	b.n	8021544 <authenticate+0x184>
 8021542:	4b0f      	ldr	r3, [pc, #60]	@ (8021580 <authenticate+0x1c0>)
 8021544:	f107 020c 	add.w	r2, r7, #12
 8021548:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 802154c:	480d      	ldr	r0, [pc, #52]	@ (8021584 <authenticate+0x1c4>)
 802154e:	f7ea ff45 	bl	800c3dc <mg_log>
  return result;
 8021552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 8021556:	4618      	mov	r0, r3
 8021558:	37e0      	adds	r7, #224	@ 0xe0
 802155a:	46bd      	mov	sp, r7
 802155c:	bd80      	pop	{r7, pc}
 802155e:	bf00      	nop
 8021560:	2400081c 	.word	0x2400081c
 8021564:	24000258 	.word	0x24000258
 8021568:	08035340 	.word	0x08035340
 802156c:	080270e8 	.word	0x080270e8
 8021570:	0802714c 	.word	0x0802714c
 8021574:	24004338 	.word	0x24004338
 8021578:	08027160 	.word	0x08027160
 802157c:	08027164 	.word	0x08027164
 8021580:	08027168 	.word	0x08027168
 8021584:	08027170 	.word	0x08027170

08021588 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 8021588:	b580      	push	{r7, lr}
 802158a:	b0cc      	sub	sp, #304	@ 0x130
 802158c:	af0a      	add	r7, sp, #40	@ 0x28
 802158e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8021592:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8021596:	6018      	str	r0, [r3, #0]
 8021598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802159c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80215a0:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 80215a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80215a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80215aa:	681b      	ldr	r3, [r3, #0]
 80215ac:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 80215b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80215b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80215b8:	681b      	ldr	r3, [r3, #0]
 80215ba:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80215be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80215c2:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 80215c4:	2b00      	cmp	r3, #0
 80215c6:	d001      	beq.n	80215cc <handle_login+0x44>
 80215c8:	4b1e      	ldr	r3, [pc, #120]	@ (8021644 <handle_login+0xbc>)
 80215ca:	e000      	b.n	80215ce <handle_login+0x46>
 80215cc:	4b1e      	ldr	r3, [pc, #120]	@ (8021648 <handle_login+0xc0>)
 80215ce:	f107 0008 	add.w	r0, r7, #8
 80215d2:	491e      	ldr	r1, [pc, #120]	@ (802164c <handle_login+0xc4>)
 80215d4:	9101      	str	r1, [sp, #4]
 80215d6:	9300      	str	r3, [sp, #0]
 80215d8:	4613      	mov	r3, r2
 80215da:	4a1d      	ldr	r2, [pc, #116]	@ (8021650 <handle_login+0xc8>)
 80215dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80215e0:	f7ef f932 	bl	8010848 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
                MG_ESC("user"), MG_ESC(u->name),    //
 80215e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80215e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80215ec:	681b      	ldr	r3, [r3, #0]
 80215ee:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
 80215f0:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80215f4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80215f8:	6812      	ldr	r2, [r2, #0]
 80215fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80215fc:	f107 0108 	add.w	r1, r7, #8
 8021600:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8021604:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8021608:	9209      	str	r2, [sp, #36]	@ 0x24
 802160a:	4a12      	ldr	r2, [pc, #72]	@ (8021654 <handle_login+0xcc>)
 802160c:	9208      	str	r2, [sp, #32]
 802160e:	2200      	movs	r2, #0
 8021610:	9207      	str	r2, [sp, #28]
 8021612:	4a11      	ldr	r2, [pc, #68]	@ (8021658 <handle_login+0xd0>)
 8021614:	9206      	str	r2, [sp, #24]
 8021616:	9305      	str	r3, [sp, #20]
 8021618:	2300      	movs	r3, #0
 802161a:	9304      	str	r3, [sp, #16]
 802161c:	4b0e      	ldr	r3, [pc, #56]	@ (8021658 <handle_login+0xd0>)
 802161e:	9303      	str	r3, [sp, #12]
 8021620:	4b0e      	ldr	r3, [pc, #56]	@ (802165c <handle_login+0xd4>)
 8021622:	9302      	str	r3, [sp, #8]
 8021624:	2300      	movs	r3, #0
 8021626:	9301      	str	r3, [sp, #4]
 8021628:	4b0b      	ldr	r3, [pc, #44]	@ (8021658 <handle_login+0xd0>)
 802162a:	9300      	str	r3, [sp, #0]
 802162c:	4b0c      	ldr	r3, [pc, #48]	@ (8021660 <handle_login+0xd8>)
 802162e:	460a      	mov	r2, r1
 8021630:	21c8      	movs	r1, #200	@ 0xc8
 8021632:	6800      	ldr	r0, [r0, #0]
 8021634:	f7e8 f8f2 	bl	800981c <mg_http_reply>
                MG_ESC("level"), u->level);
}
 8021638:	bf00      	nop
 802163a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 802163e:	46bd      	mov	sp, r7
 8021640:	bd80      	pop	{r7, pc}
 8021642:	bf00      	nop
 8021644:	08027180 	.word	0x08027180
 8021648:	0802718c 	.word	0x0802718c
 802164c:	00015180 	.word	0x00015180
 8021650:	08027190 	.word	0x08027190
 8021654:	08026f80 	.word	0x08026f80
 8021658:	08010cd5 	.word	0x08010cd5
 802165c:	080271ec 	.word	0x080271ec
 8021660:	080271dc 	.word	0x080271dc

08021664 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 8021664:	b580      	push	{r7, lr}
 8021666:	b0c2      	sub	sp, #264	@ 0x108
 8021668:	af00      	add	r7, sp, #0
 802166a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802166e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8021672:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 8021674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8021678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 802167c:	681b      	ldr	r3, [r3, #0]
 802167e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8021682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021686:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8021688:	2b00      	cmp	r3, #0
 802168a:	d001      	beq.n	8021690 <handle_logout+0x2c>
 802168c:	4b0d      	ldr	r3, [pc, #52]	@ (80216c4 <handle_logout+0x60>)
 802168e:	e000      	b.n	8021692 <handle_logout+0x2e>
 8021690:	4b0d      	ldr	r3, [pc, #52]	@ (80216c8 <handle_logout+0x64>)
 8021692:	f107 0008 	add.w	r0, r7, #8
 8021696:	4a0d      	ldr	r2, [pc, #52]	@ (80216cc <handle_logout+0x68>)
 8021698:	f44f 7180 	mov.w	r1, #256	@ 0x100
 802169c:	f7ef f8d4 	bl	8010848 <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 80216a0:	f107 0208 	add.w	r2, r7, #8
 80216a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80216a8:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 80216ac:	4b08      	ldr	r3, [pc, #32]	@ (80216d0 <handle_logout+0x6c>)
 80216ae:	f240 1191 	movw	r1, #401	@ 0x191
 80216b2:	6800      	ldr	r0, [r0, #0]
 80216b4:	f7e8 f8b2 	bl	800981c <mg_http_reply>
}
 80216b8:	bf00      	nop
 80216ba:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80216be:	46bd      	mov	sp, r7
 80216c0:	bd80      	pop	{r7, pc}
 80216c2:	bf00      	nop
 80216c4:	08027180 	.word	0x08027180
 80216c8:	0802718c 	.word	0x0802718c
 80216cc:	080271f4 	.word	0x080271f4
 80216d0:	08027258 	.word	0x08027258

080216d4 <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 80216d4:	b580      	push	{r7, lr}
 80216d6:	b082      	sub	sp, #8
 80216d8:	af00      	add	r7, sp, #0
 80216da:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 80216dc:	687b      	ldr	r3, [r7, #4]
 80216de:	2200      	movs	r2, #0
 80216e0:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 80216e2:	687b      	ldr	r3, [r7, #4]
 80216e4:	691b      	ldr	r3, [r3, #16]
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	d00c      	beq.n	8021704 <close_uploaded_file+0x30>
 80216ea:	687b      	ldr	r3, [r7, #4]
 80216ec:	68db      	ldr	r3, [r3, #12]
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d008      	beq.n	8021704 <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	691b      	ldr	r3, [r3, #16]
 80216f6:	687a      	ldr	r2, [r7, #4]
 80216f8:	68d2      	ldr	r2, [r2, #12]
 80216fa:	4610      	mov	r0, r2
 80216fc:	4798      	blx	r3
    us->fp = NULL;
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	2200      	movs	r2, #0
 8021702:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 8021704:	2218      	movs	r2, #24
 8021706:	2100      	movs	r1, #0
 8021708:	6878      	ldr	r0, [r7, #4]
 802170a:	f001 ff04 	bl	8023516 <memset>
}
 802170e:	bf00      	nop
 8021710:	3708      	adds	r7, #8
 8021712:	46bd      	mov	sp, r7
 8021714:	bd80      	pop	{r7, pc}
	...

08021718 <file_closer>:

static bool file_closer(void *p) {
 8021718:	b580      	push	{r7, lr}
 802171a:	b082      	sub	sp, #8
 802171c:	af00      	add	r7, sp, #0
 802171e:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) p);
 8021720:	6878      	ldr	r0, [r7, #4]
 8021722:	f7e6 fb59 	bl	8007dd8 <mg_fs_close>
  MG_INFO(("AAAAAAAAA %p", p));
 8021726:	4b0a      	ldr	r3, [pc, #40]	@ (8021750 <file_closer+0x38>)
 8021728:	681b      	ldr	r3, [r3, #0]
 802172a:	2b01      	cmp	r3, #1
 802172c:	dd0a      	ble.n	8021744 <file_closer+0x2c>
 802172e:	4b09      	ldr	r3, [pc, #36]	@ (8021754 <file_closer+0x3c>)
 8021730:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8021734:	4908      	ldr	r1, [pc, #32]	@ (8021758 <file_closer+0x40>)
 8021736:	2002      	movs	r0, #2
 8021738:	f7ea fe00 	bl	800c33c <mg_log_prefix>
 802173c:	6879      	ldr	r1, [r7, #4]
 802173e:	4807      	ldr	r0, [pc, #28]	@ (802175c <file_closer+0x44>)
 8021740:	f7ea fe4c 	bl	800c3dc <mg_log>
  return true;
 8021744:	2301      	movs	r3, #1
}
 8021746:	4618      	mov	r0, r3
 8021748:	3708      	adds	r7, #8
 802174a:	46bd      	mov	sp, r7
 802174c:	bd80      	pop	{r7, pc}
 802174e:	bf00      	nop
 8021750:	24000258 	.word	0x24000258
 8021754:	08035350 	.word	0x08035350
 8021758:	080270e8 	.word	0x080270e8
 802175c:	08027268 	.word	0x08027268

08021760 <file_writer>:

static bool file_writer(void *p, void *buf, size_t len) {
 8021760:	b580      	push	{r7, lr}
 8021762:	b086      	sub	sp, #24
 8021764:	af00      	add	r7, sp, #0
 8021766:	60f8      	str	r0, [r7, #12]
 8021768:	60b9      	str	r1, [r7, #8]
 802176a:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) p;
 802176c:	68fb      	ldr	r3, [r7, #12]
 802176e:	617b      	str	r3, [r7, #20]
  size_t written = fd->fs->wr(fd->fd, buf, len);
 8021770:	697b      	ldr	r3, [r7, #20]
 8021772:	685b      	ldr	r3, [r3, #4]
 8021774:	695b      	ldr	r3, [r3, #20]
 8021776:	697a      	ldr	r2, [r7, #20]
 8021778:	6810      	ldr	r0, [r2, #0]
 802177a:	687a      	ldr	r2, [r7, #4]
 802177c:	68b9      	ldr	r1, [r7, #8]
 802177e:	4798      	blx	r3
 8021780:	6138      	str	r0, [r7, #16]
  MG_INFO(("AAAAAAAAA %lu", written));
 8021782:	4b0d      	ldr	r3, [pc, #52]	@ (80217b8 <file_writer+0x58>)
 8021784:	681b      	ldr	r3, [r3, #0]
 8021786:	2b01      	cmp	r3, #1
 8021788:	dd0a      	ble.n	80217a0 <file_writer+0x40>
 802178a:	4b0c      	ldr	r3, [pc, #48]	@ (80217bc <file_writer+0x5c>)
 802178c:	f240 1265 	movw	r2, #357	@ 0x165
 8021790:	490b      	ldr	r1, [pc, #44]	@ (80217c0 <file_writer+0x60>)
 8021792:	2002      	movs	r0, #2
 8021794:	f7ea fdd2 	bl	800c33c <mg_log_prefix>
 8021798:	6939      	ldr	r1, [r7, #16]
 802179a:	480a      	ldr	r0, [pc, #40]	@ (80217c4 <file_writer+0x64>)
 802179c:	f7ea fe1e 	bl	800c3dc <mg_log>
  return written == len;
 80217a0:	693a      	ldr	r2, [r7, #16]
 80217a2:	687b      	ldr	r3, [r7, #4]
 80217a4:	429a      	cmp	r2, r3
 80217a6:	bf0c      	ite	eq
 80217a8:	2301      	moveq	r3, #1
 80217aa:	2300      	movne	r3, #0
 80217ac:	b2db      	uxtb	r3, r3
}
 80217ae:	4618      	mov	r0, r3
 80217b0:	3718      	adds	r7, #24
 80217b2:	46bd      	mov	sp, r7
 80217b4:	bd80      	pop	{r7, pc}
 80217b6:	bf00      	nop
 80217b8:	24000258 	.word	0x24000258
 80217bc:	0803535c 	.word	0x0803535c
 80217c0:	080270e8 	.word	0x080270e8
 80217c4:	08027278 	.word	0x08027278

080217c8 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 80217c8:	b590      	push	{r4, r7, lr}
 80217ca:	b08d      	sub	sp, #52	@ 0x34
 80217cc:	af04      	add	r7, sp, #16
 80217ce:	60f8      	str	r0, [r7, #12]
 80217d0:	60b9      	str	r1, [r7, #8]
 80217d2:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 80217d4:	68fb      	ldr	r3, [r7, #12]
 80217d6:	3388      	adds	r3, #136	@ 0x88
 80217d8:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 80217da:	69fb      	ldr	r3, [r7, #28]
 80217dc:	781b      	ldrb	r3, [r3, #0]
 80217de:	2b55      	cmp	r3, #85	@ 0x55
 80217e0:	f040 80ae 	bne.w	8021940 <upload_handler+0x178>
 80217e4:	68bb      	ldr	r3, [r7, #8]
 80217e6:	2b07      	cmp	r3, #7
 80217e8:	f040 80aa 	bne.w	8021940 <upload_handler+0x178>
 80217ec:	69fb      	ldr	r3, [r7, #28]
 80217ee:	685b      	ldr	r3, [r3, #4]
 80217f0:	2b00      	cmp	r3, #0
 80217f2:	f000 80a5 	beq.w	8021940 <upload_handler+0x178>
      c->recv.len > 0) {
 80217f6:	68fb      	ldr	r3, [r7, #12]
 80217f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 80217fa:	2b00      	cmp	r3, #0
 80217fc:	f000 80a0 	beq.w	8021940 <upload_handler+0x178>
    size_t alignment = 512;  // Maximum flash write granularity (iMXRT, Pico)
 8021800:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8021804:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 8021806:	69fb      	ldr	r3, [r7, #28]
 8021808:	689a      	ldr	r2, [r3, #8]
 802180a:	68fb      	ldr	r3, [r7, #12]
 802180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802180e:	441a      	add	r2, r3
 8021810:	69fb      	ldr	r3, [r7, #28]
 8021812:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 8021814:	429a      	cmp	r2, r3
 8021816:	d210      	bcs.n	802183a <upload_handler+0x72>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 8021818:	69bb      	ldr	r3, [r7, #24]
 802181a:	2b00      	cmp	r3, #0
 802181c:	d102      	bne.n	8021824 <upload_handler+0x5c>
 802181e:	68fb      	ldr	r3, [r7, #12]
 8021820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021822:	e007      	b.n	8021834 <upload_handler+0x6c>
 8021824:	68fb      	ldr	r3, [r7, #12]
 8021826:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021828:	69bb      	ldr	r3, [r7, #24]
 802182a:	fbb2 f3f3 	udiv	r3, r2, r3
 802182e:	69ba      	ldr	r2, [r7, #24]
 8021830:	fb02 f303 	mul.w	r3, r2, r3
 8021834:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 8021836:	697b      	ldr	r3, [r7, #20]
 8021838:	e001      	b.n	802183e <upload_handler+0x76>
 802183a:	68fb      	ldr	r3, [r7, #12]
 802183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 802183e:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 8021840:	697b      	ldr	r3, [r7, #20]
 8021842:	2b00      	cmp	r3, #0
 8021844:	d00a      	beq.n	802185c <upload_handler+0x94>
 8021846:	69fb      	ldr	r3, [r7, #28]
 8021848:	695b      	ldr	r3, [r3, #20]
 802184a:	69fa      	ldr	r2, [r7, #28]
 802184c:	68d0      	ldr	r0, [r2, #12]
 802184e:	68fa      	ldr	r2, [r7, #12]
 8021850:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8021852:	697a      	ldr	r2, [r7, #20]
 8021854:	4798      	blx	r3
 8021856:	4603      	mov	r3, r0
 8021858:	2b00      	cmp	r3, #0
 802185a:	d001      	beq.n	8021860 <upload_handler+0x98>
 802185c:	2301      	movs	r3, #1
 802185e:	e000      	b.n	8021862 <upload_handler+0x9a>
 8021860:	2300      	movs	r3, #0
 8021862:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 8021864:	69fb      	ldr	r3, [r7, #28]
 8021866:	689a      	ldr	r2, [r3, #8]
 8021868:	697b      	ldr	r3, [r7, #20]
 802186a:	441a      	add	r2, r3
 802186c:	69fb      	ldr	r3, [r7, #28]
 802186e:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 8021870:	4b3a      	ldr	r3, [pc, #232]	@ (802195c <upload_handler+0x194>)
 8021872:	681b      	ldr	r3, [r3, #0]
 8021874:	2b02      	cmp	r3, #2
 8021876:	dd18      	ble.n	80218aa <upload_handler+0xe2>
 8021878:	4b39      	ldr	r3, [pc, #228]	@ (8021960 <upload_handler+0x198>)
 802187a:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 802187e:	4939      	ldr	r1, [pc, #228]	@ (8021964 <upload_handler+0x19c>)
 8021880:	2003      	movs	r0, #3
 8021882:	f7ea fd5b 	bl	800c33c <mg_log_prefix>
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 802188a:	68fb      	ldr	r3, [r7, #12]
 802188c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 802188e:	69fb      	ldr	r3, [r7, #28]
 8021890:	689b      	ldr	r3, [r3, #8]
 8021892:	69fa      	ldr	r2, [r7, #28]
 8021894:	6852      	ldr	r2, [r2, #4]
 8021896:	7cf9      	ldrb	r1, [r7, #19]
 8021898:	9102      	str	r1, [sp, #8]
 802189a:	9201      	str	r2, [sp, #4]
 802189c:	9300      	str	r3, [sp, #0]
 802189e:	4623      	mov	r3, r4
 80218a0:	697a      	ldr	r2, [r7, #20]
 80218a2:	4601      	mov	r1, r0
 80218a4:	4830      	ldr	r0, [pc, #192]	@ (8021968 <upload_handler+0x1a0>)
 80218a6:	f7ea fd99 	bl	800c3dc <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 80218aa:	68fb      	ldr	r3, [r7, #12]
 80218ac:	3338      	adds	r3, #56	@ 0x38
 80218ae:	697a      	ldr	r2, [r7, #20]
 80218b0:	2100      	movs	r1, #0
 80218b2:	4618      	mov	r0, r3
 80218b4:	f7e9 fe76 	bl	800b5a4 <mg_iobuf_del>
    if (ok == false) {
 80218b8:	7cfb      	ldrb	r3, [r7, #19]
 80218ba:	f083 0301 	eor.w	r3, r3, #1
 80218be:	b2db      	uxtb	r3, r3
 80218c0:	2b00      	cmp	r3, #0
 80218c2:	d011      	beq.n	80218e8 <upload_handler+0x120>
      mg_http_reply(c, 400, "", "Upload error\n");
 80218c4:	4b29      	ldr	r3, [pc, #164]	@ (802196c <upload_handler+0x1a4>)
 80218c6:	4a2a      	ldr	r2, [pc, #168]	@ (8021970 <upload_handler+0x1a8>)
 80218c8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80218cc:	68f8      	ldr	r0, [r7, #12]
 80218ce:	f7e7 ffa5 	bl	800981c <mg_http_reply>
      close_uploaded_file(us);
 80218d2:	69f8      	ldr	r0, [r7, #28]
 80218d4:	f7ff fefe 	bl	80216d4 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 80218d8:	68fa      	ldr	r2, [r7, #12]
 80218da:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80218de:	f043 0310 	orr.w	r3, r3, #16
 80218e2:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 80218e6:	e02b      	b.n	8021940 <upload_handler+0x178>
    } else if (us->received >= us->expected) {
 80218e8:	69fb      	ldr	r3, [r7, #28]
 80218ea:	689a      	ldr	r2, [r3, #8]
 80218ec:	69fb      	ldr	r3, [r7, #28]
 80218ee:	685b      	ldr	r3, [r3, #4]
 80218f0:	429a      	cmp	r2, r3
 80218f2:	d325      	bcc.n	8021940 <upload_handler+0x178>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 80218f4:	4b19      	ldr	r3, [pc, #100]	@ (802195c <upload_handler+0x194>)
 80218f6:	681b      	ldr	r3, [r3, #0]
 80218f8:	2b01      	cmp	r3, #1
 80218fa:	dd0e      	ble.n	802191a <upload_handler+0x152>
 80218fc:	4b18      	ldr	r3, [pc, #96]	@ (8021960 <upload_handler+0x198>)
 80218fe:	f240 1283 	movw	r2, #387	@ 0x183
 8021902:	4918      	ldr	r1, [pc, #96]	@ (8021964 <upload_handler+0x19c>)
 8021904:	2002      	movs	r0, #2
 8021906:	f7ea fd19 	bl	800c33c <mg_log_prefix>
 802190a:	68fb      	ldr	r3, [r7, #12]
 802190c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 802190e:	69fb      	ldr	r3, [r7, #28]
 8021910:	689b      	ldr	r3, [r3, #8]
 8021912:	461a      	mov	r2, r3
 8021914:	4817      	ldr	r0, [pc, #92]	@ (8021974 <upload_handler+0x1ac>)
 8021916:	f7ea fd61 	bl	800c3dc <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 802191a:	69fb      	ldr	r3, [r7, #28]
 802191c:	689b      	ldr	r3, [r3, #8]
 802191e:	9300      	str	r3, [sp, #0]
 8021920:	4b15      	ldr	r3, [pc, #84]	@ (8021978 <upload_handler+0x1b0>)
 8021922:	2200      	movs	r2, #0
 8021924:	21c8      	movs	r1, #200	@ 0xc8
 8021926:	68f8      	ldr	r0, [r7, #12]
 8021928:	f7e7 ff78 	bl	800981c <mg_http_reply>
      close_uploaded_file(us);
 802192c:	69f8      	ldr	r0, [r7, #28]
 802192e:	f7ff fed1 	bl	80216d4 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8021932:	68fa      	ldr	r2, [r7, #12]
 8021934:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021938:	f043 0310 	orr.w	r3, r3, #16
 802193c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 8021940:	69fb      	ldr	r3, [r7, #28]
 8021942:	781b      	ldrb	r3, [r3, #0]
 8021944:	2b55      	cmp	r3, #85	@ 0x55
 8021946:	d105      	bne.n	8021954 <upload_handler+0x18c>
 8021948:	68bb      	ldr	r3, [r7, #8]
 802194a:	2b09      	cmp	r3, #9
 802194c:	d102      	bne.n	8021954 <upload_handler+0x18c>
 802194e:	69f8      	ldr	r0, [r7, #28]
 8021950:	f7ff fec0 	bl	80216d4 <close_uploaded_file>
  (void) ev_data;
}
 8021954:	3724      	adds	r7, #36	@ 0x24
 8021956:	46bd      	mov	sp, r7
 8021958:	bd90      	pop	{r4, r7, pc}
 802195a:	bf00      	nop
 802195c:	24000258 	.word	0x24000258
 8021960:	08035368 	.word	0x08035368
 8021964:	080270e8 	.word	0x080270e8
 8021968:	08027288 	.word	0x08027288
 802196c:	080272ac 	.word	0x080272ac
 8021970:	0802718c 	.word	0x0802718c
 8021974:	080272bc 	.word	0x080272bc
 8021978:	080272d0 	.word	0x080272d0

0802197c <get_file_name_from_uri>:

static void get_file_name_from_uri(struct mg_str uri, char *buf, size_t len) {
 802197c:	b590      	push	{r4, r7, lr}
 802197e:	b08f      	sub	sp, #60	@ 0x3c
 8021980:	af02      	add	r7, sp, #8
 8021982:	f107 0408 	add.w	r4, r7, #8
 8021986:	e884 0003 	stmia.w	r4, {r0, r1}
 802198a:	607a      	str	r2, [r7, #4]
 802198c:	603b      	str	r3, [r7, #0]
  struct mg_str parts[3];
  memset(parts, 0, sizeof(parts));           // Init match parts
 802198e:	f107 0310 	add.w	r3, r7, #16
 8021992:	2218      	movs	r2, #24
 8021994:	2100      	movs	r1, #0
 8021996:	4618      	mov	r0, r3
 8021998:	f001 fdbd 	bl	8023516 <memset>
  mg_match(uri, mg_str("/api/*/#"), parts);  // Fetch file name
 802199c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80219a0:	490d      	ldr	r1, [pc, #52]	@ (80219d8 <get_file_name_from_uri+0x5c>)
 80219a2:	4618      	mov	r0, r3
 80219a4:	f7f2 fb16 	bl	8013fd4 <mg_str_s>
 80219a8:	f107 0310 	add.w	r3, r7, #16
 80219ac:	9300      	str	r3, [sp, #0]
 80219ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80219b2:	cb0c      	ldmia	r3, {r2, r3}
 80219b4:	f107 0108 	add.w	r1, r7, #8
 80219b8:	c903      	ldmia	r1, {r0, r1}
 80219ba:	f7f2 fc15 	bl	80141e8 <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, buf, len, 0);
 80219be:	69b8      	ldr	r0, [r7, #24]
 80219c0:	69f9      	ldr	r1, [r7, #28]
 80219c2:	2300      	movs	r3, #0
 80219c4:	9300      	str	r3, [sp, #0]
 80219c6:	683b      	ldr	r3, [r7, #0]
 80219c8:	687a      	ldr	r2, [r7, #4]
 80219ca:	f7e6 fdbe 	bl	800854a <mg_url_decode>
}
 80219ce:	bf00      	nop
 80219d0:	3734      	adds	r7, #52	@ 0x34
 80219d2:	46bd      	mov	sp, r7
 80219d4:	bd90      	pop	{r4, r7, pc}
 80219d6:	bf00      	nop
 80219d8:	080272d8 	.word	0x080272d8

080219dc <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 80219dc:	b580      	push	{r7, lr}
 80219de:	b09e      	sub	sp, #120	@ 0x78
 80219e0:	af00      	add	r7, sp, #0
 80219e2:	60f8      	str	r0, [r7, #12]
 80219e4:	60b9      	str	r1, [r7, #8]
 80219e6:	607a      	str	r2, [r7, #4]
 80219e8:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 80219ea:	68fb      	ldr	r3, [r7, #12]
 80219ec:	3388      	adds	r3, #136	@ 0x88
 80219ee:	677b      	str	r3, [r7, #116]	@ 0x74
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));  // Cleanup upload state
 80219f0:	2218      	movs	r2, #24
 80219f2:	2100      	movs	r1, #0
 80219f4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80219f6:	f001 fd8e 	bl	8023516 <memset>
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 80219fa:	f107 0210 	add.w	r2, r7, #16
 80219fe:	68b9      	ldr	r1, [r7, #8]
 8021a00:	2364      	movs	r3, #100	@ 0x64
 8021a02:	3108      	adds	r1, #8
 8021a04:	c903      	ldmia	r1, {r0, r1}
 8021a06:	f7ff ffb9 	bl	802197c <get_file_name_from_uri>
  us->fp = fn_open(path, hm->body.len);
 8021a0a:	68bb      	ldr	r3, [r7, #8]
 8021a0c:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 8021a10:	f107 0210 	add.w	r2, r7, #16
 8021a14:	687b      	ldr	r3, [r7, #4]
 8021a16:	4610      	mov	r0, r2
 8021a18:	4798      	blx	r3
 8021a1a:	4602      	mov	r2, r0
 8021a1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021a1e:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 8021a20:	4b29      	ldr	r3, [pc, #164]	@ (8021ac8 <prep_upload+0xec>)
 8021a22:	681b      	ldr	r3, [r3, #0]
 8021a24:	2b02      	cmp	r3, #2
 8021a26:	dd10      	ble.n	8021a4a <prep_upload+0x6e>
 8021a28:	4b28      	ldr	r3, [pc, #160]	@ (8021acc <prep_upload+0xf0>)
 8021a2a:	f240 129f 	movw	r2, #415	@ 0x19f
 8021a2e:	4928      	ldr	r1, [pc, #160]	@ (8021ad0 <prep_upload+0xf4>)
 8021a30:	2003      	movs	r0, #3
 8021a32:	f7ea fc83 	bl	800c33c <mg_log_prefix>
 8021a36:	68bb      	ldr	r3, [r7, #8]
 8021a38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8021a3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021a3e:	68db      	ldr	r3, [r3, #12]
 8021a40:	f107 0110 	add.w	r1, r7, #16
 8021a44:	4823      	ldr	r0, [pc, #140]	@ (8021ad4 <prep_upload+0xf8>)
 8021a46:	f7ea fcc9 	bl	800c3dc <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 8021a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021a4c:	2255      	movs	r2, #85	@ 0x55
 8021a4e:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 8021a50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021a52:	68db      	ldr	r3, [r3, #12]
 8021a54:	2b00      	cmp	r3, #0
 8021a56:	d10e      	bne.n	8021a76 <prep_upload+0x9a>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 8021a58:	4b1f      	ldr	r3, [pc, #124]	@ (8021ad8 <prep_upload+0xfc>)
 8021a5a:	4a20      	ldr	r2, [pc, #128]	@ (8021adc <prep_upload+0x100>)
 8021a5c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8021a60:	68f8      	ldr	r0, [r7, #12]
 8021a62:	f7e7 fedb 	bl	800981c <mg_http_reply>
    c->is_draining = 1;
 8021a66:	68fa      	ldr	r2, [r7, #12]
 8021a68:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021a6c:	f043 0310 	orr.w	r3, r3, #16
 8021a70:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 8021a74:	e023      	b.n	8021abe <prep_upload+0xe2>
    us->expected = hm->body.len;              // Store number of bytes we expect
 8021a76:	68bb      	ldr	r3, [r7, #8]
 8021a78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8021a7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021a7e:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 8021a80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021a82:	683a      	ldr	r2, [r7, #0]
 8021a84:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 8021a86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021a88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8021a8c:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 8021a8e:	68fb      	ldr	r3, [r7, #12]
 8021a90:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8021a94:	68bb      	ldr	r3, [r7, #8]
 8021a96:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8021a9a:	461a      	mov	r2, r3
 8021a9c:	2100      	movs	r1, #0
 8021a9e:	f7e9 fd81 	bl	800b5a4 <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 8021aa2:	68fb      	ldr	r3, [r7, #12]
 8021aa4:	4a0e      	ldr	r2, [pc, #56]	@ (8021ae0 <prep_upload+0x104>)
 8021aa6:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 8021aa8:	68fb      	ldr	r3, [r7, #12]
 8021aaa:	2200      	movs	r2, #0
 8021aac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 8021ab0:	68fb      	ldr	r3, [r7, #12]
 8021ab2:	3340      	adds	r3, #64	@ 0x40
 8021ab4:	461a      	mov	r2, r3
 8021ab6:	2107      	movs	r1, #7
 8021ab8:	68f8      	ldr	r0, [r7, #12]
 8021aba:	f7e4 ff0e 	bl	80068da <mg_call>
}
 8021abe:	bf00      	nop
 8021ac0:	3778      	adds	r7, #120	@ 0x78
 8021ac2:	46bd      	mov	sp, r7
 8021ac4:	bd80      	pop	{r7, pc}
 8021ac6:	bf00      	nop
 8021ac8:	24000258 	.word	0x24000258
 8021acc:	08035378 	.word	0x08035378
 8021ad0:	080270e8 	.word	0x080270e8
 8021ad4:	080272e4 	.word	0x080272e4
 8021ad8:	08027300 	.word	0x08027300
 8021adc:	08027314 	.word	0x08027314
 8021ae0:	080217c9 	.word	0x080217c9

08021ae4 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 8021ae4:	b580      	push	{r7, lr}
 8021ae6:	b08e      	sub	sp, #56	@ 0x38
 8021ae8:	af02      	add	r7, sp, #8
 8021aea:	60f8      	str	r0, [r7, #12]
 8021aec:	60b9      	str	r1, [r7, #8]
 8021aee:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8021af0:	68fb      	ldr	r3, [r7, #12]
 8021af2:	3388      	adds	r3, #136	@ 0x88
 8021af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8021af6:	687b      	ldr	r3, [r7, #4]
 8021af8:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8021afa:	68bb      	ldr	r3, [r7, #8]
 8021afc:	2b0a      	cmp	r3, #10
 8021afe:	d153      	bne.n	8021ba8 <handle_uploads+0xc4>
 8021b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021b02:	781b      	ldrb	r3, [r3, #0]
 8021b04:	2b00      	cmp	r3, #0
 8021b06:	d14f      	bne.n	8021ba8 <handle_uploads+0xc4>
      mg_strcmp(hm->method, mg_str("POST")) == 0) {
 8021b08:	f107 0314 	add.w	r3, r7, #20
 8021b0c:	4928      	ldr	r1, [pc, #160]	@ (8021bb0 <handle_uploads+0xcc>)
 8021b0e:	4618      	mov	r0, r3
 8021b10:	f7f2 fa60 	bl	8013fd4 <mg_str_s>
 8021b14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021b16:	f107 0314 	add.w	r3, r7, #20
 8021b1a:	cb0c      	ldmia	r3, {r2, r3}
 8021b1c:	c903      	ldmia	r1, {r0, r1}
 8021b1e:	f7f2 fada 	bl	80140d6 <mg_strcmp>
 8021b22:	4603      	mov	r3, r0
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d13f      	bne.n	8021ba8 <handle_uploads+0xc4>
    struct apihandler *h = find_handler(hm);
 8021b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021b2a:	f7ff fbf1 	bl	8021310 <find_handler>
 8021b2e:	6278      	str	r0, [r7, #36]	@ 0x24
    if (h != NULL &&
 8021b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b32:	2b00      	cmp	r3, #0
 8021b34:	d021      	beq.n	8021b7a <handle_uploads+0x96>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8021b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b38:	685b      	ldr	r3, [r3, #4]
 8021b3a:	491e      	ldr	r1, [pc, #120]	@ (8021bb4 <handle_uploads+0xd0>)
 8021b3c:	4618      	mov	r0, r3
 8021b3e:	f7de fbe7 	bl	8000310 <strcmp>
 8021b42:	4603      	mov	r3, r0
    if (h != NULL &&
 8021b44:	2b00      	cmp	r3, #0
 8021b46:	d008      	beq.n	8021b5a <handle_uploads+0x76>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8021b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b4a:	685b      	ldr	r3, [r3, #4]
 8021b4c:	491a      	ldr	r1, [pc, #104]	@ (8021bb8 <handle_uploads+0xd4>)
 8021b4e:	4618      	mov	r0, r3
 8021b50:	f7de fbde 	bl	8000310 <strcmp>
 8021b54:	4603      	mov	r3, r0
 8021b56:	2b00      	cmp	r3, #0
 8021b58:	d10f      	bne.n	8021b7a <handle_uploads+0x96>
      struct apihandler_upload *hu = (struct apihandler_upload *) h;
 8021b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b5c:	623b      	str	r3, [r7, #32]
      prep_upload(c, hm, hu->opener, hu->closer, hu->writer);
 8021b5e:	6a3b      	ldr	r3, [r7, #32]
 8021b60:	699a      	ldr	r2, [r3, #24]
 8021b62:	6a3b      	ldr	r3, [r7, #32]
 8021b64:	69d9      	ldr	r1, [r3, #28]
 8021b66:	6a3b      	ldr	r3, [r7, #32]
 8021b68:	6a1b      	ldr	r3, [r3, #32]
 8021b6a:	9300      	str	r3, [sp, #0]
 8021b6c:	460b      	mov	r3, r1
 8021b6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021b70:	68f8      	ldr	r0, [r7, #12]
 8021b72:	f7ff ff33 	bl	80219dc <prep_upload>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8021b76:	bf00      	nop
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
      struct apihandler_file *hf = (struct apihandler_file *) h;
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
    }
  }
}
 8021b78:	e016      	b.n	8021ba8 <handle_uploads+0xc4>
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
 8021b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b7c:	2b00      	cmp	r3, #0
 8021b7e:	d013      	beq.n	8021ba8 <handle_uploads+0xc4>
 8021b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b82:	685b      	ldr	r3, [r3, #4]
 8021b84:	490d      	ldr	r1, [pc, #52]	@ (8021bbc <handle_uploads+0xd8>)
 8021b86:	4618      	mov	r0, r3
 8021b88:	f7de fbc2 	bl	8000310 <strcmp>
 8021b8c:	4603      	mov	r3, r0
 8021b8e:	2b00      	cmp	r3, #0
 8021b90:	d10a      	bne.n	8021ba8 <handle_uploads+0xc4>
      struct apihandler_file *hf = (struct apihandler_file *) h;
 8021b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021b94:	61fb      	str	r3, [r7, #28]
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
 8021b96:	69fb      	ldr	r3, [r7, #28]
 8021b98:	699a      	ldr	r2, [r3, #24]
 8021b9a:	4b09      	ldr	r3, [pc, #36]	@ (8021bc0 <handle_uploads+0xdc>)
 8021b9c:	9300      	str	r3, [sp, #0]
 8021b9e:	4b09      	ldr	r3, [pc, #36]	@ (8021bc4 <handle_uploads+0xe0>)
 8021ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021ba2:	68f8      	ldr	r0, [r7, #12]
 8021ba4:	f7ff ff1a 	bl	80219dc <prep_upload>
}
 8021ba8:	bf00      	nop
 8021baa:	3730      	adds	r7, #48	@ 0x30
 8021bac:	46bd      	mov	sp, r7
 8021bae:	bd80      	pop	{r7, pc}
 8021bb0:	08027350 	.word	0x08027350
 8021bb4:	0802706c 	.word	0x0802706c
 8021bb8:	0802705c 	.word	0x0802705c
 8021bbc:	0802711c 	.word	0x0802711c
 8021bc0:	08021761 	.word	0x08021761
 8021bc4:	08021719 	.word	0x08021719

08021bc8 <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void),
                          void (*start_fn)(struct mg_str)) {
 8021bc8:	b580      	push	{r7, lr}
 8021bca:	b088      	sub	sp, #32
 8021bcc:	af02      	add	r7, sp, #8
 8021bce:	60f8      	str	r0, [r7, #12]
 8021bd0:	60b9      	str	r1, [r7, #8]
 8021bd2:	607a      	str	r2, [r7, #4]
 8021bd4:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 8021bd6:	68bb      	ldr	r3, [r7, #8]
 8021bd8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	d01c      	beq.n	8021c1a <handle_action+0x52>
    start_fn(hm->body);
 8021be0:	68ba      	ldr	r2, [r7, #8]
 8021be2:	683b      	ldr	r3, [r7, #0]
 8021be4:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8021be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021bec:	4798      	blx	r3
    if (check_fn()) {
 8021bee:	687b      	ldr	r3, [r7, #4]
 8021bf0:	4798      	blx	r3
 8021bf2:	4603      	mov	r3, r0
 8021bf4:	2b00      	cmp	r3, #0
 8021bf6:	d009      	beq.n	8021c0c <handle_action+0x44>
      struct action_state *as = (struct action_state *) c->data;
 8021bf8:	68fb      	ldr	r3, [r7, #12]
 8021bfa:	3388      	adds	r3, #136	@ 0x88
 8021bfc:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 8021bfe:	697b      	ldr	r3, [r7, #20]
 8021c00:	2241      	movs	r2, #65	@ 0x41
 8021c02:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 8021c04:	697b      	ldr	r3, [r7, #20]
 8021c06:	687a      	ldr	r2, [r7, #4]
 8021c08:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 8021c0a:	e015      	b.n	8021c38 <handle_action+0x70>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 8021c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8021c40 <handle_action+0x78>)
 8021c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8021c44 <handle_action+0x7c>)
 8021c10:	21c8      	movs	r1, #200	@ 0xc8
 8021c12:	68f8      	ldr	r0, [r7, #12]
 8021c14:	f7e7 fe02 	bl	800981c <mg_http_reply>
}
 8021c18:	e00e      	b.n	8021c38 <handle_action+0x70>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	4798      	blx	r3
 8021c1e:	4603      	mov	r3, r0
 8021c20:	2b00      	cmp	r3, #0
 8021c22:	d001      	beq.n	8021c28 <handle_action+0x60>
 8021c24:	4b08      	ldr	r3, [pc, #32]	@ (8021c48 <handle_action+0x80>)
 8021c26:	e000      	b.n	8021c2a <handle_action+0x62>
 8021c28:	4b05      	ldr	r3, [pc, #20]	@ (8021c40 <handle_action+0x78>)
 8021c2a:	9300      	str	r3, [sp, #0]
 8021c2c:	4b07      	ldr	r3, [pc, #28]	@ (8021c4c <handle_action+0x84>)
 8021c2e:	4a05      	ldr	r2, [pc, #20]	@ (8021c44 <handle_action+0x7c>)
 8021c30:	21c8      	movs	r1, #200	@ 0xc8
 8021c32:	68f8      	ldr	r0, [r7, #12]
 8021c34:	f7e7 fdf2 	bl	800981c <mg_http_reply>
}
 8021c38:	bf00      	nop
 8021c3a:	3718      	adds	r7, #24
 8021c3c:	46bd      	mov	sp, r7
 8021c3e:	bd80      	pop	{r7, pc}
 8021c40:	08027358 	.word	0x08027358
 8021c44:	08027314 	.word	0x08027314
 8021c48:	08027360 	.word	0x08027360
 8021c4c:	08027160 	.word	0x08027160

08021c50 <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 8021c50:	b580      	push	{r7, lr}
 8021c52:	b08e      	sub	sp, #56	@ 0x38
 8021c54:	af04      	add	r7, sp, #16
 8021c56:	60f8      	str	r0, [r7, #12]
 8021c58:	60b9      	str	r1, [r7, #8]
 8021c5a:	607a      	str	r2, [r7, #4]
  const struct attribute *a = va_arg(*ap, struct attribute *);
 8021c5c:	687b      	ldr	r3, [r7, #4]
 8021c5e:	681b      	ldr	r3, [r3, #0]
 8021c60:	1d19      	adds	r1, r3, #4
 8021c62:	687a      	ldr	r2, [r7, #4]
 8021c64:	6011      	str	r1, [r2, #0]
 8021c66:	681b      	ldr	r3, [r3, #0]
 8021c68:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	681b      	ldr	r3, [r3, #0]
 8021c6e:	1d19      	adds	r1, r3, #4
 8021c70:	687a      	ldr	r2, [r7, #4]
 8021c72:	6011      	str	r1, [r2, #0]
 8021c74:	681b      	ldr	r3, [r3, #0]
 8021c76:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8021c78:	2300      	movs	r3, #0
 8021c7a:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8021c7c:	2300      	movs	r3, #0
 8021c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8021c80:	e0bf      	b.n	8021e02 <print_struct+0x1b2>
    char *attrptr = data + a[i].offset;
 8021c82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021c84:	4613      	mov	r3, r2
 8021c86:	005b      	lsls	r3, r3, #1
 8021c88:	4413      	add	r3, r2
 8021c8a:	00db      	lsls	r3, r3, #3
 8021c8c:	461a      	mov	r2, r3
 8021c8e:	69bb      	ldr	r3, [r7, #24]
 8021c90:	4413      	add	r3, r2
 8021c92:	68db      	ldr	r3, [r3, #12]
 8021c94:	697a      	ldr	r2, [r7, #20]
 8021c96:	4413      	add	r3, r2
 8021c98:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",", MG_ESC(a[i].name));
 8021c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d101      	bne.n	8021ca4 <print_struct+0x54>
 8021ca0:	4960      	ldr	r1, [pc, #384]	@ (8021e24 <print_struct+0x1d4>)
 8021ca2:	e000      	b.n	8021ca6 <print_struct+0x56>
 8021ca4:	4960      	ldr	r1, [pc, #384]	@ (8021e28 <print_struct+0x1d8>)
 8021ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021ca8:	4613      	mov	r3, r2
 8021caa:	005b      	lsls	r3, r3, #1
 8021cac:	4413      	add	r3, r2
 8021cae:	00db      	lsls	r3, r3, #3
 8021cb0:	461a      	mov	r2, r3
 8021cb2:	69bb      	ldr	r3, [r7, #24]
 8021cb4:	4413      	add	r3, r2
 8021cb6:	681b      	ldr	r3, [r3, #0]
 8021cb8:	9302      	str	r3, [sp, #8]
 8021cba:	2300      	movs	r3, #0
 8021cbc:	9301      	str	r3, [sp, #4]
 8021cbe:	4b5b      	ldr	r3, [pc, #364]	@ (8021e2c <print_struct+0x1dc>)
 8021cc0:	9300      	str	r3, [sp, #0]
 8021cc2:	460b      	mov	r3, r1
 8021cc4:	4a5a      	ldr	r2, [pc, #360]	@ (8021e30 <print_struct+0x1e0>)
 8021cc6:	68b9      	ldr	r1, [r7, #8]
 8021cc8:	68f8      	ldr	r0, [r7, #12]
 8021cca:	f7e5 fc9e 	bl	800760a <mg_xprintf>
 8021cce:	4602      	mov	r2, r0
 8021cd0:	6a3b      	ldr	r3, [r7, #32]
 8021cd2:	4413      	add	r3, r2
 8021cd4:	623b      	str	r3, [r7, #32]
    if (strcmp(a[i].type, "int") == 0) {
 8021cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021cd8:	4613      	mov	r3, r2
 8021cda:	005b      	lsls	r3, r3, #1
 8021cdc:	4413      	add	r3, r2
 8021cde:	00db      	lsls	r3, r3, #3
 8021ce0:	461a      	mov	r2, r3
 8021ce2:	69bb      	ldr	r3, [r7, #24]
 8021ce4:	4413      	add	r3, r2
 8021ce6:	685b      	ldr	r3, [r3, #4]
 8021ce8:	4952      	ldr	r1, [pc, #328]	@ (8021e34 <print_struct+0x1e4>)
 8021cea:	4618      	mov	r0, r3
 8021cec:	f7de fb10 	bl	8000310 <strcmp>
 8021cf0:	4603      	mov	r3, r0
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	d10b      	bne.n	8021d0e <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 8021cf6:	693b      	ldr	r3, [r7, #16]
 8021cf8:	681b      	ldr	r3, [r3, #0]
 8021cfa:	4a4f      	ldr	r2, [pc, #316]	@ (8021e38 <print_struct+0x1e8>)
 8021cfc:	68b9      	ldr	r1, [r7, #8]
 8021cfe:	68f8      	ldr	r0, [r7, #12]
 8021d00:	f7e5 fc83 	bl	800760a <mg_xprintf>
 8021d04:	4602      	mov	r2, r0
 8021d06:	6a3b      	ldr	r3, [r7, #32]
 8021d08:	4413      	add	r3, r2
 8021d0a:	623b      	str	r3, [r7, #32]
 8021d0c:	e076      	b.n	8021dfc <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "double") == 0) {
 8021d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021d10:	4613      	mov	r3, r2
 8021d12:	005b      	lsls	r3, r3, #1
 8021d14:	4413      	add	r3, r2
 8021d16:	00db      	lsls	r3, r3, #3
 8021d18:	461a      	mov	r2, r3
 8021d1a:	69bb      	ldr	r3, [r7, #24]
 8021d1c:	4413      	add	r3, r2
 8021d1e:	685b      	ldr	r3, [r3, #4]
 8021d20:	4946      	ldr	r1, [pc, #280]	@ (8021e3c <print_struct+0x1ec>)
 8021d22:	4618      	mov	r0, r3
 8021d24:	f7de faf4 	bl	8000310 <strcmp>
 8021d28:	4603      	mov	r3, r0
 8021d2a:	2b00      	cmp	r3, #0
 8021d2c:	d11d      	bne.n	8021d6a <print_struct+0x11a>
      const char *fmt = a[i].format;
 8021d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021d30:	4613      	mov	r3, r2
 8021d32:	005b      	lsls	r3, r3, #1
 8021d34:	4413      	add	r3, r2
 8021d36:	00db      	lsls	r3, r3, #3
 8021d38:	461a      	mov	r2, r3
 8021d3a:	69bb      	ldr	r3, [r7, #24]
 8021d3c:	4413      	add	r3, r2
 8021d3e:	689b      	ldr	r3, [r3, #8]
 8021d40:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 8021d42:	69fb      	ldr	r3, [r7, #28]
 8021d44:	2b00      	cmp	r3, #0
 8021d46:	d101      	bne.n	8021d4c <print_struct+0xfc>
 8021d48:	4b3d      	ldr	r3, [pc, #244]	@ (8021e40 <print_struct+0x1f0>)
 8021d4a:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 8021d4c:	693b      	ldr	r3, [r7, #16]
 8021d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021d52:	e9cd 2300 	strd	r2, r3, [sp]
 8021d56:	69fa      	ldr	r2, [r7, #28]
 8021d58:	68b9      	ldr	r1, [r7, #8]
 8021d5a:	68f8      	ldr	r0, [r7, #12]
 8021d5c:	f7e5 fc55 	bl	800760a <mg_xprintf>
 8021d60:	4602      	mov	r2, r0
 8021d62:	6a3b      	ldr	r3, [r7, #32]
 8021d64:	4413      	add	r3, r2
 8021d66:	623b      	str	r3, [r7, #32]
 8021d68:	e048      	b.n	8021dfc <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "bool") == 0) {
 8021d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021d6c:	4613      	mov	r3, r2
 8021d6e:	005b      	lsls	r3, r3, #1
 8021d70:	4413      	add	r3, r2
 8021d72:	00db      	lsls	r3, r3, #3
 8021d74:	461a      	mov	r2, r3
 8021d76:	69bb      	ldr	r3, [r7, #24]
 8021d78:	4413      	add	r3, r2
 8021d7a:	685b      	ldr	r3, [r3, #4]
 8021d7c:	4931      	ldr	r1, [pc, #196]	@ (8021e44 <print_struct+0x1f4>)
 8021d7e:	4618      	mov	r0, r3
 8021d80:	f7de fac6 	bl	8000310 <strcmp>
 8021d84:	4603      	mov	r3, r0
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	d110      	bne.n	8021dac <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 8021d8a:	693b      	ldr	r3, [r7, #16]
 8021d8c:	781b      	ldrb	r3, [r3, #0]
 8021d8e:	2b00      	cmp	r3, #0
 8021d90:	d001      	beq.n	8021d96 <print_struct+0x146>
 8021d92:	4b2d      	ldr	r3, [pc, #180]	@ (8021e48 <print_struct+0x1f8>)
 8021d94:	e000      	b.n	8021d98 <print_struct+0x148>
 8021d96:	4b2d      	ldr	r3, [pc, #180]	@ (8021e4c <print_struct+0x1fc>)
 8021d98:	4a2d      	ldr	r2, [pc, #180]	@ (8021e50 <print_struct+0x200>)
 8021d9a:	68b9      	ldr	r1, [r7, #8]
 8021d9c:	68f8      	ldr	r0, [r7, #12]
 8021d9e:	f7e5 fc34 	bl	800760a <mg_xprintf>
 8021da2:	4602      	mov	r2, r0
 8021da4:	6a3b      	ldr	r3, [r7, #32]
 8021da6:	4413      	add	r3, r2
 8021da8:	623b      	str	r3, [r7, #32]
 8021daa:	e027      	b.n	8021dfc <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "string") == 0) {
 8021dac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021dae:	4613      	mov	r3, r2
 8021db0:	005b      	lsls	r3, r3, #1
 8021db2:	4413      	add	r3, r2
 8021db4:	00db      	lsls	r3, r3, #3
 8021db6:	461a      	mov	r2, r3
 8021db8:	69bb      	ldr	r3, [r7, #24]
 8021dba:	4413      	add	r3, r2
 8021dbc:	685b      	ldr	r3, [r3, #4]
 8021dbe:	4925      	ldr	r1, [pc, #148]	@ (8021e54 <print_struct+0x204>)
 8021dc0:	4618      	mov	r0, r3
 8021dc2:	f7de faa5 	bl	8000310 <strcmp>
 8021dc6:	4603      	mov	r3, r0
 8021dc8:	2b00      	cmp	r3, #0
 8021dca:	d10e      	bne.n	8021dea <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 8021dcc:	693b      	ldr	r3, [r7, #16]
 8021dce:	9301      	str	r3, [sp, #4]
 8021dd0:	2300      	movs	r3, #0
 8021dd2:	9300      	str	r3, [sp, #0]
 8021dd4:	4b15      	ldr	r3, [pc, #84]	@ (8021e2c <print_struct+0x1dc>)
 8021dd6:	4a20      	ldr	r2, [pc, #128]	@ (8021e58 <print_struct+0x208>)
 8021dd8:	68b9      	ldr	r1, [r7, #8]
 8021dda:	68f8      	ldr	r0, [r7, #12]
 8021ddc:	f7e5 fc15 	bl	800760a <mg_xprintf>
 8021de0:	4602      	mov	r2, r0
 8021de2:	6a3b      	ldr	r3, [r7, #32]
 8021de4:	4413      	add	r3, r2
 8021de6:	623b      	str	r3, [r7, #32]
 8021de8:	e008      	b.n	8021dfc <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 8021dea:	4a1c      	ldr	r2, [pc, #112]	@ (8021e5c <print_struct+0x20c>)
 8021dec:	68b9      	ldr	r1, [r7, #8]
 8021dee:	68f8      	ldr	r0, [r7, #12]
 8021df0:	f7e5 fc0b 	bl	800760a <mg_xprintf>
 8021df4:	4602      	mov	r2, r0
 8021df6:	6a3b      	ldr	r3, [r7, #32]
 8021df8:	4413      	add	r3, r2
 8021dfa:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8021dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021dfe:	3301      	adds	r3, #1
 8021e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8021e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021e04:	4613      	mov	r3, r2
 8021e06:	005b      	lsls	r3, r3, #1
 8021e08:	4413      	add	r3, r2
 8021e0a:	00db      	lsls	r3, r3, #3
 8021e0c:	461a      	mov	r2, r3
 8021e0e:	69bb      	ldr	r3, [r7, #24]
 8021e10:	4413      	add	r3, r2
 8021e12:	681b      	ldr	r3, [r3, #0]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	f47f af34 	bne.w	8021c82 <print_struct+0x32>
    }
  }
  return len;
 8021e1a:	6a3b      	ldr	r3, [r7, #32]
}
 8021e1c:	4618      	mov	r0, r3
 8021e1e:	3728      	adds	r7, #40	@ 0x28
 8021e20:	46bd      	mov	sp, r7
 8021e22:	bd80      	pop	{r7, pc}
 8021e24:	0802718c 	.word	0x0802718c
 8021e28:	08027368 	.word	0x08027368
 8021e2c:	08010cd5 	.word	0x08010cd5
 8021e30:	0802736c 	.word	0x0802736c
 8021e34:	08026f34 	.word	0x08026f34
 8021e38:	08027374 	.word	0x08027374
 8021e3c:	08026fec 	.word	0x08026fec
 8021e40:	08027378 	.word	0x08027378
 8021e44:	08026f70 	.word	0x08026f70
 8021e48:	08027360 	.word	0x08027360
 8021e4c:	08027358 	.word	0x08027358
 8021e50:	08027160 	.word	0x08027160
 8021e54:	08026f60 	.word	0x08026f60
 8021e58:	0802737c 	.word	0x0802737c
 8021e5c:	08027380 	.word	0x08027380

08021e60 <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler_data *h) {
 8021e60:	b580      	push	{r7, lr}
 8021e62:	b0a8      	sub	sp, #160	@ 0xa0
 8021e64:	af04      	add	r7, sp, #16
 8021e66:	60f8      	str	r0, [r7, #12]
 8021e68:	60b9      	str	r1, [r7, #8]
 8021e6a:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 8021e6c:	687b      	ldr	r3, [r7, #4]
 8021e6e:	69db      	ldr	r3, [r3, #28]
 8021e70:	4619      	mov	r1, r3
 8021e72:	2001      	movs	r0, #1
 8021e74:	f001 f87a 	bl	8022f6c <calloc>
 8021e78:	4603      	mov	r3, r0
 8021e7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	6a1b      	ldr	r3, [r3, #32]
 8021e82:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8021e86:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 8021e88:	68bb      	ldr	r3, [r7, #8]
 8021e8a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	f000 80da 	beq.w	8022048 <handle_object+0x1e8>
 8021e94:	687b      	ldr	r3, [r7, #4]
 8021e96:	69db      	ldr	r3, [r3, #28]
 8021e98:	2b00      	cmp	r3, #0
 8021e9a:	f000 80d5 	beq.w	8022048 <handle_object+0x1e8>
    char *tmp = calloc(1, h->data_size);
 8021e9e:	687b      	ldr	r3, [r7, #4]
 8021ea0:	69db      	ldr	r3, [r3, #28]
 8021ea2:	4619      	mov	r1, r3
 8021ea4:	2001      	movs	r0, #1
 8021ea6:	f001 f861 	bl	8022f6c <calloc>
 8021eaa:	4603      	mov	r3, r0
 8021eac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 8021eb0:	687b      	ldr	r3, [r7, #4]
 8021eb2:	69db      	ldr	r3, [r3, #28]
 8021eb4:	461a      	mov	r2, r3
 8021eb6:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8021eba:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8021ebe:	f001 fc60 	bl	8023782 <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8021ec2:	2300      	movs	r3, #0
 8021ec4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021ec8:	e08e      	b.n	8021fe8 <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 8021eca:	687b      	ldr	r3, [r7, #4]
 8021ecc:	6999      	ldr	r1, [r3, #24]
 8021ece:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8021ed2:	4613      	mov	r3, r2
 8021ed4:	005b      	lsls	r3, r3, #1
 8021ed6:	4413      	add	r3, r2
 8021ed8:	00db      	lsls	r3, r3, #3
 8021eda:	440b      	add	r3, r1
 8021edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 8021ee0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021ee4:	681b      	ldr	r3, [r3, #0]
 8021ee6:	f107 0010 	add.w	r0, r7, #16
 8021eea:	4a62      	ldr	r2, [pc, #392]	@ (8022074 <handle_object+0x214>)
 8021eec:	2164      	movs	r1, #100	@ 0x64
 8021eee:	f7ee fcab 	bl	8010848 <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 8021ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021ef6:	685b      	ldr	r3, [r3, #4]
 8021ef8:	495f      	ldr	r1, [pc, #380]	@ (8022078 <handle_object+0x218>)
 8021efa:	4618      	mov	r0, r3
 8021efc:	f7de fa08 	bl	8000310 <strcmp>
 8021f00:	4603      	mov	r3, r0
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	d11c      	bne.n	8021f40 <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 8021f06:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8021f0a:	f107 0210 	add.w	r2, r7, #16
 8021f0e:	68b9      	ldr	r1, [r7, #8]
 8021f10:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8021f14:	c903      	ldmia	r1, {r0, r1}
 8021f16:	f7ea f8d2 	bl	800c0be <mg_json_get_num>
 8021f1a:	4603      	mov	r3, r0
 8021f1c:	2b00      	cmp	r3, #0
 8021f1e:	d05e      	beq.n	8021fde <handle_object+0x17e>
          int v = (int) d;
 8021f20:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8021f24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8021f28:	ee17 3a90 	vmov	r3, s15
 8021f2c:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 8021f2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021f32:	68db      	ldr	r3, [r3, #12]
 8021f34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8021f38:	4413      	add	r3, r2
 8021f3a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8021f3c:	601a      	str	r2, [r3, #0]
 8021f3e:	e04e      	b.n	8021fde <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 8021f40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021f44:	685b      	ldr	r3, [r3, #4]
 8021f46:	494d      	ldr	r1, [pc, #308]	@ (802207c <handle_object+0x21c>)
 8021f48:	4618      	mov	r0, r3
 8021f4a:	f7de f9e1 	bl	8000310 <strcmp>
 8021f4e:	4603      	mov	r3, r0
 8021f50:	2b00      	cmp	r3, #0
 8021f52:	d10e      	bne.n	8021f72 <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 8021f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021f58:	68db      	ldr	r3, [r3, #12]
 8021f5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8021f5e:	4413      	add	r3, r2
 8021f60:	f107 0210 	add.w	r2, r7, #16
 8021f64:	68b9      	ldr	r1, [r7, #8]
 8021f66:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8021f6a:	c903      	ldmia	r1, {r0, r1}
 8021f6c:	f7ea f8ec 	bl	800c148 <mg_json_get_bool>
 8021f70:	e035      	b.n	8021fde <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 8021f72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021f76:	685b      	ldr	r3, [r3, #4]
 8021f78:	4941      	ldr	r1, [pc, #260]	@ (8022080 <handle_object+0x220>)
 8021f7a:	4618      	mov	r0, r3
 8021f7c:	f7de f9c8 	bl	8000310 <strcmp>
 8021f80:	4603      	mov	r3, r0
 8021f82:	2b00      	cmp	r3, #0
 8021f84:	d10e      	bne.n	8021fa4 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 8021f86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021f8a:	68db      	ldr	r3, [r3, #12]
 8021f8c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8021f90:	4413      	add	r3, r2
 8021f92:	f107 0210 	add.w	r2, r7, #16
 8021f96:	68b9      	ldr	r1, [r7, #8]
 8021f98:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8021f9c:	c903      	ldmia	r1, {r0, r1}
 8021f9e:	f7ea f88e 	bl	800c0be <mg_json_get_num>
 8021fa2:	e01c      	b.n	8021fde <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 8021fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021fa8:	685b      	ldr	r3, [r3, #4]
 8021faa:	4936      	ldr	r1, [pc, #216]	@ (8022084 <handle_object+0x224>)
 8021fac:	4618      	mov	r0, r3
 8021fae:	f7de f9af 	bl	8000310 <strcmp>
 8021fb2:	4603      	mov	r3, r0
 8021fb4:	2b00      	cmp	r3, #0
 8021fb6:	d112      	bne.n	8021fde <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 8021fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021fbc:	68db      	ldr	r3, [r3, #12]
 8021fbe:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8021fc2:	18d0      	adds	r0, r2, r3
 8021fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8021fc8:	691b      	ldr	r3, [r3, #16]
 8021fca:	f107 0210 	add.w	r2, r7, #16
 8021fce:	68b9      	ldr	r1, [r7, #8]
 8021fd0:	9300      	str	r3, [sp, #0]
 8021fd2:	4603      	mov	r3, r0
 8021fd4:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8021fd8:	c903      	ldmia	r1, {r0, r1}
 8021fda:	f7ff f9c5 	bl	8021368 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8021fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021fe2:	3301      	adds	r3, #1
 8021fe4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8021fe8:	687b      	ldr	r3, [r7, #4]
 8021fea:	6999      	ldr	r1, [r3, #24]
 8021fec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8021ff0:	4613      	mov	r3, r2
 8021ff2:	005b      	lsls	r3, r3, #1
 8021ff4:	4413      	add	r3, r2
 8021ff6:	00db      	lsls	r3, r3, #3
 8021ff8:	440b      	add	r3, r1
 8021ffa:	681b      	ldr	r3, [r3, #0]
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	f47f af64 	bne.w	8021eca <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	69db      	ldr	r3, [r3, #28]
 8022006:	461a      	mov	r2, r3
 8022008:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 802200c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022010:	f001 fa57 	bl	80234c2 <memcmp>
 8022014:	4603      	mov	r3, r0
 8022016:	2b00      	cmp	r3, #0
 8022018:	d004      	beq.n	8022024 <handle_object+0x1c4>
 802201a:	4b1b      	ldr	r3, [pc, #108]	@ (8022088 <handle_object+0x228>)
 802201c:	681b      	ldr	r3, [r3, #0]
 802201e:	3301      	adds	r3, #1
 8022020:	4a19      	ldr	r2, [pc, #100]	@ (8022088 <handle_object+0x228>)
 8022022:	6013      	str	r3, [r2, #0]
    if (h->setter != NULL) h->setter(tmp);  // Can be NULL if readonly
 8022024:	687b      	ldr	r3, [r7, #4]
 8022026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022028:	2b00      	cmp	r3, #0
 802202a:	d004      	beq.n	8022036 <handle_object+0x1d6>
 802202c:	687b      	ldr	r3, [r7, #4]
 802202e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022030:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8022034:	4798      	blx	r3
    free(tmp);
 8022036:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 802203a:	f000 ffbb 	bl	8022fb4 <free>
    h->getter(data);  // Re-sync again after setting
 802203e:	687b      	ldr	r3, [r7, #4]
 8022040:	6a1b      	ldr	r3, [r3, #32]
 8022042:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022046:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h->attributes,
 8022048:	687b      	ldr	r3, [r7, #4]
 802204a:	699b      	ldr	r3, [r3, #24]
 802204c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8022050:	9202      	str	r2, [sp, #8]
 8022052:	9301      	str	r3, [sp, #4]
 8022054:	4b0d      	ldr	r3, [pc, #52]	@ (802208c <handle_object+0x22c>)
 8022056:	9300      	str	r3, [sp, #0]
 8022058:	4b0d      	ldr	r3, [pc, #52]	@ (8022090 <handle_object+0x230>)
 802205a:	4a0e      	ldr	r2, [pc, #56]	@ (8022094 <handle_object+0x234>)
 802205c:	21c8      	movs	r1, #200	@ 0xc8
 802205e:	68f8      	ldr	r0, [r7, #12]
 8022060:	f7e7 fbdc 	bl	800981c <mg_http_reply>
                data);
  free(data);
 8022064:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022068:	f000 ffa4 	bl	8022fb4 <free>
}
 802206c:	bf00      	nop
 802206e:	3790      	adds	r7, #144	@ 0x90
 8022070:	46bd      	mov	sp, r7
 8022072:	bd80      	pop	{r7, pc}
 8022074:	08027388 	.word	0x08027388
 8022078:	08026f34 	.word	0x08026f34
 802207c:	08026f70 	.word	0x08026f70
 8022080:	08026fec 	.word	0x08026fec
 8022084:	08026f60 	.word	0x08026f60
 8022088:	24004334 	.word	0x24004334
 802208c:	08021c51 	.word	0x08021c51
 8022090:	08027390 	.word	0x08027390
 8022094:	08027314 	.word	0x08027314

08022098 <print_array>:

static size_t print_array(void (*out)(char, void *), void *ptr, va_list *ap) {
 8022098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802209c:	b093      	sub	sp, #76	@ 0x4c
 802209e:	af02      	add	r7, sp, #8
 80220a0:	6178      	str	r0, [r7, #20]
 80220a2:	6139      	str	r1, [r7, #16]
 80220a4:	60fa      	str	r2, [r7, #12]
  struct apihandler_array *ha = va_arg(*ap, struct apihandler_array *);
 80220a6:	68fb      	ldr	r3, [r7, #12]
 80220a8:	681b      	ldr	r3, [r3, #0]
 80220aa:	1d19      	adds	r1, r3, #4
 80220ac:	68fa      	ldr	r2, [r7, #12]
 80220ae:	6011      	str	r1, [r2, #0]
 80220b0:	681b      	ldr	r3, [r3, #0]
 80220b2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint64_t size = *va_arg(*ap, uint64_t *);
 80220b4:	68fb      	ldr	r3, [r7, #12]
 80220b6:	681b      	ldr	r3, [r3, #0]
 80220b8:	1d19      	adds	r1, r3, #4
 80220ba:	68fa      	ldr	r2, [r7, #12]
 80220bc:	6011      	str	r1, [r2, #0]
 80220be:	681b      	ldr	r3, [r3, #0]
 80220c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  uint64_t start = *va_arg(*ap, uint64_t *);
 80220c8:	68fb      	ldr	r3, [r7, #12]
 80220ca:	681b      	ldr	r3, [r3, #0]
 80220cc:	1d19      	adds	r1, r3, #4
 80220ce:	68fa      	ldr	r2, [r7, #12]
 80220d0:	6011      	str	r1, [r2, #0]
 80220d2:	681b      	ldr	r3, [r3, #0]
 80220d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80220d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i, max = 20, len = 0;
 80220dc:	2314      	movs	r3, #20
 80220de:	61fb      	str	r3, [r7, #28]
 80220e0:	2300      	movs	r3, #0
 80220e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  void *data = calloc(1, ha->data_size);
 80220e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80220e6:	69db      	ldr	r3, [r3, #28]
 80220e8:	4619      	mov	r1, r3
 80220ea:	2001      	movs	r0, #1
 80220ec:	f000 ff3e 	bl	8022f6c <calloc>
 80220f0:	4603      	mov	r3, r0
 80220f2:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < max && start + i < size; i++) {
 80220f4:	2300      	movs	r3, #0
 80220f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80220f8:	e02f      	b.n	802215a <print_array+0xc2>
    ha->getter(start + i, data);
 80220fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80220fc:	6a1e      	ldr	r6, [r3, #32]
 80220fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022100:	2200      	movs	r2, #0
 8022102:	469a      	mov	sl, r3
 8022104:	4693      	mov	fp, r2
 8022106:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802210a:	eb1a 0102 	adds.w	r1, sl, r2
 802210e:	6039      	str	r1, [r7, #0]
 8022110:	eb4b 0303 	adc.w	r3, fp, r3
 8022114:	607b      	str	r3, [r7, #4]
 8022116:	69ba      	ldr	r2, [r7, #24]
 8022118:	e9d7 0100 	ldrd	r0, r1, [r7]
 802211c:	47b0      	blx	r6
    if (i > 0) len += mg_xprintf(out, ptr, ",");
 802211e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022120:	2b00      	cmp	r3, #0
 8022122:	d008      	beq.n	8022136 <print_array+0x9e>
 8022124:	4a1b      	ldr	r2, [pc, #108]	@ (8022194 <print_array+0xfc>)
 8022126:	6939      	ldr	r1, [r7, #16]
 8022128:	6978      	ldr	r0, [r7, #20]
 802212a:	f7e5 fa6e 	bl	800760a <mg_xprintf>
 802212e:	4602      	mov	r2, r0
 8022130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022132:	4413      	add	r3, r2
 8022134:	63bb      	str	r3, [r7, #56]	@ 0x38
    len += mg_xprintf(out, ptr, "{%M}", print_struct, ha->attributes, data);
 8022136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022138:	699b      	ldr	r3, [r3, #24]
 802213a:	69ba      	ldr	r2, [r7, #24]
 802213c:	9201      	str	r2, [sp, #4]
 802213e:	9300      	str	r3, [sp, #0]
 8022140:	4b15      	ldr	r3, [pc, #84]	@ (8022198 <print_array+0x100>)
 8022142:	4a16      	ldr	r2, [pc, #88]	@ (802219c <print_array+0x104>)
 8022144:	6939      	ldr	r1, [r7, #16]
 8022146:	6978      	ldr	r0, [r7, #20]
 8022148:	f7e5 fa5f 	bl	800760a <mg_xprintf>
 802214c:	4602      	mov	r2, r0
 802214e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8022150:	4413      	add	r3, r2
 8022152:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < max && start + i < size; i++) {
 8022154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022156:	3301      	adds	r3, #1
 8022158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802215a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 802215c:	69fb      	ldr	r3, [r7, #28]
 802215e:	429a      	cmp	r2, r3
 8022160:	d20f      	bcs.n	8022182 <print_array+0xea>
 8022162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022164:	2200      	movs	r2, #0
 8022166:	4698      	mov	r8, r3
 8022168:	4691      	mov	r9, r2
 802216a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 802216e:	eb18 0402 	adds.w	r4, r8, r2
 8022172:	eb49 0503 	adc.w	r5, r9, r3
 8022176:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802217a:	4294      	cmp	r4, r2
 802217c:	eb75 0303 	sbcs.w	r3, r5, r3
 8022180:	d3bb      	bcc.n	80220fa <print_array+0x62>
  }
  free(data);
 8022182:	69b8      	ldr	r0, [r7, #24]
 8022184:	f000 ff16 	bl	8022fb4 <free>
  return len;
 8022188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 802218a:	4618      	mov	r0, r3
 802218c:	3744      	adds	r7, #68	@ 0x44
 802218e:	46bd      	mov	sp, r7
 8022190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022194:	08027368 	.word	0x08027368
 8022198:	08021c51 	.word	0x08021c51
 802219c:	08027398 	.word	0x08027398

080221a0 <handle_array>:

static void handle_array(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler_array *h) {
 80221a0:	b590      	push	{r4, r7, lr}
 80221a2:	b0a9      	sub	sp, #164	@ 0xa4
 80221a4:	af14      	add	r7, sp, #80	@ 0x50
 80221a6:	60f8      	str	r0, [r7, #12]
 80221a8:	60b9      	str	r1, [r7, #8]
 80221aa:	607a      	str	r2, [r7, #4]
  char buf[40] = "";
 80221ac:	f107 0320 	add.w	r3, r7, #32
 80221b0:	2228      	movs	r2, #40	@ 0x28
 80221b2:	2100      	movs	r1, #0
 80221b4:	4618      	mov	r0, r3
 80221b6:	f001 f9ae 	bl	8023516 <memset>
  uint64_t size = h->sizer();
 80221ba:	687b      	ldr	r3, [r7, #4]
 80221bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80221be:	4798      	blx	r3
 80221c0:	4602      	mov	r2, r0
 80221c2:	460b      	mov	r3, r1
 80221c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  uint64_t start = 0;
 80221c8:	f04f 0200 	mov.w	r2, #0
 80221cc:	f04f 0300 	mov.w	r3, #0
 80221d0:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_get_var(&hm->query, "start", buf, sizeof(buf));
 80221d4:	68bb      	ldr	r3, [r7, #8]
 80221d6:	f103 0010 	add.w	r0, r3, #16
 80221da:	f107 0220 	add.w	r2, r7, #32
 80221de:	2328      	movs	r3, #40	@ 0x28
 80221e0:	4927      	ldr	r1, [pc, #156]	@ (8022280 <handle_array+0xe0>)
 80221e2:	f7e6 f93d 	bl	8008460 <mg_http_get_var>
  if (!mg_str_to_num(mg_str(buf), 10, &start, sizeof(start))) start = 0;
 80221e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80221ea:	f107 0220 	add.w	r2, r7, #32
 80221ee:	4611      	mov	r1, r2
 80221f0:	4618      	mov	r0, r3
 80221f2:	f7f1 feef 	bl	8013fd4 <mg_str_s>
 80221f6:	f107 0310 	add.w	r3, r7, #16
 80221fa:	2208      	movs	r2, #8
 80221fc:	9200      	str	r2, [sp, #0]
 80221fe:	220a      	movs	r2, #10
 8022200:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8022204:	c903      	ldmia	r1, {r0, r1}
 8022206:	f7f2 f940 	bl	801448a <mg_str_to_num>
 802220a:	4603      	mov	r3, r0
 802220c:	f083 0301 	eor.w	r3, r3, #1
 8022210:	b2db      	uxtb	r3, r3
 8022212:	2b00      	cmp	r3, #0
 8022214:	d005      	beq.n	8022222 <handle_array+0x82>
 8022216:	f04f 0200 	mov.w	r2, #0
 802221a:	f04f 0300 	mov.w	r3, #0
 802221e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_reply(c, 200, JSON_HEADERS, "{%m:%llu, %m:%llu, %m:[%M]}\n",
 8022222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8022226:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 802222a:	f107 0410 	add.w	r4, r7, #16
 802222e:	9412      	str	r4, [sp, #72]	@ 0x48
 8022230:	f107 0418 	add.w	r4, r7, #24
 8022234:	9411      	str	r4, [sp, #68]	@ 0x44
 8022236:	687c      	ldr	r4, [r7, #4]
 8022238:	9410      	str	r4, [sp, #64]	@ 0x40
 802223a:	4c12      	ldr	r4, [pc, #72]	@ (8022284 <handle_array+0xe4>)
 802223c:	940f      	str	r4, [sp, #60]	@ 0x3c
 802223e:	4c12      	ldr	r4, [pc, #72]	@ (8022288 <handle_array+0xe8>)
 8022240:	940e      	str	r4, [sp, #56]	@ 0x38
 8022242:	2400      	movs	r4, #0
 8022244:	940d      	str	r4, [sp, #52]	@ 0x34
 8022246:	4c11      	ldr	r4, [pc, #68]	@ (802228c <handle_array+0xec>)
 8022248:	940c      	str	r4, [sp, #48]	@ 0x30
 802224a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 802224e:	490c      	ldr	r1, [pc, #48]	@ (8022280 <handle_array+0xe0>)
 8022250:	9108      	str	r1, [sp, #32]
 8022252:	2100      	movs	r1, #0
 8022254:	9107      	str	r1, [sp, #28]
 8022256:	490d      	ldr	r1, [pc, #52]	@ (802228c <handle_array+0xec>)
 8022258:	9106      	str	r1, [sp, #24]
 802225a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802225e:	4b0c      	ldr	r3, [pc, #48]	@ (8022290 <handle_array+0xf0>)
 8022260:	9302      	str	r3, [sp, #8]
 8022262:	2300      	movs	r3, #0
 8022264:	9301      	str	r3, [sp, #4]
 8022266:	4b09      	ldr	r3, [pc, #36]	@ (802228c <handle_array+0xec>)
 8022268:	9300      	str	r3, [sp, #0]
 802226a:	4b0a      	ldr	r3, [pc, #40]	@ (8022294 <handle_array+0xf4>)
 802226c:	4a0a      	ldr	r2, [pc, #40]	@ (8022298 <handle_array+0xf8>)
 802226e:	21c8      	movs	r1, #200	@ 0xc8
 8022270:	68f8      	ldr	r0, [r7, #12]
 8022272:	f7e7 fad3 	bl	800981c <mg_http_reply>
                MG_ESC("size"), size, MG_ESC("start"), start, MG_ESC("data"),
                print_array, h, &size, &start);
}
 8022276:	bf00      	nop
 8022278:	3754      	adds	r7, #84	@ 0x54
 802227a:	46bd      	mov	sp, r7
 802227c:	bd90      	pop	{r4, r7, pc}
 802227e:	bf00      	nop
 8022280:	080273a0 	.word	0x080273a0
 8022284:	08022099 	.word	0x08022099
 8022288:	08027090 	.word	0x08027090
 802228c:	08010cd5 	.word	0x08010cd5
 8022290:	080273c8 	.word	0x080273c8
 8022294:	080273a8 	.word	0x080273a8
 8022298:	08027314 	.word	0x08027314

0802229c <handle_file>:
  }
  return len;
}

static void handle_file(struct mg_connection *c, struct mg_http_message *hm,
                        struct apihandler_file *hf) {
 802229c:	b580      	push	{r7, lr}
 802229e:	b09e      	sub	sp, #120	@ 0x78
 80222a0:	af00      	add	r7, sp, #0
 80222a2:	60f8      	str	r0, [r7, #12]
 80222a4:	60b9      	str	r1, [r7, #8]
 80222a6:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 80222a8:	f107 0214 	add.w	r2, r7, #20
 80222ac:	68b9      	ldr	r1, [r7, #8]
 80222ae:	2364      	movs	r3, #100	@ 0x64
 80222b0:	3108      	adds	r1, #8
 80222b2:	c903      	ldmia	r1, {r0, r1}
 80222b4:	f7ff fb62 	bl	802197c <get_file_name_from_uri>
  hf->server(c, hm, path);
 80222b8:	687b      	ldr	r3, [r7, #4]
 80222ba:	69db      	ldr	r3, [r3, #28]
 80222bc:	f107 0214 	add.w	r2, r7, #20
 80222c0:	68b9      	ldr	r1, [r7, #8]
 80222c2:	68f8      	ldr	r0, [r7, #12]
 80222c4:	4798      	blx	r3
}
 80222c6:	bf00      	nop
 80222c8:	3778      	adds	r7, #120	@ 0x78
 80222ca:	46bd      	mov	sp, r7
 80222cc:	bd80      	pop	{r7, pc}
	...

080222d0 <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 80222d0:	b580      	push	{r7, lr}
 80222d2:	b088      	sub	sp, #32
 80222d4:	af02      	add	r7, sp, #8
 80222d6:	60f8      	str	r0, [r7, #12]
 80222d8:	60b9      	str	r1, [r7, #8]
 80222da:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0 || strcmp(h->type, "data") == 0) {
 80222dc:	687b      	ldr	r3, [r7, #4]
 80222de:	685b      	ldr	r3, [r3, #4]
 80222e0:	4932      	ldr	r1, [pc, #200]	@ (80223ac <handle_api_call+0xdc>)
 80222e2:	4618      	mov	r0, r3
 80222e4:	f7de f814 	bl	8000310 <strcmp>
 80222e8:	4603      	mov	r3, r0
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	d008      	beq.n	8022300 <handle_api_call+0x30>
 80222ee:	687b      	ldr	r3, [r7, #4]
 80222f0:	685b      	ldr	r3, [r3, #4]
 80222f2:	492f      	ldr	r1, [pc, #188]	@ (80223b0 <handle_api_call+0xe0>)
 80222f4:	4618      	mov	r0, r3
 80222f6:	f7de f80b 	bl	8000310 <strcmp>
 80222fa:	4603      	mov	r3, r0
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d105      	bne.n	802230c <handle_api_call+0x3c>
    handle_object(c, hm, (struct apihandler_data *) h);
 8022300:	687a      	ldr	r2, [r7, #4]
 8022302:	68b9      	ldr	r1, [r7, #8]
 8022304:	68f8      	ldr	r0, [r7, #12]
 8022306:	f7ff fdab 	bl	8021e60 <handle_object>
  } else if (strcmp(h->type, "custom") == 0) {
    ((struct apihandler_custom *) h)->reply(c, hm);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 802230a:	e04a      	b.n	80223a2 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "array") == 0) {
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	685b      	ldr	r3, [r3, #4]
 8022310:	4928      	ldr	r1, [pc, #160]	@ (80223b4 <handle_api_call+0xe4>)
 8022312:	4618      	mov	r0, r3
 8022314:	f7dd fffc 	bl	8000310 <strcmp>
 8022318:	4603      	mov	r3, r0
 802231a:	2b00      	cmp	r3, #0
 802231c:	d105      	bne.n	802232a <handle_api_call+0x5a>
    handle_array(c, hm, (struct apihandler_array *) h);
 802231e:	687a      	ldr	r2, [r7, #4]
 8022320:	68b9      	ldr	r1, [r7, #8]
 8022322:	68f8      	ldr	r0, [r7, #12]
 8022324:	f7ff ff3c 	bl	80221a0 <handle_array>
}
 8022328:	e03b      	b.n	80223a2 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "action") == 0) {
 802232a:	687b      	ldr	r3, [r7, #4]
 802232c:	685b      	ldr	r3, [r3, #4]
 802232e:	4922      	ldr	r1, [pc, #136]	@ (80223b8 <handle_api_call+0xe8>)
 8022330:	4618      	mov	r0, r3
 8022332:	f7dd ffed 	bl	8000310 <strcmp>
 8022336:	4603      	mov	r3, r0
 8022338:	2b00      	cmp	r3, #0
 802233a:	d10a      	bne.n	8022352 <handle_api_call+0x82>
    struct apihandler_action *ha = (struct apihandler_action *) h;
 802233c:	687b      	ldr	r3, [r7, #4]
 802233e:	617b      	str	r3, [r7, #20]
    handle_action(c, hm, ha->checker, ha->starter);
 8022340:	697b      	ldr	r3, [r7, #20]
 8022342:	699a      	ldr	r2, [r3, #24]
 8022344:	697b      	ldr	r3, [r7, #20]
 8022346:	69db      	ldr	r3, [r3, #28]
 8022348:	68b9      	ldr	r1, [r7, #8]
 802234a:	68f8      	ldr	r0, [r7, #12]
 802234c:	f7ff fc3c 	bl	8021bc8 <handle_action>
}
 8022350:	e027      	b.n	80223a2 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "file") == 0) {
 8022352:	687b      	ldr	r3, [r7, #4]
 8022354:	685b      	ldr	r3, [r3, #4]
 8022356:	4919      	ldr	r1, [pc, #100]	@ (80223bc <handle_api_call+0xec>)
 8022358:	4618      	mov	r0, r3
 802235a:	f7dd ffd9 	bl	8000310 <strcmp>
 802235e:	4603      	mov	r3, r0
 8022360:	2b00      	cmp	r3, #0
 8022362:	d105      	bne.n	8022370 <handle_api_call+0xa0>
    handle_file(c, hm, (struct apihandler_file *) h);
 8022364:	687a      	ldr	r2, [r7, #4]
 8022366:	68b9      	ldr	r1, [r7, #8]
 8022368:	68f8      	ldr	r0, [r7, #12]
 802236a:	f7ff ff97 	bl	802229c <handle_file>
}
 802236e:	e018      	b.n	80223a2 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "custom") == 0) {
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	685b      	ldr	r3, [r3, #4]
 8022374:	4912      	ldr	r1, [pc, #72]	@ (80223c0 <handle_api_call+0xf0>)
 8022376:	4618      	mov	r0, r3
 8022378:	f7dd ffca 	bl	8000310 <strcmp>
 802237c:	4603      	mov	r3, r0
 802237e:	2b00      	cmp	r3, #0
 8022380:	d105      	bne.n	802238e <handle_api_call+0xbe>
    ((struct apihandler_custom *) h)->reply(c, hm);
 8022382:	687b      	ldr	r3, [r7, #4]
 8022384:	699b      	ldr	r3, [r3, #24]
 8022386:	68b9      	ldr	r1, [r7, #8]
 8022388:	68f8      	ldr	r0, [r7, #12]
 802238a:	4798      	blx	r3
}
 802238c:	e009      	b.n	80223a2 <handle_api_call+0xd2>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	685b      	ldr	r3, [r3, #4]
 8022392:	9300      	str	r3, [sp, #0]
 8022394:	4b0b      	ldr	r3, [pc, #44]	@ (80223c4 <handle_api_call+0xf4>)
 8022396:	4a0c      	ldr	r2, [pc, #48]	@ (80223c8 <handle_api_call+0xf8>)
 8022398:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 802239c:	68f8      	ldr	r0, [r7, #12]
 802239e:	f7e7 fa3d 	bl	800981c <mg_http_reply>
}
 80223a2:	bf00      	nop
 80223a4:	3718      	adds	r7, #24
 80223a6:	46bd      	mov	sp, r7
 80223a8:	bd80      	pop	{r7, pc}
 80223aa:	bf00      	nop
 80223ac:	080273dc 	.word	0x080273dc
 80223b0:	08027090 	.word	0x08027090
 80223b4:	080273e4 	.word	0x080273e4
 80223b8:	08027038 	.word	0x08027038
 80223bc:	0802711c 	.word	0x0802711c
 80223c0:	08027080 	.word	0x08027080
 80223c4:	080273ec 	.word	0x080273ec
 80223c8:	08027314 	.word	0x08027314

080223cc <http_ev_handler>:
void glue_update_state(void) {
  s_device_change_version++;
}

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 80223cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223ce:	b0b5      	sub	sp, #212	@ 0xd4
 80223d0:	af06      	add	r7, sp, #24
 80223d2:	61f8      	str	r0, [r7, #28]
 80223d4:	61b9      	str	r1, [r7, #24]
 80223d6:	617a      	str	r2, [r7, #20]
  if (ev == MG_EV_HTTP_HDRS && c->data[0] == 0) {
 80223d8:	69bb      	ldr	r3, [r7, #24]
 80223da:	2b0a      	cmp	r3, #10
 80223dc:	d164      	bne.n	80224a8 <http_ev_handler+0xdc>
 80223de:	69fb      	ldr	r3, [r7, #28]
 80223e0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80223e4:	2b00      	cmp	r3, #0
 80223e6:	d15f      	bne.n	80224a8 <http_ev_handler+0xdc>
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80223e8:	697b      	ldr	r3, [r7, #20]
 80223ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 80223ee:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80223f2:	49b4      	ldr	r1, [pc, #720]	@ (80226c4 <http_ev_handler+0x2f8>)
 80223f4:	4618      	mov	r0, r3
 80223f6:	f7f1 fded 	bl	8013fd4 <mg_str_s>
 80223fa:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80223fe:	2300      	movs	r3, #0
 8022400:	9300      	str	r3, [sp, #0]
 8022402:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8022406:	cb0c      	ldmia	r3, {r2, r3}
 8022408:	3108      	adds	r1, #8
 802240a:	c903      	ldmia	r1, {r0, r1}
 802240c:	f7f1 feec 	bl	80141e8 <mg_match>
 8022410:	4603      	mov	r3, r0
 8022412:	2b00      	cmp	r3, #0
 8022414:	d113      	bne.n	802243e <http_ev_handler+0x72>
        mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 8022416:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 802241a:	49ab      	ldr	r1, [pc, #684]	@ (80226c8 <http_ev_handler+0x2fc>)
 802241c:	4618      	mov	r0, r3
 802241e:	f7f1 fdd9 	bl	8013fd4 <mg_str_s>
 8022422:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8022426:	2300      	movs	r3, #0
 8022428:	9300      	str	r3, [sp, #0]
 802242a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 802242e:	cb0c      	ldmia	r3, {r2, r3}
 8022430:	3108      	adds	r1, #8
 8022432:	c903      	ldmia	r1, {r0, r1}
 8022434:	f7f1 fed8 	bl	80141e8 <mg_match>
 8022438:	4603      	mov	r3, r0
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 802243a:	2b00      	cmp	r3, #0
 802243c:	d034      	beq.n	80224a8 <http_ev_handler+0xdc>
      struct apihandler *h = find_handler(hm);
 802243e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8022442:	f7fe ff65 	bl	8021310 <find_handler>
 8022446:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
      struct user *u = authenticate(hm);
 802244a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 802244e:	f7fe ffb7 	bl	80213c0 <authenticate>
 8022452:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
      if ((u == NULL ||
 8022456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802245a:	2b00      	cmp	r3, #0
 802245c:	d019      	beq.n	8022492 <http_ev_handler+0xc6>
 802245e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8022462:	2b00      	cmp	r3, #0
 8022464:	d020      	beq.n	80224a8 <http_ev_handler+0xdc>
           (h != NULL && (u->level < h->read_level ||
 8022466:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802246a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802246c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8022470:	68db      	ldr	r3, [r3, #12]
 8022472:	429a      	cmp	r2, r3
 8022474:	db0d      	blt.n	8022492 <http_ev_handler+0xc6>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8022476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802247a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
           (h != NULL && (u->level < h->read_level ||
 802247e:	2b00      	cmp	r3, #0
 8022480:	d012      	beq.n	80224a8 <http_ev_handler+0xdc>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8022482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8022486:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022488:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802248c:	691b      	ldr	r3, [r3, #16]
 802248e:	429a      	cmp	r2, r3
 8022490:	da0a      	bge.n	80224a8 <http_ev_handler+0xdc>
        mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8022492:	4b8e      	ldr	r3, [pc, #568]	@ (80226cc <http_ev_handler+0x300>)
 8022494:	4a8e      	ldr	r2, [pc, #568]	@ (80226d0 <http_ev_handler+0x304>)
 8022496:	f240 1193 	movw	r1, #403	@ 0x193
 802249a:	69f8      	ldr	r0, [r7, #28]
 802249c:	f7e7 f9be 	bl	800981c <mg_http_reply>
        c->data[0] = 'Z';  // Mark this connection as handled
 80224a0:	69fb      	ldr	r3, [r7, #28]
 80224a2:	225a      	movs	r2, #90	@ 0x5a
 80224a4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    }
#endif
  }

  // We're checking c->is_websocket cause WS connection use c->data
  if (c->is_websocket == 0) handle_uploads(c, ev, ev_data);
 80224a8:	69fb      	ldr	r3, [r7, #28]
 80224aa:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80224ae:	f003 0302 	and.w	r3, r3, #2
 80224b2:	b2db      	uxtb	r3, r3
 80224b4:	2b00      	cmp	r3, #0
 80224b6:	d104      	bne.n	80224c2 <http_ev_handler+0xf6>
 80224b8:	697a      	ldr	r2, [r7, #20]
 80224ba:	69b9      	ldr	r1, [r7, #24]
 80224bc:	69f8      	ldr	r0, [r7, #28]
 80224be:	f7ff fb11 	bl	8021ae4 <handle_uploads>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 80224c2:	69bb      	ldr	r3, [r7, #24]
 80224c4:	2b02      	cmp	r3, #2
 80224c6:	d128      	bne.n	802251a <http_ev_handler+0x14e>
 80224c8:	69fb      	ldr	r3, [r7, #28]
 80224ca:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80224ce:	f003 0302 	and.w	r3, r3, #2
 80224d2:	b2db      	uxtb	r3, r3
 80224d4:	2b00      	cmp	r3, #0
 80224d6:	d120      	bne.n	802251a <http_ev_handler+0x14e>
 80224d8:	69fb      	ldr	r3, [r7, #28]
 80224da:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80224de:	2b41      	cmp	r3, #65	@ 0x41
 80224e0:	d11b      	bne.n	802251a <http_ev_handler+0x14e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 80224e2:	69fb      	ldr	r3, [r7, #28]
 80224e4:	3388      	adds	r3, #136	@ 0x88
 80224e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (as->fn() == false) {
 80224ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80224ee:	685b      	ldr	r3, [r3, #4]
 80224f0:	4798      	blx	r3
 80224f2:	4603      	mov	r3, r0
 80224f4:	f083 0301 	eor.w	r3, r3, #1
 80224f8:	b2db      	uxtb	r3, r3
 80224fa:	2b00      	cmp	r3, #0
 80224fc:	f000 813b 	beq.w	8022776 <http_ev_handler+0x3aa>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 8022500:	4b74      	ldr	r3, [pc, #464]	@ (80226d4 <http_ev_handler+0x308>)
 8022502:	4a73      	ldr	r2, [pc, #460]	@ (80226d0 <http_ev_handler+0x304>)
 8022504:	21c8      	movs	r1, #200	@ 0xc8
 8022506:	69f8      	ldr	r0, [r7, #28]
 8022508:	f7e7 f988 	bl	800981c <mg_http_reply>
      memset(as, 0, sizeof(*as));
 802250c:	2208      	movs	r2, #8
 802250e:	2100      	movs	r1, #0
 8022510:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8022514:	f000 ffff 	bl	8023516 <memset>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8022518:	e12d      	b.n	8022776 <http_ev_handler+0x3aa>
    }
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802251a:	69bb      	ldr	r3, [r7, #24]
 802251c:	2b0b      	cmp	r3, #11
 802251e:	f040 80f3 	bne.w	8022708 <http_ev_handler+0x33c>
 8022522:	69fb      	ldr	r3, [r7, #28]
 8022524:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8022528:	f003 0302 	and.w	r3, r3, #2
 802252c:	b2db      	uxtb	r3, r3
 802252e:	2b00      	cmp	r3, #0
 8022530:	f040 80ea 	bne.w	8022708 <http_ev_handler+0x33c>
 8022534:	69fb      	ldr	r3, [r7, #28]
 8022536:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 802253a:	2b00      	cmp	r3, #0
 802253c:	f040 80e4 	bne.w	8022708 <http_ev_handler+0x33c>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8022540:	697b      	ldr	r3, [r7, #20]
 8022542:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
#if WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    struct apihandler *h = find_handler(hm);
 8022546:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 802254a:	f7fe fee1 	bl	8021310 <find_handler>
 802254e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 8022552:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8022556:	f7fe ff33 	bl	80213c0 <authenticate>
 802255a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 802255e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8022562:	495d      	ldr	r1, [pc, #372]	@ (80226d8 <http_ev_handler+0x30c>)
 8022564:	4618      	mov	r0, r3
 8022566:	f7f1 fd35 	bl	8013fd4 <mg_str_s>
 802256a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802256e:	2300      	movs	r3, #0
 8022570:	9300      	str	r3, [sp, #0]
 8022572:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8022576:	cb0c      	ldmia	r3, {r2, r3}
 8022578:	3108      	adds	r1, #8
 802257a:	c903      	ldmia	r1, {r0, r1}
 802257c:	f7f1 fe34 	bl	80141e8 <mg_match>
 8022580:	4603      	mov	r3, r0
 8022582:	2b00      	cmp	r3, #0
 8022584:	d005      	beq.n	8022592 <http_ev_handler+0x1c6>
      handle_login(c, u);
 8022586:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 802258a:	69f8      	ldr	r0, [r7, #28]
 802258c:	f7fe fffc 	bl	8021588 <handle_login>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8022590:	e0f3      	b.n	802277a <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8022592:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8022596:	4951      	ldr	r1, [pc, #324]	@ (80226dc <http_ev_handler+0x310>)
 8022598:	4618      	mov	r0, r3
 802259a:	f7f1 fd1b 	bl	8013fd4 <mg_str_s>
 802259e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80225a2:	2300      	movs	r3, #0
 80225a4:	9300      	str	r3, [sp, #0]
 80225a6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80225aa:	cb0c      	ldmia	r3, {r2, r3}
 80225ac:	3108      	adds	r1, #8
 80225ae:	c903      	ldmia	r1, {r0, r1}
 80225b0:	f7f1 fe1a 	bl	80141e8 <mg_match>
 80225b4:	4603      	mov	r3, r0
 80225b6:	2b00      	cmp	r3, #0
 80225b8:	d003      	beq.n	80225c2 <http_ev_handler+0x1f6>
      handle_logout(c);
 80225ba:	69f8      	ldr	r0, [r7, #28]
 80225bc:	f7ff f852 	bl	8021664 <handle_logout>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80225c0:	e0db      	b.n	802277a <http_ev_handler+0x3ae>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 80225c2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80225c6:	4946      	ldr	r1, [pc, #280]	@ (80226e0 <http_ev_handler+0x314>)
 80225c8:	4618      	mov	r0, r3
 80225ca:	f7f1 fd03 	bl	8013fd4 <mg_str_s>
 80225ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80225d2:	2300      	movs	r3, #0
 80225d4:	9300      	str	r3, [sp, #0]
 80225d6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80225da:	cb0c      	ldmia	r3, {r2, r3}
 80225dc:	3108      	adds	r1, #8
 80225de:	c903      	ldmia	r1, {r0, r1}
 80225e0:	f7f1 fe02 	bl	80141e8 <mg_match>
 80225e4:	4603      	mov	r3, r0
 80225e6:	2b00      	cmp	r3, #0
 80225e8:	d006      	beq.n	80225f8 <http_ev_handler+0x22c>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 80225ea:	4b3e      	ldr	r3, [pc, #248]	@ (80226e4 <http_ev_handler+0x318>)
 80225ec:	4a38      	ldr	r2, [pc, #224]	@ (80226d0 <http_ev_handler+0x304>)
 80225ee:	21c8      	movs	r1, #200	@ 0xc8
 80225f0:	69f8      	ldr	r0, [r7, #28]
 80225f2:	f7e7 f913 	bl	800981c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80225f6:	e0c0      	b.n	802277a <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 80225f8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80225fc:	4932      	ldr	r1, [pc, #200]	@ (80226c8 <http_ev_handler+0x2fc>)
 80225fe:	4618      	mov	r0, r3
 8022600:	f7f1 fce8 	bl	8013fd4 <mg_str_s>
 8022604:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8022608:	2300      	movs	r3, #0
 802260a:	9300      	str	r3, [sp, #0]
 802260c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8022610:	cb0c      	ldmia	r3, {r2, r3}
 8022612:	3108      	adds	r1, #8
 8022614:	c903      	ldmia	r1, {r0, r1}
 8022616:	f7f1 fde7 	bl	80141e8 <mg_match>
 802261a:	4603      	mov	r3, r0
 802261c:	2b00      	cmp	r3, #0
 802261e:	d006      	beq.n	802262e <http_ev_handler+0x262>
      mg_ws_upgrade(c, hm, NULL);
 8022620:	2200      	movs	r2, #0
 8022622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8022626:	69f8      	ldr	r0, [r7, #28]
 8022628:	f7fd fbc2 	bl	801fdb0 <mg_ws_upgrade>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802262c:	e0a5      	b.n	802277a <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 802262e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8022632:	492d      	ldr	r1, [pc, #180]	@ (80226e8 <http_ev_handler+0x31c>)
 8022634:	4618      	mov	r0, r3
 8022636:	f7f1 fccd 	bl	8013fd4 <mg_str_s>
 802263a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802263e:	2300      	movs	r3, #0
 8022640:	9300      	str	r3, [sp, #0]
 8022642:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8022646:	cb0c      	ldmia	r3, {r2, r3}
 8022648:	3108      	adds	r1, #8
 802264a:	c903      	ldmia	r1, {r0, r1}
 802264c:	f7f1 fdcc 	bl	80141e8 <mg_match>
 8022650:	4603      	mov	r3, r0
 8022652:	2b00      	cmp	r3, #0
 8022654:	d00f      	beq.n	8022676 <http_ev_handler+0x2aa>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 8022656:	4b25      	ldr	r3, [pc, #148]	@ (80226ec <http_ev_handler+0x320>)
 8022658:	681b      	ldr	r3, [r3, #0]
 802265a:	9303      	str	r3, [sp, #12]
 802265c:	4b24      	ldr	r3, [pc, #144]	@ (80226f0 <http_ev_handler+0x324>)
 802265e:	9302      	str	r3, [sp, #8]
 8022660:	2300      	movs	r3, #0
 8022662:	9301      	str	r3, [sp, #4]
 8022664:	4b23      	ldr	r3, [pc, #140]	@ (80226f4 <http_ev_handler+0x328>)
 8022666:	9300      	str	r3, [sp, #0]
 8022668:	4b23      	ldr	r3, [pc, #140]	@ (80226f8 <http_ev_handler+0x32c>)
 802266a:	4a19      	ldr	r2, [pc, #100]	@ (80226d0 <http_ev_handler+0x304>)
 802266c:	21c8      	movs	r1, #200	@ 0xc8
 802266e:	69f8      	ldr	r0, [r7, #28]
 8022670:	f7e7 f8d4 	bl	800981c <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8022674:	e081      	b.n	802277a <http_ev_handler+0x3ae>
                    s_device_change_version);
    } else if (h != NULL) {
 8022676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802267a:	2b00      	cmp	r3, #0
 802267c:	d007      	beq.n	802268e <http_ev_handler+0x2c2>
      handle_api_call(c, hm, h);
 802267e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8022682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8022686:	69f8      	ldr	r0, [r7, #28]
 8022688:	f7ff fe22 	bl	80222d0 <handle_api_call>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802268c:	e075      	b.n	802277a <http_ev_handler+0x3ae>
    } else if (c->data[0] == 0)
 802268e:	69fb      	ldr	r3, [r7, #28]
 8022690:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8022694:	2b00      	cmp	r3, #0
 8022696:	d170      	bne.n	802277a <http_ev_handler+0x3ae>
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    {
#if WIZARD_ENABLE_HTTP_UI
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 8022698:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802269c:	2218      	movs	r2, #24
 802269e:	2100      	movs	r1, #0
 80226a0:	4618      	mov	r0, r3
 80226a2:	f000 ff38 	bl	8023516 <memset>
      opts.root_dir = "/web_root/";
 80226a6:	4b15      	ldr	r3, [pc, #84]	@ (80226fc <http_ev_handler+0x330>)
 80226a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 80226aa:	4b15      	ldr	r3, [pc, #84]	@ (8022700 <http_ev_handler+0x334>)
 80226ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 80226ae:	4b15      	ldr	r3, [pc, #84]	@ (8022704 <http_ev_handler+0x338>)
 80226b0:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 80226b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80226b6:	461a      	mov	r2, r3
 80226b8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80226bc:	69f8      	ldr	r0, [r7, #28]
 80226be:	f7e7 ffbf 	bl	800a640 <mg_http_serve_dir>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80226c2:	e05a      	b.n	802277a <http_ev_handler+0x3ae>
 80226c4:	08027404 	.word	0x08027404
 80226c8:	0802740c 	.word	0x0802740c
 80226cc:	08027418 	.word	0x08027418
 80226d0:	08027314 	.word	0x08027314
 80226d4:	08027360 	.word	0x08027360
 80226d8:	08027428 	.word	0x08027428
 80226dc:	08027434 	.word	0x08027434
 80226e0:	08027440 	.word	0x08027440
 80226e4:	08027448 	.word	0x08027448
 80226e8:	08027450 	.word	0x08027450
 80226ec:	24004334 	.word	0x24004334
 80226f0:	08026f58 	.word	0x08026f58
 80226f4:	08010cd5 	.word	0x08010cd5
 80226f8:	08027460 	.word	0x08027460
 80226fc:	0802746c 	.word	0x0802746c
 8022700:	24000010 	.word	0x24000010
 8022704:	08027478 	.word	0x08027478
#else
      mg_http_reply(c, 200, "", ":)\n");
#endif  // WIZARD_ENABLE_HTTP_UI
    }
  } else if (ev == MG_EV_WS_MSG || ev == MG_EV_WS_CTL) {
 8022708:	69bb      	ldr	r3, [r7, #24]
 802270a:	2b0d      	cmp	r3, #13
 802270c:	d036      	beq.n	802277c <http_ev_handler+0x3b0>
 802270e:	69bb      	ldr	r3, [r7, #24]
 8022710:	2b0e      	cmp	r3, #14
 8022712:	d033      	beq.n	802277c <http_ev_handler+0x3b0>
    // Ignore received data
  } else if (ev == MG_EV_ACCEPT) {
 8022714:	69bb      	ldr	r3, [r7, #24]
 8022716:	2b05      	cmp	r3, #5
 8022718:	d130      	bne.n	802277c <http_ev_handler+0x3b0>
    if (c->fn_data != NULL) {  // TLS listener
 802271a:	69fb      	ldr	r3, [r7, #28]
 802271c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 802271e:	2b00      	cmp	r3, #0
 8022720:	d02c      	beq.n	802277c <http_ev_handler+0x3b0>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 8022722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022726:	2224      	movs	r2, #36	@ 0x24
 8022728:	2100      	movs	r1, #0
 802272a:	4618      	mov	r0, r3
 802272c:	f000 fef3 	bl	8023516 <memset>
      opts.cert = mg_str(TLS_CERT);
 8022730:	f107 0308 	add.w	r3, r7, #8
 8022734:	493a      	ldr	r1, [pc, #232]	@ (8022820 <http_ev_handler+0x454>)
 8022736:	4618      	mov	r0, r3
 8022738:	f7f1 fc4c 	bl	8013fd4 <mg_str_s>
 802273c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8022740:	f107 0208 	add.w	r2, r7, #8
 8022744:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022748:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 802274c:	f107 0308 	add.w	r3, r7, #8
 8022750:	4934      	ldr	r1, [pc, #208]	@ (8022824 <http_ev_handler+0x458>)
 8022752:	4618      	mov	r0, r3
 8022754:	f7f1 fc3e 	bl	8013fd4 <mg_str_s>
 8022758:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802275c:	f107 0208 	add.w	r2, r7, #8
 8022760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022764:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 8022768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802276c:	4619      	mov	r1, r3
 802276e:	69f8      	ldr	r0, [r7, #28]
 8022770:	f7f5 ffd0 	bl	8018714 <mg_tls_init>
 8022774:	e002      	b.n	802277c <http_ev_handler+0x3b0>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8022776:	bf00      	nop
 8022778:	e000      	b.n	802277c <http_ev_handler+0x3b0>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802277a:	bf00      	nop
    }
  }

  if (ev == MG_EV_HTTP_MSG) {
 802277c:	69bb      	ldr	r3, [r7, #24]
 802277e:	2b0b      	cmp	r3, #11
 8022780:	d149      	bne.n	8022816 <http_ev_handler+0x44a>
    // Show this request
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8022782:	697b      	ldr	r3, [r7, #20]
 8022784:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s %lu", c->id, hm->method.len,
 8022788:	4b27      	ldr	r3, [pc, #156]	@ (8022828 <http_ev_handler+0x45c>)
 802278a:	681b      	ldr	r3, [r3, #0]
 802278c:	2b02      	cmp	r3, #2
 802278e:	dd32      	ble.n	80227f6 <http_ev_handler+0x42a>
 8022790:	4b26      	ldr	r3, [pc, #152]	@ (802282c <http_ev_handler+0x460>)
 8022792:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 8022796:	4926      	ldr	r1, [pc, #152]	@ (8022830 <http_ev_handler+0x464>)
 8022798:	2003      	movs	r0, #3
 802279a:	f7e9 fdcf 	bl	800c33c <mg_log_prefix>
 802279e:	69fb      	ldr	r3, [r7, #28]
 80227a0:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80227a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80227a6:	685b      	ldr	r3, [r3, #4]
 80227a8:	607b      	str	r3, [r7, #4]
 80227aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80227ae:	681b      	ldr	r3, [r3, #0]
 80227b0:	603b      	str	r3, [r7, #0]
 80227b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80227b6:	68db      	ldr	r3, [r3, #12]
 80227b8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80227bc:	6892      	ldr	r2, [r2, #8]
 80227be:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80227c2:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 80227c6:	69f8      	ldr	r0, [r7, #28]
 80227c8:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 80227ca:	280f      	cmp	r0, #15
 80227cc:	d901      	bls.n	80227d2 <http_ev_handler+0x406>
 80227ce:	2003      	movs	r0, #3
 80227d0:	e000      	b.n	80227d4 <http_ev_handler+0x408>
 80227d2:	2000      	movs	r0, #0
 80227d4:	69fc      	ldr	r4, [r7, #28]
 80227d6:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 80227d8:	3409      	adds	r4, #9
 80227da:	69fd      	ldr	r5, [r7, #28]
 80227dc:	6d2d      	ldr	r5, [r5, #80]	@ 0x50
 80227de:	9505      	str	r5, [sp, #20]
 80227e0:	9404      	str	r4, [sp, #16]
 80227e2:	9003      	str	r0, [sp, #12]
 80227e4:	9102      	str	r1, [sp, #8]
 80227e6:	9201      	str	r2, [sp, #4]
 80227e8:	9300      	str	r3, [sp, #0]
 80227ea:	683b      	ldr	r3, [r7, #0]
 80227ec:	687a      	ldr	r2, [r7, #4]
 80227ee:	4631      	mov	r1, r6
 80227f0:	4810      	ldr	r0, [pc, #64]	@ (8022834 <http_ev_handler+0x468>)
 80227f2:	f7e9 fdf3 	bl	800c3dc <mg_log>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9], c->send.len));
    if (c->data[0] == 'Z') {
 80227f6:	69fb      	ldr	r3, [r7, #28]
 80227f8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80227fc:	2b5a      	cmp	r3, #90	@ 0x5a
 80227fe:	d10a      	bne.n	8022816 <http_ev_handler+0x44a>
      c->data[0] = 0;
 8022800:	69fb      	ldr	r3, [r7, #28]
 8022802:	2200      	movs	r2, #0
 8022804:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      c->is_resp = 0;
 8022808:	69fa      	ldr	r2, [r7, #28]
 802280a:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 802280e:	f023 0301 	bic.w	r3, r3, #1
 8022812:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    }
  }
}
 8022816:	bf00      	nop
 8022818:	37bc      	adds	r7, #188	@ 0xbc
 802281a:	46bd      	mov	sp, r7
 802281c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802281e:	bf00      	nop
 8022820:	08027494 	.word	0x08027494
 8022824:	08027670 	.word	0x08027670
 8022828:	24000258 	.word	0x24000258
 802282c:	08035384 	.word	0x08035384
 8022830:	080270e8 	.word	0x080270e8
 8022834:	08027754 	.word	0x08027754

08022838 <send_websocket_data>:
    s_ws_handlers[s_ws_handlers_count].fn = fn;
    s_ws_handlers_count++;
  }
};

static void send_websocket_data(void) {
 8022838:	b5b0      	push	{r4, r5, r7, lr}
 802283a:	b088      	sub	sp, #32
 802283c:	af02      	add	r7, sp, #8
  struct mg_connection *c;
  uint64_t now = mg_millis();
 802283e:	f7dd ff93 	bl	8000768 <mg_millis>
 8022842:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for (c = g_mgr.conns; c != NULL; c = c->next) {
 8022846:	4b2a      	ldr	r3, [pc, #168]	@ (80228f0 <send_websocket_data+0xb8>)
 8022848:	681b      	ldr	r3, [r3, #0]
 802284a:	617b      	str	r3, [r7, #20]
 802284c:	e048      	b.n	80228e0 <send_websocket_data+0xa8>
    uint64_t *timers = (uint64_t *) &c->data[0];
 802284e:	697b      	ldr	r3, [r7, #20]
 8022850:	3388      	adds	r3, #136	@ 0x88
 8022852:	607b      	str	r3, [r7, #4]
    size_t i;

    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 8022854:	697b      	ldr	r3, [r7, #20]
 8022856:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802285a:	f003 0302 	and.w	r3, r3, #2
 802285e:	b2db      	uxtb	r3, r3
 8022860:	2b00      	cmp	r3, #0
 8022862:	d037      	beq.n	80228d4 <send_websocket_data+0x9c>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 8022864:	697b      	ldr	r3, [r7, #20]
 8022866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022868:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802286c:	d834      	bhi.n	80228d8 <send_websocket_data+0xa0>

    for (i = 0; i < s_ws_handlers_count; i++) {
 802286e:	2300      	movs	r3, #0
 8022870:	613b      	str	r3, [r7, #16]
 8022872:	e029      	b.n	80228c8 <send_websocket_data+0x90>
      if (c->pfn_data == NULL ||
 8022874:	697b      	ldr	r3, [r7, #20]
 8022876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802287a:	2b00      	cmp	r3, #0
 802287c:	d016      	beq.n	80228ac <send_websocket_data+0x74>
          mg_timer_expired(&timers[i], s_ws_handlers[i].timeout_ms, now)) {
 802287e:	693b      	ldr	r3, [r7, #16]
 8022880:	00db      	lsls	r3, r3, #3
 8022882:	687a      	ldr	r2, [r7, #4]
 8022884:	18d1      	adds	r1, r2, r3
 8022886:	4a1b      	ldr	r2, [pc, #108]	@ (80228f4 <send_websocket_data+0xbc>)
 8022888:	693b      	ldr	r3, [r7, #16]
 802288a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802288e:	2200      	movs	r2, #0
 8022890:	461c      	mov	r4, r3
 8022892:	4615      	mov	r5, r2
 8022894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022898:	e9cd 2300 	strd	r2, r3, [sp]
 802289c:	4622      	mov	r2, r4
 802289e:	462b      	mov	r3, r5
 80228a0:	4608      	mov	r0, r1
 80228a2:	f7f2 f86f 	bl	8014984 <mg_timer_expired>
 80228a6:	4603      	mov	r3, r0
      if (c->pfn_data == NULL ||
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	d00a      	beq.n	80228c2 <send_websocket_data+0x8a>
        s_ws_handlers[i].fn(c);
 80228ac:	4a11      	ldr	r2, [pc, #68]	@ (80228f4 <send_websocket_data+0xbc>)
 80228ae:	693b      	ldr	r3, [r7, #16]
 80228b0:	00db      	lsls	r3, r3, #3
 80228b2:	4413      	add	r3, r2
 80228b4:	685b      	ldr	r3, [r3, #4]
 80228b6:	6978      	ldr	r0, [r7, #20]
 80228b8:	4798      	blx	r3
        c->pfn_data = (void *) 1;
 80228ba:	697b      	ldr	r3, [r7, #20]
 80228bc:	2201      	movs	r2, #1
 80228be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    for (i = 0; i < s_ws_handlers_count; i++) {
 80228c2:	693b      	ldr	r3, [r7, #16]
 80228c4:	3301      	adds	r3, #1
 80228c6:	613b      	str	r3, [r7, #16]
 80228c8:	4b0b      	ldr	r3, [pc, #44]	@ (80228f8 <send_websocket_data+0xc0>)
 80228ca:	681b      	ldr	r3, [r3, #0]
 80228cc:	693a      	ldr	r2, [r7, #16]
 80228ce:	429a      	cmp	r2, r3
 80228d0:	d3d0      	bcc.n	8022874 <send_websocket_data+0x3c>
 80228d2:	e002      	b.n	80228da <send_websocket_data+0xa2>
    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 80228d4:	bf00      	nop
 80228d6:	e000      	b.n	80228da <send_websocket_data+0xa2>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 80228d8:	bf00      	nop
  for (c = g_mgr.conns; c != NULL; c = c->next) {
 80228da:	697b      	ldr	r3, [r7, #20]
 80228dc:	681b      	ldr	r3, [r3, #0]
 80228de:	617b      	str	r3, [r7, #20]
 80228e0:	697b      	ldr	r3, [r7, #20]
 80228e2:	2b00      	cmp	r3, #0
 80228e4:	d1b3      	bne.n	802284e <send_websocket_data+0x16>
      }
    }
  }
}
 80228e6:	bf00      	nop
 80228e8:	bf00      	nop
 80228ea:	3718      	adds	r7, #24
 80228ec:	46bd      	mov	sp, r7
 80228ee:	bdb0      	pop	{r4, r5, r7, pc}
 80228f0:	240042f0 	.word	0x240042f0
 80228f4:	2400433c 	.word	0x2400433c
 80228f8:	2400435c 	.word	0x2400435c

080228fc <handle_modbus_pdu>:
#if WIZARD_ENABLE_MODBUS
static struct mongoose_modbus_handlers s_modbus_handlers = {
    glue_modbus_read_reg, glue_modbus_write_reg};

static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 80228fc:	b5b0      	push	{r4, r5, r7, lr}
 80228fe:	b0d0      	sub	sp, #320	@ 0x140
 8022900:	af00      	add	r7, sp, #0
 8022902:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022906:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 802290a:	6018      	str	r0, [r3, #0]
 802290c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022910:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022914:	6019      	str	r1, [r3, #0]
 8022916:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802291a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802291e:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
 8022920:	4bb8      	ldr	r3, [pc, #736]	@ (8022c04 <handle_modbus_pdu+0x308>)
 8022922:	681b      	ldr	r3, [r3, #0]
 8022924:	2b02      	cmp	r3, #2
 8022926:	dd13      	ble.n	8022950 <handle_modbus_pdu+0x54>
 8022928:	4bb7      	ldr	r3, [pc, #732]	@ (8022c08 <handle_modbus_pdu+0x30c>)
 802292a:	f240 3225 	movw	r2, #805	@ 0x325
 802292e:	49b7      	ldr	r1, [pc, #732]	@ (8022c0c <handle_modbus_pdu+0x310>)
 8022930:	2003      	movs	r0, #3
 8022932:	f7e9 fd03 	bl	800c33c <mg_log_prefix>
 8022936:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802293a:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 802293e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022942:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022946:	6812      	ldr	r2, [r2, #0]
 8022948:	6819      	ldr	r1, [r3, #0]
 802294a:	48b1      	ldr	r0, [pc, #708]	@ (8022c10 <handle_modbus_pdu+0x314>)
 802294c:	f7e9 fd46 	bl	800c3dc <mg_log>
  mg_hexdump(buf, len);
 8022950:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022954:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8022958:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802295c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022960:	6811      	ldr	r1, [r2, #0]
 8022962:	6818      	ldr	r0, [r3, #0]
 8022964:	f7e9 fd70 	bl	800c448 <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 8022968:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802296c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8022970:	681b      	ldr	r3, [r3, #0]
 8022972:	2b0b      	cmp	r3, #11
 8022974:	d80f      	bhi.n	8022996 <handle_modbus_pdu+0x9a>
    MG_ERROR(("PDU too small"));
 8022976:	4ba3      	ldr	r3, [pc, #652]	@ (8022c04 <handle_modbus_pdu+0x308>)
 8022978:	681b      	ldr	r3, [r3, #0]
 802297a:	2b00      	cmp	r3, #0
 802297c:	f340 81f8 	ble.w	8022d70 <handle_modbus_pdu+0x474>
 8022980:	4ba1      	ldr	r3, [pc, #644]	@ (8022c08 <handle_modbus_pdu+0x30c>)
 8022982:	f240 3229 	movw	r2, #809	@ 0x329
 8022986:	49a1      	ldr	r1, [pc, #644]	@ (8022c0c <handle_modbus_pdu+0x310>)
 8022988:	2001      	movs	r0, #1
 802298a:	f7e9 fcd7 	bl	800c33c <mg_log_prefix>
 802298e:	48a1      	ldr	r0, [pc, #644]	@ (8022c14 <handle_modbus_pdu+0x318>)
 8022990:	f7e9 fd24 	bl	800c3dc <mg_log>
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
    mg_send(c, response, response_len);
  }
}
 8022994:	e1ec      	b.n	8022d70 <handle_modbus_pdu+0x474>
    uint8_t func = buf[7];  // Function
 8022996:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802299a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 802299e:	681b      	ldr	r3, [r3, #0]
 80229a0:	79db      	ldrb	r3, [r3, #7]
 80229a2:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 80229a6:	2300      	movs	r3, #0
 80229a8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 80229ac:	2300      	movs	r3, #0
 80229ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(response, buf, 8);
 80229b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80229b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80229ba:	f107 0014 	add.w	r0, r7, #20
 80229be:	2208      	movs	r2, #8
 80229c0:	6819      	ldr	r1, [r3, #0]
 80229c2:	f000 fede 	bl	8023782 <memcpy>
    if (func == 6) {  // write single holding register
 80229c6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 80229ca:	2b06      	cmp	r3, #6
 80229cc:	d155      	bne.n	8022a7a <handle_modbus_pdu+0x17e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 80229ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80229d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80229d6:	681b      	ldr	r3, [r3, #0]
 80229d8:	3308      	adds	r3, #8
 80229da:	881b      	ldrh	r3, [r3, #0]
 80229dc:	4618      	mov	r0, r3
 80229de:	f7fc fd93 	bl	801f508 <mg_ntohs>
 80229e2:	4603      	mov	r3, r0
 80229e4:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 80229e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80229ec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80229f0:	681b      	ldr	r3, [r3, #0]
 80229f2:	330a      	adds	r3, #10
 80229f4:	881b      	ldrh	r3, [r3, #0]
 80229f6:	4618      	mov	r0, r3
 80229f8:	f7fc fd86 	bl	801f508 <mg_ntohs>
 80229fc:	4603      	mov	r3, r0
 80229fe:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = s_modbus_handlers.write_reg_fn(start, value);
 8022a02:	4b85      	ldr	r3, [pc, #532]	@ (8022c18 <handle_modbus_pdu+0x31c>)
 8022a04:	685b      	ldr	r3, [r3, #4]
 8022a06:	f8b7 111c 	ldrh.w	r1, [r7, #284]	@ 0x11c
 8022a0a:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8022a0e:	4610      	mov	r0, r2
 8022a10:	4798      	blx	r3
 8022a12:	4603      	mov	r3, r0
 8022a14:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 8022a18:	f107 0314 	add.w	r3, r7, #20
 8022a1c:	f103 0408 	add.w	r4, r3, #8
 8022a20:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8022a24:	4618      	mov	r0, r3
 8022a26:	f7fc fd6f 	bl	801f508 <mg_ntohs>
 8022a2a:	4603      	mov	r3, r0
 8022a2c:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 8022a2e:	f107 0314 	add.w	r3, r7, #20
 8022a32:	f103 040a 	add.w	r4, r3, #10
 8022a36:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8022a3a:	4618      	mov	r0, r3
 8022a3c:	f7fc fd64 	bl	801f508 <mg_ntohs>
 8022a40:	4603      	mov	r3, r0
 8022a42:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 8022a44:	230c      	movs	r3, #12
 8022a46:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8022a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8022c04 <handle_modbus_pdu+0x308>)
 8022a4c:	681b      	ldr	r3, [r3, #0]
 8022a4e:	2b02      	cmp	r3, #2
 8022a50:	f340 8142 	ble.w	8022cd8 <handle_modbus_pdu+0x3dc>
 8022a54:	4b6c      	ldr	r3, [pc, #432]	@ (8022c08 <handle_modbus_pdu+0x30c>)
 8022a56:	f240 323b 	movw	r2, #827	@ 0x33b
 8022a5a:	496c      	ldr	r1, [pc, #432]	@ (8022c0c <handle_modbus_pdu+0x310>)
 8022a5c:	2003      	movs	r0, #3
 8022a5e:	f7e9 fc6d 	bl	800c33c <mg_log_prefix>
 8022a62:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022a66:	2b00      	cmp	r3, #0
 8022a68:	d001      	beq.n	8022a6e <handle_modbus_pdu+0x172>
 8022a6a:	4b6c      	ldr	r3, [pc, #432]	@ (8022c1c <handle_modbus_pdu+0x320>)
 8022a6c:	e000      	b.n	8022a70 <handle_modbus_pdu+0x174>
 8022a6e:	4b6c      	ldr	r3, [pc, #432]	@ (8022c20 <handle_modbus_pdu+0x324>)
 8022a70:	4619      	mov	r1, r3
 8022a72:	486c      	ldr	r0, [pc, #432]	@ (8022c24 <handle_modbus_pdu+0x328>)
 8022a74:	f7e9 fcb2 	bl	800c3dc <mg_log>
 8022a78:	e12e      	b.n	8022cd8 <handle_modbus_pdu+0x3dc>
    } else if (func == 16) {  // Write multiple
 8022a7a:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8022a7e:	2b10      	cmp	r3, #16
 8022a80:	f040 808c 	bne.w	8022b9c <handle_modbus_pdu+0x2a0>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8022a84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022a88:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022a8c:	681b      	ldr	r3, [r3, #0]
 8022a8e:	3308      	adds	r3, #8
 8022a90:	881b      	ldrh	r3, [r3, #0]
 8022a92:	4618      	mov	r0, r3
 8022a94:	f7fc fd38 	bl	801f508 <mg_ntohs>
 8022a98:	4603      	mov	r3, r0
 8022a9a:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8022a9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022aa2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022aa6:	681b      	ldr	r3, [r3, #0]
 8022aa8:	330a      	adds	r3, #10
 8022aaa:	881b      	ldrh	r3, [r3, #0]
 8022aac:	4618      	mov	r0, r3
 8022aae:	f7fc fd2b 	bl	801f508 <mg_ntohs>
 8022ab2:	4603      	mov	r3, r0
 8022ab4:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 8022ab8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022abc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022ac0:	681b      	ldr	r3, [r3, #0]
 8022ac2:	330d      	adds	r3, #13
 8022ac4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 8022ac8:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8022acc:	3305      	adds	r3, #5
 8022ace:	005b      	lsls	r3, r3, #1
 8022ad0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8022ad4:	f080 8100 	bcs.w	8022cd8 <handle_modbus_pdu+0x3dc>
        for (i = 0; i < num; i++) {
 8022ad8:	2300      	movs	r3, #0
 8022ada:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8022ade:	e024      	b.n	8022b2a <handle_modbus_pdu+0x22e>
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 8022ae0:	4b4d      	ldr	r3, [pc, #308]	@ (8022c18 <handle_modbus_pdu+0x31c>)
 8022ae2:	685c      	ldr	r4, [r3, #4]
 8022ae4:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8022ae8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8022aec:	4413      	add	r3, r2
 8022aee:	b29d      	uxth	r5, r3
                                                   mg_htons(data[i]));
 8022af0:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8022af4:	005b      	lsls	r3, r3, #1
 8022af6:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8022afa:	4413      	add	r3, r2
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 8022afc:	881b      	ldrh	r3, [r3, #0]
 8022afe:	4618      	mov	r0, r3
 8022b00:	f7fc fd02 	bl	801f508 <mg_ntohs>
 8022b04:	4603      	mov	r3, r0
 8022b06:	4619      	mov	r1, r3
 8022b08:	4628      	mov	r0, r5
 8022b0a:	47a0      	blx	r4
 8022b0c:	4603      	mov	r3, r0
 8022b0e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 8022b12:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022b16:	f083 0301 	eor.w	r3, r3, #1
 8022b1a:	b2db      	uxtb	r3, r3
 8022b1c:	2b00      	cmp	r3, #0
 8022b1e:	d10b      	bne.n	8022b38 <handle_modbus_pdu+0x23c>
        for (i = 0; i < num; i++) {
 8022b20:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8022b24:	3301      	adds	r3, #1
 8022b26:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8022b2a:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8022b2e:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8022b32:	429a      	cmp	r2, r3
 8022b34:	d3d4      	bcc.n	8022ae0 <handle_modbus_pdu+0x1e4>
 8022b36:	e000      	b.n	8022b3a <handle_modbus_pdu+0x23e>
          if (success == false) break;
 8022b38:	bf00      	nop
        *(uint16_t *) &response[8] = mg_htons(start);
 8022b3a:	f107 0314 	add.w	r3, r7, #20
 8022b3e:	f103 0408 	add.w	r4, r3, #8
 8022b42:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8022b46:	4618      	mov	r0, r3
 8022b48:	f7fc fcde 	bl	801f508 <mg_ntohs>
 8022b4c:	4603      	mov	r3, r0
 8022b4e:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 8022b50:	f107 0314 	add.w	r3, r7, #20
 8022b54:	f103 040a 	add.w	r4, r3, #10
 8022b58:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8022b5c:	4618      	mov	r0, r3
 8022b5e:	f7fc fcd3 	bl	801f508 <mg_ntohs>
 8022b62:	4603      	mov	r3, r0
 8022b64:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 8022b66:	230c      	movs	r3, #12
 8022b68:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8022b6c:	4b25      	ldr	r3, [pc, #148]	@ (8022c04 <handle_modbus_pdu+0x308>)
 8022b6e:	681b      	ldr	r3, [r3, #0]
 8022b70:	2b02      	cmp	r3, #2
 8022b72:	f340 80b1 	ble.w	8022cd8 <handle_modbus_pdu+0x3dc>
 8022b76:	4b24      	ldr	r3, [pc, #144]	@ (8022c08 <handle_modbus_pdu+0x30c>)
 8022b78:	f240 3249 	movw	r2, #841	@ 0x349
 8022b7c:	4923      	ldr	r1, [pc, #140]	@ (8022c0c <handle_modbus_pdu+0x310>)
 8022b7e:	2003      	movs	r0, #3
 8022b80:	f7e9 fbdc 	bl	800c33c <mg_log_prefix>
 8022b84:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022b88:	2b00      	cmp	r3, #0
 8022b8a:	d001      	beq.n	8022b90 <handle_modbus_pdu+0x294>
 8022b8c:	4b23      	ldr	r3, [pc, #140]	@ (8022c1c <handle_modbus_pdu+0x320>)
 8022b8e:	e000      	b.n	8022b92 <handle_modbus_pdu+0x296>
 8022b90:	4b23      	ldr	r3, [pc, #140]	@ (8022c20 <handle_modbus_pdu+0x324>)
 8022b92:	4619      	mov	r1, r3
 8022b94:	4823      	ldr	r0, [pc, #140]	@ (8022c24 <handle_modbus_pdu+0x328>)
 8022b96:	f7e9 fc21 	bl	800c3dc <mg_log>
 8022b9a:	e09d      	b.n	8022cd8 <handle_modbus_pdu+0x3dc>
    } else if (func == 3 || func == 4) {  // Read multiple
 8022b9c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8022ba0:	2b03      	cmp	r3, #3
 8022ba2:	d004      	beq.n	8022bae <handle_modbus_pdu+0x2b2>
 8022ba4:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8022ba8:	2b04      	cmp	r3, #4
 8022baa:	f040 8095 	bne.w	8022cd8 <handle_modbus_pdu+0x3dc>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8022bae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022bb2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022bb6:	681b      	ldr	r3, [r3, #0]
 8022bb8:	3308      	adds	r3, #8
 8022bba:	881b      	ldrh	r3, [r3, #0]
 8022bbc:	4618      	mov	r0, r3
 8022bbe:	f7fc fca3 	bl	801f508 <mg_ntohs>
 8022bc2:	4603      	mov	r3, r0
 8022bc4:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8022bc8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022bcc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	330a      	adds	r3, #10
 8022bd4:	881b      	ldrh	r3, [r3, #0]
 8022bd6:	4618      	mov	r0, r3
 8022bd8:	f7fc fc96 	bl	801f508 <mg_ntohs>
 8022bdc:	4603      	mov	r3, r0
 8022bde:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 8022be2:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8022be6:	005b      	lsls	r3, r3, #1
 8022be8:	3309      	adds	r3, #9
 8022bea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8022bee:	d273      	bcs.n	8022cd8 <handle_modbus_pdu+0x3dc>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 8022bf0:	f107 0314 	add.w	r3, r7, #20
 8022bf4:	3309      	adds	r3, #9
 8022bf6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 8022bfa:	2300      	movs	r3, #0
 8022bfc:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8022c00:	e03a      	b.n	8022c78 <handle_modbus_pdu+0x37c>
 8022c02:	bf00      	nop
 8022c04:	24000258 	.word	0x24000258
 8022c08:	08035394 	.word	0x08035394
 8022c0c:	080270e8 	.word	0x080270e8
 8022c10:	08027798 	.word	0x08027798
 8022c14:	080277bc 	.word	0x080277bc
 8022c18:	24000820 	.word	0x24000820
 8022c1c:	080277cc 	.word	0x080277cc
 8022c20:	080277d4 	.word	0x080277d4
 8022c24:	080277dc 	.word	0x080277dc
          success = s_modbus_handlers.read_reg_fn((uint16_t) (start + i), &val);
 8022c28:	4b54      	ldr	r3, [pc, #336]	@ (8022d7c <handle_modbus_pdu+0x480>)
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	f8b7 1130 	ldrh.w	r1, [r7, #304]	@ 0x130
 8022c30:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8022c34:	440a      	add	r2, r1
 8022c36:	b292      	uxth	r2, r2
 8022c38:	f507 718d 	add.w	r1, r7, #282	@ 0x11a
 8022c3c:	4610      	mov	r0, r2
 8022c3e:	4798      	blx	r3
 8022c40:	4603      	mov	r3, r0
 8022c42:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 8022c46:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022c4a:	f083 0301 	eor.w	r3, r3, #1
 8022c4e:	b2db      	uxtb	r3, r3
 8022c50:	2b00      	cmp	r3, #0
 8022c52:	d118      	bne.n	8022c86 <handle_modbus_pdu+0x38a>
          data[i] = mg_htons(val);
 8022c54:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 8022c58:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8022c5c:	005b      	lsls	r3, r3, #1
 8022c5e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8022c62:	18d4      	adds	r4, r2, r3
 8022c64:	4608      	mov	r0, r1
 8022c66:	f7fc fc4f 	bl	801f508 <mg_ntohs>
 8022c6a:	4603      	mov	r3, r0
 8022c6c:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 8022c6e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8022c72:	3301      	adds	r3, #1
 8022c74:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8022c78:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8022c7c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8022c80:	429a      	cmp	r2, r3
 8022c82:	d3d1      	bcc.n	8022c28 <handle_modbus_pdu+0x32c>
 8022c84:	e000      	b.n	8022c88 <handle_modbus_pdu+0x38c>
          if (success == false) break;
 8022c86:	bf00      	nop
        response[8] = (uint8_t) (num * 2);
 8022c88:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8022c8c:	b2db      	uxtb	r3, r3
 8022c8e:	005b      	lsls	r3, r3, #1
 8022c90:	b2da      	uxtb	r2, r3
 8022c92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022c96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022c9a:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 8022c9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022ca0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022ca4:	7a1b      	ldrb	r3, [r3, #8]
 8022ca6:	3309      	adds	r3, #9
 8022ca8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8022cac:	4b34      	ldr	r3, [pc, #208]	@ (8022d80 <handle_modbus_pdu+0x484>)
 8022cae:	681b      	ldr	r3, [r3, #0]
 8022cb0:	2b02      	cmp	r3, #2
 8022cb2:	dd11      	ble.n	8022cd8 <handle_modbus_pdu+0x3dc>
 8022cb4:	4b33      	ldr	r3, [pc, #204]	@ (8022d84 <handle_modbus_pdu+0x488>)
 8022cb6:	f240 3257 	movw	r2, #855	@ 0x357
 8022cba:	4933      	ldr	r1, [pc, #204]	@ (8022d88 <handle_modbus_pdu+0x48c>)
 8022cbc:	2003      	movs	r0, #3
 8022cbe:	f7e9 fb3d 	bl	800c33c <mg_log_prefix>
 8022cc2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022cc6:	2b00      	cmp	r3, #0
 8022cc8:	d001      	beq.n	8022cce <handle_modbus_pdu+0x3d2>
 8022cca:	4b30      	ldr	r3, [pc, #192]	@ (8022d8c <handle_modbus_pdu+0x490>)
 8022ccc:	e000      	b.n	8022cd0 <handle_modbus_pdu+0x3d4>
 8022cce:	4b30      	ldr	r3, [pc, #192]	@ (8022d90 <handle_modbus_pdu+0x494>)
 8022cd0:	4619      	mov	r1, r3
 8022cd2:	4830      	ldr	r0, [pc, #192]	@ (8022d94 <handle_modbus_pdu+0x498>)
 8022cd4:	f7e9 fb82 	bl	800c3dc <mg_log>
    if (success == false) {
 8022cd8:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022cdc:	f083 0301 	eor.w	r3, r3, #1
 8022ce0:	b2db      	uxtb	r3, r3
 8022ce2:	2b00      	cmp	r3, #0
 8022ce4:	d015      	beq.n	8022d12 <handle_modbus_pdu+0x416>
      response_len = 9;
 8022ce6:	2309      	movs	r3, #9
 8022ce8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 8022cec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022cf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022cf4:	79db      	ldrb	r3, [r3, #7]
 8022cf6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8022cfa:	b2da      	uxtb	r2, r3
 8022cfc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022d00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022d04:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 8022d06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022d0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022d0e:	2204      	movs	r2, #4
 8022d10:	721a      	strb	r2, [r3, #8]
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 8022d12:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8022d16:	b29b      	uxth	r3, r3
 8022d18:	3b06      	subs	r3, #6
 8022d1a:	b29a      	uxth	r2, r3
 8022d1c:	f107 0314 	add.w	r3, r7, #20
 8022d20:	1d1c      	adds	r4, r3, #4
 8022d22:	4610      	mov	r0, r2
 8022d24:	f7fc fbf0 	bl	801f508 <mg_ntohs>
 8022d28:	4603      	mov	r3, r0
 8022d2a:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
 8022d2c:	4b14      	ldr	r3, [pc, #80]	@ (8022d80 <handle_modbus_pdu+0x484>)
 8022d2e:	681b      	ldr	r3, [r3, #0]
 8022d30:	2b02      	cmp	r3, #2
 8022d32:	dd0b      	ble.n	8022d4c <handle_modbus_pdu+0x450>
 8022d34:	4b13      	ldr	r3, [pc, #76]	@ (8022d84 <handle_modbus_pdu+0x488>)
 8022d36:	f44f 7258 	mov.w	r2, #864	@ 0x360
 8022d3a:	4913      	ldr	r1, [pc, #76]	@ (8022d88 <handle_modbus_pdu+0x48c>)
 8022d3c:	2003      	movs	r0, #3
 8022d3e:	f7e9 fafd 	bl	800c33c <mg_log_prefix>
 8022d42:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8022d46:	4814      	ldr	r0, [pc, #80]	@ (8022d98 <handle_modbus_pdu+0x49c>)
 8022d48:	f7e9 fb48 	bl	800c3dc <mg_log>
    mg_hexdump(response, response_len);
 8022d4c:	f107 0314 	add.w	r3, r7, #20
 8022d50:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8022d54:	4618      	mov	r0, r3
 8022d56:	f7e9 fb77 	bl	800c448 <mg_hexdump>
    mg_send(c, response, response_len);
 8022d5a:	f107 0114 	add.w	r1, r7, #20
 8022d5e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022d62:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8022d66:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8022d6a:	6818      	ldr	r0, [r3, #0]
 8022d6c:	f7ed fbc8 	bl	8010500 <mg_send>
}
 8022d70:	bf00      	nop
 8022d72:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8022d76:	46bd      	mov	sp, r7
 8022d78:	bdb0      	pop	{r4, r5, r7, pc}
 8022d7a:	bf00      	nop
 8022d7c:	24000820 	.word	0x24000820
 8022d80:	24000258 	.word	0x24000258
 8022d84:	08035394 	.word	0x08035394
 8022d88:	080270e8 	.word	0x080270e8
 8022d8c:	080277cc 	.word	0x080277cc
 8022d90:	080277d4 	.word	0x080277d4
 8022d94:	080277dc 	.word	0x080277dc
 8022d98:	080277f0 	.word	0x080277f0

08022d9c <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8022d9c:	b580      	push	{r7, lr}
 8022d9e:	b086      	sub	sp, #24
 8022da0:	af00      	add	r7, sp, #0
 8022da2:	60f8      	str	r0, [r7, #12]
 8022da4:	60b9      	str	r1, [r7, #8]
 8022da6:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 8022da8:	68bb      	ldr	r3, [r7, #8]
 8022daa:	2b07      	cmp	r3, #7
 8022dac:	d13a      	bne.n	8022e24 <modbus_ev_handler+0x88>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 8022dae:	68fb      	ldr	r3, [r7, #12]
 8022db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8022db2:	2b06      	cmp	r3, #6
 8022db4:	d933      	bls.n	8022e1e <modbus_ev_handler+0x82>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 8022db6:	68fb      	ldr	r3, [r7, #12]
 8022db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8022dba:	3304      	adds	r3, #4
 8022dbc:	881b      	ldrh	r3, [r3, #0]
 8022dbe:	4618      	mov	r0, r3
 8022dc0:	f7fc fba2 	bl	801f508 <mg_ntohs>
 8022dc4:	4603      	mov	r3, r0
 8022dc6:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
 8022dc8:	4b18      	ldr	r3, [pc, #96]	@ (8022e2c <modbus_ev_handler+0x90>)
 8022dca:	681b      	ldr	r3, [r3, #0]
 8022dcc:	2b01      	cmp	r3, #1
 8022dce:	dd0e      	ble.n	8022dee <modbus_ev_handler+0x52>
 8022dd0:	4b17      	ldr	r3, [pc, #92]	@ (8022e30 <modbus_ev_handler+0x94>)
 8022dd2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8022dd6:	4917      	ldr	r1, [pc, #92]	@ (8022e34 <modbus_ev_handler+0x98>)
 8022dd8:	2002      	movs	r0, #2
 8022dda:	f7e9 faaf 	bl	800c33c <mg_log_prefix>
 8022dde:	68fb      	ldr	r3, [r7, #12]
 8022de0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8022de2:	8afb      	ldrh	r3, [r7, #22]
 8022de4:	3306      	adds	r3, #6
 8022de6:	461a      	mov	r2, r3
 8022de8:	4813      	ldr	r0, [pc, #76]	@ (8022e38 <modbus_ev_handler+0x9c>)
 8022dea:	f7e9 faf7 	bl	800c3dc <mg_log>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 8022dee:	68fb      	ldr	r3, [r7, #12]
 8022df0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8022df2:	8afb      	ldrh	r3, [r7, #22]
 8022df4:	3306      	adds	r3, #6
 8022df6:	429a      	cmp	r2, r3
 8022df8:	d313      	bcc.n	8022e22 <modbus_ev_handler+0x86>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 8022dfa:	68fb      	ldr	r3, [r7, #12]
 8022dfc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8022dfe:	8afb      	ldrh	r3, [r7, #22]
 8022e00:	3306      	adds	r3, #6
 8022e02:	461a      	mov	r2, r3
 8022e04:	68f8      	ldr	r0, [r7, #12]
 8022e06:	f7ff fd79 	bl	80228fc <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 8022e0a:	68fb      	ldr	r3, [r7, #12]
 8022e0c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8022e10:	8afb      	ldrh	r3, [r7, #22]
 8022e12:	3306      	adds	r3, #6
 8022e14:	461a      	mov	r2, r3
 8022e16:	2100      	movs	r1, #0
 8022e18:	f7e8 fbc4 	bl	800b5a4 <mg_iobuf_del>
 8022e1c:	e002      	b.n	8022e24 <modbus_ev_handler+0x88>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 8022e1e:	bf00      	nop
 8022e20:	e000      	b.n	8022e24 <modbus_ev_handler+0x88>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 8022e22:	bf00      	nop
  }
  (void) ev_data;
}
 8022e24:	3718      	adds	r7, #24
 8022e26:	46bd      	mov	sp, r7
 8022e28:	bd80      	pop	{r7, pc}
 8022e2a:	bf00      	nop
 8022e2c:	24000258 	.word	0x24000258
 8022e30:	080353a8 	.word	0x080353a8
 8022e34:	080270e8 	.word	0x080270e8
 8022e38:	0802780c 	.word	0x0802780c

08022e3c <mongoose_init>:
  }
  (void) ev_data;
}
#endif  // WIZARD_CAPTIVE_PORTAL

void mongoose_init(void) {
 8022e3c:	b580      	push	{r7, lr}
 8022e3e:	b09a      	sub	sp, #104	@ 0x68
 8022e40:	af00      	add	r7, sp, #0
  mg_mgr_init(&g_mgr);      // Initialise event manager
 8022e42:	4824      	ldr	r0, [pc, #144]	@ (8022ed4 <mongoose_init+0x98>)
 8022e44:	f7e9 ffc4 	bl	800cdd0 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 8022e48:	4b23      	ldr	r3, [pc, #140]	@ (8022ed8 <mongoose_init+0x9c>)
 8022e4a:	2203      	movs	r2, #3
 8022e4c:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 8022e4e:	4b22      	ldr	r3, [pc, #136]	@ (8022ed8 <mongoose_init+0x9c>)
 8022e50:	681b      	ldr	r3, [r3, #0]
 8022e52:	2b01      	cmp	r3, #1
 8022e54:	dd09      	ble.n	8022e6a <mongoose_init+0x2e>
 8022e56:	4b21      	ldr	r3, [pc, #132]	@ (8022edc <mongoose_init+0xa0>)
 8022e58:	f240 32ad 	movw	r2, #941	@ 0x3ad
 8022e5c:	4920      	ldr	r1, [pc, #128]	@ (8022ee0 <mongoose_init+0xa4>)
 8022e5e:	2002      	movs	r0, #2
 8022e60:	f7e9 fa6c 	bl	800c33c <mg_log_prefix>
 8022e64:	481f      	ldr	r0, [pc, #124]	@ (8022ee4 <mongoose_init+0xa8>)
 8022e66:	f7e9 fab9 	bl	800c3dc <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 8022e6a:	2300      	movs	r3, #0
 8022e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8022ee8 <mongoose_init+0xac>)
 8022e6e:	491f      	ldr	r1, [pc, #124]	@ (8022eec <mongoose_init+0xb0>)
 8022e70:	4818      	ldr	r0, [pc, #96]	@ (8022ed4 <mongoose_init+0x98>)
 8022e72:	f7e8 fa83 	bl	800b37c <mg_http_listen>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 8022e76:	1d38      	adds	r0, r7, #4
 8022e78:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8022e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8022ef0 <mongoose_init+0xb4>)
 8022e7e:	2164      	movs	r1, #100	@ 0x64
 8022e80:	f7ed fce2 	bl	8010848 <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
 8022e84:	4b14      	ldr	r3, [pc, #80]	@ (8022ed8 <mongoose_init+0x9c>)
 8022e86:	681b      	ldr	r3, [r3, #0]
 8022e88:	2b01      	cmp	r3, #1
 8022e8a:	dd0b      	ble.n	8022ea4 <mongoose_init+0x68>
 8022e8c:	4b13      	ldr	r3, [pc, #76]	@ (8022edc <mongoose_init+0xa0>)
 8022e8e:	f240 32c7 	movw	r2, #967	@ 0x3c7
 8022e92:	4913      	ldr	r1, [pc, #76]	@ (8022ee0 <mongoose_init+0xa4>)
 8022e94:	2002      	movs	r0, #2
 8022e96:	f7e9 fa51 	bl	800c33c <mg_log_prefix>
 8022e9a:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8022e9e:	4815      	ldr	r0, [pc, #84]	@ (8022ef4 <mongoose_init+0xb8>)
 8022ea0:	f7e9 fa9c 	bl	800c3dc <mg_log>
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 8022ea4:	1d39      	adds	r1, r7, #4
 8022ea6:	2300      	movs	r3, #0
 8022ea8:	4a13      	ldr	r2, [pc, #76]	@ (8022ef8 <mongoose_init+0xbc>)
 8022eaa:	480a      	ldr	r0, [pc, #40]	@ (8022ed4 <mongoose_init+0x98>)
 8022eac:	f7e9 fec4 	bl	800cc38 <mg_listen>
  MG_INFO(("Starting MDNS (domain name: %s.local)", WIZARD_MDNS_NAME));
  mg_mdns_listen(&g_mgr, WIZARD_MDNS_NAME);
#endif

  glue_lock_init();
  MG_INFO(("Mongoose init complete"));
 8022eb0:	4b09      	ldr	r3, [pc, #36]	@ (8022ed8 <mongoose_init+0x9c>)
 8022eb2:	681b      	ldr	r3, [r3, #0]
 8022eb4:	2b01      	cmp	r3, #1
 8022eb6:	dd09      	ble.n	8022ecc <mongoose_init+0x90>
 8022eb8:	4b08      	ldr	r3, [pc, #32]	@ (8022edc <mongoose_init+0xa0>)
 8022eba:	f240 32d7 	movw	r2, #983	@ 0x3d7
 8022ebe:	4908      	ldr	r1, [pc, #32]	@ (8022ee0 <mongoose_init+0xa4>)
 8022ec0:	2002      	movs	r0, #2
 8022ec2:	f7e9 fa3b 	bl	800c33c <mg_log_prefix>
 8022ec6:	480d      	ldr	r0, [pc, #52]	@ (8022efc <mongoose_init+0xc0>)
 8022ec8:	f7e9 fa88 	bl	800c3dc <mg_log>
}
 8022ecc:	bf00      	nop
 8022ece:	3768      	adds	r7, #104	@ 0x68
 8022ed0:	46bd      	mov	sp, r7
 8022ed2:	bd80      	pop	{r7, pc}
 8022ed4:	240042f0 	.word	0x240042f0
 8022ed8:	24000258 	.word	0x24000258
 8022edc:	080353bc 	.word	0x080353bc
 8022ee0:	080270e8 	.word	0x080270e8
 8022ee4:	08027824 	.word	0x08027824
 8022ee8:	080223cd 	.word	0x080223cd
 8022eec:	0802783c 	.word	0x0802783c
 8022ef0:	08027850 	.word	0x08027850
 8022ef4:	08027864 	.word	0x08027864
 8022ef8:	08022d9d 	.word	0x08022d9d
 8022efc:	0802788c 	.word	0x0802788c

08022f00 <mongoose_poll>:

void mongoose_poll(void) {
 8022f00:	b580      	push	{r7, lr}
 8022f02:	af00      	add	r7, sp, #0
  glue_lock();
  mg_mgr_poll(&g_mgr, 10);
 8022f04:	210a      	movs	r1, #10
 8022f06:	4803      	ldr	r0, [pc, #12]	@ (8022f14 <mongoose_poll+0x14>)
 8022f08:	f7ed f9c8 	bl	801029c <mg_mgr_poll>
#if WIZARD_ENABLE_WEBSOCKET
  send_websocket_data();
 8022f0c:	f7ff fc94 	bl	8022838 <send_websocket_data>
#endif
  glue_unlock();
}
 8022f10:	bf00      	nop
 8022f12:	bd80      	pop	{r7, pc}
 8022f14:	240042f0 	.word	0x240042f0

08022f18 <abort>:
 8022f18:	b508      	push	{r3, lr}
 8022f1a:	2006      	movs	r0, #6
 8022f1c:	f000 fb8a 	bl	8023634 <raise>
 8022f20:	2001      	movs	r0, #1
 8022f22:	f7de f84e 	bl	8000fc2 <_exit>
	...

08022f28 <__assert_func>:
 8022f28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022f2a:	4614      	mov	r4, r2
 8022f2c:	461a      	mov	r2, r3
 8022f2e:	4b09      	ldr	r3, [pc, #36]	@ (8022f54 <__assert_func+0x2c>)
 8022f30:	681b      	ldr	r3, [r3, #0]
 8022f32:	4605      	mov	r5, r0
 8022f34:	68d8      	ldr	r0, [r3, #12]
 8022f36:	b14c      	cbz	r4, 8022f4c <__assert_func+0x24>
 8022f38:	4b07      	ldr	r3, [pc, #28]	@ (8022f58 <__assert_func+0x30>)
 8022f3a:	9100      	str	r1, [sp, #0]
 8022f3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022f40:	4906      	ldr	r1, [pc, #24]	@ (8022f5c <__assert_func+0x34>)
 8022f42:	462b      	mov	r3, r5
 8022f44:	f000 fa42 	bl	80233cc <fiprintf>
 8022f48:	f7ff ffe6 	bl	8022f18 <abort>
 8022f4c:	4b04      	ldr	r3, [pc, #16]	@ (8022f60 <__assert_func+0x38>)
 8022f4e:	461c      	mov	r4, r3
 8022f50:	e7f3      	b.n	8022f3a <__assert_func+0x12>
 8022f52:	bf00      	nop
 8022f54:	24000834 	.word	0x24000834
 8022f58:	080353ca 	.word	0x080353ca
 8022f5c:	080353d7 	.word	0x080353d7
 8022f60:	08035405 	.word	0x08035405

08022f64 <atoi>:
 8022f64:	220a      	movs	r2, #10
 8022f66:	2100      	movs	r1, #0
 8022f68:	f000 b982 	b.w	8023270 <strtol>

08022f6c <calloc>:
 8022f6c:	4b02      	ldr	r3, [pc, #8]	@ (8022f78 <calloc+0xc>)
 8022f6e:	460a      	mov	r2, r1
 8022f70:	4601      	mov	r1, r0
 8022f72:	6818      	ldr	r0, [r3, #0]
 8022f74:	f000 b802 	b.w	8022f7c <_calloc_r>
 8022f78:	24000834 	.word	0x24000834

08022f7c <_calloc_r>:
 8022f7c:	b570      	push	{r4, r5, r6, lr}
 8022f7e:	fba1 5402 	umull	r5, r4, r1, r2
 8022f82:	b934      	cbnz	r4, 8022f92 <_calloc_r+0x16>
 8022f84:	4629      	mov	r1, r5
 8022f86:	f000 f83f 	bl	8023008 <_malloc_r>
 8022f8a:	4606      	mov	r6, r0
 8022f8c:	b928      	cbnz	r0, 8022f9a <_calloc_r+0x1e>
 8022f8e:	4630      	mov	r0, r6
 8022f90:	bd70      	pop	{r4, r5, r6, pc}
 8022f92:	220c      	movs	r2, #12
 8022f94:	6002      	str	r2, [r0, #0]
 8022f96:	2600      	movs	r6, #0
 8022f98:	e7f9      	b.n	8022f8e <_calloc_r+0x12>
 8022f9a:	462a      	mov	r2, r5
 8022f9c:	4621      	mov	r1, r4
 8022f9e:	f000 faba 	bl	8023516 <memset>
 8022fa2:	e7f4      	b.n	8022f8e <_calloc_r+0x12>

08022fa4 <malloc>:
 8022fa4:	4b02      	ldr	r3, [pc, #8]	@ (8022fb0 <malloc+0xc>)
 8022fa6:	4601      	mov	r1, r0
 8022fa8:	6818      	ldr	r0, [r3, #0]
 8022faa:	f000 b82d 	b.w	8023008 <_malloc_r>
 8022fae:	bf00      	nop
 8022fb0:	24000834 	.word	0x24000834

08022fb4 <free>:
 8022fb4:	4b02      	ldr	r3, [pc, #8]	@ (8022fc0 <free+0xc>)
 8022fb6:	4601      	mov	r1, r0
 8022fb8:	6818      	ldr	r0, [r3, #0]
 8022fba:	f000 bbf1 	b.w	80237a0 <_free_r>
 8022fbe:	bf00      	nop
 8022fc0:	24000834 	.word	0x24000834

08022fc4 <sbrk_aligned>:
 8022fc4:	b570      	push	{r4, r5, r6, lr}
 8022fc6:	4e0f      	ldr	r6, [pc, #60]	@ (8023004 <sbrk_aligned+0x40>)
 8022fc8:	460c      	mov	r4, r1
 8022fca:	6831      	ldr	r1, [r6, #0]
 8022fcc:	4605      	mov	r5, r0
 8022fce:	b911      	cbnz	r1, 8022fd6 <sbrk_aligned+0x12>
 8022fd0:	f000 fb80 	bl	80236d4 <_sbrk_r>
 8022fd4:	6030      	str	r0, [r6, #0]
 8022fd6:	4621      	mov	r1, r4
 8022fd8:	4628      	mov	r0, r5
 8022fda:	f000 fb7b 	bl	80236d4 <_sbrk_r>
 8022fde:	1c43      	adds	r3, r0, #1
 8022fe0:	d103      	bne.n	8022fea <sbrk_aligned+0x26>
 8022fe2:	f04f 34ff 	mov.w	r4, #4294967295
 8022fe6:	4620      	mov	r0, r4
 8022fe8:	bd70      	pop	{r4, r5, r6, pc}
 8022fea:	1cc4      	adds	r4, r0, #3
 8022fec:	f024 0403 	bic.w	r4, r4, #3
 8022ff0:	42a0      	cmp	r0, r4
 8022ff2:	d0f8      	beq.n	8022fe6 <sbrk_aligned+0x22>
 8022ff4:	1a21      	subs	r1, r4, r0
 8022ff6:	4628      	mov	r0, r5
 8022ff8:	f000 fb6c 	bl	80236d4 <_sbrk_r>
 8022ffc:	3001      	adds	r0, #1
 8022ffe:	d1f2      	bne.n	8022fe6 <sbrk_aligned+0x22>
 8023000:	e7ef      	b.n	8022fe2 <sbrk_aligned+0x1e>
 8023002:	bf00      	nop
 8023004:	24004360 	.word	0x24004360

08023008 <_malloc_r>:
 8023008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802300c:	1ccd      	adds	r5, r1, #3
 802300e:	f025 0503 	bic.w	r5, r5, #3
 8023012:	3508      	adds	r5, #8
 8023014:	2d0c      	cmp	r5, #12
 8023016:	bf38      	it	cc
 8023018:	250c      	movcc	r5, #12
 802301a:	2d00      	cmp	r5, #0
 802301c:	4606      	mov	r6, r0
 802301e:	db01      	blt.n	8023024 <_malloc_r+0x1c>
 8023020:	42a9      	cmp	r1, r5
 8023022:	d904      	bls.n	802302e <_malloc_r+0x26>
 8023024:	230c      	movs	r3, #12
 8023026:	6033      	str	r3, [r6, #0]
 8023028:	2000      	movs	r0, #0
 802302a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802302e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023104 <_malloc_r+0xfc>
 8023032:	f000 f869 	bl	8023108 <__malloc_lock>
 8023036:	f8d8 3000 	ldr.w	r3, [r8]
 802303a:	461c      	mov	r4, r3
 802303c:	bb44      	cbnz	r4, 8023090 <_malloc_r+0x88>
 802303e:	4629      	mov	r1, r5
 8023040:	4630      	mov	r0, r6
 8023042:	f7ff ffbf 	bl	8022fc4 <sbrk_aligned>
 8023046:	1c43      	adds	r3, r0, #1
 8023048:	4604      	mov	r4, r0
 802304a:	d158      	bne.n	80230fe <_malloc_r+0xf6>
 802304c:	f8d8 4000 	ldr.w	r4, [r8]
 8023050:	4627      	mov	r7, r4
 8023052:	2f00      	cmp	r7, #0
 8023054:	d143      	bne.n	80230de <_malloc_r+0xd6>
 8023056:	2c00      	cmp	r4, #0
 8023058:	d04b      	beq.n	80230f2 <_malloc_r+0xea>
 802305a:	6823      	ldr	r3, [r4, #0]
 802305c:	4639      	mov	r1, r7
 802305e:	4630      	mov	r0, r6
 8023060:	eb04 0903 	add.w	r9, r4, r3
 8023064:	f000 fb36 	bl	80236d4 <_sbrk_r>
 8023068:	4581      	cmp	r9, r0
 802306a:	d142      	bne.n	80230f2 <_malloc_r+0xea>
 802306c:	6821      	ldr	r1, [r4, #0]
 802306e:	1a6d      	subs	r5, r5, r1
 8023070:	4629      	mov	r1, r5
 8023072:	4630      	mov	r0, r6
 8023074:	f7ff ffa6 	bl	8022fc4 <sbrk_aligned>
 8023078:	3001      	adds	r0, #1
 802307a:	d03a      	beq.n	80230f2 <_malloc_r+0xea>
 802307c:	6823      	ldr	r3, [r4, #0]
 802307e:	442b      	add	r3, r5
 8023080:	6023      	str	r3, [r4, #0]
 8023082:	f8d8 3000 	ldr.w	r3, [r8]
 8023086:	685a      	ldr	r2, [r3, #4]
 8023088:	bb62      	cbnz	r2, 80230e4 <_malloc_r+0xdc>
 802308a:	f8c8 7000 	str.w	r7, [r8]
 802308e:	e00f      	b.n	80230b0 <_malloc_r+0xa8>
 8023090:	6822      	ldr	r2, [r4, #0]
 8023092:	1b52      	subs	r2, r2, r5
 8023094:	d420      	bmi.n	80230d8 <_malloc_r+0xd0>
 8023096:	2a0b      	cmp	r2, #11
 8023098:	d917      	bls.n	80230ca <_malloc_r+0xc2>
 802309a:	1961      	adds	r1, r4, r5
 802309c:	42a3      	cmp	r3, r4
 802309e:	6025      	str	r5, [r4, #0]
 80230a0:	bf18      	it	ne
 80230a2:	6059      	strne	r1, [r3, #4]
 80230a4:	6863      	ldr	r3, [r4, #4]
 80230a6:	bf08      	it	eq
 80230a8:	f8c8 1000 	streq.w	r1, [r8]
 80230ac:	5162      	str	r2, [r4, r5]
 80230ae:	604b      	str	r3, [r1, #4]
 80230b0:	4630      	mov	r0, r6
 80230b2:	f000 f82f 	bl	8023114 <__malloc_unlock>
 80230b6:	f104 000b 	add.w	r0, r4, #11
 80230ba:	1d23      	adds	r3, r4, #4
 80230bc:	f020 0007 	bic.w	r0, r0, #7
 80230c0:	1ac2      	subs	r2, r0, r3
 80230c2:	bf1c      	itt	ne
 80230c4:	1a1b      	subne	r3, r3, r0
 80230c6:	50a3      	strne	r3, [r4, r2]
 80230c8:	e7af      	b.n	802302a <_malloc_r+0x22>
 80230ca:	6862      	ldr	r2, [r4, #4]
 80230cc:	42a3      	cmp	r3, r4
 80230ce:	bf0c      	ite	eq
 80230d0:	f8c8 2000 	streq.w	r2, [r8]
 80230d4:	605a      	strne	r2, [r3, #4]
 80230d6:	e7eb      	b.n	80230b0 <_malloc_r+0xa8>
 80230d8:	4623      	mov	r3, r4
 80230da:	6864      	ldr	r4, [r4, #4]
 80230dc:	e7ae      	b.n	802303c <_malloc_r+0x34>
 80230de:	463c      	mov	r4, r7
 80230e0:	687f      	ldr	r7, [r7, #4]
 80230e2:	e7b6      	b.n	8023052 <_malloc_r+0x4a>
 80230e4:	461a      	mov	r2, r3
 80230e6:	685b      	ldr	r3, [r3, #4]
 80230e8:	42a3      	cmp	r3, r4
 80230ea:	d1fb      	bne.n	80230e4 <_malloc_r+0xdc>
 80230ec:	2300      	movs	r3, #0
 80230ee:	6053      	str	r3, [r2, #4]
 80230f0:	e7de      	b.n	80230b0 <_malloc_r+0xa8>
 80230f2:	230c      	movs	r3, #12
 80230f4:	6033      	str	r3, [r6, #0]
 80230f6:	4630      	mov	r0, r6
 80230f8:	f000 f80c 	bl	8023114 <__malloc_unlock>
 80230fc:	e794      	b.n	8023028 <_malloc_r+0x20>
 80230fe:	6005      	str	r5, [r0, #0]
 8023100:	e7d6      	b.n	80230b0 <_malloc_r+0xa8>
 8023102:	bf00      	nop
 8023104:	24004364 	.word	0x24004364

08023108 <__malloc_lock>:
 8023108:	4801      	ldr	r0, [pc, #4]	@ (8023110 <__malloc_lock+0x8>)
 802310a:	f000 bb30 	b.w	802376e <__retarget_lock_acquire_recursive>
 802310e:	bf00      	nop
 8023110:	240044a8 	.word	0x240044a8

08023114 <__malloc_unlock>:
 8023114:	4801      	ldr	r0, [pc, #4]	@ (802311c <__malloc_unlock+0x8>)
 8023116:	f000 bb2b 	b.w	8023770 <__retarget_lock_release_recursive>
 802311a:	bf00      	nop
 802311c:	240044a8 	.word	0x240044a8

08023120 <srand>:
 8023120:	b538      	push	{r3, r4, r5, lr}
 8023122:	4b10      	ldr	r3, [pc, #64]	@ (8023164 <srand+0x44>)
 8023124:	681d      	ldr	r5, [r3, #0]
 8023126:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8023128:	4604      	mov	r4, r0
 802312a:	b9b3      	cbnz	r3, 802315a <srand+0x3a>
 802312c:	2018      	movs	r0, #24
 802312e:	f7ff ff39 	bl	8022fa4 <malloc>
 8023132:	4602      	mov	r2, r0
 8023134:	6328      	str	r0, [r5, #48]	@ 0x30
 8023136:	b920      	cbnz	r0, 8023142 <srand+0x22>
 8023138:	4b0b      	ldr	r3, [pc, #44]	@ (8023168 <srand+0x48>)
 802313a:	480c      	ldr	r0, [pc, #48]	@ (802316c <srand+0x4c>)
 802313c:	2146      	movs	r1, #70	@ 0x46
 802313e:	f7ff fef3 	bl	8022f28 <__assert_func>
 8023142:	490b      	ldr	r1, [pc, #44]	@ (8023170 <srand+0x50>)
 8023144:	4b0b      	ldr	r3, [pc, #44]	@ (8023174 <srand+0x54>)
 8023146:	e9c0 1300 	strd	r1, r3, [r0]
 802314a:	4b0b      	ldr	r3, [pc, #44]	@ (8023178 <srand+0x58>)
 802314c:	6083      	str	r3, [r0, #8]
 802314e:	230b      	movs	r3, #11
 8023150:	8183      	strh	r3, [r0, #12]
 8023152:	2100      	movs	r1, #0
 8023154:	2001      	movs	r0, #1
 8023156:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802315a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 802315c:	2200      	movs	r2, #0
 802315e:	611c      	str	r4, [r3, #16]
 8023160:	615a      	str	r2, [r3, #20]
 8023162:	bd38      	pop	{r3, r4, r5, pc}
 8023164:	24000834 	.word	0x24000834
 8023168:	08035406 	.word	0x08035406
 802316c:	0803541d 	.word	0x0803541d
 8023170:	abcd330e 	.word	0xabcd330e
 8023174:	e66d1234 	.word	0xe66d1234
 8023178:	0005deec 	.word	0x0005deec

0802317c <_strtol_l.isra.0>:
 802317c:	2b24      	cmp	r3, #36	@ 0x24
 802317e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023182:	4686      	mov	lr, r0
 8023184:	4690      	mov	r8, r2
 8023186:	d801      	bhi.n	802318c <_strtol_l.isra.0+0x10>
 8023188:	2b01      	cmp	r3, #1
 802318a:	d106      	bne.n	802319a <_strtol_l.isra.0+0x1e>
 802318c:	f000 fac4 	bl	8023718 <__errno>
 8023190:	2316      	movs	r3, #22
 8023192:	6003      	str	r3, [r0, #0]
 8023194:	2000      	movs	r0, #0
 8023196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802319a:	4834      	ldr	r0, [pc, #208]	@ (802326c <_strtol_l.isra.0+0xf0>)
 802319c:	460d      	mov	r5, r1
 802319e:	462a      	mov	r2, r5
 80231a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80231a4:	5d06      	ldrb	r6, [r0, r4]
 80231a6:	f016 0608 	ands.w	r6, r6, #8
 80231aa:	d1f8      	bne.n	802319e <_strtol_l.isra.0+0x22>
 80231ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80231ae:	d110      	bne.n	80231d2 <_strtol_l.isra.0+0x56>
 80231b0:	782c      	ldrb	r4, [r5, #0]
 80231b2:	2601      	movs	r6, #1
 80231b4:	1c95      	adds	r5, r2, #2
 80231b6:	f033 0210 	bics.w	r2, r3, #16
 80231ba:	d115      	bne.n	80231e8 <_strtol_l.isra.0+0x6c>
 80231bc:	2c30      	cmp	r4, #48	@ 0x30
 80231be:	d10d      	bne.n	80231dc <_strtol_l.isra.0+0x60>
 80231c0:	782a      	ldrb	r2, [r5, #0]
 80231c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80231c6:	2a58      	cmp	r2, #88	@ 0x58
 80231c8:	d108      	bne.n	80231dc <_strtol_l.isra.0+0x60>
 80231ca:	786c      	ldrb	r4, [r5, #1]
 80231cc:	3502      	adds	r5, #2
 80231ce:	2310      	movs	r3, #16
 80231d0:	e00a      	b.n	80231e8 <_strtol_l.isra.0+0x6c>
 80231d2:	2c2b      	cmp	r4, #43	@ 0x2b
 80231d4:	bf04      	itt	eq
 80231d6:	782c      	ldrbeq	r4, [r5, #0]
 80231d8:	1c95      	addeq	r5, r2, #2
 80231da:	e7ec      	b.n	80231b6 <_strtol_l.isra.0+0x3a>
 80231dc:	2b00      	cmp	r3, #0
 80231de:	d1f6      	bne.n	80231ce <_strtol_l.isra.0+0x52>
 80231e0:	2c30      	cmp	r4, #48	@ 0x30
 80231e2:	bf14      	ite	ne
 80231e4:	230a      	movne	r3, #10
 80231e6:	2308      	moveq	r3, #8
 80231e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80231ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80231f0:	2200      	movs	r2, #0
 80231f2:	fbbc f9f3 	udiv	r9, ip, r3
 80231f6:	4610      	mov	r0, r2
 80231f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80231fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8023200:	2f09      	cmp	r7, #9
 8023202:	d80f      	bhi.n	8023224 <_strtol_l.isra.0+0xa8>
 8023204:	463c      	mov	r4, r7
 8023206:	42a3      	cmp	r3, r4
 8023208:	dd1b      	ble.n	8023242 <_strtol_l.isra.0+0xc6>
 802320a:	1c57      	adds	r7, r2, #1
 802320c:	d007      	beq.n	802321e <_strtol_l.isra.0+0xa2>
 802320e:	4581      	cmp	r9, r0
 8023210:	d314      	bcc.n	802323c <_strtol_l.isra.0+0xc0>
 8023212:	d101      	bne.n	8023218 <_strtol_l.isra.0+0x9c>
 8023214:	45a2      	cmp	sl, r4
 8023216:	db11      	blt.n	802323c <_strtol_l.isra.0+0xc0>
 8023218:	fb00 4003 	mla	r0, r0, r3, r4
 802321c:	2201      	movs	r2, #1
 802321e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8023222:	e7eb      	b.n	80231fc <_strtol_l.isra.0+0x80>
 8023224:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8023228:	2f19      	cmp	r7, #25
 802322a:	d801      	bhi.n	8023230 <_strtol_l.isra.0+0xb4>
 802322c:	3c37      	subs	r4, #55	@ 0x37
 802322e:	e7ea      	b.n	8023206 <_strtol_l.isra.0+0x8a>
 8023230:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8023234:	2f19      	cmp	r7, #25
 8023236:	d804      	bhi.n	8023242 <_strtol_l.isra.0+0xc6>
 8023238:	3c57      	subs	r4, #87	@ 0x57
 802323a:	e7e4      	b.n	8023206 <_strtol_l.isra.0+0x8a>
 802323c:	f04f 32ff 	mov.w	r2, #4294967295
 8023240:	e7ed      	b.n	802321e <_strtol_l.isra.0+0xa2>
 8023242:	1c53      	adds	r3, r2, #1
 8023244:	d108      	bne.n	8023258 <_strtol_l.isra.0+0xdc>
 8023246:	2322      	movs	r3, #34	@ 0x22
 8023248:	f8ce 3000 	str.w	r3, [lr]
 802324c:	4660      	mov	r0, ip
 802324e:	f1b8 0f00 	cmp.w	r8, #0
 8023252:	d0a0      	beq.n	8023196 <_strtol_l.isra.0+0x1a>
 8023254:	1e69      	subs	r1, r5, #1
 8023256:	e006      	b.n	8023266 <_strtol_l.isra.0+0xea>
 8023258:	b106      	cbz	r6, 802325c <_strtol_l.isra.0+0xe0>
 802325a:	4240      	negs	r0, r0
 802325c:	f1b8 0f00 	cmp.w	r8, #0
 8023260:	d099      	beq.n	8023196 <_strtol_l.isra.0+0x1a>
 8023262:	2a00      	cmp	r2, #0
 8023264:	d1f6      	bne.n	8023254 <_strtol_l.isra.0+0xd8>
 8023266:	f8c8 1000 	str.w	r1, [r8]
 802326a:	e794      	b.n	8023196 <_strtol_l.isra.0+0x1a>
 802326c:	080354a9 	.word	0x080354a9

08023270 <strtol>:
 8023270:	4613      	mov	r3, r2
 8023272:	460a      	mov	r2, r1
 8023274:	4601      	mov	r1, r0
 8023276:	4802      	ldr	r0, [pc, #8]	@ (8023280 <strtol+0x10>)
 8023278:	6800      	ldr	r0, [r0, #0]
 802327a:	f7ff bf7f 	b.w	802317c <_strtol_l.isra.0>
 802327e:	bf00      	nop
 8023280:	24000834 	.word	0x24000834

08023284 <std>:
 8023284:	2300      	movs	r3, #0
 8023286:	b510      	push	{r4, lr}
 8023288:	4604      	mov	r4, r0
 802328a:	e9c0 3300 	strd	r3, r3, [r0]
 802328e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023292:	6083      	str	r3, [r0, #8]
 8023294:	8181      	strh	r1, [r0, #12]
 8023296:	6643      	str	r3, [r0, #100]	@ 0x64
 8023298:	81c2      	strh	r2, [r0, #14]
 802329a:	6183      	str	r3, [r0, #24]
 802329c:	4619      	mov	r1, r3
 802329e:	2208      	movs	r2, #8
 80232a0:	305c      	adds	r0, #92	@ 0x5c
 80232a2:	f000 f938 	bl	8023516 <memset>
 80232a6:	4b0d      	ldr	r3, [pc, #52]	@ (80232dc <std+0x58>)
 80232a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80232aa:	4b0d      	ldr	r3, [pc, #52]	@ (80232e0 <std+0x5c>)
 80232ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80232ae:	4b0d      	ldr	r3, [pc, #52]	@ (80232e4 <std+0x60>)
 80232b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80232b2:	4b0d      	ldr	r3, [pc, #52]	@ (80232e8 <std+0x64>)
 80232b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80232b6:	4b0d      	ldr	r3, [pc, #52]	@ (80232ec <std+0x68>)
 80232b8:	6224      	str	r4, [r4, #32]
 80232ba:	429c      	cmp	r4, r3
 80232bc:	d006      	beq.n	80232cc <std+0x48>
 80232be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80232c2:	4294      	cmp	r4, r2
 80232c4:	d002      	beq.n	80232cc <std+0x48>
 80232c6:	33d0      	adds	r3, #208	@ 0xd0
 80232c8:	429c      	cmp	r4, r3
 80232ca:	d105      	bne.n	80232d8 <std+0x54>
 80232cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80232d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80232d4:	f000 ba4a 	b.w	802376c <__retarget_lock_init_recursive>
 80232d8:	bd10      	pop	{r4, pc}
 80232da:	bf00      	nop
 80232dc:	0802343d 	.word	0x0802343d
 80232e0:	0802345f 	.word	0x0802345f
 80232e4:	08023497 	.word	0x08023497
 80232e8:	080234bb 	.word	0x080234bb
 80232ec:	24004368 	.word	0x24004368

080232f0 <stdio_exit_handler>:
 80232f0:	4a02      	ldr	r2, [pc, #8]	@ (80232fc <stdio_exit_handler+0xc>)
 80232f2:	4903      	ldr	r1, [pc, #12]	@ (8023300 <stdio_exit_handler+0x10>)
 80232f4:	4803      	ldr	r0, [pc, #12]	@ (8023304 <stdio_exit_handler+0x14>)
 80232f6:	f000 b87b 	b.w	80233f0 <_fwalk_sglue>
 80232fa:	bf00      	nop
 80232fc:	24000828 	.word	0x24000828
 8023300:	08023ed9 	.word	0x08023ed9
 8023304:	24000838 	.word	0x24000838

08023308 <cleanup_stdio>:
 8023308:	6841      	ldr	r1, [r0, #4]
 802330a:	4b0c      	ldr	r3, [pc, #48]	@ (802333c <cleanup_stdio+0x34>)
 802330c:	4299      	cmp	r1, r3
 802330e:	b510      	push	{r4, lr}
 8023310:	4604      	mov	r4, r0
 8023312:	d001      	beq.n	8023318 <cleanup_stdio+0x10>
 8023314:	f000 fde0 	bl	8023ed8 <_fflush_r>
 8023318:	68a1      	ldr	r1, [r4, #8]
 802331a:	4b09      	ldr	r3, [pc, #36]	@ (8023340 <cleanup_stdio+0x38>)
 802331c:	4299      	cmp	r1, r3
 802331e:	d002      	beq.n	8023326 <cleanup_stdio+0x1e>
 8023320:	4620      	mov	r0, r4
 8023322:	f000 fdd9 	bl	8023ed8 <_fflush_r>
 8023326:	68e1      	ldr	r1, [r4, #12]
 8023328:	4b06      	ldr	r3, [pc, #24]	@ (8023344 <cleanup_stdio+0x3c>)
 802332a:	4299      	cmp	r1, r3
 802332c:	d004      	beq.n	8023338 <cleanup_stdio+0x30>
 802332e:	4620      	mov	r0, r4
 8023330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023334:	f000 bdd0 	b.w	8023ed8 <_fflush_r>
 8023338:	bd10      	pop	{r4, pc}
 802333a:	bf00      	nop
 802333c:	24004368 	.word	0x24004368
 8023340:	240043d0 	.word	0x240043d0
 8023344:	24004438 	.word	0x24004438

08023348 <global_stdio_init.part.0>:
 8023348:	b510      	push	{r4, lr}
 802334a:	4b0b      	ldr	r3, [pc, #44]	@ (8023378 <global_stdio_init.part.0+0x30>)
 802334c:	4c0b      	ldr	r4, [pc, #44]	@ (802337c <global_stdio_init.part.0+0x34>)
 802334e:	4a0c      	ldr	r2, [pc, #48]	@ (8023380 <global_stdio_init.part.0+0x38>)
 8023350:	601a      	str	r2, [r3, #0]
 8023352:	4620      	mov	r0, r4
 8023354:	2200      	movs	r2, #0
 8023356:	2104      	movs	r1, #4
 8023358:	f7ff ff94 	bl	8023284 <std>
 802335c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023360:	2201      	movs	r2, #1
 8023362:	2109      	movs	r1, #9
 8023364:	f7ff ff8e 	bl	8023284 <std>
 8023368:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 802336c:	2202      	movs	r2, #2
 802336e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023372:	2112      	movs	r1, #18
 8023374:	f7ff bf86 	b.w	8023284 <std>
 8023378:	240044a0 	.word	0x240044a0
 802337c:	24004368 	.word	0x24004368
 8023380:	080232f1 	.word	0x080232f1

08023384 <__sfp_lock_acquire>:
 8023384:	4801      	ldr	r0, [pc, #4]	@ (802338c <__sfp_lock_acquire+0x8>)
 8023386:	f000 b9f2 	b.w	802376e <__retarget_lock_acquire_recursive>
 802338a:	bf00      	nop
 802338c:	240044a9 	.word	0x240044a9

08023390 <__sfp_lock_release>:
 8023390:	4801      	ldr	r0, [pc, #4]	@ (8023398 <__sfp_lock_release+0x8>)
 8023392:	f000 b9ed 	b.w	8023770 <__retarget_lock_release_recursive>
 8023396:	bf00      	nop
 8023398:	240044a9 	.word	0x240044a9

0802339c <__sinit>:
 802339c:	b510      	push	{r4, lr}
 802339e:	4604      	mov	r4, r0
 80233a0:	f7ff fff0 	bl	8023384 <__sfp_lock_acquire>
 80233a4:	6a23      	ldr	r3, [r4, #32]
 80233a6:	b11b      	cbz	r3, 80233b0 <__sinit+0x14>
 80233a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233ac:	f7ff bff0 	b.w	8023390 <__sfp_lock_release>
 80233b0:	4b04      	ldr	r3, [pc, #16]	@ (80233c4 <__sinit+0x28>)
 80233b2:	6223      	str	r3, [r4, #32]
 80233b4:	4b04      	ldr	r3, [pc, #16]	@ (80233c8 <__sinit+0x2c>)
 80233b6:	681b      	ldr	r3, [r3, #0]
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	d1f5      	bne.n	80233a8 <__sinit+0xc>
 80233bc:	f7ff ffc4 	bl	8023348 <global_stdio_init.part.0>
 80233c0:	e7f2      	b.n	80233a8 <__sinit+0xc>
 80233c2:	bf00      	nop
 80233c4:	08023309 	.word	0x08023309
 80233c8:	240044a0 	.word	0x240044a0

080233cc <fiprintf>:
 80233cc:	b40e      	push	{r1, r2, r3}
 80233ce:	b503      	push	{r0, r1, lr}
 80233d0:	4601      	mov	r1, r0
 80233d2:	ab03      	add	r3, sp, #12
 80233d4:	4805      	ldr	r0, [pc, #20]	@ (80233ec <fiprintf+0x20>)
 80233d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80233da:	6800      	ldr	r0, [r0, #0]
 80233dc:	9301      	str	r3, [sp, #4]
 80233de:	f000 fa53 	bl	8023888 <_vfiprintf_r>
 80233e2:	b002      	add	sp, #8
 80233e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80233e8:	b003      	add	sp, #12
 80233ea:	4770      	bx	lr
 80233ec:	24000834 	.word	0x24000834

080233f0 <_fwalk_sglue>:
 80233f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80233f4:	4607      	mov	r7, r0
 80233f6:	4688      	mov	r8, r1
 80233f8:	4614      	mov	r4, r2
 80233fa:	2600      	movs	r6, #0
 80233fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023400:	f1b9 0901 	subs.w	r9, r9, #1
 8023404:	d505      	bpl.n	8023412 <_fwalk_sglue+0x22>
 8023406:	6824      	ldr	r4, [r4, #0]
 8023408:	2c00      	cmp	r4, #0
 802340a:	d1f7      	bne.n	80233fc <_fwalk_sglue+0xc>
 802340c:	4630      	mov	r0, r6
 802340e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023412:	89ab      	ldrh	r3, [r5, #12]
 8023414:	2b01      	cmp	r3, #1
 8023416:	d907      	bls.n	8023428 <_fwalk_sglue+0x38>
 8023418:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802341c:	3301      	adds	r3, #1
 802341e:	d003      	beq.n	8023428 <_fwalk_sglue+0x38>
 8023420:	4629      	mov	r1, r5
 8023422:	4638      	mov	r0, r7
 8023424:	47c0      	blx	r8
 8023426:	4306      	orrs	r6, r0
 8023428:	3568      	adds	r5, #104	@ 0x68
 802342a:	e7e9      	b.n	8023400 <_fwalk_sglue+0x10>

0802342c <putchar>:
 802342c:	4b02      	ldr	r3, [pc, #8]	@ (8023438 <putchar+0xc>)
 802342e:	4601      	mov	r1, r0
 8023430:	6818      	ldr	r0, [r3, #0]
 8023432:	6882      	ldr	r2, [r0, #8]
 8023434:	f000 bd78 	b.w	8023f28 <_putc_r>
 8023438:	24000834 	.word	0x24000834

0802343c <__sread>:
 802343c:	b510      	push	{r4, lr}
 802343e:	460c      	mov	r4, r1
 8023440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023444:	f000 f920 	bl	8023688 <_read_r>
 8023448:	2800      	cmp	r0, #0
 802344a:	bfab      	itete	ge
 802344c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802344e:	89a3      	ldrhlt	r3, [r4, #12]
 8023450:	181b      	addge	r3, r3, r0
 8023452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023456:	bfac      	ite	ge
 8023458:	6563      	strge	r3, [r4, #84]	@ 0x54
 802345a:	81a3      	strhlt	r3, [r4, #12]
 802345c:	bd10      	pop	{r4, pc}

0802345e <__swrite>:
 802345e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023462:	461f      	mov	r7, r3
 8023464:	898b      	ldrh	r3, [r1, #12]
 8023466:	05db      	lsls	r3, r3, #23
 8023468:	4605      	mov	r5, r0
 802346a:	460c      	mov	r4, r1
 802346c:	4616      	mov	r6, r2
 802346e:	d505      	bpl.n	802347c <__swrite+0x1e>
 8023470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023474:	2302      	movs	r3, #2
 8023476:	2200      	movs	r2, #0
 8023478:	f000 f8f4 	bl	8023664 <_lseek_r>
 802347c:	89a3      	ldrh	r3, [r4, #12]
 802347e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023486:	81a3      	strh	r3, [r4, #12]
 8023488:	4632      	mov	r2, r6
 802348a:	463b      	mov	r3, r7
 802348c:	4628      	mov	r0, r5
 802348e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023492:	f000 b92f 	b.w	80236f4 <_write_r>

08023496 <__sseek>:
 8023496:	b510      	push	{r4, lr}
 8023498:	460c      	mov	r4, r1
 802349a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802349e:	f000 f8e1 	bl	8023664 <_lseek_r>
 80234a2:	1c43      	adds	r3, r0, #1
 80234a4:	89a3      	ldrh	r3, [r4, #12]
 80234a6:	bf15      	itete	ne
 80234a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80234aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80234ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80234b2:	81a3      	strheq	r3, [r4, #12]
 80234b4:	bf18      	it	ne
 80234b6:	81a3      	strhne	r3, [r4, #12]
 80234b8:	bd10      	pop	{r4, pc}

080234ba <__sclose>:
 80234ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80234be:	f000 b8c1 	b.w	8023644 <_close_r>

080234c2 <memcmp>:
 80234c2:	b510      	push	{r4, lr}
 80234c4:	3901      	subs	r1, #1
 80234c6:	4402      	add	r2, r0
 80234c8:	4290      	cmp	r0, r2
 80234ca:	d101      	bne.n	80234d0 <memcmp+0xe>
 80234cc:	2000      	movs	r0, #0
 80234ce:	e005      	b.n	80234dc <memcmp+0x1a>
 80234d0:	7803      	ldrb	r3, [r0, #0]
 80234d2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80234d6:	42a3      	cmp	r3, r4
 80234d8:	d001      	beq.n	80234de <memcmp+0x1c>
 80234da:	1b18      	subs	r0, r3, r4
 80234dc:	bd10      	pop	{r4, pc}
 80234de:	3001      	adds	r0, #1
 80234e0:	e7f2      	b.n	80234c8 <memcmp+0x6>

080234e2 <memmove>:
 80234e2:	4288      	cmp	r0, r1
 80234e4:	b510      	push	{r4, lr}
 80234e6:	eb01 0402 	add.w	r4, r1, r2
 80234ea:	d902      	bls.n	80234f2 <memmove+0x10>
 80234ec:	4284      	cmp	r4, r0
 80234ee:	4623      	mov	r3, r4
 80234f0:	d807      	bhi.n	8023502 <memmove+0x20>
 80234f2:	1e43      	subs	r3, r0, #1
 80234f4:	42a1      	cmp	r1, r4
 80234f6:	d008      	beq.n	802350a <memmove+0x28>
 80234f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80234fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023500:	e7f8      	b.n	80234f4 <memmove+0x12>
 8023502:	4402      	add	r2, r0
 8023504:	4601      	mov	r1, r0
 8023506:	428a      	cmp	r2, r1
 8023508:	d100      	bne.n	802350c <memmove+0x2a>
 802350a:	bd10      	pop	{r4, pc}
 802350c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023510:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023514:	e7f7      	b.n	8023506 <memmove+0x24>

08023516 <memset>:
 8023516:	4402      	add	r2, r0
 8023518:	4603      	mov	r3, r0
 802351a:	4293      	cmp	r3, r2
 802351c:	d100      	bne.n	8023520 <memset+0xa>
 802351e:	4770      	bx	lr
 8023520:	f803 1b01 	strb.w	r1, [r3], #1
 8023524:	e7f9      	b.n	802351a <memset+0x4>

08023526 <strchr>:
 8023526:	b2c9      	uxtb	r1, r1
 8023528:	4603      	mov	r3, r0
 802352a:	4618      	mov	r0, r3
 802352c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023530:	b112      	cbz	r2, 8023538 <strchr+0x12>
 8023532:	428a      	cmp	r2, r1
 8023534:	d1f9      	bne.n	802352a <strchr+0x4>
 8023536:	4770      	bx	lr
 8023538:	2900      	cmp	r1, #0
 802353a:	bf18      	it	ne
 802353c:	2000      	movne	r0, #0
 802353e:	4770      	bx	lr

08023540 <strncmp>:
 8023540:	b510      	push	{r4, lr}
 8023542:	b16a      	cbz	r2, 8023560 <strncmp+0x20>
 8023544:	3901      	subs	r1, #1
 8023546:	1884      	adds	r4, r0, r2
 8023548:	f810 2b01 	ldrb.w	r2, [r0], #1
 802354c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023550:	429a      	cmp	r2, r3
 8023552:	d103      	bne.n	802355c <strncmp+0x1c>
 8023554:	42a0      	cmp	r0, r4
 8023556:	d001      	beq.n	802355c <strncmp+0x1c>
 8023558:	2a00      	cmp	r2, #0
 802355a:	d1f5      	bne.n	8023548 <strncmp+0x8>
 802355c:	1ad0      	subs	r0, r2, r3
 802355e:	bd10      	pop	{r4, pc}
 8023560:	4610      	mov	r0, r2
 8023562:	e7fc      	b.n	802355e <strncmp+0x1e>

08023564 <strncpy>:
 8023564:	b510      	push	{r4, lr}
 8023566:	3901      	subs	r1, #1
 8023568:	4603      	mov	r3, r0
 802356a:	b132      	cbz	r2, 802357a <strncpy+0x16>
 802356c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023570:	f803 4b01 	strb.w	r4, [r3], #1
 8023574:	3a01      	subs	r2, #1
 8023576:	2c00      	cmp	r4, #0
 8023578:	d1f7      	bne.n	802356a <strncpy+0x6>
 802357a:	441a      	add	r2, r3
 802357c:	2100      	movs	r1, #0
 802357e:	4293      	cmp	r3, r2
 8023580:	d100      	bne.n	8023584 <strncpy+0x20>
 8023582:	bd10      	pop	{r4, pc}
 8023584:	f803 1b01 	strb.w	r1, [r3], #1
 8023588:	e7f9      	b.n	802357e <strncpy+0x1a>

0802358a <strrchr>:
 802358a:	b538      	push	{r3, r4, r5, lr}
 802358c:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8023590:	4603      	mov	r3, r0
 8023592:	d10e      	bne.n	80235b2 <strrchr+0x28>
 8023594:	4621      	mov	r1, r4
 8023596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802359a:	f7ff bfc4 	b.w	8023526 <strchr>
 802359e:	1c43      	adds	r3, r0, #1
 80235a0:	4605      	mov	r5, r0
 80235a2:	4621      	mov	r1, r4
 80235a4:	4618      	mov	r0, r3
 80235a6:	f7ff ffbe 	bl	8023526 <strchr>
 80235aa:	2800      	cmp	r0, #0
 80235ac:	d1f7      	bne.n	802359e <strrchr+0x14>
 80235ae:	4628      	mov	r0, r5
 80235b0:	bd38      	pop	{r3, r4, r5, pc}
 80235b2:	2500      	movs	r5, #0
 80235b4:	e7f5      	b.n	80235a2 <strrchr+0x18>

080235b6 <strstr>:
 80235b6:	780a      	ldrb	r2, [r1, #0]
 80235b8:	b570      	push	{r4, r5, r6, lr}
 80235ba:	b96a      	cbnz	r2, 80235d8 <strstr+0x22>
 80235bc:	bd70      	pop	{r4, r5, r6, pc}
 80235be:	429a      	cmp	r2, r3
 80235c0:	d109      	bne.n	80235d6 <strstr+0x20>
 80235c2:	460c      	mov	r4, r1
 80235c4:	4605      	mov	r5, r0
 80235c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80235ca:	2b00      	cmp	r3, #0
 80235cc:	d0f6      	beq.n	80235bc <strstr+0x6>
 80235ce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80235d2:	429e      	cmp	r6, r3
 80235d4:	d0f7      	beq.n	80235c6 <strstr+0x10>
 80235d6:	3001      	adds	r0, #1
 80235d8:	7803      	ldrb	r3, [r0, #0]
 80235da:	2b00      	cmp	r3, #0
 80235dc:	d1ef      	bne.n	80235be <strstr+0x8>
 80235de:	4618      	mov	r0, r3
 80235e0:	e7ec      	b.n	80235bc <strstr+0x6>

080235e2 <_raise_r>:
 80235e2:	291f      	cmp	r1, #31
 80235e4:	b538      	push	{r3, r4, r5, lr}
 80235e6:	4605      	mov	r5, r0
 80235e8:	460c      	mov	r4, r1
 80235ea:	d904      	bls.n	80235f6 <_raise_r+0x14>
 80235ec:	2316      	movs	r3, #22
 80235ee:	6003      	str	r3, [r0, #0]
 80235f0:	f04f 30ff 	mov.w	r0, #4294967295
 80235f4:	bd38      	pop	{r3, r4, r5, pc}
 80235f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80235f8:	b112      	cbz	r2, 8023600 <_raise_r+0x1e>
 80235fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80235fe:	b94b      	cbnz	r3, 8023614 <_raise_r+0x32>
 8023600:	4628      	mov	r0, r5
 8023602:	f000 f865 	bl	80236d0 <_getpid_r>
 8023606:	4622      	mov	r2, r4
 8023608:	4601      	mov	r1, r0
 802360a:	4628      	mov	r0, r5
 802360c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023610:	f000 b84c 	b.w	80236ac <_kill_r>
 8023614:	2b01      	cmp	r3, #1
 8023616:	d00a      	beq.n	802362e <_raise_r+0x4c>
 8023618:	1c59      	adds	r1, r3, #1
 802361a:	d103      	bne.n	8023624 <_raise_r+0x42>
 802361c:	2316      	movs	r3, #22
 802361e:	6003      	str	r3, [r0, #0]
 8023620:	2001      	movs	r0, #1
 8023622:	e7e7      	b.n	80235f4 <_raise_r+0x12>
 8023624:	2100      	movs	r1, #0
 8023626:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802362a:	4620      	mov	r0, r4
 802362c:	4798      	blx	r3
 802362e:	2000      	movs	r0, #0
 8023630:	e7e0      	b.n	80235f4 <_raise_r+0x12>
	...

08023634 <raise>:
 8023634:	4b02      	ldr	r3, [pc, #8]	@ (8023640 <raise+0xc>)
 8023636:	4601      	mov	r1, r0
 8023638:	6818      	ldr	r0, [r3, #0]
 802363a:	f7ff bfd2 	b.w	80235e2 <_raise_r>
 802363e:	bf00      	nop
 8023640:	24000834 	.word	0x24000834

08023644 <_close_r>:
 8023644:	b538      	push	{r3, r4, r5, lr}
 8023646:	4d06      	ldr	r5, [pc, #24]	@ (8023660 <_close_r+0x1c>)
 8023648:	2300      	movs	r3, #0
 802364a:	4604      	mov	r4, r0
 802364c:	4608      	mov	r0, r1
 802364e:	602b      	str	r3, [r5, #0]
 8023650:	f7dd fcdf 	bl	8001012 <_close>
 8023654:	1c43      	adds	r3, r0, #1
 8023656:	d102      	bne.n	802365e <_close_r+0x1a>
 8023658:	682b      	ldr	r3, [r5, #0]
 802365a:	b103      	cbz	r3, 802365e <_close_r+0x1a>
 802365c:	6023      	str	r3, [r4, #0]
 802365e:	bd38      	pop	{r3, r4, r5, pc}
 8023660:	240044a4 	.word	0x240044a4

08023664 <_lseek_r>:
 8023664:	b538      	push	{r3, r4, r5, lr}
 8023666:	4d07      	ldr	r5, [pc, #28]	@ (8023684 <_lseek_r+0x20>)
 8023668:	4604      	mov	r4, r0
 802366a:	4608      	mov	r0, r1
 802366c:	4611      	mov	r1, r2
 802366e:	2200      	movs	r2, #0
 8023670:	602a      	str	r2, [r5, #0]
 8023672:	461a      	mov	r2, r3
 8023674:	f7dd fcf4 	bl	8001060 <_lseek>
 8023678:	1c43      	adds	r3, r0, #1
 802367a:	d102      	bne.n	8023682 <_lseek_r+0x1e>
 802367c:	682b      	ldr	r3, [r5, #0]
 802367e:	b103      	cbz	r3, 8023682 <_lseek_r+0x1e>
 8023680:	6023      	str	r3, [r4, #0]
 8023682:	bd38      	pop	{r3, r4, r5, pc}
 8023684:	240044a4 	.word	0x240044a4

08023688 <_read_r>:
 8023688:	b538      	push	{r3, r4, r5, lr}
 802368a:	4d07      	ldr	r5, [pc, #28]	@ (80236a8 <_read_r+0x20>)
 802368c:	4604      	mov	r4, r0
 802368e:	4608      	mov	r0, r1
 8023690:	4611      	mov	r1, r2
 8023692:	2200      	movs	r2, #0
 8023694:	602a      	str	r2, [r5, #0]
 8023696:	461a      	mov	r2, r3
 8023698:	f7dd fc9e 	bl	8000fd8 <_read>
 802369c:	1c43      	adds	r3, r0, #1
 802369e:	d102      	bne.n	80236a6 <_read_r+0x1e>
 80236a0:	682b      	ldr	r3, [r5, #0]
 80236a2:	b103      	cbz	r3, 80236a6 <_read_r+0x1e>
 80236a4:	6023      	str	r3, [r4, #0]
 80236a6:	bd38      	pop	{r3, r4, r5, pc}
 80236a8:	240044a4 	.word	0x240044a4

080236ac <_kill_r>:
 80236ac:	b538      	push	{r3, r4, r5, lr}
 80236ae:	4d07      	ldr	r5, [pc, #28]	@ (80236cc <_kill_r+0x20>)
 80236b0:	2300      	movs	r3, #0
 80236b2:	4604      	mov	r4, r0
 80236b4:	4608      	mov	r0, r1
 80236b6:	4611      	mov	r1, r2
 80236b8:	602b      	str	r3, [r5, #0]
 80236ba:	f7dd fc72 	bl	8000fa2 <_kill>
 80236be:	1c43      	adds	r3, r0, #1
 80236c0:	d102      	bne.n	80236c8 <_kill_r+0x1c>
 80236c2:	682b      	ldr	r3, [r5, #0]
 80236c4:	b103      	cbz	r3, 80236c8 <_kill_r+0x1c>
 80236c6:	6023      	str	r3, [r4, #0]
 80236c8:	bd38      	pop	{r3, r4, r5, pc}
 80236ca:	bf00      	nop
 80236cc:	240044a4 	.word	0x240044a4

080236d0 <_getpid_r>:
 80236d0:	f7dd bc5f 	b.w	8000f92 <_getpid>

080236d4 <_sbrk_r>:
 80236d4:	b538      	push	{r3, r4, r5, lr}
 80236d6:	4d06      	ldr	r5, [pc, #24]	@ (80236f0 <_sbrk_r+0x1c>)
 80236d8:	2300      	movs	r3, #0
 80236da:	4604      	mov	r4, r0
 80236dc:	4608      	mov	r0, r1
 80236de:	602b      	str	r3, [r5, #0]
 80236e0:	f7dd fccc 	bl	800107c <_sbrk>
 80236e4:	1c43      	adds	r3, r0, #1
 80236e6:	d102      	bne.n	80236ee <_sbrk_r+0x1a>
 80236e8:	682b      	ldr	r3, [r5, #0]
 80236ea:	b103      	cbz	r3, 80236ee <_sbrk_r+0x1a>
 80236ec:	6023      	str	r3, [r4, #0]
 80236ee:	bd38      	pop	{r3, r4, r5, pc}
 80236f0:	240044a4 	.word	0x240044a4

080236f4 <_write_r>:
 80236f4:	b538      	push	{r3, r4, r5, lr}
 80236f6:	4d07      	ldr	r5, [pc, #28]	@ (8023714 <_write_r+0x20>)
 80236f8:	4604      	mov	r4, r0
 80236fa:	4608      	mov	r0, r1
 80236fc:	4611      	mov	r1, r2
 80236fe:	2200      	movs	r2, #0
 8023700:	602a      	str	r2, [r5, #0]
 8023702:	461a      	mov	r2, r3
 8023704:	f7dd f83e 	bl	8000784 <_write>
 8023708:	1c43      	adds	r3, r0, #1
 802370a:	d102      	bne.n	8023712 <_write_r+0x1e>
 802370c:	682b      	ldr	r3, [r5, #0]
 802370e:	b103      	cbz	r3, 8023712 <_write_r+0x1e>
 8023710:	6023      	str	r3, [r4, #0]
 8023712:	bd38      	pop	{r3, r4, r5, pc}
 8023714:	240044a4 	.word	0x240044a4

08023718 <__errno>:
 8023718:	4b01      	ldr	r3, [pc, #4]	@ (8023720 <__errno+0x8>)
 802371a:	6818      	ldr	r0, [r3, #0]
 802371c:	4770      	bx	lr
 802371e:	bf00      	nop
 8023720:	24000834 	.word	0x24000834

08023724 <__libc_init_array>:
 8023724:	b570      	push	{r4, r5, r6, lr}
 8023726:	4d0d      	ldr	r5, [pc, #52]	@ (802375c <__libc_init_array+0x38>)
 8023728:	4c0d      	ldr	r4, [pc, #52]	@ (8023760 <__libc_init_array+0x3c>)
 802372a:	1b64      	subs	r4, r4, r5
 802372c:	10a4      	asrs	r4, r4, #2
 802372e:	2600      	movs	r6, #0
 8023730:	42a6      	cmp	r6, r4
 8023732:	d109      	bne.n	8023748 <__libc_init_array+0x24>
 8023734:	4d0b      	ldr	r5, [pc, #44]	@ (8023764 <__libc_init_array+0x40>)
 8023736:	4c0c      	ldr	r4, [pc, #48]	@ (8023768 <__libc_init_array+0x44>)
 8023738:	f000 fd42 	bl	80241c0 <_init>
 802373c:	1b64      	subs	r4, r4, r5
 802373e:	10a4      	asrs	r4, r4, #2
 8023740:	2600      	movs	r6, #0
 8023742:	42a6      	cmp	r6, r4
 8023744:	d105      	bne.n	8023752 <__libc_init_array+0x2e>
 8023746:	bd70      	pop	{r4, r5, r6, pc}
 8023748:	f855 3b04 	ldr.w	r3, [r5], #4
 802374c:	4798      	blx	r3
 802374e:	3601      	adds	r6, #1
 8023750:	e7ee      	b.n	8023730 <__libc_init_array+0xc>
 8023752:	f855 3b04 	ldr.w	r3, [r5], #4
 8023756:	4798      	blx	r3
 8023758:	3601      	adds	r6, #1
 802375a:	e7f2      	b.n	8023742 <__libc_init_array+0x1e>
 802375c:	080355b4 	.word	0x080355b4
 8023760:	080355b4 	.word	0x080355b4
 8023764:	080355b4 	.word	0x080355b4
 8023768:	080355b8 	.word	0x080355b8

0802376c <__retarget_lock_init_recursive>:
 802376c:	4770      	bx	lr

0802376e <__retarget_lock_acquire_recursive>:
 802376e:	4770      	bx	lr

08023770 <__retarget_lock_release_recursive>:
 8023770:	4770      	bx	lr

08023772 <strcpy>:
 8023772:	4603      	mov	r3, r0
 8023774:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023778:	f803 2b01 	strb.w	r2, [r3], #1
 802377c:	2a00      	cmp	r2, #0
 802377e:	d1f9      	bne.n	8023774 <strcpy+0x2>
 8023780:	4770      	bx	lr

08023782 <memcpy>:
 8023782:	440a      	add	r2, r1
 8023784:	4291      	cmp	r1, r2
 8023786:	f100 33ff 	add.w	r3, r0, #4294967295
 802378a:	d100      	bne.n	802378e <memcpy+0xc>
 802378c:	4770      	bx	lr
 802378e:	b510      	push	{r4, lr}
 8023790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023798:	4291      	cmp	r1, r2
 802379a:	d1f9      	bne.n	8023790 <memcpy+0xe>
 802379c:	bd10      	pop	{r4, pc}
	...

080237a0 <_free_r>:
 80237a0:	b538      	push	{r3, r4, r5, lr}
 80237a2:	4605      	mov	r5, r0
 80237a4:	2900      	cmp	r1, #0
 80237a6:	d041      	beq.n	802382c <_free_r+0x8c>
 80237a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80237ac:	1f0c      	subs	r4, r1, #4
 80237ae:	2b00      	cmp	r3, #0
 80237b0:	bfb8      	it	lt
 80237b2:	18e4      	addlt	r4, r4, r3
 80237b4:	f7ff fca8 	bl	8023108 <__malloc_lock>
 80237b8:	4a1d      	ldr	r2, [pc, #116]	@ (8023830 <_free_r+0x90>)
 80237ba:	6813      	ldr	r3, [r2, #0]
 80237bc:	b933      	cbnz	r3, 80237cc <_free_r+0x2c>
 80237be:	6063      	str	r3, [r4, #4]
 80237c0:	6014      	str	r4, [r2, #0]
 80237c2:	4628      	mov	r0, r5
 80237c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80237c8:	f7ff bca4 	b.w	8023114 <__malloc_unlock>
 80237cc:	42a3      	cmp	r3, r4
 80237ce:	d908      	bls.n	80237e2 <_free_r+0x42>
 80237d0:	6820      	ldr	r0, [r4, #0]
 80237d2:	1821      	adds	r1, r4, r0
 80237d4:	428b      	cmp	r3, r1
 80237d6:	bf01      	itttt	eq
 80237d8:	6819      	ldreq	r1, [r3, #0]
 80237da:	685b      	ldreq	r3, [r3, #4]
 80237dc:	1809      	addeq	r1, r1, r0
 80237de:	6021      	streq	r1, [r4, #0]
 80237e0:	e7ed      	b.n	80237be <_free_r+0x1e>
 80237e2:	461a      	mov	r2, r3
 80237e4:	685b      	ldr	r3, [r3, #4]
 80237e6:	b10b      	cbz	r3, 80237ec <_free_r+0x4c>
 80237e8:	42a3      	cmp	r3, r4
 80237ea:	d9fa      	bls.n	80237e2 <_free_r+0x42>
 80237ec:	6811      	ldr	r1, [r2, #0]
 80237ee:	1850      	adds	r0, r2, r1
 80237f0:	42a0      	cmp	r0, r4
 80237f2:	d10b      	bne.n	802380c <_free_r+0x6c>
 80237f4:	6820      	ldr	r0, [r4, #0]
 80237f6:	4401      	add	r1, r0
 80237f8:	1850      	adds	r0, r2, r1
 80237fa:	4283      	cmp	r3, r0
 80237fc:	6011      	str	r1, [r2, #0]
 80237fe:	d1e0      	bne.n	80237c2 <_free_r+0x22>
 8023800:	6818      	ldr	r0, [r3, #0]
 8023802:	685b      	ldr	r3, [r3, #4]
 8023804:	6053      	str	r3, [r2, #4]
 8023806:	4408      	add	r0, r1
 8023808:	6010      	str	r0, [r2, #0]
 802380a:	e7da      	b.n	80237c2 <_free_r+0x22>
 802380c:	d902      	bls.n	8023814 <_free_r+0x74>
 802380e:	230c      	movs	r3, #12
 8023810:	602b      	str	r3, [r5, #0]
 8023812:	e7d6      	b.n	80237c2 <_free_r+0x22>
 8023814:	6820      	ldr	r0, [r4, #0]
 8023816:	1821      	adds	r1, r4, r0
 8023818:	428b      	cmp	r3, r1
 802381a:	bf04      	itt	eq
 802381c:	6819      	ldreq	r1, [r3, #0]
 802381e:	685b      	ldreq	r3, [r3, #4]
 8023820:	6063      	str	r3, [r4, #4]
 8023822:	bf04      	itt	eq
 8023824:	1809      	addeq	r1, r1, r0
 8023826:	6021      	streq	r1, [r4, #0]
 8023828:	6054      	str	r4, [r2, #4]
 802382a:	e7ca      	b.n	80237c2 <_free_r+0x22>
 802382c:	bd38      	pop	{r3, r4, r5, pc}
 802382e:	bf00      	nop
 8023830:	24004364 	.word	0x24004364

08023834 <__sfputc_r>:
 8023834:	6893      	ldr	r3, [r2, #8]
 8023836:	3b01      	subs	r3, #1
 8023838:	2b00      	cmp	r3, #0
 802383a:	b410      	push	{r4}
 802383c:	6093      	str	r3, [r2, #8]
 802383e:	da08      	bge.n	8023852 <__sfputc_r+0x1e>
 8023840:	6994      	ldr	r4, [r2, #24]
 8023842:	42a3      	cmp	r3, r4
 8023844:	db01      	blt.n	802384a <__sfputc_r+0x16>
 8023846:	290a      	cmp	r1, #10
 8023848:	d103      	bne.n	8023852 <__sfputc_r+0x1e>
 802384a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802384e:	f000 bb9f 	b.w	8023f90 <__swbuf_r>
 8023852:	6813      	ldr	r3, [r2, #0]
 8023854:	1c58      	adds	r0, r3, #1
 8023856:	6010      	str	r0, [r2, #0]
 8023858:	7019      	strb	r1, [r3, #0]
 802385a:	4608      	mov	r0, r1
 802385c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023860:	4770      	bx	lr

08023862 <__sfputs_r>:
 8023862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023864:	4606      	mov	r6, r0
 8023866:	460f      	mov	r7, r1
 8023868:	4614      	mov	r4, r2
 802386a:	18d5      	adds	r5, r2, r3
 802386c:	42ac      	cmp	r4, r5
 802386e:	d101      	bne.n	8023874 <__sfputs_r+0x12>
 8023870:	2000      	movs	r0, #0
 8023872:	e007      	b.n	8023884 <__sfputs_r+0x22>
 8023874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023878:	463a      	mov	r2, r7
 802387a:	4630      	mov	r0, r6
 802387c:	f7ff ffda 	bl	8023834 <__sfputc_r>
 8023880:	1c43      	adds	r3, r0, #1
 8023882:	d1f3      	bne.n	802386c <__sfputs_r+0xa>
 8023884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023888 <_vfiprintf_r>:
 8023888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802388c:	460d      	mov	r5, r1
 802388e:	b09d      	sub	sp, #116	@ 0x74
 8023890:	4614      	mov	r4, r2
 8023892:	4698      	mov	r8, r3
 8023894:	4606      	mov	r6, r0
 8023896:	b118      	cbz	r0, 80238a0 <_vfiprintf_r+0x18>
 8023898:	6a03      	ldr	r3, [r0, #32]
 802389a:	b90b      	cbnz	r3, 80238a0 <_vfiprintf_r+0x18>
 802389c:	f7ff fd7e 	bl	802339c <__sinit>
 80238a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80238a2:	07d9      	lsls	r1, r3, #31
 80238a4:	d405      	bmi.n	80238b2 <_vfiprintf_r+0x2a>
 80238a6:	89ab      	ldrh	r3, [r5, #12]
 80238a8:	059a      	lsls	r2, r3, #22
 80238aa:	d402      	bmi.n	80238b2 <_vfiprintf_r+0x2a>
 80238ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80238ae:	f7ff ff5e 	bl	802376e <__retarget_lock_acquire_recursive>
 80238b2:	89ab      	ldrh	r3, [r5, #12]
 80238b4:	071b      	lsls	r3, r3, #28
 80238b6:	d501      	bpl.n	80238bc <_vfiprintf_r+0x34>
 80238b8:	692b      	ldr	r3, [r5, #16]
 80238ba:	b99b      	cbnz	r3, 80238e4 <_vfiprintf_r+0x5c>
 80238bc:	4629      	mov	r1, r5
 80238be:	4630      	mov	r0, r6
 80238c0:	f000 fba4 	bl	802400c <__swsetup_r>
 80238c4:	b170      	cbz	r0, 80238e4 <_vfiprintf_r+0x5c>
 80238c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80238c8:	07dc      	lsls	r4, r3, #31
 80238ca:	d504      	bpl.n	80238d6 <_vfiprintf_r+0x4e>
 80238cc:	f04f 30ff 	mov.w	r0, #4294967295
 80238d0:	b01d      	add	sp, #116	@ 0x74
 80238d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238d6:	89ab      	ldrh	r3, [r5, #12]
 80238d8:	0598      	lsls	r0, r3, #22
 80238da:	d4f7      	bmi.n	80238cc <_vfiprintf_r+0x44>
 80238dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80238de:	f7ff ff47 	bl	8023770 <__retarget_lock_release_recursive>
 80238e2:	e7f3      	b.n	80238cc <_vfiprintf_r+0x44>
 80238e4:	2300      	movs	r3, #0
 80238e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80238e8:	2320      	movs	r3, #32
 80238ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80238ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80238f2:	2330      	movs	r3, #48	@ 0x30
 80238f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023aa4 <_vfiprintf_r+0x21c>
 80238f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80238fc:	f04f 0901 	mov.w	r9, #1
 8023900:	4623      	mov	r3, r4
 8023902:	469a      	mov	sl, r3
 8023904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023908:	b10a      	cbz	r2, 802390e <_vfiprintf_r+0x86>
 802390a:	2a25      	cmp	r2, #37	@ 0x25
 802390c:	d1f9      	bne.n	8023902 <_vfiprintf_r+0x7a>
 802390e:	ebba 0b04 	subs.w	fp, sl, r4
 8023912:	d00b      	beq.n	802392c <_vfiprintf_r+0xa4>
 8023914:	465b      	mov	r3, fp
 8023916:	4622      	mov	r2, r4
 8023918:	4629      	mov	r1, r5
 802391a:	4630      	mov	r0, r6
 802391c:	f7ff ffa1 	bl	8023862 <__sfputs_r>
 8023920:	3001      	adds	r0, #1
 8023922:	f000 80a7 	beq.w	8023a74 <_vfiprintf_r+0x1ec>
 8023926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023928:	445a      	add	r2, fp
 802392a:	9209      	str	r2, [sp, #36]	@ 0x24
 802392c:	f89a 3000 	ldrb.w	r3, [sl]
 8023930:	2b00      	cmp	r3, #0
 8023932:	f000 809f 	beq.w	8023a74 <_vfiprintf_r+0x1ec>
 8023936:	2300      	movs	r3, #0
 8023938:	f04f 32ff 	mov.w	r2, #4294967295
 802393c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023940:	f10a 0a01 	add.w	sl, sl, #1
 8023944:	9304      	str	r3, [sp, #16]
 8023946:	9307      	str	r3, [sp, #28]
 8023948:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802394c:	931a      	str	r3, [sp, #104]	@ 0x68
 802394e:	4654      	mov	r4, sl
 8023950:	2205      	movs	r2, #5
 8023952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023956:	4853      	ldr	r0, [pc, #332]	@ (8023aa4 <_vfiprintf_r+0x21c>)
 8023958:	f7dc fcea 	bl	8000330 <memchr>
 802395c:	9a04      	ldr	r2, [sp, #16]
 802395e:	b9d8      	cbnz	r0, 8023998 <_vfiprintf_r+0x110>
 8023960:	06d1      	lsls	r1, r2, #27
 8023962:	bf44      	itt	mi
 8023964:	2320      	movmi	r3, #32
 8023966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802396a:	0713      	lsls	r3, r2, #28
 802396c:	bf44      	itt	mi
 802396e:	232b      	movmi	r3, #43	@ 0x2b
 8023970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023974:	f89a 3000 	ldrb.w	r3, [sl]
 8023978:	2b2a      	cmp	r3, #42	@ 0x2a
 802397a:	d015      	beq.n	80239a8 <_vfiprintf_r+0x120>
 802397c:	9a07      	ldr	r2, [sp, #28]
 802397e:	4654      	mov	r4, sl
 8023980:	2000      	movs	r0, #0
 8023982:	f04f 0c0a 	mov.w	ip, #10
 8023986:	4621      	mov	r1, r4
 8023988:	f811 3b01 	ldrb.w	r3, [r1], #1
 802398c:	3b30      	subs	r3, #48	@ 0x30
 802398e:	2b09      	cmp	r3, #9
 8023990:	d94b      	bls.n	8023a2a <_vfiprintf_r+0x1a2>
 8023992:	b1b0      	cbz	r0, 80239c2 <_vfiprintf_r+0x13a>
 8023994:	9207      	str	r2, [sp, #28]
 8023996:	e014      	b.n	80239c2 <_vfiprintf_r+0x13a>
 8023998:	eba0 0308 	sub.w	r3, r0, r8
 802399c:	fa09 f303 	lsl.w	r3, r9, r3
 80239a0:	4313      	orrs	r3, r2
 80239a2:	9304      	str	r3, [sp, #16]
 80239a4:	46a2      	mov	sl, r4
 80239a6:	e7d2      	b.n	802394e <_vfiprintf_r+0xc6>
 80239a8:	9b03      	ldr	r3, [sp, #12]
 80239aa:	1d19      	adds	r1, r3, #4
 80239ac:	681b      	ldr	r3, [r3, #0]
 80239ae:	9103      	str	r1, [sp, #12]
 80239b0:	2b00      	cmp	r3, #0
 80239b2:	bfbb      	ittet	lt
 80239b4:	425b      	neglt	r3, r3
 80239b6:	f042 0202 	orrlt.w	r2, r2, #2
 80239ba:	9307      	strge	r3, [sp, #28]
 80239bc:	9307      	strlt	r3, [sp, #28]
 80239be:	bfb8      	it	lt
 80239c0:	9204      	strlt	r2, [sp, #16]
 80239c2:	7823      	ldrb	r3, [r4, #0]
 80239c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80239c6:	d10a      	bne.n	80239de <_vfiprintf_r+0x156>
 80239c8:	7863      	ldrb	r3, [r4, #1]
 80239ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80239cc:	d132      	bne.n	8023a34 <_vfiprintf_r+0x1ac>
 80239ce:	9b03      	ldr	r3, [sp, #12]
 80239d0:	1d1a      	adds	r2, r3, #4
 80239d2:	681b      	ldr	r3, [r3, #0]
 80239d4:	9203      	str	r2, [sp, #12]
 80239d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80239da:	3402      	adds	r4, #2
 80239dc:	9305      	str	r3, [sp, #20]
 80239de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023ab4 <_vfiprintf_r+0x22c>
 80239e2:	7821      	ldrb	r1, [r4, #0]
 80239e4:	2203      	movs	r2, #3
 80239e6:	4650      	mov	r0, sl
 80239e8:	f7dc fca2 	bl	8000330 <memchr>
 80239ec:	b138      	cbz	r0, 80239fe <_vfiprintf_r+0x176>
 80239ee:	9b04      	ldr	r3, [sp, #16]
 80239f0:	eba0 000a 	sub.w	r0, r0, sl
 80239f4:	2240      	movs	r2, #64	@ 0x40
 80239f6:	4082      	lsls	r2, r0
 80239f8:	4313      	orrs	r3, r2
 80239fa:	3401      	adds	r4, #1
 80239fc:	9304      	str	r3, [sp, #16]
 80239fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a02:	4829      	ldr	r0, [pc, #164]	@ (8023aa8 <_vfiprintf_r+0x220>)
 8023a04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023a08:	2206      	movs	r2, #6
 8023a0a:	f7dc fc91 	bl	8000330 <memchr>
 8023a0e:	2800      	cmp	r0, #0
 8023a10:	d03f      	beq.n	8023a92 <_vfiprintf_r+0x20a>
 8023a12:	4b26      	ldr	r3, [pc, #152]	@ (8023aac <_vfiprintf_r+0x224>)
 8023a14:	bb1b      	cbnz	r3, 8023a5e <_vfiprintf_r+0x1d6>
 8023a16:	9b03      	ldr	r3, [sp, #12]
 8023a18:	3307      	adds	r3, #7
 8023a1a:	f023 0307 	bic.w	r3, r3, #7
 8023a1e:	3308      	adds	r3, #8
 8023a20:	9303      	str	r3, [sp, #12]
 8023a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023a24:	443b      	add	r3, r7
 8023a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8023a28:	e76a      	b.n	8023900 <_vfiprintf_r+0x78>
 8023a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8023a2e:	460c      	mov	r4, r1
 8023a30:	2001      	movs	r0, #1
 8023a32:	e7a8      	b.n	8023986 <_vfiprintf_r+0xfe>
 8023a34:	2300      	movs	r3, #0
 8023a36:	3401      	adds	r4, #1
 8023a38:	9305      	str	r3, [sp, #20]
 8023a3a:	4619      	mov	r1, r3
 8023a3c:	f04f 0c0a 	mov.w	ip, #10
 8023a40:	4620      	mov	r0, r4
 8023a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023a46:	3a30      	subs	r2, #48	@ 0x30
 8023a48:	2a09      	cmp	r2, #9
 8023a4a:	d903      	bls.n	8023a54 <_vfiprintf_r+0x1cc>
 8023a4c:	2b00      	cmp	r3, #0
 8023a4e:	d0c6      	beq.n	80239de <_vfiprintf_r+0x156>
 8023a50:	9105      	str	r1, [sp, #20]
 8023a52:	e7c4      	b.n	80239de <_vfiprintf_r+0x156>
 8023a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8023a58:	4604      	mov	r4, r0
 8023a5a:	2301      	movs	r3, #1
 8023a5c:	e7f0      	b.n	8023a40 <_vfiprintf_r+0x1b8>
 8023a5e:	ab03      	add	r3, sp, #12
 8023a60:	9300      	str	r3, [sp, #0]
 8023a62:	462a      	mov	r2, r5
 8023a64:	4b12      	ldr	r3, [pc, #72]	@ (8023ab0 <_vfiprintf_r+0x228>)
 8023a66:	a904      	add	r1, sp, #16
 8023a68:	4630      	mov	r0, r6
 8023a6a:	f3af 8000 	nop.w
 8023a6e:	4607      	mov	r7, r0
 8023a70:	1c78      	adds	r0, r7, #1
 8023a72:	d1d6      	bne.n	8023a22 <_vfiprintf_r+0x19a>
 8023a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023a76:	07d9      	lsls	r1, r3, #31
 8023a78:	d405      	bmi.n	8023a86 <_vfiprintf_r+0x1fe>
 8023a7a:	89ab      	ldrh	r3, [r5, #12]
 8023a7c:	059a      	lsls	r2, r3, #22
 8023a7e:	d402      	bmi.n	8023a86 <_vfiprintf_r+0x1fe>
 8023a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023a82:	f7ff fe75 	bl	8023770 <__retarget_lock_release_recursive>
 8023a86:	89ab      	ldrh	r3, [r5, #12]
 8023a88:	065b      	lsls	r3, r3, #25
 8023a8a:	f53f af1f 	bmi.w	80238cc <_vfiprintf_r+0x44>
 8023a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023a90:	e71e      	b.n	80238d0 <_vfiprintf_r+0x48>
 8023a92:	ab03      	add	r3, sp, #12
 8023a94:	9300      	str	r3, [sp, #0]
 8023a96:	462a      	mov	r2, r5
 8023a98:	4b05      	ldr	r3, [pc, #20]	@ (8023ab0 <_vfiprintf_r+0x228>)
 8023a9a:	a904      	add	r1, sp, #16
 8023a9c:	4630      	mov	r0, r6
 8023a9e:	f000 f879 	bl	8023b94 <_printf_i>
 8023aa2:	e7e4      	b.n	8023a6e <_vfiprintf_r+0x1e6>
 8023aa4:	08035475 	.word	0x08035475
 8023aa8:	0803547f 	.word	0x0803547f
 8023aac:	00000000 	.word	0x00000000
 8023ab0:	08023863 	.word	0x08023863
 8023ab4:	0803547b 	.word	0x0803547b

08023ab8 <_printf_common>:
 8023ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023abc:	4616      	mov	r6, r2
 8023abe:	4698      	mov	r8, r3
 8023ac0:	688a      	ldr	r2, [r1, #8]
 8023ac2:	690b      	ldr	r3, [r1, #16]
 8023ac4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023ac8:	4293      	cmp	r3, r2
 8023aca:	bfb8      	it	lt
 8023acc:	4613      	movlt	r3, r2
 8023ace:	6033      	str	r3, [r6, #0]
 8023ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023ad4:	4607      	mov	r7, r0
 8023ad6:	460c      	mov	r4, r1
 8023ad8:	b10a      	cbz	r2, 8023ade <_printf_common+0x26>
 8023ada:	3301      	adds	r3, #1
 8023adc:	6033      	str	r3, [r6, #0]
 8023ade:	6823      	ldr	r3, [r4, #0]
 8023ae0:	0699      	lsls	r1, r3, #26
 8023ae2:	bf42      	ittt	mi
 8023ae4:	6833      	ldrmi	r3, [r6, #0]
 8023ae6:	3302      	addmi	r3, #2
 8023ae8:	6033      	strmi	r3, [r6, #0]
 8023aea:	6825      	ldr	r5, [r4, #0]
 8023aec:	f015 0506 	ands.w	r5, r5, #6
 8023af0:	d106      	bne.n	8023b00 <_printf_common+0x48>
 8023af2:	f104 0a19 	add.w	sl, r4, #25
 8023af6:	68e3      	ldr	r3, [r4, #12]
 8023af8:	6832      	ldr	r2, [r6, #0]
 8023afa:	1a9b      	subs	r3, r3, r2
 8023afc:	42ab      	cmp	r3, r5
 8023afe:	dc26      	bgt.n	8023b4e <_printf_common+0x96>
 8023b00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023b04:	6822      	ldr	r2, [r4, #0]
 8023b06:	3b00      	subs	r3, #0
 8023b08:	bf18      	it	ne
 8023b0a:	2301      	movne	r3, #1
 8023b0c:	0692      	lsls	r2, r2, #26
 8023b0e:	d42b      	bmi.n	8023b68 <_printf_common+0xb0>
 8023b10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023b14:	4641      	mov	r1, r8
 8023b16:	4638      	mov	r0, r7
 8023b18:	47c8      	blx	r9
 8023b1a:	3001      	adds	r0, #1
 8023b1c:	d01e      	beq.n	8023b5c <_printf_common+0xa4>
 8023b1e:	6823      	ldr	r3, [r4, #0]
 8023b20:	6922      	ldr	r2, [r4, #16]
 8023b22:	f003 0306 	and.w	r3, r3, #6
 8023b26:	2b04      	cmp	r3, #4
 8023b28:	bf02      	ittt	eq
 8023b2a:	68e5      	ldreq	r5, [r4, #12]
 8023b2c:	6833      	ldreq	r3, [r6, #0]
 8023b2e:	1aed      	subeq	r5, r5, r3
 8023b30:	68a3      	ldr	r3, [r4, #8]
 8023b32:	bf0c      	ite	eq
 8023b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023b38:	2500      	movne	r5, #0
 8023b3a:	4293      	cmp	r3, r2
 8023b3c:	bfc4      	itt	gt
 8023b3e:	1a9b      	subgt	r3, r3, r2
 8023b40:	18ed      	addgt	r5, r5, r3
 8023b42:	2600      	movs	r6, #0
 8023b44:	341a      	adds	r4, #26
 8023b46:	42b5      	cmp	r5, r6
 8023b48:	d11a      	bne.n	8023b80 <_printf_common+0xc8>
 8023b4a:	2000      	movs	r0, #0
 8023b4c:	e008      	b.n	8023b60 <_printf_common+0xa8>
 8023b4e:	2301      	movs	r3, #1
 8023b50:	4652      	mov	r2, sl
 8023b52:	4641      	mov	r1, r8
 8023b54:	4638      	mov	r0, r7
 8023b56:	47c8      	blx	r9
 8023b58:	3001      	adds	r0, #1
 8023b5a:	d103      	bne.n	8023b64 <_printf_common+0xac>
 8023b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8023b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b64:	3501      	adds	r5, #1
 8023b66:	e7c6      	b.n	8023af6 <_printf_common+0x3e>
 8023b68:	18e1      	adds	r1, r4, r3
 8023b6a:	1c5a      	adds	r2, r3, #1
 8023b6c:	2030      	movs	r0, #48	@ 0x30
 8023b6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023b72:	4422      	add	r2, r4
 8023b74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023b78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023b7c:	3302      	adds	r3, #2
 8023b7e:	e7c7      	b.n	8023b10 <_printf_common+0x58>
 8023b80:	2301      	movs	r3, #1
 8023b82:	4622      	mov	r2, r4
 8023b84:	4641      	mov	r1, r8
 8023b86:	4638      	mov	r0, r7
 8023b88:	47c8      	blx	r9
 8023b8a:	3001      	adds	r0, #1
 8023b8c:	d0e6      	beq.n	8023b5c <_printf_common+0xa4>
 8023b8e:	3601      	adds	r6, #1
 8023b90:	e7d9      	b.n	8023b46 <_printf_common+0x8e>
	...

08023b94 <_printf_i>:
 8023b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023b98:	7e0f      	ldrb	r7, [r1, #24]
 8023b9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023b9c:	2f78      	cmp	r7, #120	@ 0x78
 8023b9e:	4691      	mov	r9, r2
 8023ba0:	4680      	mov	r8, r0
 8023ba2:	460c      	mov	r4, r1
 8023ba4:	469a      	mov	sl, r3
 8023ba6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023baa:	d807      	bhi.n	8023bbc <_printf_i+0x28>
 8023bac:	2f62      	cmp	r7, #98	@ 0x62
 8023bae:	d80a      	bhi.n	8023bc6 <_printf_i+0x32>
 8023bb0:	2f00      	cmp	r7, #0
 8023bb2:	f000 80d1 	beq.w	8023d58 <_printf_i+0x1c4>
 8023bb6:	2f58      	cmp	r7, #88	@ 0x58
 8023bb8:	f000 80b8 	beq.w	8023d2c <_printf_i+0x198>
 8023bbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023bc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023bc4:	e03a      	b.n	8023c3c <_printf_i+0xa8>
 8023bc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023bca:	2b15      	cmp	r3, #21
 8023bcc:	d8f6      	bhi.n	8023bbc <_printf_i+0x28>
 8023bce:	a101      	add	r1, pc, #4	@ (adr r1, 8023bd4 <_printf_i+0x40>)
 8023bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023bd4:	08023c2d 	.word	0x08023c2d
 8023bd8:	08023c41 	.word	0x08023c41
 8023bdc:	08023bbd 	.word	0x08023bbd
 8023be0:	08023bbd 	.word	0x08023bbd
 8023be4:	08023bbd 	.word	0x08023bbd
 8023be8:	08023bbd 	.word	0x08023bbd
 8023bec:	08023c41 	.word	0x08023c41
 8023bf0:	08023bbd 	.word	0x08023bbd
 8023bf4:	08023bbd 	.word	0x08023bbd
 8023bf8:	08023bbd 	.word	0x08023bbd
 8023bfc:	08023bbd 	.word	0x08023bbd
 8023c00:	08023d3f 	.word	0x08023d3f
 8023c04:	08023c6b 	.word	0x08023c6b
 8023c08:	08023cf9 	.word	0x08023cf9
 8023c0c:	08023bbd 	.word	0x08023bbd
 8023c10:	08023bbd 	.word	0x08023bbd
 8023c14:	08023d61 	.word	0x08023d61
 8023c18:	08023bbd 	.word	0x08023bbd
 8023c1c:	08023c6b 	.word	0x08023c6b
 8023c20:	08023bbd 	.word	0x08023bbd
 8023c24:	08023bbd 	.word	0x08023bbd
 8023c28:	08023d01 	.word	0x08023d01
 8023c2c:	6833      	ldr	r3, [r6, #0]
 8023c2e:	1d1a      	adds	r2, r3, #4
 8023c30:	681b      	ldr	r3, [r3, #0]
 8023c32:	6032      	str	r2, [r6, #0]
 8023c34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023c38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023c3c:	2301      	movs	r3, #1
 8023c3e:	e09c      	b.n	8023d7a <_printf_i+0x1e6>
 8023c40:	6833      	ldr	r3, [r6, #0]
 8023c42:	6820      	ldr	r0, [r4, #0]
 8023c44:	1d19      	adds	r1, r3, #4
 8023c46:	6031      	str	r1, [r6, #0]
 8023c48:	0606      	lsls	r6, r0, #24
 8023c4a:	d501      	bpl.n	8023c50 <_printf_i+0xbc>
 8023c4c:	681d      	ldr	r5, [r3, #0]
 8023c4e:	e003      	b.n	8023c58 <_printf_i+0xc4>
 8023c50:	0645      	lsls	r5, r0, #25
 8023c52:	d5fb      	bpl.n	8023c4c <_printf_i+0xb8>
 8023c54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023c58:	2d00      	cmp	r5, #0
 8023c5a:	da03      	bge.n	8023c64 <_printf_i+0xd0>
 8023c5c:	232d      	movs	r3, #45	@ 0x2d
 8023c5e:	426d      	negs	r5, r5
 8023c60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023c64:	4858      	ldr	r0, [pc, #352]	@ (8023dc8 <_printf_i+0x234>)
 8023c66:	230a      	movs	r3, #10
 8023c68:	e011      	b.n	8023c8e <_printf_i+0xfa>
 8023c6a:	6821      	ldr	r1, [r4, #0]
 8023c6c:	6833      	ldr	r3, [r6, #0]
 8023c6e:	0608      	lsls	r0, r1, #24
 8023c70:	f853 5b04 	ldr.w	r5, [r3], #4
 8023c74:	d402      	bmi.n	8023c7c <_printf_i+0xe8>
 8023c76:	0649      	lsls	r1, r1, #25
 8023c78:	bf48      	it	mi
 8023c7a:	b2ad      	uxthmi	r5, r5
 8023c7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8023c7e:	4852      	ldr	r0, [pc, #328]	@ (8023dc8 <_printf_i+0x234>)
 8023c80:	6033      	str	r3, [r6, #0]
 8023c82:	bf14      	ite	ne
 8023c84:	230a      	movne	r3, #10
 8023c86:	2308      	moveq	r3, #8
 8023c88:	2100      	movs	r1, #0
 8023c8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023c8e:	6866      	ldr	r6, [r4, #4]
 8023c90:	60a6      	str	r6, [r4, #8]
 8023c92:	2e00      	cmp	r6, #0
 8023c94:	db05      	blt.n	8023ca2 <_printf_i+0x10e>
 8023c96:	6821      	ldr	r1, [r4, #0]
 8023c98:	432e      	orrs	r6, r5
 8023c9a:	f021 0104 	bic.w	r1, r1, #4
 8023c9e:	6021      	str	r1, [r4, #0]
 8023ca0:	d04b      	beq.n	8023d3a <_printf_i+0x1a6>
 8023ca2:	4616      	mov	r6, r2
 8023ca4:	fbb5 f1f3 	udiv	r1, r5, r3
 8023ca8:	fb03 5711 	mls	r7, r3, r1, r5
 8023cac:	5dc7      	ldrb	r7, [r0, r7]
 8023cae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023cb2:	462f      	mov	r7, r5
 8023cb4:	42bb      	cmp	r3, r7
 8023cb6:	460d      	mov	r5, r1
 8023cb8:	d9f4      	bls.n	8023ca4 <_printf_i+0x110>
 8023cba:	2b08      	cmp	r3, #8
 8023cbc:	d10b      	bne.n	8023cd6 <_printf_i+0x142>
 8023cbe:	6823      	ldr	r3, [r4, #0]
 8023cc0:	07df      	lsls	r7, r3, #31
 8023cc2:	d508      	bpl.n	8023cd6 <_printf_i+0x142>
 8023cc4:	6923      	ldr	r3, [r4, #16]
 8023cc6:	6861      	ldr	r1, [r4, #4]
 8023cc8:	4299      	cmp	r1, r3
 8023cca:	bfde      	ittt	le
 8023ccc:	2330      	movle	r3, #48	@ 0x30
 8023cce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023cd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023cd6:	1b92      	subs	r2, r2, r6
 8023cd8:	6122      	str	r2, [r4, #16]
 8023cda:	f8cd a000 	str.w	sl, [sp]
 8023cde:	464b      	mov	r3, r9
 8023ce0:	aa03      	add	r2, sp, #12
 8023ce2:	4621      	mov	r1, r4
 8023ce4:	4640      	mov	r0, r8
 8023ce6:	f7ff fee7 	bl	8023ab8 <_printf_common>
 8023cea:	3001      	adds	r0, #1
 8023cec:	d14a      	bne.n	8023d84 <_printf_i+0x1f0>
 8023cee:	f04f 30ff 	mov.w	r0, #4294967295
 8023cf2:	b004      	add	sp, #16
 8023cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023cf8:	6823      	ldr	r3, [r4, #0]
 8023cfa:	f043 0320 	orr.w	r3, r3, #32
 8023cfe:	6023      	str	r3, [r4, #0]
 8023d00:	4832      	ldr	r0, [pc, #200]	@ (8023dcc <_printf_i+0x238>)
 8023d02:	2778      	movs	r7, #120	@ 0x78
 8023d04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023d08:	6823      	ldr	r3, [r4, #0]
 8023d0a:	6831      	ldr	r1, [r6, #0]
 8023d0c:	061f      	lsls	r7, r3, #24
 8023d0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8023d12:	d402      	bmi.n	8023d1a <_printf_i+0x186>
 8023d14:	065f      	lsls	r7, r3, #25
 8023d16:	bf48      	it	mi
 8023d18:	b2ad      	uxthmi	r5, r5
 8023d1a:	6031      	str	r1, [r6, #0]
 8023d1c:	07d9      	lsls	r1, r3, #31
 8023d1e:	bf44      	itt	mi
 8023d20:	f043 0320 	orrmi.w	r3, r3, #32
 8023d24:	6023      	strmi	r3, [r4, #0]
 8023d26:	b11d      	cbz	r5, 8023d30 <_printf_i+0x19c>
 8023d28:	2310      	movs	r3, #16
 8023d2a:	e7ad      	b.n	8023c88 <_printf_i+0xf4>
 8023d2c:	4826      	ldr	r0, [pc, #152]	@ (8023dc8 <_printf_i+0x234>)
 8023d2e:	e7e9      	b.n	8023d04 <_printf_i+0x170>
 8023d30:	6823      	ldr	r3, [r4, #0]
 8023d32:	f023 0320 	bic.w	r3, r3, #32
 8023d36:	6023      	str	r3, [r4, #0]
 8023d38:	e7f6      	b.n	8023d28 <_printf_i+0x194>
 8023d3a:	4616      	mov	r6, r2
 8023d3c:	e7bd      	b.n	8023cba <_printf_i+0x126>
 8023d3e:	6833      	ldr	r3, [r6, #0]
 8023d40:	6825      	ldr	r5, [r4, #0]
 8023d42:	6961      	ldr	r1, [r4, #20]
 8023d44:	1d18      	adds	r0, r3, #4
 8023d46:	6030      	str	r0, [r6, #0]
 8023d48:	062e      	lsls	r6, r5, #24
 8023d4a:	681b      	ldr	r3, [r3, #0]
 8023d4c:	d501      	bpl.n	8023d52 <_printf_i+0x1be>
 8023d4e:	6019      	str	r1, [r3, #0]
 8023d50:	e002      	b.n	8023d58 <_printf_i+0x1c4>
 8023d52:	0668      	lsls	r0, r5, #25
 8023d54:	d5fb      	bpl.n	8023d4e <_printf_i+0x1ba>
 8023d56:	8019      	strh	r1, [r3, #0]
 8023d58:	2300      	movs	r3, #0
 8023d5a:	6123      	str	r3, [r4, #16]
 8023d5c:	4616      	mov	r6, r2
 8023d5e:	e7bc      	b.n	8023cda <_printf_i+0x146>
 8023d60:	6833      	ldr	r3, [r6, #0]
 8023d62:	1d1a      	adds	r2, r3, #4
 8023d64:	6032      	str	r2, [r6, #0]
 8023d66:	681e      	ldr	r6, [r3, #0]
 8023d68:	6862      	ldr	r2, [r4, #4]
 8023d6a:	2100      	movs	r1, #0
 8023d6c:	4630      	mov	r0, r6
 8023d6e:	f7dc fadf 	bl	8000330 <memchr>
 8023d72:	b108      	cbz	r0, 8023d78 <_printf_i+0x1e4>
 8023d74:	1b80      	subs	r0, r0, r6
 8023d76:	6060      	str	r0, [r4, #4]
 8023d78:	6863      	ldr	r3, [r4, #4]
 8023d7a:	6123      	str	r3, [r4, #16]
 8023d7c:	2300      	movs	r3, #0
 8023d7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023d82:	e7aa      	b.n	8023cda <_printf_i+0x146>
 8023d84:	6923      	ldr	r3, [r4, #16]
 8023d86:	4632      	mov	r2, r6
 8023d88:	4649      	mov	r1, r9
 8023d8a:	4640      	mov	r0, r8
 8023d8c:	47d0      	blx	sl
 8023d8e:	3001      	adds	r0, #1
 8023d90:	d0ad      	beq.n	8023cee <_printf_i+0x15a>
 8023d92:	6823      	ldr	r3, [r4, #0]
 8023d94:	079b      	lsls	r3, r3, #30
 8023d96:	d413      	bmi.n	8023dc0 <_printf_i+0x22c>
 8023d98:	68e0      	ldr	r0, [r4, #12]
 8023d9a:	9b03      	ldr	r3, [sp, #12]
 8023d9c:	4298      	cmp	r0, r3
 8023d9e:	bfb8      	it	lt
 8023da0:	4618      	movlt	r0, r3
 8023da2:	e7a6      	b.n	8023cf2 <_printf_i+0x15e>
 8023da4:	2301      	movs	r3, #1
 8023da6:	4632      	mov	r2, r6
 8023da8:	4649      	mov	r1, r9
 8023daa:	4640      	mov	r0, r8
 8023dac:	47d0      	blx	sl
 8023dae:	3001      	adds	r0, #1
 8023db0:	d09d      	beq.n	8023cee <_printf_i+0x15a>
 8023db2:	3501      	adds	r5, #1
 8023db4:	68e3      	ldr	r3, [r4, #12]
 8023db6:	9903      	ldr	r1, [sp, #12]
 8023db8:	1a5b      	subs	r3, r3, r1
 8023dba:	42ab      	cmp	r3, r5
 8023dbc:	dcf2      	bgt.n	8023da4 <_printf_i+0x210>
 8023dbe:	e7eb      	b.n	8023d98 <_printf_i+0x204>
 8023dc0:	2500      	movs	r5, #0
 8023dc2:	f104 0619 	add.w	r6, r4, #25
 8023dc6:	e7f5      	b.n	8023db4 <_printf_i+0x220>
 8023dc8:	08035486 	.word	0x08035486
 8023dcc:	08035497 	.word	0x08035497

08023dd0 <__sflush_r>:
 8023dd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023dd8:	0716      	lsls	r6, r2, #28
 8023dda:	4605      	mov	r5, r0
 8023ddc:	460c      	mov	r4, r1
 8023dde:	d454      	bmi.n	8023e8a <__sflush_r+0xba>
 8023de0:	684b      	ldr	r3, [r1, #4]
 8023de2:	2b00      	cmp	r3, #0
 8023de4:	dc02      	bgt.n	8023dec <__sflush_r+0x1c>
 8023de6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023de8:	2b00      	cmp	r3, #0
 8023dea:	dd48      	ble.n	8023e7e <__sflush_r+0xae>
 8023dec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023dee:	2e00      	cmp	r6, #0
 8023df0:	d045      	beq.n	8023e7e <__sflush_r+0xae>
 8023df2:	2300      	movs	r3, #0
 8023df4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023df8:	682f      	ldr	r7, [r5, #0]
 8023dfa:	6a21      	ldr	r1, [r4, #32]
 8023dfc:	602b      	str	r3, [r5, #0]
 8023dfe:	d030      	beq.n	8023e62 <__sflush_r+0x92>
 8023e00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023e02:	89a3      	ldrh	r3, [r4, #12]
 8023e04:	0759      	lsls	r1, r3, #29
 8023e06:	d505      	bpl.n	8023e14 <__sflush_r+0x44>
 8023e08:	6863      	ldr	r3, [r4, #4]
 8023e0a:	1ad2      	subs	r2, r2, r3
 8023e0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023e0e:	b10b      	cbz	r3, 8023e14 <__sflush_r+0x44>
 8023e10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023e12:	1ad2      	subs	r2, r2, r3
 8023e14:	2300      	movs	r3, #0
 8023e16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023e18:	6a21      	ldr	r1, [r4, #32]
 8023e1a:	4628      	mov	r0, r5
 8023e1c:	47b0      	blx	r6
 8023e1e:	1c43      	adds	r3, r0, #1
 8023e20:	89a3      	ldrh	r3, [r4, #12]
 8023e22:	d106      	bne.n	8023e32 <__sflush_r+0x62>
 8023e24:	6829      	ldr	r1, [r5, #0]
 8023e26:	291d      	cmp	r1, #29
 8023e28:	d82b      	bhi.n	8023e82 <__sflush_r+0xb2>
 8023e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8023ed4 <__sflush_r+0x104>)
 8023e2c:	40ca      	lsrs	r2, r1
 8023e2e:	07d6      	lsls	r6, r2, #31
 8023e30:	d527      	bpl.n	8023e82 <__sflush_r+0xb2>
 8023e32:	2200      	movs	r2, #0
 8023e34:	6062      	str	r2, [r4, #4]
 8023e36:	04d9      	lsls	r1, r3, #19
 8023e38:	6922      	ldr	r2, [r4, #16]
 8023e3a:	6022      	str	r2, [r4, #0]
 8023e3c:	d504      	bpl.n	8023e48 <__sflush_r+0x78>
 8023e3e:	1c42      	adds	r2, r0, #1
 8023e40:	d101      	bne.n	8023e46 <__sflush_r+0x76>
 8023e42:	682b      	ldr	r3, [r5, #0]
 8023e44:	b903      	cbnz	r3, 8023e48 <__sflush_r+0x78>
 8023e46:	6560      	str	r0, [r4, #84]	@ 0x54
 8023e48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023e4a:	602f      	str	r7, [r5, #0]
 8023e4c:	b1b9      	cbz	r1, 8023e7e <__sflush_r+0xae>
 8023e4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023e52:	4299      	cmp	r1, r3
 8023e54:	d002      	beq.n	8023e5c <__sflush_r+0x8c>
 8023e56:	4628      	mov	r0, r5
 8023e58:	f7ff fca2 	bl	80237a0 <_free_r>
 8023e5c:	2300      	movs	r3, #0
 8023e5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023e60:	e00d      	b.n	8023e7e <__sflush_r+0xae>
 8023e62:	2301      	movs	r3, #1
 8023e64:	4628      	mov	r0, r5
 8023e66:	47b0      	blx	r6
 8023e68:	4602      	mov	r2, r0
 8023e6a:	1c50      	adds	r0, r2, #1
 8023e6c:	d1c9      	bne.n	8023e02 <__sflush_r+0x32>
 8023e6e:	682b      	ldr	r3, [r5, #0]
 8023e70:	2b00      	cmp	r3, #0
 8023e72:	d0c6      	beq.n	8023e02 <__sflush_r+0x32>
 8023e74:	2b1d      	cmp	r3, #29
 8023e76:	d001      	beq.n	8023e7c <__sflush_r+0xac>
 8023e78:	2b16      	cmp	r3, #22
 8023e7a:	d11e      	bne.n	8023eba <__sflush_r+0xea>
 8023e7c:	602f      	str	r7, [r5, #0]
 8023e7e:	2000      	movs	r0, #0
 8023e80:	e022      	b.n	8023ec8 <__sflush_r+0xf8>
 8023e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e86:	b21b      	sxth	r3, r3
 8023e88:	e01b      	b.n	8023ec2 <__sflush_r+0xf2>
 8023e8a:	690f      	ldr	r7, [r1, #16]
 8023e8c:	2f00      	cmp	r7, #0
 8023e8e:	d0f6      	beq.n	8023e7e <__sflush_r+0xae>
 8023e90:	0793      	lsls	r3, r2, #30
 8023e92:	680e      	ldr	r6, [r1, #0]
 8023e94:	bf08      	it	eq
 8023e96:	694b      	ldreq	r3, [r1, #20]
 8023e98:	600f      	str	r7, [r1, #0]
 8023e9a:	bf18      	it	ne
 8023e9c:	2300      	movne	r3, #0
 8023e9e:	eba6 0807 	sub.w	r8, r6, r7
 8023ea2:	608b      	str	r3, [r1, #8]
 8023ea4:	f1b8 0f00 	cmp.w	r8, #0
 8023ea8:	dde9      	ble.n	8023e7e <__sflush_r+0xae>
 8023eaa:	6a21      	ldr	r1, [r4, #32]
 8023eac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023eae:	4643      	mov	r3, r8
 8023eb0:	463a      	mov	r2, r7
 8023eb2:	4628      	mov	r0, r5
 8023eb4:	47b0      	blx	r6
 8023eb6:	2800      	cmp	r0, #0
 8023eb8:	dc08      	bgt.n	8023ecc <__sflush_r+0xfc>
 8023eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023ec2:	81a3      	strh	r3, [r4, #12]
 8023ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8023ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023ecc:	4407      	add	r7, r0
 8023ece:	eba8 0800 	sub.w	r8, r8, r0
 8023ed2:	e7e7      	b.n	8023ea4 <__sflush_r+0xd4>
 8023ed4:	20400001 	.word	0x20400001

08023ed8 <_fflush_r>:
 8023ed8:	b538      	push	{r3, r4, r5, lr}
 8023eda:	690b      	ldr	r3, [r1, #16]
 8023edc:	4605      	mov	r5, r0
 8023ede:	460c      	mov	r4, r1
 8023ee0:	b913      	cbnz	r3, 8023ee8 <_fflush_r+0x10>
 8023ee2:	2500      	movs	r5, #0
 8023ee4:	4628      	mov	r0, r5
 8023ee6:	bd38      	pop	{r3, r4, r5, pc}
 8023ee8:	b118      	cbz	r0, 8023ef2 <_fflush_r+0x1a>
 8023eea:	6a03      	ldr	r3, [r0, #32]
 8023eec:	b90b      	cbnz	r3, 8023ef2 <_fflush_r+0x1a>
 8023eee:	f7ff fa55 	bl	802339c <__sinit>
 8023ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023ef6:	2b00      	cmp	r3, #0
 8023ef8:	d0f3      	beq.n	8023ee2 <_fflush_r+0xa>
 8023efa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023efc:	07d0      	lsls	r0, r2, #31
 8023efe:	d404      	bmi.n	8023f0a <_fflush_r+0x32>
 8023f00:	0599      	lsls	r1, r3, #22
 8023f02:	d402      	bmi.n	8023f0a <_fflush_r+0x32>
 8023f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023f06:	f7ff fc32 	bl	802376e <__retarget_lock_acquire_recursive>
 8023f0a:	4628      	mov	r0, r5
 8023f0c:	4621      	mov	r1, r4
 8023f0e:	f7ff ff5f 	bl	8023dd0 <__sflush_r>
 8023f12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023f14:	07da      	lsls	r2, r3, #31
 8023f16:	4605      	mov	r5, r0
 8023f18:	d4e4      	bmi.n	8023ee4 <_fflush_r+0xc>
 8023f1a:	89a3      	ldrh	r3, [r4, #12]
 8023f1c:	059b      	lsls	r3, r3, #22
 8023f1e:	d4e1      	bmi.n	8023ee4 <_fflush_r+0xc>
 8023f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023f22:	f7ff fc25 	bl	8023770 <__retarget_lock_release_recursive>
 8023f26:	e7dd      	b.n	8023ee4 <_fflush_r+0xc>

08023f28 <_putc_r>:
 8023f28:	b570      	push	{r4, r5, r6, lr}
 8023f2a:	460d      	mov	r5, r1
 8023f2c:	4614      	mov	r4, r2
 8023f2e:	4606      	mov	r6, r0
 8023f30:	b118      	cbz	r0, 8023f3a <_putc_r+0x12>
 8023f32:	6a03      	ldr	r3, [r0, #32]
 8023f34:	b90b      	cbnz	r3, 8023f3a <_putc_r+0x12>
 8023f36:	f7ff fa31 	bl	802339c <__sinit>
 8023f3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023f3c:	07d8      	lsls	r0, r3, #31
 8023f3e:	d405      	bmi.n	8023f4c <_putc_r+0x24>
 8023f40:	89a3      	ldrh	r3, [r4, #12]
 8023f42:	0599      	lsls	r1, r3, #22
 8023f44:	d402      	bmi.n	8023f4c <_putc_r+0x24>
 8023f46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023f48:	f7ff fc11 	bl	802376e <__retarget_lock_acquire_recursive>
 8023f4c:	68a3      	ldr	r3, [r4, #8]
 8023f4e:	3b01      	subs	r3, #1
 8023f50:	2b00      	cmp	r3, #0
 8023f52:	60a3      	str	r3, [r4, #8]
 8023f54:	da05      	bge.n	8023f62 <_putc_r+0x3a>
 8023f56:	69a2      	ldr	r2, [r4, #24]
 8023f58:	4293      	cmp	r3, r2
 8023f5a:	db12      	blt.n	8023f82 <_putc_r+0x5a>
 8023f5c:	b2eb      	uxtb	r3, r5
 8023f5e:	2b0a      	cmp	r3, #10
 8023f60:	d00f      	beq.n	8023f82 <_putc_r+0x5a>
 8023f62:	6823      	ldr	r3, [r4, #0]
 8023f64:	1c5a      	adds	r2, r3, #1
 8023f66:	6022      	str	r2, [r4, #0]
 8023f68:	701d      	strb	r5, [r3, #0]
 8023f6a:	b2ed      	uxtb	r5, r5
 8023f6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023f6e:	07da      	lsls	r2, r3, #31
 8023f70:	d405      	bmi.n	8023f7e <_putc_r+0x56>
 8023f72:	89a3      	ldrh	r3, [r4, #12]
 8023f74:	059b      	lsls	r3, r3, #22
 8023f76:	d402      	bmi.n	8023f7e <_putc_r+0x56>
 8023f78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023f7a:	f7ff fbf9 	bl	8023770 <__retarget_lock_release_recursive>
 8023f7e:	4628      	mov	r0, r5
 8023f80:	bd70      	pop	{r4, r5, r6, pc}
 8023f82:	4629      	mov	r1, r5
 8023f84:	4622      	mov	r2, r4
 8023f86:	4630      	mov	r0, r6
 8023f88:	f000 f802 	bl	8023f90 <__swbuf_r>
 8023f8c:	4605      	mov	r5, r0
 8023f8e:	e7ed      	b.n	8023f6c <_putc_r+0x44>

08023f90 <__swbuf_r>:
 8023f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f92:	460e      	mov	r6, r1
 8023f94:	4614      	mov	r4, r2
 8023f96:	4605      	mov	r5, r0
 8023f98:	b118      	cbz	r0, 8023fa2 <__swbuf_r+0x12>
 8023f9a:	6a03      	ldr	r3, [r0, #32]
 8023f9c:	b90b      	cbnz	r3, 8023fa2 <__swbuf_r+0x12>
 8023f9e:	f7ff f9fd 	bl	802339c <__sinit>
 8023fa2:	69a3      	ldr	r3, [r4, #24]
 8023fa4:	60a3      	str	r3, [r4, #8]
 8023fa6:	89a3      	ldrh	r3, [r4, #12]
 8023fa8:	071a      	lsls	r2, r3, #28
 8023faa:	d501      	bpl.n	8023fb0 <__swbuf_r+0x20>
 8023fac:	6923      	ldr	r3, [r4, #16]
 8023fae:	b943      	cbnz	r3, 8023fc2 <__swbuf_r+0x32>
 8023fb0:	4621      	mov	r1, r4
 8023fb2:	4628      	mov	r0, r5
 8023fb4:	f000 f82a 	bl	802400c <__swsetup_r>
 8023fb8:	b118      	cbz	r0, 8023fc2 <__swbuf_r+0x32>
 8023fba:	f04f 37ff 	mov.w	r7, #4294967295
 8023fbe:	4638      	mov	r0, r7
 8023fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023fc2:	6823      	ldr	r3, [r4, #0]
 8023fc4:	6922      	ldr	r2, [r4, #16]
 8023fc6:	1a98      	subs	r0, r3, r2
 8023fc8:	6963      	ldr	r3, [r4, #20]
 8023fca:	b2f6      	uxtb	r6, r6
 8023fcc:	4283      	cmp	r3, r0
 8023fce:	4637      	mov	r7, r6
 8023fd0:	dc05      	bgt.n	8023fde <__swbuf_r+0x4e>
 8023fd2:	4621      	mov	r1, r4
 8023fd4:	4628      	mov	r0, r5
 8023fd6:	f7ff ff7f 	bl	8023ed8 <_fflush_r>
 8023fda:	2800      	cmp	r0, #0
 8023fdc:	d1ed      	bne.n	8023fba <__swbuf_r+0x2a>
 8023fde:	68a3      	ldr	r3, [r4, #8]
 8023fe0:	3b01      	subs	r3, #1
 8023fe2:	60a3      	str	r3, [r4, #8]
 8023fe4:	6823      	ldr	r3, [r4, #0]
 8023fe6:	1c5a      	adds	r2, r3, #1
 8023fe8:	6022      	str	r2, [r4, #0]
 8023fea:	701e      	strb	r6, [r3, #0]
 8023fec:	6962      	ldr	r2, [r4, #20]
 8023fee:	1c43      	adds	r3, r0, #1
 8023ff0:	429a      	cmp	r2, r3
 8023ff2:	d004      	beq.n	8023ffe <__swbuf_r+0x6e>
 8023ff4:	89a3      	ldrh	r3, [r4, #12]
 8023ff6:	07db      	lsls	r3, r3, #31
 8023ff8:	d5e1      	bpl.n	8023fbe <__swbuf_r+0x2e>
 8023ffa:	2e0a      	cmp	r6, #10
 8023ffc:	d1df      	bne.n	8023fbe <__swbuf_r+0x2e>
 8023ffe:	4621      	mov	r1, r4
 8024000:	4628      	mov	r0, r5
 8024002:	f7ff ff69 	bl	8023ed8 <_fflush_r>
 8024006:	2800      	cmp	r0, #0
 8024008:	d0d9      	beq.n	8023fbe <__swbuf_r+0x2e>
 802400a:	e7d6      	b.n	8023fba <__swbuf_r+0x2a>

0802400c <__swsetup_r>:
 802400c:	b538      	push	{r3, r4, r5, lr}
 802400e:	4b29      	ldr	r3, [pc, #164]	@ (80240b4 <__swsetup_r+0xa8>)
 8024010:	4605      	mov	r5, r0
 8024012:	6818      	ldr	r0, [r3, #0]
 8024014:	460c      	mov	r4, r1
 8024016:	b118      	cbz	r0, 8024020 <__swsetup_r+0x14>
 8024018:	6a03      	ldr	r3, [r0, #32]
 802401a:	b90b      	cbnz	r3, 8024020 <__swsetup_r+0x14>
 802401c:	f7ff f9be 	bl	802339c <__sinit>
 8024020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024024:	0719      	lsls	r1, r3, #28
 8024026:	d422      	bmi.n	802406e <__swsetup_r+0x62>
 8024028:	06da      	lsls	r2, r3, #27
 802402a:	d407      	bmi.n	802403c <__swsetup_r+0x30>
 802402c:	2209      	movs	r2, #9
 802402e:	602a      	str	r2, [r5, #0]
 8024030:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8024034:	81a3      	strh	r3, [r4, #12]
 8024036:	f04f 30ff 	mov.w	r0, #4294967295
 802403a:	e033      	b.n	80240a4 <__swsetup_r+0x98>
 802403c:	0758      	lsls	r0, r3, #29
 802403e:	d512      	bpl.n	8024066 <__swsetup_r+0x5a>
 8024040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8024042:	b141      	cbz	r1, 8024056 <__swsetup_r+0x4a>
 8024044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8024048:	4299      	cmp	r1, r3
 802404a:	d002      	beq.n	8024052 <__swsetup_r+0x46>
 802404c:	4628      	mov	r0, r5
 802404e:	f7ff fba7 	bl	80237a0 <_free_r>
 8024052:	2300      	movs	r3, #0
 8024054:	6363      	str	r3, [r4, #52]	@ 0x34
 8024056:	89a3      	ldrh	r3, [r4, #12]
 8024058:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 802405c:	81a3      	strh	r3, [r4, #12]
 802405e:	2300      	movs	r3, #0
 8024060:	6063      	str	r3, [r4, #4]
 8024062:	6923      	ldr	r3, [r4, #16]
 8024064:	6023      	str	r3, [r4, #0]
 8024066:	89a3      	ldrh	r3, [r4, #12]
 8024068:	f043 0308 	orr.w	r3, r3, #8
 802406c:	81a3      	strh	r3, [r4, #12]
 802406e:	6923      	ldr	r3, [r4, #16]
 8024070:	b94b      	cbnz	r3, 8024086 <__swsetup_r+0x7a>
 8024072:	89a3      	ldrh	r3, [r4, #12]
 8024074:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024078:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802407c:	d003      	beq.n	8024086 <__swsetup_r+0x7a>
 802407e:	4621      	mov	r1, r4
 8024080:	4628      	mov	r0, r5
 8024082:	f000 f83f 	bl	8024104 <__smakebuf_r>
 8024086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802408a:	f013 0201 	ands.w	r2, r3, #1
 802408e:	d00a      	beq.n	80240a6 <__swsetup_r+0x9a>
 8024090:	2200      	movs	r2, #0
 8024092:	60a2      	str	r2, [r4, #8]
 8024094:	6962      	ldr	r2, [r4, #20]
 8024096:	4252      	negs	r2, r2
 8024098:	61a2      	str	r2, [r4, #24]
 802409a:	6922      	ldr	r2, [r4, #16]
 802409c:	b942      	cbnz	r2, 80240b0 <__swsetup_r+0xa4>
 802409e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80240a2:	d1c5      	bne.n	8024030 <__swsetup_r+0x24>
 80240a4:	bd38      	pop	{r3, r4, r5, pc}
 80240a6:	0799      	lsls	r1, r3, #30
 80240a8:	bf58      	it	pl
 80240aa:	6962      	ldrpl	r2, [r4, #20]
 80240ac:	60a2      	str	r2, [r4, #8]
 80240ae:	e7f4      	b.n	802409a <__swsetup_r+0x8e>
 80240b0:	2000      	movs	r0, #0
 80240b2:	e7f7      	b.n	80240a4 <__swsetup_r+0x98>
 80240b4:	24000834 	.word	0x24000834

080240b8 <__swhatbuf_r>:
 80240b8:	b570      	push	{r4, r5, r6, lr}
 80240ba:	460c      	mov	r4, r1
 80240bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80240c0:	2900      	cmp	r1, #0
 80240c2:	b096      	sub	sp, #88	@ 0x58
 80240c4:	4615      	mov	r5, r2
 80240c6:	461e      	mov	r6, r3
 80240c8:	da0d      	bge.n	80240e6 <__swhatbuf_r+0x2e>
 80240ca:	89a3      	ldrh	r3, [r4, #12]
 80240cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80240d0:	f04f 0100 	mov.w	r1, #0
 80240d4:	bf14      	ite	ne
 80240d6:	2340      	movne	r3, #64	@ 0x40
 80240d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80240dc:	2000      	movs	r0, #0
 80240de:	6031      	str	r1, [r6, #0]
 80240e0:	602b      	str	r3, [r5, #0]
 80240e2:	b016      	add	sp, #88	@ 0x58
 80240e4:	bd70      	pop	{r4, r5, r6, pc}
 80240e6:	466a      	mov	r2, sp
 80240e8:	f000 f848 	bl	802417c <_fstat_r>
 80240ec:	2800      	cmp	r0, #0
 80240ee:	dbec      	blt.n	80240ca <__swhatbuf_r+0x12>
 80240f0:	9901      	ldr	r1, [sp, #4]
 80240f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80240f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80240fa:	4259      	negs	r1, r3
 80240fc:	4159      	adcs	r1, r3
 80240fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8024102:	e7eb      	b.n	80240dc <__swhatbuf_r+0x24>

08024104 <__smakebuf_r>:
 8024104:	898b      	ldrh	r3, [r1, #12]
 8024106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024108:	079d      	lsls	r5, r3, #30
 802410a:	4606      	mov	r6, r0
 802410c:	460c      	mov	r4, r1
 802410e:	d507      	bpl.n	8024120 <__smakebuf_r+0x1c>
 8024110:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024114:	6023      	str	r3, [r4, #0]
 8024116:	6123      	str	r3, [r4, #16]
 8024118:	2301      	movs	r3, #1
 802411a:	6163      	str	r3, [r4, #20]
 802411c:	b003      	add	sp, #12
 802411e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024120:	ab01      	add	r3, sp, #4
 8024122:	466a      	mov	r2, sp
 8024124:	f7ff ffc8 	bl	80240b8 <__swhatbuf_r>
 8024128:	9f00      	ldr	r7, [sp, #0]
 802412a:	4605      	mov	r5, r0
 802412c:	4639      	mov	r1, r7
 802412e:	4630      	mov	r0, r6
 8024130:	f7fe ff6a 	bl	8023008 <_malloc_r>
 8024134:	b948      	cbnz	r0, 802414a <__smakebuf_r+0x46>
 8024136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802413a:	059a      	lsls	r2, r3, #22
 802413c:	d4ee      	bmi.n	802411c <__smakebuf_r+0x18>
 802413e:	f023 0303 	bic.w	r3, r3, #3
 8024142:	f043 0302 	orr.w	r3, r3, #2
 8024146:	81a3      	strh	r3, [r4, #12]
 8024148:	e7e2      	b.n	8024110 <__smakebuf_r+0xc>
 802414a:	89a3      	ldrh	r3, [r4, #12]
 802414c:	6020      	str	r0, [r4, #0]
 802414e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024152:	81a3      	strh	r3, [r4, #12]
 8024154:	9b01      	ldr	r3, [sp, #4]
 8024156:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802415a:	b15b      	cbz	r3, 8024174 <__smakebuf_r+0x70>
 802415c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024160:	4630      	mov	r0, r6
 8024162:	f000 f81d 	bl	80241a0 <_isatty_r>
 8024166:	b128      	cbz	r0, 8024174 <__smakebuf_r+0x70>
 8024168:	89a3      	ldrh	r3, [r4, #12]
 802416a:	f023 0303 	bic.w	r3, r3, #3
 802416e:	f043 0301 	orr.w	r3, r3, #1
 8024172:	81a3      	strh	r3, [r4, #12]
 8024174:	89a3      	ldrh	r3, [r4, #12]
 8024176:	431d      	orrs	r5, r3
 8024178:	81a5      	strh	r5, [r4, #12]
 802417a:	e7cf      	b.n	802411c <__smakebuf_r+0x18>

0802417c <_fstat_r>:
 802417c:	b538      	push	{r3, r4, r5, lr}
 802417e:	4d07      	ldr	r5, [pc, #28]	@ (802419c <_fstat_r+0x20>)
 8024180:	2300      	movs	r3, #0
 8024182:	4604      	mov	r4, r0
 8024184:	4608      	mov	r0, r1
 8024186:	4611      	mov	r1, r2
 8024188:	602b      	str	r3, [r5, #0]
 802418a:	f7dc ff4e 	bl	800102a <_fstat>
 802418e:	1c43      	adds	r3, r0, #1
 8024190:	d102      	bne.n	8024198 <_fstat_r+0x1c>
 8024192:	682b      	ldr	r3, [r5, #0]
 8024194:	b103      	cbz	r3, 8024198 <_fstat_r+0x1c>
 8024196:	6023      	str	r3, [r4, #0]
 8024198:	bd38      	pop	{r3, r4, r5, pc}
 802419a:	bf00      	nop
 802419c:	240044a4 	.word	0x240044a4

080241a0 <_isatty_r>:
 80241a0:	b538      	push	{r3, r4, r5, lr}
 80241a2:	4d06      	ldr	r5, [pc, #24]	@ (80241bc <_isatty_r+0x1c>)
 80241a4:	2300      	movs	r3, #0
 80241a6:	4604      	mov	r4, r0
 80241a8:	4608      	mov	r0, r1
 80241aa:	602b      	str	r3, [r5, #0]
 80241ac:	f7dc ff4d 	bl	800104a <_isatty>
 80241b0:	1c43      	adds	r3, r0, #1
 80241b2:	d102      	bne.n	80241ba <_isatty_r+0x1a>
 80241b4:	682b      	ldr	r3, [r5, #0]
 80241b6:	b103      	cbz	r3, 80241ba <_isatty_r+0x1a>
 80241b8:	6023      	str	r3, [r4, #0]
 80241ba:	bd38      	pop	{r3, r4, r5, pc}
 80241bc:	240044a4 	.word	0x240044a4

080241c0 <_init>:
 80241c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241c2:	bf00      	nop
 80241c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80241c6:	bc08      	pop	{r3}
 80241c8:	469e      	mov	lr, r3
 80241ca:	4770      	bx	lr

080241cc <_fini>:
 80241cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241ce:	bf00      	nop
 80241d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80241d2:	bc08      	pop	{r3}
 80241d4:	469e      	mov	lr, r3
 80241d6:	4770      	bx	lr

080241d8 <__is_dualbank_veneer>:
 80241d8:	f85f f000 	ldr.w	pc, [pc]	@ 80241dc <__is_dualbank_veneer+0x4>
 80241dc:	24000885 	.word	0x24000885

080241e0 <__single_bank_swap_veneer>:
 80241e0:	f85f f000 	ldr.w	pc, [pc]	@ 80241e4 <__single_bank_swap_veneer+0x4>
 80241e4:	24000da9 	.word	0x24000da9

Disassembly of section .data:

24000000 <SystemCoreClock>:
24000000:	03d09000                                ....

24000004 <SystemD2Clock>:
24000004:	03d09000                                ....

24000008 <uwTickPrio>:
24000008:	00000010                                ....

2400000c <uwTickFreq>:
2400000c:	00000001                                ....

24000010 <mg_fs_packed>:
24000010:	08007e5b 08007ebd 08007fb9 0800801b     [~...~..........
24000020:	08008037 0800808d 080080a7 080080df     7...............
24000030:	080080f7 0800810d                       ........

24000038 <mg_fs_posix>:
24000038:	08008123 0800813d 08008155 0800816d     #...=...U...m...
24000048:	08008181 0800819b 080081b5 080081cf     ................
24000058:	080081e7 080081fd                       ........

24000060 <s_known_types>:
24000060:	08024a74 00000004 08024a7c 00000018     tJ......|J......
24000070:	08024a98 00000003 08024a7c 00000018     .J......|J......
24000080:	08024a9c 00000003 08024aa0 00000017     .J.......J......
24000090:	08024ab8 00000002 08024abc 0000001e     .J.......J......
240000a0:	08024adc 00000003 08024abc 0000001e     .J.......J......
240000b0:	08024ae0 00000003 08024ae4 00000009     .J.......J......
240000c0:	08024af0 00000003 08024af4 00000009     .J.......J......
240000d0:	08024b00 00000003 08024b04 0000000a     .K.......K......
240000e0:	08024b10 00000004 08024b04 0000000a     .K.......K......
240000f0:	08024b18 00000004 08024b20 00000009     .K...... K......
24000100:	08024b2c 00000003 08024b30 00000008     ,K......0K......
24000110:	08024b3c 00000003 08024b40 0000000d     <K......@K......
24000120:	08024b50 00000003 08024b54 00000019     PK......TK......
24000130:	08024b70 00000003 08024b74 0000000f     pK......tK......
24000140:	08024b84 00000003 08024b88 00000008     .K.......K......
24000150:	08024b94 00000003 08024b98 00000012     .K.......K......
24000160:	08024bac 00000003 08024bb0 00000018     .K.......K......
24000170:	08024bcc 00000002 08024bd0 00000010     .K.......K......
24000180:	08024be4 00000003 08024be8 0000000c     .K.......K......
24000190:	08024bf8 00000004 08024c00 00000010     .K.......L......
240001a0:	08024c14 00000003 08024c18 0000000f     .L.......L......
240001b0:	08024c28 00000003 08024c2c 0000000a     (L......,L......
240001c0:	08024c38 00000003 08024c3c 00000009     8L......<L......
240001d0:	08024c48 00000004 08024c50 0000000a     HL......PL......
240001e0:	08024c5c 00000003 08024c60 0000000f     \L......`L......
240001f0:	08024c70 00000005 08024a7c 00000018     pL......|J......
24000200:	08024c78 00000003 08024c7c 00000012     xL......|L......
24000210:	08024c90 00000003 08024c94 00000009     .L.......L......
24000220:	08024ca0 00000004 08024ca8 0000000a     .L.......L......
24000230:	08024cb4 00000003 08024cb8 0000000f     .L.......L......
24000240:	08024cc8 00000003 08024ccc 0000000a     .L.......L......
	...

24000258 <mg_log_level>:
24000258:	00000002                                ....

2400025c <s_log_func>:
2400025c:	080108df                                ....

24000260 <mcast_addr>:
24000260:	005e0001 0000fb00                       ..^.....

24000268 <s_mg_flash_stm32h7>:
24000268:	08000000 00000000 00020000 00000020     ............ ...
24000278:	24000c39 24000bb5                       9..$...$

24000280 <zeros_sha256_digest>:
24000280:	42c4b0e3 141cfc98 c8f4fb9a 24b96f99     ...B.........o.$
24000290:	e441ae27 4c939b64 1b9995a4 55b85278     '.A.d..L....xR.U

240002a0 <mg_tcpip_driver_stm32h>:
240002a0:	08020401 08020671 00000000 0802088d     ....q...........

240002b0 <s_modbus_base>:
240002b0:	000003e8                                ....

240002b4 <s_state>:
240002b4:	0000002a 0000001b 00000043 0000000a     *.......C.......
240002c4:	2e302e31 00000030 00000000 00000000     1.0.0...........
240002d4:	00000000 00000001 00000053              ........S...

240002e0 <s_leds>:
240002e0:	00000100                                ....

240002e4 <s_network_settings>:
240002e4:	2e323931 2e383631 32342e30 00000000     192.168.0.42....
240002f4:	00000000 2e323931 2e383631 00312e30     ....192.168.0.1.
	...
2400030c:	2e353532 2e353532 2e353532 00000030     255.255.255.0...
2400031c:	00000000 00000001 00000000              ............

24000328 <s_settings>:
24000328:	74696465 73202620 20657661 0000656d     edit & save me..
	...
24000350:	6f666e69 00000000 00000000 00000000     info............
24000360:	9ad42c3d 405ec7e6 00000011 00000001     =,....^@........

24000370 <s_security>:
24000370:	696d6461 0000006e 00000000 00000000     admin...........
	...
24000398:	72657375 00000000 00000000 00000000     user............
	...

240003c0 <s_state_attributes>:
240003c0:	08026f2c 08026f34 00000000 00000000     ,o..4o..........
	...
240003d8:	08026f38 08026f34 00000000 00000004     8o..4o..........
	...
240003f0:	08026f44 08026f34 00000000 00000008     Do..4o..........
	...
24000408:	08026f50 08026f34 00000000 0000000c     Po..4o..........
	...
24000420:	08026f58 08026f60 00000000 00000010     Xo..`o..........
24000430:	00000014 00000000 08026f68 08026f70     ........ho..po..
24000440:	00000000 00000024 00000000 00000000     ....$...........
24000450:	08026f78 08026f70 00000000 00000025     xo..po......%...
	...
24000468:	08026f80 08026f34 00000000 00000028     .o..4o......(...
	...

24000498 <s_leds_attributes>:
24000498:	08026f88 08026f70 00000000 00000000     .o..po..........
	...
240004b0:	08026f90 08026f70 00000000 00000001     .o..po..........
	...
240004c8:	08026f98 08026f70 00000000 00000002     .o..po..........
	...

240004f8 <s_network_settings_attributes>:
240004f8:	08026fa0 08026f60 00000000 00000000     .o..`o..........
24000508:	00000014 00000000 08026fac 08026f60     .........o..`o..
24000518:	00000000 00000014 00000014 00000000     ................
24000528:	08026fb8 08026f60 00000000 00000028     .o..`o......(...
24000538:	00000014 00000000 08026fc0 08026f70     .........o..po..
24000548:	00000000 0000003c 00000000 00000000     ....<...........
	...

24000570 <s_settings_attributes>:
24000570:	08026fc8 08026f60 00000000 00000000     .o..`o..........
24000580:	00000028 00000000 08026fd4 08026f60     (........o..`o..
24000590:	00000000 00000028 0000000a 00000000     ....(...........
240005a0:	08026fe0 08026fec 08026ff4 00000038     .o...o...o..8...
	...
240005b8:	08026ffc 08026f34 00000000 00000040     .o..4o......@...
	...
240005d0:	08027004 08026f70 00000000 00000044     .p..po......D...
	...

24000600 <s_security_attributes>:
24000600:	08027010 08026f60 00000000 00000000     .p..`o..........
24000610:	00000028 00000000 08027020 08026f60     (....... p..`o..
24000620:	00000000 00000028 00000028 00000000     ....(...(.......
	...

24000648 <s_apihandler_reboot>:
24000648:	08027030 08027038 00000000 00000003     0p..8p..........
24000658:	00000007 00000000 08020d45 08020d69     ........E...i...

24000668 <s_apihandler_reformat>:
24000668:	08027040 08027038 00000000 00000003     @p..8p..........
24000678:	00000007 00000000 08020dc9 08020ded     ................

24000688 <s_apihandler_firmware_update>:
24000688:	0802704c 0802705c 00000000 00000003     Lp..\p..........
24000698:	00000007 00000000 08020e4d 08020ea5     ........M.......
240006a8:	08020ed9                                ....

240006ac <s_apihandler_file_upload>:
240006ac:	08027060 0802706c 00000000 00000003     `p..lp..........
240006bc:	00000007 00000000 08020f29 08020fad     ........).......
240006cc:	08020fed                                ....

240006d0 <s_apihandler_graph_data>:
240006d0:	08027074 08027080 00000000 00000003     tp...p..........
240006e0:	00000003 00000000 08021035              ........5...

240006ec <s_apihandler_state>:
240006ec:	08027088 08027090 00000001 00000000     .p...p..........
	...
24000704:	240003c0 0000002c 0802106d 00000000     ...$,...m.......

24000714 <s_apihandler_leds>:
24000714:	08027098 08027090 00000000 00000003     .p...p..........
24000724:	00000003 00000000 24000498 00000003     ...........$....
24000734:	0802109d 080210c1                       ........

2400073c <s_apihandler_network_settings>:
2400073c:	080270a0 08027090 00000000 00000003     .p...p..........
2400074c:	00000007 00000000 240004f8 0000003d     ...........$=...
2400075c:	080210e5 0802112d                       ....-...

24000764 <s_apihandler_settings>:
24000764:	080270b4 08027090 00000000 00000003     .p...p..........
24000774:	00000007 00000000 24000570 00000048     ........p..$H...
24000784:	08021175 08021199                       u.......

2400078c <s_apihandler_security>:
2400078c:	080270c0 08027090 00000000 00000007     .p...p..........
2400079c:	00000007 00000000 24000600 00000050     ...........$P...
240007ac:	080211bd 080211e1                       ........

240007b4 <s_apihandler_loglevels>:
240007b4:	080270cc 08027080 00000000 00000000     .p...p..........
	...
240007cc:	08021205                                ....

240007d0 <s_apihandler_events>:
240007d0:	080270d8 08027080 00000000 00000000     .p...p..........
	...
240007e8:	0802123d                                =...

240007ec <s_apihandlers>:
240007ec:	24000648 24000668 24000688 240006ac     H..$h..$...$...$
240007fc:	240006d0 240006ec 24000714 2400073c     ...$...$...$<..$
2400080c:	24000764 2400078c 240007b4 240007d0     d..$...$...$...$

2400081c <s_auth>:
2400081c:	08020ce1                                ....

24000820 <s_modbus_handlers>:
24000820:	08020ba9 08020c45                       ....E...

24000828 <__sglue>:
24000828:	00000000 00000003 24004368              ........hC.$

24000834 <_impure_ptr>:
24000834:	24000838                                8..$

24000838 <_impure_data>:
24000838:	00000000 24004368 240043d0 24004438     ....hC.$.C.$8D.$
	...

24000884 <is_dualbank>:
MG_IRAM static bool is_dualbank(void) {
24000884:	b480      	push	{r7}
24000886:	af00      	add	r7, sp, #0
  return (s_mg_flash_stm32h7.size < 2 * 1024 * 1024) ? false : true;
24000888:	4b06      	ldr	r3, [pc, #24]	@ (240008a4 <is_dualbank+0x20>)
2400088a:	685b      	ldr	r3, [r3, #4]
2400088c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24000890:	bf2c      	ite	cs
24000892:	2301      	movcs	r3, #1
24000894:	2300      	movcc	r3, #0
24000896:	b2db      	uxtb	r3, r3
}
24000898:	4618      	mov	r0, r3
2400089a:	46bd      	mov	sp, r7
2400089c:	f85d 7b04 	ldr.w	r7, [sp], #4
240008a0:	4770      	bx	lr
240008a2:	bf00      	nop
240008a4:	24000268 	.word	0x24000268

240008a8 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
240008a8:	b580      	push	{r7, lr}
240008aa:	af00      	add	r7, sp, #0
  if (unlocked == false) {
240008ac:	4b11      	ldr	r3, [pc, #68]	@ (240008f4 <flash_unlock+0x4c>)
240008ae:	781b      	ldrb	r3, [r3, #0]
240008b0:	f083 0301 	eor.w	r3, r3, #1
240008b4:	b2db      	uxtb	r3, r3
240008b6:	2b00      	cmp	r3, #0
240008b8:	d019      	beq.n	240008ee <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
240008ba:	4b0f      	ldr	r3, [pc, #60]	@ (240008f8 <flash_unlock+0x50>)
240008bc:	4a0f      	ldr	r2, [pc, #60]	@ (240008fc <flash_unlock+0x54>)
240008be:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
240008c0:	4b0d      	ldr	r3, [pc, #52]	@ (240008f8 <flash_unlock+0x50>)
240008c2:	4a0f      	ldr	r2, [pc, #60]	@ (24000900 <flash_unlock+0x58>)
240008c4:	601a      	str	r2, [r3, #0]
    if (is_dualbank()) {
240008c6:	f7ff ffdd 	bl	24000884 <is_dualbank>
240008ca:	4603      	mov	r3, r0
240008cc:	2b00      	cmp	r3, #0
240008ce:	d005      	beq.n	240008dc <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
240008d0:	4b0c      	ldr	r3, [pc, #48]	@ (24000904 <flash_unlock+0x5c>)
240008d2:	4a0a      	ldr	r2, [pc, #40]	@ (240008fc <flash_unlock+0x54>)
240008d4:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
240008d6:	4b0b      	ldr	r3, [pc, #44]	@ (24000904 <flash_unlock+0x5c>)
240008d8:	4a09      	ldr	r2, [pc, #36]	@ (24000900 <flash_unlock+0x58>)
240008da:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
240008dc:	4b0a      	ldr	r3, [pc, #40]	@ (24000908 <flash_unlock+0x60>)
240008de:	4a0b      	ldr	r2, [pc, #44]	@ (2400090c <flash_unlock+0x64>)
240008e0:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
240008e2:	4b09      	ldr	r3, [pc, #36]	@ (24000908 <flash_unlock+0x60>)
240008e4:	4a0a      	ldr	r2, [pc, #40]	@ (24000910 <flash_unlock+0x68>)
240008e6:	601a      	str	r2, [r3, #0]
    unlocked = true;
240008e8:	4b02      	ldr	r3, [pc, #8]	@ (240008f4 <flash_unlock+0x4c>)
240008ea:	2201      	movs	r2, #1
240008ec:	701a      	strb	r2, [r3, #0]
}
240008ee:	bf00      	nop
240008f0:	bd80      	pop	{r7, pc}
240008f2:	bf00      	nop
240008f4:	24004210 	.word	0x24004210
240008f8:	52002004 	.word	0x52002004
240008fc:	45670123 	.word	0x45670123
24000900:	cdef89ab 	.word	0xcdef89ab
24000904:	52002104 	.word	0x52002104
24000908:	52002008 	.word	0x52002008
2400090c:	08192a3b 	.word	0x08192a3b
24000910:	4c5d6e7f 	.word	0x4c5d6e7f

24000914 <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
24000914:	b480      	push	{r7}
24000916:	b087      	sub	sp, #28
24000918:	af00      	add	r7, sp, #0
2400091a:	6078      	str	r0, [r7, #4]
  char *base = (char *) s_mg_flash_stm32h7.start,
2400091c:	4b15      	ldr	r3, [pc, #84]	@ (24000974 <flash_page_start+0x60>)
2400091e:	681b      	ldr	r3, [r3, #0]
24000920:	617b      	str	r3, [r7, #20]
       *end = base + s_mg_flash_stm32h7.size;
24000922:	4b14      	ldr	r3, [pc, #80]	@ (24000974 <flash_page_start+0x60>)
24000924:	685b      	ldr	r3, [r3, #4]
24000926:	697a      	ldr	r2, [r7, #20]
24000928:	4413      	add	r3, r2
2400092a:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
2400092c:	687b      	ldr	r3, [r7, #4]
2400092e:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % s_mg_flash_stm32h7.secsz) == 0;
24000930:	68fa      	ldr	r2, [r7, #12]
24000932:	697b      	ldr	r3, [r7, #20]
24000934:	429a      	cmp	r2, r3
24000936:	d312      	bcc.n	2400095e <flash_page_start+0x4a>
24000938:	68fa      	ldr	r2, [r7, #12]
2400093a:	693b      	ldr	r3, [r7, #16]
2400093c:	429a      	cmp	r2, r3
2400093e:	d20e      	bcs.n	2400095e <flash_page_start+0x4a>
24000940:	68fa      	ldr	r2, [r7, #12]
24000942:	697b      	ldr	r3, [r7, #20]
24000944:	1ad3      	subs	r3, r2, r3
24000946:	461a      	mov	r2, r3
24000948:	4b0a      	ldr	r3, [pc, #40]	@ (24000974 <flash_page_start+0x60>)
2400094a:	689b      	ldr	r3, [r3, #8]
2400094c:	fbb2 f1f3 	udiv	r1, r2, r3
24000950:	fb01 f303 	mul.w	r3, r1, r3
24000954:	1ad3      	subs	r3, r2, r3
24000956:	2b00      	cmp	r3, #0
24000958:	d101      	bne.n	2400095e <flash_page_start+0x4a>
2400095a:	2301      	movs	r3, #1
2400095c:	e000      	b.n	24000960 <flash_page_start+0x4c>
2400095e:	2300      	movs	r3, #0
24000960:	f003 0301 	and.w	r3, r3, #1
24000964:	b2db      	uxtb	r3, r3
}
24000966:	4618      	mov	r0, r3
24000968:	371c      	adds	r7, #28
2400096a:	46bd      	mov	sp, r7
2400096c:	f85d 7b04 	ldr.w	r7, [sp], #4
24000970:	4770      	bx	lr
24000972:	bf00      	nop
24000974:	24000268 	.word	0x24000268

24000978 <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
24000978:	b480      	push	{r7}
2400097a:	b083      	sub	sp, #12
2400097c:	af00      	add	r7, sp, #0
2400097e:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
24000980:	687b      	ldr	r3, [r7, #4]
24000982:	3310      	adds	r3, #16
24000984:	681a      	ldr	r2, [r3, #0]
24000986:	4b06      	ldr	r3, [pc, #24]	@ (240009a0 <flash_is_err+0x28>)
24000988:	4013      	ands	r3, r2
2400098a:	2b00      	cmp	r3, #0
2400098c:	bf14      	ite	ne
2400098e:	2301      	movne	r3, #1
24000990:	2300      	moveq	r3, #0
24000992:	b2db      	uxtb	r3, r3
}
24000994:	4618      	mov	r0, r3
24000996:	370c      	adds	r7, #12
24000998:	46bd      	mov	sp, r7
2400099a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400099e:	4770      	bx	lr
240009a0:	0ffe0000 	.word	0x0ffe0000

240009a4 <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
240009a4:	b480      	push	{r7}
240009a6:	b083      	sub	sp, #12
240009a8:	af00      	add	r7, sp, #0
240009aa:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
240009ac:	bf00      	nop
240009ae:	687b      	ldr	r3, [r7, #4]
240009b0:	3310      	adds	r3, #16
240009b2:	681b      	ldr	r3, [r3, #0]
240009b4:	f003 0305 	and.w	r3, r3, #5
240009b8:	2b00      	cmp	r3, #0
240009ba:	d1f8      	bne.n	240009ae <flash_wait+0xa>
}
240009bc:	bf00      	nop
240009be:	bf00      	nop
240009c0:	370c      	adds	r7, #12
240009c2:	46bd      	mov	sp, r7
240009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240009c8:	4770      	bx	lr

240009ca <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
240009ca:	b580      	push	{r7, lr}
240009cc:	b082      	sub	sp, #8
240009ce:	af00      	add	r7, sp, #0
240009d0:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
240009d2:	6878      	ldr	r0, [r7, #4]
240009d4:	f7ff ffe6 	bl	240009a4 <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
240009d8:	687b      	ldr	r3, [r7, #4]
240009da:	3314      	adds	r3, #20
240009dc:	461a      	mov	r2, r3
240009de:	4b03      	ldr	r3, [pc, #12]	@ (240009ec <flash_clear_err+0x22>)
240009e0:	6013      	str	r3, [r2, #0]
}
240009e2:	bf00      	nop
240009e4:	3708      	adds	r7, #8
240009e6:	46bd      	mov	sp, r7
240009e8:	bd80      	pop	{r7, pc}
240009ea:	bf00      	nop
240009ec:	07ff0000 	.word	0x07ff0000

240009f0 <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
240009f0:	b480      	push	{r7}
240009f2:	b083      	sub	sp, #12
240009f4:	af00      	add	r7, sp, #0
240009f6:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
240009f8:	687b      	ldr	r3, [r7, #4]
240009fa:	3318      	adds	r3, #24
240009fc:	681b      	ldr	r3, [r3, #0]
240009fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000a02:	2b00      	cmp	r3, #0
24000a04:	bf14      	ite	ne
24000a06:	2301      	movne	r3, #1
24000a08:	2300      	moveq	r3, #0
24000a0a:	b2db      	uxtb	r3, r3
}
24000a0c:	4618      	mov	r0, r3
24000a0e:	370c      	adds	r7, #12
24000a10:	46bd      	mov	sp, r7
24000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a16:	4770      	bx	lr

24000a18 <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
24000a18:	b580      	push	{r7, lr}
24000a1a:	b084      	sub	sp, #16
24000a1c:	af00      	add	r7, sp, #0
24000a1e:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000a20:	4b0d      	ldr	r3, [pc, #52]	@ (24000a58 <flash_bank+0x40>)
24000a22:	681b      	ldr	r3, [r3, #0]
24000a24:	687a      	ldr	r2, [r7, #4]
24000a26:	1ad3      	subs	r3, r2, r3
24000a28:	60fb      	str	r3, [r7, #12]
  if (!is_dualbank()) return FLASH_BASE1;
24000a2a:	f7ff ff2b 	bl	24000884 <is_dualbank>
24000a2e:	4603      	mov	r3, r0
24000a30:	f083 0301 	eor.w	r3, r3, #1
24000a34:	b2db      	uxtb	r3, r3
24000a36:	2b00      	cmp	r3, #0
24000a38:	d001      	beq.n	24000a3e <flash_bank+0x26>
24000a3a:	4b08      	ldr	r3, [pc, #32]	@ (24000a5c <flash_bank+0x44>)
24000a3c:	e008      	b.n	24000a50 <flash_bank+0x38>
  return ofs < s_mg_flash_stm32h7.size / 2 ? FLASH_BASE1 : FLASH_BASE2;
24000a3e:	4b06      	ldr	r3, [pc, #24]	@ (24000a58 <flash_bank+0x40>)
24000a40:	685b      	ldr	r3, [r3, #4]
24000a42:	085b      	lsrs	r3, r3, #1
24000a44:	68fa      	ldr	r2, [r7, #12]
24000a46:	429a      	cmp	r2, r3
24000a48:	d201      	bcs.n	24000a4e <flash_bank+0x36>
24000a4a:	4b04      	ldr	r3, [pc, #16]	@ (24000a5c <flash_bank+0x44>)
24000a4c:	e000      	b.n	24000a50 <flash_bank+0x38>
24000a4e:	4b04      	ldr	r3, [pc, #16]	@ (24000a60 <flash_bank+0x48>)
}
24000a50:	4618      	mov	r0, r3
24000a52:	3710      	adds	r7, #16
24000a54:	46bd      	mov	sp, r7
24000a56:	bd80      	pop	{r7, pc}
24000a58:	24000268 	.word	0x24000268
24000a5c:	52002000 	.word	0x52002000
24000a60:	52002100 	.word	0x52002100

24000a64 <mg_stm32h7_erase>:
MG_IRAM static bool mg_stm32h7_erase(void *addr) {
24000a64:	b580      	push	{r7, lr}
24000a66:	b08a      	sub	sp, #40	@ 0x28
24000a68:	af02      	add	r7, sp, #8
24000a6a:	6078      	str	r0, [r7, #4]
  bool ok = false;
24000a6c:	2300      	movs	r3, #0
24000a6e:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
24000a70:	6878      	ldr	r0, [r7, #4]
24000a72:	f7ff ff4f 	bl	24000914 <flash_page_start>
24000a76:	4603      	mov	r3, r0
24000a78:	f083 0301 	eor.w	r3, r3, #1
24000a7c:	b2db      	uxtb	r3, r3
24000a7e:	2b00      	cmp	r3, #0
24000a80:	d00f      	beq.n	24000aa2 <mg_stm32h7_erase+0x3e>
    MG_ERROR(("%p is not on a sector boundary", addr));
24000a82:	4b44      	ldr	r3, [pc, #272]	@ (24000b94 <mg_stm32h7_erase+0x130>)
24000a84:	681b      	ldr	r3, [r3, #0]
24000a86:	2b00      	cmp	r3, #0
24000a88:	dd7e      	ble.n	24000b88 <mg_stm32h7_erase+0x124>
24000a8a:	4b43      	ldr	r3, [pc, #268]	@ (24000b98 <mg_stm32h7_erase+0x134>)
24000a8c:	f641 5228 	movw	r2, #7464	@ 0x1d28
24000a90:	4942      	ldr	r1, [pc, #264]	@ (24000b9c <mg_stm32h7_erase+0x138>)
24000a92:	2001      	movs	r0, #1
24000a94:	f000 f9b0 	bl	24000df8 <__mg_log_prefix_veneer>
24000a98:	6879      	ldr	r1, [r7, #4]
24000a9a:	4841      	ldr	r0, [pc, #260]	@ (24000ba0 <mg_stm32h7_erase+0x13c>)
24000a9c:	f000 f9b0 	bl	24000e00 <__mg_log_veneer>
24000aa0:	e072      	b.n	24000b88 <mg_stm32h7_erase+0x124>
    uintptr_t diff = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000aa2:	4b40      	ldr	r3, [pc, #256]	@ (24000ba4 <mg_stm32h7_erase+0x140>)
24000aa4:	681b      	ldr	r3, [r3, #0]
24000aa6:	687a      	ldr	r2, [r7, #4]
24000aa8:	1ad3      	subs	r3, r2, r3
24000aaa:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / s_mg_flash_stm32h7.secsz;
24000aac:	4b3d      	ldr	r3, [pc, #244]	@ (24000ba4 <mg_stm32h7_erase+0x140>)
24000aae:	689b      	ldr	r3, [r3, #8]
24000ab0:	697a      	ldr	r2, [r7, #20]
24000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
24000ab6:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
24000ab8:	6878      	ldr	r0, [r7, #4]
24000aba:	f7ff ffad 	bl	24000a18 <flash_bank>
24000abe:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
24000ac0:	693b      	ldr	r3, [r7, #16]
24000ac2:	330c      	adds	r3, #12
24000ac4:	681b      	ldr	r3, [r3, #0]
24000ac6:	60fb      	str	r3, [r7, #12]
    flash_unlock();
24000ac8:	f7ff feee 	bl	240008a8 <flash_unlock>
    if (sector > 7) sector -= 8;
24000acc:	69bb      	ldr	r3, [r7, #24]
24000ace:	2b07      	cmp	r3, #7
24000ad0:	d902      	bls.n	24000ad8 <mg_stm32h7_erase+0x74>
24000ad2:	69bb      	ldr	r3, [r7, #24]
24000ad4:	3b08      	subs	r3, #8
24000ad6:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
24000ad8:	6938      	ldr	r0, [r7, #16]
24000ada:	f7ff ff76 	bl	240009ca <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
24000ade:	693b      	ldr	r3, [r7, #16]
24000ae0:	330c      	adds	r3, #12
24000ae2:	461a      	mov	r2, r3
24000ae4:	2320      	movs	r3, #32
24000ae6:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
24000ae8:	693b      	ldr	r3, [r7, #16]
24000aea:	330c      	adds	r3, #12
24000aec:	681a      	ldr	r2, [r3, #0]
24000aee:	69bb      	ldr	r3, [r7, #24]
24000af0:	021b      	lsls	r3, r3, #8
24000af2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24000af6:	6939      	ldr	r1, [r7, #16]
24000af8:	310c      	adds	r1, #12
24000afa:	4313      	orrs	r3, r2
24000afc:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
24000afe:	693b      	ldr	r3, [r7, #16]
24000b00:	330c      	adds	r3, #12
24000b02:	681b      	ldr	r3, [r3, #0]
24000b04:	693a      	ldr	r2, [r7, #16]
24000b06:	320c      	adds	r2, #12
24000b08:	f043 0304 	orr.w	r3, r3, #4
24000b0c:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
24000b0e:	693b      	ldr	r3, [r7, #16]
24000b10:	330c      	adds	r3, #12
24000b12:	681b      	ldr	r3, [r3, #0]
24000b14:	693a      	ldr	r2, [r7, #16]
24000b16:	320c      	adds	r2, #12
24000b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24000b1c:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
24000b1e:	6938      	ldr	r0, [r7, #16]
24000b20:	f7ff ff2a 	bl	24000978 <flash_is_err>
24000b24:	4603      	mov	r3, r0
24000b26:	2b00      	cmp	r3, #0
24000b28:	bf14      	ite	ne
24000b2a:	2301      	movne	r3, #1
24000b2c:	2300      	moveq	r3, #0
24000b2e:	b2db      	uxtb	r3, r3
24000b30:	f083 0301 	eor.w	r3, r3, #1
24000b34:	b2db      	uxtb	r3, r3
24000b36:	77fb      	strb	r3, [r7, #31]
24000b38:	7ffb      	ldrb	r3, [r7, #31]
24000b3a:	f003 0301 	and.w	r3, r3, #1
24000b3e:	77fb      	strb	r3, [r7, #31]
    MG_DEBUG(("Erase sector %lu @ %p %s. CR %#lx SR %#lx", sector, addr,
24000b40:	4b14      	ldr	r3, [pc, #80]	@ (24000b94 <mg_stm32h7_erase+0x130>)
24000b42:	681b      	ldr	r3, [r3, #0]
24000b44:	2b02      	cmp	r3, #2
24000b46:	dd1a      	ble.n	24000b7e <mg_stm32h7_erase+0x11a>
24000b48:	4b13      	ldr	r3, [pc, #76]	@ (24000b98 <mg_stm32h7_erase+0x134>)
24000b4a:	f641 5238 	movw	r2, #7480	@ 0x1d38
24000b4e:	4913      	ldr	r1, [pc, #76]	@ (24000b9c <mg_stm32h7_erase+0x138>)
24000b50:	2003      	movs	r0, #3
24000b52:	f000 f951 	bl	24000df8 <__mg_log_prefix_veneer>
24000b56:	7ffb      	ldrb	r3, [r7, #31]
24000b58:	2b00      	cmp	r3, #0
24000b5a:	d001      	beq.n	24000b60 <mg_stm32h7_erase+0xfc>
24000b5c:	4912      	ldr	r1, [pc, #72]	@ (24000ba8 <mg_stm32h7_erase+0x144>)
24000b5e:	e000      	b.n	24000b62 <mg_stm32h7_erase+0xfe>
24000b60:	4912      	ldr	r1, [pc, #72]	@ (24000bac <mg_stm32h7_erase+0x148>)
24000b62:	693b      	ldr	r3, [r7, #16]
24000b64:	330c      	adds	r3, #12
24000b66:	681b      	ldr	r3, [r3, #0]
24000b68:	693a      	ldr	r2, [r7, #16]
24000b6a:	3210      	adds	r2, #16
24000b6c:	6812      	ldr	r2, [r2, #0]
24000b6e:	9201      	str	r2, [sp, #4]
24000b70:	9300      	str	r3, [sp, #0]
24000b72:	460b      	mov	r3, r1
24000b74:	687a      	ldr	r2, [r7, #4]
24000b76:	69b9      	ldr	r1, [r7, #24]
24000b78:	480d      	ldr	r0, [pc, #52]	@ (24000bb0 <mg_stm32h7_erase+0x14c>)
24000b7a:	f000 f941 	bl	24000e00 <__mg_log_veneer>
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
24000b7e:	693b      	ldr	r3, [r7, #16]
24000b80:	330c      	adds	r3, #12
24000b82:	461a      	mov	r2, r3
24000b84:	68fb      	ldr	r3, [r7, #12]
24000b86:	6013      	str	r3, [r2, #0]
  return ok;
24000b88:	7ffb      	ldrb	r3, [r7, #31]
}
24000b8a:	4618      	mov	r0, r3
24000b8c:	3720      	adds	r7, #32
24000b8e:	46bd      	mov	sp, r7
24000b90:	bd80      	pop	{r7, pc}
24000b92:	bf00      	nop
24000b94:	24000258 	.word	0x24000258
24000b98:	08027edc 	.word	0x08027edc
24000b9c:	080241e8 	.word	0x080241e8
24000ba0:	08025828 	.word	0x08025828
24000ba4:	24000268 	.word	0x24000268
24000ba8:	08024468 	.word	0x08024468
24000bac:	0802446c 	.word	0x0802446c
24000bb0:	08025848 	.word	0x08025848

24000bb4 <mg_stm32h7_swap>:
MG_IRAM static bool mg_stm32h7_swap(void) {
24000bb4:	b580      	push	{r7, lr}
24000bb6:	b082      	sub	sp, #8
24000bb8:	af00      	add	r7, sp, #0
  if (!is_dualbank()) return true;
24000bba:	f7ff fe63 	bl	24000884 <is_dualbank>
24000bbe:	4603      	mov	r3, r0
24000bc0:	f083 0301 	eor.w	r3, r3, #1
24000bc4:	b2db      	uxtb	r3, r3
24000bc6:	2b00      	cmp	r3, #0
24000bc8:	d001      	beq.n	24000bce <mg_stm32h7_swap+0x1a>
24000bca:	2301      	movs	r3, #1
24000bcc:	e02e      	b.n	24000c2c <mg_stm32h7_swap+0x78>
  uint32_t bank = FLASH_BASE1;
24000bce:	4b19      	ldr	r3, [pc, #100]	@ (24000c34 <mg_stm32h7_swap+0x80>)
24000bd0:	607b      	str	r3, [r7, #4]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
24000bd2:	6878      	ldr	r0, [r7, #4]
24000bd4:	f7ff ff0c 	bl	240009f0 <flash_bank_is_swapped>
24000bd8:	4603      	mov	r3, r0
24000bda:	2b00      	cmp	r3, #0
24000bdc:	d001      	beq.n	24000be2 <mg_stm32h7_swap+0x2e>
24000bde:	2300      	movs	r3, #0
24000be0:	e001      	b.n	24000be6 <mg_stm32h7_swap+0x32>
24000be2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
24000be6:	603b      	str	r3, [r7, #0]
  flash_unlock();
24000be8:	f7ff fe5e 	bl	240008a8 <flash_unlock>
  flash_clear_err(bank);
24000bec:	6878      	ldr	r0, [r7, #4]
24000bee:	f7ff feec 	bl	240009ca <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
24000bf2:	687b      	ldr	r3, [r7, #4]
24000bf4:	3320      	adds	r3, #32
24000bf6:	681b      	ldr	r3, [r3, #0]
24000bf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
24000bfc:	687b      	ldr	r3, [r7, #4]
24000bfe:	3320      	adds	r3, #32
24000c00:	4619      	mov	r1, r3
24000c02:	683b      	ldr	r3, [r7, #0]
24000c04:	4313      	orrs	r3, r2
24000c06:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
24000c08:	687b      	ldr	r3, [r7, #4]
24000c0a:	3318      	adds	r3, #24
24000c0c:	681b      	ldr	r3, [r3, #0]
24000c0e:	687a      	ldr	r2, [r7, #4]
24000c10:	3218      	adds	r2, #24
24000c12:	f043 0302 	orr.w	r3, r3, #2
24000c16:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
24000c18:	bf00      	nop
24000c1a:	687b      	ldr	r3, [r7, #4]
24000c1c:	331c      	adds	r3, #28
24000c1e:	681b      	ldr	r3, [r3, #0]
24000c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000c24:	683a      	ldr	r2, [r7, #0]
24000c26:	429a      	cmp	r2, r3
24000c28:	d1f7      	bne.n	24000c1a <mg_stm32h7_swap+0x66>
  return true;
24000c2a:	2301      	movs	r3, #1
}
24000c2c:	4618      	mov	r0, r3
24000c2e:	3708      	adds	r7, #8
24000c30:	46bd      	mov	sp, r7
24000c32:	bd80      	pop	{r7, pc}
24000c34:	52002000 	.word	0x52002000

24000c38 <mg_stm32h7_write>:
MG_IRAM static bool mg_stm32h7_write(void *addr, const void *buf, size_t len) {
24000c38:	b580      	push	{r7, lr}
24000c3a:	b08c      	sub	sp, #48	@ 0x30
24000c3c:	af02      	add	r7, sp, #8
24000c3e:	60f8      	str	r0, [r7, #12]
24000c40:	60b9      	str	r1, [r7, #8]
24000c42:	607a      	str	r2, [r7, #4]
  if ((len % s_mg_flash_stm32h7.align) != 0) {
24000c44:	4b4f      	ldr	r3, [pc, #316]	@ (24000d84 <mg_stm32h7_write+0x14c>)
24000c46:	68da      	ldr	r2, [r3, #12]
24000c48:	687b      	ldr	r3, [r7, #4]
24000c4a:	fbb3 f1f2 	udiv	r1, r3, r2
24000c4e:	fb01 f202 	mul.w	r2, r1, r2
24000c52:	1a9b      	subs	r3, r3, r2
24000c54:	2b00      	cmp	r3, #0
24000c56:	d013      	beq.n	24000c80 <mg_stm32h7_write+0x48>
    MG_ERROR(("%lu is not aligned to %lu", len, s_mg_flash_stm32h7.align));
24000c58:	4b4b      	ldr	r3, [pc, #300]	@ (24000d88 <mg_stm32h7_write+0x150>)
24000c5a:	681b      	ldr	r3, [r3, #0]
24000c5c:	2b00      	cmp	r3, #0
24000c5e:	dd0d      	ble.n	24000c7c <mg_stm32h7_write+0x44>
24000c60:	4b4a      	ldr	r3, [pc, #296]	@ (24000d8c <mg_stm32h7_write+0x154>)
24000c62:	f641 5252 	movw	r2, #7506	@ 0x1d52
24000c66:	494a      	ldr	r1, [pc, #296]	@ (24000d90 <mg_stm32h7_write+0x158>)
24000c68:	2001      	movs	r0, #1
24000c6a:	f000 f8c5 	bl	24000df8 <__mg_log_prefix_veneer>
24000c6e:	4b45      	ldr	r3, [pc, #276]	@ (24000d84 <mg_stm32h7_write+0x14c>)
24000c70:	68db      	ldr	r3, [r3, #12]
24000c72:	461a      	mov	r2, r3
24000c74:	6879      	ldr	r1, [r7, #4]
24000c76:	4847      	ldr	r0, [pc, #284]	@ (24000d94 <mg_stm32h7_write+0x15c>)
24000c78:	f000 f8c2 	bl	24000e00 <__mg_log_veneer>
    return false;
24000c7c:	2300      	movs	r3, #0
24000c7e:	e07d      	b.n	24000d7c <mg_stm32h7_write+0x144>
  uint32_t bank = flash_bank(addr);
24000c80:	68f8      	ldr	r0, [r7, #12]
24000c82:	f7ff fec9 	bl	24000a18 <flash_bank>
24000c86:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
24000c88:	68fb      	ldr	r3, [r7, #12]
24000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
24000c8c:	68bb      	ldr	r3, [r7, #8]
24000c8e:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
24000c90:	68ba      	ldr	r2, [r7, #8]
24000c92:	687b      	ldr	r3, [r7, #4]
24000c94:	4413      	add	r3, r2
24000c96:	617b      	str	r3, [r7, #20]
  bool ok = true;
24000c98:	2301      	movs	r3, #1
24000c9a:	77fb      	strb	r3, [r7, #31]
  MG_ARM_DISABLE_IRQ();
24000c9c:	b672      	cpsid	i
  flash_unlock();
24000c9e:	f7ff fe03 	bl	240008a8 <flash_unlock>
  flash_clear_err(bank);
24000ca2:	69b8      	ldr	r0, [r7, #24]
24000ca4:	f7ff fe91 	bl	240009ca <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
24000ca8:	69bb      	ldr	r3, [r7, #24]
24000caa:	330c      	adds	r3, #12
24000cac:	461a      	mov	r2, r3
24000cae:	2302      	movs	r3, #2
24000cb0:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
24000cb2:	69bb      	ldr	r3, [r7, #24]
24000cb4:	330c      	adds	r3, #12
24000cb6:	681b      	ldr	r3, [r3, #0]
24000cb8:	69ba      	ldr	r2, [r7, #24]
24000cba:	320c      	adds	r2, #12
24000cbc:	f043 0320 	orr.w	r3, r3, #32
24000cc0:	6013      	str	r3, [r2, #0]
  while (ok && src < end) {
24000cc2:	e024      	b.n	24000d0e <mg_stm32h7_write+0xd6>
    if (flash_page_start(dst) && mg_stm32h7_erase(dst) == false) {
24000cc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000cc6:	f7ff fe25 	bl	24000914 <flash_page_start>
24000cca:	4603      	mov	r3, r0
24000ccc:	2b00      	cmp	r3, #0
24000cce:	d00b      	beq.n	24000ce8 <mg_stm32h7_write+0xb0>
24000cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000cd2:	f7ff fec7 	bl	24000a64 <mg_stm32h7_erase>
24000cd6:	4603      	mov	r3, r0
24000cd8:	f083 0301 	eor.w	r3, r3, #1
24000cdc:	b2db      	uxtb	r3, r3
24000cde:	2b00      	cmp	r3, #0
24000ce0:	d002      	beq.n	24000ce8 <mg_stm32h7_write+0xb0>
      ok = false;
24000ce2:	2300      	movs	r3, #0
24000ce4:	77fb      	strb	r3, [r7, #31]
      break;
24000ce6:	e019      	b.n	24000d1c <mg_stm32h7_write+0xe4>
    *(volatile uint32_t *) dst++ = *src++;
24000ce8:	6a3a      	ldr	r2, [r7, #32]
24000cea:	1d13      	adds	r3, r2, #4
24000cec:	623b      	str	r3, [r7, #32]
24000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24000cf0:	1d19      	adds	r1, r3, #4
24000cf2:	6279      	str	r1, [r7, #36]	@ 0x24
24000cf4:	6812      	ldr	r2, [r2, #0]
24000cf6:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
24000cf8:	69b8      	ldr	r0, [r7, #24]
24000cfa:	f7ff fe53 	bl	240009a4 <flash_wait>
    if (flash_is_err(bank)) ok = false;
24000cfe:	69b8      	ldr	r0, [r7, #24]
24000d00:	f7ff fe3a 	bl	24000978 <flash_is_err>
24000d04:	4603      	mov	r3, r0
24000d06:	2b00      	cmp	r3, #0
24000d08:	d001      	beq.n	24000d0e <mg_stm32h7_write+0xd6>
24000d0a:	2300      	movs	r3, #0
24000d0c:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
24000d0e:	7ffb      	ldrb	r3, [r7, #31]
24000d10:	2b00      	cmp	r3, #0
24000d12:	d003      	beq.n	24000d1c <mg_stm32h7_write+0xe4>
24000d14:	6a3a      	ldr	r2, [r7, #32]
24000d16:	697b      	ldr	r3, [r7, #20]
24000d18:	429a      	cmp	r2, r3
24000d1a:	d3d3      	bcc.n	24000cc4 <mg_stm32h7_write+0x8c>
  if (!s_flash_irq_disabled) MG_ARM_ENABLE_IRQ();
24000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (24000d98 <mg_stm32h7_write+0x160>)
24000d1e:	781b      	ldrb	r3, [r3, #0]
24000d20:	f083 0301 	eor.w	r3, r3, #1
24000d24:	b2db      	uxtb	r3, r3
24000d26:	2b00      	cmp	r3, #0
24000d28:	d000      	beq.n	24000d2c <mg_stm32h7_write+0xf4>
24000d2a:	b662      	cpsie	i
  MG_DEBUG(("Flash write %lu bytes @ %p: %s. CR %#lx SR %#lx", len, dst,
24000d2c:	4b16      	ldr	r3, [pc, #88]	@ (24000d88 <mg_stm32h7_write+0x150>)
24000d2e:	681b      	ldr	r3, [r3, #0]
24000d30:	2b02      	cmp	r3, #2
24000d32:	dd1a      	ble.n	24000d6a <mg_stm32h7_write+0x132>
24000d34:	4b15      	ldr	r3, [pc, #84]	@ (24000d8c <mg_stm32h7_write+0x154>)
24000d36:	f641 5269 	movw	r2, #7529	@ 0x1d69
24000d3a:	4915      	ldr	r1, [pc, #84]	@ (24000d90 <mg_stm32h7_write+0x158>)
24000d3c:	2003      	movs	r0, #3
24000d3e:	f000 f85b 	bl	24000df8 <__mg_log_prefix_veneer>
24000d42:	7ffb      	ldrb	r3, [r7, #31]
24000d44:	2b00      	cmp	r3, #0
24000d46:	d001      	beq.n	24000d4c <mg_stm32h7_write+0x114>
24000d48:	4914      	ldr	r1, [pc, #80]	@ (24000d9c <mg_stm32h7_write+0x164>)
24000d4a:	e000      	b.n	24000d4e <mg_stm32h7_write+0x116>
24000d4c:	4914      	ldr	r1, [pc, #80]	@ (24000da0 <mg_stm32h7_write+0x168>)
24000d4e:	69bb      	ldr	r3, [r7, #24]
24000d50:	330c      	adds	r3, #12
24000d52:	681b      	ldr	r3, [r3, #0]
24000d54:	69ba      	ldr	r2, [r7, #24]
24000d56:	3210      	adds	r2, #16
24000d58:	6812      	ldr	r2, [r2, #0]
24000d5a:	9201      	str	r2, [sp, #4]
24000d5c:	9300      	str	r3, [sp, #0]
24000d5e:	460b      	mov	r3, r1
24000d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24000d62:	6879      	ldr	r1, [r7, #4]
24000d64:	480f      	ldr	r0, [pc, #60]	@ (24000da4 <mg_stm32h7_write+0x16c>)
24000d66:	f000 f84b 	bl	24000e00 <__mg_log_veneer>
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
24000d6a:	69bb      	ldr	r3, [r7, #24]
24000d6c:	330c      	adds	r3, #12
24000d6e:	681b      	ldr	r3, [r3, #0]
24000d70:	69ba      	ldr	r2, [r7, #24]
24000d72:	320c      	adds	r2, #12
24000d74:	f023 0302 	bic.w	r3, r3, #2
24000d78:	6013      	str	r3, [r2, #0]
  return ok;
24000d7a:	7ffb      	ldrb	r3, [r7, #31]
}
24000d7c:	4618      	mov	r0, r3
24000d7e:	3728      	adds	r7, #40	@ 0x28
24000d80:	46bd      	mov	sp, r7
24000d82:	bd80      	pop	{r7, pc}
24000d84:	24000268 	.word	0x24000268
24000d88:	24000258 	.word	0x24000258
24000d8c:	08027ef0 	.word	0x08027ef0
24000d90:	080241e8 	.word	0x080241e8
24000d94:	08025874 	.word	0x08025874
24000d98:	24001094 	.word	0x24001094
24000d9c:	08024468 	.word	0x08024468
24000da0:	0802446c 	.word	0x0802446c
24000da4:	08025890 	.word	0x08025890

24000da8 <single_bank_swap>:
MG_IRAM static void single_bank_swap(char *p1, char *p2, size_t s, size_t ss) {
24000da8:	b580      	push	{r7, lr}
24000daa:	b086      	sub	sp, #24
24000dac:	af00      	add	r7, sp, #0
24000dae:	60f8      	str	r0, [r7, #12]
24000db0:	60b9      	str	r1, [r7, #8]
24000db2:	607a      	str	r2, [r7, #4]
24000db4:	603b      	str	r3, [r7, #0]
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000db6:	2300      	movs	r3, #0
24000db8:	617b      	str	r3, [r7, #20]
24000dba:	e00d      	b.n	24000dd8 <single_bank_swap+0x30>
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
24000dbc:	68fa      	ldr	r2, [r7, #12]
24000dbe:	697b      	ldr	r3, [r7, #20]
24000dc0:	18d0      	adds	r0, r2, r3
24000dc2:	68ba      	ldr	r2, [r7, #8]
24000dc4:	697b      	ldr	r3, [r7, #20]
24000dc6:	4413      	add	r3, r2
24000dc8:	683a      	ldr	r2, [r7, #0]
24000dca:	4619      	mov	r1, r3
24000dcc:	f7ff ff34 	bl	24000c38 <mg_stm32h7_write>
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000dd0:	697a      	ldr	r2, [r7, #20]
24000dd2:	683b      	ldr	r3, [r7, #0]
24000dd4:	4413      	add	r3, r2
24000dd6:	617b      	str	r3, [r7, #20]
24000dd8:	697a      	ldr	r2, [r7, #20]
24000dda:	687b      	ldr	r3, [r7, #4]
24000ddc:	429a      	cmp	r2, r3
24000dde:	d3ed      	bcc.n	24000dbc <single_bank_swap+0x14>
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
24000de0:	4b03      	ldr	r3, [pc, #12]	@ (24000df0 <single_bank_swap+0x48>)
24000de2:	4a04      	ldr	r2, [pc, #16]	@ (24000df4 <single_bank_swap+0x4c>)
24000de4:	601a      	str	r2, [r3, #0]
}
24000de6:	bf00      	nop
24000de8:	3718      	adds	r7, #24
24000dea:	46bd      	mov	sp, r7
24000dec:	bd80      	pop	{r7, pc}
24000dee:	bf00      	nop
24000df0:	e000ed0c 	.word	0xe000ed0c
24000df4:	05fa0004 	.word	0x05fa0004

24000df8 <__mg_log_prefix_veneer>:
24000df8:	f85f f000 	ldr.w	pc, [pc]	@ 24000dfc <__mg_log_prefix_veneer+0x4>
24000dfc:	0800c33d 	.word	0x0800c33d

24000e00 <__mg_log_veneer>:
24000e00:	f85f f000 	ldr.w	pc, [pc]	@ 24000e04 <__mg_log_veneer+0x4>
24000e04:	0800c3dd 	.word	0x0800c3dd
