
vtrModbusTCP-H723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026068  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000115e4  08026338  08026338  00027338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0803791c  0803791c  0003891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08037924  08037924  00038924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08037928  08037928  00038928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000e08  24000000  0803792c  00039000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RxDescripSection 00000060  24000e08  08038734  00039e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  24000e68  08038794  00039e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000473c  24000ec8  080387f4  00039ec8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24005604  080387f4  0003a604  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00039ec8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002faf0  00000000  00000000  00039ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003837  00000000  00000000  000699e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023e8  00000000  00000000  0006d220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001de3  00000000  00000000  0006f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036add  00000000  00000000  000713eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7d1  00000000  00000000  000a7ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00155da5  00000000  00000000  000d2699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022843e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b078  00000000  00000000  00228484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  002334fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000ec8 	.word	0x24000ec8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0802630c 	.word	0x0802630c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000ecc 	.word	0x24000ecc
 800030c:	0802630c 	.word	0x0802630c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <mg_random>:
void perform_http_data_read(struct mg_mgr *mgr);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e01a      	b.n	8000752 <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4619      	mov	r1, r3
 8000722:	4810      	ldr	r0, [pc, #64]	@ (8000764 <mg_random+0x58>)
 8000724:	f005 fa7c 	bl	8005c20 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	18d0      	adds	r0, r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3304      	adds	r3, #4
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d203      	bcs.n	8000740 <mg_random+0x34>
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	e000      	b.n	8000742 <mg_random+0x36>
 8000740:	2304      	movs	r3, #4
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	461a      	mov	r2, r3
 8000748:	f025 f955 	bl	80259f6 <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3304      	adds	r3, #4
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3e0      	bcc.n	800071c <mg_random+0x10>
  }
  return true;
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	24001020 	.word	0x24001020

08000768 <mg_millis>:

uint64_t mg_millis(void) {
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800076c:	f001 f85e 	bl	800182c <HAL_GetTick>
 8000770:	4603      	mov	r3, r0
 8000772:	2200      	movs	r2, #0
 8000774:	461c      	mov	r4, r3
 8000776:	4615      	mov	r5, r2
 8000778:	4622      	mov	r2, r4
 800077a:	462b      	mov	r3, r5
}
 800077c:	4610      	mov	r0, r2
 800077e:	4619      	mov	r1, r3
 8000780:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000784 <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d002      	beq.n	800079c <_write+0x18>
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d107      	bne.n	80007ac <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <_write+0x34>)
 80007a8:	f005 fb8f 	bl	8005eca <HAL_UART_Transmit>
  }
  return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	24001034 	.word	0x24001034

080007bc <http_event_handler>:

static void http_event_handler(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_HTTP_MSG) {
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	2b0b      	cmp	r3, #11
 80007ce:	d12c      	bne.n	800082a <http_event_handler+0x6e>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	617b      	str	r3, [r7, #20]
    size_t copy_len = hm->body.len < MAX_RESPONSE_SIZE - 1 ? hm->body.len : MAX_RESPONSE_SIZE - 1;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80007da:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80007de:	4293      	cmp	r3, r2
 80007e0:	bf28      	it	cs
 80007e2:	4613      	movcs	r3, r2
 80007e4:	613b      	str	r3, [r7, #16]
    memcpy(response_buf, hm->body.buf, copy_len);
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	4619      	mov	r1, r3
 80007f0:	4816      	ldr	r0, [pc, #88]	@ (800084c <http_event_handler+0x90>)
 80007f2:	f025 f900 	bl	80259f6 <memcpy>
    response_buf[copy_len] = '\0';
 80007f6:	4a15      	ldr	r2, [pc, #84]	@ (800084c <http_event_handler+0x90>)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	4413      	add	r3, r2
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
    response_len = copy_len;
 8000800:	4a13      	ldr	r2, [pc, #76]	@ (8000850 <http_event_handler+0x94>)
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	6013      	str	r3, [r2, #0]
    printf("HTTP Response: %.*s\r\n", (int) response_len, response_buf);
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <http_event_handler+0x94>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a10      	ldr	r2, [pc, #64]	@ (800084c <http_event_handler+0x90>)
 800080c:	4619      	mov	r1, r3
 800080e:	4811      	ldr	r0, [pc, #68]	@ (8000854 <http_event_handler+0x98>)
 8000810:	f024 fe42 	bl	8025498 <iprintf>
    request_done = true;
 8000814:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <http_event_handler+0x9c>)
 8000816:	2201      	movs	r2, #1
 8000818:	701a      	strb	r2, [r3, #0]
    c->is_closing = 1;
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8000820:	f043 0320 	orr.w	r3, r3, #32
 8000824:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  } else if (ev == MG_EV_CLOSE && !request_done) {
    printf("HTTP request failed or connection closed early\r\n");
  }
}
 8000828:	e00c      	b.n	8000844 <http_event_handler+0x88>
  } else if (ev == MG_EV_CLOSE && !request_done) {
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	2b09      	cmp	r3, #9
 800082e:	d109      	bne.n	8000844 <http_event_handler+0x88>
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <http_event_handler+0x9c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	f083 0301 	eor.w	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <http_event_handler+0x88>
    printf("HTTP request failed or connection closed early\r\n");
 800083e:	4807      	ldr	r0, [pc, #28]	@ (800085c <http_event_handler+0xa0>)
 8000840:	f024 fe9a 	bl	8025578 <puts>
}
 8000844:	bf00      	nop
 8000846:	3718      	adds	r7, #24
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	240010c8 	.word	0x240010c8
 8000850:	240020c8 	.word	0x240020c8
 8000854:	08026338 	.word	0x08026338
 8000858:	240020cc 	.word	0x240020cc
 800085c:	08026350 	.word	0x08026350

08000860 <perform_http_data_read>:


void perform_http_data_read(struct mg_mgr *mgr) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  request_done = false;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <perform_http_data_read+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
  struct mg_connection *c = mg_http_connect(mgr, API_URL, http_event_handler, NULL);
 800086e:	2300      	movs	r3, #0
 8000870:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <perform_http_data_read+0x58>)
 8000872:	4912      	ldr	r1, [pc, #72]	@ (80008bc <perform_http_data_read+0x5c>)
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f00c fa6d 	bl	800cd54 <mg_http_connect>
 800087a:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d103      	bne.n	800088a <perform_http_data_read+0x2a>
    printf("HTTP connect failed\r\n");
 8000882:	480f      	ldr	r0, [pc, #60]	@ (80008c0 <perform_http_data_read+0x60>)
 8000884:	f024 fe78 	bl	8025578 <puts>
    return;
 8000888:	e010      	b.n	80008ac <perform_http_data_read+0x4c>
  }
  mg_printf(c, "GET %s HTTP/1.0\r\nHost: 192.168.1.133\r\n\r\n", "/api/stats?start=-1h&stop=now()");
 800088a:	4a0e      	ldr	r2, [pc, #56]	@ (80008c4 <perform_http_data_read+0x64>)
 800088c:	490e      	ldr	r1, [pc, #56]	@ (80008c8 <perform_http_data_read+0x68>)
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f00d fbb8 	bl	800e004 <mg_printf>
  while (!request_done) mg_mgr_poll(mgr, 100);
 8000894:	e003      	b.n	800089e <perform_http_data_read+0x3e>
 8000896:	2164      	movs	r1, #100	@ 0x64
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f011 fbbb 	bl	8012014 <mg_mgr_poll>
 800089e:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <perform_http_data_read+0x54>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	f083 0301 	eor.w	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1f4      	bne.n	8000896 <perform_http_data_read+0x36>
}
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	240020cc 	.word	0x240020cc
 80008b8:	080007bd 	.word	0x080007bd
 80008bc:	08026380 	.word	0x08026380
 80008c0:	080263bc 	.word	0x080263bc
 80008c4:	080263d4 	.word	0x080263d4
 80008c8:	080263f4 	.word	0x080263f4

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b092      	sub	sp, #72	@ 0x48
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d2:	f000 ff25 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d6:	f000 f855 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008da:	f000 f9b3 	bl	8000c44 <MX_GPIO_Init>
  MX_ETH_Init();
 80008de:	f000 f8c3 	bl	8000a68 <MX_ETH_Init>
  MX_RNG_Init();
 80008e2:	f000 f94d 	bl	8000b80 <MX_RNG_Init>
  MX_USART3_UART_Init();
 80008e6:	f000 f961 	bl	8000bac <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80008ea:	f000 f909 	bl	8000b00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  printf("System initialized\n");
 80008ee:	481e      	ldr	r0, [pc, #120]	@ (8000968 <main+0x9c>)
 80008f0:	f024 fe42 	bl	8025578 <puts>
  mongoose_init();
 80008f4:	f024 fad8 	bl	8024ea8 <mongoose_init>
  mongoose_add_ws_handler(200, ws_voltage);
 80008f8:	491c      	ldr	r1, [pc, #112]	@ (800096c <main+0xa0>)
 80008fa:	20c8      	movs	r0, #200	@ 0xc8
 80008fc:	f023 ff94 	bl	8024828 <mongoose_add_ws_handler>
  write_snapshot_to_nfc();
 8000900:	f000 fab8 	bl	8000e74 <write_snapshot_to_nfc>

  uint8_t button_pressed = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  struct mg_mgr mgr;
  mg_mgr_init(&mgr);
 800090a:	463b      	mov	r3, r7
 800090c:	4618      	mov	r0, r3
 800090e:	f00e f805 	bl	800e91c <mg_mgr_init>

  for (;;) {
      mongoose_poll();
 8000912:	f024 fb2b 	bl	8024f6c <mongoose_poll>

      if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) {
 8000916:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800091a:	4815      	ldr	r0, [pc, #84]	@ (8000970 <main+0xa4>)
 800091c:	f001 fe92 	bl	8002644 <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d11b      	bne.n	800095e <main+0x92>
          if (!button_pressed) {
 8000926:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f1      	bne.n	8000912 <main+0x46>
              button_pressed = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
              glue_update_state();
 8000934:	f023 fd34 	bl	80243a0 <glue_update_state>
              printf("B1 Button Pressed: Event Triggered\r\n");
 8000938:	480e      	ldr	r0, [pc, #56]	@ (8000974 <main+0xa8>)
 800093a:	f024 fe1d 	bl	8025578 <puts>
              perform_http_data_read(&mgr);
 800093e:	463b      	mov	r3, r7
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff8d 	bl	8000860 <perform_http_data_read>
              printf("Data Read Complete\r\n");
 8000946:	480c      	ldr	r0, [pc, #48]	@ (8000978 <main+0xac>)
 8000948:	f024 fe16 	bl	8025578 <puts>
              printf("Writing NFC Snapshot:\r\n");
 800094c:	480b      	ldr	r0, [pc, #44]	@ (800097c <main+0xb0>)
 800094e:	f024 fe13 	bl	8025578 <puts>
              write_snapshot_to_nfc();
 8000952:	f000 fa8f 	bl	8000e74 <write_snapshot_to_nfc>
              printf("PLC snapshot written to NFC tag\r\n");
 8000956:	480a      	ldr	r0, [pc, #40]	@ (8000980 <main+0xb4>)
 8000958:	f024 fe0e 	bl	8025578 <puts>
 800095c:	e7d9      	b.n	8000912 <main+0x46>
          }
      } else {
          button_pressed = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      mongoose_poll();
 8000964:	e7d5      	b.n	8000912 <main+0x46>
 8000966:	bf00      	nop
 8000968:	08026420 	.word	0x08026420
 800096c:	08022ad1 	.word	0x08022ad1
 8000970:	58020800 	.word	0x58020800
 8000974:	08026434 	.word	0x08026434
 8000978:	08026458 	.word	0x08026458
 800097c:	0802646c 	.word	0x0802646c
 8000980:	08026484 	.word	0x08026484

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	@ 0x70
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098e:	224c      	movs	r2, #76	@ 0x4c
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f024 fefa 	bl	802578c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2220      	movs	r2, #32
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f024 fef4 	bl	802578c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009a4:	2002      	movs	r0, #2
 80009a6:	f002 fb35 	bl	8003014 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <SystemClock_Config+0xe0>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000a64 <SystemClock_Config+0xe0>)
 80009b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <SystemClock_Config+0xe0>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ca:	bf00      	nop
 80009cc:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <SystemClock_Config+0xe0>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009d8:	d1f8      	bne.n	80009cc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80009da:	2322      	movs	r3, #34	@ 0x22
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009de:	2301      	movs	r3, #1
 80009e0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80009e2:	2340      	movs	r3, #64	@ 0x40
 80009e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009e6:	2301      	movs	r3, #1
 80009e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ee:	2300      	movs	r3, #0
 80009f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f2:	2304      	movs	r3, #4
 80009f4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80009f6:	230c      	movs	r3, #12
 80009f8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009fa:	2301      	movs	r3, #1
 80009fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009fe:	2304      	movs	r3, #4
 8000a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a06:	230c      	movs	r3, #12
 8000a08:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a16:	4618      	mov	r0, r3
 8000a18:	f002 fb36 	bl	8003088 <HAL_RCC_OscConfig>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a22:	f000 fafd 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	233f      	movs	r3, #63	@ 0x3f
 8000a28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a32:	2308      	movs	r3, #8
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a36:	2340      	movs	r3, #64	@ 0x40
 8000a38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a3a:	2340      	movs	r3, #64	@ 0x40
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a44:	2340      	movs	r3, #64	@ 0x40
 8000a46:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f002 fef5 	bl	800383c <HAL_RCC_ClockConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000a58:	f000 fae2 	bl	8001020 <Error_Handler>
  }
}
 8000a5c:	bf00      	nop
 8000a5e:	3770      	adds	r7, #112	@ 0x70
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58024800 	.word	0x58024800

08000a68 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <MX_ETH_Init+0x80>)
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8000aec <MX_ETH_Init+0x84>)
 8000a70:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	@ (8000af0 <MX_ETH_Init+0x88>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	@ (8000af0 <MX_ETH_Init+0x88>)
 8000a7a:	2280      	movs	r2, #128	@ 0x80
 8000a7c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000af0 <MX_ETH_Init+0x88>)
 8000a80:	22e1      	movs	r2, #225	@ 0xe1
 8000a82:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	@ (8000af0 <MX_ETH_Init+0x88>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	@ (8000af0 <MX_ETH_Init+0x88>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a90:	4b17      	ldr	r3, [pc, #92]	@ (8000af0 <MX_ETH_Init+0x88>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_ETH_Init+0x80>)
 8000a98:	4a15      	ldr	r2, [pc, #84]	@ (8000af0 <MX_ETH_Init+0x88>)
 8000a9a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_ETH_Init+0x80>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_ETH_Init+0x80>)
 8000aa4:	4a13      	ldr	r2, [pc, #76]	@ (8000af4 <MX_ETH_Init+0x8c>)
 8000aa6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_ETH_Init+0x80>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	@ (8000af8 <MX_ETH_Init+0x90>)
 8000aac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_ETH_Init+0x80>)
 8000ab0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000ab4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ab6:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <MX_ETH_Init+0x80>)
 8000ab8:	f000 ffe8 	bl	8001a8c <HAL_ETH_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000ac2:	f000 faad 	bl	8001020 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ac6:	2238      	movs	r2, #56	@ 0x38
 8000ac8:	2100      	movs	r1, #0
 8000aca:	480c      	ldr	r0, [pc, #48]	@ (8000afc <MX_ETH_Init+0x94>)
 8000acc:	f024 fe5e 	bl	802578c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <MX_ETH_Init+0x94>)
 8000ad2:	2221      	movs	r2, #33	@ 0x21
 8000ad4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <MX_ETH_Init+0x94>)
 8000ad8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000adc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ade:	4b07      	ldr	r3, [pc, #28]	@ (8000afc <MX_ETH_Init+0x94>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	24000f1c 	.word	0x24000f1c
 8000aec:	40028000 	.word	0x40028000
 8000af0:	240020d0 	.word	0x240020d0
 8000af4:	24000e68 	.word	0x24000e68
 8000af8:	24000e08 	.word	0x24000e08
 8000afc:	24000ee4 	.word	0x24000ee4

08000b00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b06:	4a1c      	ldr	r2, [pc, #112]	@ (8000b78 <MX_I2C1_Init+0x78>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b0c:	4a1b      	ldr	r2, [pc, #108]	@ (8000b7c <MX_I2C1_Init+0x7c>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b10:	4b18      	ldr	r3, [pc, #96]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b18:	2201      	movs	r2, #1
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b3a:	480e      	ldr	r0, [pc, #56]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b3c:	f001 fdb4 	bl	80026a8 <HAL_I2C_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b46:	f000 fa6b 	bl	8001020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b4e:	f002 f9c9 	bl	8002ee4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b58:	f000 fa62 	bl	8001020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_I2C1_Init+0x74>)
 8000b60:	f002 fa0b 	bl	8002f7a <HAL_I2CEx_ConfigDigitalFilter>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b6a:	f000 fa59 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	24000fcc 	.word	0x24000fcc
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	20303e5d 	.word	0x20303e5d

08000b80 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b84:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <MX_RNG_Init+0x24>)
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <MX_RNG_Init+0x28>)
 8000b88:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <MX_RNG_Init+0x24>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	@ (8000ba4 <MX_RNG_Init+0x24>)
 8000b92:	f004 ffa1 	bl	8005ad8 <HAL_RNG_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000b9c:	f000 fa40 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	24001020 	.word	0x24001020
 8000ba8:	48021800 	.word	0x48021800

08000bac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	@ (8000c40 <MX_USART3_UART_Init+0x94>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf4:	4811      	ldr	r0, [pc, #68]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf6:	f005 f918 	bl	8005e2a <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f000 fa0e 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c08:	f006 fab3 	bl	8007172 <HAL_UARTEx_SetTxFifoThreshold>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c12:	f000 fa05 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4808      	ldr	r0, [pc, #32]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c1a:	f006 fae8 	bl	80071ee <HAL_UARTEx_SetRxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f000 f9fc 	bl	8001020 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	@ (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c2a:	f006 fa69 	bl	8007100 <HAL_UARTEx_DisableFifoMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f000 f9f4 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	24001034 	.word	0x24001034
 8000c40:	40004800 	.word	0x40004800

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	@ 0x30
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	4a68      	ldr	r2, [pc, #416]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6a:	4b66      	ldr	r3, [pc, #408]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c78:	4b62      	ldr	r3, [pc, #392]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	4a61      	ldr	r2, [pc, #388]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000c80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c88:	4b5e      	ldr	r3, [pc, #376]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b5b      	ldr	r3, [pc, #364]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	4a59      	ldr	r2, [pc, #356]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca6:	4b57      	ldr	r3, [pc, #348]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb4:	4b53      	ldr	r3, [pc, #332]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cba:	4a52      	ldr	r2, [pc, #328]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	4a4a      	ldr	r2, [pc, #296]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce2:	4b48      	ldr	r3, [pc, #288]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce8:	f003 0308 	and.w	r3, r3, #8
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf0:	4b44      	ldr	r3, [pc, #272]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	4a43      	ldr	r2, [pc, #268]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000cf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d00:	4b40      	ldr	r3, [pc, #256]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	4a3b      	ldr	r2, [pc, #236]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1e:	4b39      	ldr	r3, [pc, #228]	@ (8000e04 <MX_GPIO_Init+0x1c0>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	f003 0310 	and.w	r3, r3, #16
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000d32:	4835      	ldr	r0, [pc, #212]	@ (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d34:	f001 fc9e 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d3e:	4833      	ldr	r0, [pc, #204]	@ (8000e0c <MX_GPIO_Init+0x1c8>)
 8000d40:	f001 fc98 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2102      	movs	r1, #2
 8000d48:	4831      	ldr	r0, [pc, #196]	@ (8000e10 <MX_GPIO_Init+0x1cc>)
 8000d4a:	f001 fc93 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	482c      	ldr	r0, [pc, #176]	@ (8000e14 <MX_GPIO_Init+0x1d0>)
 8000d64:	f001 fac6 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000d68:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000d6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4821      	ldr	r0, [pc, #132]	@ (8000e08 <MX_GPIO_Init+0x1c4>)
 8000d82:	f001 fab7 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481b      	ldr	r0, [pc, #108]	@ (8000e0c <MX_GPIO_Init+0x1c8>)
 8000da0:	f001 faa8 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000da4:	2380      	movs	r3, #128	@ 0x80
 8000da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000da8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4817      	ldr	r0, [pc, #92]	@ (8000e18 <MX_GPIO_Init+0x1d4>)
 8000dba:	f001 fa9b 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000dd4:	f107 031c 	add.w	r3, r7, #28
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4810      	ldr	r0, [pc, #64]	@ (8000e1c <MX_GPIO_Init+0x1d8>)
 8000ddc:	f001 fa8a 	bl	80022f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000de0:	2302      	movs	r3, #2
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <MX_GPIO_Init+0x1cc>)
 8000df8:	f001 fa7c 	bl	80022f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dfc:	bf00      	nop
 8000dfe:	3730      	adds	r7, #48	@ 0x30
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	58024400 	.word	0x58024400
 8000e08:	58020400 	.word	0x58020400
 8000e0c:	58020c00 	.word	0x58020c00
 8000e10:	58021000 	.word	0x58021000
 8000e14:	58020800 	.word	0x58020800
 8000e18:	58021800 	.word	0x58021800
 8000e1c:	58020000 	.word	0x58020000

08000e20 <collect_plc_data>:

/* USER CODE BEGIN 4 */

void collect_plc_data(PLC_Snapshot *snapshot) {
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    // Example data - adjust as needed to match your PLC's actual output
    snapshot->status_bits[0] = 0b0000000000000100;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	801a      	strh	r2, [r3, #0]
    snapshot->status_bits[1] = 0b0001000000000001;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f241 0201 	movw	r2, #4097	@ 0x1001
 8000e34:	805a      	strh	r2, [r3, #2]
    snapshot->status_bits[2] = 0b0000000000011011;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	221b      	movs	r2, #27
 8000e3a:	809a      	strh	r2, [r3, #4]
    snapshot->status_bits[3] = 0b0000000000101010;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	222a      	movs	r2, #42	@ 0x2a
 8000e40:	80da      	strh	r2, [r3, #6]

    for (int i = 0; i < 64; i++) {
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	e00b      	b.n	8000e60 <collect_plc_data+0x40>
        snapshot->data_words[i] = 100 + i; // Example calculation
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3364      	adds	r3, #100	@ 0x64
 8000e4e:	b299      	uxth	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	3204      	adds	r2, #4
 8000e56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < 64; i++) {
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e64:	ddf0      	ble.n	8000e48 <collect_plc_data+0x28>
    }
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <write_snapshot_to_nfc>:

void write_snapshot_to_nfc(void) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	f5ad 7d0c 	sub.w	sp, sp, #560	@ 0x230
 8000e7a:	af04      	add	r7, sp, #16
    uint16_t i2c_addr = 0x53 << 1;        // 0xA6
 8000e7c:	23a6      	movs	r3, #166	@ 0xa6
 8000e7e:	f8a7 321e 	strh.w	r3, [r7, #542]	@ 0x21e
    uint16_t mem_addr = 0x0008;           // NDEF message start offset
 8000e82:	2308      	movs	r3, #8
 8000e84:	f8a7 321c 	strh.w	r3, [r7, #540]	@ 0x21c
    HAL_StatusTypeDef status;

    PLC_Snapshot snapshot;
    collect_plc_data(&snapshot);
 8000e88:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ffc7 	bl	8000e20 <collect_plc_data>

    uint8_t snapshot_payload[sizeof(snapshot)];
    memcpy(snapshot_payload, &snapshot, sizeof(snapshot));
 8000e92:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000e96:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000ea0:	2288      	movs	r2, #136	@ 0x88
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f024 fda7 	bl	80259f6 <memcpy>

    // Correct NDEF record length calculation
    uint8_t type_length = 24; // "application/octet-stream" is 24 bytes
 8000ea8:	2318      	movs	r3, #24
 8000eaa:	f887 321b 	strb.w	r3, [r7, #539]	@ 0x21b
    uint8_t ndef_header_size = 1 + 1 + 1; // Header (D2) + type_len + payload_len
 8000eae:	2303      	movs	r3, #3
 8000eb0:	f887 321a 	strb.w	r3, [r7, #538]	@ 0x21a
    uint16_t payload_length = sizeof(snapshot_payload);
 8000eb4:	2388      	movs	r3, #136	@ 0x88
 8000eb6:	f8a7 3218 	strh.w	r3, [r7, #536]	@ 0x218
    uint16_t ndef_record_length = ndef_header_size + type_length + payload_length;
 8000eba:	f897 321a 	ldrb.w	r3, [r7, #538]	@ 0x21a
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8000ece:	4413      	add	r3, r2
 8000ed0:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

    uint8_t ndef_tlv_length = ndef_record_length;
 8000ed4:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 8000ed8:	f887 3215 	strb.w	r3, [r7, #533]	@ 0x215
    uint16_t total_tlv_length = ndef_tlv_length + 2; // +2 for TLV terminator (FE 00)
 8000edc:	f897 3215 	ldrb.w	r3, [r7, #533]	@ 0x215
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	f8a7 3212 	strh.w	r3, [r7, #530]	@ 0x212

    uint8_t ndef_buffer[256];
    uint8_t i = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    // NDEF TLV
    ndef_buffer[i++] = 0x03; // TLV Type: NDEF message
 8000eee:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	f887 2211 	strb.w	r2, [r7, #529]	@ 0x211
 8000ef8:	461a      	mov	r2, r3
 8000efa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000efe:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000f02:	2103      	movs	r1, #3
 8000f04:	5499      	strb	r1, [r3, r2]
    ndef_buffer[i++] = ndef_tlv_length; // Length of NDEF record
 8000f06:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	f887 2211 	strb.w	r2, [r7, #529]	@ 0x211
 8000f10:	4619      	mov	r1, r3
 8000f12:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000f16:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000f1a:	f897 2215 	ldrb.w	r2, [r7, #533]	@ 0x215
 8000f1e:	545a      	strb	r2, [r3, r1]

    // NDEF Record
    ndef_buffer[i++] = 0xD2; // MB=1, ME=1, SR=1, TNF=0x02 (MIME)
 8000f20:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	f887 2211 	strb.w	r2, [r7, #529]	@ 0x211
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000f30:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000f34:	21d2      	movs	r1, #210	@ 0xd2
 8000f36:	5499      	strb	r1, [r3, r2]
    ndef_buffer[i++] = type_length; // Type Length (24 bytes)
 8000f38:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	f887 2211 	strb.w	r2, [r7, #529]	@ 0x211
 8000f42:	4619      	mov	r1, r3
 8000f44:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000f48:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000f4c:	f897 221b 	ldrb.w	r2, [r7, #539]	@ 0x21b
 8000f50:	545a      	strb	r2, [r3, r1]
    ndef_buffer[i++] = payload_length; // Payload Length (assuming payload_length <= 255)
 8000f52:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000f56:	1c5a      	adds	r2, r3, #1
 8000f58:	f887 2211 	strb.w	r2, [r7, #529]	@ 0x211
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8000f62:	b2d9      	uxtb	r1, r3
 8000f64:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000f68:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000f6c:	5499      	strb	r1, [r3, r2]

    // Type "application/octet-stream" (24 bytes)
    memcpy(&ndef_buffer[i], "application/octet-stream", type_length);
 8000f6e:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000f72:	463a      	mov	r2, r7
 8000f74:	4413      	add	r3, r2
 8000f76:	f897 221b 	ldrb.w	r2, [r7, #539]	@ 0x21b
 8000f7a:	4927      	ldr	r1, [pc, #156]	@ (8001018 <write_snapshot_to_nfc+0x1a4>)
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f024 fd3a 	bl	80259f6 <memcpy>
    i += type_length;
 8000f82:	f897 2211 	ldrb.w	r2, [r7, #529]	@ 0x211
 8000f86:	f897 321b 	ldrb.w	r3, [r7, #539]	@ 0x21b
 8000f8a:	4413      	add	r3, r2
 8000f8c:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    // Payload
    memcpy(&ndef_buffer[i], snapshot_payload, payload_length);
 8000f90:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000f94:	463a      	mov	r2, r7
 8000f96:	4413      	add	r3, r2
 8000f98:	f8b7 2218 	ldrh.w	r2, [r7, #536]	@ 0x218
 8000f9c:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f024 fd28 	bl	80259f6 <memcpy>
    i += payload_length;
 8000fa6:	f8b7 3218 	ldrh.w	r3, [r7, #536]	@ 0x218
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f887 3211 	strb.w	r3, [r7, #529]	@ 0x211

    // TLV Terminator
    ndef_buffer[i++] = 0xFE; // Terminator TLV
 8000fb6:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	f887 2211 	strb.w	r2, [r7, #529]	@ 0x211
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000fc6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000fca:	21fe      	movs	r1, #254	@ 0xfe
 8000fcc:	5499      	strb	r1, [r3, r2]
    ndef_buffer[i++] = 0x00;
 8000fce:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000fd2:	1c5a      	adds	r2, r3, #1
 8000fd4:	f887 2211 	strb.w	r2, [r7, #529]	@ 0x211
 8000fd8:	461a      	mov	r2, r3
 8000fda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000fde:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	5499      	strb	r1, [r3, r2]

    status = HAL_I2C_Mem_Write(&hi2c1, i2c_addr, mem_addr,
 8000fe6:	f897 3211 	ldrb.w	r3, [r7, #529]	@ 0x211
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	f8b7 221c 	ldrh.w	r2, [r7, #540]	@ 0x21c
 8000ff0:	f8b7 121e 	ldrh.w	r1, [r7, #542]	@ 0x21e
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	9002      	str	r0, [sp, #8]
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2302      	movs	r3, #2
 8001002:	4806      	ldr	r0, [pc, #24]	@ (800101c <write_snapshot_to_nfc+0x1a8>)
 8001004:	f001 fbec 	bl	80027e0 <HAL_I2C_Mem_Write>
 8001008:	4603      	mov	r3, r0
 800100a:	f887 3210 	strb.w	r3, [r7, #528]	@ 0x210
                               I2C_MEMADD_SIZE_16BIT,
                               ndef_buffer, i,
                               HAL_MAX_DELAY);
}
 800100e:	bf00      	nop
 8001010:	f507 7708 	add.w	r7, r7, #544	@ 0x220
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	080264a8 	.word	0x080264a8
 800101c:	24000fcc 	.word	0x24000fcc

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <Error_Handler+0x8>

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_MspInit+0x30>)
 8001034:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001038:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_MspInit+0x30>)
 800103a:	f043 0302 	orr.w	r3, r3, #2
 800103e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_MspInit+0x30>)
 8001044:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	607b      	str	r3, [r7, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	58024400 	.word	0x58024400

08001060 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08e      	sub	sp, #56	@ 0x38
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a5d      	ldr	r2, [pc, #372]	@ (80011f4 <HAL_ETH_MspInit+0x194>)
 800107e:	4293      	cmp	r3, r2
 8001080:	f040 80b3 	bne.w	80011ea <HAL_ETH_MspInit+0x18a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001084:	4b5c      	ldr	r3, [pc, #368]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 8001086:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800108a:	4a5b      	ldr	r2, [pc, #364]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 800108c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001090:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001094:	4b58      	ldr	r3, [pc, #352]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 8001096:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800109a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800109e:	623b      	str	r3, [r7, #32]
 80010a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80010a2:	4b55      	ldr	r3, [pc, #340]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010a8:	4a53      	ldr	r2, [pc, #332]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010b2:	4b51      	ldr	r3, [pc, #324]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010c0:	4b4d      	ldr	r3, [pc, #308]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010c6:	4a4c      	ldr	r2, [pc, #304]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010d0:	4b49      	ldr	r3, [pc, #292]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	4b46      	ldr	r3, [pc, #280]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e4:	4a44      	ldr	r2, [pc, #272]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010e6:	f043 0304 	orr.w	r3, r3, #4
 80010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ee:	4b42      	ldr	r3, [pc, #264]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b3e      	ldr	r3, [pc, #248]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001102:	4a3d      	ldr	r2, [pc, #244]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110c:	4b3a      	ldr	r3, [pc, #232]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	4b37      	ldr	r3, [pc, #220]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001120:	4a35      	ldr	r2, [pc, #212]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 8001122:	f043 0302 	orr.w	r3, r3, #2
 8001126:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800112a:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 800112c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001138:	4b2f      	ldr	r3, [pc, #188]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113e:	4a2e      	ldr	r2, [pc, #184]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 8001140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001144:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001148:	4b2b      	ldr	r3, [pc, #172]	@ (80011f8 <HAL_ETH_MspInit+0x198>)
 800114a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001156:	2332      	movs	r3, #50	@ 0x32
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001162:	2300      	movs	r3, #0
 8001164:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001166:	230b      	movs	r3, #11
 8001168:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4822      	ldr	r0, [pc, #136]	@ (80011fc <HAL_ETH_MspInit+0x19c>)
 8001172:	f001 f8bf 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001176:	2386      	movs	r3, #134	@ 0x86
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001186:	230b      	movs	r3, #11
 8001188:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	481b      	ldr	r0, [pc, #108]	@ (8001200 <HAL_ETH_MspInit+0x1a0>)
 8001192:	f001 f8af 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001196:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800119a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a8:	230b      	movs	r3, #11
 80011aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	4814      	ldr	r0, [pc, #80]	@ (8001204 <HAL_ETH_MspInit+0x1a4>)
 80011b4:	f001 f89e 	bl	80022f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011b8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ca:	230b      	movs	r3, #11
 80011cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <HAL_ETH_MspInit+0x1a8>)
 80011d6:	f001 f88d 	bl	80022f4 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	203d      	movs	r0, #61	@ 0x3d
 80011e0:	f000 fc1f 	bl	8001a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80011e4:	203d      	movs	r0, #61	@ 0x3d
 80011e6:	f000 fc36 	bl	8001a56 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 80011ea:	bf00      	nop
 80011ec:	3738      	adds	r7, #56	@ 0x38
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40028000 	.word	0x40028000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020800 	.word	0x58020800
 8001200:	58020000 	.word	0x58020000
 8001204:	58020400 	.word	0x58020400
 8001208:	58021800 	.word	0x58021800

0800120c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0b8      	sub	sp, #224	@ 0xe0
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	22b8      	movs	r2, #184	@ 0xb8
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f024 faad 	bl	802578c <memset>
  if(hi2c->Instance==I2C1)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a27      	ldr	r2, [pc, #156]	@ (80012d4 <HAL_I2C_MspInit+0xc8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d146      	bne.n	80012ca <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800123c:	f04f 0208 	mov.w	r2, #8
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	4618      	mov	r0, r3
 8001254:	f002 fe7e 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800125e:	f7ff fedf 	bl	8001020 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001262:	4b1d      	ldr	r3, [pc, #116]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	4a1b      	ldr	r2, [pc, #108]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 800126a:	f043 0302 	orr.w	r3, r3, #2
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001280:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001284:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001288:	2312      	movs	r3, #18
 800128a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800129a:	2304      	movs	r3, #4
 800129c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80012a4:	4619      	mov	r1, r3
 80012a6:	480d      	ldr	r0, [pc, #52]	@ (80012dc <HAL_I2C_MspInit+0xd0>)
 80012a8:	f001 f824 	bl	80022f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012ac:	4b0a      	ldr	r3, [pc, #40]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012b2:	4a09      	ldr	r2, [pc, #36]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <HAL_I2C_MspInit+0xcc>)
 80012be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80012ca:	bf00      	nop
 80012cc:	37e0      	adds	r7, #224	@ 0xe0
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40005400 	.word	0x40005400
 80012d8:	58024400 	.word	0x58024400
 80012dc:	58020400 	.word	0x58020400

080012e0 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0b2      	sub	sp, #200	@ 0xc8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	22b8      	movs	r2, #184	@ 0xb8
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f024 fa4b 	bl	802578c <memset>
  if(hrng->Instance==RNG)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a14      	ldr	r2, [pc, #80]	@ (800134c <HAL_RNG_MspInit+0x6c>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d121      	bne.n	8001344 <HAL_RNG_MspInit+0x64>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001300:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fe1c 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001322:	f7ff fe7d 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_RNG_MspInit+0x70>)
 8001328:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800132c:	4a08      	ldr	r2, [pc, #32]	@ (8001350 <HAL_RNG_MspInit+0x70>)
 800132e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001332:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_RNG_MspInit+0x70>)
 8001338:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800133c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8001344:	bf00      	nop
 8001346:	37c8      	adds	r7, #200	@ 0xc8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	48021800 	.word	0x48021800
 8001350:	58024400 	.word	0x58024400

08001354 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b0b8      	sub	sp, #224	@ 0xe0
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	f107 0310 	add.w	r3, r7, #16
 8001370:	22b8      	movs	r2, #184	@ 0xb8
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f024 fa09 	bl	802578c <memset>
  if(huart->Instance==USART3)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a27      	ldr	r2, [pc, #156]	@ (800141c <HAL_UART_MspInit+0xc8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d146      	bne.n	8001412 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001384:	f04f 0202 	mov.w	r2, #2
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fdda 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80013a6:	f7ff fe3b 	bl	8001020 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <HAL_UART_MspInit+0xcc>)
 80013ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001420 <HAL_UART_MspInit+0xcc>)
 80013b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013ba:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <HAL_UART_MspInit+0xcc>)
 80013bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <HAL_UART_MspInit+0xcc>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ce:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <HAL_UART_MspInit+0xcc>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d8:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <HAL_UART_MspInit+0xcc>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80013e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001400:	2307      	movs	r3, #7
 8001402:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001406:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	@ (8001424 <HAL_UART_MspInit+0xd0>)
 800140e:	f000 ff71 	bl	80022f4 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001412:	bf00      	nop
 8001414:	37e0      	adds	r7, #224	@ 0xe0
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40004800 	.word	0x40004800
 8001420:	58024400 	.word	0x58024400
 8001424:	58020c00 	.word	0x58020c00

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <NMI_Handler+0x4>

08001430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <MemManage_Handler+0x4>

08001440 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <BusFault_Handler+0x4>

08001448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <UsageFault_Handler+0x4>

08001450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800147e:	f000 f9c1 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}

08001486 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  return 1;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <_kill>:

int _kill(int pid, int sig)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
 800149e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014a0:	f024 fa74 	bl	802598c <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2216      	movs	r2, #22
 80014a8:	601a      	str	r2, [r3, #0]
  return -1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <_exit>:

void _exit (int status)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014be:	f04f 31ff 	mov.w	r1, #4294967295
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff ffe7 	bl	8001496 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <_exit+0x12>

080014cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	e00a      	b.n	80014f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014de:	f3af 8000 	nop.w
 80014e2:	4601      	mov	r1, r0
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	b2ca      	uxtb	r2, r1
 80014ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	3301      	adds	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dbf0      	blt.n	80014de <_read+0x12>
  }

  return len;
 80014fc:	687b      	ldr	r3, [r7, #4]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001512:	4618      	mov	r0, r3
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
 8001526:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800152e:	605a      	str	r2, [r3, #4]
  return 0;
 8001530:	2300      	movs	r3, #0
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <_isatty>:

int _isatty(int file)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f024 f9f4 	bl	802598c <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	24050000 	.word	0x24050000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	240020d8 	.word	0x240020d8
 80015d8:	24005608 	.word	0x24005608

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015e0:	4b32      	ldr	r3, [pc, #200]	@ (80016ac <SystemInit+0xd0>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a31      	ldr	r2, [pc, #196]	@ (80016ac <SystemInit+0xd0>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015f0:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <SystemInit+0xd4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	2b06      	cmp	r3, #6
 80015fa:	d807      	bhi.n	800160c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015fc:	4b2c      	ldr	r3, [pc, #176]	@ (80016b0 <SystemInit+0xd4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 030f 	bic.w	r3, r3, #15
 8001604:	4a2a      	ldr	r2, [pc, #168]	@ (80016b0 <SystemInit+0xd4>)
 8001606:	f043 0307 	orr.w	r3, r3, #7
 800160a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800160c:	4b29      	ldr	r3, [pc, #164]	@ (80016b4 <SystemInit+0xd8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a28      	ldr	r2, [pc, #160]	@ (80016b4 <SystemInit+0xd8>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001618:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <SystemInit+0xd8>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800161e:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <SystemInit+0xd8>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4924      	ldr	r1, [pc, #144]	@ (80016b4 <SystemInit+0xd8>)
 8001624:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <SystemInit+0xdc>)
 8001626:	4013      	ands	r3, r2
 8001628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800162a:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <SystemInit+0xd4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0308 	and.w	r3, r3, #8
 8001632:	2b00      	cmp	r3, #0
 8001634:	d007      	beq.n	8001646 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001636:	4b1e      	ldr	r3, [pc, #120]	@ (80016b0 <SystemInit+0xd4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f023 030f 	bic.w	r3, r3, #15
 800163e:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <SystemInit+0xd4>)
 8001640:	f043 0307 	orr.w	r3, r3, #7
 8001644:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001646:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <SystemInit+0xd8>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <SystemInit+0xd8>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <SystemInit+0xd8>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <SystemInit+0xd8>)
 800165a:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <SystemInit+0xe0>)
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <SystemInit+0xd8>)
 8001660:	4a17      	ldr	r2, [pc, #92]	@ (80016c0 <SystemInit+0xe4>)
 8001662:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001664:	4b13      	ldr	r3, [pc, #76]	@ (80016b4 <SystemInit+0xd8>)
 8001666:	4a17      	ldr	r2, [pc, #92]	@ (80016c4 <SystemInit+0xe8>)
 8001668:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <SystemInit+0xd8>)
 800166c:	2200      	movs	r2, #0
 800166e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001670:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <SystemInit+0xd8>)
 8001672:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <SystemInit+0xe8>)
 8001674:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <SystemInit+0xd8>)
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800167c:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <SystemInit+0xd8>)
 800167e:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <SystemInit+0xe8>)
 8001680:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001682:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <SystemInit+0xd8>)
 8001684:	2200      	movs	r2, #0
 8001686:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <SystemInit+0xd8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a09      	ldr	r2, [pc, #36]	@ (80016b4 <SystemInit+0xd8>)
 800168e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <SystemInit+0xd8>)
 8001696:	2200      	movs	r2, #0
 8001698:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800169a:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <SystemInit+0xec>)
 800169c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80016a0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00
 80016b0:	52002000 	.word	0x52002000
 80016b4:	58024400 	.word	0x58024400
 80016b8:	eaf6ed7f 	.word	0xeaf6ed7f
 80016bc:	02020200 	.word	0x02020200
 80016c0:	01ff0000 	.word	0x01ff0000
 80016c4:	01010280 	.word	0x01010280
 80016c8:	52004000 	.word	0x52004000

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001704 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016d0:	f7ff ff84 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fa:	f024 f94d 	bl	8025998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff f8e5 	bl	80008cc <main>
  bx  lr
 8001702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001704:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001708:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800170c:	24000e08 	.word	0x24000e08
  ldr r2, =_sidata
 8001710:	0803792c 	.word	0x0803792c
  ldr r2, =_sbss
 8001714:	24000ec8 	.word	0x24000ec8
  ldr r4, =_ebss
 8001718:	24005604 	.word	0x24005604

0800171c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC3_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001726:	2003      	movs	r0, #3
 8001728:	f000 f970 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800172c:	f002 fa3c 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8001730:	4602      	mov	r2, r0
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <HAL_Init+0x68>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	4913      	ldr	r1, [pc, #76]	@ (800178c <HAL_Init+0x6c>)
 800173e:	5ccb      	ldrb	r3, [r1, r3]
 8001740:	f003 031f 	and.w	r3, r3, #31
 8001744:	fa22 f303 	lsr.w	r3, r2, r3
 8001748:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800174a:	4b0f      	ldr	r3, [pc, #60]	@ (8001788 <HAL_Init+0x68>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	4a0e      	ldr	r2, [pc, #56]	@ (800178c <HAL_Init+0x6c>)
 8001754:	5cd3      	ldrb	r3, [r2, r3]
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	4a0b      	ldr	r2, [pc, #44]	@ (8001790 <HAL_Init+0x70>)
 8001762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001764:	4a0b      	ldr	r2, [pc, #44]	@ (8001794 <HAL_Init+0x74>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f814 	bl	8001798 <HAL_InitTick>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e002      	b.n	8001780 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800177a:	f7ff fc57 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800177e:	2300      	movs	r3, #0
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	58024400 	.word	0x58024400
 800178c:	08029bb4 	.word	0x08029bb4
 8001790:	24000004 	.word	0x24000004
 8001794:	24000000 	.word	0x24000000

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80017a0:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <HAL_InitTick+0x60>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e021      	b.n	80017f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <HAL_InitTick+0x64>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_InitTick+0x60>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f955 	bl	8001a72 <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00e      	b.n	80017f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d80a      	bhi.n	80017ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f000 f91f 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e4:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <HAL_InitTick+0x68>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2400000c 	.word	0x2400000c
 80017fc:	24000000 	.word	0x24000000
 8001800:	24000008 	.word	0x24000008

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	2400000c 	.word	0x2400000c
 8001828:	240020dc 	.word	0x240020dc

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	240020dc 	.word	0x240020dc

08001844 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001854:	4904      	ldr	r1, [pc, #16]	@ (8001868 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
}
 800185c:	bf00      	nop
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	58000400 	.word	0x58000400

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0b      	ldr	r3, [pc, #44]	@ (80018ac <__NVIC_SetPriorityGrouping+0x40>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	4313      	orrs	r3, r2
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x40>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00
 80018b0:	05fa0000 	.word	0x05fa0000

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4907      	ldr	r1, [pc, #28]	@ (8001908 <__NVIC_EnableIRQ+0x38>)
 80018ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	@ (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	@ (800195c <__NVIC_SetPriority+0x50>)
 800193c:	88fb      	ldrh	r3, [r7, #6]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f7ff ff8e 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	@ (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	@ (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff29 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff40 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff90 	bl	8001960 <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5f 	bl	800190c <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff33 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa4 	bl	80019c8 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0e3      	b.n	8001c66 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d106      	bne.n	8001ab6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff fad5 	bl	8001060 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8001c70 <HAL_ETH_Init+0x1e4>)
 8001ab8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001abc:	4a6c      	ldr	r2, [pc, #432]	@ (8001c70 <HAL_ETH_Init+0x1e4>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c70 <HAL_ETH_Init+0x1e4>)
 8001ac8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7a1b      	ldrb	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f7ff feb1 	bl	8001844 <HAL_SYSCFG_ETHInterfaceSelect>
 8001ae2:	e003      	b.n	8001aec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ae4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001ae8:	f7ff feac 	bl	8001844 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001aec:	4b61      	ldr	r3, [pc, #388]	@ (8001c74 <HAL_ETH_Init+0x1e8>)
 8001aee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b08:	f7ff fe90 	bl	800182c <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b0e:	e011      	b.n	8001b34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b10:	f7ff fe8c 	bl	800182c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b1e:	d909      	bls.n	8001b34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2204      	movs	r2, #4
 8001b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	22e0      	movs	r2, #224	@ 0xe0
 8001b2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e098      	b.n	8001c66 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1e4      	bne.n	8001b10 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f89e 	bl	8001c88 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b4c:	f002 f9a6 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a49      	ldr	r2, [pc, #292]	@ (8001c78 <HAL_ETH_Init+0x1ec>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	0c9a      	lsrs	r2, r3, #18
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	3a01      	subs	r2, #1
 8001b60:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 fa81 	bl	800206c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b72:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001b76:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b86:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	22e0      	movs	r2, #224	@ 0xe0
 8001ba2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e05d      	b.n	8001c66 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001bb6:	4b31      	ldr	r3, [pc, #196]	@ (8001c7c <HAL_ETH_Init+0x1f0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6952      	ldr	r2, [r2, #20]
 8001bbe:	0051      	lsls	r1, r2, #1
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	430b      	orrs	r3, r1
 8001bc6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bca:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fae9 	bl	80021a6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fb2f 	bl	8002238 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	3305      	adds	r3, #5
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	021a      	lsls	r2, r3, #8
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	3304      	adds	r3, #4
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4619      	mov	r1, r3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	3303      	adds	r3, #3
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	061a      	lsls	r2, r3, #24
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	3302      	adds	r3, #2
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	041b      	lsls	r3, r3, #16
 8001c0c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	3301      	adds	r3, #1
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c18:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001c26:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001c28:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <HAL_ETH_Init+0x1f4>)
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c84 <HAL_ETH_Init+0x1f8>)
 8001c4e:	430b      	orrs	r3, r1
 8001c50:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2210      	movs	r2, #16
 8001c60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	58024400 	.word	0x58024400
 8001c74:	58000400 	.word	0x58000400
 8001c78:	431bde83 	.word	0x431bde83
 8001c7c:	ffff8001 	.word	0xffff8001
 8001c80:	0c020060 	.word	0x0c020060
 8001c84:	0c20c000 	.word	0x0c20c000

08001c88 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ca2:	f002 f8fb 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8001ca6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	4a1a      	ldr	r2, [pc, #104]	@ (8001d14 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d804      	bhi.n	8001cba <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e022      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d204      	bcs.n	8001ccc <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	e019      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4a13      	ldr	r2, [pc, #76]	@ (8001d1c <HAL_ETH_SetMDIOClockRange+0x94>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d915      	bls.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4a12      	ldr	r2, [pc, #72]	@ (8001d20 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d804      	bhi.n	8001ce6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e00c      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d24 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d804      	bhi.n	8001cf8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	e003      	b.n	8001d00 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	02160ebf 	.word	0x02160ebf
 8001d18:	03938700 	.word	0x03938700
 8001d1c:	05f5e0ff 	.word	0x05f5e0ff
 8001d20:	08f0d17f 	.word	0x08f0d17f
 8001d24:	0ee6b27f 	.word	0x0ee6b27f

08001d28 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001d3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	791b      	ldrb	r3, [r3, #4]
 8001d40:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001d42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	7b1b      	ldrb	r3, [r3, #12]
 8001d48:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001d4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	7b5b      	ldrb	r3, [r3, #13]
 8001d50:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001d52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	7b9b      	ldrb	r3, [r3, #14]
 8001d58:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001d5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	7bdb      	ldrb	r3, [r3, #15]
 8001d60:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001d62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	7c12      	ldrb	r2, [r2, #16]
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	d102      	bne.n	8001d72 <ETH_SetMACConfig+0x4a>
 8001d6c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d70:	e000      	b.n	8001d74 <ETH_SetMACConfig+0x4c>
 8001d72:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001d74:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	7c52      	ldrb	r2, [r2, #17]
 8001d7a:	2a00      	cmp	r2, #0
 8001d7c:	d102      	bne.n	8001d84 <ETH_SetMACConfig+0x5c>
 8001d7e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d82:	e000      	b.n	8001d86 <ETH_SetMACConfig+0x5e>
 8001d84:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001d86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	7c9b      	ldrb	r3, [r3, #18]
 8001d8c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d8e:	431a      	orrs	r2, r3
               macconf->Speed |
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d94:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001d9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	7f1b      	ldrb	r3, [r3, #28]
 8001da0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001da2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	7f5b      	ldrb	r3, [r3, #29]
 8001da8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001daa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	7f92      	ldrb	r2, [r2, #30]
 8001db0:	2a00      	cmp	r2, #0
 8001db2:	d102      	bne.n	8001dba <ETH_SetMACConfig+0x92>
 8001db4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001db8:	e000      	b.n	8001dbc <ETH_SetMACConfig+0x94>
 8001dba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001dbc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	7fdb      	ldrb	r3, [r3, #31]
 8001dc2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001dc4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001dcc:	2a00      	cmp	r2, #0
 8001dce:	d102      	bne.n	8001dd6 <ETH_SetMACConfig+0xae>
 8001dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dd4:	e000      	b.n	8001dd8 <ETH_SetMACConfig+0xb0>
 8001dd6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001dd8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001dde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001de6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001de8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b56      	ldr	r3, [pc, #344]	@ (8001f54 <ETH_SetMACConfig+0x22c>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	68f9      	ldr	r1, [r7, #12]
 8001e02:	430b      	orrs	r3, r1
 8001e04:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e12:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001e14:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e1c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001e1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001e26:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001e28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	d102      	bne.n	8001e3a <ETH_SetMACConfig+0x112>
 8001e34:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e38:	e000      	b.n	8001e3c <ETH_SetMACConfig+0x114>
 8001e3a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001e3c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4b42      	ldr	r3, [pc, #264]	@ (8001f58 <ETH_SetMACConfig+0x230>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	430b      	orrs	r3, r1
 8001e58:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e60:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001e66:	4313      	orrs	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	4b3a      	ldr	r3, [pc, #232]	@ (8001f5c <ETH_SetMACConfig+0x234>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	68f9      	ldr	r1, [r7, #12]
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e84:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d101      	bne.n	8001e9a <ETH_SetMACConfig+0x172>
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	e000      	b.n	8001e9c <ETH_SetMACConfig+0x174>
 8001e9a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001e9c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001eae:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	68f9      	ldr	r1, [r7, #12]
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001ec4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001ecc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eda:	f023 0103 	bic.w	r1, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001ef2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d101      	bne.n	8001f16 <ETH_SetMACConfig+0x1ee>
 8001f12:	2240      	movs	r2, #64	@ 0x40
 8001f14:	e000      	b.n	8001f18 <ETH_SetMACConfig+0x1f0>
 8001f16:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001f18:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001f20:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001f22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001f2a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001f38:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	00048083 	.word	0x00048083
 8001f58:	c0f88000 	.word	0xc0f88000
 8001f5c:	fffffef0 	.word	0xfffffef0

08001f60 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b38      	ldr	r3, [pc, #224]	@ (8002058 <ETH_SetDMAConfig+0xf8>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	6811      	ldr	r1, [r2, #0]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f86:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	791b      	ldrb	r3, [r3, #4]
 8001f8c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f92:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	7b1b      	ldrb	r3, [r3, #12]
 8001f98:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800205c <ETH_SetDMAConfig+0xfc>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	68f9      	ldr	r1, [r7, #12]
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fb8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	7b5b      	ldrb	r3, [r3, #13]
 8001fbe:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fd0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001fd4:	4b22      	ldr	r3, [pc, #136]	@ (8002060 <ETH_SetDMAConfig+0x100>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	68f9      	ldr	r1, [r7, #12]
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fe4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	7d1b      	ldrb	r3, [r3, #20]
 8001ff0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ff2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	7f5b      	ldrb	r3, [r3, #29]
 8001ff8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002006:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800200a:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <ETH_SetDMAConfig+0x104>)
 800200c:	4013      	ands	r3, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	430b      	orrs	r3, r1
 8002016:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800201a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7f1b      	ldrb	r3, [r3, #28]
 8002022:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002028:	4313      	orrs	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002034:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002038:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <ETH_SetDMAConfig+0x108>)
 800203a:	4013      	ands	r3, r2
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	68f9      	ldr	r1, [r7, #12]
 8002042:	430b      	orrs	r3, r1
 8002044:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002048:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	ffff87fd 	.word	0xffff87fd
 800205c:	ffff2ffe 	.word	0xffff2ffe
 8002060:	fffec000 	.word	0xfffec000
 8002064:	ffc0efef 	.word	0xffc0efef
 8002068:	7fc0ffff 	.word	0x7fc0ffff

0800206c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b0a4      	sub	sp, #144	@ 0x90
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002074:	2301      	movs	r3, #1
 8002076:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800207a:	2300      	movs	r3, #0
 800207c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800208a:	2301      	movs	r3, #1
 800208c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002090:	2301      	movs	r3, #1
 8002092:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002096:	2301      	movs	r3, #1
 8002098:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80020b4:	2300      	movs	r3, #0
 80020b6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80020c4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80020c8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80020d4:	2301      	movs	r3, #1
 80020d6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80020e6:	2300      	movs	r3, #0
 80020e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80020ee:	2300      	movs	r3, #0
 80020f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002104:	2320      	movs	r3, #32
 8002106:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800210a:	2301      	movs	r3, #1
 800210c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002116:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800211a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800211c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002120:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002128:	2302      	movs	r3, #2
 800212a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002140:	2301      	movs	r3, #1
 8002142:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002146:	2300      	movs	r3, #0
 8002148:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800214a:	2301      	movs	r3, #1
 800214c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002150:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002154:	4619      	mov	r1, r3
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff fde6 	bl	8001d28 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800215c:	2301      	movs	r3, #1
 800215e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002160:	2301      	movs	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002168:	2300      	movs	r3, #0
 800216a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800216e:	2300      	movs	r3, #0
 8002170:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002176:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800217a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002180:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002184:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800218c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002190:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002192:	f107 0308 	add.w	r3, r7, #8
 8002196:	4619      	mov	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff fee1 	bl	8001f60 <ETH_SetDMAConfig>
}
 800219e:	bf00      	nop
 80021a0:	3790      	adds	r7, #144	@ 0x90
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	e01d      	b.n	80021f0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68d9      	ldr	r1, [r3, #12]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2200      	movs	r2, #0
 80021d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	3206      	adds	r2, #6
 80021e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3301      	adds	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d9de      	bls.n	80021b4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002204:	461a      	mov	r2, r3
 8002206:	2303      	movs	r3, #3
 8002208:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68da      	ldr	r2, [r3, #12]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002218:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002228:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800222c:	bf00      	nop
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002240:	2300      	movs	r3, #0
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e023      	b.n	800228e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6919      	ldr	r1, [r3, #16]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2200      	movs	r2, #0
 8002262:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2200      	movs	r2, #0
 8002268:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2200      	movs	r2, #0
 800226e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2200      	movs	r2, #0
 800227a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	3212      	adds	r2, #18
 8002284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3301      	adds	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d9d8      	bls.n	8002246 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ba:	461a      	mov	r2, r3
 80022bc:	2303      	movs	r3, #3
 80022be:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691a      	ldr	r2, [r3, #16]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022ce:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022e2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002302:	4b86      	ldr	r3, [pc, #536]	@ (800251c <HAL_GPIO_Init+0x228>)
 8002304:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002306:	e18c      	b.n	8002622 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 817e 	beq.w	800261c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d005      	beq.n	8002338 <HAL_GPIO_Init+0x44>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d130      	bne.n	800239a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	2203      	movs	r2, #3
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800236e:	2201      	movs	r2, #1
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	091b      	lsrs	r3, r3, #4
 8002384:	f003 0201 	and.w	r2, r3, #1
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d017      	beq.n	80023d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d123      	bne.n	800242a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	08da      	lsrs	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3208      	adds	r2, #8
 80023ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	08da      	lsrs	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3208      	adds	r2, #8
 8002424:	69b9      	ldr	r1, [r7, #24]
 8002426:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	2203      	movs	r2, #3
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4013      	ands	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0203 	and.w	r2, r3, #3
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80d8 	beq.w	800261c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246c:	4b2c      	ldr	r3, [pc, #176]	@ (8002520 <HAL_GPIO_Init+0x22c>)
 800246e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002472:	4a2b      	ldr	r2, [pc, #172]	@ (8002520 <HAL_GPIO_Init+0x22c>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800247c:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <HAL_GPIO_Init+0x22c>)
 800247e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248a:	4a26      	ldr	r2, [pc, #152]	@ (8002524 <HAL_GPIO_Init+0x230>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002528 <HAL_GPIO_Init+0x234>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d04a      	beq.n	800254c <HAL_GPIO_Init+0x258>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a1c      	ldr	r2, [pc, #112]	@ (800252c <HAL_GPIO_Init+0x238>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d02b      	beq.n	8002516 <HAL_GPIO_Init+0x222>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002530 <HAL_GPIO_Init+0x23c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d025      	beq.n	8002512 <HAL_GPIO_Init+0x21e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002534 <HAL_GPIO_Init+0x240>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01f      	beq.n	800250e <HAL_GPIO_Init+0x21a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a19      	ldr	r2, [pc, #100]	@ (8002538 <HAL_GPIO_Init+0x244>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d019      	beq.n	800250a <HAL_GPIO_Init+0x216>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a18      	ldr	r2, [pc, #96]	@ (800253c <HAL_GPIO_Init+0x248>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_GPIO_Init+0x212>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a17      	ldr	r2, [pc, #92]	@ (8002540 <HAL_GPIO_Init+0x24c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00d      	beq.n	8002502 <HAL_GPIO_Init+0x20e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a16      	ldr	r2, [pc, #88]	@ (8002544 <HAL_GPIO_Init+0x250>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <HAL_GPIO_Init+0x20a>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a15      	ldr	r2, [pc, #84]	@ (8002548 <HAL_GPIO_Init+0x254>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_GPIO_Init+0x206>
 80024f6:	2309      	movs	r3, #9
 80024f8:	e029      	b.n	800254e <HAL_GPIO_Init+0x25a>
 80024fa:	230a      	movs	r3, #10
 80024fc:	e027      	b.n	800254e <HAL_GPIO_Init+0x25a>
 80024fe:	2307      	movs	r3, #7
 8002500:	e025      	b.n	800254e <HAL_GPIO_Init+0x25a>
 8002502:	2306      	movs	r3, #6
 8002504:	e023      	b.n	800254e <HAL_GPIO_Init+0x25a>
 8002506:	2305      	movs	r3, #5
 8002508:	e021      	b.n	800254e <HAL_GPIO_Init+0x25a>
 800250a:	2304      	movs	r3, #4
 800250c:	e01f      	b.n	800254e <HAL_GPIO_Init+0x25a>
 800250e:	2303      	movs	r3, #3
 8002510:	e01d      	b.n	800254e <HAL_GPIO_Init+0x25a>
 8002512:	2302      	movs	r3, #2
 8002514:	e01b      	b.n	800254e <HAL_GPIO_Init+0x25a>
 8002516:	2301      	movs	r3, #1
 8002518:	e019      	b.n	800254e <HAL_GPIO_Init+0x25a>
 800251a:	bf00      	nop
 800251c:	58000080 	.word	0x58000080
 8002520:	58024400 	.word	0x58024400
 8002524:	58000400 	.word	0x58000400
 8002528:	58020000 	.word	0x58020000
 800252c:	58020400 	.word	0x58020400
 8002530:	58020800 	.word	0x58020800
 8002534:	58020c00 	.word	0x58020c00
 8002538:	58021000 	.word	0x58021000
 800253c:	58021400 	.word	0x58021400
 8002540:	58021800 	.word	0x58021800
 8002544:	58021c00 	.word	0x58021c00
 8002548:	58022400 	.word	0x58022400
 800254c:	2300      	movs	r3, #0
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	f002 0203 	and.w	r2, r2, #3
 8002554:	0092      	lsls	r2, r2, #2
 8002556:	4093      	lsls	r3, r2
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800255e:	4938      	ldr	r1, [pc, #224]	@ (8002640 <HAL_GPIO_Init+0x34c>)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	3302      	adds	r3, #2
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3301      	adds	r3, #1
 8002620:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	f47f ae6b 	bne.w	8002308 <HAL_GPIO_Init+0x14>
  }
}
 8002632:	bf00      	nop
 8002634:	bf00      	nop
 8002636:	3724      	adds	r7, #36	@ 0x24
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	58000400 	.word	0x58000400

08002644 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800265c:	2301      	movs	r3, #1
 800265e:	73fb      	strb	r3, [r7, #15]
 8002660:	e001      	b.n	8002666 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002690:	e003      	b.n	800269a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	041a      	lsls	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	619a      	str	r2, [r3, #24]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e08b      	b.n	80027d2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d106      	bne.n	80026d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fd9c 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2224      	movs	r2, #36	@ 0x24
 80026d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002708:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d107      	bne.n	8002722 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	e006      	b.n	8002730 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800272e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d108      	bne.n	800274a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	e007      	b.n	800275a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002758:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <HAL_I2C_Init+0x134>)
 8002766:	430b      	orrs	r3, r1
 8002768:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002778:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	69d9      	ldr	r1, [r3, #28]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1a      	ldr	r2, [r3, #32]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f042 0201 	orr.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	02008000 	.word	0x02008000

080027e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	4608      	mov	r0, r1
 80027ea:	4611      	mov	r1, r2
 80027ec:	461a      	mov	r2, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	817b      	strh	r3, [r7, #10]
 80027f2:	460b      	mov	r3, r1
 80027f4:	813b      	strh	r3, [r7, #8]
 80027f6:	4613      	mov	r3, r2
 80027f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b20      	cmp	r3, #32
 8002804:	f040 80f9 	bne.w	80029fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_I2C_Mem_Write+0x34>
 800280e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0ed      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_I2C_Mem_Write+0x4e>
 800282a:	2302      	movs	r3, #2
 800282c:	e0e6      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002836:	f7fe fff9 	bl	800182c <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2319      	movs	r3, #25
 8002842:	2201      	movs	r2, #1
 8002844:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f955 	bl	8002af8 <I2C_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0d1      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2221      	movs	r2, #33	@ 0x21
 800285c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2240      	movs	r2, #64	@ 0x40
 8002864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002878:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002880:	88f8      	ldrh	r0, [r7, #6]
 8002882:	893a      	ldrh	r2, [r7, #8]
 8002884:	8979      	ldrh	r1, [r7, #10]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	4603      	mov	r3, r0
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 f8b9 	bl	8002a08 <I2C_RequestMemoryWrite>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0a9      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2bff      	cmp	r3, #255	@ 0xff
 80028b0:	d90e      	bls.n	80028d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	22ff      	movs	r2, #255	@ 0xff
 80028b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	8979      	ldrh	r1, [r7, #10]
 80028c0:	2300      	movs	r3, #0
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fad9 	bl	8002e80 <I2C_TransferConfig>
 80028ce:	e00f      	b.n	80028f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	8979      	ldrh	r1, [r7, #10]
 80028e2:	2300      	movs	r3, #0
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fac8 	bl	8002e80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f958 	bl	8002baa <I2C_WaitOnTXISFlagUntilTimeout>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e07b      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002914:	1c5a      	adds	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800292c:	3b01      	subs	r3, #1
 800292e:	b29a      	uxth	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d034      	beq.n	80029a8 <HAL_I2C_Mem_Write+0x1c8>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d130      	bne.n	80029a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	2200      	movs	r2, #0
 800294e:	2180      	movs	r1, #128	@ 0x80
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f000 f8d1 	bl	8002af8 <I2C_WaitOnFlagUntilTimeout>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e04d      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2bff      	cmp	r3, #255	@ 0xff
 8002968:	d90e      	bls.n	8002988 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	22ff      	movs	r2, #255	@ 0xff
 800296e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	b2da      	uxtb	r2, r3
 8002976:	8979      	ldrh	r1, [r7, #10]
 8002978:	2300      	movs	r3, #0
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fa7d 	bl	8002e80 <I2C_TransferConfig>
 8002986:	e00f      	b.n	80029a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002996:	b2da      	uxtb	r2, r3
 8002998:	8979      	ldrh	r1, [r7, #10]
 800299a:	2300      	movs	r3, #0
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fa6c 	bl	8002e80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d19e      	bne.n	80028f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f93e 	bl	8002c38 <I2C_WaitOnSTOPFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e01a      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2220      	movs	r2, #32
 80029cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <HAL_I2C_Mem_Write+0x224>)
 80029da:	400b      	ands	r3, r1
 80029dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80029fa:	2302      	movs	r3, #2
  }
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	fe00e800 	.word	0xfe00e800

08002a08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af02      	add	r7, sp, #8
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	461a      	mov	r2, r3
 8002a16:	4603      	mov	r3, r0
 8002a18:	817b      	strh	r3, [r7, #10]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	813b      	strh	r3, [r7, #8]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	8979      	ldrh	r1, [r7, #10]
 8002a28:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <I2C_RequestMemoryWrite+0xa4>)
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fa25 	bl	8002e80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	69b9      	ldr	r1, [r7, #24]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f8b5 	bl	8002baa <I2C_WaitOnTXISFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e02c      	b.n	8002aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a4a:	88fb      	ldrh	r3, [r7, #6]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a50:	893b      	ldrh	r3, [r7, #8]
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a5a:	e015      	b.n	8002a88 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a5c:	893b      	ldrh	r3, [r7, #8]
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	69b9      	ldr	r1, [r7, #24]
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f89b 	bl	8002baa <I2C_WaitOnTXISFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e012      	b.n	8002aa4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7e:	893b      	ldrh	r3, [r7, #8]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	9300      	str	r3, [sp, #0]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2180      	movs	r1, #128	@ 0x80
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f830 	bl	8002af8 <I2C_WaitOnFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	80002000 	.word	0x80002000

08002ab0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d103      	bne.n	8002ace <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d007      	beq.n	8002aec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	619a      	str	r2, [r3, #24]
  }
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b08:	e03b      	b.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	6839      	ldr	r1, [r7, #0]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f8d6 	bl	8002cc0 <I2C_IsErrorOccurred>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e041      	b.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b24:	d02d      	beq.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b26:	f7fe fe81 	bl	800182c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d302      	bcc.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d122      	bne.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699a      	ldr	r2, [r3, #24]
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	4013      	ands	r3, r2
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d113      	bne.n	8002b82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00f      	b.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699a      	ldr	r2, [r3, #24]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	bf0c      	ite	eq
 8002b92:	2301      	moveq	r3, #1
 8002b94:	2300      	movne	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	461a      	mov	r2, r3
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d0b4      	beq.n	8002b0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002bb6:	e033      	b.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	68b9      	ldr	r1, [r7, #8]
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 f87f 	bl	8002cc0 <I2C_IsErrorOccurred>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e031      	b.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd2:	d025      	beq.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd4:	f7fe fe2a 	bl	800182c <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d302      	bcc.n	8002bea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11a      	bne.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d013      	beq.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfc:	f043 0220 	orr.w	r2, r3, #32
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e007      	b.n	8002c30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d1c4      	bne.n	8002bb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c44:	e02f      	b.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f838 	bl	8002cc0 <I2C_IsErrorOccurred>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e02d      	b.n	8002cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5a:	f7fe fde7 	bl	800182c <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d302      	bcc.n	8002c70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d11a      	bne.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d013      	beq.n	8002ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c82:	f043 0220 	orr.w	r2, r3, #32
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e007      	b.n	8002cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d1c8      	bne.n	8002c46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	@ 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d068      	beq.n	8002dbe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002cf4:	e049      	b.n	8002d8a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfc:	d045      	beq.n	8002d8a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002cfe:	f7fe fd95 	bl	800182c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d302      	bcc.n	8002d14 <I2C_IsErrorOccurred+0x54>
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d13a      	bne.n	8002d8a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d36:	d121      	bne.n	8002d7c <I2C_IsErrorOccurred+0xbc>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d3e:	d01d      	beq.n	8002d7c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d01a      	beq.n	8002d7c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002d56:	f7fe fd69 	bl	800182c <HAL_GetTick>
 8002d5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d5c:	e00e      	b.n	8002d7c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002d5e:	f7fe fd65 	bl	800182c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b19      	cmp	r3, #25
 8002d6a:	d907      	bls.n	8002d7c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f043 0320 	orr.w	r3, r3, #32
 8002d72:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d7a:	e006      	b.n	8002d8a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b20      	cmp	r3, #32
 8002d88:	d1e9      	bne.n	8002d5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d003      	beq.n	8002da0 <I2C_IsErrorOccurred+0xe0>
 8002d98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0aa      	beq.n	8002cf6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2220      	movs	r2, #32
 8002dae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002de0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00b      	beq.n	8002e0a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	f043 0308 	orr.w	r3, r3, #8
 8002df8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01c      	beq.n	8002e6e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff fe3b 	bl	8002ab0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <I2C_IsErrorOccurred+0x1bc>)
 8002e46:	400b      	ands	r3, r1
 8002e48:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3728      	adds	r7, #40	@ 0x28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	fe00e800 	.word	0xfe00e800

08002e80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	817b      	strh	r3, [r7, #10]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e92:	897b      	ldrh	r3, [r7, #10]
 8002e94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e98:	7a7b      	ldrb	r3, [r7, #9]
 8002e9a:	041b      	lsls	r3, r3, #16
 8002e9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ea0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002eae:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	0d5b      	lsrs	r3, r3, #21
 8002eba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ebe:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <I2C_TransferConfig+0x60>)
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	ea02 0103 	and.w	r1, r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	03ff63ff 	.word	0x03ff63ff

08002ee4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d138      	bne.n	8002f6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e032      	b.n	8002f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2224      	movs	r2, #36	@ 0x24
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6819      	ldr	r1, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e000      	b.n	8002f6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f6c:	2302      	movs	r3, #2
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d139      	bne.n	8003004 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e033      	b.n	8003006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2224      	movs	r2, #36	@ 0x24
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fcc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003004:	2302      	movs	r3, #2
  }
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
	...

08003014 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800301c:	4b19      	ldr	r3, [pc, #100]	@ (8003084 <HAL_PWREx_ConfigSupply+0x70>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d00a      	beq.n	800303e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003028:	4b16      	ldr	r3, [pc, #88]	@ (8003084 <HAL_PWREx_ConfigSupply+0x70>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	429a      	cmp	r2, r3
 8003034:	d001      	beq.n	800303a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e01f      	b.n	800307a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	e01d      	b.n	800307a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800303e:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <HAL_PWREx_ConfigSupply+0x70>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	f023 0207 	bic.w	r2, r3, #7
 8003046:	490f      	ldr	r1, [pc, #60]	@ (8003084 <HAL_PWREx_ConfigSupply+0x70>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4313      	orrs	r3, r2
 800304c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800304e:	f7fe fbed 	bl	800182c <HAL_GetTick>
 8003052:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003054:	e009      	b.n	800306a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003056:	f7fe fbe9 	bl	800182c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003064:	d901      	bls.n	800306a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e007      	b.n	800307a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_PWREx_ConfigSupply+0x70>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003072:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003076:	d1ee      	bne.n	8003056 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	58024800 	.word	0x58024800

08003088 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08c      	sub	sp, #48	@ 0x30
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e3c8      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 8087 	beq.w	80031b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a8:	4b88      	ldr	r3, [pc, #544]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030b2:	4b86      	ldr	r3, [pc, #536]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80030b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ba:	2b10      	cmp	r3, #16
 80030bc:	d007      	beq.n	80030ce <HAL_RCC_OscConfig+0x46>
 80030be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030c0:	2b18      	cmp	r3, #24
 80030c2:	d110      	bne.n	80030e6 <HAL_RCC_OscConfig+0x5e>
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d10b      	bne.n	80030e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ce:	4b7f      	ldr	r3, [pc, #508]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d06c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x12c>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d168      	bne.n	80031b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e3a2      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x76>
 80030f0:	4b76      	ldr	r3, [pc, #472]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a75      	ldr	r2, [pc, #468]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	e02e      	b.n	800315c <HAL_RCC_OscConfig+0xd4>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b71      	ldr	r3, [pc, #452]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a70      	ldr	r2, [pc, #448]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800310c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b6e      	ldr	r3, [pc, #440]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6d      	ldr	r2, [pc, #436]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e01d      	b.n	800315c <HAL_RCC_OscConfig+0xd4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003128:	d10c      	bne.n	8003144 <HAL_RCC_OscConfig+0xbc>
 800312a:	4b68      	ldr	r3, [pc, #416]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a67      	ldr	r2, [pc, #412]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	4b65      	ldr	r3, [pc, #404]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a64      	ldr	r2, [pc, #400]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800313c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	e00b      	b.n	800315c <HAL_RCC_OscConfig+0xd4>
 8003144:	4b61      	ldr	r3, [pc, #388]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a60      	ldr	r2, [pc, #384]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800314a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b5e      	ldr	r3, [pc, #376]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5d      	ldr	r2, [pc, #372]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800315a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fb62 	bl	800182c <HAL_GetTick>
 8003168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316c:	f7fe fb5e 	bl	800182c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b64      	cmp	r3, #100	@ 0x64
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e356      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800317e:	4b53      	ldr	r3, [pc, #332]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0f0      	beq.n	800316c <HAL_RCC_OscConfig+0xe4>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe fb4e 	bl	800182c <HAL_GetTick>
 8003190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7fe fb4a 	bl	800182c <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	@ 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e342      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80031a6:	4b49      	ldr	r3, [pc, #292]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x10c>
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 808c 	beq.w	80032dc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031c4:	4b41      	ldr	r3, [pc, #260]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031ce:	4b3f      	ldr	r3, [pc, #252]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80031d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <HAL_RCC_OscConfig+0x162>
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	2b18      	cmp	r3, #24
 80031de:	d137      	bne.n	8003250 <HAL_RCC_OscConfig+0x1c8>
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d132      	bne.n	8003250 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031ea:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0304 	and.w	r3, r3, #4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x17a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e314      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003202:	4b32      	ldr	r3, [pc, #200]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0219 	bic.w	r2, r3, #25
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	492f      	ldr	r1, [pc, #188]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003210:	4313      	orrs	r3, r2
 8003212:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe fb0a 	bl	800182c <HAL_GetTick>
 8003218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321c:	f7fe fb06 	bl	800182c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e2fe      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800322e:	4b27      	ldr	r3, [pc, #156]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	061b      	lsls	r3, r3, #24
 8003248:	4920      	ldr	r1, [pc, #128]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800324e:	e045      	b.n	80032dc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d026      	beq.n	80032a6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003258:	4b1c      	ldr	r3, [pc, #112]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f023 0219 	bic.w	r2, r3, #25
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4919      	ldr	r1, [pc, #100]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fe fadf 	bl	800182c <HAL_GetTick>
 800326e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003272:	f7fe fadb 	bl	800182c <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e2d3      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003284:	4b11      	ldr	r3, [pc, #68]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b0e      	ldr	r3, [pc, #56]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	490b      	ldr	r1, [pc, #44]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
 80032a4:	e01a      	b.n	80032dc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032a6:	4b09      	ldr	r3, [pc, #36]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <HAL_RCC_OscConfig+0x244>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b2:	f7fe fabb 	bl	800182c <HAL_GetTick>
 80032b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ba:	f7fe fab7 	bl	800182c <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d903      	bls.n	80032d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	e2af      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
 80032cc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80032d0:	4b96      	ldr	r3, [pc, #600]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1ee      	bne.n	80032ba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0310 	and.w	r3, r3, #16
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d06a      	beq.n	80033be <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032e8:	4b90      	ldr	r3, [pc, #576]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032f0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032f2:	4b8e      	ldr	r3, [pc, #568]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 80032f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d007      	beq.n	800330e <HAL_RCC_OscConfig+0x286>
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b18      	cmp	r3, #24
 8003302:	d11b      	bne.n	800333c <HAL_RCC_OscConfig+0x2b4>
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b01      	cmp	r3, #1
 800330c:	d116      	bne.n	800333c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800330e:	4b87      	ldr	r3, [pc, #540]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x29e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	2b80      	cmp	r3, #128	@ 0x80
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e282      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003326:	4b81      	ldr	r3, [pc, #516]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	061b      	lsls	r3, r3, #24
 8003334:	497d      	ldr	r1, [pc, #500]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003336:	4313      	orrs	r3, r2
 8003338:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800333a:	e040      	b.n	80033be <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d023      	beq.n	800338c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003344:	4b79      	ldr	r3, [pc, #484]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a78      	ldr	r2, [pc, #480]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 800334a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800334e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe fa6c 	bl	800182c <HAL_GetTick>
 8003354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003358:	f7fe fa68 	bl	800182c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e260      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800336a:	4b70      	ldr	r3, [pc, #448]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003376:	4b6d      	ldr	r3, [pc, #436]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	061b      	lsls	r3, r3, #24
 8003384:	4969      	ldr	r1, [pc, #420]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003386:	4313      	orrs	r3, r2
 8003388:	60cb      	str	r3, [r1, #12]
 800338a:	e018      	b.n	80033be <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800338c:	4b67      	ldr	r3, [pc, #412]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a66      	ldr	r2, [pc, #408]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7fe fa48 	bl	800182c <HAL_GetTick>
 800339c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80033a0:	f7fe fa44 	bl	800182c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e23c      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80033b2:	4b5e      	ldr	r3, [pc, #376]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d036      	beq.n	8003438 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d019      	beq.n	8003406 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b56      	ldr	r3, [pc, #344]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 80033d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033d6:	4a55      	ldr	r2, [pc, #340]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033de:	f7fe fa25 	bl	800182c <HAL_GetTick>
 80033e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e6:	f7fe fa21 	bl	800182c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e219      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033f8:	4b4c      	ldr	r3, [pc, #304]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 80033fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x35e>
 8003404:	e018      	b.n	8003438 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003406:	4b49      	ldr	r3, [pc, #292]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800340a:	4a48      	ldr	r2, [pc, #288]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 800340c:	f023 0301 	bic.w	r3, r3, #1
 8003410:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003412:	f7fe fa0b 	bl	800182c <HAL_GetTick>
 8003416:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341a:	f7fe fa07 	bl	800182c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e1ff      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800342c:	4b3f      	ldr	r3, [pc, #252]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f0      	bne.n	800341a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d036      	beq.n	80034b2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d019      	beq.n	8003480 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800344c:	4b37      	ldr	r3, [pc, #220]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a36      	ldr	r2, [pc, #216]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003452:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003456:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003458:	f7fe f9e8 	bl	800182c <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003460:	f7fe f9e4 	bl	800182c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1dc      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003472:	4b2e      	ldr	r3, [pc, #184]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f0      	beq.n	8003460 <HAL_RCC_OscConfig+0x3d8>
 800347e:	e018      	b.n	80034b2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003480:	4b2a      	ldr	r3, [pc, #168]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a29      	ldr	r2, [pc, #164]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003486:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800348a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800348c:	f7fe f9ce 	bl	800182c <HAL_GetTick>
 8003490:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003494:	f7fe f9ca 	bl	800182c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1c2      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80034a6:	4b21      	ldr	r3, [pc, #132]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	f000 8086 	beq.w	80035cc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003530 <HAL_RCC_OscConfig+0x4a8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003530 <HAL_RCC_OscConfig+0x4a8>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034cc:	f7fe f9ae 	bl	800182c <HAL_GetTick>
 80034d0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fe f9aa 	bl	800182c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	@ 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e1a2      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034e6:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <HAL_RCC_OscConfig+0x4a8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d106      	bne.n	8003508 <HAL_RCC_OscConfig+0x480>
 80034fa:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	4a0b      	ldr	r2, [pc, #44]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003500:	f043 0301 	orr.w	r3, r3, #1
 8003504:	6713      	str	r3, [r2, #112]	@ 0x70
 8003506:	e032      	b.n	800356e <HAL_RCC_OscConfig+0x4e6>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d111      	bne.n	8003534 <HAL_RCC_OscConfig+0x4ac>
 8003510:	4b06      	ldr	r3, [pc, #24]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	4a05      	ldr	r2, [pc, #20]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	@ 0x70
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	4a02      	ldr	r2, [pc, #8]	@ (800352c <HAL_RCC_OscConfig+0x4a4>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	@ 0x70
 8003528:	e021      	b.n	800356e <HAL_RCC_OscConfig+0x4e6>
 800352a:	bf00      	nop
 800352c:	58024400 	.word	0x58024400
 8003530:	58024800 	.word	0x58024800
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b05      	cmp	r3, #5
 800353a:	d10c      	bne.n	8003556 <HAL_RCC_OscConfig+0x4ce>
 800353c:	4b83      	ldr	r3, [pc, #524]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003540:	4a82      	ldr	r2, [pc, #520]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003542:	f043 0304 	orr.w	r3, r3, #4
 8003546:	6713      	str	r3, [r2, #112]	@ 0x70
 8003548:	4b80      	ldr	r3, [pc, #512]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800354a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354c:	4a7f      	ldr	r2, [pc, #508]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800354e:	f043 0301 	orr.w	r3, r3, #1
 8003552:	6713      	str	r3, [r2, #112]	@ 0x70
 8003554:	e00b      	b.n	800356e <HAL_RCC_OscConfig+0x4e6>
 8003556:	4b7d      	ldr	r3, [pc, #500]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	4a7c      	ldr	r2, [pc, #496]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	@ 0x70
 8003562:	4b7a      	ldr	r3, [pc, #488]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003566:	4a79      	ldr	r2, [pc, #484]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003568:	f023 0304 	bic.w	r3, r3, #4
 800356c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d015      	beq.n	80035a2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fe f959 	bl	800182c <HAL_GetTick>
 800357a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fe f955 	bl	800182c <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e14b      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003594:	4b6d      	ldr	r3, [pc, #436]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0ee      	beq.n	800357e <HAL_RCC_OscConfig+0x4f6>
 80035a0:	e014      	b.n	80035cc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7fe f943 	bl	800182c <HAL_GetTick>
 80035a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035a8:	e00a      	b.n	80035c0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fe f93f 	bl	800182c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e135      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80035c0:	4b62      	ldr	r3, [pc, #392]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1ee      	bne.n	80035aa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 812a 	beq.w	800382a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035d6:	4b5d      	ldr	r3, [pc, #372]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035de:	2b18      	cmp	r3, #24
 80035e0:	f000 80ba 	beq.w	8003758 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	f040 8095 	bne.w	8003718 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ee:	4b57      	ldr	r3, [pc, #348]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a56      	ldr	r2, [pc, #344]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80035f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fe f917 	bl	800182c <HAL_GetTick>
 80035fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003602:	f7fe f913 	bl	800182c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e10b      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003614:	4b4d      	ldr	r3, [pc, #308]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f0      	bne.n	8003602 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003620:	4b4a      	ldr	r3, [pc, #296]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003624:	4b4a      	ldr	r3, [pc, #296]	@ (8003750 <HAL_RCC_OscConfig+0x6c8>)
 8003626:	4013      	ands	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	430a      	orrs	r2, r1
 8003634:	4945      	ldr	r1, [pc, #276]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003636:	4313      	orrs	r3, r2
 8003638:	628b      	str	r3, [r1, #40]	@ 0x28
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363e:	3b01      	subs	r3, #1
 8003640:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003648:	3b01      	subs	r3, #1
 800364a:	025b      	lsls	r3, r3, #9
 800364c:	b29b      	uxth	r3, r3
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003654:	3b01      	subs	r3, #1
 8003656:	041b      	lsls	r3, r3, #16
 8003658:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003662:	3b01      	subs	r3, #1
 8003664:	061b      	lsls	r3, r3, #24
 8003666:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800366a:	4938      	ldr	r1, [pc, #224]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003670:	4b36      	ldr	r3, [pc, #216]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	4a35      	ldr	r2, [pc, #212]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003676:	f023 0301 	bic.w	r3, r3, #1
 800367a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800367c:	4b33      	ldr	r3, [pc, #204]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800367e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003680:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <HAL_RCC_OscConfig+0x6cc>)
 8003682:	4013      	ands	r3, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003688:	00d2      	lsls	r2, r2, #3
 800368a:	4930      	ldr	r1, [pc, #192]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800368c:	4313      	orrs	r3, r2
 800368e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003690:	4b2e      	ldr	r3, [pc, #184]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	f023 020c 	bic.w	r2, r3, #12
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369c:	492b      	ldr	r1, [pc, #172]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80036a2:	4b2a      	ldr	r3, [pc, #168]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a6:	f023 0202 	bic.w	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ae:	4927      	ldr	r1, [pc, #156]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80036b4:	4b25      	ldr	r3, [pc, #148]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	4a24      	ldr	r2, [pc, #144]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c0:	4b22      	ldr	r3, [pc, #136]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	4a21      	ldr	r2, [pc, #132]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80036cc:	4b1f      	ldr	r3, [pc, #124]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	4a1e      	ldr	r2, [pc, #120]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80036d8:	4b1c      	ldr	r3, [pc, #112]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	4a1b      	ldr	r2, [pc, #108]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	4b19      	ldr	r3, [pc, #100]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a18      	ldr	r2, [pc, #96]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 80036ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fe f89c 	bl	800182c <HAL_GetTick>
 80036f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fe f898 	bl	800182c <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e090      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800370a:	4b10      	ldr	r3, [pc, #64]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x670>
 8003716:	e088      	b.n	800382a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003718:	4b0c      	ldr	r3, [pc, #48]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a0b      	ldr	r2, [pc, #44]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 800371e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe f882 	bl	800182c <HAL_GetTick>
 8003728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800372c:	f7fe f87e 	bl	800182c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e076      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800373e:	4b03      	ldr	r3, [pc, #12]	@ (800374c <HAL_RCC_OscConfig+0x6c4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x6a4>
 800374a:	e06e      	b.n	800382a <HAL_RCC_OscConfig+0x7a2>
 800374c:	58024400 	.word	0x58024400
 8003750:	fffffc0c 	.word	0xfffffc0c
 8003754:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003758:	4b36      	ldr	r3, [pc, #216]	@ (8003834 <HAL_RCC_OscConfig+0x7ac>)
 800375a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800375e:	4b35      	ldr	r3, [pc, #212]	@ (8003834 <HAL_RCC_OscConfig+0x7ac>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	2b01      	cmp	r3, #1
 800376a:	d031      	beq.n	80037d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003776:	429a      	cmp	r2, r3
 8003778:	d12a      	bne.n	80037d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	429a      	cmp	r2, r3
 8003788:	d122      	bne.n	80037d0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d11a      	bne.n	80037d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	0a5b      	lsrs	r3, r3, #9
 800379e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d111      	bne.n	80037d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	0c1b      	lsrs	r3, r3, #16
 80037b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d108      	bne.n	80037d0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	0e1b      	lsrs	r3, r3, #24
 80037c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e02b      	b.n	800382c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80037d4:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <HAL_RCC_OscConfig+0x7ac>)
 80037d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037d8:	08db      	lsrs	r3, r3, #3
 80037da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d01f      	beq.n	800382a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80037ea:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <HAL_RCC_OscConfig+0x7ac>)
 80037ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ee:	4a11      	ldr	r2, [pc, #68]	@ (8003834 <HAL_RCC_OscConfig+0x7ac>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037f6:	f7fe f819 	bl	800182c <HAL_GetTick>
 80037fa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80037fc:	bf00      	nop
 80037fe:	f7fe f815 	bl	800182c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	4293      	cmp	r3, r2
 8003808:	d0f9      	beq.n	80037fe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800380a:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <HAL_RCC_OscConfig+0x7ac>)
 800380c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800380e:	4b0a      	ldr	r3, [pc, #40]	@ (8003838 <HAL_RCC_OscConfig+0x7b0>)
 8003810:	4013      	ands	r3, r2
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003816:	00d2      	lsls	r2, r2, #3
 8003818:	4906      	ldr	r1, [pc, #24]	@ (8003834 <HAL_RCC_OscConfig+0x7ac>)
 800381a:	4313      	orrs	r3, r2
 800381c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800381e:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_RCC_OscConfig+0x7ac>)
 8003820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003822:	4a04      	ldr	r2, [pc, #16]	@ (8003834 <HAL_RCC_OscConfig+0x7ac>)
 8003824:	f043 0301 	orr.w	r3, r3, #1
 8003828:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3730      	adds	r7, #48	@ 0x30
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	58024400 	.word	0x58024400
 8003838:	ffff0007 	.word	0xffff0007

0800383c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e19c      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003850:	4b8a      	ldr	r3, [pc, #552]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 030f 	and.w	r3, r3, #15
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d910      	bls.n	8003880 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385e:	4b87      	ldr	r3, [pc, #540]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f023 020f 	bic.w	r2, r3, #15
 8003866:	4985      	ldr	r1, [pc, #532]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	4313      	orrs	r3, r2
 800386c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386e:	4b83      	ldr	r3, [pc, #524]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	683a      	ldr	r2, [r7, #0]
 8003878:	429a      	cmp	r2, r3
 800387a:	d001      	beq.n	8003880 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e184      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d010      	beq.n	80038ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	4b7b      	ldr	r3, [pc, #492]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003898:	429a      	cmp	r2, r3
 800389a:	d908      	bls.n	80038ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800389c:	4b78      	ldr	r3, [pc, #480]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	4975      	ldr	r1, [pc, #468]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d010      	beq.n	80038dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	4b70      	ldr	r3, [pc, #448]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d908      	bls.n	80038dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038ca:	4b6d      	ldr	r3, [pc, #436]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	496a      	ldr	r1, [pc, #424]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d010      	beq.n	800390a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	699a      	ldr	r2, [r3, #24]
 80038ec:	4b64      	ldr	r3, [pc, #400]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d908      	bls.n	800390a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038f8:	4b61      	ldr	r3, [pc, #388]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	495e      	ldr	r1, [pc, #376]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003906:	4313      	orrs	r3, r2
 8003908:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b00      	cmp	r3, #0
 8003914:	d010      	beq.n	8003938 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	4b59      	ldr	r3, [pc, #356]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003922:	429a      	cmp	r2, r3
 8003924:	d908      	bls.n	8003938 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003926:	4b56      	ldr	r3, [pc, #344]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
 8003932:	4953      	ldr	r1, [pc, #332]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003934:	4313      	orrs	r3, r2
 8003936:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d010      	beq.n	8003966 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	4b4d      	ldr	r3, [pc, #308]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	429a      	cmp	r2, r3
 8003952:	d908      	bls.n	8003966 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f023 020f 	bic.w	r2, r3, #15
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4947      	ldr	r1, [pc, #284]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003962:	4313      	orrs	r3, r2
 8003964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d055      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003972:	4b43      	ldr	r3, [pc, #268]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	4940      	ldr	r1, [pc, #256]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003980:	4313      	orrs	r3, r2
 8003982:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d107      	bne.n	800399c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800398c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d121      	bne.n	80039dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e0f6      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039a4:	4b36      	ldr	r3, [pc, #216]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d115      	bne.n	80039dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e0ea      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80039bc:	4b30      	ldr	r3, [pc, #192]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0de      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039cc:	4b2c      	ldr	r3, [pc, #176]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0d6      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039dc:	4b28      	ldr	r3, [pc, #160]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	f023 0207 	bic.w	r2, r3, #7
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4925      	ldr	r1, [pc, #148]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ee:	f7fd ff1d 	bl	800182c <HAL_GetTick>
 80039f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f6:	f7fd ff19 	bl	800182c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e0be      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d1eb      	bne.n	80039f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d010      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	4b14      	ldr	r3, [pc, #80]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d208      	bcs.n	8003a4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a3a:	4b11      	ldr	r3, [pc, #68]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f023 020f 	bic.w	r2, r3, #15
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	490e      	ldr	r1, [pc, #56]	@ (8003a80 <HAL_RCC_ClockConfig+0x244>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 030f 	and.w	r3, r3, #15
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d214      	bcs.n	8003a84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 020f 	bic.w	r2, r3, #15
 8003a62:	4906      	ldr	r1, [pc, #24]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b04      	ldr	r3, [pc, #16]	@ (8003a7c <HAL_RCC_ClockConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d005      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e086      	b.n	8003b8a <HAL_RCC_ClockConfig+0x34e>
 8003a7c:	52002000 	.word	0x52002000
 8003a80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	4b3f      	ldr	r3, [pc, #252]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d208      	bcs.n	8003ab2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003aa0:	4b3c      	ldr	r3, [pc, #240]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	691b      	ldr	r3, [r3, #16]
 8003aac:	4939      	ldr	r1, [pc, #228]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d010      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d208      	bcs.n	8003ae0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ace:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	492e      	ldr	r1, [pc, #184]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0310 	and.w	r3, r3, #16
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	699a      	ldr	r2, [r3, #24]
 8003af0:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d208      	bcs.n	8003b0e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	4922      	ldr	r1, [pc, #136]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d010      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d208      	bcs.n	8003b3c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	4917      	ldr	r1, [pc, #92]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003b3c:	f000 f834 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b14      	ldr	r3, [pc, #80]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	4912      	ldr	r1, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x35c>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
 8003b58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b94 <HAL_RCC_ClockConfig+0x358>)
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	4a0d      	ldr	r2, [pc, #52]	@ (8003b98 <HAL_RCC_ClockConfig+0x35c>)
 8003b64:	5cd3      	ldrb	r3, [r2, r3]
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	4a0a      	ldr	r2, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x360>)
 8003b72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <HAL_RCC_ClockConfig+0x364>)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba4 <HAL_RCC_ClockConfig+0x368>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd fe0a 	bl	8001798 <HAL_InitTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	58024400 	.word	0x58024400
 8003b98:	08029bb4 	.word	0x08029bb4
 8003b9c:	24000004 	.word	0x24000004
 8003ba0:	24000000 	.word	0x24000000
 8003ba4:	24000008 	.word	0x24000008

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b089      	sub	sp, #36	@ 0x24
 8003bac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bae:	4bb3      	ldr	r3, [pc, #716]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bb6:	2b18      	cmp	r3, #24
 8003bb8:	f200 8155 	bhi.w	8003e66 <HAL_RCC_GetSysClockFreq+0x2be>
 8003bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003c29 	.word	0x08003c29
 8003bc8:	08003e67 	.word	0x08003e67
 8003bcc:	08003e67 	.word	0x08003e67
 8003bd0:	08003e67 	.word	0x08003e67
 8003bd4:	08003e67 	.word	0x08003e67
 8003bd8:	08003e67 	.word	0x08003e67
 8003bdc:	08003e67 	.word	0x08003e67
 8003be0:	08003e67 	.word	0x08003e67
 8003be4:	08003c4f 	.word	0x08003c4f
 8003be8:	08003e67 	.word	0x08003e67
 8003bec:	08003e67 	.word	0x08003e67
 8003bf0:	08003e67 	.word	0x08003e67
 8003bf4:	08003e67 	.word	0x08003e67
 8003bf8:	08003e67 	.word	0x08003e67
 8003bfc:	08003e67 	.word	0x08003e67
 8003c00:	08003e67 	.word	0x08003e67
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003e67 	.word	0x08003e67
 8003c0c:	08003e67 	.word	0x08003e67
 8003c10:	08003e67 	.word	0x08003e67
 8003c14:	08003e67 	.word	0x08003e67
 8003c18:	08003e67 	.word	0x08003e67
 8003c1c:	08003e67 	.word	0x08003e67
 8003c20:	08003e67 	.word	0x08003e67
 8003c24:	08003c5b 	.word	0x08003c5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c28:	4b94      	ldr	r3, [pc, #592]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d009      	beq.n	8003c48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c34:	4b91      	ldr	r3, [pc, #580]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	4a90      	ldr	r2, [pc, #576]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003c46:	e111      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003c48:	4b8d      	ldr	r3, [pc, #564]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c4a:	61bb      	str	r3, [r7, #24]
      break;
 8003c4c:	e10e      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c50:	61bb      	str	r3, [r7, #24]
      break;
 8003c52:	e10b      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003c54:	4b8c      	ldr	r3, [pc, #560]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003c56:	61bb      	str	r3, [r7, #24]
      break;
 8003c58:	e108      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c5a:	4b88      	ldr	r3, [pc, #544]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003c64:	4b85      	ldr	r3, [pc, #532]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003c70:	4b82      	ldr	r3, [pc, #520]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003c7a:	4b80      	ldr	r3, [pc, #512]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7e:	08db      	lsrs	r3, r3, #3
 8003c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	fb02 f303 	mul.w	r3, r2, r3
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 80e1 	beq.w	8003e60 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	f000 8083 	beq.w	8003dac <HAL_RCC_GetSysClockFreq+0x204>
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	f200 80a1 	bhi.w	8003df0 <HAL_RCC_GetSysClockFreq+0x248>
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d003      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x114>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d056      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003cba:	e099      	b.n	8003df0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d02d      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cc8:	4b6c      	ldr	r3, [pc, #432]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	08db      	lsrs	r3, r3, #3
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	4a6b      	ldr	r2, [pc, #428]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	ee07 3a90 	vmov	s15, r3
 8003ce0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf2:	4b62      	ldr	r3, [pc, #392]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d06:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003d22:	e087      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003e90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d36:	4b51      	ldr	r3, [pc, #324]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d4a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003d66:	e065      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7a:	4b40      	ldr	r3, [pc, #256]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003daa:	e043      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003e98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc6:	ee07 3a90 	vmov	s15, r3
 8003dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8003dd2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003dee:	e021      	b.n	8003e34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003e94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e02:	4b1e      	ldr	r3, [pc, #120]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0a:	ee07 3a90 	vmov	s15, r3
 8003e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8003e16:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003e8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003e32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003e34:	4b11      	ldr	r3, [pc, #68]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	0a5b      	lsrs	r3, r3, #9
 8003e3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e3e:	3301      	adds	r3, #1
 8003e40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e58:	ee17 3a90 	vmov	r3, s15
 8003e5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003e5e:	e005      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61bb      	str	r3, [r7, #24]
      break;
 8003e64:	e002      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003e66:	4b07      	ldr	r3, [pc, #28]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e68:	61bb      	str	r3, [r7, #24]
      break;
 8003e6a:	bf00      	nop
  }

  return sysclockfreq;
 8003e6c:	69bb      	ldr	r3, [r7, #24]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3724      	adds	r7, #36	@ 0x24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	03d09000 	.word	0x03d09000
 8003e84:	003d0900 	.word	0x003d0900
 8003e88:	007a1200 	.word	0x007a1200
 8003e8c:	46000000 	.word	0x46000000
 8003e90:	4c742400 	.word	0x4c742400
 8003e94:	4a742400 	.word	0x4a742400
 8003e98:	4af42400 	.word	0x4af42400

08003e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ea2:	f7ff fe81 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	4b10      	ldr	r3, [pc, #64]	@ (8003eec <HAL_RCC_GetHCLKFreq+0x50>)
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	0a1b      	lsrs	r3, r3, #8
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	490f      	ldr	r1, [pc, #60]	@ (8003ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003eb4:	5ccb      	ldrb	r3, [r1, r3]
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8003eec <HAL_RCC_GetHCLKFreq+0x50>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	4a09      	ldr	r2, [pc, #36]	@ (8003ef0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003eca:	5cd3      	ldrb	r3, [r2, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed6:	4a07      	ldr	r2, [pc, #28]	@ (8003ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ed8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003eda:	4a07      	ldr	r2, [pc, #28]	@ (8003ef8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003ee0:	4b04      	ldr	r3, [pc, #16]	@ (8003ef4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	08029bb4 	.word	0x08029bb4
 8003ef4:	24000004 	.word	0x24000004
 8003ef8:	24000000 	.word	0x24000000

08003efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003f00:	f7ff ffcc 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003f04:	4602      	mov	r2, r0
 8003f06:	4b06      	ldr	r3, [pc, #24]	@ (8003f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	f003 0307 	and.w	r3, r3, #7
 8003f10:	4904      	ldr	r1, [pc, #16]	@ (8003f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f12:	5ccb      	ldrb	r3, [r1, r3]
 8003f14:	f003 031f 	and.w	r3, r3, #31
 8003f18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	58024400 	.word	0x58024400
 8003f24:	08029bb4 	.word	0x08029bb4

08003f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003f2c:	f7ff ffb6 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 8003f30:	4602      	mov	r2, r0
 8003f32:	4b06      	ldr	r3, [pc, #24]	@ (8003f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	4904      	ldr	r1, [pc, #16]	@ (8003f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f3e:	5ccb      	ldrb	r3, [r1, r3]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	58024400 	.word	0x58024400
 8003f50:	08029bb4 	.word	0x08029bb4

08003f54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f58:	b0c6      	sub	sp, #280	@ 0x118
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f66:	2300      	movs	r3, #0
 8003f68:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003f78:	2500      	movs	r5, #0
 8003f7a:	ea54 0305 	orrs.w	r3, r4, r5
 8003f7e:	d049      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f8a:	d02f      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003f8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003f90:	d828      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f96:	d01a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003f98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f9c:	d822      	bhi.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fa6:	d007      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fa8:	e01c      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003faa:	4bab      	ldr	r3, [pc, #684]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	4aaa      	ldr	r2, [pc, #680]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fb6:	e01a      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 fc25 	bl	8005810 <RCCEx_PLL2_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fcc:	e00f      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd2:	3328      	adds	r3, #40	@ 0x28
 8003fd4:	2102      	movs	r1, #2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f001 fccc 	bl	8005974 <RCCEx_PLL3_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003fe2:	e004      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fea:	e000      	b.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ff6:	4b98      	ldr	r3, [pc, #608]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004004:	4a94      	ldr	r2, [pc, #592]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004006:	430b      	orrs	r3, r1
 8004008:	6513      	str	r3, [r2, #80]	@ 0x50
 800400a:	e003      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004010:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004020:	f04f 0900 	mov.w	r9, #0
 8004024:	ea58 0309 	orrs.w	r3, r8, r9
 8004028:	d047      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800402a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004030:	2b04      	cmp	r3, #4
 8004032:	d82a      	bhi.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004034:	a201      	add	r2, pc, #4	@ (adr r2, 800403c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403a:	bf00      	nop
 800403c:	08004051 	.word	0x08004051
 8004040:	0800405f 	.word	0x0800405f
 8004044:	08004075 	.word	0x08004075
 8004048:	08004093 	.word	0x08004093
 800404c:	08004093 	.word	0x08004093
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004050:	4b81      	ldr	r3, [pc, #516]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004054:	4a80      	ldr	r2, [pc, #512]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004056:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800405a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800405c:	e01a      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800405e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004062:	3308      	adds	r3, #8
 8004064:	2100      	movs	r1, #0
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fbd2 	bl	8005810 <RCCEx_PLL2_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004072:	e00f      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004078:	3328      	adds	r3, #40	@ 0x28
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fc79 	bl	8005974 <RCCEx_PLL3_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004088:	e004      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004090:	e000      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004094:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800409c:	4b6e      	ldr	r3, [pc, #440]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800409e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040a0:	f023 0107 	bic.w	r1, r3, #7
 80040a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	4a6b      	ldr	r2, [pc, #428]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80040ac:	430b      	orrs	r3, r1
 80040ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80040ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80040c6:	f04f 0b00 	mov.w	fp, #0
 80040ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80040ce:	d05b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80040d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040d8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80040dc:	d03b      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80040de:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80040e2:	d834      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040e8:	d037      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80040ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80040ee:	d82e      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80040f4:	d033      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80040f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80040fa:	d828      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80040fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004100:	d01a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8004102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004106:	d822      	bhi.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800410c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004110:	d007      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8004112:	e01c      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004114:	4b50      	ldr	r3, [pc, #320]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	4a4f      	ldr	r2, [pc, #316]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800411e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004120:	e01e      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004126:	3308      	adds	r3, #8
 8004128:	2100      	movs	r1, #0
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fb70 	bl	8005810 <RCCEx_PLL2_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004136:	e013      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413c:	3328      	adds	r3, #40	@ 0x28
 800413e:	2100      	movs	r1, #0
 8004140:	4618      	mov	r0, r3
 8004142:	f001 fc17 	bl	8005974 <RCCEx_PLL3_Config>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800414c:	e008      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004154:	e004      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004156:	bf00      	nop
 8004158:	e002      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800415a:	bf00      	nop
 800415c:	e000      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800415e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004168:	4b3b      	ldr	r3, [pc, #236]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004170:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004174:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004178:	4a37      	ldr	r2, [pc, #220]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800417a:	430b      	orrs	r3, r1
 800417c:	6593      	str	r3, [r2, #88]	@ 0x58
 800417e:	e003      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004184:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004194:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004198:	2300      	movs	r3, #0
 800419a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800419e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80041a2:	460b      	mov	r3, r1
 80041a4:	4313      	orrs	r3, r2
 80041a6:	d05d      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80041a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80041b0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80041b4:	d03b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80041b6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80041ba:	d834      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041c0:	d037      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80041c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041c6:	d82e      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041cc:	d033      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80041ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041d2:	d828      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041d8:	d01a      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80041da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041de:	d822      	bhi.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 80041e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041e8:	d007      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80041ea:	e01c      	b.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	4a19      	ldr	r2, [pc, #100]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80041f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80041f8:	e01e      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fe:	3308      	adds	r3, #8
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f001 fb04 	bl	8005810 <RCCEx_PLL2_Config>
 8004208:	4603      	mov	r3, r0
 800420a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800420e:	e013      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004214:	3328      	adds	r3, #40	@ 0x28
 8004216:	2100      	movs	r1, #0
 8004218:	4618      	mov	r0, r3
 800421a:	f001 fbab 	bl	8005974 <RCCEx_PLL3_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004224:	e008      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800422c:	e004      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800422e:	bf00      	nop
 8004230:	e002      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004232:	bf00      	nop
 8004234:	e000      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8004236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004238:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10d      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004240:	4b05      	ldr	r3, [pc, #20]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004244:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004250:	4a01      	ldr	r2, [pc, #4]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004252:	430b      	orrs	r3, r1
 8004254:	6593      	str	r3, [r2, #88]	@ 0x58
 8004256:	e005      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004258:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004260:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004270:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800427a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d03a      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	2b30      	cmp	r3, #48	@ 0x30
 800428c:	d01f      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800428e:	2b30      	cmp	r3, #48	@ 0x30
 8004290:	d819      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004292:	2b20      	cmp	r3, #32
 8004294:	d00c      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004296:	2b20      	cmp	r3, #32
 8004298:	d815      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d019      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d111      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042a2:	4baa      	ldr	r3, [pc, #680]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a6:	4aa9      	ldr	r2, [pc, #676]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80042ae:	e011      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b4:	3308      	adds	r3, #8
 80042b6:	2102      	movs	r1, #2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 faa9 	bl	8005810 <RCCEx_PLL2_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80042c4:	e006      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042cc:	e002      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80042ce:	bf00      	nop
 80042d0:	e000      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80042d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10a      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80042dc:	4b9b      	ldr	r3, [pc, #620]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80042e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ea:	4a98      	ldr	r2, [pc, #608]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042ec:	430b      	orrs	r3, r1
 80042ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042f0:	e003      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80042fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004306:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800430a:	2300      	movs	r3, #0
 800430c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004310:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004314:	460b      	mov	r3, r1
 8004316:	4313      	orrs	r3, r2
 8004318:	d051      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800431a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004324:	d035      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004326:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800432a:	d82e      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800432c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004330:	d031      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8004332:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004336:	d828      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004338:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800433c:	d01a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800433e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004342:	d822      	bhi.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8004348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434c:	d007      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800434e:	e01c      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004350:	4b7e      	ldr	r3, [pc, #504]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004354:	4a7d      	ldr	r2, [pc, #500]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800435a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800435c:	e01c      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800435e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004362:	3308      	adds	r3, #8
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f001 fa52 	bl	8005810 <RCCEx_PLL2_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004372:	e011      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004378:	3328      	adds	r3, #40	@ 0x28
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f001 faf9 	bl	8005974 <RCCEx_PLL3_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004388:	e006      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10a      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80043a0:	4b6a      	ldr	r3, [pc, #424]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80043a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ae:	4a67      	ldr	r2, [pc, #412]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80043b0:	430b      	orrs	r3, r1
 80043b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80043b4:	e003      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80043be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80043ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043ce:	2300      	movs	r3, #0
 80043d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043d4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80043d8:	460b      	mov	r3, r1
 80043da:	4313      	orrs	r3, r2
 80043dc:	d053      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80043de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e8:	d033      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80043ea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043ee:	d82c      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80043f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043f4:	d02f      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80043f6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043fa:	d826      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80043fc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004400:	d02b      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004402:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004406:	d820      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004408:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800440c:	d012      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800440e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004412:	d81a      	bhi.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004414:	2b00      	cmp	r3, #0
 8004416:	d022      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8004418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800441c:	d115      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800441e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004422:	3308      	adds	r3, #8
 8004424:	2101      	movs	r1, #1
 8004426:	4618      	mov	r0, r3
 8004428:	f001 f9f2 	bl	8005810 <RCCEx_PLL2_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004432:	e015      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004438:	3328      	adds	r3, #40	@ 0x28
 800443a:	2101      	movs	r1, #1
 800443c:	4618      	mov	r0, r3
 800443e:	f001 fa99 	bl	8005974 <RCCEx_PLL3_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004448:	e00a      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004450:	e006      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004452:	bf00      	nop
 8004454:	e004      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004456:	bf00      	nop
 8004458:	e002      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800445a:	bf00      	nop
 800445c:	e000      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800445e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004460:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004468:	4b38      	ldr	r3, [pc, #224]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800446a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004476:	4a35      	ldr	r2, [pc, #212]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004478:	430b      	orrs	r3, r1
 800447a:	6513      	str	r3, [r2, #80]	@ 0x50
 800447c:	e003      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004482:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004486:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004496:	2300      	movs	r3, #0
 8004498:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800449c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044a0:	460b      	mov	r3, r1
 80044a2:	4313      	orrs	r3, r2
 80044a4:	d058      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80044a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80044ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044b2:	d033      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80044b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044b8:	d82c      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044be:	d02f      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80044c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c4:	d826      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80044c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044ca:	d02b      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80044cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044d0:	d820      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80044d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044d6:	d012      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80044d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044dc:	d81a      	bhi.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d022      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80044e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044e6:	d115      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ec:	3308      	adds	r3, #8
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 f98d 	bl	8005810 <RCCEx_PLL2_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80044fc:	e015      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004502:	3328      	adds	r3, #40	@ 0x28
 8004504:	2101      	movs	r1, #1
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fa34 	bl	8005974 <RCCEx_PLL3_Config>
 800450c:	4603      	mov	r3, r0
 800450e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004512:	e00a      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800451a:	e006      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800451c:	bf00      	nop
 800451e:	e004      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004520:	bf00      	nop
 8004522:	e002      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004524:	bf00      	nop
 8004526:	e000      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8004528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10e      	bne.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004532:	4b06      	ldr	r3, [pc, #24]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800453a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004542:	4a02      	ldr	r2, [pc, #8]	@ (800454c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004544:	430b      	orrs	r3, r1
 8004546:	6593      	str	r3, [r2, #88]	@ 0x58
 8004548:	e006      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800454a:	bf00      	nop
 800454c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004550:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004554:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004568:	2300      	movs	r3, #0
 800456a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800456e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004572:	460b      	mov	r3, r1
 8004574:	4313      	orrs	r3, r2
 8004576:	d037      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800457c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800457e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004582:	d00e      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004588:	d816      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800458a:	2b00      	cmp	r3, #0
 800458c:	d018      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800458e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004592:	d111      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004594:	4bc4      	ldr	r3, [pc, #784]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	4ac3      	ldr	r2, [pc, #780]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800459a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800459e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045a0:	e00f      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a6:	3308      	adds	r3, #8
 80045a8:	2101      	movs	r1, #1
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 f930 	bl	8005810 <RCCEx_PLL2_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80045b6:	e004      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045be:	e000      	b.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80045c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80045ca:	4bb7      	ldr	r3, [pc, #732]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ce:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80045d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045d8:	4ab3      	ldr	r2, [pc, #716]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80045da:	430b      	orrs	r3, r1
 80045dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80045de:	e003      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80045e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80045f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045f8:	2300      	movs	r3, #0
 80045fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045fe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004602:	460b      	mov	r3, r1
 8004604:	4313      	orrs	r3, r2
 8004606:	d039      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800460e:	2b03      	cmp	r3, #3
 8004610:	d81c      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004612:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	08004655 	.word	0x08004655
 800461c:	08004629 	.word	0x08004629
 8004620:	08004637 	.word	0x08004637
 8004624:	08004655 	.word	0x08004655
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004628:	4b9f      	ldr	r3, [pc, #636]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800462a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800462c:	4a9e      	ldr	r2, [pc, #632]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800462e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004632:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004634:	e00f      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800463a:	3308      	adds	r3, #8
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f001 f8e6 	bl	8005810 <RCCEx_PLL2_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800464a:	e004      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004656:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800465e:	4b92      	ldr	r3, [pc, #584]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004662:	f023 0103 	bic.w	r1, r3, #3
 8004666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800466c:	4a8e      	ldr	r2, [pc, #568]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800466e:	430b      	orrs	r3, r1
 8004670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004672:	e003      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800468c:	2300      	movs	r3, #0
 800468e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004692:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004696:	460b      	mov	r3, r1
 8004698:	4313      	orrs	r3, r2
 800469a:	f000 8099 	beq.w	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469e:	4b83      	ldr	r3, [pc, #524]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a82      	ldr	r2, [pc, #520]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046aa:	f7fd f8bf 	bl	800182c <HAL_GetTick>
 80046ae:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046b2:	e00b      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b4:	f7fd f8ba 	bl	800182c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b64      	cmp	r3, #100	@ 0x64
 80046c2:	d903      	bls.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046ca:	e005      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046cc:	4b77      	ldr	r3, [pc, #476]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ed      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80046d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d173      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80046e0:	4b71      	ldr	r3, [pc, #452]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80046e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80046ec:	4053      	eors	r3, r2
 80046ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d015      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046f6:	4b6c      	ldr	r3, [pc, #432]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80046f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004702:	4b69      	ldr	r3, [pc, #420]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004706:	4a68      	ldr	r2, [pc, #416]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800470e:	4b66      	ldr	r3, [pc, #408]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	4a65      	ldr	r2, [pc, #404]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004718:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800471a:	4a63      	ldr	r2, [pc, #396]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800471c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004720:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004726:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800472a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472e:	d118      	bne.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004730:	f7fd f87c 	bl	800182c <HAL_GetTick>
 8004734:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004738:	e00d      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fd f877 	bl	800182c <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004744:	1ad2      	subs	r2, r2, r3
 8004746:	f241 3388 	movw	r3, #5000	@ 0x1388
 800474a:	429a      	cmp	r2, r3
 800474c:	d903      	bls.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004754:	e005      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004756:	4b54      	ldr	r3, [pc, #336]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0eb      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004762:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004766:	2b00      	cmp	r3, #0
 8004768:	d129      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800476e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004776:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800477a:	d10e      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800477c:	4b4a      	ldr	r3, [pc, #296]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004788:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800478c:	091a      	lsrs	r2, r3, #4
 800478e:	4b48      	ldr	r3, [pc, #288]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004790:	4013      	ands	r3, r2
 8004792:	4a45      	ldr	r2, [pc, #276]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004794:	430b      	orrs	r3, r1
 8004796:	6113      	str	r3, [r2, #16]
 8004798:	e005      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800479a:	4b43      	ldr	r3, [pc, #268]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	4a42      	ldr	r2, [pc, #264]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047a4:	6113      	str	r3, [r2, #16]
 80047a6:	4b40      	ldr	r3, [pc, #256]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047a8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80047aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80047b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b6:	4a3c      	ldr	r2, [pc, #240]	@ (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80047b8:	430b      	orrs	r3, r1
 80047ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80047bc:	e008      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80047c6:	e003      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80047d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f002 0301 	and.w	r3, r2, #1
 80047dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80047e6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80047ea:	460b      	mov	r3, r1
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f000 808f 	beq.w	8004910 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80047f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047f8:	2b28      	cmp	r3, #40	@ 0x28
 80047fa:	d871      	bhi.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80047fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004804 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80047fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004802:	bf00      	nop
 8004804:	080048e9 	.word	0x080048e9
 8004808:	080048e1 	.word	0x080048e1
 800480c:	080048e1 	.word	0x080048e1
 8004810:	080048e1 	.word	0x080048e1
 8004814:	080048e1 	.word	0x080048e1
 8004818:	080048e1 	.word	0x080048e1
 800481c:	080048e1 	.word	0x080048e1
 8004820:	080048e1 	.word	0x080048e1
 8004824:	080048b5 	.word	0x080048b5
 8004828:	080048e1 	.word	0x080048e1
 800482c:	080048e1 	.word	0x080048e1
 8004830:	080048e1 	.word	0x080048e1
 8004834:	080048e1 	.word	0x080048e1
 8004838:	080048e1 	.word	0x080048e1
 800483c:	080048e1 	.word	0x080048e1
 8004840:	080048e1 	.word	0x080048e1
 8004844:	080048cb 	.word	0x080048cb
 8004848:	080048e1 	.word	0x080048e1
 800484c:	080048e1 	.word	0x080048e1
 8004850:	080048e1 	.word	0x080048e1
 8004854:	080048e1 	.word	0x080048e1
 8004858:	080048e1 	.word	0x080048e1
 800485c:	080048e1 	.word	0x080048e1
 8004860:	080048e1 	.word	0x080048e1
 8004864:	080048e9 	.word	0x080048e9
 8004868:	080048e1 	.word	0x080048e1
 800486c:	080048e1 	.word	0x080048e1
 8004870:	080048e1 	.word	0x080048e1
 8004874:	080048e1 	.word	0x080048e1
 8004878:	080048e1 	.word	0x080048e1
 800487c:	080048e1 	.word	0x080048e1
 8004880:	080048e1 	.word	0x080048e1
 8004884:	080048e9 	.word	0x080048e9
 8004888:	080048e1 	.word	0x080048e1
 800488c:	080048e1 	.word	0x080048e1
 8004890:	080048e1 	.word	0x080048e1
 8004894:	080048e1 	.word	0x080048e1
 8004898:	080048e1 	.word	0x080048e1
 800489c:	080048e1 	.word	0x080048e1
 80048a0:	080048e1 	.word	0x080048e1
 80048a4:	080048e9 	.word	0x080048e9
 80048a8:	58024400 	.word	0x58024400
 80048ac:	58024800 	.word	0x58024800
 80048b0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b8:	3308      	adds	r3, #8
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 ffa7 	bl	8005810 <RCCEx_PLL2_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048c8:	e00f      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ce:	3328      	adds	r3, #40	@ 0x28
 80048d0:	2101      	movs	r1, #1
 80048d2:	4618      	mov	r0, r3
 80048d4:	f001 f84e 	bl	8005974 <RCCEx_PLL3_Config>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80048de:	e004      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048e6:	e000      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80048e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80048f2:	4bbf      	ldr	r3, [pc, #764]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80048fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004900:	4abb      	ldr	r2, [pc, #748]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004902:	430b      	orrs	r3, r1
 8004904:	6553      	str	r3, [r2, #84]	@ 0x54
 8004906:	e003      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800490c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f002 0302 	and.w	r3, r2, #2
 800491c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004920:	2300      	movs	r3, #0
 8004922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004926:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800492a:	460b      	mov	r3, r1
 800492c:	4313      	orrs	r3, r2
 800492e:	d041      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004936:	2b05      	cmp	r3, #5
 8004938:	d824      	bhi.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800493a:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	0800498d 	.word	0x0800498d
 8004944:	08004959 	.word	0x08004959
 8004948:	0800496f 	.word	0x0800496f
 800494c:	0800498d 	.word	0x0800498d
 8004950:	0800498d 	.word	0x0800498d
 8004954:	0800498d 	.word	0x0800498d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800495c:	3308      	adds	r3, #8
 800495e:	2101      	movs	r1, #1
 8004960:	4618      	mov	r0, r3
 8004962:	f000 ff55 	bl	8005810 <RCCEx_PLL2_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800496c:	e00f      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800496e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004972:	3328      	adds	r3, #40	@ 0x28
 8004974:	2101      	movs	r1, #1
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fffc 	bl	8005974 <RCCEx_PLL3_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004982:	e004      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800498a:	e000      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800498c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800498e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10a      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004996:	4b96      	ldr	r3, [pc, #600]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499a:	f023 0107 	bic.w	r1, r3, #7
 800499e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a4:	4a92      	ldr	r2, [pc, #584]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80049a6:	430b      	orrs	r3, r1
 80049a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80049aa:	e003      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f002 0304 	and.w	r3, r2, #4
 80049c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049c4:	2300      	movs	r3, #0
 80049c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049ca:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049ce:	460b      	mov	r3, r1
 80049d0:	4313      	orrs	r3, r2
 80049d2:	d044      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80049d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d825      	bhi.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80049e0:	a201      	add	r2, pc, #4	@ (adr r2, 80049e8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80049e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e6:	bf00      	nop
 80049e8:	08004a35 	.word	0x08004a35
 80049ec:	08004a01 	.word	0x08004a01
 80049f0:	08004a17 	.word	0x08004a17
 80049f4:	08004a35 	.word	0x08004a35
 80049f8:	08004a35 	.word	0x08004a35
 80049fc:	08004a35 	.word	0x08004a35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a04:	3308      	adds	r3, #8
 8004a06:	2101      	movs	r1, #1
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 ff01 	bl	8005810 <RCCEx_PLL2_Config>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a14:	e00f      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a1a:	3328      	adds	r3, #40	@ 0x28
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 ffa8 	bl	8005974 <RCCEx_PLL3_Config>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004a2a:	e004      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a32:	e000      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a3e:	4b6c      	ldr	r3, [pc, #432]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a42:	f023 0107 	bic.w	r1, r3, #7
 8004a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a4e:	4a68      	ldr	r2, [pc, #416]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a54:	e003      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f002 0320 	and.w	r3, r2, #32
 8004a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004a74:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	d055      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a8a:	d033      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a90:	d82c      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a96:	d02f      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004a98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9c:	d826      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004a9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004aa2:	d02b      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004aa4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004aa8:	d820      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004aaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004aae:	d012      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004ab0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ab4:	d81a      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d022      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004aba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004abe:	d115      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fea1 	bl	8005810 <RCCEx_PLL2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004ad4:	e015      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ada:	3328      	adds	r3, #40	@ 0x28
 8004adc:	2102      	movs	r1, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 ff48 	bl	8005974 <RCCEx_PLL3_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004aea:	e00a      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004af2:	e006      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004af4:	bf00      	nop
 8004af6:	e004      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004af8:	bf00      	nop
 8004afa:	e002      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004afc:	bf00      	nop
 8004afe:	e000      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b0a:	4b39      	ldr	r3, [pc, #228]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b1a:	4a35      	ldr	r2, [pc, #212]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004b20:	e003      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b32:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004b36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b40:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d058      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b52:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b56:	d033      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004b58:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004b5c:	d82c      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b62:	d02f      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b68:	d826      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004b6a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b6e:	d02b      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004b70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b74:	d820      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b7a:	d012      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b80:	d81a      	bhi.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d022      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8a:	d115      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b90:	3308      	adds	r3, #8
 8004b92:	2100      	movs	r1, #0
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fe3b 	bl	8005810 <RCCEx_PLL2_Config>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ba0:	e015      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba6:	3328      	adds	r3, #40	@ 0x28
 8004ba8:	2102      	movs	r1, #2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fee2 	bl	8005974 <RCCEx_PLL3_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004bb6:	e00a      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004bbe:	e006      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004bc0:	bf00      	nop
 8004bc2:	e004      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004bc4:	bf00      	nop
 8004bc6:	e002      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004bc8:	bf00      	nop
 8004bca:	e000      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bd6:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bda:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004be6:	4a02      	ldr	r2, [pc, #8]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004be8:	430b      	orrs	r3, r1
 8004bea:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bec:	e006      	b.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004bee:	bf00      	nop
 8004bf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004c08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c12:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c16:	460b      	mov	r3, r1
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	d055      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004c24:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c28:	d033      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004c2a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004c2e:	d82c      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c34:	d02f      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004c36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c3a:	d826      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004c3c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c40:	d02b      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004c42:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004c46:	d820      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004c48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c4c:	d012      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004c4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c52:	d81a      	bhi.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d022      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004c58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c5c:	d115      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c62:	3308      	adds	r3, #8
 8004c64:	2100      	movs	r1, #0
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fdd2 	bl	8005810 <RCCEx_PLL2_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c72:	e015      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c78:	3328      	adds	r3, #40	@ 0x28
 8004c7a:	2102      	movs	r1, #2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fe79 	bl	8005974 <RCCEx_PLL3_Config>
 8004c82:	4603      	mov	r3, r0
 8004c84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c90:	e006      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004c92:	bf00      	nop
 8004c94:	e004      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004c96:	bf00      	nop
 8004c98:	e002      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004c9a:	bf00      	nop
 8004c9c:	e000      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ca0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ca8:	4ba0      	ldr	r3, [pc, #640]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cac:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cb8:	4a9c      	ldr	r2, [pc, #624]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cba:	430b      	orrs	r3, r1
 8004cbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cbe:	e003      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004cc4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f002 0308 	and.w	r3, r2, #8
 8004cd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004cde:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d01e      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cfa:	3328      	adds	r3, #40	@ 0x28
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fe38 	bl	8005974 <RCCEx_PLL3_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004d10:	4b86      	ldr	r3, [pc, #536]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d14:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d20:	4a82      	ldr	r2, [pc, #520]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d22:	430b      	orrs	r3, r1
 8004d24:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f002 0310 	and.w	r3, r2, #16
 8004d32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d36:	2300      	movs	r3, #0
 8004d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d3c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004d40:	460b      	mov	r3, r1
 8004d42:	4313      	orrs	r3, r2
 8004d44:	d01e      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d52:	d10c      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d58:	3328      	adds	r3, #40	@ 0x28
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fe09 	bl	8005974 <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d6e:	4b6f      	ldr	r3, [pc, #444]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d72:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d7e:	4a6b      	ldr	r2, [pc, #428]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004d80:	430b      	orrs	r3, r1
 8004d82:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004d90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d92:	2300      	movs	r3, #0
 8004d94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d96:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	d03e      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004da8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dac:	d022      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004dae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004db2:	d81b      	bhi.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dbc:	d00b      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004dbe:	e015      	b.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fd21 	bl	8005810 <RCCEx_PLL2_Config>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004dd4:	e00f      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dda:	3328      	adds	r3, #40	@ 0x28
 8004ddc:	2102      	movs	r1, #2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fdc8 	bl	8005974 <RCCEx_PLL3_Config>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004dea:	e004      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004df2:	e000      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004df4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004df6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10b      	bne.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004dfe:	4b4b      	ldr	r3, [pc, #300]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004e0e:	4a47      	ldr	r2, [pc, #284]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e14:	e003      	b.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e26:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004e2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e30:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e34:	460b      	mov	r3, r1
 8004e36:	4313      	orrs	r3, r2
 8004e38:	d03b      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e42:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e46:	d01f      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004e48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004e4c:	d818      	bhi.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e52:	d003      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004e54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e58:	d007      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004e5a:	e011      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e5c:	4b33      	ldr	r3, [pc, #204]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e60:	4a32      	ldr	r2, [pc, #200]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e68:	e00f      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e6e:	3328      	adds	r3, #40	@ 0x28
 8004e70:	2101      	movs	r1, #1
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fd7e 	bl	8005974 <RCCEx_PLL3_Config>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004e7e:	e004      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e86:	e000      	b.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e92:	4b26      	ldr	r3, [pc, #152]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ea2:	4a22      	ldr	r2, [pc, #136]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ea8:	e003      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004eae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004ebe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ec4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	d034      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004edc:	d007      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004ede:	e011      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ee0:	4b12      	ldr	r3, [pc, #72]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	4a11      	ldr	r2, [pc, #68]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ee6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004eea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004eec:	e00e      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	2102      	movs	r1, #2
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fc8a 	bl	8005810 <RCCEx_PLL2_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004f02:	e003      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10d      	bne.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f14:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f18:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f22:	4a02      	ldr	r2, [pc, #8]	@ (8004f2c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f24:	430b      	orrs	r3, r1
 8004f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f28:	e006      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004f2a:	bf00      	nop
 8004f2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f46:	2300      	movs	r3, #0
 8004f48:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f4a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4313      	orrs	r3, r2
 8004f52:	d00c      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f58:	3328      	adds	r3, #40	@ 0x28
 8004f5a:	2102      	movs	r1, #2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f000 fd09 	bl	8005974 <RCCEx_PLL3_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f80:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004f84:	460b      	mov	r3, r1
 8004f86:	4313      	orrs	r3, r2
 8004f88:	d036      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f94:	d018      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004f96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f9a:	d811      	bhi.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004f9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fa0:	d014      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fa6:	d80b      	bhi.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d011      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fb0:	d106      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fb2:	4bb7      	ldr	r3, [pc, #732]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	4ab6      	ldr	r2, [pc, #728]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004fc6:	e004      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004fc8:	bf00      	nop
 8004fca:	e002      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004fcc:	bf00      	nop
 8004fce:	e000      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fda:	4bad      	ldr	r3, [pc, #692]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fde:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fe8:	4aa9      	ldr	r2, [pc, #676]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004fea:	430b      	orrs	r3, r1
 8004fec:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fee:	e003      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ff4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005004:	653b      	str	r3, [r7, #80]	@ 0x50
 8005006:	2300      	movs	r3, #0
 8005008:	657b      	str	r3, [r7, #84]	@ 0x54
 800500a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800500e:	460b      	mov	r3, r1
 8005010:	4313      	orrs	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005014:	4b9e      	ldr	r3, [pc, #632]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005018:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800501c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	4a9b      	ldr	r2, [pc, #620]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005024:	430b      	orrs	r3, r1
 8005026:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005036:	2300      	movs	r3, #0
 8005038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800503a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800503e:	460b      	mov	r3, r1
 8005040:	4313      	orrs	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005044:	4b92      	ldr	r3, [pc, #584]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005046:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005048:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005052:	4a8f      	ldr	r2, [pc, #572]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005054:	430b      	orrs	r3, r1
 8005056:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005064:	643b      	str	r3, [r7, #64]	@ 0x40
 8005066:	2300      	movs	r3, #0
 8005068:	647b      	str	r3, [r7, #68]	@ 0x44
 800506a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800506e:	460b      	mov	r3, r1
 8005070:	4313      	orrs	r3, r2
 8005072:	d00e      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005074:	4b86      	ldr	r3, [pc, #536]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	4a85      	ldr	r2, [pc, #532]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800507a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800507e:	6113      	str	r3, [r2, #16]
 8005080:	4b83      	ldr	r3, [pc, #524]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005082:	6919      	ldr	r1, [r3, #16]
 8005084:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005088:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800508c:	4a80      	ldr	r2, [pc, #512]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800508e:	430b      	orrs	r3, r1
 8005090:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800509e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050a0:	2300      	movs	r3, #0
 80050a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050a4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80050a8:	460b      	mov	r3, r1
 80050aa:	4313      	orrs	r3, r2
 80050ac:	d009      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80050ae:	4b78      	ldr	r3, [pc, #480]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80050b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050bc:	4a74      	ldr	r2, [pc, #464]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050be:	430b      	orrs	r3, r1
 80050c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80050ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80050d0:	2300      	movs	r3, #0
 80050d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80050d8:	460b      	mov	r3, r1
 80050da:	4313      	orrs	r3, r2
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050de:	4b6c      	ldr	r3, [pc, #432]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80050e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ee:	4a68      	ldr	r2, [pc, #416]	@ (8005290 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80050f0:	430b      	orrs	r3, r1
 80050f2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80050f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fc:	2100      	movs	r1, #0
 80050fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005106:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800510a:	460b      	mov	r3, r1
 800510c:	4313      	orrs	r3, r2
 800510e:	d011      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005114:	3308      	adds	r3, #8
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fb79 	bl	8005810 <RCCEx_PLL2_Config>
 800511e:	4603      	mov	r3, r0
 8005120:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005124:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005128:	2b00      	cmp	r3, #0
 800512a:	d003      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800512c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005130:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513c:	2100      	movs	r1, #0
 800513e:	6239      	str	r1, [r7, #32]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24
 8005146:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800514a:	460b      	mov	r3, r1
 800514c:	4313      	orrs	r3, r2
 800514e:	d011      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005154:	3308      	adds	r3, #8
 8005156:	2101      	movs	r1, #1
 8005158:	4618      	mov	r0, r3
 800515a:	f000 fb59 	bl	8005810 <RCCEx_PLL2_Config>
 800515e:	4603      	mov	r3, r0
 8005160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005164:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	2100      	movs	r1, #0
 800517e:	61b9      	str	r1, [r7, #24]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800518a:	460b      	mov	r3, r1
 800518c:	4313      	orrs	r3, r2
 800518e:	d011      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005194:	3308      	adds	r3, #8
 8005196:	2102      	movs	r1, #2
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fb39 	bl	8005810 <RCCEx_PLL2_Config>
 800519e:	4603      	mov	r3, r0
 80051a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80051a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80051b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051bc:	2100      	movs	r1, #0
 80051be:	6139      	str	r1, [r7, #16]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80051ca:	460b      	mov	r3, r1
 80051cc:	4313      	orrs	r3, r2
 80051ce:	d011      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d4:	3328      	adds	r3, #40	@ 0x28
 80051d6:	2100      	movs	r1, #0
 80051d8:	4618      	mov	r0, r3
 80051da:	f000 fbcb 	bl	8005974 <RCCEx_PLL3_Config>
 80051de:	4603      	mov	r3, r0
 80051e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80051e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80051f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	2100      	movs	r1, #0
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	60fb      	str	r3, [r7, #12]
 8005206:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800520a:	460b      	mov	r3, r1
 800520c:	4313      	orrs	r3, r2
 800520e:	d011      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005214:	3328      	adds	r3, #40	@ 0x28
 8005216:	2101      	movs	r1, #1
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fbab 	bl	8005974 <RCCEx_PLL3_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005224:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800522c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005230:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	2100      	movs	r1, #0
 800523e:	6039      	str	r1, [r7, #0]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	607b      	str	r3, [r7, #4]
 8005246:	e9d7 1200 	ldrd	r1, r2, [r7]
 800524a:	460b      	mov	r3, r1
 800524c:	4313      	orrs	r3, r2
 800524e:	d011      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005254:	3328      	adds	r3, #40	@ 0x28
 8005256:	2102      	movs	r1, #2
 8005258:	4618      	mov	r0, r3
 800525a:	f000 fb8b 	bl	8005974 <RCCEx_PLL3_Config>
 800525e:	4603      	mov	r3, r0
 8005260:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005264:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800526c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005270:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005274:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
}
 8005282:	4618      	mov	r0, r3
 8005284:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005288:	46bd      	mov	sp, r7
 800528a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800528e:	bf00      	nop
 8005290:	58024400 	.word	0x58024400

08005294 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005298:	f7fe fe00 	bl	8003e9c <HAL_RCC_GetHCLKFreq>
 800529c:	4602      	mov	r2, r0
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	f003 0307 	and.w	r3, r3, #7
 80052a8:	4904      	ldr	r1, [pc, #16]	@ (80052bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80052aa:	5ccb      	ldrb	r3, [r1, r3]
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	58024400 	.word	0x58024400
 80052bc:	08029bb4 	.word	0x08029bb4

080052c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	@ 0x24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052c8:	4ba1      	ldr	r3, [pc, #644]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80052d2:	4b9f      	ldr	r3, [pc, #636]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d6:	0b1b      	lsrs	r3, r3, #12
 80052d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80052de:	4b9c      	ldr	r3, [pc, #624]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80052ea:	4b99      	ldr	r3, [pc, #612]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ee:	08db      	lsrs	r3, r3, #3
 80052f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	fb02 f303 	mul.w	r3, r2, r3
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005302:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 8111 	beq.w	8005530 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b02      	cmp	r3, #2
 8005312:	f000 8083 	beq.w	800541c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b02      	cmp	r3, #2
 800531a:	f200 80a1 	bhi.w	8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d056      	beq.n	80053d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800532a:	e099      	b.n	8005460 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800532c:	4b88      	ldr	r3, [pc, #544]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0320 	and.w	r3, r3, #32
 8005334:	2b00      	cmp	r3, #0
 8005336:	d02d      	beq.n	8005394 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005338:	4b85      	ldr	r3, [pc, #532]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	08db      	lsrs	r3, r3, #3
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	4a84      	ldr	r2, [pc, #528]	@ (8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
 8005348:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	ee07 3a90 	vmov	s15, r3
 8005350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	ee07 3a90 	vmov	s15, r3
 800535a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005362:	4b7b      	ldr	r3, [pc, #492]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800536a:	ee07 3a90 	vmov	s15, r3
 800536e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005372:	ed97 6a03 	vldr	s12, [r7, #12]
 8005376:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800537a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800537e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800538a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800538e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005392:	e087      	b.n	80054a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	ee07 3a90 	vmov	s15, r3
 800539a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800555c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80053a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053a6:	4b6a      	ldr	r3, [pc, #424]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80053be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053d6:	e065      	b.n	80054a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053e2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80053e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ea:	4b59      	ldr	r3, [pc, #356]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f2:	ee07 3a90 	vmov	s15, r3
 80053f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80053fe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800540a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800540e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800541a:	e043      	b.n	80054a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005426:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005564 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800542a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800542e:	4b48      	ldr	r3, [pc, #288]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800543e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005442:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800544a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800544e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800545a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800545e:	e021      	b.n	80054a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800546e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005472:	4b37      	ldr	r3, [pc, #220]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547a:	ee07 3a90 	vmov	s15, r3
 800547e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005482:	ed97 6a03 	vldr	s12, [r7, #12]
 8005486:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800548a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80054a4:	4b2a      	ldr	r3, [pc, #168]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a8:	0a5b      	lsrs	r3, r3, #9
 80054aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054be:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054ca:	ee17 2a90 	vmov	r2, s15
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80054d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d6:	0c1b      	lsrs	r3, r3, #16
 80054d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054dc:	ee07 3a90 	vmov	s15, r3
 80054e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054f8:	ee17 2a90 	vmov	r2, s15
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005500:	4b13      	ldr	r3, [pc, #76]	@ (8005550 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005504:	0e1b      	lsrs	r3, r3, #24
 8005506:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800550a:	ee07 3a90 	vmov	s15, r3
 800550e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800551a:	edd7 6a07 	vldr	s13, [r7, #28]
 800551e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005526:	ee17 2a90 	vmov	r2, s15
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800552e:	e008      	b.n	8005542 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	609a      	str	r2, [r3, #8]
}
 8005542:	bf00      	nop
 8005544:	3724      	adds	r7, #36	@ 0x24
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	58024400 	.word	0x58024400
 8005554:	03d09000 	.word	0x03d09000
 8005558:	46000000 	.word	0x46000000
 800555c:	4c742400 	.word	0x4c742400
 8005560:	4a742400 	.word	0x4a742400
 8005564:	4af42400 	.word	0x4af42400

08005568 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005568:	b480      	push	{r7}
 800556a:	b089      	sub	sp, #36	@ 0x24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005570:	4ba1      	ldr	r3, [pc, #644]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800557a:	4b9f      	ldr	r3, [pc, #636]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	0d1b      	lsrs	r3, r3, #20
 8005580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005584:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005586:	4b9c      	ldr	r3, [pc, #624]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005592:	4b99      	ldr	r3, [pc, #612]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005596:	08db      	lsrs	r3, r3, #3
 8005598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8111 	beq.w	80057d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	f000 8083 	beq.w	80056c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	f200 80a1 	bhi.w	8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d056      	beq.n	8005680 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80055d2:	e099      	b.n	8005708 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d4:	4b88      	ldr	r3, [pc, #544]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02d      	beq.n	800563c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055e0:	4b85      	ldr	r3, [pc, #532]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	4a84      	ldr	r2, [pc, #528]	@ (80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560a:	4b7b      	ldr	r3, [pc, #492]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561a:	ed97 6a03 	vldr	s12, [r7, #12]
 800561e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800562e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800563a:	e087      	b.n	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005804 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800564a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564e:	4b6a      	ldr	r3, [pc, #424]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005662:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800567e:	e065      	b.n	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800568e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005692:	4b59      	ldr	r3, [pc, #356]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056c2:	e043      	b.n	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800580c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80056d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d6:	4b48      	ldr	r3, [pc, #288]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005706:	e021      	b.n	800574c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005712:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571a:	4b37      	ldr	r3, [pc, #220]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572a:	ed97 6a03 	vldr	s12, [r7, #12]
 800572e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800574a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800574c:	4b2a      	ldr	r3, [pc, #168]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800574e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005750:	0a5b      	lsrs	r3, r3, #9
 8005752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005766:	edd7 6a07 	vldr	s13, [r7, #28]
 800576a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005772:	ee17 2a90 	vmov	r2, s15
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800577a:	4b1f      	ldr	r3, [pc, #124]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005794:	edd7 6a07 	vldr	s13, [r7, #28]
 8005798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a0:	ee17 2a90 	vmov	r2, s15
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80057a8:	4b13      	ldr	r3, [pc, #76]	@ (80057f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ac:	0e1b      	lsrs	r3, r3, #24
 80057ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ce:	ee17 2a90 	vmov	r2, s15
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80057d6:	e008      	b.n	80057ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	609a      	str	r2, [r3, #8]
}
 80057ea:	bf00      	nop
 80057ec:	3724      	adds	r7, #36	@ 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
 80057fc:	03d09000 	.word	0x03d09000
 8005800:	46000000 	.word	0x46000000
 8005804:	4c742400 	.word	0x4c742400
 8005808:	4a742400 	.word	0x4a742400
 800580c:	4af42400 	.word	0x4af42400

08005810 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800581e:	4b53      	ldr	r3, [pc, #332]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b03      	cmp	r3, #3
 8005828:	d101      	bne.n	800582e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e099      	b.n	8005962 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800582e:	4b4f      	ldr	r3, [pc, #316]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a4e      	ldr	r2, [pc, #312]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005834:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583a:	f7fb fff7 	bl	800182c <HAL_GetTick>
 800583e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005840:	e008      	b.n	8005854 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005842:	f7fb fff3 	bl	800182c <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e086      	b.n	8005962 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005854:	4b45      	ldr	r3, [pc, #276]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f0      	bne.n	8005842 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005860:	4b42      	ldr	r3, [pc, #264]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	031b      	lsls	r3, r3, #12
 800586e:	493f      	ldr	r1, [pc, #252]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005870:	4313      	orrs	r3, r2
 8005872:	628b      	str	r3, [r1, #40]	@ 0x28
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	3b01      	subs	r3, #1
 800587a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	3b01      	subs	r3, #1
 8005884:	025b      	lsls	r3, r3, #9
 8005886:	b29b      	uxth	r3, r3
 8005888:	431a      	orrs	r2, r3
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	3b01      	subs	r3, #1
 8005890:	041b      	lsls	r3, r3, #16
 8005892:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	3b01      	subs	r3, #1
 800589e:	061b      	lsls	r3, r3, #24
 80058a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80058a4:	4931      	ldr	r1, [pc, #196]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058aa:	4b30      	ldr	r3, [pc, #192]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	492d      	ldr	r1, [pc, #180]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058bc:	4b2b      	ldr	r3, [pc, #172]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c0:	f023 0220 	bic.w	r2, r3, #32
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	4928      	ldr	r1, [pc, #160]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058ce:	4b27      	ldr	r3, [pc, #156]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d2:	4a26      	ldr	r2, [pc, #152]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058d4:	f023 0310 	bic.w	r3, r3, #16
 80058d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058da:	4b24      	ldr	r3, [pc, #144]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058de:	4b24      	ldr	r3, [pc, #144]	@ (8005970 <RCCEx_PLL2_Config+0x160>)
 80058e0:	4013      	ands	r3, r2
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	69d2      	ldr	r2, [r2, #28]
 80058e6:	00d2      	lsls	r2, r2, #3
 80058e8:	4920      	ldr	r1, [pc, #128]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058ee:	4b1f      	ldr	r3, [pc, #124]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f2:	4a1e      	ldr	r2, [pc, #120]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 80058f4:	f043 0310 	orr.w	r3, r3, #16
 80058f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005900:	4b1a      	ldr	r3, [pc, #104]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	4a19      	ldr	r2, [pc, #100]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005906:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800590a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800590c:	e00f      	b.n	800592e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d106      	bne.n	8005922 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005914:	4b15      	ldr	r3, [pc, #84]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005918:	4a14      	ldr	r2, [pc, #80]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 800591a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800591e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005920:	e005      	b.n	800592e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005922:	4b12      	ldr	r3, [pc, #72]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	4a11      	ldr	r2, [pc, #68]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005928:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800592c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800592e:	4b0f      	ldr	r3, [pc, #60]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a0e      	ldr	r2, [pc, #56]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005934:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593a:	f7fb ff77 	bl	800182c <HAL_GetTick>
 800593e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005940:	e008      	b.n	8005954 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005942:	f7fb ff73 	bl	800182c <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e006      	b.n	8005962 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005954:	4b05      	ldr	r3, [pc, #20]	@ (800596c <RCCEx_PLL2_Config+0x15c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005960:	7bfb      	ldrb	r3, [r7, #15]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	58024400 	.word	0x58024400
 8005970:	ffff0007 	.word	0xffff0007

08005974 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005982:	4b53      	ldr	r3, [pc, #332]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d101      	bne.n	8005992 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e099      	b.n	8005ac6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005992:	4b4f      	ldr	r3, [pc, #316]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a4e      	ldr	r2, [pc, #312]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005998:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800599c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800599e:	f7fb ff45 	bl	800182c <HAL_GetTick>
 80059a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059a4:	e008      	b.n	80059b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80059a6:	f7fb ff41 	bl	800182c <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	d901      	bls.n	80059b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e086      	b.n	8005ac6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059b8:	4b45      	ldr	r3, [pc, #276]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1f0      	bne.n	80059a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059c4:	4b42      	ldr	r3, [pc, #264]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	051b      	lsls	r3, r3, #20
 80059d2:	493f      	ldr	r1, [pc, #252]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	628b      	str	r3, [r1, #40]	@ 0x28
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	3b01      	subs	r3, #1
 80059de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	025b      	lsls	r3, r3, #9
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	041b      	lsls	r3, r3, #16
 80059f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80059fa:	431a      	orrs	r2, r3
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	061b      	lsls	r3, r3, #24
 8005a04:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005a08:	4931      	ldr	r1, [pc, #196]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a0e:	4b30      	ldr	r3, [pc, #192]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	492d      	ldr	r1, [pc, #180]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a20:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	4928      	ldr	r1, [pc, #160]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a32:	4b27      	ldr	r3, [pc, #156]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	4a26      	ldr	r2, [pc, #152]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a3e:	4b24      	ldr	r3, [pc, #144]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a42:	4b24      	ldr	r3, [pc, #144]	@ (8005ad4 <RCCEx_PLL3_Config+0x160>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	69d2      	ldr	r2, [r2, #28]
 8005a4a:	00d2      	lsls	r2, r2, #3
 8005a4c:	4920      	ldr	r1, [pc, #128]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a52:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a56:	4a1e      	ldr	r2, [pc, #120]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d106      	bne.n	8005a72 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a64:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a68:	4a19      	ldr	r2, [pc, #100]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a6a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a70:	e00f      	b.n	8005a92 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d106      	bne.n	8005a86 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a78:	4b15      	ldr	r3, [pc, #84]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a7c:	4a14      	ldr	r2, [pc, #80]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005a82:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005a84:	e005      	b.n	8005a92 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a86:	4b12      	ldr	r3, [pc, #72]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	4a11      	ldr	r2, [pc, #68]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a92:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a0e      	ldr	r2, [pc, #56]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a9e:	f7fb fec5 	bl	800182c <HAL_GetTick>
 8005aa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aa4:	e008      	b.n	8005ab8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005aa6:	f7fb fec1 	bl	800182c <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ab8:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <RCCEx_PLL3_Config+0x15c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d0f0      	beq.n	8005aa6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	ffff0007 	.word	0xffff0007

08005ad8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e092      	b.n	8005c10 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	7a5b      	ldrb	r3, [r3, #9]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fb fbf0 	bl	80012e0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0204 	bic.w	r2, r2, #4
 8005b14:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	4b3e      	ldr	r3, [pc, #248]	@ (8005c18 <HAL_RNG_Init+0x140>)
 8005b1e:	4013      	ands	r3, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6852      	ldr	r2, [r2, #4]
 8005b24:	431a      	orrs	r2, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005b2e:	601a      	str	r2, [r3, #0]
#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a39      	ldr	r2, [pc, #228]	@ (8005c1c <HAL_RNG_Init+0x144>)
 8005b36:	611a      	str	r2, [r3, #16]
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f247 2274 	movw	r2, #29300	@ 0x7274
 8005b40:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8005b50:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b52:	f7fb fe6b 	bl	800182c <HAL_GetTick>
 8005b56:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005b58:	e016      	b.n	8005b88 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005b5a:	f7fb fe67 	bl	800182c <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d90f      	bls.n	8005b88 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b76:	d107      	bne.n	8005b88 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e043      	b.n	8005c10 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b96:	d0e0      	beq.n	8005b5a <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f042 0204 	orr.w	r2, r2, #4
 8005ba6:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb2:	2b40      	cmp	r3, #64	@ 0x40
 8005bb4:	d104      	bne.n	8005bc0 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e027      	b.n	8005c10 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8005bc0:	f7fb fe34 	bl	800182c <HAL_GetTick>
 8005bc4:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005bc6:	e015      	b.n	8005bf4 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005bc8:	f7fb fe30 	bl	800182c <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d90e      	bls.n	8005bf4 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d007      	beq.n	8005bf4 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2204      	movs	r2, #4
 8005be8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2202      	movs	r2, #2
 8005bee:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e00d      	b.n	8005c10 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d1e2      	bne.n	8005bc8 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	bfffffdf 	.word	0xbfffffdf
 8005c1c:	17590abc 	.word	0x17590abc

08005c20 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	7a1b      	ldrb	r3, [r3, #8]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e068      	b.n	8005d0c <HAL_RNG_GenerateRandomNumber+0xec>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7a5b      	ldrb	r3, [r3, #9]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d157      	bne.n	8005cfa <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5a:	2b40      	cmp	r3, #64	@ 0x40
 8005c5c:	d10f      	bne.n	8005c7e <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2208      	movs	r2, #8
 8005c62:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f85f 	bl	8005d28 <RNG_RecoverSeedError>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d104      	bne.n	8005c7e <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	60da      	str	r2, [r3, #12]
        return status;
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	e046      	b.n	8005d0c <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c7e:	f7fb fdd5 	bl	800182c <HAL_GetTick>
 8005c82:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c84:	e018      	b.n	8005cb8 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005c86:	f7fb fdd1 	bl	800182c <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d911      	bls.n	8005cb8 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d00a      	beq.n	8005cb8 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e029      	b.n	8005d0c <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d1df      	bne.n	8005c86 <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cda:	2b40      	cmp	r3, #64	@ 0x40
 8005cdc:	d105      	bne.n	8005cea <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	73fb      	strb	r3, [r7, #15]
 8005ce8:	e003      	b.n	8005cf2 <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	725a      	strb	r2, [r3, #9]
 8005cf8:	e004      	b.n	8005d04 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2204      	movs	r2, #4
 8005cfe:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	721a      	strb	r2, [r3, #8]

  return status;
 8005d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d008      	beq.n	8005d54 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d50:	605a      	str	r2, [r3, #4]
 8005d52:	e05f      	b.n	8005e14 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005d62:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8005d72:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 8005d74:	2302      	movs	r3, #2
 8005d76:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d110      	bne.n	8005da6 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f043 0202 	orr.w	r2, r3, #2
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ffb9 	bl	8005d14 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e03d      	b.n	8005e22 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005db4:	d0e0      	beq.n	8005d78 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc0:	2b40      	cmp	r3, #64	@ 0x40
 8005dc2:	d107      	bne.n	8005dd4 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd2:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d110      	bne.n	8005e06 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f043 0202 	orr.w	r2, r3, #2
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff ff89 	bl	8005d14 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e00d      	b.n	8005e22 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d0e1      	beq.n	8005dd8 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f023 0208 	bic.w	r2, r3, #8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e042      	b.n	8005ec2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fb fa80 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2224      	movs	r2, #36	@ 0x24
 8005e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d002      	beq.n	8005e7a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 ff23 	bl	8006cc0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8b4 	bl	8005fe8 <UART_SetConfig>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d101      	bne.n	8005e8a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e01b      	b.n	8005ec2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ea8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0201 	orr.w	r2, r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 ffa2 	bl	8006e04 <UART_CheckIdleState>
 8005ec0:	4603      	mov	r3, r0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b08a      	sub	sp, #40	@ 0x28
 8005ece:	af02      	add	r7, sp, #8
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d17b      	bne.n	8005fdc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <HAL_UART_Transmit+0x26>
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e074      	b.n	8005fde <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2221      	movs	r2, #33	@ 0x21
 8005f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f04:	f7fb fc92 	bl	800182c <HAL_GetTick>
 8005f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	88fa      	ldrh	r2, [r7, #6]
 8005f0e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	88fa      	ldrh	r2, [r7, #6]
 8005f16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f22:	d108      	bne.n	8005f36 <HAL_UART_Transmit+0x6c>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e003      	b.n	8005f3e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f3e:	e030      	b.n	8005fa2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2200      	movs	r2, #0
 8005f48:	2180      	movs	r1, #128	@ 0x80
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f001 f804 	bl	8006f58 <UART_WaitOnFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e03d      	b.n	8005fde <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10b      	bne.n	8005f80 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e007      	b.n	8005f90 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1c8      	bne.n	8005f40 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	9300      	str	r3, [sp, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2140      	movs	r1, #64	@ 0x40
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 ffcd 	bl	8006f58 <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d005      	beq.n	8005fd0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e006      	b.n	8005fde <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	e000      	b.n	8005fde <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005fdc:	2302      	movs	r3, #2
  }
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3720      	adds	r7, #32
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fec:	b092      	sub	sp, #72	@ 0x48
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	431a      	orrs	r2, r3
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	431a      	orrs	r2, r3
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	69db      	ldr	r3, [r3, #28]
 800600c:	4313      	orrs	r3, r2
 800600e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	4bbe      	ldr	r3, [pc, #760]	@ (8006310 <UART_SetConfig+0x328>)
 8006018:	4013      	ands	r3, r2
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006020:	430b      	orrs	r3, r1
 8006022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	430a      	orrs	r2, r1
 8006038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	699b      	ldr	r3, [r3, #24]
 800603e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4ab3      	ldr	r2, [pc, #716]	@ (8006314 <UART_SetConfig+0x32c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006050:	4313      	orrs	r3, r2
 8006052:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689a      	ldr	r2, [r3, #8]
 800605a:	4baf      	ldr	r3, [pc, #700]	@ (8006318 <UART_SetConfig+0x330>)
 800605c:	4013      	ands	r3, r2
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	6812      	ldr	r2, [r2, #0]
 8006062:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006064:	430b      	orrs	r3, r1
 8006066:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	f023 010f 	bic.w	r1, r3, #15
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	430a      	orrs	r2, r1
 800607c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4aa6      	ldr	r2, [pc, #664]	@ (800631c <UART_SetConfig+0x334>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d177      	bne.n	8006178 <UART_SetConfig+0x190>
 8006088:	4ba5      	ldr	r3, [pc, #660]	@ (8006320 <UART_SetConfig+0x338>)
 800608a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800608c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006090:	2b28      	cmp	r3, #40	@ 0x28
 8006092:	d86d      	bhi.n	8006170 <UART_SetConfig+0x188>
 8006094:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <UART_SetConfig+0xb4>)
 8006096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609a:	bf00      	nop
 800609c:	08006141 	.word	0x08006141
 80060a0:	08006171 	.word	0x08006171
 80060a4:	08006171 	.word	0x08006171
 80060a8:	08006171 	.word	0x08006171
 80060ac:	08006171 	.word	0x08006171
 80060b0:	08006171 	.word	0x08006171
 80060b4:	08006171 	.word	0x08006171
 80060b8:	08006171 	.word	0x08006171
 80060bc:	08006149 	.word	0x08006149
 80060c0:	08006171 	.word	0x08006171
 80060c4:	08006171 	.word	0x08006171
 80060c8:	08006171 	.word	0x08006171
 80060cc:	08006171 	.word	0x08006171
 80060d0:	08006171 	.word	0x08006171
 80060d4:	08006171 	.word	0x08006171
 80060d8:	08006171 	.word	0x08006171
 80060dc:	08006151 	.word	0x08006151
 80060e0:	08006171 	.word	0x08006171
 80060e4:	08006171 	.word	0x08006171
 80060e8:	08006171 	.word	0x08006171
 80060ec:	08006171 	.word	0x08006171
 80060f0:	08006171 	.word	0x08006171
 80060f4:	08006171 	.word	0x08006171
 80060f8:	08006171 	.word	0x08006171
 80060fc:	08006159 	.word	0x08006159
 8006100:	08006171 	.word	0x08006171
 8006104:	08006171 	.word	0x08006171
 8006108:	08006171 	.word	0x08006171
 800610c:	08006171 	.word	0x08006171
 8006110:	08006171 	.word	0x08006171
 8006114:	08006171 	.word	0x08006171
 8006118:	08006171 	.word	0x08006171
 800611c:	08006161 	.word	0x08006161
 8006120:	08006171 	.word	0x08006171
 8006124:	08006171 	.word	0x08006171
 8006128:	08006171 	.word	0x08006171
 800612c:	08006171 	.word	0x08006171
 8006130:	08006171 	.word	0x08006171
 8006134:	08006171 	.word	0x08006171
 8006138:	08006171 	.word	0x08006171
 800613c:	08006169 	.word	0x08006169
 8006140:	2301      	movs	r3, #1
 8006142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006146:	e326      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006148:	2304      	movs	r3, #4
 800614a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614e:	e322      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006150:	2308      	movs	r3, #8
 8006152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006156:	e31e      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006158:	2310      	movs	r3, #16
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e31a      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006160:	2320      	movs	r3, #32
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e316      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006168:	2340      	movs	r3, #64	@ 0x40
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e312      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006170:	2380      	movs	r3, #128	@ 0x80
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e30e      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a69      	ldr	r2, [pc, #420]	@ (8006324 <UART_SetConfig+0x33c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d130      	bne.n	80061e4 <UART_SetConfig+0x1fc>
 8006182:	4b67      	ldr	r3, [pc, #412]	@ (8006320 <UART_SetConfig+0x338>)
 8006184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b05      	cmp	r3, #5
 800618c:	d826      	bhi.n	80061dc <UART_SetConfig+0x1f4>
 800618e:	a201      	add	r2, pc, #4	@ (adr r2, 8006194 <UART_SetConfig+0x1ac>)
 8006190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006194:	080061ad 	.word	0x080061ad
 8006198:	080061b5 	.word	0x080061b5
 800619c:	080061bd 	.word	0x080061bd
 80061a0:	080061c5 	.word	0x080061c5
 80061a4:	080061cd 	.word	0x080061cd
 80061a8:	080061d5 	.word	0x080061d5
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b2:	e2f0      	b.n	8006796 <UART_SetConfig+0x7ae>
 80061b4:	2304      	movs	r3, #4
 80061b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ba:	e2ec      	b.n	8006796 <UART_SetConfig+0x7ae>
 80061bc:	2308      	movs	r3, #8
 80061be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061c2:	e2e8      	b.n	8006796 <UART_SetConfig+0x7ae>
 80061c4:	2310      	movs	r3, #16
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e2e4      	b.n	8006796 <UART_SetConfig+0x7ae>
 80061cc:	2320      	movs	r3, #32
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e2e0      	b.n	8006796 <UART_SetConfig+0x7ae>
 80061d4:	2340      	movs	r3, #64	@ 0x40
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e2dc      	b.n	8006796 <UART_SetConfig+0x7ae>
 80061dc:	2380      	movs	r3, #128	@ 0x80
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e2d8      	b.n	8006796 <UART_SetConfig+0x7ae>
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a4f      	ldr	r2, [pc, #316]	@ (8006328 <UART_SetConfig+0x340>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d130      	bne.n	8006250 <UART_SetConfig+0x268>
 80061ee:	4b4c      	ldr	r3, [pc, #304]	@ (8006320 <UART_SetConfig+0x338>)
 80061f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f2:	f003 0307 	and.w	r3, r3, #7
 80061f6:	2b05      	cmp	r3, #5
 80061f8:	d826      	bhi.n	8006248 <UART_SetConfig+0x260>
 80061fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <UART_SetConfig+0x218>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006219 	.word	0x08006219
 8006204:	08006221 	.word	0x08006221
 8006208:	08006229 	.word	0x08006229
 800620c:	08006231 	.word	0x08006231
 8006210:	08006239 	.word	0x08006239
 8006214:	08006241 	.word	0x08006241
 8006218:	2300      	movs	r3, #0
 800621a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800621e:	e2ba      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006220:	2304      	movs	r3, #4
 8006222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006226:	e2b6      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006228:	2308      	movs	r3, #8
 800622a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800622e:	e2b2      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006230:	2310      	movs	r3, #16
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e2ae      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006238:	2320      	movs	r3, #32
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e2aa      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006240:	2340      	movs	r3, #64	@ 0x40
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e2a6      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006248:	2380      	movs	r3, #128	@ 0x80
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e2a2      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a35      	ldr	r2, [pc, #212]	@ (800632c <UART_SetConfig+0x344>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d130      	bne.n	80062bc <UART_SetConfig+0x2d4>
 800625a:	4b31      	ldr	r3, [pc, #196]	@ (8006320 <UART_SetConfig+0x338>)
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	2b05      	cmp	r3, #5
 8006264:	d826      	bhi.n	80062b4 <UART_SetConfig+0x2cc>
 8006266:	a201      	add	r2, pc, #4	@ (adr r2, 800626c <UART_SetConfig+0x284>)
 8006268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626c:	08006285 	.word	0x08006285
 8006270:	0800628d 	.word	0x0800628d
 8006274:	08006295 	.word	0x08006295
 8006278:	0800629d 	.word	0x0800629d
 800627c:	080062a5 	.word	0x080062a5
 8006280:	080062ad 	.word	0x080062ad
 8006284:	2300      	movs	r3, #0
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800628a:	e284      	b.n	8006796 <UART_SetConfig+0x7ae>
 800628c:	2304      	movs	r3, #4
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006292:	e280      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006294:	2308      	movs	r3, #8
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800629a:	e27c      	b.n	8006796 <UART_SetConfig+0x7ae>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062a2:	e278      	b.n	8006796 <UART_SetConfig+0x7ae>
 80062a4:	2320      	movs	r3, #32
 80062a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062aa:	e274      	b.n	8006796 <UART_SetConfig+0x7ae>
 80062ac:	2340      	movs	r3, #64	@ 0x40
 80062ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062b2:	e270      	b.n	8006796 <UART_SetConfig+0x7ae>
 80062b4:	2380      	movs	r3, #128	@ 0x80
 80062b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062ba:	e26c      	b.n	8006796 <UART_SetConfig+0x7ae>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006330 <UART_SetConfig+0x348>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d142      	bne.n	800634c <UART_SetConfig+0x364>
 80062c6:	4b16      	ldr	r3, [pc, #88]	@ (8006320 <UART_SetConfig+0x338>)
 80062c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	d838      	bhi.n	8006344 <UART_SetConfig+0x35c>
 80062d2:	a201      	add	r2, pc, #4	@ (adr r2, 80062d8 <UART_SetConfig+0x2f0>)
 80062d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d8:	080062f1 	.word	0x080062f1
 80062dc:	080062f9 	.word	0x080062f9
 80062e0:	08006301 	.word	0x08006301
 80062e4:	08006309 	.word	0x08006309
 80062e8:	08006335 	.word	0x08006335
 80062ec:	0800633d 	.word	0x0800633d
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062f6:	e24e      	b.n	8006796 <UART_SetConfig+0x7ae>
 80062f8:	2304      	movs	r3, #4
 80062fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80062fe:	e24a      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006300:	2308      	movs	r3, #8
 8006302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006306:	e246      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006308:	2310      	movs	r3, #16
 800630a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800630e:	e242      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006310:	cfff69f3 	.word	0xcfff69f3
 8006314:	58000c00 	.word	0x58000c00
 8006318:	11fff4ff 	.word	0x11fff4ff
 800631c:	40011000 	.word	0x40011000
 8006320:	58024400 	.word	0x58024400
 8006324:	40004400 	.word	0x40004400
 8006328:	40004800 	.word	0x40004800
 800632c:	40004c00 	.word	0x40004c00
 8006330:	40005000 	.word	0x40005000
 8006334:	2320      	movs	r3, #32
 8006336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800633a:	e22c      	b.n	8006796 <UART_SetConfig+0x7ae>
 800633c:	2340      	movs	r3, #64	@ 0x40
 800633e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006342:	e228      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006344:	2380      	movs	r3, #128	@ 0x80
 8006346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800634a:	e224      	b.n	8006796 <UART_SetConfig+0x7ae>
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4ab1      	ldr	r2, [pc, #708]	@ (8006618 <UART_SetConfig+0x630>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d176      	bne.n	8006444 <UART_SetConfig+0x45c>
 8006356:	4bb1      	ldr	r3, [pc, #708]	@ (800661c <UART_SetConfig+0x634>)
 8006358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800635e:	2b28      	cmp	r3, #40	@ 0x28
 8006360:	d86c      	bhi.n	800643c <UART_SetConfig+0x454>
 8006362:	a201      	add	r2, pc, #4	@ (adr r2, 8006368 <UART_SetConfig+0x380>)
 8006364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006368:	0800640d 	.word	0x0800640d
 800636c:	0800643d 	.word	0x0800643d
 8006370:	0800643d 	.word	0x0800643d
 8006374:	0800643d 	.word	0x0800643d
 8006378:	0800643d 	.word	0x0800643d
 800637c:	0800643d 	.word	0x0800643d
 8006380:	0800643d 	.word	0x0800643d
 8006384:	0800643d 	.word	0x0800643d
 8006388:	08006415 	.word	0x08006415
 800638c:	0800643d 	.word	0x0800643d
 8006390:	0800643d 	.word	0x0800643d
 8006394:	0800643d 	.word	0x0800643d
 8006398:	0800643d 	.word	0x0800643d
 800639c:	0800643d 	.word	0x0800643d
 80063a0:	0800643d 	.word	0x0800643d
 80063a4:	0800643d 	.word	0x0800643d
 80063a8:	0800641d 	.word	0x0800641d
 80063ac:	0800643d 	.word	0x0800643d
 80063b0:	0800643d 	.word	0x0800643d
 80063b4:	0800643d 	.word	0x0800643d
 80063b8:	0800643d 	.word	0x0800643d
 80063bc:	0800643d 	.word	0x0800643d
 80063c0:	0800643d 	.word	0x0800643d
 80063c4:	0800643d 	.word	0x0800643d
 80063c8:	08006425 	.word	0x08006425
 80063cc:	0800643d 	.word	0x0800643d
 80063d0:	0800643d 	.word	0x0800643d
 80063d4:	0800643d 	.word	0x0800643d
 80063d8:	0800643d 	.word	0x0800643d
 80063dc:	0800643d 	.word	0x0800643d
 80063e0:	0800643d 	.word	0x0800643d
 80063e4:	0800643d 	.word	0x0800643d
 80063e8:	0800642d 	.word	0x0800642d
 80063ec:	0800643d 	.word	0x0800643d
 80063f0:	0800643d 	.word	0x0800643d
 80063f4:	0800643d 	.word	0x0800643d
 80063f8:	0800643d 	.word	0x0800643d
 80063fc:	0800643d 	.word	0x0800643d
 8006400:	0800643d 	.word	0x0800643d
 8006404:	0800643d 	.word	0x0800643d
 8006408:	08006435 	.word	0x08006435
 800640c:	2301      	movs	r3, #1
 800640e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006412:	e1c0      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006414:	2304      	movs	r3, #4
 8006416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800641a:	e1bc      	b.n	8006796 <UART_SetConfig+0x7ae>
 800641c:	2308      	movs	r3, #8
 800641e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006422:	e1b8      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006424:	2310      	movs	r3, #16
 8006426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800642a:	e1b4      	b.n	8006796 <UART_SetConfig+0x7ae>
 800642c:	2320      	movs	r3, #32
 800642e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006432:	e1b0      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006434:	2340      	movs	r3, #64	@ 0x40
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800643a:	e1ac      	b.n	8006796 <UART_SetConfig+0x7ae>
 800643c:	2380      	movs	r3, #128	@ 0x80
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006442:	e1a8      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a75      	ldr	r2, [pc, #468]	@ (8006620 <UART_SetConfig+0x638>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d130      	bne.n	80064b0 <UART_SetConfig+0x4c8>
 800644e:	4b73      	ldr	r3, [pc, #460]	@ (800661c <UART_SetConfig+0x634>)
 8006450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	2b05      	cmp	r3, #5
 8006458:	d826      	bhi.n	80064a8 <UART_SetConfig+0x4c0>
 800645a:	a201      	add	r2, pc, #4	@ (adr r2, 8006460 <UART_SetConfig+0x478>)
 800645c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006460:	08006479 	.word	0x08006479
 8006464:	08006481 	.word	0x08006481
 8006468:	08006489 	.word	0x08006489
 800646c:	08006491 	.word	0x08006491
 8006470:	08006499 	.word	0x08006499
 8006474:	080064a1 	.word	0x080064a1
 8006478:	2300      	movs	r3, #0
 800647a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800647e:	e18a      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006480:	2304      	movs	r3, #4
 8006482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006486:	e186      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006488:	2308      	movs	r3, #8
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800648e:	e182      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006490:	2310      	movs	r3, #16
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006496:	e17e      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006498:	2320      	movs	r3, #32
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800649e:	e17a      	b.n	8006796 <UART_SetConfig+0x7ae>
 80064a0:	2340      	movs	r3, #64	@ 0x40
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064a6:	e176      	b.n	8006796 <UART_SetConfig+0x7ae>
 80064a8:	2380      	movs	r3, #128	@ 0x80
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ae:	e172      	b.n	8006796 <UART_SetConfig+0x7ae>
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a5b      	ldr	r2, [pc, #364]	@ (8006624 <UART_SetConfig+0x63c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d130      	bne.n	800651c <UART_SetConfig+0x534>
 80064ba:	4b58      	ldr	r3, [pc, #352]	@ (800661c <UART_SetConfig+0x634>)
 80064bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d826      	bhi.n	8006514 <UART_SetConfig+0x52c>
 80064c6:	a201      	add	r2, pc, #4	@ (adr r2, 80064cc <UART_SetConfig+0x4e4>)
 80064c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064cc:	080064e5 	.word	0x080064e5
 80064d0:	080064ed 	.word	0x080064ed
 80064d4:	080064f5 	.word	0x080064f5
 80064d8:	080064fd 	.word	0x080064fd
 80064dc:	08006505 	.word	0x08006505
 80064e0:	0800650d 	.word	0x0800650d
 80064e4:	2300      	movs	r3, #0
 80064e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064ea:	e154      	b.n	8006796 <UART_SetConfig+0x7ae>
 80064ec:	2304      	movs	r3, #4
 80064ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064f2:	e150      	b.n	8006796 <UART_SetConfig+0x7ae>
 80064f4:	2308      	movs	r3, #8
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80064fa:	e14c      	b.n	8006796 <UART_SetConfig+0x7ae>
 80064fc:	2310      	movs	r3, #16
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006502:	e148      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006504:	2320      	movs	r3, #32
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800650a:	e144      	b.n	8006796 <UART_SetConfig+0x7ae>
 800650c:	2340      	movs	r3, #64	@ 0x40
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006512:	e140      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006514:	2380      	movs	r3, #128	@ 0x80
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800651a:	e13c      	b.n	8006796 <UART_SetConfig+0x7ae>
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a41      	ldr	r2, [pc, #260]	@ (8006628 <UART_SetConfig+0x640>)
 8006522:	4293      	cmp	r3, r2
 8006524:	f040 8082 	bne.w	800662c <UART_SetConfig+0x644>
 8006528:	4b3c      	ldr	r3, [pc, #240]	@ (800661c <UART_SetConfig+0x634>)
 800652a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006530:	2b28      	cmp	r3, #40	@ 0x28
 8006532:	d86d      	bhi.n	8006610 <UART_SetConfig+0x628>
 8006534:	a201      	add	r2, pc, #4	@ (adr r2, 800653c <UART_SetConfig+0x554>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	080065e1 	.word	0x080065e1
 8006540:	08006611 	.word	0x08006611
 8006544:	08006611 	.word	0x08006611
 8006548:	08006611 	.word	0x08006611
 800654c:	08006611 	.word	0x08006611
 8006550:	08006611 	.word	0x08006611
 8006554:	08006611 	.word	0x08006611
 8006558:	08006611 	.word	0x08006611
 800655c:	080065e9 	.word	0x080065e9
 8006560:	08006611 	.word	0x08006611
 8006564:	08006611 	.word	0x08006611
 8006568:	08006611 	.word	0x08006611
 800656c:	08006611 	.word	0x08006611
 8006570:	08006611 	.word	0x08006611
 8006574:	08006611 	.word	0x08006611
 8006578:	08006611 	.word	0x08006611
 800657c:	080065f1 	.word	0x080065f1
 8006580:	08006611 	.word	0x08006611
 8006584:	08006611 	.word	0x08006611
 8006588:	08006611 	.word	0x08006611
 800658c:	08006611 	.word	0x08006611
 8006590:	08006611 	.word	0x08006611
 8006594:	08006611 	.word	0x08006611
 8006598:	08006611 	.word	0x08006611
 800659c:	080065f9 	.word	0x080065f9
 80065a0:	08006611 	.word	0x08006611
 80065a4:	08006611 	.word	0x08006611
 80065a8:	08006611 	.word	0x08006611
 80065ac:	08006611 	.word	0x08006611
 80065b0:	08006611 	.word	0x08006611
 80065b4:	08006611 	.word	0x08006611
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006601 	.word	0x08006601
 80065c0:	08006611 	.word	0x08006611
 80065c4:	08006611 	.word	0x08006611
 80065c8:	08006611 	.word	0x08006611
 80065cc:	08006611 	.word	0x08006611
 80065d0:	08006611 	.word	0x08006611
 80065d4:	08006611 	.word	0x08006611
 80065d8:	08006611 	.word	0x08006611
 80065dc:	08006609 	.word	0x08006609
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065e6:	e0d6      	b.n	8006796 <UART_SetConfig+0x7ae>
 80065e8:	2304      	movs	r3, #4
 80065ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065ee:	e0d2      	b.n	8006796 <UART_SetConfig+0x7ae>
 80065f0:	2308      	movs	r3, #8
 80065f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065f6:	e0ce      	b.n	8006796 <UART_SetConfig+0x7ae>
 80065f8:	2310      	movs	r3, #16
 80065fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80065fe:	e0ca      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006600:	2320      	movs	r3, #32
 8006602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006606:	e0c6      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006608:	2340      	movs	r3, #64	@ 0x40
 800660a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800660e:	e0c2      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006610:	2380      	movs	r3, #128	@ 0x80
 8006612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006616:	e0be      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006618:	40011400 	.word	0x40011400
 800661c:	58024400 	.word	0x58024400
 8006620:	40007800 	.word	0x40007800
 8006624:	40007c00 	.word	0x40007c00
 8006628:	40011800 	.word	0x40011800
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4aad      	ldr	r2, [pc, #692]	@ (80068e8 <UART_SetConfig+0x900>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d176      	bne.n	8006724 <UART_SetConfig+0x73c>
 8006636:	4bad      	ldr	r3, [pc, #692]	@ (80068ec <UART_SetConfig+0x904>)
 8006638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800663e:	2b28      	cmp	r3, #40	@ 0x28
 8006640:	d86c      	bhi.n	800671c <UART_SetConfig+0x734>
 8006642:	a201      	add	r2, pc, #4	@ (adr r2, 8006648 <UART_SetConfig+0x660>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	080066ed 	.word	0x080066ed
 800664c:	0800671d 	.word	0x0800671d
 8006650:	0800671d 	.word	0x0800671d
 8006654:	0800671d 	.word	0x0800671d
 8006658:	0800671d 	.word	0x0800671d
 800665c:	0800671d 	.word	0x0800671d
 8006660:	0800671d 	.word	0x0800671d
 8006664:	0800671d 	.word	0x0800671d
 8006668:	080066f5 	.word	0x080066f5
 800666c:	0800671d 	.word	0x0800671d
 8006670:	0800671d 	.word	0x0800671d
 8006674:	0800671d 	.word	0x0800671d
 8006678:	0800671d 	.word	0x0800671d
 800667c:	0800671d 	.word	0x0800671d
 8006680:	0800671d 	.word	0x0800671d
 8006684:	0800671d 	.word	0x0800671d
 8006688:	080066fd 	.word	0x080066fd
 800668c:	0800671d 	.word	0x0800671d
 8006690:	0800671d 	.word	0x0800671d
 8006694:	0800671d 	.word	0x0800671d
 8006698:	0800671d 	.word	0x0800671d
 800669c:	0800671d 	.word	0x0800671d
 80066a0:	0800671d 	.word	0x0800671d
 80066a4:	0800671d 	.word	0x0800671d
 80066a8:	08006705 	.word	0x08006705
 80066ac:	0800671d 	.word	0x0800671d
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	0800671d 	.word	0x0800671d
 80066bc:	0800671d 	.word	0x0800671d
 80066c0:	0800671d 	.word	0x0800671d
 80066c4:	0800671d 	.word	0x0800671d
 80066c8:	0800670d 	.word	0x0800670d
 80066cc:	0800671d 	.word	0x0800671d
 80066d0:	0800671d 	.word	0x0800671d
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	0800671d 	.word	0x0800671d
 80066dc:	0800671d 	.word	0x0800671d
 80066e0:	0800671d 	.word	0x0800671d
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	08006715 	.word	0x08006715
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066f2:	e050      	b.n	8006796 <UART_SetConfig+0x7ae>
 80066f4:	2304      	movs	r3, #4
 80066f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80066fa:	e04c      	b.n	8006796 <UART_SetConfig+0x7ae>
 80066fc:	2308      	movs	r3, #8
 80066fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006702:	e048      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006704:	2310      	movs	r3, #16
 8006706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800670a:	e044      	b.n	8006796 <UART_SetConfig+0x7ae>
 800670c:	2320      	movs	r3, #32
 800670e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006712:	e040      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006714:	2340      	movs	r3, #64	@ 0x40
 8006716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800671a:	e03c      	b.n	8006796 <UART_SetConfig+0x7ae>
 800671c:	2380      	movs	r3, #128	@ 0x80
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006722:	e038      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a71      	ldr	r2, [pc, #452]	@ (80068f0 <UART_SetConfig+0x908>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d130      	bne.n	8006790 <UART_SetConfig+0x7a8>
 800672e:	4b6f      	ldr	r3, [pc, #444]	@ (80068ec <UART_SetConfig+0x904>)
 8006730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	2b05      	cmp	r3, #5
 8006738:	d826      	bhi.n	8006788 <UART_SetConfig+0x7a0>
 800673a:	a201      	add	r2, pc, #4	@ (adr r2, 8006740 <UART_SetConfig+0x758>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006759 	.word	0x08006759
 8006744:	08006761 	.word	0x08006761
 8006748:	08006769 	.word	0x08006769
 800674c:	08006771 	.word	0x08006771
 8006750:	08006779 	.word	0x08006779
 8006754:	08006781 	.word	0x08006781
 8006758:	2302      	movs	r3, #2
 800675a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800675e:	e01a      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006760:	2304      	movs	r3, #4
 8006762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006766:	e016      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006768:	2308      	movs	r3, #8
 800676a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800676e:	e012      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006776:	e00e      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006778:	2320      	movs	r3, #32
 800677a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800677e:	e00a      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006780:	2340      	movs	r3, #64	@ 0x40
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006786:	e006      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006788:	2380      	movs	r3, #128	@ 0x80
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678e:	e002      	b.n	8006796 <UART_SetConfig+0x7ae>
 8006790:	2380      	movs	r3, #128	@ 0x80
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a55      	ldr	r2, [pc, #340]	@ (80068f0 <UART_SetConfig+0x908>)
 800679c:	4293      	cmp	r3, r2
 800679e:	f040 80f8 	bne.w	8006992 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80067a6:	2b20      	cmp	r3, #32
 80067a8:	dc46      	bgt.n	8006838 <UART_SetConfig+0x850>
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	db75      	blt.n	800689a <UART_SetConfig+0x8b2>
 80067ae:	3b02      	subs	r3, #2
 80067b0:	2b1e      	cmp	r3, #30
 80067b2:	d872      	bhi.n	800689a <UART_SetConfig+0x8b2>
 80067b4:	a201      	add	r2, pc, #4	@ (adr r2, 80067bc <UART_SetConfig+0x7d4>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	0800683f 	.word	0x0800683f
 80067c0:	0800689b 	.word	0x0800689b
 80067c4:	08006847 	.word	0x08006847
 80067c8:	0800689b 	.word	0x0800689b
 80067cc:	0800689b 	.word	0x0800689b
 80067d0:	0800689b 	.word	0x0800689b
 80067d4:	08006857 	.word	0x08006857
 80067d8:	0800689b 	.word	0x0800689b
 80067dc:	0800689b 	.word	0x0800689b
 80067e0:	0800689b 	.word	0x0800689b
 80067e4:	0800689b 	.word	0x0800689b
 80067e8:	0800689b 	.word	0x0800689b
 80067ec:	0800689b 	.word	0x0800689b
 80067f0:	0800689b 	.word	0x0800689b
 80067f4:	08006867 	.word	0x08006867
 80067f8:	0800689b 	.word	0x0800689b
 80067fc:	0800689b 	.word	0x0800689b
 8006800:	0800689b 	.word	0x0800689b
 8006804:	0800689b 	.word	0x0800689b
 8006808:	0800689b 	.word	0x0800689b
 800680c:	0800689b 	.word	0x0800689b
 8006810:	0800689b 	.word	0x0800689b
 8006814:	0800689b 	.word	0x0800689b
 8006818:	0800689b 	.word	0x0800689b
 800681c:	0800689b 	.word	0x0800689b
 8006820:	0800689b 	.word	0x0800689b
 8006824:	0800689b 	.word	0x0800689b
 8006828:	0800689b 	.word	0x0800689b
 800682c:	0800689b 	.word	0x0800689b
 8006830:	0800689b 	.word	0x0800689b
 8006834:	0800688d 	.word	0x0800688d
 8006838:	2b40      	cmp	r3, #64	@ 0x40
 800683a:	d02a      	beq.n	8006892 <UART_SetConfig+0x8aa>
 800683c:	e02d      	b.n	800689a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800683e:	f7fe fd29 	bl	8005294 <HAL_RCCEx_GetD3PCLK1Freq>
 8006842:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006844:	e02f      	b.n	80068a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe fd38 	bl	80052c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006854:	e027      	b.n	80068a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006856:	f107 0318 	add.w	r3, r7, #24
 800685a:	4618      	mov	r0, r3
 800685c:	f7fe fe84 	bl	8005568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006864:	e01f      	b.n	80068a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006866:	4b21      	ldr	r3, [pc, #132]	@ (80068ec <UART_SetConfig+0x904>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0320 	and.w	r3, r3, #32
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006872:	4b1e      	ldr	r3, [pc, #120]	@ (80068ec <UART_SetConfig+0x904>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	08db      	lsrs	r3, r3, #3
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	4a1d      	ldr	r2, [pc, #116]	@ (80068f4 <UART_SetConfig+0x90c>)
 800687e:	fa22 f303 	lsr.w	r3, r2, r3
 8006882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006884:	e00f      	b.n	80068a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006886:	4b1b      	ldr	r3, [pc, #108]	@ (80068f4 <UART_SetConfig+0x90c>)
 8006888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800688a:	e00c      	b.n	80068a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800688c:	4b1a      	ldr	r3, [pc, #104]	@ (80068f8 <UART_SetConfig+0x910>)
 800688e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006890:	e009      	b.n	80068a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006898:	e005      	b.n	80068a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80068a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 81ee 	beq.w	8006c8a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b2:	4a12      	ldr	r2, [pc, #72]	@ (80068fc <UART_SetConfig+0x914>)
 80068b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b8:	461a      	mov	r2, r3
 80068ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80068c0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	005b      	lsls	r3, r3, #1
 80068ca:	4413      	add	r3, r2
 80068cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d305      	bcc.n	80068de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068da:	429a      	cmp	r2, r3
 80068dc:	d910      	bls.n	8006900 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80068e4:	e1d1      	b.n	8006c8a <UART_SetConfig+0xca2>
 80068e6:	bf00      	nop
 80068e8:	40011c00 	.word	0x40011c00
 80068ec:	58024400 	.word	0x58024400
 80068f0:	58000c00 	.word	0x58000c00
 80068f4:	03d09000 	.word	0x03d09000
 80068f8:	003d0900 	.word	0x003d0900
 80068fc:	08029bc4 	.word	0x08029bc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006902:	2200      	movs	r2, #0
 8006904:	60bb      	str	r3, [r7, #8]
 8006906:	60fa      	str	r2, [r7, #12]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	4ac0      	ldr	r2, [pc, #768]	@ (8006c10 <UART_SetConfig+0xc28>)
 800690e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006912:	b29b      	uxth	r3, r3
 8006914:	2200      	movs	r2, #0
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	607a      	str	r2, [r7, #4]
 800691a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006922:	f7f9 fd5d 	bl	80003e0 <__aeabi_uldivmod>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4610      	mov	r0, r2
 800692c:	4619      	mov	r1, r3
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	020b      	lsls	r3, r1, #8
 8006938:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800693c:	0202      	lsls	r2, r0, #8
 800693e:	6979      	ldr	r1, [r7, #20]
 8006940:	6849      	ldr	r1, [r1, #4]
 8006942:	0849      	lsrs	r1, r1, #1
 8006944:	2000      	movs	r0, #0
 8006946:	460c      	mov	r4, r1
 8006948:	4605      	mov	r5, r0
 800694a:	eb12 0804 	adds.w	r8, r2, r4
 800694e:	eb43 0905 	adc.w	r9, r3, r5
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	469a      	mov	sl, r3
 800695a:	4693      	mov	fp, r2
 800695c:	4652      	mov	r2, sl
 800695e:	465b      	mov	r3, fp
 8006960:	4640      	mov	r0, r8
 8006962:	4649      	mov	r1, r9
 8006964:	f7f9 fd3c 	bl	80003e0 <__aeabi_uldivmod>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4613      	mov	r3, r2
 800696e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006976:	d308      	bcc.n	800698a <UART_SetConfig+0x9a2>
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800697e:	d204      	bcs.n	800698a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006986:	60da      	str	r2, [r3, #12]
 8006988:	e17f      	b.n	8006c8a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006990:	e17b      	b.n	8006c8a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800699a:	f040 80bd 	bne.w	8006b18 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800699e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	dc48      	bgt.n	8006a38 <UART_SetConfig+0xa50>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	db7b      	blt.n	8006aa2 <UART_SetConfig+0xaba>
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d879      	bhi.n	8006aa2 <UART_SetConfig+0xaba>
 80069ae:	a201      	add	r2, pc, #4	@ (adr r2, 80069b4 <UART_SetConfig+0x9cc>)
 80069b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b4:	08006a3f 	.word	0x08006a3f
 80069b8:	08006a47 	.word	0x08006a47
 80069bc:	08006aa3 	.word	0x08006aa3
 80069c0:	08006aa3 	.word	0x08006aa3
 80069c4:	08006a4f 	.word	0x08006a4f
 80069c8:	08006aa3 	.word	0x08006aa3
 80069cc:	08006aa3 	.word	0x08006aa3
 80069d0:	08006aa3 	.word	0x08006aa3
 80069d4:	08006a5f 	.word	0x08006a5f
 80069d8:	08006aa3 	.word	0x08006aa3
 80069dc:	08006aa3 	.word	0x08006aa3
 80069e0:	08006aa3 	.word	0x08006aa3
 80069e4:	08006aa3 	.word	0x08006aa3
 80069e8:	08006aa3 	.word	0x08006aa3
 80069ec:	08006aa3 	.word	0x08006aa3
 80069f0:	08006aa3 	.word	0x08006aa3
 80069f4:	08006a6f 	.word	0x08006a6f
 80069f8:	08006aa3 	.word	0x08006aa3
 80069fc:	08006aa3 	.word	0x08006aa3
 8006a00:	08006aa3 	.word	0x08006aa3
 8006a04:	08006aa3 	.word	0x08006aa3
 8006a08:	08006aa3 	.word	0x08006aa3
 8006a0c:	08006aa3 	.word	0x08006aa3
 8006a10:	08006aa3 	.word	0x08006aa3
 8006a14:	08006aa3 	.word	0x08006aa3
 8006a18:	08006aa3 	.word	0x08006aa3
 8006a1c:	08006aa3 	.word	0x08006aa3
 8006a20:	08006aa3 	.word	0x08006aa3
 8006a24:	08006aa3 	.word	0x08006aa3
 8006a28:	08006aa3 	.word	0x08006aa3
 8006a2c:	08006aa3 	.word	0x08006aa3
 8006a30:	08006aa3 	.word	0x08006aa3
 8006a34:	08006a95 	.word	0x08006a95
 8006a38:	2b40      	cmp	r3, #64	@ 0x40
 8006a3a:	d02e      	beq.n	8006a9a <UART_SetConfig+0xab2>
 8006a3c:	e031      	b.n	8006aa2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a3e:	f7fd fa5d 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 8006a42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a44:	e033      	b.n	8006aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a46:	f7fd fa6f 	bl	8003f28 <HAL_RCC_GetPCLK2Freq>
 8006a4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006a4c:	e02f      	b.n	8006aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fc34 	bl	80052c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a5c:	e027      	b.n	8006aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a5e:	f107 0318 	add.w	r3, r7, #24
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fe fd80 	bl	8005568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a6c:	e01f      	b.n	8006aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a6e:	4b69      	ldr	r3, [pc, #420]	@ (8006c14 <UART_SetConfig+0xc2c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006a7a:	4b66      	ldr	r3, [pc, #408]	@ (8006c14 <UART_SetConfig+0xc2c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	08db      	lsrs	r3, r3, #3
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	4a64      	ldr	r2, [pc, #400]	@ (8006c18 <UART_SetConfig+0xc30>)
 8006a86:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a8c:	e00f      	b.n	8006aae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006a8e:	4b62      	ldr	r3, [pc, #392]	@ (8006c18 <UART_SetConfig+0xc30>)
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a92:	e00c      	b.n	8006aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006a94:	4b61      	ldr	r3, [pc, #388]	@ (8006c1c <UART_SetConfig+0xc34>)
 8006a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006a98:	e009      	b.n	8006aae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006aa0:	e005      	b.n	8006aae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006aac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 80ea 	beq.w	8006c8a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aba:	4a55      	ldr	r2, [pc, #340]	@ (8006c10 <UART_SetConfig+0xc28>)
 8006abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ac8:	005a      	lsls	r2, r3, #1
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	085b      	lsrs	r3, r3, #1
 8006ad0:	441a      	add	r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ada:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ade:	2b0f      	cmp	r3, #15
 8006ae0:	d916      	bls.n	8006b10 <UART_SetConfig+0xb28>
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae8:	d212      	bcs.n	8006b10 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f023 030f 	bic.w	r3, r3, #15
 8006af2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af6:	085b      	lsrs	r3, r3, #1
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b02:	4313      	orrs	r3, r2
 8006b04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006b0c:	60da      	str	r2, [r3, #12]
 8006b0e:	e0bc      	b.n	8006c8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006b16:	e0b8      	b.n	8006c8a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	dc4b      	bgt.n	8006bb8 <UART_SetConfig+0xbd0>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f2c0 8087 	blt.w	8006c34 <UART_SetConfig+0xc4c>
 8006b26:	2b20      	cmp	r3, #32
 8006b28:	f200 8084 	bhi.w	8006c34 <UART_SetConfig+0xc4c>
 8006b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8006b34 <UART_SetConfig+0xb4c>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006bbf 	.word	0x08006bbf
 8006b38:	08006bc7 	.word	0x08006bc7
 8006b3c:	08006c35 	.word	0x08006c35
 8006b40:	08006c35 	.word	0x08006c35
 8006b44:	08006bcf 	.word	0x08006bcf
 8006b48:	08006c35 	.word	0x08006c35
 8006b4c:	08006c35 	.word	0x08006c35
 8006b50:	08006c35 	.word	0x08006c35
 8006b54:	08006bdf 	.word	0x08006bdf
 8006b58:	08006c35 	.word	0x08006c35
 8006b5c:	08006c35 	.word	0x08006c35
 8006b60:	08006c35 	.word	0x08006c35
 8006b64:	08006c35 	.word	0x08006c35
 8006b68:	08006c35 	.word	0x08006c35
 8006b6c:	08006c35 	.word	0x08006c35
 8006b70:	08006c35 	.word	0x08006c35
 8006b74:	08006bef 	.word	0x08006bef
 8006b78:	08006c35 	.word	0x08006c35
 8006b7c:	08006c35 	.word	0x08006c35
 8006b80:	08006c35 	.word	0x08006c35
 8006b84:	08006c35 	.word	0x08006c35
 8006b88:	08006c35 	.word	0x08006c35
 8006b8c:	08006c35 	.word	0x08006c35
 8006b90:	08006c35 	.word	0x08006c35
 8006b94:	08006c35 	.word	0x08006c35
 8006b98:	08006c35 	.word	0x08006c35
 8006b9c:	08006c35 	.word	0x08006c35
 8006ba0:	08006c35 	.word	0x08006c35
 8006ba4:	08006c35 	.word	0x08006c35
 8006ba8:	08006c35 	.word	0x08006c35
 8006bac:	08006c35 	.word	0x08006c35
 8006bb0:	08006c35 	.word	0x08006c35
 8006bb4:	08006c27 	.word	0x08006c27
 8006bb8:	2b40      	cmp	r3, #64	@ 0x40
 8006bba:	d037      	beq.n	8006c2c <UART_SetConfig+0xc44>
 8006bbc:	e03a      	b.n	8006c34 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bbe:	f7fd f99d 	bl	8003efc <HAL_RCC_GetPCLK1Freq>
 8006bc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bc4:	e03c      	b.n	8006c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bc6:	f7fd f9af 	bl	8003f28 <HAL_RCC_GetPCLK2Freq>
 8006bca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006bcc:	e038      	b.n	8006c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fb74 	bl	80052c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bdc:	e030      	b.n	8006c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bde:	f107 0318 	add.w	r3, r7, #24
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7fe fcc0 	bl	8005568 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006bec:	e028      	b.n	8006c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bee:	4b09      	ldr	r3, [pc, #36]	@ (8006c14 <UART_SetConfig+0xc2c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d012      	beq.n	8006c20 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bfa:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <UART_SetConfig+0xc2c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	08db      	lsrs	r3, r3, #3
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	4a04      	ldr	r2, [pc, #16]	@ (8006c18 <UART_SetConfig+0xc30>)
 8006c06:	fa22 f303 	lsr.w	r3, r2, r3
 8006c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c0c:	e018      	b.n	8006c40 <UART_SetConfig+0xc58>
 8006c0e:	bf00      	nop
 8006c10:	08029bc4 	.word	0x08029bc4
 8006c14:	58024400 	.word	0x58024400
 8006c18:	03d09000 	.word	0x03d09000
 8006c1c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006c20:	4b24      	ldr	r3, [pc, #144]	@ (8006cb4 <UART_SetConfig+0xccc>)
 8006c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c24:	e00c      	b.n	8006c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c26:	4b24      	ldr	r3, [pc, #144]	@ (8006cb8 <UART_SetConfig+0xcd0>)
 8006c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c2a:	e009      	b.n	8006c40 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c32:	e005      	b.n	8006c40 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006c3e:	bf00      	nop
    }

    if (pclk != 0U)
 8006c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d021      	beq.n	8006c8a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8006cbc <UART_SetConfig+0xcd4>)
 8006c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c54:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	085b      	lsrs	r3, r3, #1
 8006c5e:	441a      	add	r2, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c68:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c6c:	2b0f      	cmp	r3, #15
 8006c6e:	d909      	bls.n	8006c84 <UART_SetConfig+0xc9c>
 8006c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c76:	d205      	bcs.n	8006c84 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7a:	b29a      	uxth	r2, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	60da      	str	r2, [r3, #12]
 8006c82:	e002      	b.n	8006c8a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006ca6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3748      	adds	r7, #72	@ 0x48
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb4:	03d09000 	.word	0x03d09000
 8006cb8:	003d0900 	.word	0x003d0900
 8006cbc:	08029bc4 	.word	0x08029bc4

08006cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ccc:	f003 0308 	and.w	r3, r3, #8
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d00a      	beq.n	8006cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00a      	beq.n	8006d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00a      	beq.n	8006d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	430a      	orrs	r2, r1
 8006d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d32:	f003 0304 	and.w	r3, r3, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d54:	f003 0310 	and.w	r3, r3, #16
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	430a      	orrs	r2, r1
 8006d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00a      	beq.n	8006d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d01a      	beq.n	8006dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dbe:	d10a      	bne.n	8006dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	605a      	str	r2, [r3, #4]
  }
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b098      	sub	sp, #96	@ 0x60
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e14:	f7fa fd0a 	bl	800182c <HAL_GetTick>
 8006e18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d12f      	bne.n	8006e88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e30:	2200      	movs	r2, #0
 8006e32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f88e 	bl	8006f58 <UART_WaitOnFlagUntilTimeout>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d022      	beq.n	8006e88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	e853 3f00 	ldrex	r3, [r3]
 8006e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e62:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e68:	e841 2300 	strex	r3, r2, [r1]
 8006e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1e6      	bne.n	8006e42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e063      	b.n	8006f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d149      	bne.n	8006f2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e96:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 f857 	bl	8006f58 <UART_WaitOnFlagUntilTimeout>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d03c      	beq.n	8006f2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ece:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ed4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ed6:	e841 2300 	strex	r3, r2, [r1]
 8006eda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1e6      	bne.n	8006eb0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3308      	adds	r3, #8
 8006f00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f02:	61fa      	str	r2, [r7, #28]
 8006f04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	69b9      	ldr	r1, [r7, #24]
 8006f08:	69fa      	ldr	r2, [r7, #28]
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e5      	bne.n	8006ee2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e012      	b.n	8006f50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3758      	adds	r7, #88	@ 0x58
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	603b      	str	r3, [r7, #0]
 8006f64:	4613      	mov	r3, r2
 8006f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f68:	e04f      	b.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f70:	d04b      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f72:	f7fa fc5b 	bl	800182c <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d302      	bcc.n	8006f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d101      	bne.n	8006f8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e04e      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d037      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b80      	cmp	r3, #128	@ 0x80
 8006f9e:	d034      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b40      	cmp	r3, #64	@ 0x40
 8006fa4:	d031      	beq.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	f003 0308 	and.w	r3, r3, #8
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d110      	bne.n	8006fd6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2208      	movs	r2, #8
 8006fba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 f839 	bl	8007034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2208      	movs	r2, #8
 8006fc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e029      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69db      	ldr	r3, [r3, #28]
 8006fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fe4:	d111      	bne.n	800700a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f81f 	bl	8007034 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e00f      	b.n	800702a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	69da      	ldr	r2, [r3, #28]
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	4013      	ands	r3, r2
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	429a      	cmp	r2, r3
 8007018:	bf0c      	ite	eq
 800701a:	2301      	moveq	r3, #1
 800701c:	2300      	movne	r3, #0
 800701e:	b2db      	uxtb	r3, r3
 8007020:	461a      	mov	r2, r3
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	429a      	cmp	r2, r3
 8007026:	d0a0      	beq.n	8006f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
	...

08007034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007034:	b480      	push	{r7}
 8007036:	b095      	sub	sp, #84	@ 0x54
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800704a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007050:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800705a:	643b      	str	r3, [r7, #64]	@ 0x40
 800705c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007060:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e6      	bne.n	800703c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	3308      	adds	r3, #8
 8007074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007076:	6a3b      	ldr	r3, [r7, #32]
 8007078:	e853 3f00 	ldrex	r3, [r3]
 800707c:	61fb      	str	r3, [r7, #28]
   return(result);
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	4b1e      	ldr	r3, [pc, #120]	@ (80070fc <UART_EndRxTransfer+0xc8>)
 8007082:	4013      	ands	r3, r2
 8007084:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3308      	adds	r3, #8
 800708c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800708e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007090:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007096:	e841 2300 	strex	r3, r2, [r1]
 800709a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800709c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d1e5      	bne.n	800706e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d118      	bne.n	80070dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f023 0310 	bic.w	r3, r3, #16
 80070be:	647b      	str	r3, [r7, #68]	@ 0x44
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070c8:	61bb      	str	r3, [r7, #24]
 80070ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6979      	ldr	r1, [r7, #20]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	613b      	str	r3, [r7, #16]
   return(result);
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80070f0:	bf00      	nop
 80070f2:	3754      	adds	r7, #84	@ 0x54
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	effffffe 	.word	0xeffffffe

08007100 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800710e:	2b01      	cmp	r3, #1
 8007110:	d101      	bne.n	8007116 <HAL_UARTEx_DisableFifoMode+0x16>
 8007112:	2302      	movs	r3, #2
 8007114:	e027      	b.n	8007166 <HAL_UARTEx_DisableFifoMode+0x66>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2224      	movs	r2, #36	@ 0x24
 8007122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0201 	bic.w	r2, r2, #1
 800713c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007144:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007186:	2302      	movs	r3, #2
 8007188:	e02d      	b.n	80071e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2224      	movs	r2, #36	@ 0x24
 8007196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0201 	bic.w	r2, r2, #1
 80071b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	430a      	orrs	r2, r1
 80071c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 f850 	bl	800726c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2220      	movs	r2, #32
 80071d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007202:	2302      	movs	r3, #2
 8007204:	e02d      	b.n	8007262 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2224      	movs	r2, #36	@ 0x24
 8007212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0201 	bic.w	r2, r2, #1
 800722c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	430a      	orrs	r2, r1
 8007240:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f812 	bl	800726c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
	...

0800726c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007278:	2b00      	cmp	r3, #0
 800727a:	d108      	bne.n	800728e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800728c:	e031      	b.n	80072f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800728e:	2310      	movs	r3, #16
 8007290:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007292:	2310      	movs	r3, #16
 8007294:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	0e5b      	lsrs	r3, r3, #25
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	0f5b      	lsrs	r3, r3, #29
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	7b3a      	ldrb	r2, [r7, #12]
 80072ba:	4911      	ldr	r1, [pc, #68]	@ (8007300 <UARTEx_SetNbDataToProcess+0x94>)
 80072bc:	5c8a      	ldrb	r2, [r1, r2]
 80072be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072c2:	7b3a      	ldrb	r2, [r7, #12]
 80072c4:	490f      	ldr	r1, [pc, #60]	@ (8007304 <UARTEx_SetNbDataToProcess+0x98>)
 80072c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
 80072d6:	7b7a      	ldrb	r2, [r7, #13]
 80072d8:	4909      	ldr	r1, [pc, #36]	@ (8007300 <UARTEx_SetNbDataToProcess+0x94>)
 80072da:	5c8a      	ldrb	r2, [r1, r2]
 80072dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80072e0:	7b7a      	ldrb	r2, [r7, #13]
 80072e2:	4908      	ldr	r1, [pc, #32]	@ (8007304 <UARTEx_SetNbDataToProcess+0x98>)
 80072e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80072ea:	b29a      	uxth	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80072f2:	bf00      	nop
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	08029bdc 	.word	0x08029bdc
 8007304:	08029be4 	.word	0x08029be4

08007308 <mg_base64_encode_single>:
#ifdef MG_ENABLE_LINES
#line 1 "src/base64.c"
#endif


static int mg_base64_encode_single(int c) {
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b19      	cmp	r3, #25
 8007314:	dc02      	bgt.n	800731c <mg_base64_encode_single+0x14>
    return c + 'A';
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	3341      	adds	r3, #65	@ 0x41
 800731a:	e011      	b.n	8007340 <mg_base64_encode_single+0x38>
  } else if (c < 52) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b33      	cmp	r3, #51	@ 0x33
 8007320:	dc02      	bgt.n	8007328 <mg_base64_encode_single+0x20>
    return c - 26 + 'a';
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3347      	adds	r3, #71	@ 0x47
 8007326:	e00b      	b.n	8007340 <mg_base64_encode_single+0x38>
  } else if (c < 62) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b3d      	cmp	r3, #61	@ 0x3d
 800732c:	dc02      	bgt.n	8007334 <mg_base64_encode_single+0x2c>
    return c - 52 + '0';
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3b04      	subs	r3, #4
 8007332:	e005      	b.n	8007340 <mg_base64_encode_single+0x38>
  } else {
    return c == 62 ? '+' : '/';
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b3e      	cmp	r3, #62	@ 0x3e
 8007338:	d101      	bne.n	800733e <mg_base64_encode_single+0x36>
 800733a:	232b      	movs	r3, #43	@ 0x2b
 800733c:	e000      	b.n	8007340 <mg_base64_encode_single+0x38>
 800733e:	232f      	movs	r3, #47	@ 0x2f
  }
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <mg_base64_decode_single>:

static int mg_base64_decode_single(int c) {
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b40      	cmp	r3, #64	@ 0x40
 8007358:	dd05      	ble.n	8007366 <mg_base64_decode_single+0x1a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b5a      	cmp	r3, #90	@ 0x5a
 800735e:	dc02      	bgt.n	8007366 <mg_base64_decode_single+0x1a>
    return c - 'A';
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3b41      	subs	r3, #65	@ 0x41
 8007364:	e022      	b.n	80073ac <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b60      	cmp	r3, #96	@ 0x60
 800736a:	dd05      	ble.n	8007378 <mg_base64_decode_single+0x2c>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2b7a      	cmp	r3, #122	@ 0x7a
 8007370:	dc02      	bgt.n	8007378 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3b47      	subs	r3, #71	@ 0x47
 8007376:	e019      	b.n	80073ac <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b2f      	cmp	r3, #47	@ 0x2f
 800737c:	dd05      	ble.n	800738a <mg_base64_decode_single+0x3e>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b39      	cmp	r3, #57	@ 0x39
 8007382:	dc02      	bgt.n	800738a <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	e010      	b.n	80073ac <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b2b      	cmp	r3, #43	@ 0x2b
 800738e:	d101      	bne.n	8007394 <mg_base64_decode_single+0x48>
    return 62;
 8007390:	233e      	movs	r3, #62	@ 0x3e
 8007392:	e00b      	b.n	80073ac <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2b2f      	cmp	r3, #47	@ 0x2f
 8007398:	d101      	bne.n	800739e <mg_base64_decode_single+0x52>
    return 63;
 800739a:	233f      	movs	r3, #63	@ 0x3f
 800739c:	e006      	b.n	80073ac <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b3d      	cmp	r3, #61	@ 0x3d
 80073a2:	d101      	bne.n	80073a8 <mg_base64_decode_single+0x5c>
    return 64;
 80073a4:	2340      	movs	r3, #64	@ 0x40
 80073a6:	e001      	b.n	80073ac <mg_base64_decode_single+0x60>
  } else {
    return -1;
 80073a8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <mg_base64_update>:

size_t mg_base64_update(unsigned char ch, char *to, size_t n) {
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
 80073c4:	73fb      	strb	r3, [r7, #15]
  unsigned long rem = (n & 3) % 3;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f003 0203 	and.w	r2, r3, #3
 80073cc:	4b38      	ldr	r3, [pc, #224]	@ (80074b0 <mg_base64_update+0xf8>)
 80073ce:	fba3 1302 	umull	r1, r3, r3, r2
 80073d2:	0859      	lsrs	r1, r3, #1
 80073d4:	460b      	mov	r3, r1
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	440b      	add	r3, r1
 80073da:	1ad3      	subs	r3, r2, r3
 80073dc:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d119      	bne.n	8007418 <mg_base64_update+0x60>
    to[n] = (char) mg_base64_encode_single(ch >> 2);
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
 80073e6:	089b      	lsrs	r3, r3, #2
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7ff ff8c 	bl	8007308 <mg_base64_encode_single>
 80073f0:	4601      	mov	r1, r0
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4413      	add	r3, r2
 80073f8:	b2ca      	uxtb	r2, r1
 80073fa:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	011b      	lsls	r3, r3, #4
 8007400:	b2da      	uxtb	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3301      	adds	r3, #1
 8007406:	607b      	str	r3, [r7, #4]
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	440b      	add	r3, r1
 800740e:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	e046      	b.n	80074a6 <mg_base64_update+0xee>
  } else if (rem == 1) {
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d11f      	bne.n	800745e <mg_base64_update+0xa6>
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 4));
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	781a      	ldrb	r2, [r3, #0]
 8007426:	7bfb      	ldrb	r3, [r7, #15]
 8007428:	091b      	lsrs	r3, r3, #4
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4313      	orrs	r3, r2
 800742e:	b2db      	uxtb	r3, r3
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff ff69 	bl	8007308 <mg_base64_encode_single>
 8007436:	4601      	mov	r1, r0
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4413      	add	r3, r2
 800743e:	b2ca      	uxtb	r2, r1
 8007440:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	b2da      	uxtb	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	3301      	adds	r3, #1
 800744c:	607b      	str	r3, [r7, #4]
 800744e:	68b9      	ldr	r1, [r7, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	440b      	add	r3, r1
 8007454:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	e023      	b.n	80074a6 <mg_base64_update+0xee>
  } else {
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 6));
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4413      	add	r3, r2
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	099b      	lsrs	r3, r3, #6
 800746a:	b2db      	uxtb	r3, r3
 800746c:	4313      	orrs	r3, r2
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4618      	mov	r0, r3
 8007472:	f7ff ff49 	bl	8007308 <mg_base64_encode_single>
 8007476:	4601      	mov	r1, r0
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4413      	add	r3, r2
 800747e:	b2ca      	uxtb	r2, r1
 8007480:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_base64_encode_single(ch & 63);
 8007482:	7bfb      	ldrb	r3, [r7, #15]
 8007484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff ff3d 	bl	8007308 <mg_base64_encode_single>
 800748e:	4601      	mov	r1, r0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3301      	adds	r3, #1
 8007494:	607b      	str	r3, [r7, #4]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4413      	add	r3, r2
 800749c:	b2ca      	uxtb	r2, r1
 800749e:	701a      	strb	r2, [r3, #0]
    n++;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3301      	adds	r3, #1
 80074a4:	607b      	str	r3, [r7, #4]
  }
  return n;
 80074a6:	687b      	ldr	r3, [r7, #4]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	aaaaaaab 	.word	0xaaaaaaab

080074b4 <mg_base64_final>:

size_t mg_base64_final(char *to, size_t n) {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  size_t saved = n;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	f003 0303 	and.w	r3, r3, #3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <mg_base64_final+0x24>
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	6879      	ldr	r1, [r7, #4]
 80074d0:	2000      	movs	r0, #0
 80074d2:	f7ff ff71 	bl	80073b8 <mg_base64_update>
 80074d6:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d10a      	bne.n	80074f8 <mg_base64_final+0x44>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 80074e8:	e006      	b.n	80074f8 <mg_base64_final+0x44>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	603a      	str	r2, [r7, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	4413      	add	r3, r2
 80074f4:	223d      	movs	r2, #61	@ 0x3d
 80074f6:	701a      	strb	r2, [r3, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d1f3      	bne.n	80074ea <mg_base64_final+0x36>
  to[n] = '\0';
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	4413      	add	r3, r2
 8007508:	2200      	movs	r2, #0
 800750a:	701a      	strb	r2, [r3, #0]
  return n;
 800750c:	683b      	ldr	r3, [r7, #0]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <mg_base64_encode>:

size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]
  size_t i, len = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	613b      	str	r3, [r7, #16]
  if (dl > 0) to[0] = '\0';
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <mg_base64_encode+0x1e>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	701a      	strb	r2, [r3, #0]
  if (dl < ((n / 3) + (n % 3 ? 1 : 0)) * 4 + 1) return 0;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	4a1b      	ldr	r2, [pc, #108]	@ (80075a8 <mg_base64_encode+0x90>)
 800753a:	fba2 2303 	umull	r2, r3, r2, r3
 800753e:	0858      	lsrs	r0, r3, #1
 8007540:	68b9      	ldr	r1, [r7, #8]
 8007542:	4b19      	ldr	r3, [pc, #100]	@ (80075a8 <mg_base64_encode+0x90>)
 8007544:	fba3 2301 	umull	r2, r3, r3, r1
 8007548:	085a      	lsrs	r2, r3, #1
 800754a:	4613      	mov	r3, r2
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	4413      	add	r3, r2
 8007550:	1aca      	subs	r2, r1, r3
 8007552:	2a00      	cmp	r2, #0
 8007554:	d001      	beq.n	800755a <mg_base64_encode+0x42>
 8007556:	2301      	movs	r3, #1
 8007558:	e000      	b.n	800755c <mg_base64_encode+0x44>
 800755a:	2300      	movs	r3, #0
 800755c:	4403      	add	r3, r0
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	3301      	adds	r3, #1
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	429a      	cmp	r2, r3
 8007566:	d201      	bcs.n	800756c <mg_base64_encode+0x54>
 8007568:	2300      	movs	r3, #0
 800756a:	e019      	b.n	80075a0 <mg_base64_encode+0x88>
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 800756c:	2300      	movs	r3, #0
 800756e:	617b      	str	r3, [r7, #20]
 8007570:	e00c      	b.n	800758c <mg_base64_encode+0x74>
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	4413      	add	r3, r2
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	6879      	ldr	r1, [r7, #4]
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff ff1a 	bl	80073b8 <mg_base64_update>
 8007584:	6138      	str	r0, [r7, #16]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	3301      	adds	r3, #1
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	429a      	cmp	r2, r3
 8007592:	d3ee      	bcc.n	8007572 <mg_base64_encode+0x5a>
  len = mg_base64_final(to, len);
 8007594:	6939      	ldr	r1, [r7, #16]
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7ff ff8c 	bl	80074b4 <mg_base64_final>
 800759c:	6138      	str	r0, [r7, #16]
  return len;
 800759e:	693b      	ldr	r3, [r7, #16]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3718      	adds	r7, #24
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	aaaaaaab 	.word	0xaaaaaaab

080075ac <mg_base64_decode>:

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b08a      	sub	sp, #40	@ 0x28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d003      	beq.n	80075c8 <mg_base64_decode+0x1c>
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	4413      	add	r3, r2
 80075c6:	e000      	b.n	80075ca <mg_base64_decode+0x1e>
 80075c8:	2300      	movs	r3, #0
 80075ca:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	089a      	lsrs	r2, r3, #2
 80075d4:	4613      	mov	r3, r2
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	4413      	add	r3, r2
 80075da:	3301      	adds	r3, #1
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d378      	bcc.n	80076d4 <mg_base64_decode+0x128>
  while (src != NULL && src + 3 < end) {
 80075e2:	e068      	b.n	80076b6 <mg_base64_decode+0x10a>
    int a = mg_base64_decode_single(src[0]),
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff feaf 	bl	800734c <mg_base64_decode_single>
 80075ee:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3301      	adds	r3, #1
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7ff fea8 	bl	800734c <mg_base64_decode_single>
 80075fc:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	3302      	adds	r3, #2
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff fea1 	bl	800734c <mg_base64_decode_single>
 800760a:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3303      	adds	r3, #3
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff fe9a 	bl	800734c <mg_base64_decode_single>
 8007618:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b40      	cmp	r3, #64	@ 0x40
 800761e:	d05b      	beq.n	80076d8 <mg_base64_decode+0x12c>
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	db58      	blt.n	80076d8 <mg_base64_decode+0x12c>
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b40      	cmp	r3, #64	@ 0x40
 800762a:	d055      	beq.n	80076d8 <mg_base64_decode+0x12c>
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	2b00      	cmp	r3, #0
 8007630:	db52      	blt.n	80076d8 <mg_base64_decode+0x12c>
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2b00      	cmp	r3, #0
 8007636:	db4f      	blt.n	80076d8 <mg_base64_decode+0x12c>
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	db4c      	blt.n	80076d8 <mg_base64_decode+0x12c>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	b25b      	sxtb	r3, r3
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	b25a      	sxtb	r2, r3
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	111b      	asrs	r3, r3, #4
 800764a:	b25b      	sxtb	r3, r3
 800764c:	4313      	orrs	r3, r2
 800764e:	b259      	sxtb	r1, r3
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	1c5a      	adds	r2, r3, #1
 8007654:	627a      	str	r2, [r7, #36]	@ 0x24
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4413      	add	r3, r2
 800765a:	b2ca      	uxtb	r2, r1
 800765c:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3302      	adds	r3, #2
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b3d      	cmp	r3, #61	@ 0x3d
 8007666:	d023      	beq.n	80076b0 <mg_base64_decode+0x104>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	b25b      	sxtb	r3, r3
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	b25a      	sxtb	r2, r3
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	109b      	asrs	r3, r3, #2
 8007674:	b25b      	sxtb	r3, r3
 8007676:	4313      	orrs	r3, r2
 8007678:	b259      	sxtb	r1, r3
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	4413      	add	r3, r2
 8007684:	b2ca      	uxtb	r2, r1
 8007686:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3303      	adds	r3, #3
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	2b3d      	cmp	r3, #61	@ 0x3d
 8007690:	d00e      	beq.n	80076b0 <mg_base64_decode+0x104>
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	b25b      	sxtb	r3, r3
 8007696:	019b      	lsls	r3, r3, #6
 8007698:	b25a      	sxtb	r2, r3
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	b25b      	sxtb	r3, r3
 800769e:	4313      	orrs	r3, r2
 80076a0:	b259      	sxtb	r1, r3
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	4413      	add	r3, r2
 80076ac:	b2ca      	uxtb	r2, r1
 80076ae:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	3304      	adds	r3, #4
 80076b4:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d004      	beq.n	80076c6 <mg_base64_decode+0x11a>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3303      	adds	r3, #3
 80076c0:	6a3a      	ldr	r2, [r7, #32]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d88e      	bhi.n	80075e4 <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ca:	4413      	add	r3, r2
 80076cc:	2200      	movs	r2, #0
 80076ce:	701a      	strb	r2, [r3, #0]
  return len;
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	e009      	b.n	80076e8 <mg_base64_decode+0x13c>
  if (dl < n / 4 * 3 + 1) goto fail;
 80076d4:	bf00      	nop
 80076d6:	e000      	b.n	80076da <mg_base64_decode+0x12e>
      goto fail;
 80076d8:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d002      	beq.n	80076e6 <mg_base64_decode+0x13a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
  return 0;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3728      	adds	r7, #40	@ 0x28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	e002      	b.n	8007706 <mg_dns_free+0x16>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	429a      	cmp	r2, r3
 800770e:	d1f7      	bne.n	8007700 <mg_dns_free+0x10>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	601a      	str	r2, [r3, #0]
  free(d);
 8007718:	6838      	ldr	r0, [r7, #0]
 800771a:	f01d fc81 	bl	8025020 <free>
}
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 8007726:	b580      	push	{r7, lr}
 8007728:	b086      	sub	sp, #24
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	332c      	adds	r3, #44	@ 0x2c
 8007734:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	617b      	str	r3, [r7, #20]
 800773c:	e00d      	b.n	800775a <mg_resolve_cancel+0x34>
    tmp = d->next;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	429a      	cmp	r2, r3
 800774c:	d103      	bne.n	8007756 <mg_resolve_cancel+0x30>
 800774e:	6979      	ldr	r1, [r7, #20]
 8007750:	6938      	ldr	r0, [r7, #16]
 8007752:	f7ff ffcd 	bl	80076f0 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1ee      	bne.n	800773e <mg_resolve_cancel+0x18>
  }
}
 8007760:	bf00      	nop
 8007762:	bf00      	nop
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 800776a:	b580      	push	{r7, lr}
 800776c:	b08c      	sub	sp, #48	@ 0x30
 800776e:	af04      	add	r7, sp, #16
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
 8007776:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 800777c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800777e:	2b00      	cmp	r3, #0
 8007780:	d005      	beq.n	800778e <mg_dns_parse_name_depth+0x24>
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <mg_dns_parse_name_depth+0x24>
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	2b05      	cmp	r3, #5
 8007792:	f340 8084 	ble.w	800789e <mg_dns_parse_name_depth+0x134>
 8007796:	2300      	movs	r3, #0
 8007798:	e093      	b.n	80078c2 <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d103      	bne.n	80077b6 <mg_dns_parse_name_depth+0x4c>
      i++;
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	3301      	adds	r3, #1
 80077b2:	61fb      	str	r3, [r7, #28]
      break;
 80077b4:	e07b      	b.n	80078ae <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d02f      	beq.n	8007820 <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	440a      	add	r2, r1
 80077ce:	3201      	adds	r2, #1
 80077d0:	68f9      	ldr	r1, [r7, #12]
 80077d2:	440a      	add	r2, r1
 80077d4:	7812      	ldrb	r2, [r2, #0]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	3301      	adds	r3, #1
 80077de:	68ba      	ldr	r2, [r7, #8]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d919      	bls.n	8007818 <mg_dns_parse_name_depth+0xae>
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	4413      	add	r3, r2
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d111      	bne.n	8007818 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 80077f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f6:	3301      	adds	r3, #1
 80077f8:	9302      	str	r3, [sp, #8]
 80077fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	68b9      	ldr	r1, [r7, #8]
 8007808:	68f8      	ldr	r0, [r7, #12]
 800780a:	f7ff ffae 	bl	800776a <mg_dns_parse_name_depth>
 800780e:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <mg_dns_parse_name_depth+0xae>
        return 0;
 8007814:	2300      	movs	r3, #0
 8007816:	e054      	b.n	80078c2 <mg_dns_parse_name_depth+0x158>
      i += 2;
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	3302      	adds	r3, #2
 800781c:	61fb      	str	r3, [r7, #28]
      break;
 800781e:	e046      	b.n	80078ae <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	441a      	add	r2, r3
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	4413      	add	r3, r2
 800782a:	3301      	adds	r3, #1
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	429a      	cmp	r2, r3
 8007830:	d801      	bhi.n	8007836 <mg_dns_parse_name_depth+0xcc>
 8007832:	2300      	movs	r3, #0
 8007834:	e045      	b.n	80078c2 <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8007836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00b      	beq.n	8007854 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 800783c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800783e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007840:	429a      	cmp	r2, r3
 8007842:	d204      	bcs.n	800784e <mg_dns_parse_name_depth+0xe4>
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007848:	4413      	add	r3, r2
 800784a:	222e      	movs	r2, #46	@ 0x2e
 800784c:	701a      	strb	r2, [r3, #0]
      j++;
 800784e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007850:	3301      	adds	r3, #1
 8007852:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8007854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	4413      	add	r3, r2
 800785a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800785c:	429a      	cmp	r2, r3
 800785e:	d90c      	bls.n	800787a <mg_dns_parse_name_depth+0x110>
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007864:	18d0      	adds	r0, r2, r3
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	3301      	adds	r3, #1
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	4413      	add	r3, r2
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	4619      	mov	r1, r3
 8007876:	f01e f8be 	bl	80259f6 <memcpy>
    j += n;
 800787a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	4413      	add	r3, r2
 8007880:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i += n + 1;
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	4413      	add	r3, r2
 8007888:	3301      	adds	r3, #1
 800788a:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 800788c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	429a      	cmp	r2, r3
 8007892:	d204      	bcs.n	800789e <mg_dns_parse_name_depth+0x134>
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007898:	4413      	add	r3, r2
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	4413      	add	r3, r2
 80078a4:	3301      	adds	r3, #1
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	429a      	cmp	r2, r3
 80078aa:	f63f af76 	bhi.w	800779a <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 80078ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d005      	beq.n	80078c0 <mg_dns_parse_name_depth+0x156>
 80078b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b6:	3b01      	subs	r3, #1
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	4413      	add	r3, r2
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
  return i;
 80078c0:	69fb      	ldr	r3, [r7, #28]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b088      	sub	sp, #32
 80078ce:	af04      	add	r7, sp, #16
 80078d0:	60f8      	str	r0, [r7, #12]
 80078d2:	60b9      	str	r1, [r7, #8]
 80078d4:	607a      	str	r2, [r7, #4]
 80078d6:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 80078d8:	2300      	movs	r3, #0
 80078da:	9302      	str	r3, [sp, #8]
 80078dc:	2300      	movs	r3, #0
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff ff3d 	bl	800776a <mg_dns_parse_name_depth>
 80078f0:	4603      	mov	r3, r0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b088      	sub	sp, #32
 80078fe:	af02      	add	r7, sp, #8
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	607a      	str	r2, [r7, #4]
 8007906:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	4413      	add	r3, r2
 8007916:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8007918:	2208      	movs	r2, #8
 800791a:	2100      	movs	r1, #0
 800791c:	6a38      	ldr	r0, [r7, #32]
 800791e:	f01d ff35 	bl	802578c <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	2b0b      	cmp	r3, #11
 8007926:	d801      	bhi.n	800792c <mg_dns_parse_rr+0x32>
 8007928:	2300      	movs	r3, #0
 800792a:	e077      	b.n	8007a1c <mg_dns_parse_rr+0x122>
  if (len > 512) return 0;  //  Too large, we don't expect that
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007932:	d901      	bls.n	8007938 <mg_dns_parse_rr+0x3e>
 8007934:	2300      	movs	r3, #0
 8007936:	e071      	b.n	8007a1c <mg_dns_parse_rr+0x122>
  if (s >= e) return 0;     //  Overflow
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	429a      	cmp	r2, r3
 800793e:	d301      	bcc.n	8007944 <mg_dns_parse_rr+0x4a>
 8007940:	2300      	movs	r3, #0
 8007942:	e06b      	b.n	8007a1c <mg_dns_parse_rr+0x122>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8007944:	2300      	movs	r3, #0
 8007946:	9300      	str	r3, [sp, #0]
 8007948:	2300      	movs	r3, #0
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	68b9      	ldr	r1, [r7, #8]
 800794e:	68f8      	ldr	r0, [r7, #12]
 8007950:	f7ff ffbb 	bl	80078ca <mg_dns_parse_name>
 8007954:	4603      	mov	r3, r0
 8007956:	b29a      	uxth	r2, r3
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	801a      	strh	r2, [r3, #0]
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <mg_dns_parse_rr+0x6e>
    return 0;
 8007964:	2300      	movs	r3, #0
 8007966:	e059      	b.n	8007a1c <mg_dns_parse_rr+0x122>
  s += rr->nlen + 4;
 8007968:	6a3b      	ldr	r3, [r7, #32]
 800796a:	881b      	ldrh	r3, [r3, #0]
 800796c:	3304      	adds	r3, #4
 800796e:	697a      	ldr	r2, [r7, #20]
 8007970:	4413      	add	r3, r2
 8007972:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	429a      	cmp	r2, r3
 800797a:	d901      	bls.n	8007980 <mg_dns_parse_rr+0x86>
 800797c:	2300      	movs	r3, #0
 800797e:	e04d      	b.n	8007a1c <mg_dns_parse_rr+0x122>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	3b04      	subs	r3, #4
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b21b      	sxth	r3, r3
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	b21a      	sxth	r2, r3
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	3b03      	subs	r3, #3
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	b21b      	sxth	r3, r3
 8007994:	4313      	orrs	r3, r2
 8007996:	b21b      	sxth	r3, r3
 8007998:	b29a      	uxth	r2, r3
 800799a:	6a3b      	ldr	r3, [r7, #32]
 800799c:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	3b02      	subs	r3, #2
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	b21b      	sxth	r3, r3
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	b21a      	sxth	r2, r3
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	b21b      	sxth	r3, r3
 80079b2:	4313      	orrs	r3, r2
 80079b4:	b21b      	sxth	r3, r3
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	6a3b      	ldr	r3, [r7, #32]
 80079ba:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d003      	beq.n	80079ca <mg_dns_parse_rr+0xd0>
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	3304      	adds	r3, #4
 80079c8:	e028      	b.n	8007a1c <mg_dns_parse_rr+0x122>

  s += 6;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	3306      	adds	r3, #6
 80079ce:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d901      	bls.n	80079dc <mg_dns_parse_rr+0xe2>
 80079d8:	2300      	movs	r3, #0
 80079da:	e01f      	b.n	8007a1c <mg_dns_parse_rr+0x122>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	3b02      	subs	r3, #2
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	b21b      	sxth	r3, r3
 80079e4:	021b      	lsls	r3, r3, #8
 80079e6:	b21a      	sxth	r2, r3
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	3b01      	subs	r3, #1
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b21b      	sxth	r3, r3
 80079f0:	4313      	orrs	r3, r2
 80079f2:	b21b      	sxth	r3, r3
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	88db      	ldrh	r3, [r3, #6]
 80079fe:	461a      	mov	r2, r3
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	4413      	add	r3, r2
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d201      	bcs.n	8007a0e <mg_dns_parse_rr+0x114>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	e006      	b.n	8007a1c <mg_dns_parse_rr+0x122>
  return (size_t) (rr->nlen + rr->alen + 10);
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	88db      	ldrh	r3, [r3, #6]
 8007a18:	4413      	add	r3, r2
 8007a1a:	330a      	adds	r3, #10
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b08e      	sub	sp, #56	@ 0x38
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	623b      	str	r3, [r7, #32]
  struct mg_dns_rr rr;
  size_t i, n, num_answers, ofs = sizeof(*h);
 8007a34:	230c      	movs	r3, #12
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
  bool is_response;
  memset(dm, 0, sizeof(*dm));
 8007a38:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f01d fea4 	bl	802578c <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b0b      	cmp	r3, #11
 8007a48:	d801      	bhi.n	8007a4e <mg_dns_parse+0x2a>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e0c8      	b.n	8007be0 <mg_dns_parse+0x1bc>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	889b      	ldrh	r3, [r3, #4]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f019 fc14 	bl	8021280 <mg_ntohs>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d901      	bls.n	8007a62 <mg_dns_parse+0x3e>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	e0be      	b.n	8007be0 <mg_dns_parse+0x1bc>
  num_answers = mg_ntohs(h->num_answers);
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	88db      	ldrh	r3, [r3, #6]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f019 fc0a 	bl	8021280 <mg_ntohs>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (num_answers > 10) {
 8007a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a72:	2b0a      	cmp	r3, #10
 8007a74:	d90f      	bls.n	8007a96 <mg_dns_parse+0x72>
    MG_DEBUG(("Got %u answers, ignoring beyond 10th one", num_answers));
 8007a76:	4b5c      	ldr	r3, [pc, #368]	@ (8007be8 <mg_dns_parse+0x1c4>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	dd09      	ble.n	8007a92 <mg_dns_parse+0x6e>
 8007a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8007bec <mg_dns_parse+0x1c8>)
 8007a80:	22e7      	movs	r2, #231	@ 0xe7
 8007a82:	495b      	ldr	r1, [pc, #364]	@ (8007bf0 <mg_dns_parse+0x1cc>)
 8007a84:	2003      	movs	r0, #3
 8007a86:	f006 f961 	bl	800dd4c <mg_log_prefix>
 8007a8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a8c:	4859      	ldr	r0, [pc, #356]	@ (8007bf4 <mg_dns_parse+0x1d0>)
 8007a8e:	f006 f9ad 	bl	800ddec <mg_log>
    num_answers = 10;  // Sanity cap
 8007a92:	230a      	movs	r3, #10
 8007a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  dm->txnid = mg_ntohs(h->txnid);
 8007a96:	6a3b      	ldr	r3, [r7, #32]
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f019 fbf0 	bl	8021280 <mg_ntohs>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	801a      	strh	r2, [r3, #0]
  is_response = mg_ntohs(h->flags) & 0x8000;
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	885b      	ldrh	r3, [r3, #2]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f019 fbe7 	bl	8021280 <mg_ntohs>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	bf14      	ite	ne
 8007abc:	2301      	movne	r3, #1
 8007abe:	2300      	moveq	r3, #0
 8007ac0:	77fb      	strb	r3, [r7, #31]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ac6:	e01f      	b.n	8007b08 <mg_dns_parse+0xe4>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8007ac8:	f107 0310 	add.w	r3, r7, #16
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	2301      	movs	r3, #1
 8007ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff ff10 	bl	80078fa <mg_dns_parse_rr>
 8007ada:	61b8      	str	r0, [r7, #24]
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d101      	bne.n	8007ae6 <mg_dns_parse+0xc2>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e07c      	b.n	8007be0 <mg_dns_parse+0x1bc>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3318      	adds	r3, #24
 8007aea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007aee:	9200      	str	r2, [sp, #0]
 8007af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007af2:	68b9      	ldr	r1, [r7, #8]
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f7ff fee8 	bl	80078ca <mg_dns_parse_name>
    ofs += n;
 8007afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	4413      	add	r3, r2
 8007b00:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8007b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b04:	3301      	adds	r3, #1
 8007b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	889b      	ldrh	r3, [r3, #4]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f019 fbb7 	bl	8021280 <mg_ntohs>
 8007b12:	4603      	mov	r3, r0
 8007b14:	461a      	mov	r2, r3
 8007b16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d3d5      	bcc.n	8007ac8 <mg_dns_parse+0xa4>
  }

  if (!is_response) {
 8007b1c:	7ffb      	ldrb	r3, [r7, #31]
 8007b1e:	f083 0301 	eor.w	r3, r3, #1
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <mg_dns_parse+0x108>
    // For queries, there is no need to parse the answers. In this way,
    // we also ensure the domain name (dm->name) is parsed from
    // the question field.
    return true;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e059      	b.n	8007be0 <mg_dns_parse+0x1bc>
  }

  for (i = 0; i < num_answers; i++) {
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b30:	e051      	b.n	8007bd6 <mg_dns_parse+0x1b2>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8007b32:	f107 0310 	add.w	r3, r7, #16
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f7ff fedb 	bl	80078fa <mg_dns_parse_rr>
 8007b44:	61b8      	str	r0, [r7, #24]
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <mg_dns_parse+0x12c>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	e047      	b.n	8007be0 <mg_dns_parse+0x1bc>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3318      	adds	r3, #24
 8007b54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b58:	9200      	str	r2, [sp, #0]
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f7ff feb3 	bl	80078ca <mg_dns_parse_name>
    ofs += n;
 8007b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	4413      	add	r3, r2
 8007b6a:	627b      	str	r3, [r7, #36]	@ 0x24

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8007b6c:	8afb      	ldrh	r3, [r7, #22]
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d114      	bne.n	8007b9c <mg_dns_parse+0x178>
 8007b72:	8a7b      	ldrh	r3, [r7, #18]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d111      	bne.n	8007b9c <mg_dns_parse+0x178>
 8007b78:	8abb      	ldrh	r3, [r7, #20]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d10e      	bne.n	8007b9c <mg_dns_parse+0x178>
      dm->addr.is_ip6 = false;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b8a:	3a04      	subs	r2, #4
 8007b8c:	68f9      	ldr	r1, [r7, #12]
 8007b8e:	440a      	add	r2, r1
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8007b9a:	e020      	b.n	8007bde <mg_dns_parse+0x1ba>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8007b9c:	8afb      	ldrh	r3, [r7, #22]
 8007b9e:	2b10      	cmp	r3, #16
 8007ba0:	d116      	bne.n	8007bd0 <mg_dns_parse+0x1ac>
 8007ba2:	8a7b      	ldrh	r3, [r7, #18]
 8007ba4:	2b1c      	cmp	r3, #28
 8007ba6:	d113      	bne.n	8007bd0 <mg_dns_parse+0x1ac>
 8007ba8:	8abb      	ldrh	r3, [r7, #20]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d110      	bne.n	8007bd0 <mg_dns_parse+0x1ac>
      dm->addr.is_ip6 = true;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	75da      	strb	r2, [r3, #23]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	1d18      	adds	r0, r3, #4
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bba:	3b10      	subs	r3, #16
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	2210      	movs	r2, #16
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	f01d ff17 	bl	80259f6 <memcpy>
      dm->resolved = true;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8007bce:	e006      	b.n	8007bde <mg_dns_parse+0x1ba>
  for (i = 0; i < num_answers; i++) {
 8007bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d3a9      	bcc.n	8007b32 <mg_dns_parse+0x10e>
    }
  }
  return true;
 8007bde:	2301      	movs	r3, #1
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3730      	adds	r7, #48	@ 0x30
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	24000258 	.word	0x24000258
 8007bec:	0802a050 	.word	0x0802a050
 8007bf0:	080264c4 	.word	0x080264c4
 8007bf4:	080264dc 	.word	0x080264dc

08007bf8 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data) {
 8007bf8:	b5b0      	push	{r4, r5, r7, lr}
 8007bfa:	b0d2      	sub	sp, #328	@ 0x148
 8007bfc:	af02      	add	r7, sp, #8
 8007bfe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c02:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007c06:	6018      	str	r0, [r3, #0]
 8007c08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c0c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007c10:	6019      	str	r1, [r3, #0]
 8007c12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007c1a:	601a      	str	r2, [r3, #0]
  struct dns_data *d, *tmp;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8007c1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c20:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	332c      	adds	r3, #44	@ 0x2c
 8007c2a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  if (ev == MG_EV_POLL) {
 8007c2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d12d      	bne.n	8007c98 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8007c3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4a:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    for (d = *head; d != NULL; d = tmp) {
 8007c4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007c58:	e019      	b.n	8007c8e <dns_cb+0x96>
      tmp = d->next;
 8007c5a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8007c64:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007c68:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007c6c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8007c70:	4290      	cmp	r0, r2
 8007c72:	eb71 0303 	sbcs.w	r3, r1, r3
 8007c76:	d206      	bcs.n	8007c86 <dns_cb+0x8e>
 8007c78:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	4992      	ldr	r1, [pc, #584]	@ (8007ec8 <dns_cb+0x2d0>)
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fb37 	bl	80082f4 <mg_error>
    for (d = *head; d != NULL; d = tmp) {
 8007c86:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007c8a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007c8e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e1      	bne.n	8007c5a <dns_cb+0x62>
      tmp = d->next;
      mg_error(d->c, "DNS error");
      mg_dns_free(head, d);
    }
  }
}
 8007c96:	e112      	b.n	8007ebe <dns_cb+0x2c6>
  } else if (ev == MG_EV_READ) {
 8007c98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007c9c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b07      	cmp	r3, #7
 8007ca4:	f040 80e4 	bne.w	8007e70 <dns_cb+0x278>
    int resolved = 0;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8007cae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007cb2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007cba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007cbe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc6:	f107 0210 	add.w	r2, r7, #16
 8007cca:	4619      	mov	r1, r3
 8007ccc:	f7ff feaa 	bl	8007a24 <mg_dns_parse>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	f083 0301 	eor.w	r3, r3, #1
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d01e      	beq.n	8007d1a <dns_cb+0x122>
      MG_ERROR(("Unexpected DNS response:"));
 8007cdc:	4b7b      	ldr	r3, [pc, #492]	@ (8007ecc <dns_cb+0x2d4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dd09      	ble.n	8007cf8 <dns_cb+0x100>
 8007ce4:	4b7a      	ldr	r3, [pc, #488]	@ (8007ed0 <dns_cb+0x2d8>)
 8007ce6:	f240 121f 	movw	r2, #287	@ 0x11f
 8007cea:	497a      	ldr	r1, [pc, #488]	@ (8007ed4 <dns_cb+0x2dc>)
 8007cec:	2001      	movs	r0, #1
 8007cee:	f006 f82d 	bl	800dd4c <mg_log_prefix>
 8007cf2:	4879      	ldr	r0, [pc, #484]	@ (8007ed8 <dns_cb+0x2e0>)
 8007cf4:	f006 f87a 	bl	800ddec <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8007cf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007cfc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d10:	4619      	mov	r1, r3
 8007d12:	4610      	mov	r0, r2
 8007d14:	f006 f8a0 	bl	800de58 <mg_hexdump>
 8007d18:	e090      	b.n	8007e3c <dns_cb+0x244>
      for (d = *head; d != NULL; d = tmp) {
 8007d1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007d24:	e085      	b.n	8007e32 <dns_cb+0x23a>
        tmp = d->next;
 8007d26:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        if (dm.txnid != d->txnid) continue;
 8007d30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d34:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007d38:	881a      	ldrh	r2, [r3, #0]
 8007d3a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007d3e:	8a1b      	ldrh	r3, [r3, #16]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d171      	bne.n	8007e28 <dns_cb+0x230>
        if (d->c->is_resolving) {
 8007d44:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d04a      	beq.n	8007dee <dns_cb+0x1f6>
          if (dm.resolved) {
 8007d58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d5c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007d60:	789b      	ldrb	r3, [r3, #2]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d038      	beq.n	8007dd8 <dns_cb+0x1e0>
            dm.addr.port = d->c->rem.port;  // Save port
 8007d66:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007d6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007d76:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8007d78:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007d7c:	685a      	ldr	r2, [r3, #4]
 8007d7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007d82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007d86:	f102 041c 	add.w	r4, r2, #28
 8007d8a:	1d1d      	adds	r5, r3, #4
 8007d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8007d94:	4b4d      	ldr	r3, [pc, #308]	@ (8007ecc <dns_cb+0x2d4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	dd16      	ble.n	8007dca <dns_cb+0x1d2>
 8007d9c:	4b4c      	ldr	r3, [pc, #304]	@ (8007ed0 <dns_cb+0x2d8>)
 8007d9e:	f240 122b 	movw	r2, #299	@ 0x12b
 8007da2:	494c      	ldr	r1, [pc, #304]	@ (8007ed4 <dns_cb+0x2dc>)
 8007da4:	2003      	movs	r0, #3
 8007da6:	f005 ffd1 	bl	800dd4c <mg_log_prefix>
 8007daa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007db2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	331c      	adds	r3, #28
 8007dba:	f107 0210 	add.w	r2, r7, #16
 8007dbe:	3218      	adds	r2, #24
 8007dc0:	9300      	str	r3, [sp, #0]
 8007dc2:	4b46      	ldr	r3, [pc, #280]	@ (8007edc <dns_cb+0x2e4>)
 8007dc4:	4846      	ldr	r0, [pc, #280]	@ (8007ee0 <dns_cb+0x2e8>)
 8007dc6:	f006 f811 	bl	800ddec <mg_log>
            mg_connect_resolved(d->c);
 8007dca:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f009 ff17 	bl	8011c04 <mg_connect_resolved>
 8007dd6:	e01d      	b.n	8007e14 <dns_cb+0x21c>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8007dd8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007ddc:	6858      	ldr	r0, [r3, #4]
 8007dde:	f107 0310 	add.w	r3, r7, #16
 8007de2:	3318      	adds	r3, #24
 8007de4:	461a      	mov	r2, r3
 8007de6:	493f      	ldr	r1, [pc, #252]	@ (8007ee4 <dns_cb+0x2ec>)
 8007de8:	f000 fa84 	bl	80082f4 <mg_error>
 8007dec:	e012      	b.n	8007e14 <dns_cb+0x21c>
          MG_ERROR(("%lu already resolved", d->c->id));
 8007dee:	4b37      	ldr	r3, [pc, #220]	@ (8007ecc <dns_cb+0x2d4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	dd0e      	ble.n	8007e14 <dns_cb+0x21c>
 8007df6:	4b36      	ldr	r3, [pc, #216]	@ (8007ed0 <dns_cb+0x2d8>)
 8007df8:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8007dfc:	4935      	ldr	r1, [pc, #212]	@ (8007ed4 <dns_cb+0x2dc>)
 8007dfe:	2001      	movs	r0, #1
 8007e00:	f005 ffa4 	bl	800dd4c <mg_log_prefix>
 8007e04:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4836      	ldr	r0, [pc, #216]	@ (8007ee8 <dns_cb+0x2f0>)
 8007e10:	f005 ffec 	bl	800ddec <mg_log>
        mg_dns_free(head, d);
 8007e14:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8007e18:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007e1c:	f7ff fc68 	bl	80076f0 <mg_dns_free>
        resolved = 1;
 8007e20:	2301      	movs	r3, #1
 8007e22:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8007e26:	e000      	b.n	8007e2a <dns_cb+0x232>
        if (dm.txnid != d->txnid) continue;
 8007e28:	bf00      	nop
      for (d = *head; d != NULL; d = tmp) {
 8007e2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007e2e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007e32:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f47f af75 	bne.w	8007d26 <dns_cb+0x12e>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8007e3c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10d      	bne.n	8007e60 <dns_cb+0x268>
 8007e44:	4b21      	ldr	r3, [pc, #132]	@ (8007ecc <dns_cb+0x2d4>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dd09      	ble.n	8007e60 <dns_cb+0x268>
 8007e4c:	4b20      	ldr	r3, [pc, #128]	@ (8007ed0 <dns_cb+0x2d8>)
 8007e4e:	f44f 729f 	mov.w	r2, #318	@ 0x13e
 8007e52:	4920      	ldr	r1, [pc, #128]	@ (8007ed4 <dns_cb+0x2dc>)
 8007e54:	2001      	movs	r0, #1
 8007e56:	f005 ff79 	bl	800dd4c <mg_log_prefix>
 8007e5a:	4824      	ldr	r0, [pc, #144]	@ (8007eec <dns_cb+0x2f4>)
 8007e5c:	f005 ffc6 	bl	800ddec <mg_log>
    c->recv.len = 0;
 8007e60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007e64:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007e6e:	e026      	b.n	8007ebe <dns_cb+0x2c6>
  } else if (ev == MG_EV_CLOSE) {
 8007e70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007e74:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d11f      	bne.n	8007ebe <dns_cb+0x2c6>
    for (d = *head; d != NULL; d = tmp) {
 8007e7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007e88:	e015      	b.n	8007eb6 <dns_cb+0x2be>
      tmp = d->next;
 8007e8a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      mg_error(d->c, "DNS error");
 8007e94:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	4915      	ldr	r1, [pc, #84]	@ (8007ef0 <dns_cb+0x2f8>)
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fa29 	bl	80082f4 <mg_error>
      mg_dns_free(head, d);
 8007ea2:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8007ea6:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8007eaa:	f7ff fc21 	bl	80076f0 <mg_dns_free>
    for (d = *head; d != NULL; d = tmp) {
 8007eae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007eb2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8007eb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e5      	bne.n	8007e8a <dns_cb+0x292>
}
 8007ebe:	bf00      	nop
 8007ec0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ec8:	08026508 	.word	0x08026508
 8007ecc:	24000258 	.word	0x24000258
 8007ed0:	0802a060 	.word	0x0802a060
 8007ed4:	080264c4 	.word	0x080264c4
 8007ed8:	08026514 	.word	0x08026514
 8007edc:	080127a7 	.word	0x080127a7
 8007ee0:	08026530 	.word	0x08026530
 8007ee4:	08026540 	.word	0x08026540
 8007ee8:	08026558 	.word	0x08026558
 8007eec:	08026570 	.word	0x08026570
 8007ef0:	08026580 	.word	0x08026580

08007ef4 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8007ef4:	b590      	push	{r4, r7, lr}
 8007ef6:	b0cb      	sub	sp, #300	@ 0x12c
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8007efe:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8007f02:	6020      	str	r0, [r4, #0]
 8007f04:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8007f08:	f5a0 7090 	sub.w	r0, r0, #288	@ 0x120
 8007f0c:	6001      	str	r1, [r0, #0]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f14:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8007f18:	801a      	strh	r2, [r3, #0]
 8007f1a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f1e:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 8007f22:	460a      	mov	r2, r1
 8007f24:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8007f26:	f107 0314 	add.w	r3, r7, #20
 8007f2a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f01d fc2b 	bl	802578c <memset>
  pkt.header.txnid = mg_htons(txnid);
 8007f36:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f3a:	f5a3 7391 	sub.w	r3, r3, #290	@ 0x122
 8007f3e:	881b      	ldrh	r3, [r3, #0]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f019 f99d 	bl	8021280 <mg_ntohs>
 8007f46:	4603      	mov	r3, r0
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007f52:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8007f54:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007f58:	f019 f992 	bl	8021280 <mg_ntohs>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f64:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007f68:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8007f6a:	2001      	movs	r0, #1
 8007f6c:	f019 f988 	bl	8021280 <mg_ntohs>
 8007f70:	4603      	mov	r3, r0
 8007f72:	461a      	mov	r2, r3
 8007f74:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8007f7c:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8007f84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007f88:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8007f8c:	e054      	b.n	8008038 <mg_dns_send+0x144>
    if (name->buf[i] == '.' || i >= name->len) {
 8007f8e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007f92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007f9e:	4413      	add	r3, r2
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007fa4:	d009      	beq.n	8007fba <mg_dns_send+0xc6>
 8007fa6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007faa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d32f      	bcc.n	800801a <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8007fba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	b2d9      	uxtb	r1, r3
 8007fca:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007fce:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 8007fd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007fd6:	4413      	add	r3, r2
 8007fd8:	330c      	adds	r3, #12
 8007fda:	460a      	mov	r2, r1
 8007fdc:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->buf + n, i - n);
 8007fde:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f107 0214 	add.w	r2, r7, #20
 8007fe8:	3308      	adds	r3, #8
 8007fea:	4413      	add	r3, r2
 8007fec:	1d18      	adds	r0, r3, #4
 8007fee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8007ff2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007ffe:	18d1      	adds	r1, r2, r3
 8008000:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8008004:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	461a      	mov	r2, r3
 800800c:	f01d fcf3 	bl	80259f6 <memcpy>
      n = i + 1;
 8008010:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008014:	3301      	adds	r3, #1
 8008016:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    }
    if (i >= name->len) break;
 800801a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800801e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800802a:	429a      	cmp	r2, r3
 800802c:	d209      	bcs.n	8008042 <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 800802e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8008032:	3301      	adds	r3, #1
 8008034:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8008038:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800803c:	2bfa      	cmp	r3, #250	@ 0xfa
 800803e:	d9a6      	bls.n	8007f8e <mg_dns_send+0x9a>
 8008040:	e000      	b.n	8008044 <mg_dns_send+0x150>
    if (i >= name->len) break;
 8008042:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8008044:	f107 0214 	add.w	r2, r7, #20
 8008048:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800804c:	3308      	adds	r3, #8
 800804e:	4413      	add	r3, r2
 8008050:	3304      	adds	r3, #4
 8008052:	2205      	movs	r2, #5
 8008054:	4916      	ldr	r1, [pc, #88]	@ (80080b0 <mg_dns_send+0x1bc>)
 8008056:	4618      	mov	r0, r3
 8008058:	f01d fccd 	bl	80259f6 <memcpy>
  n += 5;
 800805c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008060:	3305      	adds	r3, #5
 8008062:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8008066:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800806a:	f2a3 1323 	subw	r3, r3, #291	@ 0x123
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d009      	beq.n	8008088 <mg_dns_send+0x194>
 8008074:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008078:	3b03      	subs	r3, #3
 800807a:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 800807e:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8008082:	4413      	add	r3, r2
 8008084:	221c      	movs	r2, #28
 8008086:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8008088:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800808c:	f103 020c 	add.w	r2, r3, #12
 8008090:	f107 0114 	add.w	r1, r7, #20
 8008094:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8008098:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	f00a f8eb 	bl	8012278 <mg_send>
 80080a2:	4603      	mov	r3, r0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd90      	pop	{r4, r7, pc}
 80080ae:	bf00      	nop
 80080b0:	0802658c 	.word	0x0802658c

080080b4 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 80080b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80080b8:	b088      	sub	sp, #32
 80080ba:	af02      	add	r7, sp, #8
 80080bc:	60f8      	str	r0, [r7, #12]
 80080be:	60b9      	str	r1, [r7, #8]
 80080c0:	607a      	str	r2, [r7, #4]
 80080c2:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d104      	bne.n	80080da <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 80080d0:	494d      	ldr	r1, [pc, #308]	@ (8008208 <mg_sendnsreq+0x154>)
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 f90e 	bl	80082f4 <mg_error>
 80080d8:	e017      	b.n	800810a <mg_sendnsreq+0x56>
  } else if (dnsc->c == NULL) {
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d113      	bne.n	800810a <mg_sendnsreq+0x56>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6858      	ldr	r0, [r3, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6819      	ldr	r1, [r3, #0]
 80080ea:	2300      	movs	r3, #0
 80080ec:	2200      	movs	r2, #0
 80080ee:	f006 faab 	bl	800e648 <mg_connect>
 80080f2:	4602      	mov	r2, r0
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d004      	beq.n	800810a <mg_sendnsreq+0x56>
      dnsc->c->pfn = dns_cb;
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	4a41      	ldr	r2, [pc, #260]	@ (800820c <mg_sendnsreq+0x158>)
 8008106:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d104      	bne.n	800811c <mg_sendnsreq+0x68>
    mg_error(c, "resolver");
 8008112:	493f      	ldr	r1, [pc, #252]	@ (8008210 <mg_sendnsreq+0x15c>)
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f8ed 	bl	80082f4 <mg_error>
                name->buf, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 800811a:	e070      	b.n	80081fe <mg_sendnsreq+0x14a>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 800811c:	2118      	movs	r1, #24
 800811e:	2001      	movs	r0, #1
 8008120:	f01c ff5a 	bl	8024fd8 <calloc>
 8008124:	4603      	mov	r3, r0
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d104      	bne.n	8008138 <mg_sendnsreq+0x84>
    mg_error(c, "resolve OOM");
 800812e:	4939      	ldr	r1, [pc, #228]	@ (8008214 <mg_sendnsreq+0x160>)
 8008130:	68f8      	ldr	r0, [r7, #12]
 8008132:	f000 f8df 	bl	80082f4 <mg_error>
}
 8008136:	e062      	b.n	80081fe <mg_sendnsreq+0x14a>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800813e:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d004      	beq.n	8008150 <mg_sendnsreq+0x9c>
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	8a1b      	ldrh	r3, [r3, #16]
 800814a:	3301      	adds	r3, #1
 800814c:	b29a      	uxth	r2, r3
 800814e:	e000      	b.n	8008152 <mg_sendnsreq+0x9e>
 8008150:	2201      	movs	r2, #1
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	62da      	str	r2, [r3, #44]	@ 0x2c
    d->expire = mg_millis() + (uint64_t) ms;
 8008168:	f7f8 fafe 	bl	8000768 <mg_millis>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	6879      	ldr	r1, [r7, #4]
 8008172:	17c8      	asrs	r0, r1, #31
 8008174:	460c      	mov	r4, r1
 8008176:	4605      	mov	r5, r0
 8008178:	eb12 0804 	adds.w	r8, r2, r4
 800817c:	eb43 0905 	adc.w	r9, r3, r5
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8008192:	f043 0308 	orr.w	r3, r3, #8
 8008196:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 800819a:	4b1f      	ldr	r3, [pc, #124]	@ (8008218 <mg_sendnsreq+0x164>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b03      	cmp	r3, #3
 80081a0:	dd18      	ble.n	80081d4 <mg_sendnsreq+0x120>
 80081a2:	4b1e      	ldr	r3, [pc, #120]	@ (800821c <mg_sendnsreq+0x168>)
 80081a4:	f44f 72be 	mov.w	r2, #380	@ 0x17c
 80081a8:	491d      	ldr	r1, [pc, #116]	@ (8008220 <mg_sendnsreq+0x16c>)
 80081aa:	2004      	movs	r0, #4
 80081ac:	f005 fdce 	bl	800dd4c <mg_log_prefix>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	461c      	mov	r4, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	6818      	ldr	r0, [r3, #0]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	8a12      	ldrh	r2, [r2, #16]
 80081c6:	9201      	str	r2, [sp, #4]
 80081c8:	9300      	str	r3, [sp, #0]
 80081ca:	4603      	mov	r3, r0
 80081cc:	4622      	mov	r2, r4
 80081ce:	4815      	ldr	r0, [pc, #84]	@ (8008224 <mg_sendnsreq+0x170>)
 80081d0:	f005 fe0c 	bl	800ddec <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	6858      	ldr	r0, [r3, #4]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	8a1a      	ldrh	r2, [r3, #16]
 80081dc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	f7ff fe87 	bl	8007ef4 <mg_dns_send>
 80081e6:	4603      	mov	r3, r0
 80081e8:	f083 0301 	eor.w	r3, r3, #1
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d005      	beq.n	80081fe <mg_sendnsreq+0x14a>
      mg_error(dnsc->c, "DNS send");
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	490c      	ldr	r1, [pc, #48]	@ (8008228 <mg_sendnsreq+0x174>)
 80081f8:	4618      	mov	r0, r3
 80081fa:	f000 f87b 	bl	80082f4 <mg_error>
}
 80081fe:	bf00      	nop
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008208:	08026594 	.word	0x08026594
 800820c:	08007bf9 	.word	0x08007bf9
 8008210:	080265c0 	.word	0x080265c0
 8008214:	080265cc 	.word	0x080265cc
 8008218:	24000258 	.word	0x24000258
 800821c:	0802a068 	.word	0x0802a068
 8008220:	080264c4 	.word	0x080264c4
 8008224:	080265d8 	.word	0x080265d8
 8008228:	080265fc 	.word	0x080265fc

0800822c <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af02      	add	r7, sp, #8
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8008236:	f107 030c 	add.w	r3, r7, #12
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	4618      	mov	r0, r3
 800823e:	f018 fea8 	bl	8020f92 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8008242:	6838      	ldr	r0, [r7, #0]
 8008244:	f018 fed8 	bl	8020ff8 <mg_url_port>
 8008248:	4603      	mov	r3, r0
 800824a:	4618      	mov	r0, r3
 800824c:	f019 f818 	bl	8021280 <mg_ntohs>
 8008250:	4603      	mov	r3, r0
 8008252:	461a      	mov	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	859a      	strh	r2, [r3, #44]	@ 0x2c
  if (mg_aton(host, &c->rem)) {
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	331c      	adds	r3, #28
 800825c:	461a      	mov	r2, r3
 800825e:	f107 030c 	add.w	r3, r7, #12
 8008262:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008266:	f006 f920 	bl	800e4aa <mg_aton>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f009 fcc7 	bl	8011c04 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8008276:	e019      	b.n	80082ac <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	7e1b      	ldrb	r3, [r3, #24]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d003      	beq.n	800828a <mg_resolve+0x5e>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	330c      	adds	r3, #12
 8008288:	e002      	b.n	8008290 <mg_resolve+0x64>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	695a      	ldr	r2, [r3, #20]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	7e1b      	ldrb	r3, [r3, #24]
 800829e:	f107 010c 	add.w	r1, r7, #12
 80082a2:	9300      	str	r3, [sp, #0]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7ff ff04 	bl	80080b4 <mg_sendnsreq>
}
 80082ac:	bf00      	nop
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <mg_call+0x24>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	68b9      	ldr	r1, [r7, #8]
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <mg_call+0x38>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	68b9      	ldr	r1, [r7, #8]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	4798      	blx	r3
}
 80082ec:	bf00      	nop
 80082ee:	3710      	adds	r7, #16
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 80082f4:	b40e      	push	{r1, r2, r3}
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b095      	sub	sp, #84	@ 0x54
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 80082fe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008302:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8008304:	f107 030c 	add.w	r3, r7, #12
 8008308:	f107 0010 	add.w	r0, r7, #16
 800830c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800830e:	2140      	movs	r1, #64	@ 0x40
 8008310:	f00a f92e 	bl	8012570 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8008314:	4b14      	ldr	r3, [pc, #80]	@ (8008368 <mg_error+0x74>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	dd0f      	ble.n	800833c <mg_error+0x48>
 800831c:	4b13      	ldr	r3, [pc, #76]	@ (800836c <mg_error+0x78>)
 800831e:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8008322:	4913      	ldr	r1, [pc, #76]	@ (8008370 <mg_error+0x7c>)
 8008324:	2001      	movs	r0, #1
 8008326:	f005 fd11 	bl	800dd4c <mg_log_prefix>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008332:	f107 0310 	add.w	r3, r7, #16
 8008336:	480f      	ldr	r0, [pc, #60]	@ (8008374 <mg_error+0x80>)
 8008338:	f005 fd58 	bl	800ddec <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8008342:	f043 0320 	orr.w	r3, r3, #32
 8008346:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 800834a:	f107 0310 	add.w	r3, r7, #16
 800834e:	461a      	mov	r2, r3
 8008350:	2100      	movs	r1, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f7ff ffae 	bl	80082b4 <mg_call>
}
 8008358:	bf00      	nop
 800835a:	3754      	adds	r7, #84	@ 0x54
 800835c:	46bd      	mov	sp, r7
 800835e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008362:	b003      	add	sp, #12
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	24000258 	.word	0x24000258
 800836c:	0802a078 	.word	0x0802a078
 8008370:	080264c4 	.word	0x080264c4
 8008374:	08026674 	.word	0x08026674

08008378 <mg_ota_flash_begin>:

static char *s_addr;      // Current address to write to
static size_t s_size;     // Firmware size to flash. In-progress indicator
static uint32_t s_crc32;  // Firmware checksum

bool mg_ota_flash_begin(size_t new_firmware_size, struct mg_flash *flash) {
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  bool ok = false;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]
  if (s_size) {
 8008386:	4b30      	ldr	r3, [pc, #192]	@ (8008448 <mg_ota_flash_begin+0xd0>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00e      	beq.n	80083ac <mg_ota_flash_begin+0x34>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
 800838e:	4b2f      	ldr	r3, [pc, #188]	@ (800844c <mg_ota_flash_begin+0xd4>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	dd52      	ble.n	800843c <mg_ota_flash_begin+0xc4>
 8008396:	4b2e      	ldr	r3, [pc, #184]	@ (8008450 <mg_ota_flash_begin+0xd8>)
 8008398:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800839c:	492d      	ldr	r1, [pc, #180]	@ (8008454 <mg_ota_flash_begin+0xdc>)
 800839e:	2001      	movs	r0, #1
 80083a0:	f005 fcd4 	bl	800dd4c <mg_log_prefix>
 80083a4:	482c      	ldr	r0, [pc, #176]	@ (8008458 <mg_ota_flash_begin+0xe0>)
 80083a6:	f005 fd21 	bl	800ddec <mg_log>
 80083aa:	e047      	b.n	800843c <mg_ota_flash_begin+0xc4>
  } else {
    size_t half = flash->size / 2;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	085b      	lsrs	r3, r3, #1
 80083b2:	60bb      	str	r3, [r7, #8]
    s_crc32 = 0;
 80083b4:	4b29      	ldr	r3, [pc, #164]	@ (800845c <mg_ota_flash_begin+0xe4>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
    s_addr = (char *) flash->start + half;
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	4413      	add	r3, r2
 80083c2:	4a27      	ldr	r2, [pc, #156]	@ (8008460 <mg_ota_flash_begin+0xe8>)
 80083c4:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("FW %lu bytes, max %lu", new_firmware_size, half));
 80083c6:	4b21      	ldr	r3, [pc, #132]	@ (800844c <mg_ota_flash_begin+0xd4>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	dd0b      	ble.n	80083e6 <mg_ota_flash_begin+0x6e>
 80083ce:	4b20      	ldr	r3, [pc, #128]	@ (8008450 <mg_ota_flash_begin+0xd8>)
 80083d0:	f240 2211 	movw	r2, #529	@ 0x211
 80083d4:	491f      	ldr	r1, [pc, #124]	@ (8008454 <mg_ota_flash_begin+0xdc>)
 80083d6:	2003      	movs	r0, #3
 80083d8:	f005 fcb8 	bl	800dd4c <mg_log_prefix>
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	4820      	ldr	r0, [pc, #128]	@ (8008464 <mg_ota_flash_begin+0xec>)
 80083e2:	f005 fd03 	bl	800ddec <mg_log>
    if (new_firmware_size < half) {
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d216      	bcs.n	800841c <mg_ota_flash_begin+0xa4>
      ok = true;
 80083ee:	2301      	movs	r3, #1
 80083f0:	73fb      	strb	r3, [r7, #15]
      s_size = new_firmware_size;
 80083f2:	4a15      	ldr	r2, [pc, #84]	@ (8008448 <mg_ota_flash_begin+0xd0>)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
 80083f8:	4b14      	ldr	r3, [pc, #80]	@ (800844c <mg_ota_flash_begin+0xd4>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	dd1d      	ble.n	800843c <mg_ota_flash_begin+0xc4>
 8008400:	4b13      	ldr	r3, [pc, #76]	@ (8008450 <mg_ota_flash_begin+0xd8>)
 8008402:	f240 2215 	movw	r2, #533	@ 0x215
 8008406:	4913      	ldr	r1, [pc, #76]	@ (8008454 <mg_ota_flash_begin+0xdc>)
 8008408:	2002      	movs	r0, #2
 800840a:	f005 fc9f 	bl	800dd4c <mg_log_prefix>
 800840e:	4b0e      	ldr	r3, [pc, #56]	@ (8008448 <mg_ota_flash_begin+0xd0>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4619      	mov	r1, r3
 8008414:	4814      	ldr	r0, [pc, #80]	@ (8008468 <mg_ota_flash_begin+0xf0>)
 8008416:	f005 fce9 	bl	800ddec <mg_log>
 800841a:	e00f      	b.n	800843c <mg_ota_flash_begin+0xc4>
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, half));
 800841c:	4b0b      	ldr	r3, [pc, #44]	@ (800844c <mg_ota_flash_begin+0xd4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	dd0b      	ble.n	800843c <mg_ota_flash_begin+0xc4>
 8008424:	4b0a      	ldr	r3, [pc, #40]	@ (8008450 <mg_ota_flash_begin+0xd8>)
 8008426:	f240 2217 	movw	r2, #535	@ 0x217
 800842a:	490a      	ldr	r1, [pc, #40]	@ (8008454 <mg_ota_flash_begin+0xdc>)
 800842c:	2001      	movs	r0, #1
 800842e:	f005 fc8d 	bl	800dd4c <mg_log_prefix>
 8008432:	68ba      	ldr	r2, [r7, #8]
 8008434:	6879      	ldr	r1, [r7, #4]
 8008436:	480d      	ldr	r0, [pc, #52]	@ (800846c <mg_ota_flash_begin+0xf4>)
 8008438:	f005 fcd8 	bl	800ddec <mg_log>
    }
  }
  return ok;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	240020e4 	.word	0x240020e4
 800844c:	24000258 	.word	0x24000258
 8008450:	0802a084 	.word	0x0802a084
 8008454:	080264c4 	.word	0x080264c4
 8008458:	08026680 	.word	0x08026680
 800845c:	240020e8 	.word	0x240020e8
 8008460:	240020e0 	.word	0x240020e0
 8008464:	080266ac 	.word	0x080266ac
 8008468:	080266c4 	.word	0x080266c4
 800846c:	080266e4 	.word	0x080266e4

08008470 <mg_ota_flash_write>:

bool mg_ota_flash_write(const void *buf, size_t len, struct mg_flash *flash) {
 8008470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008474:	b08c      	sub	sp, #48	@ 0x30
 8008476:	af02      	add	r7, sp, #8
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	60b9      	str	r1, [r7, #8]
 800847c:	607a      	str	r2, [r7, #4]
  bool ok = false;
 800847e:	2300      	movs	r3, #0
 8008480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (s_size == 0) {
 8008484:	4b54      	ldr	r3, [pc, #336]	@ (80085d8 <mg_ota_flash_write+0x168>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d10f      	bne.n	80084ac <mg_ota_flash_write+0x3c>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
 800848c:	4b53      	ldr	r3, [pc, #332]	@ (80085dc <mg_ota_flash_write+0x16c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	f340 8099 	ble.w	80085c8 <mg_ota_flash_write+0x158>
 8008496:	4b52      	ldr	r3, [pc, #328]	@ (80085e0 <mg_ota_flash_write+0x170>)
 8008498:	f44f 7208 	mov.w	r2, #544	@ 0x220
 800849c:	4951      	ldr	r1, [pc, #324]	@ (80085e4 <mg_ota_flash_write+0x174>)
 800849e:	2001      	movs	r0, #1
 80084a0:	f005 fc54 	bl	800dd4c <mg_log_prefix>
 80084a4:	4850      	ldr	r0, [pc, #320]	@ (80085e8 <mg_ota_flash_write+0x178>)
 80084a6:	f005 fca1 	bl	800ddec <mg_log>
 80084aa:	e08d      	b.n	80085c8 <mg_ota_flash_write+0x158>
  } else {
    size_t len_aligned_down = MG_ROUND_DOWN(len, flash->align);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d009      	beq.n	80084c8 <mg_ota_flash_write+0x58>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	68d2      	ldr	r2, [r2, #12]
 80084c2:	fb02 f303 	mul.w	r3, r2, r3
 80084c6:	e000      	b.n	80084ca <mg_ota_flash_write+0x5a>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	623b      	str	r3, [r7, #32]
    if (len_aligned_down) ok = flash->write_fn(s_addr, buf, len_aligned_down);
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d009      	beq.n	80084e6 <mg_ota_flash_write+0x76>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	4a45      	ldr	r2, [pc, #276]	@ (80085ec <mg_ota_flash_write+0x17c>)
 80084d8:	6810      	ldr	r0, [r2, #0]
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	68f9      	ldr	r1, [r7, #12]
 80084de:	4798      	blx	r3
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (len_aligned_down < len) {
 80084e6:	6a3a      	ldr	r2, [r7, #32]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d244      	bcs.n	8008578 <mg_ota_flash_write+0x108>
 80084ee:	466b      	mov	r3, sp
 80084f0:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	6a3b      	ldr	r3, [r7, #32]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	61fb      	str	r3, [r7, #28]
      char tmp[flash->align];
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	68de      	ldr	r6, [r3, #12]
 80084fe:	4633      	mov	r3, r6
 8008500:	3b01      	subs	r3, #1
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	2300      	movs	r3, #0
 8008506:	46b0      	mov	r8, r6
 8008508:	4699      	mov	r9, r3
 800850a:	f04f 0200 	mov.w	r2, #0
 800850e:	f04f 0300 	mov.w	r3, #0
 8008512:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008516:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800851a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800851e:	2300      	movs	r3, #0
 8008520:	4634      	mov	r4, r6
 8008522:	461d      	mov	r5, r3
 8008524:	f04f 0200 	mov.w	r2, #0
 8008528:	f04f 0300 	mov.w	r3, #0
 800852c:	00eb      	lsls	r3, r5, #3
 800852e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008532:	00e2      	lsls	r2, r4, #3
 8008534:	1df3      	adds	r3, r6, #7
 8008536:	08db      	lsrs	r3, r3, #3
 8008538:	00db      	lsls	r3, r3, #3
 800853a:	ebad 0d03 	sub.w	sp, sp, r3
 800853e:	ab02      	add	r3, sp, #8
 8008540:	3300      	adds	r3, #0
 8008542:	617b      	str	r3, [r7, #20]
      memset(tmp, 0xff, sizeof(tmp));
 8008544:	4632      	mov	r2, r6
 8008546:	21ff      	movs	r1, #255	@ 0xff
 8008548:	6978      	ldr	r0, [r7, #20]
 800854a:	f01d f91f 	bl	802578c <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	6a3b      	ldr	r3, [r7, #32]
 8008552:	4413      	add	r3, r2
 8008554:	69fa      	ldr	r2, [r7, #28]
 8008556:	4619      	mov	r1, r3
 8008558:	6978      	ldr	r0, [r7, #20]
 800855a:	f01d fa4c 	bl	80259f6 <memcpy>
      ok = flash->write_fn(s_addr + len_aligned_down, tmp, sizeof(tmp));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	4a22      	ldr	r2, [pc, #136]	@ (80085ec <mg_ota_flash_write+0x17c>)
 8008564:	6811      	ldr	r1, [r2, #0]
 8008566:	6a3a      	ldr	r2, [r7, #32]
 8008568:	1888      	adds	r0, r1, r2
 800856a:	4632      	mov	r2, r6
 800856c:	6979      	ldr	r1, [r7, #20]
 800856e:	4798      	blx	r3
 8008570:	4603      	mov	r3, r0
 8008572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008576:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 8008578:	4b1d      	ldr	r3, [pc, #116]	@ (80085f0 <mg_ota_flash_write+0x180>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	68f9      	ldr	r1, [r7, #12]
 8008580:	4618      	mov	r0, r3
 8008582:	f018 fdfd 	bl	8021180 <mg_crc32>
 8008586:	4603      	mov	r3, r0
 8008588:	4a19      	ldr	r2, [pc, #100]	@ (80085f0 <mg_ota_flash_write+0x180>)
 800858a:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
 800858c:	4b13      	ldr	r3, [pc, #76]	@ (80085dc <mg_ota_flash_write+0x16c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b02      	cmp	r3, #2
 8008592:	dd13      	ble.n	80085bc <mg_ota_flash_write+0x14c>
 8008594:	4b12      	ldr	r3, [pc, #72]	@ (80085e0 <mg_ota_flash_write+0x170>)
 8008596:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 800859a:	4912      	ldr	r1, [pc, #72]	@ (80085e4 <mg_ota_flash_write+0x174>)
 800859c:	2003      	movs	r0, #3
 800859e:	f005 fbd5 	bl	800dd4c <mg_log_prefix>
 80085a2:	4b12      	ldr	r3, [pc, #72]	@ (80085ec <mg_ota_flash_write+0x17c>)
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	425b      	negs	r3, r3
 80085aa:	18d1      	adds	r1, r2, r3
 80085ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	480f      	ldr	r0, [pc, #60]	@ (80085f4 <mg_ota_flash_write+0x184>)
 80085b8:	f005 fc18 	bl	800ddec <mg_log>
    s_addr += len;
 80085bc:	4b0b      	ldr	r3, [pc, #44]	@ (80085ec <mg_ota_flash_write+0x17c>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4413      	add	r3, r2
 80085c4:	4a09      	ldr	r2, [pc, #36]	@ (80085ec <mg_ota_flash_write+0x17c>)
 80085c6:	6013      	str	r3, [r2, #0]
  }
  return ok;
 80085c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3728      	adds	r7, #40	@ 0x28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d6:	bf00      	nop
 80085d8:	240020e4 	.word	0x240020e4
 80085dc:	24000258 	.word	0x24000258
 80085e0:	0802a098 	.word	0x0802a098
 80085e4:	080264c4 	.word	0x080264c4
 80085e8:	08026708 	.word	0x08026708
 80085ec:	240020e0 	.word	0x240020e0
 80085f0:	240020e8 	.word	0x240020e8
 80085f4:	08026730 	.word	0x08026730

080085f8 <mg_ota_flash_end>:

bool mg_ota_flash_end(struct mg_flash *flash) {
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b088      	sub	sp, #32
 80085fc:	af02      	add	r7, sp, #8
 80085fe:	6078      	str	r0, [r7, #4]
  char *base = (char *) flash->start + flash->size / 2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	085b      	lsrs	r3, r3, #1
 800860a:	4413      	add	r3, r2
 800860c:	613b      	str	r3, [r7, #16]
  bool ok = false;
 800860e:	2300      	movs	r3, #0
 8008610:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 8008612:	4b2f      	ldr	r3, [pc, #188]	@ (80086d0 <mg_ota_flash_end+0xd8>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d040      	beq.n	800869c <mg_ota_flash_end+0xa4>
    size_t size = (size_t) (s_addr - base);
 800861a:	4b2e      	ldr	r3, [pc, #184]	@ (80086d4 <mg_ota_flash_end+0xdc>)
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	60fb      	str	r3, [r7, #12]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 8008624:	4b2a      	ldr	r3, [pc, #168]	@ (80086d0 <mg_ota_flash_end+0xd8>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6939      	ldr	r1, [r7, #16]
 800862c:	2000      	movs	r0, #0
 800862e:	f018 fda7 	bl	8021180 <mg_crc32>
 8008632:	60b8      	str	r0, [r7, #8]
    if (size == s_size && crc32 == s_crc32) ok = true;
 8008634:	4b26      	ldr	r3, [pc, #152]	@ (80086d0 <mg_ota_flash_end+0xd8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	429a      	cmp	r2, r3
 800863c:	d106      	bne.n	800864c <mg_ota_flash_end+0x54>
 800863e:	4b26      	ldr	r3, [pc, #152]	@ (80086d8 <mg_ota_flash_end+0xe0>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	429a      	cmp	r2, r3
 8008646:	d101      	bne.n	800864c <mg_ota_flash_end+0x54>
 8008648:	2301      	movs	r3, #1
 800864a:	75fb      	strb	r3, [r7, #23]
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
 800864c:	4b23      	ldr	r3, [pc, #140]	@ (80086dc <mg_ota_flash_end+0xe4>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b02      	cmp	r3, #2
 8008652:	dd18      	ble.n	8008686 <mg_ota_flash_end+0x8e>
 8008654:	4b22      	ldr	r3, [pc, #136]	@ (80086e0 <mg_ota_flash_end+0xe8>)
 8008656:	f240 2239 	movw	r2, #569	@ 0x239
 800865a:	4922      	ldr	r1, [pc, #136]	@ (80086e4 <mg_ota_flash_end+0xec>)
 800865c:	2003      	movs	r0, #3
 800865e:	f005 fb75 	bl	800dd4c <mg_log_prefix>
 8008662:	4b1d      	ldr	r3, [pc, #116]	@ (80086d8 <mg_ota_flash_end+0xe0>)
 8008664:	6819      	ldr	r1, [r3, #0]
 8008666:	4b1a      	ldr	r3, [pc, #104]	@ (80086d0 <mg_ota_flash_end+0xd8>)
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <mg_ota_flash_end+0x7c>
 8008670:	4b1d      	ldr	r3, [pc, #116]	@ (80086e8 <mg_ota_flash_end+0xf0>)
 8008672:	e000      	b.n	8008676 <mg_ota_flash_end+0x7e>
 8008674:	4b1d      	ldr	r3, [pc, #116]	@ (80086ec <mg_ota_flash_end+0xf4>)
 8008676:	9301      	str	r3, [sp, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	4613      	mov	r3, r2
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	481b      	ldr	r0, [pc, #108]	@ (80086f0 <mg_ota_flash_end+0xf8>)
 8008682:	f005 fbb3 	bl	800ddec <mg_log>
              size, ok ? "ok" : "fail"));
    s_size = 0;
 8008686:	4b12      	ldr	r3, [pc, #72]	@ (80086d0 <mg_ota_flash_end+0xd8>)
 8008688:	2200      	movs	r2, #0
 800868a:	601a      	str	r2, [r3, #0]
    if (ok) ok = flash->swap_fn();
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d004      	beq.n	800869c <mg_ota_flash_end+0xa4>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	4798      	blx	r3
 8008698:	4603      	mov	r3, r0
 800869a:	75fb      	strb	r3, [r7, #23]
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
 800869c:	4b0f      	ldr	r3, [pc, #60]	@ (80086dc <mg_ota_flash_end+0xe4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	dd10      	ble.n	80086c6 <mg_ota_flash_end+0xce>
 80086a4:	4b0e      	ldr	r3, [pc, #56]	@ (80086e0 <mg_ota_flash_end+0xe8>)
 80086a6:	f240 223e 	movw	r2, #574	@ 0x23e
 80086aa:	490e      	ldr	r1, [pc, #56]	@ (80086e4 <mg_ota_flash_end+0xec>)
 80086ac:	2002      	movs	r0, #2
 80086ae:	f005 fb4d 	bl	800dd4c <mg_log_prefix>
 80086b2:	7dfb      	ldrb	r3, [r7, #23]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <mg_ota_flash_end+0xc4>
 80086b8:	4b0b      	ldr	r3, [pc, #44]	@ (80086e8 <mg_ota_flash_end+0xf0>)
 80086ba:	e000      	b.n	80086be <mg_ota_flash_end+0xc6>
 80086bc:	4b0b      	ldr	r3, [pc, #44]	@ (80086ec <mg_ota_flash_end+0xf4>)
 80086be:	4619      	mov	r1, r3
 80086c0:	480c      	ldr	r0, [pc, #48]	@ (80086f4 <mg_ota_flash_end+0xfc>)
 80086c2:	f005 fb93 	bl	800ddec <mg_log>
  return ok;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3718      	adds	r7, #24
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}
 80086d0:	240020e4 	.word	0x240020e4
 80086d4:	240020e0 	.word	0x240020e0
 80086d8:	240020e8 	.word	0x240020e8
 80086dc:	24000258 	.word	0x24000258
 80086e0:	0802a0ac 	.word	0x0802a0ac
 80086e4:	080264c4 	.word	0x080264c4
 80086e8:	08026744 	.word	0x08026744
 80086ec:	08026748 	.word	0x08026748
 80086f0:	08026750 	.word	0x08026750
 80086f4:	08026778 	.word	0x08026778

080086f8 <is_digit>:
#endif




static bool is_digit(int c) {
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b2f      	cmp	r3, #47	@ 0x2f
 8008704:	dd04      	ble.n	8008710 <is_digit+0x18>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b39      	cmp	r3, #57	@ 0x39
 800870a:	dc01      	bgt.n	8008710 <is_digit+0x18>
 800870c:	2301      	movs	r3, #1
 800870e:	e000      	b.n	8008712 <is_digit+0x1a>
 8008710:	2300      	movs	r3, #0
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	b2db      	uxtb	r3, r3
}
 8008718:	4618      	mov	r0, r3
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  int n = 0;
 8008730:	2300      	movs	r3, #0
 8008732:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	617a      	str	r2, [r7, #20]
 800873a:	461a      	mov	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	2265      	movs	r2, #101	@ 0x65
 8008742:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	617a      	str	r2, [r7, #20]
 800874a:	461a      	mov	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4413      	add	r3, r2
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800875c:	dd01      	ble.n	8008762 <addexp+0x3e>
 800875e:	2300      	movs	r3, #0
 8008760:	e057      	b.n	8008812 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2b09      	cmp	r3, #9
 8008766:	dc07      	bgt.n	8008778 <addexp+0x54>
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	1c5a      	adds	r2, r3, #1
 800876c:	617a      	str	r2, [r7, #20]
 800876e:	461a      	mov	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4413      	add	r3, r2
 8008774:	2230      	movs	r2, #48	@ 0x30
 8008776:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b63      	cmp	r3, #99	@ 0x63
 800877c:	dd1c      	ble.n	80087b8 <addexp+0x94>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	4a27      	ldr	r2, [pc, #156]	@ (8008820 <addexp+0xfc>)
 8008782:	fb82 1203 	smull	r1, r2, r2, r3
 8008786:	1152      	asrs	r2, r2, #5
 8008788:	17db      	asrs	r3, r3, #31
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	b2da      	uxtb	r2, r3
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	1c59      	adds	r1, r3, #1
 8008792:	6179      	str	r1, [r7, #20]
 8008794:	4619      	mov	r1, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	440b      	add	r3, r1
 800879a:	3230      	adds	r2, #48	@ 0x30
 800879c:	b2d2      	uxtb	r2, r2
 800879e:	701a      	strb	r2, [r3, #0]
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008820 <addexp+0xfc>)
 80087a4:	fb82 1203 	smull	r1, r2, r2, r3
 80087a8:	1151      	asrs	r1, r2, #5
 80087aa:	17da      	asrs	r2, r3, #31
 80087ac:	1a8a      	subs	r2, r1, r2
 80087ae:	2164      	movs	r1, #100	@ 0x64
 80087b0:	fb01 f202 	mul.w	r2, r1, r2
 80087b4:	1a9b      	subs	r3, r3, r2
 80087b6:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	2b09      	cmp	r3, #9
 80087bc:	dd1d      	ble.n	80087fa <addexp+0xd6>
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	4a18      	ldr	r2, [pc, #96]	@ (8008824 <addexp+0x100>)
 80087c2:	fb82 1203 	smull	r1, r2, r2, r3
 80087c6:	1092      	asrs	r2, r2, #2
 80087c8:	17db      	asrs	r3, r3, #31
 80087ca:	1ad3      	subs	r3, r2, r3
 80087cc:	b2da      	uxtb	r2, r3
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	1c59      	adds	r1, r3, #1
 80087d2:	6179      	str	r1, [r7, #20]
 80087d4:	4619      	mov	r1, r3
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	440b      	add	r3, r1
 80087da:	3230      	adds	r2, #48	@ 0x30
 80087dc:	b2d2      	uxtb	r2, r2
 80087de:	701a      	strb	r2, [r3, #0]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	4b10      	ldr	r3, [pc, #64]	@ (8008824 <addexp+0x100>)
 80087e4:	fb83 1302 	smull	r1, r3, r3, r2
 80087e8:	1099      	asrs	r1, r3, #2
 80087ea:	17d3      	asrs	r3, r2, #31
 80087ec:	1ac9      	subs	r1, r1, r3
 80087ee:	460b      	mov	r3, r1
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	1ad3      	subs	r3, r2, r3
 80087f8:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	1c59      	adds	r1, r3, #1
 8008802:	6179      	str	r1, [r7, #20]
 8008804:	4619      	mov	r1, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	440b      	add	r3, r1
 800880a:	3230      	adds	r2, #48	@ 0x30
 800880c:	b2d2      	uxtb	r2, r2
 800880e:	701a      	strb	r2, [r3, #0]
  return n;
 8008810:	697b      	ldr	r3, [r7, #20]
}
 8008812:	4618      	mov	r0, r3
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	51eb851f 	.word	0x51eb851f
 8008824:	66666667 	.word	0x66666667

08008828 <xisinf>:

static int xisinf(double x) {
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8008832:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008836:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800883a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	000a      	movs	r2, r1
 8008848:	2300      	movs	r3, #0
 800884a:	4613      	mov	r3, r2
 800884c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008850:	4a08      	ldr	r2, [pc, #32]	@ (8008874 <xisinf+0x4c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d106      	bne.n	8008864 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8008856:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800885a:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <xisinf+0x3c>
 8008860:	2301      	movs	r3, #1
 8008862:	e000      	b.n	8008866 <xisinf+0x3e>
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	7ff00000 	.word	0x7ff00000

08008878 <xisnan>:

static int xisnan(double x) {
 8008878:	b480      	push	{r7}
 800887a:	b085      	sub	sp, #20
 800887c:	af00      	add	r7, sp, #0
 800887e:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8008882:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008886:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 800888a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800888e:	f04f 0200 	mov.w	r2, #0
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	000a      	movs	r2, r1
 8008898:	2300      	movs	r3, #0
 800889a:	4613      	mov	r3, r2
 800889c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 80088a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088a4:	4613      	mov	r3, r2
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	bf14      	ite	ne
 80088aa:	2301      	movne	r3, #1
 80088ac:	2300      	moveq	r3, #0
 80088ae:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80088b0:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 80088b2:	4a06      	ldr	r2, [pc, #24]	@ (80088cc <xisnan+0x54>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	bf8c      	ite	hi
 80088b8:	2301      	movhi	r3, #1
 80088ba:	2300      	movls	r3, #0
 80088bc:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3714      	adds	r7, #20
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	7ff00000 	.word	0x7ff00000

080088d0 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b0a0      	sub	sp, #128	@ 0x80
 80088d4:	af02      	add	r7, sp, #8
 80088d6:	6178      	str	r0, [r7, #20]
 80088d8:	6139      	str	r1, [r7, #16]
 80088da:	ed87 0b02 	vstr	d0, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80088e6:	2300      	movs	r3, #0
 80088e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80088ea:	2300      	movs	r3, #0
 80088ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80088ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80088f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fa:	d107      	bne.n	800890c <mg_dtoa+0x3c>
 80088fc:	4bb8      	ldr	r3, [pc, #736]	@ (8008be0 <mg_dtoa+0x310>)
 80088fe:	4ab9      	ldr	r2, [pc, #740]	@ (8008be4 <mg_dtoa+0x314>)
 8008900:	6939      	ldr	r1, [r7, #16]
 8008902:	6978      	ldr	r0, [r7, #20]
 8008904:	f009 fe5c 	bl	80125c0 <mg_snprintf>
 8008908:	4603      	mov	r3, r0
 800890a:	e28d      	b.n	8008e28 <mg_dtoa+0x558>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 800890c:	ed97 0b02 	vldr	d0, [r7, #8]
 8008910:	f7ff ff8a 	bl	8008828 <xisinf>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d010      	beq.n	800893c <mg_dtoa+0x6c>
 800891a:	ed97 7b02 	vldr	d7, [r7, #8]
 800891e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008926:	dd01      	ble.n	800892c <mg_dtoa+0x5c>
 8008928:	4baf      	ldr	r3, [pc, #700]	@ (8008be8 <mg_dtoa+0x318>)
 800892a:	e000      	b.n	800892e <mg_dtoa+0x5e>
 800892c:	4baf      	ldr	r3, [pc, #700]	@ (8008bec <mg_dtoa+0x31c>)
 800892e:	4aad      	ldr	r2, [pc, #692]	@ (8008be4 <mg_dtoa+0x314>)
 8008930:	6939      	ldr	r1, [r7, #16]
 8008932:	6978      	ldr	r0, [r7, #20]
 8008934:	f009 fe44 	bl	80125c0 <mg_snprintf>
 8008938:	4603      	mov	r3, r0
 800893a:	e275      	b.n	8008e28 <mg_dtoa+0x558>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 800893c:	ed97 0b02 	vldr	d0, [r7, #8]
 8008940:	f7ff ff9a 	bl	8008878 <xisnan>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d007      	beq.n	800895a <mg_dtoa+0x8a>
 800894a:	4ba9      	ldr	r3, [pc, #676]	@ (8008bf0 <mg_dtoa+0x320>)
 800894c:	4aa5      	ldr	r2, [pc, #660]	@ (8008be4 <mg_dtoa+0x314>)
 800894e:	6939      	ldr	r1, [r7, #16]
 8008950:	6978      	ldr	r0, [r7, #20]
 8008952:	f009 fe35 	bl	80125c0 <mg_snprintf>
 8008956:	4603      	mov	r3, r0
 8008958:	e266      	b.n	8008e28 <mg_dtoa+0x558>
  if (d < 0.0) d = -d, buf[s++] = '-';
 800895a:	ed97 7b02 	vldr	d7, [r7, #8]
 800895e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008966:	d50d      	bpl.n	8008984 <mg_dtoa+0xb4>
 8008968:	ed97 7b02 	vldr	d7, [r7, #8]
 800896c:	eeb1 7b47 	vneg.f64	d7, d7
 8008970:	ed87 7b02 	vstr	d7, [r7, #8]
 8008974:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008976:	1c5a      	adds	r2, r3, #1
 8008978:	673a      	str	r2, [r7, #112]	@ 0x70
 800897a:	3378      	adds	r3, #120	@ 0x78
 800897c:	443b      	add	r3, r7
 800897e:	222d      	movs	r2, #45	@ 0x2d
 8008980:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 8008984:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008988:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  if (tz) {
 800898c:	78fb      	ldrb	r3, [r7, #3]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d024      	beq.n	80089dc <mg_dtoa+0x10c>
    mul = 1.0;
 8008992:	f04f 0200 	mov.w	r2, #0
 8008996:	4b97      	ldr	r3, [pc, #604]	@ (8008bf4 <mg_dtoa+0x324>)
 8008998:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 800899c:	e007      	b.n	80089ae <mg_dtoa+0xde>
 800899e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80089a2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80089a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80089aa:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80089ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80089b2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80089b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80089ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089be:	db12      	blt.n	80089e6 <mg_dtoa+0x116>
 80089c0:	ed97 5b02 	vldr	d5, [r7, #8]
 80089c4:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80089c8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80089cc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80089d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80089d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d8:	dae1      	bge.n	800899e <mg_dtoa+0xce>
 80089da:	e00d      	b.n	80089f8 <mg_dtoa+0x128>
  } else {
    mul = 0.1;
 80089dc:	a37e      	add	r3, pc, #504	@ (adr r3, 8008bd8 <mg_dtoa+0x308>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80089e6:	e007      	b.n	80089f8 <mg_dtoa+0x128>
 80089e8:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80089ec:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80089f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80089f4:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80089f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80089fc:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008a00:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a08:	d80c      	bhi.n	8008a24 <mg_dtoa+0x154>
 8008a0a:	ed97 5b02 	vldr	d5, [r7, #8]
 8008a0e:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8008a12:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008a16:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008a1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a22:	d9e1      	bls.n	80089e8 <mg_dtoa+0x118>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8008a24:	2300      	movs	r3, #0
 8008a26:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a28:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8008a2c:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8008a30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a34:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8008a38:	e00a      	b.n	8008a50 <mg_dtoa+0x180>
 8008a3a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8008a3e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8008a42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008a46:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8008a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a50:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	dbf0      	blt.n	8008a3a <mg_dtoa+0x16a>

  d += t;
 8008a58:	ed97 6b02 	vldr	d6, [r7, #8]
 8008a5c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8008a60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008a64:	ed87 7b02 	vstr	d7, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8008a68:	f04f 0200 	mov.w	r2, #0
 8008a6c:	4b61      	ldr	r3, [pc, #388]	@ (8008bf4 <mg_dtoa+0x324>)
 8008a6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8008a72:	e00a      	b.n	8008a8a <mg_dtoa+0x1ba>
 8008a74:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8008a78:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008a7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a80:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8008a84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a86:	3301      	adds	r3, #1
 8008a88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8008a8e:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008a92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9a:	db0c      	blt.n	8008ab6 <mg_dtoa+0x1e6>
 8008a9c:	ed97 5b02 	vldr	d5, [r7, #8]
 8008aa0:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8008aa4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008aa8:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008aac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab4:	dade      	bge.n	8008a74 <mg_dtoa+0x1a4>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 8008ab6:	e00a      	b.n	8008ace <mg_dtoa+0x1fe>
 8008ab8:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8008abc:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8008ac0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008ac4:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8008ac8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008aca:	3b01      	subs	r3, #1
 8008acc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ace:	ed97 7b02 	vldr	d7, [r7, #8]
 8008ad2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008ad6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ade:	d50c      	bpl.n	8008afa <mg_dtoa+0x22a>
 8008ae0:	ed97 5b02 	vldr	d5, [r7, #8]
 8008ae4:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8008ae8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008aec:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008af0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008af8:	d4de      	bmi.n	8008ab8 <mg_dtoa+0x1e8>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 8008afa:	78fb      	ldrb	r3, [r7, #3]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d031      	beq.n	8008b64 <mg_dtoa+0x294>
 8008b00:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	db2d      	blt.n	8008b64 <mg_dtoa+0x294>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	dd2a      	ble.n	8008b64 <mg_dtoa+0x294>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8008b0e:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8008b12:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8008b16:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8008b1a:	78fb      	ldrb	r3, [r7, #3]
 8008b1c:	f107 0018 	add.w	r0, r7, #24
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	eeb0 0b45 	vmov.f64	d0, d5
 8008b26:	2128      	movs	r1, #40	@ 0x28
 8008b28:	f7ff fed2 	bl	80088d0 <mg_dtoa>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8008b30:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008b32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b34:	4413      	add	r3, r2
 8008b36:	f107 0218 	add.w	r2, r7, #24
 8008b3a:	4413      	add	r3, r2
 8008b3c:	222b      	movs	r2, #43	@ 0x2b
 8008b3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff fdef 	bl	8008724 <addexp>
 8008b46:	4602      	mov	r2, r0
 8008b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b4a:	4413      	add	r3, r2
 8008b4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8008b4e:	f107 0318 	add.w	r3, r7, #24
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b56:	4a28      	ldr	r2, [pc, #160]	@ (8008bf8 <mg_dtoa+0x328>)
 8008b58:	6939      	ldr	r1, [r7, #16]
 8008b5a:	6978      	ldr	r0, [r7, #20]
 8008b5c:	f009 fd30 	bl	80125c0 <mg_snprintf>
 8008b60:	4603      	mov	r3, r0
 8008b62:	e161      	b.n	8008e28 <mg_dtoa+0x558>
  } else if (tz && e <= -width && width > 1) {
 8008b64:	78fb      	ldrb	r3, [r7, #3]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d048      	beq.n	8008bfc <mg_dtoa+0x32c>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	425b      	negs	r3, r3
 8008b6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008b70:	429a      	cmp	r2, r3
 8008b72:	dc43      	bgt.n	8008bfc <mg_dtoa+0x32c>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	dd40      	ble.n	8008bfc <mg_dtoa+0x32c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8008b7a:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8008b7e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8008b82:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	f107 0018 	add.w	r0, r7, #24
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	eeb0 0b45 	vmov.f64	d0, d5
 8008b92:	2128      	movs	r1, #40	@ 0x28
 8008b94:	f7ff fe9c 	bl	80088d0 <mg_dtoa>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8008b9c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008b9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f107 0218 	add.w	r2, r7, #24
 8008ba6:	18d0      	adds	r0, r2, r3
 8008ba8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008baa:	425b      	negs	r3, r3
 8008bac:	222d      	movs	r2, #45	@ 0x2d
 8008bae:	4619      	mov	r1, r3
 8008bb0:	f7ff fdb8 	bl	8008724 <addexp>
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bb8:	4413      	add	r3, r2
 8008bba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8008bbc:	f107 0318 	add.w	r3, r7, #24
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf8 <mg_dtoa+0x328>)
 8008bc6:	6939      	ldr	r1, [r7, #16]
 8008bc8:	6978      	ldr	r0, [r7, #20]
 8008bca:	f009 fcf9 	bl	80125c0 <mg_snprintf>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	e12a      	b.n	8008e28 <mg_dtoa+0x558>
 8008bd2:	bf00      	nop
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	9999999a 	.word	0x9999999a
 8008bdc:	3fb99999 	.word	0x3fb99999
 8008be0:	0802678c 	.word	0x0802678c
 8008be4:	08026790 	.word	0x08026790
 8008be8:	08026794 	.word	0x08026794
 8008bec:	08026798 	.word	0x08026798
 8008bf0:	080267a0 	.word	0x080267a0
 8008bf4:	3ff00000 	.word	0x3ff00000
 8008bf8:	080267a4 	.word	0x080267a4
  } else {
    int targ_width = width;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8008c00:	2300      	movs	r3, #0
 8008c02:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008c08:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8008c0c:	e037      	b.n	8008c7e <mg_dtoa+0x3ae>
      int ch = (int) (d / t);
 8008c0e:	ed97 5b02 	vldr	d5, [r7, #8]
 8008c12:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8008c16:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008c1a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008c1e:	ee17 3a90 	vmov	r3, s15
 8008c22:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8008c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	dc02      	bgt.n	8008c30 <mg_dtoa+0x360>
 8008c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	dd0c      	ble.n	8008c4a <mg_dtoa+0x37a>
 8008c30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c36:	1c59      	adds	r1, r3, #1
 8008c38:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8008c3a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008c3c:	440b      	add	r3, r1
 8008c3e:	3230      	adds	r2, #48	@ 0x30
 8008c40:	b2d2      	uxtb	r2, r2
 8008c42:	3378      	adds	r3, #120	@ 0x78
 8008c44:	443b      	add	r3, r7
 8008c46:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 8008c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c4c:	ee07 3a90 	vmov	s15, r3
 8008c50:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008c54:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8008c58:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008c5c:	ed97 6b02 	vldr	d6, [r7, #8]
 8008c60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c64:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8008c68:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8008c6c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8008c70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c74:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8008c78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	677b      	str	r3, [r7, #116]	@ 0x74
 8008c7e:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8008c82:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008c86:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c8e:	db04      	blt.n	8008c9a <mg_dtoa+0x3ca>
 8008c90:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c94:	4413      	add	r3, r2
 8008c96:	2b27      	cmp	r3, #39	@ 0x27
 8008c98:	ddb9      	ble.n	8008c0e <mg_dtoa+0x33e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8008c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d118      	bne.n	8008cd2 <mg_dtoa+0x402>
 8008ca0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ca2:	1c5a      	adds	r2, r3, #1
 8008ca4:	673a      	str	r2, [r7, #112]	@ 0x70
 8008ca6:	3378      	adds	r3, #120	@ 0x78
 8008ca8:	443b      	add	r3, r7
 8008caa:	2230      	movs	r2, #48	@ 0x30
 8008cac:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 8008cb0:	e00f      	b.n	8008cd2 <mg_dtoa+0x402>
 8008cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008cb8:	3378      	adds	r3, #120	@ 0x78
 8008cba:	443b      	add	r3, r7
 8008cbc:	2230      	movs	r2, #48	@ 0x30
 8008cbe:	f803 2c60 	strb.w	r2, [r3, #-96]
 8008cc2:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8008cc6:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8008cca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008cce:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8008cd2:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8008cd6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008cda:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce2:	db04      	blt.n	8008cee <mg_dtoa+0x41e>
 8008ce4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008ce6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ce8:	4413      	add	r3, r2
 8008cea:	2b27      	cmp	r3, #39	@ 0x27
 8008cec:	dde1      	ble.n	8008cb2 <mg_dtoa+0x3e2>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 8008cee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008cf0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cf2:	4413      	add	r3, r2
 8008cf4:	2b27      	cmp	r3, #39	@ 0x27
 8008cf6:	dc09      	bgt.n	8008d0c <mg_dtoa+0x43c>
 8008cf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	673a      	str	r2, [r7, #112]	@ 0x70
 8008cfe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d00:	4413      	add	r3, r2
 8008d02:	3378      	adds	r3, #120	@ 0x78
 8008d04:	443b      	add	r3, r7
 8008d06:	222e      	movs	r2, #46	@ 0x2e
 8008d08:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 8008d0c:	78fb      	ldrb	r3, [r7, #3]
 8008d0e:	f083 0301 	eor.w	r3, r3, #1
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d006      	beq.n	8008d26 <mg_dtoa+0x456>
 8008d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	dd03      	ble.n	8008d26 <mg_dtoa+0x456>
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d22:	4413      	add	r3, r2
 8008d24:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 8008d26:	2300      	movs	r3, #0
 8008d28:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d2a:	a342      	add	r3, pc, #264	@ (adr r3, 8008e34 <mg_dtoa+0x564>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8008d34:	e031      	b.n	8008d9a <mg_dtoa+0x4ca>
      int ch = (int) (d / t);
 8008d36:	ed97 5b02 	vldr	d5, [r7, #8]
 8008d3a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8008d3e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8008d42:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008d46:	ee17 3a90 	vmov	r3, s15
 8008d4a:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 8008d4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d52:	1c59      	adds	r1, r3, #1
 8008d54:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8008d56:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008d58:	440b      	add	r3, r1
 8008d5a:	3230      	adds	r2, #48	@ 0x30
 8008d5c:	b2d2      	uxtb	r2, r2
 8008d5e:	3378      	adds	r3, #120	@ 0x78
 8008d60:	443b      	add	r3, r7
 8008d62:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 8008d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d68:	ee07 3a90 	vmov	s15, r3
 8008d6c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008d70:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8008d74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008d78:	ed97 6b02 	vldr	d6, [r7, #8]
 8008d7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008d80:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8008d84:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8008d88:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8008d8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d90:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 8008d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d96:	3301      	adds	r3, #1
 8008d98:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d9a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008d9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d9e:	4413      	add	r3, r2
 8008da0:	2b27      	cmp	r3, #39	@ 0x27
 8008da2:	dc07      	bgt.n	8008db4 <mg_dtoa+0x4e4>
 8008da4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008da6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008da8:	429a      	cmp	r2, r3
 8008daa:	dbc4      	blt.n	8008d36 <mg_dtoa+0x466>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8008dac:	e002      	b.n	8008db4 <mg_dtoa+0x4e4>
 8008dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008db0:	3b01      	subs	r3, #1
 8008db2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00c      	beq.n	8008dd4 <mg_dtoa+0x504>
 8008dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dd09      	ble.n	8008dd4 <mg_dtoa+0x504>
 8008dc0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dc4:	4413      	add	r3, r2
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	3378      	adds	r3, #120	@ 0x78
 8008dca:	443b      	add	r3, r7
 8008dcc:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8008dd0:	2b30      	cmp	r3, #48	@ 0x30
 8008dd2:	d0ec      	beq.n	8008dae <mg_dtoa+0x4de>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00f      	beq.n	8008dfa <mg_dtoa+0x52a>
 8008dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	dd0c      	ble.n	8008dfa <mg_dtoa+0x52a>
 8008de0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008de4:	4413      	add	r3, r2
 8008de6:	3b01      	subs	r3, #1
 8008de8:	3378      	adds	r3, #120	@ 0x78
 8008dea:	443b      	add	r3, r7
 8008dec:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8008df0:	2b2e      	cmp	r3, #46	@ 0x2e
 8008df2:	d102      	bne.n	8008dfa <mg_dtoa+0x52a>
 8008df4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008df6:	3b01      	subs	r3, #1
 8008df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  n += s;
 8008dfa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008dfe:	4413      	add	r3, r2
 8008e00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8008e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e04:	2b27      	cmp	r3, #39	@ 0x27
 8008e06:	dd01      	ble.n	8008e0c <mg_dtoa+0x53c>
 8008e08:	2327      	movs	r3, #39	@ 0x27
 8008e0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  buf[n] = '\0';
 8008e0c:	f107 0218 	add.w	r2, r7, #24
 8008e10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e12:	4413      	add	r3, r2
 8008e14:	2200      	movs	r2, #0
 8008e16:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8008e18:	f107 0318 	add.w	r3, r7, #24
 8008e1c:	4a04      	ldr	r2, [pc, #16]	@ (8008e30 <mg_dtoa+0x560>)
 8008e1e:	6939      	ldr	r1, [r7, #16]
 8008e20:	6978      	ldr	r0, [r7, #20]
 8008e22:	f009 fbcd 	bl	80125c0 <mg_snprintf>
 8008e26:	4603      	mov	r3, r0
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3778      	adds	r7, #120	@ 0x78
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	08026790 	.word	0x08026790
 8008e34:	9999999a 	.word	0x9999999a
 8008e38:	3fb99999 	.word	0x3fb99999

08008e3c <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8008e3c:	b5b0      	push	{r4, r5, r7, lr}
 8008e3e:	b08c      	sub	sp, #48	@ 0x30
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8008e48:	4b53      	ldr	r3, [pc, #332]	@ (8008f98 <mg_lld+0x15c>)
 8008e4a:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8008e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e50:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8008e54:	2300      	movs	r3, #0
 8008e56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8008e58:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d012      	beq.n	8008e86 <mg_lld+0x4a>
 8008e60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	da0e      	bge.n	8008e86 <mg_lld+0x4a>
 8008e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	627a      	str	r2, [r7, #36]	@ 0x24
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4413      	add	r3, r2
 8008e72:	222d      	movs	r2, #45	@ 0x2d
 8008e74:	701a      	strb	r2, [r3, #0]
 8008e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	4254      	negs	r4, r2
 8008e7e:	eb61 0503 	sbc.w	r5, r1, r3
 8008e82:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8008e86:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d021      	beq.n	8008ed2 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8008e8e:	2300      	movs	r3, #0
 8008e90:	623b      	str	r3, [r7, #32]
 8008e92:	e019      	b.n	8008ec8 <mg_lld+0x8c>
 8008e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	441a      	add	r2, r3
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	1c59      	adds	r1, r3, #1
 8008ea2:	6239      	str	r1, [r7, #32]
 8008ea4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ea6:	440b      	add	r3, r1
 8008ea8:	68f9      	ldr	r1, [r7, #12]
 8008eaa:	440b      	add	r3, r1
 8008eac:	7812      	ldrb	r2, [r2, #0]
 8008eae:	701a      	strb	r2, [r3, #0]
 8008eb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	0902      	lsrs	r2, r0, #4
 8008ebe:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8008ec2:	090b      	lsrs	r3, r1, #4
 8008ec4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8008ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	d1e1      	bne.n	8008e94 <mg_lld+0x58>
 8008ed0:	e025      	b.n	8008f1e <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	623b      	str	r3, [r7, #32]
 8008ed6:	e01e      	b.n	8008f16 <mg_lld+0xda>
 8008ed8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008edc:	f04f 020a 	mov.w	r2, #10
 8008ee0:	f04f 0300 	mov.w	r3, #0
 8008ee4:	f7f7 fa7c 	bl	80003e0 <__aeabi_uldivmod>
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	441a      	add	r2, r3
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	1c59      	adds	r1, r3, #1
 8008ef0:	6239      	str	r1, [r7, #32]
 8008ef2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008ef4:	440b      	add	r3, r1
 8008ef6:	68f9      	ldr	r1, [r7, #12]
 8008ef8:	440b      	add	r3, r1
 8008efa:	7812      	ldrb	r2, [r2, #0]
 8008efc:	701a      	strb	r2, [r3, #0]
 8008efe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008f02:	f04f 020a 	mov.w	r2, #10
 8008f06:	f04f 0300 	mov.w	r3, #0
 8008f0a:	f7f7 fa69 	bl	80003e0 <__aeabi_uldivmod>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8008f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	d1dc      	bne.n	8008ed8 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8008f1e:	2300      	movs	r3, #0
 8008f20:	61fb      	str	r3, [r7, #28]
 8008f22:	e022      	b.n	8008f6a <mg_lld+0x12e>
    char t = buf[s + i];
 8008f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8008f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	441a      	add	r2, r3
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	441a      	add	r2, r3
 8008f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	440b      	add	r3, r1
 8008f48:	68f9      	ldr	r1, [r7, #12]
 8008f4a:	440b      	add	r3, r1
 8008f4c:	7812      	ldrb	r2, [r2, #0]
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	441a      	add	r2, r3
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4413      	add	r3, r2
 8008f60:	7dfa      	ldrb	r2, [r7, #23]
 8008f62:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	3301      	adds	r3, #1
 8008f68:	61fb      	str	r3, [r7, #28]
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	085b      	lsrs	r3, r3, #1
 8008f6e:	69fa      	ldr	r2, [r7, #28]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d3d7      	bcc.n	8008f24 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8008f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	d106      	bne.n	8008f8a <mg_lld+0x14e>
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	1c5a      	adds	r2, r3, #1
 8008f80:	623a      	str	r2, [r7, #32]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4413      	add	r3, r2
 8008f86:	2230      	movs	r2, #48	@ 0x30
 8008f88:	701a      	strb	r2, [r3, #0]
  return n + s;
 8008f8a:	6a3a      	ldr	r2, [r7, #32]
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8e:	4413      	add	r3, r2
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3730      	adds	r7, #48	@ 0x30
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bdb0      	pop	{r4, r5, r7, pc}
 8008f98:	080267ac 	.word	0x080267ac

08008f9c <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8008fae:	e009      	b.n	8008fc4 <scpy+0x28>
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	617a      	str	r2, [r7, #20]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	4413      	add	r3, r2
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	68b9      	ldr	r1, [r7, #8]
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d205      	bcs.n	8008fd8 <scpy+0x3c>
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d1eb      	bne.n	8008fb0 <scpy+0x14>
  return i;
 8008fd8:	697b      	ldr	r3, [r7, #20]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8008fe2:	b40c      	push	{r2, r3}
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8008ff2:	f107 031c 	add.w	r3, r7, #28
 8008ff6:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8008ff8:	f107 0308 	add.w	r3, r7, #8
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f809 	bl	8009018 <mg_vxprintf>
 8009006:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8009008:	68fb      	ldr	r3, [r7, #12]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009014:	b002      	add	sp, #8
 8009016:	4770      	bx	lr

08009018 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8009018:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800901c:	b0a6      	sub	sp, #152	@ 0x98
 800901e:	af02      	add	r7, sp, #8
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	607a      	str	r2, [r7, #4]
 8009026:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800902e:	2300      	movs	r3, #0
 8009030:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 8009034:	e383      	b.n	800973e <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800903c:	4413      	add	r3, r2
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b25      	cmp	r3, #37	@ 0x25
 8009042:	f040 8369 	bne.w	8009718 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8009046:	2300      	movs	r3, #0
 8009048:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800904a:	2300      	movs	r3, #0
 800904c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800904e:	2300      	movs	r3, #0
 8009050:	677b      	str	r3, [r7, #116]	@ 0x74
 8009052:	f04f 33ff 	mov.w	r3, #4294967295
 8009056:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8009058:	2320      	movs	r3, #32
 800905a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800905e:	2300      	movs	r3, #0
 8009060:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009068:	3301      	adds	r3, #1
 800906a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009074:	4413      	add	r3, r2
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 800907c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009080:	2b23      	cmp	r3, #35	@ 0x23
 8009082:	d10e      	bne.n	80090a2 <mg_vxprintf+0x8a>
 8009084:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009086:	3301      	adds	r3, #1
 8009088:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800908a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800908e:	3301      	adds	r3, #1
 8009090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800909a:	4413      	add	r3, r2
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80090a2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80090a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80090a8:	d110      	bne.n	80090cc <mg_vxprintf+0xb4>
 80090aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80090ae:	3301      	adds	r3, #1
 80090b0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80090b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090b8:	3301      	adds	r3, #1
 80090ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090c4:	4413      	add	r3, r2
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 80090cc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80090d0:	2b30      	cmp	r3, #48	@ 0x30
 80090d2:	d127      	bne.n	8009124 <mg_vxprintf+0x10c>
 80090d4:	2330      	movs	r3, #48	@ 0x30
 80090d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80090da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090de:	3301      	adds	r3, #1
 80090e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80090ea:	4413      	add	r3, r2
 80090ec:	781b      	ldrb	r3, [r3, #0]
 80090ee:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 80090f2:	e017      	b.n	8009124 <mg_vxprintf+0x10c>
 80090f4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80090f6:	4613      	mov	r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	005b      	lsls	r3, r3, #1
 80090fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8009100:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8009104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009106:	4413      	add	r3, r2
 8009108:	3b30      	subs	r3, #48	@ 0x30
 800910a:	677b      	str	r3, [r7, #116]	@ 0x74
 800910c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009110:	3301      	adds	r3, #1
 8009112:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800911c:	4413      	add	r3, r2
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009124:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009128:	4618      	mov	r0, r3
 800912a:	f7ff fae5 	bl	80086f8 <is_digit>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1df      	bne.n	80090f4 <mg_vxprintf+0xdc>
      if (c == '.') {
 8009134:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009138:	2b2e      	cmp	r3, #46	@ 0x2e
 800913a:	d153      	bne.n	80091e4 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 800913c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009140:	3301      	adds	r3, #1
 8009142:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800914c:	4413      	add	r3, r2
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8009154:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009158:	2b2a      	cmp	r3, #42	@ 0x2a
 800915a:	d113      	bne.n	8009184 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	1d19      	adds	r1, r3, #4
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	6011      	str	r1, [r2, #0]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 800916a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800916e:	3301      	adds	r3, #1
 8009170:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800917a:	4413      	add	r3, r2
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8009182:	e02f      	b.n	80091e4 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8009188:	e017      	b.n	80091ba <mg_vxprintf+0x1a2>
 800918a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	673b      	str	r3, [r7, #112]	@ 0x70
 8009196:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 800919a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800919c:	4413      	add	r3, r2
 800919e:	3b30      	subs	r3, #48	@ 0x30
 80091a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80091a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091a6:	3301      	adds	r3, #1
 80091a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091b2:	4413      	add	r3, r2
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80091ba:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80091be:	4618      	mov	r0, r3
 80091c0:	f7ff fa9a 	bl	80086f8 <is_digit>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1df      	bne.n	800918a <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 80091ca:	e00b      	b.n	80091e4 <mg_vxprintf+0x1cc>
 80091cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091d0:	3301      	adds	r3, #1
 80091d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091dc:	4413      	add	r3, r2
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80091e4:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80091e8:	2b68      	cmp	r3, #104	@ 0x68
 80091ea:	d0ef      	beq.n	80091cc <mg_vxprintf+0x1b4>
      if (c == 'l') {
 80091ec:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80091f0:	2b6c      	cmp	r3, #108	@ 0x6c
 80091f2:	d121      	bne.n	8009238 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 80091f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091f6:	3301      	adds	r3, #1
 80091f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091fe:	3301      	adds	r3, #1
 8009200:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800920a:	4413      	add	r3, r2
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8009212:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009216:	2b6c      	cmp	r3, #108	@ 0x6c
 8009218:	d10e      	bne.n	8009238 <mg_vxprintf+0x220>
 800921a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800921c:	3301      	adds	r3, #1
 800921e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009220:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009224:	3301      	adds	r3, #1
 8009226:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009230:	4413      	add	r3, r2
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8009238:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800923c:	2b70      	cmp	r3, #112	@ 0x70
 800923e:	d103      	bne.n	8009248 <mg_vxprintf+0x230>
 8009240:	2301      	movs	r3, #1
 8009242:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009244:	2301      	movs	r3, #1
 8009246:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8009248:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800924c:	2b64      	cmp	r3, #100	@ 0x64
 800924e:	d018      	beq.n	8009282 <mg_vxprintf+0x26a>
 8009250:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009254:	2b75      	cmp	r3, #117	@ 0x75
 8009256:	d014      	beq.n	8009282 <mg_vxprintf+0x26a>
 8009258:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800925c:	2b78      	cmp	r3, #120	@ 0x78
 800925e:	d010      	beq.n	8009282 <mg_vxprintf+0x26a>
 8009260:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009264:	2b58      	cmp	r3, #88	@ 0x58
 8009266:	d00c      	beq.n	8009282 <mg_vxprintf+0x26a>
 8009268:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800926c:	2b70      	cmp	r3, #112	@ 0x70
 800926e:	d008      	beq.n	8009282 <mg_vxprintf+0x26a>
 8009270:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009274:	2b67      	cmp	r3, #103	@ 0x67
 8009276:	d004      	beq.n	8009282 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8009278:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800927c:	2b66      	cmp	r3, #102	@ 0x66
 800927e:	f040 816c 	bne.w	800955a <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8009282:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009286:	2b64      	cmp	r3, #100	@ 0x64
 8009288:	bf0c      	ite	eq
 800928a:	2301      	moveq	r3, #1
 800928c:	2300      	movne	r3, #0
 800928e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8009292:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009296:	2b78      	cmp	r3, #120	@ 0x78
 8009298:	d007      	beq.n	80092aa <mg_vxprintf+0x292>
 800929a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800929e:	2b58      	cmp	r3, #88	@ 0x58
 80092a0:	d003      	beq.n	80092aa <mg_vxprintf+0x292>
 80092a2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80092a6:	2b70      	cmp	r3, #112	@ 0x70
 80092a8:	d101      	bne.n	80092ae <mg_vxprintf+0x296>
 80092aa:	2301      	movs	r3, #1
 80092ac:	e000      	b.n	80092b0 <mg_vxprintf+0x298>
 80092ae:	2300      	movs	r3, #0
 80092b0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80092b4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80092b8:	f003 0301 	and.w	r3, r3, #1
 80092bc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 80092c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d001      	beq.n	80092ca <mg_vxprintf+0x2b2>
 80092c6:	2302      	movs	r3, #2
 80092c8:	e000      	b.n	80092cc <mg_vxprintf+0x2b4>
 80092ca:	2300      	movs	r3, #0
 80092cc:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 80092ce:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80092d2:	2b67      	cmp	r3, #103	@ 0x67
 80092d4:	d003      	beq.n	80092de <mg_vxprintf+0x2c6>
 80092d6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80092da:	2b66      	cmp	r3, #102	@ 0x66
 80092dc:	d124      	bne.n	8009328 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3307      	adds	r3, #7
 80092e4:	f023 0307 	bic.w	r3, r3, #7
 80092e8:	f103 0108 	add.w	r1, r3, #8
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	6011      	str	r1, [r2, #0]
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 80092f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fe:	d101      	bne.n	8009304 <mg_vxprintf+0x2ec>
 8009300:	2306      	movs	r3, #6
 8009302:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8009304:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009306:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800930a:	2b67      	cmp	r3, #103	@ 0x67
 800930c:	bf0c      	ite	eq
 800930e:	2301      	moveq	r3, #1
 8009310:	2300      	movne	r3, #0
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f107 0014 	add.w	r0, r7, #20
 8009318:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 800931c:	2128      	movs	r1, #40	@ 0x28
 800931e:	f7ff fad7 	bl	80088d0 <mg_dtoa>
 8009322:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8009326:	e069      	b.n	80093fc <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8009328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800932a:	2b02      	cmp	r3, #2
 800932c:	d11c      	bne.n	8009368 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3307      	adds	r3, #7
 8009334:	f023 0307 	bic.w	r3, r3, #7
 8009338:	f103 0108 	add.w	r1, r3, #8
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	6011      	str	r1, [r2, #0]
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8009348:	f107 0114 	add.w	r1, r7, #20
 800934c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8009350:	9301      	str	r3, [sp, #4]
 8009352:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800935c:	4608      	mov	r0, r1
 800935e:	f7ff fd6d 	bl	8008e3c <mg_lld>
 8009362:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8009366:	e049      	b.n	80093fc <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8009368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800936a:	2b01      	cmp	r3, #1
 800936c:	d123      	bne.n	80093b6 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	1d19      	adds	r1, r3, #4
 8009374:	683a      	ldr	r2, [r7, #0]
 8009376:	6011      	str	r1, [r2, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 800937c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009380:	2b00      	cmp	r3, #0
 8009382:	d004      	beq.n	800938e <mg_vxprintf+0x376>
 8009384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009386:	17da      	asrs	r2, r3, #31
 8009388:	461c      	mov	r4, r3
 800938a:	4615      	mov	r5, r2
 800938c:	e003      	b.n	8009396 <mg_vxprintf+0x37e>
 800938e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009390:	2200      	movs	r2, #0
 8009392:	461c      	mov	r4, r3
 8009394:	4615      	mov	r5, r2
 8009396:	f107 0114 	add.w	r1, r7, #20
 800939a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	4622      	mov	r2, r4
 80093a8:	462b      	mov	r3, r5
 80093aa:	4608      	mov	r0, r1
 80093ac:	f7ff fd46 	bl	8008e3c <mg_lld>
 80093b0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 80093b4:	e022      	b.n	80093fc <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	1d19      	adds	r1, r3, #4
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	6011      	str	r1, [r2, #0]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 80093c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d004      	beq.n	80093d6 <mg_vxprintf+0x3be>
 80093cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093ce:	17da      	asrs	r2, r3, #31
 80093d0:	4698      	mov	r8, r3
 80093d2:	4691      	mov	r9, r2
 80093d4:	e003      	b.n	80093de <mg_vxprintf+0x3c6>
 80093d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093d8:	2200      	movs	r2, #0
 80093da:	4698      	mov	r8, r3
 80093dc:	4691      	mov	r9, r2
 80093de:	f107 0114 	add.w	r1, r7, #20
 80093e2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80093e6:	9301      	str	r3, [sp, #4]
 80093e8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	4642      	mov	r2, r8
 80093f0:	464b      	mov	r3, r9
 80093f2:	4608      	mov	r0, r1
 80093f4:	f7ff fd22 	bl	8008e3c <mg_lld>
 80093f8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009402:	e007      	b.n	8009414 <mg_vxprintf+0x3fc>
 8009404:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009406:	3b01      	subs	r3, #1
 8009408:	677b      	str	r3, [r7, #116]	@ 0x74
 800940a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800940e:	3301      	adds	r3, #1
 8009410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009414:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800941a:	429a      	cmp	r2, r3
 800941c:	d202      	bcs.n	8009424 <mg_vxprintf+0x40c>
 800941e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1ef      	bne.n	8009404 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8009424:	2300      	movs	r3, #0
 8009426:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800942a:	e011      	b.n	8009450 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 800942c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009430:	2301      	movs	r3, #1
 8009432:	68b9      	ldr	r1, [r7, #8]
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f7ff fdb1 	bl	8008f9c <scpy>
 800943a:	4602      	mov	r2, r0
 800943c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009440:	4413      	add	r3, r2
 8009442:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8009446:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800944a:	3301      	adds	r3, #1
 800944c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009450:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009454:	2b20      	cmp	r3, #32
 8009456:	d110      	bne.n	800947a <mg_vxprintf+0x462>
 8009458:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10c      	bne.n	800947a <mg_vxprintf+0x462>
 8009460:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009464:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009466:	429a      	cmp	r2, r3
 8009468:	d207      	bcs.n	800947a <mg_vxprintf+0x462>
 800946a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800946e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009472:	4413      	add	r3, r2
 8009474:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009476:	429a      	cmp	r2, r3
 8009478:	d8d8      	bhi.n	800942c <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 800947a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800947c:	4ab7      	ldr	r2, [pc, #732]	@ (800975c <mg_vxprintf+0x744>)
 800947e:	68b9      	ldr	r1, [r7, #8]
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f7ff fd8b 	bl	8008f9c <scpy>
 8009486:	4602      	mov	r2, r0
 8009488:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800948c:	4413      	add	r3, r2
 800948e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8009492:	2300      	movs	r3, #0
 8009494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009498:	e011      	b.n	80094be <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 800949a:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800949e:	2301      	movs	r3, #1
 80094a0:	68b9      	ldr	r1, [r7, #8]
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7ff fd7a 	bl	8008f9c <scpy>
 80094a8:	4602      	mov	r2, r0
 80094aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094ae:	4413      	add	r3, r2
 80094b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 80094b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094b8:	3301      	adds	r3, #1
 80094ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80094be:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80094c2:	2b30      	cmp	r3, #48	@ 0x30
 80094c4:	d10c      	bne.n	80094e0 <mg_vxprintf+0x4c8>
 80094c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d207      	bcs.n	80094e0 <mg_vxprintf+0x4c8>
 80094d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80094d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094d8:	4413      	add	r3, r2
 80094da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80094dc:	429a      	cmp	r2, r3
 80094de:	d8dc      	bhi.n	800949a <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 80094e0:	f107 0214 	add.w	r2, r7, #20
 80094e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80094e8:	68b9      	ldr	r1, [r7, #8]
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f7ff fd56 	bl	8008f9c <scpy>
 80094f0:	4602      	mov	r2, r0
 80094f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094f6:	4413      	add	r3, r2
 80094f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80094fc:	2300      	movs	r3, #0
 80094fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009502:	e011      	b.n	8009528 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8009504:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009508:	2301      	movs	r3, #1
 800950a:	68b9      	ldr	r1, [r7, #8]
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f7ff fd45 	bl	8008f9c <scpy>
 8009512:	4602      	mov	r2, r0
 8009514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009518:	4413      	add	r3, r2
 800951a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800951e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009522:	3301      	adds	r3, #1
 8009524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009528:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800952c:	2b20      	cmp	r3, #32
 800952e:	f040 80ea 	bne.w	8009706 <mg_vxprintf+0x6ee>
 8009532:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 80e5 	beq.w	8009706 <mg_vxprintf+0x6ee>
 800953c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009540:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009542:	429a      	cmp	r2, r3
 8009544:	f080 80df 	bcs.w	8009706 <mg_vxprintf+0x6ee>
 8009548:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800954c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009550:	4413      	add	r3, r2
 8009552:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009554:	429a      	cmp	r2, r3
 8009556:	d8d5      	bhi.n	8009504 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8009558:	e0d5      	b.n	8009706 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 800955a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800955e:	2b6d      	cmp	r3, #109	@ 0x6d
 8009560:	d003      	beq.n	800956a <mg_vxprintf+0x552>
 8009562:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8009566:	2b4d      	cmp	r3, #77	@ 0x4d
 8009568:	d128      	bne.n	80095bc <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	1d19      	adds	r1, r3, #4
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	6011      	str	r1, [r2, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8009578:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800957c:	2b6d      	cmp	r3, #109	@ 0x6d
 800957e:	d103      	bne.n	8009588 <mg_vxprintf+0x570>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	2022      	movs	r0, #34	@ 0x22
 8009586:	4798      	blx	r3
        n += f(out, param, ap);
 8009588:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	4798      	blx	r3
 8009592:	4602      	mov	r2, r0
 8009594:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009598:	4413      	add	r3, r2
 800959a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 800959e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80095a2:	2b6d      	cmp	r3, #109	@ 0x6d
 80095a4:	f040 80b1 	bne.w	800970a <mg_vxprintf+0x6f2>
 80095a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095ac:	3302      	adds	r3, #2
 80095ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	68b9      	ldr	r1, [r7, #8]
 80095b6:	2022      	movs	r0, #34	@ 0x22
 80095b8:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 80095ba:	e0a6      	b.n	800970a <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 80095bc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80095c0:	2b63      	cmp	r3, #99	@ 0x63
 80095c2:	d112      	bne.n	80095ea <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	1d19      	adds	r1, r3, #4
 80095ca:	683a      	ldr	r2, [r7, #0]
 80095cc:	6011      	str	r1, [r2, #0]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 80095d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80095d4:	b2da      	uxtb	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	68b9      	ldr	r1, [r7, #8]
 80095da:	4610      	mov	r0, r2
 80095dc:	4798      	blx	r3
        n++;
 80095de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80095e2:	3301      	adds	r3, #1
 80095e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095e8:	e090      	b.n	800970c <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 80095ea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80095ee:	2b73      	cmp	r3, #115	@ 0x73
 80095f0:	d16b      	bne.n	80096ca <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	1d19      	adds	r1, r3, #4
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	6011      	str	r1, [r2, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8009600:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009606:	d109      	bne.n	800961c <mg_vxprintf+0x604>
 8009608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <mg_vxprintf+0x600>
 800960e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8009610:	f7f6 fede 	bl	80003d0 <strlen>
 8009614:	4603      	mov	r3, r0
 8009616:	e000      	b.n	800961a <mg_vxprintf+0x602>
 8009618:	2300      	movs	r3, #0
 800961a:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800961c:	2300      	movs	r3, #0
 800961e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009622:	e011      	b.n	8009648 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8009624:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8009628:	2301      	movs	r3, #1
 800962a:	68b9      	ldr	r1, [r7, #8]
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f7ff fcb5 	bl	8008f9c <scpy>
 8009632:	4602      	mov	r2, r0
 8009634:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009638:	4413      	add	r3, r2
 800963a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 800963e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009642:	3301      	adds	r3, #1
 8009644:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009648:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <mg_vxprintf+0x64e>
 8009650:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8009652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009654:	429a      	cmp	r2, r3
 8009656:	d206      	bcs.n	8009666 <mg_vxprintf+0x64e>
 8009658:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800965c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800965e:	4413      	add	r3, r2
 8009660:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009662:	429a      	cmp	r2, r3
 8009664:	d8de      	bhi.n	8009624 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8009666:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009668:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800966a:	68b9      	ldr	r1, [r7, #8]
 800966c:	68f8      	ldr	r0, [r7, #12]
 800966e:	f7ff fc95 	bl	8008f9c <scpy>
 8009672:	4602      	mov	r2, r0
 8009674:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009678:	4413      	add	r3, r2
 800967a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800967e:	2300      	movs	r3, #0
 8009680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009684:	e011      	b.n	80096aa <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8009686:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800968a:	2301      	movs	r3, #1
 800968c:	68b9      	ldr	r1, [r7, #8]
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f7ff fc84 	bl	8008f9c <scpy>
 8009694:	4602      	mov	r2, r0
 8009696:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800969a:	4413      	add	r3, r2
 800969c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 80096a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80096a4:	3301      	adds	r3, #1
 80096a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096aa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d02c      	beq.n	800970c <mg_vxprintf+0x6f4>
 80096b2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80096b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d228      	bcs.n	800970c <mg_vxprintf+0x6f4>
 80096ba:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80096be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80096c0:	4413      	add	r3, r2
 80096c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d8de      	bhi.n	8009686 <mg_vxprintf+0x66e>
 80096c8:	e020      	b.n	800970c <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 80096ca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80096ce:	2b25      	cmp	r3, #37	@ 0x25
 80096d0:	d109      	bne.n	80096e6 <mg_vxprintf+0x6ce>
        out('%', param);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	68b9      	ldr	r1, [r7, #8]
 80096d6:	2025      	movs	r0, #37	@ 0x25
 80096d8:	4798      	blx	r3
        n++;
 80096da:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096de:	3301      	adds	r3, #1
 80096e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096e4:	e012      	b.n	800970c <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	68b9      	ldr	r1, [r7, #8]
 80096ea:	2025      	movs	r0, #37	@ 0x25
 80096ec:	4798      	blx	r3
        out(c, param);
 80096ee:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	68b9      	ldr	r1, [r7, #8]
 80096f6:	4610      	mov	r0, r2
 80096f8:	4798      	blx	r3
        n += 2;
 80096fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80096fe:	3302      	adds	r3, #2
 8009700:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009704:	e002      	b.n	800970c <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8009706:	bf00      	nop
 8009708:	e000      	b.n	800970c <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 800970a:	bf00      	nop
      }
      i++;
 800970c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009710:	3301      	adds	r3, #1
 8009712:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009716:	e012      	b.n	800973e <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800971e:	4413      	add	r3, r2
 8009720:	781a      	ldrb	r2, [r3, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	4610      	mov	r0, r2
 8009728:	4798      	blx	r3
 800972a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800972e:	3301      	adds	r3, #1
 8009730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009734:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009738:	3301      	adds	r3, #1
 800973a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009744:	4413      	add	r3, r2
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f47f ac74 	bne.w	8009036 <mg_vxprintf+0x1e>
    }
  }
  return n;
 800974e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8009752:	4618      	mov	r0, r3
 8009754:	3790      	adds	r7, #144	@ 0x90
 8009756:	46bd      	mov	sp, r7
 8009758:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800975c:	080267c0 	.word	0x080267c0

08009760 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 800976c:	2108      	movs	r1, #8
 800976e:	2001      	movs	r0, #1
 8009770:	f01b fc32 	bl	8024fd8 <calloc>
 8009774:	4603      	mov	r3, r0
 8009776:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d013      	beq.n	80097a6 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	689b      	ldr	r3, [r3, #8]
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	68b8      	ldr	r0, [r7, #8]
 8009786:	4798      	blx	r3
 8009788:	4602      	mov	r2, r0
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <mg_fs_open+0x46>
      free(fd);
 800979c:	6978      	ldr	r0, [r7, #20]
 800979e:	f01b fc3f 	bl	8025020 <free>
      fd = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 80097a6:	697b      	ldr	r3, [r7, #20]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3718      	adds	r7, #24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6812      	ldr	r2, [r2, #0]
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
    free(fd);
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f01b fc27 	bl	8025020 <free>
  }
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 80097da:	b580      	push	{r7, lr}
 80097dc:	b084      	sub	sp, #16
 80097de:	af00      	add	r7, sp, #0
 80097e0:	60f8      	str	r0, [r7, #12]
 80097e2:	60b9      	str	r1, [r7, #8]
 80097e4:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7f6 fdf2 	bl	80003d0 <strlen>
 80097ec:	4602      	mov	r2, r0
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d219      	bcs.n	8009828 <is_dir_prefix+0x4e>
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	68f8      	ldr	r0, [r7, #12]
 80097fa:	f01b ffdc 	bl	80257b6 <strncmp>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d111      	bne.n	8009828 <is_dir_prefix+0x4e>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00c      	beq.n	8009824 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	4413      	add	r3, r2
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	2b2f      	cmp	r3, #47	@ 0x2f
 8009814:	d006      	beq.n	8009824 <is_dir_prefix+0x4a>
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	3b01      	subs	r3, #1
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	4413      	add	r3, r2
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	2b2f      	cmp	r3, #47	@ 0x2f
 8009822:	d101      	bne.n	8009828 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8009824:	2301      	movs	r3, #1
 8009826:	e000      	b.n	800982a <is_dir_prefix+0x50>
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3710      	adds	r7, #16
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8009832:	b580      	push	{r7, lr}
 8009834:	b088      	sub	sp, #32
 8009836:	af00      	add	r7, sp, #0
 8009838:	60f8      	str	r0, [r7, #12]
 800983a:	60b9      	str	r1, [r7, #8]
 800983c:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f7f6 fdc6 	bl	80003d0 <strlen>
 8009844:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f019 f8bc 	bl	80229c8 <mg_unpack>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d001      	beq.n	800985a <packed_stat+0x28>
 8009856:	2301      	movs	r3, #1
 8009858:	e017      	b.n	800988a <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800985a:	2300      	movs	r3, #0
 800985c:	61fb      	str	r3, [r7, #28]
 800985e:	e00c      	b.n	800987a <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	69b9      	ldr	r1, [r7, #24]
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f7ff ffb8 	bl	80097da <is_dir_prefix>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <packed_stat+0x42>
 8009870:	2304      	movs	r3, #4
 8009872:	e00a      	b.n	800988a <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	3301      	adds	r3, #1
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	69f8      	ldr	r0, [r7, #28]
 800987c:	f019 f890 	bl	80229a0 <mg_unlist>
 8009880:	6178      	str	r0, [r7, #20]
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d1eb      	bne.n	8009860 <packed_stat+0x2e>
  }
  return 0;
 8009888:	2300      	movs	r3, #0
}
 800988a:	4618      	mov	r0, r3
 800988c:	3720      	adds	r7, #32
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8009894:	b580      	push	{r7, lr}
 8009896:	b0be      	sub	sp, #248	@ 0xf8
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7f6 fd95 	bl	80003d0 <strlen>
 80098a6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 80098aa:	2300      	movs	r3, #0
 80098ac:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 80098ae:	2300      	movs	r3, #0
 80098b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80098b4:	e05a      	b.n	800996c <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 80098b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80098ba:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 80098be:	68f8      	ldr	r0, [r7, #12]
 80098c0:	f7ff ff8b 	bl	80097da <is_dir_prefix>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d048      	beq.n	800995c <packed_list+0xc8>
    begin = &path[n + 1];
 80098ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098ce:	3301      	adds	r3, #1
 80098d0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80098d4:	4413      	add	r3, r2
 80098d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 80098da:	212f      	movs	r1, #47	@ 0x2f
 80098dc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80098e0:	f01b ff5c 	bl	802579c <strchr>
 80098e4:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 80098e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d109      	bne.n	8009904 <packed_list+0x70>
 80098f0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 80098f4:	f7f6 fd6c 	bl	80003d0 <strlen>
 80098f8:	4602      	mov	r2, r0
 80098fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80098fe:	4413      	add	r3, r2
 8009900:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8009904:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8009908:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800990c:	1ad2      	subs	r2, r2, r3
 800990e:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8009912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	4613      	mov	r3, r2
 800991a:	4a1c      	ldr	r2, [pc, #112]	@ (800998c <packed_list+0xf8>)
 800991c:	2164      	movs	r1, #100	@ 0x64
 800991e:	f008 fe4f 	bl	80125c0 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8009922:	2300      	movs	r3, #0
 8009924:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8009928:	f107 0214 	add.w	r2, r7, #20
 800992c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8009930:	4611      	mov	r1, r2
 8009932:	4618      	mov	r0, r3
 8009934:	f7f6 fcec 	bl	8000310 <strcmp>
 8009938:	4603      	mov	r3, r0
 800993a:	2b00      	cmp	r3, #0
 800993c:	d010      	beq.n	8009960 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 800993e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	4610      	mov	r0, r2
 8009948:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 800994a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800994e:	f107 0314 	add.w	r3, r7, #20
 8009952:	4611      	mov	r1, r2
 8009954:	4618      	mov	r0, r3
 8009956:	f01c f846 	bl	80259e6 <strcpy>
 800995a:	e002      	b.n	8009962 <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 800995c:	bf00      	nop
 800995e:	e000      	b.n	8009962 <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8009960:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8009962:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8009966:	3301      	adds	r3, #1
 8009968:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800996c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8009970:	f019 f816 	bl	80229a0 <mg_unlist>
 8009974:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 8009978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d19a      	bne.n	80098b6 <packed_list+0x22>
  }
}
 8009980:	bf00      	nop
 8009982:	bf00      	nop
 8009984:	37f0      	adds	r7, #240	@ 0xf0
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	080267a4 	.word	0x080267a4

08009990 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 800999e:	f107 030c 	add.w	r3, r7, #12
 80099a2:	2200      	movs	r2, #0
 80099a4:	4619      	mov	r1, r3
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f019 f80e 	bl	80229c8 <mg_unpack>
 80099ac:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <packed_open+0x2c>
 80099b8:	2300      	movs	r3, #0
 80099ba:	e016      	b.n	80099ea <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d001      	beq.n	80099ca <packed_open+0x3a>
 80099c6:	2300      	movs	r3, #0
 80099c8:	e00f      	b.n	80099ea <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 80099ca:	210c      	movs	r1, #12
 80099cc:	2001      	movs	r0, #1
 80099ce:	f01b fb03 	bl	8024fd8 <calloc>
 80099d2:	4603      	mov	r3, r0
 80099d4:	613b      	str	r3, [r7, #16]
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <packed_open+0x58>
    fp->size = size;
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	605a      	str	r2, [r3, #4]
    fp->data = data;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 80099e8:	693b      	ldr	r3, [r7, #16]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <packed_close>:

static void packed_close(void *fp) {
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <packed_close+0x14>
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f01b fb0d 	bl	8025020 <free>
}
 8009a06:	bf00      	nop
 8009a08:	3708      	adds	r7, #8
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b086      	sub	sp, #24
 8009a12:	af00      	add	r7, sp, #0
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	689a      	ldr	r2, [r3, #8]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	441a      	add	r2, r3
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d905      	bls.n	8009a3a <packed_read+0x2c>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	685a      	ldr	r2, [r3, #4]
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	1ad3      	subs	r3, r2, r3
 8009a38:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	4413      	add	r3, r2
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	4619      	mov	r1, r3
 8009a48:	68b8      	ldr	r0, [r7, #8]
 8009a4a:	f01b ffd4 	bl	80259f6 <memcpy>
  fp->pos += len;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	441a      	add	r2, r3
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	609a      	str	r2, [r3, #8]
  return len;
 8009a5a:	687b      	ldr	r3, [r7, #4]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8009a7e:	b480      	push	{r7}
 8009a80:	b085      	sub	sp, #20
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	689a      	ldr	r2, [r3, #8]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d903      	bls.n	8009aa6 <packed_seek+0x28>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689b      	ldr	r3, [r3, #8]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3714      	adds	r7, #20
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8009ab6:	b480      	push	{r7}
 8009ab8:	b083      	sub	sp, #12
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <packed_remove>:

static bool packed_remove(const char *path) {
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 8009afa:	b480      	push	{r7}
 8009afc:	b085      	sub	sp, #20
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	60f8      	str	r0, [r7, #12]
 8009b02:	60b9      	str	r1, [r7, #8]
 8009b04:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3714      	adds	r7, #20
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8009b20:	bf00      	nop
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <p_open>:
static void *p_open(const char *path, int flags) {
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <p_close>:
static void p_close(void *fp) {
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8009b72:	b480      	push	{r7}
 8009b74:	b085      	sub	sp, #20
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8009b96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	370c      	adds	r7, #12
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbc:	4770      	bx	lr

08009bbe <p_remove>:
static bool p_remove(const char *path) {
 8009bbe:	b480      	push	{r7}
 8009bc0:	b083      	sub	sp, #12
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8009bea:	b480      	push	{r7}
 8009bec:	b089      	sub	sp, #36	@ 0x24
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d02d      	beq.n	8009c5c <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	60fa      	str	r2, [r7, #12]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	61bb      	str	r3, [r7, #24]
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	60ba      	str	r2, [r7, #8]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	2b40      	cmp	r3, #64	@ 0x40
 8009c18:	dd05      	ble.n	8009c26 <mg_ncasecmp+0x3c>
 8009c1a:	69bb      	ldr	r3, [r7, #24]
 8009c1c:	2b5a      	cmp	r3, #90	@ 0x5a
 8009c1e:	dc02      	bgt.n	8009c26 <mg_ncasecmp+0x3c>
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	3320      	adds	r3, #32
 8009c24:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2b40      	cmp	r3, #64	@ 0x40
 8009c2a:	dd05      	ble.n	8009c38 <mg_ncasecmp+0x4e>
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	2b5a      	cmp	r3, #90	@ 0x5a
 8009c30:	dc02      	bgt.n	8009c38 <mg_ncasecmp+0x4e>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	3320      	adds	r3, #32
 8009c36:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8009c38:	69ba      	ldr	r2, [r7, #24]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10a      	bne.n	8009c5c <mg_ncasecmp+0x72>
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	3b01      	subs	r3, #1
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <mg_ncasecmp+0x72>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3b01      	subs	r3, #1
 8009c54:	607b      	str	r3, [r7, #4]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1d1      	bne.n	8009c00 <mg_ncasecmp+0x16>
  return diff;
 8009c5c:	69fb      	ldr	r3, [r7, #28]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3724      	adds	r7, #36	@ 0x24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
	...

08009c6c <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8009c6c:	b480      	push	{r7}
 8009c6e:	b08b      	sub	sp, #44	@ 0x2c
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	f107 0308 	add.w	r3, r7, #8
 8009c76:	e883 0003 	stmia.w	r3, {r0, r1}
 8009c7a:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c80:	f04f 33ff 	mov.w	r3, #4294967295
 8009c84:	61bb      	str	r3, [r7, #24]
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	4a42      	ldr	r2, [pc, #264]	@ (8009d94 <mg_to_size_t+0x128>)
 8009c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c8e:	08db      	lsrs	r3, r3, #3
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	2300      	movs	r3, #0
 8009c94:	623b      	str	r3, [r7, #32]
 8009c96:	2300      	movs	r3, #0
 8009c98:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8009c9a:	e002      	b.n	8009ca2 <mg_to_size_t+0x36>
 8009c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d20b      	bcs.n	8009cc2 <mg_to_size_t+0x56>
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cae:	4413      	add	r3, r2
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	2b20      	cmp	r3, #32
 8009cb4:	d0f2      	beq.n	8009c9c <mg_to_size_t+0x30>
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cba:	4413      	add	r3, r2
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b09      	cmp	r3, #9
 8009cc0:	d0ec      	beq.n	8009c9c <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d22b      	bcs.n	8009d22 <mg_to_size_t+0xb6>
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cce:	4413      	add	r3, r2
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009cd4:	d125      	bne.n	8009d22 <mg_to_size_t+0xb6>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	e056      	b.n	8009d88 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	4413      	add	r3, r2
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	3b30      	subs	r3, #48	@ 0x30
 8009ce4:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8009ce6:	6a3a      	ldr	r2, [r7, #32]
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d901      	bls.n	8009cf2 <mg_to_size_t+0x86>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e04a      	b.n	8009d88 <mg_to_size_t+0x11c>
    result *= 10;
 8009cf2:	6a3a      	ldr	r2, [r7, #32]
 8009cf4:	4613      	mov	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	4413      	add	r3, r2
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 8009cfe:	69ba      	ldr	r2, [r7, #24]
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	6a3a      	ldr	r2, [r7, #32]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d901      	bls.n	8009d0e <mg_to_size_t+0xa2>
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	e03c      	b.n	8009d88 <mg_to_size_t+0x11c>
    result += digit;
 8009d0e:	6a3a      	ldr	r2, [r7, #32]
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	4413      	add	r3, r2
 8009d14:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8009d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d18:	3301      	adds	r3, #1
 8009d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d20f      	bcs.n	8009d4a <mg_to_size_t+0xde>
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	4413      	add	r3, r2
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b2f      	cmp	r3, #47	@ 0x2f
 8009d34:	d909      	bls.n	8009d4a <mg_to_size_t+0xde>
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3a:	4413      	add	r3, r2
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	2b39      	cmp	r3, #57	@ 0x39
 8009d40:	d9cb      	bls.n	8009cda <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8009d42:	e002      	b.n	8009d4a <mg_to_size_t+0xde>
 8009d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d46:	3301      	adds	r3, #1
 8009d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d20b      	bcs.n	8009d6a <mg_to_size_t+0xfe>
 8009d52:	68ba      	ldr	r2, [r7, #8]
 8009d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d56:	4413      	add	r3, r2
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	2b20      	cmp	r3, #32
 8009d5c:	d0f2      	beq.n	8009d44 <mg_to_size_t+0xd8>
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d62:	4413      	add	r3, r2
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	2b09      	cmp	r3, #9
 8009d68:	d0ec      	beq.n	8009d44 <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 8009d6a:	69fb      	ldr	r3, [r7, #28]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d101      	bne.n	8009d74 <mg_to_size_t+0x108>
 8009d70:	2300      	movs	r3, #0
 8009d72:	e009      	b.n	8009d88 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d001      	beq.n	8009d80 <mg_to_size_t+0x114>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e003      	b.n	8009d88 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a3a      	ldr	r2, [r7, #32]
 8009d84:	601a      	str	r2, [r3, #0]
  return true;
 8009d86:	2301      	movs	r3, #1
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	372c      	adds	r7, #44	@ 0x2c
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr
 8009d94:	cccccccd 	.word	0xcccccccd

08009d98 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 8009d98:	b082      	sub	sp, #8
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b08e      	sub	sp, #56	@ 0x38
 8009d9e:	af02      	add	r7, sp, #8
 8009da0:	60f8      	str	r0, [r7, #12]
 8009da2:	1d38      	adds	r0, r7, #4
 8009da4:	e880 0006 	stmia.w	r0, {r1, r2}
 8009da8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 8009daa:	f107 0310 	add.w	r3, r7, #16
 8009dae:	2200      	movs	r2, #0
 8009db0:	2100      	movs	r1, #0
 8009db2:	4618      	mov	r0, r3
 8009db4:	f00b ffe7 	bl	8015d86 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 8009db8:	e023      	b.n	8009e02 <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8009dba:	f107 0318 	add.w	r3, r7, #24
 8009dbe:	f107 0220 	add.w	r2, r7, #32
 8009dc2:	213d      	movs	r1, #61	@ 0x3d
 8009dc4:	9100      	str	r1, [sp, #0]
 8009dc6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8009dca:	c903      	ldmia	r1, {r0, r1}
 8009dcc:	f00c f9bc 	bl	8016148 <mg_span>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d015      	beq.n	8009e02 <mg_http_var+0x6a>
 8009dd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dda:	429a      	cmp	r2, r3
 8009ddc:	d111      	bne.n	8009e02 <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 8009dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de0:	6a39      	ldr	r1, [r7, #32]
 8009de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff ff00 	bl	8009bea <mg_ncasecmp>
 8009dea:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d108      	bne.n	8009e02 <mg_http_var+0x6a>
      result = v;
 8009df0:	f107 0310 	add.w	r3, r7, #16
 8009df4:	f107 0218 	add.w	r2, r7, #24
 8009df8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009dfc:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8009e00:	e00b      	b.n	8009e1a <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 8009e02:	1d3b      	adds	r3, r7, #4
 8009e04:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8009e08:	2126      	movs	r1, #38	@ 0x26
 8009e0a:	9100      	str	r1, [sp, #0]
 8009e0c:	1d39      	adds	r1, r7, #4
 8009e0e:	c903      	ldmia	r1, {r0, r1}
 8009e10:	f00c f99a 	bl	8016148 <mg_span>
 8009e14:	4603      	mov	r3, r0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d1cf      	bne.n	8009dba <mg_http_var+0x22>
    }
  }
  return result;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f107 0310 	add.w	r3, r7, #16
 8009e22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009e26:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	3730      	adds	r7, #48	@ 0x30
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e34:	b002      	add	sp, #8
 8009e36:	4770      	bx	lr

08009e38 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b08c      	sub	sp, #48	@ 0x30
 8009e3c:	af02      	add	r7, sp, #8
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
 8009e44:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d005      	beq.n	8009e58 <mg_http_get_var+0x20>
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d002      	beq.n	8009e64 <mg_http_get_var+0x2c>
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d103      	bne.n	8009e6c <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8009e64:	f06f 0301 	mvn.w	r3, #1
 8009e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e6a:	e033      	b.n	8009ed4 <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d006      	beq.n	8009e82 <mg_http_get_var+0x4a>
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <mg_http_get_var+0x4a>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d103      	bne.n	8009e8a <mg_http_get_var+0x52>
    len = -1;  // Bad source
 8009e82:	f04f 33ff 	mov.w	r3, #4294967295
 8009e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e88:	e024      	b.n	8009ed4 <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8009e8a:	f107 031c 	add.w	r3, r7, #28
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	4618      	mov	r0, r3
 8009e92:	f00b ff5b 	bl	8015d4c <mg_str_s>
 8009e96:	f107 0014 	add.w	r0, r7, #20
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	6a3b      	ldr	r3, [r7, #32]
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	ca06      	ldmia	r2, {r1, r2}
 8009ea4:	f7ff ff78 	bl	8009d98 <mg_http_var>
    if (v.buf == NULL) {
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d103      	bne.n	8009eb6 <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 8009eae:	f06f 0303 	mvn.w	r3, #3
 8009eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009eb4:	e00e      	b.n	8009ed4 <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 8009eb6:	6978      	ldr	r0, [r7, #20]
 8009eb8:	69b9      	ldr	r1, [r7, #24]
 8009eba:	2301      	movs	r3, #1
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	f000 f82e 	bl	8009f22 <mg_url_decode>
 8009ec6:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	da02      	bge.n	8009ed4 <mg_http_get_var+0x9c>
 8009ece:	f06f 0302 	mvn.w	r3, #2
 8009ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3728      	adds	r7, #40	@ 0x28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <isx>:

static bool isx(int c) {
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b2f      	cmp	r3, #47	@ 0x2f
 8009eea:	dd02      	ble.n	8009ef2 <isx+0x14>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b39      	cmp	r3, #57	@ 0x39
 8009ef0:	dd0b      	ble.n	8009f0a <isx+0x2c>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b60      	cmp	r3, #96	@ 0x60
 8009ef6:	dd02      	ble.n	8009efe <isx+0x20>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b66      	cmp	r3, #102	@ 0x66
 8009efc:	dd05      	ble.n	8009f0a <isx+0x2c>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b40      	cmp	r3, #64	@ 0x40
 8009f02:	dd04      	ble.n	8009f0e <isx+0x30>
         (c >= 'A' && c <= 'F');
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b46      	cmp	r3, #70	@ 0x46
 8009f08:	dc01      	bgt.n	8009f0e <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e000      	b.n	8009f10 <isx+0x32>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	b2db      	uxtb	r3, r3
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b08a      	sub	sp, #40	@ 0x28
 8009f26:	af02      	add	r7, sp, #8
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8009f30:	2300      	movs	r3, #0
 8009f32:	61bb      	str	r3, [r7, #24]
 8009f34:	69bb      	ldr	r3, [r7, #24]
 8009f36:	61fb      	str	r3, [r7, #28]
 8009f38:	e059      	b.n	8009fee <mg_url_decode+0xcc>
    if (src[i] == '%') {
 8009f3a:	68fa      	ldr	r2, [r7, #12]
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	4413      	add	r3, r2
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	2b25      	cmp	r3, #37	@ 0x25
 8009f44:	d136      	bne.n	8009fb4 <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	3302      	adds	r3, #2
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d92e      	bls.n	8009fae <mg_url_decode+0x8c>
 8009f50:	69fb      	ldr	r3, [r7, #28]
 8009f52:	3301      	adds	r3, #1
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	4413      	add	r3, r2
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff ffbf 	bl	8009ede <isx>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d023      	beq.n	8009fae <mg_url_decode+0x8c>
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	3302      	adds	r3, #2
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7ff ffb4 	bl	8009ede <isx>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d018      	beq.n	8009fae <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	18d1      	adds	r1, r2, r3
 8009f84:	f107 0310 	add.w	r3, r7, #16
 8009f88:	2202      	movs	r2, #2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f00b fefb 	bl	8015d86 <mg_str_n>
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	4413      	add	r3, r2
 8009f96:	2201      	movs	r2, #1
 8009f98:	9200      	str	r2, [sp, #0]
 8009f9a:	2210      	movs	r2, #16
 8009f9c:	f107 0110 	add.w	r1, r7, #16
 8009fa0:	c903      	ldmia	r1, {r0, r1}
 8009fa2:	f00c f92e 	bl	8016202 <mg_str_to_num>
        i += 2;
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	3302      	adds	r3, #2
 8009faa:	61fb      	str	r3, [r7, #28]
 8009fac:	e019      	b.n	8009fe2 <mg_url_decode+0xc0>
      } else {
        return -1;
 8009fae:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb2:	e03a      	b.n	800a02a <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8009fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00b      	beq.n	8009fd2 <mg_url_decode+0xb0>
 8009fba:	68fa      	ldr	r2, [r7, #12]
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b2b      	cmp	r3, #43	@ 0x2b
 8009fc4:	d105      	bne.n	8009fd2 <mg_url_decode+0xb0>
      dst[j] = ' ';
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	4413      	add	r3, r2
 8009fcc:	2220      	movs	r2, #32
 8009fce:	701a      	strb	r2, [r3, #0]
 8009fd0:	e007      	b.n	8009fe2 <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	441a      	add	r2, r3
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	440b      	add	r3, r1
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	61fb      	str	r3, [r7, #28]
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	3301      	adds	r3, #1
 8009fec:	61bb      	str	r3, [r7, #24]
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d204      	bcs.n	800a000 <mg_url_decode+0xde>
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d89c      	bhi.n	8009f3a <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800a000:	69ba      	ldr	r2, [r7, #24]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	429a      	cmp	r2, r3
 800a006:	d204      	bcs.n	800a012 <mg_url_decode+0xf0>
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	4413      	add	r3, r2
 800a00e:	2200      	movs	r2, #0
 800a010:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 800a012:	69fa      	ldr	r2, [r7, #28]
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	429a      	cmp	r2, r3
 800a018:	d305      	bcc.n	800a026 <mg_url_decode+0x104>
 800a01a:	69ba      	ldr	r2, [r7, #24]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d201      	bcs.n	800a026 <mg_url_decode+0x104>
 800a022:	69bb      	ldr	r3, [r7, #24]
 800a024:	e001      	b.n	800a02a <mg_url_decode+0x108>
 800a026:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3720      	adds	r7, #32
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <isok>:

static bool isok(uint8_t c) {
 800a032:	b480      	push	{r7}
 800a034:	b083      	sub	sp, #12
 800a036:	af00      	add	r7, sp, #0
 800a038:	4603      	mov	r3, r0
 800a03a:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 800a03c:	79fb      	ldrb	r3, [r7, #7]
 800a03e:	2b0a      	cmp	r3, #10
 800a040:	d008      	beq.n	800a054 <isok+0x22>
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	2b0d      	cmp	r3, #13
 800a046:	d005      	beq.n	800a054 <isok+0x22>
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	2b09      	cmp	r3, #9
 800a04c:	d002      	beq.n	800a054 <isok+0x22>
 800a04e:	79fb      	ldrb	r3, [r7, #7]
 800a050:	2b1f      	cmp	r3, #31
 800a052:	d901      	bls.n	800a058 <isok+0x26>
 800a054:	2301      	movs	r3, #1
 800a056:	e000      	b.n	800a05a <isok+0x28>
 800a058:	2300      	movs	r3, #0
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	b2db      	uxtb	r3, r3
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b084      	sub	sp, #16
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 800a076:	2300      	movs	r3, #0
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	e03c      	b.n	800a0f6 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	4413      	add	r3, r2
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	4618      	mov	r0, r3
 800a086:	f7ff ffd4 	bl	800a032 <isok>
 800a08a:	4603      	mov	r3, r0
 800a08c:	f083 0301 	eor.w	r3, r3, #1
 800a090:	b2db      	uxtb	r3, r3
 800a092:	2b00      	cmp	r3, #0
 800a094:	d002      	beq.n	800a09c <mg_http_get_request_len+0x30>
 800a096:	f04f 33ff 	mov.w	r3, #4294967295
 800a09a:	e031      	b.n	800a100 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00c      	beq.n	800a0bc <mg_http_get_request_len+0x50>
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b0a      	cmp	r3, #10
 800a0ac:	d106      	bne.n	800a0bc <mg_http_get_request_len+0x50>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	2b0a      	cmp	r3, #10
 800a0ba:	d016      	beq.n	800a0ea <mg_http_get_request_len+0x7e>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d916      	bls.n	800a0f0 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	2b0a      	cmp	r3, #10
 800a0cc:	d110      	bne.n	800a0f0 <mg_http_get_request_len+0x84>
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	4413      	add	r3, r2
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	2b0d      	cmp	r3, #13
 800a0da:	d109      	bne.n	800a0f0 <mg_http_get_request_len+0x84>
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	3b02      	subs	r3, #2
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b0a      	cmp	r3, #10
 800a0e8:	d102      	bne.n	800a0f0 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	e007      	b.n	800a100 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d3be      	bcc.n	800a07c <mg_http_get_request_len+0x10>
  }
  return 0;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 800a112:	6838      	ldr	r0, [r7, #0]
 800a114:	f7f6 f95c 	bl	80003d0 <strlen>
 800a118:	61b8      	str	r0, [r7, #24]
 800a11a:	231e      	movs	r3, #30
 800a11c:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800a11e:	2300      	movs	r3, #0
 800a120:	61fb      	str	r3, [r7, #28]
 800a122:	e01f      	b.n	800a164 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	3302      	adds	r3, #2
 800a128:	011b      	lsls	r3, r3, #4
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	4413      	add	r3, r2
 800a12e:	613b      	str	r3, [r7, #16]
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	011b      	lsls	r3, r3, #4
 800a134:	3328      	adds	r3, #40	@ 0x28
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	4413      	add	r3, r2
 800a13a:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	429a      	cmp	r2, r3
 800a144:	d10b      	bne.n	800a15e <mg_http_get_header+0x56>
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	4618      	mov	r0, r3
 800a150:	f7ff fd4b 	bl	8009bea <mg_ncasecmp>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d101      	bne.n	800a15e <mg_http_get_header+0x56>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	e010      	b.n	800a180 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	3301      	adds	r3, #1
 800a162:	61fb      	str	r3, [r7, #28]
 800a164:	69fa      	ldr	r2, [r7, #28]
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d208      	bcs.n	800a17e <mg_http_get_header+0x76>
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	3302      	adds	r3, #2
 800a172:	011b      	lsls	r3, r3, #4
 800a174:	4413      	add	r3, r2
 800a176:	3304      	adds	r3, #4
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1d2      	bne.n	800a124 <mg_http_get_header+0x1c>
  }
  return NULL;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3720      	adds	r7, #32
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 800a192:	79fb      	ldrb	r3, [r7, #7]
 800a194:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a198:	2b80      	cmp	r3, #128	@ 0x80
 800a19a:	bf0c      	ite	eq
 800a19c:	2301      	moveq	r3, #1
 800a19e:	2300      	movne	r3, #0
 800a1a0:	b2db      	uxtb	r3, r3
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b086      	sub	sp, #24
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
 800a1b6:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c <= '~') return 1;  // Usual ascii printed char
 800a1ca:	7cfb      	ldrb	r3, [r7, #19]
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	d904      	bls.n	800a1da <clen+0x2c>
 800a1d0:	7cfb      	ldrb	r3, [r7, #19]
 800a1d2:	2b7e      	cmp	r3, #126	@ 0x7e
 800a1d4:	d801      	bhi.n	800a1da <clen+0x2c>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e054      	b.n	800a284 <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 800a1da:	7cfb      	ldrb	r3, [r7, #19]
 800a1dc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a1e0:	2bc0      	cmp	r3, #192	@ 0xc0
 800a1e2:	d10d      	bne.n	800a200 <clen+0x52>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	dd0a      	ble.n	800a200 <clen+0x52>
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7ff ffc9 	bl	800a188 <vcb>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <clen+0x52>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e041      	b.n	800a284 <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 800a200:	7cfb      	ldrb	r3, [r7, #19]
 800a202:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a206:	2be0      	cmp	r3, #224	@ 0xe0
 800a208:	d116      	bne.n	800a238 <clen+0x8a>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	dd13      	ble.n	800a238 <clen+0x8a>
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	3301      	adds	r3, #1
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff ffb6 	bl	800a188 <vcb>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <clen+0x8a>
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	3302      	adds	r3, #2
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	4618      	mov	r0, r3
 800a22a:	f7ff ffad 	bl	800a188 <vcb>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d001      	beq.n	800a238 <clen+0x8a>
 800a234:	2303      	movs	r3, #3
 800a236:	e025      	b.n	800a284 <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 800a238:	7cfb      	ldrb	r3, [r7, #19]
 800a23a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800a23e:	2bf0      	cmp	r3, #240	@ 0xf0
 800a240:	d11f      	bne.n	800a282 <clen+0xd4>
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b03      	cmp	r3, #3
 800a246:	dd1c      	ble.n	800a282 <clen+0xd4>
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	3301      	adds	r3, #1
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff ff9a 	bl	800a188 <vcb>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d013      	beq.n	800a282 <clen+0xd4>
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	3302      	adds	r3, #2
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	4618      	mov	r0, r3
 800a262:	f7ff ff91 	bl	800a188 <vcb>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00a      	beq.n	800a282 <clen+0xd4>
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	3303      	adds	r3, #3
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff ff88 	bl	800a188 <vcb>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <clen+0xd4>
    return 4;
 800a27e:	2304      	movs	r3, #4
 800a280:	e000      	b.n	800a284 <clen+0xd6>
  return 0;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3718      	adds	r7, #24
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	68fa      	ldr	r2, [r7, #12]
 800a29c:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 800a29e:	e007      	b.n	800a2b0 <skiptorn+0x24>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	60fb      	str	r3, [r7, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	605a      	str	r2, [r3, #4]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d207      	bcs.n	800a2c8 <skiptorn+0x3c>
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b0a      	cmp	r3, #10
 800a2be:	d003      	beq.n	800a2c8 <skiptorn+0x3c>
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	2b0d      	cmp	r3, #13
 800a2c6:	d1eb      	bne.n	800a2a0 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 800a2c8:	68fa      	ldr	r2, [r7, #12]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d208      	bcs.n	800a2e2 <skiptorn+0x56>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	2b0d      	cmp	r3, #13
 800a2d6:	d106      	bne.n	800a2e6 <skiptorn+0x5a>
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b0a      	cmp	r3, #10
 800a2e0:	d001      	beq.n	800a2e6 <skiptorn+0x5a>
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	e017      	b.n	800a316 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d206      	bcs.n	800a2fc <skiptorn+0x70>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	2b0d      	cmp	r3, #13
 800a2f4:	d102      	bne.n	800a2fc <skiptorn+0x70>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	429a      	cmp	r2, r3
 800a302:	d205      	bcs.n	800a310 <skiptorn+0x84>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	60fa      	str	r2, [r7, #12]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	2b0a      	cmp	r3, #10
 800a30e:	d001      	beq.n	800a314 <skiptorn+0x88>
 800a310:	2300      	movs	r3, #0
 800a312:	e000      	b.n	800a316 <skiptorn+0x8a>
  return s;
 800a314:	68fb      	ldr	r3, [r7, #12]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a320:	4770      	bx	lr

0800a322 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 800a322:	b580      	push	{r7, lr}
 800a324:	b08a      	sub	sp, #40	@ 0x28
 800a326:	af00      	add	r7, sp, #0
 800a328:	60f8      	str	r0, [r7, #12]
 800a32a:	60b9      	str	r1, [r7, #8]
 800a32c:	607a      	str	r2, [r7, #4]
 800a32e:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 800a330:	2300      	movs	r3, #0
 800a332:	627b      	str	r3, [r7, #36]	@ 0x24
 800a334:	e09a      	b.n	800a46c <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 800a336:	2300      	movs	r3, #0
 800a338:	61bb      	str	r3, [r7, #24]
 800a33a:	2300      	movs	r3, #0
 800a33c:	61fb      	str	r3, [r7, #28]
 800a33e:	2300      	movs	r3, #0
 800a340:	613b      	str	r3, [r7, #16]
 800a342:	2300      	movs	r3, #0
 800a344:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d301      	bcc.n	800a352 <mg_http_parse_headers+0x30>
 800a34e:	2300      	movs	r3, #0
 800a350:	e092      	b.n	800a478 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b0a      	cmp	r3, #10
 800a358:	f000 808d 	beq.w	800a476 <mg_http_parse_headers+0x154>
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b0d      	cmp	r3, #13
 800a362:	d105      	bne.n	800a370 <mg_http_parse_headers+0x4e>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	3301      	adds	r3, #1
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b0a      	cmp	r3, #10
 800a36c:	f000 8083 	beq.w	800a476 <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 800a374:	e007      	b.n	800a386 <mg_http_parse_headers+0x64>
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	4413      	add	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	69fa      	ldr	r2, [r7, #28]
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	4413      	add	r3, r2
 800a384:	61fb      	str	r3, [r7, #28]
 800a386:	68fa      	ldr	r2, [r7, #12]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d20b      	bcs.n	800a3a6 <mg_http_parse_headers+0x84>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b3a      	cmp	r3, #58	@ 0x3a
 800a394:	d007      	beq.n	800a3a6 <mg_http_parse_headers+0x84>
 800a396:	68b9      	ldr	r1, [r7, #8]
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f7ff ff08 	bl	800a1ae <clen>
 800a39e:	6238      	str	r0, [r7, #32]
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e7      	bne.n	800a376 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <mg_http_parse_headers+0x8e>
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	e063      	b.n	800a478 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d206      	bcs.n	800a3c6 <mg_http_parse_headers+0xa4>
 800a3b8:	68b9      	ldr	r1, [r7, #8]
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fef7 	bl	800a1ae <clen>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <mg_http_parse_headers+0xa8>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e056      	b.n	800a478 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	1c5a      	adds	r2, r3, #1
 800a3ce:	60fa      	str	r2, [r7, #12]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	2b3a      	cmp	r3, #58	@ 0x3a
 800a3d4:	d004      	beq.n	800a3e0 <mg_http_parse_headers+0xbe>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e04e      	b.n	800a478 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3301      	adds	r3, #1
 800a3de:	60fb      	str	r3, [r7, #12]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d207      	bcs.n	800a3f8 <mg_http_parse_headers+0xd6>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b20      	cmp	r3, #32
 800a3ee:	d0f4      	beq.n	800a3da <mg_http_parse_headers+0xb8>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b09      	cmp	r3, #9
 800a3f6:	d0f0      	beq.n	800a3da <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 800a3f8:	f107 0310 	add.w	r3, r7, #16
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	68b9      	ldr	r1, [r7, #8]
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f7ff ff43 	bl	800a28c <skiptorn>
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d104      	bne.n	800a418 <mg_http_parse_headers+0xf6>
 800a40e:	2300      	movs	r3, #0
 800a410:	e032      	b.n	800a478 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	3b01      	subs	r3, #1
 800a416:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00d      	beq.n	800a43a <mg_http_parse_headers+0x118>
 800a41e:	693a      	ldr	r2, [r7, #16]
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	3b01      	subs	r3, #1
 800a424:	4413      	add	r3, r2
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	2b20      	cmp	r3, #32
 800a42a:	d0f2      	beq.n	800a412 <mg_http_parse_headers+0xf0>
 800a42c:	693a      	ldr	r2, [r7, #16]
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	3b01      	subs	r3, #1
 800a432:	4413      	add	r3, r2
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	2b09      	cmp	r3, #9
 800a438:	d0eb      	beq.n	800a412 <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 800a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43c:	011b      	lsls	r3, r3, #4
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	4413      	add	r3, r2
 800a442:	461a      	mov	r2, r3
 800a444:	f107 0318 	add.w	r3, r7, #24
 800a448:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a44c:	e882 0003 	stmia.w	r2, {r0, r1}
 800a450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	4413      	add	r3, r2
 800a458:	3308      	adds	r3, #8
 800a45a:	f107 0210 	add.w	r2, r7, #16
 800a45e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a462:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 800a466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a468:	3301      	adds	r3, #1
 800a46a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a46c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	f4ff af60 	bcc.w	800a336 <mg_http_parse_headers+0x14>
  }
  return true;
 800a476:	2301      	movs	r3, #1
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3728      	adds	r7, #40	@ 0x28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 800a480:	b580      	push	{r7, lr}
 800a482:	b092      	sub	sp, #72	@ 0x48
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 800a48c:	68b9      	ldr	r1, [r7, #8]
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff fdec 	bl	800a06c <mg_http_get_request_len>
 800a494:	6478      	str	r0, [r7, #68]	@ 0x44
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d003      	beq.n	800a4a4 <mg_http_parse+0x24>
 800a49c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	e000      	b.n	800a4a6 <mg_http_parse+0x26>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	643b      	str	r3, [r7, #64]	@ 0x40
  const struct mg_str *cl;
  size_t n;
  bool version_prefix_valid;

  memset(hm, 0, sizeof(*hm));
 800a4a8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f01b f96c 	bl	802578c <memset>
  if (req_len <= 0) return req_len;
 800a4b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	dc01      	bgt.n	800a4be <mg_http_parse+0x3e>
 800a4ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a4bc:	e18f      	b.n	800a7de <mg_http_parse+0x35e>

  hm->message.buf = hm->head.buf = (char *) s;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a4d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 800a4da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 800a4fe:	e009      	b.n	800a514 <mg_http_parse+0x94>
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a504:	4413      	add	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a50e:	441a      	add	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	605a      	str	r2, [r3, #4]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a518:	429a      	cmp	r2, r3
 800a51a:	d20b      	bcs.n	800a534 <mg_http_parse+0xb4>
 800a51c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f7ff fe45 	bl	800a1ae <clen>
 800a524:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800a526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d1e9      	bne.n	800a500 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800a52c:	e002      	b.n	800a534 <mg_http_parse+0xb4>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3301      	adds	r3, #1
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a538:	429a      	cmp	r2, r3
 800a53a:	d203      	bcs.n	800a544 <mg_http_parse+0xc4>
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b20      	cmp	r3, #32
 800a542:	d0f4      	beq.n	800a52e <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 800a54a:	e009      	b.n	800a560 <mg_http_parse+0xe0>
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a550:	4413      	add	r3, r2
 800a552:	60fb      	str	r3, [r7, #12]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	68da      	ldr	r2, [r3, #12]
 800a558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55a:	441a      	add	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	60da      	str	r2, [r3, #12]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a564:	429a      	cmp	r2, r3
 800a566:	d20b      	bcs.n	800a580 <mg_http_parse+0x100>
 800a568:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a56a:	68f8      	ldr	r0, [r7, #12]
 800a56c:	f7ff fe1f 	bl	800a1ae <clen>
 800a570:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800a572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e9      	bne.n	800a54c <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 800a578:	e002      	b.n	800a580 <mg_http_parse+0x100>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a584:	429a      	cmp	r2, r3
 800a586:	d203      	bcs.n	800a590 <mg_http_parse+0x110>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	2b20      	cmp	r3, #32
 800a58e:	d0f4      	beq.n	800a57a <mg_http_parse+0xfa>
  is_response = hm->method.len > 5 &&
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	2b05      	cmp	r3, #5
 800a596:	d90b      	bls.n	800a5b0 <mg_http_parse+0x130>
                (mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	2205      	movs	r2, #5
 800a59e:	4992      	ldr	r1, [pc, #584]	@ (800a7e8 <mg_http_parse+0x368>)
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff fb22 	bl	8009bea <mg_ncasecmp>
 800a5a6:	4603      	mov	r3, r0
  is_response = hm->method.len > 5 &&
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <mg_http_parse+0x130>
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e000      	b.n	800a5b2 <mg_http_parse+0x132>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	3318      	adds	r3, #24
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f7ff fe65 	bl	800a28c <skiptorn>
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d101      	bne.n	800a5ce <mg_http_parse+0x14e>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e107      	b.n	800a7de <mg_http_parse+0x35e>
  // If we're given a version, check that it is HTTP/x.x
  version_prefix_valid = hm->proto.len > 5 &&
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	2b05      	cmp	r3, #5
 800a5d4:	d90b      	bls.n	800a5ee <mg_http_parse+0x16e>
                         (mg_ncasecmp(hm->proto.buf, "HTTP/", 5) == 0);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	699b      	ldr	r3, [r3, #24]
 800a5da:	2205      	movs	r2, #5
 800a5dc:	4982      	ldr	r1, [pc, #520]	@ (800a7e8 <mg_http_parse+0x368>)
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f7ff fb03 	bl	8009bea <mg_ncasecmp>
 800a5e4:	4603      	mov	r3, r0
  version_prefix_valid = hm->proto.len > 5 &&
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <mg_http_parse+0x16e>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <mg_http_parse+0x170>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a5f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (!is_response && hm->proto.len > 0 &&
 800a600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a602:	2b00      	cmp	r3, #0
 800a604:	d12f      	bne.n	800a666 <mg_http_parse+0x1e6>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d02b      	beq.n	800a666 <mg_http_parse+0x1e6>
    (!version_prefix_valid || hm->proto.len != 8 ||
 800a60e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a612:	f083 0301 	eor.w	r3, r3, #1
 800a616:	b2db      	uxtb	r3, r3
  if (!is_response && hm->proto.len > 0 &&
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d121      	bne.n	800a660 <mg_http_parse+0x1e0>
    (!version_prefix_valid || hm->proto.len != 8 ||
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	69db      	ldr	r3, [r3, #28]
 800a620:	2b08      	cmp	r3, #8
 800a622:	d11d      	bne.n	800a660 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	3305      	adds	r3, #5
 800a62a:	781b      	ldrb	r3, [r3, #0]
    (!version_prefix_valid || hm->proto.len != 8 ||
 800a62c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a62e:	d917      	bls.n	800a660 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699b      	ldr	r3, [r3, #24]
 800a634:	3305      	adds	r3, #5
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b39      	cmp	r3, #57	@ 0x39
 800a63a:	d811      	bhi.n	800a660 <mg_http_parse+0x1e0>
    (hm->proto.buf[6] != '.') ||
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	3306      	adds	r3, #6
 800a642:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 800a644:	2b2e      	cmp	r3, #46	@ 0x2e
 800a646:	d10b      	bne.n	800a660 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	3307      	adds	r3, #7
 800a64e:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[6] != '.') ||
 800a650:	2b2f      	cmp	r3, #47	@ 0x2f
 800a652:	d905      	bls.n	800a660 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	3307      	adds	r3, #7
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	2b39      	cmp	r3, #57	@ 0x39
 800a65e:	d902      	bls.n	800a666 <mg_http_parse+0x1e6>
    return -1;
 800a660:	f04f 33ff 	mov.w	r3, #4294967295
 800a664:	e0bb      	b.n	800a7de <mg_http_parse+0x35e>
  }

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6898      	ldr	r0, [r3, #8]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	461a      	mov	r2, r3
 800a670:	213f      	movs	r1, #63	@ 0x3f
 800a672:	f7f5 fe5d 	bl	8000330 <memchr>
 800a676:	6338      	str	r0, [r7, #48]	@ 0x30
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d015      	beq.n	800a6aa <mg_http_parse+0x22a>
    hm->query.buf = (char *) qs + 1;
 800a67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a680:	1c5a      	adds	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	441a      	add	r2, r3
 800a690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a692:	3301      	adds	r3, #1
 800a694:	1ad3      	subs	r3, r2, r3
 800a696:	461a      	mov	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6a2:	1ad3      	subs	r3, r2, r3
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d003      	beq.n	800a6ba <mg_http_parse+0x23a>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d102      	bne.n	800a6c0 <mg_http_parse+0x240>
 800a6ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a6be:	e08e      	b.n	800a7de <mg_http_parse+0x35e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f103 0220 	add.w	r2, r3, #32
 800a6c6:	231e      	movs	r3, #30
 800a6c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a6ca:	68f8      	ldr	r0, [r7, #12]
 800a6cc:	f7ff fe29 	bl	800a322 <mg_http_parse_headers>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	f083 0301 	eor.w	r3, r3, #1
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d002      	beq.n	800a6e2 <mg_http_parse+0x262>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 800a6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e0:	e07d      	b.n	800a7de <mg_http_parse+0x35e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 800a6e2:	4942      	ldr	r1, [pc, #264]	@ (800a7ec <mg_http_parse+0x36c>)
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f7ff fd0f 	bl	800a108 <mg_http_get_header>
 800a6ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d018      	beq.n	800a724 <mg_http_parse+0x2a4>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 800a6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6fe:	f7ff fab5 	bl	8009c6c <mg_to_size_t>
 800a702:	4603      	mov	r3, r0
 800a704:	f083 0301 	eor.w	r3, r3, #1
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d002      	beq.n	800a714 <mg_http_parse+0x294>
 800a70e:	f04f 33ff 	mov.w	r3, #4294967295
 800a712:	e064      	b.n	800a7de <mg_http_parse+0x35e>
    hm->message.len = (size_t) req_len + hm->body.len;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a71a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a71c:	441a      	add	r2, r3
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72e:	d12a      	bne.n	800a786 <mg_http_parse+0x306>
 800a730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a732:	2b00      	cmp	r3, #0
 800a734:	d127      	bne.n	800a786 <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 800a736:	f107 0314 	add.w	r3, r7, #20
 800a73a:	492d      	ldr	r1, [pc, #180]	@ (800a7f0 <mg_http_parse+0x370>)
 800a73c:	4618      	mov	r0, r3
 800a73e:	f00b fb05 	bl	8015d4c <mg_str_s>
 800a742:	6879      	ldr	r1, [r7, #4]
 800a744:	f107 0314 	add.w	r3, r7, #20
 800a748:	cb0c      	ldmia	r3, {r2, r3}
 800a74a:	c903      	ldmia	r1, {r0, r1}
 800a74c:	f00b fbc1 	bl	8015ed2 <mg_strcasecmp>
 800a750:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 800a752:	2b00      	cmp	r3, #0
 800a754:	d017      	beq.n	800a786 <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 800a756:	f107 031c 	add.w	r3, r7, #28
 800a75a:	4926      	ldr	r1, [pc, #152]	@ (800a7f4 <mg_http_parse+0x374>)
 800a75c:	4618      	mov	r0, r3
 800a75e:	f00b faf5 	bl	8015d4c <mg_str_s>
 800a762:	6879      	ldr	r1, [r7, #4]
 800a764:	f107 031c 	add.w	r3, r7, #28
 800a768:	cb0c      	ldmia	r3, {r2, r3}
 800a76a:	c903      	ldmia	r1, {r0, r1}
 800a76c:	f00b fbb1 	bl	8015ed2 <mg_strcasecmp>
 800a770:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 800a772:	2b00      	cmp	r3, #0
 800a774:	d007      	beq.n	800a786 <mg_http_parse+0x306>
    hm->body.len = 0;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800a77e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a790:	d11b      	bne.n	800a7ca <mg_http_parse+0x34a>
 800a792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a794:	2b00      	cmp	r3, #0
 800a796:	d018      	beq.n	800a7ca <mg_http_parse+0x34a>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 800a798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a79c:	4916      	ldr	r1, [pc, #88]	@ (800a7f8 <mg_http_parse+0x378>)
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f00b fad4 	bl	8015d4c <mg_str_s>
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7aa:	cb0c      	ldmia	r3, {r2, r3}
 800a7ac:	3108      	adds	r1, #8
 800a7ae:	c903      	ldmia	r1, {r0, r1}
 800a7b0:	f00b fb8f 	bl	8015ed2 <mg_strcasecmp>
 800a7b4:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d107      	bne.n	800a7ca <mg_http_parse+0x34a>
    hm->body.len = 0;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 800a7c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800a7d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d202      	bcs.n	800a7dc <mg_http_parse+0x35c>
 800a7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7da:	e000      	b.n	800a7de <mg_http_parse+0x35e>

  return req_len;
 800a7dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3748      	adds	r7, #72	@ 0x48
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	08026820 	.word	0x08026820
 800a7ec:	08026828 	.word	0x08026828
 800a7f0:	08026838 	.word	0x08026838
 800a7f4:	0802683c 	.word	0x0802683c
 800a7f8:	08026844 	.word	0x08026844

0800a7fc <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3b64      	subs	r3, #100	@ 0x64
 800a808:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800a80c:	4293      	cmp	r3, r2
 800a80e:	f200 8469 	bhi.w	800b0e4 <mg_http_status_code_str+0x8e8>
 800a812:	a101      	add	r1, pc, #4	@ (adr r1, 800a818 <mg_http_status_code_str+0x1c>)
 800a814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a818:	0800afe9 	.word	0x0800afe9
 800a81c:	0800afed 	.word	0x0800afed
 800a820:	0800aff1 	.word	0x0800aff1
 800a824:	0800b0e5 	.word	0x0800b0e5
 800a828:	0800b0e5 	.word	0x0800b0e5
 800a82c:	0800b0e5 	.word	0x0800b0e5
 800a830:	0800b0e5 	.word	0x0800b0e5
 800a834:	0800b0e5 	.word	0x0800b0e5
 800a838:	0800b0e5 	.word	0x0800b0e5
 800a83c:	0800b0e5 	.word	0x0800b0e5
 800a840:	0800b0e5 	.word	0x0800b0e5
 800a844:	0800b0e5 	.word	0x0800b0e5
 800a848:	0800b0e5 	.word	0x0800b0e5
 800a84c:	0800b0e5 	.word	0x0800b0e5
 800a850:	0800b0e5 	.word	0x0800b0e5
 800a854:	0800b0e5 	.word	0x0800b0e5
 800a858:	0800b0e5 	.word	0x0800b0e5
 800a85c:	0800b0e5 	.word	0x0800b0e5
 800a860:	0800b0e5 	.word	0x0800b0e5
 800a864:	0800b0e5 	.word	0x0800b0e5
 800a868:	0800b0e5 	.word	0x0800b0e5
 800a86c:	0800b0e5 	.word	0x0800b0e5
 800a870:	0800b0e5 	.word	0x0800b0e5
 800a874:	0800b0e5 	.word	0x0800b0e5
 800a878:	0800b0e5 	.word	0x0800b0e5
 800a87c:	0800b0e5 	.word	0x0800b0e5
 800a880:	0800b0e5 	.word	0x0800b0e5
 800a884:	0800b0e5 	.word	0x0800b0e5
 800a888:	0800b0e5 	.word	0x0800b0e5
 800a88c:	0800b0e5 	.word	0x0800b0e5
 800a890:	0800b0e5 	.word	0x0800b0e5
 800a894:	0800b0e5 	.word	0x0800b0e5
 800a898:	0800b0e5 	.word	0x0800b0e5
 800a89c:	0800b0e5 	.word	0x0800b0e5
 800a8a0:	0800b0e5 	.word	0x0800b0e5
 800a8a4:	0800b0e5 	.word	0x0800b0e5
 800a8a8:	0800b0e5 	.word	0x0800b0e5
 800a8ac:	0800b0e5 	.word	0x0800b0e5
 800a8b0:	0800b0e5 	.word	0x0800b0e5
 800a8b4:	0800b0e5 	.word	0x0800b0e5
 800a8b8:	0800b0e5 	.word	0x0800b0e5
 800a8bc:	0800b0e5 	.word	0x0800b0e5
 800a8c0:	0800b0e5 	.word	0x0800b0e5
 800a8c4:	0800b0e5 	.word	0x0800b0e5
 800a8c8:	0800b0e5 	.word	0x0800b0e5
 800a8cc:	0800b0e5 	.word	0x0800b0e5
 800a8d0:	0800b0e5 	.word	0x0800b0e5
 800a8d4:	0800b0e5 	.word	0x0800b0e5
 800a8d8:	0800b0e5 	.word	0x0800b0e5
 800a8dc:	0800b0e5 	.word	0x0800b0e5
 800a8e0:	0800b0e5 	.word	0x0800b0e5
 800a8e4:	0800b0e5 	.word	0x0800b0e5
 800a8e8:	0800b0e5 	.word	0x0800b0e5
 800a8ec:	0800b0e5 	.word	0x0800b0e5
 800a8f0:	0800b0e5 	.word	0x0800b0e5
 800a8f4:	0800b0e5 	.word	0x0800b0e5
 800a8f8:	0800b0e5 	.word	0x0800b0e5
 800a8fc:	0800b0e5 	.word	0x0800b0e5
 800a900:	0800b0e5 	.word	0x0800b0e5
 800a904:	0800b0e5 	.word	0x0800b0e5
 800a908:	0800b0e5 	.word	0x0800b0e5
 800a90c:	0800b0e5 	.word	0x0800b0e5
 800a910:	0800b0e5 	.word	0x0800b0e5
 800a914:	0800b0e5 	.word	0x0800b0e5
 800a918:	0800b0e5 	.word	0x0800b0e5
 800a91c:	0800b0e5 	.word	0x0800b0e5
 800a920:	0800b0e5 	.word	0x0800b0e5
 800a924:	0800b0e5 	.word	0x0800b0e5
 800a928:	0800b0e5 	.word	0x0800b0e5
 800a92c:	0800b0e5 	.word	0x0800b0e5
 800a930:	0800b0e5 	.word	0x0800b0e5
 800a934:	0800b0e5 	.word	0x0800b0e5
 800a938:	0800b0e5 	.word	0x0800b0e5
 800a93c:	0800b0e5 	.word	0x0800b0e5
 800a940:	0800b0e5 	.word	0x0800b0e5
 800a944:	0800b0e5 	.word	0x0800b0e5
 800a948:	0800b0e5 	.word	0x0800b0e5
 800a94c:	0800b0e5 	.word	0x0800b0e5
 800a950:	0800b0e5 	.word	0x0800b0e5
 800a954:	0800b0e5 	.word	0x0800b0e5
 800a958:	0800b0e5 	.word	0x0800b0e5
 800a95c:	0800b0e5 	.word	0x0800b0e5
 800a960:	0800b0e5 	.word	0x0800b0e5
 800a964:	0800b0e5 	.word	0x0800b0e5
 800a968:	0800b0e5 	.word	0x0800b0e5
 800a96c:	0800b0e5 	.word	0x0800b0e5
 800a970:	0800b0e5 	.word	0x0800b0e5
 800a974:	0800b0e5 	.word	0x0800b0e5
 800a978:	0800b0e5 	.word	0x0800b0e5
 800a97c:	0800b0e5 	.word	0x0800b0e5
 800a980:	0800b0e5 	.word	0x0800b0e5
 800a984:	0800b0e5 	.word	0x0800b0e5
 800a988:	0800b0e5 	.word	0x0800b0e5
 800a98c:	0800b0e5 	.word	0x0800b0e5
 800a990:	0800b0e5 	.word	0x0800b0e5
 800a994:	0800b0e5 	.word	0x0800b0e5
 800a998:	0800b0e5 	.word	0x0800b0e5
 800a99c:	0800b0e5 	.word	0x0800b0e5
 800a9a0:	0800b0e5 	.word	0x0800b0e5
 800a9a4:	0800b0e5 	.word	0x0800b0e5
 800a9a8:	0800aff5 	.word	0x0800aff5
 800a9ac:	0800aff9 	.word	0x0800aff9
 800a9b0:	0800affd 	.word	0x0800affd
 800a9b4:	0800b001 	.word	0x0800b001
 800a9b8:	0800b005 	.word	0x0800b005
 800a9bc:	0800b009 	.word	0x0800b009
 800a9c0:	0800b00d 	.word	0x0800b00d
 800a9c4:	0800b011 	.word	0x0800b011
 800a9c8:	0800b015 	.word	0x0800b015
 800a9cc:	0800b0e5 	.word	0x0800b0e5
 800a9d0:	0800b0e5 	.word	0x0800b0e5
 800a9d4:	0800b0e5 	.word	0x0800b0e5
 800a9d8:	0800b0e5 	.word	0x0800b0e5
 800a9dc:	0800b0e5 	.word	0x0800b0e5
 800a9e0:	0800b0e5 	.word	0x0800b0e5
 800a9e4:	0800b0e5 	.word	0x0800b0e5
 800a9e8:	0800b0e5 	.word	0x0800b0e5
 800a9ec:	0800b0e5 	.word	0x0800b0e5
 800a9f0:	0800b0e5 	.word	0x0800b0e5
 800a9f4:	0800b0e5 	.word	0x0800b0e5
 800a9f8:	0800b0e5 	.word	0x0800b0e5
 800a9fc:	0800b0e5 	.word	0x0800b0e5
 800aa00:	0800b0e5 	.word	0x0800b0e5
 800aa04:	0800b0e5 	.word	0x0800b0e5
 800aa08:	0800b0e5 	.word	0x0800b0e5
 800aa0c:	0800b0e5 	.word	0x0800b0e5
 800aa10:	0800b019 	.word	0x0800b019
 800aa14:	0800b0e5 	.word	0x0800b0e5
 800aa18:	0800b0e5 	.word	0x0800b0e5
 800aa1c:	0800b0e5 	.word	0x0800b0e5
 800aa20:	0800b0e5 	.word	0x0800b0e5
 800aa24:	0800b0e5 	.word	0x0800b0e5
 800aa28:	0800b0e5 	.word	0x0800b0e5
 800aa2c:	0800b0e5 	.word	0x0800b0e5
 800aa30:	0800b0e5 	.word	0x0800b0e5
 800aa34:	0800b0e5 	.word	0x0800b0e5
 800aa38:	0800b0e5 	.word	0x0800b0e5
 800aa3c:	0800b0e5 	.word	0x0800b0e5
 800aa40:	0800b0e5 	.word	0x0800b0e5
 800aa44:	0800b0e5 	.word	0x0800b0e5
 800aa48:	0800b0e5 	.word	0x0800b0e5
 800aa4c:	0800b0e5 	.word	0x0800b0e5
 800aa50:	0800b0e5 	.word	0x0800b0e5
 800aa54:	0800b0e5 	.word	0x0800b0e5
 800aa58:	0800b0e5 	.word	0x0800b0e5
 800aa5c:	0800b0e5 	.word	0x0800b0e5
 800aa60:	0800b0e5 	.word	0x0800b0e5
 800aa64:	0800b0e5 	.word	0x0800b0e5
 800aa68:	0800b0e5 	.word	0x0800b0e5
 800aa6c:	0800b0e5 	.word	0x0800b0e5
 800aa70:	0800b0e5 	.word	0x0800b0e5
 800aa74:	0800b0e5 	.word	0x0800b0e5
 800aa78:	0800b0e5 	.word	0x0800b0e5
 800aa7c:	0800b0e5 	.word	0x0800b0e5
 800aa80:	0800b0e5 	.word	0x0800b0e5
 800aa84:	0800b0e5 	.word	0x0800b0e5
 800aa88:	0800b0e5 	.word	0x0800b0e5
 800aa8c:	0800b0e5 	.word	0x0800b0e5
 800aa90:	0800b0e5 	.word	0x0800b0e5
 800aa94:	0800b0e5 	.word	0x0800b0e5
 800aa98:	0800b0e5 	.word	0x0800b0e5
 800aa9c:	0800b0e5 	.word	0x0800b0e5
 800aaa0:	0800b0e5 	.word	0x0800b0e5
 800aaa4:	0800b0e5 	.word	0x0800b0e5
 800aaa8:	0800b0e5 	.word	0x0800b0e5
 800aaac:	0800b0e5 	.word	0x0800b0e5
 800aab0:	0800b0e5 	.word	0x0800b0e5
 800aab4:	0800b0e5 	.word	0x0800b0e5
 800aab8:	0800b0e5 	.word	0x0800b0e5
 800aabc:	0800b0e5 	.word	0x0800b0e5
 800aac0:	0800b0e5 	.word	0x0800b0e5
 800aac4:	0800b0e5 	.word	0x0800b0e5
 800aac8:	0800b0e5 	.word	0x0800b0e5
 800aacc:	0800b0e5 	.word	0x0800b0e5
 800aad0:	0800b0e5 	.word	0x0800b0e5
 800aad4:	0800b0e5 	.word	0x0800b0e5
 800aad8:	0800b0e5 	.word	0x0800b0e5
 800aadc:	0800b0e5 	.word	0x0800b0e5
 800aae0:	0800b0e5 	.word	0x0800b0e5
 800aae4:	0800b0e5 	.word	0x0800b0e5
 800aae8:	0800b0e5 	.word	0x0800b0e5
 800aaec:	0800b0e5 	.word	0x0800b0e5
 800aaf0:	0800b0e5 	.word	0x0800b0e5
 800aaf4:	0800b0e5 	.word	0x0800b0e5
 800aaf8:	0800b0e5 	.word	0x0800b0e5
 800aafc:	0800b0e5 	.word	0x0800b0e5
 800ab00:	0800b0e5 	.word	0x0800b0e5
 800ab04:	0800b0e5 	.word	0x0800b0e5
 800ab08:	0800b0e5 	.word	0x0800b0e5
 800ab0c:	0800b0e5 	.word	0x0800b0e5
 800ab10:	0800b0e5 	.word	0x0800b0e5
 800ab14:	0800b0e5 	.word	0x0800b0e5
 800ab18:	0800b0e5 	.word	0x0800b0e5
 800ab1c:	0800b0e5 	.word	0x0800b0e5
 800ab20:	0800b0e5 	.word	0x0800b0e5
 800ab24:	0800b0e5 	.word	0x0800b0e5
 800ab28:	0800b0e5 	.word	0x0800b0e5
 800ab2c:	0800b0e5 	.word	0x0800b0e5
 800ab30:	0800b0e5 	.word	0x0800b0e5
 800ab34:	0800b0e5 	.word	0x0800b0e5
 800ab38:	0800b01d 	.word	0x0800b01d
 800ab3c:	0800b021 	.word	0x0800b021
 800ab40:	0800b025 	.word	0x0800b025
 800ab44:	0800b029 	.word	0x0800b029
 800ab48:	0800b02d 	.word	0x0800b02d
 800ab4c:	0800b031 	.word	0x0800b031
 800ab50:	0800b0e5 	.word	0x0800b0e5
 800ab54:	0800b035 	.word	0x0800b035
 800ab58:	0800b039 	.word	0x0800b039
 800ab5c:	0800b0e5 	.word	0x0800b0e5
 800ab60:	0800b0e5 	.word	0x0800b0e5
 800ab64:	0800b0e5 	.word	0x0800b0e5
 800ab68:	0800b0e5 	.word	0x0800b0e5
 800ab6c:	0800b0e5 	.word	0x0800b0e5
 800ab70:	0800b0e5 	.word	0x0800b0e5
 800ab74:	0800b0e5 	.word	0x0800b0e5
 800ab78:	0800b0e5 	.word	0x0800b0e5
 800ab7c:	0800b0e5 	.word	0x0800b0e5
 800ab80:	0800b0e5 	.word	0x0800b0e5
 800ab84:	0800b0e5 	.word	0x0800b0e5
 800ab88:	0800b0e5 	.word	0x0800b0e5
 800ab8c:	0800b0e5 	.word	0x0800b0e5
 800ab90:	0800b0e5 	.word	0x0800b0e5
 800ab94:	0800b0e5 	.word	0x0800b0e5
 800ab98:	0800b0e5 	.word	0x0800b0e5
 800ab9c:	0800b0e5 	.word	0x0800b0e5
 800aba0:	0800b0e5 	.word	0x0800b0e5
 800aba4:	0800b0e5 	.word	0x0800b0e5
 800aba8:	0800b0e5 	.word	0x0800b0e5
 800abac:	0800b0e5 	.word	0x0800b0e5
 800abb0:	0800b0e5 	.word	0x0800b0e5
 800abb4:	0800b0e5 	.word	0x0800b0e5
 800abb8:	0800b0e5 	.word	0x0800b0e5
 800abbc:	0800b0e5 	.word	0x0800b0e5
 800abc0:	0800b0e5 	.word	0x0800b0e5
 800abc4:	0800b0e5 	.word	0x0800b0e5
 800abc8:	0800b0e5 	.word	0x0800b0e5
 800abcc:	0800b0e5 	.word	0x0800b0e5
 800abd0:	0800b0e5 	.word	0x0800b0e5
 800abd4:	0800b0e5 	.word	0x0800b0e5
 800abd8:	0800b0e5 	.word	0x0800b0e5
 800abdc:	0800b0e5 	.word	0x0800b0e5
 800abe0:	0800b0e5 	.word	0x0800b0e5
 800abe4:	0800b0e5 	.word	0x0800b0e5
 800abe8:	0800b0e5 	.word	0x0800b0e5
 800abec:	0800b0e5 	.word	0x0800b0e5
 800abf0:	0800b0e5 	.word	0x0800b0e5
 800abf4:	0800b0e5 	.word	0x0800b0e5
 800abf8:	0800b0e5 	.word	0x0800b0e5
 800abfc:	0800b0e5 	.word	0x0800b0e5
 800ac00:	0800b0e5 	.word	0x0800b0e5
 800ac04:	0800b0e5 	.word	0x0800b0e5
 800ac08:	0800b0e5 	.word	0x0800b0e5
 800ac0c:	0800b0e5 	.word	0x0800b0e5
 800ac10:	0800b0e5 	.word	0x0800b0e5
 800ac14:	0800b0e5 	.word	0x0800b0e5
 800ac18:	0800b0e5 	.word	0x0800b0e5
 800ac1c:	0800b0e5 	.word	0x0800b0e5
 800ac20:	0800b0e5 	.word	0x0800b0e5
 800ac24:	0800b0e5 	.word	0x0800b0e5
 800ac28:	0800b0e5 	.word	0x0800b0e5
 800ac2c:	0800b0e5 	.word	0x0800b0e5
 800ac30:	0800b0e5 	.word	0x0800b0e5
 800ac34:	0800b0e5 	.word	0x0800b0e5
 800ac38:	0800b0e5 	.word	0x0800b0e5
 800ac3c:	0800b0e5 	.word	0x0800b0e5
 800ac40:	0800b0e5 	.word	0x0800b0e5
 800ac44:	0800b0e5 	.word	0x0800b0e5
 800ac48:	0800b0e5 	.word	0x0800b0e5
 800ac4c:	0800b0e5 	.word	0x0800b0e5
 800ac50:	0800b0e5 	.word	0x0800b0e5
 800ac54:	0800b0e5 	.word	0x0800b0e5
 800ac58:	0800b0e5 	.word	0x0800b0e5
 800ac5c:	0800b0e5 	.word	0x0800b0e5
 800ac60:	0800b0e5 	.word	0x0800b0e5
 800ac64:	0800b0e5 	.word	0x0800b0e5
 800ac68:	0800b0e5 	.word	0x0800b0e5
 800ac6c:	0800b0e5 	.word	0x0800b0e5
 800ac70:	0800b0e5 	.word	0x0800b0e5
 800ac74:	0800b0e5 	.word	0x0800b0e5
 800ac78:	0800b0e5 	.word	0x0800b0e5
 800ac7c:	0800b0e5 	.word	0x0800b0e5
 800ac80:	0800b0e5 	.word	0x0800b0e5
 800ac84:	0800b0e5 	.word	0x0800b0e5
 800ac88:	0800b0e5 	.word	0x0800b0e5
 800ac8c:	0800b0e5 	.word	0x0800b0e5
 800ac90:	0800b0e5 	.word	0x0800b0e5
 800ac94:	0800b0e5 	.word	0x0800b0e5
 800ac98:	0800b0e5 	.word	0x0800b0e5
 800ac9c:	0800b0e5 	.word	0x0800b0e5
 800aca0:	0800b0e5 	.word	0x0800b0e5
 800aca4:	0800b0e5 	.word	0x0800b0e5
 800aca8:	0800b0e5 	.word	0x0800b0e5
 800acac:	0800b0e5 	.word	0x0800b0e5
 800acb0:	0800b0e5 	.word	0x0800b0e5
 800acb4:	0800b0e5 	.word	0x0800b0e5
 800acb8:	0800b0e5 	.word	0x0800b0e5
 800acbc:	0800b0e5 	.word	0x0800b0e5
 800acc0:	0800b0e5 	.word	0x0800b0e5
 800acc4:	0800b0e5 	.word	0x0800b0e5
 800acc8:	0800b03d 	.word	0x0800b03d
 800accc:	0800b041 	.word	0x0800b041
 800acd0:	0800b045 	.word	0x0800b045
 800acd4:	0800b049 	.word	0x0800b049
 800acd8:	0800b04d 	.word	0x0800b04d
 800acdc:	0800b051 	.word	0x0800b051
 800ace0:	0800b055 	.word	0x0800b055
 800ace4:	0800b059 	.word	0x0800b059
 800ace8:	0800b05d 	.word	0x0800b05d
 800acec:	0800b061 	.word	0x0800b061
 800acf0:	0800b065 	.word	0x0800b065
 800acf4:	0800b069 	.word	0x0800b069
 800acf8:	0800b06d 	.word	0x0800b06d
 800acfc:	0800b071 	.word	0x0800b071
 800ad00:	0800b075 	.word	0x0800b075
 800ad04:	0800b079 	.word	0x0800b079
 800ad08:	0800b07d 	.word	0x0800b07d
 800ad0c:	0800b081 	.word	0x0800b081
 800ad10:	0800b085 	.word	0x0800b085
 800ad14:	0800b0e5 	.word	0x0800b0e5
 800ad18:	0800b0e5 	.word	0x0800b0e5
 800ad1c:	0800b089 	.word	0x0800b089
 800ad20:	0800b08d 	.word	0x0800b08d
 800ad24:	0800b091 	.word	0x0800b091
 800ad28:	0800b095 	.word	0x0800b095
 800ad2c:	0800b0e5 	.word	0x0800b0e5
 800ad30:	0800b099 	.word	0x0800b099
 800ad34:	0800b0e5 	.word	0x0800b0e5
 800ad38:	0800b09d 	.word	0x0800b09d
 800ad3c:	0800b0a1 	.word	0x0800b0a1
 800ad40:	0800b0e5 	.word	0x0800b0e5
 800ad44:	0800b0a5 	.word	0x0800b0a5
 800ad48:	0800b0e5 	.word	0x0800b0e5
 800ad4c:	0800b0e5 	.word	0x0800b0e5
 800ad50:	0800b0e5 	.word	0x0800b0e5
 800ad54:	0800b0e5 	.word	0x0800b0e5
 800ad58:	0800b0e5 	.word	0x0800b0e5
 800ad5c:	0800b0e5 	.word	0x0800b0e5
 800ad60:	0800b0e5 	.word	0x0800b0e5
 800ad64:	0800b0e5 	.word	0x0800b0e5
 800ad68:	0800b0e5 	.word	0x0800b0e5
 800ad6c:	0800b0e5 	.word	0x0800b0e5
 800ad70:	0800b0e5 	.word	0x0800b0e5
 800ad74:	0800b0e5 	.word	0x0800b0e5
 800ad78:	0800b0a9 	.word	0x0800b0a9
 800ad7c:	0800b0e5 	.word	0x0800b0e5
 800ad80:	0800b0e5 	.word	0x0800b0e5
 800ad84:	0800b0e5 	.word	0x0800b0e5
 800ad88:	0800b0e5 	.word	0x0800b0e5
 800ad8c:	0800b0e5 	.word	0x0800b0e5
 800ad90:	0800b0e5 	.word	0x0800b0e5
 800ad94:	0800b0ad 	.word	0x0800b0ad
 800ad98:	0800b0e5 	.word	0x0800b0e5
 800ad9c:	0800b0e5 	.word	0x0800b0e5
 800ada0:	0800b0e5 	.word	0x0800b0e5
 800ada4:	0800b0e5 	.word	0x0800b0e5
 800ada8:	0800b0e5 	.word	0x0800b0e5
 800adac:	0800b0e5 	.word	0x0800b0e5
 800adb0:	0800b0e5 	.word	0x0800b0e5
 800adb4:	0800b0e5 	.word	0x0800b0e5
 800adb8:	0800b0e5 	.word	0x0800b0e5
 800adbc:	0800b0e5 	.word	0x0800b0e5
 800adc0:	0800b0e5 	.word	0x0800b0e5
 800adc4:	0800b0e5 	.word	0x0800b0e5
 800adc8:	0800b0e5 	.word	0x0800b0e5
 800adcc:	0800b0e5 	.word	0x0800b0e5
 800add0:	0800b0e5 	.word	0x0800b0e5
 800add4:	0800b0e5 	.word	0x0800b0e5
 800add8:	0800b0e5 	.word	0x0800b0e5
 800addc:	0800b0e5 	.word	0x0800b0e5
 800ade0:	0800b0e5 	.word	0x0800b0e5
 800ade4:	0800b0e5 	.word	0x0800b0e5
 800ade8:	0800b0e5 	.word	0x0800b0e5
 800adec:	0800b0e5 	.word	0x0800b0e5
 800adf0:	0800b0e5 	.word	0x0800b0e5
 800adf4:	0800b0e5 	.word	0x0800b0e5
 800adf8:	0800b0e5 	.word	0x0800b0e5
 800adfc:	0800b0e5 	.word	0x0800b0e5
 800ae00:	0800b0e5 	.word	0x0800b0e5
 800ae04:	0800b0e5 	.word	0x0800b0e5
 800ae08:	0800b0e5 	.word	0x0800b0e5
 800ae0c:	0800b0e5 	.word	0x0800b0e5
 800ae10:	0800b0e5 	.word	0x0800b0e5
 800ae14:	0800b0e5 	.word	0x0800b0e5
 800ae18:	0800b0e5 	.word	0x0800b0e5
 800ae1c:	0800b0e5 	.word	0x0800b0e5
 800ae20:	0800b0e5 	.word	0x0800b0e5
 800ae24:	0800b0e5 	.word	0x0800b0e5
 800ae28:	0800b0e5 	.word	0x0800b0e5
 800ae2c:	0800b0e5 	.word	0x0800b0e5
 800ae30:	0800b0e5 	.word	0x0800b0e5
 800ae34:	0800b0e5 	.word	0x0800b0e5
 800ae38:	0800b0e5 	.word	0x0800b0e5
 800ae3c:	0800b0e5 	.word	0x0800b0e5
 800ae40:	0800b0e5 	.word	0x0800b0e5
 800ae44:	0800b0e5 	.word	0x0800b0e5
 800ae48:	0800b0e5 	.word	0x0800b0e5
 800ae4c:	0800b0e5 	.word	0x0800b0e5
 800ae50:	0800b0e5 	.word	0x0800b0e5
 800ae54:	0800b0b1 	.word	0x0800b0b1
 800ae58:	0800b0b5 	.word	0x0800b0b5
 800ae5c:	0800b0b9 	.word	0x0800b0b9
 800ae60:	0800b0bd 	.word	0x0800b0bd
 800ae64:	0800b0c1 	.word	0x0800b0c1
 800ae68:	0800b0c5 	.word	0x0800b0c5
 800ae6c:	0800b0c9 	.word	0x0800b0c9
 800ae70:	0800b0cd 	.word	0x0800b0cd
 800ae74:	0800b0d1 	.word	0x0800b0d1
 800ae78:	0800b0d5 	.word	0x0800b0d5
 800ae7c:	0800b0e5 	.word	0x0800b0e5
 800ae80:	0800b0d9 	.word	0x0800b0d9
 800ae84:	0800b0dd 	.word	0x0800b0dd
 800ae88:	0800b0e5 	.word	0x0800b0e5
 800ae8c:	0800b0e5 	.word	0x0800b0e5
 800ae90:	0800b0e5 	.word	0x0800b0e5
 800ae94:	0800b0e5 	.word	0x0800b0e5
 800ae98:	0800b0e5 	.word	0x0800b0e5
 800ae9c:	0800b0e5 	.word	0x0800b0e5
 800aea0:	0800b0e5 	.word	0x0800b0e5
 800aea4:	0800b0e5 	.word	0x0800b0e5
 800aea8:	0800b0e5 	.word	0x0800b0e5
 800aeac:	0800b0e5 	.word	0x0800b0e5
 800aeb0:	0800b0e5 	.word	0x0800b0e5
 800aeb4:	0800b0e5 	.word	0x0800b0e5
 800aeb8:	0800b0e5 	.word	0x0800b0e5
 800aebc:	0800b0e5 	.word	0x0800b0e5
 800aec0:	0800b0e5 	.word	0x0800b0e5
 800aec4:	0800b0e5 	.word	0x0800b0e5
 800aec8:	0800b0e5 	.word	0x0800b0e5
 800aecc:	0800b0e5 	.word	0x0800b0e5
 800aed0:	0800b0e5 	.word	0x0800b0e5
 800aed4:	0800b0e5 	.word	0x0800b0e5
 800aed8:	0800b0e5 	.word	0x0800b0e5
 800aedc:	0800b0e5 	.word	0x0800b0e5
 800aee0:	0800b0e5 	.word	0x0800b0e5
 800aee4:	0800b0e5 	.word	0x0800b0e5
 800aee8:	0800b0e5 	.word	0x0800b0e5
 800aeec:	0800b0e5 	.word	0x0800b0e5
 800aef0:	0800b0e5 	.word	0x0800b0e5
 800aef4:	0800b0e5 	.word	0x0800b0e5
 800aef8:	0800b0e5 	.word	0x0800b0e5
 800aefc:	0800b0e5 	.word	0x0800b0e5
 800af00:	0800b0e5 	.word	0x0800b0e5
 800af04:	0800b0e5 	.word	0x0800b0e5
 800af08:	0800b0e5 	.word	0x0800b0e5
 800af0c:	0800b0e5 	.word	0x0800b0e5
 800af10:	0800b0e5 	.word	0x0800b0e5
 800af14:	0800b0e5 	.word	0x0800b0e5
 800af18:	0800b0e5 	.word	0x0800b0e5
 800af1c:	0800b0e5 	.word	0x0800b0e5
 800af20:	0800b0e5 	.word	0x0800b0e5
 800af24:	0800b0e5 	.word	0x0800b0e5
 800af28:	0800b0e5 	.word	0x0800b0e5
 800af2c:	0800b0e5 	.word	0x0800b0e5
 800af30:	0800b0e5 	.word	0x0800b0e5
 800af34:	0800b0e5 	.word	0x0800b0e5
 800af38:	0800b0e5 	.word	0x0800b0e5
 800af3c:	0800b0e5 	.word	0x0800b0e5
 800af40:	0800b0e5 	.word	0x0800b0e5
 800af44:	0800b0e5 	.word	0x0800b0e5
 800af48:	0800b0e5 	.word	0x0800b0e5
 800af4c:	0800b0e5 	.word	0x0800b0e5
 800af50:	0800b0e5 	.word	0x0800b0e5
 800af54:	0800b0e5 	.word	0x0800b0e5
 800af58:	0800b0e5 	.word	0x0800b0e5
 800af5c:	0800b0e5 	.word	0x0800b0e5
 800af60:	0800b0e5 	.word	0x0800b0e5
 800af64:	0800b0e5 	.word	0x0800b0e5
 800af68:	0800b0e5 	.word	0x0800b0e5
 800af6c:	0800b0e5 	.word	0x0800b0e5
 800af70:	0800b0e5 	.word	0x0800b0e5
 800af74:	0800b0e5 	.word	0x0800b0e5
 800af78:	0800b0e5 	.word	0x0800b0e5
 800af7c:	0800b0e5 	.word	0x0800b0e5
 800af80:	0800b0e5 	.word	0x0800b0e5
 800af84:	0800b0e5 	.word	0x0800b0e5
 800af88:	0800b0e5 	.word	0x0800b0e5
 800af8c:	0800b0e5 	.word	0x0800b0e5
 800af90:	0800b0e5 	.word	0x0800b0e5
 800af94:	0800b0e5 	.word	0x0800b0e5
 800af98:	0800b0e5 	.word	0x0800b0e5
 800af9c:	0800b0e5 	.word	0x0800b0e5
 800afa0:	0800b0e5 	.word	0x0800b0e5
 800afa4:	0800b0e5 	.word	0x0800b0e5
 800afa8:	0800b0e5 	.word	0x0800b0e5
 800afac:	0800b0e5 	.word	0x0800b0e5
 800afb0:	0800b0e5 	.word	0x0800b0e5
 800afb4:	0800b0e5 	.word	0x0800b0e5
 800afb8:	0800b0e5 	.word	0x0800b0e5
 800afbc:	0800b0e5 	.word	0x0800b0e5
 800afc0:	0800b0e5 	.word	0x0800b0e5
 800afc4:	0800b0e5 	.word	0x0800b0e5
 800afc8:	0800b0e5 	.word	0x0800b0e5
 800afcc:	0800b0e5 	.word	0x0800b0e5
 800afd0:	0800b0e5 	.word	0x0800b0e5
 800afd4:	0800b0e5 	.word	0x0800b0e5
 800afd8:	0800b0e5 	.word	0x0800b0e5
 800afdc:	0800b0e5 	.word	0x0800b0e5
 800afe0:	0800b0e5 	.word	0x0800b0e5
 800afe4:	0800b0e1 	.word	0x0800b0e1
    case 100: return "Continue";
 800afe8:	4b42      	ldr	r3, [pc, #264]	@ (800b0f4 <mg_http_status_code_str+0x8f8>)
 800afea:	e07c      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 800afec:	4b42      	ldr	r3, [pc, #264]	@ (800b0f8 <mg_http_status_code_str+0x8fc>)
 800afee:	e07a      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 800aff0:	4b42      	ldr	r3, [pc, #264]	@ (800b0fc <mg_http_status_code_str+0x900>)
 800aff2:	e078      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 800aff4:	4b42      	ldr	r3, [pc, #264]	@ (800b100 <mg_http_status_code_str+0x904>)
 800aff6:	e076      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 800aff8:	4b42      	ldr	r3, [pc, #264]	@ (800b104 <mg_http_status_code_str+0x908>)
 800affa:	e074      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 800affc:	4b42      	ldr	r3, [pc, #264]	@ (800b108 <mg_http_status_code_str+0x90c>)
 800affe:	e072      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 800b000:	4b42      	ldr	r3, [pc, #264]	@ (800b10c <mg_http_status_code_str+0x910>)
 800b002:	e070      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 800b004:	4b42      	ldr	r3, [pc, #264]	@ (800b110 <mg_http_status_code_str+0x914>)
 800b006:	e06e      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 800b008:	4b42      	ldr	r3, [pc, #264]	@ (800b114 <mg_http_status_code_str+0x918>)
 800b00a:	e06c      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800b00c:	4b42      	ldr	r3, [pc, #264]	@ (800b118 <mg_http_status_code_str+0x91c>)
 800b00e:	e06a      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 800b010:	4b42      	ldr	r3, [pc, #264]	@ (800b11c <mg_http_status_code_str+0x920>)
 800b012:	e068      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 800b014:	4b42      	ldr	r3, [pc, #264]	@ (800b120 <mg_http_status_code_str+0x924>)
 800b016:	e066      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 800b018:	4b42      	ldr	r3, [pc, #264]	@ (800b124 <mg_http_status_code_str+0x928>)
 800b01a:	e064      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800b01c:	4b42      	ldr	r3, [pc, #264]	@ (800b128 <mg_http_status_code_str+0x92c>)
 800b01e:	e062      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 800b020:	4b42      	ldr	r3, [pc, #264]	@ (800b12c <mg_http_status_code_str+0x930>)
 800b022:	e060      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 800b024:	4b42      	ldr	r3, [pc, #264]	@ (800b130 <mg_http_status_code_str+0x934>)
 800b026:	e05e      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 800b028:	4b42      	ldr	r3, [pc, #264]	@ (800b134 <mg_http_status_code_str+0x938>)
 800b02a:	e05c      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 800b02c:	4b42      	ldr	r3, [pc, #264]	@ (800b138 <mg_http_status_code_str+0x93c>)
 800b02e:	e05a      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 800b030:	4b42      	ldr	r3, [pc, #264]	@ (800b13c <mg_http_status_code_str+0x940>)
 800b032:	e058      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 800b034:	4b42      	ldr	r3, [pc, #264]	@ (800b140 <mg_http_status_code_str+0x944>)
 800b036:	e056      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 800b038:	4b42      	ldr	r3, [pc, #264]	@ (800b144 <mg_http_status_code_str+0x948>)
 800b03a:	e054      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 800b03c:	4b42      	ldr	r3, [pc, #264]	@ (800b148 <mg_http_status_code_str+0x94c>)
 800b03e:	e052      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 800b040:	4b42      	ldr	r3, [pc, #264]	@ (800b14c <mg_http_status_code_str+0x950>)
 800b042:	e050      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 800b044:	4b42      	ldr	r3, [pc, #264]	@ (800b150 <mg_http_status_code_str+0x954>)
 800b046:	e04e      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 800b048:	4b42      	ldr	r3, [pc, #264]	@ (800b154 <mg_http_status_code_str+0x958>)
 800b04a:	e04c      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 800b04c:	4b42      	ldr	r3, [pc, #264]	@ (800b158 <mg_http_status_code_str+0x95c>)
 800b04e:	e04a      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 800b050:	4b42      	ldr	r3, [pc, #264]	@ (800b15c <mg_http_status_code_str+0x960>)
 800b052:	e048      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 800b054:	4b42      	ldr	r3, [pc, #264]	@ (800b160 <mg_http_status_code_str+0x964>)
 800b056:	e046      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 800b058:	4b42      	ldr	r3, [pc, #264]	@ (800b164 <mg_http_status_code_str+0x968>)
 800b05a:	e044      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 800b05c:	4b42      	ldr	r3, [pc, #264]	@ (800b168 <mg_http_status_code_str+0x96c>)
 800b05e:	e042      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 800b060:	4b42      	ldr	r3, [pc, #264]	@ (800b16c <mg_http_status_code_str+0x970>)
 800b062:	e040      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 800b064:	4b42      	ldr	r3, [pc, #264]	@ (800b170 <mg_http_status_code_str+0x974>)
 800b066:	e03e      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 800b068:	4b42      	ldr	r3, [pc, #264]	@ (800b174 <mg_http_status_code_str+0x978>)
 800b06a:	e03c      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 800b06c:	4b42      	ldr	r3, [pc, #264]	@ (800b178 <mg_http_status_code_str+0x97c>)
 800b06e:	e03a      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 800b070:	4b42      	ldr	r3, [pc, #264]	@ (800b17c <mg_http_status_code_str+0x980>)
 800b072:	e038      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 800b074:	4b42      	ldr	r3, [pc, #264]	@ (800b180 <mg_http_status_code_str+0x984>)
 800b076:	e036      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 800b078:	4b42      	ldr	r3, [pc, #264]	@ (800b184 <mg_http_status_code_str+0x988>)
 800b07a:	e034      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 800b07c:	4b42      	ldr	r3, [pc, #264]	@ (800b188 <mg_http_status_code_str+0x98c>)
 800b07e:	e032      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 800b080:	4b42      	ldr	r3, [pc, #264]	@ (800b18c <mg_http_status_code_str+0x990>)
 800b082:	e030      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 800b084:	4b42      	ldr	r3, [pc, #264]	@ (800b190 <mg_http_status_code_str+0x994>)
 800b086:	e02e      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 800b088:	4b42      	ldr	r3, [pc, #264]	@ (800b194 <mg_http_status_code_str+0x998>)
 800b08a:	e02c      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 800b08c:	4b42      	ldr	r3, [pc, #264]	@ (800b198 <mg_http_status_code_str+0x99c>)
 800b08e:	e02a      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 800b090:	4b42      	ldr	r3, [pc, #264]	@ (800b19c <mg_http_status_code_str+0x9a0>)
 800b092:	e028      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 800b094:	4b42      	ldr	r3, [pc, #264]	@ (800b1a0 <mg_http_status_code_str+0x9a4>)
 800b096:	e026      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 800b098:	4b42      	ldr	r3, [pc, #264]	@ (800b1a4 <mg_http_status_code_str+0x9a8>)
 800b09a:	e024      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 800b09c:	4b42      	ldr	r3, [pc, #264]	@ (800b1a8 <mg_http_status_code_str+0x9ac>)
 800b09e:	e022      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 800b0a0:	4b42      	ldr	r3, [pc, #264]	@ (800b1ac <mg_http_status_code_str+0x9b0>)
 800b0a2:	e020      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 800b0a4:	4b42      	ldr	r3, [pc, #264]	@ (800b1b0 <mg_http_status_code_str+0x9b4>)
 800b0a6:	e01e      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 800b0a8:	4b42      	ldr	r3, [pc, #264]	@ (800b1b4 <mg_http_status_code_str+0x9b8>)
 800b0aa:	e01c      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 800b0ac:	4b42      	ldr	r3, [pc, #264]	@ (800b1b8 <mg_http_status_code_str+0x9bc>)
 800b0ae:	e01a      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 800b0b0:	4b42      	ldr	r3, [pc, #264]	@ (800b1bc <mg_http_status_code_str+0x9c0>)
 800b0b2:	e018      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 800b0b4:	4b42      	ldr	r3, [pc, #264]	@ (800b1c0 <mg_http_status_code_str+0x9c4>)
 800b0b6:	e016      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 800b0b8:	4b42      	ldr	r3, [pc, #264]	@ (800b1c4 <mg_http_status_code_str+0x9c8>)
 800b0ba:	e014      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 800b0bc:	4b42      	ldr	r3, [pc, #264]	@ (800b1c8 <mg_http_status_code_str+0x9cc>)
 800b0be:	e012      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 800b0c0:	4b42      	ldr	r3, [pc, #264]	@ (800b1cc <mg_http_status_code_str+0x9d0>)
 800b0c2:	e010      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 800b0c4:	4b42      	ldr	r3, [pc, #264]	@ (800b1d0 <mg_http_status_code_str+0x9d4>)
 800b0c6:	e00e      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 800b0c8:	4b42      	ldr	r3, [pc, #264]	@ (800b1d4 <mg_http_status_code_str+0x9d8>)
 800b0ca:	e00c      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 800b0cc:	4b42      	ldr	r3, [pc, #264]	@ (800b1d8 <mg_http_status_code_str+0x9dc>)
 800b0ce:	e00a      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 800b0d0:	4b42      	ldr	r3, [pc, #264]	@ (800b1dc <mg_http_status_code_str+0x9e0>)
 800b0d2:	e008      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 800b0d4:	4b42      	ldr	r3, [pc, #264]	@ (800b1e0 <mg_http_status_code_str+0x9e4>)
 800b0d6:	e006      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 800b0d8:	4b42      	ldr	r3, [pc, #264]	@ (800b1e4 <mg_http_status_code_str+0x9e8>)
 800b0da:	e004      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 800b0dc:	4b42      	ldr	r3, [pc, #264]	@ (800b1e8 <mg_http_status_code_str+0x9ec>)
 800b0de:	e002      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 800b0e0:	4b42      	ldr	r3, [pc, #264]	@ (800b1ec <mg_http_status_code_str+0x9f0>)
 800b0e2:	e000      	b.n	800b0e6 <mg_http_status_code_str+0x8ea>
    default: return "";
 800b0e4:	4b42      	ldr	r3, [pc, #264]	@ (800b1f0 <mg_http_status_code_str+0x9f4>)
  }
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	08026864 	.word	0x08026864
 800b0f8:	08026870 	.word	0x08026870
 800b0fc:	08026884 	.word	0x08026884
 800b100:	08026890 	.word	0x08026890
 800b104:	08026894 	.word	0x08026894
 800b108:	0802689c 	.word	0x0802689c
 800b10c:	080268a8 	.word	0x080268a8
 800b110:	080268c8 	.word	0x080268c8
 800b114:	080268d4 	.word	0x080268d4
 800b118:	080268e4 	.word	0x080268e4
 800b11c:	080268f4 	.word	0x080268f4
 800b120:	08026904 	.word	0x08026904
 800b124:	08026918 	.word	0x08026918
 800b128:	08026920 	.word	0x08026920
 800b12c:	08026934 	.word	0x08026934
 800b130:	08026948 	.word	0x08026948
 800b134:	08026950 	.word	0x08026950
 800b138:	0802695c 	.word	0x0802695c
 800b13c:	0802696c 	.word	0x0802696c
 800b140:	08026978 	.word	0x08026978
 800b144:	0802698c 	.word	0x0802698c
 800b148:	080269a0 	.word	0x080269a0
 800b14c:	080269ac 	.word	0x080269ac
 800b150:	080269bc 	.word	0x080269bc
 800b154:	080269d0 	.word	0x080269d0
 800b158:	080269dc 	.word	0x080269dc
 800b15c:	080269e8 	.word	0x080269e8
 800b160:	080269fc 	.word	0x080269fc
 800b164:	08026a0c 	.word	0x08026a0c
 800b168:	08026a2c 	.word	0x08026a2c
 800b16c:	08026a3c 	.word	0x08026a3c
 800b170:	08026a48 	.word	0x08026a48
 800b174:	08026a50 	.word	0x08026a50
 800b178:	08026a60 	.word	0x08026a60
 800b17c:	08026a74 	.word	0x08026a74
 800b180:	08026a88 	.word	0x08026a88
 800b184:	08026aa0 	.word	0x08026aa0
 800b188:	08026ab8 	.word	0x08026ab8
 800b18c:	08026ad8 	.word	0x08026ad8
 800b190:	08026aec 	.word	0x08026aec
 800b194:	08026afc 	.word	0x08026afc
 800b198:	08026b10 	.word	0x08026b10
 800b19c:	08026b28 	.word	0x08026b28
 800b1a0:	08026b30 	.word	0x08026b30
 800b1a4:	08026b44 	.word	0x08026b44
 800b1a8:	08026b58 	.word	0x08026b58
 800b1ac:	08026b70 	.word	0x08026b70
 800b1b0:	08026b84 	.word	0x08026b84
 800b1b4:	08026ba4 	.word	0x08026ba4
 800b1b8:	08026bc8 	.word	0x08026bc8
 800b1bc:	08026be8 	.word	0x08026be8
 800b1c0:	08026c00 	.word	0x08026c00
 800b1c4:	08026c18 	.word	0x08026c18
 800b1c8:	08026c28 	.word	0x08026c28
 800b1cc:	08026c34 	.word	0x08026c34
 800b1d0:	08026c48 	.word	0x08026c48
 800b1d4:	08026c58 	.word	0x08026c58
 800b1d8:	08026c74 	.word	0x08026c74
 800b1dc:	08026c8c 	.word	0x08026c8c
 800b1e0:	08026ca4 	.word	0x08026ca4
 800b1e4:	08026cb4 	.word	0x08026cb4
 800b1e8:	08026cc4 	.word	0x08026cc4
 800b1ec:	08026ce4 	.word	0x08026ce4
 800b1f0:	08026d04 	.word	0x08026d04

0800b1f4 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 800b1f4:	b408      	push	{r3}
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b08b      	sub	sp, #44	@ 0x2c
 800b1fa:	af02      	add	r7, sp, #8
 800b1fc:	60f8      	str	r0, [r7, #12]
 800b1fe:	60b9      	str	r1, [r7, #8]
 800b200:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 800b202:	68b8      	ldr	r0, [r7, #8]
 800b204:	f7ff fafa 	bl	800a7fc <mg_http_status_code_str>
 800b208:	4602      	mov	r2, r0
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <mg_http_reply+0x20>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	e000      	b.n	800b216 <mg_http_reply+0x22>
 800b214:	4b1f      	ldr	r3, [pc, #124]	@ (800b294 <mg_http_reply+0xa0>)
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	4613      	mov	r3, r2
 800b21a:	68ba      	ldr	r2, [r7, #8]
 800b21c:	491e      	ldr	r1, [pc, #120]	@ (800b298 <mg_http_reply+0xa4>)
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f002 fef0 	bl	800e004 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b228:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800b22a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b22e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800b236:	f107 0314 	add.w	r3, r7, #20
 800b23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b23c:	4817      	ldr	r0, [pc, #92]	@ (800b29c <mg_http_reply+0xa8>)
 800b23e:	f7fd feeb 	bl	8009018 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b246:	2b10      	cmp	r3, #16
 800b248:	d916      	bls.n	800b278 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	3b0f      	subs	r3, #15
 800b252:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b258:	69fb      	ldr	r3, [r7, #28]
 800b25a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800b25c:	4a10      	ldr	r2, [pc, #64]	@ (800b2a0 <mg_http_reply+0xac>)
 800b25e:	210b      	movs	r1, #11
 800b260:	f007 f9ae 	bl	80125c0 <mg_snprintf>
 800b264:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b26a:	69f9      	ldr	r1, [r7, #28]
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	440b      	add	r3, r1
 800b270:	3b0f      	subs	r3, #15
 800b272:	4413      	add	r3, r2
 800b274:	2220      	movs	r2, #32
 800b276:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800b27e:	f023 0301 	bic.w	r3, r3, #1
 800b282:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 800b286:	bf00      	nop
 800b288:	3724      	adds	r7, #36	@ 0x24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b290:	b001      	add	sp, #4
 800b292:	4770      	bx	lr
 800b294:	08026d04 	.word	0x08026d04
 800b298:	08026d08 	.word	0x08026d08
 800b29c:	08012551 	.word	0x08012551
 800b2a0:	08026d3c 	.word	0x08026d3c

0800b2a4 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7fe fa7c 	bl	80097b0 <mg_fs_close>
  c->pfn_data = NULL;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a07      	ldr	r2, [pc, #28]	@ (800b2e0 <restore_http_cb+0x3c>)
 800b2c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800b2ce:	f023 0301 	bic.w	r3, r3, #1
 800b2d2:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 800b2d6:	bf00      	nop
 800b2d8:	3708      	adds	r7, #8
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	0800c615 	.word	0x0800c615

0800b2e4 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 800b2e4:	b5b0      	push	{r4, r5, r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af04      	add	r7, sp, #16
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	461c      	mov	r4, r3
 800b2f6:	4615      	mov	r5, r2
 800b2f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b2fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b300:	e9cd 2300 	strd	r2, r3, [sp]
 800b304:	4a04      	ldr	r2, [pc, #16]	@ (800b318 <mg_http_etag+0x34>)
 800b306:	68b9      	ldr	r1, [r7, #8]
 800b308:	68f8      	ldr	r0, [r7, #12]
 800b30a:	f007 f959 	bl	80125c0 <mg_snprintf>
  return buf;
 800b30e:	68fb      	ldr	r3, [r7, #12]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bdb0      	pop	{r4, r5, r7, pc}
 800b318:	08026d44 	.word	0x08026d44

0800b31c <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b08a      	sub	sp, #40	@ 0x28
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2b08      	cmp	r3, #8
 800b32c:	d002      	beq.n	800b334 <static_cb+0x18>
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	2b02      	cmp	r3, #2
 800b332:	d148      	bne.n	800b3c6 <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b33a:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800b33c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b340:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	33a4      	adds	r3, #164	@ 0xa4
 800b346:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b34c:	69fa      	ldr	r2, [r7, #28]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d905      	bls.n	800b35e <static_cb+0x42>
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3348      	adds	r3, #72	@ 0x48
 800b356:	69f9      	ldr	r1, [r7, #28]
 800b358:	4618      	mov	r0, r3
 800b35a:	f001 fd4d 	bl	800cdf8 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b366:	429a      	cmp	r2, r3
 800b368:	d234      	bcs.n	800b3d4 <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b372:	1ad3      	subs	r3, r2, r3
 800b374:	627b      	str	r3, [r7, #36]	@ 0x24
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d902      	bls.n	800b386 <static_cb+0x6a>
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 800b386:	6a3b      	ldr	r3, [r7, #32]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	6a3a      	ldr	r2, [r7, #32]
 800b38e:	6810      	ldr	r0, [r2, #0]
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b398:	4411      	add	r1, r2
 800b39a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b39c:	4798      	blx	r3
 800b39e:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	441a      	add	r2, r3
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	1ad2      	subs	r2, r2, r3
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d10c      	bne.n	800b3d8 <static_cb+0xbc>
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	f7ff ff70 	bl	800b2a4 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800b3c4:	e008      	b.n	800b3d8 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	2b09      	cmp	r3, #9
 800b3ca:	d106      	bne.n	800b3da <static_cb+0xbe>
    restore_http_cb(c);
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f7ff ff69 	bl	800b2a4 <restore_http_cb>
 800b3d2:	e002      	b.n	800b3da <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800b3d4:	bf00      	nop
 800b3d6:	e000      	b.n	800b3da <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800b3d8:	bf00      	nop
  }
  (void) ev_data;
}
 800b3da:	3728      	adds	r7, #40	@ 0x28
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 800b3e0:	b590      	push	{r4, r7, lr}
 800b3e2:	b093      	sub	sp, #76	@ 0x4c
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	1d38      	adds	r0, r7, #4
 800b3ea:	e880 0006 	stmia.w	r0, {r1, r2}
 800b3ee:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 800b3f0:	f107 031c 	add.w	r3, r7, #28
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f00a fca8 	bl	8015d4c <mg_str_s>
 800b3fc:	f107 0314 	add.w	r3, r7, #20
 800b400:	2201      	movs	r2, #1
 800b402:	4943      	ldr	r1, [pc, #268]	@ (800b510 <guess_content_type+0x130>)
 800b404:	4618      	mov	r0, r3
 800b406:	f00a fcbe 	bl	8015d86 <mg_str_n>
  size_t i = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 800b40e:	e002      	b.n	800b416 <guess_content_type+0x36>
 800b410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b412:	3301      	adds	r3, #1
 800b414:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d208      	bcs.n	800b430 <guess_content_type+0x50>
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b424:	1acb      	subs	r3, r1, r3
 800b426:	3b01      	subs	r3, #1
 800b428:	4413      	add	r3, r2
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b42e:	d1ef      	bne.n	800b410 <guess_content_type+0x30>
  path.buf += path.len - i;
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	68b9      	ldr	r1, [r7, #8]
 800b434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b436:	1acb      	subs	r3, r1, r3
 800b438:	4413      	add	r3, r2
 800b43a:	607b      	str	r3, [r7, #4]
  path.len = i;
 800b43c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43e:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 800b440:	e02b      	b.n	800b49a <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 800b442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b446:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800b44a:	213d      	movs	r1, #61	@ 0x3d
 800b44c:	9100      	str	r1, [sp, #0]
 800b44e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800b452:	c903      	ldmia	r1, {r0, r1}
 800b454:	f00a fe78 	bl	8016148 <mg_span>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d01d      	beq.n	800b49a <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800b45e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b462:	cb0c      	ldmia	r3, {r2, r3}
 800b464:	f107 0114 	add.w	r1, r7, #20
 800b468:	c903      	ldmia	r1, {r0, r1}
 800b46a:	f00a fcf0 	bl	8015e4e <mg_strcmp>
 800b46e:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 800b470:	2b00      	cmp	r3, #0
 800b472:	d009      	beq.n	800b488 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 800b474:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b478:	cb0c      	ldmia	r3, {r2, r3}
 800b47a:	1d39      	adds	r1, r7, #4
 800b47c:	c903      	ldmia	r1, {r0, r1}
 800b47e:	f00a fce6 	bl	8015e4e <mg_strcmp>
 800b482:	4603      	mov	r3, r0
 800b484:	2b00      	cmp	r3, #0
 800b486:	d108      	bne.n	800b49a <guess_content_type+0xba>
      return v;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	461a      	mov	r2, r3
 800b48c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b490:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b494:	e882 0003 	stmia.w	r2, {r0, r1}
 800b498:	e036      	b.n	800b508 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 800b49a:	f107 031c 	add.w	r3, r7, #28
 800b49e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800b4a2:	212c      	movs	r1, #44	@ 0x2c
 800b4a4:	9100      	str	r1, [sp, #0]
 800b4a6:	f107 011c 	add.w	r1, r7, #28
 800b4aa:	c903      	ldmia	r1, {r0, r1}
 800b4ac:	f00a fe4c 	bl	8016148 <mg_span>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1c5      	bne.n	800b442 <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4ba:	e01a      	b.n	800b4f2 <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 800b4bc:	4a15      	ldr	r2, [pc, #84]	@ (800b514 <guess_content_type+0x134>)
 800b4be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	4413      	add	r3, r2
 800b4c4:	cb0c      	ldmia	r3, {r2, r3}
 800b4c6:	1d39      	adds	r1, r7, #4
 800b4c8:	c903      	ldmia	r1, {r0, r1}
 800b4ca:	f00a fcc0 	bl	8015e4e <mg_strcmp>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <guess_content_type+0x10c>
 800b4d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	68f9      	ldr	r1, [r7, #12]
 800b4da:	4a0e      	ldr	r2, [pc, #56]	@ (800b514 <guess_content_type+0x134>)
 800b4dc:	460c      	mov	r4, r1
 800b4de:	00db      	lsls	r3, r3, #3
 800b4e0:	4413      	add	r3, r2
 800b4e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b4e6:	e884 0003 	stmia.w	r4, {r0, r1}
 800b4ea:	e00d      	b.n	800b508 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 800b4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ee:	3302      	adds	r3, #2
 800b4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b4f2:	4a08      	ldr	r2, [pc, #32]	@ (800b514 <guess_content_type+0x134>)
 800b4f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1de      	bne.n	800b4bc <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	4905      	ldr	r1, [pc, #20]	@ (800b518 <guess_content_type+0x138>)
 800b502:	4618      	mov	r0, r3
 800b504:	f00a fc22 	bl	8015d4c <mg_str_s>
}
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	3744      	adds	r7, #68	@ 0x44
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd90      	pop	{r4, r7, pc}
 800b510:	08026fb4 	.word	0x08026fb4
 800b514:	24000060 	.word	0x24000060
 800b518:	08026e30 	.word	0x08026e30

0800b51c <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b08c      	sub	sp, #48	@ 0x30
 800b520:	af02      	add	r7, sp, #8
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 800b528:	2300      	movs	r3, #0
 800b52a:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 800b52c:	2300      	movs	r3, #0
 800b52e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b530:	e058      	b.n	800b5e4 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b538:	3306      	adds	r3, #6
 800b53a:	18d1      	adds	r1, r2, r3
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b542:	1ad3      	subs	r3, r2, r3
 800b544:	1f9a      	subs	r2, r3, #6
 800b546:	f107 0310 	add.w	r3, r7, #16
 800b54a:	4618      	mov	r0, r3
 800b54c:	f00a fc1b 	bl	8015d86 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b556:	4413      	add	r3, r2
 800b558:	2206      	movs	r2, #6
 800b55a:	4929      	ldr	r1, [pc, #164]	@ (800b600 <getrange+0xe4>)
 800b55c:	4618      	mov	r0, r3
 800b55e:	f01a f8eb 	bl	8025738 <memcmp>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d139      	bne.n	800b5dc <getrange+0xc0>
    if (mg_span(v, &k, &v, '-')) {
 800b568:	f107 0310 	add.w	r3, r7, #16
 800b56c:	f107 0218 	add.w	r2, r7, #24
 800b570:	212d      	movs	r1, #45	@ 0x2d
 800b572:	9100      	str	r1, [sp, #0]
 800b574:	f107 0110 	add.w	r1, r7, #16
 800b578:	c903      	ldmia	r1, {r0, r1}
 800b57a:	f00a fde5 	bl	8016148 <mg_span>
 800b57e:	4603      	mov	r3, r0
 800b580:	2b00      	cmp	r3, #0
 800b582:	d01d      	beq.n	800b5c0 <getrange+0xa4>
      if (mg_to_size_t(k, a)) numparsed++;
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	f107 0318 	add.w	r3, r7, #24
 800b58a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b58e:	f7fe fb6d 	bl	8009c6c <mg_to_size_t>
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <getrange+0x82>
 800b598:	6a3b      	ldr	r3, [r7, #32]
 800b59a:	3301      	adds	r3, #1
 800b59c:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d026      	beq.n	800b5f2 <getrange+0xd6>
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	f107 0310 	add.w	r3, r7, #16
 800b5aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b5ae:	f7fe fb5d 	bl	8009c6c <mg_to_size_t>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d01c      	beq.n	800b5f2 <getrange+0xd6>
 800b5b8:	6a3b      	ldr	r3, [r7, #32]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 800b5be:	e018      	b.n	800b5f2 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	f107 0310 	add.w	r3, r7, #16
 800b5c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b5ca:	f7fe fb4f 	bl	8009c6c <mg_to_size_t>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d00e      	beq.n	800b5f2 <getrange+0xd6>
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	623b      	str	r3, [r7, #32]
 800b5da:	e00b      	b.n	800b5f4 <getrange+0xd8>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 800b5dc:	bf00      	nop
  for (i = 0; i + 6 < s->len; i++) {
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e6:	1d9a      	adds	r2, r3, #6
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d3a0      	bcc.n	800b532 <getrange+0x16>
 800b5f0:	e000      	b.n	800b5f4 <getrange+0xd8>
    break;
 800b5f2:	bf00      	nop
  }
  return (int) numparsed;
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3728      	adds	r7, #40	@ 0x28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	08026fb8 	.word	0x08026fb8

0800b604 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 800b604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b608:	b0f3      	sub	sp, #460	@ 0x1cc
 800b60a:	af0a      	add	r7, sp, #40	@ 0x28
 800b60c:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 800b610:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 800b614:	6020      	str	r0, [r4, #0]
 800b616:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800b61a:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 800b61e:	6001      	str	r1, [r0, #0]
 800b620:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 800b624:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 800b628:	600a      	str	r2, [r1, #0]
 800b62a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800b62e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800b632:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800b634:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b638:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d006      	beq.n	800b652 <mg_http_serve_file+0x4e>
 800b644:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b648:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	695b      	ldr	r3, [r3, #20]
 800b650:	e000      	b.n	800b654 <mg_http_serve_file+0x50>
 800b652:	4ba4      	ldr	r3, [pc, #656]	@ (800b8e4 <mg_http_serve_file+0x2e0>)
 800b654:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 800b658:	2300      	movs	r3, #0
 800b65a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 800b664:	f04f 0200 	mov.w	r2, #0
 800b668:	f04f 0300 	mov.w	r3, #0
 800b66c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 800b670:	2300      	movs	r3, #0
 800b672:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 800b676:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800b67a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b67e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800b682:	6819      	ldr	r1, [r3, #0]
 800b684:	4610      	mov	r0, r2
 800b686:	f00a fb61 	bl	8015d4c <mg_str_s>
 800b68a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b68e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800b69a:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 800b69e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800b6a2:	ca06      	ldmia	r2, {r1, r2}
 800b6a4:	f7ff fe9c 	bl	800b3e0 <guess_content_type>
  bool gzip = false;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 800b6ae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b6b2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d05c      	beq.n	800b776 <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 800b6bc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b6c0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800b6c4:	4988      	ldr	r1, [pc, #544]	@ (800b8e8 <mg_http_serve_file+0x2e4>)
 800b6c6:	6818      	ldr	r0, [r3, #0]
 800b6c8:	f7fe fd1e 	bl	800a108 <mg_http_get_header>
 800b6cc:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 800b6d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d03e      	beq.n	800b756 <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 800b6d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800b6dc:	6859      	ldr	r1, [r3, #4]
 800b6de:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	4881      	ldr	r0, [pc, #516]	@ (800b8ec <mg_http_serve_file+0x2e8>)
 800b6e8:	f006 ffa0 	bl	801262c <mg_mprintf>
 800b6ec:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 800b6f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d02a      	beq.n	800b74e <mg_http_serve_file+0x14a>
 800b6f8:	497d      	ldr	r1, [pc, #500]	@ (800b8f0 <mg_http_serve_file+0x2ec>)
 800b6fa:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800b6fe:	f01a f895 	bl	802582c <strstr>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d022      	beq.n	800b74e <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 800b708:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b70c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800b710:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a77      	ldr	r2, [pc, #476]	@ (800b8f4 <mg_http_serve_file+0x2f0>)
 800b718:	2164      	movs	r1, #100	@ 0x64
 800b71a:	f006 ff51 	bl	80125c0 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 800b71e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800b722:	2201      	movs	r2, #1
 800b724:	4619      	mov	r1, r3
 800b726:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800b72a:	f7fe f819 	bl	8009760 <mg_fs_open>
 800b72e:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 800b732:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <mg_http_serve_file+0x14a>
 800b73a:	2301      	movs	r3, #1
 800b73c:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 800b740:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b744:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800b748:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800b74c:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 800b74e:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 800b752:	f019 fc65 	bl	8025020 <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 800b756:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10b      	bne.n	800b776 <mg_http_serve_file+0x172>
 800b75e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b762:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800b766:	2201      	movs	r2, #1
 800b768:	6819      	ldr	r1, [r3, #0]
 800b76a:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800b76e:	f7fd fff7 	bl	8009760 <mg_fs_open>
 800b772:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 800b776:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d144      	bne.n	800b808 <mg_http_serve_file+0x204>
 800b77e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b782:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d03c      	beq.n	800b808 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 800b78e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b792:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	2201      	movs	r2, #1
 800b79c:	4619      	mov	r1, r3
 800b79e:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 800b7a2:	f7fd ffdd 	bl	8009760 <mg_fs_open>
 800b7a6:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 800b7aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b7ae:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800b7b2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800b7b6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 800b7ba:	6812      	ldr	r2, [r2, #0]
 800b7bc:	6912      	ldr	r2, [r2, #16]
 800b7be:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 800b7c0:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800b7c4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b7c8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800b7cc:	6819      	ldr	r1, [r3, #0]
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	f00a fabc 	bl	8015d4c <mg_str_s>
 800b7d4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b7d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68db      	ldr	r3, [r3, #12]
 800b7e0:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800b7e4:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 800b7e8:	f107 0010 	add.w	r0, r7, #16
 800b7ec:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800b7f0:	ca06      	ldmia	r2, {r1, r2}
 800b7f2:	f7ff fdf5 	bl	800b3e0 <guess_content_type>
 800b7f6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b7fa:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 800b7fe:	4623      	mov	r3, r4
 800b800:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b804:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 800b808:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d00f      	beq.n	800b830 <mg_http_serve_file+0x22c>
 800b810:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800b814:	681c      	ldr	r4, [r3, #0]
 800b816:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800b81a:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 800b81e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b822:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800b826:	6818      	ldr	r0, [r3, #0]
 800b828:	47a0      	blx	r4
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d114      	bne.n	800b85a <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 800b830:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b834:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689a      	ldr	r2, [r3, #8]
 800b83c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b840:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800b844:	4b2c      	ldr	r3, [pc, #176]	@ (800b8f8 <mg_http_serve_file+0x2f4>)
 800b846:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 800b84a:	6800      	ldr	r0, [r0, #0]
 800b84c:	f7ff fcd2 	bl	800b1f4 <mg_http_reply>
    mg_fs_close(fd);
 800b850:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800b854:	f7fd ffac 	bl	80097b0 <mg_fs_close>
 800b858:	e190      	b.n	800bb7c <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800b85a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800b85e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800b862:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800b866:	e9cd 2300 	strd	r2, r3, [sp]
 800b86a:	460a      	mov	r2, r1
 800b86c:	2140      	movs	r1, #64	@ 0x40
 800b86e:	f7ff fd39 	bl	800b2e4 <mg_http_etag>
 800b872:	4603      	mov	r3, r0
 800b874:	2b00      	cmp	r3, #0
 800b876:	d045      	beq.n	800b904 <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800b878:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b87c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800b880:	491e      	ldr	r1, [pc, #120]	@ (800b8fc <mg_http_serve_file+0x2f8>)
 800b882:	6818      	ldr	r0, [r3, #0]
 800b884:	f7fe fc40 	bl	800a108 <mg_http_get_header>
 800b888:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 800b88c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800b890:	2b00      	cmp	r3, #0
 800b892:	d037      	beq.n	800b904 <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 800b894:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800b898:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800b89c:	4611      	mov	r1, r2
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f00a fa54 	bl	8015d4c <mg_str_s>
 800b8a4:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 800b8a8:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 800b8ac:	cb0c      	ldmia	r3, {r2, r3}
 800b8ae:	c903      	ldmia	r1, {r0, r1}
 800b8b0:	f00a fb0f 	bl	8015ed2 <mg_strcasecmp>
 800b8b4:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d124      	bne.n	800b904 <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 800b8ba:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800b8be:	f7fd ff77 	bl	80097b0 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800b8c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b8c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	689a      	ldr	r2, [r3, #8]
 800b8ce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b8d2:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 800b8d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b900 <mg_http_serve_file+0x2fc>)
 800b8d8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800b8dc:	6800      	ldr	r0, [r0, #0]
 800b8de:	f7ff fc89 	bl	800b1f4 <mg_http_reply>
 800b8e2:	e14b      	b.n	800bb7c <mg_http_serve_file+0x578>
 800b8e4:	24000038 	.word	0x24000038
 800b8e8:	08026fc0 	.word	0x08026fc0
 800b8ec:	080267a4 	.word	0x080267a4
 800b8f0:	08026fd0 	.word	0x08026fd0
 800b8f4:	08026fd8 	.word	0x08026fd8
 800b8f8:	08026fe0 	.word	0x08026fe0
 800b8fc:	08026fec 	.word	0x08026fec
 800b900:	08026d04 	.word	0x08026d04
  } else {
    int n, status = 200;
 800b904:	23c8      	movs	r3, #200	@ 0xc8
 800b906:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 800b90a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b90e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b912:	2200      	movs	r2, #0
 800b914:	601a      	str	r2, [r3, #0]
 800b916:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b91a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b91e:	2200      	movs	r2, #0
 800b920:	601a      	str	r2, [r3, #0]
 800b922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b926:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 800b92a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b92e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800b932:	4995      	ldr	r1, [pc, #596]	@ (800bb88 <mg_http_serve_file+0x584>)
 800b934:	6818      	ldr	r0, [r3, #0]
 800b936:	f7fe fbe7 	bl	800a108 <mg_http_get_header>
 800b93a:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 800b93e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b942:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800b946:	2200      	movs	r2, #0
 800b948:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 800b94a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 808e 	beq.w	800ba70 <mg_http_serve_file+0x46c>
 800b954:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800b958:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800b95c:	4619      	mov	r1, r3
 800b95e:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 800b962:	f7ff fddb 	bl	800b51c <getrange>
 800b966:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 800b96a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800b96e:	2b00      	cmp	r3, #0
 800b970:	dd7e      	ble.n	800ba70 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 800b972:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800b976:	2b01      	cmp	r3, #1
 800b978:	d107      	bne.n	800b98a <mg_http_serve_file+0x386>
 800b97a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800b97e:	1e5a      	subs	r2, r3, #1
 800b980:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b984:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b988:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 800b98a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b98e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b998:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d808      	bhi.n	800b9b4 <mg_http_serve_file+0x3b0>
 800b9a2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b9a6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d817      	bhi.n	800b9e4 <mg_http_serve_file+0x3e0>
        status = 416;
 800b9b4:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800b9b8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 800b9c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	60bb      	str	r3, [r7, #8]
 800b9ca:	60fa      	str	r2, [r7, #12]
 800b9cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b9d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b9d4:	e9cd 1200 	strd	r1, r2, [sp]
 800b9d8:	4a6c      	ldr	r2, [pc, #432]	@ (800bb8c <mg_http_serve_file+0x588>)
 800b9da:	2164      	movs	r1, #100	@ 0x64
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f006 fdef 	bl	80125c0 <mg_snprintf>
 800b9e2:	e045      	b.n	800ba70 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 800b9e4:	23ce      	movs	r3, #206	@ 0xce
 800b9e6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 800b9ea:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b9ee:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800b9f2:	681a      	ldr	r2, [r3, #0]
 800b9f4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800b9f8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	3301      	adds	r3, #1
 800ba02:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 800ba06:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ba0a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2200      	movs	r2, #0
 800ba12:	469a      	mov	sl, r3
 800ba14:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800ba16:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ba1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800ba24:	4413      	add	r3, r2
 800ba26:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 800ba28:	2200      	movs	r2, #0
 800ba2a:	461d      	mov	r5, r3
 800ba2c:	4616      	mov	r6, r2
 800ba2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ba32:	2200      	movs	r2, #0
 800ba34:	603b      	str	r3, [r7, #0]
 800ba36:	607a      	str	r2, [r7, #4]
 800ba38:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ba3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ba40:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ba44:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800ba48:	e9cd ab00 	strd	sl, fp, [sp]
 800ba4c:	4a50      	ldr	r2, [pc, #320]	@ (800bb90 <mg_http_serve_file+0x58c>)
 800ba4e:	2164      	movs	r1, #100	@ 0x64
 800ba50:	4618      	mov	r0, r3
 800ba52:	f006 fdb5 	bl	80125c0 <mg_snprintf>
        fs->sk(fd->fd, r1);
 800ba56:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800ba5a:	699b      	ldr	r3, [r3, #24]
 800ba5c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800ba60:	6810      	ldr	r0, [r2, #0]
 800ba62:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800ba66:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800ba6a:	6812      	ldr	r2, [r2, #0]
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	4798      	blx	r3
      }
    }
    mg_printf(c,
 800ba70:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800ba74:	f7fe fec2 	bl	800a7fc <mg_http_status_code_str>
 800ba78:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 800ba7a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ba7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba82:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 800ba84:	461d      	mov	r5, r3
 800ba86:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800ba8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800ba94:	2100      	movs	r1, #0
 800ba96:	4698      	mov	r8, r3
 800ba98:	4689      	mov	r9, r1
 800ba9a:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <mg_http_serve_file+0x4a2>
 800baa2:	493c      	ldr	r1, [pc, #240]	@ (800bb94 <mg_http_serve_file+0x590>)
 800baa4:	e000      	b.n	800baa8 <mg_http_serve_file+0x4a4>
 800baa6:	493c      	ldr	r1, [pc, #240]	@ (800bb98 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 800baa8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800baac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d006      	beq.n	800bac6 <mg_http_serve_file+0x4c2>
 800bab8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800babc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	e000      	b.n	800bac8 <mg_http_serve_file+0x4c4>
 800bac6:	4b34      	ldr	r3, [pc, #208]	@ (800bb98 <mg_http_serve_file+0x594>)
 800bac8:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800bacc:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 800bad0:	9308      	str	r3, [sp, #32]
 800bad2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bad6:	9307      	str	r3, [sp, #28]
 800bad8:	9106      	str	r1, [sp, #24]
 800bada:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800bade:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800bae2:	9302      	str	r3, [sp, #8]
 800bae4:	9201      	str	r2, [sp, #4]
 800bae6:	9500      	str	r5, [sp, #0]
 800bae8:	4623      	mov	r3, r4
 800baea:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800baee:	492b      	ldr	r1, [pc, #172]	@ (800bb9c <mg_http_serve_file+0x598>)
 800baf0:	6800      	ldr	r0, [r0, #0]
 800baf2:	f002 fa87 	bl	800e004 <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 800baf6:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800bafa:	4929      	ldr	r1, [pc, #164]	@ (800bba0 <mg_http_serve_file+0x59c>)
 800bafc:	4618      	mov	r0, r3
 800bafe:	f00a f925 	bl	8015d4c <mg_str_s>
 800bb02:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bb06:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800bb0a:	6819      	ldr	r1, [r3, #0]
 800bb0c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800bb10:	cb0c      	ldmia	r3, {r2, r3}
 800bb12:	c903      	ldmia	r1, {r0, r1}
 800bb14:	f00a f9dd 	bl	8015ed2 <mg_strcasecmp>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10f      	bne.n	800bb3e <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 800bb1e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bb22:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800bb2c:	f023 0301 	bic.w	r3, r3, #1
 800bb30:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_fs_close(fd);
 800bb34:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800bb38:	f7fd fe3a 	bl	80097b0 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 800bb3c:	e01e      	b.n	800bb7c <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800bb3e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bb42:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	33a4      	adds	r3, #164	@ 0xa4
 800bb4a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 800bb4e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bb52:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a12      	ldr	r2, [pc, #72]	@ (800bba4 <mg_http_serve_file+0x5a0>)
 800bb5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 800bb5e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800bb62:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800bb6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 800bb70:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800bb74:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800bb78:	601a      	str	r2, [r3, #0]
}
 800bb7a:	e7ff      	b.n	800bb7c <mg_http_serve_file+0x578>
 800bb7c:	bf00      	nop
 800bb7e:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800bb82:	46bd      	mov	sp, r7
 800bb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb88:	08026ffc 	.word	0x08026ffc
 800bb8c:	08027004 	.word	0x08027004
 800bb90:	08027024 	.word	0x08027024
 800bb94:	0802704c 	.word	0x0802704c
 800bb98:	08026d04 	.word	0x08026d04
 800bb9c:	08027068 	.word	0x08027068
 800bba0:	080270b8 	.word	0x080270b8
 800bba4:	0800b31d 	.word	0x0800b31d

0800bba8 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 800bba8:	b082      	sub	sp, #8
 800bbaa:	b590      	push	{r4, r7, lr}
 800bbac:	b08f      	sub	sp, #60	@ 0x3c
 800bbae:	af02      	add	r7, sp, #8
 800bbb0:	60f8      	str	r0, [r7, #12]
 800bbb2:	60b9      	str	r1, [r7, #8]
 800bbb4:	607a      	str	r2, [r7, #4]
 800bbb6:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 800bbb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbba:	461a      	mov	r2, r3
 800bbbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	4a9c      	ldr	r2, [pc, #624]	@ (800be34 <uri_to_path2+0x28c>)
 800bbc4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bbc6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bbc8:	f006 fcfa 	bl	80125c0 <mg_snprintf>
 800bbcc:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 800bbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd0:	3302      	adds	r3, #2
 800bbd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d809      	bhi.n	800bbec <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 800bbd8:	4b97      	ldr	r3, [pc, #604]	@ (800be38 <uri_to_path2+0x290>)
 800bbda:	4a98      	ldr	r2, [pc, #608]	@ (800be3c <uri_to_path2+0x294>)
 800bbdc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f7ff fb07 	bl	800b1f4 <mg_http_reply>
    return -1;
 800bbe6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbea:	e143      	b.n	800be74 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 800bbec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bbf2:	4413      	add	r3, r2
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d012      	beq.n	800bc24 <uri_to_path2+0x7c>
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc00:	3b01      	subs	r3, #1
 800bc02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc04:	4413      	add	r3, r2
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	2b2f      	cmp	r3, #47	@ 0x2f
 800bc0a:	d00b      	beq.n	800bc24 <uri_to_path2+0x7c>
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	627a      	str	r2, [r7, #36]	@ 0x24
 800bc12:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc14:	4413      	add	r3, r2
 800bc16:	222f      	movs	r2, #47	@ 0x2f
 800bc18:	701a      	strb	r2, [r3, #0]
 800bc1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1e:	4413      	add	r3, r2
 800bc20:	2200      	movs	r2, #0
 800bc22:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 800bc24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d212      	bcs.n	800bc54 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc34:	18d0      	adds	r0, r2, r3
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	68da      	ldr	r2, [r3, #12]
 800bc3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bc3c:	1ad1      	subs	r1, r2, r3
 800bc3e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc42:	18d4      	adds	r4, r2, r3
 800bc44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	9200      	str	r2, [sp, #0]
 800bc4e:	4622      	mov	r2, r4
 800bc50:	f7fe f967 	bl	8009f22 <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 800bc54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc56:	3b01      	subs	r3, #1
 800bc58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bc5a:	4413      	add	r3, r2
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 800bc60:	f107 0314 	add.w	r3, r7, #20
 800bc64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f00a f88c 	bl	8015d86 <mg_str_n>
 800bc6e:	f107 0314 	add.w	r3, r7, #20
 800bc72:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc76:	f015 fabd 	bl	80211f4 <mg_path_is_sane>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	f083 0301 	eor.w	r3, r3, #1
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d009      	beq.n	800bc9a <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 800bc86:	4b6e      	ldr	r3, [pc, #440]	@ (800be40 <uri_to_path2+0x298>)
 800bc88:	4a6c      	ldr	r2, [pc, #432]	@ (800be3c <uri_to_path2+0x294>)
 800bc8a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f7ff fab0 	bl	800b1f4 <mg_http_reply>
    return -1;
 800bc94:	f04f 33ff 	mov.w	r3, #4294967295
 800bc98:	e0ec      	b.n	800be74 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 800bc9a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bc9c:	f7f4 fb98 	bl	80003d0 <strlen>
 800bca0:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 800bca2:	e007      	b.n	800bcb4 <uri_to_path2+0x10c>
 800bca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca6:	3b01      	subs	r3, #1
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcaa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcae:	4413      	add	r3, r2
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
 800bcb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d906      	bls.n	800bcc8 <uri_to_path2+0x120>
 800bcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bcc0:	4413      	add	r3, r2
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b2f      	cmp	r3, #47	@ 0x2f
 800bcc6:	d0ed      	beq.n	800bca4 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800bcc8:	f107 031c 	add.w	r3, r7, #28
 800bccc:	495d      	ldr	r1, [pc, #372]	@ (800be44 <uri_to_path2+0x29c>)
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f00a f83c 	bl	8015d4c <mg_str_s>
 800bcd4:	68b9      	ldr	r1, [r7, #8]
 800bcd6:	f107 031c 	add.w	r3, r7, #28
 800bcda:	cb0c      	ldmia	r3, {r2, r3}
 800bcdc:	3108      	adds	r1, #8
 800bcde:	c903      	ldmia	r1, {r0, r1}
 800bce0:	f00a f8b5 	bl	8015e4e <mg_strcmp>
 800bce4:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d007      	beq.n	800bcfa <uri_to_path2+0x152>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bcf4:	4798      	blx	r3
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	e000      	b.n	800bcfc <uri_to_path2+0x154>
 800bcfa:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800bcfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 800bcfe:	4b52      	ldr	r3, [pc, #328]	@ (800be48 <uri_to_path2+0x2a0>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	dd16      	ble.n	800bd34 <uri_to_path2+0x18c>
 800bd06:	4b51      	ldr	r3, [pc, #324]	@ (800be4c <uri_to_path2+0x2a4>)
 800bd08:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 800bd0c:	4950      	ldr	r1, [pc, #320]	@ (800be50 <uri_to_path2+0x2a8>)
 800bd0e:	2004      	movs	r0, #4
 800bd10:	f002 f81c 	bl	800dd4c <mg_log_prefix>
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	689a      	ldr	r2, [r3, #8]
 800bd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd24:	9301      	str	r3, [sp, #4]
 800bd26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	4849      	ldr	r0, [pc, #292]	@ (800be54 <uri_to_path2+0x2ac>)
 800bd30:	f002 f85c 	bl	800ddec <mg_log>
              flags));
  if (flags == 0) {
 800bd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f000 809b 	beq.w	800be72 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800bd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3e:	f003 0304 	and.w	r3, r3, #4
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d020      	beq.n	800bd88 <uri_to_path2+0x1e0>
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	68db      	ldr	r3, [r3, #12]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d01c      	beq.n	800bd88 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	689a      	ldr	r2, [r3, #8]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	3b01      	subs	r3, #1
 800bd58:	4413      	add	r3, r2
 800bd5a:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800bd5c:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd5e:	d013      	beq.n	800bd88 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800bd64:	461a      	mov	r2, r3
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	493b      	ldr	r1, [pc, #236]	@ (800be58 <uri_to_path2+0x2b0>)
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	f002 f949 	bl	800e004 <mg_printf>
    c->is_resp = 0;
 800bd72:	68fa      	ldr	r2, [r7, #12]
 800bd74:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800bd78:	f023 0301 	bic.w	r3, r3, #1
 800bd7c:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    flags = -1;
 800bd80:	f04f 33ff 	mov.w	r3, #4294967295
 800bd84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd86:	e074      	b.n	800be72 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 800bd88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8a:	f003 0304 	and.w	r3, r3, #4
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d06f      	beq.n	800be72 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800bd92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd96:	18d0      	adds	r0, r2, r3
 800bd98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd9c:	1ad3      	subs	r3, r2, r3
 800bd9e:	4a2f      	ldr	r2, [pc, #188]	@ (800be5c <uri_to_path2+0x2b4>)
 800bda0:	4619      	mov	r1, r3
 800bda2:	f006 fc0d 	bl	80125c0 <mg_snprintf>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d009      	beq.n	800bdc0 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bdb6:	4798      	blx	r3
 800bdb8:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800bdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d116      	bne.n	800bdee <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800bdc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc4:	18d0      	adds	r0, r2, r3
 800bdc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdca:	1ad3      	subs	r3, r2, r3
 800bdcc:	4a24      	ldr	r2, [pc, #144]	@ (800be60 <uri_to_path2+0x2b8>)
 800bdce:	4619      	mov	r1, r3
 800bdd0:	f006 fbf6 	bl	80125c0 <mg_snprintf>
 800bdd4:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00c      	beq.n	800bdf4 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2200      	movs	r2, #0
 800bde0:	2100      	movs	r1, #0
 800bde2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800bde4:	4798      	blx	r3
 800bde6:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800bde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d002      	beq.n	800bdf4 <uri_to_path2+0x24c>
      flags = tmp;
 800bdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bdf2:	e03e      	b.n	800be72 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800bdf4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bdf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf8:	18d0      	adds	r0, r2, r3
 800bdfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdfe:	1ad3      	subs	r3, r2, r3
 800be00:	4a18      	ldr	r2, [pc, #96]	@ (800be64 <uri_to_path2+0x2bc>)
 800be02:	4619      	mov	r1, r3
 800be04:	f006 fbdc 	bl	80125c0 <mg_snprintf>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d02c      	beq.n	800be68 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2200      	movs	r2, #0
 800be14:	2100      	movs	r1, #0
 800be16:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800be18:	4798      	blx	r3
 800be1a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 800be1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d022      	beq.n	800be68 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 800be22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800be26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be28:	330b      	adds	r3, #11
 800be2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be2c:	4413      	add	r3, r2
 800be2e:	2200      	movs	r2, #0
 800be30:	701a      	strb	r2, [r3, #0]
 800be32:	e01e      	b.n	800be72 <uri_to_path2+0x2ca>
 800be34:	080267a4 	.word	0x080267a4
 800be38:	080270c0 	.word	0x080270c0
 800be3c:	08026d04 	.word	0x08026d04
 800be40:	080270d4 	.word	0x080270d4
 800be44:	080270e4 	.word	0x080270e4
 800be48:	24000258 	.word	0x24000258
 800be4c:	0802a0c0 	.word	0x0802a0c0
 800be50:	080264c4 	.word	0x080264c4
 800be54:	080270e8 	.word	0x080270e8
 800be58:	080270fc 	.word	0x080270fc
 800be5c:	08027138 	.word	0x08027138
 800be60:	08027144 	.word	0x08027144
 800be64:	08027154 	.word	0x08027154
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800be68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800be6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be6c:	4413      	add	r3, r2
 800be6e:	2200      	movs	r2, #0
 800be70:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800be72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800be74:	4618      	mov	r0, r3
 800be76:	3734      	adds	r7, #52	@ 0x34
 800be78:	46bd      	mov	sp, r7
 800be7a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800be7e:	b002      	add	sp, #8
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop

0800be84 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800be84:	b580      	push	{r7, lr}
 800be86:	b09c      	sub	sp, #112	@ 0x70
 800be88:	af06      	add	r7, sp, #24
 800be8a:	6178      	str	r0, [r7, #20]
 800be8c:	6139      	str	r1, [r7, #16]
 800be8e:	60fa      	str	r2, [r7, #12]
 800be90:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	695b      	ldr	r3, [r3, #20]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d002      	beq.n	800bea0 <uri_to_path+0x1c>
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	e000      	b.n	800bea2 <uri_to_path+0x1e>
 800bea0:	4b5b      	ldr	r3, [pc, #364]	@ (800c010 <uri_to_path+0x18c>)
 800bea2:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800beac:	4611      	mov	r1, r2
 800beae:	4618      	mov	r0, r3
 800beb0:	f009 ff4c 	bl	8015d4c <mg_str_s>
 800beb4:	2300      	movs	r3, #0
 800beb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800beb8:	2300      	movs	r3, #0
 800beba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bebc:	f107 031c 	add.w	r3, r7, #28
 800bec0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800bec4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bec8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 800becc:	e078      	b.n	800bfc0 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 800bece:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800bed2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800bed6:	213d      	movs	r1, #61	@ 0x3d
 800bed8:	9100      	str	r1, [sp, #0]
 800beda:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800bede:	c903      	ldmia	r1, {r0, r1}
 800bee0:	f00a f932 	bl	8016148 <mg_span>
 800bee4:	4603      	mov	r3, r0
 800bee6:	f083 0301 	eor.w	r3, r3, #1
 800beea:	b2db      	uxtb	r3, r3
 800beec:	2b00      	cmp	r3, #0
 800beee:	d014      	beq.n	800bf1a <uri_to_path+0x96>
 800bef0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800bef4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800bef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800befc:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf00:	463b      	mov	r3, r7
 800bf02:	2200      	movs	r2, #0
 800bf04:	2100      	movs	r1, #0
 800bf06:	4618      	mov	r0, r3
 800bf08:	f009 ff3d 	bl	8015d86 <mg_str_n>
 800bf0c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800bf10:	463a      	mov	r2, r7
 800bf12:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf16:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 800bf1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d123      	bne.n	800bf68 <uri_to_path+0xe4>
 800bf20:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800bf24:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800bf28:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf2c:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf30:	463b      	mov	r3, r7
 800bf32:	4938      	ldr	r1, [pc, #224]	@ (800c014 <uri_to_path+0x190>)
 800bf34:	4618      	mov	r0, r3
 800bf36:	f009 ff09 	bl	8015d4c <mg_str_s>
 800bf3a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800bf3e:	463a      	mov	r2, r7
 800bf40:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf44:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf4c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800bf50:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf54:	e883 0003 	stmia.w	r3, {r0, r1}
 800bf58:	f107 031c 	add.w	r3, r7, #28
 800bf5c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800bf60:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bf64:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	68da      	ldr	r2, [r3, #12]
 800bf6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d323      	bcc.n	800bfba <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	6899      	ldr	r1, [r3, #8]
 800bf76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf78:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f009 ff02 	bl	8015d86 <mg_str_n>
 800bf82:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800bf86:	cb0c      	ldmia	r3, {r2, r3}
 800bf88:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800bf8c:	c903      	ldmia	r1, {r0, r1}
 800bf8e:	f009 ff5e 	bl	8015e4e <mg_strcmp>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d112      	bne.n	800bfbe <uri_to_path+0x13a>
    u = k, p = v;
 800bf98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf9c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800bfa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfa4:	e883 0003 	stmia.w	r3, {r0, r1}
 800bfa8:	f107 031c 	add.w	r3, r7, #28
 800bfac:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800bfb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfb4:	e883 0003 	stmia.w	r3, {r0, r1}
 800bfb8:	e002      	b.n	800bfc0 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 800bfba:	bf00      	nop
 800bfbc:	e000      	b.n	800bfc0 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800bfbe:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 800bfc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800bfc4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800bfc8:	212c      	movs	r1, #44	@ 0x2c
 800bfca:	9100      	str	r1, [sp, #0]
 800bfcc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800bfd0:	c903      	ldmia	r1, {r0, r1}
 800bfd2:	f00a f8b9 	bl	8016148 <mg_span>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	f47f af78 	bne.w	800bece <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 800bfde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bfe0:	9304      	str	r3, [sp, #16]
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	9303      	str	r3, [sp, #12]
 800bfe6:	aa01      	add	r2, sp, #4
 800bfe8:	f107 031c 	add.w	r3, r7, #28
 800bfec:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bff0:	e882 0003 	stmia.w	r2, {r0, r1}
 800bff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bffc:	6939      	ldr	r1, [r7, #16]
 800bffe:	6978      	ldr	r0, [r7, #20]
 800c000:	f7ff fdd2 	bl	800bba8 <uri_to_path2>
 800c004:	4603      	mov	r3, r0
}
 800c006:	4618      	mov	r0, r3
 800c008:	3758      	adds	r7, #88	@ 0x58
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	24000038 	.word	0x24000038
 800c014:	080270e4 	.word	0x080270e4

0800c018 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 800c018:	b580      	push	{r7, lr}
 800c01a:	b0a6      	sub	sp, #152	@ 0x98
 800c01c:	af02      	add	r7, sp, #8
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800c02c:	f107 0314 	add.w	r3, r7, #20
 800c030:	2264      	movs	r2, #100	@ 0x64
 800c032:	9200      	str	r2, [sp, #0]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	68b9      	ldr	r1, [r7, #8]
 800c038:	68f8      	ldr	r0, [r7, #12]
 800c03a:	f7ff ff23 	bl	800be84 <uri_to_path>
 800c03e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 800c042:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c046:	2b00      	cmp	r3, #0
 800c048:	db41      	blt.n	800c0ce <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800c04a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c04e:	f003 0304 	and.w	r3, r3, #4
 800c052:	2b00      	cmp	r3, #0
 800c054:	d007      	beq.n	800c066 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800c056:	4b20      	ldr	r3, [pc, #128]	@ (800c0d8 <mg_http_serve_dir+0xc0>)
 800c058:	4a20      	ldr	r2, [pc, #128]	@ (800c0dc <mg_http_serve_dir+0xc4>)
 800c05a:	f240 1193 	movw	r1, #403	@ 0x193
 800c05e:	68f8      	ldr	r0, [r7, #12]
 800c060:	f7ff f8c8 	bl	800b1f4 <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800c064:	e033      	b.n	800c0ce <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 800c066:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d028      	beq.n	800c0c0 <mg_http_serve_dir+0xa8>
 800c06e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c072:	2b00      	cmp	r3, #0
 800c074:	d024      	beq.n	800c0c0 <mg_http_serve_dir+0xa8>
 800c076:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800c07a:	f107 0214 	add.w	r2, r7, #20
 800c07e:	4611      	mov	r1, r2
 800c080:	4618      	mov	r0, r3
 800c082:	f009 fe63 	bl	8015d4c <mg_str_s>
 800c086:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800c08a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800c08e:	4618      	mov	r0, r3
 800c090:	f009 fe5c 	bl	8015d4c <mg_str_s>
 800c094:	2300      	movs	r3, #0
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800c09c:	cb0c      	ldmia	r3, {r2, r3}
 800c09e:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800c0a2:	c903      	ldmia	r1, {r0, r1}
 800c0a4:	f009 ff5c 	bl	8015f60 <mg_match>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d008      	beq.n	800c0c0 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f107 0214 	add.w	r2, r7, #20
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f009 fe33 	bl	8015d24 <mg_http_serve_ssi>
}
 800c0be:	e006      	b.n	800c0ce <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 800c0c0:	f107 0214 	add.w	r2, r7, #20
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68b9      	ldr	r1, [r7, #8]
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f7ff fa9b 	bl	800b604 <mg_http_serve_file>
}
 800c0ce:	bf00      	nop
 800c0d0:	3790      	adds	r7, #144	@ 0x90
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	08027164 	.word	0x08027164
 800c0dc:	08026d04 	.word	0x08026d04

0800c0e0 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 800c0e0:	b590      	push	{r4, r7, lr}
 800c0e2:	b0cf      	sub	sp, #316	@ 0x13c
 800c0e4:	af02      	add	r7, sp, #8
 800c0e6:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800c0ea:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800c0ee:	6020      	str	r0, [r4, #0]
 800c0f0:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800c0f4:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800c0f8:	6001      	str	r1, [r0, #0]
 800c0fa:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800c0fe:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800c102:	600a      	str	r2, [r1, #0]
 800c104:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c108:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800c10c:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800c10e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c112:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c116:	497a      	ldr	r1, [pc, #488]	@ (800c300 <mg_http_creds+0x220>)
 800c118:	6818      	ldr	r0, [r3, #0]
 800c11a:	f7fd fff5 	bl	800a108 <mg_http_get_header>
 800c11e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 800c122:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c126:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2200      	movs	r2, #0
 800c12e:	701a      	strb	r2, [r3, #0]
 800c130:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c134:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	781a      	ldrb	r2, [r3, #0]
 800c13c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c140:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800c148:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d05e      	beq.n	800c20e <mg_http_creds+0x12e>
 800c150:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	2b06      	cmp	r3, #6
 800c158:	d959      	bls.n	800c20e <mg_http_creds+0x12e>
 800c15a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2206      	movs	r2, #6
 800c162:	4968      	ldr	r1, [pc, #416]	@ (800c304 <mg_http_creds+0x224>)
 800c164:	4618      	mov	r0, r3
 800c166:	f019 fae7 	bl	8025738 <memcmp>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d14e      	bne.n	800c20e <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 800c170:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	1d98      	adds	r0, r3, #6
 800c178:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	1f99      	subs	r1, r3, #6
 800c180:	f107 0214 	add.w	r2, r7, #20
 800c184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c188:	f7fb fa10 	bl	80075ac <mg_base64_decode>
 800c18c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 800c190:	f107 0314 	add.w	r3, r7, #20
 800c194:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800c198:	213a      	movs	r1, #58	@ 0x3a
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7f4 f8c8 	bl	8000330 <memchr>
 800c1a0:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 800c1a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 80a2 	beq.w	800c2f2 <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 800c1ae:	f107 0314 	add.w	r3, r7, #20
 800c1b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800c1b6:	1ad2      	subs	r2, r2, r3
 800c1b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c1bc:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 800c1c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c1c4:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 800c1c8:	f107 0314 	add.w	r3, r7, #20
 800c1cc:	9300      	str	r3, [sp, #0]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	4a4d      	ldr	r2, [pc, #308]	@ (800c308 <mg_http_creds+0x228>)
 800c1d2:	6809      	ldr	r1, [r1, #0]
 800c1d4:	6800      	ldr	r0, [r0, #0]
 800c1d6:	f006 f9f3 	bl	80125c0 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 800c1da:	f107 0314 	add.w	r3, r7, #20
 800c1de:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800c1ea:	1a9b      	subs	r3, r3, r2
 800c1ec:	1e5a      	subs	r2, r3, #1
 800c1ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800c1f8:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800c1fc:	9300      	str	r3, [sp, #0]
 800c1fe:	4613      	mov	r3, r2
 800c200:	4a41      	ldr	r2, [pc, #260]	@ (800c308 <mg_http_creds+0x228>)
 800c202:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800c206:	6800      	ldr	r0, [r0, #0]
 800c208:	f006 f9da 	bl	80125c0 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800c20c:	e071      	b.n	800c2f2 <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 800c20e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c212:	2b00      	cmp	r3, #0
 800c214:	d024      	beq.n	800c260 <mg_http_creds+0x180>
 800c216:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	2b07      	cmp	r3, #7
 800c21e:	d91f      	bls.n	800c260 <mg_http_creds+0x180>
 800c220:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	2207      	movs	r2, #7
 800c228:	4938      	ldr	r1, [pc, #224]	@ (800c30c <mg_http_creds+0x22c>)
 800c22a:	4618      	mov	r0, r3
 800c22c:	f019 fa84 	bl	8025738 <memcmp>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d114      	bne.n	800c260 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 800c236:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	1fda      	subs	r2, r3, #7
 800c23e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3307      	adds	r3, #7
 800c246:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800c24a:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	4613      	mov	r3, r2
 800c252:	4a2d      	ldr	r2, [pc, #180]	@ (800c308 <mg_http_creds+0x228>)
 800c254:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800c258:	6800      	ldr	r0, [r0, #0]
 800c25a:	f006 f9b1 	bl	80125c0 <mg_snprintf>
 800c25e:	e049      	b.n	800c2f4 <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 800c260:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c264:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c268:	4929      	ldr	r1, [pc, #164]	@ (800c310 <mg_http_creds+0x230>)
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	f7fd ff4c 	bl	800a108 <mg_http_get_header>
 800c270:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800c274:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d028      	beq.n	800c2ce <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 800c27c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800c280:	220c      	movs	r2, #12
 800c282:	4924      	ldr	r1, [pc, #144]	@ (800c314 <mg_http_creds+0x234>)
 800c284:	4618      	mov	r0, r3
 800c286:	f009 fd7e 	bl	8015d86 <mg_str_n>
 800c28a:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800c28e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800c292:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800c29c:	ca06      	ldmia	r2, {r1, r2}
 800c29e:	f000 f864 	bl	800c36a <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 800c2a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d024      	beq.n	800c2f4 <mg_http_creds+0x214>
 800c2aa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c2b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800c2b8:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4a11      	ldr	r2, [pc, #68]	@ (800c308 <mg_http_creds+0x228>)
 800c2c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800c2c6:	6800      	ldr	r0, [r0, #0]
 800c2c8:	f006 f97a 	bl	80125c0 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 800c2cc:	e012      	b.n	800c2f4 <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 800c2ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c2d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f103 0010 	add.w	r0, r3, #16
 800c2dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800c2e0:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 800c2e4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800c2e8:	6812      	ldr	r2, [r2, #0]
 800c2ea:	490a      	ldr	r1, [pc, #40]	@ (800c314 <mg_http_creds+0x234>)
 800c2ec:	f7fd fda4 	bl	8009e38 <mg_http_get_var>
}
 800c2f0:	e000      	b.n	800c2f4 <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800c2f2:	bf00      	nop
}
 800c2f4:	bf00      	nop
 800c2f6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd90      	pop	{r4, r7, pc}
 800c2fe:	bf00      	nop
 800c300:	08027178 	.word	0x08027178
 800c304:	08027188 	.word	0x08027188
 800c308:	080267a4 	.word	0x080267a4
 800c30c:	08027190 	.word	0x08027190
 800c310:	08027198 	.word	0x08027198
 800c314:	080271a0 	.word	0x080271a0

0800c318 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	1d3b      	adds	r3, r7, #4
 800c322:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800c326:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d913      	bls.n	800c354 <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b22      	cmp	r3, #34	@ 0x22
 800c332:	d10f      	bne.n	800c354 <stripquotes+0x3c>
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	3b01      	subs	r3, #1
 800c33a:	4413      	add	r3, r2
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b22      	cmp	r3, #34	@ 0x22
 800c340:	d108      	bne.n	800c354 <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	1c59      	adds	r1, r3, #1
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	1e9a      	subs	r2, r3, #2
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f009 fd1a 	bl	8015d86 <mg_str_n>
             : s;
 800c352:	e006      	b.n	800c362 <stripquotes+0x4a>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	461a      	mov	r2, r3
 800c358:	1d3b      	adds	r3, r7, #4
 800c35a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c35e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	3710      	adds	r7, #16
 800c366:	46bd      	mov	sp, r7
 800c368:	bd80      	pop	{r7, pc}

0800c36a <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800c36a:	b082      	sub	sp, #8
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b08c      	sub	sp, #48	@ 0x30
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	1d38      	adds	r0, r7, #4
 800c376:	e880 0006 	stmia.w	r0, {r1, r2}
 800c37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800c37c:	2300      	movs	r3, #0
 800c37e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c380:	e072      	b.n	800c468 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c388:	440b      	add	r3, r1
 800c38a:	4413      	add	r3, r2
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	2b3d      	cmp	r3, #61	@ 0x3d
 800c390:	d167      	bne.n	800c462 <mg_http_get_header_var+0xf8>
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c396:	4413      	add	r3, r2
 800c398:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c39a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c39c:	4618      	mov	r0, r3
 800c39e:	f019 f9cb 	bl	8025738 <memcmp>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d15c      	bne.n	800c462 <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c3ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ae:	440b      	add	r3, r1
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	4413      	add	r3, r2
 800c3b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	4413      	add	r3, r2
 800c3c0:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 800c3c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d205      	bcs.n	800c3d6 <mg_http_get_header_var+0x6c>
 800c3ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	2b22      	cmp	r3, #34	@ 0x22
 800c3d0:	d101      	bne.n	800c3d6 <mg_http_get_header_var+0x6c>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e000      	b.n	800c3d8 <mg_http_get_header_var+0x6e>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 800c3da:	e002      	b.n	800c3e2 <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 800c3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3de:	3301      	adds	r3, #1
 800c3e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 800c3e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3e4:	6a3b      	ldr	r3, [r7, #32]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d227      	bcs.n	800c43a <mg_http_get_header_var+0xd0>
 800c3ea:	69fb      	ldr	r3, [r7, #28]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d010      	beq.n	800c412 <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800c3f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d003      	beq.n	800c400 <mg_http_get_header_var+0x96>
 800c3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3fa:	781b      	ldrb	r3, [r3, #0]
 800c3fc:	2b22      	cmp	r3, #34	@ 0x22
 800c3fe:	d001      	beq.n	800c404 <mg_http_get_header_var+0x9a>
 800c400:	2301      	movs	r3, #1
 800c402:	e000      	b.n	800c406 <mg_http_get_header_var+0x9c>
 800c404:	2300      	movs	r3, #0
      while (p < x &&
 800c406:	f003 0301 	and.w	r3, r3, #1
 800c40a:	b2db      	uxtb	r3, r3
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1e5      	bne.n	800c3dc <mg_http_get_header_var+0x72>
 800c410:	e013      	b.n	800c43a <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800c412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	2b3b      	cmp	r3, #59	@ 0x3b
 800c418:	d009      	beq.n	800c42e <mg_http_get_header_var+0xc4>
 800c41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	2b20      	cmp	r3, #32
 800c420:	d005      	beq.n	800c42e <mg_http_get_header_var+0xc4>
 800c422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	2b2c      	cmp	r3, #44	@ 0x2c
 800c428:	d001      	beq.n	800c42e <mg_http_get_header_var+0xc4>
 800c42a:	2301      	movs	r3, #1
 800c42c:	e000      	b.n	800c430 <mg_http_get_header_var+0xc6>
 800c42e:	2300      	movs	r3, #0
      while (p < x &&
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	b2db      	uxtb	r3, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1d0      	bne.n	800c3dc <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 800c43a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	4413      	add	r3, r2
 800c444:	461a      	mov	r2, r3
 800c446:	f107 0314 	add.w	r3, r7, #20
 800c44a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c44c:	4618      	mov	r0, r3
 800c44e:	f009 fc9a 	bl	8015d86 <mg_str_n>
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	f107 0314 	add.w	r3, r7, #20
 800c458:	e893 0006 	ldmia.w	r3, {r1, r2}
 800c45c:	f7ff ff5c 	bl	800c318 <stripquotes>
 800c460:	e012      	b.n	800c488 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800c462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c464:	3301      	adds	r3, #1
 800c466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d006      	beq.n	800c47c <mg_http_get_header_var+0x112>
 800c46e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c472:	4413      	add	r3, r2
 800c474:	1c9a      	adds	r2, r3, #2
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d382      	bcc.n	800c382 <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2200      	movs	r2, #0
 800c480:	2100      	movs	r1, #0
 800c482:	4618      	mov	r0, r3
 800c484:	f009 fc7f 	bl	8015d86 <mg_str_n>
}
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	3730      	adds	r7, #48	@ 0x30
 800c48c:	46bd      	mov	sp, r7
 800c48e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c492:	b002      	add	sp, #8
 800c494:	4770      	bx	lr

0800c496 <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 800c496:	b580      	push	{r7, lr}
 800c498:	b082      	sub	sp, #8
 800c49a:	af00      	add	r7, sp, #0
 800c49c:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	f018 fd94 	bl	8024fd0 <atoi>
 800c4a8:	4603      	mov	r3, r0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3708      	adds	r7, #8
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <is_hex_digit>:

static bool is_hex_digit(int c) {
 800c4b2:	b480      	push	{r7}
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c4be:	dd02      	ble.n	800c4c6 <is_hex_digit+0x14>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b39      	cmp	r3, #57	@ 0x39
 800c4c4:	dd0b      	ble.n	800c4de <is_hex_digit+0x2c>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b60      	cmp	r3, #96	@ 0x60
 800c4ca:	dd02      	ble.n	800c4d2 <is_hex_digit+0x20>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b66      	cmp	r3, #102	@ 0x66
 800c4d0:	dd05      	ble.n	800c4de <is_hex_digit+0x2c>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2b40      	cmp	r3, #64	@ 0x40
 800c4d6:	dd04      	ble.n	800c4e2 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2b46      	cmp	r3, #70	@ 0x46
 800c4dc:	dc01      	bgt.n	800c4e2 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e000      	b.n	800c4e4 <is_hex_digit+0x32>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	f003 0301 	and.w	r3, r3, #1
 800c4e8:	b2db      	uxtb	r3, r3
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	370c      	adds	r7, #12
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f4:	4770      	bx	lr

0800c4f6 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b08a      	sub	sp, #40	@ 0x28
 800c4fa:	af02      	add	r7, sp, #8
 800c4fc:	60f8      	str	r0, [r7, #12]
 800c4fe:	60b9      	str	r1, [r7, #8]
 800c500:	607a      	str	r2, [r7, #4]
 800c502:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	61fb      	str	r3, [r7, #28]
 800c508:	2300      	movs	r3, #0
 800c50a:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b02      	cmp	r3, #2
 800c510:	dc04      	bgt.n	800c51c <skip_chunk+0x26>
 800c512:	2300      	movs	r3, #0
 800c514:	e07a      	b.n	800c60c <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	3301      	adds	r3, #1
 800c51a:	61fb      	str	r3, [r7, #28]
 800c51c:	69fa      	ldr	r2, [r7, #28]
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	429a      	cmp	r2, r3
 800c522:	da09      	bge.n	800c538 <skip_chunk+0x42>
 800c524:	69fb      	ldr	r3, [r7, #28]
 800c526:	68fa      	ldr	r2, [r7, #12]
 800c528:	4413      	add	r3, r2
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7ff ffc0 	bl	800c4b2 <is_hex_digit>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d1ee      	bne.n	800c516 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d102      	bne.n	800c544 <skip_chunk+0x4e>
 800c53e:	f04f 33ff 	mov.w	r3, #4294967295
 800c542:	e063      	b.n	800c60c <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	2b08      	cmp	r3, #8
 800c548:	dd02      	ble.n	800c550 <skip_chunk+0x5a>
 800c54a:	f04f 33ff 	mov.w	r3, #4294967295
 800c54e:	e05d      	b.n	800c60c <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	429a      	cmp	r2, r3
 800c556:	da0c      	bge.n	800c572 <skip_chunk+0x7c>
 800c558:	69fb      	ldr	r3, [r7, #28]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	4413      	add	r3, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b0d      	cmp	r3, #13
 800c562:	d106      	bne.n	800c572 <skip_chunk+0x7c>
 800c564:	69fb      	ldr	r3, [r7, #28]
 800c566:	3301      	adds	r3, #1
 800c568:	68fa      	ldr	r2, [r7, #12]
 800c56a:	4413      	add	r3, r2
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	2b0a      	cmp	r3, #10
 800c570:	d002      	beq.n	800c578 <skip_chunk+0x82>
 800c572:	f04f 33ff 	mov.w	r3, #4294967295
 800c576:	e049      	b.n	800c60c <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 800c578:	69fa      	ldr	r2, [r7, #28]
 800c57a:	f107 0314 	add.w	r3, r7, #20
 800c57e:	68f9      	ldr	r1, [r7, #12]
 800c580:	4618      	mov	r0, r3
 800c582:	f009 fc00 	bl	8015d86 <mg_str_n>
 800c586:	f107 0310 	add.w	r3, r7, #16
 800c58a:	2204      	movs	r2, #4
 800c58c:	9200      	str	r2, [sp, #0]
 800c58e:	2210      	movs	r2, #16
 800c590:	f107 0114 	add.w	r1, r7, #20
 800c594:	c903      	ldmia	r1, {r0, r1}
 800c596:	f009 fe34 	bl	8016202 <mg_str_to_num>
 800c59a:	4603      	mov	r3, r0
 800c59c:	f083 0301 	eor.w	r3, r3, #1
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d002      	beq.n	800c5ac <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 800c5a6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5aa:	e02f      	b.n	800c60c <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	da02      	bge.n	800c5b8 <skip_chunk+0xc2>
 800c5b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5b6:	e029      	b.n	800c60c <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 800c5b8:	68ba      	ldr	r2, [r7, #8]
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	1eda      	subs	r2, r3, #3
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	dc01      	bgt.n	800c5ca <skip_chunk+0xd4>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e020      	b.n	800c60c <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	3302      	adds	r3, #2
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	2b0d      	cmp	r3, #13
 800c5da:	d108      	bne.n	800c5ee <skip_chunk+0xf8>
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	69fb      	ldr	r3, [r7, #28]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	3303      	adds	r3, #3
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	2b0a      	cmp	r3, #10
 800c5ec:	d002      	beq.n	800c5f4 <skip_chunk+0xfe>
 800c5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f2:	e00b      	b.n	800c60c <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	1c9a      	adds	r2, r3, #2
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 800c602:	69fb      	ldr	r3, [r7, #28]
 800c604:	1c9a      	adds	r2, r3, #2
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	4413      	add	r3, r2
 800c60a:	3302      	adds	r3, #2
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3720      	adds	r7, #32
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800c614:	b580      	push	{r7, lr}
 800c616:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c620:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c624:	6018      	str	r0, [r3, #0]
 800c626:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c62a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800c62e:	6019      	str	r1, [r3, #0]
 800c630:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c634:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800c638:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 800c63a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c63e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	2b07      	cmp	r3, #7
 800c646:	d031      	beq.n	800c6ac <http_cb+0x98>
 800c648:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c64c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b09      	cmp	r3, #9
 800c654:	d02a      	beq.n	800c6ac <http_cb+0x98>
 800c656:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c65a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b02      	cmp	r3, #2
 800c662:	f040 8368 	bne.w	800cd36 <http_cb+0x722>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800c666:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c66a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 835b 	beq.w	800cd36 <http_cb+0x722>
 800c680:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c684:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800c68e:	f003 0310 	and.w	r3, r3, #16
 800c692:	b2db      	uxtb	r3, r3
 800c694:	2b00      	cmp	r3, #0
 800c696:	f040 834e 	bne.w	800cd36 <http_cb+0x722>
       c->recv.len > 0)) {  // see #2796
 800c69a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c69e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 8345 	beq.w	800cd36 <http_cb+0x722>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800c6b2:	e313      	b.n	800ccdc <http_cb+0x6c8>
      const char *buf = (char *) c->recv.buf + ofs;
 800c6b4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c6b8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800c6c4:	4413      	add	r3, r2
 800c6c6:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 800c6ca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c6ce:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c6d6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	f107 0210 	add.w	r2, r7, #16
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800c6e6:	f7fd fecb 	bl	800a480 <mg_http_parse>
 800c6ea:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 800c6f4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c6f8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c700:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 800c704:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800c708:	2b00      	cmp	r3, #0
 800c70a:	da38      	bge.n	800c77e <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800c70c:	4bb7      	ldr	r3, [pc, #732]	@ (800c9ec <http_cb+0x3d8>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	dd10      	ble.n	800c736 <http_cb+0x122>
 800c714:	4bb6      	ldr	r3, [pc, #728]	@ (800c9f0 <http_cb+0x3dc>)
 800c716:	f640 12a6 	movw	r2, #2470	@ 0x9a6
 800c71a:	49b6      	ldr	r1, [pc, #728]	@ (800c9f4 <http_cb+0x3e0>)
 800c71c:	2001      	movs	r0, #1
 800c71e:	f001 fb15 	bl	800dd4c <mg_log_prefix>
 800c722:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c726:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c72e:	4619      	mov	r1, r3
 800c730:	48b1      	ldr	r0, [pc, #708]	@ (800c9f8 <http_cb+0x3e4>)
 800c732:	f001 fb5b 	bl	800ddec <mg_log>
        c->is_draining = 1;
 800c736:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c73a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c73e:	681a      	ldr	r2, [r3, #0]
 800c740:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800c744:	f043 0310 	orr.w	r3, r3, #16
 800c748:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800c74c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c750:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c758:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800c75c:	1ad3      	subs	r3, r2, r3
 800c75e:	2b10      	cmp	r3, #16
 800c760:	bf28      	it	cs
 800c762:	2310      	movcs	r3, #16
 800c764:	4619      	mov	r1, r3
 800c766:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800c76a:	f001 fb75 	bl	800de58 <mg_hexdump>
        c->recv.len = 0;
 800c76e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c772:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2200      	movs	r2, #0
 800c77a:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 800c77c:	e2db      	b.n	800cd36 <http_cb+0x722>
      }
      if (n == 0) break;                 // Request is not buffered yet
 800c77e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800c782:	2b00      	cmp	r3, #0
 800c784:	f000 82c2 	beq.w	800cd0c <http_cb+0x6f8>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 800c788:	f107 0210 	add.w	r2, r7, #16
 800c78c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c790:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c794:	210a      	movs	r1, #10
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	f7fb fd8c 	bl	80082b4 <mg_call>
      if (c->recv.len != old_len) {
 800c79c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c7a0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7a8:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d01d      	beq.n	800c7ec <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 800c7b0:	4b8e      	ldr	r3, [pc, #568]	@ (800c9ec <http_cb+0x3d8>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b02      	cmp	r3, #2
 800c7b6:	dd10      	ble.n	800c7da <http_cb+0x1c6>
 800c7b8:	4b8d      	ldr	r3, [pc, #564]	@ (800c9f0 <http_cb+0x3dc>)
 800c7ba:	f44f 621b 	mov.w	r2, #2480	@ 0x9b0
 800c7be:	498d      	ldr	r1, [pc, #564]	@ (800c9f4 <http_cb+0x3e0>)
 800c7c0:	2003      	movs	r0, #3
 800c7c2:	f001 fac3 	bl	800dd4c <mg_log_prefix>
 800c7c6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c7ca:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	4889      	ldr	r0, [pc, #548]	@ (800c9fc <http_cb+0x3e8>)
 800c7d6:	f001 fb09 	bl	800ddec <mg_log>
        c->pfn = NULL;
 800c7da:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c7de:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 800c7ea:	e2a4      	b.n	800cd36 <http_cb+0x722>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 800c7ec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c7f0:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	2b09      	cmp	r3, #9
 800c7f8:	d128      	bne.n	800c84c <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800c7fa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c7fe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c806:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800c80a:	1ad2      	subs	r2, r2, r3
 800c80c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c810:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800c814:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 800c818:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c81c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800c820:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c824:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800c828:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800c82c:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 800c830:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800c834:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800c838:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800c83c:	1a8a      	subs	r2, r1, r2
 800c83e:	1a9a      	subs	r2, r3, r2
 800c840:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c844:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800c848:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 800c84c:	f107 0310 	add.w	r3, r7, #16
 800c850:	496b      	ldr	r1, [pc, #428]	@ (800ca00 <http_cb+0x3ec>)
 800c852:	4618      	mov	r0, r3
 800c854:	f7fd fc58 	bl	800a108 <mg_http_get_header>
 800c858:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 800c85c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01d      	beq.n	800c8a0 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 800c864:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800c868:	4966      	ldr	r1, [pc, #408]	@ (800ca04 <http_cb+0x3f0>)
 800c86a:	4618      	mov	r0, r3
 800c86c:	f009 fa6e 	bl	8015d4c <mg_str_s>
 800c870:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 800c874:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800c878:	cb0c      	ldmia	r3, {r2, r3}
 800c87a:	c903      	ldmia	r1, {r0, r1}
 800c87c:	f009 fb29 	bl	8015ed2 <mg_strcasecmp>
 800c880:	4603      	mov	r3, r0
 800c882:	2b00      	cmp	r3, #0
 800c884:	d103      	bne.n	800c88e <http_cb+0x27a>
          is_chunked = true;
 800c886:	2301      	movs	r3, #1
 800c888:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 800c88c:	e0cf      	b.n	800ca2e <http_cb+0x41a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 800c88e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c892:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c896:	495c      	ldr	r1, [pc, #368]	@ (800ca08 <http_cb+0x3f4>)
 800c898:	6818      	ldr	r0, [r3, #0]
 800c89a:	f7fb fd2b 	bl	80082f4 <mg_error>
          return;
 800c89e:	e24a      	b.n	800cd36 <http_cb+0x722>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 800c8a0:	f107 0310 	add.w	r3, r7, #16
 800c8a4:	4959      	ldr	r1, [pc, #356]	@ (800ca0c <http_cb+0x3f8>)
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fd fc2e 	bl	800a108 <mg_http_get_header>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	f040 80bd 	bne.w	800ca2e <http_cb+0x41a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 800c8b4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c8b8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2205      	movs	r2, #5
 800c8c0:	4953      	ldr	r1, [pc, #332]	@ (800ca10 <http_cb+0x3fc>)
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7fd f991 	bl	8009bea <mg_ncasecmp>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	bf0c      	ite	eq
 800c8ce:	2301      	moveq	r3, #1
 800c8d0:	2300      	movne	r3, #0
 800c8d2:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800c8dc:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800c8e0:	f083 0301 	eor.w	r3, r3, #1
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d030      	beq.n	800c94c <http_cb+0x338>
 800c8ea:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800c8ee:	4949      	ldr	r1, [pc, #292]	@ (800ca14 <http_cb+0x400>)
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f009 fa2b 	bl	8015d4c <mg_str_s>
 800c8f6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c8fa:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800c8fe:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800c902:	cb0c      	ldmia	r3, {r2, r3}
 800c904:	c903      	ldmia	r1, {r0, r1}
 800c906:	f009 fae4 	bl	8015ed2 <mg_strcasecmp>
 800c90a:	4603      	mov	r3, r0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d012      	beq.n	800c936 <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 800c910:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c914:	4940      	ldr	r1, [pc, #256]	@ (800ca18 <http_cb+0x404>)
 800c916:	4618      	mov	r0, r3
 800c918:	f009 fa18 	bl	8015d4c <mg_str_s>
 800c91c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c920:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800c924:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800c928:	cb0c      	ldmia	r3, {r2, r3}
 800c92a:	c903      	ldmia	r1, {r0, r1}
 800c92c:	f009 fad1 	bl	8015ed2 <mg_strcasecmp>
 800c930:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800c932:	2b00      	cmp	r3, #0
 800c934:	d10a      	bne.n	800c94c <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 800c936:	2301      	movs	r3, #1
 800c938:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 800c93c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800c940:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800c944:	4413      	add	r3, r2
 800c946:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800c94a:	e022      	b.n	800c992 <http_cb+0x37e>
        } else if (is_response) {
 800c94c:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800c950:	2b00      	cmp	r3, #0
 800c952:	d01e      	beq.n	800c992 <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 800c954:	f107 0310 	add.w	r3, r7, #16
 800c958:	4618      	mov	r0, r3
 800c95a:	f7ff fd9c 	bl	800c496 <mg_http_status>
 800c95e:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 800c962:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800c966:	2bc7      	cmp	r3, #199	@ 0xc7
 800c968:	dd0a      	ble.n	800c980 <http_cb+0x36c>
 800c96a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800c96e:	2bcc      	cmp	r3, #204	@ 0xcc
 800c970:	d006      	beq.n	800c980 <http_cb+0x36c>
 800c972:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800c976:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800c97a:	d001      	beq.n	800c980 <http_cb+0x36c>
 800c97c:	2301      	movs	r3, #1
 800c97e:	e000      	b.n	800c982 <http_cb+0x36e>
 800c980:	2300      	movs	r3, #0
 800c982:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 800c986:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800c98a:	f003 0301 	and.w	r3, r3, #1
 800c98e:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 800c992:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800c996:	2b00      	cmp	r3, #0
 800c998:	d049      	beq.n	800ca2e <http_cb+0x41a>
          if (!c->is_client) mg_http_reply(c, 411, "", "");
 800c99a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c99e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800c9a8:	f003 0302 	and.w	r3, r3, #2
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10a      	bne.n	800c9c8 <http_cb+0x3b4>
 800c9b2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800c9b6:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 800c9ba:	4b18      	ldr	r3, [pc, #96]	@ (800ca1c <http_cb+0x408>)
 800c9bc:	4a17      	ldr	r2, [pc, #92]	@ (800ca1c <http_cb+0x408>)
 800c9be:	f240 119b 	movw	r1, #411	@ 0x19b
 800c9c2:	6800      	ldr	r0, [r0, #0]
 800c9c4:	f7fe fc16 	bl	800b1f4 <mg_http_reply>
          MG_ERROR(("Content length missing from %s", is_response ? "response" : "request"));
 800c9c8:	4b08      	ldr	r3, [pc, #32]	@ (800c9ec <http_cb+0x3d8>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	dd2e      	ble.n	800ca2e <http_cb+0x41a>
 800c9d0:	4b07      	ldr	r3, [pc, #28]	@ (800c9f0 <http_cb+0x3dc>)
 800c9d2:	f640 12d3 	movw	r2, #2515	@ 0x9d3
 800c9d6:	4907      	ldr	r1, [pc, #28]	@ (800c9f4 <http_cb+0x3e0>)
 800c9d8:	2001      	movs	r0, #1
 800c9da:	f001 f9b7 	bl	800dd4c <mg_log_prefix>
 800c9de:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d01e      	beq.n	800ca24 <http_cb+0x410>
 800c9e6:	4b0e      	ldr	r3, [pc, #56]	@ (800ca20 <http_cb+0x40c>)
 800c9e8:	e01d      	b.n	800ca26 <http_cb+0x412>
 800c9ea:	bf00      	nop
 800c9ec:	24000258 	.word	0x24000258
 800c9f0:	0802a0d0 	.word	0x0802a0d0
 800c9f4:	080264c4 	.word	0x080264c4
 800c9f8:	08027258 	.word	0x08027258
 800c9fc:	08027270 	.word	0x08027270
 800ca00:	0802728c 	.word	0x0802728c
 800ca04:	080272a0 	.word	0x080272a0
 800ca08:	080272a8 	.word	0x080272a8
 800ca0c:	080272c4 	.word	0x080272c4
 800ca10:	08026820 	.word	0x08026820
 800ca14:	0802683c 	.word	0x0802683c
 800ca18:	08026838 	.word	0x08026838
 800ca1c:	08026d04 	.word	0x08026d04
 800ca20:	080272d4 	.word	0x080272d4
 800ca24:	4bc6      	ldr	r3, [pc, #792]	@ (800cd40 <http_cb+0x72c>)
 800ca26:	4619      	mov	r1, r3
 800ca28:	48c6      	ldr	r0, [pc, #792]	@ (800cd44 <http_cb+0x730>)
 800ca2a:	f001 f9df 	bl	800ddec <mg_log>
        }
      }

      if (is_chunked) {
 800ca2e:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	f000 80c9 	beq.w	800cbca <http_cb+0x5b6>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 800ca38:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ca3c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca44:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 800ca48:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800ca4c:	440b      	add	r3, r1
 800ca4e:	4413      	add	r3, r2
 800ca50:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 800ca54:	2300      	movs	r3, #0
 800ca56:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800ca5a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ca5e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ca66:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800ca6a:	1ad2      	subs	r2, r2, r3
 800ca6c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 800ca76:	e006      	b.n	800ca86 <http_cb+0x472>
 800ca78:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800ca7c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800ca80:	4413      	add	r3, r2
 800ca82:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800ca86:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800ca8a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800ca8e:	18d0      	adds	r0, r2, r3
 800ca90:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800ca94:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800ca98:	1ad1      	subs	r1, r2, r3
 800ca9a:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800ca9e:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800caa2:	f7ff fd28 	bl	800c4f6 <skip_chunk>
 800caa6:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800caaa:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800caae:	2b00      	cmp	r3, #0
 800cab0:	dd03      	ble.n	800caba <http_cb+0x4a6>
 800cab2:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d1de      	bne.n	800ca78 <http_cb+0x464>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800caba:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	f000 8126 	beq.w	800cd10 <http_cb+0x6fc>
        if (cl < 0) {
 800cac4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800cac8:	2b00      	cmp	r3, #0
 800caca:	da08      	bge.n	800cade <http_cb+0x4ca>
          mg_error(c, "Invalid chunk");
 800cacc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cad0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cad4:	499c      	ldr	r1, [pc, #624]	@ (800cd48 <http_cb+0x734>)
 800cad6:	6818      	ldr	r0, [r3, #0]
 800cad8:	f7fb fc0c 	bl	80082f4 <mg_error>
          break;
 800cadc:	e11b      	b.n	800cd16 <http_cb+0x702>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 800cade:	2300      	movs	r3, #0
 800cae0:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800cae4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cae8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800caec:	2200      	movs	r2, #0
 800caee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800caf2:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800caf6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cafa:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800cafe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800cb02:	e03e      	b.n	800cb82 <http_cb+0x56e>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 800cb04:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cb08:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800cb0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cb10:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800cb14:	18d0      	adds	r0, r2, r3
 800cb16:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800cb1a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800cb1e:	4413      	add	r3, r2
 800cb20:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800cb24:	4413      	add	r3, r2
 800cb26:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	f018 fe14 	bl	8025758 <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 800cb30:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800cb34:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800cb38:	4413      	add	r3, r2
 800cb3a:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800cb3e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cb42:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800cb46:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cb4a:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800cb4e:	441a      	add	r2, r3
 800cb50:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cb54:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800cb58:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800cb5c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cb60:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800cb64:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cb68:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800cb6c:	441a      	add	r2, r3
 800cb6e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cb72:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800cb76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800cb7a:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d016      	beq.n	800cbb0 <http_cb+0x59c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800cb82:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800cb86:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800cb8a:	18d0      	adds	r0, r2, r3
 800cb8c:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800cb90:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800cb94:	1ad1      	subs	r1, r2, r3
 800cb96:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800cb9a:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800cb9e:	f7ff fcaa 	bl	800c4f6 <skip_chunk>
 800cba2:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800cba6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	dcaa      	bgt.n	800cb04 <http_cb+0x4f0>
 800cbae:	e000      	b.n	800cbb2 <http_cb+0x59e>
          if (dl == 0) break;
 800cbb0:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 800cbb2:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800cbb6:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800cbba:	4413      	add	r3, r2
 800cbbc:	461a      	mov	r2, r3
 800cbbe:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800cbc2:	4413      	add	r3, r2
 800cbc4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800cbc8:	e026      	b.n	800cc18 <http_cb+0x604>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800cbca:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cbce:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cbd6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800cbda:	1ad2      	subs	r2, r2, r3
 800cbdc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 800cbe6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cbea:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800cbee:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cbf2:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	f0c0 808c 	bcc.w	800cd14 <http_cb+0x700>
        ofs += (size_t) n + hm.body.len;
 800cbfc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cc00:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800cc04:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cc08:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800cc0c:	4413      	add	r3, r2
 800cc0e:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800cc12:	4413      	add	r3, r2
 800cc14:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 800cc18:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cc1c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cc26:	f003 0304 	and.w	r3, r3, #4
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d00a      	beq.n	800cc46 <http_cb+0x632>
 800cc30:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cc34:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800cc3e:	f043 0301 	orr.w	r3, r3, #1
 800cc42:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 800cc46:	f107 0210 	add.w	r2, r7, #16
 800cc4a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cc4e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cc52:	210b      	movs	r1, #11
 800cc54:	6818      	ldr	r0, [r3, #0]
 800cc56:	f7fb fb2d 	bl	80082b4 <mg_call>
      if (c->is_accepted && !c->is_resp) {
 800cc5a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cc5e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800cc68:	f003 0304 	and.w	r3, r3, #4
 800cc6c:	b2db      	uxtb	r3, r3
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d034      	beq.n	800ccdc <http_cb+0x6c8>
 800cc72:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cc76:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800cc80:	f003 0301 	and.w	r3, r3, #1
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d128      	bne.n	800ccdc <http_cb+0x6c8>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 800cc8a:	f107 0310 	add.w	r3, r7, #16
 800cc8e:	492f      	ldr	r1, [pc, #188]	@ (800cd4c <http_cb+0x738>)
 800cc90:	4618      	mov	r0, r3
 800cc92:	f7fd fa39 	bl	800a108 <mg_http_get_header>
 800cc96:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 800cc9a:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d01c      	beq.n	800ccdc <http_cb+0x6c8>
 800cca2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800cca6:	492a      	ldr	r1, [pc, #168]	@ (800cd50 <http_cb+0x73c>)
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f009 f84f 	bl	8015d4c <mg_str_s>
 800ccae:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800ccb2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800ccb6:	cb0c      	ldmia	r3, {r2, r3}
 800ccb8:	c903      	ldmia	r1, {r0, r1}
 800ccba:	f009 f90a 	bl	8015ed2 <mg_strcasecmp>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10b      	bne.n	800ccdc <http_cb+0x6c8>
          c->is_draining = 1;  // honor "Connection: close"
 800ccc4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ccc8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cccc:	681a      	ldr	r2, [r3, #0]
 800ccce:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ccd2:	f043 0310 	orr.w	r3, r3, #16
 800ccd6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 800ccda:	e01c      	b.n	800cd16 <http_cb+0x702>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800ccdc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cce0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800ccea:	f003 0301 	and.w	r3, r3, #1
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d110      	bne.n	800cd16 <http_cb+0x702>
 800ccf4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ccf8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd00:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800cd04:	429a      	cmp	r2, r3
 800cd06:	f4ff acd5 	bcc.w	800c6b4 <http_cb+0xa0>
 800cd0a:	e004      	b.n	800cd16 <http_cb+0x702>
      if (n == 0) break;                 // Request is not buffered yet
 800cd0c:	bf00      	nop
 800cd0e:	e002      	b.n	800cd16 <http_cb+0x702>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800cd10:	bf00      	nop
 800cd12:	e000      	b.n	800cd16 <http_cb+0x702>
        if (hm.body.len > len) break;  // Buffer more data
 800cd14:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 800cd16:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00b      	beq.n	800cd36 <http_cb+0x722>
 800cd1e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800cd22:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	3338      	adds	r3, #56	@ 0x38
 800cd2a:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800cd2e:	2100      	movs	r1, #0
 800cd30:	4618      	mov	r0, r3
 800cd32:	f000 f93f 	bl	800cfb4 <mg_iobuf_del>
  }
  (void) ev_data;
}
 800cd36:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	080272e0 	.word	0x080272e0
 800cd44:	080272e8 	.word	0x080272e8
 800cd48:	08027308 	.word	0x08027308
 800cd4c:	08027318 	.word	0x08027318
 800cd50:	08027324 	.word	0x08027324

0800cd54 <mg_http_connect>:
  while (done == false) mg_mgr_poll(&mgr, 100);
  mg_mgr_free(&mgr);
}

struct mg_connection *mg_http_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fn_data) {
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	687a      	ldr	r2, [r7, #4]
 800cd66:	68b9      	ldr	r1, [r7, #8]
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f001 fc6d 	bl	800e648 <mg_connect>
 800cd6e:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d003      	beq.n	800cd7e <mg_http_connect+0x2a>
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	4a03      	ldr	r2, [pc, #12]	@ (800cd88 <mg_http_connect+0x34>)
 800cd7a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800cd7e:	697b      	ldr	r3, [r7, #20]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3718      	adds	r7, #24
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	0800c615 	.word	0x0800c615

0800cd8c <mg_http_listen>:

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b086      	sub	sp, #24
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	60f8      	str	r0, [r7, #12]
 800cd94:	60b9      	str	r1, [r7, #8]
 800cd96:	607a      	str	r2, [r7, #4]
 800cd98:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	687a      	ldr	r2, [r7, #4]
 800cd9e:	68b9      	ldr	r1, [r7, #8]
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f001 fcef 	bl	800e784 <mg_listen>
 800cda6:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d003      	beq.n	800cdb6 <mg_http_listen+0x2a>
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	4a03      	ldr	r2, [pc, #12]	@ (800cdc0 <mg_http_listen+0x34>)
 800cdb2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800cdb6:	697b      	ldr	r3, [r7, #20]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	0800c615 	.word	0x0800c615

0800cdc4 <roundup>:





static size_t roundup(size_t size, size_t align) {
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00a      	beq.n	800cdea <roundup+0x26>
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	4413      	add	r3, r2
 800cdda:	1e5a      	subs	r2, r3, #1
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	fbb2 f3f3 	udiv	r3, r2, r3
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	fb02 f303 	mul.w	r3, r2, r3
 800cde8:	e000      	b.n	800cdec <roundup+0x28>
 800cdea:	687b      	ldr	r3, [r7, #4]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800cdf8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cdfc:	b088      	sub	sp, #32
 800cdfe:	af02      	add	r7, sp, #8
 800ce00:	6078      	str	r0, [r7, #4]
 800ce02:	6039      	str	r1, [r7, #0]
  int ok = 1;
 800ce04:	2301      	movs	r3, #1
 800ce06:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	6838      	ldr	r0, [r7, #0]
 800ce10:	f7ff ffd8 	bl	800cdc4 <roundup>
 800ce14:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d117      	bne.n	800ce4c <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681a      	ldr	r2, [r3, #0]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	4619      	mov	r1, r3
 800ce26:	4610      	mov	r0, r2
 800ce28:	f014 f94a 	bl	80210c0 <mg_bzero>
    free(io->buf);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f018 f8f5 	bl	8025020 <free>
    io->buf = NULL;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	605a      	str	r2, [r3, #4]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685a      	ldr	r2, [r3, #4]
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	609a      	str	r2, [r3, #8]
 800ce4a:	e053      	b.n	800cef4 <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	683a      	ldr	r2, [r7, #0]
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d04e      	beq.n	800cef4 <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800ce56:	6839      	ldr	r1, [r7, #0]
 800ce58:	2001      	movs	r0, #1
 800ce5a:	f018 f8bd 	bl	8024fd8 <calloc>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d028      	beq.n	800ceba <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	683a      	ldr	r2, [r7, #0]
 800ce6e:	4293      	cmp	r3, r2
 800ce70:	bf28      	it	cs
 800ce72:	4613      	movcs	r3, r2
 800ce74:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00a      	beq.n	800ce92 <mg_iobuf_resize+0x9a>
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d006      	beq.n	800ce92 <mg_iobuf_resize+0x9a>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	68fa      	ldr	r2, [r7, #12]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6938      	ldr	r0, [r7, #16]
 800ce8e:	f018 fc63 	bl	8025758 <memmove>
      mg_bzero(io->buf, io->size);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681a      	ldr	r2, [r3, #0]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	685b      	ldr	r3, [r3, #4]
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	f014 f90f 	bl	80210c0 <mg_bzero>
      free(io->buf);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f018 f8ba 	bl	8025020 <free>
      io->buf = (unsigned char *) p;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	693a      	ldr	r2, [r7, #16]
 800ceb0:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	605a      	str	r2, [r3, #4]
 800ceb8:	e01c      	b.n	800cef4 <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800cebe:	4b10      	ldr	r3, [pc, #64]	@ (800cf00 <mg_iobuf_resize+0x108>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	dd16      	ble.n	800cef4 <mg_iobuf_resize+0xfc>
 800cec6:	4b0f      	ldr	r3, [pc, #60]	@ (800cf04 <mg_iobuf_resize+0x10c>)
 800cec8:	f640 224d 	movw	r2, #2637	@ 0xa4d
 800cecc:	490e      	ldr	r1, [pc, #56]	@ (800cf08 <mg_iobuf_resize+0x110>)
 800cece:	2001      	movs	r0, #1
 800ced0:	f000 ff3c 	bl	800dd4c <mg_log_prefix>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	2200      	movs	r2, #0
 800ceda:	4698      	mov	r8, r3
 800cedc:	4691      	mov	r9, r2
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	2200      	movs	r2, #0
 800cee2:	461c      	mov	r4, r3
 800cee4:	4615      	mov	r5, r2
 800cee6:	e9cd 4500 	strd	r4, r5, [sp]
 800ceea:	4642      	mov	r2, r8
 800ceec:	464b      	mov	r3, r9
 800ceee:	4807      	ldr	r0, [pc, #28]	@ (800cf0c <mg_iobuf_resize+0x114>)
 800cef0:	f000 ff7c 	bl	800ddec <mg_log>
    }
  }
  return ok;
 800cef4:	697b      	ldr	r3, [r7, #20]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cf00:	24000258 	.word	0x24000258
 800cf04:	0802a0d8 	.word	0x0802a0d8
 800cf08:	080264c4 	.word	0x080264c4
 800cf0c:	08027364 	.word	0x08027364

0800cf10 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	60f8      	str	r0, [r7, #12]
 800cf18:	60b9      	str	r1, [r7, #8]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	689a      	ldr	r2, [r3, #8]
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	441a      	add	r2, r3
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	4619      	mov	r1, r3
 800cf2c:	4610      	mov	r0, r2
 800cf2e:	f7ff ff49 	bl	800cdc4 <roundup>
 800cf32:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800cf34:	6979      	ldr	r1, [r7, #20]
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f7ff ff5e 	bl	800cdf8 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	697a      	ldr	r2, [r7, #20]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d001      	beq.n	800cf4a <mg_iobuf_add+0x3a>
 800cf46:	2300      	movs	r3, #0
 800cf48:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	689b      	ldr	r3, [r3, #8]
 800cf4e:	68ba      	ldr	r2, [r7, #8]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d210      	bcs.n	800cf76 <mg_iobuf_add+0x66>
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	68b9      	ldr	r1, [r7, #8]
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	440b      	add	r3, r1
 800cf5e:	18d0      	adds	r0, r2, r3
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	18d1      	adds	r1, r2, r3
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	1ad3      	subs	r3, r2, r3
 800cf70:	461a      	mov	r2, r3
 800cf72:	f018 fbf1 	bl	8025758 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d008      	beq.n	800cf8e <mg_iobuf_add+0x7e>
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	4413      	add	r3, r2
 800cf84:	683a      	ldr	r2, [r7, #0]
 800cf86:	6879      	ldr	r1, [r7, #4]
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f018 fbe5 	bl	8025758 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	689b      	ldr	r3, [r3, #8]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d902      	bls.n	800cf9e <mg_iobuf_add+0x8e>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	68ba      	ldr	r2, [r7, #8]
 800cf9c:	609a      	str	r2, [r3, #8]
  io->len += len;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	689a      	ldr	r2, [r3, #8]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	441a      	add	r2, r3
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	609a      	str	r2, [r3, #8]
  return len;
 800cfaa:	683b      	ldr	r3, [r7, #0]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3718      	adds	r7, #24
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	689b      	ldr	r3, [r3, #8]
 800cfc4:	68ba      	ldr	r2, [r7, #8]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d902      	bls.n	800cfd0 <mg_iobuf_del+0x1c>
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	441a      	add	r2, r3
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	689b      	ldr	r3, [r3, #8]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d904      	bls.n	800cfe8 <mg_iobuf_del+0x34>
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	689a      	ldr	r2, [r3, #8]
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d012      	beq.n	800d016 <mg_iobuf_del+0x62>
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	18d0      	adds	r0, r2, r3
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	68b9      	ldr	r1, [r7, #8]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	440b      	add	r3, r1
 800d002:	18d1      	adds	r1, r2, r3
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	689a      	ldr	r2, [r3, #8]
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	1ad2      	subs	r2, r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	461a      	mov	r2, r3
 800d012:	f018 fba1 	bl	8025758 <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00a      	beq.n	800d034 <mg_iobuf_del+0x80>
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6899      	ldr	r1, [r3, #8]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	1acb      	subs	r3, r1, r3
 800d02a:	4413      	add	r3, r2
 800d02c:	6879      	ldr	r1, [r7, #4]
 800d02e:	4618      	mov	r0, r3
 800d030:	f014 f846 	bl	80210c0 <mg_bzero>
  io->len -= len;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	689a      	ldr	r2, [r3, #8]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	1ad2      	subs	r2, r2, r3
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	609a      	str	r2, [r3, #8]
  return len;
 800d040:	687b      	ldr	r3, [r7, #4]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b082      	sub	sp, #8
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800d052:	2100      	movs	r1, #0
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f7ff fecf 	bl	800cdf8 <mg_iobuf_resize>
}
 800d05a:	bf00      	nop
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
	...

0800d064 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 800d064:	b480      	push	{r7}
 800d066:	b083      	sub	sp, #12
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <escapeseq+0x12>
 800d072:	4b04      	ldr	r3, [pc, #16]	@ (800d084 <escapeseq+0x20>)
 800d074:	e000      	b.n	800d078 <escapeseq+0x14>
 800d076:	4b04      	ldr	r3, [pc, #16]	@ (800d088 <escapeseq+0x24>)
}
 800d078:	4618      	mov	r0, r3
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	08027370 	.word	0x08027370
 800d088:	08027378 	.word	0x08027378

0800d08c <json_esc>:

static char json_esc(int c, int esc) {
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b086      	sub	sp, #24
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800d096:	6838      	ldr	r0, [r7, #0]
 800d098:	f7ff ffe4 	bl	800d064 <escapeseq>
 800d09c:	6138      	str	r0, [r7, #16]
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	bf0c      	ite	eq
 800d0a4:	2301      	moveq	r3, #1
 800d0a6:	2300      	movne	r3, #0
 800d0a8:	b2db      	uxtb	r3, r3
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff ffda 	bl	800d064 <escapeseq>
 800d0b0:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	617b      	str	r3, [r7, #20]
 800d0b6:	e010      	b.n	800d0da <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d107      	bne.n	800d0d4 <json_esc+0x48>
 800d0c4:	697a      	ldr	r2, [r7, #20]
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	1ad3      	subs	r3, r2, r3
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	4413      	add	r3, r2
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	e007      	b.n	800d0e4 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	617b      	str	r3, [r7, #20]
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d1ea      	bne.n	800d0b8 <json_esc+0x2c>
  }
  return 0;
 800d0e2:	2300      	movs	r3, #0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3718      	adds	r7, #24
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	60fb      	str	r3, [r7, #12]
 800d0fa:	e02e      	b.n	800d15a <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	4413      	add	r3, r2
 800d102:	781b      	ldrb	r3, [r3, #0]
 800d104:	2b5c      	cmp	r3, #92	@ 0x5c
 800d106:	d114      	bne.n	800d132 <mg_pass_string+0x46>
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	3301      	adds	r3, #1
 800d10c:	683a      	ldr	r2, [r7, #0]
 800d10e:	429a      	cmp	r2, r3
 800d110:	dd0f      	ble.n	800d132 <mg_pass_string+0x46>
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	3301      	adds	r3, #1
 800d116:	687a      	ldr	r2, [r7, #4]
 800d118:	4413      	add	r3, r2
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2101      	movs	r1, #1
 800d11e:	4618      	mov	r0, r3
 800d120:	f7ff ffb4 	bl	800d08c <json_esc>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d003      	beq.n	800d132 <mg_pass_string+0x46>
      i++;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	3301      	adds	r3, #1
 800d12e:	60fb      	str	r3, [r7, #12]
 800d130:	e010      	b.n	800d154 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	4413      	add	r3, r2
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d102      	bne.n	800d144 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800d13e:	f06f 0301 	mvn.w	r3, #1
 800d142:	e010      	b.n	800d166 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	4413      	add	r3, r2
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	2b22      	cmp	r3, #34	@ 0x22
 800d14e:	d101      	bne.n	800d154 <mg_pass_string+0x68>
      return i;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	e008      	b.n	800d166 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	3301      	adds	r3, #1
 800d158:	60fb      	str	r3, [r7, #12]
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	429a      	cmp	r2, r3
 800d160:	dbcc      	blt.n	800d0fc <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800d162:	f06f 0301 	mvn.w	r3, #1
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
	...

0800d170 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 800d170:	b480      	push	{r7}
 800d172:	b091      	sub	sp, #68	@ 0x44
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800d17c:	f04f 0200 	mov.w	r2, #0
 800d180:	f04f 0300 	mov.w	r3, #0
 800d184:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 800d188:	2300      	movs	r3, #0
 800d18a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d18c:	2301      	movs	r3, #1
 800d18e:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 800d190:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d192:	68bb      	ldr	r3, [r7, #8]
 800d194:	429a      	cmp	r2, r3
 800d196:	da0a      	bge.n	800d1ae <mg_atod+0x3e>
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	2b2d      	cmp	r3, #45	@ 0x2d
 800d19e:	d106      	bne.n	800d1ae <mg_atod+0x3e>
    sign = -1, i++;
 800d1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a8:	3301      	adds	r3, #1
 800d1aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1ac:	e00a      	b.n	800d1c4 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800d1ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	da21      	bge.n	800d1fa <mg_atod+0x8a>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	2b2b      	cmp	r3, #43	@ 0x2b
 800d1bc:	d11d      	bne.n	800d1fa <mg_atod+0x8a>
    i++;
 800d1be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c0:	3301      	adds	r3, #1
 800d1c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800d1c4:	e019      	b.n	800d1fa <mg_atod+0x8a>
    d *= 10.0;
 800d1c6:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800d1ca:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d1ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d1d2:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 800d1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1d8:	68fa      	ldr	r2, [r7, #12]
 800d1da:	4413      	add	r3, r2
 800d1dc:	781b      	ldrb	r3, [r3, #0]
 800d1de:	3b30      	subs	r3, #48	@ 0x30
 800d1e0:	ee07 3a90 	vmov	s15, r3
 800d1e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d1e8:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800d1ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d1f0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800d1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	da0b      	bge.n	800d21a <mg_atod+0xaa>
 800d202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	4413      	add	r3, r2
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	2b2f      	cmp	r3, #47	@ 0x2f
 800d20c:	d905      	bls.n	800d21a <mg_atod+0xaa>
 800d20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	4413      	add	r3, r2
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	2b39      	cmp	r3, #57	@ 0x39
 800d218:	d9d5      	bls.n	800d1c6 <mg_atod+0x56>
  }
  d *= sign;
 800d21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21c:	ee07 3a90 	vmov	s15, r3
 800d220:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d224:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800d228:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d22c:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 800d230:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	429a      	cmp	r2, r3
 800d236:	da51      	bge.n	800d2dc <mg_atod+0x16c>
 800d238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d23a:	68fa      	ldr	r2, [r7, #12]
 800d23c:	4413      	add	r3, r2
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b2e      	cmp	r3, #46	@ 0x2e
 800d242:	d14b      	bne.n	800d2dc <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 800d244:	f04f 0200 	mov.w	r2, #0
 800d248:	f04f 0300 	mov.w	r3, #0
 800d24c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800d250:	a36d      	add	r3, pc, #436	@ (adr r3, 800d408 <mg_atod+0x298>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800d25a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d25c:	3301      	adds	r3, #1
 800d25e:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800d260:	e01d      	b.n	800d29e <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 800d262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d264:	68fa      	ldr	r2, [r7, #12]
 800d266:	4413      	add	r3, r2
 800d268:	781b      	ldrb	r3, [r3, #0]
 800d26a:	3b30      	subs	r3, #48	@ 0x30
 800d26c:	ee07 3a90 	vmov	s15, r3
 800d270:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800d274:	ed97 7b08 	vldr	d7, [r7, #32]
 800d278:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d27c:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800d280:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d284:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 800d288:	ed97 6b08 	vldr	d6, [r7, #32]
 800d28c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800d290:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d294:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800d298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d29a:	3301      	adds	r3, #1
 800d29c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d29e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	da0b      	bge.n	800d2be <mg_atod+0x14e>
 800d2a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	2b2f      	cmp	r3, #47	@ 0x2f
 800d2b0:	d905      	bls.n	800d2be <mg_atod+0x14e>
 800d2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	2b39      	cmp	r3, #57	@ 0x39
 800d2bc:	d9d1      	bls.n	800d262 <mg_atod+0xf2>
    }
    d += frac * sign;
 800d2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2c0:	ee07 3a90 	vmov	s15, r3
 800d2c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800d2c8:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800d2cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d2d0:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800d2d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d2d8:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800d2dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	da7e      	bge.n	800d3e2 <mg_atod+0x272>
 800d2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	2b65      	cmp	r3, #101	@ 0x65
 800d2ee:	d005      	beq.n	800d2fc <mg_atod+0x18c>
 800d2f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2f2:	68fa      	ldr	r2, [r7, #12]
 800d2f4:	4413      	add	r3, r2
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	2b45      	cmp	r3, #69	@ 0x45
 800d2fa:	d172      	bne.n	800d3e2 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	61bb      	str	r3, [r7, #24]
 800d300:	2300      	movs	r3, #0
 800d302:	617b      	str	r3, [r7, #20]
    i++;
 800d304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d306:	3301      	adds	r3, #1
 800d308:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800d30a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	429a      	cmp	r2, r3
 800d310:	da0a      	bge.n	800d328 <mg_atod+0x1b8>
 800d312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d314:	68fa      	ldr	r2, [r7, #12]
 800d316:	4413      	add	r3, r2
 800d318:	781b      	ldrb	r3, [r3, #0]
 800d31a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d31c:	d104      	bne.n	800d328 <mg_atod+0x1b8>
 800d31e:	2301      	movs	r3, #1
 800d320:	617b      	str	r3, [r7, #20]
 800d322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d324:	3301      	adds	r3, #1
 800d326:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 800d328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	da19      	bge.n	800d364 <mg_atod+0x1f4>
 800d330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	4413      	add	r3, r2
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	2b2b      	cmp	r3, #43	@ 0x2b
 800d33a:	d113      	bne.n	800d364 <mg_atod+0x1f4>
 800d33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d33e:	3301      	adds	r3, #1
 800d340:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800d342:	e00f      	b.n	800d364 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 800d344:	69ba      	ldr	r2, [r7, #24]
 800d346:	4613      	mov	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	005b      	lsls	r3, r3, #1
 800d34e:	4619      	mov	r1, r3
 800d350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	637a      	str	r2, [r7, #52]	@ 0x34
 800d356:	461a      	mov	r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	4413      	add	r3, r2
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	3b30      	subs	r3, #48	@ 0x30
 800d360:	440b      	add	r3, r1
 800d362:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800d364:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	429a      	cmp	r2, r3
 800d36a:	da0f      	bge.n	800d38c <mg_atod+0x21c>
 800d36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d36e:	68fa      	ldr	r2, [r7, #12]
 800d370:	4413      	add	r3, r2
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b2f      	cmp	r3, #47	@ 0x2f
 800d376:	d909      	bls.n	800d38c <mg_atod+0x21c>
 800d378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	4413      	add	r3, r2
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	2b39      	cmp	r3, #57	@ 0x39
 800d382:	d803      	bhi.n	800d38c <mg_atod+0x21c>
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800d38a:	dbdb      	blt.n	800d344 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d002      	beq.n	800d398 <mg_atod+0x228>
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	425b      	negs	r3, r3
 800d396:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 800d398:	2300      	movs	r3, #0
 800d39a:	61fb      	str	r3, [r7, #28]
 800d39c:	e00a      	b.n	800d3b4 <mg_atod+0x244>
 800d39e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800d3a2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800d3a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3aa:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	69fa      	ldr	r2, [r7, #28]
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	dbf0      	blt.n	800d39e <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	61fb      	str	r3, [r7, #28]
 800d3c0:	e00a      	b.n	800d3d8 <mg_atod+0x268>
 800d3c2:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800d3c6:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800d3ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d3ce:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800d3d2:	69fb      	ldr	r3, [r7, #28]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	61fb      	str	r3, [r7, #28]
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	425b      	negs	r3, r3
 800d3dc:	69fa      	ldr	r2, [r7, #28]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	dbef      	blt.n	800d3c2 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d002      	beq.n	800d3ee <mg_atod+0x27e>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3ec:	601a      	str	r2, [r3, #0]
  return d;
 800d3ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d3f2:	ec43 2b17 	vmov	d7, r2, r3
}
 800d3f6:	eeb0 0b47 	vmov.f64	d0, d7
 800d3fa:	3744      	adds	r7, #68	@ 0x44
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	f3af 8000 	nop.w
 800d408:	9999999a 	.word	0x9999999a
 800d40c:	3fb99999 	.word	0x3fb99999

0800d410 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 800d410:	b590      	push	{r4, r7, lr}
 800d412:	b09b      	sub	sp, #108	@ 0x6c
 800d414:	af00      	add	r7, sp, #0
 800d416:	f107 0408 	add.w	r4, r7, #8
 800d41a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d41e:	607a      	str	r2, [r7, #4]
 800d420:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800d42a:	2300      	movs	r3, #0
 800d42c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 800d430:	2300      	movs	r3, #0
 800d432:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 800d434:	2300      	movs	r3, #0
 800d436:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 800d438:	2300      	movs	r3, #0
 800d43a:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800d43c:	2300      	movs	r3, #0
 800d43e:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 800d440:	2301      	movs	r3, #1
 800d442:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 800d444:	f04f 33ff 	mov.w	r3, #4294967295
 800d448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d44a:	f04f 33ff 	mov.w	r3, #4294967295
 800d44e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d002      	beq.n	800d45c <mg_json_get+0x4c>
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2200      	movs	r2, #0
 800d45a:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	2b24      	cmp	r3, #36	@ 0x24
 800d462:	d002      	beq.n	800d46a <mg_json_get+0x5a>
 800d464:	f06f 0301 	mvn.w	r3, #1
 800d468:	e308      	b.n	800da7c <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800d46a:	2300      	movs	r3, #0
 800d46c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d46e:	e2fe      	b.n	800da6e <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 800d470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d472:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d474:	4413      	add	r3, r2
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800d47c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d480:	2b20      	cmp	r3, #32
 800d482:	f000 82ee 	beq.w	800da62 <mg_json_get+0x652>
 800d486:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d48a:	2b09      	cmp	r3, #9
 800d48c:	f000 82e9 	beq.w	800da62 <mg_json_get+0x652>
 800d490:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d494:	2b0a      	cmp	r3, #10
 800d496:	f000 82e4 	beq.w	800da62 <mg_json_get+0x652>
 800d49a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d49e:	2b0d      	cmp	r3, #13
 800d4a0:	f000 82df 	beq.w	800da62 <mg_json_get+0x652>
    switch (expecting) {
 800d4a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800d4a8:	2b03      	cmp	r3, #3
 800d4aa:	f200 82dd 	bhi.w	800da68 <mg_json_get+0x658>
 800d4ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d4b4 <mg_json_get+0xa4>)
 800d4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b4:	0800d4c5 	.word	0x0800d4c5
 800d4b8:	0800d7ad 	.word	0x0800d7ad
 800d4bc:	0800d93b 	.word	0x0800d93b
 800d4c0:	0800d951 	.word	0x0800d951
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 800d4c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d101      	bne.n	800d4d0 <mg_json_get+0xc0>
 800d4cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d4ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 800d4d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d4d4:	2b7b      	cmp	r3, #123	@ 0x7b
 800d4d6:	d12b      	bne.n	800d530 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800d4d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d4da:	2b1d      	cmp	r3, #29
 800d4dc:	dd02      	ble.n	800d4e4 <mg_json_get+0xd4>
 800d4de:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e2:	e2cb      	b.n	800da7c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800d4e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d4e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d114      	bne.n	800d516 <mg_json_get+0x106>
 800d4ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	781b      	ldrb	r3, [r3, #0]
 800d4f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4f6:	d10e      	bne.n	800d516 <mg_json_get+0x106>
 800d4f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d4fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d10a      	bne.n	800d516 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 800d500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d502:	3301      	adds	r3, #1
 800d504:	657b      	str	r3, [r7, #84]	@ 0x54
 800d506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d508:	3301      	adds	r3, #1
 800d50a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d50c:	f04f 33ff 	mov.w	r3, #4294967295
 800d510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d514:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 800d516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d518:	1c5a      	adds	r2, r3, #1
 800d51a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d51c:	3368      	adds	r3, #104	@ 0x68
 800d51e:	443b      	add	r3, r7
 800d520:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d524:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 800d528:	2301      	movs	r3, #1
 800d52a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 800d52e:	e29b      	b.n	800da68 <mg_json_get+0x658>
        } else if (c == '[') {
 800d530:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d534:	2b5b      	cmp	r3, #91	@ 0x5b
 800d536:	d14e      	bne.n	800d5d6 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800d538:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d53a:	2b1d      	cmp	r3, #29
 800d53c:	dd02      	ble.n	800d544 <mg_json_get+0x134>
 800d53e:	f04f 33ff 	mov.w	r3, #4294967295
 800d542:	e29b      	b.n	800da7c <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 800d544:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d546:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d548:	429a      	cmp	r2, r3
 800d54a:	d13a      	bne.n	800d5c2 <mg_json_get+0x1b2>
 800d54c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d54e:	687a      	ldr	r2, [r7, #4]
 800d550:	4413      	add	r3, r2
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	2b5b      	cmp	r3, #91	@ 0x5b
 800d556:	d134      	bne.n	800d5c2 <mg_json_get+0x1b2>
 800d558:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d55a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d130      	bne.n	800d5c2 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 800d560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d562:	3301      	adds	r3, #1
 800d564:	657b      	str	r3, [r7, #84]	@ 0x54
 800d566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d568:	3301      	adds	r3, #1
 800d56a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d56c:	2300      	movs	r3, #0
 800d56e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800d570:	2300      	movs	r3, #0
 800d572:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d574:	e010      	b.n	800d598 <mg_json_get+0x188>
              ei *= 10;
 800d576:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	005b      	lsls	r3, r3, #1
 800d580:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 800d582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	4413      	add	r3, r2
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	3b30      	subs	r3, #48	@ 0x30
 800d58c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d58e:	4413      	add	r3, r2
 800d590:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800d592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d594:	3301      	adds	r3, #1
 800d596:	653b      	str	r3, [r7, #80]	@ 0x50
 800d598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	4413      	add	r3, r2
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b5d      	cmp	r3, #93	@ 0x5d
 800d5a2:	d005      	beq.n	800d5b0 <mg_json_get+0x1a0>
 800d5a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5a6:	687a      	ldr	r2, [r7, #4]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1e2      	bne.n	800d576 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 800d5b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d002      	beq.n	800d5c2 <mg_json_get+0x1b2>
 800d5bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d5be:	3301      	adds	r3, #1
 800d5c0:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 800d5c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d5c4:	1c5a      	adds	r2, r3, #1
 800d5c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d5c8:	3368      	adds	r3, #104	@ 0x68
 800d5ca:	443b      	add	r3, r7
 800d5cc:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d5d0:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800d5d4:	e248      	b.n	800da68 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 800d5d6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d5da:	2b5d      	cmp	r3, #93	@ 0x5d
 800d5dc:	d13a      	bne.n	800d654 <mg_json_get+0x244>
 800d5de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	dd37      	ble.n	800d654 <mg_json_get+0x244>
          MG_EOO(']');
 800d5e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d106      	bne.n	800d5fa <mg_json_get+0x1ea>
 800d5ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d5ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d002      	beq.n	800d5fa <mg_json_get+0x1ea>
 800d5f4:	f06f 0302 	mvn.w	r3, #2
 800d5f8:	e240      	b.n	800da7c <mg_json_get+0x66c>
 800d5fa:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d5fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d600:	3b01      	subs	r3, #1
 800d602:	3368      	adds	r3, #104	@ 0x68
 800d604:	443b      	add	r3, r7
 800d606:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800d60a:	3302      	adds	r3, #2
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d002      	beq.n	800d616 <mg_json_get+0x206>
 800d610:	f06f 0301 	mvn.w	r3, #1
 800d614:	e232      	b.n	800da7c <mg_json_get+0x66c>
 800d616:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d618:	3b01      	subs	r3, #1
 800d61a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d61c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d61e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d620:	429a      	cmp	r2, r3
 800d622:	f040 809c 	bne.w	800d75e <mg_json_get+0x34e>
 800d626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	4413      	add	r3, r2
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f040 8095 	bne.w	800d75e <mg_json_get+0x34e>
 800d634:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d638:	429a      	cmp	r2, r3
 800d63a:	f040 8090 	bne.w	800d75e <mg_json_get+0x34e>
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d005      	beq.n	800d650 <mg_json_get+0x240>
 800d644:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	1c5a      	adds	r2, r3, #1
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d652:	e213      	b.n	800da7c <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800d654:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d658:	2b74      	cmp	r3, #116	@ 0x74
 800d65a:	d113      	bne.n	800d684 <mg_json_get+0x274>
 800d65c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d65e:	3303      	adds	r3, #3
 800d660:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d662:	429a      	cmp	r2, r3
 800d664:	dd0e      	ble.n	800d684 <mg_json_get+0x274>
 800d666:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d668:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d66a:	4413      	add	r3, r2
 800d66c:	2204      	movs	r2, #4
 800d66e:	4998      	ldr	r1, [pc, #608]	@ (800d8d0 <mg_json_get+0x4c0>)
 800d670:	4618      	mov	r0, r3
 800d672:	f018 f861 	bl	8025738 <memcmp>
 800d676:	4603      	mov	r3, r0
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d103      	bne.n	800d684 <mg_json_get+0x274>
          i += 3;
 800d67c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d67e:	3303      	adds	r3, #3
 800d680:	663b      	str	r3, [r7, #96]	@ 0x60
 800d682:	e06c      	b.n	800d75e <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 800d684:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d688:	2b6e      	cmp	r3, #110	@ 0x6e
 800d68a:	d113      	bne.n	800d6b4 <mg_json_get+0x2a4>
 800d68c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d68e:	3303      	adds	r3, #3
 800d690:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d692:	429a      	cmp	r2, r3
 800d694:	dd0e      	ble.n	800d6b4 <mg_json_get+0x2a4>
 800d696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d69a:	4413      	add	r3, r2
 800d69c:	2204      	movs	r2, #4
 800d69e:	498d      	ldr	r1, [pc, #564]	@ (800d8d4 <mg_json_get+0x4c4>)
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f018 f849 	bl	8025738 <memcmp>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d103      	bne.n	800d6b4 <mg_json_get+0x2a4>
          i += 3;
 800d6ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6ae:	3303      	adds	r3, #3
 800d6b0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d6b2:	e054      	b.n	800d75e <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 800d6b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d6b8:	2b66      	cmp	r3, #102	@ 0x66
 800d6ba:	d113      	bne.n	800d6e4 <mg_json_get+0x2d4>
 800d6bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6be:	3304      	adds	r3, #4
 800d6c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	dd0e      	ble.n	800d6e4 <mg_json_get+0x2d4>
 800d6c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6ca:	4413      	add	r3, r2
 800d6cc:	2205      	movs	r2, #5
 800d6ce:	4982      	ldr	r1, [pc, #520]	@ (800d8d8 <mg_json_get+0x4c8>)
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	f018 f831 	bl	8025738 <memcmp>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d103      	bne.n	800d6e4 <mg_json_get+0x2d4>
          i += 4;
 800d6dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d6de:	3304      	adds	r3, #4
 800d6e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d6e2:	e03c      	b.n	800d75e <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800d6e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d6e8:	2b2d      	cmp	r3, #45	@ 0x2d
 800d6ea:	d007      	beq.n	800d6fc <mg_json_get+0x2ec>
 800d6ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d6f0:	2b2f      	cmp	r3, #47	@ 0x2f
 800d6f2:	d916      	bls.n	800d722 <mg_json_get+0x312>
 800d6f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d6f8:	2b39      	cmp	r3, #57	@ 0x39
 800d6fa:	d812      	bhi.n	800d722 <mg_json_get+0x312>
          int numlen = 0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 800d700:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d702:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d704:	18d0      	adds	r0, r2, r3
 800d706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d708:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d70a:	1ad3      	subs	r3, r2, r3
 800d70c:	f107 0210 	add.w	r2, r7, #16
 800d710:	4619      	mov	r1, r3
 800d712:	f7ff fd2d 	bl	800d170 <mg_atod>
          i += numlen - 1;
 800d716:	693b      	ldr	r3, [r7, #16]
 800d718:	3b01      	subs	r3, #1
 800d71a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d71c:	4413      	add	r3, r2
 800d71e:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800d720:	e01d      	b.n	800d75e <mg_json_get+0x34e>
        } else if (c == '"') {
 800d722:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d726:	2b22      	cmp	r3, #34	@ 0x22
 800d728:	d116      	bne.n	800d758 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800d72a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d72c:	3301      	adds	r3, #1
 800d72e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d730:	18d0      	adds	r0, r2, r3
 800d732:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d734:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	3b01      	subs	r3, #1
 800d73a:	4619      	mov	r1, r3
 800d73c:	f7ff fcd6 	bl	800d0ec <mg_pass_string>
 800d740:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 800d742:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d744:	2b00      	cmp	r3, #0
 800d746:	da01      	bge.n	800d74c <mg_json_get+0x33c>
 800d748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d74a:	e197      	b.n	800da7c <mg_json_get+0x66c>
          i += n + 1;
 800d74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d74e:	3301      	adds	r3, #1
 800d750:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d752:	4413      	add	r3, r2
 800d754:	663b      	str	r3, [r7, #96]	@ 0x60
 800d756:	e002      	b.n	800d75e <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 800d758:	f06f 0301 	mvn.w	r3, #1
 800d75c:	e18e      	b.n	800da7c <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 800d75e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d762:	429a      	cmp	r2, r3
 800d764:	d114      	bne.n	800d790 <mg_json_get+0x380>
 800d766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	4413      	add	r3, r2
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d10e      	bne.n	800d790 <mg_json_get+0x380>
 800d772:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d774:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d776:	429a      	cmp	r2, r3
 800d778:	d10a      	bne.n	800d790 <mg_json_get+0x380>
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d005      	beq.n	800d78c <mg_json_get+0x37c>
 800d780:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	601a      	str	r2, [r3, #0]
 800d78c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d78e:	e175      	b.n	800da7c <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 800d790:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d794:	429a      	cmp	r2, r3
 800d796:	d105      	bne.n	800d7a4 <mg_json_get+0x394>
 800d798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	db02      	blt.n	800d7a4 <mg_json_get+0x394>
 800d79e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7a0:	3301      	adds	r3, #1
 800d7a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800d7aa:	e15d      	b.n	800da68 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800d7ac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d7b0:	2b22      	cmp	r3, #34	@ 0x22
 800d7b2:	d170      	bne.n	800d896 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800d7b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7ba:	18d0      	adds	r0, r2, r3
 800d7bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7c0:	1ad3      	subs	r3, r2, r3
 800d7c2:	3b01      	subs	r3, #1
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	f7ff fc91 	bl	800d0ec <mg_pass_string>
 800d7ca:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800d7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da01      	bge.n	800d7d6 <mg_json_get+0x3c6>
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d4:	e152      	b.n	800da7c <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 800d7d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7d8:	1c5a      	adds	r2, r3, #1
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	4413      	add	r3, r2
 800d7de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	dc02      	bgt.n	800d7ea <mg_json_get+0x3da>
 800d7e4:	f06f 0302 	mvn.w	r3, #2
 800d7e8:	e148      	b.n	800da7c <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800d7ea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	da02      	bge.n	800d7f8 <mg_json_get+0x3e8>
 800d7f2:	f06f 0302 	mvn.w	r3, #2
 800d7f6:	e141      	b.n	800da7c <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 800d7f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d109      	bne.n	800d814 <mg_json_get+0x404>
 800d800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d802:	3b01      	subs	r3, #1
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	4413      	add	r3, r2
 800d808:	781b      	ldrb	r3, [r3, #0]
 800d80a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d80c:	d002      	beq.n	800d814 <mg_json_get+0x404>
 800d80e:	f06f 0302 	mvn.w	r3, #2
 800d812:	e133      	b.n	800da7c <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 800d814:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d816:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d818:	429a      	cmp	r2, r3
 800d81a:	d133      	bne.n	800d884 <mg_json_get+0x474>
 800d81c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d81e:	3b01      	subs	r3, #1
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4413      	add	r3, r2
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	2b2e      	cmp	r3, #46	@ 0x2e
 800d828:	d12c      	bne.n	800d884 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800d82a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d82c:	3301      	adds	r3, #1
 800d82e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d830:	18d0      	adds	r0, r2, r3
 800d832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	4413      	add	r3, r2
 800d838:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d83a:	4619      	mov	r1, r3
 800d83c:	f017 ffbb 	bl	80257b6 <strncmp>
 800d840:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 800d842:	2b00      	cmp	r3, #0
 800d844:	d11e      	bne.n	800d884 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800d846:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84a:	4413      	add	r3, r2
 800d84c:	461a      	mov	r2, r3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4413      	add	r3, r2
 800d852:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800d854:	2b00      	cmp	r3, #0
 800d856:	d011      	beq.n	800d87c <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800d858:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d85c:	4413      	add	r3, r2
 800d85e:	461a      	mov	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4413      	add	r3, r2
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b2e      	cmp	r3, #46	@ 0x2e
 800d868:	d008      	beq.n	800d87c <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800d86a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d86c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d86e:	4413      	add	r3, r2
 800d870:	461a      	mov	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4413      	add	r3, r2
 800d876:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800d878:	2b5b      	cmp	r3, #91	@ 0x5b
 800d87a:	d103      	bne.n	800d884 <mg_json_get+0x474>
            pos += n;
 800d87c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d880:	4413      	add	r3, r2
 800d882:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 800d884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d886:	3301      	adds	r3, #1
 800d888:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d88a:	4413      	add	r3, r2
 800d88c:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 800d88e:	2302      	movs	r3, #2
 800d890:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800d894:	e0e7      	b.n	800da66 <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 800d896:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d89a:	2b7d      	cmp	r3, #125	@ 0x7d
 800d89c:	d14a      	bne.n	800d934 <mg_json_get+0x524>
          MG_EOO('}');
 800d89e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d106      	bne.n	800d8b4 <mg_json_get+0x4a4>
 800d8a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d8a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8aa:	429a      	cmp	r2, r3
 800d8ac:	d002      	beq.n	800d8b4 <mg_json_get+0x4a4>
 800d8ae:	f06f 0302 	mvn.w	r3, #2
 800d8b2:	e0e3      	b.n	800da7c <mg_json_get+0x66c>
 800d8b4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d8b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	3368      	adds	r3, #104	@ 0x68
 800d8be:	443b      	add	r3, r7
 800d8c0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800d8c4:	3302      	adds	r3, #2
 800d8c6:	429a      	cmp	r2, r3
 800d8c8:	d008      	beq.n	800d8dc <mg_json_get+0x4cc>
 800d8ca:	f06f 0301 	mvn.w	r3, #1
 800d8ce:	e0d5      	b.n	800da7c <mg_json_get+0x66c>
 800d8d0:	08027384 	.word	0x08027384
 800d8d4:	0802738c 	.word	0x0802738c
 800d8d8:	08027394 	.word	0x08027394
 800d8dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d114      	bne.n	800d914 <mg_json_get+0x504>
 800d8ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10e      	bne.n	800d914 <mg_json_get+0x504>
 800d8f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d8f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d10a      	bne.n	800d914 <mg_json_get+0x504>
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d005      	beq.n	800d910 <mg_json_get+0x500>
 800d904:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d908:	1ad3      	subs	r3, r2, r3
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	601a      	str	r2, [r3, #0]
 800d910:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d912:	e0b3      	b.n	800da7c <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 800d914:	2303      	movs	r3, #3
 800d916:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 800d91a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d91c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d91e:	429a      	cmp	r2, r3
 800d920:	f040 80a1 	bne.w	800da66 <mg_json_get+0x656>
 800d924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d926:	2b00      	cmp	r3, #0
 800d928:	f2c0 809d 	blt.w	800da66 <mg_json_get+0x656>
 800d92c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d92e:	3301      	adds	r3, #1
 800d930:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 800d932:	e098      	b.n	800da66 <mg_json_get+0x656>
          return MG_JSON_INVALID;
 800d934:	f06f 0301 	mvn.w	r3, #1
 800d938:	e0a0      	b.n	800da7c <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 800d93a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d93e:	2b3a      	cmp	r3, #58	@ 0x3a
 800d940:	d103      	bne.n	800d94a <mg_json_get+0x53a>
          expecting = S_VALUE;
 800d942:	2300      	movs	r3, #0
 800d944:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800d948:	e08e      	b.n	800da68 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 800d94a:	f06f 0301 	mvn.w	r3, #1
 800d94e:	e095      	b.n	800da7c <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 800d950:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d952:	2b00      	cmp	r3, #0
 800d954:	dc02      	bgt.n	800d95c <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 800d956:	f06f 0301 	mvn.w	r3, #1
 800d95a:	e08f      	b.n	800da7c <mg_json_get+0x66c>
        } else if (c == ',') {
 800d95c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d960:	2b2c      	cmp	r3, #44	@ 0x2c
 800d962:	d10d      	bne.n	800d980 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 800d964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d966:	3b01      	subs	r3, #1
 800d968:	3368      	adds	r3, #104	@ 0x68
 800d96a:	443b      	add	r3, r7
 800d96c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800d970:	2b7b      	cmp	r3, #123	@ 0x7b
 800d972:	bf0c      	ite	eq
 800d974:	2301      	moveq	r3, #1
 800d976:	2300      	movne	r3, #0
 800d978:	b2db      	uxtb	r3, r3
 800d97a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800d97e:	e073      	b.n	800da68 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 800d980:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d984:	2b5d      	cmp	r3, #93	@ 0x5d
 800d986:	d003      	beq.n	800d990 <mg_json_get+0x580>
 800d988:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d98c:	2b7d      	cmp	r3, #125	@ 0x7d
 800d98e:	d163      	bne.n	800da58 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 800d990:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d994:	429a      	cmp	r2, r3
 800d996:	d10d      	bne.n	800d9b4 <mg_json_get+0x5a4>
 800d998:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d99c:	2b7d      	cmp	r3, #125	@ 0x7d
 800d99e:	d109      	bne.n	800d9b4 <mg_json_get+0x5a4>
 800d9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	687a      	ldr	r2, [r7, #4]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	781b      	ldrb	r3, [r3, #0]
 800d9aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800d9ac:	d102      	bne.n	800d9b4 <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 800d9ae:	f06f 0302 	mvn.w	r3, #2
 800d9b2:	e063      	b.n	800da7c <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 800d9b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	d10d      	bne.n	800d9d8 <mg_json_get+0x5c8>
 800d9bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d9c0:	2b5d      	cmp	r3, #93	@ 0x5d
 800d9c2:	d109      	bne.n	800d9d8 <mg_json_get+0x5c8>
 800d9c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9c6:	3b01      	subs	r3, #1
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	4413      	add	r3, r2
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	2b2c      	cmp	r3, #44	@ 0x2c
 800d9d0:	d102      	bne.n	800d9d8 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 800d9d2:	f06f 0302 	mvn.w	r3, #2
 800d9d6:	e051      	b.n	800da7c <mg_json_get+0x66c>
          MG_EOO('O');
 800d9d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d106      	bne.n	800d9ee <mg_json_get+0x5de>
 800d9e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d9e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d002      	beq.n	800d9ee <mg_json_get+0x5de>
 800d9e8:	f06f 0302 	mvn.w	r3, #2
 800d9ec:	e046      	b.n	800da7c <mg_json_get+0x66c>
 800d9ee:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d9f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	3368      	adds	r3, #104	@ 0x68
 800d9f8:	443b      	add	r3, r7
 800d9fa:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800d9fe:	3302      	adds	r3, #2
 800da00:	429a      	cmp	r2, r3
 800da02:	d002      	beq.n	800da0a <mg_json_get+0x5fa>
 800da04:	f06f 0301 	mvn.w	r3, #1
 800da08:	e038      	b.n	800da7c <mg_json_get+0x66c>
 800da0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800da0c:	3b01      	subs	r3, #1
 800da0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800da10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da14:	429a      	cmp	r2, r3
 800da16:	d114      	bne.n	800da42 <mg_json_get+0x632>
 800da18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	4413      	add	r3, r2
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10e      	bne.n	800da42 <mg_json_get+0x632>
 800da24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800da26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da28:	429a      	cmp	r2, r3
 800da2a:	d10a      	bne.n	800da42 <mg_json_get+0x632>
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d005      	beq.n	800da3e <mg_json_get+0x62e>
 800da32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800da34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	1c5a      	adds	r2, r3, #1
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da40:	e01c      	b.n	800da7c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800da42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da46:	429a      	cmp	r2, r3
 800da48:	d109      	bne.n	800da5e <mg_json_get+0x64e>
 800da4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	db06      	blt.n	800da5e <mg_json_get+0x64e>
 800da50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da52:	3301      	adds	r3, #1
 800da54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da56:	e002      	b.n	800da5e <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 800da58:	f06f 0301 	mvn.w	r3, #1
 800da5c:	e00e      	b.n	800da7c <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800da5e:	bf00      	nop
        break;
 800da60:	e002      	b.n	800da68 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800da62:	bf00      	nop
 800da64:	e000      	b.n	800da68 <mg_json_get+0x658>
        break;
 800da66:	bf00      	nop
  for (i = 0; i < len; i++) {
 800da68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da6a:	3301      	adds	r3, #1
 800da6c:	663b      	str	r3, [r7, #96]	@ 0x60
 800da6e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800da70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da72:	429a      	cmp	r2, r3
 800da74:	f6ff acfc 	blt.w	800d470 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 800da78:	f06f 0302 	mvn.w	r3, #2
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	376c      	adds	r7, #108	@ 0x6c
 800da80:	46bd      	mov	sp, r7
 800da82:	bd90      	pop	{r4, r7, pc}

0800da84 <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60f8      	str	r0, [r7, #12]
 800da8c:	1d38      	adds	r0, r7, #4
 800da8e:	e880 0006 	stmia.w	r0, {r1, r2}
 800da92:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 800da94:	2300      	movs	r3, #0
 800da96:	613b      	str	r3, [r7, #16]
 800da98:	f107 0310 	add.w	r3, r7, #16
 800da9c:	683a      	ldr	r2, [r7, #0]
 800da9e:	1d39      	adds	r1, r7, #4
 800daa0:	c903      	ldmia	r1, {r0, r1}
 800daa2:	f7ff fcb5 	bl	800d410 <mg_json_get>
 800daa6:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	db03      	blt.n	800dab6 <mg_json_get_tok+0x32>
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	4413      	add	r3, r2
 800dab4:	e000      	b.n	800dab8 <mg_json_get_tok+0x34>
 800dab6:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 800dab8:	693a      	ldr	r2, [r7, #16]
 800daba:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	4619      	mov	r1, r3
 800dac2:	f008 f960 	bl	8015d86 <mg_str_n>
}
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	3718      	adds	r7, #24
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800dace:	b590      	push	{r4, r7, lr}
 800dad0:	b089      	sub	sp, #36	@ 0x24
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	f107 0408 	add.w	r4, r7, #8
 800dad8:	e884 0003 	stmia.w	r4, {r0, r1}
 800dadc:	607a      	str	r2, [r7, #4]
 800dade:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800dae0:	2300      	movs	r3, #0
 800dae2:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800dae4:	f107 0314 	add.w	r3, r7, #20
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	f107 0108 	add.w	r1, r7, #8
 800daee:	c903      	ldmia	r1, {r0, r1}
 800daf0:	f7ff fc8e 	bl	800d410 <mg_json_get>
 800daf4:	61b8      	str	r0, [r7, #24]
 800daf6:	69bb      	ldr	r3, [r7, #24]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	db23      	blt.n	800db44 <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	4413      	add	r3, r2
 800db02:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800db04:	2b2d      	cmp	r3, #45	@ 0x2d
 800db06:	d00b      	beq.n	800db20 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800db08:	68ba      	ldr	r2, [r7, #8]
 800db0a:	69bb      	ldr	r3, [r7, #24]
 800db0c:	4413      	add	r3, r2
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	2b2f      	cmp	r3, #47	@ 0x2f
 800db12:	d917      	bls.n	800db44 <mg_json_get_num+0x76>
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	4413      	add	r3, r2
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	2b39      	cmp	r3, #57	@ 0x39
 800db1e:	d811      	bhi.n	800db44 <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d00c      	beq.n	800db40 <mg_json_get_num+0x72>
 800db26:	68ba      	ldr	r2, [r7, #8]
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	4413      	add	r3, r2
 800db2c:	6979      	ldr	r1, [r7, #20]
 800db2e:	2200      	movs	r2, #0
 800db30:	4618      	mov	r0, r3
 800db32:	f7ff fb1d 	bl	800d170 <mg_atod>
 800db36:	eeb0 7b40 	vmov.f64	d7, d0
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 800db40:	2301      	movs	r3, #1
 800db42:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	2b00      	cmp	r3, #0
 800db48:	bf14      	ite	ne
 800db4a:	2301      	movne	r3, #1
 800db4c:	2300      	moveq	r3, #0
 800db4e:	b2db      	uxtb	r3, r3
}
 800db50:	4618      	mov	r0, r3
 800db52:	3724      	adds	r7, #36	@ 0x24
 800db54:	46bd      	mov	sp, r7
 800db56:	bd90      	pop	{r4, r7, pc}

0800db58 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 800db58:	b590      	push	{r4, r7, lr}
 800db5a:	b087      	sub	sp, #28
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	f107 0408 	add.w	r4, r7, #8
 800db62:	e884 0003 	stmia.w	r4, {r0, r1}
 800db66:	607a      	str	r2, [r7, #4]
 800db68:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 800db6a:	2300      	movs	r3, #0
 800db6c:	617b      	str	r3, [r7, #20]
 800db6e:	2300      	movs	r3, #0
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	f107 0108 	add.w	r1, r7, #8
 800db76:	c903      	ldmia	r1, {r0, r1}
 800db78:	f7ff fc4a 	bl	800d410 <mg_json_get>
 800db7c:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	2b00      	cmp	r3, #0
 800db82:	db1b      	blt.n	800dbbc <mg_json_get_bool+0x64>
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	4413      	add	r3, r2
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2b74      	cmp	r3, #116	@ 0x74
 800db8e:	d005      	beq.n	800db9c <mg_json_get_bool+0x44>
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	4413      	add	r3, r2
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	2b66      	cmp	r3, #102	@ 0x66
 800db9a:	d10f      	bne.n	800dbbc <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00a      	beq.n	800dbb8 <mg_json_get_bool+0x60>
 800dba2:	68ba      	ldr	r2, [r7, #8]
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	4413      	add	r3, r2
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	2b74      	cmp	r3, #116	@ 0x74
 800dbac:	bf0c      	ite	eq
 800dbae:	2301      	moveq	r3, #1
 800dbb0:	2300      	movne	r3, #0
 800dbb2:	b2da      	uxtb	r2, r3
 800dbb4:	683b      	ldr	r3, [r7, #0]
 800dbb6:	701a      	strb	r2, [r3, #0]
    found = 1;
 800dbb8:	2301      	movs	r3, #1
 800dbba:	617b      	str	r3, [r7, #20]
  }
  return found;
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	bf14      	ite	ne
 800dbc2:	2301      	movne	r3, #1
 800dbc4:	2300      	moveq	r3, #0
 800dbc6:	b2db      	uxtb	r3, r3
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	371c      	adds	r7, #28
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd90      	pop	{r4, r7, pc}

0800dbd0 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 800dbd0:	b590      	push	{r4, r7, lr}
 800dbd2:	b08d      	sub	sp, #52	@ 0x34
 800dbd4:	af02      	add	r7, sp, #8
 800dbd6:	f107 0408 	add.w	r4, r7, #8
 800dbda:	e884 0003 	stmia.w	r4, {r0, r1}
 800dbde:	607a      	str	r2, [r7, #4]
 800dbe0:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	623b      	str	r3, [r7, #32]
 800dbea:	e064      	b.n	800dcb6 <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 800dbec:	68ba      	ldr	r2, [r7, #8]
 800dbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbf0:	4413      	add	r3, r2
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	2b5c      	cmp	r3, #92	@ 0x5c
 800dbf6:	d12c      	bne.n	800dc52 <mg_json_unescape+0x82>
 800dbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfa:	1d5a      	adds	r2, r3, #5
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d227      	bcs.n	800dc52 <mg_json_unescape+0x82>
 800dc02:	68ba      	ldr	r2, [r7, #8]
 800dc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc06:	3301      	adds	r3, #1
 800dc08:	4413      	add	r3, r2
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	2b75      	cmp	r3, #117	@ 0x75
 800dc0e:	d120      	bne.n	800dc52 <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc14:	3302      	adds	r3, #2
 800dc16:	18d1      	adds	r1, r2, r3
 800dc18:	f107 0314 	add.w	r3, r7, #20
 800dc1c:	2204      	movs	r2, #4
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f008 f8b1 	bl	8015d86 <mg_str_n>
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	6a3b      	ldr	r3, [r7, #32]
 800dc28:	4413      	add	r3, r2
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	9200      	str	r2, [sp, #0]
 800dc2e:	2210      	movs	r2, #16
 800dc30:	f107 0114 	add.w	r1, r7, #20
 800dc34:	c903      	ldmia	r1, {r0, r1}
 800dc36:	f008 fae4 	bl	8016202 <mg_str_to_num>
 800dc3a:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 800dc3c:	f083 0301 	eor.w	r3, r3, #1
 800dc40:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d001      	beq.n	800dc4a <mg_json_unescape+0x7a>
        return false;
 800dc46:	2300      	movs	r3, #0
 800dc48:	e04c      	b.n	800dce4 <mg_json_unescape+0x114>
      i += 5;
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4c:	3305      	adds	r3, #5
 800dc4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc50:	e02b      	b.n	800dcaa <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc56:	4413      	add	r3, r2
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	2b5c      	cmp	r3, #92	@ 0x5c
 800dc5c:	d11d      	bne.n	800dc9a <mg_json_unescape+0xca>
 800dc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc60:	1c5a      	adds	r2, r3, #1
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d218      	bcs.n	800dc9a <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	4413      	add	r3, r2
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	2100      	movs	r1, #0
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff fa09 	bl	800d08c <json_esc>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 800dc7e:	7ffb      	ldrb	r3, [r7, #31]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d101      	bne.n	800dc88 <mg_json_unescape+0xb8>
 800dc84:	2300      	movs	r3, #0
 800dc86:	e02d      	b.n	800dce4 <mg_json_unescape+0x114>
      to[j] = c;
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	6a3b      	ldr	r3, [r7, #32]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	7ffa      	ldrb	r2, [r7, #31]
 800dc90:	701a      	strb	r2, [r3, #0]
      i++;
 800dc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc94:	3301      	adds	r3, #1
 800dc96:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800dc98:	e007      	b.n	800dcaa <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 800dc9a:	68ba      	ldr	r2, [r7, #8]
 800dc9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc9e:	441a      	add	r2, r3
 800dca0:	6879      	ldr	r1, [r7, #4]
 800dca2:	6a3b      	ldr	r3, [r7, #32]
 800dca4:	440b      	add	r3, r1
 800dca6:	7812      	ldrb	r2, [r2, #0]
 800dca8:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcac:	3301      	adds	r3, #1
 800dcae:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	623b      	str	r3, [r7, #32]
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	d203      	bcs.n	800dcc6 <mg_json_unescape+0xf6>
 800dcbe:	6a3a      	ldr	r2, [r7, #32]
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d392      	bcc.n	800dbec <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 800dcc6:	6a3a      	ldr	r2, [r7, #32]
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d301      	bcc.n	800dcd2 <mg_json_unescape+0x102>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	e008      	b.n	800dce4 <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d004      	beq.n	800dce2 <mg_json_unescape+0x112>
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	6a3b      	ldr	r3, [r7, #32]
 800dcdc:	4413      	add	r3, r2
 800dcde:	2200      	movs	r2, #0
 800dce0:	701a      	strb	r2, [r3, #0]
  return true;
 800dce2:	2301      	movs	r3, #1
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	372c      	adds	r7, #44	@ 0x2c
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd90      	pop	{r4, r7, pc}

0800dcec <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800dcf6:	4b05      	ldr	r3, [pc, #20]	@ (800dd0c <logc+0x20>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4a05      	ldr	r2, [pc, #20]	@ (800dd10 <logc+0x24>)
 800dcfc:	6811      	ldr	r1, [r2, #0]
 800dcfe:	79fa      	ldrb	r2, [r7, #7]
 800dd00:	4610      	mov	r0, r2
 800dd02:	4798      	blx	r3
}
 800dd04:	bf00      	nop
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	2400025c 	.word	0x2400025c
 800dd10:	240020ec 	.word	0x240020ec

0800dd14 <logs>:

static void logs(const char *buf, size_t len) {
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800dd1e:	2300      	movs	r3, #0
 800dd20:	60fb      	str	r3, [r7, #12]
 800dd22:	e009      	b.n	800dd38 <logs+0x24>
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	4413      	add	r3, r2
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7ff ffdd 	bl	800dcec <logc>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3301      	adds	r3, #1
 800dd36:	60fb      	str	r3, [r7, #12]
 800dd38:	68fa      	ldr	r2, [r7, #12]
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d3f1      	bcc.n	800dd24 <logs+0x10>
}
 800dd40:	bf00      	nop
 800dd42:	bf00      	nop
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
	...

0800dd4c <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 800dd4c:	b590      	push	{r4, r7, lr}
 800dd4e:	b099      	sub	sp, #100	@ 0x64
 800dd50:	af06      	add	r7, sp, #24
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]
 800dd58:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 800dd5a:	212f      	movs	r1, #47	@ 0x2f
 800dd5c:	68b8      	ldr	r0, [r7, #8]
 800dd5e:	f017 fd4f 	bl	8025800 <strrchr>
 800dd62:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 800dd64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d104      	bne.n	800dd74 <mg_log_prefix+0x28>
 800dd6a:	215c      	movs	r1, #92	@ 0x5c
 800dd6c:	68b8      	ldr	r0, [r7, #8]
 800dd6e:	f017 fd47 	bl	8025800 <strrchr>
 800dd72:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800dd74:	f7f2 fcf8 	bl	8000768 <mg_millis>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dd7e:	2900      	cmp	r1, #0
 800dd80:	d002      	beq.n	800dd88 <mg_log_prefix+0x3c>
 800dd82:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800dd84:	3101      	adds	r1, #1
 800dd86:	e000      	b.n	800dd8a <mg_log_prefix+0x3e>
 800dd88:	68b9      	ldr	r1, [r7, #8]
 800dd8a:	f107 0414 	add.w	r4, r7, #20
 800dd8e:	6838      	ldr	r0, [r7, #0]
 800dd90:	9005      	str	r0, [sp, #20]
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	9004      	str	r0, [sp, #16]
 800dd96:	9103      	str	r1, [sp, #12]
 800dd98:	68f9      	ldr	r1, [r7, #12]
 800dd9a:	9102      	str	r1, [sp, #8]
 800dd9c:	e9cd 2300 	strd	r2, r3, [sp]
 800dda0:	4a11      	ldr	r2, [pc, #68]	@ (800dde8 <mg_log_prefix+0x9c>)
 800dda2:	2129      	movs	r1, #41	@ 0x29
 800dda4:	4620      	mov	r0, r4
 800dda6:	f004 fc0b 	bl	80125c0 <mg_snprintf>
 800ddaa:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800ddac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddae:	2b27      	cmp	r3, #39	@ 0x27
 800ddb0:	d90a      	bls.n	800ddc8 <mg_log_prefix+0x7c>
 800ddb2:	2327      	movs	r3, #39	@ 0x27
 800ddb4:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 800ddb6:	e007      	b.n	800ddc8 <mg_log_prefix+0x7c>
 800ddb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	643a      	str	r2, [r7, #64]	@ 0x40
 800ddbe:	3348      	adds	r3, #72	@ 0x48
 800ddc0:	443b      	add	r3, r7
 800ddc2:	2220      	movs	r2, #32
 800ddc4:	f803 2c34 	strb.w	r2, [r3, #-52]
 800ddc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddca:	2b28      	cmp	r3, #40	@ 0x28
 800ddcc:	d9f4      	bls.n	800ddb8 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 800ddce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddd0:	1e5a      	subs	r2, r3, #1
 800ddd2:	f107 0314 	add.w	r3, r7, #20
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7ff ff9b 	bl	800dd14 <logs>
}
 800ddde:	bf00      	nop
 800dde0:	374c      	adds	r7, #76	@ 0x4c
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd90      	pop	{r4, r7, pc}
 800dde6:	bf00      	nop
 800dde8:	0802739c 	.word	0x0802739c

0800ddec <mg_log>:

void mg_log(const char *fmt, ...) {
 800ddec:	b40f      	push	{r0, r1, r2, r3}
 800ddee:	b580      	push	{r7, lr}
 800ddf0:	b082      	sub	sp, #8
 800ddf2:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800ddf4:	f107 0314 	add.w	r3, r7, #20
 800ddf8:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800ddfa:	4b09      	ldr	r3, [pc, #36]	@ (800de20 <mg_log+0x34>)
 800ddfc:	6818      	ldr	r0, [r3, #0]
 800ddfe:	4b09      	ldr	r3, [pc, #36]	@ (800de24 <mg_log+0x38>)
 800de00:	6819      	ldr	r1, [r3, #0]
 800de02:	1d3b      	adds	r3, r7, #4
 800de04:	693a      	ldr	r2, [r7, #16]
 800de06:	f7fb f907 	bl	8009018 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800de0a:	2102      	movs	r1, #2
 800de0c:	4806      	ldr	r0, [pc, #24]	@ (800de28 <mg_log+0x3c>)
 800de0e:	f7ff ff81 	bl	800dd14 <logs>
}
 800de12:	bf00      	nop
 800de14:	3708      	adds	r7, #8
 800de16:	46bd      	mov	sp, r7
 800de18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de1c:	b004      	add	sp, #16
 800de1e:	4770      	bx	lr
 800de20:	2400025c 	.word	0x2400025c
 800de24:	240020ec 	.word	0x240020ec
 800de28:	0802680c 	.word	0x0802680c

0800de2c <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 800de2c:	b480      	push	{r7}
 800de2e:	b083      	sub	sp, #12
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b09      	cmp	r3, #9
 800de38:	d804      	bhi.n	800de44 <nibble+0x18>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	3330      	adds	r3, #48	@ 0x30
 800de40:	b2db      	uxtb	r3, r3
 800de42:	e003      	b.n	800de4c <nibble+0x20>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	b2db      	uxtb	r3, r3
 800de48:	3357      	adds	r3, #87	@ 0x57
 800de4a:	b2db      	uxtb	r3, r3
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	370c      	adds	r7, #12
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr

0800de58 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 800de58:	b580      	push	{r7, lr}
 800de5a:	b08a      	sub	sp, #40	@ 0x28
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800de66:	2300      	movs	r3, #0
 800de68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800de6c:	2300      	movs	r3, #0
 800de6e:	623b      	str	r3, [r7, #32]
 800de70:	e07b      	b.n	800df6a <mg_hexdump+0x112>
    if ((i % 16) == 0) {
 800de72:	6a3b      	ldr	r3, [r7, #32]
 800de74:	f003 030f 	and.w	r3, r3, #15
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d13b      	bne.n	800def4 <mg_hexdump+0x9c>
      // Print buffered ascii chars
      if (i > 0)
 800de7c:	6a3b      	ldr	r3, [r7, #32]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d010      	beq.n	800dea4 <mg_hexdump+0x4c>
        logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2), alen = 0;
 800de82:	2102      	movs	r1, #2
 800de84:	484e      	ldr	r0, [pc, #312]	@ (800dfc0 <mg_hexdump+0x168>)
 800de86:	f7ff ff45 	bl	800dd14 <logs>
 800de8a:	f107 030c 	add.w	r3, r7, #12
 800de8e:	2110      	movs	r1, #16
 800de90:	4618      	mov	r0, r3
 800de92:	f7ff ff3f 	bl	800dd14 <logs>
 800de96:	2102      	movs	r1, #2
 800de98:	484a      	ldr	r0, [pc, #296]	@ (800dfc4 <mg_hexdump+0x16c>)
 800de9a:	f7ff ff3b 	bl	800dd14 <logs>
 800de9e:	2300      	movs	r3, #0
 800dea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800dea4:	6a3b      	ldr	r3, [r7, #32]
 800dea6:	0b1b      	lsrs	r3, r3, #12
 800dea8:	f003 030f 	and.w	r3, r3, #15
 800deac:	4618      	mov	r0, r3
 800deae:	f7ff ffbd 	bl	800de2c <nibble>
 800deb2:	4603      	mov	r3, r0
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7ff ff19 	bl	800dcec <logc>
 800deba:	6a3b      	ldr	r3, [r7, #32]
 800debc:	0a1b      	lsrs	r3, r3, #8
 800debe:	f003 030f 	and.w	r3, r3, #15
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff ffb2 	bl	800de2c <nibble>
 800dec8:	4603      	mov	r3, r0
 800deca:	4618      	mov	r0, r3
 800decc:	f7ff ff0e 	bl	800dcec <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800ded0:	6a3b      	ldr	r3, [r7, #32]
 800ded2:	091b      	lsrs	r3, r3, #4
 800ded4:	f003 030f 	and.w	r3, r3, #15
 800ded8:	4618      	mov	r0, r3
 800deda:	f7ff ffa7 	bl	800de2c <nibble>
 800dede:	4603      	mov	r3, r0
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7ff ff03 	bl	800dcec <logc>
 800dee6:	2030      	movs	r0, #48	@ 0x30
 800dee8:	f7ff ff00 	bl	800dcec <logc>
 800deec:	2103      	movs	r1, #3
 800deee:	4836      	ldr	r0, [pc, #216]	@ (800dfc8 <mg_hexdump+0x170>)
 800def0:	f7ff ff10 	bl	800dd14 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800def4:	69fa      	ldr	r2, [r7, #28]
 800def6:	6a3b      	ldr	r3, [r7, #32]
 800def8:	4413      	add	r3, r2
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	091b      	lsrs	r3, r3, #4
 800defe:	b2db      	uxtb	r3, r3
 800df00:	4618      	mov	r0, r3
 800df02:	f7ff ff93 	bl	800de2c <nibble>
 800df06:	4603      	mov	r3, r0
 800df08:	4618      	mov	r0, r3
 800df0a:	f7ff feef 	bl	800dcec <logc>
 800df0e:	69fa      	ldr	r2, [r7, #28]
 800df10:	6a3b      	ldr	r3, [r7, #32]
 800df12:	4413      	add	r3, r2
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	f003 030f 	and.w	r3, r3, #15
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7ff ff86 	bl	800de2c <nibble>
 800df20:	4603      	mov	r3, r0
 800df22:	4618      	mov	r0, r3
 800df24:	f7ff fee2 	bl	800dcec <logc>
    logc(' ');                                         // Space after hex number
 800df28:	2020      	movs	r0, #32
 800df2a:	f7ff fedf 	bl	800dcec <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800df2e:	69fa      	ldr	r2, [r7, #28]
 800df30:	6a3b      	ldr	r3, [r7, #32]
 800df32:	4413      	add	r3, r2
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	2b1f      	cmp	r3, #31
 800df38:	d90a      	bls.n	800df50 <mg_hexdump+0xf8>
 800df3a:	69fa      	ldr	r2, [r7, #28]
 800df3c:	6a3b      	ldr	r3, [r7, #32]
 800df3e:	4413      	add	r3, r2
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	2b7e      	cmp	r3, #126	@ 0x7e
 800df44:	d804      	bhi.n	800df50 <mg_hexdump+0xf8>
 800df46:	69fa      	ldr	r2, [r7, #28]
 800df48:	6a3b      	ldr	r3, [r7, #32]
 800df4a:	4413      	add	r3, r2
 800df4c:	781a      	ldrb	r2, [r3, #0]
 800df4e:	e000      	b.n	800df52 <mg_hexdump+0xfa>
 800df50:	222e      	movs	r2, #46	@ 0x2e
 800df52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df56:	1c59      	adds	r1, r3, #1
 800df58:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800df5c:	3328      	adds	r3, #40	@ 0x28
 800df5e:	443b      	add	r3, r7
 800df60:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800df64:	6a3b      	ldr	r3, [r7, #32]
 800df66:	3301      	adds	r3, #1
 800df68:	623b      	str	r3, [r7, #32]
 800df6a:	6a3a      	ldr	r2, [r7, #32]
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	429a      	cmp	r2, r3
 800df70:	f4ff af7f 	bcc.w	800de72 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800df74:	e00d      	b.n	800df92 <mg_hexdump+0x13a>
 800df76:	2103      	movs	r1, #3
 800df78:	4813      	ldr	r0, [pc, #76]	@ (800dfc8 <mg_hexdump+0x170>)
 800df7a:	f7ff fecb 	bl	800dd14 <logs>
 800df7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df82:	1c5a      	adds	r2, r3, #1
 800df84:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800df88:	3328      	adds	r3, #40	@ 0x28
 800df8a:	443b      	add	r3, r7
 800df8c:	2220      	movs	r2, #32
 800df8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800df92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df96:	2b0f      	cmp	r3, #15
 800df98:	d9ed      	bls.n	800df76 <mg_hexdump+0x11e>
  logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2);
 800df9a:	2102      	movs	r1, #2
 800df9c:	4808      	ldr	r0, [pc, #32]	@ (800dfc0 <mg_hexdump+0x168>)
 800df9e:	f7ff feb9 	bl	800dd14 <logs>
 800dfa2:	f107 030c 	add.w	r3, r7, #12
 800dfa6:	2110      	movs	r1, #16
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7ff feb3 	bl	800dd14 <logs>
 800dfae:	2102      	movs	r1, #2
 800dfb0:	4804      	ldr	r0, [pc, #16]	@ (800dfc4 <mg_hexdump+0x16c>)
 800dfb2:	f7ff feaf 	bl	800dd14 <logs>
}
 800dfb6:	bf00      	nop
 800dfb8:	3728      	adds	r7, #40	@ 0x28
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	080273b0 	.word	0x080273b0
 800dfc4:	0802680c 	.word	0x0802680c
 800dfc8:	080273b4 	.word	0x080273b4

0800dfcc <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b086      	sub	sp, #24
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	60f8      	str	r0, [r7, #12]
 800dfd4:	60b9      	str	r1, [r7, #8]
 800dfd6:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfdc:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	68ba      	ldr	r2, [r7, #8]
 800dfe8:	4805      	ldr	r0, [pc, #20]	@ (800e000 <mg_vprintf+0x34>)
 800dfea:	f7fb f815 	bl	8009018 <mg_vxprintf>
  return c->send.len - old;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	1ad3      	subs	r3, r2, r3
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3718      	adds	r7, #24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	bd80      	pop	{r7, pc}
 800dffe:	bf00      	nop
 800e000:	08012551 	.word	0x08012551

0800e004 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 800e004:	b40e      	push	{r1, r2, r3}
 800e006:	b580      	push	{r7, lr}
 800e008:	b085      	sub	sp, #20
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800e012:	f107 0320 	add.w	r3, r7, #32
 800e016:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800e018:	f107 0308 	add.w	r3, r7, #8
 800e01c:	461a      	mov	r2, r3
 800e01e:	69f9      	ldr	r1, [r7, #28]
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f7ff ffd3 	bl	800dfcc <mg_vprintf>
 800e026:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800e028:	68fb      	ldr	r3, [r7, #12]
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3714      	adds	r7, #20
 800e02e:	46bd      	mov	sp, r7
 800e030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e034:	b003      	add	sp, #12
 800e036:	4770      	bx	lr

0800e038 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800e038:	b580      	push	{r7, lr}
 800e03a:	b088      	sub	sp, #32
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	f107 0308 	add.w	r3, r7, #8
 800e042:	e883 0003 	stmia.w	r3, {r0, r1}
 800e046:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800e048:	4811      	ldr	r0, [pc, #68]	@ (800e090 <mg_atonl+0x58>)
 800e04a:	f013 f930 	bl	80212ae <mg_ntohl>
 800e04e:	4603      	mov	r3, r0
 800e050:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 800e052:	f107 0318 	add.w	r3, r7, #24
 800e056:	490f      	ldr	r1, [pc, #60]	@ (800e094 <mg_atonl+0x5c>)
 800e058:	4618      	mov	r0, r3
 800e05a:	f007 fe77 	bl	8015d4c <mg_str_s>
 800e05e:	f107 0318 	add.w	r3, r7, #24
 800e062:	cb0c      	ldmia	r3, {r2, r3}
 800e064:	f107 0108 	add.w	r1, r7, #8
 800e068:	c903      	ldmia	r1, {r0, r1}
 800e06a:	f007 ff32 	bl	8015ed2 <mg_strcasecmp>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b00      	cmp	r3, #0
 800e072:	d001      	beq.n	800e078 <mg_atonl+0x40>
 800e074:	2300      	movs	r3, #0
 800e076:	e006      	b.n	800e086 <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	697a      	ldr	r2, [r7, #20]
 800e07c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2200      	movs	r2, #0
 800e082:	74da      	strb	r2, [r3, #19]
  return true;
 800e084:	2301      	movs	r3, #1
}
 800e086:	4618      	mov	r0, r3
 800e088:	3720      	adds	r7, #32
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	7f000001 	.word	0x7f000001
 800e094:	08027458 	.word	0x08027458

0800e098 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	f107 0308 	add.w	r3, r7, #8
 800e0a2:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0a6:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <mg_atone+0x1a>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	e009      	b.n	800e0c6 <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2210      	movs	r2, #16
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f017 fb67 	bl	802578c <memset>
  addr->is_ip6 = false;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	74da      	strb	r2, [r3, #19]
  return true;
 800e0c4:	2301      	movs	r3, #1
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800e0ce:	b480      	push	{r7}
 800e0d0:	b089      	sub	sp, #36	@ 0x24
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	f107 0308 	add.w	r3, r7, #8
 800e0d8:	e883 0003 	stmia.w	r3, {r0, r1}
 800e0dc:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800e0de:	2300      	movs	r3, #0
 800e0e0:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	61fb      	str	r3, [r7, #28]
 800e0ea:	e049      	b.n	800e180 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800e0ec:	68ba      	ldr	r2, [r7, #8]
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	4413      	add	r3, r2
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2b2f      	cmp	r3, #47	@ 0x2f
 800e0f6:	d925      	bls.n	800e144 <mg_aton4+0x76>
 800e0f8:	68ba      	ldr	r2, [r7, #8]
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	2b39      	cmp	r3, #57	@ 0x39
 800e102:	d81f      	bhi.n	800e144 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 800e104:	f107 0210 	add.w	r2, r7, #16
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	4413      	add	r3, r2
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	461a      	mov	r2, r3
 800e110:	4613      	mov	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	4413      	add	r3, r2
 800e116:	005b      	lsls	r3, r3, #1
 800e118:	4619      	mov	r1, r3
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	4413      	add	r3, r2
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	3b30      	subs	r3, #48	@ 0x30
 800e124:	440b      	add	r3, r1
 800e126:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	2bff      	cmp	r3, #255	@ 0xff
 800e12c:	dd01      	ble.n	800e132 <mg_aton4+0x64>
 800e12e:	2300      	movs	r3, #0
 800e130:	e03d      	b.n	800e1ae <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	b2d9      	uxtb	r1, r3
 800e136:	f107 0210 	add.w	r2, r7, #16
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	4413      	add	r3, r2
 800e13e:	460a      	mov	r2, r1
 800e140:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800e142:	e01a      	b.n	800e17a <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 800e144:	68ba      	ldr	r2, [r7, #8]
 800e146:	69fb      	ldr	r3, [r7, #28]
 800e148:	4413      	add	r3, r2
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	2b2e      	cmp	r3, #46	@ 0x2e
 800e14e:	d112      	bne.n	800e176 <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	2b02      	cmp	r3, #2
 800e154:	d809      	bhi.n	800e16a <mg_aton4+0x9c>
 800e156:	69fb      	ldr	r3, [r7, #28]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d006      	beq.n	800e16a <mg_aton4+0x9c>
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	3b01      	subs	r3, #1
 800e162:	4413      	add	r3, r2
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	2b2e      	cmp	r3, #46	@ 0x2e
 800e168:	d101      	bne.n	800e16e <mg_aton4+0xa0>
 800e16a:	2300      	movs	r3, #0
 800e16c:	e01f      	b.n	800e1ae <mg_aton4+0xe0>
      num_dots++;
 800e16e:	69bb      	ldr	r3, [r7, #24]
 800e170:	3301      	adds	r3, #1
 800e172:	61bb      	str	r3, [r7, #24]
 800e174:	e001      	b.n	800e17a <mg_aton4+0xac>
    } else {
      return false;
 800e176:	2300      	movs	r3, #0
 800e178:	e019      	b.n	800e1ae <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800e17a:	69fb      	ldr	r3, [r7, #28]
 800e17c:	3301      	adds	r3, #1
 800e17e:	61fb      	str	r3, [r7, #28]
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	69fa      	ldr	r2, [r7, #28]
 800e184:	429a      	cmp	r2, r3
 800e186:	d3b1      	bcc.n	800e0ec <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	2b03      	cmp	r3, #3
 800e18c:	d106      	bne.n	800e19c <mg_aton4+0xce>
 800e18e:	68ba      	ldr	r2, [r7, #8]
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	3b01      	subs	r3, #1
 800e194:	4413      	add	r3, r2
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2b2e      	cmp	r3, #46	@ 0x2e
 800e19a:	d101      	bne.n	800e1a0 <mg_aton4+0xd2>
 800e19c:	2300      	movs	r3, #0
 800e19e:	e006      	b.n	800e1ae <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	693a      	ldr	r2, [r7, #16]
 800e1a4:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	74da      	strb	r2, [r3, #19]
  return true;
 800e1ac:	2301      	movs	r3, #1
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3724      	adds	r7, #36	@ 0x24
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b8:	4770      	bx	lr

0800e1ba <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b088      	sub	sp, #32
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	f107 0308 	add.w	r3, r7, #8
 800e1c4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e1c8:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2b0d      	cmp	r3, #13
 800e1ce:	d801      	bhi.n	800e1d4 <mg_v4mapped+0x1a>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e056      	b.n	800e282 <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	2b3a      	cmp	r3, #58	@ 0x3a
 800e1da:	d109      	bne.n	800e1f0 <mg_v4mapped+0x36>
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	3301      	adds	r3, #1
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b3a      	cmp	r3, #58	@ 0x3a
 800e1e4:	d104      	bne.n	800e1f0 <mg_v4mapped+0x36>
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	3306      	adds	r3, #6
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	2b3a      	cmp	r3, #58	@ 0x3a
 800e1ee:	d001      	beq.n	800e1f4 <mg_v4mapped+0x3a>
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	e046      	b.n	800e282 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800e1f4:	2302      	movs	r3, #2
 800e1f6:	61fb      	str	r3, [r7, #28]
 800e1f8:	e010      	b.n	800e21c <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800e1fa:	68ba      	ldr	r2, [r7, #8]
 800e1fc:	69fb      	ldr	r3, [r7, #28]
 800e1fe:	4413      	add	r3, r2
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	2b66      	cmp	r3, #102	@ 0x66
 800e204:	d007      	beq.n	800e216 <mg_v4mapped+0x5c>
 800e206:	68ba      	ldr	r2, [r7, #8]
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	4413      	add	r3, r2
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	2b46      	cmp	r3, #70	@ 0x46
 800e210:	d001      	beq.n	800e216 <mg_v4mapped+0x5c>
 800e212:	2300      	movs	r3, #0
 800e214:	e035      	b.n	800e282 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800e216:	69fb      	ldr	r3, [r7, #28]
 800e218:	3301      	adds	r3, #1
 800e21a:	61fb      	str	r3, [r7, #28]
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	2b05      	cmp	r3, #5
 800e220:	ddeb      	ble.n	800e1fa <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	1dd9      	adds	r1, r3, #7
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	1fda      	subs	r2, r3, #7
 800e22a:	f107 0314 	add.w	r3, r7, #20
 800e22e:	4618      	mov	r0, r3
 800e230:	f007 fda9 	bl	8015d86 <mg_str_n>
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	f107 0314 	add.w	r3, r7, #20
 800e23a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e23e:	f7ff ff46 	bl	800e0ce <mg_aton4>
 800e242:	4603      	mov	r3, r0
 800e244:	f083 0301 	eor.w	r3, r3, #1
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <mg_v4mapped+0x98>
 800e24e:	2300      	movs	r3, #0
 800e250:	e017      	b.n	800e282 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2210      	movs	r2, #16
 800e25c:	2100      	movs	r1, #0
 800e25e:	4618      	mov	r0, r3
 800e260:	f017 fa94 	bl	802578c <memset>
  addr->ip[10] = addr->ip[11] = 255;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	22ff      	movs	r2, #255	@ 0xff
 800e268:	72da      	strb	r2, [r3, #11]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	7ada      	ldrb	r2, [r3, #11]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	330c      	adds	r3, #12
 800e276:	693a      	ldr	r2, [r7, #16]
 800e278:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2201      	movs	r2, #1
 800e27e:	74da      	strb	r2, [r3, #19]
  return true;
 800e280:	2301      	movs	r3, #1
}
 800e282:	4618      	mov	r0, r3
 800e284:	3720      	adds	r7, #32
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b090      	sub	sp, #64	@ 0x40
 800e28e:	af02      	add	r7, sp, #8
 800e290:	f107 0308 	add.w	r3, r7, #8
 800e294:	e883 0003 	stmia.w	r3, {r0, r1}
 800e298:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800e29a:	2300      	movs	r3, #0
 800e29c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e29e:	2300      	movs	r3, #0
 800e2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e2a2:	232a      	movs	r3, #42	@ 0x2a
 800e2a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	d909      	bls.n	800e2c6 <mg_aton6+0x3c>
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	2b5b      	cmp	r3, #91	@ 0x5b
 800e2b8:	d105      	bne.n	800e2c6 <mg_aton6+0x3c>
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	3301      	adds	r3, #1
 800e2be:	60bb      	str	r3, [r7, #8]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	3b02      	subs	r3, #2
 800e2c4:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	f107 0308 	add.w	r3, r7, #8
 800e2cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e2d0:	f7ff ff73 	bl	800e1ba <mg_v4mapped>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d001      	beq.n	800e2de <mg_aton6+0x54>
 800e2da:	2301      	movs	r3, #1
 800e2dc:	e0e1      	b.n	800e4a2 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800e2de:	2300      	movs	r3, #0
 800e2e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2e2:	e0b0      	b.n	800e446 <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800e2e4:	68ba      	ldr	r2, [r7, #8]
 800e2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2e8:	4413      	add	r3, r2
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	2b2f      	cmp	r3, #47	@ 0x2f
 800e2ee:	d905      	bls.n	800e2fc <mg_aton6+0x72>
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2f4:	4413      	add	r3, r2
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	2b39      	cmp	r3, #57	@ 0x39
 800e2fa:	d917      	bls.n	800e32c <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800e2fc:	68ba      	ldr	r2, [r7, #8]
 800e2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e300:	4413      	add	r3, r2
 800e302:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800e304:	2b60      	cmp	r3, #96	@ 0x60
 800e306:	d905      	bls.n	800e314 <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800e308:	68ba      	ldr	r2, [r7, #8]
 800e30a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e30c:	4413      	add	r3, r2
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	2b66      	cmp	r3, #102	@ 0x66
 800e312:	d90b      	bls.n	800e32c <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800e314:	68ba      	ldr	r2, [r7, #8]
 800e316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e318:	4413      	add	r3, r2
 800e31a:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800e31c:	2b40      	cmp	r3, #64	@ 0x40
 800e31e:	d933      	bls.n	800e388 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800e320:	68ba      	ldr	r2, [r7, #8]
 800e322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e324:	4413      	add	r3, r2
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	2b46      	cmp	r3, #70	@ 0x46
 800e32a:	d82d      	bhi.n	800e388 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 800e32c:	2300      	movs	r3, #0
 800e32e:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 800e330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e332:	3303      	adds	r3, #3
 800e334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e336:	429a      	cmp	r2, r3
 800e338:	d901      	bls.n	800e33e <mg_aton6+0xb4>
 800e33a:	2300      	movs	r3, #0
 800e33c:	e0b1      	b.n	800e4a2 <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 800e33e:	68ba      	ldr	r2, [r7, #8]
 800e340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e342:	18d1      	adds	r1, r2, r3
 800e344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	1c5a      	adds	r2, r3, #1
 800e34c:	f107 0318 	add.w	r3, r7, #24
 800e350:	4618      	mov	r0, r3
 800e352:	f007 fd18 	bl	8015d86 <mg_str_n>
 800e356:	f107 0314 	add.w	r3, r7, #20
 800e35a:	2204      	movs	r2, #4
 800e35c:	9200      	str	r2, [sp, #0]
 800e35e:	2210      	movs	r2, #16
 800e360:	f107 0118 	add.w	r1, r7, #24
 800e364:	c903      	ldmia	r1, {r0, r1}
 800e366:	f007 ff4c 	bl	8016202 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	0a1b      	lsrs	r3, r3, #8
 800e36e:	b2d9      	uxtb	r1, r3
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e374:	4413      	add	r3, r2
 800e376:	460a      	mov	r2, r1
 800e378:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800e37a:	697a      	ldr	r2, [r7, #20]
 800e37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37e:	3301      	adds	r3, #1
 800e380:	b2d1      	uxtb	r1, r2
 800e382:	687a      	ldr	r2, [r7, #4]
 800e384:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800e386:	e05b      	b.n	800e440 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e38c:	4413      	add	r3, r2
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	2b3a      	cmp	r3, #58	@ 0x3a
 800e392:	d134      	bne.n	800e3fe <mg_aton6+0x174>
      j = i + 1;
 800e394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e396:	3301      	adds	r3, #1
 800e398:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 800e39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d014      	beq.n	800e3ca <mg_aton6+0x140>
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	4413      	add	r3, r2
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	2b3a      	cmp	r3, #58	@ 0x3a
 800e3ac:	d10d      	bne.n	800e3ca <mg_aton6+0x140>
        dc = n;  // Double colon
 800e3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800e3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d90f      	bls.n	800e3d8 <mg_aton6+0x14e>
 800e3b8:	68ba      	ldr	r2, [r7, #8]
 800e3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3bc:	3b02      	subs	r3, #2
 800e3be:	4413      	add	r3, r2
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	2b3a      	cmp	r3, #58	@ 0x3a
 800e3c4:	d108      	bne.n	800e3d8 <mg_aton6+0x14e>
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	e06b      	b.n	800e4a2 <mg_aton6+0x218>
      } else if (i > 0) {
 800e3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d004      	beq.n	800e3da <mg_aton6+0x150>
        n += 2;
 800e3d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d2:	3302      	adds	r3, #2
 800e3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3d6:	e000      	b.n	800e3da <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800e3d8:	bf00      	nop
      }
      if (n > 14) return false;
 800e3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3dc:	2b0e      	cmp	r3, #14
 800e3de:	d901      	bls.n	800e3e4 <mg_aton6+0x15a>
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	e05e      	b.n	800e4a2 <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 800e3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	687a      	ldr	r2, [r7, #4]
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	54d1      	strb	r1, [r2, r3]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	5cd1      	ldrb	r1, [r2, r3]
 800e3f2:	687a      	ldr	r2, [r7, #4]
 800e3f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3f6:	4413      	add	r3, r2
 800e3f8:	460a      	mov	r2, r1
 800e3fa:	701a      	strb	r2, [r3, #0]
 800e3fc:	e020      	b.n	800e440 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e402:	4413      	add	r3, r2
 800e404:	781b      	ldrb	r3, [r3, #0]
 800e406:	2b25      	cmp	r3, #37	@ 0x25
 800e408:	d118      	bne.n	800e43c <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e40e:	3301      	adds	r3, #1
 800e410:	18d1      	adds	r1, r2, r3
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e416:	1ad3      	subs	r3, r2, r3
 800e418:	1e5a      	subs	r2, r3, #1
 800e41a:	f107 0320 	add.w	r3, r7, #32
 800e41e:	4618      	mov	r0, r3
 800e420:	f007 fcb1 	bl	8015d86 <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800e428:	2201      	movs	r2, #1
 800e42a:	9200      	str	r2, [sp, #0]
 800e42c:	220a      	movs	r2, #10
 800e42e:	f107 0120 	add.w	r1, r7, #32
 800e432:	c903      	ldmia	r1, {r0, r1}
 800e434:	f007 fee5 	bl	8016202 <mg_str_to_num>
 800e438:	4603      	mov	r3, r0
 800e43a:	e032      	b.n	800e4a2 <mg_aton6+0x218>
    } else {
      return false;
 800e43c:	2300      	movs	r3, #0
 800e43e:	e030      	b.n	800e4a2 <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800e440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e442:	3301      	adds	r3, #1
 800e444:	637b      	str	r3, [r7, #52]	@ 0x34
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e44a:	429a      	cmp	r2, r3
 800e44c:	f4ff af4a 	bcc.w	800e2e4 <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 800e450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e452:	2b0d      	cmp	r3, #13
 800e454:	d804      	bhi.n	800e460 <mg_aton6+0x1d6>
 800e456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e458:	2b2a      	cmp	r3, #42	@ 0x2a
 800e45a:	d101      	bne.n	800e460 <mg_aton6+0x1d6>
 800e45c:	2300      	movs	r3, #0
 800e45e:	e020      	b.n	800e4a2 <mg_aton6+0x218>
  if (n < 14) {
 800e460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e462:	2b0d      	cmp	r3, #13
 800e464:	d819      	bhi.n	800e49a <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800e466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e46a:	1ad3      	subs	r3, r2, r3
 800e46c:	330e      	adds	r3, #14
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	18d0      	adds	r0, r2, r3
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e476:	18d1      	adds	r1, r2, r3
 800e478:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	3302      	adds	r3, #2
 800e480:	461a      	mov	r2, r3
 800e482:	f017 f969 	bl	8025758 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e48a:	18d0      	adds	r0, r2, r3
 800e48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e48e:	f1c3 030e 	rsb	r3, r3, #14
 800e492:	461a      	mov	r2, r3
 800e494:	2100      	movs	r1, #0
 800e496:	f017 f979 	bl	802578c <memset>
  }

  addr->is_ip6 = true;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2201      	movs	r2, #1
 800e49e:	74da      	strb	r2, [r3, #19]
  return true;
 800e4a0:	2301      	movs	r3, #1
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3738      	adds	r7, #56	@ 0x38
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b084      	sub	sp, #16
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	f107 0308 	add.w	r3, r7, #8
 800e4b4:	e883 0003 	stmia.w	r3, {r0, r1}
 800e4b8:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	f107 0308 	add.w	r3, r7, #8
 800e4c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4c4:	f7ff fde8 	bl	800e098 <mg_atone>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d11d      	bne.n	800e50a <mg_aton+0x60>
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	f107 0308 	add.w	r3, r7, #8
 800e4d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4d8:	f7ff fdae 	bl	800e038 <mg_atonl>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d113      	bne.n	800e50a <mg_aton+0x60>
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	f107 0308 	add.w	r3, r7, #8
 800e4e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e4ec:	f7ff fdef 	bl	800e0ce <mg_aton4>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d109      	bne.n	800e50a <mg_aton+0x60>
         mg_aton6(str, addr);
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	f107 0308 	add.w	r3, r7, #8
 800e4fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e500:	f7ff fec3 	bl	800e28a <mg_aton6>
 800e504:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <mg_aton+0x64>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e000      	b.n	800e510 <mg_aton+0x66>
 800e50e:	2300      	movs	r3, #0
 800e510:	f003 0301 	and.w	r3, r3, #1
 800e514:	b2db      	uxtb	r3, r3
}
 800e516:	4618      	mov	r0, r3
 800e518:	3710      	adds	r7, #16
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800e51e:	b580      	push	{r7, lr}
 800e520:	b084      	sub	sp, #16
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e52a:	33b0      	adds	r3, #176	@ 0xb0
 800e52c:	4619      	mov	r1, r3
 800e52e:	2001      	movs	r0, #1
 800e530:	f016 fd52 	bl	8024fd8 <calloc>
 800e534:	4603      	mov	r3, r0
 800e536:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d017      	beq.n	800e56e <mg_alloc_conn+0x50>
    c->mgr = mgr;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e54a:	675a      	str	r2, [r3, #116]	@ 0x74
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	645a      	str	r2, [r3, #68]	@ 0x44
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	69db      	ldr	r3, [r3, #28]
 800e560:	1c5a      	adds	r2, r3, #1
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	61da      	str	r2, [r3, #28]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	69da      	ldr	r2, [r3, #28]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 800e56e:	68fb      	ldr	r3, [r7, #12]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 800e578:	b580      	push	{r7, lr}
 800e57a:	b084      	sub	sp, #16
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f7f9 f8d0 	bl	8007726 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	60fb      	str	r3, [r7, #12]
 800e58c:	e002      	b.n	800e594 <mg_close_conn+0x1c>
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	60fb      	str	r3, [r7, #12]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d1f7      	bne.n	800e58e <mg_close_conn+0x16>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	685b      	ldr	r3, [r3, #4]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	429a      	cmp	r2, r3
 800e5b0:	d103      	bne.n	800e5ba <mg_close_conn+0x42>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	685b      	ldr	r3, [r3, #4]
 800e5be:	691b      	ldr	r3, [r3, #16]
 800e5c0:	687a      	ldr	r2, [r7, #4]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d103      	bne.n	800e5ce <mg_close_conn+0x56>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	685b      	ldr	r3, [r3, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	2109      	movs	r1, #9
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7f9 fe6e 	bl	80082b4 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 800e5d8:	4b17      	ldr	r3, [pc, #92]	@ (800e638 <mg_close_conn+0xc0>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	2b02      	cmp	r3, #2
 800e5de:	dd0e      	ble.n	800e5fe <mg_close_conn+0x86>
 800e5e0:	4b16      	ldr	r3, [pc, #88]	@ (800e63c <mg_close_conn+0xc4>)
 800e5e2:	f640 72bb 	movw	r2, #4027	@ 0xfbb
 800e5e6:	4916      	ldr	r1, [pc, #88]	@ (800e640 <mg_close_conn+0xc8>)
 800e5e8:	2003      	movs	r0, #3
 800e5ea:	f7ff fbaf 	bl	800dd4c <mg_log_prefix>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	4812      	ldr	r0, [pc, #72]	@ (800e644 <mg_close_conn+0xcc>)
 800e5fa:	f7ff fbf7 	bl	800ddec <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f00c f8c0 	bl	801a784 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	3338      	adds	r3, #56	@ 0x38
 800e608:	4618      	mov	r0, r3
 800e60a:	f7fe fd1e 	bl	800d04a <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	3348      	adds	r3, #72	@ 0x48
 800e612:	4618      	mov	r0, r3
 800e614:	f7fe fd19 	bl	800d04a <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	3368      	adds	r3, #104	@ 0x68
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fe fd14 	bl	800d04a <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 800e622:	21b0      	movs	r1, #176	@ 0xb0
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f012 fd4b 	bl	80210c0 <mg_bzero>
  free(c);
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f016 fcf8 	bl	8025020 <free>
}
 800e630:	bf00      	nop
 800e632:	3710      	adds	r7, #16
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}
 800e638:	24000258 	.word	0x24000258
 800e63c:	0802a0e8 	.word	0x0802a0e8
 800e640:	080264c4 	.word	0x080264c4
 800e644:	08027464 	.word	0x08027464

0800e648 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	60b9      	str	r1, [r7, #8]
 800e652:	607a      	str	r2, [r7, #4]
 800e654:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800e656:	2300      	movs	r3, #0
 800e658:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d003      	beq.n	800e668 <mg_connect+0x20>
 800e660:	68bb      	ldr	r3, [r7, #8]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d10e      	bne.n	800e686 <mg_connect+0x3e>
    MG_ERROR(("null url"));
 800e668:	4b3f      	ldr	r3, [pc, #252]	@ (800e768 <mg_connect+0x120>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	dd76      	ble.n	800e75e <mg_connect+0x116>
 800e670:	4b3e      	ldr	r3, [pc, #248]	@ (800e76c <mg_connect+0x124>)
 800e672:	f640 72cb 	movw	r2, #4043	@ 0xfcb
 800e676:	493e      	ldr	r1, [pc, #248]	@ (800e770 <mg_connect+0x128>)
 800e678:	2001      	movs	r0, #1
 800e67a:	f7ff fb67 	bl	800dd4c <mg_log_prefix>
 800e67e:	483d      	ldr	r0, [pc, #244]	@ (800e774 <mg_connect+0x12c>)
 800e680:	f7ff fbb4 	bl	800ddec <mg_log>
 800e684:	e06b      	b.n	800e75e <mg_connect+0x116>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f7ff ff49 	bl	800e51e <mg_alloc_conn>
 800e68c:	6178      	str	r0, [r7, #20]
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d10e      	bne.n	800e6b2 <mg_connect+0x6a>
    MG_ERROR(("OOM"));
 800e694:	4b34      	ldr	r3, [pc, #208]	@ (800e768 <mg_connect+0x120>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	dd60      	ble.n	800e75e <mg_connect+0x116>
 800e69c:	4b33      	ldr	r3, [pc, #204]	@ (800e76c <mg_connect+0x124>)
 800e69e:	f640 72cd 	movw	r2, #4045	@ 0xfcd
 800e6a2:	4933      	ldr	r1, [pc, #204]	@ (800e770 <mg_connect+0x128>)
 800e6a4:	2001      	movs	r0, #1
 800e6a6:	f7ff fb51 	bl	800dd4c <mg_log_prefix>
 800e6aa:	4833      	ldr	r0, [pc, #204]	@ (800e778 <mg_connect+0x130>)
 800e6ac:	f7ff fb9e 	bl	800ddec <mg_log>
 800e6b0:	e055      	b.n	800e75e <mg_connect+0x116>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	601a      	str	r2, [r3, #0]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	697a      	ldr	r2, [r7, #20]
 800e6be:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 800e6c0:	2204      	movs	r2, #4
 800e6c2:	492e      	ldr	r1, [pc, #184]	@ (800e77c <mg_connect+0x134>)
 800e6c4:	68b8      	ldr	r0, [r7, #8]
 800e6c6:	f017 f876 	bl	80257b6 <strncmp>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	bf0c      	ite	eq
 800e6d0:	2301      	moveq	r3, #1
 800e6d2:	2300      	movne	r3, #0
 800e6d4:	b2d9      	uxtb	r1, r3
 800e6d6:	697a      	ldr	r2, [r7, #20]
 800e6d8:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800e6dc:	f361 0300 	bfi	r3, r1, #0, #1
 800e6e0:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ea:	631a      	str	r2, [r3, #48]	@ 0x30
    c->fn = fn;
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	687a      	ldr	r2, [r7, #4]
 800e6f0:	679a      	str	r2, [r3, #120]	@ 0x78
    c->is_client = true;
 800e6f2:	697a      	ldr	r2, [r7, #20]
 800e6f4:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e6f8:	f043 0302 	orr.w	r3, r3, #2
 800e6fc:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->fn_data = fn_data;
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	683a      	ldr	r2, [r7, #0]
 800e704:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800e706:	68b8      	ldr	r0, [r7, #8]
 800e708:	f012 fb7a 	bl	8020e00 <mg_url_is_ssl>
 800e70c:	4603      	mov	r3, r0
 800e70e:	2b00      	cmp	r3, #0
 800e710:	bf14      	ite	ne
 800e712:	2301      	movne	r3, #1
 800e714:	2300      	moveq	r3, #0
 800e716:	b2d9      	uxtb	r1, r3
 800e718:	697a      	ldr	r2, [r7, #20]
 800e71a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e71e:	f361 1386 	bfi	r3, r1, #6, #1
 800e722:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, (void *) url);
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	2101      	movs	r1, #1
 800e72a:	6978      	ldr	r0, [r7, #20]
 800e72c:	f7f9 fdc2 	bl	80082b4 <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800e730:	4b0d      	ldr	r3, [pc, #52]	@ (800e768 <mg_connect+0x120>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b02      	cmp	r3, #2
 800e736:	dd0e      	ble.n	800e756 <mg_connect+0x10e>
 800e738:	4b0c      	ldr	r3, [pc, #48]	@ (800e76c <mg_connect+0x124>)
 800e73a:	f640 72d7 	movw	r2, #4055	@ 0xfd7
 800e73e:	490c      	ldr	r1, [pc, #48]	@ (800e770 <mg_connect+0x128>)
 800e740:	2003      	movs	r0, #3
 800e742:	f7ff fb03 	bl	800dd4c <mg_log_prefix>
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	480b      	ldr	r0, [pc, #44]	@ (800e780 <mg_connect+0x138>)
 800e752:	f7ff fb4b 	bl	800ddec <mg_log>
    mg_resolve(c, url);
 800e756:	68b9      	ldr	r1, [r7, #8]
 800e758:	6978      	ldr	r0, [r7, #20]
 800e75a:	f7f9 fd67 	bl	800822c <mg_resolve>
  }
  return c;
 800e75e:	697b      	ldr	r3, [r7, #20]
}
 800e760:	4618      	mov	r0, r3
 800e762:	3718      	adds	r7, #24
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	24000258 	.word	0x24000258
 800e76c:	0802a0f8 	.word	0x0802a0f8
 800e770:	080264c4 	.word	0x080264c4
 800e774:	08027474 	.word	0x08027474
 800e778:	08027480 	.word	0x08027480
 800e77c:	08027484 	.word	0x08027484
 800e780:	08026674 	.word	0x08026674

0800e784 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 800e784:	b580      	push	{r7, lr}
 800e786:	b086      	sub	sp, #24
 800e788:	af00      	add	r7, sp, #0
 800e78a:	60f8      	str	r0, [r7, #12]
 800e78c:	60b9      	str	r1, [r7, #8]
 800e78e:	607a      	str	r2, [r7, #4]
 800e790:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800e792:	2300      	movs	r3, #0
 800e794:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	f7ff fec1 	bl	800e51e <mg_alloc_conn>
 800e79c:	6178      	str	r0, [r7, #20]
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10f      	bne.n	800e7c4 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 800e7a4:	4b43      	ldr	r3, [pc, #268]	@ (800e8b4 <mg_listen+0x130>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	dd7d      	ble.n	800e8a8 <mg_listen+0x124>
 800e7ac:	4b42      	ldr	r3, [pc, #264]	@ (800e8b8 <mg_listen+0x134>)
 800e7ae:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800e7b2:	4942      	ldr	r1, [pc, #264]	@ (800e8bc <mg_listen+0x138>)
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	f7ff fac9 	bl	800dd4c <mg_log_prefix>
 800e7ba:	68b9      	ldr	r1, [r7, #8]
 800e7bc:	4840      	ldr	r0, [pc, #256]	@ (800e8c0 <mg_listen+0x13c>)
 800e7be:	f7ff fb15 	bl	800ddec <mg_log>
 800e7c2:	e071      	b.n	800e8a8 <mg_listen+0x124>
  } else if (!mg_open_listener(c, url)) {
 800e7c4:	68b9      	ldr	r1, [r7, #8]
 800e7c6:	6978      	ldr	r0, [r7, #20]
 800e7c8:	f003 fb04 	bl	8011dd4 <mg_open_listener>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	f083 0301 	eor.w	r3, r3, #1
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d019      	beq.n	800e80c <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800e7d8:	4b36      	ldr	r3, [pc, #216]	@ (800e8b4 <mg_listen+0x130>)
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	dd0f      	ble.n	800e800 <mg_listen+0x7c>
 800e7e0:	4b35      	ldr	r3, [pc, #212]	@ (800e8b8 <mg_listen+0x134>)
 800e7e2:	f640 72e3 	movw	r2, #4067	@ 0xfe3
 800e7e6:	4935      	ldr	r1, [pc, #212]	@ (800e8bc <mg_listen+0x138>)
 800e7e8:	2001      	movs	r0, #1
 800e7ea:	f7ff faaf 	bl	800dd4c <mg_log_prefix>
 800e7ee:	f017 f8cd 	bl	802598c <__errno>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	68b9      	ldr	r1, [r7, #8]
 800e7fa:	4832      	ldr	r0, [pc, #200]	@ (800e8c4 <mg_listen+0x140>)
 800e7fc:	f7ff faf6 	bl	800ddec <mg_log>
    MG_PROF_FREE(c);
    free(c);
 800e800:	6978      	ldr	r0, [r7, #20]
 800e802:	f016 fc0d 	bl	8025020 <free>
    c = NULL;
 800e806:	2300      	movs	r3, #0
 800e808:	617b      	str	r3, [r7, #20]
 800e80a:	e04d      	b.n	800e8a8 <mg_listen+0x124>
  } else {
    c->is_listening = 1;
 800e80c:	697a      	ldr	r2, [r7, #20]
 800e80e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e812:	f043 0301 	orr.w	r3, r3, #1
 800e816:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800e81a:	2204      	movs	r2, #4
 800e81c:	492a      	ldr	r1, [pc, #168]	@ (800e8c8 <mg_listen+0x144>)
 800e81e:	68b8      	ldr	r0, [r7, #8]
 800e820:	f016 ffc9 	bl	80257b6 <strncmp>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	bf0c      	ite	eq
 800e82a:	2301      	moveq	r3, #1
 800e82c:	2300      	movne	r3, #0
 800e82e:	b2d9      	uxtb	r1, r3
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800e836:	f361 0300 	bfi	r3, r1, #0, #1
 800e83a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	601a      	str	r2, [r3, #0]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	697a      	ldr	r2, [r7, #20]
 800e84a:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	683a      	ldr	r2, [r7, #0]
 800e856:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800e858:	68b8      	ldr	r0, [r7, #8]
 800e85a:	f012 fad1 	bl	8020e00 <mg_url_is_ssl>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	bf14      	ite	ne
 800e864:	2301      	movne	r3, #1
 800e866:	2300      	moveq	r3, #0
 800e868:	b2d9      	uxtb	r1, r3
 800e86a:	697a      	ldr	r2, [r7, #20]
 800e86c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e870:	f361 1386 	bfi	r3, r1, #6, #1
 800e874:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, NULL);
 800e878:	2200      	movs	r2, #0
 800e87a:	2101      	movs	r1, #1
 800e87c:	6978      	ldr	r0, [r7, #20]
 800e87e:	f7f9 fd19 	bl	80082b4 <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800e882:	4b0c      	ldr	r3, [pc, #48]	@ (800e8b4 <mg_listen+0x130>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	2b02      	cmp	r3, #2
 800e888:	dd0e      	ble.n	800e8a8 <mg_listen+0x124>
 800e88a:	4b0b      	ldr	r3, [pc, #44]	@ (800e8b8 <mg_listen+0x134>)
 800e88c:	f640 72ef 	movw	r2, #4079	@ 0xfef
 800e890:	490a      	ldr	r1, [pc, #40]	@ (800e8bc <mg_listen+0x138>)
 800e892:	2003      	movs	r0, #3
 800e894:	f7ff fa5a 	bl	800dd4c <mg_log_prefix>
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	480a      	ldr	r0, [pc, #40]	@ (800e8cc <mg_listen+0x148>)
 800e8a4:	f7ff faa2 	bl	800ddec <mg_log>
  }
  return c;
 800e8a8:	697b      	ldr	r3, [r7, #20]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3718      	adds	r7, #24
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	24000258 	.word	0x24000258
 800e8b8:	0802a104 	.word	0x0802a104
 800e8bc:	080264c4 	.word	0x080264c4
 800e8c0:	0802748c 	.word	0x0802748c
 800e8c4:	08027494 	.word	0x08027494
 800e8c8:	08027484 	.word	0x08027484
 800e8cc:	08026674 	.word	0x08026674

0800e8d0 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b08a      	sub	sp, #40	@ 0x28
 800e8d4:	af04      	add	r7, sp, #16
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 800e8dc:	2120      	movs	r1, #32
 800e8de:	2001      	movs	r0, #1
 800e8e0:	f016 fb7a 	bl	8024fd8 <calloc>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d011      	beq.n	800e912 <mg_timer_add+0x42>
    flags |= MG_TIMER_AUTODELETE;  // We have calloc-ed it, so autodelete
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	f043 0308 	orr.w	r3, r3, #8
 800e8f4:	623b      	str	r3, [r7, #32]
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800e8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8fe:	9302      	str	r3, [sp, #8]
 800e900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e902:	9301      	str	r3, [sp, #4]
 800e904:	6a3b      	ldr	r3, [r7, #32]
 800e906:	9300      	str	r3, [sp, #0]
 800e908:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e90c:	6979      	ldr	r1, [r7, #20]
 800e90e:	f007 feab 	bl	8016668 <mg_timer_init>
  }
  return t;
 800e912:	697b      	ldr	r3, [r7, #20]
}
 800e914:	4618      	mov	r0, r3
 800e916:	3718      	adds	r7, #24
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <mg_mgr_init>:
#if MG_ENABLE_TCPIP
  if (mgr->ifp) mg_tcpip_free(mgr->ifp);
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 800e924:	2244      	movs	r2, #68	@ 0x44
 800e926:	2100      	movs	r1, #0
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f016 ff2f 	bl	802578c <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f04f 32ff 	mov.w	r2, #4294967295
 800e934:	635a      	str	r2, [r3, #52]	@ 0x34
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 800e936:	4b34      	ldr	r3, [pc, #208]	@ (800ea08 <mg_mgr_init+0xec>)
 800e938:	2204      	movs	r2, #4
 800e93a:	601a      	str	r2, [r3, #0]
 800e93c:	4b32      	ldr	r3, [pc, #200]	@ (800ea08 <mg_mgr_init+0xec>)
 800e93e:	2200      	movs	r2, #0
 800e940:	711a      	strb	r2, [r3, #4]
 800e942:	4b31      	ldr	r3, [pc, #196]	@ (800ea08 <mg_mgr_init+0xec>)
 800e944:	2202      	movs	r2, #2
 800e946:	715a      	strb	r2, [r3, #5]
 800e948:	4830      	ldr	r0, [pc, #192]	@ (800ea0c <mg_mgr_init+0xf0>)
 800e94a:	f012 fcb0 	bl	80212ae <mg_ntohl>
 800e94e:	4603      	mov	r3, r0
 800e950:	4a2f      	ldr	r2, [pc, #188]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e952:	6093      	str	r3, [r2, #8]
 800e954:	482f      	ldr	r0, [pc, #188]	@ (800ea14 <mg_mgr_init+0xf8>)
 800e956:	f012 fcaa 	bl	80212ae <mg_ntohl>
 800e95a:	4603      	mov	r3, r0
 800e95c:	4a2c      	ldr	r2, [pc, #176]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e95e:	60d3      	str	r3, [r2, #12]
 800e960:	482a      	ldr	r0, [pc, #168]	@ (800ea0c <mg_mgr_init+0xf0>)
 800e962:	f012 fca4 	bl	80212ae <mg_ntohl>
 800e966:	4603      	mov	r3, r0
 800e968:	4a29      	ldr	r2, [pc, #164]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e96a:	6113      	str	r3, [r2, #16]
 800e96c:	4b28      	ldr	r3, [pc, #160]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e96e:	4a2a      	ldr	r2, [pc, #168]	@ (800ea18 <mg_mgr_init+0xfc>)
 800e970:	625a      	str	r2, [r3, #36]	@ 0x24
 800e972:	4b27      	ldr	r3, [pc, #156]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e974:	4a24      	ldr	r2, [pc, #144]	@ (800ea08 <mg_mgr_init+0xec>)
 800e976:	629a      	str	r2, [r3, #40]	@ 0x28
 800e978:	4b25      	ldr	r3, [pc, #148]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e97a:	2202      	movs	r2, #2
 800e97c:	701a      	strb	r2, [r3, #0]
 800e97e:	4b27      	ldr	r3, [pc, #156]	@ (800ea1c <mg_mgr_init+0x100>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	b2da      	uxtb	r2, r3
 800e984:	4b22      	ldr	r3, [pc, #136]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e986:	705a      	strb	r2, [r3, #1]
 800e988:	4b24      	ldr	r3, [pc, #144]	@ (800ea1c <mg_mgr_init+0x100>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	0a9b      	lsrs	r3, r3, #10
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	4b1f      	ldr	r3, [pc, #124]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e992:	709a      	strb	r2, [r3, #2]
 800e994:	4b21      	ldr	r3, [pc, #132]	@ (800ea1c <mg_mgr_init+0x100>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	0cdb      	lsrs	r3, r3, #19
 800e99a:	b2da      	uxtb	r2, r3
 800e99c:	4b1c      	ldr	r3, [pc, #112]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e99e:	70da      	strb	r2, [r3, #3]
 800e9a0:	4b1f      	ldr	r3, [pc, #124]	@ (800ea20 <mg_mgr_init+0x104>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	4b1a      	ldr	r3, [pc, #104]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e9a8:	711a      	strb	r2, [r3, #4]
 800e9aa:	4b1e      	ldr	r3, [pc, #120]	@ (800ea24 <mg_mgr_init+0x108>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	4b17      	ldr	r3, [pc, #92]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e9b2:	715a      	strb	r2, [r3, #5]
 800e9b4:	4916      	ldr	r1, [pc, #88]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f002 ffb2 	bl	8011920 <mg_tcpip_init>
 800e9bc:	4b1a      	ldr	r3, [pc, #104]	@ (800ea28 <mg_mgr_init+0x10c>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	dd0b      	ble.n	800e9dc <mg_mgr_init+0xc0>
 800e9c4:	4b19      	ldr	r3, [pc, #100]	@ (800ea2c <mg_mgr_init+0x110>)
 800e9c6:	f241 023b 	movw	r2, #4155	@ 0x103b
 800e9ca:	4919      	ldr	r1, [pc, #100]	@ (800ea30 <mg_mgr_init+0x114>)
 800e9cc:	2002      	movs	r0, #2
 800e9ce:	f7ff f9bd 	bl	800dd4c <mg_log_prefix>
 800e9d2:	4a0f      	ldr	r2, [pc, #60]	@ (800ea10 <mg_mgr_init+0xf4>)
 800e9d4:	4917      	ldr	r1, [pc, #92]	@ (800ea34 <mg_mgr_init+0x118>)
 800e9d6:	4818      	ldr	r0, [pc, #96]	@ (800ea38 <mg_mgr_init+0x11c>)
 800e9d8:	f7ff fa08 	bl	800ddec <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f04f 32ff 	mov.w	r2, #4294967295
 800e9e2:	641a      	str	r2, [r3, #64]	@ 0x40
  mgr->dnstimeout = 3000;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800e9ea:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a13      	ldr	r2, [pc, #76]	@ (800ea3c <mg_mgr_init+0x120>)
 800e9f0:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4a12      	ldr	r2, [pc, #72]	@ (800ea40 <mg_mgr_init+0x124>)
 800e9f6:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f00c f81e 	bl	801aa3a <mg_tls_ctx_init>
}
 800e9fe:	bf00      	nop
 800ea00:	3708      	adds	r7, #8
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	240051e0 	.word	0x240051e0
 800ea0c:	c0a8010b 	.word	0xc0a8010b
 800ea10:	240051e8 	.word	0x240051e8
 800ea14:	ffff0000 	.word	0xffff0000
 800ea18:	240002a0 	.word	0x240002a0
 800ea1c:	1ff1e800 	.word	0x1ff1e800
 800ea20:	1ff1e804 	.word	0x1ff1e804
 800ea24:	1ff1e808 	.word	0x1ff1e808
 800ea28:	24000258 	.word	0x24000258
 800ea2c:	0802a110 	.word	0x0802a110
 800ea30:	080264c4 	.word	0x080264c4
 800ea34:	0801283d 	.word	0x0801283d
 800ea38:	080274c4 	.word	0x080274c4
 800ea3c:	080274dc 	.word	0x080274dc
 800ea40:	080274f0 	.word	0x080274f0

0800ea44 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d005      	beq.n	800ea64 <mg_tcpip_call+0x20>
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	68b9      	ldr	r1, [r7, #8]
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	4798      	blx	r3
}
 800ea64:	bf00      	nop
 800ea66:	3710      	adds	r7, #16
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 800ea6c:	b590      	push	{r4, r7, lr}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	441a      	add	r2, r3
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	461a      	mov	r2, r3
 800ea86:	68fc      	ldr	r4, [r7, #12]
 800ea88:	463b      	mov	r3, r7
 800ea8a:	68b9      	ldr	r1, [r7, #8]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f007 f97a 	bl	8015d86 <mg_str_n>
 800ea92:	f104 0308 	add.w	r3, r4, #8
 800ea96:	463a      	mov	r2, r7
 800ea98:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea9c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800eaa0:	bf00      	nop
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	bd90      	pop	{r4, r7, pc}

0800eaa8 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800eaa8:	b480      	push	{r7}
 800eaaa:	b087      	sub	sp, #28
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	60f8      	str	r0, [r7, #12]
 800eab0:	60b9      	str	r1, [r7, #8]
 800eab2:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 800eab4:	68bb      	ldr	r3, [r7, #8]
 800eab6:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 800eab8:	2300      	movs	r3, #0
 800eaba:	617b      	str	r3, [r7, #20]
 800eabc:	e014      	b.n	800eae8 <csumup+0x40>
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	f003 0301 	and.w	r3, r3, #1
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d004      	beq.n	800ead2 <csumup+0x2a>
 800eac8:	693a      	ldr	r2, [r7, #16]
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	4413      	add	r3, r2
 800eace:	781b      	ldrb	r3, [r3, #0]
 800ead0:	e004      	b.n	800eadc <csumup+0x34>
 800ead2:	693a      	ldr	r2, [r7, #16]
 800ead4:	697b      	ldr	r3, [r7, #20]
 800ead6:	4413      	add	r3, r2
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	021b      	lsls	r3, r3, #8
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	4413      	add	r3, r2
 800eae0:	60fb      	str	r3, [r7, #12]
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	3301      	adds	r3, #1
 800eae6:	617b      	str	r3, [r7, #20]
 800eae8:	697a      	ldr	r2, [r7, #20]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	429a      	cmp	r2, r3
 800eaee:	d3e6      	bcc.n	800eabe <csumup+0x16>
  return sum;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	371c      	adds	r7, #28
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr

0800eafe <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b082      	sub	sp, #8
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800eb06:	e005      	b.n	800eb14 <csumfin+0x16>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	0c1b      	lsrs	r3, r3, #16
 800eb10:	4413      	add	r3, r2
 800eb12:	607b      	str	r3, [r7, #4]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	0c1b      	lsrs	r3, r3, #16
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d1f5      	bne.n	800eb08 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	43db      	mvns	r3, r3
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	4618      	mov	r0, r3
 800eb26:	f012 fbab 	bl	8021280 <mg_ntohs>
 800eb2a:	4603      	mov	r3, r0
}
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800eb3e:	683a      	ldr	r2, [r7, #0]
 800eb40:	6879      	ldr	r1, [r7, #4]
 800eb42:	2000      	movs	r0, #0
 800eb44:	f7ff ffb0 	bl	800eaa8 <csumup>
 800eb48:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f7ff ffd7 	bl	800eafe <csumfin>
 800eb50:	4603      	mov	r3, r0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
	...

0800eb5c <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800eb5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800eb60:	b088      	sub	sp, #32
 800eb62:	af02      	add	r7, sp, #8
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	460b      	mov	r3, r1
 800eb68:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb70:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	33b0      	adds	r3, #176	@ 0xb0
 800eb76:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 800eb78:	78fb      	ldrb	r3, [r7, #3]
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d013      	beq.n	800eba6 <settmout+0x4a>
 800eb7e:	78fb      	ldrb	r3, [r7, #3]
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	d00e      	beq.n	800eba2 <settmout+0x46>
 800eb84:	78fb      	ldrb	r3, [r7, #3]
 800eb86:	2b03      	cmp	r3, #3
 800eb88:	d008      	beq.n	800eb9c <settmout+0x40>
 800eb8a:	78fb      	ldrb	r3, [r7, #3]
 800eb8c:	2b04      	cmp	r3, #4
 800eb8e:	d102      	bne.n	800eb96 <settmout+0x3a>
 800eb90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800eb94:	e008      	b.n	800eba8 <settmout+0x4c>
 800eb96:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800eb9a:	e005      	b.n	800eba8 <settmout+0x4c>
 800eb9c:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800eba0:	e002      	b.n	800eba8 <settmout+0x4c>
 800eba2:	2364      	movs	r3, #100	@ 0x64
 800eba4:	e000      	b.n	800eba8 <settmout+0x4c>
 800eba6:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 800eba8:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800ebaa:	693b      	ldr	r3, [r7, #16]
 800ebac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ebb0:	2b04      	cmp	r3, #4
 800ebb2:	d029      	beq.n	800ec08 <settmout+0xac>
  s->timer = ifp->now + n;
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800ebba:	68f9      	ldr	r1, [r7, #12]
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	460c      	mov	r4, r1
 800ebc0:	4605      	mov	r5, r0
 800ebc2:	eb12 0804 	adds.w	r8, r2, r4
 800ebc6:	eb43 0905 	adc.w	r9, r3, r5
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	78fa      	ldrb	r2, [r7, #3]
 800ebd4:	f883 2020 	strb.w	r2, [r3, #32]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800ebd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ec14 <settmout+0xb8>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2b03      	cmp	r3, #3
 800ebde:	dd14      	ble.n	800ec0a <settmout+0xae>
 800ebe0:	4b0d      	ldr	r3, [pc, #52]	@ (800ec18 <settmout+0xbc>)
 800ebe2:	f241 02fd 	movw	r2, #4349	@ 0x10fd
 800ebe6:	490d      	ldr	r1, [pc, #52]	@ (800ec1c <settmout+0xc0>)
 800ebe8:	2004      	movs	r0, #4
 800ebea:	f7ff f8af 	bl	800dd4c <mg_log_prefix>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ebf2:	78f8      	ldrb	r0, [r7, #3]
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800ebfa:	e9cd 2300 	strd	r2, r3, [sp]
 800ebfe:	4602      	mov	r2, r0
 800ec00:	4807      	ldr	r0, [pc, #28]	@ (800ec20 <settmout+0xc4>)
 800ec02:	f7ff f8f3 	bl	800ddec <mg_log>
 800ec06:	e000      	b.n	800ec0a <settmout+0xae>
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800ec08:	bf00      	nop
}
 800ec0a:	3718      	adds	r7, #24
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ec12:	bf00      	nop
 800ec14:	24000258 	.word	0x24000258
 800ec18:	0802a11c 	.word	0x0802a11c
 800ec1c:	080264c4 	.word	0x080264c4
 800ec20:	08027510 	.word	0x08027510

0800ec24 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec32:	685b      	ldr	r3, [r3, #4]
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	6950      	ldr	r0, [r2, #20]
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	6839      	ldr	r1, [r7, #0]
 800ec3c:	4798      	blx	r3
 800ec3e:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800ec40:	68fa      	ldr	r2, [r7, #12]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d104      	bne.n	800ec52 <ether_output+0x2e>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec4c:	1c5a      	adds	r2, r3, #1
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	67da      	str	r2, [r3, #124]	@ 0x7c
  return n;
 800ec52:	68fb      	ldr	r3, [r7, #12]
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3710      	adds	r7, #16
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}

0800ec5c <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	695b      	ldr	r3, [r3, #20]
 800ec6c:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	330e      	adds	r3, #14
 800ec72:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	2206      	movs	r2, #6
 800ec78:	21ff      	movs	r1, #255	@ 0xff
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f016 fd86 	bl	802578c <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	3306      	adds	r3, #6
 800ec84:	68f9      	ldr	r1, [r7, #12]
 800ec86:	2206      	movs	r2, #6
 800ec88:	4618      	mov	r0, r3
 800ec8a:	f016 feb4 	bl	80259f6 <memcpy>
  eth->type = mg_htons(0x806);
 800ec8e:	f640 0006 	movw	r0, #2054	@ 0x806
 800ec92:	f012 faf5 	bl	8021280 <mg_ntohs>
 800ec96:	4603      	mov	r3, r0
 800ec98:	461a      	mov	r2, r3
 800ec9a:	697b      	ldr	r3, [r7, #20]
 800ec9c:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800ec9e:	221c      	movs	r2, #28
 800eca0:	2100      	movs	r1, #0
 800eca2:	6938      	ldr	r0, [r7, #16]
 800eca4:	f016 fd72 	bl	802578c <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800eca8:	2001      	movs	r0, #1
 800ecaa:	f012 fae9 	bl	8021280 <mg_ntohs>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	461a      	mov	r2, r3
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	801a      	strh	r2, [r3, #0]
 800ecb6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800ecba:	f012 fae1 	bl	8021280 <mg_ntohs>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	805a      	strh	r2, [r3, #2]
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	2206      	movs	r2, #6
 800ecca:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	2204      	movs	r2, #4
 800ecd0:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800ecd2:	2001      	movs	r0, #1
 800ecd4:	f012 fad4 	bl	8021280 <mg_ntohs>
 800ecd8:	4603      	mov	r3, r0
 800ecda:	461a      	mov	r2, r3
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	80da      	strh	r2, [r3, #6]
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	619a      	str	r2, [r3, #24]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	689a      	ldr	r2, [r3, #8]
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	3308      	adds	r3, #8
 800ecf4:	68f9      	ldr	r1, [r7, #12]
 800ecf6:	2206      	movs	r2, #6
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f016 fe7c 	bl	80259f6 <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d006      	beq.n	800ed12 <mg_tcpip_arp_request+0xb6>
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	3312      	adds	r3, #18
 800ed08:	2206      	movs	r2, #6
 800ed0a:	6879      	ldr	r1, [r7, #4]
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f016 fe72 	bl	80259f6 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	f103 021c 	add.w	r2, r3, #28
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	1ad3      	subs	r3, r2, r3
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	68f8      	ldr	r0, [r7, #12]
 800ed20:	f7ff ff80 	bl	800ec24 <ether_output>
}
 800ed24:	bf00      	nop
 800ed26:	3718      	adds	r7, #24
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}

0800ed2c <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800ed2c:	b580      	push	{r7, lr}
 800ed2e:	b082      	sub	sp, #8
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ed3a:	2b04      	cmp	r3, #4
 800ed3c:	d135      	bne.n	800edaa <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800ed3e:	4b45      	ldr	r3, [pc, #276]	@ (800ee54 <onstatechange+0x128>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	dd0d      	ble.n	800ed62 <onstatechange+0x36>
 800ed46:	4b44      	ldr	r3, [pc, #272]	@ (800ee58 <onstatechange+0x12c>)
 800ed48:	f241 1217 	movw	r2, #4375	@ 0x1117
 800ed4c:	4943      	ldr	r1, [pc, #268]	@ (800ee5c <onstatechange+0x130>)
 800ed4e:	2002      	movs	r0, #2
 800ed50:	f7fe fffc 	bl	800dd4c <mg_log_prefix>
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	3308      	adds	r3, #8
 800ed58:	461a      	mov	r2, r3
 800ed5a:	4941      	ldr	r1, [pc, #260]	@ (800ee60 <onstatechange+0x134>)
 800ed5c:	4841      	ldr	r0, [pc, #260]	@ (800ee64 <onstatechange+0x138>)
 800ed5e:	f7ff f845 	bl	800ddec <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800ed62:	4b3c      	ldr	r3, [pc, #240]	@ (800ee54 <onstatechange+0x128>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	dd0d      	ble.n	800ed86 <onstatechange+0x5a>
 800ed6a:	4b3b      	ldr	r3, [pc, #236]	@ (800ee58 <onstatechange+0x12c>)
 800ed6c:	f241 1218 	movw	r2, #4376	@ 0x1118
 800ed70:	493a      	ldr	r1, [pc, #232]	@ (800ee5c <onstatechange+0x130>)
 800ed72:	2002      	movs	r0, #2
 800ed74:	f7fe ffea 	bl	800dd4c <mg_log_prefix>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	3310      	adds	r3, #16
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	4938      	ldr	r1, [pc, #224]	@ (800ee60 <onstatechange+0x134>)
 800ed80:	4839      	ldr	r0, [pc, #228]	@ (800ee68 <onstatechange+0x13c>)
 800ed82:	f7ff f833 	bl	800ddec <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800ed86:	4b33      	ldr	r3, [pc, #204]	@ (800ee54 <onstatechange+0x128>)
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	dd57      	ble.n	800ee3e <onstatechange+0x112>
 800ed8e:	4b32      	ldr	r3, [pc, #200]	@ (800ee58 <onstatechange+0x12c>)
 800ed90:	f241 1219 	movw	r2, #4377	@ 0x1119
 800ed94:	4931      	ldr	r1, [pc, #196]	@ (800ee5c <onstatechange+0x130>)
 800ed96:	2002      	movs	r0, #2
 800ed98:	f7fe ffd8 	bl	800dd4c <mg_log_prefix>
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	4932      	ldr	r1, [pc, #200]	@ (800ee6c <onstatechange+0x140>)
 800eda2:	4833      	ldr	r0, [pc, #204]	@ (800ee70 <onstatechange+0x144>)
 800eda4:	f7ff f822 	bl	800ddec <mg_log>
 800eda8:	e049      	b.n	800ee3e <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800edb0:	2b03      	cmp	r3, #3
 800edb2:	d115      	bne.n	800ede0 <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 800edb4:	4b27      	ldr	r3, [pc, #156]	@ (800ee54 <onstatechange+0x128>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	dd09      	ble.n	800edd0 <onstatechange+0xa4>
 800edbc:	4b26      	ldr	r3, [pc, #152]	@ (800ee58 <onstatechange+0x12c>)
 800edbe:	f241 121b 	movw	r2, #4379	@ 0x111b
 800edc2:	4926      	ldr	r1, [pc, #152]	@ (800ee5c <onstatechange+0x130>)
 800edc4:	2001      	movs	r0, #1
 800edc6:	f7fe ffc1 	bl	800dd4c <mg_log_prefix>
 800edca:	482a      	ldr	r0, [pc, #168]	@ (800ee74 <onstatechange+0x148>)
 800edcc:	f7ff f80e 	bl	800ddec <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	2200      	movs	r2, #0
 800edd6:	4619      	mov	r1, r3
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f7ff ff3f 	bl	800ec5c <mg_tcpip_arp_request>
 800edde:	e02e      	b.n	800ee3e <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ede6:	2b01      	cmp	r3, #1
 800ede8:	d116      	bne.n	800ee18 <onstatechange+0xec>
    MG_ERROR(("Link up"));
 800edea:	4b1a      	ldr	r3, [pc, #104]	@ (800ee54 <onstatechange+0x128>)
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	dd09      	ble.n	800ee06 <onstatechange+0xda>
 800edf2:	4b19      	ldr	r3, [pc, #100]	@ (800ee58 <onstatechange+0x12c>)
 800edf4:	f241 121e 	movw	r2, #4382	@ 0x111e
 800edf8:	4918      	ldr	r1, [pc, #96]	@ (800ee5c <onstatechange+0x130>)
 800edfa:	2001      	movs	r0, #1
 800edfc:	f7fe ffa6 	bl	800dd4c <mg_log_prefix>
 800ee00:	481d      	ldr	r0, [pc, #116]	@ (800ee78 <onstatechange+0x14c>)
 800ee02:	f7fe fff3 	bl	800ddec <mg_log>
    srand((unsigned int) mg_millis());
 800ee06:	f7f1 fcaf 	bl	8000768 <mg_millis>
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	4613      	mov	r3, r2
 800ee10:	4618      	mov	r0, r3
 800ee12:	f016 f9bb 	bl	802518c <srand>
 800ee16:	e012      	b.n	800ee3e <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d10d      	bne.n	800ee3e <onstatechange+0x112>
    MG_ERROR(("Link down"));
 800ee22:	4b0c      	ldr	r3, [pc, #48]	@ (800ee54 <onstatechange+0x128>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	dd09      	ble.n	800ee3e <onstatechange+0x112>
 800ee2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ee58 <onstatechange+0x12c>)
 800ee2c:	f241 1221 	movw	r2, #4385	@ 0x1121
 800ee30:	490a      	ldr	r1, [pc, #40]	@ (800ee5c <onstatechange+0x130>)
 800ee32:	2001      	movs	r0, #1
 800ee34:	f7fe ff8a 	bl	800dd4c <mg_log_prefix>
 800ee38:	4810      	ldr	r0, [pc, #64]	@ (800ee7c <onstatechange+0x150>)
 800ee3a:	f7fe ffd7 	bl	800ddec <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	3384      	adds	r3, #132	@ 0x84
 800ee42:	461a      	mov	r2, r3
 800ee44:	2100      	movs	r1, #0
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f7ff fdfc 	bl	800ea44 <mg_tcpip_call>
}
 800ee4c:	bf00      	nop
 800ee4e:	3708      	adds	r7, #8
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	24000258 	.word	0x24000258
 800ee58:	0802a128 	.word	0x0802a128
 800ee5c:	080264c4 	.word	0x080264c4
 800ee60:	08012779 	.word	0x08012779
 800ee64:	08027520 	.word	0x08027520
 800ee68:	08027530 	.word	0x08027530
 800ee6c:	0801283d 	.word	0x0801283d
 800ee70:	08027540 	.word	0x08027540
 800ee74:	08027550 	.word	0x08027550
 800ee78:	08027558 	.word	0x08027558
 800ee7c:	08027560 	.word	0x08027560

0800ee80 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b086      	sub	sp, #24
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	603b      	str	r3, [r7, #0]
 800ee8c:	4613      	mov	r3, r2
 800ee8e:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	330e      	adds	r3, #14
 800ee9a:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	2206      	movs	r2, #6
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f016 fda7 	bl	80259f6 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800eea8:	697b      	ldr	r3, [r7, #20]
 800eeaa:	3306      	adds	r3, #6
 800eeac:	68f9      	ldr	r1, [r7, #12]
 800eeae:	2206      	movs	r2, #6
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f016 fda0 	bl	80259f6 <memcpy>
  eth->type = mg_htons(0x800);
 800eeb6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800eeba:	f012 f9e1 	bl	8021280 <mg_ntohs>
 800eebe:	4603      	mov	r3, r0
 800eec0:	461a      	mov	r2, r3
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800eec6:	2214      	movs	r2, #20
 800eec8:	2100      	movs	r1, #0
 800eeca:	6938      	ldr	r0, [r7, #16]
 800eecc:	f016 fc5e 	bl	802578c <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	2245      	movs	r2, #69	@ 0x45
 800eed4:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 800eed6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800eeda:	f012 f9d1 	bl	8021280 <mg_ntohs>
 800eede:	4603      	mov	r3, r0
 800eee0:	461a      	mov	r2, r3
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800eee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	3314      	adds	r3, #20
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	4618      	mov	r0, r3
 800eef0:	f012 f9c6 	bl	8021280 <mg_ntohs>
 800eef4:	4603      	mov	r3, r0
 800eef6:	461a      	mov	r2, r3
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	2240      	movs	r2, #64	@ 0x40
 800ef00:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	79fa      	ldrb	r2, [r7, #7]
 800ef06:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	683a      	ldr	r2, [r7, #0]
 800ef0c:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800ef0e:	693b      	ldr	r3, [r7, #16]
 800ef10:	6a3a      	ldr	r2, [r7, #32]
 800ef12:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800ef14:	2114      	movs	r1, #20
 800ef16:	6938      	ldr	r0, [r7, #16]
 800ef18:	f7ff fe0c 	bl	800eb34 <ipcsum>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	461a      	mov	r2, r3
 800ef20:	693b      	ldr	r3, [r7, #16]
 800ef22:	815a      	strh	r2, [r3, #10]
  return ip;
 800ef24:	693b      	ldr	r3, [r7, #16]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3718      	adds	r7, #24
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b08a      	sub	sp, #40	@ 0x28
 800ef32:	af02      	add	r7, sp, #8
 800ef34:	60f8      	str	r0, [r7, #12]
 800ef36:	60b9      	str	r1, [r7, #8]
 800ef38:	607a      	str	r2, [r7, #4]
 800ef3a:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800ef3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef3e:	3308      	adds	r3, #8
 800ef40:	9301      	str	r3, [sp, #4]
 800ef42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2211      	movs	r2, #17
 800ef4a:	68b9      	ldr	r1, [r7, #8]
 800ef4c:	68f8      	ldr	r0, [r7, #12]
 800ef4e:	f7ff ff97 	bl	800ee80 <tx_ip>
 800ef52:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800ef54:	69fb      	ldr	r3, [r7, #28]
 800ef56:	3314      	adds	r3, #20
 800ef58:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	887a      	ldrh	r2, [r7, #2]
 800ef5e:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800ef64:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800ef66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	3308      	adds	r3, #8
 800ef6c:	b29b      	uxth	r3, r3
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f012 f986 	bl	8021280 <mg_ntohs>
 800ef74:	4603      	mov	r3, r0
 800ef76:	461a      	mov	r2, r3
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800ef7c:	69bb      	ldr	r3, [r7, #24]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	719a      	strb	r2, [r3, #6]
 800ef82:	2200      	movs	r2, #0
 800ef84:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800ef86:	2208      	movs	r2, #8
 800ef88:	69b9      	ldr	r1, [r7, #24]
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	f7ff fd8c 	bl	800eaa8 <csumup>
 800ef90:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800ef92:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ef94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ef96:	6978      	ldr	r0, [r7, #20]
 800ef98:	f7ff fd86 	bl	800eaa8 <csumup>
 800ef9c:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	330c      	adds	r3, #12
 800efa2:	2204      	movs	r2, #4
 800efa4:	4619      	mov	r1, r3
 800efa6:	6978      	ldr	r0, [r7, #20]
 800efa8:	f7ff fd7e 	bl	800eaa8 <csumup>
 800efac:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	3310      	adds	r3, #16
 800efb2:	2204      	movs	r2, #4
 800efb4:	4619      	mov	r1, r3
 800efb6:	6978      	ldr	r0, [r7, #20]
 800efb8:	f7ff fd76 	bl	800eaa8 <csumup>
 800efbc:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	7a5b      	ldrb	r3, [r3, #9]
 800efc2:	461a      	mov	r2, r3
 800efc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efc6:	441a      	add	r2, r3
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	4413      	add	r3, r2
 800efcc:	3308      	adds	r3, #8
 800efce:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800efd0:	6978      	ldr	r0, [r7, #20]
 800efd2:	f7ff fd94 	bl	800eafe <csumfin>
 800efd6:	4603      	mov	r3, r0
 800efd8:	461a      	mov	r2, r3
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800efde:	69bb      	ldr	r3, [r7, #24]
 800efe0:	3308      	adds	r3, #8
 800efe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800efe4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800efe6:	4618      	mov	r0, r3
 800efe8:	f016 fbb6 	bl	8025758 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800efec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efee:	332a      	adds	r3, #42	@ 0x2a
 800eff0:	4619      	mov	r1, r3
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f7ff fe16 	bl	800ec24 <ether_output>
}
 800eff8:	bf00      	nop
 800effa:	3720      	adds	r7, #32
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}

0800f000 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800f000:	b5b0      	push	{r4, r5, r7, lr}
 800f002:	b0d0      	sub	sp, #320	@ 0x140
 800f004:	af04      	add	r7, sp, #16
 800f006:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800f00a:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800f00e:	6020      	str	r0, [r4, #0]
 800f010:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800f014:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800f018:	6001      	str	r1, [r0, #0]
 800f01a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800f01e:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800f022:	600a      	str	r2, [r1, #0]
 800f024:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f028:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800f02c:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800f02e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f032:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f036:	4a38      	ldr	r2, [pc, #224]	@ (800f118 <tx_dhcp+0x118>)
 800f038:	4618      	mov	r0, r3
 800f03a:	4611      	mov	r1, r2
 800f03c:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800f040:	461a      	mov	r2, r3
 800f042:	f016 fcd8 	bl	80259f6 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800f046:	4835      	ldr	r0, [pc, #212]	@ (800f11c <tx_dhcp+0x11c>)
 800f048:	f012 f931 	bl	80212ae <mg_ntohl>
 800f04c:	4602      	mov	r2, r0
 800f04e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f052:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f056:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800f05a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f05e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800f062:	6819      	ldr	r1, [r3, #0]
 800f064:	f107 0314 	add.w	r3, r7, #20
 800f068:	331c      	adds	r3, #28
 800f06a:	2206      	movs	r2, #6
 800f06c:	4618      	mov	r0, r3
 800f06e:	f016 fcc2 	bl	80259f6 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800f072:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f076:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	3302      	adds	r3, #2
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	461a      	mov	r2, r3
 800f082:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f086:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f08a:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800f08c:	f107 0314 	add.w	r3, r7, #20
 800f090:	33f0      	adds	r3, #240	@ 0xf0
 800f092:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800f096:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800f09a:	4618      	mov	r0, r3
 800f09c:	f016 fcab 	bl	80259f6 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800f0a0:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d009      	beq.n	800f0bc <tx_dhcp+0xbc>
 800f0a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800f0b0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f0b4:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800f0b8:	6812      	ldr	r2, [r2, #0]
 800f0ba:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800f0bc:	2044      	movs	r0, #68	@ 0x44
 800f0be:	f012 f8df 	bl	8021280 <mg_ntohs>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	461d      	mov	r5, r3
 800f0c6:	2043      	movs	r0, #67	@ 0x43
 800f0c8:	f012 f8da 	bl	8021280 <mg_ntohs>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	461c      	mov	r4, r3
 800f0d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0d4:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 800f0d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0dc:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 800f0e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0e4:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 800f0e8:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800f0ec:	9303      	str	r3, [sp, #12]
 800f0ee:	f107 0314 	add.w	r3, r7, #20
 800f0f2:	9302      	str	r3, [sp, #8]
 800f0f4:	9401      	str	r4, [sp, #4]
 800f0f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0fa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	462b      	mov	r3, r5
 800f104:	6812      	ldr	r2, [r2, #0]
 800f106:	6809      	ldr	r1, [r1, #0]
 800f108:	6800      	ldr	r0, [r0, #0]
 800f10a:	f7ff ff10 	bl	800ef2e <tx_udp>
         sizeof(dhcp));
}
 800f10e:	bf00      	nop
 800f110:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f114:	46bd      	mov	sp, r7
 800f116:	bdb0      	pop	{r4, r5, r7, pc}
 800f118:	0802756c 	.word	0x0802756c
 800f11c:	63825363 	.word	0x63825363

0800f120 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800f120:	b580      	push	{r7, lr}
 800f122:	b096      	sub	sp, #88	@ 0x58
 800f124:	af04      	add	r7, sp, #16
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	607a      	str	r2, [r7, #4]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	7fdb      	ldrb	r3, [r3, #31]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d001      	beq.n	800f138 <tx_dhcp_request_sel+0x18>
 800f134:	2201      	movs	r2, #1
 800f136:	e000      	b.n	800f13a <tx_dhcp_request_sel+0x1a>
 800f138:	2200      	movs	r2, #0
                             (ifp->enable_req_sntp ? 1 : 0));
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f893 3020 	ldrb.w	r3, [r3, #32]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800f140:	2b00      	cmp	r3, #0
 800f142:	d001      	beq.n	800f148 <tx_dhcp_request_sel+0x28>
 800f144:	2301      	movs	r3, #1
 800f146:	e000      	b.n	800f14a <tx_dhcp_request_sel+0x2a>
 800f148:	2300      	movs	r3, #0
 800f14a:	4413      	add	r3, r2
 800f14c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  size_t len = strlen(ifp->dhcp_name);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	3344      	adds	r3, #68	@ 0x44
 800f154:	4618      	mov	r0, r3
 800f156:	f7f1 f93b 	bl	80003d0 <strlen>
 800f15a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  size_t olen = 21 + len + extra + 2 + 1;  // Total length of options
 800f15c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800f160:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f162:	4413      	add	r3, r2
 800f164:	3318      	adds	r3, #24
 800f166:	63bb      	str	r3, [r7, #56]	@ 0x38
#define OPTS_MAXLEN (21 + sizeof(ifp->dhcp_name) + 2 + 2 + 1)
  uint8_t opts[OPTS_MAXLEN];  // Allocate options (max size possible)
  uint8_t *p = opts;
 800f168:	f107 0310 	add.w	r3, r7, #16
 800f16c:	647b      	str	r3, [r7, #68]	@ 0x44
  assert(olen <= sizeof(opts));
 800f16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f170:	2b26      	cmp	r3, #38	@ 0x26
 800f172:	d906      	bls.n	800f182 <tx_dhcp_request_sel+0x62>
 800f174:	4b50      	ldr	r3, [pc, #320]	@ (800f2b8 <tx_dhcp_request_sel+0x198>)
 800f176:	4a51      	ldr	r2, [pc, #324]	@ (800f2bc <tx_dhcp_request_sel+0x19c>)
 800f178:	f241 116a 	movw	r1, #4458	@ 0x116a
 800f17c:	4850      	ldr	r0, [pc, #320]	@ (800f2c0 <tx_dhcp_request_sel+0x1a0>)
 800f17e:	f015 ff09 	bl	8024f94 <__assert_func>
  memset(opts, 0, sizeof(opts));
 800f182:	f107 0310 	add.w	r3, r7, #16
 800f186:	2226      	movs	r2, #38	@ 0x26
 800f188:	2100      	movs	r1, #0
 800f18a:	4618      	mov	r0, r3
 800f18c:	f016 fafe 	bl	802578c <memset>
  *p++ = 53, *p++ = 1, *p++ = 3;                       // Type: DHCP request
 800f190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f192:	1c5a      	adds	r2, r3, #1
 800f194:	647a      	str	r2, [r7, #68]	@ 0x44
 800f196:	2235      	movs	r2, #53	@ 0x35
 800f198:	701a      	strb	r2, [r3, #0]
 800f19a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f19c:	1c5a      	adds	r2, r3, #1
 800f19e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	701a      	strb	r2, [r3, #0]
 800f1a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1a6:	1c5a      	adds	r2, r3, #1
 800f1a8:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1aa:	2203      	movs	r2, #3
 800f1ac:	701a      	strb	r2, [r3, #0]
  *p++ = 54, *p++ = 4, memcpy(p, &ip_srv, 4), p += 4;  // DHCP server ID
 800f1ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1b0:	1c5a      	adds	r2, r3, #1
 800f1b2:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1b4:	2236      	movs	r2, #54	@ 0x36
 800f1b6:	701a      	strb	r2, [r3, #0]
 800f1b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1ba:	1c5a      	adds	r2, r3, #1
 800f1bc:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1be:	2204      	movs	r2, #4
 800f1c0:	701a      	strb	r2, [r3, #0]
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1c6:	601a      	str	r2, [r3, #0]
 800f1c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 50, *p++ = 4, memcpy(p, &ip_req, 4), p += 4;  // Requested IP
 800f1ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1d0:	1c5a      	adds	r2, r3, #1
 800f1d2:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1d4:	2232      	movs	r2, #50	@ 0x32
 800f1d6:	701a      	strb	r2, [r3, #0]
 800f1d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1da:	1c5a      	adds	r2, r3, #1
 800f1dc:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1de:	2204      	movs	r2, #4
 800f1e0:	701a      	strb	r2, [r3, #0]
 800f1e2:	68ba      	ldr	r2, [r7, #8]
 800f1e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1e6:	601a      	str	r2, [r3, #0]
 800f1e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1ea:	3304      	adds	r3, #4
 800f1ec:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 12, *p++ = (uint8_t) (len & 255);             // DHCP host
 800f1ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1f0:	1c5a      	adds	r2, r3, #1
 800f1f2:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1f4:	220c      	movs	r2, #12
 800f1f6:	701a      	strb	r2, [r3, #0]
 800f1f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f1fa:	1c5a      	adds	r2, r3, #1
 800f1fc:	647a      	str	r2, [r7, #68]	@ 0x44
 800f1fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f200:	b2d2      	uxtb	r2, r2
 800f202:	701a      	strb	r2, [r3, #0]
  memcpy(p, ifp->dhcp_name, len), p += len;            // name
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	3344      	adds	r3, #68	@ 0x44
 800f208:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f20a:	4619      	mov	r1, r3
 800f20c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800f20e:	f016 fbf2 	bl	80259f6 <memcpy>
 800f212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f216:	4413      	add	r3, r2
 800f218:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 55, *p++ = 2 + extra, *p++ = 1, *p++ = 3;     // GW, MASK
 800f21a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f21c:	1c5a      	adds	r2, r3, #1
 800f21e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f220:	2237      	movs	r2, #55	@ 0x37
 800f222:	701a      	strb	r2, [r3, #0]
 800f224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f226:	1c5a      	adds	r2, r3, #1
 800f228:	647a      	str	r2, [r7, #68]	@ 0x44
 800f22a:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800f22e:	3202      	adds	r2, #2
 800f230:	b2d2      	uxtb	r2, r2
 800f232:	701a      	strb	r2, [r3, #0]
 800f234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f236:	1c5a      	adds	r2, r3, #1
 800f238:	647a      	str	r2, [r7, #68]	@ 0x44
 800f23a:	2201      	movs	r2, #1
 800f23c:	701a      	strb	r2, [r3, #0]
 800f23e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f240:	1c5a      	adds	r2, r3, #1
 800f242:	647a      	str	r2, [r7, #68]	@ 0x44
 800f244:	2203      	movs	r2, #3
 800f246:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_dns) *p++ = 6;                   // DNS
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	7fdb      	ldrb	r3, [r3, #31]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d004      	beq.n	800f25a <tx_dhcp_request_sel+0x13a>
 800f250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f252:	1c5a      	adds	r2, r3, #1
 800f254:	647a      	str	r2, [r7, #68]	@ 0x44
 800f256:	2206      	movs	r2, #6
 800f258:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_sntp) *p++ = 42;                 // SNTP
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d004      	beq.n	800f26e <tx_dhcp_request_sel+0x14e>
 800f264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f266:	1c5a      	adds	r2, r3, #1
 800f268:	647a      	str	r2, [r7, #68]	@ 0x44
 800f26a:	222a      	movs	r2, #42	@ 0x2a
 800f26c:	701a      	strb	r2, [r3, #0]
  *p++ = 255;                                          // End of options
 800f26e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f270:	1c5a      	adds	r2, r3, #1
 800f272:	647a      	str	r2, [r7, #68]	@ 0x44
 800f274:	22ff      	movs	r2, #255	@ 0xff
 800f276:	701a      	strb	r2, [r3, #0]
  // assert((size_t) (p - opts) < olen);
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, olen, 0);
 800f278:	2300      	movs	r3, #0
 800f27a:	9302      	str	r3, [sp, #8]
 800f27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f27e:	9301      	str	r3, [sp, #4]
 800f280:	f107 0310 	add.w	r3, r7, #16
 800f284:	9300      	str	r3, [sp, #0]
 800f286:	f04f 33ff 	mov.w	r3, #4294967295
 800f28a:	2200      	movs	r2, #0
 800f28c:	490d      	ldr	r1, [pc, #52]	@ (800f2c4 <tx_dhcp_request_sel+0x1a4>)
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f7ff feb6 	bl	800f000 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800f294:	4b0c      	ldr	r3, [pc, #48]	@ (800f2c8 <tx_dhcp_request_sel+0x1a8>)
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	2b02      	cmp	r3, #2
 800f29a:	dd09      	ble.n	800f2b0 <tx_dhcp_request_sel+0x190>
 800f29c:	4b07      	ldr	r3, [pc, #28]	@ (800f2bc <tx_dhcp_request_sel+0x19c>)
 800f29e:	f241 1277 	movw	r2, #4471	@ 0x1177
 800f2a2:	4907      	ldr	r1, [pc, #28]	@ (800f2c0 <tx_dhcp_request_sel+0x1a0>)
 800f2a4:	2003      	movs	r0, #3
 800f2a6:	f7fe fd51 	bl	800dd4c <mg_log_prefix>
 800f2aa:	4808      	ldr	r0, [pc, #32]	@ (800f2cc <tx_dhcp_request_sel+0x1ac>)
 800f2ac:	f7fe fd9e 	bl	800ddec <mg_log>
}
 800f2b0:	bf00      	nop
 800f2b2:	3748      	adds	r7, #72	@ 0x48
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	08027688 	.word	0x08027688
 800f2bc:	0802a138 	.word	0x0802a138
 800f2c0:	080264c4 	.word	0x080264c4
 800f2c4:	08029bec 	.word	0x08029bec
 800f2c8:	24000258 	.word	0x24000258
 800f2cc:	080276a0 	.word	0x080276a0

0800f2d0 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b08a      	sub	sp, #40	@ 0x28
 800f2d4:	af04      	add	r7, sp, #16
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	607a      	str	r2, [r7, #4]
 800f2dc:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800f2de:	4b10      	ldr	r3, [pc, #64]	@ (800f320 <tx_dhcp_request_re+0x50>)
 800f2e0:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	9302      	str	r3, [sp, #8]
 800f2e6:	2304      	movs	r3, #4
 800f2e8:	9301      	str	r3, [sp, #4]
 800f2ea:	f107 0314 	add.w	r3, r7, #20
 800f2ee:	9300      	str	r3, [sp, #0]
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	68b9      	ldr	r1, [r7, #8]
 800f2f6:	68f8      	ldr	r0, [r7, #12]
 800f2f8:	f7ff fe82 	bl	800f000 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800f2fc:	4b09      	ldr	r3, [pc, #36]	@ (800f324 <tx_dhcp_request_re+0x54>)
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b02      	cmp	r3, #2
 800f302:	dd09      	ble.n	800f318 <tx_dhcp_request_re+0x48>
 800f304:	4b08      	ldr	r3, [pc, #32]	@ (800f328 <tx_dhcp_request_re+0x58>)
 800f306:	f241 1282 	movw	r2, #4482	@ 0x1182
 800f30a:	4908      	ldr	r1, [pc, #32]	@ (800f32c <tx_dhcp_request_re+0x5c>)
 800f30c:	2003      	movs	r0, #3
 800f30e:	f7fe fd1d 	bl	800dd4c <mg_log_prefix>
 800f312:	4807      	ldr	r0, [pc, #28]	@ (800f330 <tx_dhcp_request_re+0x60>)
 800f314:	f7fe fd6a 	bl	800ddec <mg_log>
}
 800f318:	bf00      	nop
 800f31a:	3718      	adds	r7, #24
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	ff030135 	.word	0xff030135
 800f324:	24000258 	.word	0x24000258
 800f328:	0802a14c 	.word	0x0802a14c
 800f32c:	080264c4 	.word	0x080264c4
 800f330:	080276a0 	.word	0x080276a0

0800f334 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800f334:	b580      	push	{r7, lr}
 800f336:	b088      	sub	sp, #32
 800f338:	af04      	add	r7, sp, #16
 800f33a:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800f33c:	4a14      	ldr	r2, [pc, #80]	@ (800f390 <tx_dhcp_discover+0x5c>)
 800f33e:	f107 0308 	add.w	r3, r7, #8
 800f342:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f346:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800f34a:	2300      	movs	r3, #0
 800f34c:	9302      	str	r3, [sp, #8]
 800f34e:	2308      	movs	r3, #8
 800f350:	9301      	str	r3, [sp, #4]
 800f352:	f107 0308 	add.w	r3, r7, #8
 800f356:	9300      	str	r3, [sp, #0]
 800f358:	f04f 33ff 	mov.w	r3, #4294967295
 800f35c:	2200      	movs	r2, #0
 800f35e:	490d      	ldr	r1, [pc, #52]	@ (800f394 <tx_dhcp_discover+0x60>)
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f7ff fe4d 	bl	800f000 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800f366:	4b0c      	ldr	r3, [pc, #48]	@ (800f398 <tx_dhcp_discover+0x64>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b02      	cmp	r3, #2
 800f36c:	dd0c      	ble.n	800f388 <tx_dhcp_discover+0x54>
 800f36e:	4b0b      	ldr	r3, [pc, #44]	@ (800f39c <tx_dhcp_discover+0x68>)
 800f370:	f241 128c 	movw	r2, #4492	@ 0x118c
 800f374:	490a      	ldr	r1, [pc, #40]	@ (800f3a0 <tx_dhcp_discover+0x6c>)
 800f376:	2003      	movs	r0, #3
 800f378:	f7fe fce8 	bl	800dd4c <mg_log_prefix>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	461a      	mov	r2, r3
 800f380:	4908      	ldr	r1, [pc, #32]	@ (800f3a4 <tx_dhcp_discover+0x70>)
 800f382:	4809      	ldr	r0, [pc, #36]	@ (800f3a8 <tx_dhcp_discover+0x74>)
 800f384:	f7fe fd32 	bl	800ddec <mg_log>
}
 800f388:	bf00      	nop
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	080276d0 	.word	0x080276d0
 800f394:	08029bec 	.word	0x08029bec
 800f398:	24000258 	.word	0x24000258
 800f39c:	0802a160 	.word	0x0802a160
 800f3a0:	080264c4 	.word	0x080264c4
 800f3a4:	0801283d 	.word	0x0801283d
 800f3a8:	080276b0 	.word	0x080276b0

0800f3ac <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b086      	sub	sp, #24
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	617b      	str	r3, [r7, #20]
 800f3c4:	e057      	b.n	800f476 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f3cc:	f003 0310 	and.w	r3, r3, #16
 800f3d0:	b2db      	uxtb	r3, r3
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d010      	beq.n	800f3f8 <getpeer+0x4c>
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	699b      	ldr	r3, [r3, #24]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00c      	beq.n	800f3f8 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	699b      	ldr	r3, [r3, #24]
 800f3e2:	f103 000e 	add.w	r0, r3, #14
 800f3e6:	697b      	ldr	r3, [r7, #20]
 800f3e8:	331c      	adds	r3, #28
 800f3ea:	2204      	movs	r2, #4
 800f3ec:	4619      	mov	r1, r3
 800f3ee:	f016 f9a3 	bl	8025738 <memcmp>
 800f3f2:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d042      	beq.n	800f47e <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f3fe:	f003 0301 	and.w	r3, r3, #1
 800f402:	b2db      	uxtb	r3, r3
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00b      	beq.n	800f420 <getpeer+0x74>
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d007      	beq.n	800f420 <getpeer+0x74>
 800f410:	697b      	ldr	r3, [r7, #20]
 800f412:	8b1a      	ldrh	r2, [r3, #24]
 800f414:	68bb      	ldr	r3, [r7, #8]
 800f416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f418:	885b      	ldrh	r3, [r3, #2]
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d030      	beq.n	800f482 <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800f426:	f003 0301 	and.w	r3, r3, #1
 800f42a:	b2db      	uxtb	r3, r3
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d11f      	bne.n	800f470 <getpeer+0xc4>
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f434:	2b00      	cmp	r3, #0
 800f436:	d01b      	beq.n	800f470 <getpeer+0xc4>
 800f438:	697b      	ldr	r3, [r7, #20]
 800f43a:	8b1a      	ldrh	r2, [r3, #24]
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f440:	885b      	ldrh	r3, [r3, #2]
 800f442:	b29b      	uxth	r3, r3
 800f444:	429a      	cmp	r2, r3
 800f446:	d113      	bne.n	800f470 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f44e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f452:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800f454:	79fa      	ldrb	r2, [r7, #7]
 800f456:	429a      	cmp	r2, r3
 800f458:	d10a      	bne.n	800f470 <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800f45a:	79fb      	ldrb	r3, [r7, #7]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d111      	bne.n	800f484 <getpeer+0xd8>
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f468:	881b      	ldrh	r3, [r3, #0]
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d009      	beq.n	800f484 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	617b      	str	r3, [r7, #20]
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1a4      	bne.n	800f3c6 <getpeer+0x1a>
 800f47c:	e002      	b.n	800f484 <getpeer+0xd8>
      break;
 800f47e:	bf00      	nop
 800f480:	e000      	b.n	800f484 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800f482:	bf00      	nop
      break;
  }
  return c;
 800f484:	697b      	ldr	r3, [r7, #20]
}
 800f486:	4618      	mov	r0, r3
 800f488:	3718      	adds	r7, #24
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
	...

0800f490 <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f490:	b5b0      	push	{r4, r5, r7, lr}
 800f492:	b088      	sub	sp, #32
 800f494:	af02      	add	r7, sp, #8
 800f496:	6078      	str	r0, [r7, #4]
 800f498:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	699b      	ldr	r3, [r3, #24]
 800f49e:	88db      	ldrh	r3, [r3, #6]
 800f4a0:	b29c      	uxth	r4, r3
 800f4a2:	2001      	movs	r0, #1
 800f4a4:	f011 feec 	bl	8021280 <mg_ntohs>
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	429c      	cmp	r4, r3
 800f4ac:	d176      	bne.n	800f59c <rx_arp+0x10c>
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	699b      	ldr	r3, [r3, #24]
 800f4b2:	699a      	ldr	r2, [r3, #24]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	689b      	ldr	r3, [r3, #8]
 800f4b8:	429a      	cmp	r2, r3
 800f4ba:	d16f      	bne.n	800f59c <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	695b      	ldr	r3, [r3, #20]
 800f4c0:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	330e      	adds	r3, #14
 800f4c6:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800f4c8:	6978      	ldr	r0, [r7, #20]
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	691b      	ldr	r3, [r3, #16]
 800f4ce:	3306      	adds	r3, #6
 800f4d0:	2206      	movs	r2, #6
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	f016 fa8f 	bl	80259f6 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	3306      	adds	r3, #6
 800f4dc:	6879      	ldr	r1, [r7, #4]
 800f4de:	2206      	movs	r2, #6
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f016 fa88 	bl	80259f6 <memcpy>
    eth->type = mg_htons(0x806);
 800f4e6:	f640 0006 	movw	r0, #2054	@ 0x806
 800f4ea:	f011 fec9 	bl	8021280 <mg_ntohs>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	699a      	ldr	r2, [r3, #24]
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	6814      	ldr	r4, [r2, #0]
 800f4fe:	6850      	ldr	r0, [r2, #4]
 800f500:	6891      	ldr	r1, [r2, #8]
 800f502:	68d5      	ldr	r5, [r2, #12]
 800f504:	601c      	str	r4, [r3, #0]
 800f506:	6058      	str	r0, [r3, #4]
 800f508:	6099      	str	r1, [r3, #8]
 800f50a:	60dd      	str	r5, [r3, #12]
 800f50c:	6914      	ldr	r4, [r2, #16]
 800f50e:	6950      	ldr	r0, [r2, #20]
 800f510:	6991      	ldr	r1, [r2, #24]
 800f512:	611c      	str	r4, [r3, #16]
 800f514:	6158      	str	r0, [r3, #20]
 800f516:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800f518:	2002      	movs	r0, #2
 800f51a:	f011 feb1 	bl	8021280 <mg_ntohs>
 800f51e:	4603      	mov	r3, r0
 800f520:	461a      	mov	r2, r3
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	f103 0012 	add.w	r0, r3, #18
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	699b      	ldr	r3, [r3, #24]
 800f530:	3308      	adds	r3, #8
 800f532:	2206      	movs	r2, #6
 800f534:	4619      	mov	r1, r3
 800f536:	f016 fa5e 	bl	80259f6 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	3308      	adds	r3, #8
 800f53e:	6879      	ldr	r1, [r7, #4]
 800f540:	2206      	movs	r2, #6
 800f542:	4618      	mov	r0, r3
 800f544:	f016 fa57 	bl	80259f6 <memcpy>
    arp->tpa = pkt->arp->spa;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	699b      	ldr	r3, [r3, #24]
 800f54c:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	689a      	ldr	r2, [r3, #8]
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800f55e:	4b4e      	ldr	r3, [pc, #312]	@ (800f698 <rx_arp+0x208>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	2b02      	cmp	r3, #2
 800f564:	dd10      	ble.n	800f588 <rx_arp+0xf8>
 800f566:	4b4d      	ldr	r3, [pc, #308]	@ (800f69c <rx_arp+0x20c>)
 800f568:	f241 12b0 	movw	r2, #4528	@ 0x11b0
 800f56c:	494c      	ldr	r1, [pc, #304]	@ (800f6a0 <rx_arp+0x210>)
 800f56e:	2003      	movs	r0, #3
 800f570:	f7fe fbec 	bl	800dd4c <mg_log_prefix>
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	f103 0218 	add.w	r2, r3, #24
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	9300      	str	r3, [sp, #0]
 800f57e:	4b49      	ldr	r3, [pc, #292]	@ (800f6a4 <rx_arp+0x214>)
 800f580:	4949      	ldr	r1, [pc, #292]	@ (800f6a8 <rx_arp+0x218>)
 800f582:	484a      	ldr	r0, [pc, #296]	@ (800f6ac <rx_arp+0x21c>)
 800f584:	f7fe fc32 	bl	800ddec <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	f103 021c 	add.w	r2, r3, #28
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	4619      	mov	r1, r3
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f7ff fb45 	bl	800ec24 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800f59a:	e079      	b.n	800f690 <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	699b      	ldr	r3, [r3, #24]
 800f5a0:	88db      	ldrh	r3, [r3, #6]
 800f5a2:	b29c      	uxth	r4, r3
 800f5a4:	2002      	movs	r0, #2
 800f5a6:	f011 fe6b 	bl	8021280 <mg_ntohs>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	429c      	cmp	r4, r3
 800f5ae:	d16f      	bne.n	800f690 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	699b      	ldr	r3, [r3, #24]
 800f5b4:	3312      	adds	r3, #18
 800f5b6:	6879      	ldr	r1, [r7, #4]
 800f5b8:	2206      	movs	r2, #6
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f016 f8bc 	bl	8025738 <memcmp>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d163      	bne.n	800f68e <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	699b      	ldr	r3, [r3, #24]
 800f5ca:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	691b      	ldr	r3, [r3, #16]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d116      	bne.n	800f604 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	699b      	ldr	r3, [r3, #24]
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	2206      	movs	r2, #6
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	f016 fa06 	bl	80259f6 <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f5f0:	2b03      	cmp	r3, #3
 800f5f2:	d14d      	bne.n	800f690 <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2204      	movs	r2, #4
 800f5f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f7ff fb95 	bl	800ed2c <onstatechange>
 800f602:	e045      	b.n	800f690 <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f608:	2200      	movs	r2, #0
 800f60a:	6839      	ldr	r1, [r7, #0]
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7ff fecd 	bl	800f3ac <getpeer>
 800f612:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d03a      	beq.n	800f690 <rx_arp+0x200>
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f620:	f003 0310 	and.w	r3, r3, #16
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d032      	beq.n	800f690 <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	33b0      	adds	r3, #176	@ 0xb0
 800f62e:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	f103 001a 	add.w	r0, r3, #26
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	699b      	ldr	r3, [r3, #24]
 800f63a:	3308      	adds	r3, #8
 800f63c:	2206      	movs	r2, #6
 800f63e:	4619      	mov	r1, r3
 800f640:	f016 f9d9 	bl	80259f6 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800f644:	4b14      	ldr	r3, [pc, #80]	@ (800f698 <rx_arp+0x208>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2b02      	cmp	r3, #2
 800f64a:	dd15      	ble.n	800f678 <rx_arp+0x1e8>
 800f64c:	4b13      	ldr	r3, [pc, #76]	@ (800f69c <rx_arp+0x20c>)
 800f64e:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 800f652:	4913      	ldr	r1, [pc, #76]	@ (800f6a0 <rx_arp+0x210>)
 800f654:	2003      	movs	r0, #3
 800f656:	f7fe fb79 	bl	800dd4c <mg_log_prefix>
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f103 021c 	add.w	r2, r3, #28
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	331a      	adds	r3, #26
 800f668:	9301      	str	r3, [sp, #4]
 800f66a:	4b0e      	ldr	r3, [pc, #56]	@ (800f6a4 <rx_arp+0x214>)
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	4613      	mov	r3, r2
 800f670:	4a0d      	ldr	r2, [pc, #52]	@ (800f6a8 <rx_arp+0x218>)
 800f672:	480f      	ldr	r0, [pc, #60]	@ (800f6b0 <rx_arp+0x220>)
 800f674:	f7fe fbba 	bl	800ddec <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f67e:	f023 0310 	bic.w	r3, r3, #16
 800f682:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 800f686:	68f8      	ldr	r0, [r7, #12]
 800f688:	f002 fa69 	bl	8011b5e <mac_resolved>
 800f68c:	e000      	b.n	800f690 <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800f68e:	bf00      	nop
      }
    }
  }
}
 800f690:	3718      	adds	r7, #24
 800f692:	46bd      	mov	sp, r7
 800f694:	bdb0      	pop	{r4, r5, r7, pc}
 800f696:	bf00      	nop
 800f698:	24000258 	.word	0x24000258
 800f69c:	0802a174 	.word	0x0802a174
 800f6a0:	080264c4 	.word	0x080264c4
 800f6a4:	0801283d 	.word	0x0801283d
 800f6a8:	08012779 	.word	0x08012779
 800f6ac:	080276d8 	.word	0x080276d8
 800f6b0:	080276f0 	.word	0x080276f0

0800f6b4 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b08a      	sub	sp, #40	@ 0x28
 800f6b8:	af02      	add	r7, sp, #8
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	2b08      	cmp	r3, #8
 800f6c6:	d14d      	bne.n	800f764 <rx_icmp+0xb0>
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	69db      	ldr	r3, [r3, #28]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d049      	beq.n	800f764 <rx_icmp+0xb0>
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	69db      	ldr	r3, [r3, #28]
 800f6d4:	691a      	ldr	r2, [r3, #16]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	689b      	ldr	r3, [r3, #8]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d142      	bne.n	800f764 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800f6de:	2326      	movs	r3, #38	@ 0x26
 800f6e0:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	699a      	ldr	r2, [r3, #24]
 800f6e6:	69bb      	ldr	r3, [r7, #24]
 800f6e8:	1ad3      	subs	r3, r2, r3
 800f6ea:	617b      	str	r3, [r7, #20]
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800f6f2:	69fa      	ldr	r2, [r7, #28]
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	429a      	cmp	r2, r3
 800f6f8:	d901      	bls.n	800f6fe <rx_icmp+0x4a>
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	691b      	ldr	r3, [r3, #16]
 800f702:	1d99      	adds	r1, r3, #6
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6898      	ldr	r0, [r3, #8]
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	69fa      	ldr	r2, [r7, #28]
 800f710:	3204      	adds	r2, #4
 800f712:	9201      	str	r2, [sp, #4]
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	4603      	mov	r3, r0
 800f718:	2201      	movs	r2, #1
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f7ff fbb0 	bl	800ee80 <tx_ip>
 800f720:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	3314      	adds	r3, #20
 800f726:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800f728:	2204      	movs	r2, #4
 800f72a:	2100      	movs	r1, #0
 800f72c:	68f8      	ldr	r0, [r7, #12]
 800f72e:	f016 f82d 	bl	802578c <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	1d18      	adds	r0, r3, #4
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	69fa      	ldr	r2, [r7, #28]
 800f73c:	4619      	mov	r1, r3
 800f73e:	f016 f95a 	bl	80259f6 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	3304      	adds	r3, #4
 800f746:	4619      	mov	r1, r3
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f7ff f9f3 	bl	800eb34 <ipcsum>
 800f74e:	4603      	mov	r3, r0
 800f750:	461a      	mov	r2, r3
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800f756:	69ba      	ldr	r2, [r7, #24]
 800f758:	69fb      	ldr	r3, [r7, #28]
 800f75a:	4413      	add	r3, r2
 800f75c:	4619      	mov	r1, r3
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f7ff fa60 	bl	800ec24 <ether_output>
  }
}
 800f764:	bf00      	nop
 800f766:	3720      	adds	r7, #32
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f76c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f770:	b090      	sub	sp, #64	@ 0x40
 800f772:	af00      	add	r7, sp, #0
 800f774:	60f8      	str	r0, [r7, #12]
 800f776:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 800f778:	2300      	movs	r3, #0
 800f77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f77c:	2300      	movs	r3, #0
 800f77e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f780:	2300      	movs	r3, #0
 800f782:	627b      	str	r3, [r7, #36]	@ 0x24
 800f784:	2300      	movs	r3, #0
 800f786:	623b      	str	r3, [r7, #32]
 800f788:	2300      	movs	r3, #0
 800f78a:	61fb      	str	r3, [r7, #28]
 800f78c:	2300      	movs	r3, #0
 800f78e:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800f790:	2300      	movs	r3, #0
 800f792:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f79c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7a4:	33f0      	adds	r3, #240	@ 0xf0
 800f7a6:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	681a      	ldr	r2, [r3, #0]
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7b8:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800f7bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	f0c0 81ac 	bcc.w	800fb1c <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7c8:	1d18      	adds	r0, r3, #4
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	3302      	adds	r3, #2
 800f7ce:	2204      	movs	r2, #4
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	f015 ffb1 	bl	8025738 <memcmp>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f040 81a1 	bne.w	800fb20 <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800f7de:	e08a      	b.n	800f8f6 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800f7e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	2b01      	cmp	r3, #1
 800f7e6:	d10e      	bne.n	800f806 <rx_dhcp_client+0x9a>
 800f7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	2b04      	cmp	r3, #4
 800f7f0:	d109      	bne.n	800f806 <rx_dhcp_client+0x9a>
 800f7f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7f4:	3306      	adds	r3, #6
 800f7f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d904      	bls.n	800f806 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 800f7fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7fe:	3302      	adds	r3, #2
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	627b      	str	r3, [r7, #36]	@ 0x24
 800f804:	e070      	b.n	800f8e8 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800f806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	2b03      	cmp	r3, #3
 800f80c:	d112      	bne.n	800f834 <rx_dhcp_client+0xc8>
 800f80e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f810:	3301      	adds	r3, #1
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	2b04      	cmp	r3, #4
 800f816:	d10d      	bne.n	800f834 <rx_dhcp_client+0xc8>
 800f818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f81a:	3306      	adds	r3, #6
 800f81c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f81e:	429a      	cmp	r2, r3
 800f820:	d908      	bls.n	800f834 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 800f822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f824:	3302      	adds	r3, #2
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f832:	e059      	b.n	800f8e8 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	7fdb      	ldrb	r3, [r3, #31]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d012      	beq.n	800f862 <rx_dhcp_client+0xf6>
 800f83c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	2b06      	cmp	r3, #6
 800f842:	d10e      	bne.n	800f862 <rx_dhcp_client+0xf6>
 800f844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f846:	3301      	adds	r3, #1
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	2b04      	cmp	r3, #4
 800f84c:	d109      	bne.n	800f862 <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 800f84e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f850:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800f852:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f854:	429a      	cmp	r2, r3
 800f856:	d904      	bls.n	800f862 <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 800f858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f85a:	3302      	adds	r3, #2
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	61fb      	str	r3, [r7, #28]
 800f860:	e042      	b.n	800f8e8 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d012      	beq.n	800f892 <rx_dhcp_client+0x126>
 800f86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	2b2a      	cmp	r3, #42	@ 0x2a
 800f872:	d10e      	bne.n	800f892 <rx_dhcp_client+0x126>
 800f874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f876:	3301      	adds	r3, #1
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	2b04      	cmp	r3, #4
 800f87c:	d109      	bne.n	800f892 <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 800f87e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f880:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800f882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f884:	429a      	cmp	r2, r3
 800f886:	d904      	bls.n	800f892 <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 800f888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f88a:	3302      	adds	r3, #2
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	61bb      	str	r3, [r7, #24]
 800f890:	e02a      	b.n	800f8e8 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800f892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	2b33      	cmp	r3, #51	@ 0x33
 800f898:	d114      	bne.n	800f8c4 <rx_dhcp_client+0x158>
 800f89a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f89c:	3301      	adds	r3, #1
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	2b04      	cmp	r3, #4
 800f8a2:	d10f      	bne.n	800f8c4 <rx_dhcp_client+0x158>
 800f8a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8a6:	3306      	adds	r3, #6
 800f8a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d90a      	bls.n	800f8c4 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 800f8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8b0:	3302      	adds	r3, #2
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 800f8b6:	6a3b      	ldr	r3, [r7, #32]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f011 fcf8 	bl	80212ae <mg_ntohl>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	623b      	str	r3, [r7, #32]
 800f8c2:	e011      	b.n	800f8e8 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800f8c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	2b35      	cmp	r3, #53	@ 0x35
 800f8ca:	d10d      	bne.n	800f8e8 <rx_dhcp_client+0x17c>
 800f8cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d108      	bne.n	800f8e8 <rx_dhcp_client+0x17c>
 800f8d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8d8:	3306      	adds	r3, #6
 800f8da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	d903      	bls.n	800f8e8 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 800f8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8e2:	789b      	ldrb	r3, [r3, #2]
 800f8e4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 800f8e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	3302      	adds	r3, #2
 800f8f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f8f2:	4413      	add	r3, r2
 800f8f4:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800f8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d904      	bls.n	800f90a <rx_dhcp_client+0x19e>
 800f900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	2bff      	cmp	r3, #255	@ 0xff
 800f906:	f47f af6b 	bne.w	800f7e0 <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800f90a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f90e:	2b06      	cmp	r3, #6
 800f910:	d10c      	bne.n	800f92c <rx_dhcp_client+0x1c0>
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f918:	429a      	cmp	r2, r3
 800f91a:	d107      	bne.n	800f92c <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2201      	movs	r2, #1
 800f920:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2200      	movs	r2, #0
 800f928:	609a      	str	r2, [r3, #8]
 800f92a:	e0ec      	b.n	800fb06 <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800f92c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f930:	2b02      	cmp	r3, #2
 800f932:	d123      	bne.n	800f97c <rx_dhcp_client+0x210>
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f93a:	2b01      	cmp	r3, #1
 800f93c:	d11e      	bne.n	800f97c <rx_dhcp_client+0x210>
 800f93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f940:	2b00      	cmp	r3, #0
 800f942:	d01b      	beq.n	800f97c <rx_dhcp_client+0x210>
 800f944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f946:	2b00      	cmp	r3, #0
 800f948:	d018      	beq.n	800f97c <rx_dhcp_client+0x210>
 800f94a:	6a3b      	ldr	r3, [r7, #32]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d015      	beq.n	800f97c <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f954:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 800f956:	2b00      	cmp	r3, #0
 800f958:	d003      	beq.n	800f962 <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 800f95e:	695b      	ldr	r3, [r3, #20]
 800f960:	e002      	b.n	800f968 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	461a      	mov	r2, r3
 800f96a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f96c:	68f8      	ldr	r0, [r7, #12]
 800f96e:	f7ff fbd7 	bl	800f120 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2202      	movs	r2, #2
 800f976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800f97a:	e0c4      	b.n	800fb06 <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 800f97c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800f980:	2b05      	cmp	r3, #5
 800f982:	f040 80c0 	bne.w	800fb06 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f98c:	2b02      	cmp	r3, #2
 800f98e:	f040 8081 	bne.w	800fa94 <rx_dhcp_client+0x328>
 800f992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f994:	2b00      	cmp	r3, #0
 800f996:	d07d      	beq.n	800fa94 <rx_dhcp_client+0x328>
 800f998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d07a      	beq.n	800fa94 <rx_dhcp_client+0x328>
 800f99e:	6a3b      	ldr	r3, [r7, #32]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d077      	beq.n	800fa94 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800f9aa:	6a39      	ldr	r1, [r7, #32]
 800f9ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800f9b0:	fb00 f101 	mul.w	r1, r0, r1
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	4688      	mov	r8, r1
 800f9b8:	4681      	mov	r9, r0
 800f9ba:	eb12 0108 	adds.w	r1, r2, r8
 800f9be:	6039      	str	r1, [r7, #0]
 800f9c0:	eb43 0309 	adc.w	r3, r3, r9
 800f9c4:	607b      	str	r3, [r7, #4]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f9cc:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800f9d0:	4b56      	ldr	r3, [pc, #344]	@ (800fb2c <rx_dhcp_client+0x3c0>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	dd16      	ble.n	800fa06 <rx_dhcp_client+0x29a>
 800f9d8:	4b55      	ldr	r3, [pc, #340]	@ (800fb30 <rx_dhcp_client+0x3c4>)
 800f9da:	f241 2202 	movw	r2, #4610	@ 0x1202
 800f9de:	4955      	ldr	r1, [pc, #340]	@ (800fb34 <rx_dhcp_client+0x3c8>)
 800f9e0:	2002      	movs	r0, #2
 800f9e2:	f7fe f9b3 	bl	800dd4c <mg_log_prefix>
 800f9e6:	6a3c      	ldr	r4, [r7, #32]
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800f9ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f9f2:	f04f 0300 	mov.w	r3, #0
 800f9f6:	f7f0 fcf3 	bl	80003e0 <__aeabi_uldivmod>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	4621      	mov	r1, r4
 800fa00:	484d      	ldr	r0, [pc, #308]	@ (800fb38 <rx_dhcp_client+0x3cc>)
 800fa02:	f7fe f9f3 	bl	800ddec <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	691b      	ldr	r3, [r3, #16]
 800fa10:	3306      	adds	r3, #6
 800fa12:	2206      	movs	r2, #6
 800fa14:	4619      	mov	r1, r3
 800fa16:	f015 ffee 	bl	80259f6 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800fa1e:	609a      	str	r2, [r3, #8]
 800fa20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	611a      	str	r2, [r3, #16]
 800fa26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2203      	movs	r2, #3
 800fa30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800fa34:	f107 0310 	add.w	r3, r7, #16
 800fa38:	2108      	movs	r1, #8
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7f0 fe66 	bl	800070c <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800fa40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fa44:	4614      	mov	r4, r2
 800fa46:	f7f0 fe8f 	bl	8000768 <mg_millis>
 800fa4a:	4602      	mov	r2, r0
 800fa4c:	460b      	mov	r3, r1
 800fa4e:	4613      	mov	r3, r2
 800fa50:	4423      	add	r3, r4
 800fa52:	4618      	mov	r0, r3
 800fa54:	f015 fb9a 	bl	802518c <srand>
      if (ifp->enable_req_dns && dns != 0)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	7fdb      	ldrb	r3, [r3, #31]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d009      	beq.n	800fa74 <rx_dhcp_client+0x308>
 800fa60:	69fb      	ldr	r3, [r7, #28]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d006      	beq.n	800fa74 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 800fa66:	f107 031c 	add.w	r3, r7, #28
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	2101      	movs	r1, #1
 800fa6e:	68f8      	ldr	r0, [r7, #12]
 800fa70:	f7fe ffe8 	bl	800ea44 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d042      	beq.n	800fb04 <rx_dhcp_client+0x398>
 800fa7e:	69bb      	ldr	r3, [r7, #24]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d03f      	beq.n	800fb04 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 800fa84:	f107 0318 	add.w	r3, r7, #24
 800fa88:	461a      	mov	r2, r3
 800fa8a:	2102      	movs	r1, #2
 800fa8c:	68f8      	ldr	r0, [r7, #12]
 800fa8e:	f7fe ffd9 	bl	800ea44 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800fa92:	e037      	b.n	800fb04 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa9a:	2b04      	cmp	r3, #4
 800fa9c:	d133      	bne.n	800fb06 <rx_dhcp_client+0x39a>
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d12e      	bne.n	800fb06 <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800faae:	6a39      	ldr	r1, [r7, #32]
 800fab0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fab4:	fb00 f101 	mul.w	r1, r0, r1
 800fab8:	2000      	movs	r0, #0
 800faba:	460c      	mov	r4, r1
 800fabc:	4605      	mov	r5, r0
 800fabe:	eb12 0a04 	adds.w	sl, r2, r4
 800fac2:	eb43 0b05 	adc.w	fp, r3, r5
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800facc:	4b17      	ldr	r3, [pc, #92]	@ (800fb2c <rx_dhcp_client+0x3c0>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	dd18      	ble.n	800fb06 <rx_dhcp_client+0x39a>
 800fad4:	4b16      	ldr	r3, [pc, #88]	@ (800fb30 <rx_dhcp_client+0x3c4>)
 800fad6:	f241 2210 	movw	r2, #4624	@ 0x1210
 800fada:	4916      	ldr	r1, [pc, #88]	@ (800fb34 <rx_dhcp_client+0x3c8>)
 800fadc:	2002      	movs	r0, #2
 800fade:	f7fe f935 	bl	800dd4c <mg_log_prefix>
 800fae2:	6a3c      	ldr	r4, [r7, #32]
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800faea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800faee:	f04f 0300 	mov.w	r3, #0
 800faf2:	f7f0 fc75 	bl	80003e0 <__aeabi_uldivmod>
 800faf6:	4602      	mov	r2, r0
 800faf8:	460b      	mov	r3, r1
 800fafa:	4621      	mov	r1, r4
 800fafc:	480e      	ldr	r0, [pc, #56]	@ (800fb38 <rx_dhcp_client+0x3cc>)
 800fafe:	f7fe f975 	bl	800ddec <mg_log>
 800fb02:	e000      	b.n	800fb06 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800fb04:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb0c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d006      	beq.n	800fb22 <rx_dhcp_client+0x3b6>
 800fb14:	68f8      	ldr	r0, [r7, #12]
 800fb16:	f7ff f909 	bl	800ed2c <onstatechange>
 800fb1a:	e002      	b.n	800fb22 <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800fb1c:	bf00      	nop
 800fb1e:	e000      	b.n	800fb22 <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800fb20:	bf00      	nop
}
 800fb22:	3740      	adds	r7, #64	@ 0x40
 800fb24:	46bd      	mov	sp, r7
 800fb26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fb2a:	bf00      	nop
 800fb2c:	24000258 	.word	0x24000258
 800fb30:	0802a17c 	.word	0x0802a17c
 800fb34:	080264c4 	.word	0x080264c4
 800fb38:	0802770c 	.word	0x0802770c

0800fb3c <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800fb3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb40:	b0d8      	sub	sp, #352	@ 0x160
 800fb42:	af04      	add	r7, sp, #16
 800fb44:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fb48:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fb4c:	6018      	str	r0, [r3, #0]
 800fb4e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fb52:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fb56:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 800fb5e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fb62:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb6a:	33f0      	adds	r3, #240	@ 0xf0
 800fb6c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800fb70:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fb74:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	681a      	ldr	r2, [r3, #0]
 800fb7c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fb80:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	685b      	ldr	r3, [r3, #4]
 800fb88:	4413      	add	r3, r2
 800fb8a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800fb8e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fb92:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb9a:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800fb9e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800fba2:	429a      	cmp	r2, r3
 800fba4:	f0c0 81b0 	bcc.w	800ff08 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800fba8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fbac:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fbb0:	4ad8      	ldr	r2, [pc, #864]	@ (800ff14 <rx_dhcp_server+0x3d8>)
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	4611      	mov	r1, r2
 800fbb6:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800fbba:	461a      	mov	r2, r3
 800fbbc:	f015 ff1b 	bl	80259f6 <memcpy>
  res.yiaddr = ifp->ip;
 800fbc0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fbc4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	689a      	ldr	r2, [r3, #8]
 800fbcc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fbd0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fbd4:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800fbd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fbda:	3310      	adds	r3, #16
 800fbdc:	3303      	adds	r3, #3
 800fbde:	781a      	ldrb	r2, [r3, #0]
 800fbe0:	3201      	adds	r2, #1
 800fbe2:	b2d2      	uxtb	r2, r2
 800fbe4:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800fbe6:	e020      	b.n	800fc2a <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800fbe8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	2b35      	cmp	r3, #53	@ 0x35
 800fbf0:	d111      	bne.n	800fc16 <rx_dhcp_server+0xda>
 800fbf2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d10b      	bne.n	800fc16 <rx_dhcp_server+0xda>
 800fbfe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fc02:	3302      	adds	r3, #2
 800fc04:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d904      	bls.n	800fc16 <rx_dhcp_server+0xda>
      op = p[2];
 800fc0c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fc10:	789b      	ldrb	r3, [r3, #2]
 800fc12:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
    }
    p += p[1] + 2;
 800fc16:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	781b      	ldrb	r3, [r3, #0]
 800fc1e:	3302      	adds	r3, #2
 800fc20:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800fc24:	4413      	add	r3, r2
 800fc26:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800fc2a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fc2e:	3301      	adds	r3, #1
 800fc30:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d904      	bls.n	800fc42 <rx_dhcp_server+0x106>
 800fc38:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	2bff      	cmp	r3, #255	@ 0xff
 800fc40:	d1d2      	bne.n	800fbe8 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800fc42:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d004      	beq.n	800fc54 <rx_dhcp_server+0x118>
 800fc4a:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800fc4e:	2b03      	cmp	r3, #3
 800fc50:	f040 815b 	bne.w	800ff0a <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800fc54:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800fc58:	2b01      	cmp	r3, #1
 800fc5a:	d101      	bne.n	800fc60 <rx_dhcp_server+0x124>
 800fc5c:	2302      	movs	r3, #2
 800fc5e:	e000      	b.n	800fc62 <rx_dhcp_server+0x126>
 800fc60:	2305      	movs	r3, #5
 800fc62:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
    uint8_t opts[] = {
 800fc66:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fc6a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fc6e:	2235      	movs	r2, #53	@ 0x35
 800fc70:	701a      	strb	r2, [r3, #0]
 800fc72:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fc76:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fc7a:	2201      	movs	r2, #1
 800fc7c:	705a      	strb	r2, [r3, #1]
 800fc7e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fc82:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fc86:	f897 2143 	ldrb.w	r2, [r7, #323]	@ 0x143
 800fc8a:	709a      	strb	r2, [r3, #2]
 800fc8c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fc90:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fc94:	2201      	movs	r2, #1
 800fc96:	70da      	strb	r2, [r3, #3]
 800fc98:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fc9c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fca0:	2204      	movs	r2, #4
 800fca2:	711a      	strb	r2, [r3, #4]
 800fca4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fca8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fcac:	2200      	movs	r2, #0
 800fcae:	715a      	strb	r2, [r3, #5]
 800fcb0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fcb4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fcb8:	2200      	movs	r2, #0
 800fcba:	719a      	strb	r2, [r3, #6]
 800fcbc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fcc0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	71da      	strb	r2, [r3, #7]
 800fcc8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fccc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	721a      	strb	r2, [r3, #8]
 800fcd4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fcd8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fcdc:	2236      	movs	r2, #54	@ 0x36
 800fcde:	725a      	strb	r2, [r3, #9]
 800fce0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fce4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fce8:	2204      	movs	r2, #4
 800fcea:	729a      	strb	r2, [r3, #10]
 800fcec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fcf0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	72da      	strb	r2, [r3, #11]
 800fcf8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fcfc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd00:	2200      	movs	r2, #0
 800fd02:	731a      	strb	r2, [r3, #12]
 800fd04:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd08:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	735a      	strb	r2, [r3, #13]
 800fd10:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd14:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd18:	2200      	movs	r2, #0
 800fd1a:	739a      	strb	r2, [r3, #14]
 800fd1c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd20:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd24:	220c      	movs	r2, #12
 800fd26:	73da      	strb	r2, [r3, #15]
 800fd28:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd2c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd30:	2203      	movs	r2, #3
 800fd32:	741a      	strb	r2, [r3, #16]
 800fd34:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd38:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd3c:	226d      	movs	r2, #109	@ 0x6d
 800fd3e:	745a      	strb	r2, [r3, #17]
 800fd40:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd44:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd48:	2269      	movs	r2, #105	@ 0x69
 800fd4a:	749a      	strb	r2, [r3, #18]
 800fd4c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd50:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd54:	2270      	movs	r2, #112	@ 0x70
 800fd56:	74da      	strb	r2, [r3, #19]
 800fd58:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd5c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd60:	2233      	movs	r2, #51	@ 0x33
 800fd62:	751a      	strb	r2, [r3, #20]
 800fd64:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd68:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd6c:	2204      	movs	r2, #4
 800fd6e:	755a      	strb	r2, [r3, #21]
 800fd70:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd74:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd78:	22ff      	movs	r2, #255	@ 0xff
 800fd7a:	759a      	strb	r2, [r3, #22]
 800fd7c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd80:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd84:	22ff      	movs	r2, #255	@ 0xff
 800fd86:	75da      	strb	r2, [r3, #23]
 800fd88:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd8c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd90:	22ff      	movs	r2, #255	@ 0xff
 800fd92:	761a      	strb	r2, [r3, #24]
 800fd94:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fd98:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fd9c:	22ff      	movs	r2, #255	@ 0xff
 800fd9e:	765a      	strb	r2, [r3, #25]
 800fda0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fda4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800fda8:	22ff      	movs	r2, #255	@ 0xff
 800fdaa:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800fdac:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fdb0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdb8:	f103 011c 	add.w	r1, r3, #28
 800fdbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fdc0:	331c      	adds	r3, #28
 800fdc2:	2206      	movs	r2, #6
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f015 fe16 	bl	80259f6 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800fdca:	f107 030c 	add.w	r3, r7, #12
 800fdce:	3305      	adds	r3, #5
 800fdd0:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800fdd4:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800fdd8:	6812      	ldr	r2, [r2, #0]
 800fdda:	320c      	adds	r2, #12
 800fddc:	6812      	ldr	r2, [r2, #0]
 800fdde:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800fde0:	f107 030c 	add.w	r3, r7, #12
 800fde4:	330b      	adds	r3, #11
 800fde6:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800fdea:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800fdee:	6812      	ldr	r2, [r2, #0]
 800fdf0:	3208      	adds	r2, #8
 800fdf2:	6812      	ldr	r2, [r2, #0]
 800fdf4:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800fdf6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fdfa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fdfe:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800fe02:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800fe06:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800fe0a:	4615      	mov	r5, r2
 800fe0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fe0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fe10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fe14:	c403      	stmia	r4!, {r0, r1}
 800fe16:	8022      	strh	r2, [r4, #0]
 800fe18:	3402      	adds	r4, #2
 800fe1a:	0c13      	lsrs	r3, r2, #16
 800fe1c:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800fe1e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fe22:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe2a:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800fe2e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fe32:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fe36:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800fe3a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fe3e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe46:	685a      	ldr	r2, [r3, #4]
 800fe48:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fe4c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fe50:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800fe52:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fe56:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	7f9b      	ldrb	r3, [r3, #30]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d01c      	beq.n	800fe9c <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 800fe62:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fe66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fe6a:	691a      	ldr	r2, [r3, #16]
 800fe6c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fe70:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800fe78:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fe7c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800fe86:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fe8a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	691b      	ldr	r3, [r3, #16]
 800fe92:	3306      	adds	r3, #6
 800fe94:	2206      	movs	r2, #6
 800fe96:	4619      	mov	r1, r3
 800fe98:	f015 fdad 	bl	80259f6 <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800fe9c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fea0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	691b      	ldr	r3, [r3, #16]
 800fea8:	1d9d      	adds	r5, r3, #6
 800feaa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800feae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	689e      	ldr	r6, [r3, #8]
 800feb6:	2043      	movs	r0, #67	@ 0x43
 800feb8:	f011 f9e2 	bl	8021280 <mg_ntohs>
 800febc:	4603      	mov	r3, r0
 800febe:	4698      	mov	r8, r3
 800fec0:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d005      	beq.n	800fed4 <rx_dhcp_server+0x398>
 800fec8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fecc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fed0:	691c      	ldr	r4, [r3, #16]
 800fed2:	e001      	b.n	800fed8 <rx_dhcp_server+0x39c>
 800fed4:	f04f 34ff 	mov.w	r4, #4294967295
 800fed8:	2044      	movs	r0, #68	@ 0x44
 800feda:	f011 f9d1 	bl	8021280 <mg_ntohs>
 800fede:	4603      	mov	r3, r0
 800fee0:	461a      	mov	r2, r3
 800fee2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800fee6:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 800feea:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800feee:	9303      	str	r3, [sp, #12]
 800fef0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fef4:	9302      	str	r3, [sp, #8]
 800fef6:	9201      	str	r2, [sp, #4]
 800fef8:	9400      	str	r4, [sp, #0]
 800fefa:	4643      	mov	r3, r8
 800fefc:	4632      	mov	r2, r6
 800fefe:	4629      	mov	r1, r5
 800ff00:	6800      	ldr	r0, [r0, #0]
 800ff02:	f7ff f814 	bl	800ef2e <tx_udp>
 800ff06:	e000      	b.n	800ff0a <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ff08:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800ff0a:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff14:	08027724 	.word	0x08027724

0800ff18 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b084      	sub	sp, #16
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
 800ff20:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff26:	2201      	movs	r2, #1
 800ff28:	6839      	ldr	r1, [r7, #0]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7ff fa3e 	bl	800f3ac <getpeer>
 800ff30:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d059      	beq.n	800ffec <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff3c:	881b      	ldrh	r3, [r3, #0]
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	331c      	adds	r3, #28
 800ff48:	683a      	ldr	r2, [r7, #0]
 800ff4a:	69d2      	ldr	r2, [r2, #28]
 800ff4c:	320c      	adds	r2, #12
 800ff4e:	6812      	ldr	r2, [r2, #0]
 800ff50:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	33b0      	adds	r3, #176	@ 0xb0
 800ff56:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	f103 001a 	add.w	r0, r3, #26
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	691b      	ldr	r3, [r3, #16]
 800ff62:	3306      	adds	r3, #6
 800ff64:	2206      	movs	r2, #6
 800ff66:	4619      	mov	r1, r3
 800ff68:	f015 fd45 	bl	80259f6 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff70:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ff74:	d304      	bcc.n	800ff80 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800ff76:	491f      	ldr	r1, [pc, #124]	@ (800fff4 <rx_udp+0xdc>)
 800ff78:	68f8      	ldr	r0, [r7, #12]
 800ff7a:	f7f8 f9bb 	bl	80082f4 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800ff7e:	e035      	b.n	800ffec <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff88:	1ad2      	subs	r2, r2, r3
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	429a      	cmp	r2, r3
 800ff90:	d212      	bcs.n	800ffb8 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	68db      	ldr	r3, [r3, #12]
 800ffa0:	4413      	add	r3, r2
 800ffa2:	4619      	mov	r1, r3
 800ffa4:	f7fc ff28 	bl	800cdf8 <mg_iobuf_resize>
 800ffa8:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d104      	bne.n	800ffb8 <rx_udp+0xa0>
      mg_error(c, "oom");
 800ffae:	4912      	ldr	r1, [pc, #72]	@ (800fff8 <rx_udp+0xe0>)
 800ffb0:	68f8      	ldr	r0, [r7, #12]
 800ffb2:	f7f8 f99f 	bl	80082f4 <mg_error>
}
 800ffb6:	e019      	b.n	800ffec <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ffc0:	18d0      	adds	r0, r2, r3
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	6899      	ldr	r1, [r3, #8]
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	f015 fd13 	bl	80259f6 <memcpy>
      c->recv.len += pkt->pay.len;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	68db      	ldr	r3, [r3, #12]
 800ffd8:	441a      	add	r2, r3
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	330c      	adds	r3, #12
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	2107      	movs	r1, #7
 800ffe6:	68f8      	ldr	r0, [r7, #12]
 800ffe8:	f7f8 f964 	bl	80082b4 <mg_call>
}
 800ffec:	bf00      	nop
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}
 800fff4:	08027840 	.word	0x08027840
 800fff8:	0802785c 	.word	0x0802785c

0800fffc <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800fffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fffe:	b091      	sub	sp, #68	@ 0x44
 8010000:	af06      	add	r7, sp, #24
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
 8010008:	70fb      	strb	r3, [r7, #3]
  struct ip *ip;
  struct tcp *tcp;
  uint16_t opts[4 / 2];
  if (flags & TH_SYN) {                 // Send MSS, RFC-9293 3.7.1
 801000a:	78fb      	ldrb	r3, [r7, #3]
 801000c:	f003 0302 	and.w	r3, r3, #2
 8010010:	2b00      	cmp	r3, #0
 8010012:	d014      	beq.n	801003e <tx_tcp+0x42>
    opts[0] = mg_htons(0x0204);         // RFC-9293 3.2
 8010014:	f44f 7001 	mov.w	r0, #516	@ 0x204
 8010018:	f011 f932 	bl	8021280 <mg_ntohs>
 801001c:	4603      	mov	r3, r0
 801001e:	82bb      	strh	r3, [r7, #20]
    opts[1] = mg_htons(ifp->mtu - 40);  // RFC-6691
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010026:	3b28      	subs	r3, #40	@ 0x28
 8010028:	b29b      	uxth	r3, r3
 801002a:	4618      	mov	r0, r3
 801002c:	f011 f928 	bl	8021280 <mg_ntohs>
 8010030:	4603      	mov	r3, r0
 8010032:	82fb      	strh	r3, [r7, #22]
    buf = opts;
 8010034:	f107 0314 	add.w	r3, r7, #20
 8010038:	653b      	str	r3, [r7, #80]	@ 0x50
    len = sizeof(opts);
 801003a:	2304      	movs	r3, #4
 801003c:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  ip = tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	689a      	ldr	r2, [r3, #8]
 8010042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010044:	3314      	adds	r3, #20
 8010046:	9301      	str	r3, [sp, #4]
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	9300      	str	r3, [sp, #0]
 801004c:	4613      	mov	r3, r2
 801004e:	2206      	movs	r2, #6
 8010050:	68b9      	ldr	r1, [r7, #8]
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f7fe ff14 	bl	800ee80 <tx_ip>
 8010058:	6278      	str	r0, [r7, #36]	@ 0x24
  tcp = (struct tcp *) (ip + 1);
 801005a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801005c:	3314      	adds	r3, #20
 801005e:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 8010060:	2214      	movs	r2, #20
 8010062:	2100      	movs	r1, #0
 8010064:	6a38      	ldr	r0, [r7, #32]
 8010066:	f015 fb91 	bl	802578c <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 801006a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801006c:	2b00      	cmp	r3, #0
 801006e:	d009      	beq.n	8010084 <tx_tcp+0x88>
 8010070:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010072:	2b00      	cmp	r3, #0
 8010074:	d006      	beq.n	8010084 <tx_tcp+0x88>
 8010076:	6a3b      	ldr	r3, [r7, #32]
 8010078:	3314      	adds	r3, #20
 801007a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801007c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801007e:	4618      	mov	r0, r3
 8010080:	f015 fb6a 	bl	8025758 <memmove>
  tcp->sport = sport;
 8010084:	6a3b      	ldr	r3, [r7, #32]
 8010086:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801008a:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 801008c:	6a3b      	ldr	r3, [r7, #32]
 801008e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8010092:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 8010094:	6a3b      	ldr	r3, [r7, #32]
 8010096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010098:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 801009a:	6a3b      	ldr	r3, [r7, #32]
 801009c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801009e:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 80100a0:	6a3b      	ldr	r3, [r7, #32]
 80100a2:	78fa      	ldrb	r2, [r7, #3]
 80100a4:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 80100a6:	f241 7070 	movw	r0, #6000	@ 0x1770
 80100aa:	f011 f8e9 	bl	8021280 <mg_ntohs>
 80100ae:	4603      	mov	r3, r0
 80100b0:	461a      	mov	r2, r3
 80100b2:	6a3b      	ldr	r3, [r7, #32]
 80100b4:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 80100b6:	6a3b      	ldr	r3, [r7, #32]
 80100b8:	2250      	movs	r2, #80	@ 0x50
 80100ba:	731a      	strb	r2, [r3, #12]
  if (flags & TH_SYN) tcp->off += (uint8_t) (sizeof(opts) / 4 << 4);
 80100bc:	78fb      	ldrb	r3, [r7, #3]
 80100be:	f003 0302 	and.w	r3, r3, #2
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d005      	beq.n	80100d2 <tx_tcp+0xd6>
 80100c6:	6a3b      	ldr	r3, [r7, #32]
 80100c8:	7b1b      	ldrb	r3, [r3, #12]
 80100ca:	3310      	adds	r3, #16
 80100cc:	b2da      	uxtb	r2, r3
 80100ce:	6a3b      	ldr	r3, [r7, #32]
 80100d0:	731a      	strb	r2, [r3, #12]

  uint32_t cs = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 80100d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80100d8:	b29b      	uxth	r3, r3
 80100da:	3314      	adds	r3, #20
 80100dc:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 80100de:	2300      	movs	r3, #0
 80100e0:	743b      	strb	r3, [r7, #16]
 80100e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100e4:	7a5b      	ldrb	r3, [r3, #9]
 80100e6:	747b      	strb	r3, [r7, #17]
 80100e8:	8b7b      	ldrh	r3, [r7, #26]
 80100ea:	0a1b      	lsrs	r3, r3, #8
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	b2db      	uxtb	r3, r3
 80100f0:	74bb      	strb	r3, [r7, #18]
 80100f2:	8b7b      	ldrh	r3, [r7, #26]
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	74fb      	strb	r3, [r7, #19]
  cs = csumup(cs, tcp, n);
 80100f8:	8b7b      	ldrh	r3, [r7, #26]
 80100fa:	461a      	mov	r2, r3
 80100fc:	6a39      	ldr	r1, [r7, #32]
 80100fe:	69f8      	ldr	r0, [r7, #28]
 8010100:	f7fe fcd2 	bl	800eaa8 <csumup>
 8010104:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 8010106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010108:	330c      	adds	r3, #12
 801010a:	2204      	movs	r2, #4
 801010c:	4619      	mov	r1, r3
 801010e:	69f8      	ldr	r0, [r7, #28]
 8010110:	f7fe fcca 	bl	800eaa8 <csumup>
 8010114:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 8010116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010118:	3310      	adds	r3, #16
 801011a:	2204      	movs	r2, #4
 801011c:	4619      	mov	r1, r3
 801011e:	69f8      	ldr	r0, [r7, #28]
 8010120:	f7fe fcc2 	bl	800eaa8 <csumup>
 8010124:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 8010126:	f107 0310 	add.w	r3, r7, #16
 801012a:	2204      	movs	r2, #4
 801012c:	4619      	mov	r1, r3
 801012e:	69f8      	ldr	r0, [r7, #28]
 8010130:	f7fe fcba 	bl	800eaa8 <csumup>
 8010134:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 8010136:	69f8      	ldr	r0, [r7, #28]
 8010138:	f7fe fce1 	bl	800eafe <csumfin>
 801013c:	4603      	mov	r3, r0
 801013e:	461a      	mov	r2, r3
 8010140:	6a3b      	ldr	r3, [r7, #32]
 8010142:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 8010144:	4b21      	ldr	r3, [pc, #132]	@ (80101cc <tx_tcp+0x1d0>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b03      	cmp	r3, #3
 801014a:	dd2c      	ble.n	80101a6 <tx_tcp+0x1aa>
 801014c:	4b20      	ldr	r3, [pc, #128]	@ (80101d0 <tx_tcp+0x1d4>)
 801014e:	f241 2275 	movw	r2, #4725	@ 0x1275
 8010152:	4920      	ldr	r1, [pc, #128]	@ (80101d4 <tx_tcp+0x1d8>)
 8010154:	2004      	movs	r0, #4
 8010156:	f7fd fdf9 	bl	800dd4c <mg_log_prefix>
 801015a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015c:	f103 050c 	add.w	r5, r3, #12
 8010160:	6a3b      	ldr	r3, [r7, #32]
 8010162:	881b      	ldrh	r3, [r3, #0]
 8010164:	b29b      	uxth	r3, r3
 8010166:	4618      	mov	r0, r3
 8010168:	f011 f88a 	bl	8021280 <mg_ntohs>
 801016c:	4603      	mov	r3, r0
 801016e:	461e      	mov	r6, r3
 8010170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010172:	f103 0410 	add.w	r4, r3, #16
 8010176:	6a3b      	ldr	r3, [r7, #32]
 8010178:	885b      	ldrh	r3, [r3, #2]
 801017a:	b29b      	uxth	r3, r3
 801017c:	4618      	mov	r0, r3
 801017e:	f011 f87f 	bl	8021280 <mg_ntohs>
 8010182:	4603      	mov	r3, r0
 8010184:	461a      	mov	r2, r3
 8010186:	6a3b      	ldr	r3, [r7, #32]
 8010188:	7b5b      	ldrb	r3, [r3, #13]
 801018a:	4619      	mov	r1, r3
 801018c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801018e:	9304      	str	r3, [sp, #16]
 8010190:	9103      	str	r1, [sp, #12]
 8010192:	9202      	str	r2, [sp, #8]
 8010194:	9401      	str	r4, [sp, #4]
 8010196:	4b10      	ldr	r3, [pc, #64]	@ (80101d8 <tx_tcp+0x1dc>)
 8010198:	9300      	str	r3, [sp, #0]
 801019a:	4633      	mov	r3, r6
 801019c:	462a      	mov	r2, r5
 801019e:	490e      	ldr	r1, [pc, #56]	@ (80101d8 <tx_tcp+0x1dc>)
 80101a0:	480e      	ldr	r0, [pc, #56]	@ (80101dc <tx_tcp+0x1e0>)
 80101a2:	f7fd fe23 	bl	800ddec <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 80101a6:	6a3b      	ldr	r3, [r7, #32]
 80101a8:	f103 0214 	add.w	r2, r3, #20
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	695b      	ldr	r3, [r3, #20]
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	461a      	mov	r2, r3
 80101b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80101b6:	4413      	add	r3, r2
 80101b8:	4619      	mov	r1, r3
 80101ba:	68f8      	ldr	r0, [r7, #12]
 80101bc:	f7fe fd32 	bl	800ec24 <ether_output>
 80101c0:	4603      	mov	r3, r0
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	372c      	adds	r7, #44	@ 0x2c
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101ca:	bf00      	nop
 80101cc:	24000258 	.word	0x24000258
 80101d0:	0802a18c 	.word	0x0802a18c
 80101d4:	080264c4 	.word	0x080264c4
 80101d8:	08012779 	.word	0x08012779
 80101dc:	08027860 	.word	0x08027860

080101e0 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 80101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e4:	b08c      	sub	sp, #48	@ 0x30
 80101e6:	af06      	add	r7, sp, #24
 80101e8:	60f8      	str	r0, [r7, #12]
 80101ea:	60b9      	str	r1, [r7, #8]
 80101ec:	603b      	str	r3, [r7, #0]
 80101ee:	4613      	mov	r3, r2
 80101f0:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101f6:	7b5b      	ldrb	r3, [r3, #13]
 80101f8:	f003 0303 	and.w	r3, r3, #3
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	bf14      	ite	ne
 8010200:	2301      	movne	r3, #1
 8010202:	2300      	moveq	r3, #0
 8010204:	b2db      	uxtb	r3, r3
 8010206:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	691b      	ldr	r3, [r3, #16]
 801020c:	1d9e      	adds	r6, r3, #6
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	69db      	ldr	r3, [r3, #28]
 8010212:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801021a:	885b      	ldrh	r3, [r3, #2]
 801021c:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801022a:	685b      	ldr	r3, [r3, #4]
 801022c:	4618      	mov	r0, r3
 801022e:	f011 f83e 	bl	80212ae <mg_ntohl>
 8010232:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	4413      	add	r3, r2
 8010238:	4618      	mov	r0, r3
 801023a:	f011 f838 	bl	80212ae <mg_ntohl>
 801023e:	4601      	mov	r1, r0
 8010240:	79fa      	ldrb	r2, [r7, #7]
 8010242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010244:	9305      	str	r3, [sp, #20]
 8010246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010248:	9304      	str	r3, [sp, #16]
 801024a:	9103      	str	r1, [sp, #12]
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	9302      	str	r3, [sp, #8]
 8010250:	9501      	str	r5, [sp, #4]
 8010252:	9400      	str	r4, [sp, #0]
 8010254:	4613      	mov	r3, r2
 8010256:	4642      	mov	r2, r8
 8010258:	4631      	mov	r1, r6
 801025a:	68f8      	ldr	r0, [r7, #12]
 801025c:	f7ff fece 	bl	800fffc <tx_tcp>
 8010260:	4603      	mov	r3, r0
                buf, len);
}
 8010262:	4618      	mov	r0, r3
 8010264:	3718      	adds	r7, #24
 8010266:	46bd      	mov	sp, r7
 8010268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801026c <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 801026c:	b5b0      	push	{r4, r5, r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	4618      	mov	r0, r3
 801027c:	f7fe f94f 	bl	800e51e <mg_alloc_conn>
 8010280:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d10f      	bne.n	80102a8 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 8010288:	4b5e      	ldr	r3, [pc, #376]	@ (8010404 <accept_conn+0x198>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	dd09      	ble.n	80102a4 <accept_conn+0x38>
 8010290:	4b5d      	ldr	r3, [pc, #372]	@ (8010408 <accept_conn+0x19c>)
 8010292:	f241 2289 	movw	r2, #4745	@ 0x1289
 8010296:	495d      	ldr	r1, [pc, #372]	@ (801040c <accept_conn+0x1a0>)
 8010298:	2001      	movs	r0, #1
 801029a:	f7fd fd57 	bl	800dd4c <mg_log_prefix>
 801029e:	485c      	ldr	r0, [pc, #368]	@ (8010410 <accept_conn+0x1a4>)
 80102a0:	f7fd fda4 	bl	800ddec <mg_log>
    return NULL;
 80102a4:	2300      	movs	r3, #0
 80102a6:	e0a8      	b.n	80103fa <accept_conn+0x18e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	33b0      	adds	r3, #176	@ 0xb0
 80102ac:	60bb      	str	r3, [r7, #8]
  s->dmss = 536;  // assume default, RFC-9293 3.7.1
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80102b4:	831a      	strh	r2, [r3, #24]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102ba:	689b      	ldr	r3, [r3, #8]
 80102bc:	4618      	mov	r0, r3
 80102be:	f010 fff6 	bl	80212ae <mg_ntohl>
 80102c2:	4602      	mov	r2, r0
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	601a      	str	r2, [r3, #0]
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f010 ffed 	bl	80212ae <mg_ntohl>
 80102d4:	4602      	mov	r2, r0
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	f103 001a 	add.w	r0, r3, #26
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	691b      	ldr	r3, [r3, #16]
 80102e4:	3306      	adds	r3, #6
 80102e6:	2206      	movs	r2, #6
 80102e8:	4619      	mov	r1, r3
 80102ea:	f015 fb84 	bl	80259f6 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 80102ee:	2100      	movs	r1, #0
 80102f0:	68f8      	ldr	r0, [r7, #12]
 80102f2:	f7fe fc33 	bl	800eb5c <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	331c      	adds	r3, #28
 80102fa:	683a      	ldr	r2, [r7, #0]
 80102fc:	69d2      	ldr	r2, [r2, #28]
 80102fe:	320c      	adds	r2, #12
 8010300:	6812      	ldr	r2, [r2, #0]
 8010302:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010308:	881b      	ldrh	r3, [r3, #0]
 801030a:	b29a      	uxth	r2, r3
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 8010310:	4b3c      	ldr	r3, [pc, #240]	@ (8010404 <accept_conn+0x198>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b02      	cmp	r3, #2
 8010316:	dd0e      	ble.n	8010336 <accept_conn+0xca>
 8010318:	4b3b      	ldr	r3, [pc, #236]	@ (8010408 <accept_conn+0x19c>)
 801031a:	f241 2293 	movw	r2, #4755	@ 0x1293
 801031e:	493b      	ldr	r1, [pc, #236]	@ (801040c <accept_conn+0x1a0>)
 8010320:	2003      	movs	r0, #3
 8010322:	f7fd fd13 	bl	800dd4c <mg_log_prefix>
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	331c      	adds	r3, #28
 801032e:	4a39      	ldr	r2, [pc, #228]	@ (8010414 <accept_conn+0x1a8>)
 8010330:	4839      	ldr	r0, [pc, #228]	@ (8010418 <accept_conn+0x1ac>)
 8010332:	f7fd fd5b 	bl	800ddec <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	685b      	ldr	r3, [r3, #4]
 801033a:	681a      	ldr	r2, [r3, #0]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	601a      	str	r2, [r3, #0]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801034e:	f043 0304 	orr.w	r3, r3, #4
 8010352:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801035c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010360:	b2d9      	uxtb	r1, r3
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8010368:	f361 03c3 	bfi	r3, r1, #3, #1
 801036c:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 801037c:	68fa      	ldr	r2, [r7, #12]
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f102 0408 	add.w	r4, r2, #8
 8010384:	f103 0508 	add.w	r5, r3, #8
 8010388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801038a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801038c:	682b      	ldr	r3, [r5, #0]
 801038e:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	67da      	str	r2, [r3, #124]	@ 0x7c
  c->is_tls = lsn->is_tls;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80103b2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80103b6:	b2d9      	uxtb	r1, r3
 80103b8:	68fa      	ldr	r2, [r7, #12]
 80103ba:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80103be:	f361 1386 	bfi	r3, r1, #6, #1
 80103c2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_call(c, MG_EV_OPEN, NULL);
 80103c6:	2200      	movs	r2, #0
 80103c8:	2101      	movs	r1, #1
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f7f7 ff72 	bl	80082b4 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 80103d0:	2200      	movs	r2, #0
 80103d2:	2105      	movs	r1, #5
 80103d4:	68f8      	ldr	r0, [r7, #12]
 80103d6:	f7f7 ff6d 	bl	80082b4 <mg_call>
  if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80103e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d106      	bne.n	80103f8 <accept_conn+0x18c>
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 80103f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103f4:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  return c;
 80103f8:	68fb      	ldr	r3, [r7, #12]
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3710      	adds	r7, #16
 80103fe:	46bd      	mov	sp, r7
 8010400:	bdb0      	pop	{r4, r5, r7, pc}
 8010402:	bf00      	nop
 8010404:	24000258 	.word	0x24000258
 8010408:	0802a194 	.word	0x0802a194
 801040c:	080264c4 	.word	0x080264c4
 8010410:	08027480 	.word	0x08027480
 8010414:	080127f1 	.word	0x080127f1
 8010418:	08027884 	.word	0x08027884

0801041c <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 801041c:	b580      	push	{r7, lr}
 801041e:	b08a      	sub	sp, #40	@ 0x28
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
 8010424:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	685b      	ldr	r3, [r3, #4]
 801042a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801042c:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 801042e:	230e      	movs	r3, #14
 8010430:	623b      	str	r3, [r7, #32]
 8010432:	2318      	movs	r3, #24
 8010434:	61fb      	str	r3, [r7, #28]
 8010436:	233c      	movs	r3, #60	@ 0x3c
 8010438:	61bb      	str	r3, [r7, #24]
 801043a:	2308      	movs	r3, #8
 801043c:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 801043e:	6a3a      	ldr	r2, [r7, #32]
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	441a      	add	r2, r3
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801044a:	f003 0301 	and.w	r3, r3, #1
 801044e:	b2db      	uxtb	r3, r3
 8010450:	2b00      	cmp	r3, #0
 8010452:	d001      	beq.n	8010458 <trim_len+0x3c>
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	e000      	b.n	801045a <trim_len+0x3e>
 8010458:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 801045a:	4413      	add	r3, r2
 801045c:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010464:	f003 0301 	and.w	r3, r3, #1
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d103      	bne.n	8010476 <trim_len+0x5a>
 801046e:	693a      	ldr	r2, [r7, #16]
 8010470:	6a3b      	ldr	r3, [r7, #32]
 8010472:	1ad3      	subs	r3, r2, r3
 8010474:	e000      	b.n	8010478 <trim_len+0x5c>
 8010476:	2344      	movs	r3, #68	@ 0x44
 8010478:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 801047a:	683a      	ldr	r2, [r7, #0]
 801047c:	693b      	ldr	r3, [r7, #16]
 801047e:	441a      	add	r2, r3
 8010480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010482:	699b      	ldr	r3, [r3, #24]
 8010484:	429a      	cmp	r2, r3
 8010486:	d904      	bls.n	8010492 <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 8010488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801048a:	699a      	ldr	r2, [r3, #24]
 801048c:	693b      	ldr	r3, [r7, #16]
 801048e:	1ad3      	subs	r3, r2, r3
 8010490:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 8010492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010498:	461a      	mov	r2, r3
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	4293      	cmp	r3, r2
 801049e:	d913      	bls.n	80104c8 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 80104a0:	4b20      	ldr	r3, [pc, #128]	@ (8010524 <trim_len+0x108>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	dd0a      	ble.n	80104be <trim_len+0xa2>
 80104a8:	4b1f      	ldr	r3, [pc, #124]	@ (8010528 <trim_len+0x10c>)
 80104aa:	f241 22b0 	movw	r2, #4784	@ 0x12b0
 80104ae:	491f      	ldr	r1, [pc, #124]	@ (801052c <trim_len+0x110>)
 80104b0:	2001      	movs	r0, #1
 80104b2:	f7fd fc4b 	bl	800dd4c <mg_log_prefix>
 80104b6:	68f9      	ldr	r1, [r7, #12]
 80104b8:	481d      	ldr	r0, [pc, #116]	@ (8010530 <trim_len+0x114>)
 80104ba:	f7fd fc97 	bl	800ddec <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 80104c8:	683a      	ldr	r2, [r7, #0]
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	441a      	add	r2, r3
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	1ad3      	subs	r3, r2, r3
 80104d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80104d4:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 80104d8:	4293      	cmp	r3, r2
 80104da:	d91e      	bls.n	801051a <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 80104dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80104e2:	461a      	mov	r2, r3
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	6a3a      	ldr	r2, [r7, #32]
 80104ea:	4413      	add	r3, r2
 80104ec:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80104f4:	f003 0301 	and.w	r3, r3, #1
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d00d      	beq.n	801051a <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 80104fe:	4b09      	ldr	r3, [pc, #36]	@ (8010524 <trim_len+0x108>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	2b00      	cmp	r3, #0
 8010504:	dd09      	ble.n	801051a <trim_len+0xfe>
 8010506:	4b08      	ldr	r3, [pc, #32]	@ (8010528 <trim_len+0x10c>)
 8010508:	f241 22b7 	movw	r2, #4791	@ 0x12b7
 801050c:	4907      	ldr	r1, [pc, #28]	@ (801052c <trim_len+0x110>)
 801050e:	2001      	movs	r0, #1
 8010510:	f7fd fc1c 	bl	800dd4c <mg_log_prefix>
 8010514:	4807      	ldr	r0, [pc, #28]	@ (8010534 <trim_len+0x118>)
 8010516:	f7fd fc69 	bl	800ddec <mg_log>
    }
  }

  return len;
 801051a:	683b      	ldr	r3, [r7, #0]
}
 801051c:	4618      	mov	r0, r3
 801051e:	3728      	adds	r7, #40	@ 0x28
 8010520:	46bd      	mov	sp, r7
 8010522:	bd80      	pop	{r7, pc}
 8010524:	24000258 	.word	0x24000258
 8010528:	0802a1a0 	.word	0x0802a1a0
 801052c:	080264c4 	.word	0x080264c4
 8010530:	08027894 	.word	0x08027894
 8010534:	080278c0 	.word	0x080278c0

08010538 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 8010538:	b5f0      	push	{r4, r5, r6, r7, lr}
 801053a:	b08f      	sub	sp, #60	@ 0x3c
 801053c:	af06      	add	r7, sp, #24
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801054a:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	33b0      	adds	r3, #176	@ 0xb0
 8010550:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	331c      	adds	r3, #28
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 801055a:	6879      	ldr	r1, [r7, #4]
 801055c:	68f8      	ldr	r0, [r7, #12]
 801055e:	f7ff ff5d 	bl	801041c <trim_len>
 8010562:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801056a:	f003 0301 	and.w	r3, r3, #1
 801056e:	b2db      	uxtb	r3, r3
 8010570:	2b00      	cmp	r3, #0
 8010572:	d015      	beq.n	80105a0 <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	f103 011a 	add.w	r1, r3, #26
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	6898      	ldr	r0, [r3, #8]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	8b1c      	ldrh	r4, [r3, #24]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	9203      	str	r2, [sp, #12]
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	9202      	str	r2, [sp, #8]
 801058e:	9301      	str	r3, [sp, #4]
 8010590:	697b      	ldr	r3, [r7, #20]
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	4623      	mov	r3, r4
 8010596:	4602      	mov	r2, r0
 8010598:	69f8      	ldr	r0, [r7, #28]
 801059a:	f7fe fcc8 	bl	800ef2e <tx_udp>
 801059e:	e047      	b.n	8010630 <mg_io_send+0xf8>
  } else {  // TCP, cap to peer's MSS
    size_t sent;
    if (len > s->dmss) len = s->dmss;  // RFC-6691: reduce if sending opts
 80105a0:	69bb      	ldr	r3, [r7, #24]
 80105a2:	8b1b      	ldrh	r3, [r3, #24]
 80105a4:	461a      	mov	r2, r3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d902      	bls.n	80105b2 <mg_io_send+0x7a>
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	8b1b      	ldrh	r3, [r3, #24]
 80105b0:	607b      	str	r3, [r7, #4]
    sent = tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port,
 80105b2:	69bb      	ldr	r3, [r7, #24]
 80105b4:	f103 061a 	add.w	r6, r3, #26
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	8b1c      	ldrh	r4, [r3, #24]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80105c0:	69bb      	ldr	r3, [r7, #24]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	4618      	mov	r0, r3
 80105c6:	f010 fe72 	bl	80212ae <mg_ntohl>
 80105ca:	6038      	str	r0, [r7, #0]
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f010 fe6c 	bl	80212ae <mg_ntohl>
 80105d6:	4602      	mov	r2, r0
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	9305      	str	r3, [sp, #20]
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	9304      	str	r3, [sp, #16]
 80105e0:	9203      	str	r2, [sp, #12]
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	9302      	str	r3, [sp, #8]
 80105e6:	9501      	str	r5, [sp, #4]
 80105e8:	9400      	str	r4, [sp, #0]
 80105ea:	2318      	movs	r3, #24
 80105ec:	697a      	ldr	r2, [r7, #20]
 80105ee:	4631      	mov	r1, r6
 80105f0:	69f8      	ldr	r0, [r7, #28]
 80105f2:	f7ff fd03 	bl	800fffc <tx_tcp>
 80105f6:	6138      	str	r0, [r7, #16]
                  c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d102      	bne.n	8010604 <mg_io_send+0xcc>
      return MG_IO_WAIT;
 80105fe:	f06f 0301 	mvn.w	r3, #1
 8010602:	e016      	b.n	8010632 <mg_io_send+0xfa>
    } else if (sent == (size_t) -1) {
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060a:	d102      	bne.n	8010612 <mg_io_send+0xda>
      return MG_IO_ERR;
 801060c:	f04f 33ff 	mov.w	r3, #4294967295
 8010610:	e00f      	b.n	8010632 <mg_io_send+0xfa>
    } else {
      s->seq += (uint32_t) len;
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	681a      	ldr	r2, [r3, #0]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	441a      	add	r2, r3
 801061a:	69bb      	ldr	r3, [r7, #24]
 801061c:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010624:	2b01      	cmp	r3, #1
 8010626:	d103      	bne.n	8010630 <mg_io_send+0xf8>
 8010628:	2100      	movs	r1, #0
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f7fe fa96 	bl	800eb5c <settmout>
    }
  }
  return (long) len;
 8010630:	687b      	ldr	r3, [r7, #4]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3724      	adds	r7, #36	@ 0x24
 8010636:	46bd      	mov	sp, r7
 8010638:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801063c <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c) {
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  size_t avail = mg_tls_pending(c);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f00a f9bf 	bl	801a9c8 <mg_tls_pending>
 801064a:	6178      	str	r0, [r7, #20]
  size_t min = avail > MG_MAX_RECV_SIZE ? MG_MAX_RECV_SIZE : avail;
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010652:	bf28      	it	cs
 8010654:	f44f 1340 	movcs.w	r3, #3145728	@ 0x300000
 8010658:	613b      	str	r3, [r7, #16]
  struct mg_iobuf *io = &c->recv;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	3338      	adds	r3, #56	@ 0x38
 801065e:	60fb      	str	r3, [r7, #12]
  if (io->size - io->len < min && !mg_iobuf_resize(io, io->len + min)) {
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	685a      	ldr	r2, [r3, #4]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	689b      	ldr	r3, [r3, #8]
 8010668:	1ad3      	subs	r3, r2, r3
 801066a:	693a      	ldr	r2, [r7, #16]
 801066c:	429a      	cmp	r2, r3
 801066e:	d90f      	bls.n	8010690 <handle_tls_recv+0x54>
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	689a      	ldr	r2, [r3, #8]
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	4413      	add	r3, r2
 8010678:	4619      	mov	r1, r3
 801067a:	68f8      	ldr	r0, [r7, #12]
 801067c:	f7fc fbbc 	bl	800cdf8 <mg_iobuf_resize>
 8010680:	4603      	mov	r3, r0
 8010682:	2b00      	cmp	r3, #0
 8010684:	d104      	bne.n	8010690 <handle_tls_recv+0x54>
    mg_error(c, "oom");
 8010686:	491c      	ldr	r1, [pc, #112]	@ (80106f8 <handle_tls_recv+0xbc>)
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f7f7 fe33 	bl	80082f4 <mg_error>
      // Decrypted successfully - trigger MG_EV_READ
      io->len += (size_t) n;
      mg_call(c, MG_EV_READ, &n);
    }  // else n < 0: outstanding data to be moved to c->recv
  }
}
 801068e:	e02f      	b.n	80106f0 <handle_tls_recv+0xb4>
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d005      	beq.n	80106a4 <handle_tls_recv+0x68>
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	681a      	ldr	r2, [r3, #0]
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	689b      	ldr	r3, [r3, #8]
 80106a0:	4413      	add	r3, r2
 80106a2:	e001      	b.n	80106a8 <handle_tls_recv+0x6c>
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
                         io->size - io->len);
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	6851      	ldr	r1, [r2, #4]
 80106ac:	68fa      	ldr	r2, [r7, #12]
 80106ae:	6892      	ldr	r2, [r2, #8]
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 80106b0:	1a8a      	subs	r2, r1, r2
 80106b2:	4619      	mov	r1, r3
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f00a f933 	bl	801a920 <mg_tls_recv>
 80106ba:	4603      	mov	r3, r0
 80106bc:	60bb      	str	r3, [r7, #8]
    if (n == MG_IO_ERR) {
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c4:	d104      	bne.n	80106d0 <handle_tls_recv+0x94>
      mg_error(c, "TLS recv error");
 80106c6:	490d      	ldr	r1, [pc, #52]	@ (80106fc <handle_tls_recv+0xc0>)
 80106c8:	6878      	ldr	r0, [r7, #4]
 80106ca:	f7f7 fe13 	bl	80082f4 <mg_error>
}
 80106ce:	e00f      	b.n	80106f0 <handle_tls_recv+0xb4>
    } else if (n > 0) {
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	dd0c      	ble.n	80106f0 <handle_tls_recv+0xb4>
      io->len += (size_t) n;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	689b      	ldr	r3, [r3, #8]
 80106da:	68ba      	ldr	r2, [r7, #8]
 80106dc:	441a      	add	r2, r3
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	609a      	str	r2, [r3, #8]
      mg_call(c, MG_EV_READ, &n);
 80106e2:	f107 0308 	add.w	r3, r7, #8
 80106e6:	461a      	mov	r2, r3
 80106e8:	2107      	movs	r1, #7
 80106ea:	6878      	ldr	r0, [r7, #4]
 80106ec:	f7f7 fde2 	bl	80082b4 <mg_call>
}
 80106f0:	bf00      	nop
 80106f2:	3718      	adds	r7, #24
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}
 80106f8:	0802785c 	.word	0x0802785c
 80106fc:	080278ec 	.word	0x080278ec

08010700 <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 8010700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010704:	b090      	sub	sp, #64	@ 0x40
 8010706:	af06      	add	r7, sp, #24
 8010708:	60f8      	str	r0, [r7, #12]
 801070a:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	33b0      	adds	r3, #176	@ 0xb0
 8010710:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801071c:	b2db      	uxtb	r3, r3
 801071e:	2b00      	cmp	r3, #0
 8010720:	d002      	beq.n	8010728 <read_conn+0x28>
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	3368      	adds	r3, #104	@ 0x68
 8010726:	e001      	b.n	801072c <read_conn+0x2c>
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	3338      	adds	r3, #56	@ 0x38
 801072c:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	4618      	mov	r0, r3
 8010736:	f010 fdba 	bl	80212ae <mg_ntohl>
 801073a:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	331c      	adds	r3, #28
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010748:	7b5b      	ldrb	r3, [r3, #13]
 801074a:	f003 0301 	and.w	r3, r3, #1
 801074e:	2b00      	cmp	r3, #0
 8010750:	d07e      	beq.n	8010850 <read_conn+0x150>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 8010752:	2310      	movs	r3, #16
 8010754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 8010758:	68bb      	ldr	r3, [r7, #8]
 801075a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801075c:	685b      	ldr	r3, [r3, #4]
 801075e:	4618      	mov	r0, r3
 8010760:	f010 fda5 	bl	80212ae <mg_ntohl>
 8010764:	4602      	mov	r2, r0
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	68db      	ldr	r3, [r3, #12]
 801076a:	4413      	add	r3, r2
 801076c:	1c5a      	adds	r2, r3, #1
 801076e:	6a3b      	ldr	r3, [r7, #32]
 8010770:	605a      	str	r2, [r3, #4]
    s->fin_rcvd = true;
 8010772:	6a3b      	ldr	r3, [r7, #32]
 8010774:	2201      	movs	r2, #1
 8010776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010780:	f003 0310 	and.w	r3, r3, #16
 8010784:	b2db      	uxtb	r3, r3
 8010786:	2b00      	cmp	r3, #0
 8010788:	d023      	beq.n	80107d2 <read_conn+0xd2>
 801078a:	6a3b      	ldr	r3, [r7, #32]
 801078c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010790:	2b04      	cmp	r3, #4
 8010792:	d11e      	bne.n	80107d2 <read_conn+0xd2>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 8010794:	6a3b      	ldr	r3, [r7, #32]
 8010796:	681c      	ldr	r4, [r3, #0]
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	4618      	mov	r0, r3
 80107a0:	f010 fd85 	bl	80212ae <mg_ntohl>
 80107a4:	4603      	mov	r3, r0
 80107a6:	429c      	cmp	r4, r3
 80107a8:	d105      	bne.n	80107b6 <read_conn+0xb6>
        s->seq++;                               // Yes. Increment our SEQ
 80107aa:	6a3b      	ldr	r3, [r7, #32]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	1c5a      	adds	r2, r3, #1
 80107b0:	6a3b      	ldr	r3, [r7, #32]
 80107b2:	601a      	str	r2, [r3, #0]
 80107b4:	e008      	b.n	80107c8 <read_conn+0xc8>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107ba:	689b      	ldr	r3, [r3, #8]
 80107bc:	4618      	mov	r0, r3
 80107be:	f010 fd76 	bl	80212ae <mg_ntohl>
 80107c2:	4602      	mov	r2, r0
 80107c4:	6a3b      	ldr	r3, [r7, #32]
 80107c6:	601a      	str	r2, [r3, #0]
      }
      s->twclosure = true;
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	2201      	movs	r2, #1
 80107cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80107d0:	e010      	b.n	80107f4 <read_conn+0xf4>
    } else {
      flags |= TH_FIN;
 80107d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107d6:	f043 0301 	orr.w	r3, r3, #1
 80107da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 80107de:	68fa      	ldr	r2, [r7, #12]
 80107e0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80107e4:	f043 0310 	orr.w	r3, r3, #16
 80107e8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 80107ec:	2104      	movs	r1, #4
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f7fe f9b4 	bl	800eb5c <settmout>
    }
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, flags, c->loc.port, c->rem.port,
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	685b      	ldr	r3, [r3, #4]
 80107f8:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80107fa:	6a3b      	ldr	r3, [r7, #32]
 80107fc:	f103 081a 	add.w	r8, r3, #26
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	607b      	str	r3, [r7, #4]
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	8b1c      	ldrh	r4, [r3, #24]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801080c:	6a3b      	ldr	r3, [r7, #32]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4618      	mov	r0, r3
 8010812:	f010 fd4c 	bl	80212ae <mg_ntohl>
 8010816:	6038      	str	r0, [r7, #0]
 8010818:	6a3b      	ldr	r3, [r7, #32]
 801081a:	685b      	ldr	r3, [r3, #4]
 801081c:	4618      	mov	r0, r3
 801081e:	f010 fd46 	bl	80212ae <mg_ntohl>
 8010822:	4602      	mov	r2, r0
 8010824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010828:	2100      	movs	r1, #0
 801082a:	9105      	str	r1, [sp, #20]
 801082c:	499b      	ldr	r1, [pc, #620]	@ (8010a9c <read_conn+0x39c>)
 801082e:	9104      	str	r1, [sp, #16]
 8010830:	9203      	str	r2, [sp, #12]
 8010832:	6839      	ldr	r1, [r7, #0]
 8010834:	9102      	str	r1, [sp, #8]
 8010836:	9501      	str	r5, [sp, #4]
 8010838:	9400      	str	r4, [sp, #0]
 801083a:	687a      	ldr	r2, [r7, #4]
 801083c:	4641      	mov	r1, r8
 801083e:	4630      	mov	r0, r6
 8010840:	f7ff fbdc 	bl	800fffc <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    if (pkt->pay.len == 0) return;  // if no data, we're done
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	2b00      	cmp	r3, #0
 801084a:	f040 808f 	bne.w	801096c <read_conn+0x26c>
 801084e:	e16b      	b.n	8010b28 <read_conn+0x428>
  } else if (pkt->pay.len == 0) {   // this is an ACK
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d110      	bne.n	801087a <read_conn+0x17a>
    if (s->fin_rcvd && s->ttype == MIP_TTYPE_FIN) s->twclosure = true;
 8010858:	6a3b      	ldr	r3, [r7, #32]
 801085a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801085e:	2b00      	cmp	r3, #0
 8010860:	f000 815f 	beq.w	8010b22 <read_conn+0x422>
 8010864:	6a3b      	ldr	r3, [r7, #32]
 8010866:	f893 3020 	ldrb.w	r3, [r3, #32]
 801086a:	2b04      	cmp	r3, #4
 801086c:	f040 8159 	bne.w	8010b22 <read_conn+0x422>
 8010870:	6a3b      	ldr	r3, [r7, #32]
 8010872:	2201      	movs	r2, #1
 8010874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    return;  // no data to process
 8010878:	e153      	b.n	8010b22 <read_conn+0x422>
  } else if (seq != s->ack) {
 801087a:	6a3b      	ldr	r3, [r7, #32]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	69ba      	ldr	r2, [r7, #24]
 8010880:	429a      	cmp	r2, r3
 8010882:	d059      	beq.n	8010938 <read_conn+0x238>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	4618      	mov	r0, r3
 801088c:	f010 fd0f 	bl	80212ae <mg_ntohl>
 8010890:	4602      	mov	r2, r0
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	68db      	ldr	r3, [r3, #12]
 8010896:	4413      	add	r3, r2
 8010898:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 801089a:	6a3b      	ldr	r3, [r7, #32]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	697a      	ldr	r2, [r7, #20]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d10f      	bne.n	80108c4 <read_conn+0x1c4>
      MG_VERBOSE(("ignoring duplicate pkt"));
 80108a4:	4b7e      	ldr	r3, [pc, #504]	@ (8010aa0 <read_conn+0x3a0>)
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	2b03      	cmp	r3, #3
 80108aa:	f340 813c 	ble.w	8010b26 <read_conn+0x426>
 80108ae:	4b7d      	ldr	r3, [pc, #500]	@ (8010aa4 <read_conn+0x3a4>)
 80108b0:	f241 320c 	movw	r2, #4876	@ 0x130c
 80108b4:	497c      	ldr	r1, [pc, #496]	@ (8010aa8 <read_conn+0x3a8>)
 80108b6:	2004      	movs	r0, #4
 80108b8:	f7fd fa48 	bl	800dd4c <mg_log_prefix>
 80108bc:	487b      	ldr	r0, [pc, #492]	@ (8010aac <read_conn+0x3ac>)
 80108be:	f7fd fa95 	bl	800ddec <mg_log>
    } else {
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
             mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    }
    return;  // drop it
 80108c2:	e130      	b.n	8010b26 <read_conn+0x426>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 80108c4:	4b76      	ldr	r3, [pc, #472]	@ (8010aa0 <read_conn+0x3a0>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b03      	cmp	r3, #3
 80108ca:	dd0d      	ble.n	80108e8 <read_conn+0x1e8>
 80108cc:	4b75      	ldr	r3, [pc, #468]	@ (8010aa4 <read_conn+0x3a4>)
 80108ce:	f241 320e 	movw	r2, #4878	@ 0x130e
 80108d2:	4975      	ldr	r1, [pc, #468]	@ (8010aa8 <read_conn+0x3a8>)
 80108d4:	2004      	movs	r0, #4
 80108d6:	f7fd fa39 	bl	800dd4c <mg_log_prefix>
 80108da:	6a3b      	ldr	r3, [r7, #32]
 80108dc:	685a      	ldr	r2, [r3, #4]
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	69b9      	ldr	r1, [r7, #24]
 80108e2:	4873      	ldr	r0, [pc, #460]	@ (8010ab0 <read_conn+0x3b0>)
 80108e4:	f7fd fa82 	bl	800ddec <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80108ee:	6a3b      	ldr	r3, [r7, #32]
 80108f0:	f103 081a 	add.w	r8, r3, #26
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	607b      	str	r3, [r7, #4]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	8b1c      	ldrh	r4, [r3, #24]
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8010900:	6a3b      	ldr	r3, [r7, #32]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4618      	mov	r0, r3
 8010906:	f010 fcd2 	bl	80212ae <mg_ntohl>
 801090a:	6038      	str	r0, [r7, #0]
 801090c:	6a3b      	ldr	r3, [r7, #32]
 801090e:	685b      	ldr	r3, [r3, #4]
 8010910:	4618      	mov	r0, r3
 8010912:	f010 fccc 	bl	80212ae <mg_ntohl>
 8010916:	4603      	mov	r3, r0
 8010918:	2200      	movs	r2, #0
 801091a:	9205      	str	r2, [sp, #20]
 801091c:	4a5f      	ldr	r2, [pc, #380]	@ (8010a9c <read_conn+0x39c>)
 801091e:	9204      	str	r2, [sp, #16]
 8010920:	9303      	str	r3, [sp, #12]
 8010922:	6839      	ldr	r1, [r7, #0]
 8010924:	9102      	str	r1, [sp, #8]
 8010926:	9501      	str	r5, [sp, #4]
 8010928:	9400      	str	r4, [sp, #0]
 801092a:	2310      	movs	r3, #16
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	4641      	mov	r1, r8
 8010930:	4630      	mov	r0, r6
 8010932:	f7ff fb63 	bl	800fffc <tx_tcp>
    return;  // drop it
 8010936:	e0f6      	b.n	8010b26 <read_conn+0x426>
  } else if (io->size - io->len < pkt->pay.len &&
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	685a      	ldr	r2, [r3, #4]
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	689b      	ldr	r3, [r3, #8]
 8010940:	1ad2      	subs	r2, r2, r3
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	429a      	cmp	r2, r3
 8010948:	d210      	bcs.n	801096c <read_conn+0x26c>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	689a      	ldr	r2, [r3, #8]
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	4413      	add	r3, r2
 8010954:	4619      	mov	r1, r3
 8010956:	69f8      	ldr	r0, [r7, #28]
 8010958:	f7fc fa4e 	bl	800cdf8 <mg_iobuf_resize>
 801095c:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 801095e:	2b00      	cmp	r3, #0
 8010960:	d104      	bne.n	801096c <read_conn+0x26c>
    mg_error(c, "oom");
 8010962:	4954      	ldr	r1, [pc, #336]	@ (8010ab4 <read_conn+0x3b4>)
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7f7 fcc5 	bl	80082f4 <mg_error>
    return;  // drop it
 801096a:	e0dd      	b.n	8010b28 <read_conn+0x428>
  // Copy TCP payload into the IO buffer. If the connection is plain text,
  // we copy to c->recv. If the connection is TLS, this data is encrypted,
  // therefore we copy that encrypted data to the c->rtls iobuffer instead,
  // and then call mg_tls_recv() to decrypt it. NOTE: mg_tls_recv() will
  // call back mg_io_recv() which grabs raw data from c->rtls
  memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	69fb      	ldr	r3, [r7, #28]
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	18d0      	adds	r0, r2, r3
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	6899      	ldr	r1, [r3, #8]
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	461a      	mov	r2, r3
 8010980:	f015 f839 	bl	80259f6 <memcpy>
  io->len += pkt->pay.len;
 8010984:	69fb      	ldr	r3, [r7, #28]
 8010986:	689a      	ldr	r2, [r3, #8]
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	441a      	add	r2, r3
 801098e:	69fb      	ldr	r3, [r7, #28]
 8010990:	609a      	str	r2, [r3, #8]
  MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 8010992:	4b43      	ldr	r3, [pc, #268]	@ (8010aa0 <read_conn+0x3a0>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	2b03      	cmp	r3, #3
 8010998:	dd15      	ble.n	80109c6 <read_conn+0x2c6>
 801099a:	4b42      	ldr	r3, [pc, #264]	@ (8010aa4 <read_conn+0x3a4>)
 801099c:	f241 321f 	movw	r2, #4895	@ 0x131f
 80109a0:	4941      	ldr	r1, [pc, #260]	@ (8010aa8 <read_conn+0x3a8>)
 80109a2:	2004      	movs	r0, #4
 80109a4:	f7fd f9d2 	bl	800dd4c <mg_log_prefix>
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	4618      	mov	r0, r3
 80109b4:	f010 fc7b 	bl	80212ae <mg_ntohl>
 80109b8:	4602      	mov	r2, r0
 80109ba:	6a3b      	ldr	r3, [r7, #32]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	4621      	mov	r1, r4
 80109c0:	483d      	ldr	r0, [pc, #244]	@ (8010ab8 <read_conn+0x3b8>)
 80109c2:	f7fd fa13 	bl	800ddec <mg_log>
  // Advance ACK counter
  s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80109ca:	685b      	ldr	r3, [r3, #4]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f010 fc6e 	bl	80212ae <mg_ntohl>
 80109d2:	4602      	mov	r2, r0
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	68db      	ldr	r3, [r3, #12]
 80109d8:	441a      	add	r2, r3
 80109da:	6a3b      	ldr	r3, [r7, #32]
 80109dc:	605a      	str	r2, [r3, #4]
  s->unacked += pkt->pay.len;
 80109de:	6a3b      	ldr	r3, [r7, #32]
 80109e0:	695a      	ldr	r2, [r3, #20]
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	441a      	add	r2, r3
 80109e8:	6a3b      	ldr	r3, [r7, #32]
 80109ea:	615a      	str	r2, [r3, #20]
  // size_t diff = s->acked <= s->ack ? s->ack - s->acked : s->ack;
  if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	695b      	ldr	r3, [r3, #20]
 80109f0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80109f4:	4293      	cmp	r3, r2
 80109f6:	d963      	bls.n	8010ac0 <read_conn+0x3c0>
 80109f8:	6a3b      	ldr	r3, [r7, #32]
 80109fa:	691a      	ldr	r2, [r3, #16]
 80109fc:	6a3b      	ldr	r3, [r7, #32]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d05d      	beq.n	8010ac0 <read_conn+0x3c0>
    // Send ACK immediately
    MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 8010a04:	4b26      	ldr	r3, [pc, #152]	@ (8010aa0 <read_conn+0x3a0>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	2b03      	cmp	r3, #3
 8010a0a:	dd0e      	ble.n	8010a2a <read_conn+0x32a>
 8010a0c:	4b25      	ldr	r3, [pc, #148]	@ (8010aa4 <read_conn+0x3a4>)
 8010a0e:	f241 3226 	movw	r2, #4902	@ 0x1326
 8010a12:	4925      	ldr	r1, [pc, #148]	@ (8010aa8 <read_conn+0x3a8>)
 8010a14:	2004      	movs	r0, #4
 8010a16:	f7fd f999 	bl	800dd4c <mg_log_prefix>
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8010a1e:	6a3b      	ldr	r3, [r7, #32]
 8010a20:	691b      	ldr	r3, [r3, #16]
 8010a22:	461a      	mov	r2, r3
 8010a24:	4825      	ldr	r0, [pc, #148]	@ (8010abc <read_conn+0x3bc>)
 8010a26:	f7fd f9e1 	bl	800ddec <mg_log>
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	685b      	ldr	r3, [r3, #4]
 8010a2e:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8010a30:	6a3b      	ldr	r3, [r7, #32]
 8010a32:	f103 081a 	add.w	r8, r3, #26
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	607b      	str	r3, [r7, #4]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	8b1c      	ldrh	r4, [r3, #24]
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8010a42:	6a3b      	ldr	r3, [r7, #32]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	4618      	mov	r0, r3
 8010a48:	f010 fc31 	bl	80212ae <mg_ntohl>
 8010a4c:	6038      	str	r0, [r7, #0]
 8010a4e:	6a3b      	ldr	r3, [r7, #32]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	4618      	mov	r0, r3
 8010a54:	f010 fc2b 	bl	80212ae <mg_ntohl>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	9205      	str	r2, [sp, #20]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	9204      	str	r2, [sp, #16]
 8010a62:	9303      	str	r3, [sp, #12]
 8010a64:	6839      	ldr	r1, [r7, #0]
 8010a66:	9102      	str	r1, [sp, #8]
 8010a68:	9501      	str	r5, [sp, #4]
 8010a6a:	9400      	str	r4, [sp, #0]
 8010a6c:	2310      	movs	r3, #16
 8010a6e:	687a      	ldr	r2, [r7, #4]
 8010a70:	4641      	mov	r1, r8
 8010a72:	4630      	mov	r0, r6
 8010a74:	f7ff fac2 	bl	800fffc <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    s->unacked = 0;
 8010a78:	6a3b      	ldr	r3, [r7, #32]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	615a      	str	r2, [r3, #20]
    s->acked = s->ack;
 8010a7e:	6a3b      	ldr	r3, [r7, #32]
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	6a3b      	ldr	r3, [r7, #32]
 8010a84:	611a      	str	r2, [r3, #16]
    if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 8010a86:	6a3b      	ldr	r3, [r7, #32]
 8010a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d020      	beq.n	8010ad2 <read_conn+0x3d2>
 8010a90:	2100      	movs	r1, #0
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f7fe f862 	bl	800eb5c <settmout>
 8010a98:	e01b      	b.n	8010ad2 <read_conn+0x3d2>
 8010a9a:	bf00      	nop
 8010a9c:	08026d04 	.word	0x08026d04
 8010aa0:	24000258 	.word	0x24000258
 8010aa4:	0802a1ac 	.word	0x0802a1ac
 8010aa8:	080264c4 	.word	0x080264c4
 8010aac:	080278fc 	.word	0x080278fc
 8010ab0:	08027914 	.word	0x08027914
 8010ab4:	0802785c 	.word	0x0802785c
 8010ab8:	0802792c 	.word	0x0802792c
 8010abc:	08027940 	.word	0x08027940
  } else {
    // if not already running, setup a timer to send an ACK later
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 8010ac0:	6a3b      	ldr	r3, [r7, #32]
 8010ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d003      	beq.n	8010ad2 <read_conn+0x3d2>
 8010aca:	2101      	movs	r1, #1
 8010acc:	68f8      	ldr	r0, [r7, #12]
 8010ace:	f7fe f845 	bl	800eb5c <settmout>
  }
  if (c->is_tls && c->is_tls_hs) {
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d00b      	beq.n	8010afa <read_conn+0x3fa>
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010ae8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d003      	beq.n	8010afa <read_conn+0x3fa>
    mg_tls_handshake(c);
 8010af2:	68f8      	ldr	r0, [r7, #12]
 8010af4:	f009 fbf6 	bl	801a2e4 <mg_tls_handshake>
 8010af8:	e016      	b.n	8010b28 <read_conn+0x428>
  } else if (c->is_tls) {
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010b00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d003      	beq.n	8010b12 <read_conn+0x412>
    handle_tls_recv(c);
 8010b0a:	68f8      	ldr	r0, [r7, #12]
 8010b0c:	f7ff fd96 	bl	801063c <handle_tls_recv>
 8010b10:	e00a      	b.n	8010b28 <read_conn+0x428>
  } else {
    // Plain text connection, data is already in c->recv, trigger MG_EV_READ
    mg_call(c, MG_EV_READ, &pkt->pay.len);
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	330c      	adds	r3, #12
 8010b16:	461a      	mov	r2, r3
 8010b18:	2107      	movs	r1, #7
 8010b1a:	68f8      	ldr	r0, [r7, #12]
 8010b1c:	f7f7 fbca 	bl	80082b4 <mg_call>
 8010b20:	e002      	b.n	8010b28 <read_conn+0x428>
    return;  // no data to process
 8010b22:	bf00      	nop
 8010b24:	e000      	b.n	8010b28 <read_conn+0x428>
    return;  // drop it
 8010b26:	bf00      	nop
  }
}
 8010b28:	3728      	adds	r7, #40	@ 0x28
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b30 <handle_opt>:

// process options (MSS)
static void handle_opt(struct connstate *s, struct tcp *tcp) {
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b086      	sub	sp, #24
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
  uint8_t *opts = (uint8_t *) (tcp + 1);
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	3314      	adds	r3, #20
 8010b3e:	617b      	str	r3, [r7, #20]
  int len = 4 * ((int) (tcp->off >> 4) - ((int) sizeof(*tcp) / 4));
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	7b1b      	ldrb	r3, [r3, #12]
 8010b44:	091b      	lsrs	r3, r3, #4
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	3b05      	subs	r3, #5
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	613b      	str	r3, [r7, #16]
  s->dmss = 536;     // assume default, RFC-9293 3.7.1
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8010b54:	831a      	strh	r2, [r3, #24]
  while (len > 0) {  // RFC-9293 3.1 3.2
 8010b56:	e038      	b.n	8010bca <handle_opt+0x9a>
    uint8_t kind = opts[0], optlen = 1;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	73bb      	strb	r3, [r7, #14]
 8010b5e:	2301      	movs	r3, #1
 8010b60:	73fb      	strb	r3, [r7, #15]
    if (kind != 1) {         // No-Operation
 8010b62:	7bbb      	ldrb	r3, [r7, #14]
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	d017      	beq.n	8010b98 <handle_opt+0x68>
      if (kind == 0) break;  // End of Option List
 8010b68:	7bbb      	ldrb	r3, [r7, #14]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d031      	beq.n	8010bd2 <handle_opt+0xa2>
      optlen = opts[1];
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	785b      	ldrb	r3, [r3, #1]
 8010b72:	73fb      	strb	r3, [r7, #15]
      if (kind == 2 && optlen == 4)  // set received MSS
 8010b74:	7bbb      	ldrb	r3, [r7, #14]
 8010b76:	2b02      	cmp	r3, #2
 8010b78:	d10e      	bne.n	8010b98 <handle_opt+0x68>
 8010b7a:	7bfb      	ldrb	r3, [r7, #15]
 8010b7c:	2b04      	cmp	r3, #4
 8010b7e:	d10b      	bne.n	8010b98 <handle_opt+0x68>
        s->dmss = (uint16_t) (((uint16_t) opts[2] << 8) + opts[3]);
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	3302      	adds	r3, #2
 8010b84:	781b      	ldrb	r3, [r3, #0]
 8010b86:	021b      	lsls	r3, r3, #8
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	697a      	ldr	r2, [r7, #20]
 8010b8c:	3203      	adds	r2, #3
 8010b8e:	7812      	ldrb	r2, [r2, #0]
 8010b90:	4413      	add	r3, r2
 8010b92:	b29a      	uxth	r2, r3
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	831a      	strh	r2, [r3, #24]
    }
    MG_VERBOSE(("kind: %u, optlen: %u, len: %d\n", kind, optlen, len));
 8010b98:	4b10      	ldr	r3, [pc, #64]	@ (8010bdc <handle_opt+0xac>)
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2b03      	cmp	r3, #3
 8010b9e:	dd0c      	ble.n	8010bba <handle_opt+0x8a>
 8010ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8010be0 <handle_opt+0xb0>)
 8010ba2:	f241 3247 	movw	r2, #4935	@ 0x1347
 8010ba6:	490f      	ldr	r1, [pc, #60]	@ (8010be4 <handle_opt+0xb4>)
 8010ba8:	2004      	movs	r0, #4
 8010baa:	f7fd f8cf 	bl	800dd4c <mg_log_prefix>
 8010bae:	7bb9      	ldrb	r1, [r7, #14]
 8010bb0:	7bfa      	ldrb	r2, [r7, #15]
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	480c      	ldr	r0, [pc, #48]	@ (8010be8 <handle_opt+0xb8>)
 8010bb6:	f7fd f919 	bl	800ddec <mg_log>
    opts += optlen;
 8010bba:	7bfb      	ldrb	r3, [r7, #15]
 8010bbc:	697a      	ldr	r2, [r7, #20]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	617b      	str	r3, [r7, #20]
    len -= optlen;
 8010bc2:	7bfb      	ldrb	r3, [r7, #15]
 8010bc4:	693a      	ldr	r2, [r7, #16]
 8010bc6:	1ad3      	subs	r3, r2, r3
 8010bc8:	613b      	str	r3, [r7, #16]
  while (len > 0) {  // RFC-9293 3.1 3.2
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	dcc3      	bgt.n	8010b58 <handle_opt+0x28>
  }
}
 8010bd0:	e000      	b.n	8010bd4 <handle_opt+0xa4>
      if (kind == 0) break;  // End of Option List
 8010bd2:	bf00      	nop
}
 8010bd4:	bf00      	nop
 8010bd6:	3718      	adds	r7, #24
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	24000258 	.word	0x24000258
 8010be0:	0802a1b8 	.word	0x0802a1b8
 8010be4:	080264c4 	.word	0x080264c4
 8010be8:	08027950 	.word	0x08027950

08010bec <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010bec:	b590      	push	{r4, r7, lr}
 8010bee:	b089      	sub	sp, #36	@ 0x24
 8010bf0:	af02      	add	r7, sp, #8
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	6839      	ldr	r1, [r7, #0]
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fe fbd4 	bl	800f3ac <getpeer>
 8010c04:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d002      	beq.n	8010c12 <rx_tcp+0x26>
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	33b0      	adds	r3, #176	@ 0xb0
 8010c10:	e000      	b.n	8010c14 <rx_tcp+0x28>
 8010c12:	2300      	movs	r3, #0
 8010c14:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 8010c16:	697b      	ldr	r3, [r7, #20]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d05d      	beq.n	8010cd8 <rx_tcp+0xec>
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010c22:	f003 0320 	and.w	r3, r3, #32
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d055      	beq.n	8010cd8 <rx_tcp+0xec>
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c30:	7b5b      	ldrb	r3, [r3, #13]
 8010c32:	2b12      	cmp	r3, #18
 8010c34:	d150      	bne.n	8010cd8 <rx_tcp+0xec>
    handle_opt(s, pkt->tcp);  // process options (MSS)
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	6938      	ldr	r0, [r7, #16]
 8010c3e:	f7ff ff77 	bl	8010b30 <handle_opt>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c46:	689b      	ldr	r3, [r3, #8]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f010 fb30 	bl	80212ae <mg_ntohl>
 8010c4e:	4602      	mov	r2, r0
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	601a      	str	r2, [r3, #0]
 8010c54:	683b      	ldr	r3, [r7, #0]
 8010c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c58:	685b      	ldr	r3, [r3, #4]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f010 fb27 	bl	80212ae <mg_ntohl>
 8010c60:	4603      	mov	r3, r0
 8010c62:	1c5a      	adds	r2, r3, #1
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 8010c68:	683b      	ldr	r3, [r7, #0]
 8010c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c6c:	689b      	ldr	r3, [r3, #8]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	9201      	str	r2, [sp, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	9200      	str	r2, [sp, #0]
 8010c76:	2210      	movs	r2, #16
 8010c78:	6839      	ldr	r1, [r7, #0]
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f7ff fab0 	bl	80101e0 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 8010c80:	697a      	ldr	r2, [r7, #20]
 8010c82:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010c86:	f023 0320 	bic.w	r3, r3, #32
 8010c8a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 8010c8e:	2100      	movs	r1, #0
 8010c90:	6978      	ldr	r0, [r7, #20]
 8010c92:	f7fd ff63 	bl	800eb5c <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 8010c96:	2200      	movs	r2, #0
 8010c98:	2104      	movs	r1, #4
 8010c9a:	6978      	ldr	r0, [r7, #20]
 8010c9c:	f7f7 fb0a 	bl	80082b4 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010ca6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d002      	beq.n	8010cb6 <rx_tcp+0xca>
 8010cb0:	6978      	ldr	r0, [r7, #20]
 8010cb2:	f009 fb17 	bl	801a2e4 <mg_tls_handshake>
    if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010cbc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	f040 80d3 	bne.w	8010e6e <rx_tcp+0x282>
 8010cc8:	697a      	ldr	r2, [r7, #20]
 8010cca:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010cd2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8010cd6:	e0ca      	b.n	8010e6e <rx_tcp+0x282>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d019      	beq.n	8010d12 <rx_tcp+0x126>
 8010cde:	697b      	ldr	r3, [r7, #20]
 8010ce0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010ce4:	f003 0320 	and.w	r3, r3, #32
 8010ce8:	b2db      	uxtb	r3, r3
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d011      	beq.n	8010d12 <rx_tcp+0x126>
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cf2:	7b5b      	ldrb	r3, [r3, #13]
 8010cf4:	2b10      	cmp	r3, #16
 8010cf6:	d00c      	beq.n	8010d12 <rx_tcp+0x126>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cfc:	689b      	ldr	r3, [r3, #8]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	9201      	str	r2, [sp, #4]
 8010d02:	2200      	movs	r2, #0
 8010d04:	9200      	str	r2, [sp, #0]
 8010d06:	2214      	movs	r2, #20
 8010d08:	6839      	ldr	r1, [r7, #0]
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7ff fa68 	bl	80101e0 <tx_tcp_pkt>
 8010d10:	e0ad      	b.n	8010e6e <rx_tcp+0x282>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00b      	beq.n	8010d30 <rx_tcp+0x144>
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d1c:	7b5b      	ldrb	r3, [r3, #13]
 8010d1e:	f003 0304 	and.w	r3, r3, #4
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d004      	beq.n	8010d30 <rx_tcp+0x144>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8010d26:	4954      	ldr	r1, [pc, #336]	@ (8010e78 <rx_tcp+0x28c>)
 8010d28:	6978      	ldr	r0, [r7, #20]
 8010d2a:	f7f7 fae3 	bl	80082f4 <mg_error>
 8010d2e:	e09e      	b.n	8010e6e <rx_tcp+0x282>
  } else if (c != NULL) {
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d011      	beq.n	8010d5a <rx_tcp+0x16e>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d103      	bne.n	8010d50 <rx_tcp+0x164>
      settmout(c,
 8010d48:	2100      	movs	r1, #0
 8010d4a:	6978      	ldr	r0, [r7, #20]
 8010d4c:	f7fd ff06 	bl	800eb5c <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 8010d50:	6839      	ldr	r1, [r7, #0]
 8010d52:	6978      	ldr	r0, [r7, #20]
 8010d54:	f7ff fcd4 	bl	8010700 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 8010d58:	e089      	b.n	8010e6e <rx_tcp+0x282>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d5e:	2201      	movs	r2, #1
 8010d60:	6839      	ldr	r1, [r7, #0]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7fe fb22 	bl	800f3ac <getpeer>
 8010d68:	6178      	str	r0, [r7, #20]
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d10c      	bne.n	8010d8a <rx_tcp+0x19e>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	2200      	movs	r2, #0
 8010d78:	9201      	str	r2, [sp, #4]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	9200      	str	r2, [sp, #0]
 8010d7e:	2214      	movs	r2, #20
 8010d80:	6839      	ldr	r1, [r7, #0]
 8010d82:	6878      	ldr	r0, [r7, #4]
 8010d84:	f7ff fa2c 	bl	80101e0 <tx_tcp_pkt>
}
 8010d88:	e071      	b.n	8010e6e <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_RST) {
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d8e:	7b5b      	ldrb	r3, [r3, #13]
 8010d90:	f003 0304 	and.w	r3, r3, #4
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d00c      	beq.n	8010db2 <rx_tcp+0x1c6>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 8010d98:	697b      	ldr	r3, [r7, #20]
 8010d9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010d9e:	f003 0304 	and.w	r3, r3, #4
 8010da2:	b2db      	uxtb	r3, r3
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d062      	beq.n	8010e6e <rx_tcp+0x282>
 8010da8:	4933      	ldr	r1, [pc, #204]	@ (8010e78 <rx_tcp+0x28c>)
 8010daa:	6978      	ldr	r0, [r7, #20]
 8010dac:	f7f7 faa2 	bl	80082f4 <mg_error>
}
 8010db0:	e05d      	b.n	8010e6e <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_SYN) {
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010db6:	7b5b      	ldrb	r3, [r3, #13]
 8010db8:	f003 0302 	and.w	r3, r3, #2
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d016      	beq.n	8010dee <rx_tcp+0x202>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dc4:	881b      	ldrh	r3, [r3, #0]
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f010 fa59 	bl	8021280 <mg_ntohs>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f010 fa6c 	bl	80212ae <mg_ntohl>
 8010dd6:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 8010dd8:	2300      	movs	r3, #0
 8010dda:	9301      	str	r3, [sp, #4]
 8010ddc:	2300      	movs	r3, #0
 8010dde:	9300      	str	r3, [sp, #0]
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	2212      	movs	r2, #18
 8010de4:	6839      	ldr	r1, [r7, #0]
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f7ff f9fa 	bl	80101e0 <tx_tcp_pkt>
}
 8010dec:	e03f      	b.n	8010e6e <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_FIN) {
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010df2:	7b5b      	ldrb	r3, [r3, #13]
 8010df4:	f003 0301 	and.w	r3, r3, #1
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d00c      	beq.n	8010e16 <rx_tcp+0x22a>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	2200      	movs	r2, #0
 8010e04:	9201      	str	r2, [sp, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	9200      	str	r2, [sp, #0]
 8010e0a:	2211      	movs	r2, #17
 8010e0c:	6839      	ldr	r1, [r7, #0]
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f7ff f9e6 	bl	80101e0 <tx_tcp_pkt>
}
 8010e14:	e02b      	b.n	8010e6e <rx_tcp+0x282>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e1a:	689b      	ldr	r3, [r3, #8]
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f010 fa46 	bl	80212ae <mg_ntohl>
 8010e22:	4604      	mov	r4, r0
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e28:	881b      	ldrh	r3, [r3, #0]
 8010e2a:	b29b      	uxth	r3, r3
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f010 fa27 	bl	8021280 <mg_ntohs>
 8010e32:	4603      	mov	r3, r0
 8010e34:	3301      	adds	r3, #1
 8010e36:	429c      	cmp	r4, r3
 8010e38:	d104      	bne.n	8010e44 <rx_tcp+0x258>
    accept_conn(c, pkt);
 8010e3a:	6839      	ldr	r1, [r7, #0]
 8010e3c:	6978      	ldr	r0, [r7, #20]
 8010e3e:	f7ff fa15 	bl	801026c <accept_conn>
}
 8010e42:	e014      	b.n	8010e6e <rx_tcp+0x282>
  } else if (!c->is_accepted) {  // no peer
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010e4a:	f003 0304 	and.w	r3, r3, #4
 8010e4e:	b2db      	uxtb	r3, r3
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d10c      	bne.n	8010e6e <rx_tcp+0x282>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e58:	689b      	ldr	r3, [r3, #8]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	9201      	str	r2, [sp, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	9200      	str	r2, [sp, #0]
 8010e62:	2214      	movs	r2, #20
 8010e64:	6839      	ldr	r1, [r7, #0]
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f7ff f9ba 	bl	80101e0 <tx_tcp_pkt>
}
 8010e6c:	e7ff      	b.n	8010e6e <rx_tcp+0x282>
 8010e6e:	bf00      	nop
 8010e70:	371c      	adds	r7, #28
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd90      	pop	{r4, r7, pc}
 8010e76:	bf00      	nop
 8010e78:	08027970 	.word	0x08027970

08010e7c <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8010e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e7e:	b08b      	sub	sp, #44	@ 0x2c
 8010e80:	af04      	add	r7, sp, #16
 8010e82:	6078      	str	r0, [r7, #4]
 8010e84:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	69db      	ldr	r3, [r3, #28]
 8010e8a:	88db      	ldrh	r3, [r3, #6]
 8010e8c:	b29b      	uxth	r3, r3
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f010 f9f6 	bl	8021280 <mg_ntohs>
 8010e94:	4603      	mov	r3, r0
 8010e96:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8010e98:	8afb      	ldrh	r3, [r7, #22]
 8010e9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d104      	bne.n	8010eac <rx_ip+0x30>
 8010ea2:	8afb      	ldrh	r3, [r7, #22]
 8010ea4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d026      	beq.n	8010efa <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	69db      	ldr	r3, [r3, #28]
 8010eb0:	7a5b      	ldrb	r3, [r3, #9]
 8010eb2:	2b11      	cmp	r3, #17
 8010eb4:	d105      	bne.n	8010ec2 <rx_ip+0x46>
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	f103 0214 	add.w	r2, r3, #20
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	69db      	ldr	r3, [r3, #28]
 8010ec6:	7a5b      	ldrb	r3, [r3, #9]
 8010ec8:	2b06      	cmp	r3, #6
 8010eca:	d105      	bne.n	8010ed8 <rx_ip+0x5c>
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	69db      	ldr	r3, [r3, #28]
 8010ed0:	f103 0214 	add.w	r2, r3, #20
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010edc:	2200      	movs	r2, #0
 8010ede:	6839      	ldr	r1, [r7, #0]
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7fe fa63 	bl	800f3ac <getpeer>
 8010ee6:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	f000 811b 	beq.w	8011126 <rx_ip+0x2aa>
 8010ef0:	4992      	ldr	r1, [pc, #584]	@ (801113c <rx_ip+0x2c0>)
 8010ef2:	68f8      	ldr	r0, [r7, #12]
 8010ef4:	f7f7 f9fe 	bl	80082f4 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8010ef8:	e115      	b.n	8011126 <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	69db      	ldr	r3, [r3, #28]
 8010efe:	7a5b      	ldrb	r3, [r3, #9]
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d116      	bne.n	8010f32 <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	69db      	ldr	r3, [r3, #28]
 8010f08:	f103 0214 	add.w	r2, r3, #20
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	68db      	ldr	r3, [r3, #12]
 8010f14:	2b03      	cmp	r3, #3
 8010f16:	f240 8108 	bls.w	801112a <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f1e:	3304      	adds	r3, #4
 8010f20:	4619      	mov	r1, r3
 8010f22:	6838      	ldr	r0, [r7, #0]
 8010f24:	f7fd fda2 	bl	800ea6c <mkpay>
    rx_icmp(ifp, pkt);
 8010f28:	6839      	ldr	r1, [r7, #0]
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f7fe fbc2 	bl	800f6b4 <rx_icmp>
 8010f30:	e100      	b.n	8011134 <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	69db      	ldr	r3, [r3, #28]
 8010f36:	7a5b      	ldrb	r3, [r3, #9]
 8010f38:	2b11      	cmp	r3, #17
 8010f3a:	f040 808b 	bne.w	8011054 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	69db      	ldr	r3, [r3, #28]
 8010f42:	f103 0214 	add.w	r2, r3, #20
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	68db      	ldr	r3, [r3, #12]
 8010f4e:	2b07      	cmp	r3, #7
 8010f50:	f240 80ed 	bls.w	801112e <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 8010f54:	683b      	ldr	r3, [r7, #0]
 8010f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f58:	3308      	adds	r3, #8
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	6838      	ldr	r0, [r7, #0]
 8010f5e:	f7fd fd85 	bl	800ea6c <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 8010f62:	4b77      	ldr	r3, [pc, #476]	@ (8011140 <rx_ip+0x2c4>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2b03      	cmp	r3, #3
 8010f68:	dd2d      	ble.n	8010fc6 <rx_ip+0x14a>
 8010f6a:	4b76      	ldr	r3, [pc, #472]	@ (8011144 <rx_ip+0x2c8>)
 8010f6c:	f241 3293 	movw	r2, #5011	@ 0x1393
 8010f70:	4975      	ldr	r1, [pc, #468]	@ (8011148 <rx_ip+0x2cc>)
 8010f72:	2004      	movs	r0, #4
 8010f74:	f7fc feea 	bl	800dd4c <mg_log_prefix>
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	69db      	ldr	r3, [r3, #28]
 8010f7c:	f103 050c 	add.w	r5, r3, #12
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f84:	881b      	ldrh	r3, [r3, #0]
 8010f86:	b29b      	uxth	r3, r3
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f010 f979 	bl	8021280 <mg_ntohs>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	461e      	mov	r6, r3
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	69db      	ldr	r3, [r3, #28]
 8010f96:	f103 0410 	add.w	r4, r3, #16
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f9e:	885b      	ldrh	r3, [r3, #2]
 8010fa0:	b29b      	uxth	r3, r3
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f010 f96c 	bl	8021280 <mg_ntohs>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	461a      	mov	r2, r3
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	9303      	str	r3, [sp, #12]
 8010fb2:	9202      	str	r2, [sp, #8]
 8010fb4:	9401      	str	r4, [sp, #4]
 8010fb6:	4b65      	ldr	r3, [pc, #404]	@ (801114c <rx_ip+0x2d0>)
 8010fb8:	9300      	str	r3, [sp, #0]
 8010fba:	4633      	mov	r3, r6
 8010fbc:	462a      	mov	r2, r5
 8010fbe:	4963      	ldr	r1, [pc, #396]	@ (801114c <rx_ip+0x2d0>)
 8010fc0:	4863      	ldr	r0, [pc, #396]	@ (8011150 <rx_ip+0x2d4>)
 8010fc2:	f7fc ff13 	bl	800ddec <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	7f1b      	ldrb	r3, [r3, #28]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d01c      	beq.n	8011008 <rx_ip+0x18c>
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fd2:	885b      	ldrh	r3, [r3, #2]
 8010fd4:	b29c      	uxth	r4, r3
 8010fd6:	2044      	movs	r0, #68	@ 0x44
 8010fd8:	f010 f952 	bl	8021280 <mg_ntohs>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	429c      	cmp	r4, r3
 8010fe0:	d112      	bne.n	8011008 <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fe6:	f103 0208 	add.w	r2, r3, #8
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010ff2:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	6838      	ldr	r0, [r7, #0]
 8010ffa:	f7fd fd37 	bl	800ea6c <mkpay>
      rx_dhcp_client(ifp, pkt);
 8010ffe:	6839      	ldr	r1, [r7, #0]
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7fe fbb3 	bl	800f76c <rx_dhcp_client>
 8011006:	e095      	b.n	8011134 <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	7f5b      	ldrb	r3, [r3, #29]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d01c      	beq.n	801104a <rx_ip+0x1ce>
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011014:	885b      	ldrh	r3, [r3, #2]
 8011016:	b29c      	uxth	r4, r3
 8011018:	2043      	movs	r0, #67	@ 0x43
 801101a:	f010 f931 	bl	8021280 <mg_ntohs>
 801101e:	4603      	mov	r3, r0
 8011020:	429c      	cmp	r4, r3
 8011022:	d112      	bne.n	801104a <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011028:	f103 0208 	add.w	r2, r3, #8
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011034:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 8011038:	4619      	mov	r1, r3
 801103a:	6838      	ldr	r0, [r7, #0]
 801103c:	f7fd fd16 	bl	800ea6c <mkpay>
      rx_dhcp_server(ifp, pkt);
 8011040:	6839      	ldr	r1, [r7, #0]
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7fe fd7a 	bl	800fb3c <rx_dhcp_server>
 8011048:	e074      	b.n	8011134 <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 801104a:	6839      	ldr	r1, [r7, #0]
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f7fe ff63 	bl	800ff18 <rx_udp>
 8011052:	e06f      	b.n	8011134 <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	69db      	ldr	r3, [r3, #28]
 8011058:	7a5b      	ldrb	r3, [r3, #9]
 801105a:	2b06      	cmp	r3, #6
 801105c:	d16a      	bne.n	8011134 <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	69db      	ldr	r3, [r3, #28]
 8011062:	f103 0214 	add.w	r2, r3, #20
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	68db      	ldr	r3, [r3, #12]
 801106e:	2b13      	cmp	r3, #19
 8011070:	d95f      	bls.n	8011132 <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011076:	3314      	adds	r3, #20
 8011078:	4619      	mov	r1, r3
 801107a:	6838      	ldr	r0, [r7, #0]
 801107c:	f7fd fcf6 	bl	800ea6c <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	69db      	ldr	r3, [r3, #28]
 8011084:	885b      	ldrh	r3, [r3, #2]
 8011086:	b29b      	uxth	r3, r3
 8011088:	4618      	mov	r0, r3
 801108a:	f010 f8f9 	bl	8021280 <mg_ntohs>
 801108e:	4603      	mov	r3, r0
 8011090:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011096:	7b1b      	ldrb	r3, [r3, #12]
 8011098:	091b      	lsrs	r3, r3, #4
 801109a:	b2db      	uxtb	r3, r3
 801109c:	3305      	adds	r3, #5
 801109e:	b29b      	uxth	r3, r3
 80110a0:	009b      	lsls	r3, r3, #2
 80110a2:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 80110a4:	8aba      	ldrh	r2, [r7, #20]
 80110a6:	8a7b      	ldrh	r3, [r7, #18]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d305      	bcc.n	80110b8 <rx_ip+0x23c>
 80110ac:	8aba      	ldrh	r2, [r7, #20]
 80110ae:	8a7b      	ldrh	r3, [r7, #18]
 80110b0:	1ad3      	subs	r3, r2, r3
 80110b2:	461a      	mov	r2, r3
 80110b4:	683b      	ldr	r3, [r7, #0]
 80110b6:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 80110b8:	4b21      	ldr	r3, [pc, #132]	@ (8011140 <rx_ip+0x2c4>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	2b03      	cmp	r3, #3
 80110be:	dd2d      	ble.n	801111c <rx_ip+0x2a0>
 80110c0:	4b20      	ldr	r3, [pc, #128]	@ (8011144 <rx_ip+0x2c8>)
 80110c2:	f241 32a8 	movw	r2, #5032	@ 0x13a8
 80110c6:	4920      	ldr	r1, [pc, #128]	@ (8011148 <rx_ip+0x2cc>)
 80110c8:	2004      	movs	r0, #4
 80110ca:	f7fc fe3f 	bl	800dd4c <mg_log_prefix>
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	69db      	ldr	r3, [r3, #28]
 80110d2:	f103 050c 	add.w	r5, r3, #12
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110da:	881b      	ldrh	r3, [r3, #0]
 80110dc:	b29b      	uxth	r3, r3
 80110de:	4618      	mov	r0, r3
 80110e0:	f010 f8ce 	bl	8021280 <mg_ntohs>
 80110e4:	4603      	mov	r3, r0
 80110e6:	461e      	mov	r6, r3
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	69db      	ldr	r3, [r3, #28]
 80110ec:	f103 0410 	add.w	r4, r3, #16
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110f4:	885b      	ldrh	r3, [r3, #2]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	4618      	mov	r0, r3
 80110fa:	f010 f8c1 	bl	8021280 <mg_ntohs>
 80110fe:	4603      	mov	r3, r0
 8011100:	461a      	mov	r2, r3
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	68db      	ldr	r3, [r3, #12]
 8011106:	9303      	str	r3, [sp, #12]
 8011108:	9202      	str	r2, [sp, #8]
 801110a:	9401      	str	r4, [sp, #4]
 801110c:	4b0f      	ldr	r3, [pc, #60]	@ (801114c <rx_ip+0x2d0>)
 801110e:	9300      	str	r3, [sp, #0]
 8011110:	4633      	mov	r3, r6
 8011112:	462a      	mov	r2, r5
 8011114:	490d      	ldr	r1, [pc, #52]	@ (801114c <rx_ip+0x2d0>)
 8011116:	480f      	ldr	r0, [pc, #60]	@ (8011154 <rx_ip+0x2d8>)
 8011118:	f7fc fe68 	bl	800ddec <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 801111c:	6839      	ldr	r1, [r7, #0]
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7ff fd64 	bl	8010bec <rx_tcp>
 8011124:	e006      	b.n	8011134 <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 8011126:	bf00      	nop
 8011128:	e004      	b.n	8011134 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 801112a:	bf00      	nop
 801112c:	e002      	b.n	8011134 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 801112e:	bf00      	nop
 8011130:	e000      	b.n	8011134 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 8011132:	bf00      	nop
  }
}
 8011134:	371c      	adds	r7, #28
 8011136:	46bd      	mov	sp, r7
 8011138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801113a:	bf00      	nop
 801113c:	0802797c 	.word	0x0802797c
 8011140:	24000258 	.word	0x24000258
 8011144:	0802a1c4 	.word	0x0802a1c4
 8011148:	080264c4 	.word	0x080264c4
 801114c:	08012779 	.word	0x08012779
 8011150:	08027998 	.word	0x08027998
 8011154:	080279b4 	.word	0x080279b4

08011158 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	6a1b      	ldr	r3, [r3, #32]
 8011166:	799b      	ldrb	r3, [r3, #6]
 8011168:	2b01      	cmp	r3, #1
 801116a:	d004      	beq.n	8011176 <rx_ip6+0x1e>
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	6a1b      	ldr	r3, [r3, #32]
 8011170:	799b      	ldrb	r3, [r3, #6]
 8011172:	2b3a      	cmp	r3, #58	@ 0x3a
 8011174:	d115      	bne.n	80111a2 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	6a1b      	ldr	r3, [r3, #32]
 801117a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	2b03      	cmp	r3, #3
 8011188:	d922      	bls.n	80111d0 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801118e:	3304      	adds	r3, #4
 8011190:	4619      	mov	r1, r3
 8011192:	6838      	ldr	r0, [r7, #0]
 8011194:	f7fd fc6a 	bl	800ea6c <mkpay>
    rx_icmp(ifp, pkt);
 8011198:	6839      	ldr	r1, [r7, #0]
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f7fe fa8a 	bl	800f6b4 <rx_icmp>
 80111a0:	e019      	b.n	80111d6 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	6a1b      	ldr	r3, [r3, #32]
 80111a6:	799b      	ldrb	r3, [r3, #6]
 80111a8:	2b11      	cmp	r3, #17
 80111aa:	d114      	bne.n	80111d6 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	6a1b      	ldr	r3, [r3, #32]
 80111b0:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	2b07      	cmp	r3, #7
 80111be:	d909      	bls.n	80111d4 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111c4:	3308      	adds	r3, #8
 80111c6:	4619      	mov	r1, r3
 80111c8:	6838      	ldr	r0, [r7, #0]
 80111ca:	f7fd fc4f 	bl	800ea6c <mkpay>
 80111ce:	e002      	b.n	80111d6 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 80111d0:	bf00      	nop
 80111d2:	e000      	b.n	80111d6 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 80111d4:	bf00      	nop
  }
}
 80111d6:	3708      	adds	r7, #8
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 80111dc:	b590      	push	{r4, r7, lr}
 80111de:	b093      	sub	sp, #76	@ 0x4c
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	60f8      	str	r0, [r7, #12]
 80111e4:	60b9      	str	r1, [r7, #8]
 80111e6:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 80111e8:	f107 0314 	add.w	r3, r7, #20
 80111ec:	2234      	movs	r2, #52	@ 0x34
 80111ee:	2100      	movs	r1, #0
 80111f0:	4618      	mov	r0, r3
 80111f2:	f014 facb 	bl	802578c <memset>
  pkt.raw.buf = (char *) buf;
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	2b0d      	cmp	r3, #13
 8011206:	f240 80df 	bls.w	80113c8 <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8011210:	2b00      	cmp	r3, #0
 8011212:	d013      	beq.n	801123c <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8011214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011216:	4618      	mov	r0, r3
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	2206      	movs	r2, #6
 801121c:	4619      	mov	r1, r3
 801121e:	f014 fa8b 	bl	8025738 <memcmp>
 8011222:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 8011224:	2b00      	cmp	r3, #0
 8011226:	d009      	beq.n	801123c <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 8011228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801122a:	2206      	movs	r2, #6
 801122c:	4970      	ldr	r1, [pc, #448]	@ (80113f0 <mg_tcpip_rx+0x214>)
 801122e:	4618      	mov	r0, r3
 8011230:	f014 fa82 	bl	8025738 <memcmp>
 8011234:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 8011236:	2b00      	cmp	r3, #0
 8011238:	f040 80c8 	bne.w	80113cc <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011242:	2b00      	cmp	r3, #0
 8011244:	d01a      	beq.n	801127c <mg_tcpip_rx+0xa0>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2b04      	cmp	r3, #4
 801124a:	d917      	bls.n	801127c <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	3b04      	subs	r3, #4
 8011250:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 8011252:	687a      	ldr	r2, [r7, #4]
 8011254:	68b9      	ldr	r1, [r7, #8]
 8011256:	2000      	movs	r0, #0
 8011258:	f00f ff92 	bl	8021180 <mg_crc32>
 801125c:	4603      	mov	r3, r0
 801125e:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 8011260:	68ba      	ldr	r2, [r7, #8]
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	4413      	add	r3, r2
 8011266:	4618      	mov	r0, r3
 8011268:	f107 0310 	add.w	r3, r7, #16
 801126c:	2204      	movs	r2, #4
 801126e:	4619      	mov	r1, r3
 8011270:	f014 fa62 	bl	8025738 <memcmp>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	f040 80aa 	bne.w	80113d0 <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 801127c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801127e:	899b      	ldrh	r3, [r3, #12]
 8011280:	b29c      	uxth	r4, r3
 8011282:	f640 0006 	movw	r0, #2054	@ 0x806
 8011286:	f00f fffb 	bl	8021280 <mg_ntohs>
 801128a:	4603      	mov	r3, r0
 801128c:	429c      	cmp	r4, r3
 801128e:	d114      	bne.n	80112ba <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 8011290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011292:	330e      	adds	r3, #14
 8011294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	2b29      	cmp	r3, #41	@ 0x29
 801129a:	f240 809b 	bls.w	80113d4 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 801129e:	f107 0314 	add.w	r3, r7, #20
 80112a2:	461a      	mov	r2, r3
 80112a4:	2103      	movs	r1, #3
 80112a6:	68f8      	ldr	r0, [r7, #12]
 80112a8:	f7fd fbcc 	bl	800ea44 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 80112ac:	f107 0314 	add.w	r3, r7, #20
 80112b0:	4619      	mov	r1, r3
 80112b2:	68f8      	ldr	r0, [r7, #12]
 80112b4:	f7fe f8ec 	bl	800f490 <rx_arp>
 80112b8:	e097      	b.n	80113ea <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 80112ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112bc:	899b      	ldrh	r3, [r3, #12]
 80112be:	b29c      	uxth	r4, r3
 80112c0:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 80112c4:	f00f ffdc 	bl	8021280 <mg_ntohs>
 80112c8:	4603      	mov	r3, r0
 80112ca:	429c      	cmp	r4, r3
 80112cc:	d11b      	bne.n	8011306 <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 80112ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d0:	330e      	adds	r3, #14
 80112d2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 80112d4:	69bb      	ldr	r3, [r7, #24]
 80112d6:	2b35      	cmp	r3, #53	@ 0x35
 80112d8:	d97e      	bls.n	80113d8 <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 80112da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112dc:	781b      	ldrb	r3, [r3, #0]
 80112de:	091b      	lsrs	r3, r3, #4
 80112e0:	b2db      	uxtb	r3, r3
 80112e2:	2b06      	cmp	r3, #6
 80112e4:	d17a      	bne.n	80113dc <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 80112e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112e8:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80112ec:	f107 0314 	add.w	r3, r7, #20
 80112f0:	4611      	mov	r1, r2
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fd fbba 	bl	800ea6c <mkpay>
    rx_ip6(ifp, &pkt);
 80112f8:	f107 0314 	add.w	r3, r7, #20
 80112fc:	4619      	mov	r1, r3
 80112fe:	68f8      	ldr	r0, [r7, #12]
 8011300:	f7ff ff2a 	bl	8011158 <rx_ip6>
 8011304:	e071      	b.n	80113ea <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 8011306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011308:	899b      	ldrh	r3, [r3, #12]
 801130a:	b29c      	uxth	r4, r3
 801130c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011310:	f00f ffb6 	bl	8021280 <mg_ntohs>
 8011314:	4603      	mov	r3, r0
 8011316:	429c      	cmp	r4, r3
 8011318:	d133      	bne.n	8011382 <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 801131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801131c:	330e      	adds	r3, #14
 801131e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	2b21      	cmp	r3, #33	@ 0x21
 8011324:	d95c      	bls.n	80113e0 <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 8011326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011328:	885b      	ldrh	r3, [r3, #2]
 801132a:	b29b      	uxth	r3, r3
 801132c:	4618      	mov	r0, r3
 801132e:	f00f ffa7 	bl	8021280 <mg_ntohs>
 8011332:	4603      	mov	r3, r0
 8011334:	f103 020e 	add.w	r2, r3, #14
 8011338:	69bb      	ldr	r3, [r7, #24]
 801133a:	429a      	cmp	r2, r3
 801133c:	d208      	bcs.n	8011350 <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 801133e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011340:	885b      	ldrh	r3, [r3, #2]
 8011342:	b29b      	uxth	r3, r3
 8011344:	4618      	mov	r0, r3
 8011346:	f00f ff9b 	bl	8021280 <mg_ntohs>
 801134a:	4603      	mov	r3, r0
 801134c:	330e      	adds	r3, #14
 801134e:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 8011350:	69bb      	ldr	r3, [r7, #24]
 8011352:	2b21      	cmp	r3, #33	@ 0x21
 8011354:	d946      	bls.n	80113e4 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 8011356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	091b      	lsrs	r3, r3, #4
 801135c:	b2db      	uxtb	r3, r3
 801135e:	2b04      	cmp	r3, #4
 8011360:	d142      	bne.n	80113e8 <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 8011362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011364:	f103 0214 	add.w	r2, r3, #20
 8011368:	f107 0314 	add.w	r3, r7, #20
 801136c:	4611      	mov	r1, r2
 801136e:	4618      	mov	r0, r3
 8011370:	f7fd fb7c 	bl	800ea6c <mkpay>
    rx_ip(ifp, &pkt);
 8011374:	f107 0314 	add.w	r3, r7, #20
 8011378:	4619      	mov	r1, r3
 801137a:	68f8      	ldr	r0, [r7, #12]
 801137c:	f7ff fd7e 	bl	8010e7c <rx_ip>
 8011380:	e033      	b.n	80113ea <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 8011382:	4b1c      	ldr	r3, [pc, #112]	@ (80113f4 <mg_tcpip_rx+0x218>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	2b02      	cmp	r3, #2
 8011388:	dd11      	ble.n	80113ae <mg_tcpip_rx+0x1d2>
 801138a:	4b1b      	ldr	r3, [pc, #108]	@ (80113f8 <mg_tcpip_rx+0x21c>)
 801138c:	f241 32e7 	movw	r2, #5095	@ 0x13e7
 8011390:	491a      	ldr	r1, [pc, #104]	@ (80113fc <mg_tcpip_rx+0x220>)
 8011392:	2003      	movs	r0, #3
 8011394:	f7fc fcda 	bl	800dd4c <mg_log_prefix>
 8011398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801139a:	899b      	ldrh	r3, [r3, #12]
 801139c:	b29b      	uxth	r3, r3
 801139e:	4618      	mov	r0, r3
 80113a0:	f00f ff6e 	bl	8021280 <mg_ntohs>
 80113a4:	4603      	mov	r3, r0
 80113a6:	4619      	mov	r1, r3
 80113a8:	4815      	ldr	r0, [pc, #84]	@ (8011400 <mg_tcpip_rx+0x224>)
 80113aa:	f7fc fd1f 	bl	800ddec <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 80113ae:	4b11      	ldr	r3, [pc, #68]	@ (80113f4 <mg_tcpip_rx+0x218>)
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	2b03      	cmp	r3, #3
 80113b4:	dd19      	ble.n	80113ea <mg_tcpip_rx+0x20e>
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2b20      	cmp	r3, #32
 80113ba:	bf28      	it	cs
 80113bc:	2320      	movcs	r3, #32
 80113be:	4619      	mov	r1, r3
 80113c0:	68b8      	ldr	r0, [r7, #8]
 80113c2:	f7fc fd49 	bl	800de58 <mg_hexdump>
 80113c6:	e010      	b.n	80113ea <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 80113c8:	bf00      	nop
 80113ca:	e00e      	b.n	80113ea <mg_tcpip_rx+0x20e>
    return;
 80113cc:	bf00      	nop
 80113ce:	e00c      	b.n	80113ea <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 80113d0:	bf00      	nop
 80113d2:	e00a      	b.n	80113ea <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 80113d4:	bf00      	nop
 80113d6:	e008      	b.n	80113ea <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 80113d8:	bf00      	nop
 80113da:	e006      	b.n	80113ea <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 80113dc:	bf00      	nop
 80113de:	e004      	b.n	80113ea <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80113e0:	bf00      	nop
 80113e2:	e002      	b.n	80113ea <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 80113e4:	bf00      	nop
 80113e6:	e000      	b.n	80113ea <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 80113e8:	bf00      	nop
  }
}
 80113ea:	374c      	adds	r7, #76	@ 0x4c
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd90      	pop	{r4, r7, pc}
 80113f0:	08029bec 	.word	0x08029bec
 80113f4:	24000258 	.word	0x24000258
 80113f8:	0802a1cc 	.word	0x0802a1cc
 80113fc:	080264c4 	.word	0x080264c4
 8011400:	080279d0 	.word	0x080279d0

08011404 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 8011404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011406:	b095      	sub	sp, #84	@ 0x54
 8011408:	af06      	add	r7, sp, #24
 801140a:	6178      	str	r0, [r7, #20]
 801140c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8011416:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801141a:	e9cd 2300 	strd	r2, r3, [sp]
 801141e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011422:	f04f 0300 	mov.w	r3, #0
 8011426:	4608      	mov	r0, r1
 8011428:	f005 f968 	bl	80166fc <mg_timer_expired>
 801142c:	4603      	mov	r3, r0
 801142e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 8011432:	6979      	ldr	r1, [r7, #20]
 8011434:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011438:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 801143c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00b      	beq.n	801145c <mg_tcpip_poll+0x58>
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801144a:	2b03      	cmp	r3, #3
 801144c:	d106      	bne.n	801145c <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	2204      	movs	r2, #4
 8011452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    onstatechange(ifp);
 8011456:	6978      	ldr	r0, [r7, #20]
 8011458:	f7fd fc68 	bl	800ed2c <onstatechange>
  }
  // poll driver
  if (ifp->driver->poll) {
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	2b00      	cmp	r3, #0
 8011464:	d075      	beq.n	8011552 <mg_tcpip_poll+0x14e>
    bool up = ifp->driver->poll(ifp, expired_1000ms);
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8011470:	4611      	mov	r1, r2
 8011472:	6978      	ldr	r0, [r7, #20]
 8011474:	4798      	blx	r3
 8011476:	4603      	mov	r3, r0
 8011478:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    // Handle physical interface up/down status
    if (expired_1000ms) {
 801147c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011480:	2b00      	cmp	r3, #0
 8011482:	d066      	beq.n	8011552 <mg_tcpip_poll+0x14e>
      bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801148a:	2b00      	cmp	r3, #0
 801148c:	bf14      	ite	ne
 801148e:	2301      	movne	r3, #1
 8011490:	2300      	moveq	r3, #0
 8011492:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 8011496:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801149a:	f083 0301 	eor.w	r3, r3, #1
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d006      	beq.n	80114b2 <mg_tcpip_poll+0xae>
 80114a4:	697b      	ldr	r3, [r7, #20]
 80114a6:	7f1b      	ldrb	r3, [r3, #28]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d002      	beq.n	80114b2 <mg_tcpip_poll+0xae>
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	2200      	movs	r2, #0
 80114b0:	609a      	str	r2, [r3, #8]
      if (up != current) {  // link state has changed
 80114b2:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80114b6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d01a      	beq.n	80114f4 <mg_tcpip_poll+0xf0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 80114be:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80114c2:	f083 0301 	eor.w	r3, r3, #1
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d001      	beq.n	80114d0 <mg_tcpip_poll+0xcc>
 80114cc:	2300      	movs	r3, #0
 80114ce:	e00a      	b.n	80114e6 <mg_tcpip_poll+0xe2>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	7f1b      	ldrb	r3, [r3, #28]
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d103      	bne.n	80114e0 <mg_tcpip_poll+0xdc>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	689b      	ldr	r3, [r3, #8]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d101      	bne.n	80114e4 <mg_tcpip_poll+0xe0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 80114e0:	2301      	movs	r3, #1
 80114e2:	e000      	b.n	80114e6 <mg_tcpip_poll+0xe2>
 80114e4:	2303      	movs	r3, #3
 80114e6:	697a      	ldr	r2, [r7, #20]
 80114e8:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
                         ? MG_TCPIP_STATE_UP
                         : MG_TCPIP_STATE_IP;
        onstatechange(ifp);
 80114ec:	6978      	ldr	r0, [r7, #20]
 80114ee:	f7fd fc1d 	bl	800ed2c <onstatechange>
 80114f2:	e016      	b.n	8011522 <mg_tcpip_poll+0x11e>
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	7f1b      	ldrb	r3, [r3, #28]
 80114f8:	f083 0301 	eor.w	r3, r3, #1
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d00f      	beq.n	8011522 <mg_tcpip_poll+0x11e>
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011508:	2b01      	cmp	r3, #1
 801150a:	d10a      	bne.n	8011522 <mg_tcpip_poll+0x11e>
                 ifp->ip) {
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	689b      	ldr	r3, [r3, #8]
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 8011510:	2b00      	cmp	r3, #0
 8011512:	d006      	beq.n	8011522 <mg_tcpip_poll+0x11e>
        ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	2203      	movs	r2, #3
 8011518:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 801151c:	6978      	ldr	r0, [r7, #20]
 801151e:	f7fd fc05 	bl	800ed2c <onstatechange>
      }
      if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011528:	2b00      	cmp	r3, #0
 801152a:	d10d      	bne.n	8011548 <mg_tcpip_poll+0x144>
 801152c:	4ba4      	ldr	r3, [pc, #656]	@ (80117c0 <mg_tcpip_poll+0x3bc>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	dd09      	ble.n	8011548 <mg_tcpip_poll+0x144>
 8011534:	4ba3      	ldr	r3, [pc, #652]	@ (80117c4 <mg_tcpip_poll+0x3c0>)
 8011536:	f241 4210 	movw	r2, #5136	@ 0x1410
 801153a:	49a3      	ldr	r1, [pc, #652]	@ (80117c8 <mg_tcpip_poll+0x3c4>)
 801153c:	2001      	movs	r0, #1
 801153e:	f7fc fc05 	bl	800dd4c <mg_log_prefix>
 8011542:	48a2      	ldr	r0, [pc, #648]	@ (80117cc <mg_tcpip_poll+0x3c8>)
 8011544:	f7fc fc52 	bl	800ddec <mg_log>
      mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 8011548:	2200      	movs	r2, #0
 801154a:	2104      	movs	r1, #4
 801154c:	6978      	ldr	r0, [r7, #20]
 801154e:	f7fd fa79 	bl	800ea44 <mg_tcpip_call>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011558:	2b00      	cmp	r3, #0
 801155a:	f000 81a5 	beq.w	80118a8 <mg_tcpip_poll+0x4a4>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	7f1b      	ldrb	r3, [r3, #28]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d055      	beq.n	8011612 <mg_tcpip_poll+0x20e>
 8011566:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801156a:	2b00      	cmp	r3, #0
 801156c:	d051      	beq.n	8011612 <mg_tcpip_poll+0x20e>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011574:	2b01      	cmp	r3, #1
 8011576:	d103      	bne.n	8011580 <mg_tcpip_poll+0x17c>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 8011578:	6978      	ldr	r0, [r7, #20]
 801157a:	f7fd fedb 	bl	800f334 <tx_dhcp_discover>
 801157e:	e048      	b.n	8011612 <mg_tcpip_poll+0x20e>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011586:	2b04      	cmp	r3, #4
 8011588:	d143      	bne.n	8011612 <mg_tcpip_poll+0x20e>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 801158a:	697b      	ldr	r3, [r7, #20]
 801158c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 8011590:	4313      	orrs	r3, r2
 8011592:	d03e      	beq.n	8011612 <mg_tcpip_poll+0x20e>
      if (ifp->now >= ifp->lease_expire) {
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80115a0:	4290      	cmp	r0, r2
 80115a2:	eb71 0303 	sbcs.w	r3, r1, r3
 80115a6:	d30a      	bcc.n	80115be <mg_tcpip_poll+0x1ba>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	2201      	movs	r2, #1
 80115ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	2200      	movs	r2, #0
 80115b4:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 80115b6:	6978      	ldr	r0, [r7, #20]
 80115b8:	f7fd fbb8 	bl	800ed2c <onstatechange>
 80115bc:	e029      	b.n	8011612 <mg_tcpip_poll+0x20e>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80115c4:	4982      	ldr	r1, [pc, #520]	@ (80117d0 <mg_tcpip_poll+0x3cc>)
 80115c6:	1854      	adds	r4, r2, r1
 80115c8:	f143 0500 	adc.w	r5, r3, #0
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80115d2:	42a2      	cmp	r2, r4
 80115d4:	41ab      	sbcs	r3, r5
 80115d6:	d21c      	bcs.n	8011612 <mg_tcpip_poll+0x20e>
                 ((ifp->now / 1000) % 60) == 0) {
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80115de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80115e2:	f04f 0300 	mov.w	r3, #0
 80115e6:	f7ee fefb 	bl	80003e0 <__aeabi_uldivmod>
 80115ea:	4602      	mov	r2, r0
 80115ec:	460b      	mov	r3, r1
 80115ee:	4610      	mov	r0, r2
 80115f0:	4619      	mov	r1, r3
 80115f2:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 80115f6:	f04f 0300 	mov.w	r3, #0
 80115fa:	f7ee fef1 	bl	80003e0 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 80115fe:	4313      	orrs	r3, r2
 8011600:	d107      	bne.n	8011612 <mg_tcpip_poll+0x20e>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	689a      	ldr	r2, [r3, #8]
 8011606:	f04f 33ff 	mov.w	r3, #4294967295
 801160a:	4972      	ldr	r1, [pc, #456]	@ (80117d4 <mg_tcpip_poll+0x3d0>)
 801160c:	6978      	ldr	r0, [r7, #20]
 801160e:	f7fd fe5f 	bl	800f2d0 <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Simple polling driver, returns one frame
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011616:	689b      	ldr	r3, [r3, #8]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d019      	beq.n	8011650 <mg_tcpip_poll+0x24c>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	697a      	ldr	r2, [r7, #20]
 8011624:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8011626:	697a      	ldr	r2, [r7, #20]
 8011628:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 801162a:	697a      	ldr	r2, [r7, #20]
 801162c:	4798      	blx	r3
 801162e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 8011630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011632:	2b00      	cmp	r3, #0
 8011634:	d024      	beq.n	8011680 <mg_tcpip_poll+0x27c>
      ifp->nrecv++;
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801163a:	1c5a      	adds	r2, r3, #1
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	679a      	str	r2, [r3, #120]	@ 0x78
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011646:	4619      	mov	r1, r3
 8011648:	6978      	ldr	r0, [r7, #20]
 801164a:	f7ff fdc7 	bl	80111dc <mg_tcpip_rx>
 801164e:	e017      	b.n	8011680 <mg_tcpip_poll+0x27c>
    }
  } else {  // Complex poll / Interrupt-based driver. Queues recvd frames
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	3334      	adds	r3, #52	@ 0x34
 8011654:	f107 0220 	add.w	r2, r7, #32
 8011658:	4611      	mov	r1, r2
 801165a:	4618      	mov	r0, r3
 801165c:	f001 faba 	bl	8012bd4 <mg_queue_next>
 8011660:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 8011662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011664:	2b00      	cmp	r3, #0
 8011666:	d00b      	beq.n	8011680 <mg_tcpip_poll+0x27c>
      mg_tcpip_rx(ifp, buf, len);
 8011668:	6a3b      	ldr	r3, [r7, #32]
 801166a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801166c:	4619      	mov	r1, r3
 801166e:	6978      	ldr	r0, [r7, #20]
 8011670:	f7ff fdb4 	bl	80111dc <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	3334      	adds	r3, #52	@ 0x34
 8011678:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801167a:	4618      	mov	r0, r3
 801167c:	f001 fb28 	bl	8012cd0 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	637b      	str	r3, [r7, #52]	@ 0x34
 8011688:	e109      	b.n	801189e <mg_tcpip_poll+0x49a>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 801168a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801168c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011690:	f003 0301 	and.w	r3, r3, #1
 8011694:	b2db      	uxtb	r3, r3
 8011696:	2b00      	cmp	r3, #0
 8011698:	d008      	beq.n	80116ac <mg_tcpip_poll+0x2a8>
 801169a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801169c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80116a0:	f003 0310 	and.w	r3, r3, #16
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f000 80f3 	beq.w	8011892 <mg_tcpip_poll+0x48e>
 80116ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ae:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80116b2:	f003 0301 	and.w	r3, r3, #1
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	f040 80ea 	bne.w	8011892 <mg_tcpip_poll+0x48e>
 80116be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116c0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80116c4:	f003 0308 	and.w	r3, r3, #8
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f040 80e1 	bne.w	8011892 <mg_tcpip_poll+0x48e>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 80116d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116d2:	33b0      	adds	r3, #176	@ 0xb0
 80116d4:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80116d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116d8:	331c      	adds	r3, #28
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	61fb      	str	r3, [r7, #28]
    if (ifp->now > s->timer) {
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80116e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80116e6:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 80116ea:	4290      	cmp	r0, r2
 80116ec:	eb71 0303 	sbcs.w	r3, r1, r3
 80116f0:	f080 80d2 	bcs.w	8011898 <mg_tcpip_poll+0x494>
      if (s->ttype == MIP_TTYPE_ARP) {
 80116f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80116fa:	2b02      	cmp	r3, #2
 80116fc:	d104      	bne.n	8011708 <mg_tcpip_poll+0x304>
        mg_error(c, "ARP timeout");
 80116fe:	4936      	ldr	r1, [pc, #216]	@ (80117d8 <mg_tcpip_poll+0x3d4>)
 8011700:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011702:	f7f6 fdf7 	bl	80082f4 <mg_error>
 8011706:	e0bf      	b.n	8011888 <mg_tcpip_poll+0x484>
      } else if (c->is_udp) {
 8011708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801170a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801170e:	f003 0301 	and.w	r3, r3, #1
 8011712:	b2db      	uxtb	r3, r3
 8011714:	2b00      	cmp	r3, #0
 8011716:	f040 80be 	bne.w	8011896 <mg_tcpip_poll+0x492>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 801171a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801171c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011720:	2b01      	cmp	r3, #1
 8011722:	d142      	bne.n	80117aa <mg_tcpip_poll+0x3a6>
 8011724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011726:	691a      	ldr	r2, [r3, #16]
 8011728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	429a      	cmp	r2, r3
 801172e:	d03c      	beq.n	80117aa <mg_tcpip_poll+0x3a6>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 8011730:	4b23      	ldr	r3, [pc, #140]	@ (80117c0 <mg_tcpip_poll+0x3bc>)
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2b03      	cmp	r3, #3
 8011736:	dd0f      	ble.n	8011758 <mg_tcpip_poll+0x354>
 8011738:	4b22      	ldr	r3, [pc, #136]	@ (80117c4 <mg_tcpip_poll+0x3c0>)
 801173a:	f241 4245 	movw	r2, #5189	@ 0x1445
 801173e:	4922      	ldr	r1, [pc, #136]	@ (80117c8 <mg_tcpip_poll+0x3c4>)
 8011740:	2004      	movs	r0, #4
 8011742:	f7fc fb03 	bl	800dd4c <mg_log_prefix>
 8011746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011748:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174c:	681a      	ldr	r2, [r3, #0]
 801174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	4822      	ldr	r0, [pc, #136]	@ (80117dc <mg_tcpip_poll+0x3d8>)
 8011754:	f7fc fb4a 	bl	800ddec <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8011758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801175a:	f103 061a 	add.w	r6, r3, #26
 801175e:	69fb      	ldr	r3, [r7, #28]
 8011760:	613b      	str	r3, [r7, #16]
 8011762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011764:	8b1c      	ldrh	r4, [r3, #24]
 8011766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011768:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 801176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4618      	mov	r0, r3
 8011770:	f00f fd9d 	bl	80212ae <mg_ntohl>
 8011774:	6078      	str	r0, [r7, #4]
 8011776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	4618      	mov	r0, r3
 801177c:	f00f fd97 	bl	80212ae <mg_ntohl>
 8011780:	4603      	mov	r3, r0
 8011782:	2200      	movs	r2, #0
 8011784:	9205      	str	r2, [sp, #20]
 8011786:	2200      	movs	r2, #0
 8011788:	9204      	str	r2, [sp, #16]
 801178a:	9303      	str	r3, [sp, #12]
 801178c:	6879      	ldr	r1, [r7, #4]
 801178e:	9102      	str	r1, [sp, #8]
 8011790:	9501      	str	r5, [sp, #4]
 8011792:	9400      	str	r4, [sp, #0]
 8011794:	2310      	movs	r3, #16
 8011796:	693a      	ldr	r2, [r7, #16]
 8011798:	4631      	mov	r1, r6
 801179a:	6978      	ldr	r0, [r7, #20]
 801179c:	f7fe fc2e 	bl	800fffc <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 80117a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a2:	685a      	ldr	r2, [r3, #4]
 80117a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117a6:	611a      	str	r2, [r3, #16]
 80117a8:	e06e      	b.n	8011888 <mg_tcpip_poll+0x484>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 80117aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117b0:	2b03      	cmp	r3, #3
 80117b2:	d117      	bne.n	80117e4 <mg_tcpip_poll+0x3e0>
        mg_error(c, "Connection timeout");
 80117b4:	490a      	ldr	r1, [pc, #40]	@ (80117e0 <mg_tcpip_poll+0x3dc>)
 80117b6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80117b8:	f7f6 fd9c 	bl	80082f4 <mg_error>
 80117bc:	e064      	b.n	8011888 <mg_tcpip_poll+0x484>
 80117be:	bf00      	nop
 80117c0:	24000258 	.word	0x24000258
 80117c4:	0802a1d8 	.word	0x0802a1d8
 80117c8:	080264c4 	.word	0x080264c4
 80117cc:	080279e4 	.word	0x080279e4
 80117d0:	001b7740 	.word	0x001b7740
 80117d4:	08029bec 	.word	0x08029bec
 80117d8:	080279f4 	.word	0x080279f4
 80117dc:	08027a00 	.word	0x08027a00
 80117e0:	08027a10 	.word	0x08027a10
      } else if (s->ttype == MIP_TTYPE_FIN) {
 80117e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80117ea:	2b04      	cmp	r3, #4
 80117ec:	d107      	bne.n	80117fe <mg_tcpip_poll+0x3fa>
        c->is_closing = 1;
 80117ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117f0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80117f4:	f043 0320 	orr.w	r3, r3, #32
 80117f8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 80117fc:	e04c      	b.n	8011898 <mg_tcpip_poll+0x494>
      } else {
        if (s->tmiss++ > 2) {
 80117fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011800:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8011804:	1c5a      	adds	r2, r3, #1
 8011806:	b2d1      	uxtb	r1, r2
 8011808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801180a:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 801180e:	2b02      	cmp	r3, #2
 8011810:	d904      	bls.n	801181c <mg_tcpip_poll+0x418>
          mg_error(c, "keepalive");
 8011812:	4927      	ldr	r1, [pc, #156]	@ (80118b0 <mg_tcpip_poll+0x4ac>)
 8011814:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8011816:	f7f6 fd6d 	bl	80082f4 <mg_error>
 801181a:	e035      	b.n	8011888 <mg_tcpip_poll+0x484>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 801181c:	4b25      	ldr	r3, [pc, #148]	@ (80118b4 <mg_tcpip_poll+0x4b0>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2b03      	cmp	r3, #3
 8011822:	dd0c      	ble.n	801183e <mg_tcpip_poll+0x43a>
 8011824:	4b24      	ldr	r3, [pc, #144]	@ (80118b8 <mg_tcpip_poll+0x4b4>)
 8011826:	f241 4252 	movw	r2, #5202	@ 0x1452
 801182a:	4924      	ldr	r1, [pc, #144]	@ (80118bc <mg_tcpip_poll+0x4b8>)
 801182c:	2004      	movs	r0, #4
 801182e:	f7fc fa8d 	bl	800dd4c <mg_log_prefix>
 8011832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011836:	4619      	mov	r1, r3
 8011838:	4821      	ldr	r0, [pc, #132]	@ (80118c0 <mg_tcpip_poll+0x4bc>)
 801183a:	f7fc fad7 	bl	800ddec <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 801183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011840:	f103 061a 	add.w	r6, r3, #26
 8011844:	69fb      	ldr	r3, [r7, #28]
 8011846:	613b      	str	r3, [r7, #16]
 8011848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801184a:	8b1c      	ldrh	r4, [r3, #24]
 801184c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801184e:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 8011850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011852:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 8011854:	3b01      	subs	r3, #1
 8011856:	4618      	mov	r0, r3
 8011858:	f00f fd29 	bl	80212ae <mg_ntohl>
 801185c:	6078      	str	r0, [r7, #4]
 801185e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011860:	685b      	ldr	r3, [r3, #4]
 8011862:	4618      	mov	r0, r3
 8011864:	f00f fd23 	bl	80212ae <mg_ntohl>
 8011868:	4603      	mov	r3, r0
 801186a:	2200      	movs	r2, #0
 801186c:	9205      	str	r2, [sp, #20]
 801186e:	2200      	movs	r2, #0
 8011870:	9204      	str	r2, [sp, #16]
 8011872:	9303      	str	r3, [sp, #12]
 8011874:	6879      	ldr	r1, [r7, #4]
 8011876:	9102      	str	r1, [sp, #8]
 8011878:	9501      	str	r5, [sp, #4]
 801187a:	9400      	str	r4, [sp, #0]
 801187c:	2310      	movs	r3, #16
 801187e:	693a      	ldr	r2, [r7, #16]
 8011880:	4631      	mov	r1, r6
 8011882:	6978      	ldr	r0, [r7, #20]
 8011884:	f7fe fbba 	bl	800fffc <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 8011888:	2100      	movs	r1, #0
 801188a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801188c:	f7fd f966 	bl	800eb5c <settmout>
 8011890:	e002      	b.n	8011898 <mg_tcpip_poll+0x494>
      continue;
 8011892:	bf00      	nop
 8011894:	e000      	b.n	8011898 <mg_tcpip_poll+0x494>
        continue;
 8011896:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 8011898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	637b      	str	r3, [r7, #52]	@ 0x34
 801189e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	f47f aef2 	bne.w	801168a <mg_tcpip_poll+0x286>
 80118a6:	e000      	b.n	80118aa <mg_tcpip_poll+0x4a6>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 80118a8:	bf00      	nop
    }
  }
}
 80118aa:	373c      	adds	r7, #60	@ 0x3c
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118b0:	08027a24 	.word	0x08027a24
 80118b4:	24000258 	.word	0x24000258
 80118b8:	0802a1d8 	.word	0x0802a1d8
 80118bc:	080264c4 	.word	0x080264c4
 80118c0:	08027a30 	.word	0x08027a30

080118c4 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b086      	sub	sp, #24
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	60f8      	str	r0, [r7, #12]
 80118cc:	60b9      	str	r1, [r7, #8]
 80118ce:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	3334      	adds	r3, #52	@ 0x34
 80118d4:	f107 0114 	add.w	r1, r7, #20
 80118d8:	68ba      	ldr	r2, [r7, #8]
 80118da:	4618      	mov	r0, r3
 80118dc:	f001 f922 	bl	8012b24 <mg_queue_book>
 80118e0:	4602      	mov	r2, r0
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d811      	bhi.n	801190c <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	68ba      	ldr	r2, [r7, #8]
 80118ec:	68f9      	ldr	r1, [r7, #12]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f014 f881 	bl	80259f6 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	3334      	adds	r3, #52	@ 0x34
 80118f8:	68b9      	ldr	r1, [r7, #8]
 80118fa:	4618      	mov	r0, r3
 80118fc:	f001 f9b0 	bl	8012c60 <mg_queue_add>
    ifp->nrecv++;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011904:	1c5a      	adds	r2, r3, #1
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	679a      	str	r2, [r3, #120]	@ 0x78
  } else {
    ifp->ndrop++;
  }
}
 801190a:	e004      	b.n	8011916 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011910:	1c5a      	adds	r2, r3, #1
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011916:	bf00      	nop
 8011918:	3718      	adds	r7, #24
 801191a:	46bd      	mov	sp, r7
 801191c:	bd80      	pop	{r7, pc}
	...

08011920 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 8011920:	b580      	push	{r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	781b      	ldrb	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d12d      	bne.n	801198e <mg_tcpip_init+0x6e>
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	785b      	ldrb	r3, [r3, #1]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d129      	bne.n	801198e <mg_tcpip_init+0x6e>
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	789b      	ldrb	r3, [r3, #2]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d125      	bne.n	801198e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 8011946:	2b00      	cmp	r3, #0
 8011948:	d121      	bne.n	801198e <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	791b      	ldrb	r3, [r3, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d11d      	bne.n	801198e <mg_tcpip_init+0x6e>
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	795b      	ldrb	r3, [r3, #5]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d119      	bne.n	801198e <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	2202      	movs	r2, #2
 801195e:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	3301      	adds	r3, #1
 8011964:	2105      	movs	r1, #5
 8011966:	4618      	mov	r0, r3
 8011968:	f7ee fed0 	bl	800070c <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 801196c:	4b59      	ldr	r3, [pc, #356]	@ (8011ad4 <mg_tcpip_init+0x1b4>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	2b01      	cmp	r3, #1
 8011972:	dd0c      	ble.n	801198e <mg_tcpip_init+0x6e>
 8011974:	4b58      	ldr	r3, [pc, #352]	@ (8011ad8 <mg_tcpip_init+0x1b8>)
 8011976:	f241 4271 	movw	r2, #5233	@ 0x1471
 801197a:	4958      	ldr	r1, [pc, #352]	@ (8011adc <mg_tcpip_init+0x1bc>)
 801197c:	2002      	movs	r0, #2
 801197e:	f7fc f9e5 	bl	800dd4c <mg_log_prefix>
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	461a      	mov	r2, r3
 8011986:	4956      	ldr	r1, [pc, #344]	@ (8011ae0 <mg_tcpip_init+0x1c0>)
 8011988:	4856      	ldr	r0, [pc, #344]	@ (8011ae4 <mg_tcpip_init+0x1c4>)
 801198a:	f7fc fa2f 	bl	800ddec <mg_log>
  }

  // If DHCP name is not set, use "mip"
  if (ifp->dhcp_name[0] == '\0') {
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011994:	2b00      	cmp	r3, #0
 8011996:	d106      	bne.n	80119a6 <mg_tcpip_init+0x86>
    memcpy(ifp->dhcp_name, "mip", 4);
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	3344      	adds	r3, #68	@ 0x44
 801199c:	2204      	movs	r2, #4
 801199e:	4952      	ldr	r1, [pc, #328]	@ (8011ae8 <mg_tcpip_init+0x1c8>)
 80119a0:	4618      	mov	r0, r3
 80119a2:	f014 f828 	bl	80259f6 <memcpy>
  }
  ifp->dhcp_name[sizeof(ifp->dhcp_name) - 1] = '\0';  // Just in case
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	2200      	movs	r2, #0
 80119aa:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d019      	beq.n	80119ec <mg_tcpip_init+0xcc>
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	6838      	ldr	r0, [r7, #0]
 80119c0:	4798      	blx	r3
 80119c2:	4603      	mov	r3, r0
 80119c4:	f083 0301 	eor.w	r3, r3, #1
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d00e      	beq.n	80119ec <mg_tcpip_init+0xcc>
    MG_ERROR(("driver init failed"));
 80119ce:	4b41      	ldr	r3, [pc, #260]	@ (8011ad4 <mg_tcpip_init+0x1b4>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	dd7a      	ble.n	8011acc <mg_tcpip_init+0x1ac>
 80119d6:	4b40      	ldr	r3, [pc, #256]	@ (8011ad8 <mg_tcpip_init+0x1b8>)
 80119d8:	f241 427b 	movw	r2, #5243	@ 0x147b
 80119dc:	493f      	ldr	r1, [pc, #252]	@ (8011adc <mg_tcpip_init+0x1bc>)
 80119de:	2001      	movs	r0, #1
 80119e0:	f7fc f9b4 	bl	800dd4c <mg_log_prefix>
 80119e4:	4841      	ldr	r0, [pc, #260]	@ (8011aec <mg_tcpip_init+0x1cc>)
 80119e6:	f7fc fa01 	bl	800ddec <mg_log>
 80119ea:	e06f      	b.n	8011acc <mg_tcpip_init+0x1ac>
  } else {
    size_t framesize = 1540;
 80119ec:	f240 6304 	movw	r3, #1540	@ 0x604
 80119f0:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 80119f2:	68f9      	ldr	r1, [r7, #12]
 80119f4:	2001      	movs	r0, #1
 80119f6:	f013 faef 	bl	8024fd8 <calloc>
 80119fa:	4603      	mov	r3, r0
 80119fc:	461a      	mov	r2, r3
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	615a      	str	r2, [r3, #20]
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	68fa      	ldr	r2, [r7, #12]
 8011a06:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d10a      	bne.n	8011a26 <mg_tcpip_init+0x106>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a14:	689b      	ldr	r3, [r3, #8]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d001      	beq.n	8011a1e <mg_tcpip_init+0xfe>
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	e001      	b.n	8011a22 <mg_tcpip_init+0x102>
 8011a1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011a22:	683a      	ldr	r2, [r7, #0]
 8011a24:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	2001      	movs	r0, #1
 8011a2e:	f013 fad3 	bl	8024fd8 <calloc>
 8011a32:	4603      	mov	r3, r0
 8011a34:	461a      	mov	r2, r3
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 8011a3a:	f7ee fe95 	bl	8000768 <mg_millis>
 8011a3e:	4602      	mov	r2, r0
 8011a40:	460b      	mov	r3, r1
 8011a42:	6839      	ldr	r1, [r7, #0]
 8011a44:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    mgr->ifp = ifp;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	683a      	ldr	r2, [r7, #0]
 8011a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    ifp->mgr = mgr;
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8011a5a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    mgr->extraconnsize = sizeof(struct connstate);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2238      	movs	r2, #56	@ 0x38
 8011a62:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	689b      	ldr	r3, [r3, #8]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d102      	bne.n	8011a72 <mg_tcpip_init+0x152>
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	2201      	movs	r2, #1
 8011a70:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 8011a72:	683b      	ldr	r3, [r7, #0]
 8011a74:	3352      	adds	r3, #82	@ 0x52
 8011a76:	2206      	movs	r2, #6
 8011a78:	21ff      	movs	r1, #255	@ 0xff
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f013 fe86 	bl	802578c <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	3370      	adds	r3, #112	@ 0x70
 8011a84:	2102      	movs	r1, #2
 8011a86:	4618      	mov	r0, r3
 8011a88:	f7ee fe40 	bl	800070c <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 8011a92:	4b17      	ldr	r3, [pc, #92]	@ (8011af0 <mg_tcpip_init+0x1d0>)
 8011a94:	4313      	orrs	r3, r2
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	695b      	ldr	r3, [r3, #20]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d003      	beq.n	8011aae <mg_tcpip_init+0x18e>
 8011aa6:	683b      	ldr	r3, [r7, #0]
 8011aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d10e      	bne.n	8011acc <mg_tcpip_init+0x1ac>
 8011aae:	4b09      	ldr	r3, [pc, #36]	@ (8011ad4 <mg_tcpip_init+0x1b4>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	dd0a      	ble.n	8011acc <mg_tcpip_init+0x1ac>
 8011ab6:	4b08      	ldr	r3, [pc, #32]	@ (8011ad8 <mg_tcpip_init+0x1b8>)
 8011ab8:	f241 428c 	movw	r2, #5260	@ 0x148c
 8011abc:	4907      	ldr	r1, [pc, #28]	@ (8011adc <mg_tcpip_init+0x1bc>)
 8011abe:	2001      	movs	r0, #1
 8011ac0:	f7fc f944 	bl	800dd4c <mg_log_prefix>
 8011ac4:	480b      	ldr	r0, [pc, #44]	@ (8011af4 <mg_tcpip_init+0x1d4>)
 8011ac6:	f7fc f991 	bl	800ddec <mg_log>
  }
}
 8011aca:	e7ff      	b.n	8011acc <mg_tcpip_init+0x1ac>
 8011acc:	bf00      	nop
 8011ace:	3710      	adds	r7, #16
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	24000258 	.word	0x24000258
 8011ad8:	0802a1e8 	.word	0x0802a1e8
 8011adc:	080264c4 	.word	0x080264c4
 8011ae0:	0801283d 	.word	0x0801283d
 8011ae4:	08027a40 	.word	0x08027a40
 8011ae8:	08027a64 	.word	0x08027a64
 8011aec:	08027a68 	.word	0x08027a68
 8011af0:	ffff8000 	.word	0xffff8000
 8011af4:	08027480 	.word	0x08027480

08011af8 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 8011af8:	b5b0      	push	{r4, r5, r7, lr}
 8011afa:	b08c      	sub	sp, #48	@ 0x30
 8011afc:	af06      	add	r7, sp, #24
 8011afe:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	33b0      	adds	r3, #176	@ 0xb0
 8011b04:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	8b1b      	ldrh	r3, [r3, #24]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f00f fbb8 	bl	8021280 <mg_ntohs>
 8011b10:	4603      	mov	r3, r0
 8011b12:	4618      	mov	r0, r3
 8011b14:	f00f fbcb 	bl	80212ae <mg_ntohl>
 8011b18:	6138      	str	r0, [r7, #16]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	331c      	adds	r3, #28
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	60fb      	str	r3, [r7, #12]
  tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0,
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	f103 041a 	add.w	r4, r3, #26
 8011b2e:	68fd      	ldr	r5, [r7, #12]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	8b1b      	ldrh	r3, [r3, #24]
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8011b38:	2100      	movs	r1, #0
 8011b3a:	9105      	str	r1, [sp, #20]
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	9104      	str	r1, [sp, #16]
 8011b40:	2100      	movs	r1, #0
 8011b42:	9103      	str	r1, [sp, #12]
 8011b44:	6939      	ldr	r1, [r7, #16]
 8011b46:	9102      	str	r1, [sp, #8]
 8011b48:	9201      	str	r2, [sp, #4]
 8011b4a:	9300      	str	r3, [sp, #0]
 8011b4c:	2302      	movs	r3, #2
 8011b4e:	462a      	mov	r2, r5
 8011b50:	4621      	mov	r1, r4
 8011b52:	f7fe fa53 	bl	800fffc <tx_tcp>
         NULL, 0);
}
 8011b56:	bf00      	nop
 8011b58:	3718      	adds	r7, #24
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bdb0      	pop	{r4, r5, r7, pc}

08011b5e <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 8011b5e:	b580      	push	{r7, lr}
 8011b60:	b082      	sub	sp, #8
 8011b62:	af00      	add	r7, sp, #0
 8011b64:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011b6c:	f003 0301 	and.w	r3, r3, #1
 8011b70:	b2db      	uxtb	r3, r3
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d00c      	beq.n	8011b90 <mac_resolved+0x32>
    c->is_connecting = 0;
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011b7c:	f023 0320 	bic.w	r3, r3, #32
 8011b80:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 8011b84:	2200      	movs	r2, #0
 8011b86:	2104      	movs	r1, #4
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7f6 fb93 	bl	80082b4 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 8011b8e:	e006      	b.n	8011b9e <mac_resolved+0x40>
    send_syn(c);
 8011b90:	6878      	ldr	r0, [r7, #4]
 8011b92:	f7ff ffb1 	bl	8011af8 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 8011b96:	2103      	movs	r1, #3
 8011b98:	6878      	ldr	r0, [r7, #4]
 8011b9a:	f7fc ffdf 	bl	800eb5c <settmout>
}
 8011b9e:	bf00      	nop
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
	...

08011ba8 <ip4_mcastmac>:

static void ip4_mcastmac(uint8_t *mac, uint32_t *ip) {
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b084      	sub	sp, #16
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
  uint8_t mcastp[3] = {0x01, 0x00, 0x5E};  // multicast group MAC
 8011bb2:	4a13      	ldr	r2, [pc, #76]	@ (8011c00 <ip4_mcastmac+0x58>)
 8011bb4:	f107 030c 	add.w	r3, r7, #12
 8011bb8:	6812      	ldr	r2, [r2, #0]
 8011bba:	4611      	mov	r1, r2
 8011bbc:	8019      	strh	r1, [r3, #0]
 8011bbe:	3302      	adds	r3, #2
 8011bc0:	0c12      	lsrs	r2, r2, #16
 8011bc2:	701a      	strb	r2, [r3, #0]
  memcpy(mac, mcastp, 3);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	461a      	mov	r2, r3
 8011bc8:	f107 030c 	add.w	r3, r7, #12
 8011bcc:	8819      	ldrh	r1, [r3, #0]
 8011bce:	789b      	ldrb	r3, [r3, #2]
 8011bd0:	8011      	strh	r1, [r2, #0]
 8011bd2:	7093      	strb	r3, [r2, #2]
  memcpy(mac + 3, ((uint8_t *) ip) + 1, 3);  // 23 LSb
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	1cd8      	adds	r0, r3, #3
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	3301      	adds	r3, #1
 8011bdc:	2203      	movs	r2, #3
 8011bde:	4619      	mov	r1, r3
 8011be0:	f013 ff09 	bl	80259f6 <memcpy>
  mac[3] &= 0x7F;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	3303      	adds	r3, #3
 8011be8:	781a      	ldrb	r2, [r3, #0]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	3303      	adds	r3, #3
 8011bee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8011bf2:	b2d2      	uxtb	r2, r2
 8011bf4:	701a      	strb	r2, [r3, #0]
}
 8011bf6:	bf00      	nop
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	08027a7c 	.word	0x08027a7c

08011c04 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b08a      	sub	sp, #40	@ 0x28
 8011c08:	af02      	add	r7, sp, #8
 8011c0a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	685b      	ldr	r3, [r3, #4]
 8011c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c12:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	331c      	adds	r3, #28
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 8011c1c:	687a      	ldr	r2, [r7, #4]
 8011c1e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011c22:	f023 0308 	bic.w	r3, r3, #8
 8011c26:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 8011c2a:	69fb      	ldr	r3, [r7, #28]
 8011c2c:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8011c30:	b21b      	sxth	r3, r3
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	db04      	blt.n	8011c40 <mg_connect_resolved+0x3c>
 8011c36:	69fb      	ldr	r3, [r7, #28]
 8011c38:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011c3c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	3308      	adds	r3, #8
 8011c44:	69fa      	ldr	r2, [r7, #28]
 8011c46:	3208      	adds	r2, #8
 8011c48:	6812      	ldr	r2, [r2, #0]
 8011c4a:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8011c52:	1c5a      	adds	r2, r3, #1
 8011c54:	b291      	uxth	r1, r2
 8011c56:	69fa      	ldr	r2, [r7, #28]
 8011c58:	f8a2 1070 	strh.w	r1, [r2, #112]	@ 0x70
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f00f fb0f 	bl	8021280 <mg_ntohs>
 8011c62:	4603      	mov	r3, r0
 8011c64:	461a      	mov	r2, r3
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 8011c6a:	4b54      	ldr	r3, [pc, #336]	@ (8011dbc <mg_connect_resolved+0x1b8>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2b02      	cmp	r3, #2
 8011c70:	dd15      	ble.n	8011c9e <mg_connect_resolved+0x9a>
 8011c72:	4b53      	ldr	r3, [pc, #332]	@ (8011dc0 <mg_connect_resolved+0x1bc>)
 8011c74:	f241 42b7 	movw	r2, #5303	@ 0x14b7
 8011c78:	4952      	ldr	r1, [pc, #328]	@ (8011dc4 <mg_connect_resolved+0x1c0>)
 8011c7a:	2003      	movs	r0, #3
 8011c7c:	f7fc f866 	bl	800dd4c <mg_log_prefix>
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	f103 0208 	add.w	r2, r3, #8
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	331c      	adds	r3, #28
 8011c8e:	9301      	str	r3, [sp, #4]
 8011c90:	4b4d      	ldr	r3, [pc, #308]	@ (8011dc8 <mg_connect_resolved+0x1c4>)
 8011c92:	9300      	str	r3, [sp, #0]
 8011c94:	4613      	mov	r3, r2
 8011c96:	4a4c      	ldr	r2, [pc, #304]	@ (8011dc8 <mg_connect_resolved+0x1c4>)
 8011c98:	484c      	ldr	r0, [pc, #304]	@ (8011dcc <mg_connect_resolved+0x1c8>)
 8011c9a:	f7fc f8a7 	bl	800ddec <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	2103      	movs	r1, #3
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f7f6 fb06 	bl	80082b4 <mg_call>
  c->is_connecting = 1;
 8011ca8:	687a      	ldr	r2, [r7, #4]
 8011caa:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011cae:	f043 0320 	orr.w	r3, r3, #32
 8011cb2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011cbc:	f003 0301 	and.w	r3, r3, #1
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d01a      	beq.n	8011cfc <mg_connect_resolved+0xf8>
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ccc:	d008      	beq.n	8011ce0 <mg_connect_resolved+0xdc>
 8011cce:	69fb      	ldr	r3, [r7, #28]
 8011cd0:	689a      	ldr	r2, [r3, #8]
 8011cd2:	69fb      	ldr	r3, [r7, #28]
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	43db      	mvns	r3, r3
 8011cd8:	431a      	orrs	r2, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	429a      	cmp	r2, r3
 8011cde:	d10d      	bne.n	8011cfc <mg_connect_resolved+0xf8>
    struct connstate *s = (struct connstate *) (c + 1);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	33b0      	adds	r3, #176	@ 0xb0
 8011ce4:	61bb      	str	r3, [r7, #24]
    memset(s->mac, 0xFF, sizeof(s->mac));  // global or local broadcast
 8011ce6:	69bb      	ldr	r3, [r7, #24]
 8011ce8:	331a      	adds	r3, #26
 8011cea:	2206      	movs	r2, #6
 8011cec:	21ff      	movs	r1, #255	@ 0xff
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f013 fd4c 	bl	802578c <memset>
    mac_resolved(c);
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff ff32 	bl	8011b5e <mac_resolved>
  if (c->is_udp && (rem_ip == 0xffffffff || rem_ip == (ifp->ip | ~ifp->mask))) {
 8011cfa:	e05a      	b.n	8011db2 <mg_connect_resolved+0x1ae>
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	689b      	ldr	r3, [r3, #8]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d030      	beq.n	8011d66 <mg_connect_resolved+0x162>
 8011d04:	69fb      	ldr	r3, [r7, #28]
 8011d06:	689a      	ldr	r2, [r3, #8]
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	405a      	eors	r2, r3
 8011d0c:	69fb      	ldr	r3, [r7, #28]
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	4013      	ands	r3, r2
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d127      	bne.n	8011d66 <mg_connect_resolved+0x162>
             rem_ip != ifp->gw) {  // skip if gw (onstatechange -> READY -> ARP)
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	691a      	ldr	r2, [r3, #16]
 8011d1a:	68fb      	ldr	r3, [r7, #12]
  } else if (ifp->ip && ((rem_ip & ifp->mask) == (ifp->ip & ifp->mask)) &&
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d022      	beq.n	8011d66 <mg_connect_resolved+0x162>
    // If we're in the same LAN, fire an ARP lookup.
    MG_DEBUG(("%lu ARP lookup...", c->id));
 8011d20:	4b26      	ldr	r3, [pc, #152]	@ (8011dbc <mg_connect_resolved+0x1b8>)
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2b02      	cmp	r3, #2
 8011d26:	dd0c      	ble.n	8011d42 <mg_connect_resolved+0x13e>
 8011d28:	4b25      	ldr	r3, [pc, #148]	@ (8011dc0 <mg_connect_resolved+0x1bc>)
 8011d2a:	f241 42c2 	movw	r2, #5314	@ 0x14c2
 8011d2e:	4925      	ldr	r1, [pc, #148]	@ (8011dc4 <mg_connect_resolved+0x1c0>)
 8011d30:	2003      	movs	r0, #3
 8011d32:	f7fc f80b 	bl	800dd4c <mg_log_prefix>
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	4824      	ldr	r0, [pc, #144]	@ (8011dd0 <mg_connect_resolved+0x1cc>)
 8011d3e:	f7fc f855 	bl	800ddec <mg_log>
    mg_tcpip_arp_request(ifp, rem_ip, NULL);
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2200      	movs	r2, #0
 8011d46:	4619      	mov	r1, r3
 8011d48:	69f8      	ldr	r0, [r7, #28]
 8011d4a:	f7fc ff87 	bl	800ec5c <mg_tcpip_arp_request>
    settmout(c, MIP_TTYPE_ARP);
 8011d4e:	2102      	movs	r1, #2
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f7fc ff03 	bl	800eb5c <settmout>
    c->is_arplooking = 1;
 8011d56:	687a      	ldr	r2, [r7, #4]
 8011d58:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8011d5c:	f043 0310 	orr.w	r3, r3, #16
 8011d60:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 8011d64:	e025      	b.n	8011db2 <mg_connect_resolved+0x1ae>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 8011d66:	f107 030c 	add.w	r3, r7, #12
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8011d70:	2be0      	cmp	r3, #224	@ 0xe0
 8011d72:	d10e      	bne.n	8011d92 <mg_connect_resolved+0x18e>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	33b0      	adds	r3, #176	@ 0xb0
 8011d78:	613b      	str	r3, [r7, #16]
    ip4_mcastmac(s->mac, &rem_ip);                       // multicast group
 8011d7a:	693b      	ldr	r3, [r7, #16]
 8011d7c:	331a      	adds	r3, #26
 8011d7e:	f107 020c 	add.w	r2, r7, #12
 8011d82:	4611      	mov	r1, r2
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7ff ff0f 	bl	8011ba8 <ip4_mcastmac>
    mac_resolved(c);
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f7ff fee7 	bl	8011b5e <mac_resolved>
  } else {
    struct connstate *s = (struct connstate *) (c + 1);
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}
 8011d90:	e00f      	b.n	8011db2 <mg_connect_resolved+0x1ae>
    struct connstate *s = (struct connstate *) (c + 1);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	33b0      	adds	r3, #176	@ 0xb0
 8011d96:	617b      	str	r3, [r7, #20]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	f103 001a 	add.w	r0, r3, #26
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	3352      	adds	r3, #82	@ 0x52
 8011da2:	2206      	movs	r2, #6
 8011da4:	4619      	mov	r1, r3
 8011da6:	f013 fe26 	bl	80259f6 <memcpy>
    mac_resolved(c);
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f7ff fed7 	bl	8011b5e <mac_resolved>
}
 8011db0:	e7ff      	b.n	8011db2 <mg_connect_resolved+0x1ae>
 8011db2:	bf00      	nop
 8011db4:	3720      	adds	r7, #32
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	24000258 	.word	0x24000258
 8011dc0:	0802a1f8 	.word	0x0802a1f8
 8011dc4:	080264c4 	.word	0x080264c4
 8011dc8:	080127f1 	.word	0x080127f1
 8011dcc:	08027a80 	.word	0x08027a80
 8011dd0:	08027a90 	.word	0x08027a90

08011dd4 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b084      	sub	sp, #16
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 8011dde:	6838      	ldr	r0, [r7, #0]
 8011de0:	f00f f90a 	bl	8020ff8 <mg_url_port>
 8011de4:	4603      	mov	r3, r0
 8011de6:	4618      	mov	r0, r3
 8011de8:	f00f fa4a 	bl	8021280 <mg_ntohs>
 8011dec:	4603      	mov	r3, r0
 8011dee:	461a      	mov	r2, r3
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	831a      	strh	r2, [r3, #24]
  if (!mg_aton(mg_url_host(url), &c->loc)) {
 8011df4:	f107 0308 	add.w	r3, r7, #8
 8011df8:	6839      	ldr	r1, [r7, #0]
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f00f f8c9 	bl	8020f92 <mg_url_host>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	3308      	adds	r3, #8
 8011e04:	461a      	mov	r2, r3
 8011e06:	f107 0308 	add.w	r3, r7, #8
 8011e0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011e0e:	f7fc fb4c 	bl	800e4aa <mg_aton>
 8011e12:	4603      	mov	r3, r0
 8011e14:	f083 0301 	eor.w	r3, r3, #1
 8011e18:	b2db      	uxtb	r3, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d010      	beq.n	8011e40 <mg_open_listener+0x6c>
    MG_ERROR(("invalid listening URL: %s", url));
 8011e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8011e4c <mg_open_listener+0x78>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	dd0a      	ble.n	8011e3c <mg_open_listener+0x68>
 8011e26:	4b0a      	ldr	r3, [pc, #40]	@ (8011e50 <mg_open_listener+0x7c>)
 8011e28:	f241 42d4 	movw	r2, #5332	@ 0x14d4
 8011e2c:	4909      	ldr	r1, [pc, #36]	@ (8011e54 <mg_open_listener+0x80>)
 8011e2e:	2001      	movs	r0, #1
 8011e30:	f7fb ff8c 	bl	800dd4c <mg_log_prefix>
 8011e34:	6839      	ldr	r1, [r7, #0]
 8011e36:	4808      	ldr	r0, [pc, #32]	@ (8011e58 <mg_open_listener+0x84>)
 8011e38:	f7fb ffd8 	bl	800ddec <mg_log>
    return false;
 8011e3c:	2300      	movs	r3, #0
 8011e3e:	e000      	b.n	8011e42 <mg_open_listener+0x6e>
  }
  return true;
 8011e40:	2301      	movs	r3, #1
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3710      	adds	r7, #16
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	24000258 	.word	0x24000258
 8011e50:	0802a20c 	.word	0x0802a20c
 8011e54:	080264c4 	.word	0x080264c4
 8011e58:	08027aa4 	.word	0x08027aa4

08011e5c <write_conn>:

static void write_conn(struct mg_connection *c) {
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b084      	sub	sp, #16
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e6e:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d009      	beq.n	8011e88 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	6878      	ldr	r0, [r7, #4]
 8011e80:	f008 fcaa 	bl	801a7d8 <mg_tls_send>
 8011e84:	4603      	mov	r3, r0
 8011e86:	e008      	b.n	8011e9a <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e90:	461a      	mov	r2, r3
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f7fe fb50 	bl	8010538 <mg_io_send>
 8011e98:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 8011e9a:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea2:	d104      	bne.n	8011eae <write_conn+0x52>
    mg_error(c, "tx err");
 8011ea4:	490c      	ldr	r1, [pc, #48]	@ (8011ed8 <write_conn+0x7c>)
 8011ea6:	6878      	ldr	r0, [r7, #4]
 8011ea8:	f7f6 fa24 	bl	80082f4 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 8011eac:	e010      	b.n	8011ed0 <write_conn+0x74>
  } else if (len > 0) {
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	dd0d      	ble.n	8011ed0 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	3348      	adds	r3, #72	@ 0x48
 8011eb8:	68fa      	ldr	r2, [r7, #12]
 8011eba:	2100      	movs	r1, #0
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f7fb f879 	bl	800cfb4 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8011ec2:	f107 030c 	add.w	r3, r7, #12
 8011ec6:	461a      	mov	r2, r3
 8011ec8:	2108      	movs	r1, #8
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f7f6 f9f2 	bl	80082b4 <mg_call>
}
 8011ed0:	bf00      	nop
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}
 8011ed8:	08027ac0 	.word	0x08027ac0

08011edc <init_closure>:

static void init_closure(struct mg_connection *c) {
 8011edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ee0:	b08c      	sub	sp, #48	@ 0x30
 8011ee2:	af06      	add	r7, sp, #24
 8011ee4:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	33b0      	adds	r3, #176	@ 0xb0
 8011eea:	617b      	str	r3, [r7, #20]
  if (c->is_udp == false && c->is_listening == false &&
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8011ef2:	f003 0301 	and.w	r3, r3, #1
 8011ef6:	b2db      	uxtb	r3, r3
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d13e      	bne.n	8011f7a <init_closure+0x9e>
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011f02:	f003 0301 	and.w	r3, r3, #1
 8011f06:	b2db      	uxtb	r3, r3
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d136      	bne.n	8011f7a <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011f12:	f003 0320 	and.w	r3, r3, #32
 8011f16:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d12e      	bne.n	8011f7a <init_closure+0x9e>
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	331c      	adds	r3, #28
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	613b      	str	r3, [r7, #16]
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port,
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	685b      	ldr	r3, [r3, #4]
 8011f28:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	f103 081a 	add.w	r8, r3, #26
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	60bb      	str	r3, [r7, #8]
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	8b1c      	ldrh	r4, [r3, #24]
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f00f f9b4 	bl	80212ae <mg_ntohl>
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f00f f9ae 	bl	80212ae <mg_ntohl>
 8011f52:	4603      	mov	r3, r0
 8011f54:	2200      	movs	r2, #0
 8011f56:	9205      	str	r2, [sp, #20]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	9204      	str	r2, [sp, #16]
 8011f5c:	9303      	str	r3, [sp, #12]
 8011f5e:	6879      	ldr	r1, [r7, #4]
 8011f60:	9102      	str	r1, [sp, #8]
 8011f62:	9501      	str	r5, [sp, #4]
 8011f64:	9400      	str	r4, [sp, #0]
 8011f66:	2311      	movs	r3, #17
 8011f68:	68ba      	ldr	r2, [r7, #8]
 8011f6a:	4641      	mov	r1, r8
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	f7fe f845 	bl	800fffc <tx_tcp>
           c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 8011f72:	2104      	movs	r1, #4
 8011f74:	68f8      	ldr	r0, [r7, #12]
 8011f76:	f7fc fdf1 	bl	800eb5c <settmout>
  }
}
 8011f7a:	bf00      	nop
 8011f7c:	3718      	adds	r7, #24
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011f84 <close_conn>:

static void close_conn(struct mg_connection *c) {
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b084      	sub	sp, #16
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	33b0      	adds	r3, #176	@ 0xb0
 8011f90:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	3324      	adds	r3, #36	@ 0x24
 8011f96:	4618      	mov	r0, r3
 8011f98:	f7fb f857 	bl	800d04a <mg_iobuf_free>
  mg_close_conn(c);
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f7fc faeb 	bl	800e578 <mg_close_conn>
}
 8011fa2:	bf00      	nop
 8011fa4:	3710      	adds	r7, #16
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}

08011faa <can_write>:

static bool can_write(struct mg_connection *c) {
 8011faa:	b480      	push	{r7}
 8011fac:	b083      	sub	sp, #12
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011fb8:	f003 0320 	and.w	r3, r3, #32
 8011fbc:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d11d      	bne.n	8011ffe <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011fc8:	f003 0308 	and.w	r3, r3, #8
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d115      	bne.n	8011ffe <can_write+0x54>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d011      	beq.n	8011ffe <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011fe0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011fe4:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d109      	bne.n	8011ffe <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8011ff0:	f003 0310 	and.w	r3, r3, #16
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d101      	bne.n	8011ffe <can_write+0x54>
 8011ffa:	2301      	movs	r3, #1
 8011ffc:	e000      	b.n	8012000 <can_write+0x56>
 8011ffe:	2300      	movs	r3, #0
 8012000:	f003 0301 	and.w	r3, r3, #1
 8012004:	b2db      	uxtb	r3, r3
}
 8012006:	4618      	mov	r0, r3
 8012008:	370c      	adds	r7, #12
 801200a:	46bd      	mov	sp, r7
 801200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012010:	4770      	bx	lr
	...

08012014 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8012014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012018:	b091      	sub	sp, #68	@ 0x44
 801201a:	af06      	add	r7, sp, #24
 801201c:	60f8      	str	r0, [r7, #12]
 801201e:	60b9      	str	r1, [r7, #8]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 8012020:	f7ee fba2 	bl	8000768 <mg_millis>
 8012024:	4602      	mov	r2, r0
 8012026:	460b      	mov	r3, r1
 8012028:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_timer_poll(&mgr->timers, now);
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012032:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012036:	4608      	mov	r0, r1
 8012038:	f004 fbc4 	bl	80167c4 <mg_timer_poll>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012040:	2b00      	cmp	r3, #0
 8012042:	f000 810c 	beq.w	801225e <mg_mgr_poll+0x24a>
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801204c:	2b00      	cmp	r3, #0
 801204e:	f000 8106 	beq.w	801225e <mg_mgr_poll+0x24a>
  mg_tcpip_poll(mgr->ifp, now);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8012056:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801205a:	4608      	mov	r0, r1
 801205c:	f7ff f9d2 	bl	8011404 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	627b      	str	r3, [r7, #36]	@ 0x24
 8012066:	e0f5      	b.n	8012254 <mg_mgr_poll+0x240>
    tmp = c->next;
 8012068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	623b      	str	r3, [r7, #32]
    struct connstate *s = (struct connstate *) (c + 1);
 801206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012070:	33b0      	adds	r3, #176	@ 0xb0
 8012072:	61fb      	str	r3, [r7, #28]
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 8012074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012076:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801207a:	f003 0308 	and.w	r3, r3, #8
 801207e:	b2db      	uxtb	r3, r3
 8012080:	2b00      	cmp	r3, #0
 8012082:	d119      	bne.n	80120b8 <mg_mgr_poll+0xa4>
 8012084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012086:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801208a:	f003 0310 	and.w	r3, r3, #16
 801208e:	b2db      	uxtb	r3, r3
 8012090:	2b00      	cmp	r3, #0
 8012092:	d111      	bne.n	80120b8 <mg_mgr_poll+0xa4>
 8012094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012096:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801209a:	f003 0301 	and.w	r3, r3, #1
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d109      	bne.n	80120b8 <mg_mgr_poll+0xa4>
                  !c->is_connecting;
 80120a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120a6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80120aa:	f003 0320 	and.w	r3, r3, #32
 80120ae:	b2db      	uxtb	r3, r3
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d101      	bne.n	80120b8 <mg_mgr_poll+0xa4>
 80120b4:	2301      	movs	r3, #1
 80120b6:	e000      	b.n	80120ba <mg_mgr_poll+0xa6>
 80120b8:	2300      	movs	r3, #0
 80120ba:	76fb      	strb	r3, [r7, #27]
 80120bc:	7efb      	ldrb	r3, [r7, #27]
 80120be:	f003 0301 	and.w	r3, r3, #1
 80120c2:	76fb      	strb	r3, [r7, #27]
    mg_call(c, MG_EV_POLL, &now);
 80120c4:	f107 0310 	add.w	r3, r7, #16
 80120c8:	461a      	mov	r2, r3
 80120ca:	2102      	movs	r1, #2
 80120cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80120ce:	f7f6 f8f1 	bl	80082b4 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c %lu %lu", c->id, c->is_tls ? 'T' : 't',
 80120d2:	4b65      	ldr	r3, [pc, #404]	@ (8012268 <mg_mgr_poll+0x254>)
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	2b03      	cmp	r3, #3
 80120d8:	dd55      	ble.n	8012186 <mg_mgr_poll+0x172>
 80120da:	4b64      	ldr	r3, [pc, #400]	@ (801226c <mg_mgr_poll+0x258>)
 80120dc:	f241 5208 	movw	r2, #5384	@ 0x1508
 80120e0:	4963      	ldr	r1, [pc, #396]	@ (8012270 <mg_mgr_poll+0x25c>)
 80120e2:	2004      	movs	r0, #4
 80120e4:	f7fb fe32 	bl	800dd4c <mg_log_prefix>
 80120e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80120ec:	607b      	str	r3, [r7, #4]
 80120ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120f0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80120f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80120f8:	b2db      	uxtb	r3, r3
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d002      	beq.n	8012104 <mg_mgr_poll+0xf0>
 80120fe:	f04f 0854 	mov.w	r8, #84	@ 0x54
 8012102:	e001      	b.n	8012108 <mg_mgr_poll+0xf4>
 8012104:	f04f 0874 	mov.w	r8, #116	@ 0x74
 8012108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801210e:	f003 0320 	and.w	r3, r3, #32
 8012112:	b2db      	uxtb	r3, r3
 8012114:	2b00      	cmp	r3, #0
 8012116:	d002      	beq.n	801211e <mg_mgr_poll+0x10a>
 8012118:	f04f 0943 	mov.w	r9, #67	@ 0x43
 801211c:	e001      	b.n	8012122 <mg_mgr_poll+0x10e>
 801211e:	f04f 0963 	mov.w	r9, #99	@ 0x63
 8012122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012124:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8012128:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801212c:	b2db      	uxtb	r3, r3
 801212e:	2b00      	cmp	r3, #0
 8012130:	d001      	beq.n	8012136 <mg_mgr_poll+0x122>
 8012132:	2448      	movs	r4, #72	@ 0x48
 8012134:	e000      	b.n	8012138 <mg_mgr_poll+0x124>
 8012136:	2468      	movs	r4, #104	@ 0x68
 8012138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801213a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801213e:	f003 0308 	and.w	r3, r3, #8
 8012142:	b2db      	uxtb	r3, r3
 8012144:	2b00      	cmp	r3, #0
 8012146:	d001      	beq.n	801214c <mg_mgr_poll+0x138>
 8012148:	2552      	movs	r5, #82	@ 0x52
 801214a:	e000      	b.n	801214e <mg_mgr_poll+0x13a>
 801214c:	2572      	movs	r5, #114	@ 0x72
 801214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012150:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012154:	f003 0320 	and.w	r3, r3, #32
 8012158:	b2db      	uxtb	r3, r3
 801215a:	2b00      	cmp	r3, #0
 801215c:	d001      	beq.n	8012162 <mg_mgr_poll+0x14e>
 801215e:	2643      	movs	r6, #67	@ 0x43
 8012160:	e000      	b.n	8012164 <mg_mgr_poll+0x150>
 8012162:	2663      	movs	r6, #99	@ 0x63
 8012164:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012166:	f008 fc2f 	bl	801a9c8 <mg_tls_pending>
 801216a:	4602      	mov	r2, r0
 801216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801216e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012170:	9304      	str	r3, [sp, #16]
 8012172:	9203      	str	r2, [sp, #12]
 8012174:	9602      	str	r6, [sp, #8]
 8012176:	9501      	str	r5, [sp, #4]
 8012178:	9400      	str	r4, [sp, #0]
 801217a:	464b      	mov	r3, r9
 801217c:	4642      	mov	r2, r8
 801217e:	6879      	ldr	r1, [r7, #4]
 8012180:	483c      	ldr	r0, [pc, #240]	@ (8012274 <mg_mgr_poll+0x260>)
 8012182:	f7fb fe33 	bl	800ddec <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c',
                mg_tls_pending(c), c->rtls.len));
    // order is important, TLS conn close with > 1 record in buffer (below)
    if (is_tls && (c->rtls.len > 0 || mg_tls_pending(c) > 0))
 8012186:	7efb      	ldrb	r3, [r7, #27]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d00c      	beq.n	80121a6 <mg_mgr_poll+0x192>
 801218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012190:	2b00      	cmp	r3, #0
 8012192:	d105      	bne.n	80121a0 <mg_mgr_poll+0x18c>
 8012194:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012196:	f008 fc17 	bl	801a9c8 <mg_tls_pending>
 801219a:	4603      	mov	r3, r0
 801219c:	2b00      	cmp	r3, #0
 801219e:	d002      	beq.n	80121a6 <mg_mgr_poll+0x192>
      handle_tls_recv(c);
 80121a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121a2:	f7fe fa4b 	bl	801063c <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 80121a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121a8:	f7ff feff 	bl	8011faa <can_write>
 80121ac:	4603      	mov	r3, r0
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d002      	beq.n	80121b8 <mg_mgr_poll+0x1a4>
 80121b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121b4:	f7ff fe52 	bl	8011e5c <write_conn>
    if (is_tls && c->tls && c->send.len == 0) mg_tls_flush(c);
 80121b8:	7efb      	ldrb	r3, [r7, #27]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d00b      	beq.n	80121d6 <mg_mgr_poll+0x1c2>
 80121be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d006      	beq.n	80121d6 <mg_mgr_poll+0x1c2>
 80121c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d102      	bne.n	80121d6 <mg_mgr_poll+0x1c2>
 80121d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121d2:	f008 fc0e 	bl	801a9f2 <mg_tls_flush>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 80121d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121d8:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80121dc:	f003 0310 	and.w	r3, r3, #16
 80121e0:	b2db      	uxtb	r3, r3
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d00b      	beq.n	80121fe <mg_mgr_poll+0x1ea>
 80121e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d107      	bne.n	80121fe <mg_mgr_poll+0x1ea>
 80121ee:	69fb      	ldr	r3, [r7, #28]
 80121f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80121f4:	2b04      	cmp	r3, #4
 80121f6:	d002      	beq.n	80121fe <mg_mgr_poll+0x1ea>
      init_closure(c);
 80121f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80121fa:	f7ff fe6f 	bl	8011edc <init_closure>
    // For non-TLS, close immediately upon completing the 3-way closure
    // For TLS, handle any pending data (above) until MIP_TTYPE_FIN expires
    if (s->twclosure &&
 80121fe:	69fb      	ldr	r3, [r7, #28]
 8012200:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012204:	2b00      	cmp	r3, #0
 8012206:	d018      	beq.n	801223a <mg_mgr_poll+0x226>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8012208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801220a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801220e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012212:	b2db      	uxtb	r3, r3
    if (s->twclosure &&
 8012214:	2b00      	cmp	r3, #0
 8012216:	d009      	beq.n	801222c <mg_mgr_poll+0x218>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8012218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801221c:	2b00      	cmp	r3, #0
 801221e:	d10c      	bne.n	801223a <mg_mgr_poll+0x226>
 8012220:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012222:	f008 fbd1 	bl	801a9c8 <mg_tls_pending>
 8012226:	4603      	mov	r3, r0
 8012228:	2b00      	cmp	r3, #0
 801222a:	d106      	bne.n	801223a <mg_mgr_poll+0x226>
      c->is_closing = 1;
 801222c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801222e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8012232:	f043 0320 	orr.w	r3, r3, #32
 8012236:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    if (c->is_closing) close_conn(c);
 801223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801223c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012240:	f003 0320 	and.w	r3, r3, #32
 8012244:	b2db      	uxtb	r3, r3
 8012246:	2b00      	cmp	r3, #0
 8012248:	d002      	beq.n	8012250 <mg_mgr_poll+0x23c>
 801224a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801224c:	f7ff fe9a 	bl	8011f84 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 8012250:	6a3b      	ldr	r3, [r7, #32]
 8012252:	627b      	str	r3, [r7, #36]	@ 0x24
 8012254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012256:	2b00      	cmp	r3, #0
 8012258:	f47f af06 	bne.w	8012068 <mg_mgr_poll+0x54>
 801225c:	e000      	b.n	8012260 <mg_mgr_poll+0x24c>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 801225e:	bf00      	nop
  }
  (void) ms;
}
 8012260:	372c      	adds	r7, #44	@ 0x2c
 8012262:	46bd      	mov	sp, r7
 8012264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012268:	24000258 	.word	0x24000258
 801226c:	0802a220 	.word	0x0802a220
 8012270:	080264c4 	.word	0x080264c4
 8012274:	08027ac8 	.word	0x08027ac8

08012278 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 8012278:	b5b0      	push	{r4, r5, r7, lr}
 801227a:	b08c      	sub	sp, #48	@ 0x30
 801227c:	af04      	add	r7, sp, #16
 801227e:	60f8      	str	r0, [r7, #12]
 8012280:	60b9      	str	r1, [r7, #8]
 8012282:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801228a:	61bb      	str	r3, [r7, #24]
  bool res = false;
 801228c:	2300      	movs	r3, #0
 801228e:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	331c      	adds	r3, #28
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	689b      	ldr	r3, [r3, #8]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d004      	beq.n	80122aa <mg_send+0x32>
 80122a0:	69bb      	ldr	r3, [r7, #24]
 80122a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80122a6:	2b04      	cmp	r3, #4
 80122a8:	d004      	beq.n	80122b4 <mg_send+0x3c>
    mg_error(c, "net down");
 80122aa:	4934      	ldr	r1, [pc, #208]	@ (801237c <mg_send+0x104>)
 80122ac:	68f8      	ldr	r0, [r7, #12]
 80122ae:	f7f6 f821 	bl	80082f4 <mg_error>
 80122b2:	e05e      	b.n	8012372 <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80122ba:	f003 0301 	and.w	r3, r3, #1
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d01e      	beq.n	8012302 <mg_send+0x8a>
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80122ca:	f003 0310 	and.w	r3, r3, #16
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d107      	bne.n	80122e4 <mg_send+0x6c>
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80122da:	f003 0308 	and.w	r3, r3, #8
 80122de:	b2db      	uxtb	r3, r3
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d00e      	beq.n	8012302 <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 80122e4:	4b26      	ldr	r3, [pc, #152]	@ (8012380 <mg_send+0x108>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	2b03      	cmp	r3, #3
 80122ea:	dd42      	ble.n	8012372 <mg_send+0xfa>
 80122ec:	4b25      	ldr	r3, [pc, #148]	@ (8012384 <mg_send+0x10c>)
 80122ee:	f241 5226 	movw	r2, #5414	@ 0x1526
 80122f2:	4925      	ldr	r1, [pc, #148]	@ (8012388 <mg_send+0x110>)
 80122f4:	2004      	movs	r0, #4
 80122f6:	f7fb fd29 	bl	800dd4c <mg_log_prefix>
 80122fa:	4824      	ldr	r0, [pc, #144]	@ (801238c <mg_send+0x114>)
 80122fc:	f7fb fd76 	bl	800ddec <mg_log>
 8012300:	e037      	b.n	8012372 <mg_send+0xfa>
  } else if (c->is_udp) {
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8012308:	f003 0301 	and.w	r3, r3, #1
 801230c:	b2db      	uxtb	r3, r3
 801230e:	2b00      	cmp	r3, #0
 8012310:	d020      	beq.n	8012354 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	33b0      	adds	r3, #176	@ 0xb0
 8012316:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8012318:	6879      	ldr	r1, [r7, #4]
 801231a:	68f8      	ldr	r0, [r7, #12]
 801231c:	f7fe f87e 	bl	801041c <trim_len>
 8012320:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	f103 001a 	add.w	r0, r3, #26
 8012328:	69bb      	ldr	r3, [r7, #24]
 801232a:	689c      	ldr	r4, [r3, #8]
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	8b1d      	ldrh	r5, [r3, #24]
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	68fa      	ldr	r2, [r7, #12]
 8012334:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 8012336:	6879      	ldr	r1, [r7, #4]
 8012338:	9103      	str	r1, [sp, #12]
 801233a:	68b9      	ldr	r1, [r7, #8]
 801233c:	9102      	str	r1, [sp, #8]
 801233e:	9201      	str	r2, [sp, #4]
 8012340:	9300      	str	r3, [sp, #0]
 8012342:	462b      	mov	r3, r5
 8012344:	4622      	mov	r2, r4
 8012346:	4601      	mov	r1, r0
 8012348:	69b8      	ldr	r0, [r7, #24]
 801234a:	f7fc fdf0 	bl	800ef2e <tx_udp>
    res = true;
 801234e:	2301      	movs	r3, #1
 8012350:	77fb      	strb	r3, [r7, #31]
 8012352:	e00e      	b.n	8012372 <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	68ba      	ldr	r2, [r7, #8]
 8012362:	f7fa fdd5 	bl	800cf10 <mg_iobuf_add>
 8012366:	4603      	mov	r3, r0
 8012368:	2b00      	cmp	r3, #0
 801236a:	bf14      	ite	ne
 801236c:	2301      	movne	r3, #1
 801236e:	2300      	moveq	r3, #0
 8012370:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 8012372:	7ffb      	ldrb	r3, [r7, #31]
}
 8012374:	4618      	mov	r0, r3
 8012376:	3720      	adds	r7, #32
 8012378:	46bd      	mov	sp, r7
 801237a:	bdb0      	pop	{r4, r5, r7, pc}
 801237c:	08027ae4 	.word	0x08027ae4
 8012380:	24000258 	.word	0x24000258
 8012384:	0802a22c 	.word	0x0802a22c
 8012388:	080264c4 	.word	0x080264c4
 801238c:	08027af0 	.word	0x08027af0

08012390 <mg_ota_begin>:
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
  }
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
}

bool mg_ota_begin(size_t new_firmware_size) {
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
  s_mg_flash_stm32h7.size = MG_REG(FLASH_SIZE_REG) * 1024;
 8012398:	4b06      	ldr	r3, [pc, #24]	@ (80123b4 <mg_ota_begin+0x24>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	029b      	lsls	r3, r3, #10
 801239e:	4a06      	ldr	r2, [pc, #24]	@ (80123b8 <mg_ota_begin+0x28>)
 80123a0:	6053      	str	r3, [r2, #4]
  if (IS_DUALCORE()) {
    // Using only the 1st bank (mapped to CM7)
    s_mg_flash_stm32h7.size /= 2;
  }
  return mg_ota_flash_begin(new_firmware_size, &s_mg_flash_stm32h7);
 80123a2:	4905      	ldr	r1, [pc, #20]	@ (80123b8 <mg_ota_begin+0x28>)
 80123a4:	6878      	ldr	r0, [r7, #4]
 80123a6:	f7f5 ffe7 	bl	8008378 <mg_ota_flash_begin>
 80123aa:	4603      	mov	r3, r0
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3708      	adds	r7, #8
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	1ff1e880 	.word	0x1ff1e880
 80123b8:	24000268 	.word	0x24000268

080123bc <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
 80123c4:	6039      	str	r1, [r7, #0]
  return mg_ota_flash_write(buf, len, &s_mg_flash_stm32h7);
 80123c6:	4a05      	ldr	r2, [pc, #20]	@ (80123dc <mg_ota_write+0x20>)
 80123c8:	6839      	ldr	r1, [r7, #0]
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f7f6 f850 	bl	8008470 <mg_ota_flash_write>
 80123d0:	4603      	mov	r3, r0
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3708      	adds	r7, #8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	24000268 	.word	0x24000268

080123e0 <mg_ota_end>:

bool mg_ota_end(void) {
 80123e0:	b580      	push	{r7, lr}
 80123e2:	af00      	add	r7, sp, #0
  if (mg_ota_flash_end(&s_mg_flash_stm32h7)) {
 80123e4:	4825      	ldr	r0, [pc, #148]	@ (801247c <mg_ota_end+0x9c>)
 80123e6:	f7f6 f907 	bl	80085f8 <mg_ota_flash_end>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d042      	beq.n	8012476 <mg_ota_end+0x96>
    if (is_dualbank()) {
 80123f0:	f013 ff9a 	bl	8026328 <__is_dualbank_veneer>
 80123f4:	4603      	mov	r3, r0
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d003      	beq.n	8012402 <mg_ota_end+0x22>
      // Bank swap is deferred until reset, been executing in flash, reset
      *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 80123fa:	4b21      	ldr	r3, [pc, #132]	@ (8012480 <mg_ota_end+0xa0>)
 80123fc:	4a21      	ldr	r2, [pc, #132]	@ (8012484 <mg_ota_end+0xa4>)
 80123fe:	601a      	str	r2, [r3, #0]
 8012400:	e039      	b.n	8012476 <mg_ota_end+0x96>
    } else {
      // Swap partitions. Pray power does not go away
      MG_INFO(("Swapping partitions, size %u (%u sectors)",
 8012402:	4b21      	ldr	r3, [pc, #132]	@ (8012488 <mg_ota_end+0xa8>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	2b01      	cmp	r3, #1
 8012408:	dd12      	ble.n	8012430 <mg_ota_end+0x50>
 801240a:	4b20      	ldr	r3, [pc, #128]	@ (801248c <mg_ota_end+0xac>)
 801240c:	f641 528d 	movw	r2, #7565	@ 0x1d8d
 8012410:	491f      	ldr	r1, [pc, #124]	@ (8012490 <mg_ota_end+0xb0>)
 8012412:	2002      	movs	r0, #2
 8012414:	f7fb fc9a 	bl	800dd4c <mg_log_prefix>
 8012418:	4b18      	ldr	r3, [pc, #96]	@ (801247c <mg_ota_end+0x9c>)
 801241a:	6859      	ldr	r1, [r3, #4]
 801241c:	4b17      	ldr	r3, [pc, #92]	@ (801247c <mg_ota_end+0x9c>)
 801241e:	685a      	ldr	r2, [r3, #4]
 8012420:	4b16      	ldr	r3, [pc, #88]	@ (801247c <mg_ota_end+0x9c>)
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	fbb2 f3f3 	udiv	r3, r2, r3
 8012428:	461a      	mov	r2, r3
 801242a:	481a      	ldr	r0, [pc, #104]	@ (8012494 <mg_ota_end+0xb4>)
 801242c:	f7fb fcde 	bl	800ddec <mg_log>
               s_mg_flash_stm32h7.size,
               s_mg_flash_stm32h7.size / s_mg_flash_stm32h7.secsz));
      MG_INFO(("Do NOT power off..."));
 8012430:	4b15      	ldr	r3, [pc, #84]	@ (8012488 <mg_ota_end+0xa8>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	2b01      	cmp	r3, #1
 8012436:	dd09      	ble.n	801244c <mg_ota_end+0x6c>
 8012438:	4b14      	ldr	r3, [pc, #80]	@ (801248c <mg_ota_end+0xac>)
 801243a:	f641 5290 	movw	r2, #7568	@ 0x1d90
 801243e:	4914      	ldr	r1, [pc, #80]	@ (8012490 <mg_ota_end+0xb0>)
 8012440:	2002      	movs	r0, #2
 8012442:	f7fb fc83 	bl	800dd4c <mg_log_prefix>
 8012446:	4814      	ldr	r0, [pc, #80]	@ (8012498 <mg_ota_end+0xb8>)
 8012448:	f7fb fcd0 	bl	800ddec <mg_log>
      mg_log_level = MG_LL_NONE;
 801244c:	4b0e      	ldr	r3, [pc, #56]	@ (8012488 <mg_ota_end+0xa8>)
 801244e:	2200      	movs	r2, #0
 8012450:	601a      	str	r2, [r3, #0]
      s_flash_irq_disabled = true;
 8012452:	4b12      	ldr	r3, [pc, #72]	@ (801249c <mg_ota_end+0xbc>)
 8012454:	2201      	movs	r2, #1
 8012456:	701a      	strb	r2, [r3, #0]
      // Runs in RAM, will reset when finished
      single_bank_swap(
          (char *) s_mg_flash_stm32h7.start,
 8012458:	4b08      	ldr	r3, [pc, #32]	@ (801247c <mg_ota_end+0x9c>)
 801245a:	6818      	ldr	r0, [r3, #0]
          (char *) s_mg_flash_stm32h7.start + s_mg_flash_stm32h7.size / 2,
 801245c:	4b07      	ldr	r3, [pc, #28]	@ (801247c <mg_ota_end+0x9c>)
 801245e:	681a      	ldr	r2, [r3, #0]
 8012460:	4b06      	ldr	r3, [pc, #24]	@ (801247c <mg_ota_end+0x9c>)
 8012462:	685b      	ldr	r3, [r3, #4]
 8012464:	085b      	lsrs	r3, r3, #1
      single_bank_swap(
 8012466:	18d1      	adds	r1, r2, r3
          s_mg_flash_stm32h7.size / 2, s_mg_flash_stm32h7.secsz);
 8012468:	4b04      	ldr	r3, [pc, #16]	@ (801247c <mg_ota_end+0x9c>)
 801246a:	685b      	ldr	r3, [r3, #4]
      single_bank_swap(
 801246c:	085a      	lsrs	r2, r3, #1
 801246e:	4b03      	ldr	r3, [pc, #12]	@ (801247c <mg_ota_end+0x9c>)
 8012470:	689b      	ldr	r3, [r3, #8]
 8012472:	f013 ff5d 	bl	8026330 <__single_bank_swap_veneer>
    }
  }
  return false;
 8012476:	2300      	movs	r3, #0
}
 8012478:	4618      	mov	r0, r3
 801247a:	bd80      	pop	{r7, pc}
 801247c:	24000268 	.word	0x24000268
 8012480:	e000ed0c 	.word	0xe000ed0c
 8012484:	05fa0004 	.word	0x05fa0004
 8012488:	24000258 	.word	0x24000258
 801248c:	0802a25c 	.word	0x0802a25c
 8012490:	080264c4 	.word	0x080264c4
 8012494:	08027b9c 	.word	0x08027b9c
 8012498:	08027bc8 	.word	0x08027bc8
 801249c:	240020f0 	.word	0x240020f0

080124a0 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b084      	sub	sp, #16
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	4603      	mov	r3, r0
 80124a8:	6039      	str	r1, [r7, #0]
 80124aa:	71fb      	strb	r3, [r7, #7]
 80124ac:	4613      	mov	r3, r2
 80124ae:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 80124b4:	79bb      	ldrb	r3, [r7, #6]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d00d      	beq.n	80124d6 <mg_pfn_iobuf_private+0x36>
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	689b      	ldr	r3, [r3, #8]
 80124be:	1c9a      	adds	r2, r3, #2
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d906      	bls.n	80124d6 <mg_pfn_iobuf_private+0x36>
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	689b      	ldr	r3, [r3, #8]
 80124cc:	3302      	adds	r3, #2
 80124ce:	4619      	mov	r1, r3
 80124d0:	68f8      	ldr	r0, [r7, #12]
 80124d2:	f7fa fc91 	bl	800cdf8 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	689b      	ldr	r3, [r3, #8]
 80124da:	1c9a      	adds	r2, r3, #2
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	429a      	cmp	r2, r3
 80124e2:	d811      	bhi.n	8012508 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	681a      	ldr	r2, [r3, #0]
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	689b      	ldr	r3, [r3, #8]
 80124ec:	1c58      	adds	r0, r3, #1
 80124ee:	68f9      	ldr	r1, [r7, #12]
 80124f0:	6088      	str	r0, [r1, #8]
 80124f2:	4413      	add	r3, r2
 80124f4:	79fa      	ldrb	r2, [r7, #7]
 80124f6:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681a      	ldr	r2, [r3, #0]
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	689b      	ldr	r3, [r3, #8]
 8012500:	4413      	add	r3, r2
 8012502:	2200      	movs	r2, #0
 8012504:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8012506:	e00f      	b.n	8012528 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	689a      	ldr	r2, [r3, #8]
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	429a      	cmp	r2, r3
 8012512:	d209      	bcs.n	8012528 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	689b      	ldr	r3, [r3, #8]
 801251c:	1c58      	adds	r0, r3, #1
 801251e:	68f9      	ldr	r1, [r7, #12]
 8012520:	6088      	str	r0, [r1, #8]
 8012522:	4413      	add	r3, r2
 8012524:	2200      	movs	r2, #0
 8012526:	701a      	strb	r2, [r3, #0]
}
 8012528:	bf00      	nop
 801252a:	3710      	adds	r7, #16
 801252c:	46bd      	mov	sp, r7
 801252e:	bd80      	pop	{r7, pc}

08012530 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
 8012536:	4603      	mov	r3, r0
 8012538:	6039      	str	r1, [r7, #0]
 801253a:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 801253c:	79fb      	ldrb	r3, [r7, #7]
 801253e:	2200      	movs	r2, #0
 8012540:	6839      	ldr	r1, [r7, #0]
 8012542:	4618      	mov	r0, r3
 8012544:	f7ff ffac 	bl	80124a0 <mg_pfn_iobuf_private>
}
 8012548:	bf00      	nop
 801254a:	3708      	adds	r7, #8
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8012550:	b580      	push	{r7, lr}
 8012552:	b082      	sub	sp, #8
 8012554:	af00      	add	r7, sp, #0
 8012556:	4603      	mov	r3, r0
 8012558:	6039      	str	r1, [r7, #0]
 801255a:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 801255c:	79fb      	ldrb	r3, [r7, #7]
 801255e:	2201      	movs	r2, #1
 8012560:	6839      	ldr	r1, [r7, #0]
 8012562:	4618      	mov	r0, r3
 8012564:	f7ff ff9c 	bl	80124a0 <mg_pfn_iobuf_private>
}
 8012568:	bf00      	nop
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8012570:	b580      	push	{r7, lr}
 8012572:	b08a      	sub	sp, #40	@ 0x28
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
 801257c:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	617b      	str	r3, [r7, #20]
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	61bb      	str	r3, [r7, #24]
 8012586:	2300      	movs	r3, #0
 8012588:	61fb      	str	r3, [r7, #28]
 801258a:	2300      	movs	r3, #0
 801258c:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 801258e:	f107 0114 	add.w	r1, r7, #20
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	687a      	ldr	r2, [r7, #4]
 8012596:	4809      	ldr	r0, [pc, #36]	@ (80125bc <mg_vsnprintf+0x4c>)
 8012598:	f7f6 fd3e 	bl	8009018 <mg_vxprintf>
 801259c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 801259e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d204      	bcs.n	80125b0 <mg_vsnprintf+0x40>
 80125a6:	68fa      	ldr	r2, [r7, #12]
 80125a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125aa:	4413      	add	r3, r2
 80125ac:	2200      	movs	r2, #0
 80125ae:	701a      	strb	r2, [r3, #0]
  return n;
 80125b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	3728      	adds	r7, #40	@ 0x28
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	08012531 	.word	0x08012531

080125c0 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 80125c0:	b40c      	push	{r2, r3}
 80125c2:	b580      	push	{r7, lr}
 80125c4:	b084      	sub	sp, #16
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	6078      	str	r0, [r7, #4]
 80125ca:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 80125cc:	f107 031c 	add.w	r3, r7, #28
 80125d0:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 80125d2:	f107 0308 	add.w	r3, r7, #8
 80125d6:	69ba      	ldr	r2, [r7, #24]
 80125d8:	6839      	ldr	r1, [r7, #0]
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f7ff ffc8 	bl	8012570 <mg_vsnprintf>
 80125e0:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 80125e2:	68fb      	ldr	r3, [r7, #12]
}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3710      	adds	r7, #16
 80125e8:	46bd      	mov	sp, r7
 80125ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80125ee:	b002      	add	sp, #8
 80125f0:	4770      	bx	lr
	...

080125f4 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b086      	sub	sp, #24
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 80125fe:	2300      	movs	r3, #0
 8012600:	60bb      	str	r3, [r7, #8]
 8012602:	2300      	movs	r3, #0
 8012604:	60fb      	str	r3, [r7, #12]
 8012606:	2300      	movs	r3, #0
 8012608:	613b      	str	r3, [r7, #16]
 801260a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801260e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8012610:	f107 0108 	add.w	r1, r7, #8
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	687a      	ldr	r2, [r7, #4]
 8012618:	4803      	ldr	r0, [pc, #12]	@ (8012628 <mg_vmprintf+0x34>)
 801261a:	f7f6 fcfd 	bl	8009018 <mg_vxprintf>
  return (char *) io.buf;
 801261e:	68bb      	ldr	r3, [r7, #8]
}
 8012620:	4618      	mov	r0, r3
 8012622:	3718      	adds	r7, #24
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}
 8012628:	08012551 	.word	0x08012551

0801262c <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 801262c:	b40f      	push	{r0, r1, r2, r3}
 801262e:	b580      	push	{r7, lr}
 8012630:	b082      	sub	sp, #8
 8012632:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 8012634:	f107 0314 	add.w	r3, r7, #20
 8012638:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 801263a:	463b      	mov	r3, r7
 801263c:	4619      	mov	r1, r3
 801263e:	6938      	ldr	r0, [r7, #16]
 8012640:	f7ff ffd8 	bl	80125f4 <mg_vmprintf>
 8012644:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 8012646:	687b      	ldr	r3, [r7, #4]
}
 8012648:	4618      	mov	r0, r3
 801264a:	3708      	adds	r7, #8
 801264c:	46bd      	mov	sp, r7
 801264e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012652:	b004      	add	sp, #16
 8012654:	4770      	bx	lr

08012656 <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 8012656:	b580      	push	{r7, lr}
 8012658:	b082      	sub	sp, #8
 801265a:	af00      	add	r7, sp, #0
 801265c:	4603      	mov	r3, r0
 801265e:	6039      	str	r1, [r7, #0]
 8012660:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8012662:	79fb      	ldrb	r3, [r7, #7]
 8012664:	4618      	mov	r0, r3
 8012666:	f012 ff29 	bl	80254bc <putchar>
  (void) param;
}
 801266a:	bf00      	nop
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
	...

08012674 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8012674:	b580      	push	{r7, lr}
 8012676:	b088      	sub	sp, #32
 8012678:	af04      	add	r7, sp, #16
 801267a:	60f8      	str	r0, [r7, #12]
 801267c:	60b9      	str	r1, [r7, #8]
 801267e:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	4618      	mov	r0, r3
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	3301      	adds	r3, #1
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	461a      	mov	r2, r3
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	3302      	adds	r3, #2
 8012692:	781b      	ldrb	r3, [r3, #0]
 8012694:	4619      	mov	r1, r3
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	3303      	adds	r3, #3
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	9302      	str	r3, [sp, #8]
 801269e:	9101      	str	r1, [sp, #4]
 80126a0:	9200      	str	r2, [sp, #0]
 80126a2:	4603      	mov	r3, r0
 80126a4:	4a04      	ldr	r2, [pc, #16]	@ (80126b8 <print_ip4+0x44>)
 80126a6:	68b9      	ldr	r1, [r7, #8]
 80126a8:	68f8      	ldr	r0, [r7, #12]
 80126aa:	f7f6 fc9a 	bl	8008fe2 <mg_xprintf>
 80126ae:	4603      	mov	r3, r0
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3710      	adds	r7, #16
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	08027bdc 	.word	0x08027bdc

080126bc <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 80126bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126c0:	b08e      	sub	sp, #56	@ 0x38
 80126c2:	af08      	add	r7, sp, #32
 80126c4:	6178      	str	r0, [r7, #20]
 80126c6:	6139      	str	r1, [r7, #16]
 80126c8:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	881b      	ldrh	r3, [r3, #0]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f00e fdd6 	bl	8021280 <mg_ntohs>
 80126d4:	4603      	mov	r3, r0
 80126d6:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	3302      	adds	r3, #2
 80126dc:	881b      	ldrh	r3, [r3, #0]
 80126de:	4618      	mov	r0, r3
 80126e0:	f00e fdce 	bl	8021280 <mg_ntohs>
 80126e4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80126e6:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	3304      	adds	r3, #4
 80126ec:	881b      	ldrh	r3, [r3, #0]
 80126ee:	4618      	mov	r0, r3
 80126f0:	f00e fdc6 	bl	8021280 <mg_ntohs>
 80126f4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 80126f6:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	3306      	adds	r3, #6
 80126fc:	881b      	ldrh	r3, [r3, #0]
 80126fe:	4618      	mov	r0, r3
 8012700:	f00e fdbe 	bl	8021280 <mg_ntohs>
 8012704:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012706:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	3308      	adds	r3, #8
 801270c:	881b      	ldrh	r3, [r3, #0]
 801270e:	4618      	mov	r0, r3
 8012710:	f00e fdb6 	bl	8021280 <mg_ntohs>
 8012714:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012716:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	330a      	adds	r3, #10
 801271c:	881b      	ldrh	r3, [r3, #0]
 801271e:	4618      	mov	r0, r3
 8012720:	f00e fdae 	bl	8021280 <mg_ntohs>
 8012724:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012726:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	330c      	adds	r3, #12
 801272c:	881b      	ldrh	r3, [r3, #0]
 801272e:	4618      	mov	r0, r3
 8012730:	f00e fda6 	bl	8021280 <mg_ntohs>
 8012734:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012736:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	330e      	adds	r3, #14
 801273c:	881b      	ldrh	r3, [r3, #0]
 801273e:	4618      	mov	r0, r3
 8012740:	f00e fd9e 	bl	8021280 <mg_ntohs>
 8012744:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8012746:	9306      	str	r3, [sp, #24]
 8012748:	683a      	ldr	r2, [r7, #0]
 801274a:	9205      	str	r2, [sp, #20]
 801274c:	687a      	ldr	r2, [r7, #4]
 801274e:	9204      	str	r2, [sp, #16]
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	9303      	str	r3, [sp, #12]
 8012754:	9602      	str	r6, [sp, #8]
 8012756:	9501      	str	r5, [sp, #4]
 8012758:	9400      	str	r4, [sp, #0]
 801275a:	4643      	mov	r3, r8
 801275c:	4a05      	ldr	r2, [pc, #20]	@ (8012774 <print_ip6+0xb8>)
 801275e:	6939      	ldr	r1, [r7, #16]
 8012760:	6978      	ldr	r0, [r7, #20]
 8012762:	f7f6 fc3e 	bl	8008fe2 <mg_xprintf>
 8012766:	4603      	mov	r3, r0
}
 8012768:	4618      	mov	r0, r3
 801276a:	3718      	adds	r7, #24
 801276c:	46bd      	mov	sp, r7
 801276e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012772:	bf00      	nop
 8012774:	08027be8 	.word	0x08027be8

08012778 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8012778:	b580      	push	{r7, lr}
 801277a:	b086      	sub	sp, #24
 801277c:	af00      	add	r7, sp, #0
 801277e:	60f8      	str	r0, [r7, #12]
 8012780:	60b9      	str	r1, [r7, #8]
 8012782:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	1d19      	adds	r1, r3, #4
 801278a:	687a      	ldr	r2, [r7, #4]
 801278c:	6011      	str	r1, [r2, #0]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8012792:	697a      	ldr	r2, [r7, #20]
 8012794:	68b9      	ldr	r1, [r7, #8]
 8012796:	68f8      	ldr	r0, [r7, #12]
 8012798:	f7ff ff6c 	bl	8012674 <print_ip4>
 801279c:	4603      	mov	r3, r0
}
 801279e:	4618      	mov	r0, r3
 80127a0:	3718      	adds	r7, #24
 80127a2:	46bd      	mov	sp, r7
 80127a4:	bd80      	pop	{r7, pc}

080127a6 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 80127a6:	b580      	push	{r7, lr}
 80127a8:	b086      	sub	sp, #24
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	60f8      	str	r0, [r7, #12]
 80127ae:	60b9      	str	r1, [r7, #8]
 80127b0:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	1d19      	adds	r1, r3, #4
 80127b8:	687a      	ldr	r2, [r7, #4]
 80127ba:	6011      	str	r1, [r2, #0]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	7cdb      	ldrb	r3, [r3, #19]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d007      	beq.n	80127d8 <mg_print_ip+0x32>
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	461a      	mov	r2, r3
 80127cc:	68b9      	ldr	r1, [r7, #8]
 80127ce:	68f8      	ldr	r0, [r7, #12]
 80127d0:	f7ff ff74 	bl	80126bc <print_ip6>
 80127d4:	4603      	mov	r3, r0
 80127d6:	e006      	b.n	80127e6 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	461a      	mov	r2, r3
 80127dc:	68b9      	ldr	r1, [r7, #8]
 80127de:	68f8      	ldr	r0, [r7, #12]
 80127e0:	f7ff ff48 	bl	8012674 <print_ip4>
 80127e4:	4603      	mov	r3, r0
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	3718      	adds	r7, #24
 80127ea:	46bd      	mov	sp, r7
 80127ec:	bd80      	pop	{r7, pc}
	...

080127f0 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b088      	sub	sp, #32
 80127f4:	af02      	add	r7, sp, #8
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	1d19      	adds	r1, r3, #4
 8012802:	687a      	ldr	r2, [r7, #4]
 8012804:	6011      	str	r1, [r2, #0]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	8a1b      	ldrh	r3, [r3, #16]
 801280e:	4618      	mov	r0, r3
 8012810:	f00e fd36 	bl	8021280 <mg_ntohs>
 8012814:	4603      	mov	r3, r0
 8012816:	9301      	str	r3, [sp, #4]
 8012818:	697b      	ldr	r3, [r7, #20]
 801281a:	9300      	str	r3, [sp, #0]
 801281c:	4b05      	ldr	r3, [pc, #20]	@ (8012834 <mg_print_ip_port+0x44>)
 801281e:	4a06      	ldr	r2, [pc, #24]	@ (8012838 <mg_print_ip_port+0x48>)
 8012820:	68b9      	ldr	r1, [r7, #8]
 8012822:	68f8      	ldr	r0, [r7, #12]
 8012824:	f7f6 fbdd 	bl	8008fe2 <mg_xprintf>
 8012828:	4603      	mov	r3, r0
}
 801282a:	4618      	mov	r0, r3
 801282c:	3718      	adds	r7, #24
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
 8012832:	bf00      	nop
 8012834:	080127a7 	.word	0x080127a7
 8012838:	08027c04 	.word	0x08027c04

0801283c <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 801283c:	b5b0      	push	{r4, r5, r7, lr}
 801283e:	b08c      	sub	sp, #48	@ 0x30
 8012840:	af06      	add	r7, sp, #24
 8012842:	60f8      	str	r0, [r7, #12]
 8012844:	60b9      	str	r1, [r7, #8]
 8012846:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	1d19      	adds	r1, r3, #4
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	6011      	str	r1, [r2, #0]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	461d      	mov	r5, r3
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	3301      	adds	r3, #1
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	461a      	mov	r2, r3
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	3302      	adds	r3, #2
 8012868:	781b      	ldrb	r3, [r3, #0]
 801286a:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	3303      	adds	r3, #3
 8012870:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8012872:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8012874:	697b      	ldr	r3, [r7, #20]
 8012876:	3304      	adds	r3, #4
 8012878:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 801287a:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	3305      	adds	r3, #5
 8012880:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8012882:	9304      	str	r3, [sp, #16]
 8012884:	9403      	str	r4, [sp, #12]
 8012886:	9002      	str	r0, [sp, #8]
 8012888:	9101      	str	r1, [sp, #4]
 801288a:	9200      	str	r2, [sp, #0]
 801288c:	462b      	mov	r3, r5
 801288e:	4a05      	ldr	r2, [pc, #20]	@ (80128a4 <mg_print_mac+0x68>)
 8012890:	68b9      	ldr	r1, [r7, #8]
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f7f6 fba5 	bl	8008fe2 <mg_xprintf>
 8012898:	4603      	mov	r3, r0
}
 801289a:	4618      	mov	r0, r3
 801289c:	3718      	adds	r7, #24
 801289e:	46bd      	mov	sp, r7
 80128a0:	bdb0      	pop	{r4, r5, r7, pc}
 80128a2:	bf00      	nop
 80128a4:	08027c0c 	.word	0x08027c0c

080128a8 <mg_esc>:

static char mg_esc(int c, bool esc) {
 80128a8:	b480      	push	{r7}
 80128aa:	b087      	sub	sp, #28
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	460b      	mov	r3, r1
 80128b2:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 80128b4:	4b19      	ldr	r3, [pc, #100]	@ (801291c <mg_esc+0x74>)
 80128b6:	613b      	str	r3, [r7, #16]
 80128b8:	4b19      	ldr	r3, [pc, #100]	@ (8012920 <mg_esc+0x78>)
 80128ba:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80128bc:	78fb      	ldrb	r3, [r7, #3]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d001      	beq.n	80128c6 <mg_esc+0x1e>
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	e000      	b.n	80128c8 <mg_esc+0x20>
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	617b      	str	r3, [r7, #20]
 80128ca:	e01b      	b.n	8012904 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	461a      	mov	r2, r3
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4293      	cmp	r3, r2
 80128d6:	d112      	bne.n	80128fe <mg_esc+0x56>
 80128d8:	78fb      	ldrb	r3, [r7, #3]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d007      	beq.n	80128ee <mg_esc+0x46>
 80128de:	697a      	ldr	r2, [r7, #20]
 80128e0:	693b      	ldr	r3, [r7, #16]
 80128e2:	1ad3      	subs	r3, r2, r3
 80128e4:	461a      	mov	r2, r3
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	4413      	add	r3, r2
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	e00f      	b.n	801290e <mg_esc+0x66>
 80128ee:	697a      	ldr	r2, [r7, #20]
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	1ad3      	subs	r3, r2, r3
 80128f4:	461a      	mov	r2, r3
 80128f6:	693b      	ldr	r3, [r7, #16]
 80128f8:	4413      	add	r3, r2
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	e007      	b.n	801290e <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	3301      	adds	r3, #1
 8012902:	617b      	str	r3, [r7, #20]
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d1df      	bne.n	80128cc <mg_esc+0x24>
  }
  return 0;
 801290c:	2300      	movs	r3, #0
}
 801290e:	4618      	mov	r0, r3
 8012910:	371c      	adds	r7, #28
 8012912:	46bd      	mov	sp, r7
 8012914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012918:	4770      	bx	lr
 801291a:	bf00      	nop
 801291c:	08027370 	.word	0x08027370
 8012920:	08027378 	.word	0x08027378

08012924 <mg_escape>:

static char mg_escape(int c) {
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 801292c:	2101      	movs	r1, #1
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7ff ffba 	bl	80128a8 <mg_esc>
 8012934:	4603      	mov	r3, r0
}
 8012936:	4618      	mov	r0, r3
 8012938:	3708      	adds	r7, #8
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}

0801293e <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 801293e:	b580      	push	{r7, lr}
 8012940:	b088      	sub	sp, #32
 8012942:	af00      	add	r7, sp, #0
 8012944:	60f8      	str	r0, [r7, #12]
 8012946:	60b9      	str	r1, [r7, #8]
 8012948:	607a      	str	r2, [r7, #4]
 801294a:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 801294c:	2300      	movs	r3, #0
 801294e:	61fb      	str	r3, [r7, #28]
 8012950:	2300      	movs	r3, #0
 8012952:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8012954:	2300      	movs	r3, #0
 8012956:	61fb      	str	r3, [r7, #28]
 8012958:	e023      	b.n	80129a2 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	69fb      	ldr	r3, [r7, #28]
 801295e:	4413      	add	r3, r2
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	4618      	mov	r0, r3
 8012964:	f7ff ffde 	bl	8012924 <mg_escape>
 8012968:	4603      	mov	r3, r0
 801296a:	75fb      	strb	r3, [r7, #23]
    if (c) {
 801296c:	7dfb      	ldrb	r3, [r7, #23]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d00c      	beq.n	801298c <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	68b9      	ldr	r1, [r7, #8]
 8012976:	205c      	movs	r0, #92	@ 0x5c
 8012978:	4798      	blx	r3
 801297a:	7dfa      	ldrb	r2, [r7, #23]
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	68b9      	ldr	r1, [r7, #8]
 8012980:	4610      	mov	r0, r2
 8012982:	4798      	blx	r3
 8012984:	69bb      	ldr	r3, [r7, #24]
 8012986:	3301      	adds	r3, #1
 8012988:	61bb      	str	r3, [r7, #24]
 801298a:	e007      	b.n	801299c <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	4413      	add	r3, r2
 8012992:	781a      	ldrb	r2, [r3, #0]
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	68b9      	ldr	r1, [r7, #8]
 8012998:	4610      	mov	r0, r2
 801299a:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	3301      	adds	r3, #1
 80129a0:	61fb      	str	r3, [r7, #28]
 80129a2:	69fa      	ldr	r2, [r7, #28]
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d205      	bcs.n	80129b6 <qcpy+0x78>
 80129aa:	687a      	ldr	r2, [r7, #4]
 80129ac:	69fb      	ldr	r3, [r7, #28]
 80129ae:	4413      	add	r3, r2
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d1d1      	bne.n	801295a <qcpy+0x1c>
    }
  }
  return i + extra;
 80129b6:	69fa      	ldr	r2, [r7, #28]
 80129b8:	69bb      	ldr	r3, [r7, #24]
 80129ba:	4413      	add	r3, r2
}
 80129bc:	4618      	mov	r0, r3
 80129be:	3720      	adds	r7, #32
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b088      	sub	sp, #32
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	1d19      	adds	r1, r3, #4
 80129d6:	687a      	ldr	r2, [r7, #4]
 80129d8:	6011      	str	r1, [r2, #0]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	1d19      	adds	r1, r3, #4
 80129e4:	687a      	ldr	r2, [r7, #4]
 80129e6:	6011      	str	r1, [r2, #0]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 80129ec:	4b16      	ldr	r3, [pc, #88]	@ (8012a48 <mg_print_hex+0x84>)
 80129ee:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 80129f0:	2300      	movs	r3, #0
 80129f2:	61fb      	str	r3, [r7, #28]
 80129f4:	e01e      	b.n	8012a34 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 80129f6:	697a      	ldr	r2, [r7, #20]
 80129f8:	69fb      	ldr	r3, [r7, #28]
 80129fa:	4413      	add	r3, r2
 80129fc:	781b      	ldrb	r3, [r3, #0]
 80129fe:	091b      	lsrs	r3, r3, #4
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	f003 030f 	and.w	r3, r3, #15
 8012a06:	693a      	ldr	r2, [r7, #16]
 8012a08:	4413      	add	r3, r2
 8012a0a:	781a      	ldrb	r2, [r3, #0]
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	68b9      	ldr	r1, [r7, #8]
 8012a10:	4610      	mov	r0, r2
 8012a12:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 8012a14:	697a      	ldr	r2, [r7, #20]
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	4413      	add	r3, r2
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	f003 030f 	and.w	r3, r3, #15
 8012a20:	693a      	ldr	r2, [r7, #16]
 8012a22:	4413      	add	r3, r2
 8012a24:	781a      	ldrb	r2, [r3, #0]
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	68b9      	ldr	r1, [r7, #8]
 8012a2a:	4610      	mov	r0, r2
 8012a2c:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 8012a2e:	69fb      	ldr	r3, [r7, #28]
 8012a30:	3301      	adds	r3, #1
 8012a32:	61fb      	str	r3, [r7, #28]
 8012a34:	69fa      	ldr	r2, [r7, #28]
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d3dc      	bcc.n	80129f6 <mg_print_hex+0x32>
  }
  return 2 * bl;
 8012a3c:	69bb      	ldr	r3, [r7, #24]
 8012a3e:	005b      	lsls	r3, r3, #1
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	3720      	adds	r7, #32
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	080267ac 	.word	0x080267ac

08012a4c <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b086      	sub	sp, #24
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	1d19      	adds	r1, r3, #4
 8012a5e:	687a      	ldr	r2, [r7, #4]
 8012a60:	6011      	str	r1, [r2, #0]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	1d19      	adds	r1, r3, #4
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	6011      	str	r1, [r2, #0]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d109      	bne.n	8012a8e <mg_print_esc+0x42>
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d004      	beq.n	8012a8a <mg_print_esc+0x3e>
 8012a80:	6938      	ldr	r0, [r7, #16]
 8012a82:	f7ed fca5 	bl	80003d0 <strlen>
 8012a86:	4603      	mov	r3, r0
 8012a88:	e000      	b.n	8012a8c <mg_print_esc+0x40>
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	693a      	ldr	r2, [r7, #16]
 8012a92:	68b9      	ldr	r1, [r7, #8]
 8012a94:	68f8      	ldr	r0, [r7, #12]
 8012a96:	f7ff ff52 	bl	801293e <qcpy>
 8012a9a:	4603      	mov	r3, r0
}
 8012a9c:	4618      	mov	r0, r3
 8012a9e:	3718      	adds	r7, #24
 8012aa0:	46bd      	mov	sp, r7
 8012aa2:	bd80      	pop	{r7, pc}

08012aa4 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b084      	sub	sp, #16
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8012aac:	2300      	movs	r3, #0
 8012aae:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8012ab0:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681a      	ldr	r2, [r3, #0]
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	689b      	ldr	r3, [r3, #8]
 8012abc:	4413      	add	r3, r2
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	689a      	ldr	r2, [r3, #8]
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	4413      	add	r3, r2
 8012aca:	1d1a      	adds	r2, r3, #4
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d906      	bls.n	8012ae2 <mg_queue_read_len+0x3e>
 8012ad4:	4b05      	ldr	r3, [pc, #20]	@ (8012aec <mg_queue_read_len+0x48>)
 8012ad6:	4a06      	ldr	r2, [pc, #24]	@ (8012af0 <mg_queue_read_len+0x4c>)
 8012ad8:	f641 6181 	movw	r1, #7809	@ 0x1e81
 8012adc:	4805      	ldr	r0, [pc, #20]	@ (8012af4 <mg_queue_read_len+0x50>)
 8012ade:	f012 fa59 	bl	8024f94 <__assert_func>
  return n;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3710      	adds	r7, #16
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}
 8012aec:	08027c70 	.word	0x08027c70
 8012af0:	0802a268 	.word	0x0802a268
 8012af4:	080264c4 	.word	0x080264c4

08012af8 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8012af8:	b480      	push	{r7}
 8012afa:	b085      	sub	sp, #20
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681a      	ldr	r2, [r3, #0]
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	68db      	ldr	r3, [r3, #12]
 8012b0e:	4413      	add	r3, r2
 8012b10:	68fa      	ldr	r2, [r7, #12]
 8012b12:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8012b14:	f3bf 8f5b 	dmb	ish
}
 8012b18:	bf00      	nop
 8012b1a:	3714      	adds	r7, #20
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr

08012b24 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b086      	sub	sp, #24
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	60f8      	str	r0, [r7, #12]
 8012b2c:	60b9      	str	r1, [r7, #8]
 8012b2e:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8012b30:	2300      	movs	r3, #0
 8012b32:	617b      	str	r3, [r7, #20]
 8012b34:	2308      	movs	r3, #8
 8012b36:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	68da      	ldr	r2, [r3, #12]
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	689b      	ldr	r3, [r3, #8]
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d312      	bcc.n	8012b6a <mg_queue_book+0x46>
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	68da      	ldr	r2, [r3, #12]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	441a      	add	r2, r3
 8012b4c:	693b      	ldr	r3, [r7, #16]
 8012b4e:	441a      	add	r2, r3
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d808      	bhi.n	8012b6a <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	685a      	ldr	r2, [r3, #4]
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	1ad2      	subs	r2, r2, r3
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	1ad3      	subs	r3, r2, r3
 8012b66:	617b      	str	r3, [r7, #20]
 8012b68:	e011      	b.n	8012b8e <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	68da      	ldr	r2, [r3, #12]
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	689b      	ldr	r3, [r3, #8]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d30b      	bcc.n	8012b8e <mg_queue_book+0x6a>
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	689b      	ldr	r3, [r3, #8]
 8012b7a:	693a      	ldr	r2, [r7, #16]
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d206      	bcs.n	8012b8e <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8012b80:	2100      	movs	r1, #0
 8012b82:	68f8      	ldr	r0, [r7, #12]
 8012b84:	f7ff ffb8 	bl	8012af8 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	68da      	ldr	r2, [r3, #12]
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	441a      	add	r2, r3
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	441a      	add	r2, r3
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	689b      	ldr	r3, [r3, #8]
 8012b9e:	429a      	cmp	r2, r3
 8012ba0:	d207      	bcs.n	8012bb2 <mg_queue_book+0x8e>
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	689a      	ldr	r2, [r3, #8]
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	68db      	ldr	r3, [r3, #12]
 8012baa:	1ad2      	subs	r2, r2, r3
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	1ad3      	subs	r3, r2, r3
 8012bb0:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8012bb2:	68bb      	ldr	r3, [r7, #8]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d007      	beq.n	8012bc8 <mg_queue_book+0xa4>
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	681a      	ldr	r2, [r3, #0]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	68db      	ldr	r3, [r3, #12]
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	441a      	add	r2, r3
 8012bc4:	68bb      	ldr	r3, [r7, #8]
 8012bc6:	601a      	str	r2, [r3, #0]
  return space;
 8012bc8:	697b      	ldr	r3, [r7, #20]
}
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3718      	adds	r7, #24
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bd80      	pop	{r7, pc}
	...

08012bd4 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8012bde:	2300      	movs	r3, #0
 8012be0:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	689a      	ldr	r2, [r3, #8]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d013      	beq.n	8012c16 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8012bee:	6878      	ldr	r0, [r7, #4]
 8012bf0:	f7ff ff58 	bl	8012aa4 <mg_queue_read_len>
 8012bf4:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d10c      	bne.n	8012c16 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	68da      	ldr	r2, [r3, #12]
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	689b      	ldr	r3, [r3, #8]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d903      	bls.n	8012c16 <mg_queue_next+0x42>
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f7ff ff48 	bl	8012aa4 <mg_queue_read_len>
 8012c14:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d007      	beq.n	8012c2c <mg_queue_next+0x58>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	689b      	ldr	r3, [r3, #8]
 8012c24:	3304      	adds	r3, #4
 8012c26:	441a      	add	r2, r3
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	689a      	ldr	r2, [r3, #8]
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	441a      	add	r2, r3
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	685b      	ldr	r3, [r3, #4]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d906      	bls.n	8012c4a <mg_queue_next+0x76>
 8012c3c:	4b05      	ldr	r3, [pc, #20]	@ (8012c54 <mg_queue_next+0x80>)
 8012c3e:	4a06      	ldr	r2, [pc, #24]	@ (8012c58 <mg_queue_next+0x84>)
 8012c40:	f641 61a2 	movw	r1, #7842	@ 0x1ea2
 8012c44:	4805      	ldr	r0, [pc, #20]	@ (8012c5c <mg_queue_next+0x88>)
 8012c46:	f012 f9a5 	bl	8024f94 <__assert_func>
  return len;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
}
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	3710      	adds	r7, #16
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	08027c94 	.word	0x08027c94
 8012c58:	0802a27c 	.word	0x0802a27c
 8012c5c:	080264c4 	.word	0x080264c4

08012c60 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b082      	sub	sp, #8
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8012c6a:	683b      	ldr	r3, [r7, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d106      	bne.n	8012c7e <mg_queue_add+0x1e>
 8012c70:	4b13      	ldr	r3, [pc, #76]	@ (8012cc0 <mg_queue_add+0x60>)
 8012c72:	4a14      	ldr	r2, [pc, #80]	@ (8012cc4 <mg_queue_add+0x64>)
 8012c74:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 8012c78:	4813      	ldr	r0, [pc, #76]	@ (8012cc8 <mg_queue_add+0x68>)
 8012c7a:	f012 f98b 	bl	8024f94 <__assert_func>
  mg_queue_write_len(q, len);
 8012c7e:	6839      	ldr	r1, [r7, #0]
 8012c80:	6878      	ldr	r0, [r7, #4]
 8012c82:	f7ff ff39 	bl	8012af8 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	68da      	ldr	r2, [r3, #12]
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	f103 0208 	add.w	r2, r3, #8
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	429a      	cmp	r2, r3
 8012c98:	d906      	bls.n	8012ca8 <mg_queue_add+0x48>
 8012c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8012ccc <mg_queue_add+0x6c>)
 8012c9c:	4a09      	ldr	r2, [pc, #36]	@ (8012cc4 <mg_queue_add+0x64>)
 8012c9e:	f641 61a9 	movw	r1, #7849	@ 0x1ea9
 8012ca2:	4809      	ldr	r0, [pc, #36]	@ (8012cc8 <mg_queue_add+0x68>)
 8012ca4:	f012 f976 	bl	8024f94 <__assert_func>
  q->head += len + sizeof(uint32_t);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	68da      	ldr	r2, [r3, #12]
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	4413      	add	r3, r2
 8012cb0:	1d1a      	adds	r2, r3, #4
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	60da      	str	r2, [r3, #12]
}
 8012cb6:	bf00      	nop
 8012cb8:	3708      	adds	r7, #8
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	bd80      	pop	{r7, pc}
 8012cbe:	bf00      	nop
 8012cc0:	08027cb0 	.word	0x08027cb0
 8012cc4:	0802a28c 	.word	0x0802a28c
 8012cc8:	080264c4 	.word	0x080264c4
 8012ccc:	08027cb8 	.word	0x08027cb8

08012cd0 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b082      	sub	sp, #8
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	689a      	ldr	r2, [r3, #8]
 8012cde:	683b      	ldr	r3, [r7, #0]
 8012ce0:	4413      	add	r3, r2
 8012ce2:	1d1a      	adds	r2, r3, #4
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	689b      	ldr	r3, [r3, #8]
 8012cec:	1d1a      	adds	r2, r3, #4
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d906      	bls.n	8012d04 <mg_queue_del+0x34>
 8012cf6:	4b05      	ldr	r3, [pc, #20]	@ (8012d0c <mg_queue_del+0x3c>)
 8012cf8:	4a05      	ldr	r2, [pc, #20]	@ (8012d10 <mg_queue_del+0x40>)
 8012cfa:	f641 61af 	movw	r1, #7855	@ 0x1eaf
 8012cfe:	4805      	ldr	r0, [pc, #20]	@ (8012d14 <mg_queue_del+0x44>)
 8012d00:	f012 f948 	bl	8024f94 <__assert_func>
}
 8012d04:	bf00      	nop
 8012d06:	3708      	adds	r7, #8
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}
 8012d0c:	08027ce8 	.word	0x08027ce8
 8012d10:	0802a29c 	.word	0x0802a29c
 8012d14:	080264c4 	.word	0x080264c4

08012d18 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8012d18:	b480      	push	{r7}
 8012d1a:	b083      	sub	sp, #12
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	6078      	str	r0, [r7, #4]
 8012d20:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 8012d22:	4b12      	ldr	r3, [pc, #72]	@ (8012d6c <blk0+0x54>)
 8012d24:	881b      	ldrh	r3, [r3, #0]
 8012d26:	2bff      	cmp	r3, #255	@ 0xff
 8012d28:	d915      	bls.n	8012d56 <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	683a      	ldr	r2, [r7, #0]
 8012d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d32:	ea4f 2333 	mov.w	r3, r3, ror #8
 8012d36:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6839      	ldr	r1, [r7, #0]
 8012d3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012d42:	ea4f 6333 	mov.w	r3, r3, ror #24
 8012d46:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 8012d4a:	ea42 0103 	orr.w	r1, r2, r3
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	683a      	ldr	r2, [r7, #0]
 8012d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	683a      	ldr	r2, [r7, #0]
 8012d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	370c      	adds	r7, #12
 8012d62:	46bd      	mov	sp, r7
 8012d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d68:	4770      	bx	lr
 8012d6a:	bf00      	nop
 8012d6c:	080273b8 	.word	0x080273b8

08012d70 <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char *buffer) {
 8012d70:	b590      	push	{r4, r7, lr}
 8012d72:	b099      	sub	sp, #100	@ 0x64
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 8012d7a:	f107 030c 	add.w	r3, r7, #12
 8012d7e:	2240      	movs	r2, #64	@ 0x40
 8012d80:	6839      	ldr	r1, [r7, #0]
 8012d82:	4618      	mov	r0, r3
 8012d84:	f012 fe37 	bl	80259f6 <memcpy>
  a = state[0];
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  b = state[1];
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	685b      	ldr	r3, [r3, #4]
 8012d92:	65bb      	str	r3, [r7, #88]	@ 0x58
  c = state[2];
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	689b      	ldr	r3, [r3, #8]
 8012d98:	657b      	str	r3, [r7, #84]	@ 0x54
  d = state[3];
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	68db      	ldr	r3, [r3, #12]
 8012d9e:	653b      	str	r3, [r7, #80]	@ 0x50
  e = state[4];
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	691b      	ldr	r3, [r3, #16]
 8012da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(a, b, c, d, e, 0);
 8012da6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012daa:	405a      	eors	r2, r3
 8012dac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012dae:	401a      	ands	r2, r3
 8012db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012db2:	ea82 0403 	eor.w	r4, r2, r3
 8012db6:	f107 030c 	add.w	r3, r7, #12
 8012dba:	2100      	movs	r1, #0
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7ff ffab 	bl	8012d18 <blk0>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	18e2      	adds	r2, r4, r3
 8012dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012dc8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012dcc:	441a      	add	r2, r3
 8012dce:	4bbd      	ldr	r3, [pc, #756]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012dd0:	4413      	add	r3, r2
 8012dd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012dd4:	4413      	add	r3, r2
 8012dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012dd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012dda:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012dde:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 1);
 8012de0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012de4:	405a      	eors	r2, r3
 8012de6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012de8:	401a      	ands	r2, r3
 8012dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dec:	ea82 0403 	eor.w	r4, r2, r3
 8012df0:	f107 030c 	add.w	r3, r7, #12
 8012df4:	2101      	movs	r1, #1
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7ff ff8e 	bl	8012d18 <blk0>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	18e2      	adds	r2, r4, r3
 8012e00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e02:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012e06:	441a      	add	r2, r3
 8012e08:	4bae      	ldr	r3, [pc, #696]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012e0a:	4413      	add	r3, r2
 8012e0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012e0e:	4413      	add	r3, r2
 8012e10:	653b      	str	r3, [r7, #80]	@ 0x50
 8012e12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e14:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 2);
 8012e1a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012e1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e1e:	405a      	eors	r2, r3
 8012e20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e22:	401a      	ands	r2, r3
 8012e24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012e26:	ea82 0403 	eor.w	r4, r2, r3
 8012e2a:	f107 030c 	add.w	r3, r7, #12
 8012e2e:	2102      	movs	r1, #2
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7ff ff71 	bl	8012d18 <blk0>
 8012e36:	4603      	mov	r3, r0
 8012e38:	18e2      	adds	r2, r4, r3
 8012e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e3c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012e40:	441a      	add	r2, r3
 8012e42:	4ba0      	ldr	r3, [pc, #640]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012e44:	4413      	add	r3, r2
 8012e46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012e48:	4413      	add	r3, r2
 8012e4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8012e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e4e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 3);
 8012e54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e58:	405a      	eors	r2, r3
 8012e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e5c:	401a      	ands	r2, r3
 8012e5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012e60:	ea82 0403 	eor.w	r4, r2, r3
 8012e64:	f107 030c 	add.w	r3, r7, #12
 8012e68:	2103      	movs	r1, #3
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7ff ff54 	bl	8012d18 <blk0>
 8012e70:	4603      	mov	r3, r0
 8012e72:	18e2      	adds	r2, r4, r3
 8012e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e76:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012e7a:	441a      	add	r2, r3
 8012e7c:	4b91      	ldr	r3, [pc, #580]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012e7e:	4413      	add	r3, r2
 8012e80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012e82:	4413      	add	r3, r2
 8012e84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e88:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012e8c:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 4);
 8012e8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012e90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e92:	405a      	eors	r2, r3
 8012e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012e96:	401a      	ands	r2, r3
 8012e98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e9a:	ea82 0403 	eor.w	r4, r2, r3
 8012e9e:	f107 030c 	add.w	r3, r7, #12
 8012ea2:	2104      	movs	r1, #4
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7ff ff37 	bl	8012d18 <blk0>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	18e2      	adds	r2, r4, r3
 8012eae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012eb0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012eb4:	441a      	add	r2, r3
 8012eb6:	4b83      	ldr	r3, [pc, #524]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012eb8:	4413      	add	r3, r2
 8012eba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012ebc:	4413      	add	r3, r2
 8012ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ec2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012ec6:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 5);
 8012ec8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ecc:	405a      	eors	r2, r3
 8012ece:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ed0:	401a      	ands	r2, r3
 8012ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ed4:	ea82 0403 	eor.w	r4, r2, r3
 8012ed8:	f107 030c 	add.w	r3, r7, #12
 8012edc:	2105      	movs	r1, #5
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f7ff ff1a 	bl	8012d18 <blk0>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	18e2      	adds	r2, r4, r3
 8012ee8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012eea:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012eee:	441a      	add	r2, r3
 8012ef0:	4b74      	ldr	r3, [pc, #464]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012ef2:	4413      	add	r3, r2
 8012ef4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012ef6:	4413      	add	r3, r2
 8012ef8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012efa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012efc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012f00:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 6);
 8012f02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f06:	405a      	eors	r2, r3
 8012f08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f0a:	401a      	ands	r2, r3
 8012f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f0e:	ea82 0403 	eor.w	r4, r2, r3
 8012f12:	f107 030c 	add.w	r3, r7, #12
 8012f16:	2106      	movs	r1, #6
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7ff fefd 	bl	8012d18 <blk0>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	18e2      	adds	r2, r4, r3
 8012f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f24:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012f28:	441a      	add	r2, r3
 8012f2a:	4b66      	ldr	r3, [pc, #408]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012f2c:	4413      	add	r3, r2
 8012f2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012f30:	4413      	add	r3, r2
 8012f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8012f34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f36:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012f3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 7);
 8012f3c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012f3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012f40:	405a      	eors	r2, r3
 8012f42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f44:	401a      	ands	r2, r3
 8012f46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012f48:	ea82 0403 	eor.w	r4, r2, r3
 8012f4c:	f107 030c 	add.w	r3, r7, #12
 8012f50:	2107      	movs	r1, #7
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7ff fee0 	bl	8012d18 <blk0>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	18e2      	adds	r2, r4, r3
 8012f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012f62:	441a      	add	r2, r3
 8012f64:	4b57      	ldr	r3, [pc, #348]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012f66:	4413      	add	r3, r2
 8012f68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012f6a:	4413      	add	r3, r2
 8012f6c:	657b      	str	r3, [r7, #84]	@ 0x54
 8012f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f70:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 8);
 8012f76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f7a:	405a      	eors	r2, r3
 8012f7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012f7e:	401a      	ands	r2, r3
 8012f80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012f82:	ea82 0403 	eor.w	r4, r2, r3
 8012f86:	f107 030c 	add.w	r3, r7, #12
 8012f8a:	2108      	movs	r1, #8
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7ff fec3 	bl	8012d18 <blk0>
 8012f92:	4603      	mov	r3, r0
 8012f94:	18e2      	adds	r2, r4, r3
 8012f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012f98:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012f9c:	441a      	add	r2, r3
 8012f9e:	4b49      	ldr	r3, [pc, #292]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012fa0:	4413      	add	r3, r2
 8012fa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012fa4:	4413      	add	r3, r2
 8012fa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012faa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012fae:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 9);
 8012fb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fb4:	405a      	eors	r2, r3
 8012fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fb8:	401a      	ands	r2, r3
 8012fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fbc:	ea82 0403 	eor.w	r4, r2, r3
 8012fc0:	f107 030c 	add.w	r3, r7, #12
 8012fc4:	2109      	movs	r1, #9
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f7ff fea6 	bl	8012d18 <blk0>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	18e2      	adds	r2, r4, r3
 8012fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012fd2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012fd6:	441a      	add	r2, r3
 8012fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80130c4 <mg_sha1_transform+0x354>)
 8012fda:	4413      	add	r3, r2
 8012fdc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012fde:	4413      	add	r3, r2
 8012fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012fe4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012fe8:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 10);
 8012fea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fee:	405a      	eors	r2, r3
 8012ff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ff2:	401a      	ands	r2, r3
 8012ff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ff6:	ea82 0403 	eor.w	r4, r2, r3
 8012ffa:	f107 030c 	add.w	r3, r7, #12
 8012ffe:	210a      	movs	r1, #10
 8013000:	4618      	mov	r0, r3
 8013002:	f7ff fe89 	bl	8012d18 <blk0>
 8013006:	4603      	mov	r3, r0
 8013008:	18e2      	adds	r2, r4, r3
 801300a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801300c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013010:	441a      	add	r2, r3
 8013012:	4b2c      	ldr	r3, [pc, #176]	@ (80130c4 <mg_sha1_transform+0x354>)
 8013014:	4413      	add	r3, r2
 8013016:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013018:	4413      	add	r3, r2
 801301a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801301c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801301e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013022:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 11);
 8013024:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013028:	405a      	eors	r2, r3
 801302a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801302c:	401a      	ands	r2, r3
 801302e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013030:	ea82 0403 	eor.w	r4, r2, r3
 8013034:	f107 030c 	add.w	r3, r7, #12
 8013038:	210b      	movs	r1, #11
 801303a:	4618      	mov	r0, r3
 801303c:	f7ff fe6c 	bl	8012d18 <blk0>
 8013040:	4603      	mov	r3, r0
 8013042:	18e2      	adds	r2, r4, r3
 8013044:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013046:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801304a:	441a      	add	r2, r3
 801304c:	4b1d      	ldr	r3, [pc, #116]	@ (80130c4 <mg_sha1_transform+0x354>)
 801304e:	4413      	add	r3, r2
 8013050:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013052:	4413      	add	r3, r2
 8013054:	653b      	str	r3, [r7, #80]	@ 0x50
 8013056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013058:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801305c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 12);
 801305e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013060:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013062:	405a      	eors	r2, r3
 8013064:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013066:	401a      	ands	r2, r3
 8013068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801306a:	ea82 0403 	eor.w	r4, r2, r3
 801306e:	f107 030c 	add.w	r3, r7, #12
 8013072:	210c      	movs	r1, #12
 8013074:	4618      	mov	r0, r3
 8013076:	f7ff fe4f 	bl	8012d18 <blk0>
 801307a:	4603      	mov	r3, r0
 801307c:	18e2      	adds	r2, r4, r3
 801307e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013080:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013084:	441a      	add	r2, r3
 8013086:	4b0f      	ldr	r3, [pc, #60]	@ (80130c4 <mg_sha1_transform+0x354>)
 8013088:	4413      	add	r3, r2
 801308a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801308c:	4413      	add	r3, r2
 801308e:	657b      	str	r3, [r7, #84]	@ 0x54
 8013090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013092:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013096:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 13);
 8013098:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801309a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801309c:	405a      	eors	r2, r3
 801309e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130a0:	401a      	ands	r2, r3
 80130a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80130a4:	ea82 0403 	eor.w	r4, r2, r3
 80130a8:	f107 030c 	add.w	r3, r7, #12
 80130ac:	210d      	movs	r1, #13
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7ff fe32 	bl	8012d18 <blk0>
 80130b4:	4603      	mov	r3, r0
 80130b6:	18e2      	adds	r2, r4, r3
 80130b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130ba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80130be:	441a      	add	r2, r3
 80130c0:	e002      	b.n	80130c8 <mg_sha1_transform+0x358>
 80130c2:	bf00      	nop
 80130c4:	5a827999 	.word	0x5a827999
 80130c8:	4bac      	ldr	r3, [pc, #688]	@ (801337c <mg_sha1_transform+0x60c>)
 80130ca:	4413      	add	r3, r2
 80130cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80130ce:	4413      	add	r3, r2
 80130d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80130d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80130d4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80130d8:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 14);
 80130da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80130dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130de:	405a      	eors	r2, r3
 80130e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80130e2:	401a      	ands	r2, r3
 80130e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130e6:	ea82 0403 	eor.w	r4, r2, r3
 80130ea:	f107 030c 	add.w	r3, r7, #12
 80130ee:	210e      	movs	r1, #14
 80130f0:	4618      	mov	r0, r3
 80130f2:	f7ff fe11 	bl	8012d18 <blk0>
 80130f6:	4603      	mov	r3, r0
 80130f8:	18e2      	adds	r2, r4, r3
 80130fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80130fc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013100:	441a      	add	r2, r3
 8013102:	4b9e      	ldr	r3, [pc, #632]	@ (801337c <mg_sha1_transform+0x60c>)
 8013104:	4413      	add	r3, r2
 8013106:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013108:	4413      	add	r3, r2
 801310a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801310c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801310e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013112:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 15);
 8013114:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013116:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013118:	405a      	eors	r2, r3
 801311a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801311c:	401a      	ands	r2, r3
 801311e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013120:	ea82 0403 	eor.w	r4, r2, r3
 8013124:	f107 030c 	add.w	r3, r7, #12
 8013128:	210f      	movs	r1, #15
 801312a:	4618      	mov	r0, r3
 801312c:	f7ff fdf4 	bl	8012d18 <blk0>
 8013130:	4603      	mov	r3, r0
 8013132:	18e2      	adds	r2, r4, r3
 8013134:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013136:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801313a:	441a      	add	r2, r3
 801313c:	4b8f      	ldr	r3, [pc, #572]	@ (801337c <mg_sha1_transform+0x60c>)
 801313e:	4413      	add	r3, r2
 8013140:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013142:	4413      	add	r3, r2
 8013144:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013146:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013148:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801314c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R1(e, a, b, c, d, 16);
 801314e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013152:	405a      	eors	r2, r3
 8013154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013156:	401a      	ands	r2, r3
 8013158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801315a:	405a      	eors	r2, r3
 801315c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801315e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013160:	4059      	eors	r1, r3
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	4059      	eors	r1, r3
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	404b      	eors	r3, r1
 801316a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801316e:	60fb      	str	r3, [r7, #12]
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	441a      	add	r2, r3
 8013174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013176:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801317a:	441a      	add	r2, r3
 801317c:	4b7f      	ldr	r3, [pc, #508]	@ (801337c <mg_sha1_transform+0x60c>)
 801317e:	4413      	add	r3, r2
 8013180:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013182:	4413      	add	r3, r2
 8013184:	653b      	str	r3, [r7, #80]	@ 0x50
 8013186:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013188:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801318c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R1(d, e, a, b, c, 17);
 801318e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013190:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013192:	405a      	eors	r2, r3
 8013194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013196:	401a      	ands	r2, r3
 8013198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801319a:	405a      	eors	r2, r3
 801319c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801319e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131a0:	4059      	eors	r1, r3
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	4059      	eors	r1, r3
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	404b      	eors	r3, r1
 80131aa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80131ae:	613b      	str	r3, [r7, #16]
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	441a      	add	r2, r3
 80131b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131b6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80131ba:	441a      	add	r2, r3
 80131bc:	4b6f      	ldr	r3, [pc, #444]	@ (801337c <mg_sha1_transform+0x60c>)
 80131be:	4413      	add	r3, r2
 80131c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80131c2:	4413      	add	r3, r2
 80131c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80131c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131c8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80131cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R1(c, d, e, a, b, 18);
 80131ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80131d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80131d2:	405a      	eors	r2, r3
 80131d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80131d6:	401a      	ands	r2, r3
 80131d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80131da:	405a      	eors	r2, r3
 80131dc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80131de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80131e0:	4059      	eors	r1, r3
 80131e2:	69fb      	ldr	r3, [r7, #28]
 80131e4:	4059      	eors	r1, r3
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	404b      	eors	r3, r1
 80131ea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80131ee:	617b      	str	r3, [r7, #20]
 80131f0:	697b      	ldr	r3, [r7, #20]
 80131f2:	441a      	add	r2, r3
 80131f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80131f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80131fa:	441a      	add	r2, r3
 80131fc:	4b5f      	ldr	r3, [pc, #380]	@ (801337c <mg_sha1_transform+0x60c>)
 80131fe:	4413      	add	r3, r2
 8013200:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013202:	4413      	add	r3, r2
 8013204:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013208:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801320c:	653b      	str	r3, [r7, #80]	@ 0x50
  R1(b, c, d, e, a, 19);
 801320e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013212:	405a      	eors	r2, r3
 8013214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013216:	401a      	ands	r2, r3
 8013218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801321a:	405a      	eors	r2, r3
 801321c:	68f9      	ldr	r1, [r7, #12]
 801321e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013220:	4059      	eors	r1, r3
 8013222:	6a3b      	ldr	r3, [r7, #32]
 8013224:	4059      	eors	r1, r3
 8013226:	69bb      	ldr	r3, [r7, #24]
 8013228:	404b      	eors	r3, r1
 801322a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801322e:	61bb      	str	r3, [r7, #24]
 8013230:	69bb      	ldr	r3, [r7, #24]
 8013232:	441a      	add	r2, r3
 8013234:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013236:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801323a:	441a      	add	r2, r3
 801323c:	4b4f      	ldr	r3, [pc, #316]	@ (801337c <mg_sha1_transform+0x60c>)
 801323e:	4413      	add	r3, r2
 8013240:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013242:	4413      	add	r3, r2
 8013244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013248:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801324c:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 20);
 801324e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013252:	405a      	eors	r2, r3
 8013254:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013256:	405a      	eors	r2, r3
 8013258:	6939      	ldr	r1, [r7, #16]
 801325a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801325c:	4059      	eors	r1, r3
 801325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013260:	4059      	eors	r1, r3
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	404b      	eors	r3, r1
 8013266:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801326a:	61fb      	str	r3, [r7, #28]
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	441a      	add	r2, r3
 8013270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013272:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013276:	441a      	add	r2, r3
 8013278:	4b41      	ldr	r3, [pc, #260]	@ (8013380 <mg_sha1_transform+0x610>)
 801327a:	4413      	add	r3, r2
 801327c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801327e:	4413      	add	r3, r2
 8013280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013282:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013284:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013288:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 21);
 801328a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801328c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801328e:	405a      	eors	r2, r3
 8013290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013292:	405a      	eors	r2, r3
 8013294:	6979      	ldr	r1, [r7, #20]
 8013296:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013298:	4059      	eors	r1, r3
 801329a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801329c:	4059      	eors	r1, r3
 801329e:	6a3b      	ldr	r3, [r7, #32]
 80132a0:	404b      	eors	r3, r1
 80132a2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80132a6:	623b      	str	r3, [r7, #32]
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	441a      	add	r2, r3
 80132ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80132ae:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80132b2:	441a      	add	r2, r3
 80132b4:	4b32      	ldr	r3, [pc, #200]	@ (8013380 <mg_sha1_transform+0x610>)
 80132b6:	4413      	add	r3, r2
 80132b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80132ba:	4413      	add	r3, r2
 80132bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80132be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80132c0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80132c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 22);
 80132c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80132c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80132ca:	405a      	eors	r2, r3
 80132cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80132ce:	405a      	eors	r2, r3
 80132d0:	69b9      	ldr	r1, [r7, #24]
 80132d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132d4:	4059      	eors	r1, r3
 80132d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d8:	4059      	eors	r1, r3
 80132da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132dc:	404b      	eors	r3, r1
 80132de:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80132e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80132e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132e6:	441a      	add	r2, r3
 80132e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132ea:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80132ee:	441a      	add	r2, r3
 80132f0:	4b23      	ldr	r3, [pc, #140]	@ (8013380 <mg_sha1_transform+0x610>)
 80132f2:	4413      	add	r3, r2
 80132f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80132f6:	4413      	add	r3, r2
 80132f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80132fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80132fc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013300:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 23);
 8013302:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013306:	405a      	eors	r2, r3
 8013308:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801330a:	405a      	eors	r2, r3
 801330c:	69f9      	ldr	r1, [r7, #28]
 801330e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013310:	4059      	eors	r1, r3
 8013312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013314:	4059      	eors	r1, r3
 8013316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013318:	404b      	eors	r3, r1
 801331a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801331e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013322:	441a      	add	r2, r3
 8013324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013326:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801332a:	441a      	add	r2, r3
 801332c:	4b14      	ldr	r3, [pc, #80]	@ (8013380 <mg_sha1_transform+0x610>)
 801332e:	4413      	add	r3, r2
 8013330:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013332:	4413      	add	r3, r2
 8013334:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013338:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801333c:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 24);
 801333e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013340:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013342:	405a      	eors	r2, r3
 8013344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013346:	405a      	eors	r2, r3
 8013348:	6a39      	ldr	r1, [r7, #32]
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	4059      	eors	r1, r3
 801334e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013350:	4059      	eors	r1, r3
 8013352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013354:	404b      	eors	r3, r1
 8013356:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801335a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801335c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801335e:	441a      	add	r2, r3
 8013360:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013362:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013366:	441a      	add	r2, r3
 8013368:	4b05      	ldr	r3, [pc, #20]	@ (8013380 <mg_sha1_transform+0x610>)
 801336a:	4413      	add	r3, r2
 801336c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801336e:	4413      	add	r3, r2
 8013370:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013374:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013378:	e004      	b.n	8013384 <mg_sha1_transform+0x614>
 801337a:	bf00      	nop
 801337c:	5a827999 	.word	0x5a827999
 8013380:	6ed9eba1 	.word	0x6ed9eba1
 8013384:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 25);
 8013386:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801338a:	405a      	eors	r2, r3
 801338c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801338e:	405a      	eors	r2, r3
 8013390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	4059      	eors	r1, r3
 8013396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013398:	4059      	eors	r1, r3
 801339a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801339c:	404b      	eors	r3, r1
 801339e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80133a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80133a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133a6:	441a      	add	r2, r3
 80133a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80133aa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80133ae:	441a      	add	r2, r3
 80133b0:	4ba9      	ldr	r3, [pc, #676]	@ (8013658 <mg_sha1_transform+0x8e8>)
 80133b2:	4413      	add	r3, r2
 80133b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80133b6:	4413      	add	r3, r2
 80133b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80133ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133bc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80133c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 26);
 80133c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80133c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80133c6:	405a      	eors	r2, r3
 80133c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80133ca:	405a      	eors	r2, r3
 80133cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	4059      	eors	r1, r3
 80133d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133d4:	4059      	eors	r1, r3
 80133d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133d8:	404b      	eors	r3, r1
 80133da:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80133de:	637b      	str	r3, [r7, #52]	@ 0x34
 80133e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133e2:	441a      	add	r2, r3
 80133e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80133e6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80133ea:	441a      	add	r2, r3
 80133ec:	4b9a      	ldr	r3, [pc, #616]	@ (8013658 <mg_sha1_transform+0x8e8>)
 80133ee:	4413      	add	r3, r2
 80133f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80133f2:	4413      	add	r3, r2
 80133f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80133f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80133f8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80133fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 27);
 80133fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013400:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013402:	405a      	eors	r2, r3
 8013404:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013406:	405a      	eors	r2, r3
 8013408:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	4059      	eors	r1, r3
 801340e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013410:	4059      	eors	r1, r3
 8013412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013414:	404b      	eors	r3, r1
 8013416:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801341a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801341c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801341e:	441a      	add	r2, r3
 8013420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013422:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013426:	441a      	add	r2, r3
 8013428:	4b8b      	ldr	r3, [pc, #556]	@ (8013658 <mg_sha1_transform+0x8e8>)
 801342a:	4413      	add	r3, r2
 801342c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801342e:	4413      	add	r3, r2
 8013430:	657b      	str	r3, [r7, #84]	@ 0x54
 8013432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013434:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013438:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 28);
 801343a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801343c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801343e:	405a      	eors	r2, r3
 8013440:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013442:	405a      	eors	r2, r3
 8013444:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013446:	69fb      	ldr	r3, [r7, #28]
 8013448:	4059      	eors	r1, r3
 801344a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801344c:	4059      	eors	r1, r3
 801344e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013450:	404b      	eors	r3, r1
 8013452:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013456:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801345a:	441a      	add	r2, r3
 801345c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801345e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013462:	441a      	add	r2, r3
 8013464:	4b7c      	ldr	r3, [pc, #496]	@ (8013658 <mg_sha1_transform+0x8e8>)
 8013466:	4413      	add	r3, r2
 8013468:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801346a:	4413      	add	r3, r2
 801346c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801346e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013470:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013474:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 29);
 8013476:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013478:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801347a:	405a      	eors	r2, r3
 801347c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801347e:	405a      	eors	r2, r3
 8013480:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013482:	6a3b      	ldr	r3, [r7, #32]
 8013484:	4059      	eors	r1, r3
 8013486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013488:	4059      	eors	r1, r3
 801348a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801348c:	404b      	eors	r3, r1
 801348e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013492:	643b      	str	r3, [r7, #64]	@ 0x40
 8013494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013496:	441a      	add	r2, r3
 8013498:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801349a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801349e:	441a      	add	r2, r3
 80134a0:	4b6d      	ldr	r3, [pc, #436]	@ (8013658 <mg_sha1_transform+0x8e8>)
 80134a2:	4413      	add	r3, r2
 80134a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80134a6:	4413      	add	r3, r2
 80134a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80134aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80134b0:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 30);
 80134b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80134b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134b6:	405a      	eors	r2, r3
 80134b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80134ba:	405a      	eors	r2, r3
 80134bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80134be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134c0:	4059      	eors	r1, r3
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	4059      	eors	r1, r3
 80134c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134c8:	404b      	eors	r3, r1
 80134ca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80134ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80134d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134d2:	441a      	add	r2, r3
 80134d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80134d6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80134da:	441a      	add	r2, r3
 80134dc:	4b5e      	ldr	r3, [pc, #376]	@ (8013658 <mg_sha1_transform+0x8e8>)
 80134de:	4413      	add	r3, r2
 80134e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80134e2:	4413      	add	r3, r2
 80134e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80134e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80134ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 31);
 80134ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80134f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80134f2:	405a      	eors	r2, r3
 80134f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134f6:	405a      	eors	r2, r3
 80134f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80134fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134fc:	4059      	eors	r1, r3
 80134fe:	693b      	ldr	r3, [r7, #16]
 8013500:	4059      	eors	r1, r3
 8013502:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013504:	404b      	eors	r3, r1
 8013506:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801350a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801350c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801350e:	441a      	add	r2, r3
 8013510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013512:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013516:	441a      	add	r2, r3
 8013518:	4b4f      	ldr	r3, [pc, #316]	@ (8013658 <mg_sha1_transform+0x8e8>)
 801351a:	4413      	add	r3, r2
 801351c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801351e:	4413      	add	r3, r2
 8013520:	653b      	str	r3, [r7, #80]	@ 0x50
 8013522:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013524:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013528:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 32);
 801352a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801352c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801352e:	405a      	eors	r2, r3
 8013530:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013532:	405a      	eors	r2, r3
 8013534:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013538:	4059      	eors	r1, r3
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	4059      	eors	r1, r3
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	404b      	eors	r3, r1
 8013542:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013546:	60fb      	str	r3, [r7, #12]
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	441a      	add	r2, r3
 801354c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801354e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013552:	441a      	add	r2, r3
 8013554:	4b40      	ldr	r3, [pc, #256]	@ (8013658 <mg_sha1_transform+0x8e8>)
 8013556:	4413      	add	r3, r2
 8013558:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801355a:	4413      	add	r3, r2
 801355c:	657b      	str	r3, [r7, #84]	@ 0x54
 801355e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013560:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013564:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 33);
 8013566:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013568:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801356a:	405a      	eors	r2, r3
 801356c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801356e:	405a      	eors	r2, r3
 8013570:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013574:	4059      	eors	r1, r3
 8013576:	69bb      	ldr	r3, [r7, #24]
 8013578:	4059      	eors	r1, r3
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	404b      	eors	r3, r1
 801357e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013582:	613b      	str	r3, [r7, #16]
 8013584:	693b      	ldr	r3, [r7, #16]
 8013586:	441a      	add	r2, r3
 8013588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801358a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801358e:	441a      	add	r2, r3
 8013590:	4b31      	ldr	r3, [pc, #196]	@ (8013658 <mg_sha1_transform+0x8e8>)
 8013592:	4413      	add	r3, r2
 8013594:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013596:	4413      	add	r3, r2
 8013598:	65bb      	str	r3, [r7, #88]	@ 0x58
 801359a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801359c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80135a0:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 34);
 80135a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80135a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80135a6:	405a      	eors	r2, r3
 80135a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80135aa:	405a      	eors	r2, r3
 80135ac:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80135ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135b0:	4059      	eors	r1, r3
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	4059      	eors	r1, r3
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	404b      	eors	r3, r1
 80135ba:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80135be:	617b      	str	r3, [r7, #20]
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	441a      	add	r2, r3
 80135c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80135c6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80135ca:	441a      	add	r2, r3
 80135cc:	4b22      	ldr	r3, [pc, #136]	@ (8013658 <mg_sha1_transform+0x8e8>)
 80135ce:	4413      	add	r3, r2
 80135d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80135d2:	4413      	add	r3, r2
 80135d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80135d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135d8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80135dc:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 35);
 80135de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80135e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80135e2:	405a      	eors	r2, r3
 80135e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80135e6:	405a      	eors	r2, r3
 80135e8:	68f9      	ldr	r1, [r7, #12]
 80135ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ec:	4059      	eors	r1, r3
 80135ee:	6a3b      	ldr	r3, [r7, #32]
 80135f0:	4059      	eors	r1, r3
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	404b      	eors	r3, r1
 80135f6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80135fa:	61bb      	str	r3, [r7, #24]
 80135fc:	69bb      	ldr	r3, [r7, #24]
 80135fe:	441a      	add	r2, r3
 8013600:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013602:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013606:	441a      	add	r2, r3
 8013608:	4b13      	ldr	r3, [pc, #76]	@ (8013658 <mg_sha1_transform+0x8e8>)
 801360a:	4413      	add	r3, r2
 801360c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801360e:	4413      	add	r3, r2
 8013610:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013612:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013614:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013618:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 36);
 801361a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801361c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801361e:	405a      	eors	r2, r3
 8013620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013622:	405a      	eors	r2, r3
 8013624:	6939      	ldr	r1, [r7, #16]
 8013626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013628:	4059      	eors	r1, r3
 801362a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801362c:	4059      	eors	r1, r3
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	404b      	eors	r3, r1
 8013632:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013636:	61fb      	str	r3, [r7, #28]
 8013638:	69fb      	ldr	r3, [r7, #28]
 801363a:	441a      	add	r2, r3
 801363c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801363e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013642:	441a      	add	r2, r3
 8013644:	4b04      	ldr	r3, [pc, #16]	@ (8013658 <mg_sha1_transform+0x8e8>)
 8013646:	4413      	add	r3, r2
 8013648:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801364a:	4413      	add	r3, r2
 801364c:	653b      	str	r3, [r7, #80]	@ 0x50
 801364e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013650:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013654:	e002      	b.n	801365c <mg_sha1_transform+0x8ec>
 8013656:	bf00      	nop
 8013658:	6ed9eba1 	.word	0x6ed9eba1
 801365c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 37);
 801365e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013662:	405a      	eors	r2, r3
 8013664:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013666:	405a      	eors	r2, r3
 8013668:	6979      	ldr	r1, [r7, #20]
 801366a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801366c:	4059      	eors	r1, r3
 801366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013670:	4059      	eors	r1, r3
 8013672:	6a3b      	ldr	r3, [r7, #32]
 8013674:	404b      	eors	r3, r1
 8013676:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801367a:	623b      	str	r3, [r7, #32]
 801367c:	6a3b      	ldr	r3, [r7, #32]
 801367e:	441a      	add	r2, r3
 8013680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013682:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013686:	441a      	add	r2, r3
 8013688:	4ba9      	ldr	r3, [pc, #676]	@ (8013930 <mg_sha1_transform+0xbc0>)
 801368a:	4413      	add	r3, r2
 801368c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801368e:	4413      	add	r3, r2
 8013690:	657b      	str	r3, [r7, #84]	@ 0x54
 8013692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013694:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 38);
 801369a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801369c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801369e:	405a      	eors	r2, r3
 80136a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80136a2:	405a      	eors	r2, r3
 80136a4:	69b9      	ldr	r1, [r7, #24]
 80136a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80136a8:	4059      	eors	r1, r3
 80136aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136ac:	4059      	eors	r1, r3
 80136ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136b0:	404b      	eors	r3, r1
 80136b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80136b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80136b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136ba:	441a      	add	r2, r3
 80136bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80136be:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80136c2:	441a      	add	r2, r3
 80136c4:	4b9a      	ldr	r3, [pc, #616]	@ (8013930 <mg_sha1_transform+0xbc0>)
 80136c6:	4413      	add	r3, r2
 80136c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80136ca:	4413      	add	r3, r2
 80136cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80136ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80136d4:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 39);
 80136d6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80136d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80136da:	405a      	eors	r2, r3
 80136dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80136de:	405a      	eors	r2, r3
 80136e0:	69f9      	ldr	r1, [r7, #28]
 80136e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80136e4:	4059      	eors	r1, r3
 80136e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e8:	4059      	eors	r1, r3
 80136ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ec:	404b      	eors	r3, r1
 80136ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80136f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80136f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136f6:	441a      	add	r2, r3
 80136f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80136fa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80136fe:	441a      	add	r2, r3
 8013700:	4b8b      	ldr	r3, [pc, #556]	@ (8013930 <mg_sha1_transform+0xbc0>)
 8013702:	4413      	add	r3, r2
 8013704:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013706:	4413      	add	r3, r2
 8013708:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801370a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801370c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013710:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 40);
 8013712:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013716:	431a      	orrs	r2, r3
 8013718:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801371a:	401a      	ands	r2, r3
 801371c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801371e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013720:	400b      	ands	r3, r1
 8013722:	431a      	orrs	r2, r3
 8013724:	6a39      	ldr	r1, [r7, #32]
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	4059      	eors	r1, r3
 801372a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801372c:	4059      	eors	r1, r3
 801372e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013730:	404b      	eors	r3, r1
 8013732:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013736:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801373a:	441a      	add	r2, r3
 801373c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801373e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013742:	441a      	add	r2, r3
 8013744:	4b7b      	ldr	r3, [pc, #492]	@ (8013934 <mg_sha1_transform+0xbc4>)
 8013746:	4413      	add	r3, r2
 8013748:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801374a:	4413      	add	r3, r2
 801374c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801374e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013750:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013754:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 41);
 8013756:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013758:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801375a:	431a      	orrs	r2, r3
 801375c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801375e:	401a      	ands	r2, r3
 8013760:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8013762:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013764:	400b      	ands	r3, r1
 8013766:	431a      	orrs	r2, r3
 8013768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	4059      	eors	r1, r3
 801376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013770:	4059      	eors	r1, r3
 8013772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013774:	404b      	eors	r3, r1
 8013776:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801377a:	633b      	str	r3, [r7, #48]	@ 0x30
 801377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801377e:	441a      	add	r2, r3
 8013780:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013782:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013786:	441a      	add	r2, r3
 8013788:	4b6a      	ldr	r3, [pc, #424]	@ (8013934 <mg_sha1_transform+0xbc4>)
 801378a:	4413      	add	r3, r2
 801378c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801378e:	4413      	add	r3, r2
 8013790:	653b      	str	r3, [r7, #80]	@ 0x50
 8013792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013794:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013798:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 42);
 801379a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801379c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801379e:	431a      	orrs	r2, r3
 80137a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80137a2:	401a      	ands	r2, r3
 80137a4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80137a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137a8:	400b      	ands	r3, r1
 80137aa:	431a      	orrs	r2, r3
 80137ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	4059      	eors	r1, r3
 80137b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80137b4:	4059      	eors	r1, r3
 80137b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137b8:	404b      	eors	r3, r1
 80137ba:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80137be:	637b      	str	r3, [r7, #52]	@ 0x34
 80137c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80137c2:	441a      	add	r2, r3
 80137c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80137c6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80137ca:	441a      	add	r2, r3
 80137cc:	4b59      	ldr	r3, [pc, #356]	@ (8013934 <mg_sha1_transform+0xbc4>)
 80137ce:	4413      	add	r3, r2
 80137d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80137d2:	4413      	add	r3, r2
 80137d4:	657b      	str	r3, [r7, #84]	@ 0x54
 80137d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137d8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80137dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 43);
 80137de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80137e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137e2:	431a      	orrs	r2, r3
 80137e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80137e6:	401a      	ands	r2, r3
 80137e8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80137ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80137ec:	400b      	ands	r3, r1
 80137ee:	431a      	orrs	r2, r3
 80137f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80137f2:	69bb      	ldr	r3, [r7, #24]
 80137f4:	4059      	eors	r1, r3
 80137f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80137f8:	4059      	eors	r1, r3
 80137fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137fc:	404b      	eors	r3, r1
 80137fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013806:	441a      	add	r2, r3
 8013808:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801380a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801380e:	441a      	add	r2, r3
 8013810:	4b48      	ldr	r3, [pc, #288]	@ (8013934 <mg_sha1_transform+0xbc4>)
 8013812:	4413      	add	r3, r2
 8013814:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013816:	4413      	add	r3, r2
 8013818:	65bb      	str	r3, [r7, #88]	@ 0x58
 801381a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801381c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013820:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 44);
 8013822:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013826:	431a      	orrs	r2, r3
 8013828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801382a:	401a      	ands	r2, r3
 801382c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801382e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013830:	400b      	ands	r3, r1
 8013832:	431a      	orrs	r2, r3
 8013834:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013836:	69fb      	ldr	r3, [r7, #28]
 8013838:	4059      	eors	r1, r3
 801383a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801383c:	4059      	eors	r1, r3
 801383e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013840:	404b      	eors	r3, r1
 8013842:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013846:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801384a:	441a      	add	r2, r3
 801384c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801384e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013852:	441a      	add	r2, r3
 8013854:	4b37      	ldr	r3, [pc, #220]	@ (8013934 <mg_sha1_transform+0xbc4>)
 8013856:	4413      	add	r3, r2
 8013858:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801385a:	4413      	add	r3, r2
 801385c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801385e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013860:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013864:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 45);
 8013866:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801386a:	431a      	orrs	r2, r3
 801386c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801386e:	401a      	ands	r2, r3
 8013870:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013872:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013874:	400b      	ands	r3, r1
 8013876:	431a      	orrs	r2, r3
 8013878:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801387a:	6a3b      	ldr	r3, [r7, #32]
 801387c:	4059      	eors	r1, r3
 801387e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013880:	4059      	eors	r1, r3
 8013882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013884:	404b      	eors	r3, r1
 8013886:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801388a:	643b      	str	r3, [r7, #64]	@ 0x40
 801388c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801388e:	441a      	add	r2, r3
 8013890:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013892:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013896:	441a      	add	r2, r3
 8013898:	4b26      	ldr	r3, [pc, #152]	@ (8013934 <mg_sha1_transform+0xbc4>)
 801389a:	4413      	add	r3, r2
 801389c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801389e:	4413      	add	r3, r2
 80138a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80138a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80138a4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80138a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 46);
 80138aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80138ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80138ae:	431a      	orrs	r2, r3
 80138b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80138b2:	401a      	ands	r2, r3
 80138b4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80138b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80138b8:	400b      	ands	r3, r1
 80138ba:	431a      	orrs	r2, r3
 80138bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80138be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138c0:	4059      	eors	r1, r3
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	4059      	eors	r1, r3
 80138c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138c8:	404b      	eors	r3, r1
 80138ca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80138ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80138d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80138d2:	441a      	add	r2, r3
 80138d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138d6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80138da:	441a      	add	r2, r3
 80138dc:	4b15      	ldr	r3, [pc, #84]	@ (8013934 <mg_sha1_transform+0xbc4>)
 80138de:	4413      	add	r3, r2
 80138e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80138e2:	4413      	add	r3, r2
 80138e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80138e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80138e8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80138ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 47);
 80138ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80138f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80138f2:	431a      	orrs	r2, r3
 80138f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80138f6:	401a      	ands	r2, r3
 80138f8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80138fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80138fc:	400b      	ands	r3, r1
 80138fe:	431a      	orrs	r2, r3
 8013900:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013904:	4059      	eors	r1, r3
 8013906:	693b      	ldr	r3, [r7, #16]
 8013908:	4059      	eors	r1, r3
 801390a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801390c:	404b      	eors	r3, r1
 801390e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013912:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013916:	441a      	add	r2, r3
 8013918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801391a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801391e:	441a      	add	r2, r3
 8013920:	4b04      	ldr	r3, [pc, #16]	@ (8013934 <mg_sha1_transform+0xbc4>)
 8013922:	4413      	add	r3, r2
 8013924:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013926:	4413      	add	r3, r2
 8013928:	657b      	str	r3, [r7, #84]	@ 0x54
 801392a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801392c:	e004      	b.n	8013938 <mg_sha1_transform+0xbc8>
 801392e:	bf00      	nop
 8013930:	6ed9eba1 	.word	0x6ed9eba1
 8013934:	8f1bbcdc 	.word	0x8f1bbcdc
 8013938:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801393c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 48);
 801393e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013942:	431a      	orrs	r2, r3
 8013944:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013946:	401a      	ands	r2, r3
 8013948:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801394a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801394c:	400b      	ands	r3, r1
 801394e:	431a      	orrs	r2, r3
 8013950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013954:	4059      	eors	r1, r3
 8013956:	697b      	ldr	r3, [r7, #20]
 8013958:	4059      	eors	r1, r3
 801395a:	68fb      	ldr	r3, [r7, #12]
 801395c:	404b      	eors	r3, r1
 801395e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013962:	60fb      	str	r3, [r7, #12]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	441a      	add	r2, r3
 8013968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801396a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801396e:	441a      	add	r2, r3
 8013970:	4ba8      	ldr	r3, [pc, #672]	@ (8013c14 <mg_sha1_transform+0xea4>)
 8013972:	4413      	add	r3, r2
 8013974:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013976:	4413      	add	r3, r2
 8013978:	65bb      	str	r3, [r7, #88]	@ 0x58
 801397a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801397c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013980:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 49);
 8013982:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013986:	431a      	orrs	r2, r3
 8013988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801398a:	401a      	ands	r2, r3
 801398c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801398e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013990:	400b      	ands	r3, r1
 8013992:	431a      	orrs	r2, r3
 8013994:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013998:	4059      	eors	r1, r3
 801399a:	69bb      	ldr	r3, [r7, #24]
 801399c:	4059      	eors	r1, r3
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	404b      	eors	r3, r1
 80139a2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80139a6:	613b      	str	r3, [r7, #16]
 80139a8:	693b      	ldr	r3, [r7, #16]
 80139aa:	441a      	add	r2, r3
 80139ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80139ae:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80139b2:	441a      	add	r2, r3
 80139b4:	4b97      	ldr	r3, [pc, #604]	@ (8013c14 <mg_sha1_transform+0xea4>)
 80139b6:	4413      	add	r3, r2
 80139b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80139ba:	4413      	add	r3, r2
 80139bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80139be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139c0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80139c4:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 50);
 80139c6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80139c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139ca:	431a      	orrs	r2, r3
 80139cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80139ce:	401a      	ands	r2, r3
 80139d0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80139d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80139d4:	400b      	ands	r3, r1
 80139d6:	431a      	orrs	r2, r3
 80139d8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80139da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139dc:	4059      	eors	r1, r3
 80139de:	69fb      	ldr	r3, [r7, #28]
 80139e0:	4059      	eors	r1, r3
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	404b      	eors	r3, r1
 80139e6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80139ea:	617b      	str	r3, [r7, #20]
 80139ec:	697b      	ldr	r3, [r7, #20]
 80139ee:	441a      	add	r2, r3
 80139f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80139f2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80139f6:	441a      	add	r2, r3
 80139f8:	4b86      	ldr	r3, [pc, #536]	@ (8013c14 <mg_sha1_transform+0xea4>)
 80139fa:	4413      	add	r3, r2
 80139fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80139fe:	4413      	add	r3, r2
 8013a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013a02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a04:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a08:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 51);
 8013a0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013a0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a0e:	431a      	orrs	r2, r3
 8013a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a12:	401a      	ands	r2, r3
 8013a14:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8013a16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a18:	400b      	ands	r3, r1
 8013a1a:	431a      	orrs	r2, r3
 8013a1c:	68f9      	ldr	r1, [r7, #12]
 8013a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a20:	4059      	eors	r1, r3
 8013a22:	6a3b      	ldr	r3, [r7, #32]
 8013a24:	4059      	eors	r1, r3
 8013a26:	69bb      	ldr	r3, [r7, #24]
 8013a28:	404b      	eors	r3, r1
 8013a2a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013a2e:	61bb      	str	r3, [r7, #24]
 8013a30:	69bb      	ldr	r3, [r7, #24]
 8013a32:	441a      	add	r2, r3
 8013a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a36:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a3a:	441a      	add	r2, r3
 8013a3c:	4b75      	ldr	r3, [pc, #468]	@ (8013c14 <mg_sha1_transform+0xea4>)
 8013a3e:	4413      	add	r3, r2
 8013a40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a42:	4413      	add	r3, r2
 8013a44:	653b      	str	r3, [r7, #80]	@ 0x50
 8013a46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a48:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 52);
 8013a4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a52:	431a      	orrs	r2, r3
 8013a54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013a56:	401a      	ands	r2, r3
 8013a58:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a5c:	400b      	ands	r3, r1
 8013a5e:	431a      	orrs	r2, r3
 8013a60:	6939      	ldr	r1, [r7, #16]
 8013a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013a64:	4059      	eors	r1, r3
 8013a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a68:	4059      	eors	r1, r3
 8013a6a:	69fb      	ldr	r3, [r7, #28]
 8013a6c:	404b      	eors	r3, r1
 8013a6e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013a72:	61fb      	str	r3, [r7, #28]
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	441a      	add	r2, r3
 8013a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a7a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013a7e:	441a      	add	r2, r3
 8013a80:	4b64      	ldr	r3, [pc, #400]	@ (8013c14 <mg_sha1_transform+0xea4>)
 8013a82:	4413      	add	r3, r2
 8013a84:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013a86:	4413      	add	r3, r2
 8013a88:	657b      	str	r3, [r7, #84]	@ 0x54
 8013a8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a8c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 53);
 8013a92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a96:	431a      	orrs	r2, r3
 8013a98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013a9a:	401a      	ands	r2, r3
 8013a9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013a9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013aa0:	400b      	ands	r3, r1
 8013aa2:	431a      	orrs	r2, r3
 8013aa4:	6979      	ldr	r1, [r7, #20]
 8013aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013aa8:	4059      	eors	r1, r3
 8013aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aac:	4059      	eors	r1, r3
 8013aae:	6a3b      	ldr	r3, [r7, #32]
 8013ab0:	404b      	eors	r3, r1
 8013ab2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013ab6:	623b      	str	r3, [r7, #32]
 8013ab8:	6a3b      	ldr	r3, [r7, #32]
 8013aba:	441a      	add	r2, r3
 8013abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013abe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013ac2:	441a      	add	r2, r3
 8013ac4:	4b53      	ldr	r3, [pc, #332]	@ (8013c14 <mg_sha1_transform+0xea4>)
 8013ac6:	4413      	add	r3, r2
 8013ac8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013aca:	4413      	add	r3, r2
 8013acc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013ace:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ad0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ad4:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 54);
 8013ad6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013ad8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ada:	431a      	orrs	r2, r3
 8013adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ade:	401a      	ands	r2, r3
 8013ae0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ae4:	400b      	ands	r3, r1
 8013ae6:	431a      	orrs	r2, r3
 8013ae8:	69b9      	ldr	r1, [r7, #24]
 8013aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013aec:	4059      	eors	r1, r3
 8013aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013af0:	4059      	eors	r1, r3
 8013af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013af4:	404b      	eors	r3, r1
 8013af6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8013afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013afe:	441a      	add	r2, r3
 8013b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b02:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b06:	441a      	add	r2, r3
 8013b08:	4b42      	ldr	r3, [pc, #264]	@ (8013c14 <mg_sha1_transform+0xea4>)
 8013b0a:	4413      	add	r3, r2
 8013b0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013b0e:	4413      	add	r3, r2
 8013b10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b14:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b18:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 55);
 8013b1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b1e:	431a      	orrs	r2, r3
 8013b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b22:	401a      	ands	r2, r3
 8013b24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013b26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b28:	400b      	ands	r3, r1
 8013b2a:	431a      	orrs	r2, r3
 8013b2c:	69f9      	ldr	r1, [r7, #28]
 8013b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013b30:	4059      	eors	r1, r3
 8013b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b34:	4059      	eors	r1, r3
 8013b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b38:	404b      	eors	r3, r1
 8013b3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b42:	441a      	add	r2, r3
 8013b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b4a:	441a      	add	r2, r3
 8013b4c:	4b31      	ldr	r3, [pc, #196]	@ (8013c14 <mg_sha1_transform+0xea4>)
 8013b4e:	4413      	add	r3, r2
 8013b50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013b52:	4413      	add	r3, r2
 8013b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 56);
 8013b5e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013b60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b62:	431a      	orrs	r2, r3
 8013b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013b66:	401a      	ands	r2, r3
 8013b68:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8013b6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013b6c:	400b      	ands	r3, r1
 8013b6e:	431a      	orrs	r2, r3
 8013b70:	6a39      	ldr	r1, [r7, #32]
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	4059      	eors	r1, r3
 8013b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b78:	4059      	eors	r1, r3
 8013b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b7c:	404b      	eors	r3, r1
 8013b7e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b86:	441a      	add	r2, r3
 8013b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b8a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013b8e:	441a      	add	r2, r3
 8013b90:	4b20      	ldr	r3, [pc, #128]	@ (8013c14 <mg_sha1_transform+0xea4>)
 8013b92:	4413      	add	r3, r2
 8013b94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b96:	4413      	add	r3, r2
 8013b98:	653b      	str	r3, [r7, #80]	@ 0x50
 8013b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013b9c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 57);
 8013ba2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013ba4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ba6:	431a      	orrs	r2, r3
 8013ba8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013baa:	401a      	ands	r2, r3
 8013bac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8013bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013bb0:	400b      	ands	r3, r1
 8013bb2:	431a      	orrs	r2, r3
 8013bb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013bb6:	693b      	ldr	r3, [r7, #16]
 8013bb8:	4059      	eors	r1, r3
 8013bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bbc:	4059      	eors	r1, r3
 8013bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bc0:	404b      	eors	r3, r1
 8013bc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013bc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8013bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013bca:	441a      	add	r2, r3
 8013bcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013bd2:	441a      	add	r2, r3
 8013bd4:	4b0f      	ldr	r3, [pc, #60]	@ (8013c14 <mg_sha1_transform+0xea4>)
 8013bd6:	4413      	add	r3, r2
 8013bd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013bda:	4413      	add	r3, r2
 8013bdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8013bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013be0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 58);
 8013be6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bea:	431a      	orrs	r2, r3
 8013bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013bee:	401a      	ands	r2, r3
 8013bf0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013bf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013bf4:	400b      	ands	r3, r1
 8013bf6:	431a      	orrs	r2, r3
 8013bf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	4059      	eors	r1, r3
 8013bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c00:	4059      	eors	r1, r3
 8013c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c04:	404b      	eors	r3, r1
 8013c06:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013c0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8013c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c0e:	441a      	add	r2, r3
 8013c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c12:	e001      	b.n	8013c18 <mg_sha1_transform+0xea8>
 8013c14:	8f1bbcdc 	.word	0x8f1bbcdc
 8013c18:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c1c:	441a      	add	r2, r3
 8013c1e:	4ba9      	ldr	r3, [pc, #676]	@ (8013ec4 <mg_sha1_transform+0x1154>)
 8013c20:	4413      	add	r3, r2
 8013c22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013c24:	4413      	add	r3, r2
 8013c26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c2a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013c2e:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 59);
 8013c30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c34:	431a      	orrs	r2, r3
 8013c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c38:	401a      	ands	r2, r3
 8013c3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013c3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c3e:	400b      	ands	r3, r1
 8013c40:	431a      	orrs	r2, r3
 8013c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013c44:	69bb      	ldr	r3, [r7, #24]
 8013c46:	4059      	eors	r1, r3
 8013c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c4a:	4059      	eors	r1, r3
 8013c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c4e:	404b      	eors	r3, r1
 8013c50:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013c54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c58:	441a      	add	r2, r3
 8013c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013c5c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c60:	441a      	add	r2, r3
 8013c62:	4b98      	ldr	r3, [pc, #608]	@ (8013ec4 <mg_sha1_transform+0x1154>)
 8013c64:	4413      	add	r3, r2
 8013c66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013c68:	4413      	add	r3, r2
 8013c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c6e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013c72:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 60);
 8013c74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013c76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013c78:	405a      	eors	r2, r3
 8013c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013c7c:	405a      	eors	r2, r3
 8013c7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	4059      	eors	r1, r3
 8013c84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013c86:	4059      	eors	r1, r3
 8013c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c8a:	404b      	eors	r3, r1
 8013c8c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c94:	441a      	add	r2, r3
 8013c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013c98:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013c9c:	441a      	add	r2, r3
 8013c9e:	4b8a      	ldr	r3, [pc, #552]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013ca0:	4413      	add	r3, r2
 8013ca2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013ca4:	4413      	add	r3, r2
 8013ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013ca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013caa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013cae:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 61);
 8013cb0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cb4:	405a      	eors	r2, r3
 8013cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013cb8:	405a      	eors	r2, r3
 8013cba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013cbc:	6a3b      	ldr	r3, [r7, #32]
 8013cbe:	4059      	eors	r1, r3
 8013cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013cc2:	4059      	eors	r1, r3
 8013cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013cc6:	404b      	eors	r3, r1
 8013cc8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8013cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013cd0:	441a      	add	r2, r3
 8013cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cd4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013cd8:	441a      	add	r2, r3
 8013cda:	4b7b      	ldr	r3, [pc, #492]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013cdc:	4413      	add	r3, r2
 8013cde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013ce0:	4413      	add	r3, r2
 8013ce2:	653b      	str	r3, [r7, #80]	@ 0x50
 8013ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013ce6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 62);
 8013cec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013cee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013cf0:	405a      	eors	r2, r3
 8013cf2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013cf4:	405a      	eors	r2, r3
 8013cf6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cfa:	4059      	eors	r1, r3
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	4059      	eors	r1, r3
 8013d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d02:	404b      	eors	r3, r1
 8013d04:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d0c:	441a      	add	r2, r3
 8013d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d10:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d14:	441a      	add	r2, r3
 8013d16:	4b6c      	ldr	r3, [pc, #432]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013d18:	4413      	add	r3, r2
 8013d1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013d1c:	4413      	add	r3, r2
 8013d1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8013d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d22:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 63);
 8013d28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d2c:	405a      	eors	r2, r3
 8013d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013d30:	405a      	eors	r2, r3
 8013d32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d36:	4059      	eors	r1, r3
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	4059      	eors	r1, r3
 8013d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013d3e:	404b      	eors	r3, r1
 8013d40:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013d48:	441a      	add	r2, r3
 8013d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d4c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d50:	441a      	add	r2, r3
 8013d52:	4b5d      	ldr	r3, [pc, #372]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013d54:	4413      	add	r3, r2
 8013d56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013d58:	4413      	add	r3, r2
 8013d5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d5e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d62:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 64);
 8013d64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013d68:	405a      	eors	r2, r3
 8013d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d6c:	405a      	eors	r2, r3
 8013d6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d72:	4059      	eors	r1, r3
 8013d74:	697b      	ldr	r3, [r7, #20]
 8013d76:	4059      	eors	r1, r3
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	404b      	eors	r3, r1
 8013d7c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013d80:	60fb      	str	r3, [r7, #12]
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	441a      	add	r2, r3
 8013d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013d88:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013d8c:	441a      	add	r2, r3
 8013d8e:	4b4e      	ldr	r3, [pc, #312]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013d90:	4413      	add	r3, r2
 8013d92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013d94:	4413      	add	r3, r2
 8013d96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013d9a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013d9e:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 65);
 8013da0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013da4:	405a      	eors	r2, r3
 8013da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013da8:	405a      	eors	r2, r3
 8013daa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8013dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013dae:	4059      	eors	r1, r3
 8013db0:	69bb      	ldr	r3, [r7, #24]
 8013db2:	4059      	eors	r1, r3
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	404b      	eors	r3, r1
 8013db8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013dbc:	613b      	str	r3, [r7, #16]
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	441a      	add	r2, r3
 8013dc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013dc4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013dc8:	441a      	add	r2, r3
 8013dca:	4b3f      	ldr	r3, [pc, #252]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013dcc:	4413      	add	r3, r2
 8013dce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013dd0:	4413      	add	r3, r2
 8013dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013dd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013dd6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013dda:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 66);
 8013ddc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013dde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013de0:	405a      	eors	r2, r3
 8013de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013de4:	405a      	eors	r2, r3
 8013de6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013dea:	4059      	eors	r1, r3
 8013dec:	69fb      	ldr	r3, [r7, #28]
 8013dee:	4059      	eors	r1, r3
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	404b      	eors	r3, r1
 8013df4:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013df8:	617b      	str	r3, [r7, #20]
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	441a      	add	r2, r3
 8013dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e00:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013e04:	441a      	add	r2, r3
 8013e06:	4b30      	ldr	r3, [pc, #192]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013e08:	4413      	add	r3, r2
 8013e0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013e0c:	4413      	add	r3, r2
 8013e0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8013e10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e12:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013e16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 67);
 8013e18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013e1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e1c:	405a      	eors	r2, r3
 8013e1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e20:	405a      	eors	r2, r3
 8013e22:	68f9      	ldr	r1, [r7, #12]
 8013e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e26:	4059      	eors	r1, r3
 8013e28:	6a3b      	ldr	r3, [r7, #32]
 8013e2a:	4059      	eors	r1, r3
 8013e2c:	69bb      	ldr	r3, [r7, #24]
 8013e2e:	404b      	eors	r3, r1
 8013e30:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013e34:	61bb      	str	r3, [r7, #24]
 8013e36:	69bb      	ldr	r3, [r7, #24]
 8013e38:	441a      	add	r2, r3
 8013e3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e3c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013e40:	441a      	add	r2, r3
 8013e42:	4b21      	ldr	r3, [pc, #132]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013e44:	4413      	add	r3, r2
 8013e46:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e48:	4413      	add	r3, r2
 8013e4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8013e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e4e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 68);
 8013e54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e58:	405a      	eors	r2, r3
 8013e5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e5c:	405a      	eors	r2, r3
 8013e5e:	6939      	ldr	r1, [r7, #16]
 8013e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013e62:	4059      	eors	r1, r3
 8013e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e66:	4059      	eors	r1, r3
 8013e68:	69fb      	ldr	r3, [r7, #28]
 8013e6a:	404b      	eors	r3, r1
 8013e6c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013e70:	61fb      	str	r3, [r7, #28]
 8013e72:	69fb      	ldr	r3, [r7, #28]
 8013e74:	441a      	add	r2, r3
 8013e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e78:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013e7c:	441a      	add	r2, r3
 8013e7e:	4b12      	ldr	r3, [pc, #72]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013e80:	4413      	add	r3, r2
 8013e82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013e84:	4413      	add	r3, r2
 8013e86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013e88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e8a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013e8e:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 69);
 8013e90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013e94:	405a      	eors	r2, r3
 8013e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013e98:	405a      	eors	r2, r3
 8013e9a:	6979      	ldr	r1, [r7, #20]
 8013e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013e9e:	4059      	eors	r1, r3
 8013ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ea2:	4059      	eors	r1, r3
 8013ea4:	6a3b      	ldr	r3, [r7, #32]
 8013ea6:	404b      	eors	r3, r1
 8013ea8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013eac:	623b      	str	r3, [r7, #32]
 8013eae:	6a3b      	ldr	r3, [r7, #32]
 8013eb0:	441a      	add	r2, r3
 8013eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013eb4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013eb8:	441a      	add	r2, r3
 8013eba:	4b03      	ldr	r3, [pc, #12]	@ (8013ec8 <mg_sha1_transform+0x1158>)
 8013ebc:	4413      	add	r3, r2
 8013ebe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013ec0:	4413      	add	r3, r2
 8013ec2:	e003      	b.n	8013ecc <mg_sha1_transform+0x115c>
 8013ec4:	8f1bbcdc 	.word	0x8f1bbcdc
 8013ec8:	ca62c1d6 	.word	0xca62c1d6
 8013ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ed0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013ed4:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 70);
 8013ed6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013eda:	405a      	eors	r2, r3
 8013edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013ede:	405a      	eors	r2, r3
 8013ee0:	69b9      	ldr	r1, [r7, #24]
 8013ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013ee4:	4059      	eors	r1, r3
 8013ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ee8:	4059      	eors	r1, r3
 8013eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013eec:	404b      	eors	r3, r1
 8013eee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ef6:	441a      	add	r2, r3
 8013ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013efa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013efe:	441a      	add	r2, r3
 8013f00:	4ba7      	ldr	r3, [pc, #668]	@ (80141a0 <mg_sha1_transform+0x1430>)
 8013f02:	4413      	add	r3, r2
 8013f04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013f06:	4413      	add	r3, r2
 8013f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013f0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f0c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013f10:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 71);
 8013f12:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f16:	405a      	eors	r2, r3
 8013f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013f1a:	405a      	eors	r2, r3
 8013f1c:	69f9      	ldr	r1, [r7, #28]
 8013f1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013f20:	4059      	eors	r1, r3
 8013f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f24:	4059      	eors	r1, r3
 8013f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f28:	404b      	eors	r3, r1
 8013f2a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f32:	441a      	add	r2, r3
 8013f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f36:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013f3a:	441a      	add	r2, r3
 8013f3c:	4b98      	ldr	r3, [pc, #608]	@ (80141a0 <mg_sha1_transform+0x1430>)
 8013f3e:	4413      	add	r3, r2
 8013f40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013f42:	4413      	add	r3, r2
 8013f44:	653b      	str	r3, [r7, #80]	@ 0x50
 8013f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f48:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 72);
 8013f4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013f50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f52:	405a      	eors	r2, r3
 8013f54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013f56:	405a      	eors	r2, r3
 8013f58:	6a39      	ldr	r1, [r7, #32]
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	4059      	eors	r1, r3
 8013f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013f60:	4059      	eors	r1, r3
 8013f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f64:	404b      	eors	r3, r1
 8013f66:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f6e:	441a      	add	r2, r3
 8013f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013f72:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013f76:	441a      	add	r2, r3
 8013f78:	4b89      	ldr	r3, [pc, #548]	@ (80141a0 <mg_sha1_transform+0x1430>)
 8013f7a:	4413      	add	r3, r2
 8013f7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013f7e:	4413      	add	r3, r2
 8013f80:	657b      	str	r3, [r7, #84]	@ 0x54
 8013f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f84:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 73);
 8013f8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013f8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013f8e:	405a      	eors	r2, r3
 8013f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013f92:	405a      	eors	r2, r3
 8013f94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013f96:	693b      	ldr	r3, [r7, #16]
 8013f98:	4059      	eors	r1, r3
 8013f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f9c:	4059      	eors	r1, r3
 8013f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013fa0:	404b      	eors	r3, r1
 8013fa2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013fa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8013fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013faa:	441a      	add	r2, r3
 8013fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013fae:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013fb2:	441a      	add	r2, r3
 8013fb4:	4b7a      	ldr	r3, [pc, #488]	@ (80141a0 <mg_sha1_transform+0x1430>)
 8013fb6:	4413      	add	r3, r2
 8013fb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013fba:	4413      	add	r3, r2
 8013fbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fc0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8013fc4:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 74);
 8013fc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fca:	405a      	eors	r2, r3
 8013fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013fce:	405a      	eors	r2, r3
 8013fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013fd2:	697b      	ldr	r3, [r7, #20]
 8013fd4:	4059      	eors	r1, r3
 8013fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fd8:	4059      	eors	r1, r3
 8013fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fdc:	404b      	eors	r3, r1
 8013fde:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8013fe2:	637b      	str	r3, [r7, #52]	@ 0x34
 8013fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013fe6:	441a      	add	r2, r3
 8013fe8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013fea:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8013fee:	441a      	add	r2, r3
 8013ff0:	4b6b      	ldr	r3, [pc, #428]	@ (80141a0 <mg_sha1_transform+0x1430>)
 8013ff2:	4413      	add	r3, r2
 8013ff4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013ff6:	4413      	add	r3, r2
 8013ff8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013ffc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014000:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 75);
 8014002:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014006:	405a      	eors	r2, r3
 8014008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801400a:	405a      	eors	r2, r3
 801400c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801400e:	69bb      	ldr	r3, [r7, #24]
 8014010:	4059      	eors	r1, r3
 8014012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014014:	4059      	eors	r1, r3
 8014016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014018:	404b      	eors	r3, r1
 801401a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801401e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014022:	441a      	add	r2, r3
 8014024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014026:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801402a:	441a      	add	r2, r3
 801402c:	4b5c      	ldr	r3, [pc, #368]	@ (80141a0 <mg_sha1_transform+0x1430>)
 801402e:	4413      	add	r3, r2
 8014030:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014032:	4413      	add	r3, r2
 8014034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014038:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801403c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 76);
 801403e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014040:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014042:	405a      	eors	r2, r3
 8014044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014046:	405a      	eors	r2, r3
 8014048:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801404a:	69fb      	ldr	r3, [r7, #28]
 801404c:	4059      	eors	r1, r3
 801404e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014050:	4059      	eors	r1, r3
 8014052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014054:	404b      	eors	r3, r1
 8014056:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801405a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801405c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801405e:	441a      	add	r2, r3
 8014060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014062:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8014066:	441a      	add	r2, r3
 8014068:	4b4d      	ldr	r3, [pc, #308]	@ (80141a0 <mg_sha1_transform+0x1430>)
 801406a:	4413      	add	r3, r2
 801406c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801406e:	4413      	add	r3, r2
 8014070:	653b      	str	r3, [r7, #80]	@ 0x50
 8014072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014074:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8014078:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 77);
 801407a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801407c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801407e:	405a      	eors	r2, r3
 8014080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014082:	405a      	eors	r2, r3
 8014084:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8014086:	6a3b      	ldr	r3, [r7, #32]
 8014088:	4059      	eors	r1, r3
 801408a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801408c:	4059      	eors	r1, r3
 801408e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014090:	404b      	eors	r3, r1
 8014092:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8014096:	643b      	str	r3, [r7, #64]	@ 0x40
 8014098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801409a:	441a      	add	r2, r3
 801409c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801409e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80140a2:	441a      	add	r2, r3
 80140a4:	4b3e      	ldr	r3, [pc, #248]	@ (80141a0 <mg_sha1_transform+0x1430>)
 80140a6:	4413      	add	r3, r2
 80140a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80140aa:	4413      	add	r3, r2
 80140ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80140ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140b0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80140b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 78);
 80140b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80140b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140ba:	405a      	eors	r2, r3
 80140bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80140be:	405a      	eors	r2, r3
 80140c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80140c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80140c4:	4059      	eors	r1, r3
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	4059      	eors	r1, r3
 80140ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140cc:	404b      	eors	r3, r1
 80140ce:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80140d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80140d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80140d6:	441a      	add	r2, r3
 80140d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80140da:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80140de:	441a      	add	r2, r3
 80140e0:	4b2f      	ldr	r3, [pc, #188]	@ (80141a0 <mg_sha1_transform+0x1430>)
 80140e2:	4413      	add	r3, r2
 80140e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80140e6:	4413      	add	r3, r2
 80140e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80140ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140ec:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80140f0:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 79);
 80140f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80140f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80140f6:	405a      	eors	r2, r3
 80140f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80140fa:	405a      	eors	r2, r3
 80140fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80140fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014100:	4059      	eors	r1, r3
 8014102:	693b      	ldr	r3, [r7, #16]
 8014104:	4059      	eors	r1, r3
 8014106:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014108:	404b      	eors	r3, r1
 801410a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801410e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014112:	441a      	add	r2, r3
 8014114:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014116:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801411a:	441a      	add	r2, r3
 801411c:	4b20      	ldr	r3, [pc, #128]	@ (80141a0 <mg_sha1_transform+0x1430>)
 801411e:	4413      	add	r3, r2
 8014120:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8014122:	4413      	add	r3, r2
 8014124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8014126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014128:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801412c:	657b      	str	r3, [r7, #84]	@ 0x54
  state[0] += a;
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681a      	ldr	r2, [r3, #0]
 8014132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014134:	441a      	add	r2, r3
 8014136:	687b      	ldr	r3, [r7, #4]
 8014138:	601a      	str	r2, [r3, #0]
  state[1] += b;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	3304      	adds	r3, #4
 801413e:	6819      	ldr	r1, [r3, #0]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	3304      	adds	r3, #4
 8014144:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8014146:	440a      	add	r2, r1
 8014148:	601a      	str	r2, [r3, #0]
  state[2] += c;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	3308      	adds	r3, #8
 801414e:	6819      	ldr	r1, [r3, #0]
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	3308      	adds	r3, #8
 8014154:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014156:	440a      	add	r2, r1
 8014158:	601a      	str	r2, [r3, #0]
  state[3] += d;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	330c      	adds	r3, #12
 801415e:	6819      	ldr	r1, [r3, #0]
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	330c      	adds	r3, #12
 8014164:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014166:	440a      	add	r2, r1
 8014168:	601a      	str	r2, [r3, #0]
  state[4] += e;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	3310      	adds	r3, #16
 801416e:	6819      	ldr	r1, [r3, #0]
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	3310      	adds	r3, #16
 8014174:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014176:	440a      	add	r2, r1
 8014178:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 801417a:	f107 030c 	add.w	r3, r7, #12
 801417e:	2240      	movs	r2, #64	@ 0x40
 8014180:	2100      	movs	r1, #0
 8014182:	4618      	mov	r0, r3
 8014184:	f011 fb02 	bl	802578c <memset>
  a = b = c = d = e = 0;
 8014188:	2300      	movs	r3, #0
 801418a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801418c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801418e:	653b      	str	r3, [r7, #80]	@ 0x50
 8014190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014192:	657b      	str	r3, [r7, #84]	@ 0x54
 8014194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014196:	65bb      	str	r3, [r7, #88]	@ 0x58
 8014198:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801419a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801419c:	e002      	b.n	80141a4 <mg_sha1_transform+0x1434>
 801419e:	bf00      	nop
 80141a0:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 80141a4:	bf00      	nop
 80141a6:	3764      	adds	r7, #100	@ 0x64
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd90      	pop	{r4, r7, pc}

080141ac <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 80141ac:	b480      	push	{r7}
 80141ae:	b083      	sub	sp, #12
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	4a0d      	ldr	r2, [pc, #52]	@ (80141ec <mg_sha1_init+0x40>)
 80141b8:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	4a0c      	ldr	r2, [pc, #48]	@ (80141f0 <mg_sha1_init+0x44>)
 80141be:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	4a0c      	ldr	r2, [pc, #48]	@ (80141f4 <mg_sha1_init+0x48>)
 80141c4:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	4a0b      	ldr	r2, [pc, #44]	@ (80141f8 <mg_sha1_init+0x4c>)
 80141ca:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	4a0b      	ldr	r2, [pc, #44]	@ (80141fc <mg_sha1_init+0x50>)
 80141d0:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	2200      	movs	r2, #0
 80141d6:	619a      	str	r2, [r3, #24]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	699a      	ldr	r2, [r3, #24]
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	615a      	str	r2, [r3, #20]
}
 80141e0:	bf00      	nop
 80141e2:	370c      	adds	r7, #12
 80141e4:	46bd      	mov	sp, r7
 80141e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ea:	4770      	bx	lr
 80141ec:	67452301 	.word	0x67452301
 80141f0:	efcdab89 	.word	0xefcdab89
 80141f4:	98badcfe 	.word	0x98badcfe
 80141f8:	10325476 	.word	0x10325476
 80141fc:	c3d2e1f0 	.word	0xc3d2e1f0

08014200 <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 8014200:	b580      	push	{r7, lr}
 8014202:	b086      	sub	sp, #24
 8014204:	af00      	add	r7, sp, #0
 8014206:	60f8      	str	r0, [r7, #12]
 8014208:	60b9      	str	r1, [r7, #8]
 801420a:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	695b      	ldr	r3, [r3, #20]
 8014210:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	695a      	ldr	r2, [r3, #20]
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	00db      	lsls	r3, r3, #3
 801421a:	441a      	add	r2, r3
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	615a      	str	r2, [r3, #20]
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	695b      	ldr	r3, [r3, #20]
 8014224:	693a      	ldr	r2, [r7, #16]
 8014226:	429a      	cmp	r2, r3
 8014228:	d904      	bls.n	8014234 <mg_sha1_update+0x34>
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	699b      	ldr	r3, [r3, #24]
 801422e:	1c5a      	adds	r2, r3, #1
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	699a      	ldr	r2, [r3, #24]
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	0f5b      	lsrs	r3, r3, #29
 801423c:	441a      	add	r2, r3
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 8014242:	693b      	ldr	r3, [r7, #16]
 8014244:	08db      	lsrs	r3, r3, #3
 8014246:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801424a:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 801424c:	693a      	ldr	r2, [r7, #16]
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4413      	add	r3, r2
 8014252:	2b3f      	cmp	r3, #63	@ 0x3f
 8014254:	d926      	bls.n	80142a4 <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 8014256:	693b      	ldr	r3, [r7, #16]
 8014258:	3318      	adds	r3, #24
 801425a:	68fa      	ldr	r2, [r7, #12]
 801425c:	4413      	add	r3, r2
 801425e:	1d18      	adds	r0, r3, #4
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8014266:	617b      	str	r3, [r7, #20]
 8014268:	697a      	ldr	r2, [r7, #20]
 801426a:	68b9      	ldr	r1, [r7, #8]
 801426c:	f011 fbc3 	bl	80259f6 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8014270:	68fa      	ldr	r2, [r7, #12]
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	331c      	adds	r3, #28
 8014276:	4619      	mov	r1, r3
 8014278:	4610      	mov	r0, r2
 801427a:	f7fe fd79 	bl	8012d70 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 801427e:	e009      	b.n	8014294 <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 8014280:	68f8      	ldr	r0, [r7, #12]
 8014282:	68ba      	ldr	r2, [r7, #8]
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	4413      	add	r3, r2
 8014288:	4619      	mov	r1, r3
 801428a:	f7fe fd71 	bl	8012d70 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 801428e:	697b      	ldr	r3, [r7, #20]
 8014290:	3340      	adds	r3, #64	@ 0x40
 8014292:	617b      	str	r3, [r7, #20]
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	333f      	adds	r3, #63	@ 0x3f
 8014298:	687a      	ldr	r2, [r7, #4]
 801429a:	429a      	cmp	r2, r3
 801429c:	d8f0      	bhi.n	8014280 <mg_sha1_update+0x80>
    }
    j = 0;
 801429e:	2300      	movs	r3, #0
 80142a0:	613b      	str	r3, [r7, #16]
 80142a2:	e001      	b.n	80142a8 <mg_sha1_update+0xa8>
  } else
    i = 0;
 80142a4:	2300      	movs	r3, #0
 80142a6:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	3318      	adds	r3, #24
 80142ac:	68fa      	ldr	r2, [r7, #12]
 80142ae:	4413      	add	r3, r2
 80142b0:	1d18      	adds	r0, r3, #4
 80142b2:	68ba      	ldr	r2, [r7, #8]
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	18d1      	adds	r1, r2, r3
 80142b8:	687a      	ldr	r2, [r7, #4]
 80142ba:	697b      	ldr	r3, [r7, #20]
 80142bc:	1ad3      	subs	r3, r2, r3
 80142be:	461a      	mov	r2, r3
 80142c0:	f011 fb99 	bl	80259f6 <memcpy>
}
 80142c4:	bf00      	nop
 80142c6:	3718      	adds	r7, #24
 80142c8:	46bd      	mov	sp, r7
 80142ca:	bd80      	pop	{r7, pc}

080142cc <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b086      	sub	sp, #24
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
 80142d4:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 80142d6:	2300      	movs	r3, #0
 80142d8:	617b      	str	r3, [r7, #20]
 80142da:	e01b      	b.n	8014314 <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80142dc:	697b      	ldr	r3, [r7, #20]
 80142de:	2b03      	cmp	r3, #3
 80142e0:	bf94      	ite	ls
 80142e2:	2301      	movls	r3, #1
 80142e4:	2300      	movhi	r3, #0
 80142e6:	b2db      	uxtb	r3, r3
 80142e8:	683a      	ldr	r2, [r7, #0]
 80142ea:	3304      	adds	r3, #4
 80142ec:	009b      	lsls	r3, r3, #2
 80142ee:	4413      	add	r3, r2
 80142f0:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 80142f2:	697b      	ldr	r3, [r7, #20]
 80142f4:	43db      	mvns	r3, r3
 80142f6:	f003 0303 	and.w	r3, r3, #3
 80142fa:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 80142fc:	fa22 f303 	lsr.w	r3, r2, r3
 8014300:	b2d9      	uxtb	r1, r3
 8014302:	f107 020c 	add.w	r2, r7, #12
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	4413      	add	r3, r2
 801430a:	460a      	mov	r2, r1
 801430c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	3301      	adds	r3, #1
 8014312:	617b      	str	r3, [r7, #20]
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	2b07      	cmp	r3, #7
 8014318:	d9e0      	bls.n	80142dc <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 801431a:	2380      	movs	r3, #128	@ 0x80
 801431c:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 801431e:	f107 030b 	add.w	r3, r7, #11
 8014322:	2201      	movs	r2, #1
 8014324:	4619      	mov	r1, r3
 8014326:	6838      	ldr	r0, [r7, #0]
 8014328:	f7ff ff6a 	bl	8014200 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 801432c:	e008      	b.n	8014340 <mg_sha1_final+0x74>
    c = 0000;
 801432e:	2300      	movs	r3, #0
 8014330:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 8014332:	f107 030b 	add.w	r3, r7, #11
 8014336:	2201      	movs	r2, #1
 8014338:	4619      	mov	r1, r3
 801433a:	6838      	ldr	r0, [r7, #0]
 801433c:	f7ff ff60 	bl	8014200 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	695b      	ldr	r3, [r3, #20]
 8014344:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 8014348:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 801434c:	d1ef      	bne.n	801432e <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 801434e:	f107 030c 	add.w	r3, r7, #12
 8014352:	2208      	movs	r2, #8
 8014354:	4619      	mov	r1, r3
 8014356:	6838      	ldr	r0, [r7, #0]
 8014358:	f7ff ff52 	bl	8014200 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 801435c:	2300      	movs	r3, #0
 801435e:	617b      	str	r3, [r7, #20]
 8014360:	e013      	b.n	801438a <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	089a      	lsrs	r2, r3, #2
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	43db      	mvns	r3, r3
 8014370:	f003 0303 	and.w	r3, r3, #3
 8014374:	00db      	lsls	r3, r3, #3
 8014376:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 801437a:	687a      	ldr	r2, [r7, #4]
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8014380:	b2ca      	uxtb	r2, r1
    digest[i] =
 8014382:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	3301      	adds	r3, #1
 8014388:	617b      	str	r3, [r7, #20]
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	2b13      	cmp	r3, #19
 801438e:	d9e8      	bls.n	8014362 <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 8014390:	225c      	movs	r2, #92	@ 0x5c
 8014392:	2100      	movs	r1, #0
 8014394:	6838      	ldr	r0, [r7, #0]
 8014396:	f011 f9f9 	bl	802578c <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 801439a:	f107 030c 	add.w	r3, r7, #12
 801439e:	2208      	movs	r2, #8
 80143a0:	2100      	movs	r1, #0
 80143a2:	4618      	mov	r0, r3
 80143a4:	f011 f9f2 	bl	802578c <memset>
}
 80143a8:	bf00      	nop
 80143aa:	3718      	adds	r7, #24
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 80143b0:	b480      	push	{r7}
 80143b2:	b083      	sub	sp, #12
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2200      	movs	r2, #0
 80143bc:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 80143be:	6879      	ldr	r1, [r7, #4]
 80143c0:	f04f 0200 	mov.w	r2, #0
 80143c4:	f04f 0300 	mov.w	r3, #0
 80143c8:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	4a0e      	ldr	r2, [pc, #56]	@ (8014408 <mg_sha256_init+0x58>)
 80143d0:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	4a0d      	ldr	r2, [pc, #52]	@ (801440c <mg_sha256_init+0x5c>)
 80143d6:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	4a0d      	ldr	r2, [pc, #52]	@ (8014410 <mg_sha256_init+0x60>)
 80143dc:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	4a0c      	ldr	r2, [pc, #48]	@ (8014414 <mg_sha256_init+0x64>)
 80143e2:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	4a0c      	ldr	r2, [pc, #48]	@ (8014418 <mg_sha256_init+0x68>)
 80143e8:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	4a0b      	ldr	r2, [pc, #44]	@ (801441c <mg_sha256_init+0x6c>)
 80143ee:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	4a0b      	ldr	r2, [pc, #44]	@ (8014420 <mg_sha256_init+0x70>)
 80143f4:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	4a0a      	ldr	r2, [pc, #40]	@ (8014424 <mg_sha256_init+0x74>)
 80143fa:	61da      	str	r2, [r3, #28]
}
 80143fc:	bf00      	nop
 80143fe:	370c      	adds	r7, #12
 8014400:	46bd      	mov	sp, r7
 8014402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014406:	4770      	bx	lr
 8014408:	6a09e667 	.word	0x6a09e667
 801440c:	bb67ae85 	.word	0xbb67ae85
 8014410:	3c6ef372 	.word	0x3c6ef372
 8014414:	a54ff53a 	.word	0xa54ff53a
 8014418:	510e527f 	.word	0x510e527f
 801441c:	9b05688c 	.word	0x9b05688c
 8014420:	1f83d9ab 	.word	0x1f83d9ab
 8014424:	5be0cd19 	.word	0x5be0cd19

08014428 <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 8014428:	b480      	push	{r7}
 801442a:	b0cf      	sub	sp, #316	@ 0x13c
 801442c:	af00      	add	r7, sp, #0
 801442e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014432:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014436:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 8014438:	2300      	movs	r3, #0
 801443a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801443e:	2300      	movs	r3, #0
 8014440:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8014444:	e043      	b.n	80144ce <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8014446:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801444a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014454:	4413      	add	r3, r2
 8014456:	332c      	adds	r3, #44	@ 0x2c
 8014458:	781b      	ldrb	r3, [r3, #0]
 801445a:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 801445c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014460:	3301      	adds	r3, #1
 8014462:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014466:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 801446a:	6809      	ldr	r1, [r1, #0]
 801446c:	440b      	add	r3, r1
 801446e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8014472:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8014474:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 8014476:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801447a:	3302      	adds	r3, #2
 801447c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8014480:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8014484:	6809      	ldr	r1, [r1, #0]
 8014486:	440b      	add	r3, r1
 8014488:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801448c:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 801448e:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 8014490:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8014494:	3203      	adds	r2, #3
 8014496:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801449a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 801449e:	6809      	ldr	r1, [r1, #0]
 80144a0:	440a      	add	r2, r1
 80144a2:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 80144a6:	ea43 0102 	orr.w	r1, r3, r2
 80144aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144ae:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80144b2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80144b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 80144ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80144be:	3301      	adds	r3, #1
 80144c0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80144c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80144c8:	3304      	adds	r3, #4
 80144ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80144ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80144d2:	2b0f      	cmp	r3, #15
 80144d4:	ddb7      	ble.n	8014446 <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 80144d6:	e069      	b.n	80145ac <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 80144d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80144dc:	1e9a      	subs	r2, r3, #2
 80144de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80144e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144ea:	ea4f 4273 	mov.w	r2, r3, ror #17
 80144ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80144f2:	1e99      	subs	r1, r3, #2
 80144f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80144f8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80144fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014500:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8014504:	405a      	eors	r2, r3
 8014506:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801450a:	1e99      	subs	r1, r3, #2
 801450c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014510:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014514:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014518:	0a9b      	lsrs	r3, r3, #10
 801451a:	405a      	eors	r2, r3
 801451c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014520:	1fd9      	subs	r1, r3, #7
 8014522:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014526:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801452a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801452e:	441a      	add	r2, r3
 8014530:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014534:	f1a3 010f 	sub.w	r1, r3, #15
 8014538:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801453c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014540:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014544:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8014548:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801454c:	f1a3 000f 	sub.w	r0, r3, #15
 8014550:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014554:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014558:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801455c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8014560:	4059      	eors	r1, r3
 8014562:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014566:	f1a3 000f 	sub.w	r0, r3, #15
 801456a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801456e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8014572:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8014576:	08db      	lsrs	r3, r3, #3
 8014578:	404b      	eors	r3, r1
 801457a:	441a      	add	r2, r3
 801457c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014580:	f1a3 0110 	sub.w	r1, r3, #16
 8014584:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014588:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801458c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014590:	18d1      	adds	r1, r2, r3
 8014592:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014596:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801459a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801459e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 80145a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145a6:	3301      	adds	r3, #1
 80145a8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80145ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80145b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80145b2:	dd91      	ble.n	80144d8 <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 80145b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 80145c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 80145d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145d8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	689b      	ldr	r3, [r3, #8]
 80145e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 80145e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145e8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	68db      	ldr	r3, [r3, #12]
 80145f0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 80145f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80145f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	691b      	ldr	r3, [r3, #16]
 8014600:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 8014604:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014608:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	695b      	ldr	r3, [r3, #20]
 8014610:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 8014614:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014618:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	699b      	ldr	r3, [r3, #24]
 8014620:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 8014624:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014628:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	69db      	ldr	r3, [r3, #28]
 8014630:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 8014634:	2300      	movs	r3, #0
 8014636:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801463a:	e078      	b.n	801472e <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 801463c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014640:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8014644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014648:	ea4f 23f3 	mov.w	r3, r3, ror #11
 801464c:	405a      	eors	r2, r3
 801464e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8014652:	ea4f 6373 	mov.w	r3, r3, ror #25
 8014656:	405a      	eors	r2, r3
 8014658:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801465c:	441a      	add	r2, r3
 801465e:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8014662:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8014666:	4019      	ands	r1, r3
 8014668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801466c:	43d8      	mvns	r0, r3
 801466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8014672:	4003      	ands	r3, r0
 8014674:	404b      	eors	r3, r1
 8014676:	441a      	add	r2, r3
 8014678:	496e      	ldr	r1, [pc, #440]	@ (8014834 <mg_sha256_chunk+0x40c>)
 801467a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801467e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014682:	441a      	add	r2, r3
 8014684:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014688:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801468c:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8014690:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014694:	4413      	add	r3, r2
 8014696:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 801469a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801469e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 80146a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80146a6:	ea4f 3373 	mov.w	r3, r3, ror #13
 80146aa:	405a      	eors	r2, r3
 80146ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80146b0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 80146b4:	405a      	eors	r2, r3
 80146b6:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 80146ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80146be:	4059      	eors	r1, r3
 80146c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80146c4:	4019      	ands	r1, r3
 80146c6:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 80146ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80146ce:	4003      	ands	r3, r0
 80146d0:	404b      	eors	r3, r1
 80146d2:	4413      	add	r3, r2
 80146d4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 80146d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80146dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 80146e0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80146e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 80146e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80146ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 80146f0:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80146f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80146f8:	4413      	add	r3, r2
 80146fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 80146fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014702:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 8014706:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801470a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 801470e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014712:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 8014716:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 801471a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801471e:	4413      	add	r3, r2
 8014720:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 8014724:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014728:	3301      	adds	r3, #1
 801472a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801472e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014732:	2b3f      	cmp	r3, #63	@ 0x3f
 8014734:	dd82      	ble.n	801463c <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 8014736:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801473a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	681a      	ldr	r2, [r3, #0]
 8014742:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014746:	441a      	add	r2, r3
 8014748:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801474c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 8014754:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014758:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	685a      	ldr	r2, [r3, #4]
 8014760:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014764:	441a      	add	r2, r3
 8014766:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801476a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 8014772:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014776:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	689a      	ldr	r2, [r3, #8]
 801477e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8014782:	441a      	add	r2, r3
 8014784:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014788:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 8014790:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014794:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	68da      	ldr	r2, [r3, #12]
 801479c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80147a0:	441a      	add	r2, r3
 80147a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147a6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 80147ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	691a      	ldr	r2, [r3, #16]
 80147ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80147be:	441a      	add	r2, r3
 80147c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 80147cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	695a      	ldr	r2, [r3, #20]
 80147d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80147dc:	441a      	add	r2, r3
 80147de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147e2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 80147ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80147ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	699a      	ldr	r2, [r3, #24]
 80147f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80147fa:	441a      	add	r2, r3
 80147fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014800:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 8014808:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801480c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	69da      	ldr	r2, [r3, #28]
 8014814:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8014818:	441a      	add	r2, r3
 801481a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801481e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	61da      	str	r2, [r3, #28]
}
 8014826:	bf00      	nop
 8014828:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 801482c:	46bd      	mov	sp, r7
 801482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014832:	4770      	bx	lr
 8014834:	08029bf4 	.word	0x08029bf4

08014838 <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 8014838:	b5b0      	push	{r4, r5, r7, lr}
 801483a:	b086      	sub	sp, #24
 801483c:	af00      	add	r7, sp, #0
 801483e:	60f8      	str	r0, [r7, #12]
 8014840:	60b9      	str	r1, [r7, #8]
 8014842:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 8014844:	2300      	movs	r3, #0
 8014846:	617b      	str	r3, [r7, #20]
 8014848:	e026      	b.n	8014898 <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 801484a:	68ba      	ldr	r2, [r7, #8]
 801484c:	697b      	ldr	r3, [r7, #20]
 801484e:	441a      	add	r2, r3
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014854:	7811      	ldrb	r1, [r2, #0]
 8014856:	68fa      	ldr	r2, [r7, #12]
 8014858:	4413      	add	r3, r2
 801485a:	460a      	mov	r2, r1
 801485c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014864:	1c5a      	adds	r2, r3, #1
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	629a      	str	r2, [r3, #40]	@ 0x28
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801486e:	2b40      	cmp	r3, #64	@ 0x40
 8014870:	d10f      	bne.n	8014892 <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 8014872:	68f8      	ldr	r0, [r7, #12]
 8014874:	f7ff fdd8 	bl	8014428 <mg_sha256_chunk>
      ctx->bits += 512;
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801487e:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 8014882:	f143 0500 	adc.w	r5, r3, #0
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	2200      	movs	r2, #0
 8014890:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 8014892:	697b      	ldr	r3, [r7, #20]
 8014894:	3301      	adds	r3, #1
 8014896:	617b      	str	r3, [r7, #20]
 8014898:	697a      	ldr	r2, [r7, #20]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	429a      	cmp	r2, r3
 801489e:	d3d4      	bcc.n	801484a <mg_sha256_update+0x12>
    }
  }
}
 80148a0:	bf00      	nop
 80148a2:	bf00      	nop
 80148a4:	3718      	adds	r7, #24
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bdb0      	pop	{r4, r5, r7, pc}

080148aa <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 80148aa:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80148ae:	b084      	sub	sp, #16
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	6078      	str	r0, [r7, #4]
 80148b4:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148ba:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2b37      	cmp	r3, #55	@ 0x37
 80148c0:	d814      	bhi.n	80148ec <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	1c5a      	adds	r2, r3, #1
 80148c6:	60fa      	str	r2, [r7, #12]
 80148c8:	683a      	ldr	r2, [r7, #0]
 80148ca:	4413      	add	r3, r2
 80148cc:	2280      	movs	r2, #128	@ 0x80
 80148ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 80148d2:	e007      	b.n	80148e4 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	1c5a      	adds	r2, r3, #1
 80148d8:	60fa      	str	r2, [r7, #12]
 80148da:	683a      	ldr	r2, [r7, #0]
 80148dc:	4413      	add	r3, r2
 80148de:	2200      	movs	r2, #0
 80148e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2b37      	cmp	r3, #55	@ 0x37
 80148e8:	d9f4      	bls.n	80148d4 <mg_sha256_final+0x2a>
 80148ea:	e01d      	b.n	8014928 <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	1c5a      	adds	r2, r3, #1
 80148f0:	60fa      	str	r2, [r7, #12]
 80148f2:	683a      	ldr	r2, [r7, #0]
 80148f4:	4413      	add	r3, r2
 80148f6:	2280      	movs	r2, #128	@ 0x80
 80148f8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 80148fc:	e007      	b.n	801490e <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	1c5a      	adds	r2, r3, #1
 8014902:	60fa      	str	r2, [r7, #12]
 8014904:	683a      	ldr	r2, [r7, #0]
 8014906:	4413      	add	r3, r2
 8014908:	2200      	movs	r2, #0
 801490a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	2b3f      	cmp	r3, #63	@ 0x3f
 8014912:	d9f4      	bls.n	80148fe <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 8014914:	6838      	ldr	r0, [r7, #0]
 8014916:	f7ff fd87 	bl	8014428 <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 801491a:	683b      	ldr	r3, [r7, #0]
 801491c:	332c      	adds	r3, #44	@ 0x2c
 801491e:	2238      	movs	r2, #56	@ 0x38
 8014920:	2100      	movs	r1, #0
 8014922:	4618      	mov	r0, r3
 8014924:	f010 ff32 	bl	802578c <memset>
  }

  ctx->bits += ctx->len * 8;
 8014928:	683b      	ldr	r3, [r7, #0]
 801492a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801492e:	6839      	ldr	r1, [r7, #0]
 8014930:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8014932:	00c9      	lsls	r1, r1, #3
 8014934:	2000      	movs	r0, #0
 8014936:	460c      	mov	r4, r1
 8014938:	4605      	mov	r5, r0
 801493a:	eb12 0804 	adds.w	r8, r2, r4
 801493e:	eb43 0905 	adc.w	r9, r3, r5
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801494e:	b2d2      	uxtb	r2, r2
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801495c:	f04f 0200 	mov.w	r2, #0
 8014960:	f04f 0300 	mov.w	r3, #0
 8014964:	0a02      	lsrs	r2, r0, #8
 8014966:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801496a:	0a0b      	lsrs	r3, r1, #8
 801496c:	b2d2      	uxtb	r2, r2
 801496e:	683b      	ldr	r3, [r7, #0]
 8014970:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 8014974:	683b      	ldr	r3, [r7, #0]
 8014976:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801497a:	f04f 0200 	mov.w	r2, #0
 801497e:	f04f 0300 	mov.w	r3, #0
 8014982:	0c02      	lsrs	r2, r0, #16
 8014984:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8014988:	0c0b      	lsrs	r3, r1, #16
 801498a:	b2d2      	uxtb	r2, r2
 801498c:	683b      	ldr	r3, [r7, #0]
 801498e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8014998:	f04f 0200 	mov.w	r2, #0
 801499c:	f04f 0300 	mov.w	r3, #0
 80149a0:	0e02      	lsrs	r2, r0, #24
 80149a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80149a6:	0e0b      	lsrs	r3, r1, #24
 80149a8:	b2d2      	uxtb	r2, r2
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80149b6:	f04f 0200 	mov.w	r2, #0
 80149ba:	f04f 0300 	mov.w	r3, #0
 80149be:	000a      	movs	r2, r1
 80149c0:	2300      	movs	r3, #0
 80149c2:	b2d2      	uxtb	r2, r2
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 80149ca:	683b      	ldr	r3, [r7, #0]
 80149cc:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80149d0:	f04f 0200 	mov.w	r2, #0
 80149d4:	f04f 0300 	mov.w	r3, #0
 80149d8:	0a0a      	lsrs	r2, r1, #8
 80149da:	2300      	movs	r3, #0
 80149dc:	b2d2      	uxtb	r2, r2
 80149de:	683b      	ldr	r3, [r7, #0]
 80149e0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80149ea:	f04f 0200 	mov.w	r2, #0
 80149ee:	f04f 0300 	mov.w	r3, #0
 80149f2:	0c0a      	lsrs	r2, r1, #16
 80149f4:	2300      	movs	r3, #0
 80149f6:	b2d2      	uxtb	r2, r2
 80149f8:	683b      	ldr	r3, [r7, #0]
 80149fa:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8014a04:	f04f 0200 	mov.w	r2, #0
 8014a08:	f04f 0300 	mov.w	r3, #0
 8014a0c:	0e0a      	lsrs	r2, r1, #24
 8014a0e:	2300      	movs	r3, #0
 8014a10:	b2d2      	uxtb	r2, r2
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 8014a18:	6838      	ldr	r0, [r7, #0]
 8014a1a:	f7ff fd05 	bl	8014428 <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 8014a1e:	2300      	movs	r3, #0
 8014a20:	60fb      	str	r3, [r7, #12]
 8014a22:	e071      	b.n	8014b08 <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	681a      	ldr	r2, [r3, #0]
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	f1c3 0303 	rsb	r3, r3, #3
 8014a2e:	00db      	lsls	r3, r3, #3
 8014a30:	fa22 f103 	lsr.w	r1, r2, r3
 8014a34:	687a      	ldr	r2, [r7, #4]
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	4413      	add	r3, r2
 8014a3a:	b2ca      	uxtb	r2, r1
 8014a3c:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	685a      	ldr	r2, [r3, #4]
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	f1c3 0303 	rsb	r3, r3, #3
 8014a48:	00db      	lsls	r3, r3, #3
 8014a4a:	fa22 f103 	lsr.w	r1, r2, r3
 8014a4e:	68fb      	ldr	r3, [r7, #12]
 8014a50:	3304      	adds	r3, #4
 8014a52:	687a      	ldr	r2, [r7, #4]
 8014a54:	4413      	add	r3, r2
 8014a56:	b2ca      	uxtb	r2, r1
 8014a58:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	689a      	ldr	r2, [r3, #8]
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	f1c3 0303 	rsb	r3, r3, #3
 8014a64:	00db      	lsls	r3, r3, #3
 8014a66:	fa22 f103 	lsr.w	r1, r2, r3
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	3308      	adds	r3, #8
 8014a6e:	687a      	ldr	r2, [r7, #4]
 8014a70:	4413      	add	r3, r2
 8014a72:	b2ca      	uxtb	r2, r1
 8014a74:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	68da      	ldr	r2, [r3, #12]
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	f1c3 0303 	rsb	r3, r3, #3
 8014a80:	00db      	lsls	r3, r3, #3
 8014a82:	fa22 f103 	lsr.w	r1, r2, r3
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	330c      	adds	r3, #12
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	b2ca      	uxtb	r2, r1
 8014a90:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	691a      	ldr	r2, [r3, #16]
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	f1c3 0303 	rsb	r3, r3, #3
 8014a9c:	00db      	lsls	r3, r3, #3
 8014a9e:	fa22 f103 	lsr.w	r1, r2, r3
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	3310      	adds	r3, #16
 8014aa6:	687a      	ldr	r2, [r7, #4]
 8014aa8:	4413      	add	r3, r2
 8014aaa:	b2ca      	uxtb	r2, r1
 8014aac:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	695a      	ldr	r2, [r3, #20]
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	f1c3 0303 	rsb	r3, r3, #3
 8014ab8:	00db      	lsls	r3, r3, #3
 8014aba:	fa22 f103 	lsr.w	r1, r2, r3
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	3314      	adds	r3, #20
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	b2ca      	uxtb	r2, r1
 8014ac8:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	699a      	ldr	r2, [r3, #24]
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	f1c3 0303 	rsb	r3, r3, #3
 8014ad4:	00db      	lsls	r3, r3, #3
 8014ad6:	fa22 f103 	lsr.w	r1, r2, r3
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	3318      	adds	r3, #24
 8014ade:	687a      	ldr	r2, [r7, #4]
 8014ae0:	4413      	add	r3, r2
 8014ae2:	b2ca      	uxtb	r2, r1
 8014ae4:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	69da      	ldr	r2, [r3, #28]
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	f1c3 0303 	rsb	r3, r3, #3
 8014af0:	00db      	lsls	r3, r3, #3
 8014af2:	fa22 f103 	lsr.w	r1, r2, r3
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	331c      	adds	r3, #28
 8014afa:	687a      	ldr	r2, [r7, #4]
 8014afc:	4413      	add	r3, r2
 8014afe:	b2ca      	uxtb	r2, r1
 8014b00:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	3301      	adds	r3, #1
 8014b06:	60fb      	str	r3, [r7, #12]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2b03      	cmp	r3, #3
 8014b0c:	d98a      	bls.n	8014a24 <mg_sha256_final+0x17a>
  }
}
 8014b0e:	bf00      	nop
 8014b10:	bf00      	nop
 8014b12:	3710      	adds	r7, #16
 8014b14:	46bd      	mov	sp, r7
 8014b16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08014b1a <mg_sha256>:

void mg_sha256(uint8_t dst[32], uint8_t *data, size_t datasz) {
 8014b1a:	b580      	push	{r7, lr}
 8014b1c:	b0a0      	sub	sp, #128	@ 0x80
 8014b1e:	af00      	add	r7, sp, #0
 8014b20:	60f8      	str	r0, [r7, #12]
 8014b22:	60b9      	str	r1, [r7, #8]
 8014b24:	607a      	str	r2, [r7, #4]
  mg_sha256_ctx ctx;
  mg_sha256_init(&ctx);
 8014b26:	f107 0310 	add.w	r3, r7, #16
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7ff fc40 	bl	80143b0 <mg_sha256_init>
  mg_sha256_update(&ctx, data, datasz);
 8014b30:	f107 0310 	add.w	r3, r7, #16
 8014b34:	687a      	ldr	r2, [r7, #4]
 8014b36:	68b9      	ldr	r1, [r7, #8]
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7ff fe7d 	bl	8014838 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8014b3e:	f107 0310 	add.w	r3, r7, #16
 8014b42:	4619      	mov	r1, r3
 8014b44:	68f8      	ldr	r0, [r7, #12]
 8014b46:	f7ff feb0 	bl	80148aa <mg_sha256_final>
}
 8014b4a:	bf00      	nop
 8014b4c:	3780      	adds	r7, #128	@ 0x80
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}

08014b52 <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 8014b52:	b590      	push	{r4, r7, lr}
 8014b54:	b0d3      	sub	sp, #332	@ 0x14c
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8014b5c:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8014b60:	6020      	str	r0, [r4, #0]
 8014b62:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8014b66:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8014b6a:	6001      	str	r1, [r0, #0]
 8014b6c:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8014b70:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8014b74:	600a      	str	r2, [r1, #0]
 8014b76:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8014b7a:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8014b7e:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 8014b80:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8014b84:	2240      	movs	r2, #64	@ 0x40
 8014b86:	2100      	movs	r1, #0
 8014b88:	4618      	mov	r0, r3
 8014b8a:	f010 fdff 	bl	802578c <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 8014b8e:	f107 0310 	add.w	r3, r7, #16
 8014b92:	2240      	movs	r2, #64	@ 0x40
 8014b94:	2136      	movs	r1, #54	@ 0x36
 8014b96:	4618      	mov	r0, r3
 8014b98:	f010 fdf8 	bl	802578c <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 8014b9c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8014ba0:	2240      	movs	r2, #64	@ 0x40
 8014ba2:	215c      	movs	r1, #92	@ 0x5c
 8014ba4:	4618      	mov	r0, r3
 8014ba6:	f010 fdf1 	bl	802578c <memset>
  if (keysz < 64) {
 8014baa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014bae:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8014bb6:	d815      	bhi.n	8014be4 <mg_hmac_sha256+0x92>
    if (keysz > 0) memmove(k, key, keysz);
 8014bb8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014bbc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d029      	beq.n	8014c1a <mg_hmac_sha256+0xc8>
 8014bc6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014bca:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8014bce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014bd2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014bd6:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8014bda:	6812      	ldr	r2, [r2, #0]
 8014bdc:	6819      	ldr	r1, [r3, #0]
 8014bde:	f010 fdbb 	bl	8025758 <memmove>
 8014be2:	e01a      	b.n	8014c1a <mg_hmac_sha256+0xc8>
  } else {
    mg_sha256_init(&ctx);
 8014be4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7ff fbe1 	bl	80143b0 <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 8014bee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014bf2:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8014bf6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014bfa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8014bfe:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8014c02:	6812      	ldr	r2, [r2, #0]
 8014c04:	6819      	ldr	r1, [r3, #0]
 8014c06:	f7ff fe17 	bl	8014838 <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 8014c0a:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8014c0e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8014c12:	4611      	mov	r1, r2
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7ff fe48 	bl	80148aa <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8014c20:	e032      	b.n	8014c88 <mg_hmac_sha256+0x136>
    i_pad[i] ^= k[i];
 8014c22:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014c26:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8014c2a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014c2e:	4413      	add	r3, r2
 8014c30:	781a      	ldrb	r2, [r3, #0]
 8014c32:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8014c36:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014c3a:	440b      	add	r3, r1
 8014c3c:	781b      	ldrb	r3, [r3, #0]
 8014c3e:	4053      	eors	r3, r2
 8014c40:	b2d9      	uxtb	r1, r3
 8014c42:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014c46:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8014c4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014c4e:	4413      	add	r3, r2
 8014c50:	460a      	mov	r2, r1
 8014c52:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 8014c54:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8014c58:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014c5c:	4413      	add	r3, r2
 8014c5e:	781a      	ldrb	r2, [r3, #0]
 8014c60:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8014c64:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014c68:	440b      	add	r3, r1
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	4053      	eors	r3, r2
 8014c6e:	b2d9      	uxtb	r1, r3
 8014c70:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8014c74:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014c78:	4413      	add	r3, r2
 8014c7a:	460a      	mov	r2, r1
 8014c7c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 8014c7e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014c82:	3301      	adds	r3, #1
 8014c84:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8014c88:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8014c8c:	2b3f      	cmp	r3, #63	@ 0x3f
 8014c8e:	d9c8      	bls.n	8014c22 <mg_hmac_sha256+0xd0>
  }
  mg_sha256_init(&ctx);
 8014c90:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7ff fb8b 	bl	80143b0 <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 8014c9a:	f107 0110 	add.w	r1, r7, #16
 8014c9e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014ca2:	2240      	movs	r2, #64	@ 0x40
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7ff fdc7 	bl	8014838 <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 8014caa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014cae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8014cb2:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8014cb6:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8014cba:	6819      	ldr	r1, [r3, #0]
 8014cbc:	f7ff fdbc 	bl	8014838 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8014cc0:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8014cc4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014cc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014ccc:	4611      	mov	r1, r2
 8014cce:	6818      	ldr	r0, [r3, #0]
 8014cd0:	f7ff fdeb 	bl	80148aa <mg_sha256_final>
  mg_sha256_init(&ctx);
 8014cd4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014cd8:	4618      	mov	r0, r3
 8014cda:	f7ff fb69 	bl	80143b0 <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 8014cde:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8014ce2:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8014ce6:	2240      	movs	r2, #64	@ 0x40
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f7ff fda5 	bl	8014838 <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 8014cee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014cf2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014cf6:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8014cfa:	2220      	movs	r2, #32
 8014cfc:	6819      	ldr	r1, [r3, #0]
 8014cfe:	f7ff fd9b 	bl	8014838 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8014d02:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8014d06:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8014d0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8014d0e:	4611      	mov	r1, r2
 8014d10:	6818      	ldr	r0, [r3, #0]
 8014d12:	f7ff fdca 	bl	80148aa <mg_sha256_final>
}
 8014d16:	bf00      	nop
 8014d18:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	bd90      	pop	{r4, r7, pc}

08014d20 <mg_sha384_transform>:
    0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,
    0x5fcb6fab3ad6faec, 0x6c44198c4a475817};

static void mg_sha384_transform(mg_sha384_ctx *ctx, const uint8_t data[]) {
 8014d20:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014d24:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014d2e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8014d32:	6018      	str	r0, [r3, #0]
 8014d34:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014d38:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014d3c:	6019      	str	r1, [r3, #0]
  uint64_t m[80];
  uint64_t a, b, c, d, e, f, g, h;
  int i, j;

  for (i = 0, j = 0; i < 16; ++i, j += 8)
 8014d3e:	2300      	movs	r3, #0
 8014d40:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8014d44:	2300      	movs	r3, #0
 8014d46:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8014d4a:	e113      	b.n	8014f74 <mg_sha384_transform+0x254>
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8014d4c:	f8d7 2460 	ldr.w	r2, [r7, #1120]	@ 0x460
 8014d50:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014d54:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	781b      	ldrb	r3, [r3, #0]
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	2200      	movs	r2, #0
 8014d62:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8014d66:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8014d6a:	f04f 0000 	mov.w	r0, #0
 8014d6e:	f04f 0100 	mov.w	r1, #0
 8014d72:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8014d76:	0619      	lsls	r1, r3, #24
 8014d78:	2000      	movs	r0, #0
 8014d7a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014d7e:	1c5a      	adds	r2, r3, #1
 8014d80:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014d84:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	b2db      	uxtb	r3, r3
 8014d90:	2200      	movs	r2, #0
 8014d92:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8014d96:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8014d9a:	f04f 0200 	mov.w	r2, #0
 8014d9e:	f04f 0300 	mov.w	r3, #0
 8014da2:	f8d7 6190 	ldr.w	r6, [r7, #400]	@ 0x190
 8014da6:	0433      	lsls	r3, r6, #16
 8014da8:	2200      	movs	r2, #0
 8014daa:	ea40 0602 	orr.w	r6, r0, r2
 8014dae:	f8c7 61b0 	str.w	r6, [r7, #432]	@ 0x1b0
 8014db2:	430b      	orrs	r3, r1
 8014db4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8014db8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014dbc:	1c9a      	adds	r2, r3, #2
 8014dbe:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014dc2:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	4413      	add	r3, r2
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	b2db      	uxtb	r3, r3
 8014dce:	2200      	movs	r2, #0
 8014dd0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8014dd4:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8014dd8:	f04f 0200 	mov.w	r2, #0
 8014ddc:	f04f 0300 	mov.w	r3, #0
 8014de0:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8014de4:	020b      	lsls	r3, r1, #8
 8014de6:	2200      	movs	r2, #0
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8014de8:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 8014dec:	4311      	orrs	r1, r2
 8014dee:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8014df2:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8014df6:	430b      	orrs	r3, r1
 8014df8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8014dfc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014e00:	1cda      	adds	r2, r3, #3
 8014e02:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e06:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	781b      	ldrb	r3, [r3, #0]
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	2200      	movs	r2, #0
 8014e14:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8014e18:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8014e1c:	f04f 0200 	mov.w	r2, #0
 8014e20:	f04f 0300 	mov.w	r3, #0
 8014e24:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 8014e28:	000b      	movs	r3, r1
 8014e2a:	2200      	movs	r2, #0
 8014e2c:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8014e30:	4311      	orrs	r1, r2
 8014e32:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 8014e36:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 8014e3a:	430b      	orrs	r3, r1
 8014e3c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8014e40:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014e44:	1d1a      	adds	r2, r3, #4
 8014e46:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e4a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	4413      	add	r3, r2
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	2200      	movs	r2, #0
 8014e58:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8014e5c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8014e60:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	@ 0x178
 8014e64:	460b      	mov	r3, r1
 8014e66:	0a1b      	lsrs	r3, r3, #8
 8014e68:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8014e6c:	460b      	mov	r3, r1
 8014e6e:	061b      	lsls	r3, r3, #24
 8014e70:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8014e74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8014e78:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	ea43 0a02 	orr.w	sl, r3, r2
 8014e82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8014e86:	460a      	mov	r2, r1
 8014e88:	ea43 0b02 	orr.w	fp, r3, r2
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8014e8c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014e90:	1d5a      	adds	r2, r3, #5
 8014e92:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014e96:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	781b      	ldrb	r3, [r3, #0]
 8014ea0:	b2db      	uxtb	r3, r3
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8014ea8:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8014eac:	f04f 0200 	mov.w	r2, #0
 8014eb0:	f04f 0300 	mov.w	r3, #0
 8014eb4:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 8014eb8:	040b      	lsls	r3, r1, #16
 8014eba:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8014ebe:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8014ec2:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8014ec6:	040a      	lsls	r2, r1, #16
 8014ec8:	ea4a 0802 	orr.w	r8, sl, r2
 8014ecc:	ea4b 0903 	orr.w	r9, fp, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8014ed0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014ed4:	1d9a      	adds	r2, r3, #6
 8014ed6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014eda:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8014eec:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8014ef0:	f04f 0200 	mov.w	r2, #0
 8014ef4:	f04f 0300 	mov.w	r3, #0
 8014ef8:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8014efc:	020b      	lsls	r3, r1, #8
 8014efe:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8014f02:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8014f06:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8014f0a:	020a      	lsls	r2, r1, #8
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 8014f0c:	ea48 0402 	orr.w	r4, r8, r2
 8014f10:	ea49 0503 	orr.w	r5, r9, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8014f14:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014f18:	1dda      	adds	r2, r3, #7
 8014f1a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014f1e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	4413      	add	r3, r2
 8014f26:	781b      	ldrb	r3, [r3, #0]
 8014f28:	b2db      	uxtb	r3, r3
 8014f2a:	2200      	movs	r2, #0
 8014f2c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8014f30:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 8014f34:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 8014f38:	460b      	mov	r3, r1
 8014f3a:	4323      	orrs	r3, r4
 8014f3c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8014f40:	4613      	mov	r3, r2
 8014f42:	432b      	orrs	r3, r5
 8014f44:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8014f48:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014f4c:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014f50:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014f54:	00db      	lsls	r3, r3, #3
 8014f56:	4413      	add	r3, r2
 8014f58:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 8014f5c:	e9c3 1200 	strd	r1, r2, [r3]
  for (i = 0, j = 0; i < 16; ++i, j += 8)
 8014f60:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014f64:	3301      	adds	r3, #1
 8014f66:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8014f6a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8014f6e:	3308      	adds	r3, #8
 8014f70:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 8014f74:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014f78:	2b0f      	cmp	r3, #15
 8014f7a:	f77f aee7 	ble.w	8014d4c <mg_sha384_transform+0x2c>
  for (; i < 80; ++i)
 8014f7e:	e0f8      	b.n	8015172 <mg_sha384_transform+0x452>
    m[i] = sig164(m[i - 2]) + m[i - 7] + sig064(m[i - 15]) + m[i - 16];
 8014f80:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014f84:	1e99      	subs	r1, r3, #2
 8014f86:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014f8a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014f8e:	00cb      	lsls	r3, r1, #3
 8014f90:	4413      	add	r3, r2
 8014f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f96:	0358      	lsls	r0, r3, #13
 8014f98:	0cd1      	lsrs	r1, r2, #19
 8014f9a:	4301      	orrs	r1, r0
 8014f9c:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 8014fa0:	0351      	lsls	r1, r2, #13
 8014fa2:	0cdb      	lsrs	r3, r3, #19
 8014fa4:	430b      	orrs	r3, r1
 8014fa6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8014faa:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014fae:	1e99      	subs	r1, r3, #2
 8014fb0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014fb4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014fb8:	00cb      	lsls	r3, r1, #3
 8014fba:	4413      	add	r3, r2
 8014fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fc0:	0f50      	lsrs	r0, r2, #29
 8014fc2:	00d9      	lsls	r1, r3, #3
 8014fc4:	4301      	orrs	r1, r0
 8014fc6:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 8014fca:	0f59      	lsrs	r1, r3, #29
 8014fcc:	00d3      	lsls	r3, r2, #3
 8014fce:	430b      	orrs	r3, r1
 8014fd0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8014fd4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8014fd8:	4623      	mov	r3, r4
 8014fda:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 8014fde:	4602      	mov	r2, r0
 8014fe0:	4053      	eors	r3, r2
 8014fe2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8014fe6:	462b      	mov	r3, r5
 8014fe8:	460a      	mov	r2, r1
 8014fea:	4053      	eors	r3, r2
 8014fec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8014ff0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8014ff4:	1e99      	subs	r1, r3, #2
 8014ff6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8014ffa:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8014ffe:	00cb      	lsls	r3, r1, #3
 8015000:	4413      	add	r3, r2
 8015002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015006:	f04f 0000 	mov.w	r0, #0
 801500a:	f04f 0100 	mov.w	r1, #0
 801500e:	0990      	lsrs	r0, r2, #6
 8015010:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8015014:	0999      	lsrs	r1, r3, #6
 8015016:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 801501a:	4623      	mov	r3, r4
 801501c:	4043      	eors	r3, r0
 801501e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8015022:	462b      	mov	r3, r5
 8015024:	404b      	eors	r3, r1
 8015026:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 801502a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801502e:	1fd9      	subs	r1, r3, #7
 8015030:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015034:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015038:	00cb      	lsls	r3, r1, #3
 801503a:	4413      	add	r3, r2
 801503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015040:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 8015044:	4621      	mov	r1, r4
 8015046:	1889      	adds	r1, r1, r2
 8015048:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 801504c:	4629      	mov	r1, r5
 801504e:	eb41 0303 	adc.w	r3, r1, r3
 8015052:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8015056:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801505a:	f1a3 010f 	sub.w	r1, r3, #15
 801505e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015062:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015066:	00cb      	lsls	r3, r1, #3
 8015068:	4413      	add	r3, r2
 801506a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506e:	07d8      	lsls	r0, r3, #31
 8015070:	0851      	lsrs	r1, r2, #1
 8015072:	4301      	orrs	r1, r0
 8015074:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 8015078:	07d1      	lsls	r1, r2, #31
 801507a:	085b      	lsrs	r3, r3, #1
 801507c:	430b      	orrs	r3, r1
 801507e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8015082:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015086:	f1a3 010f 	sub.w	r1, r3, #15
 801508a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801508e:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015092:	00cb      	lsls	r3, r1, #3
 8015094:	4413      	add	r3, r2
 8015096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801509a:	0618      	lsls	r0, r3, #24
 801509c:	0a11      	lsrs	r1, r2, #8
 801509e:	4301      	orrs	r1, r0
 80150a0:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 80150a4:	0611      	lsls	r1, r2, #24
 80150a6:	0a1b      	lsrs	r3, r3, #8
 80150a8:	430b      	orrs	r3, r1
 80150aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80150ae:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 80150b2:	4623      	mov	r3, r4
 80150b4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 80150b8:	4602      	mov	r2, r0
 80150ba:	4053      	eors	r3, r2
 80150bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80150c0:	462b      	mov	r3, r5
 80150c2:	460a      	mov	r2, r1
 80150c4:	4053      	eors	r3, r2
 80150c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80150ca:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80150ce:	f1a3 010f 	sub.w	r1, r3, #15
 80150d2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80150d6:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80150da:	00cb      	lsls	r3, r1, #3
 80150dc:	4413      	add	r3, r2
 80150de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150e2:	f04f 0000 	mov.w	r0, #0
 80150e6:	f04f 0100 	mov.w	r1, #0
 80150ea:	09d0      	lsrs	r0, r2, #7
 80150ec:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 80150f0:	09d9      	lsrs	r1, r3, #7
 80150f2:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 80150f6:	4623      	mov	r3, r4
 80150f8:	4043      	eors	r3, r0
 80150fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80150fe:	462b      	mov	r3, r5
 8015100:	404b      	eors	r3, r1
 8015102:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8015106:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 801510a:	4623      	mov	r3, r4
 801510c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8015110:	4602      	mov	r2, r0
 8015112:	189b      	adds	r3, r3, r2
 8015114:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8015118:	462b      	mov	r3, r5
 801511a:	460a      	mov	r2, r1
 801511c:	4153      	adcs	r3, r2
 801511e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8015122:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015126:	f1a3 0110 	sub.w	r1, r3, #16
 801512a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801512e:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015132:	00cb      	lsls	r3, r1, #3
 8015134:	4413      	add	r3, r2
 8015136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801513a:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 801513e:	4621      	mov	r1, r4
 8015140:	1889      	adds	r1, r1, r2
 8015142:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8015146:	4629      	mov	r1, r5
 8015148:	eb41 0303 	adc.w	r3, r1, r3
 801514c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8015150:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015154:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8015158:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801515c:	00db      	lsls	r3, r3, #3
 801515e:	4413      	add	r3, r2
 8015160:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8015164:	e9c3 1200 	strd	r1, r2, [r3]
  for (; i < 80; ++i)
 8015168:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801516c:	3301      	adds	r3, #1
 801516e:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015172:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015176:	2b4f      	cmp	r3, #79	@ 0x4f
 8015178:	f77f af02 	ble.w	8014f80 <mg_sha384_transform+0x260>

  a = ctx->state[0];
 801517c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015180:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801518a:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 801518e:	e9c1 2300 	strd	r2, r3, [r1]
  b = ctx->state[1];
 8015192:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015196:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80151a0:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 80151a4:	e9c1 2300 	strd	r2, r3, [r1]
  c = ctx->state[2];
 80151a8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80151ac:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80151b6:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 80151ba:	e9c1 2300 	strd	r2, r3, [r1]
  d = ctx->state[3];
 80151be:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80151c2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80151cc:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 80151d0:	e9c1 2300 	strd	r2, r3, [r1]
  e = ctx->state[4];
 80151d4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80151d8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80151e2:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 80151e6:	e9c1 2300 	strd	r2, r3, [r1]
  f = ctx->state[5];
 80151ea:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80151ee:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80151f8:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 80151fc:	e9c1 2300 	strd	r2, r3, [r1]
  g = ctx->state[6];
 8015200:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015204:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 801520e:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8015212:	e9c1 2300 	strd	r2, r3, [r1]
  h = ctx->state[7];
 8015216:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801521a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8015224:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 8015228:	e9c1 2300 	strd	r2, r3, [r1]

  for (i = 0; i < 80; ++i) {
 801522c:	2300      	movs	r3, #0
 801522e:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8015232:	e1c3      	b.n	80155bc <mg_sha384_transform+0x89c>
    uint64_t t1 = h + ep164(e) + ch(e, f, g) + mg_sha256_k2[i] + m[i];
 8015234:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015238:	049a      	lsls	r2, r3, #18
 801523a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 801523e:	0b9b      	lsrs	r3, r3, #14
 8015240:	4313      	orrs	r3, r2
 8015242:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8015246:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 801524a:	049a      	lsls	r2, r3, #18
 801524c:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015250:	0b9b      	lsrs	r3, r3, #14
 8015252:	4313      	orrs	r3, r2
 8015254:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8015258:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 801525c:	039a      	lsls	r2, r3, #14
 801525e:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8015262:	0c9b      	lsrs	r3, r3, #18
 8015264:	4313      	orrs	r3, r2
 8015266:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801526a:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 801526e:	039a      	lsls	r2, r3, #14
 8015270:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8015274:	0c9b      	lsrs	r3, r3, #18
 8015276:	4313      	orrs	r3, r2
 8015278:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801527c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8015280:	4623      	mov	r3, r4
 8015282:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8015286:	4602      	mov	r2, r0
 8015288:	4053      	eors	r3, r2
 801528a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801528e:	462b      	mov	r3, r5
 8015290:	460a      	mov	r2, r1
 8015292:	4053      	eors	r3, r2
 8015294:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8015298:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 801529c:	0a5a      	lsrs	r2, r3, #9
 801529e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80152a2:	05db      	lsls	r3, r3, #23
 80152a4:	4313      	orrs	r3, r2
 80152a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80152aa:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80152ae:	0a5a      	lsrs	r2, r3, #9
 80152b0:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80152b4:	05db      	lsls	r3, r3, #23
 80152b6:	4313      	orrs	r3, r2
 80152b8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80152bc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80152c0:	4623      	mov	r3, r4
 80152c2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 80152c6:	4602      	mov	r2, r0
 80152c8:	4053      	eors	r3, r2
 80152ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80152ce:	462b      	mov	r3, r5
 80152d0:	460a      	mov	r2, r1
 80152d2:	4053      	eors	r3, r2
 80152d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80152d8:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80152dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152e0:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80152e4:	4621      	mov	r1, r4
 80152e6:	1889      	adds	r1, r1, r2
 80152e8:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 80152ec:	4629      	mov	r1, r5
 80152ee:	eb41 0303 	adc.w	r3, r1, r3
 80152f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80152f6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80152fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80152fe:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8015302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015306:	ea00 0402 	and.w	r4, r0, r2
 801530a:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 801530e:	400b      	ands	r3, r1
 8015310:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8015314:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8015318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801531c:	43d1      	mvns	r1, r2
 801531e:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 8015322:	43db      	mvns	r3, r3
 8015324:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8015328:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 801532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015330:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8015334:	4621      	mov	r1, r4
 8015336:	4011      	ands	r1, r2
 8015338:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 801533c:	4629      	mov	r1, r5
 801533e:	400b      	ands	r3, r1
 8015340:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8015344:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8015348:	4623      	mov	r3, r4
 801534a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 801534e:	4602      	mov	r2, r0
 8015350:	4053      	eors	r3, r2
 8015352:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8015356:	462b      	mov	r3, r5
 8015358:	460a      	mov	r2, r1
 801535a:	4053      	eors	r3, r2
 801535c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8015360:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8015364:	4623      	mov	r3, r4
 8015366:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 801536a:	4602      	mov	r2, r0
 801536c:	189b      	adds	r3, r3, r2
 801536e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8015372:	462b      	mov	r3, r5
 8015374:	460a      	mov	r2, r1
 8015376:	4153      	adcs	r3, r2
 8015378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801537c:	4a8e      	ldr	r2, [pc, #568]	@ (80155b8 <mg_sha384_transform+0x898>)
 801537e:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8015382:	00db      	lsls	r3, r3, #3
 8015384:	4413      	add	r3, r2
 8015386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801538a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 801538e:	4621      	mov	r1, r4
 8015390:	1889      	adds	r1, r1, r2
 8015392:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8015396:	4629      	mov	r1, r5
 8015398:	eb41 0303 	adc.w	r3, r1, r3
 801539c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80153a0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80153a4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80153a8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80153ac:	00db      	lsls	r3, r3, #3
 80153ae:	4413      	add	r3, r2
 80153b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b4:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 80153b8:	4621      	mov	r1, r4
 80153ba:	1889      	adds	r1, r1, r2
 80153bc:	61b9      	str	r1, [r7, #24]
 80153be:	4629      	mov	r1, r5
 80153c0:	eb41 0303 	adc.w	r3, r1, r3
 80153c4:	61fb      	str	r3, [r7, #28]
 80153c6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80153ca:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 80153ce:	e9c2 3400 	strd	r3, r4, [r2]
    uint64_t t2 = ep064(a) + maj(a, b, c);
 80153d2:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80153d6:	011a      	lsls	r2, r3, #4
 80153d8:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 80153dc:	0f1b      	lsrs	r3, r3, #28
 80153de:	4313      	orrs	r3, r2
 80153e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80153e4:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 80153e8:	011a      	lsls	r2, r3, #4
 80153ea:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80153ee:	0f1b      	lsrs	r3, r3, #28
 80153f0:	4313      	orrs	r3, r2
 80153f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80153f6:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 80153fa:	089a      	lsrs	r2, r3, #2
 80153fc:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015400:	079b      	lsls	r3, r3, #30
 8015402:	4313      	orrs	r3, r2
 8015404:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015408:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 801540c:	089a      	lsrs	r2, r3, #2
 801540e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015412:	079b      	lsls	r3, r3, #30
 8015414:	4313      	orrs	r3, r2
 8015416:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801541a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 801541e:	4623      	mov	r3, r4
 8015420:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8015424:	4602      	mov	r2, r0
 8015426:	4053      	eors	r3, r2
 8015428:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801542c:	462b      	mov	r3, r5
 801542e:	460a      	mov	r2, r1
 8015430:	4053      	eors	r3, r2
 8015432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8015436:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 801543a:	09da      	lsrs	r2, r3, #7
 801543c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8015440:	065b      	lsls	r3, r3, #25
 8015442:	4313      	orrs	r3, r2
 8015444:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8015448:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 801544c:	09da      	lsrs	r2, r3, #7
 801544e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8015452:	065b      	lsls	r3, r3, #25
 8015454:	4313      	orrs	r3, r2
 8015456:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801545a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 801545e:	4623      	mov	r3, r4
 8015460:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8015464:	4602      	mov	r2, r0
 8015466:	4053      	eors	r3, r2
 8015468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801546c:	462b      	mov	r3, r5
 801546e:	460a      	mov	r2, r1
 8015470:	4053      	eors	r3, r2
 8015472:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8015476:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 801547a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801547e:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8015482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015486:	ea80 0402 	eor.w	r4, r0, r2
 801548a:	67bc      	str	r4, [r7, #120]	@ 0x78
 801548c:	404b      	eors	r3, r1
 801548e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8015490:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8015494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015498:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 801549c:	4621      	mov	r1, r4
 801549e:	4011      	ands	r1, r2
 80154a0:	6739      	str	r1, [r7, #112]	@ 0x70
 80154a2:	4629      	mov	r1, r5
 80154a4:	400b      	ands	r3, r1
 80154a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80154a8:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80154ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80154b0:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80154b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b8:	ea00 0402 	and.w	r4, r0, r2
 80154bc:	66bc      	str	r4, [r7, #104]	@ 0x68
 80154be:	400b      	ands	r3, r1
 80154c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80154c2:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80154c6:	4623      	mov	r3, r4
 80154c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80154cc:	4602      	mov	r2, r0
 80154ce:	4053      	eors	r3, r2
 80154d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80154d2:	462b      	mov	r3, r5
 80154d4:	460a      	mov	r2, r1
 80154d6:	4053      	eors	r3, r2
 80154d8:	667b      	str	r3, [r7, #100]	@ 0x64
 80154da:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80154de:	4623      	mov	r3, r4
 80154e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 80154e4:	4602      	mov	r2, r0
 80154e6:	189b      	adds	r3, r3, r2
 80154e8:	613b      	str	r3, [r7, #16]
 80154ea:	462b      	mov	r3, r5
 80154ec:	460a      	mov	r2, r1
 80154ee:	4153      	adcs	r3, r2
 80154f0:	617b      	str	r3, [r7, #20]
 80154f2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80154f6:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 80154fa:	e9c2 3400 	strd	r3, r4, [r2]
    h = g;
 80154fe:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015506:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 801550a:	e9c1 2300 	strd	r2, r3, [r1]
    g = f;
 801550e:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8015512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015516:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 801551a:	e9c1 2300 	strd	r2, r3, [r1]
    f = e;
 801551e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8015522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015526:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 801552a:	e9c1 2300 	strd	r2, r3, [r1]
    e = d + t1;
 801552e:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8015532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015536:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 801553a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801553e:	1884      	adds	r4, r0, r2
 8015540:	60bc      	str	r4, [r7, #8]
 8015542:	eb41 0303 	adc.w	r3, r1, r3
 8015546:	60fb      	str	r3, [r7, #12]
 8015548:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801554c:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 8015550:	e9c2 3400 	strd	r3, r4, [r2]
    d = c;
 8015554:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8015558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801555c:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8015560:	e9c1 2300 	strd	r2, r3, [r1]
    c = b;
 8015564:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8015568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556c:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 8015570:	e9c1 2300 	strd	r2, r3, [r1]
    b = a;
 8015574:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8015578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801557c:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 8015580:	e9c1 2300 	strd	r2, r3, [r1]
    a = t1 + t2;
 8015584:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8015588:	e9d3 0100 	ldrd	r0, r1, [r3]
 801558c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8015590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015594:	1884      	adds	r4, r0, r2
 8015596:	603c      	str	r4, [r7, #0]
 8015598:	eb41 0303 	adc.w	r3, r1, r3
 801559c:	607b      	str	r3, [r7, #4]
 801559e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80155a2:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 80155a6:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 80; ++i) {
 80155aa:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80155ae:	3301      	adds	r3, #1
 80155b0:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80155b4:	e002      	b.n	80155bc <mg_sha384_transform+0x89c>
 80155b6:	bf00      	nop
 80155b8:	08029cf8 	.word	0x08029cf8
 80155bc:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80155c0:	2b4f      	cmp	r3, #79	@ 0x4f
 80155c2:	f77f ae37 	ble.w	8015234 <mg_sha384_transform+0x514>
  }

  ctx->state[0] += a;
 80155c6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80155ca:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80155d4:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80155d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155dc:	1884      	adds	r4, r0, r2
 80155de:	65bc      	str	r4, [r7, #88]	@ 0x58
 80155e0:	eb41 0303 	adc.w	r3, r1, r3
 80155e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80155e6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80155ea:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80155f4:	e9c3 1200 	strd	r1, r2, [r3]
  ctx->state[1] += b;
 80155f8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80155fc:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8015606:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 801560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801560e:	1884      	adds	r4, r0, r2
 8015610:	653c      	str	r4, [r7, #80]	@ 0x50
 8015612:	eb41 0303 	adc.w	r3, r1, r3
 8015616:	657b      	str	r3, [r7, #84]	@ 0x54
 8015618:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801561c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8015626:	e9c3 1202 	strd	r1, r2, [r3, #8]
  ctx->state[2] += c;
 801562a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801562e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8015638:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 801563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015640:	1884      	adds	r4, r0, r2
 8015642:	64bc      	str	r4, [r7, #72]	@ 0x48
 8015644:	eb41 0303 	adc.w	r3, r1, r3
 8015648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801564a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801564e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8015658:	e9c3 1204 	strd	r1, r2, [r3, #16]
  ctx->state[3] += d;
 801565c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015660:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 801566a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 801566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015672:	1884      	adds	r4, r0, r2
 8015674:	643c      	str	r4, [r7, #64]	@ 0x40
 8015676:	eb41 0303 	adc.w	r3, r1, r3
 801567a:	647b      	str	r3, [r7, #68]	@ 0x44
 801567c:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015680:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801568a:	e9c3 1206 	strd	r1, r2, [r3, #24]
  ctx->state[4] += e;
 801568e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015692:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 801569c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80156a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156a4:	1884      	adds	r4, r0, r2
 80156a6:	63bc      	str	r4, [r7, #56]	@ 0x38
 80156a8:	eb41 0303 	adc.w	r3, r1, r3
 80156ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80156ae:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80156b2:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80156bc:	e9c3 1208 	strd	r1, r2, [r3, #32]
  ctx->state[5] += f;
 80156c0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80156c4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80156ce:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 80156d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156d6:	1884      	adds	r4, r0, r2
 80156d8:	633c      	str	r4, [r7, #48]	@ 0x30
 80156da:	eb41 0303 	adc.w	r3, r1, r3
 80156de:	637b      	str	r3, [r7, #52]	@ 0x34
 80156e0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80156e4:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80156e8:	681b      	ldr	r3, [r3, #0]
 80156ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80156ee:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
  ctx->state[6] += g;
 80156f2:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80156f6:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8015700:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8015704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015708:	1884      	adds	r4, r0, r2
 801570a:	62bc      	str	r4, [r7, #40]	@ 0x28
 801570c:	eb41 0303 	adc.w	r3, r1, r3
 8015710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015712:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015716:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8015720:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
  ctx->state[7] += h;
 8015724:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015728:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8015732:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8015736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801573a:	1884      	adds	r4, r0, r2
 801573c:	623c      	str	r4, [r7, #32]
 801573e:	eb41 0303 	adc.w	r3, r1, r3
 8015742:	627b      	str	r3, [r7, #36]	@ 0x24
 8015744:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8015748:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8015752:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
}
 8015756:	bf00      	nop
 8015758:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 801575c:	46bd      	mov	sp, r7
 801575e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8015762:	4770      	bx	lr
 8015764:	0000      	movs	r0, r0
	...

08015768 <mg_sha384_init>:

void mg_sha384_init(mg_sha384_ctx *ctx) {
 8015768:	b480      	push	{r7}
 801576a:	b083      	sub	sp, #12
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  ctx->datalen = 0;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2200      	movs	r2, #0
 8015774:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  ctx->bitlen[0] = 0;
 8015778:	6879      	ldr	r1, [r7, #4]
 801577a:	f04f 0200 	mov.w	r2, #0
 801577e:	f04f 0300 	mov.w	r3, #0
 8015782:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
  ctx->bitlen[1] = 0;
 8015786:	6879      	ldr	r1, [r7, #4]
 8015788:	f04f 0200 	mov.w	r2, #0
 801578c:	f04f 0300 	mov.w	r3, #0
 8015790:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
  ctx->state[0] = 0xcbbb9d5dc1059ed8;
 8015794:	6879      	ldr	r1, [r7, #4]
 8015796:	a31a      	add	r3, pc, #104	@ (adr r3, 8015800 <mg_sha384_init+0x98>)
 8015798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579c:	e9c1 2300 	strd	r2, r3, [r1]
  ctx->state[1] = 0x629a292a367cd507;
 80157a0:	6879      	ldr	r1, [r7, #4]
 80157a2:	a319      	add	r3, pc, #100	@ (adr r3, 8015808 <mg_sha384_init+0xa0>)
 80157a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ctx->state[2] = 0x9159015a3070dd17;
 80157ac:	6879      	ldr	r1, [r7, #4]
 80157ae:	a318      	add	r3, pc, #96	@ (adr r3, 8015810 <mg_sha384_init+0xa8>)
 80157b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
  ctx->state[3] = 0x152fecd8f70e5939;
 80157b8:	6879      	ldr	r1, [r7, #4]
 80157ba:	a317      	add	r3, pc, #92	@ (adr r3, 8015818 <mg_sha384_init+0xb0>)
 80157bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
  ctx->state[4] = 0x67332667ffc00b31;
 80157c4:	6879      	ldr	r1, [r7, #4]
 80157c6:	a316      	add	r3, pc, #88	@ (adr r3, 8015820 <mg_sha384_init+0xb8>)
 80157c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157cc:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[5] = 0x8eb44a8768581511;
 80157d0:	6879      	ldr	r1, [r7, #4]
 80157d2:	a315      	add	r3, pc, #84	@ (adr r3, 8015828 <mg_sha384_init+0xc0>)
 80157d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  ctx->state[6] = 0xdb0c2e0d64f98fa7;
 80157dc:	6879      	ldr	r1, [r7, #4]
 80157de:	a314      	add	r3, pc, #80	@ (adr r3, 8015830 <mg_sha384_init+0xc8>)
 80157e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  ctx->state[7] = 0x47b5481dbefa4fa4;
 80157e8:	6879      	ldr	r1, [r7, #4]
 80157ea:	a313      	add	r3, pc, #76	@ (adr r3, 8015838 <mg_sha384_init+0xd0>)
 80157ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 80157f4:	bf00      	nop
 80157f6:	370c      	adds	r7, #12
 80157f8:	46bd      	mov	sp, r7
 80157fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fe:	4770      	bx	lr
 8015800:	c1059ed8 	.word	0xc1059ed8
 8015804:	cbbb9d5d 	.word	0xcbbb9d5d
 8015808:	367cd507 	.word	0x367cd507
 801580c:	629a292a 	.word	0x629a292a
 8015810:	3070dd17 	.word	0x3070dd17
 8015814:	9159015a 	.word	0x9159015a
 8015818:	f70e5939 	.word	0xf70e5939
 801581c:	152fecd8 	.word	0x152fecd8
 8015820:	ffc00b31 	.word	0xffc00b31
 8015824:	67332667 	.word	0x67332667
 8015828:	68581511 	.word	0x68581511
 801582c:	8eb44a87 	.word	0x8eb44a87
 8015830:	64f98fa7 	.word	0x64f98fa7
 8015834:	db0c2e0d 	.word	0xdb0c2e0d
 8015838:	befa4fa4 	.word	0xbefa4fa4
 801583c:	47b5481d 	.word	0x47b5481d

08015840 <mg_sha384_update>:

void mg_sha384_update(mg_sha384_ctx *ctx, const uint8_t *data, size_t len) {
 8015840:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015844:	b086      	sub	sp, #24
 8015846:	af00      	add	r7, sp, #0
 8015848:	60f8      	str	r0, [r7, #12]
 801584a:	60b9      	str	r1, [r7, #8]
 801584c:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; ++i) {
 801584e:	2300      	movs	r3, #0
 8015850:	617b      	str	r3, [r7, #20]
 8015852:	e040      	b.n	80158d6 <mg_sha384_update+0x96>
    ctx->buffer[ctx->datalen] = data[i];
 8015854:	68ba      	ldr	r2, [r7, #8]
 8015856:	697b      	ldr	r3, [r7, #20]
 8015858:	441a      	add	r2, r3
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015860:	7811      	ldrb	r1, [r2, #0]
 8015862:	68fa      	ldr	r2, [r7, #12]
 8015864:	4413      	add	r3, r2
 8015866:	460a      	mov	r2, r1
 8015868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ctx->datalen++;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015872:	1c5a      	adds	r2, r3, #1
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (ctx->datalen == 128) {
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015880:	2b80      	cmp	r3, #128	@ 0x80
 8015882:	d125      	bne.n	80158d0 <mg_sha384_update+0x90>
      mg_sha384_transform(ctx, ctx->buffer);
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	3340      	adds	r3, #64	@ 0x40
 8015888:	4619      	mov	r1, r3
 801588a:	68f8      	ldr	r0, [r7, #12]
 801588c:	f7ff fa48 	bl	8014d20 <mg_sha384_transform>
      ctx->bitlen[1] += 1024;
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8015896:	f512 6480 	adds.w	r4, r2, #1024	@ 0x400
 801589a:	f143 0500 	adc.w	r5, r3, #0
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	e9c3 4532 	strd	r4, r5, [r3, #200]	@ 0xc8
      if (ctx->bitlen[1] < 1024) ctx->bitlen[0]++;
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80158aa:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80158ae:	f173 0300 	sbcs.w	r3, r3, #0
 80158b2:	d209      	bcs.n	80158c8 <mg_sha384_update+0x88>
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80158ba:	f112 0801 	adds.w	r8, r2, #1
 80158be:	f143 0900 	adc.w	r9, r3, #0
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	e9c3 8930 	strd	r8, r9, [r3, #192]	@ 0xc0
      ctx->datalen = 0;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	2200      	movs	r2, #0
 80158cc:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  for (i = 0; i < len; ++i) {
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	3301      	adds	r3, #1
 80158d4:	617b      	str	r3, [r7, #20]
 80158d6:	697a      	ldr	r2, [r7, #20]
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	429a      	cmp	r2, r3
 80158dc:	d3ba      	bcc.n	8015854 <mg_sha384_update+0x14>
    }
  }
}
 80158de:	bf00      	nop
 80158e0:	bf00      	nop
 80158e2:	3718      	adds	r7, #24
 80158e4:	46bd      	mov	sp, r7
 80158e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080158ea <mg_sha384_final>:

void mg_sha384_final(uint8_t hash[48], mg_sha384_ctx *ctx) {
 80158ea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80158ee:	b086      	sub	sp, #24
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	60f8      	str	r0, [r7, #12]
 80158f4:	60b9      	str	r1, [r7, #8]
  size_t i = ctx->datalen;
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80158fc:	617b      	str	r3, [r7, #20]

  if (ctx->datalen < 112) {
 80158fe:	68bb      	ldr	r3, [r7, #8]
 8015900:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8015904:	2b6f      	cmp	r3, #111	@ 0x6f
 8015906:	d814      	bhi.n	8015932 <mg_sha384_final+0x48>
    ctx->buffer[i++] = 0x80;
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	1c5a      	adds	r2, r3, #1
 801590c:	617a      	str	r2, [r7, #20]
 801590e:	68ba      	ldr	r2, [r7, #8]
 8015910:	4413      	add	r3, r2
 8015912:	2280      	movs	r2, #128	@ 0x80
 8015914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 112) ctx->buffer[i++] = 0x00;
 8015918:	e007      	b.n	801592a <mg_sha384_final+0x40>
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	1c5a      	adds	r2, r3, #1
 801591e:	617a      	str	r2, [r7, #20]
 8015920:	68ba      	ldr	r2, [r7, #8]
 8015922:	4413      	add	r3, r2
 8015924:	2200      	movs	r2, #0
 8015926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	2b6f      	cmp	r3, #111	@ 0x6f
 801592e:	d9f4      	bls.n	801591a <mg_sha384_final+0x30>
 8015930:	e020      	b.n	8015974 <mg_sha384_final+0x8a>
  } else {
    ctx->buffer[i++] = 0x80;
 8015932:	697b      	ldr	r3, [r7, #20]
 8015934:	1c5a      	adds	r2, r3, #1
 8015936:	617a      	str	r2, [r7, #20]
 8015938:	68ba      	ldr	r2, [r7, #8]
 801593a:	4413      	add	r3, r2
 801593c:	2280      	movs	r2, #128	@ 0x80
 801593e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 128) ctx->buffer[i++] = 0x00;
 8015942:	e007      	b.n	8015954 <mg_sha384_final+0x6a>
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	1c5a      	adds	r2, r3, #1
 8015948:	617a      	str	r2, [r7, #20]
 801594a:	68ba      	ldr	r2, [r7, #8]
 801594c:	4413      	add	r3, r2
 801594e:	2200      	movs	r2, #0
 8015950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	2b7f      	cmp	r3, #127	@ 0x7f
 8015958:	d9f4      	bls.n	8015944 <mg_sha384_final+0x5a>
    mg_sha384_transform(ctx, ctx->buffer);
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	3340      	adds	r3, #64	@ 0x40
 801595e:	4619      	mov	r1, r3
 8015960:	68b8      	ldr	r0, [r7, #8]
 8015962:	f7ff f9dd 	bl	8014d20 <mg_sha384_transform>
    memset(ctx->buffer, 0, 112);
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	3340      	adds	r3, #64	@ 0x40
 801596a:	2270      	movs	r2, #112	@ 0x70
 801596c:	2100      	movs	r1, #0
 801596e:	4618      	mov	r0, r3
 8015970:	f00f ff0c 	bl	802578c <memset>
  }

  ctx->bitlen[1] += ctx->datalen * 8;
 8015974:	68bb      	ldr	r3, [r7, #8]
 8015976:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 801597a:	68b9      	ldr	r1, [r7, #8]
 801597c:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 8015980:	00c9      	lsls	r1, r1, #3
 8015982:	2000      	movs	r0, #0
 8015984:	4688      	mov	r8, r1
 8015986:	4681      	mov	r9, r0
 8015988:	eb12 0108 	adds.w	r1, r2, r8
 801598c:	6039      	str	r1, [r7, #0]
 801598e:	eb43 0309 	adc.w	r3, r3, r9
 8015992:	607b      	str	r3, [r7, #4]
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	e9d7 1200 	ldrd	r1, r2, [r7]
 801599a:	e9c3 1232 	strd	r1, r2, [r3, #200]	@ 0xc8
  if (ctx->bitlen[1] < ctx->datalen * 8) ctx->bitlen[0]++;
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80159a4:	68b9      	ldr	r1, [r7, #8]
 80159a6:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 80159aa:	00c9      	lsls	r1, r1, #3
 80159ac:	2000      	movs	r0, #0
 80159ae:	460c      	mov	r4, r1
 80159b0:	4605      	mov	r5, r0
 80159b2:	42a2      	cmp	r2, r4
 80159b4:	41ab      	sbcs	r3, r5
 80159b6:	d209      	bcs.n	80159cc <mg_sha384_final+0xe2>
 80159b8:	68bb      	ldr	r3, [r7, #8]
 80159ba:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80159be:	f112 0a01 	adds.w	sl, r2, #1
 80159c2:	f143 0b00 	adc.w	fp, r3, #0
 80159c6:	68bb      	ldr	r3, [r7, #8]
 80159c8:	e9c3 ab30 	strd	sl, fp, [r3, #192]	@ 0xc0
  ctx->buffer[127] = (uint8_t) (ctx->bitlen[1]);
 80159cc:	68bb      	ldr	r3, [r7, #8]
 80159ce:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 80159d2:	b2d2      	uxtb	r2, r2
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
  ctx->buffer[126] = (uint8_t) (ctx->bitlen[1] >> 8);
 80159da:	68bb      	ldr	r3, [r7, #8]
 80159dc:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80159e0:	f04f 0200 	mov.w	r2, #0
 80159e4:	f04f 0300 	mov.w	r3, #0
 80159e8:	0a02      	lsrs	r2, r0, #8
 80159ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80159ee:	0a0b      	lsrs	r3, r1, #8
 80159f0:	b2d2      	uxtb	r2, r2
 80159f2:	68bb      	ldr	r3, [r7, #8]
 80159f4:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
  ctx->buffer[125] = (uint8_t) (ctx->bitlen[1] >> 16);
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 80159fe:	f04f 0200 	mov.w	r2, #0
 8015a02:	f04f 0300 	mov.w	r3, #0
 8015a06:	0c02      	lsrs	r2, r0, #16
 8015a08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015a0c:	0c0b      	lsrs	r3, r1, #16
 8015a0e:	b2d2      	uxtb	r2, r2
 8015a10:	68bb      	ldr	r3, [r7, #8]
 8015a12:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
  ctx->buffer[124] = (uint8_t) (ctx->bitlen[1] >> 24);
 8015a16:	68bb      	ldr	r3, [r7, #8]
 8015a18:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8015a1c:	f04f 0200 	mov.w	r2, #0
 8015a20:	f04f 0300 	mov.w	r3, #0
 8015a24:	0e02      	lsrs	r2, r0, #24
 8015a26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015a2a:	0e0b      	lsrs	r3, r1, #24
 8015a2c:	b2d2      	uxtb	r2, r2
 8015a2e:	68bb      	ldr	r3, [r7, #8]
 8015a30:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
  ctx->buffer[123] = (uint8_t) (ctx->bitlen[1] >> 32);
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8015a3a:	f04f 0200 	mov.w	r2, #0
 8015a3e:	f04f 0300 	mov.w	r3, #0
 8015a42:	000a      	movs	r2, r1
 8015a44:	2300      	movs	r3, #0
 8015a46:	b2d2      	uxtb	r2, r2
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ctx->buffer[122] = (uint8_t) (ctx->bitlen[1] >> 40);
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8015a54:	f04f 0200 	mov.w	r2, #0
 8015a58:	f04f 0300 	mov.w	r3, #0
 8015a5c:	0a0a      	lsrs	r2, r1, #8
 8015a5e:	2300      	movs	r3, #0
 8015a60:	b2d2      	uxtb	r2, r2
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ctx->buffer[121] = (uint8_t) (ctx->bitlen[1] >> 48);
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8015a6e:	f04f 0200 	mov.w	r2, #0
 8015a72:	f04f 0300 	mov.w	r3, #0
 8015a76:	0c0a      	lsrs	r2, r1, #16
 8015a78:	2300      	movs	r3, #0
 8015a7a:	b2d2      	uxtb	r2, r2
 8015a7c:	68bb      	ldr	r3, [r7, #8]
 8015a7e:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ctx->buffer[120] = (uint8_t) (ctx->bitlen[1] >> 56);
 8015a82:	68bb      	ldr	r3, [r7, #8]
 8015a84:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8015a88:	f04f 0200 	mov.w	r2, #0
 8015a8c:	f04f 0300 	mov.w	r3, #0
 8015a90:	0e0a      	lsrs	r2, r1, #24
 8015a92:	2300      	movs	r3, #0
 8015a94:	b2d2      	uxtb	r2, r2
 8015a96:	68bb      	ldr	r3, [r7, #8]
 8015a98:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ctx->buffer[119] = (uint8_t) (ctx->bitlen[0]);
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8015aa2:	b2d2      	uxtb	r2, r2
 8015aa4:	68bb      	ldr	r3, [r7, #8]
 8015aa6:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ctx->buffer[118] = (uint8_t) (ctx->bitlen[0] >> 8);
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015ab0:	f04f 0200 	mov.w	r2, #0
 8015ab4:	f04f 0300 	mov.w	r3, #0
 8015ab8:	0a02      	lsrs	r2, r0, #8
 8015aba:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015abe:	0a0b      	lsrs	r3, r1, #8
 8015ac0:	b2d2      	uxtb	r2, r2
 8015ac2:	68bb      	ldr	r3, [r7, #8]
 8015ac4:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ctx->buffer[117] = (uint8_t) (ctx->bitlen[0] >> 16);
 8015ac8:	68bb      	ldr	r3, [r7, #8]
 8015aca:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015ace:	f04f 0200 	mov.w	r2, #0
 8015ad2:	f04f 0300 	mov.w	r3, #0
 8015ad6:	0c02      	lsrs	r2, r0, #16
 8015ad8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015adc:	0c0b      	lsrs	r3, r1, #16
 8015ade:	b2d2      	uxtb	r2, r2
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
  ctx->buffer[116] = (uint8_t) (ctx->bitlen[0] >> 24);
 8015ae6:	68bb      	ldr	r3, [r7, #8]
 8015ae8:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015aec:	f04f 0200 	mov.w	r2, #0
 8015af0:	f04f 0300 	mov.w	r3, #0
 8015af4:	0e02      	lsrs	r2, r0, #24
 8015af6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015afa:	0e0b      	lsrs	r3, r1, #24
 8015afc:	b2d2      	uxtb	r2, r2
 8015afe:	68bb      	ldr	r3, [r7, #8]
 8015b00:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  ctx->buffer[115] = (uint8_t) (ctx->bitlen[0] >> 32);
 8015b04:	68bb      	ldr	r3, [r7, #8]
 8015b06:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015b0a:	f04f 0200 	mov.w	r2, #0
 8015b0e:	f04f 0300 	mov.w	r3, #0
 8015b12:	000a      	movs	r2, r1
 8015b14:	2300      	movs	r3, #0
 8015b16:	b2d2      	uxtb	r2, r2
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
  ctx->buffer[114] = (uint8_t) (ctx->bitlen[0] >> 40);
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015b24:	f04f 0200 	mov.w	r2, #0
 8015b28:	f04f 0300 	mov.w	r3, #0
 8015b2c:	0a0a      	lsrs	r2, r1, #8
 8015b2e:	2300      	movs	r3, #0
 8015b30:	b2d2      	uxtb	r2, r2
 8015b32:	68bb      	ldr	r3, [r7, #8]
 8015b34:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
  ctx->buffer[113] = (uint8_t) (ctx->bitlen[0] >> 48);
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015b3e:	f04f 0200 	mov.w	r2, #0
 8015b42:	f04f 0300 	mov.w	r3, #0
 8015b46:	0c0a      	lsrs	r2, r1, #16
 8015b48:	2300      	movs	r3, #0
 8015b4a:	b2d2      	uxtb	r2, r2
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
  ctx->buffer[112] = (uint8_t) (ctx->bitlen[0] >> 56);
 8015b52:	68bb      	ldr	r3, [r7, #8]
 8015b54:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8015b58:	f04f 0200 	mov.w	r2, #0
 8015b5c:	f04f 0300 	mov.w	r3, #0
 8015b60:	0e0a      	lsrs	r2, r1, #24
 8015b62:	2300      	movs	r3, #0
 8015b64:	b2d2      	uxtb	r2, r2
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
  mg_sha384_transform(ctx, ctx->buffer);
 8015b6c:	68bb      	ldr	r3, [r7, #8]
 8015b6e:	3340      	adds	r3, #64	@ 0x40
 8015b70:	4619      	mov	r1, r3
 8015b72:	68b8      	ldr	r0, [r7, #8]
 8015b74:	f7ff f8d4 	bl	8014d20 <mg_sha384_transform>

  for (i = 0; i < 6; ++i) {
 8015b78:	2300      	movs	r3, #0
 8015b7a:	617b      	str	r3, [r7, #20]
 8015b7c:	e099      	b.n	8015cb2 <mg_sha384_final+0x3c8>
    hash[i * 8] = (uint8_t) ((ctx->state[i] >> 56) & 0xff);
 8015b7e:	68ba      	ldr	r2, [r7, #8]
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	00db      	lsls	r3, r3, #3
 8015b84:	4413      	add	r3, r2
 8015b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015b8a:	f04f 0200 	mov.w	r2, #0
 8015b8e:	f04f 0300 	mov.w	r3, #0
 8015b92:	0e0a      	lsrs	r2, r1, #24
 8015b94:	2300      	movs	r3, #0
 8015b96:	6979      	ldr	r1, [r7, #20]
 8015b98:	00c9      	lsls	r1, r1, #3
 8015b9a:	68f8      	ldr	r0, [r7, #12]
 8015b9c:	4401      	add	r1, r0
 8015b9e:	b2d3      	uxtb	r3, r2
 8015ba0:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 1] = (uint8_t) ((ctx->state[i] >> 48) & 0xff);
 8015ba2:	68ba      	ldr	r2, [r7, #8]
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	00db      	lsls	r3, r3, #3
 8015ba8:	4413      	add	r3, r2
 8015baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015bae:	f04f 0200 	mov.w	r2, #0
 8015bb2:	f04f 0300 	mov.w	r3, #0
 8015bb6:	0c0a      	lsrs	r2, r1, #16
 8015bb8:	2300      	movs	r3, #0
 8015bba:	6979      	ldr	r1, [r7, #20]
 8015bbc:	00c9      	lsls	r1, r1, #3
 8015bbe:	3101      	adds	r1, #1
 8015bc0:	68f8      	ldr	r0, [r7, #12]
 8015bc2:	4401      	add	r1, r0
 8015bc4:	b2d3      	uxtb	r3, r2
 8015bc6:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 2] = (uint8_t) ((ctx->state[i] >> 40) & 0xff);
 8015bc8:	68ba      	ldr	r2, [r7, #8]
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	00db      	lsls	r3, r3, #3
 8015bce:	4413      	add	r3, r2
 8015bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015bd4:	f04f 0200 	mov.w	r2, #0
 8015bd8:	f04f 0300 	mov.w	r3, #0
 8015bdc:	0a0a      	lsrs	r2, r1, #8
 8015bde:	2300      	movs	r3, #0
 8015be0:	6979      	ldr	r1, [r7, #20]
 8015be2:	00c9      	lsls	r1, r1, #3
 8015be4:	3102      	adds	r1, #2
 8015be6:	68f8      	ldr	r0, [r7, #12]
 8015be8:	4401      	add	r1, r0
 8015bea:	b2d3      	uxtb	r3, r2
 8015bec:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 3] = (uint8_t) ((ctx->state[i] >> 32) & 0xff);
 8015bee:	68ba      	ldr	r2, [r7, #8]
 8015bf0:	697b      	ldr	r3, [r7, #20]
 8015bf2:	00db      	lsls	r3, r3, #3
 8015bf4:	4413      	add	r3, r2
 8015bf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015bfa:	f04f 0200 	mov.w	r2, #0
 8015bfe:	f04f 0300 	mov.w	r3, #0
 8015c02:	000a      	movs	r2, r1
 8015c04:	2300      	movs	r3, #0
 8015c06:	6979      	ldr	r1, [r7, #20]
 8015c08:	00c9      	lsls	r1, r1, #3
 8015c0a:	3103      	adds	r1, #3
 8015c0c:	68f8      	ldr	r0, [r7, #12]
 8015c0e:	4401      	add	r1, r0
 8015c10:	b2d3      	uxtb	r3, r2
 8015c12:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 4] = (uint8_t) ((ctx->state[i] >> 24) & 0xff);
 8015c14:	68ba      	ldr	r2, [r7, #8]
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	00db      	lsls	r3, r3, #3
 8015c1a:	4413      	add	r3, r2
 8015c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c20:	f04f 0200 	mov.w	r2, #0
 8015c24:	f04f 0300 	mov.w	r3, #0
 8015c28:	0e02      	lsrs	r2, r0, #24
 8015c2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8015c2e:	0e0b      	lsrs	r3, r1, #24
 8015c30:	6979      	ldr	r1, [r7, #20]
 8015c32:	00c9      	lsls	r1, r1, #3
 8015c34:	3104      	adds	r1, #4
 8015c36:	68f8      	ldr	r0, [r7, #12]
 8015c38:	4401      	add	r1, r0
 8015c3a:	b2d3      	uxtb	r3, r2
 8015c3c:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 5] = (uint8_t) ((ctx->state[i] >> 16) & 0xff);
 8015c3e:	68ba      	ldr	r2, [r7, #8]
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	00db      	lsls	r3, r3, #3
 8015c44:	4413      	add	r3, r2
 8015c46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c4a:	f04f 0200 	mov.w	r2, #0
 8015c4e:	f04f 0300 	mov.w	r3, #0
 8015c52:	0c02      	lsrs	r2, r0, #16
 8015c54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8015c58:	0c0b      	lsrs	r3, r1, #16
 8015c5a:	6979      	ldr	r1, [r7, #20]
 8015c5c:	00c9      	lsls	r1, r1, #3
 8015c5e:	3105      	adds	r1, #5
 8015c60:	68f8      	ldr	r0, [r7, #12]
 8015c62:	4401      	add	r1, r0
 8015c64:	b2d3      	uxtb	r3, r2
 8015c66:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 6] = (uint8_t) ((ctx->state[i] >> 8) & 0xff);
 8015c68:	68ba      	ldr	r2, [r7, #8]
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	00db      	lsls	r3, r3, #3
 8015c6e:	4413      	add	r3, r2
 8015c70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8015c74:	f04f 0200 	mov.w	r2, #0
 8015c78:	f04f 0300 	mov.w	r3, #0
 8015c7c:	0a02      	lsrs	r2, r0, #8
 8015c7e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8015c82:	0a0b      	lsrs	r3, r1, #8
 8015c84:	6979      	ldr	r1, [r7, #20]
 8015c86:	00c9      	lsls	r1, r1, #3
 8015c88:	3106      	adds	r1, #6
 8015c8a:	68f8      	ldr	r0, [r7, #12]
 8015c8c:	4401      	add	r1, r0
 8015c8e:	b2d3      	uxtb	r3, r2
 8015c90:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 7] = (uint8_t) (ctx->state[i] & 0xff);
 8015c92:	68ba      	ldr	r2, [r7, #8]
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	00db      	lsls	r3, r3, #3
 8015c98:	4413      	add	r3, r2
 8015c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9e:	6979      	ldr	r1, [r7, #20]
 8015ca0:	00c9      	lsls	r1, r1, #3
 8015ca2:	3107      	adds	r1, #7
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	4401      	add	r1, r0
 8015ca8:	b2d3      	uxtb	r3, r2
 8015caa:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < 6; ++i) {
 8015cac:	697b      	ldr	r3, [r7, #20]
 8015cae:	3301      	adds	r3, #1
 8015cb0:	617b      	str	r3, [r7, #20]
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	2b05      	cmp	r3, #5
 8015cb6:	f67f af62 	bls.w	8015b7e <mg_sha384_final+0x294>
  }
}
 8015cba:	bf00      	nop
 8015cbc:	bf00      	nop
 8015cbe:	3718      	adds	r7, #24
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08015cc6 <mg_sha384>:

void mg_sha384(uint8_t dst[48], uint8_t *data, size_t datasz) {
 8015cc6:	b580      	push	{r7, lr}
 8015cc8:	b0ba      	sub	sp, #232	@ 0xe8
 8015cca:	af00      	add	r7, sp, #0
 8015ccc:	60f8      	str	r0, [r7, #12]
 8015cce:	60b9      	str	r1, [r7, #8]
 8015cd0:	607a      	str	r2, [r7, #4]
  mg_sha384_ctx ctx;
  mg_sha384_init(&ctx);
 8015cd2:	f107 0310 	add.w	r3, r7, #16
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7ff fd46 	bl	8015768 <mg_sha384_init>
  mg_sha384_update(&ctx, data, datasz);
 8015cdc:	f107 0310 	add.w	r3, r7, #16
 8015ce0:	687a      	ldr	r2, [r7, #4]
 8015ce2:	68b9      	ldr	r1, [r7, #8]
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f7ff fdab 	bl	8015840 <mg_sha384_update>
  mg_sha384_final(dst, &ctx);
 8015cea:	f107 0310 	add.w	r3, r7, #16
 8015cee:	4619      	mov	r1, r3
 8015cf0:	68f8      	ldr	r0, [r7, #12]
 8015cf2:	f7ff fdfa 	bl	80158ea <mg_sha384_final>
}
 8015cf6:	bf00      	nop
 8015cf8:	37e8      	adds	r7, #232	@ 0xe8
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}
	...

08015d00 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8015d00:	b5b0      	push	{r4, r5, r7, lr}
 8015d02:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 8015d04:	f7ea fd30 	bl	8000768 <mg_millis>
 8015d08:	4b05      	ldr	r3, [pc, #20]	@ (8015d20 <mg_now+0x20>)
 8015d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d0e:	1884      	adds	r4, r0, r2
 8015d10:	eb41 0503 	adc.w	r5, r1, r3
 8015d14:	4622      	mov	r2, r4
 8015d16:	462b      	mov	r3, r5
}
 8015d18:	4610      	mov	r0, r2
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8015d1e:	bf00      	nop
 8015d20:	240020f8 	.word	0x240020f8

08015d24 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	60f8      	str	r0, [r7, #12]
 8015d2c:	60b9      	str	r1, [r7, #8]
 8015d2e:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8015d30:	4b05      	ldr	r3, [pc, #20]	@ (8015d48 <mg_http_serve_ssi+0x24>)
 8015d32:	2200      	movs	r2, #0
 8015d34:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8015d38:	68f8      	ldr	r0, [r7, #12]
 8015d3a:	f7f5 fa5b 	bl	800b1f4 <mg_http_reply>
  (void) root, (void) fullpath;
}
 8015d3e:	bf00      	nop
 8015d40:	3710      	adds	r7, #16
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}
 8015d46:	bf00      	nop
 8015d48:	08027e70 	.word	0x08027e70

08015d4c <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b084      	sub	sp, #16
 8015d50:	af00      	add	r7, sp, #0
 8015d52:	6078      	str	r0, [r7, #4]
 8015d54:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 8015d56:	683b      	ldr	r3, [r7, #0]
 8015d58:	60bb      	str	r3, [r7, #8]
 8015d5a:	683b      	ldr	r3, [r7, #0]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d004      	beq.n	8015d6a <mg_str_s+0x1e>
 8015d60:	6838      	ldr	r0, [r7, #0]
 8015d62:	f7ea fb35 	bl	80003d0 <strlen>
 8015d66:	4603      	mov	r3, r0
 8015d68:	e000      	b.n	8015d6c <mg_str_s+0x20>
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	60fb      	str	r3, [r7, #12]
  return str;
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	461a      	mov	r2, r3
 8015d72:	f107 0308 	add.w	r3, r7, #8
 8015d76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d7a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8015d7e:	6878      	ldr	r0, [r7, #4]
 8015d80:	3710      	adds	r7, #16
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}

08015d86 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 8015d86:	b480      	push	{r7}
 8015d88:	b087      	sub	sp, #28
 8015d8a:	af00      	add	r7, sp, #0
 8015d8c:	60f8      	str	r0, [r7, #12]
 8015d8e:	60b9      	str	r1, [r7, #8]
 8015d90:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	613b      	str	r3, [r7, #16]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	617b      	str	r3, [r7, #20]
  return str;
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	461a      	mov	r2, r3
 8015d9e:	f107 0310 	add.w	r3, r7, #16
 8015da2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015da6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8015daa:	68f8      	ldr	r0, [r7, #12]
 8015dac:	371c      	adds	r7, #28
 8015dae:	46bd      	mov	sp, r7
 8015db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db4:	4770      	bx	lr

08015db6 <mg_tolc>:

static int mg_tolc(char c) {
 8015db6:	b480      	push	{r7}
 8015db8:	b083      	sub	sp, #12
 8015dba:	af00      	add	r7, sp, #0
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8015dc0:	79fb      	ldrb	r3, [r7, #7]
 8015dc2:	2b40      	cmp	r3, #64	@ 0x40
 8015dc4:	d905      	bls.n	8015dd2 <mg_tolc+0x1c>
 8015dc6:	79fb      	ldrb	r3, [r7, #7]
 8015dc8:	2b5a      	cmp	r3, #90	@ 0x5a
 8015dca:	d802      	bhi.n	8015dd2 <mg_tolc+0x1c>
 8015dcc:	79fb      	ldrb	r3, [r7, #7]
 8015dce:	3320      	adds	r3, #32
 8015dd0:	e000      	b.n	8015dd4 <mg_tolc+0x1e>
 8015dd2:	79fb      	ldrb	r3, [r7, #7]
}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	370c      	adds	r7, #12
 8015dd8:	46bd      	mov	sp, r7
 8015dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dde:	4770      	bx	lr

08015de0 <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b088      	sub	sp, #32
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	60f8      	str	r0, [r7, #12]
 8015de8:	1d3b      	adds	r3, r7, #4
 8015dea:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 8015dee:	2300      	movs	r3, #0
 8015df0:	617b      	str	r3, [r7, #20]
 8015df2:	2300      	movs	r3, #0
 8015df4:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 8015df6:	68bb      	ldr	r3, [r7, #8]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d01c      	beq.n	8015e36 <mg_strdup+0x56>
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d019      	beq.n	8015e36 <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	3301      	adds	r3, #1
 8015e06:	4619      	mov	r1, r3
 8015e08:	2001      	movs	r0, #1
 8015e0a:	f00f f8e5 	bl	8024fd8 <calloc>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 8015e12:	69fb      	ldr	r3, [r7, #28]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d00e      	beq.n	8015e36 <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	68ba      	ldr	r2, [r7, #8]
 8015e1c:	4619      	mov	r1, r3
 8015e1e:	69f8      	ldr	r0, [r7, #28]
 8015e20:	f00f fde9 	bl	80259f6 <memcpy>
      sc[s.len] = '\0';
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	69fa      	ldr	r2, [r7, #28]
 8015e28:	4413      	add	r3, r2
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 8015e2e:	69fb      	ldr	r3, [r7, #28]
 8015e30:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 8015e32:	68bb      	ldr	r3, [r7, #8]
 8015e34:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	461a      	mov	r2, r3
 8015e3a:	f107 0314 	add.w	r3, r7, #20
 8015e3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015e42:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8015e46:	68f8      	ldr	r0, [r7, #12]
 8015e48:	3720      	adds	r7, #32
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}

08015e4e <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8015e4e:	b490      	push	{r4, r7}
 8015e50:	b088      	sub	sp, #32
 8015e52:	af00      	add	r7, sp, #0
 8015e54:	f107 0408 	add.w	r4, r7, #8
 8015e58:	e884 0003 	stmia.w	r4, {r0, r1}
 8015e5c:	4639      	mov	r1, r7
 8015e5e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8015e62:	2300      	movs	r3, #0
 8015e64:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8015e66:	e019      	b.n	8015e9c <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 8015e68:	68ba      	ldr	r2, [r7, #8]
 8015e6a:	69fb      	ldr	r3, [r7, #28]
 8015e6c:	4413      	add	r3, r2
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 8015e72:	683a      	ldr	r2, [r7, #0]
 8015e74:	69fb      	ldr	r3, [r7, #28]
 8015e76:	4413      	add	r3, r2
 8015e78:	781b      	ldrb	r3, [r3, #0]
 8015e7a:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8015e7c:	69ba      	ldr	r2, [r7, #24]
 8015e7e:	697b      	ldr	r3, [r7, #20]
 8015e80:	429a      	cmp	r2, r3
 8015e82:	da02      	bge.n	8015e8a <mg_strcmp+0x3c>
 8015e84:	f04f 33ff 	mov.w	r3, #4294967295
 8015e88:	e01e      	b.n	8015ec8 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8015e8a:	69ba      	ldr	r2, [r7, #24]
 8015e8c:	697b      	ldr	r3, [r7, #20]
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	dd01      	ble.n	8015e96 <mg_strcmp+0x48>
 8015e92:	2301      	movs	r3, #1
 8015e94:	e018      	b.n	8015ec8 <mg_strcmp+0x7a>
    i++;
 8015e96:	69fb      	ldr	r3, [r7, #28]
 8015e98:	3301      	adds	r3, #1
 8015e9a:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8015e9c:	68fb      	ldr	r3, [r7, #12]
 8015e9e:	69fa      	ldr	r2, [r7, #28]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d203      	bcs.n	8015eac <mg_strcmp+0x5e>
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	69fa      	ldr	r2, [r7, #28]
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	d3dd      	bcc.n	8015e68 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	69fa      	ldr	r2, [r7, #28]
 8015eb0:	429a      	cmp	r2, r3
 8015eb2:	d201      	bcs.n	8015eb8 <mg_strcmp+0x6a>
 8015eb4:	2301      	movs	r3, #1
 8015eb6:	e007      	b.n	8015ec8 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	69fa      	ldr	r2, [r7, #28]
 8015ebc:	429a      	cmp	r2, r3
 8015ebe:	d202      	bcs.n	8015ec6 <mg_strcmp+0x78>
 8015ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ec4:	e000      	b.n	8015ec8 <mg_strcmp+0x7a>
  return 0;
 8015ec6:	2300      	movs	r3, #0
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3720      	adds	r7, #32
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bc90      	pop	{r4, r7}
 8015ed0:	4770      	bx	lr

08015ed2 <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8015ed2:	b590      	push	{r4, r7, lr}
 8015ed4:	b089      	sub	sp, #36	@ 0x24
 8015ed6:	af00      	add	r7, sp, #0
 8015ed8:	f107 0408 	add.w	r4, r7, #8
 8015edc:	e884 0003 	stmia.w	r4, {r0, r1}
 8015ee0:	4639      	mov	r1, r7
 8015ee2:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8015eea:	e01f      	b.n	8015f2c <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 8015eec:	68ba      	ldr	r2, [r7, #8]
 8015eee:	69fb      	ldr	r3, [r7, #28]
 8015ef0:	4413      	add	r3, r2
 8015ef2:	781b      	ldrb	r3, [r3, #0]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7ff ff5e 	bl	8015db6 <mg_tolc>
 8015efa:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 8015efc:	683a      	ldr	r2, [r7, #0]
 8015efe:	69fb      	ldr	r3, [r7, #28]
 8015f00:	4413      	add	r3, r2
 8015f02:	781b      	ldrb	r3, [r3, #0]
 8015f04:	4618      	mov	r0, r3
 8015f06:	f7ff ff56 	bl	8015db6 <mg_tolc>
 8015f0a:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 8015f0c:	69ba      	ldr	r2, [r7, #24]
 8015f0e:	697b      	ldr	r3, [r7, #20]
 8015f10:	429a      	cmp	r2, r3
 8015f12:	da02      	bge.n	8015f1a <mg_strcasecmp+0x48>
 8015f14:	f04f 33ff 	mov.w	r3, #4294967295
 8015f18:	e01e      	b.n	8015f58 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 8015f1a:	69ba      	ldr	r2, [r7, #24]
 8015f1c:	697b      	ldr	r3, [r7, #20]
 8015f1e:	429a      	cmp	r2, r3
 8015f20:	dd01      	ble.n	8015f26 <mg_strcasecmp+0x54>
 8015f22:	2301      	movs	r3, #1
 8015f24:	e018      	b.n	8015f58 <mg_strcasecmp+0x86>
    i++;
 8015f26:	69fb      	ldr	r3, [r7, #28]
 8015f28:	3301      	adds	r3, #1
 8015f2a:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	69fa      	ldr	r2, [r7, #28]
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d203      	bcs.n	8015f3c <mg_strcasecmp+0x6a>
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	69fa      	ldr	r2, [r7, #28]
 8015f38:	429a      	cmp	r2, r3
 8015f3a:	d3d7      	bcc.n	8015eec <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	69fa      	ldr	r2, [r7, #28]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d201      	bcs.n	8015f48 <mg_strcasecmp+0x76>
 8015f44:	2301      	movs	r3, #1
 8015f46:	e007      	b.n	8015f58 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	69fa      	ldr	r2, [r7, #28]
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d202      	bcs.n	8015f56 <mg_strcasecmp+0x84>
 8015f50:	f04f 33ff 	mov.w	r3, #4294967295
 8015f54:	e000      	b.n	8015f58 <mg_strcasecmp+0x86>
  return 0;
 8015f56:	2300      	movs	r3, #0
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3724      	adds	r7, #36	@ 0x24
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd90      	pop	{r4, r7, pc}

08015f60 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8015f60:	b490      	push	{r4, r7}
 8015f62:	b088      	sub	sp, #32
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	f107 0408 	add.w	r4, r7, #8
 8015f6a:	e884 0003 	stmia.w	r4, {r0, r1}
 8015f6e:	4639      	mov	r1, r7
 8015f70:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8015f74:	2300      	movs	r3, #0
 8015f76:	61fb      	str	r3, [r7, #28]
 8015f78:	2300      	movs	r3, #0
 8015f7a:	61bb      	str	r3, [r7, #24]
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	617b      	str	r3, [r7, #20]
 8015f80:	2300      	movs	r3, #0
 8015f82:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8015f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	f000 80ba 	beq.w	8016100 <mg_match+0x1a0>
 8015f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f8e:	2200      	movs	r2, #0
 8015f90:	601a      	str	r2, [r3, #0]
 8015f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f94:	2200      	movs	r2, #0
 8015f96:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8015f98:	e0b2      	b.n	8016100 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	69fa      	ldr	r2, [r7, #28]
 8015f9e:	429a      	cmp	r2, r3
 8015fa0:	d25b      	bcs.n	801605a <mg_match+0xfa>
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	69ba      	ldr	r2, [r7, #24]
 8015fa6:	429a      	cmp	r2, r3
 8015fa8:	d257      	bcs.n	801605a <mg_match+0xfa>
        (p.buf[i] == '?' ||
 8015faa:	683a      	ldr	r2, [r7, #0]
 8015fac:	69fb      	ldr	r3, [r7, #28]
 8015fae:	4413      	add	r3, r2
 8015fb0:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8015fb2:	2b3f      	cmp	r3, #63	@ 0x3f
 8015fb4:	d015      	beq.n	8015fe2 <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8015fb6:	683a      	ldr	r2, [r7, #0]
 8015fb8:	69fb      	ldr	r3, [r7, #28]
 8015fba:	4413      	add	r3, r2
 8015fbc:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 8015fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8015fc0:	d04b      	beq.n	801605a <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8015fc2:	683a      	ldr	r2, [r7, #0]
 8015fc4:	69fb      	ldr	r3, [r7, #28]
 8015fc6:	4413      	add	r3, r2
 8015fc8:	781b      	ldrb	r3, [r3, #0]
 8015fca:	2b23      	cmp	r3, #35	@ 0x23
 8015fcc:	d045      	beq.n	801605a <mg_match+0xfa>
 8015fce:	68ba      	ldr	r2, [r7, #8]
 8015fd0:	69bb      	ldr	r3, [r7, #24]
 8015fd2:	4413      	add	r3, r2
 8015fd4:	781a      	ldrb	r2, [r3, #0]
 8015fd6:	6839      	ldr	r1, [r7, #0]
 8015fd8:	69fb      	ldr	r3, [r7, #28]
 8015fda:	440b      	add	r3, r1
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d13b      	bne.n	801605a <mg_match+0xfa>
      if (caps == NULL) {
 8015fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d031      	beq.n	801604c <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8015fe8:	683a      	ldr	r2, [r7, #0]
 8015fea:	69fb      	ldr	r3, [r7, #28]
 8015fec:	4413      	add	r3, r2
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	2b3f      	cmp	r3, #63	@ 0x3f
 8015ff2:	d111      	bne.n	8016018 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8015ff4:	68ba      	ldr	r2, [r7, #8]
 8015ff6:	69bb      	ldr	r3, [r7, #24]
 8015ff8:	441a      	add	r2, r3
 8015ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ffc:	601a      	str	r2, [r3, #0]
 8015ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016000:	2201      	movs	r2, #1
 8016002:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8016004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016006:	3308      	adds	r3, #8
 8016008:	62bb      	str	r3, [r7, #40]	@ 0x28
 801600a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801600c:	2200      	movs	r2, #0
 801600e:	601a      	str	r2, [r3, #0]
 8016010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016012:	2200      	movs	r2, #0
 8016014:	605a      	str	r2, [r3, #4]
 8016016:	e019      	b.n	801604c <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8016018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d015      	beq.n	801604c <mg_match+0xec>
 8016020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016022:	685b      	ldr	r3, [r3, #4]
 8016024:	2b00      	cmp	r3, #0
 8016026:	d111      	bne.n	801604c <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 8016028:	68ba      	ldr	r2, [r7, #8]
 801602a:	69bb      	ldr	r3, [r7, #24]
 801602c:	441a      	add	r2, r3
 801602e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	1ad3      	subs	r3, r2, r3
 8016034:	461a      	mov	r2, r3
 8016036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016038:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 801603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801603c:	3308      	adds	r3, #8
 801603e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016042:	2200      	movs	r2, #0
 8016044:	605a      	str	r2, [r3, #4]
 8016046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016048:	2200      	movs	r2, #0
 801604a:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 801604c:	69fb      	ldr	r3, [r7, #28]
 801604e:	3301      	adds	r3, #1
 8016050:	61fb      	str	r3, [r7, #28]
 8016052:	69bb      	ldr	r3, [r7, #24]
 8016054:	3301      	adds	r3, #1
 8016056:	61bb      	str	r3, [r7, #24]
 8016058:	e052      	b.n	8016100 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	69fa      	ldr	r2, [r7, #28]
 801605e:	429a      	cmp	r2, r3
 8016060:	d222      	bcs.n	80160a8 <mg_match+0x148>
 8016062:	683a      	ldr	r2, [r7, #0]
 8016064:	69fb      	ldr	r3, [r7, #28]
 8016066:	4413      	add	r3, r2
 8016068:	781b      	ldrb	r3, [r3, #0]
 801606a:	2b2a      	cmp	r3, #42	@ 0x2a
 801606c:	d005      	beq.n	801607a <mg_match+0x11a>
 801606e:	683a      	ldr	r2, [r7, #0]
 8016070:	69fb      	ldr	r3, [r7, #28]
 8016072:	4413      	add	r3, r2
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	2b23      	cmp	r3, #35	@ 0x23
 8016078:	d116      	bne.n	80160a8 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 801607a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801607c:	2b00      	cmp	r3, #0
 801607e:	d00b      	beq.n	8016098 <mg_match+0x138>
 8016080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d107      	bne.n	8016098 <mg_match+0x138>
 8016088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801608a:	2200      	movs	r2, #0
 801608c:	605a      	str	r2, [r3, #4]
 801608e:	68ba      	ldr	r2, [r7, #8]
 8016090:	69bb      	ldr	r3, [r7, #24]
 8016092:	441a      	add	r2, r3
 8016094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016096:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8016098:	69fb      	ldr	r3, [r7, #28]
 801609a:	1c5a      	adds	r2, r3, #1
 801609c:	61fa      	str	r2, [r7, #28]
 801609e:	617b      	str	r3, [r7, #20]
 80160a0:	69bb      	ldr	r3, [r7, #24]
 80160a2:	3301      	adds	r3, #1
 80160a4:	613b      	str	r3, [r7, #16]
 80160a6:	e02b      	b.n	8016100 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	d025      	beq.n	80160fa <mg_match+0x19a>
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	693a      	ldr	r2, [r7, #16]
 80160b2:	429a      	cmp	r2, r3
 80160b4:	d821      	bhi.n	80160fa <mg_match+0x19a>
 80160b6:	683a      	ldr	r2, [r7, #0]
 80160b8:	697b      	ldr	r3, [r7, #20]
 80160ba:	4413      	add	r3, r2
 80160bc:	781b      	ldrb	r3, [r3, #0]
 80160be:	2b23      	cmp	r3, #35	@ 0x23
 80160c0:	d005      	beq.n	80160ce <mg_match+0x16e>
 80160c2:	68ba      	ldr	r2, [r7, #8]
 80160c4:	69bb      	ldr	r3, [r7, #24]
 80160c6:	4413      	add	r3, r2
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80160cc:	d015      	beq.n	80160fa <mg_match+0x19a>
      i = ni, j = nj;
 80160ce:	697b      	ldr	r3, [r7, #20]
 80160d0:	61fb      	str	r3, [r7, #28]
 80160d2:	693b      	ldr	r3, [r7, #16]
 80160d4:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 80160d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d010      	beq.n	80160fe <mg_match+0x19e>
 80160dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d10c      	bne.n	80160fe <mg_match+0x19e>
 80160e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d108      	bne.n	80160fe <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 80160ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160ee:	3b08      	subs	r3, #8
 80160f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80160f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160f4:	2200      	movs	r2, #0
 80160f6:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 80160f8:	e001      	b.n	80160fe <mg_match+0x19e>
      }
    } else {
      return false;
 80160fa:	2300      	movs	r3, #0
 80160fc:	e01f      	b.n	801613e <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 80160fe:	bf00      	nop
  while (i < p.len || j < s.len) {
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	69fa      	ldr	r2, [r7, #28]
 8016104:	429a      	cmp	r2, r3
 8016106:	f4ff af48 	bcc.w	8015f9a <mg_match+0x3a>
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	69ba      	ldr	r2, [r7, #24]
 801610e:	429a      	cmp	r2, r3
 8016110:	f4ff af43 	bcc.w	8015f9a <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8016114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016116:	2b00      	cmp	r3, #0
 8016118:	d010      	beq.n	801613c <mg_match+0x1dc>
 801611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d00c      	beq.n	801613c <mg_match+0x1dc>
 8016122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016124:	685b      	ldr	r3, [r3, #4]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d108      	bne.n	801613c <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 801612a:	68ba      	ldr	r2, [r7, #8]
 801612c:	69bb      	ldr	r3, [r7, #24]
 801612e:	441a      	add	r2, r3
 8016130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	1ad3      	subs	r3, r2, r3
 8016136:	461a      	mov	r2, r3
 8016138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801613a:	605a      	str	r2, [r3, #4]
  }
  return true;
 801613c:	2301      	movs	r3, #1
}
 801613e:	4618      	mov	r0, r3
 8016140:	3720      	adds	r7, #32
 8016142:	46bd      	mov	sp, r7
 8016144:	bc90      	pop	{r4, r7}
 8016146:	4770      	bx	lr

08016148 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 8016148:	b590      	push	{r4, r7, lr}
 801614a:	b089      	sub	sp, #36	@ 0x24
 801614c:	af00      	add	r7, sp, #0
 801614e:	f107 0410 	add.w	r4, r7, #16
 8016152:	e884 0003 	stmia.w	r4, {r0, r1}
 8016156:	60fa      	str	r2, [r7, #12]
 8016158:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 801615a:	697b      	ldr	r3, [r7, #20]
 801615c:	2b00      	cmp	r3, #0
 801615e:	d002      	beq.n	8016166 <mg_span+0x1e>
 8016160:	693b      	ldr	r3, [r7, #16]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d101      	bne.n	801616a <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 8016166:	2300      	movs	r3, #0
 8016168:	e047      	b.n	80161fa <mg_span+0xb2>
  } else {
    size_t len = 0;
 801616a:	2300      	movs	r3, #0
 801616c:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 801616e:	e002      	b.n	8016176 <mg_span+0x2e>
 8016170:	69fb      	ldr	r3, [r7, #28]
 8016172:	3301      	adds	r3, #1
 8016174:	61fb      	str	r3, [r7, #28]
 8016176:	697b      	ldr	r3, [r7, #20]
 8016178:	69fa      	ldr	r2, [r7, #28]
 801617a:	429a      	cmp	r2, r3
 801617c:	d207      	bcs.n	801618e <mg_span+0x46>
 801617e:	693a      	ldr	r2, [r7, #16]
 8016180:	69fb      	ldr	r3, [r7, #28]
 8016182:	4413      	add	r3, r2
 8016184:	781b      	ldrb	r3, [r3, #0]
 8016186:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801618a:	429a      	cmp	r2, r3
 801618c:	d1f0      	bne.n	8016170 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d00c      	beq.n	80161ae <mg_span+0x66>
 8016194:	6939      	ldr	r1, [r7, #16]
 8016196:	68fc      	ldr	r4, [r7, #12]
 8016198:	463b      	mov	r3, r7
 801619a:	69fa      	ldr	r2, [r7, #28]
 801619c:	4618      	mov	r0, r3
 801619e:	f7ff fdf2 	bl	8015d86 <mg_str_n>
 80161a2:	4622      	mov	r2, r4
 80161a4:	463b      	mov	r3, r7
 80161a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80161aa:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d010      	beq.n	80161d6 <mg_span+0x8e>
 80161b4:	693a      	ldr	r2, [r7, #16]
 80161b6:	69fb      	ldr	r3, [r7, #28]
 80161b8:	18d1      	adds	r1, r2, r3
 80161ba:	697a      	ldr	r2, [r7, #20]
 80161bc:	69fb      	ldr	r3, [r7, #28]
 80161be:	1ad2      	subs	r2, r2, r3
 80161c0:	68bc      	ldr	r4, [r7, #8]
 80161c2:	463b      	mov	r3, r7
 80161c4:	4618      	mov	r0, r3
 80161c6:	f7ff fdde 	bl	8015d86 <mg_str_n>
 80161ca:	4622      	mov	r2, r4
 80161cc:	463b      	mov	r3, r7
 80161ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80161d2:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d00d      	beq.n	80161f8 <mg_span+0xb0>
 80161dc:	697b      	ldr	r3, [r7, #20]
 80161de:	69fa      	ldr	r2, [r7, #28]
 80161e0:	429a      	cmp	r2, r3
 80161e2:	d209      	bcs.n	80161f8 <mg_span+0xb0>
 80161e4:	68bb      	ldr	r3, [r7, #8]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	1c5a      	adds	r2, r3, #1
 80161ea:	68bb      	ldr	r3, [r7, #8]
 80161ec:	601a      	str	r2, [r3, #0]
 80161ee:	68bb      	ldr	r3, [r7, #8]
 80161f0:	685b      	ldr	r3, [r3, #4]
 80161f2:	1e5a      	subs	r2, r3, #1
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	605a      	str	r2, [r3, #4]
    return true;
 80161f8:	2301      	movs	r3, #1
  }
}
 80161fa:	4618      	mov	r0, r3
 80161fc:	3724      	adds	r7, #36	@ 0x24
 80161fe:	46bd      	mov	sp, r7
 8016200:	bd90      	pop	{r4, r7, pc}

08016202 <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8016202:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016206:	b0a5      	sub	sp, #148	@ 0x94
 8016208:	af00      	add	r7, sp, #0
 801620a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 801620e:	e884 0003 	stmia.w	r4, {r0, r1}
 8016212:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8016214:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8016216:	2300      	movs	r3, #0
 8016218:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801621c:	2300      	movs	r3, #0
 801621e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8016222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016226:	2b01      	cmp	r3, #1
 8016228:	d016      	beq.n	8016258 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 801622a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801622e:	2b02      	cmp	r3, #2
 8016230:	d00d      	beq.n	801624e <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 8016232:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016236:	2b04      	cmp	r3, #4
 8016238:	d104      	bne.n	8016244 <mg_str_to_num+0x42>
 801623a:	f04f 32ff 	mov.w	r2, #4294967295
 801623e:	f04f 0300 	mov.w	r3, #0
 8016242:	e00d      	b.n	8016260 <mg_str_to_num+0x5e>
 8016244:	f04f 32ff 	mov.w	r2, #4294967295
 8016248:	f04f 33ff 	mov.w	r3, #4294967295
 801624c:	e008      	b.n	8016260 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 801624e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016252:	f04f 0300 	mov.w	r3, #0
 8016256:	e003      	b.n	8016260 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 8016258:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 801625c:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 8016260:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 8016264:	f04f 0200 	mov.w	r2, #0
 8016268:	f04f 0300 	mov.w	r3, #0
 801626c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 8016270:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8016274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016278:	bf08      	it	eq
 801627a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 801627e:	d105      	bne.n	801628c <mg_str_to_num+0x8a>
 8016280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016284:	2b08      	cmp	r3, #8
 8016286:	d001      	beq.n	801628c <mg_str_to_num+0x8a>
 8016288:	2300      	movs	r3, #0
 801628a:	e1e8      	b.n	801665e <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 801628c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801628e:	2b00      	cmp	r3, #0
 8016290:	d12d      	bne.n	80162ee <mg_str_to_num+0xec>
 8016292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016294:	2b01      	cmp	r3, #1
 8016296:	d92a      	bls.n	80162ee <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8016298:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801629a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801629e:	4413      	add	r3, r2
 80162a0:	781b      	ldrb	r3, [r3, #0]
 80162a2:	2b30      	cmp	r3, #48	@ 0x30
 80162a4:	d121      	bne.n	80162ea <mg_str_to_num+0xe8>
      i++;
 80162a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162aa:	3301      	adds	r3, #1
 80162ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 80162b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80162b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162b6:	4413      	add	r3, r2
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	2b62      	cmp	r3, #98	@ 0x62
 80162bc:	d00a      	beq.n	80162d4 <mg_str_to_num+0xd2>
 80162be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80162c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162c4:	4413      	add	r3, r2
 80162c6:	781b      	ldrb	r3, [r3, #0]
 80162c8:	2b78      	cmp	r3, #120	@ 0x78
 80162ca:	d101      	bne.n	80162d0 <mg_str_to_num+0xce>
 80162cc:	2310      	movs	r3, #16
 80162ce:	e002      	b.n	80162d6 <mg_str_to_num+0xd4>
 80162d0:	230a      	movs	r3, #10
 80162d2:	e000      	b.n	80162d6 <mg_str_to_num+0xd4>
 80162d4:	2302      	movs	r3, #2
 80162d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 80162d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80162da:	2b0a      	cmp	r3, #10
 80162dc:	d007      	beq.n	80162ee <mg_str_to_num+0xec>
 80162de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80162e2:	3301      	adds	r3, #1
 80162e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80162e8:	e001      	b.n	80162ee <mg_str_to_num+0xec>
    } else {
      base = 10;
 80162ea:	230a      	movs	r3, #10
 80162ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 80162ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80162f0:	2b10      	cmp	r3, #16
 80162f2:	f000 8178 	beq.w	80165e6 <mg_str_to_num+0x3e4>
 80162f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80162f8:	2b10      	cmp	r3, #16
 80162fa:	f300 817d 	bgt.w	80165f8 <mg_str_to_num+0x3f6>
 80162fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016300:	2b02      	cmp	r3, #2
 8016302:	d052      	beq.n	80163aa <mg_str_to_num+0x1a8>
 8016304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016306:	2b0a      	cmp	r3, #10
 8016308:	f000 80cd 	beq.w	80164a6 <mg_str_to_num+0x2a4>
 801630c:	e174      	b.n	80165f8 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 801630e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8016310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016314:	4413      	add	r3, r2
 8016316:	781b      	ldrb	r3, [r3, #0]
 8016318:	3b30      	subs	r3, #48	@ 0x30
 801631a:	17da      	asrs	r2, r3, #31
 801631c:	633b      	str	r3, [r7, #48]	@ 0x30
 801631e:	637a      	str	r2, [r7, #52]	@ 0x34
 8016320:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8016324:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 8016328:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801632c:	f04f 0200 	mov.w	r2, #0
 8016330:	f04f 0300 	mov.w	r3, #0
 8016334:	0842      	lsrs	r2, r0, #1
 8016336:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 801633a:	084b      	lsrs	r3, r1, #1
 801633c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8016340:	4282      	cmp	r2, r0
 8016342:	418b      	sbcs	r3, r1
 8016344:	d201      	bcs.n	801634a <mg_str_to_num+0x148>
 8016346:	2300      	movs	r3, #0
 8016348:	e189      	b.n	801665e <mg_str_to_num+0x45c>
        result *= 2;
 801634a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801634e:	1891      	adds	r1, r2, r2
 8016350:	62b9      	str	r1, [r7, #40]	@ 0x28
 8016352:	415b      	adcs	r3, r3
 8016354:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016356:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 801635a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 801635e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8016366:	1a85      	subs	r5, r0, r2
 8016368:	eb61 0603 	sbc.w	r6, r1, r3
 801636c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8016370:	4295      	cmp	r5, r2
 8016372:	eb76 0303 	sbcs.w	r3, r6, r3
 8016376:	d201      	bcs.n	801637c <mg_str_to_num+0x17a>
 8016378:	2300      	movs	r3, #0
 801637a:	e170      	b.n	801665e <mg_str_to_num+0x45c>
        result += digit;
 801637c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8016380:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8016384:	1884      	adds	r4, r0, r2
 8016386:	623c      	str	r4, [r7, #32]
 8016388:	eb41 0303 	adc.w	r3, r1, r3
 801638c:	627b      	str	r3, [r7, #36]	@ 0x24
 801638e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8016392:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8016396:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801639a:	3301      	adds	r3, #1
 801639c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80163a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80163a4:	3301      	adds	r3, #1
 80163a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 80163aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80163ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80163b0:	429a      	cmp	r2, r3
 80163b2:	f080 8123 	bcs.w	80165fc <mg_str_to_num+0x3fa>
 80163b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80163b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80163bc:	4413      	add	r3, r2
 80163be:	781b      	ldrb	r3, [r3, #0]
 80163c0:	2b30      	cmp	r3, #48	@ 0x30
 80163c2:	d0a4      	beq.n	801630e <mg_str_to_num+0x10c>
 80163c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80163c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80163ca:	4413      	add	r3, r2
 80163cc:	781b      	ldrb	r3, [r3, #0]
 80163ce:	2b31      	cmp	r3, #49	@ 0x31
 80163d0:	d09d      	beq.n	801630e <mg_str_to_num+0x10c>
      }
      break;
 80163d2:	e113      	b.n	80165fc <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 80163d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80163d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80163da:	4413      	add	r3, r2
 80163dc:	781b      	ldrb	r3, [r3, #0]
 80163de:	3b30      	subs	r3, #48	@ 0x30
 80163e0:	17da      	asrs	r2, r3, #31
 80163e2:	61bb      	str	r3, [r7, #24]
 80163e4:	61fa      	str	r2, [r7, #28]
 80163e6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80163ea:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 80163ee:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80163f2:	f04f 020a 	mov.w	r2, #10
 80163f6:	f04f 0300 	mov.w	r3, #0
 80163fa:	f7e9 fff1 	bl	80003e0 <__aeabi_uldivmod>
 80163fe:	4602      	mov	r2, r0
 8016400:	460b      	mov	r3, r1
 8016402:	4610      	mov	r0, r2
 8016404:	4619      	mov	r1, r3
 8016406:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801640a:	4290      	cmp	r0, r2
 801640c:	eb71 0303 	sbcs.w	r3, r1, r3
 8016410:	d201      	bcs.n	8016416 <mg_str_to_num+0x214>
 8016412:	2300      	movs	r3, #0
 8016414:	e123      	b.n	801665e <mg_str_to_num+0x45c>
        result *= 10;
 8016416:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801641a:	4622      	mov	r2, r4
 801641c:	462b      	mov	r3, r5
 801641e:	f04f 0000 	mov.w	r0, #0
 8016422:	f04f 0100 	mov.w	r1, #0
 8016426:	0099      	lsls	r1, r3, #2
 8016428:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 801642c:	0090      	lsls	r0, r2, #2
 801642e:	4602      	mov	r2, r0
 8016430:	460b      	mov	r3, r1
 8016432:	eb12 0804 	adds.w	r8, r2, r4
 8016436:	eb43 0905 	adc.w	r9, r3, r5
 801643a:	eb18 0308 	adds.w	r3, r8, r8
 801643e:	613b      	str	r3, [r7, #16]
 8016440:	eb49 0309 	adc.w	r3, r9, r9
 8016444:	617b      	str	r3, [r7, #20]
 8016446:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 801644a:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 801644e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016452:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8016456:	1a84      	subs	r4, r0, r2
 8016458:	63bc      	str	r4, [r7, #56]	@ 0x38
 801645a:	eb61 0303 	sbc.w	r3, r1, r3
 801645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016460:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8016464:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8016468:	4621      	mov	r1, r4
 801646a:	4291      	cmp	r1, r2
 801646c:	4629      	mov	r1, r5
 801646e:	eb71 0303 	sbcs.w	r3, r1, r3
 8016472:	d201      	bcs.n	8016478 <mg_str_to_num+0x276>
 8016474:	2300      	movs	r3, #0
 8016476:	e0f2      	b.n	801665e <mg_str_to_num+0x45c>
        result += digit;
 8016478:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801647c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8016480:	1884      	adds	r4, r0, r2
 8016482:	60bc      	str	r4, [r7, #8]
 8016484:	eb41 0303 	adc.w	r3, r1, r3
 8016488:	60fb      	str	r3, [r7, #12]
 801648a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801648e:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8016492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016496:	3301      	adds	r3, #1
 8016498:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801649c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80164a0:	3301      	adds	r3, #1
 80164a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 80164a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164a8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80164ac:	429a      	cmp	r2, r3
 80164ae:	f080 80a7 	bcs.w	8016600 <mg_str_to_num+0x3fe>
 80164b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80164b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80164b8:	4413      	add	r3, r2
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80164be:	f240 809f 	bls.w	8016600 <mg_str_to_num+0x3fe>
 80164c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80164c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80164c8:	4413      	add	r3, r2
 80164ca:	781b      	ldrb	r3, [r3, #0]
 80164cc:	2b39      	cmp	r3, #57	@ 0x39
 80164ce:	d981      	bls.n	80163d4 <mg_str_to_num+0x1d2>
      }
      break;
 80164d0:	e096      	b.n	8016600 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 80164d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80164d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80164d8:	4413      	add	r3, r2
 80164da:	781b      	ldrb	r3, [r3, #0]
 80164dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80164e0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80164e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80164e6:	d90a      	bls.n	80164fe <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80164e8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80164ec:	2b39      	cmp	r3, #57	@ 0x39
 80164ee:	d806      	bhi.n	80164fe <mg_str_to_num+0x2fc>
 80164f0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80164f4:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 80164f6:	17da      	asrs	r2, r3, #31
 80164f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80164fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80164fc:	e023      	b.n	8016546 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80164fe:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016502:	2b40      	cmp	r3, #64	@ 0x40
 8016504:	d90a      	bls.n	801651c <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8016506:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801650a:	2b46      	cmp	r3, #70	@ 0x46
 801650c:	d806      	bhi.n	801651c <mg_str_to_num+0x31a>
 801650e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016512:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8016514:	17da      	asrs	r2, r3, #31
 8016516:	643b      	str	r3, [r7, #64]	@ 0x40
 8016518:	647a      	str	r2, [r7, #68]	@ 0x44
 801651a:	e014      	b.n	8016546 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 801651c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016520:	2b60      	cmp	r3, #96	@ 0x60
 8016522:	d90a      	bls.n	801653a <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8016524:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016528:	2b66      	cmp	r3, #102	@ 0x66
 801652a:	d806      	bhi.n	801653a <mg_str_to_num+0x338>
 801652c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8016530:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 8016532:	17da      	asrs	r2, r3, #31
 8016534:	643b      	str	r3, [r7, #64]	@ 0x40
 8016536:	647a      	str	r2, [r7, #68]	@ 0x44
 8016538:	e005      	b.n	8016546 <mg_str_to_num+0x344>
 801653a:	f04f 33ff 	mov.w	r3, #4294967295
 801653e:	f04f 34ff 	mov.w	r4, #4294967295
 8016542:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8016546:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 801654a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 801654e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8016552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016556:	bf08      	it	eq
 8016558:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 801655c:	d04a      	beq.n	80165f4 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 801655e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8016562:	f04f 0200 	mov.w	r2, #0
 8016566:	f04f 0300 	mov.w	r3, #0
 801656a:	0902      	lsrs	r2, r0, #4
 801656c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8016570:	090b      	lsrs	r3, r1, #4
 8016572:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8016576:	4282      	cmp	r2, r0
 8016578:	418b      	sbcs	r3, r1
 801657a:	d201      	bcs.n	8016580 <mg_str_to_num+0x37e>
 801657c:	2300      	movs	r3, #0
 801657e:	e06e      	b.n	801665e <mg_str_to_num+0x45c>
        result *= 16;
 8016580:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8016584:	f04f 0200 	mov.w	r2, #0
 8016588:	f04f 0300 	mov.w	r3, #0
 801658c:	010b      	lsls	r3, r1, #4
 801658e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8016592:	0102      	lsls	r2, r0, #4
 8016594:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8016598:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801659c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80165a0:	ebb0 0a02 	subs.w	sl, r0, r2
 80165a4:	eb61 0b03 	sbc.w	fp, r1, r3
 80165a8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80165ac:	4592      	cmp	sl, r2
 80165ae:	eb7b 0303 	sbcs.w	r3, fp, r3
 80165b2:	d201      	bcs.n	80165b8 <mg_str_to_num+0x3b6>
 80165b4:	2300      	movs	r3, #0
 80165b6:	e052      	b.n	801665e <mg_str_to_num+0x45c>
        result += digit;
 80165b8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80165bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80165c0:	1884      	adds	r4, r0, r2
 80165c2:	603c      	str	r4, [r7, #0]
 80165c4:	eb41 0303 	adc.w	r3, r1, r3
 80165c8:	607b      	str	r3, [r7, #4]
 80165ca:	e9d7 3400 	ldrd	r3, r4, [r7]
 80165ce:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 80165d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80165d6:	3301      	adds	r3, #1
 80165d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80165dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80165e0:	3301      	adds	r3, #1
 80165e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 80165e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80165e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80165ec:	429a      	cmp	r2, r3
 80165ee:	f4ff af70 	bcc.w	80164d2 <mg_str_to_num+0x2d0>
      }
      break;
 80165f2:	e006      	b.n	8016602 <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 80165f4:	bf00      	nop
      break;
 80165f6:	e004      	b.n	8016602 <mg_str_to_num+0x400>
    default:
      return false;
 80165f8:	2300      	movs	r3, #0
 80165fa:	e030      	b.n	801665e <mg_str_to_num+0x45c>
      break;
 80165fc:	bf00      	nop
 80165fe:	e000      	b.n	8016602 <mg_str_to_num+0x400>
      break;
 8016600:	bf00      	nop
  }
  if (ndigits == 0) return false;
 8016602:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016606:	2b00      	cmp	r3, #0
 8016608:	d101      	bne.n	801660e <mg_str_to_num+0x40c>
 801660a:	2300      	movs	r3, #0
 801660c:	e027      	b.n	801665e <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 801660e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016610:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016614:	429a      	cmp	r2, r3
 8016616:	d001      	beq.n	801661c <mg_str_to_num+0x41a>
 8016618:	2300      	movs	r3, #0
 801661a:	e020      	b.n	801665e <mg_str_to_num+0x45c>
  if (val_len == 1) {
 801661c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016620:	2b01      	cmp	r3, #1
 8016622:	d104      	bne.n	801662e <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 8016624:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 8016628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801662a:	701a      	strb	r2, [r3, #0]
 801662c:	e016      	b.n	801665c <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 801662e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016632:	2b02      	cmp	r3, #2
 8016634:	d104      	bne.n	8016640 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 8016636:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 801663a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801663c:	801a      	strh	r2, [r3, #0]
 801663e:	e00d      	b.n	801665c <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 8016640:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016644:	2b04      	cmp	r3, #4
 8016646:	d104      	bne.n	8016652 <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 8016648:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801664c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801664e:	601a      	str	r2, [r3, #0]
 8016650:	e004      	b.n	801665c <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 8016652:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8016654:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8016658:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 801665c:	2301      	movs	r3, #1
}
 801665e:	4618      	mov	r0, r3
 8016660:	3794      	adds	r7, #148	@ 0x94
 8016662:	46bd      	mov	sp, r7
 8016664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016668 <mg_timer_init>:
#endif



void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 8016668:	b480      	push	{r7}
 801666a:	b085      	sub	sp, #20
 801666c:	af00      	add	r7, sp, #0
 801666e:	60f8      	str	r0, [r7, #12]
 8016670:	60b9      	str	r1, [r7, #8]
 8016672:	e9c7 2300 	strd	r2, r3, [r7]
  t->period_ms = ms, t->expire = 0;
 8016676:	68b9      	ldr	r1, [r7, #8]
 8016678:	e9d7 2300 	ldrd	r2, r3, [r7]
 801667c:	e9c1 2300 	strd	r2, r3, [r1]
 8016680:	68b9      	ldr	r1, [r7, #8]
 8016682:	f04f 0200 	mov.w	r2, #0
 8016686:	f04f 0300 	mov.w	r3, #0
 801668a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 801668e:	68bb      	ldr	r3, [r7, #8]
 8016690:	69ba      	ldr	r2, [r7, #24]
 8016692:	611a      	str	r2, [r3, #16]
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	69fa      	ldr	r2, [r7, #28]
 8016698:	615a      	str	r2, [r3, #20]
 801669a:	68bb      	ldr	r3, [r7, #8]
 801669c:	6a3a      	ldr	r2, [r7, #32]
 801669e:	619a      	str	r2, [r3, #24]
 80166a0:	68fb      	ldr	r3, [r7, #12]
 80166a2:	681a      	ldr	r2, [r3, #0]
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	61da      	str	r2, [r3, #28]
  *head = t;
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	68ba      	ldr	r2, [r7, #8]
 80166ac:	601a      	str	r2, [r3, #0]
}
 80166ae:	bf00      	nop
 80166b0:	3714      	adds	r7, #20
 80166b2:	46bd      	mov	sp, r7
 80166b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b8:	4770      	bx	lr

080166ba <mg_timer_free>:

void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {
 80166ba:	b480      	push	{r7}
 80166bc:	b083      	sub	sp, #12
 80166be:	af00      	add	r7, sp, #0
 80166c0:	6078      	str	r0, [r7, #4]
 80166c2:	6039      	str	r1, [r7, #0]
  while (*head && *head != t) head = &(*head)->next;
 80166c4:	e003      	b.n	80166ce <mg_timer_free+0x14>
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	331c      	adds	r3, #28
 80166cc:	607b      	str	r3, [r7, #4]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d004      	beq.n	80166e0 <mg_timer_free+0x26>
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	683a      	ldr	r2, [r7, #0]
 80166dc:	429a      	cmp	r2, r3
 80166de:	d1f2      	bne.n	80166c6 <mg_timer_free+0xc>
  if (*head) *head = t->next;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d003      	beq.n	80166f0 <mg_timer_free+0x36>
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	69da      	ldr	r2, [r3, #28]
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	601a      	str	r2, [r3, #0]
}
 80166f0:	bf00      	nop
 80166f2:	370c      	adds	r7, #12
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr

080166fc <mg_timer_expired>:

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 80166fc:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8016700:	b086      	sub	sp, #24
 8016702:	af00      	add	r7, sp, #0
 8016704:	6178      	str	r0, [r7, #20]
 8016706:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 801670a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801670e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016712:	eb10 0a02 	adds.w	sl, r0, r2
 8016716:	eb41 0b03 	adc.w	fp, r1, r3
 801671a:	697b      	ldr	r3, [r7, #20]
 801671c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016720:	4592      	cmp	sl, r2
 8016722:	eb7b 0303 	sbcs.w	r3, fp, r3
 8016726:	d206      	bcs.n	8016736 <mg_timer_expired+0x3a>
 8016728:	6979      	ldr	r1, [r7, #20]
 801672a:	f04f 0200 	mov.w	r2, #0
 801672e:	f04f 0300 	mov.w	r3, #0
 8016732:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8016736:	697b      	ldr	r3, [r7, #20]
 8016738:	e9d3 2300 	ldrd	r2, r3, [r3]
 801673c:	4313      	orrs	r3, r2
 801673e:	d10d      	bne.n	801675c <mg_timer_expired+0x60>
 8016740:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8016744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016748:	1886      	adds	r6, r0, r2
 801674a:	603e      	str	r6, [r7, #0]
 801674c:	eb41 0303 	adc.w	r3, r1, r3
 8016750:	607b      	str	r3, [r7, #4]
 8016752:	697b      	ldr	r3, [r7, #20]
 8016754:	e9d7 1200 	ldrd	r1, r2, [r7]
 8016758:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016762:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8016766:	4290      	cmp	r0, r2
 8016768:	eb71 0303 	sbcs.w	r3, r1, r3
 801676c:	d201      	bcs.n	8016772 <mg_timer_expired+0x76>
 801676e:	2300      	movs	r3, #0
 8016770:	e022      	b.n	80167b8 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8016772:	697b      	ldr	r3, [r7, #20]
 8016774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016778:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801677c:	ebb0 0802 	subs.w	r8, r0, r2
 8016780:	eb61 0903 	sbc.w	r9, r1, r3
 8016784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016788:	4542      	cmp	r2, r8
 801678a:	eb73 0309 	sbcs.w	r3, r3, r9
 801678e:	d207      	bcs.n	80167a0 <mg_timer_expired+0xa4>
 8016790:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8016794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016798:	1884      	adds	r4, r0, r2
 801679a:	eb41 0503 	adc.w	r5, r1, r3
 801679e:	e007      	b.n	80167b0 <mg_timer_expired+0xb4>
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80167a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80167aa:	1884      	adds	r4, r0, r2
 80167ac:	eb41 0503 	adc.w	r5, r1, r3
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 80167b6:	2301      	movs	r3, #1
}
 80167b8:	4618      	mov	r0, r3
 80167ba:	3718      	adds	r7, #24
 80167bc:	46bd      	mov	sp, r7
 80167be:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80167c2:	4770      	bx	lr

080167c4 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 80167c4:	b590      	push	{r4, r7, lr}
 80167c6:	b08b      	sub	sp, #44	@ 0x2c
 80167c8:	af02      	add	r7, sp, #8
 80167ca:	60f8      	str	r0, [r7, #12]
 80167cc:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	61fb      	str	r3, [r7, #28]
 80167d6:	e067      	b.n	80168a8 <mg_timer_poll+0xe4>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80167d8:	69fb      	ldr	r3, [r7, #28]
 80167da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80167de:	4313      	orrs	r3, r2
 80167e0:	d10d      	bne.n	80167fe <mg_timer_poll+0x3a>
 80167e2:	69fb      	ldr	r3, [r7, #28]
 80167e4:	691b      	ldr	r3, [r3, #16]
 80167e6:	f003 0302 	and.w	r3, r3, #2
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d007      	beq.n	80167fe <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	691b      	ldr	r3, [r3, #16]
 80167f2:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d101      	bne.n	80167fe <mg_timer_poll+0x3a>
 80167fa:	2301      	movs	r3, #1
 80167fc:	e000      	b.n	8016800 <mg_timer_poll+0x3c>
 80167fe:	2300      	movs	r3, #0
 8016800:	76fb      	strb	r3, [r7, #27]
 8016802:	7efb      	ldrb	r3, [r7, #27]
 8016804:	f003 0301 	and.w	r3, r3, #1
 8016808:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 801680a:	69fb      	ldr	r3, [r7, #28]
 801680c:	f103 0408 	add.w	r4, r3, #8
 8016810:	69fb      	ldr	r3, [r7, #28]
 8016812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016816:	e9d7 2300 	ldrd	r2, r3, [r7]
 801681a:	e9cd 2300 	strd	r2, r3, [sp]
 801681e:	4602      	mov	r2, r0
 8016820:	460b      	mov	r3, r1
 8016822:	4620      	mov	r0, r4
 8016824:	f7ff ff6a 	bl	80166fc <mg_timer_expired>
 8016828:	4603      	mov	r3, r0
 801682a:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 801682c:	69fb      	ldr	r3, [r7, #28]
 801682e:	69db      	ldr	r3, [r3, #28]
 8016830:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8016832:	7efb      	ldrb	r3, [r7, #27]
 8016834:	f083 0301 	eor.w	r3, r3, #1
 8016838:	b2db      	uxtb	r3, r3
 801683a:	2b00      	cmp	r3, #0
 801683c:	d005      	beq.n	801684a <mg_timer_poll+0x86>
 801683e:	7ebb      	ldrb	r3, [r7, #26]
 8016840:	f083 0301 	eor.w	r3, r3, #1
 8016844:	b2db      	uxtb	r3, r3
 8016846:	2b00      	cmp	r3, #0
 8016848:	d12b      	bne.n	80168a2 <mg_timer_poll+0xde>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 801684a:	69fb      	ldr	r3, [r7, #28]
 801684c:	691b      	ldr	r3, [r3, #16]
 801684e:	f003 0301 	and.w	r3, r3, #1
 8016852:	2b00      	cmp	r3, #0
 8016854:	d105      	bne.n	8016862 <mg_timer_poll+0x9e>
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	691b      	ldr	r3, [r3, #16]
 801685a:	f003 0304 	and.w	r3, r3, #4
 801685e:	2b00      	cmp	r3, #0
 8016860:	d105      	bne.n	801686e <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8016862:	69fb      	ldr	r3, [r7, #28]
 8016864:	695b      	ldr	r3, [r3, #20]
 8016866:	69fa      	ldr	r2, [r7, #28]
 8016868:	6992      	ldr	r2, [r2, #24]
 801686a:	4610      	mov	r0, r2
 801686c:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	691b      	ldr	r3, [r3, #16]
 8016872:	f043 0204 	orr.w	r2, r3, #4
 8016876:	69fb      	ldr	r3, [r7, #28]
 8016878:	611a      	str	r2, [r3, #16]

    // If this timer is not repeating and marked AUTODELETE, remove it
    if (!(t->flags & MG_TIMER_REPEAT) && (t->flags & MG_TIMER_AUTODELETE)) {
 801687a:	69fb      	ldr	r3, [r7, #28]
 801687c:	691b      	ldr	r3, [r3, #16]
 801687e:	f003 0301 	and.w	r3, r3, #1
 8016882:	2b00      	cmp	r3, #0
 8016884:	d10e      	bne.n	80168a4 <mg_timer_poll+0xe0>
 8016886:	69fb      	ldr	r3, [r7, #28]
 8016888:	691b      	ldr	r3, [r3, #16]
 801688a:	f003 0308 	and.w	r3, r3, #8
 801688e:	2b00      	cmp	r3, #0
 8016890:	d008      	beq.n	80168a4 <mg_timer_poll+0xe0>
      mg_timer_free(head, t);
 8016892:	69f9      	ldr	r1, [r7, #28]
 8016894:	68f8      	ldr	r0, [r7, #12]
 8016896:	f7ff ff10 	bl	80166ba <mg_timer_free>
      free(t);
 801689a:	69f8      	ldr	r0, [r7, #28]
 801689c:	f00e fbc0 	bl	8025020 <free>
 80168a0:	e000      	b.n	80168a4 <mg_timer_poll+0xe0>
    if (!once && !expired) continue;
 80168a2:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 80168a4:	697b      	ldr	r3, [r7, #20]
 80168a6:	61fb      	str	r3, [r7, #28]
 80168a8:	69fb      	ldr	r3, [r7, #28]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d194      	bne.n	80167d8 <mg_timer_poll+0x14>
    }
  }
}
 80168ae:	bf00      	nop
 80168b0:	bf00      	nop
 80168b2:	3724      	adds	r7, #36	@ 0x24
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd90      	pop	{r4, r7, pc}

080168b8 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b086      	sub	sp, #24
 80168bc:	af02      	add	r7, sp, #8
 80168be:	60f8      	str	r0, [r7, #12]
 80168c0:	60b9      	str	r1, [r7, #8]
 80168c2:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 80168c4:	4b0b      	ldr	r3, [pc, #44]	@ (80168f4 <mg_tls_hexdump+0x3c>)
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	2b03      	cmp	r3, #3
 80168ca:	dd0e      	ble.n	80168ea <mg_tls_hexdump+0x32>
 80168cc:	4b0a      	ldr	r3, [pc, #40]	@ (80168f8 <mg_tls_hexdump+0x40>)
 80168ce:	f642 22dc 	movw	r2, #10972	@ 0x2adc
 80168d2:	490a      	ldr	r1, [pc, #40]	@ (80168fc <mg_tls_hexdump+0x44>)
 80168d4:	2004      	movs	r0, #4
 80168d6:	f7f7 fa39 	bl	800dd4c <mg_log_prefix>
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	9300      	str	r3, [sp, #0]
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	4a07      	ldr	r2, [pc, #28]	@ (8016900 <mg_tls_hexdump+0x48>)
 80168e2:	68f9      	ldr	r1, [r7, #12]
 80168e4:	4807      	ldr	r0, [pc, #28]	@ (8016904 <mg_tls_hexdump+0x4c>)
 80168e6:	f7f7 fa81 	bl	800ddec <mg_log>
}
 80168ea:	bf00      	nop
 80168ec:	3710      	adds	r7, #16
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	24000258 	.word	0x24000258
 80168f8:	0802a2ac 	.word	0x0802a2ac
 80168fc:	080264c4 	.word	0x080264c4
 8016900:	080129c5 	.word	0x080129c5
 8016904:	08027e80 	.word	0x08027e80

08016908 <mg_der_parse>:
  uint8_t type;
  uint32_t len;
  uint8_t *value;
};

static int mg_der_parse(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8016908:	b480      	push	{r7}
 801690a:	b089      	sub	sp, #36	@ 0x24
 801690c:	af00      	add	r7, sp, #0
 801690e:	60f8      	str	r0, [r7, #12]
 8016910:	60b9      	str	r1, [r7, #8]
 8016912:	607a      	str	r2, [r7, #4]
  size_t header_len = 2;
 8016914:	2302      	movs	r3, #2
 8016916:	61fb      	str	r3, [r7, #28]
  uint32_t len = dersz < 2 ? 0 : der[1];
 8016918:	68bb      	ldr	r3, [r7, #8]
 801691a:	2b01      	cmp	r3, #1
 801691c:	d903      	bls.n	8016926 <mg_der_parse+0x1e>
 801691e:	68fb      	ldr	r3, [r7, #12]
 8016920:	3301      	adds	r3, #1
 8016922:	781b      	ldrb	r3, [r3, #0]
 8016924:	e000      	b.n	8016928 <mg_der_parse+0x20>
 8016926:	2300      	movs	r3, #0
 8016928:	61bb      	str	r3, [r7, #24]
  if (dersz < 2) return -1;  // Invalid DER
 801692a:	68bb      	ldr	r3, [r7, #8]
 801692c:	2b01      	cmp	r3, #1
 801692e:	d802      	bhi.n	8016936 <mg_der_parse+0x2e>
 8016930:	f04f 33ff 	mov.w	r3, #4294967295
 8016934:	e042      	b.n	80169bc <mg_der_parse+0xb4>
  tlv->type = der[0];
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	781a      	ldrb	r2, [r3, #0]
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	701a      	strb	r2, [r3, #0]
  if (len > 0x7F) {  // long-form length
 801693e:	69bb      	ldr	r3, [r7, #24]
 8016940:	2b7f      	cmp	r3, #127	@ 0x7f
 8016942:	d927      	bls.n	8016994 <mg_der_parse+0x8c>
    uint8_t len_bytes = len & 0x7F;
 8016944:	69bb      	ldr	r3, [r7, #24]
 8016946:	b2db      	uxtb	r3, r3
 8016948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801694c:	75bb      	strb	r3, [r7, #22]
    if (dersz < (size_t) (2 + len_bytes)) return -1;
 801694e:	7dbb      	ldrb	r3, [r7, #22]
 8016950:	3302      	adds	r3, #2
 8016952:	461a      	mov	r2, r3
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	4293      	cmp	r3, r2
 8016958:	d202      	bcs.n	8016960 <mg_der_parse+0x58>
 801695a:	f04f 33ff 	mov.w	r3, #4294967295
 801695e:	e02d      	b.n	80169bc <mg_der_parse+0xb4>
    len = 0;
 8016960:	2300      	movs	r3, #0
 8016962:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 8016964:	2300      	movs	r3, #0
 8016966:	75fb      	strb	r3, [r7, #23]
 8016968:	e00c      	b.n	8016984 <mg_der_parse+0x7c>
      len = (len << 8) | der[2 + i];
 801696a:	69bb      	ldr	r3, [r7, #24]
 801696c:	021b      	lsls	r3, r3, #8
 801696e:	7dfa      	ldrb	r2, [r7, #23]
 8016970:	3202      	adds	r2, #2
 8016972:	4611      	mov	r1, r2
 8016974:	68fa      	ldr	r2, [r7, #12]
 8016976:	440a      	add	r2, r1
 8016978:	7812      	ldrb	r2, [r2, #0]
 801697a:	4313      	orrs	r3, r2
 801697c:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 801697e:	7dfb      	ldrb	r3, [r7, #23]
 8016980:	3301      	adds	r3, #1
 8016982:	75fb      	strb	r3, [r7, #23]
 8016984:	7dfa      	ldrb	r2, [r7, #23]
 8016986:	7dbb      	ldrb	r3, [r7, #22]
 8016988:	429a      	cmp	r2, r3
 801698a:	d3ee      	bcc.n	801696a <mg_der_parse+0x62>
    }
    header_len += len_bytes;
 801698c:	7dbb      	ldrb	r3, [r7, #22]
 801698e:	69fa      	ldr	r2, [r7, #28]
 8016990:	4413      	add	r3, r2
 8016992:	61fb      	str	r3, [r7, #28]
  }
  if (dersz < header_len + len) return -1;
 8016994:	69fa      	ldr	r2, [r7, #28]
 8016996:	69bb      	ldr	r3, [r7, #24]
 8016998:	4413      	add	r3, r2
 801699a:	68ba      	ldr	r2, [r7, #8]
 801699c:	429a      	cmp	r2, r3
 801699e:	d202      	bcs.n	80169a6 <mg_der_parse+0x9e>
 80169a0:	f04f 33ff 	mov.w	r3, #4294967295
 80169a4:	e00a      	b.n	80169bc <mg_der_parse+0xb4>
  tlv->len = len;
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	69ba      	ldr	r2, [r7, #24]
 80169aa:	605a      	str	r2, [r3, #4]
  tlv->value = der + header_len;
 80169ac:	68fa      	ldr	r2, [r7, #12]
 80169ae:	69fb      	ldr	r3, [r7, #28]
 80169b0:	441a      	add	r2, r3
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	609a      	str	r2, [r3, #8]
  return (int) (header_len + len);
 80169b6:	69fa      	ldr	r2, [r7, #28]
 80169b8:	69bb      	ldr	r3, [r7, #24]
 80169ba:	4413      	add	r3, r2
}
 80169bc:	4618      	mov	r0, r3
 80169be:	3724      	adds	r7, #36	@ 0x24
 80169c0:	46bd      	mov	sp, r7
 80169c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c6:	4770      	bx	lr

080169c8 <mg_der_next>:

static int mg_der_next(struct mg_der_tlv *parent, struct mg_der_tlv *child) {
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b084      	sub	sp, #16
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
 80169d0:	6039      	str	r1, [r7, #0]
  if (parent->len == 0) return 0;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d101      	bne.n	80169de <mg_der_next+0x16>
 80169da:	2300      	movs	r3, #0
 80169dc:	e01b      	b.n	8016a16 <mg_der_next+0x4e>
  int consumed = mg_der_parse(parent->value, parent->len, child);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6898      	ldr	r0, [r3, #8]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	685b      	ldr	r3, [r3, #4]
 80169e6:	683a      	ldr	r2, [r7, #0]
 80169e8:	4619      	mov	r1, r3
 80169ea:	f7ff ff8d 	bl	8016908 <mg_der_parse>
 80169ee:	60f8      	str	r0, [r7, #12]
  if (consumed < 0) return -1;
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	da02      	bge.n	80169fc <mg_der_next+0x34>
 80169f6:	f04f 33ff 	mov.w	r3, #4294967295
 80169fa:	e00c      	b.n	8016a16 <mg_der_next+0x4e>
  parent->value += consumed;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	689a      	ldr	r2, [r3, #8]
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	441a      	add	r2, r3
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	609a      	str	r2, [r3, #8]
  parent->len -= (uint32_t) consumed;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	685a      	ldr	r2, [r3, #4]
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	1ad2      	subs	r2, r2, r3
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	605a      	str	r2, [r3, #4]
  return 1;
 8016a14:	2301      	movs	r3, #1
}
 8016a16:	4618      	mov	r0, r3
 8016a18:	3710      	adds	r7, #16
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}

08016a1e <mg_der_find_oid>:

static int mg_der_find_oid(struct mg_der_tlv *tlv, const uint8_t *oid,
                           size_t oid_len, struct mg_der_tlv *found) {
 8016a1e:	b580      	push	{r7, lr}
 8016a20:	b08e      	sub	sp, #56	@ 0x38
 8016a22:	af00      	add	r7, sp, #0
 8016a24:	60f8      	str	r0, [r7, #12]
 8016a26:	60b9      	str	r1, [r7, #8]
 8016a28:	607a      	str	r2, [r7, #4]
 8016a2a:	603b      	str	r3, [r7, #0]
  struct mg_der_tlv parent, child;
  parent = *tlv;
 8016a2c:	68fa      	ldr	r2, [r7, #12]
 8016a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016a32:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (mg_der_next(&parent, &child) > 0) {
 8016a38:	e031      	b.n	8016a9e <mg_der_find_oid+0x80>
    if (child.type == 0x06 && child.len == oid_len &&
 8016a3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016a3e:	2b06      	cmp	r3, #6
 8016a40:	d114      	bne.n	8016a6c <mg_der_find_oid+0x4e>
 8016a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a44:	687a      	ldr	r2, [r7, #4]
 8016a46:	429a      	cmp	r2, r3
 8016a48:	d110      	bne.n	8016a6c <mg_der_find_oid+0x4e>
        memcmp(child.value, oid, oid_len) == 0) {
 8016a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a4c:	687a      	ldr	r2, [r7, #4]
 8016a4e:	68b9      	ldr	r1, [r7, #8]
 8016a50:	4618      	mov	r0, r3
 8016a52:	f00e fe71 	bl	8025738 <memcmp>
 8016a56:	4603      	mov	r3, r0
    if (child.type == 0x06 && child.len == oid_len &&
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d107      	bne.n	8016a6c <mg_der_find_oid+0x4e>
      return mg_der_next(&parent, found);
 8016a5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016a60:	6839      	ldr	r1, [r7, #0]
 8016a62:	4618      	mov	r0, r3
 8016a64:	f7ff ffb0 	bl	80169c8 <mg_der_next>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	e024      	b.n	8016ab6 <mg_der_find_oid+0x98>
    } else if (child.type & 0x20) {
 8016a6c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016a70:	f003 0320 	and.w	r3, r3, #32
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d012      	beq.n	8016a9e <mg_der_find_oid+0x80>
      struct mg_der_tlv sub_parent = child;
 8016a78:	f107 0314 	add.w	r3, r7, #20
 8016a7c:	f107 0220 	add.w	r2, r7, #32
 8016a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8016a82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      if (mg_der_find_oid(&sub_parent, oid, oid_len, found)) return 1;
 8016a86:	f107 0014 	add.w	r0, r7, #20
 8016a8a:	683b      	ldr	r3, [r7, #0]
 8016a8c:	687a      	ldr	r2, [r7, #4]
 8016a8e:	68b9      	ldr	r1, [r7, #8]
 8016a90:	f7ff ffc5 	bl	8016a1e <mg_der_find_oid>
 8016a94:	4603      	mov	r3, r0
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d001      	beq.n	8016a9e <mg_der_find_oid+0x80>
 8016a9a:	2301      	movs	r3, #1
 8016a9c:	e00b      	b.n	8016ab6 <mg_der_find_oid+0x98>
  while (mg_der_next(&parent, &child) > 0) {
 8016a9e:	f107 0220 	add.w	r2, r7, #32
 8016aa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016aa6:	4611      	mov	r1, r2
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7ff ff8d 	bl	80169c8 <mg_der_next>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	dcc2      	bgt.n	8016a3a <mg_der_find_oid+0x1c>
    }
  }
  return 0;
 8016ab4:	2300      	movs	r3, #0
}
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	3738      	adds	r7, #56	@ 0x38
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}

08016abe <mg_der_to_tlv>:
  }
}
#endif

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8016abe:	b480      	push	{r7}
 8016ac0:	b087      	sub	sp, #28
 8016ac2:	af00      	add	r7, sp, #0
 8016ac4:	60f8      	str	r0, [r7, #12]
 8016ac6:	60b9      	str	r1, [r7, #8]
 8016ac8:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 8016aca:	68bb      	ldr	r3, [r7, #8]
 8016acc:	2b01      	cmp	r3, #1
 8016ace:	d802      	bhi.n	8016ad6 <mg_der_to_tlv+0x18>
    return -1;
 8016ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ad4:	e041      	b.n	8016b5a <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	781a      	ldrb	r2, [r3, #0]
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	3301      	adds	r3, #1
 8016ae2:	781b      	ldrb	r3, [r3, #0]
 8016ae4:	461a      	mov	r2, r3
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	1c9a      	adds	r2, r3, #2
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	685b      	ldr	r3, [r3, #4]
 8016af6:	2b7f      	cmp	r3, #127	@ 0x7f
 8016af8:	d921      	bls.n	8016b3e <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	685b      	ldr	r3, [r3, #4]
 8016afe:	3b80      	subs	r3, #128	@ 0x80
 8016b00:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	2200      	movs	r2, #0
 8016b06:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8016b08:	2300      	movs	r3, #0
 8016b0a:	617b      	str	r3, [r7, #20]
 8016b0c:	e00d      	b.n	8016b2a <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	685b      	ldr	r3, [r3, #4]
 8016b12:	021b      	lsls	r3, r3, #8
 8016b14:	697a      	ldr	r2, [r7, #20]
 8016b16:	3202      	adds	r2, #2
 8016b18:	68f9      	ldr	r1, [r7, #12]
 8016b1a:	440a      	add	r2, r1
 8016b1c:	7812      	ldrb	r2, [r2, #0]
 8016b1e:	431a      	orrs	r2, r3
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	3301      	adds	r3, #1
 8016b28:	617b      	str	r3, [r7, #20]
 8016b2a:	697a      	ldr	r2, [r7, #20]
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	429a      	cmp	r2, r3
 8016b30:	d3ed      	bcc.n	8016b0e <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	3302      	adds	r3, #2
 8016b36:	68fa      	ldr	r2, [r7, #12]
 8016b38:	441a      	add	r2, r3
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 8016b3e:	68fa      	ldr	r2, [r7, #12]
 8016b40:	68bb      	ldr	r3, [r7, #8]
 8016b42:	441a      	add	r2, r3
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	6899      	ldr	r1, [r3, #8]
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	685b      	ldr	r3, [r3, #4]
 8016b4c:	440b      	add	r3, r1
 8016b4e:	429a      	cmp	r2, r3
 8016b50:	d202      	bcs.n	8016b58 <mg_der_to_tlv+0x9a>
    return -1;
 8016b52:	f04f 33ff 	mov.w	r3, #4294967295
 8016b56:	e000      	b.n	8016b5a <mg_der_to_tlv+0x9c>
  }
  return 0;
 8016b58:	2300      	movs	r3, #0
}
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	371c      	adds	r7, #28
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b64:	4770      	bx	lr

08016b66 <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 8016b66:	b480      	push	{r7}
 8016b68:	b083      	sub	sp, #12
 8016b6a:	af00      	add	r7, sp, #0
 8016b6c:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b72:	2b04      	cmp	r3, #4
 8016b74:	d915      	bls.n	8016ba2 <mg_tls_got_record+0x3c>
         c->rtls.len >=
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8016b7e:	3203      	adds	r2, #3
 8016b80:	7812      	ldrb	r2, [r2, #0]
 8016b82:	b212      	sxth	r2, r2
 8016b84:	0212      	lsls	r2, r2, #8
 8016b86:	b211      	sxth	r1, r2
 8016b88:	687a      	ldr	r2, [r7, #4]
 8016b8a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8016b8c:	3204      	adds	r2, #4
 8016b8e:	7812      	ldrb	r2, [r2, #0]
 8016b90:	b212      	sxth	r2, r2
 8016b92:	430a      	orrs	r2, r1
 8016b94:	b212      	sxth	r2, r2
 8016b96:	b292      	uxth	r2, r2
 8016b98:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8016b9a:	4293      	cmp	r3, r2
 8016b9c:	d301      	bcc.n	8016ba2 <mg_tls_got_record+0x3c>
 8016b9e:	2301      	movs	r3, #1
 8016ba0:	e000      	b.n	8016ba4 <mg_tls_got_record+0x3e>
 8016ba2:	2300      	movs	r3, #0
 8016ba4:	f003 0301 	and.w	r3, r3, #1
 8016ba8:	b2db      	uxtb	r3, r3
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	370c      	adds	r7, #12
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb4:	4770      	bx	lr

08016bb6 <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 8016bb6:	b580      	push	{r7, lr}
 8016bb8:	b084      	sub	sp, #16
 8016bba:	af00      	add	r7, sp, #0
 8016bbc:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	3368      	adds	r3, #104	@ 0x68
 8016bc2:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	3303      	adds	r3, #3
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	b21b      	sxth	r3, r3
 8016bce:	021b      	lsls	r3, r3, #8
 8016bd0:	b21a      	sxth	r2, r3
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	3304      	adds	r3, #4
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	b21b      	sxth	r3, r3
 8016bdc:	4313      	orrs	r3, r2
 8016bde:	b21b      	sxth	r3, r3
 8016be0:	b29b      	uxth	r3, r3
 8016be2:	3305      	adds	r3, #5
 8016be4:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 8016be6:	897b      	ldrh	r3, [r7, #10]
 8016be8:	461a      	mov	r2, r3
 8016bea:	2100      	movs	r1, #0
 8016bec:	68f8      	ldr	r0, [r7, #12]
 8016bee:	f7f6 f9e1 	bl	800cfb4 <mg_iobuf_del>
}
 8016bf2:	bf00      	nop
 8016bf4:	3710      	adds	r7, #16
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}
	...

08016bfc <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b086      	sub	sp, #24
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016c0a:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8016c10:	697b      	ldr	r3, [r7, #20]
 8016c12:	695b      	ldr	r3, [r3, #20]
 8016c14:	4413      	add	r3, r2
 8016c16:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 8016c18:	697b      	ldr	r3, [r7, #20]
 8016c1a:	699b      	ldr	r3, [r3, #24]
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d033      	beq.n	8016c88 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 8016c20:	693b      	ldr	r3, [r7, #16]
 8016c22:	3301      	adds	r3, #1
 8016c24:	781b      	ldrb	r3, [r3, #0]
 8016c26:	041a      	lsls	r2, r3, #16
 8016c28:	693b      	ldr	r3, [r7, #16]
 8016c2a:	3302      	adds	r3, #2
 8016c2c:	781b      	ldrb	r3, [r3, #0]
 8016c2e:	021b      	lsls	r3, r3, #8
 8016c30:	4313      	orrs	r3, r2
 8016c32:	693a      	ldr	r2, [r7, #16]
 8016c34:	3203      	adds	r2, #3
 8016c36:	7812      	ldrb	r2, [r2, #0]
 8016c38:	4313      	orrs	r3, r2
 8016c3a:	3304      	adds	r3, #4
 8016c3c:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 8016c3e:	697b      	ldr	r3, [r7, #20]
 8016c40:	699b      	ldr	r3, [r3, #24]
 8016c42:	68fa      	ldr	r2, [r7, #12]
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d904      	bls.n	8016c52 <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 8016c48:	4911      	ldr	r1, [pc, #68]	@ (8016c90 <mg_tls_drop_message+0x94>)
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f7f1 fb52 	bl	80082f4 <mg_error>
    return;
 8016c50:	e01b      	b.n	8016c8a <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 8016c52:	697b      	ldr	r3, [r7, #20]
 8016c54:	3320      	adds	r3, #32
 8016c56:	68fa      	ldr	r2, [r7, #12]
 8016c58:	6939      	ldr	r1, [r7, #16]
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f7fd fdec 	bl	8014838 <mg_sha256_update>
  tls->recv_offset += len;
 8016c60:	697b      	ldr	r3, [r7, #20]
 8016c62:	695a      	ldr	r2, [r3, #20]
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	441a      	add	r2, r3
 8016c68:	697b      	ldr	r3, [r7, #20]
 8016c6a:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	699a      	ldr	r2, [r3, #24]
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	1ad2      	subs	r2, r2, r3
 8016c74:	697b      	ldr	r3, [r7, #20]
 8016c76:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8016c78:	697b      	ldr	r3, [r7, #20]
 8016c7a:	699b      	ldr	r3, [r3, #24]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d104      	bne.n	8016c8a <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 8016c80:	6878      	ldr	r0, [r7, #4]
 8016c82:	f7ff ff98 	bl	8016bb6 <mg_tls_drop_record>
 8016c86:	e000      	b.n	8016c8a <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 8016c88:	bf00      	nop
  }
}
 8016c8a:	3718      	adds	r7, #24
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}
 8016c90:	08027e88 	.word	0x08027e88

08016c94 <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 8016c94:	b590      	push	{r4, r7, lr}
 8016c96:	b0d1      	sub	sp, #324	@ 0x144
 8016c98:	af02      	add	r7, sp, #8
 8016c9a:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 8016c9e:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8016ca2:	6020      	str	r0, [r4, #0]
 8016ca4:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8016ca8:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 8016cac:	6001      	str	r1, [r0, #0]
 8016cae:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8016cb2:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8016cb6:	600a      	str	r2, [r1, #0]
 8016cb8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016cbc:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8016cc0:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 8016cc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016cc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8016cca:	6818      	ldr	r0, [r3, #0]
 8016ccc:	f7e9 fb80 	bl	80003d0 <strlen>
 8016cd0:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 8016cd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016cd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016ce2:	461a      	mov	r2, r3
 8016ce4:	2100      	movs	r1, #0
 8016ce6:	f00e fd51 	bl	802578c <memset>
 8016cea:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8016cee:	b2da      	uxtb	r2, r3
 8016cf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016cf4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8016cf8:	705a      	strb	r2, [r3, #1]
 8016cfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016cfe:	b2da      	uxtb	r2, r3
 8016d00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016d04:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8016d08:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 8016d0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d00c      	beq.n	8016d2c <mg_tls_derive_secret+0x98>
 8016d12:	f107 0314 	add.w	r3, r7, #20
 8016d16:	3303      	adds	r3, #3
 8016d18:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016d1c:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 8016d20:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8016d24:	6809      	ldr	r1, [r1, #0]
 8016d26:	4618      	mov	r0, r3
 8016d28:	f00e fd16 	bl	8025758 <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 8016d2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016d30:	3303      	adds	r3, #3
 8016d32:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8016d36:	b2d1      	uxtb	r1, r2
 8016d38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016d3c:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8016d40:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 8016d42:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d00e      	beq.n	8016d68 <mg_tls_derive_secret+0xd4>
 8016d4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8016d4e:	3304      	adds	r3, #4
 8016d50:	f107 0214 	add.w	r2, r7, #20
 8016d54:	18d0      	adds	r0, r2, r3
 8016d56:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8016d5a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8016d5e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8016d62:	6819      	ldr	r1, [r3, #0]
 8016d64:	f00e fcf8 	bl	8025758 <memmove>
  packed[4 + labelsz + datasz] = 1;
 8016d68:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8016d6c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016d70:	4413      	add	r3, r2
 8016d72:	3304      	adds	r3, #4
 8016d74:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016d78:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 8016d7c:	2101      	movs	r1, #1
 8016d7e:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 8016d80:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8016d84:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8016d88:	4413      	add	r3, r2
 8016d8a:	3305      	adds	r3, #5
 8016d8c:	f107 0414 	add.w	r4, r7, #20
 8016d90:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8016d94:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8016d98:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8016d9c:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 8016da0:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8016da4:	9300      	str	r3, [sp, #0]
 8016da6:	4623      	mov	r3, r4
 8016da8:	6812      	ldr	r2, [r2, #0]
 8016daa:	6809      	ldr	r1, [r1, #0]
 8016dac:	f7fd fed1 	bl	8014b52 <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 8016db0:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8016db4:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8016db8:	4619      	mov	r1, r3
 8016dba:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 8016dbe:	f00e fccb 	bl	8025758 <memmove>
}
 8016dc2:	bf00      	nop
 8016dc4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	bd90      	pop	{r4, r7, pc}

08016dcc <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b0cc      	sub	sp, #304	@ 0x130
 8016dd0:	af04      	add	r7, sp, #16
 8016dd2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016dd6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8016dda:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016ddc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8016de0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016dea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 8016dee:	2320      	movs	r3, #32
 8016df0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 8016df4:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8016df8:	2320      	movs	r3, #32
 8016dfa:	9300      	str	r3, [sp, #0]
 8016dfc:	4b89      	ldr	r3, [pc, #548]	@ (8017024 <mg_tls_generate_handshake_keys+0x258>)
 8016dfe:	2200      	movs	r2, #0
 8016e00:	2100      	movs	r1, #0
 8016e02:	f7fd fea6 	bl	8014b52 <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 8016e06:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8016e0a:	2320      	movs	r3, #32
 8016e0c:	9302      	str	r3, [sp, #8]
 8016e0e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8016e12:	9301      	str	r3, [sp, #4]
 8016e14:	2320      	movs	r3, #32
 8016e16:	9300      	str	r3, [sp, #0]
 8016e18:	4b83      	ldr	r3, [pc, #524]	@ (8017028 <mg_tls_generate_handshake_keys+0x25c>)
 8016e1a:	2220      	movs	r2, #32
 8016e1c:	4883      	ldr	r0, [pc, #524]	@ (801702c <mg_tls_generate_handshake_keys+0x260>)
 8016e1e:	f7ff ff39 	bl	8016c94 <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 8016e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e26:	f503 6091 	add.w	r0, r3, #1160	@ 0x488
                 sizeof(pre_extract_secret), tls->x25519_sec,
 8016e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e2e:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 8016e30:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8016e34:	2220      	movs	r2, #32
 8016e36:	9200      	str	r2, [sp, #0]
 8016e38:	2220      	movs	r2, #32
 8016e3a:	f7fd fe8a 	bl	8014b52 <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 8016e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e42:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 8016e46:	2220      	movs	r2, #32
 8016e48:	4619      	mov	r1, r3
 8016e4a:	4879      	ldr	r0, [pc, #484]	@ (8017030 <mg_tls_generate_handshake_keys+0x264>)
 8016e4c:	f7ff fd34 	bl	80168b8 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8016e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e54:	f103 0120 	add.w	r1, r3, #32
 8016e58:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8016e5c:	2270      	movs	r2, #112	@ 0x70
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f00e fc7a 	bl	8025758 <memmove>
  mg_sha256_final(hello_hash, &sha256);
 8016e64:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8016e68:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8016e6c:	4611      	mov	r1, r2
 8016e6e:	4618      	mov	r0, r3
 8016e70:	f7fd fd1b 	bl	80148aa <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 8016e74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8016e78:	2220      	movs	r2, #32
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	486d      	ldr	r0, [pc, #436]	@ (8017034 <mg_tls_generate_handshake_keys+0x268>)
 8016e7e:	f7ff fd1b 	bl	80168b8 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 8016e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016e86:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8016e8a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8016e8e:	2320      	movs	r3, #32
 8016e90:	9302      	str	r3, [sp, #8]
 8016e92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016e96:	9301      	str	r3, [sp, #4]
 8016e98:	2320      	movs	r3, #32
 8016e9a:	9300      	str	r3, [sp, #0]
 8016e9c:	4613      	mov	r3, r2
 8016e9e:	2220      	movs	r2, #32
 8016ea0:	4865      	ldr	r0, [pc, #404]	@ (8017038 <mg_tls_generate_handshake_keys+0x26c>)
 8016ea2:	f7ff fef7 	bl	8016c94 <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 8016ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016eaa:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8016eae:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8016eb2:	2320      	movs	r3, #32
 8016eb4:	9302      	str	r3, [sp, #8]
 8016eb6:	f107 0308 	add.w	r3, r7, #8
 8016eba:	9301      	str	r3, [sp, #4]
 8016ebc:	2320      	movs	r3, #32
 8016ebe:	9300      	str	r3, [sp, #0]
 8016ec0:	4613      	mov	r3, r2
 8016ec2:	2220      	movs	r2, #32
 8016ec4:	485d      	ldr	r0, [pc, #372]	@ (801703c <mg_tls_generate_handshake_keys+0x270>)
 8016ec6:	f7ff fee5 	bl	8016c94 <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 8016eca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016ece:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 8016ed2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016ed6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016eda:	9202      	str	r2, [sp, #8]
 8016edc:	9301      	str	r3, [sp, #4]
 8016ede:	2300      	movs	r3, #0
 8016ee0:	9300      	str	r3, [sp, #0]
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	2220      	movs	r2, #32
 8016ee6:	4856      	ldr	r0, [pc, #344]	@ (8017040 <mg_tls_generate_handshake_keys+0x274>)
 8016ee8:	f7ff fed4 	bl	8016c94 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 8016eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016ef0:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 8016ef4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016ef8:	220c      	movs	r2, #12
 8016efa:	9202      	str	r2, [sp, #8]
 8016efc:	9301      	str	r3, [sp, #4]
 8016efe:	2300      	movs	r3, #0
 8016f00:	9300      	str	r3, [sp, #0]
 8016f02:	2300      	movs	r3, #0
 8016f04:	2220      	movs	r2, #32
 8016f06:	484f      	ldr	r0, [pc, #316]	@ (8017044 <mg_tls_generate_handshake_keys+0x278>)
 8016f08:	f7ff fec4 	bl	8016c94 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 8016f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016f10:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 8016f14:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8016f18:	2220      	movs	r2, #32
 8016f1a:	9202      	str	r2, [sp, #8]
 8016f1c:	9301      	str	r3, [sp, #4]
 8016f1e:	2300      	movs	r3, #0
 8016f20:	9300      	str	r3, [sp, #0]
 8016f22:	2300      	movs	r3, #0
 8016f24:	2220      	movs	r2, #32
 8016f26:	4848      	ldr	r0, [pc, #288]	@ (8017048 <mg_tls_generate_handshake_keys+0x27c>)
 8016f28:	f7ff feb4 	bl	8016c94 <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 8016f2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016f30:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 8016f34:	f107 0108 	add.w	r1, r7, #8
 8016f38:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016f3c:	9202      	str	r2, [sp, #8]
 8016f3e:	9301      	str	r3, [sp, #4]
 8016f40:	2300      	movs	r3, #0
 8016f42:	9300      	str	r3, [sp, #0]
 8016f44:	2300      	movs	r3, #0
 8016f46:	2220      	movs	r2, #32
 8016f48:	483d      	ldr	r0, [pc, #244]	@ (8017040 <mg_tls_generate_handshake_keys+0x274>)
 8016f4a:	f7ff fea3 	bl	8016c94 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8016f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016f52:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 8016f56:	f107 0108 	add.w	r1, r7, #8
 8016f5a:	220c      	movs	r2, #12
 8016f5c:	9202      	str	r2, [sp, #8]
 8016f5e:	9301      	str	r3, [sp, #4]
 8016f60:	2300      	movs	r3, #0
 8016f62:	9300      	str	r3, [sp, #0]
 8016f64:	2300      	movs	r3, #0
 8016f66:	2220      	movs	r2, #32
 8016f68:	4836      	ldr	r0, [pc, #216]	@ (8017044 <mg_tls_generate_handshake_keys+0x278>)
 8016f6a:	f7ff fe93 	bl	8016c94 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 8016f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016f72:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 8016f76:	f107 0108 	add.w	r1, r7, #8
 8016f7a:	2220      	movs	r2, #32
 8016f7c:	9202      	str	r2, [sp, #8]
 8016f7e:	9301      	str	r3, [sp, #4]
 8016f80:	2300      	movs	r3, #0
 8016f82:	9300      	str	r3, [sp, #0]
 8016f84:	2300      	movs	r3, #0
 8016f86:	2220      	movs	r2, #32
 8016f88:	482f      	ldr	r0, [pc, #188]	@ (8017048 <mg_tls_generate_handshake_keys+0x27c>)
 8016f8a:	f7ff fe83 	bl	8016c94 <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 8016f8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8016f92:	2220      	movs	r2, #32
 8016f94:	4619      	mov	r1, r3
 8016f96:	482d      	ldr	r0, [pc, #180]	@ (801704c <mg_tls_generate_handshake_keys+0x280>)
 8016f98:	f7ff fc8e 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 8016f9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016fa0:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8016fa4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016fa8:	4619      	mov	r1, r3
 8016faa:	4829      	ldr	r0, [pc, #164]	@ (8017050 <mg_tls_generate_handshake_keys+0x284>)
 8016fac:	f7ff fc84 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8016fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016fb4:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8016fb8:	220c      	movs	r2, #12
 8016fba:	4619      	mov	r1, r3
 8016fbc:	4825      	ldr	r0, [pc, #148]	@ (8017054 <mg_tls_generate_handshake_keys+0x288>)
 8016fbe:	f7ff fc7b 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8016fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016fc6:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 8016fca:	2220      	movs	r2, #32
 8016fcc:	4619      	mov	r1, r3
 8016fce:	4822      	ldr	r0, [pc, #136]	@ (8017058 <mg_tls_generate_handshake_keys+0x28c>)
 8016fd0:	f7ff fc72 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 8016fd4:	f107 0308 	add.w	r3, r7, #8
 8016fd8:	2220      	movs	r2, #32
 8016fda:	4619      	mov	r1, r3
 8016fdc:	481f      	ldr	r0, [pc, #124]	@ (801705c <mg_tls_generate_handshake_keys+0x290>)
 8016fde:	f7ff fc6b 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8016fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016fe6:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8016fea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8016fee:	4619      	mov	r1, r3
 8016ff0:	481b      	ldr	r0, [pc, #108]	@ (8017060 <mg_tls_generate_handshake_keys+0x294>)
 8016ff2:	f7ff fc61 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8016ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8016ffa:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8016ffe:	220c      	movs	r2, #12
 8017000:	4619      	mov	r1, r3
 8017002:	4818      	ldr	r0, [pc, #96]	@ (8017064 <mg_tls_generate_handshake_keys+0x298>)
 8017004:	f7ff fc58 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8017008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801700c:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8017010:	2220      	movs	r2, #32
 8017012:	4619      	mov	r1, r3
 8017014:	4814      	ldr	r0, [pc, #80]	@ (8017068 <mg_tls_generate_handshake_keys+0x29c>)
 8017016:	f7ff fc4f 	bl	80168b8 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 801701a:	bf00      	nop
 801701c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8017020:	46bd      	mov	sp, r7
 8017022:	bd80      	pop	{r7, pc}
 8017024:	24002100 	.word	0x24002100
 8017028:	24000280 	.word	0x24000280
 801702c:	08027e94 	.word	0x08027e94
 8017030:	08027ea4 	.word	0x08027ea4
 8017034:	08027eb0 	.word	0x08027eb0
 8017038:	08027ebc 	.word	0x08027ebc
 801703c:	08027ed0 	.word	0x08027ed0
 8017040:	08027ee4 	.word	0x08027ee4
 8017044:	08027ef0 	.word	0x08027ef0
 8017048:	08027efc 	.word	0x08027efc
 801704c:	08027f0c 	.word	0x08027f0c
 8017050:	08027f1c 	.word	0x08027f1c
 8017054:	08027f24 	.word	0x08027f24
 8017058:	08027f2c 	.word	0x08027f2c
 801705c:	08027f38 	.word	0x08027f38
 8017060:	08027f48 	.word	0x08027f48
 8017064:	08027f50 	.word	0x08027f50
 8017068:	08027f58 	.word	0x08027f58

0801706c <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 801706c:	b580      	push	{r7, lr}
 801706e:	b0cc      	sub	sp, #304	@ 0x130
 8017070:	af04      	add	r7, sp, #16
 8017072:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017076:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801707a:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801707c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017080:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801708a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 801708e:	2320      	movs	r3, #32
 8017090:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8017094:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017098:	f103 0120 	add.w	r1, r3, #32
 801709c:	f107 0308 	add.w	r3, r7, #8
 80170a0:	2270      	movs	r2, #112	@ 0x70
 80170a2:	4618      	mov	r0, r3
 80170a4:	f00e fb58 	bl	8025758 <memmove>
  mg_sha256_final(hash, &sha256);
 80170a8:	f107 0208 	add.w	r2, r7, #8
 80170ac:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 80170b0:	4611      	mov	r1, r2
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7fd fbf9 	bl	80148aa <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 80170b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80170bc:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 80170c0:	2320      	movs	r3, #32
 80170c2:	9302      	str	r3, [sp, #8]
 80170c4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80170c8:	9301      	str	r3, [sp, #4]
 80170ca:	2320      	movs	r3, #32
 80170cc:	9300      	str	r3, [sp, #0]
 80170ce:	4b64      	ldr	r3, [pc, #400]	@ (8017260 <mg_tls_generate_application_keys+0x1f4>)
 80170d0:	2220      	movs	r2, #32
 80170d2:	4864      	ldr	r0, [pc, #400]	@ (8017264 <mg_tls_generate_application_keys+0x1f8>)
 80170d4:	f7ff fdde 	bl	8016c94 <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 80170d8:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 80170dc:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 80170e0:	2320      	movs	r3, #32
 80170e2:	9300      	str	r3, [sp, #0]
 80170e4:	4b60      	ldr	r3, [pc, #384]	@ (8017268 <mg_tls_generate_application_keys+0x1fc>)
 80170e6:	2220      	movs	r2, #32
 80170e8:	f7fd fd33 	bl	8014b52 <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 80170ec:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 80170f0:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80170f4:	2320      	movs	r3, #32
 80170f6:	9302      	str	r3, [sp, #8]
 80170f8:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80170fc:	9301      	str	r3, [sp, #4]
 80170fe:	2320      	movs	r3, #32
 8017100:	9300      	str	r3, [sp, #0]
 8017102:	4613      	mov	r3, r2
 8017104:	2220      	movs	r2, #32
 8017106:	4859      	ldr	r0, [pc, #356]	@ (801726c <mg_tls_generate_application_keys+0x200>)
 8017108:	f7ff fdc4 	bl	8016c94 <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 801710c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017110:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 8017114:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8017118:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801711c:	9202      	str	r2, [sp, #8]
 801711e:	9301      	str	r3, [sp, #4]
 8017120:	2300      	movs	r3, #0
 8017122:	9300      	str	r3, [sp, #0]
 8017124:	2300      	movs	r3, #0
 8017126:	2220      	movs	r2, #32
 8017128:	4851      	ldr	r0, [pc, #324]	@ (8017270 <mg_tls_generate_application_keys+0x204>)
 801712a:	f7ff fdb3 	bl	8016c94 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 801712e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017132:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 8017136:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 801713a:	220c      	movs	r2, #12
 801713c:	9202      	str	r2, [sp, #8]
 801713e:	9301      	str	r3, [sp, #4]
 8017140:	2300      	movs	r3, #0
 8017142:	9300      	str	r3, [sp, #0]
 8017144:	2300      	movs	r3, #0
 8017146:	2220      	movs	r2, #32
 8017148:	484a      	ldr	r0, [pc, #296]	@ (8017274 <mg_tls_generate_application_keys+0x208>)
 801714a:	f7ff fda3 	bl	8016c94 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 801714e:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8017152:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8017156:	2320      	movs	r3, #32
 8017158:	9302      	str	r3, [sp, #8]
 801715a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801715e:	9301      	str	r3, [sp, #4]
 8017160:	2320      	movs	r3, #32
 8017162:	9300      	str	r3, [sp, #0]
 8017164:	4613      	mov	r3, r2
 8017166:	2220      	movs	r2, #32
 8017168:	4843      	ldr	r0, [pc, #268]	@ (8017278 <mg_tls_generate_application_keys+0x20c>)
 801716a:	f7ff fd93 	bl	8016c94 <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 801716e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017172:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 8017176:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 801717a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801717e:	9202      	str	r2, [sp, #8]
 8017180:	9301      	str	r3, [sp, #4]
 8017182:	2300      	movs	r3, #0
 8017184:	9300      	str	r3, [sp, #0]
 8017186:	2300      	movs	r3, #0
 8017188:	2220      	movs	r2, #32
 801718a:	4839      	ldr	r0, [pc, #228]	@ (8017270 <mg_tls_generate_application_keys+0x204>)
 801718c:	f7ff fd82 	bl	8016c94 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8017190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017194:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 8017198:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 801719c:	220c      	movs	r2, #12
 801719e:	9202      	str	r2, [sp, #8]
 80171a0:	9301      	str	r3, [sp, #4]
 80171a2:	2300      	movs	r3, #0
 80171a4:	9300      	str	r3, [sp, #0]
 80171a6:	2300      	movs	r3, #0
 80171a8:	2220      	movs	r2, #32
 80171aa:	4832      	ldr	r0, [pc, #200]	@ (8017274 <mg_tls_generate_application_keys+0x208>)
 80171ac:	f7ff fd72 	bl	8016c94 <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 80171b0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80171b4:	2220      	movs	r2, #32
 80171b6:	4619      	mov	r1, r3
 80171b8:	4830      	ldr	r0, [pc, #192]	@ (801727c <mg_tls_generate_application_keys+0x210>)
 80171ba:	f7ff fb7d 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 80171be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80171c2:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 80171c6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80171ca:	4619      	mov	r1, r3
 80171cc:	482c      	ldr	r0, [pc, #176]	@ (8017280 <mg_tls_generate_application_keys+0x214>)
 80171ce:	f7ff fb73 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 80171d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80171d6:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 80171da:	220c      	movs	r2, #12
 80171dc:	4619      	mov	r1, r3
 80171de:	4829      	ldr	r0, [pc, #164]	@ (8017284 <mg_tls_generate_application_keys+0x218>)
 80171e0:	f7ff fb6a 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 80171e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80171e8:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 80171ec:	2220      	movs	r2, #32
 80171ee:	4619      	mov	r1, r3
 80171f0:	4825      	ldr	r0, [pc, #148]	@ (8017288 <mg_tls_generate_application_keys+0x21c>)
 80171f2:	f7ff fb61 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 80171f6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80171fa:	2220      	movs	r2, #32
 80171fc:	4619      	mov	r1, r3
 80171fe:	4823      	ldr	r0, [pc, #140]	@ (801728c <mg_tls_generate_application_keys+0x220>)
 8017200:	f7ff fb5a 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8017204:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017208:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 801720c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8017210:	4619      	mov	r1, r3
 8017212:	481f      	ldr	r0, [pc, #124]	@ (8017290 <mg_tls_generate_application_keys+0x224>)
 8017214:	f7ff fb50 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8017218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801721c:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8017220:	220c      	movs	r2, #12
 8017222:	4619      	mov	r1, r3
 8017224:	481b      	ldr	r0, [pc, #108]	@ (8017294 <mg_tls_generate_application_keys+0x228>)
 8017226:	f7ff fb47 	bl	80168b8 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 801722a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801722e:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8017232:	2220      	movs	r2, #32
 8017234:	4619      	mov	r1, r3
 8017236:	4818      	ldr	r0, [pc, #96]	@ (8017298 <mg_tls_generate_application_keys+0x22c>)
 8017238:	f7ff fb3e 	bl	80168b8 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 801723c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017240:	2200      	movs	r2, #0
 8017242:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 8017246:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801724a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 801724e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8017252:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 8017256:	bf00      	nop
 8017258:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}
 8017260:	24000280 	.word	0x24000280
 8017264:	08027e94 	.word	0x08027e94
 8017268:	24002100 	.word	0x24002100
 801726c:	08027f64 	.word	0x08027f64
 8017270:	08027ee4 	.word	0x08027ee4
 8017274:	08027ef0 	.word	0x08027ef0
 8017278:	08027f78 	.word	0x08027f78
 801727c:	08027f8c 	.word	0x08027f8c
 8017280:	08027f1c 	.word	0x08027f1c
 8017284:	08027f24 	.word	0x08027f24
 8017288:	08027f2c 	.word	0x08027f2c
 801728c:	08027f9c 	.word	0x08027f9c
 8017290:	08027f48 	.word	0x08027f48
 8017294:	08027f50 	.word	0x08027f50
 8017298:	08027f58 	.word	0x08027f58

0801729c <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 801729c:	b580      	push	{r7, lr}
 801729e:	b09a      	sub	sp, #104	@ 0x68
 80172a0:	af04      	add	r7, sp, #16
 80172a2:	60f8      	str	r0, [r7, #12]
 80172a4:	60b9      	str	r1, [r7, #8]
 80172a6:	607a      	str	r2, [r7, #4]
 80172a8:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80172b0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 80172b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172b4:	3304      	adds	r3, #4
 80172b6:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	3311      	adds	r3, #17
 80172bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 80172be:	2317      	movs	r3, #23
 80172c0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80172c4:	2303      	movs	r3, #3
 80172c6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80172ca:	2303      	movs	r3, #3
 80172cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 80172d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80172d2:	0a1b      	lsrs	r3, r3, #8
 80172d4:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 80172d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 80172da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80172dc:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 80172de:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 80172e2:	2317      	movs	r3, #23
 80172e4:	773b      	strb	r3, [r7, #28]
 80172e6:	2303      	movs	r3, #3
 80172e8:	777b      	strb	r3, [r7, #29]
 80172ea:	2303      	movs	r3, #3
 80172ec:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 80172ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80172f0:	0a1b      	lsrs	r3, r3, #8
 80172f2:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 80172f4:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 80172f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80172f8:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 80172fa:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017304:	f003 0302 	and.w	r3, r3, #2
 8017308:	b2db      	uxtb	r3, r3
 801730a:	2b00      	cmp	r3, #0
 801730c:	d003      	beq.n	8017316 <mg_tls_encrypt+0x7a>
 801730e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017310:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8017314:	e002      	b.n	801731c <mg_tls_encrypt+0x80>
 8017316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017318:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 801731c:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017324:	f003 0302 	and.w	r3, r3, #2
 8017328:	b2db      	uxtb	r3, r3
 801732a:	2b00      	cmp	r3, #0
 801732c:	d003      	beq.n	8017336 <mg_tls_encrypt+0x9a>
 801732e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017330:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 8017334:	e002      	b.n	801733c <mg_tls_encrypt+0xa0>
 8017336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017338:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  uint8_t *key =
 801733c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017344:	f003 0302 	and.w	r3, r3, #2
 8017348:	b2db      	uxtb	r3, r3
 801734a:	2b00      	cmp	r3, #0
 801734c:	d003      	beq.n	8017356 <mg_tls_encrypt+0xba>
 801734e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017350:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 8017354:	e002      	b.n	801735c <mg_tls_encrypt+0xc0>
 8017356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017358:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  uint8_t *iv =
 801735c:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 801735e:	f107 0310 	add.w	r3, r7, #16
 8017362:	220c      	movs	r2, #12
 8017364:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017366:	4618      	mov	r0, r3
 8017368:	f00e f9f6 	bl	8025758 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 801736c:	7e3a      	ldrb	r2, [r7, #24]
 801736e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017370:	0e1b      	lsrs	r3, r3, #24
 8017372:	b2db      	uxtb	r3, r3
 8017374:	4053      	eors	r3, r2
 8017376:	b2db      	uxtb	r3, r3
 8017378:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 801737a:	7e7a      	ldrb	r2, [r7, #25]
 801737c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801737e:	0c1b      	lsrs	r3, r3, #16
 8017380:	b2db      	uxtb	r3, r3
 8017382:	4053      	eors	r3, r2
 8017384:	b2db      	uxtb	r3, r3
 8017386:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8017388:	7eba      	ldrb	r2, [r7, #26]
 801738a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801738c:	0a1b      	lsrs	r3, r3, #8
 801738e:	b2db      	uxtb	r3, r3
 8017390:	4053      	eors	r3, r2
 8017392:	b2db      	uxtb	r3, r3
 8017394:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8017396:	7efa      	ldrb	r2, [r7, #27]
 8017398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801739a:	b2db      	uxtb	r3, r3
 801739c:	4053      	eors	r3, r2
 801739e:	b2db      	uxtb	r3, r3
 80173a0:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 80173a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80173a4:	6899      	ldr	r1, [r3, #8]
 80173a6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80173aa:	2305      	movs	r3, #5
 80173ac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80173ae:	f7f5 fdaf 	bl	800cf10 <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 80173b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80173b4:	689a      	ldr	r2, [r3, #8]
 80173b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173b8:	4413      	add	r3, r2
 80173ba:	4619      	mov	r1, r3
 80173bc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80173be:	f7f5 fd1b 	bl	800cdf8 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 80173c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80173c4:	681a      	ldr	r2, [r3, #0]
 80173c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80173c8:	689b      	ldr	r3, [r3, #8]
 80173ca:	4413      	add	r3, r2
 80173cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 80173ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80173d0:	681a      	ldr	r2, [r3, #0]
 80173d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80173d4:	6899      	ldr	r1, [r3, #8]
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	440b      	add	r3, r1
 80173da:	3301      	adds	r3, #1
 80173dc:	4413      	add	r3, r2
 80173de:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 80173e0:	687a      	ldr	r2, [r7, #4]
 80173e2:	68b9      	ldr	r1, [r7, #8]
 80173e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80173e6:	f00e f9b7 	bl	8025758 <memmove>
  outmsg[msgsz] = msgtype;
 80173ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	4413      	add	r3, r2
 80173f0:	78fa      	ldrb	r2, [r7, #3]
 80173f2:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 80173f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80173f8:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 80173fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80173fc:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8017400:	4619      	mov	r1, r3
 8017402:	2001      	movs	r0, #1
 8017404:	f00d fde8 	bl	8024fd8 <calloc>
 8017408:	4603      	mov	r3, r0
 801740a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 801740c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801740e:	2b00      	cmp	r3, #0
 8017410:	d104      	bne.n	801741c <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 8017412:	491f      	ldr	r1, [pc, #124]	@ (8017490 <mg_tls_encrypt+0x1f4>)
 8017414:	68f8      	ldr	r0, [r7, #12]
 8017416:	f7f0 ff6d 	bl	80082f4 <mg_error>
 801741a:	e035      	b.n	8017488 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	3301      	adds	r3, #1
 8017420:	f107 011c 	add.w	r1, r7, #28
 8017424:	f107 0210 	add.w	r2, r7, #16
 8017428:	9302      	str	r3, [sp, #8]
 801742a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801742c:	9301      	str	r3, [sp, #4]
 801742e:	2305      	movs	r3, #5
 8017430:	9300      	str	r3, [sp, #0]
 8017432:	460b      	mov	r3, r1
 8017434:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8017436:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017438:	f005 fa61 	bl	801c8fe <mg_chacha20_poly1305_encrypt>
 801743c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 801743e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017440:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017442:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8017444:	f00e f988 	bl	8025758 <memmove>
      free(enc);
 8017448:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801744a:	f00d fde9 	bl	8025020 <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017454:	f003 0302 	and.w	r3, r3, #2
 8017458:	b2db      	uxtb	r3, r3
 801745a:	2b00      	cmp	r3, #0
 801745c:	d007      	beq.n	801746e <mg_tls_encrypt+0x1d2>
 801745e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017460:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8017464:	1c5a      	adds	r2, r3, #1
 8017466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017468:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 801746c:	e006      	b.n	801747c <mg_tls_encrypt+0x1e0>
 801746e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017470:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8017474:	1c5a      	adds	r2, r3, #1
 8017476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017478:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
  wio->len += encsz;
 801747c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801747e:	689a      	ldr	r2, [r3, #8]
 8017480:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017482:	441a      	add	r2, r3
 8017484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017486:	609a      	str	r2, [r3, #8]
}
 8017488:	3758      	adds	r7, #88	@ 0x58
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}
 801748e:	bf00      	nop
 8017490:	08027fac 	.word	0x08027fac

08017494 <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 8017494:	b580      	push	{r7, lr}
 8017496:	b092      	sub	sp, #72	@ 0x48
 8017498:	af02      	add	r7, sp, #8
 801749a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80174a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	3368      	adds	r3, #104	@ 0x68
 80174a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80174b0:	f003 0302 	and.w	r3, r3, #2
 80174b4:	b2db      	uxtb	r3, r3
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d003      	beq.n	80174c2 <mg_tls_recv_record+0x2e>
 80174ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174bc:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80174c0:	e002      	b.n	80174c8 <mg_tls_recv_record+0x34>
 80174c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174c4:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 80174c8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80174d0:	f003 0302 	and.w	r3, r3, #2
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d003      	beq.n	80174e2 <mg_tls_recv_record+0x4e>
 80174da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174dc:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 80174e0:	e002      	b.n	80174e8 <mg_tls_recv_record+0x54>
 80174e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174e4:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  uint8_t *key =
 80174e8:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80174f0:	f003 0302 	and.w	r3, r3, #2
 80174f4:	b2db      	uxtb	r3, r3
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d003      	beq.n	8017502 <mg_tls_recv_record+0x6e>
 80174fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80174fc:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8017500:	e002      	b.n	8017508 <mg_tls_recv_record+0x74>
 8017502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017504:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  uint8_t *iv =
 8017508:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 801750a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801750c:	699b      	ldr	r3, [r3, #24]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d001      	beq.n	8017516 <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 8017512:	2300      	movs	r3, #0
 8017514:	e0c7      	b.n	80176a6 <mg_tls_recv_record+0x212>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 8017516:	6878      	ldr	r0, [r7, #4]
 8017518:	f7ff fb25 	bl	8016b66 <mg_tls_got_record>
 801751c:	4603      	mov	r3, r0
 801751e:	f083 0301 	eor.w	r3, r3, #1
 8017522:	b2db      	uxtb	r3, r3
 8017524:	2b00      	cmp	r3, #0
 8017526:	d002      	beq.n	801752e <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 8017528:	f06f 0301 	mvn.w	r3, #1
 801752c:	e0bb      	b.n	80176a6 <mg_tls_recv_record+0x212>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 801752e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	781b      	ldrb	r3, [r3, #0]
 8017534:	2b17      	cmp	r3, #23
 8017536:	d026      	beq.n	8017586 <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 8017538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	2b14      	cmp	r3, #20
 8017540:	d103      	bne.n	801754a <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 8017542:	6878      	ldr	r0, [r7, #4]
 8017544:	f7ff fb37 	bl	8016bb6 <mg_tls_drop_record>
 8017548:	e7e5      	b.n	8017516 <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 801754a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	781b      	ldrb	r3, [r3, #0]
 8017550:	2b15      	cmp	r3, #21
 8017552:	d111      	bne.n	8017578 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 8017554:	4b56      	ldr	r3, [pc, #344]	@ (80176b0 <mg_tls_recv_record+0x21c>)
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	2b01      	cmp	r3, #1
 801755a:	dd09      	ble.n	8017570 <mg_tls_recv_record+0xdc>
 801755c:	4b55      	ldr	r3, [pc, #340]	@ (80176b4 <mg_tls_recv_record+0x220>)
 801755e:	f642 423a 	movw	r2, #11322	@ 0x2c3a
 8017562:	4955      	ldr	r1, [pc, #340]	@ (80176b8 <mg_tls_recv_record+0x224>)
 8017564:	2002      	movs	r0, #2
 8017566:	f7f6 fbf1 	bl	800dd4c <mg_log_prefix>
 801756a:	4854      	ldr	r0, [pc, #336]	@ (80176bc <mg_tls_recv_record+0x228>)
 801756c:	f7f6 fc3e 	bl	800ddec <mg_log>
      mg_tls_drop_record(c);
 8017570:	6878      	ldr	r0, [r7, #4]
 8017572:	f7ff fb20 	bl	8016bb6 <mg_tls_drop_record>
 8017576:	e7ce      	b.n	8017516 <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 8017578:	4951      	ldr	r1, [pc, #324]	@ (80176c0 <mg_tls_recv_record+0x22c>)
 801757a:	6878      	ldr	r0, [r7, #4]
 801757c:	f7f0 feba 	bl	80082f4 <mg_error>
      return -1;
 8017580:	f04f 33ff 	mov.w	r3, #4294967295
 8017584:	e08f      	b.n	80176a6 <mg_tls_recv_record+0x212>
      break;
 8017586:	bf00      	nop
    }
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8017588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	3303      	adds	r3, #3
 801758e:	781b      	ldrb	r3, [r3, #0]
 8017590:	b21b      	sxth	r3, r3
 8017592:	021b      	lsls	r3, r3, #8
 8017594:	b21a      	sxth	r2, r3
 8017596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	3304      	adds	r3, #4
 801759c:	781b      	ldrb	r3, [r3, #0]
 801759e:	b21b      	sxth	r3, r3
 80175a0:	4313      	orrs	r3, r2
 80175a2:	b21b      	sxth	r3, r3
 80175a4:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 80175a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	3305      	adds	r3, #5
 80175ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (msgsz < 16) {
 80175ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80175b0:	2b0f      	cmp	r3, #15
 80175b2:	d806      	bhi.n	80175c2 <mg_tls_recv_record+0x12e>
    mg_error(c, "wrong size");
 80175b4:	4943      	ldr	r1, [pc, #268]	@ (80176c4 <mg_tls_recv_record+0x230>)
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	f7f0 fe9c 	bl	80082f4 <mg_error>
    return -1;
 80175bc:	f04f 33ff 	mov.w	r3, #4294967295
 80175c0:	e071      	b.n	80176a6 <mg_tls_recv_record+0x212>
  }

  memmove(nonce, iv, sizeof(nonce));
 80175c2:	f107 030c 	add.w	r3, r7, #12
 80175c6:	220c      	movs	r2, #12
 80175c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80175ca:	4618      	mov	r0, r3
 80175cc:	f00e f8c4 	bl	8025758 <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 80175d0:	7d3a      	ldrb	r2, [r7, #20]
 80175d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175d4:	0e1b      	lsrs	r3, r3, #24
 80175d6:	b2db      	uxtb	r3, r3
 80175d8:	4053      	eors	r3, r2
 80175da:	b2db      	uxtb	r3, r3
 80175dc:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 80175de:	7d7a      	ldrb	r2, [r7, #21]
 80175e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175e2:	0c1b      	lsrs	r3, r3, #16
 80175e4:	b2db      	uxtb	r3, r3
 80175e6:	4053      	eors	r3, r2
 80175e8:	b2db      	uxtb	r3, r3
 80175ea:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 80175ec:	7dba      	ldrb	r2, [r7, #22]
 80175ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175f0:	0a1b      	lsrs	r3, r3, #8
 80175f2:	b2db      	uxtb	r3, r3
 80175f4:	4053      	eors	r3, r2
 80175f6:	b2db      	uxtb	r3, r3
 80175f8:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 80175fa:	7dfa      	ldrb	r2, [r7, #23]
 80175fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175fe:	b2db      	uxtb	r3, r3
 8017600:	4053      	eors	r3, r2
 8017602:	b2db      	uxtb	r3, r3
 8017604:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 8017606:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017608:	4619      	mov	r1, r3
 801760a:	2001      	movs	r0, #1
 801760c:	f00d fce4 	bl	8024fd8 <calloc>
 8017610:	4603      	mov	r3, r0
 8017612:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 8017614:	6a3b      	ldr	r3, [r7, #32]
 8017616:	2b00      	cmp	r3, #0
 8017618:	d106      	bne.n	8017628 <mg_tls_recv_record+0x194>
      mg_error(c, "TLS OOM");
 801761a:	492b      	ldr	r1, [pc, #172]	@ (80176c8 <mg_tls_recv_record+0x234>)
 801761c:	6878      	ldr	r0, [r7, #4]
 801761e:	f7f0 fe69 	bl	80082f4 <mg_error>
      return -1;
 8017622:	f04f 33ff 	mov.w	r3, #4294967295
 8017626:	e03e      	b.n	80176a6 <mg_tls_recv_record+0x212>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 8017628:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801762a:	f107 020c 	add.w	r2, r7, #12
 801762e:	9300      	str	r3, [sp, #0]
 8017630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017632:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017634:	6a38      	ldr	r0, [r7, #32]
 8017636:	f005 f99a 	bl	801c96e <mg_chacha20_poly1305_decrypt>
 801763a:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 801763c:	69fa      	ldr	r2, [r7, #28]
 801763e:	6a39      	ldr	r1, [r7, #32]
 8017640:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017642:	f00e f889 	bl	8025758 <memmove>
    free(dec);
 8017646:	6a38      	ldr	r0, [r7, #32]
 8017648:	f00d fcea 	bl	8025020 <free>
#else
  mg_gcm_initialize();
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif

  r = msgsz - 16 - 1;
 801764c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801764e:	3b11      	subs	r3, #17
 8017650:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 8017652:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017654:	3b11      	subs	r3, #17
 8017656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017658:	4413      	add	r3, r2
 801765a:	781a      	ldrb	r2, [r3, #0]
 801765c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801765e:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 8017660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017662:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8017664:	6812      	ldr	r2, [r2, #0]
 8017666:	1a9a      	subs	r2, r3, r2
 8017668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801766a:	615a      	str	r2, [r3, #20]
  tls->recv_len = (size_t) msgsz - 16 - 1;
 801766c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801766e:	f1a3 0211 	sub.w	r2, r3, #17
 8017672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017674:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801767c:	f003 0302 	and.w	r3, r3, #2
 8017680:	b2db      	uxtb	r3, r3
 8017682:	2b00      	cmp	r3, #0
 8017684:	d007      	beq.n	8017696 <mg_tls_recv_record+0x202>
 8017686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017688:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 801768c:	1c5a      	adds	r2, r3, #1
 801768e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017690:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
 8017694:	e006      	b.n	80176a4 <mg_tls_recv_record+0x210>
 8017696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017698:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 801769c:	1c5a      	adds	r2, r3, #1
 801769e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80176a0:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
  return r;
 80176a4:	69bb      	ldr	r3, [r7, #24]
}
 80176a6:	4618      	mov	r0, r3
 80176a8:	3740      	adds	r7, #64	@ 0x40
 80176aa:	46bd      	mov	sp, r7
 80176ac:	bd80      	pop	{r7, pc}
 80176ae:	bf00      	nop
 80176b0:	24000258 	.word	0x24000258
 80176b4:	0802a2bc 	.word	0x0802a2bc
 80176b8:	080264c4 	.word	0x080264c4
 80176bc:	08027fb4 	.word	0x08027fb4
 80176c0:	08027fd0 	.word	0x08027fd0
 80176c4:	08027e88 	.word	0x08027e88
 80176c8:	08027fac 	.word	0x08027fac

080176cc <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 80176cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176ce:	b0d5      	sub	sp, #340	@ 0x154
 80176d0:	af00      	add	r7, sp, #0
 80176d2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80176d6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80176da:	6018      	str	r0, [r3, #0]
 80176dc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80176e0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80176e4:	6019      	str	r1, [r3, #0]
 80176e6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80176ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80176ee:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80176f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80176f4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80176fe:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 8017702:	4b41      	ldr	r3, [pc, #260]	@ (8017808 <mg_tls_calc_cert_verify_hash+0x13c>)
 8017704:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8017708:	461d      	mov	r5, r3
 801770a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801770c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801770e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017710:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017712:	682b      	ldr	r3, [r5, #0]
 8017714:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 8017716:	4b3d      	ldr	r3, [pc, #244]	@ (801780c <mg_tls_calc_cert_verify_hash+0x140>)
 8017718:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 801771c:	461d      	mov	r5, r3
 801771e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017726:	682b      	ldr	r3, [r5, #0]
 8017728:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 801772a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801772e:	2240      	movs	r2, #64	@ 0x40
 8017730:	2120      	movs	r1, #32
 8017732:	4618      	mov	r0, r3
 8017734:	f00e f82a 	bl	802578c <memset>
  if (is_client) {
 8017738:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801773c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d018      	beq.n	8017778 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 8017746:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801774a:	3340      	adds	r3, #64	@ 0x40
 801774c:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8017750:	469c      	mov	ip, r3
 8017752:	f104 0e20 	add.w	lr, r4, #32
 8017756:	4665      	mov	r5, ip
 8017758:	4626      	mov	r6, r4
 801775a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801775c:	6028      	str	r0, [r5, #0]
 801775e:	6069      	str	r1, [r5, #4]
 8017760:	60aa      	str	r2, [r5, #8]
 8017762:	60eb      	str	r3, [r5, #12]
 8017764:	3410      	adds	r4, #16
 8017766:	f10c 0c10 	add.w	ip, ip, #16
 801776a:	4574      	cmp	r4, lr
 801776c:	d1f3      	bne.n	8017756 <mg_tls_calc_cert_verify_hash+0x8a>
 801776e:	4662      	mov	r2, ip
 8017770:	4623      	mov	r3, r4
 8017772:	881b      	ldrh	r3, [r3, #0]
 8017774:	8013      	strh	r3, [r2, #0]
 8017776:	e017      	b.n	80177a8 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 8017778:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 801777c:	3340      	adds	r3, #64	@ 0x40
 801777e:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8017782:	469c      	mov	ip, r3
 8017784:	f104 0e20 	add.w	lr, r4, #32
 8017788:	4665      	mov	r5, ip
 801778a:	4626      	mov	r6, r4
 801778c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801778e:	6028      	str	r0, [r5, #0]
 8017790:	6069      	str	r1, [r5, #4]
 8017792:	60aa      	str	r2, [r5, #8]
 8017794:	60eb      	str	r3, [r5, #12]
 8017796:	3410      	adds	r4, #16
 8017798:	f10c 0c10 	add.w	ip, ip, #16
 801779c:	4574      	cmp	r4, lr
 801779e:	d1f3      	bne.n	8017788 <mg_tls_calc_cert_verify_hash+0xbc>
 80177a0:	4662      	mov	r2, ip
 80177a2:	4623      	mov	r3, r4
 80177a4:	881b      	ldrh	r3, [r3, #0]
 80177a6:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80177a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80177ac:	f103 0120 	add.w	r1, r3, #32
 80177b0:	f107 0310 	add.w	r3, r7, #16
 80177b4:	2270      	movs	r2, #112	@ 0x70
 80177b6:	4618      	mov	r0, r3
 80177b8:	f00d ffce 	bl	8025758 <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 80177bc:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80177c0:	3362      	adds	r3, #98	@ 0x62
 80177c2:	f107 0210 	add.w	r2, r7, #16
 80177c6:	4611      	mov	r1, r2
 80177c8:	4618      	mov	r0, r3
 80177ca:	f7fd f86e 	bl	80148aa <mg_sha256_final>

  mg_sha256_init(&sha256);
 80177ce:	f107 0310 	add.w	r3, r7, #16
 80177d2:	4618      	mov	r0, r3
 80177d4:	f7fc fdec 	bl	80143b0 <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 80177d8:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80177dc:	f107 0310 	add.w	r3, r7, #16
 80177e0:	2282      	movs	r2, #130	@ 0x82
 80177e2:	4618      	mov	r0, r3
 80177e4:	f7fd f828 	bl	8014838 <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 80177e8:	f107 0210 	add.w	r2, r7, #16
 80177ec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80177f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80177f4:	4611      	mov	r1, r2
 80177f6:	6818      	ldr	r0, [r3, #0]
 80177f8:	f7fd f857 	bl	80148aa <mg_sha256_final>
}
 80177fc:	bf00      	nop
 80177fe:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8017802:	46bd      	mov	sp, r7
 8017804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017806:	bf00      	nop
 8017808:	08027fe4 	.word	0x08027fe4
 801780c:	08028008 	.word	0x08028008

08017810 <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 8017810:	b580      	push	{r7, lr}
 8017812:	b08c      	sub	sp, #48	@ 0x30
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801781e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	3368      	adds	r3, #104	@ 0x68
 8017824:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 8017826:	6878      	ldr	r0, [r7, #4]
 8017828:	f7ff f99d 	bl	8016b66 <mg_tls_got_record>
 801782c:	4603      	mov	r3, r0
 801782e:	f083 0301 	eor.w	r3, r3, #1
 8017832:	b2db      	uxtb	r3, r3
 8017834:	2b00      	cmp	r3, #0
 8017836:	d002      	beq.n	801783e <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8017838:	f06f 0301 	mvn.w	r3, #1
 801783c:	e16d      	b.n	8017b1a <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 801783e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	781b      	ldrb	r3, [r3, #0]
 8017844:	2b16      	cmp	r3, #22
 8017846:	d105      	bne.n	8017854 <mg_tls_server_recv_hello+0x44>
 8017848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	3305      	adds	r3, #5
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	2b01      	cmp	r3, #1
 8017852:	d006      	beq.n	8017862 <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 8017854:	4998      	ldr	r1, [pc, #608]	@ (8017ab8 <mg_tls_server_recv_hello+0x2a8>)
 8017856:	6878      	ldr	r0, [r7, #4]
 8017858:	f7f0 fd4c 	bl	80082f4 <mg_error>
    return -1;
 801785c:	f04f 33ff 	mov.w	r3, #4294967295
 8017860:	e15b      	b.n	8017b1a <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->len < 50) goto fail;
 8017862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017864:	689b      	ldr	r3, [r3, #8]
 8017866:	2b31      	cmp	r3, #49	@ 0x31
 8017868:	f240 8146 	bls.w	8017af8 <mg_tls_server_recv_hello+0x2e8>
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 801786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	3303      	adds	r3, #3
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	b21b      	sxth	r3, r3
 8017876:	021b      	lsls	r3, r3, #8
 8017878:	b21a      	sxth	r2, r3
 801787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	3304      	adds	r3, #4
 8017880:	781b      	ldrb	r3, [r3, #0]
 8017882:	b21b      	sxth	r3, r3
 8017884:	4313      	orrs	r3, r2
 8017886:	b21b      	sxth	r3, r3
 8017888:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 801788a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801788c:	1d1a      	adds	r2, r3, #4
 801788e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017890:	689b      	ldr	r3, [r3, #8]
 8017892:	429a      	cmp	r2, r3
 8017894:	f200 8132 	bhi.w	8017afc <mg_tls_server_recv_hello+0x2ec>
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8017898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801789a:	f103 0020 	add.w	r0, r3, #32
 801789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	3305      	adds	r3, #5
 80178a4:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80178a6:	4619      	mov	r1, r3
 80178a8:	f7fc ffc6 	bl	8014838 <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 80178ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178ae:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80178b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	330b      	adds	r3, #11
 80178b8:	2220      	movs	r2, #32
 80178ba:	4619      	mov	r1, r3
 80178bc:	f00d ff4c 	bl	8025758 <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 80178c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80178c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 80178cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80178d0:	2b20      	cmp	r3, #32
 80178d2:	d10b      	bne.n	80178ec <mg_tls_server_recv_hello+0xdc>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 80178d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178d6:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 80178da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	332c      	adds	r3, #44	@ 0x2c
 80178e0:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80178e4:	4619      	mov	r1, r3
 80178e6:	f00d ff37 	bl	8025758 <memmove>
 80178ea:	e011      	b.n	8017910 <mg_tls_server_recv_hello+0x100>
  } else if (session_id_len != 0) {
 80178ec:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d00d      	beq.n	8017910 <mg_tls_server_recv_hello+0x100>
    MG_INFO(("bad session id len"));
 80178f4:	4b71      	ldr	r3, [pc, #452]	@ (8017abc <mg_tls_server_recv_hello+0x2ac>)
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	2b01      	cmp	r3, #1
 80178fa:	dd09      	ble.n	8017910 <mg_tls_server_recv_hello+0x100>
 80178fc:	4b70      	ldr	r3, [pc, #448]	@ (8017ac0 <mg_tls_server_recv_hello+0x2b0>)
 80178fe:	f642 429b 	movw	r2, #11419	@ 0x2c9b
 8017902:	4970      	ldr	r1, [pc, #448]	@ (8017ac4 <mg_tls_server_recv_hello+0x2b4>)
 8017904:	2002      	movs	r0, #2
 8017906:	f7f6 fa21 	bl	800dd4c <mg_log_prefix>
 801790a:	486f      	ldr	r0, [pc, #444]	@ (8017ac8 <mg_tls_server_recv_hello+0x2b8>)
 801790c:	f7f6 fa6e 	bl	800ddec <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 8017910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017912:	681a      	ldr	r2, [r3, #0]
 8017914:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017918:	332c      	adds	r3, #44	@ 0x2c
 801791a:	4413      	add	r3, r2
 801791c:	781b      	ldrb	r3, [r3, #0]
 801791e:	b21b      	sxth	r3, r3
 8017920:	021b      	lsls	r3, r3, #8
 8017922:	b21a      	sxth	r2, r3
 8017924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017926:	6819      	ldr	r1, [r3, #0]
 8017928:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801792c:	332d      	adds	r3, #45	@ 0x2d
 801792e:	440b      	add	r3, r1
 8017930:	781b      	ldrb	r3, [r3, #0]
 8017932:	b21b      	sxth	r3, r3
 8017934:	4313      	orrs	r3, r2
 8017936:	b21b      	sxth	r3, r3
 8017938:	83fb      	strh	r3, [r7, #30]
  if (((uint32_t) cipher_suites_len + 46 + session_id_len) > rio->len)
 801793a:	8bfa      	ldrh	r2, [r7, #30]
 801793c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8017940:	4413      	add	r3, r2
 8017942:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8017946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017948:	689b      	ldr	r3, [r3, #8]
 801794a:	429a      	cmp	r2, r3
 801794c:	f200 80d8 	bhi.w	8017b00 <mg_tls_server_recv_hello+0x2f0>
    goto fail;
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 8017950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017952:	681a      	ldr	r2, [r3, #0]
 8017954:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8017958:	8bfb      	ldrh	r3, [r7, #30]
 801795a:	440b      	add	r3, r1
 801795c:	3330      	adds	r3, #48	@ 0x30
 801795e:	4413      	add	r3, r2
 8017960:	781b      	ldrb	r3, [r3, #0]
 8017962:	b21b      	sxth	r3, r3
 8017964:	021b      	lsls	r3, r3, #8
 8017966:	b21a      	sxth	r2, r3
 8017968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801796a:	6819      	ldr	r1, [r3, #0]
 801796c:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 8017970:	8bfb      	ldrh	r3, [r7, #30]
 8017972:	4403      	add	r3, r0
 8017974:	3331      	adds	r3, #49	@ 0x31
 8017976:	440b      	add	r3, r1
 8017978:	781b      	ldrb	r3, [r3, #0]
 801797a:	b21b      	sxth	r3, r3
 801797c:	4313      	orrs	r3, r2
 801797e:	b21b      	sxth	r3, r3
 8017980:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 8017982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017984:	681a      	ldr	r2, [r3, #0]
 8017986:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 801798a:	8bfb      	ldrh	r3, [r7, #30]
 801798c:	440b      	add	r3, r1
 801798e:	3332      	adds	r3, #50	@ 0x32
 8017990:	4413      	add	r3, r2
 8017992:	61bb      	str	r3, [r7, #24]
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 8017994:	8bbb      	ldrh	r3, [r7, #28]
 8017996:	69ba      	ldr	r2, [r7, #24]
 8017998:	441a      	add	r2, r3
 801799a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801799c:	6819      	ldr	r1, [r3, #0]
 801799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179a0:	689b      	ldr	r3, [r3, #8]
 80179a2:	440b      	add	r3, r1
 80179a4:	429a      	cmp	r2, r3
 80179a6:	f200 80ad 	bhi.w	8017b04 <mg_tls_server_recv_hello+0x2f4>
  for (j = 0; j < ext_len;) {
 80179aa:	2300      	movs	r3, #0
 80179ac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80179ae:	e09d      	b.n	8017aec <mg_tls_server_recv_hello+0x2dc>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 80179b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179b2:	3302      	adds	r3, #2
 80179b4:	69ba      	ldr	r2, [r7, #24]
 80179b6:	4413      	add	r3, r2
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	b21b      	sxth	r3, r3
 80179bc:	021b      	lsls	r3, r3, #8
 80179be:	b21a      	sxth	r2, r3
 80179c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179c2:	3303      	adds	r3, #3
 80179c4:	69b9      	ldr	r1, [r7, #24]
 80179c6:	440b      	add	r3, r1
 80179c8:	781b      	ldrb	r3, [r3, #0]
 80179ca:	b21b      	sxth	r3, r3
 80179cc:	4313      	orrs	r3, r2
 80179ce:	b21b      	sxth	r3, r3
 80179d0:	82fb      	strh	r3, [r7, #22]
    if (MG_LOAD_BE16(ext + j) != 0x0033) {  // not a key share extension, ignore
 80179d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179d4:	69ba      	ldr	r2, [r7, #24]
 80179d6:	4413      	add	r3, r2
 80179d8:	781b      	ldrb	r3, [r3, #0]
 80179da:	b21b      	sxth	r3, r3
 80179dc:	021b      	lsls	r3, r3, #8
 80179de:	b21a      	sxth	r2, r3
 80179e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179e2:	3301      	adds	r3, #1
 80179e4:	69b9      	ldr	r1, [r7, #24]
 80179e6:	440b      	add	r3, r1
 80179e8:	781b      	ldrb	r3, [r3, #0]
 80179ea:	b21b      	sxth	r3, r3
 80179ec:	4313      	orrs	r3, r2
 80179ee:	b21b      	sxth	r3, r3
 80179f0:	2b33      	cmp	r3, #51	@ 0x33
 80179f2:	d006      	beq.n	8017a02 <mg_tls_server_recv_hello+0x1f2>
      j += (uint16_t) (n + 4);
 80179f4:	8afa      	ldrh	r2, [r7, #22]
 80179f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80179f8:	4413      	add	r3, r2
 80179fa:	b29b      	uxth	r3, r3
 80179fc:	3304      	adds	r3, #4
 80179fe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 8017a00:	e074      	b.n	8017aec <mg_tls_server_recv_hello+0x2dc>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 8017a02:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017a04:	3304      	adds	r3, #4
 8017a06:	69ba      	ldr	r2, [r7, #24]
 8017a08:	4413      	add	r3, r2
 8017a0a:	781b      	ldrb	r3, [r3, #0]
 8017a0c:	b21b      	sxth	r3, r3
 8017a0e:	021b      	lsls	r3, r3, #8
 8017a10:	b21a      	sxth	r2, r3
 8017a12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017a14:	3305      	adds	r3, #5
 8017a16:	69b9      	ldr	r1, [r7, #24]
 8017a18:	440b      	add	r3, r1
 8017a1a:	781b      	ldrb	r3, [r3, #0]
 8017a1c:	b21b      	sxth	r3, r3
 8017a1e:	4313      	orrs	r3, r2
 8017a20:	b21b      	sxth	r3, r3
 8017a22:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 8017a24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017a26:	3306      	adds	r3, #6
 8017a28:	69ba      	ldr	r2, [r7, #24]
 8017a2a:	4413      	add	r3, r2
 8017a2c:	613b      	str	r3, [r7, #16]
    if (((size_t) key_exchange_len +
 8017a2e:	8aba      	ldrh	r2, [r7, #20]
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8017a30:	693b      	ldr	r3, [r7, #16]
 8017a32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017a34:	6809      	ldr	r1, [r1, #0]
 8017a36:	1a5b      	subs	r3, r3, r1
    if (((size_t) key_exchange_len +
 8017a38:	441a      	add	r2, r3
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8017a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a3c:	689b      	ldr	r3, [r3, #8]
    if (((size_t) key_exchange_len +
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	d862      	bhi.n	8017b08 <mg_tls_server_recv_hello+0x2f8>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 8017a42:	2300      	movs	r3, #0
 8017a44:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8017a46:	e047      	b.n	8017ad8 <mg_tls_server_recv_hello+0x2c8>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 8017a48:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017a4a:	3302      	adds	r3, #2
 8017a4c:	693a      	ldr	r2, [r7, #16]
 8017a4e:	4413      	add	r3, r2
 8017a50:	781b      	ldrb	r3, [r3, #0]
 8017a52:	b21b      	sxth	r3, r3
 8017a54:	021b      	lsls	r3, r3, #8
 8017a56:	b21a      	sxth	r2, r3
 8017a58:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017a5a:	3303      	adds	r3, #3
 8017a5c:	6939      	ldr	r1, [r7, #16]
 8017a5e:	440b      	add	r3, r1
 8017a60:	781b      	ldrb	r3, [r3, #0]
 8017a62:	b21b      	sxth	r3, r3
 8017a64:	4313      	orrs	r3, r2
 8017a66:	b21b      	sxth	r3, r3
 8017a68:	81fb      	strh	r3, [r7, #14]
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8017a6a:	89fa      	ldrh	r2, [r7, #14]
 8017a6c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017a6e:	4413      	add	r3, r2
 8017a70:	1d1a      	adds	r2, r3, #4
 8017a72:	8abb      	ldrh	r3, [r7, #20]
 8017a74:	429a      	cmp	r2, r3
 8017a76:	d849      	bhi.n	8017b0c <mg_tls_server_recv_hello+0x2fc>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 8017a78:	89fb      	ldrh	r3, [r7, #14]
 8017a7a:	2b20      	cmp	r3, #32
 8017a7c:	d126      	bne.n	8017acc <mg_tls_server_recv_hello+0x2bc>
 8017a7e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017a80:	693a      	ldr	r2, [r7, #16]
 8017a82:	4413      	add	r3, r2
 8017a84:	781b      	ldrb	r3, [r3, #0]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d120      	bne.n	8017acc <mg_tls_server_recv_hello+0x2bc>
 8017a8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017a8c:	3301      	adds	r3, #1
 8017a8e:	693a      	ldr	r2, [r7, #16]
 8017a90:	4413      	add	r3, r2
 8017a92:	781b      	ldrb	r3, [r3, #0]
 8017a94:	2b1d      	cmp	r3, #29
 8017a96:	d119      	bne.n	8017acc <mg_tls_server_recv_hello+0x2bc>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 8017a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a9a:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8017a9e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017aa0:	3304      	adds	r3, #4
 8017aa2:	693a      	ldr	r2, [r7, #16]
 8017aa4:	4413      	add	r3, r2
 8017aa6:	89fa      	ldrh	r2, [r7, #14]
 8017aa8:	4619      	mov	r1, r3
 8017aaa:	f00d fe55 	bl	8025758 <memmove>
        mg_tls_drop_record(c);
 8017aae:	6878      	ldr	r0, [r7, #4]
 8017ab0:	f7ff f881 	bl	8016bb6 <mg_tls_drop_record>
        return 0;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	e030      	b.n	8017b1a <mg_tls_server_recv_hello+0x30a>
 8017ab8:	0802802c 	.word	0x0802802c
 8017abc:	24000258 	.word	0x24000258
 8017ac0:	0802a2d0 	.word	0x0802a2d0
 8017ac4:	080264c4 	.word	0x080264c4
 8017ac8:	08028048 	.word	0x08028048
      }
      k += (uint16_t) (m + 4);
 8017acc:	89fa      	ldrh	r2, [r7, #14]
 8017ace:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017ad0:	4413      	add	r3, r2
 8017ad2:	b29b      	uxth	r3, r3
 8017ad4:	3304      	adds	r3, #4
 8017ad6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 8017ad8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8017ada:	8abb      	ldrh	r3, [r7, #20]
 8017adc:	429a      	cmp	r2, r3
 8017ade:	d3b3      	bcc.n	8017a48 <mg_tls_server_recv_hello+0x238>
    }
    j += (uint16_t) (n + 4);
 8017ae0:	8afa      	ldrh	r2, [r7, #22]
 8017ae2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8017ae4:	4413      	add	r3, r2
 8017ae6:	b29b      	uxth	r3, r3
 8017ae8:	3304      	adds	r3, #4
 8017aea:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 8017aec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8017aee:	8bbb      	ldrh	r3, [r7, #28]
 8017af0:	429a      	cmp	r2, r3
 8017af2:	f4ff af5d 	bcc.w	80179b0 <mg_tls_server_recv_hello+0x1a0>
  }
fail:
 8017af6:	e00a      	b.n	8017b0e <mg_tls_server_recv_hello+0x2fe>
  if (rio->len < 50) goto fail;
 8017af8:	bf00      	nop
 8017afa:	e008      	b.n	8017b0e <mg_tls_server_recv_hello+0x2fe>
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 8017afc:	bf00      	nop
 8017afe:	e006      	b.n	8017b0e <mg_tls_server_recv_hello+0x2fe>
    goto fail;
 8017b00:	bf00      	nop
 8017b02:	e004      	b.n	8017b0e <mg_tls_server_recv_hello+0x2fe>
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 8017b04:	bf00      	nop
 8017b06:	e002      	b.n	8017b0e <mg_tls_server_recv_hello+0x2fe>
      goto fail;
 8017b08:	bf00      	nop
 8017b0a:	e000      	b.n	8017b0e <mg_tls_server_recv_hello+0x2fe>
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8017b0c:	bf00      	nop
  mg_error(c, "bad client hello");
 8017b0e:	4905      	ldr	r1, [pc, #20]	@ (8017b24 <mg_tls_server_recv_hello+0x314>)
 8017b10:	6878      	ldr	r0, [r7, #4]
 8017b12:	f7f0 fbef 	bl	80082f4 <mg_error>
  return -1;
 8017b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	3730      	adds	r7, #48	@ 0x30
 8017b1e:	46bd      	mov	sp, r7
 8017b20:	bd80      	pop	{r7, pc}
 8017b22:	bf00      	nop
 8017b24:	0802805c 	.word	0x0802805c

08017b28 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 8017b28:	b5b0      	push	{r4, r5, r7, lr}
 8017b2a:	b0b4      	sub	sp, #208	@ 0xd0
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017b36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 8017b3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017b3e:	3304      	adds	r3, #4
 8017b40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 8017b44:	4a4c      	ldr	r2, [pc, #304]	@ (8017c78 <mg_tls_server_send_hello+0x150>)
 8017b46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8017b4a:	4611      	mov	r1, r2
 8017b4c:	227a      	movs	r2, #122	@ 0x7a
 8017b4e:	4618      	mov	r0, r3
 8017b50:	f00d ff51 	bl	80259f6 <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 8017b54:	f107 030c 	add.w	r3, r7, #12
 8017b58:	2120      	movs	r1, #32
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	f7e8 fdd6 	bl	800070c <mg_random>
 8017b60:	4603      	mov	r3, r0
 8017b62:	f083 0301 	eor.w	r3, r3, #1
 8017b66:	b2db      	uxtb	r3, r3
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	d003      	beq.n	8017b74 <mg_tls_server_send_hello+0x4c>
 8017b6c:	4943      	ldr	r1, [pc, #268]	@ (8017c7c <mg_tls_server_send_hello+0x154>)
 8017b6e:	6878      	ldr	r0, [r7, #4]
 8017b70:	f7f0 fbc0 	bl	80082f4 <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 8017b74:	f107 010c 	add.w	r1, r7, #12
 8017b78:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017b7c:	2301      	movs	r3, #1
 8017b7e:	4a40      	ldr	r2, [pc, #256]	@ (8017c80 <mg_tls_server_send_hello+0x158>)
 8017b80:	f009 f872 	bl	8020c68 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 8017b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017b88:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8017b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017b90:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8017b94:	f107 010c 	add.w	r1, r7, #12
 8017b98:	2301      	movs	r3, #1
 8017b9a:	f009 f865 	bl	8020c68 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 8017b9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017ba2:	33f0      	adds	r3, #240	@ 0xf0
 8017ba4:	2220      	movs	r2, #32
 8017ba6:	4619      	mov	r1, r3
 8017ba8:	4836      	ldr	r0, [pc, #216]	@ (8017c84 <mg_tls_server_send_hello+0x15c>)
 8017baa:	f7fe fe85 	bl	80168b8 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 8017bae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8017bb2:	3306      	adds	r3, #6
 8017bb4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8017bb8:	3290      	adds	r2, #144	@ 0x90
 8017bba:	6815      	ldr	r5, [r2, #0]
 8017bbc:	6854      	ldr	r4, [r2, #4]
 8017bbe:	6890      	ldr	r0, [r2, #8]
 8017bc0:	68d1      	ldr	r1, [r2, #12]
 8017bc2:	601d      	str	r5, [r3, #0]
 8017bc4:	605c      	str	r4, [r3, #4]
 8017bc6:	6098      	str	r0, [r3, #8]
 8017bc8:	60d9      	str	r1, [r3, #12]
 8017bca:	6915      	ldr	r5, [r2, #16]
 8017bcc:	6954      	ldr	r4, [r2, #20]
 8017bce:	6990      	ldr	r0, [r2, #24]
 8017bd0:	69d1      	ldr	r1, [r2, #28]
 8017bd2:	611d      	str	r5, [r3, #16]
 8017bd4:	615c      	str	r4, [r3, #20]
 8017bd6:	6198      	str	r0, [r3, #24]
 8017bd8:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 8017bda:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8017bde:	3327      	adds	r3, #39	@ 0x27
 8017be0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8017be4:	32b0      	adds	r2, #176	@ 0xb0
 8017be6:	6815      	ldr	r5, [r2, #0]
 8017be8:	6854      	ldr	r4, [r2, #4]
 8017bea:	6890      	ldr	r0, [r2, #8]
 8017bec:	68d1      	ldr	r1, [r2, #12]
 8017bee:	601d      	str	r5, [r3, #0]
 8017bf0:	605c      	str	r4, [r3, #4]
 8017bf2:	6098      	str	r0, [r3, #8]
 8017bf4:	60d9      	str	r1, [r3, #12]
 8017bf6:	6915      	ldr	r5, [r2, #16]
 8017bf8:	6954      	ldr	r4, [r2, #20]
 8017bfa:	6990      	ldr	r0, [r2, #24]
 8017bfc:	69d1      	ldr	r1, [r2, #28]
 8017bfe:	611d      	str	r5, [r3, #16]
 8017c00:	615c      	str	r4, [r3, #20]
 8017c02:	6198      	str	r0, [r3, #24]
 8017c04:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 8017c06:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8017c0a:	3354      	adds	r3, #84	@ 0x54
 8017c0c:	461d      	mov	r5, r3
 8017c0e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8017c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c14:	6028      	str	r0, [r5, #0]
 8017c16:	6069      	str	r1, [r5, #4]
 8017c18:	60aa      	str	r2, [r5, #8]
 8017c1a:	60eb      	str	r3, [r5, #12]
 8017c1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017c1e:	6128      	str	r0, [r5, #16]
 8017c20:	6169      	str	r1, [r5, #20]
 8017c22:	61aa      	str	r2, [r5, #24]
 8017c24:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 8017c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017c2a:	6899      	ldr	r1, [r3, #8]
 8017c2c:	2305      	movs	r3, #5
 8017c2e:	4a16      	ldr	r2, [pc, #88]	@ (8017c88 <mg_tls_server_send_hello+0x160>)
 8017c30:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8017c34:	f7f5 f96c 	bl	800cf10 <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 8017c38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017c3c:	6899      	ldr	r1, [r3, #8]
 8017c3e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8017c42:	237a      	movs	r3, #122	@ 0x7a
 8017c44:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8017c48:	f7f5 f962 	bl	800cf10 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 8017c4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8017c50:	3320      	adds	r3, #32
 8017c52:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8017c56:	227a      	movs	r2, #122	@ 0x7a
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f7fc fded 	bl	8014838 <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 8017c5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8017c62:	6899      	ldr	r1, [r3, #8]
 8017c64:	2306      	movs	r3, #6
 8017c66:	4a09      	ldr	r2, [pc, #36]	@ (8017c8c <mg_tls_server_send_hello+0x164>)
 8017c68:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8017c6c:	f7f5 f950 	bl	800cf10 <mg_iobuf_add>
}
 8017c70:	bf00      	nop
 8017c72:	37d0      	adds	r7, #208	@ 0xd0
 8017c74:	46bd      	mov	sp, r7
 8017c76:	bdb0      	pop	{r4, r5, r7, pc}
 8017c78:	08028094 	.word	0x08028094
 8017c7c:	08028070 	.word	0x08028070
 8017c80:	0802a02c 	.word	0x0802a02c
 8017c84:	08028074 	.word	0x08028074
 8017c88:	08028084 	.word	0x08028084
 8017c8c:	0802808c 	.word	0x0802808c

08017c90 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b086      	sub	sp, #24
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017c9e:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 8017ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8017cd0 <mg_tls_server_send_ext+0x40>)
 8017ca2:	60fb      	str	r3, [r7, #12]
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	823b      	strh	r3, [r7, #16]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 8017ca8:	697b      	ldr	r3, [r7, #20]
 8017caa:	3320      	adds	r3, #32
 8017cac:	f107 010c 	add.w	r1, r7, #12
 8017cb0:	2206      	movs	r2, #6
 8017cb2:	4618      	mov	r0, r3
 8017cb4:	f7fc fdc0 	bl	8014838 <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 8017cb8:	f107 010c 	add.w	r1, r7, #12
 8017cbc:	2316      	movs	r3, #22
 8017cbe:	2206      	movs	r2, #6
 8017cc0:	6878      	ldr	r0, [r7, #4]
 8017cc2:	f7ff faeb 	bl	801729c <mg_tls_encrypt>
}
 8017cc6:	bf00      	nop
 8017cc8:	3718      	adds	r7, #24
 8017cca:	46bd      	mov	sp, r7
 8017ccc:	bd80      	pop	{r7, pc}
 8017cce:	bf00      	nop
 8017cd0:	02000008 	.word	0x02000008

08017cd4 <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b088      	sub	sp, #32
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017ce2:	61fb      	str	r3, [r7, #28]
  int send_ca = !c->is_client && tls->ca_der.len > 0;
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8017cea:	f003 0302 	and.w	r3, r3, #2
 8017cee:	b2db      	uxtb	r3, r3
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d106      	bne.n	8017d02 <mg_tls_server_send_cert+0x2e>
 8017cf4:	69fb      	ldr	r3, [r7, #28]
 8017cf6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d001      	beq.n	8017d02 <mg_tls_server_send_cert+0x2e>
 8017cfe:	2301      	movs	r3, #1
 8017d00:	e000      	b.n	8017d04 <mg_tls_server_send_cert+0x30>
 8017d02:	2300      	movs	r3, #0
 8017d04:	61bb      	str	r3, [r7, #24]
  // server DER certificate + CA (optional)
  size_t n = tls->cert_der.len + (send_ca ? tls->ca_der.len + 5 : 0);
 8017d06:	69fb      	ldr	r3, [r7, #28]
 8017d08:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8017d0c:	69bb      	ldr	r3, [r7, #24]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d004      	beq.n	8017d1c <mg_tls_server_send_cert+0x48>
 8017d12:	69fb      	ldr	r3, [r7, #28]
 8017d14:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017d18:	3305      	adds	r3, #5
 8017d1a:	e000      	b.n	8017d1e <mg_tls_server_send_cert+0x4a>
 8017d1c:	2300      	movs	r3, #0
 8017d1e:	4413      	add	r3, r2
 8017d20:	617b      	str	r3, [r7, #20]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 8017d22:	697b      	ldr	r3, [r7, #20]
 8017d24:	330d      	adds	r3, #13
 8017d26:	4619      	mov	r1, r3
 8017d28:	2001      	movs	r0, #1
 8017d2a:	f00d f955 	bl	8024fd8 <calloc>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	613b      	str	r3, [r7, #16]
  if (cert == NULL) {
 8017d32:	693b      	ldr	r3, [r7, #16]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d104      	bne.n	8017d42 <mg_tls_server_send_cert+0x6e>
    mg_error(c, "tls cert oom");
 8017d38:	495e      	ldr	r1, [pc, #376]	@ (8017eb4 <mg_tls_server_send_cert+0x1e0>)
 8017d3a:	6878      	ldr	r0, [r7, #4]
 8017d3c:	f7f0 fada 	bl	80082f4 <mg_error>
    return;
 8017d40:	e0b4      	b.n	8017eac <mg_tls_server_send_cert+0x1d8>
  }
  cert[0] = 0x0b;  // handshake header
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	220b      	movs	r2, #11
 8017d46:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 1, n + 9);
 8017d48:	697b      	ldr	r3, [r7, #20]
 8017d4a:	3309      	adds	r3, #9
 8017d4c:	0c1a      	lsrs	r2, r3, #16
 8017d4e:	693b      	ldr	r3, [r7, #16]
 8017d50:	3301      	adds	r3, #1
 8017d52:	b2d2      	uxtb	r2, r2
 8017d54:	701a      	strb	r2, [r3, #0]
 8017d56:	697b      	ldr	r3, [r7, #20]
 8017d58:	3309      	adds	r3, #9
 8017d5a:	0a1a      	lsrs	r2, r3, #8
 8017d5c:	693b      	ldr	r3, [r7, #16]
 8017d5e:	3302      	adds	r3, #2
 8017d60:	b2d2      	uxtb	r2, r2
 8017d62:	701a      	strb	r2, [r3, #0]
 8017d64:	697b      	ldr	r3, [r7, #20]
 8017d66:	b2da      	uxtb	r2, r3
 8017d68:	693b      	ldr	r3, [r7, #16]
 8017d6a:	3303      	adds	r3, #3
 8017d6c:	3209      	adds	r2, #9
 8017d6e:	b2d2      	uxtb	r2, r2
 8017d70:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                 // request context
 8017d72:	693b      	ldr	r3, [r7, #16]
 8017d74:	3304      	adds	r3, #4
 8017d76:	2200      	movs	r2, #0
 8017d78:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 5, n + 5);              // 3 bytes: cert (s) length
 8017d7a:	697b      	ldr	r3, [r7, #20]
 8017d7c:	3305      	adds	r3, #5
 8017d7e:	0c1a      	lsrs	r2, r3, #16
 8017d80:	693b      	ldr	r3, [r7, #16]
 8017d82:	3305      	adds	r3, #5
 8017d84:	b2d2      	uxtb	r2, r2
 8017d86:	701a      	strb	r2, [r3, #0]
 8017d88:	697b      	ldr	r3, [r7, #20]
 8017d8a:	3305      	adds	r3, #5
 8017d8c:	0a1a      	lsrs	r2, r3, #8
 8017d8e:	693b      	ldr	r3, [r7, #16]
 8017d90:	3306      	adds	r3, #6
 8017d92:	b2d2      	uxtb	r2, r2
 8017d94:	701a      	strb	r2, [r3, #0]
 8017d96:	697b      	ldr	r3, [r7, #20]
 8017d98:	b2da      	uxtb	r2, r3
 8017d9a:	693b      	ldr	r3, [r7, #16]
 8017d9c:	3307      	adds	r3, #7
 8017d9e:	3205      	adds	r2, #5
 8017da0:	b2d2      	uxtb	r2, r2
 8017da2:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 8, tls->cert_der.len);  // 3 bytes: first cert len
 8017da4:	69fb      	ldr	r3, [r7, #28]
 8017da6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017daa:	0c1a      	lsrs	r2, r3, #16
 8017dac:	693b      	ldr	r3, [r7, #16]
 8017dae:	3308      	adds	r3, #8
 8017db0:	b2d2      	uxtb	r2, r2
 8017db2:	701a      	strb	r2, [r3, #0]
 8017db4:	69fb      	ldr	r3, [r7, #28]
 8017db6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017dba:	0a1a      	lsrs	r2, r3, #8
 8017dbc:	693b      	ldr	r3, [r7, #16]
 8017dbe:	3309      	adds	r3, #9
 8017dc0:	b2d2      	uxtb	r2, r2
 8017dc2:	701a      	strb	r2, [r3, #0]
 8017dc4:	69fb      	ldr	r3, [r7, #28]
 8017dc6:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8017dca:	693b      	ldr	r3, [r7, #16]
 8017dcc:	330a      	adds	r3, #10
 8017dce:	b2d2      	uxtb	r2, r2
 8017dd0:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, tls->cert_der.len);
 8017dd2:	693b      	ldr	r3, [r7, #16]
 8017dd4:	f103 000b 	add.w	r0, r3, #11
 8017dd8:	69fb      	ldr	r3, [r7, #28]
 8017dda:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8017dde:	69fb      	ldr	r3, [r7, #28]
 8017de0:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017de4:	461a      	mov	r2, r3
 8017de6:	f00d fcb7 	bl	8025758 <memmove>
  MG_STORE_BE16(cert + 11 + tls->cert_der.len,
 8017dea:	69fb      	ldr	r3, [r7, #28]
 8017dec:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017df0:	330b      	adds	r3, #11
 8017df2:	693a      	ldr	r2, [r7, #16]
 8017df4:	4413      	add	r3, r2
 8017df6:	2200      	movs	r2, #0
 8017df8:	701a      	strb	r2, [r3, #0]
 8017dfa:	69fb      	ldr	r3, [r7, #28]
 8017dfc:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017e00:	330c      	adds	r3, #12
 8017e02:	693a      	ldr	r2, [r7, #16]
 8017e04:	4413      	add	r3, r2
 8017e06:	2200      	movs	r2, #0
 8017e08:	701a      	strb	r2, [r3, #0]
                0);  // certificate extensions (none)
  if (send_ca) {
 8017e0a:	69bb      	ldr	r3, [r7, #24]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d039      	beq.n	8017e84 <mg_tls_server_send_cert+0x1b0>
    size_t offset = 13 + tls->cert_der.len;
 8017e10:	69fb      	ldr	r3, [r7, #28]
 8017e12:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8017e16:	330d      	adds	r3, #13
 8017e18:	60fb      	str	r3, [r7, #12]
    MG_STORE_BE24(cert + offset, tls->ca_der.len);  // 3 bytes: CA cert length
 8017e1a:	69fb      	ldr	r3, [r7, #28]
 8017e1c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017e20:	0c19      	lsrs	r1, r3, #16
 8017e22:	693a      	ldr	r2, [r7, #16]
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	4413      	add	r3, r2
 8017e28:	b2ca      	uxtb	r2, r1
 8017e2a:	701a      	strb	r2, [r3, #0]
 8017e2c:	69fb      	ldr	r3, [r7, #28]
 8017e2e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017e32:	0a19      	lsrs	r1, r3, #8
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	3301      	adds	r3, #1
 8017e38:	693a      	ldr	r2, [r7, #16]
 8017e3a:	4413      	add	r3, r2
 8017e3c:	b2ca      	uxtb	r2, r1
 8017e3e:	701a      	strb	r2, [r3, #0]
 8017e40:	69fb      	ldr	r3, [r7, #28]
 8017e42:	f8d3 1124 	ldr.w	r1, [r3, #292]	@ 0x124
 8017e46:	68fb      	ldr	r3, [r7, #12]
 8017e48:	3302      	adds	r3, #2
 8017e4a:	693a      	ldr	r2, [r7, #16]
 8017e4c:	4413      	add	r3, r2
 8017e4e:	b2ca      	uxtb	r2, r1
 8017e50:	701a      	strb	r2, [r3, #0]
    memmove(cert + offset + 3, tls->ca_der.buf,
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	3303      	adds	r3, #3
 8017e56:	693a      	ldr	r2, [r7, #16]
 8017e58:	18d0      	adds	r0, r2, r3
 8017e5a:	69fb      	ldr	r3, [r7, #28]
 8017e5c:	f8d3 1120 	ldr.w	r1, [r3, #288]	@ 0x120
 8017e60:	69fb      	ldr	r3, [r7, #28]
 8017e62:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017e66:	461a      	mov	r2, r3
 8017e68:	f00d fc76 	bl	8025758 <memmove>
            tls->ca_der.len);         // CA cert data
    MG_STORE_BE16(cert + 11 + n, 0);  // certificate extensions (none)
 8017e6c:	697b      	ldr	r3, [r7, #20]
 8017e6e:	330b      	adds	r3, #11
 8017e70:	693a      	ldr	r2, [r7, #16]
 8017e72:	4413      	add	r3, r2
 8017e74:	2200      	movs	r2, #0
 8017e76:	701a      	strb	r2, [r3, #0]
 8017e78:	697b      	ldr	r3, [r7, #20]
 8017e7a:	330c      	adds	r3, #12
 8017e7c:	693a      	ldr	r2, [r7, #16]
 8017e7e:	4413      	add	r3, r2
 8017e80:	2200      	movs	r2, #0
 8017e82:	701a      	strb	r2, [r3, #0]
  }
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 8017e84:	69fb      	ldr	r3, [r7, #28]
 8017e86:	f103 0020 	add.w	r0, r3, #32
 8017e8a:	697b      	ldr	r3, [r7, #20]
 8017e8c:	330d      	adds	r3, #13
 8017e8e:	461a      	mov	r2, r3
 8017e90:	6939      	ldr	r1, [r7, #16]
 8017e92:	f7fc fcd1 	bl	8014838 <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 8017e96:	697b      	ldr	r3, [r7, #20]
 8017e98:	f103 020d 	add.w	r2, r3, #13
 8017e9c:	2316      	movs	r3, #22
 8017e9e:	6939      	ldr	r1, [r7, #16]
 8017ea0:	6878      	ldr	r0, [r7, #4]
 8017ea2:	f7ff f9fb 	bl	801729c <mg_tls_encrypt>
  free(cert);
 8017ea6:	6938      	ldr	r0, [r7, #16]
 8017ea8:	f00d f8ba 	bl	8025020 <free>
}
 8017eac:	3720      	adds	r7, #32
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bd80      	pop	{r7, pc}
 8017eb2:	bf00      	nop
 8017eb4:	08028110 	.word	0x08028110

08017eb8 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b084      	sub	sp, #16
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	3318      	adds	r3, #24
 8017ec8:	4618      	mov	r0, r3
 8017eca:	f7fc fa71 	bl	80143b0 <mg_sha256_init>
}
 8017ece:	bf00      	nop
 8017ed0:	3710      	adds	r7, #16
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	bd80      	pop	{r7, pc}

08017ed6 <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 8017ed6:	b580      	push	{r7, lr}
 8017ed8:	b086      	sub	sp, #24
 8017eda:	af00      	add	r7, sp, #0
 8017edc:	60f8      	str	r0, [r7, #12]
 8017ede:	60b9      	str	r1, [r7, #8]
 8017ee0:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 8017ee6:	697b      	ldr	r3, [r7, #20]
 8017ee8:	3318      	adds	r3, #24
 8017eea:	687a      	ldr	r2, [r7, #4]
 8017eec:	68b9      	ldr	r1, [r7, #8]
 8017eee:	4618      	mov	r0, r3
 8017ef0:	f7fc fca2 	bl	8014838 <mg_sha256_update>
}
 8017ef4:	bf00      	nop
 8017ef6:	3718      	adds	r7, #24
 8017ef8:	46bd      	mov	sp, r7
 8017efa:	bd80      	pop	{r7, pc}

08017efc <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 8017efc:	b580      	push	{r7, lr}
 8017efe:	b084      	sub	sp, #16
 8017f00:	af00      	add	r7, sp, #0
 8017f02:	6078      	str	r0, [r7, #4]
 8017f04:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 8017f0a:	68fb      	ldr	r3, [r7, #12]
 8017f0c:	3318      	adds	r3, #24
 8017f0e:	4619      	mov	r1, r3
 8017f10:	6838      	ldr	r0, [r7, #0]
 8017f12:	f7fc fcca 	bl	80148aa <mg_sha256_final>
}
 8017f16:	bf00      	nop
 8017f18:	3710      	adds	r7, #16
 8017f1a:	46bd      	mov	sp, r7
 8017f1c:	bd80      	pop	{r7, pc}
	...

08017f20 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 8017f20:	b590      	push	{r4, r7, lr}
 8017f22:	b0f9      	sub	sp, #484	@ 0x1e4
 8017f24:	af02      	add	r7, sp, #8
 8017f26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017f2a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8017f2e:	6018      	str	r0, [r3, #0]
 8017f30:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017f34:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8017f38:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017f3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017f3e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8017f42:	681b      	ldr	r3, [r3, #0]
 8017f44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017f48:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 8017f4c:	4a8a      	ldr	r2, [pc, #552]	@ (8018178 <mg_tls_send_cert_verify+0x258>)
 8017f4e:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8017f52:	6810      	ldr	r0, [r2, #0]
 8017f54:	6851      	ldr	r1, [r2, #4]
 8017f56:	c303      	stmia	r3!, {r0, r1}
 8017f58:	7a12      	ldrb	r2, [r2, #8]
 8017f5a:	701a      	strb	r2, [r3, #0]
 8017f5c:	f207 1379 	addw	r3, r7, #377	@ 0x179
 8017f60:	2249      	movs	r2, #73	@ 0x49
 8017f62:	2100      	movs	r1, #0
 8017f64:	4618      	mov	r0, r3
 8017f66:	f00d fc11 	bl	802578c <memset>
  size_t sigsz, verifysz = 0;
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 8017f70:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8017f74:	2220      	movs	r2, #32
 8017f76:	2100      	movs	r1, #0
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f00d fc07 	bl	802578c <memset>
 8017f7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017f82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8017f86:	4618      	mov	r0, r3
 8017f88:	2380      	movs	r3, #128	@ 0x80
 8017f8a:	461a      	mov	r2, r3
 8017f8c:	2100      	movs	r1, #0
 8017f8e:	f00d fbfd 	bl	802578c <memset>
  struct SHA256_HashContext ctx = {
 8017f92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017f96:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	2388      	movs	r3, #136	@ 0x88
 8017f9e:	461a      	mov	r2, r3
 8017fa0:	2100      	movs	r1, #0
 8017fa2:	f00d fbf3 	bl	802578c <memset>
 8017fa6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017faa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017fae:	4a73      	ldr	r2, [pc, #460]	@ (801817c <mg_tls_send_cert_verify+0x25c>)
 8017fb0:	601a      	str	r2, [r3, #0]
 8017fb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017fb6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017fba:	4a71      	ldr	r2, [pc, #452]	@ (8018180 <mg_tls_send_cert_verify+0x260>)
 8017fbc:	605a      	str	r2, [r3, #4]
 8017fbe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017fc2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017fc6:	4a6f      	ldr	r2, [pc, #444]	@ (8018184 <mg_tls_send_cert_verify+0x264>)
 8017fc8:	609a      	str	r2, [r3, #8]
 8017fca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017fce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017fd2:	2240      	movs	r2, #64	@ 0x40
 8017fd4:	60da      	str	r2, [r3, #12]
 8017fd6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017fda:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017fde:	2220      	movs	r2, #32
 8017fe0:	611a      	str	r2, [r3, #16]
 8017fe2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017fe6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8017fea:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8017fee:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8017ff0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8017ff4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	2340      	movs	r3, #64	@ 0x40
 8017ffc:	461a      	mov	r2, r3
 8017ffe:	2100      	movs	r1, #0
 8018000:	f00d fbc4 	bl	802578c <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 8018004:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018008:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 801800c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8018010:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018014:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8018018:	6812      	ldr	r2, [r2, #0]
 801801a:	6818      	ldr	r0, [r3, #0]
 801801c:	f7ff fb56 	bl	80176cc <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 8018020:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8018024:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 8018028:	f006 fdca 	bl	801ebc0 <mg_uecc_secp256r1>
 801802c:	4603      	mov	r3, r0
 801802e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8018032:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8018036:	9301      	str	r3, [sp, #4]
 8018038:	f107 0308 	add.w	r3, r7, #8
 801803c:	9300      	str	r3, [sp, #0]
 801803e:	4613      	mov	r3, r2
 8018040:	2220      	movs	r2, #32
 8018042:	4620      	mov	r0, r4
 8018044:	f007 fe2c 	bl	801fca0 <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 8018048:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801804c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8018050:	781b      	ldrb	r3, [r3, #0]
 8018052:	b25b      	sxtb	r3, r3
 8018054:	b2db      	uxtb	r3, r3
 8018056:	09db      	lsrs	r3, r3, #7
 8018058:	b2db      	uxtb	r3, r3
 801805a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 801805e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8018062:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8018066:	f893 3020 	ldrb.w	r3, [r3, #32]
 801806a:	b25b      	sxtb	r3, r3
 801806c:	b2db      	uxtb	r3, r3
 801806e:	09db      	lsrs	r3, r3, #7
 8018070:	b2db      	uxtb	r3, r3
 8018072:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 8018076:	2330      	movs	r3, #48	@ 0x30
 8018078:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 801807c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018080:	b2da      	uxtb	r2, r3
 8018082:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018086:	b2db      	uxtb	r3, r3
 8018088:	4413      	add	r3, r2
 801808a:	b2db      	uxtb	r3, r3
 801808c:	3344      	adds	r3, #68	@ 0x44
 801808e:	b2db      	uxtb	r3, r3
 8018090:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8018094:	2302      	movs	r3, #2
 8018096:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 801809a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 801809e:	b2db      	uxtb	r3, r3
 80180a0:	3320      	adds	r3, #32
 80180a2:	b2db      	uxtb	r3, r3
 80180a4:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 80180a8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80180ac:	330c      	adds	r3, #12
 80180ae:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80180b2:	4413      	add	r3, r2
 80180b4:	f107 0108 	add.w	r1, r7, #8
 80180b8:	2220      	movs	r2, #32
 80180ba:	4618      	mov	r0, r3
 80180bc:	f00d fb4c 	bl	8025758 <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 80180c0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80180c4:	332c      	adds	r3, #44	@ 0x2c
 80180c6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80180ca:	443b      	add	r3, r7
 80180cc:	2202      	movs	r2, #2
 80180ce:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 80180d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80180d6:	b2da      	uxtb	r2, r3
 80180d8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80180dc:	332d      	adds	r3, #45	@ 0x2d
 80180de:	3220      	adds	r2, #32
 80180e0:	b2d2      	uxtb	r2, r2
 80180e2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80180e6:	443b      	add	r3, r7
 80180e8:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 80180ec:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80180f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80180f4:	4413      	add	r3, r2
 80180f6:	332e      	adds	r3, #46	@ 0x2e
 80180f8:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 80180fc:	18d0      	adds	r0, r2, r3
 80180fe:	f107 0308 	add.w	r3, r7, #8
 8018102:	3320      	adds	r3, #32
 8018104:	2220      	movs	r2, #32
 8018106:	4619      	mov	r1, r3
 8018108:	f00d fb26 	bl	8025758 <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 801810c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8018110:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 8018114:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8018118:	4413      	add	r3, r2
 801811a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 801811e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8018122:	3308      	adds	r3, #8
 8018124:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 8018128:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801812c:	b2db      	uxtb	r3, r3
 801812e:	3304      	adds	r3, #4
 8018130:	b2db      	uxtb	r3, r3
 8018132:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 8018136:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801813a:	b2db      	uxtb	r3, r3
 801813c:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 8018140:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8018144:	3320      	adds	r3, #32
 8018146:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 801814a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801814e:	4618      	mov	r0, r3
 8018150:	f7fc fb72 	bl	8014838 <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 8018154:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8018158:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801815c:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8018160:	2316      	movs	r3, #22
 8018162:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8018166:	6800      	ldr	r0, [r0, #0]
 8018168:	f7ff f898 	bl	801729c <mg_tls_encrypt>
}
 801816c:	bf00      	nop
 801816e:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 8018172:	46bd      	mov	sp, r7
 8018174:	bd90      	pop	{r4, r7, pc}
 8018176:	bf00      	nop
 8018178:	08028120 	.word	0x08028120
 801817c:	08017eb9 	.word	0x08017eb9
 8018180:	08017ed7 	.word	0x08017ed7
 8018184:	08017efd 	.word	0x08017efd

08018188 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8018188:	b580      	push	{r7, lr}
 801818a:	b0b4      	sub	sp, #208	@ 0xd0
 801818c:	af02      	add	r7, sp, #8
 801818e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018196:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 801819a:	4b1e      	ldr	r3, [pc, #120]	@ (8018214 <mg_tls_server_send_finish+0x8c>)
 801819c:	60fb      	str	r3, [r7, #12]
 801819e:	f107 0310 	add.w	r3, r7, #16
 80181a2:	2220      	movs	r2, #32
 80181a4:	2100      	movs	r1, #0
 80181a6:	4618      	mov	r0, r3
 80181a8:	f00d faf0 	bl	802578c <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80181ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80181b0:	f103 0120 	add.w	r1, r3, #32
 80181b4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80181b8:	2270      	movs	r2, #112	@ 0x70
 80181ba:	4618      	mov	r0, r3
 80181bc:	f00d facc 	bl	8025758 <memmove>
  mg_sha256_final(hash, &sha256);
 80181c0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80181c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80181c8:	4611      	mov	r1, r2
 80181ca:	4618      	mov	r0, r3
 80181cc:	f7fc fb6d 	bl	80148aa <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 80181d0:	f107 000c 	add.w	r0, r7, #12
 80181d4:	3004      	adds	r0, #4
 80181d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80181da:	f203 41d4 	addw	r1, r3, #1236	@ 0x4d4
 80181de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80181e2:	2220      	movs	r2, #32
 80181e4:	9200      	str	r2, [sp, #0]
 80181e6:	2220      	movs	r2, #32
 80181e8:	f7fc fcb3 	bl	8014b52 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 80181ec:	f107 010c 	add.w	r1, r7, #12
 80181f0:	2316      	movs	r3, #22
 80181f2:	2224      	movs	r2, #36	@ 0x24
 80181f4:	6878      	ldr	r0, [r7, #4]
 80181f6:	f7ff f851 	bl	801729c <mg_tls_encrypt>
  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 80181fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80181fe:	3320      	adds	r3, #32
 8018200:	f107 010c 	add.w	r1, r7, #12
 8018204:	2224      	movs	r2, #36	@ 0x24
 8018206:	4618      	mov	r0, r3
 8018208:	f7fc fb16 	bl	8014838 <mg_sha256_update>
}
 801820c:	bf00      	nop
 801820e:	37c8      	adds	r7, #200	@ 0xc8
 8018210:	46bd      	mov	sp, r7
 8018212:	bd80      	pop	{r7, pc}
 8018214:	20000014 	.word	0x20000014

08018218 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 8018218:	b580      	push	{r7, lr}
 801821a:	b0a0      	sub	sp, #128	@ 0x80
 801821c:	af00      	add	r7, sp, #0
 801821e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018226:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 8018228:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801822a:	f107 0008 	add.w	r0, r7, #8
 801822e:	3320      	adds	r3, #32
 8018230:	2270      	movs	r2, #112	@ 0x70
 8018232:	4619      	mov	r1, r3
 8018234:	f00d fbdf 	bl	80259f6 <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 8018238:	6878      	ldr	r0, [r7, #4]
 801823a:	f7ff f92b 	bl	8017494 <mg_tls_recv_record>
 801823e:	4603      	mov	r3, r0
 8018240:	2b00      	cmp	r3, #0
 8018242:	da02      	bge.n	801824a <mg_tls_server_recv_finish+0x32>
    return -1;
 8018244:	f04f 33ff 	mov.w	r3, #4294967295
 8018248:	e01f      	b.n	801828a <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801824e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018250:	695b      	ldr	r3, [r3, #20]
 8018252:	4413      	add	r3, r2
 8018254:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8018256:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018258:	781b      	ldrb	r3, [r3, #0]
 801825a:	2b14      	cmp	r3, #20
 801825c:	d009      	beq.n	8018272 <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 801825e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8018260:	781b      	ldrb	r3, [r3, #0]
 8018262:	461a      	mov	r2, r3
 8018264:	490b      	ldr	r1, [pc, #44]	@ (8018294 <mg_tls_server_recv_finish+0x7c>)
 8018266:	6878      	ldr	r0, [r7, #4]
 8018268:	f7f0 f844 	bl	80082f4 <mg_error>
    return -1;
 801826c:	f04f 33ff 	mov.w	r3, #4294967295
 8018270:	e00b      	b.n	801828a <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 8018272:	6878      	ldr	r0, [r7, #4]
 8018274:	f7fe fcc2 	bl	8016bfc <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 8018278:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801827a:	3320      	adds	r3, #32
 801827c:	f107 0108 	add.w	r1, r7, #8
 8018280:	2270      	movs	r2, #112	@ 0x70
 8018282:	4618      	mov	r0, r3
 8018284:	f00d fbb7 	bl	80259f6 <memcpy>
  return 0;
 8018288:	2300      	movs	r3, #0
}
 801828a:	4618      	mov	r0, r3
 801828c:	3780      	adds	r7, #128	@ 0x80
 801828e:	46bd      	mov	sp, r7
 8018290:	bd80      	pop	{r7, pc}
 8018292:	bf00      	nop
 8018294:	0802812c 	.word	0x0802812c

08018298 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8018298:	b5b0      	push	{r4, r5, r7, lr}
 801829a:	b0c6      	sub	sp, #280	@ 0x118
 801829c:	af00      	add	r7, sp, #0
 801829e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80182a2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80182a6:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80182a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80182ac:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80182b6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  struct mg_iobuf *wio = &tls->send;
 80182ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80182be:	3304      	adds	r3, #4
 80182c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  uint8_t x25519_pub[X25519_BYTES];

  // signature algorithms we actually support:
  // rsa_pkcs1_sha256, rsa_pss_rsae_sha256 and ecdsa_secp256r1_sha256
  uint8_t secp256r1_sig_algs[12] = {
 80182c4:	4a27      	ldr	r2, [pc, #156]	@ (8018364 <mg_tls_client_send_hello+0xcc>)
 80182c6:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80182ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80182cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      0x00, 0x0d, 0x00, 0x08, 0x00, 0x06, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 80182d0:	4b25      	ldr	r3, [pc, #148]	@ (8018368 <mg_tls_client_send_hello+0xd0>)
 80182d2:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 80182d6:	461d      	mov	r5, r3
 80182d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80182de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80182e0:	682b      	ldr	r3, [r5, #0]
 80182e2:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 80182e4:	4a21      	ldr	r2, [pc, #132]	@ (801836c <mg_tls_client_send_hello+0xd4>)
 80182e6:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80182ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80182ec:	c303      	stmia	r3!, {r0, r1}
 80182ee:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 80182f0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80182f4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80182f8:	4a1d      	ldr	r2, [pc, #116]	@ (8018370 <mg_tls_client_send_hello+0xd8>)
 80182fa:	4618      	mov	r0, r3
 80182fc:	4611      	mov	r1, r2
 80182fe:	2391      	movs	r3, #145	@ 0x91
 8018300:	461a      	mov	r2, r3
 8018302:	f00d fb78 	bl	80259f6 <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 8018306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801830a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 801830e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  size_t hostnamesz = strlen(tls->hostname);
 8018312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018316:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 801831a:	4618      	mov	r0, r3
 801831c:	f7e8 f858 	bl	80003d0 <strlen>
 8018320:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 8018324:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018328:	2b00      	cmp	r3, #0
 801832a:	d003      	beq.n	8018334 <mg_tls_client_send_hello+0x9c>
 801832c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018330:	3309      	adds	r3, #9
 8018332:	e000      	b.n	8018336 <mg_tls_client_send_hello+0x9e>
 8018334:	2300      	movs	r3, #0
 8018336:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 801833a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801833e:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8018342:	2b00      	cmp	r3, #0
 8018344:	d002      	beq.n	801834c <mg_tls_client_send_hello+0xb4>
 8018346:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 801834a:	e001      	b.n	8018350 <mg_tls_client_send_hello+0xb8>
 801834c:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8018350:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8018354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018358:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 801835c:	2b00      	cmp	r3, #0
 801835e:	d009      	beq.n	8018374 <mg_tls_client_send_hello+0xdc>
 8018360:	2322      	movs	r3, #34	@ 0x22
 8018362:	e008      	b.n	8018376 <mg_tls_client_send_hello+0xde>
 8018364:	08028150 	.word	0x08028150
 8018368:	0802815c 	.word	0x0802815c
 801836c:	08028180 	.word	0x08028180
 8018370:	0802818c 	.word	0x0802818c
 8018374:	230c      	movs	r3, #12
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 8018376:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 801837a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801837e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018382:	4413      	add	r3, r2
 8018384:	338c      	adds	r3, #140	@ 0x8c
 8018386:	0a1b      	lsrs	r3, r3, #8
 8018388:	b2da      	uxtb	r2, r3
 801838a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801838e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018392:	70da      	strb	r2, [r3, #3]
 8018394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8018398:	b2da      	uxtb	r2, r3
 801839a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801839e:	b2db      	uxtb	r3, r3
 80183a0:	4413      	add	r3, r2
 80183a2:	b2db      	uxtb	r3, r3
 80183a4:	3b74      	subs	r3, #116	@ 0x74
 80183a6:	b2da      	uxtb	r2, r3
 80183a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80183ac:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80183b0:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 80183b2:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80183b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80183ba:	4413      	add	r3, r2
 80183bc:	3388      	adds	r3, #136	@ 0x88
 80183be:	0a1b      	lsrs	r3, r3, #8
 80183c0:	b2da      	uxtb	r2, r3
 80183c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80183c6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80183ca:	71da      	strb	r2, [r3, #7]
 80183cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80183d0:	b2da      	uxtb	r2, r3
 80183d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80183d6:	b2db      	uxtb	r3, r3
 80183d8:	4413      	add	r3, r2
 80183da:	b2db      	uxtb	r3, r3
 80183dc:	3b78      	subs	r3, #120	@ 0x78
 80183de:	b2da      	uxtb	r2, r3
 80183e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80183e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80183e8:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 80183ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80183ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80183f2:	4413      	add	r3, r2
 80183f4:	333d      	adds	r3, #61	@ 0x3d
 80183f6:	0a1b      	lsrs	r3, r3, #8
 80183f8:	b2da      	uxtb	r2, r3
 80183fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80183fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018402:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8018406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801840a:	b2da      	uxtb	r2, r3
 801840c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8018410:	b2db      	uxtb	r3, r3
 8018412:	4413      	add	r3, r2
 8018414:	b2db      	uxtb	r3, r3
 8018416:	333d      	adds	r3, #61	@ 0x3d
 8018418:	b2da      	uxtb	r2, r3
 801841a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801841e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8018422:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 8018426:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801842a:	2b00      	cmp	r3, #0
 801842c:	d026      	beq.n	801847c <mg_tls_client_send_hello+0x1e4>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 801842e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018432:	3305      	adds	r3, #5
 8018434:	0a1b      	lsrs	r3, r3, #8
 8018436:	b2db      	uxtb	r3, r3
 8018438:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 801843c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018440:	b2db      	uxtb	r3, r3
 8018442:	3305      	adds	r3, #5
 8018444:	b2db      	uxtb	r3, r3
 8018446:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 801844a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801844e:	3303      	adds	r3, #3
 8018450:	0a1b      	lsrs	r3, r3, #8
 8018452:	b2db      	uxtb	r3, r3
 8018454:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 8018458:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801845c:	b2db      	uxtb	r3, r3
 801845e:	3303      	adds	r3, #3
 8018460:	b2db      	uxtb	r3, r3
 8018462:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 8018466:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801846a:	0a1b      	lsrs	r3, r3, #8
 801846c:	b2db      	uxtb	r3, r3
 801846e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8018472:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018476:	b2db      	uxtb	r3, r3
 8018478:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 801847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018480:	33d0      	adds	r3, #208	@ 0xd0
 8018482:	2120      	movs	r1, #32
 8018484:	4618      	mov	r0, r3
 8018486:	f7e8 f941 	bl	800070c <mg_random>
 801848a:	4603      	mov	r3, r0
 801848c:	f083 0301 	eor.w	r3, r3, #1
 8018490:	b2db      	uxtb	r3, r3
 8018492:	2b00      	cmp	r3, #0
 8018494:	d007      	beq.n	80184a6 <mg_tls_client_send_hello+0x20e>
 8018496:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801849a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801849e:	496c      	ldr	r1, [pc, #432]	@ (8018650 <mg_tls_client_send_hello+0x3b8>)
 80184a0:	6818      	ldr	r0, [r3, #0]
 80184a2:	f7ef ff27 	bl	80082f4 <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 80184a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80184aa:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 80184ae:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80184b2:	2301      	movs	r3, #1
 80184b4:	4a67      	ldr	r2, [pc, #412]	@ (8018654 <mg_tls_client_send_hello+0x3bc>)
 80184b6:	f008 fbd7 	bl	8020c68 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 80184ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80184be:	33b0      	adds	r3, #176	@ 0xb0
 80184c0:	2120      	movs	r1, #32
 80184c2:	4618      	mov	r0, r3
 80184c4:	f7e8 f922 	bl	800070c <mg_random>
 80184c8:	4603      	mov	r3, r0
 80184ca:	f083 0301 	eor.w	r3, r3, #1
 80184ce:	b2db      	uxtb	r3, r3
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d007      	beq.n	80184e4 <mg_tls_client_send_hello+0x24c>
 80184d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80184d8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80184dc:	495c      	ldr	r1, [pc, #368]	@ (8018650 <mg_tls_client_send_hello+0x3b8>)
 80184de:	6818      	ldr	r0, [r3, #0]
 80184e0:	f7ef ff08 	bl	80082f4 <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 80184e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80184e8:	3390      	adds	r3, #144	@ 0x90
 80184ea:	2120      	movs	r1, #32
 80184ec:	4618      	mov	r0, r3
 80184ee:	f7e8 f90d 	bl	800070c <mg_random>
 80184f2:	4603      	mov	r3, r0
 80184f4:	f083 0301 	eor.w	r3, r3, #1
 80184f8:	b2db      	uxtb	r3, r3
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d007      	beq.n	801850e <mg_tls_client_send_hello+0x276>
 80184fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8018502:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8018506:	4952      	ldr	r1, [pc, #328]	@ (8018650 <mg_tls_client_send_hello+0x3b8>)
 8018508:	6818      	ldr	r0, [r3, #0]
 801850a:	f7ef fef3 	bl	80082f4 <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 801850e:	f107 030c 	add.w	r3, r7, #12
 8018512:	330b      	adds	r3, #11
 8018514:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8018518:	3290      	adds	r2, #144	@ 0x90
 801851a:	6815      	ldr	r5, [r2, #0]
 801851c:	6854      	ldr	r4, [r2, #4]
 801851e:	6890      	ldr	r0, [r2, #8]
 8018520:	68d1      	ldr	r1, [r2, #12]
 8018522:	601d      	str	r5, [r3, #0]
 8018524:	605c      	str	r4, [r3, #4]
 8018526:	6098      	str	r0, [r3, #8]
 8018528:	60d9      	str	r1, [r3, #12]
 801852a:	6915      	ldr	r5, [r2, #16]
 801852c:	6954      	ldr	r4, [r2, #20]
 801852e:	6990      	ldr	r0, [r2, #24]
 8018530:	69d1      	ldr	r1, [r2, #28]
 8018532:	611d      	str	r5, [r3, #16]
 8018534:	615c      	str	r4, [r3, #20]
 8018536:	6198      	str	r0, [r3, #24]
 8018538:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 801853a:	f107 030c 	add.w	r3, r7, #12
 801853e:	332c      	adds	r3, #44	@ 0x2c
 8018540:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8018544:	32b0      	adds	r2, #176	@ 0xb0
 8018546:	6815      	ldr	r5, [r2, #0]
 8018548:	6854      	ldr	r4, [r2, #4]
 801854a:	6890      	ldr	r0, [r2, #8]
 801854c:	68d1      	ldr	r1, [r2, #12]
 801854e:	601d      	str	r5, [r3, #0]
 8018550:	605c      	str	r4, [r3, #4]
 8018552:	6098      	str	r0, [r3, #8]
 8018554:	60d9      	str	r1, [r3, #12]
 8018556:	6915      	ldr	r5, [r2, #16]
 8018558:	6954      	ldr	r4, [r2, #20]
 801855a:	6990      	ldr	r0, [r2, #24]
 801855c:	69d1      	ldr	r1, [r2, #28]
 801855e:	611d      	str	r5, [r3, #16]
 8018560:	615c      	str	r4, [r3, #20]
 8018562:	6198      	str	r0, [r3, #24]
 8018564:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 8018566:	f107 030c 	add.w	r3, r7, #12
 801856a:	335e      	adds	r3, #94	@ 0x5e
 801856c:	461d      	mov	r5, r3
 801856e:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 8018572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018574:	6028      	str	r0, [r5, #0]
 8018576:	6069      	str	r1, [r5, #4]
 8018578:	60aa      	str	r2, [r5, #8]
 801857a:	60eb      	str	r3, [r5, #12]
 801857c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801857e:	6128      	str	r0, [r5, #16]
 8018580:	6169      	str	r1, [r5, #20]
 8018582:	61aa      	str	r2, [r5, #24]
 8018584:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 8018586:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801858a:	6899      	ldr	r1, [r3, #8]
 801858c:	f107 020c 	add.w	r2, r7, #12
 8018590:	2391      	movs	r3, #145	@ 0x91
 8018592:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8018596:	f7f4 fcbb 	bl	800cf10 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 801859a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801859e:	f103 0020 	add.w	r0, r3, #32
 80185a2:	f107 030c 	add.w	r3, r7, #12
 80185a6:	3305      	adds	r3, #5
 80185a8:	228c      	movs	r2, #140	@ 0x8c
 80185aa:	4619      	mov	r1, r3
 80185ac:	f7fc f944 	bl	8014838 <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 80185b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80185b4:	6899      	ldr	r1, [r3, #8]
 80185b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80185ba:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 80185be:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80185c2:	f7f4 fca5 	bl	800cf10 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 80185c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80185ca:	3320      	adds	r3, #32
 80185cc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80185d0:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 80185d4:	4618      	mov	r0, r3
 80185d6:	f7fc f92f 	bl	8014838 <mg_sha256_update>
  if (hostnamesz > 0) {
 80185da:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d027      	beq.n	8018632 <mg_tls_client_send_hello+0x39a>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 80185e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80185e6:	6899      	ldr	r1, [r3, #8]
 80185e8:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80185ec:	2309      	movs	r3, #9
 80185ee:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80185f2:	f7f4 fc8d 	bl	800cf10 <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 80185f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80185fa:	6899      	ldr	r1, [r3, #8]
 80185fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8018600:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8018604:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8018608:	f7f4 fc82 	bl	800cf10 <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 801860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018610:	3320      	adds	r3, #32
 8018612:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8018616:	2209      	movs	r2, #9
 8018618:	4618      	mov	r0, r3
 801861a:	f7fc f90d 	bl	8014838 <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 801861e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8018622:	3320      	adds	r3, #32
 8018624:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8018628:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 801862c:	4618      	mov	r0, r3
 801862e:	f7fc f903 	bl	8014838 <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 8018632:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8018636:	6899      	ldr	r1, [r3, #8]
 8018638:	2306      	movs	r3, #6
 801863a:	4a07      	ldr	r2, [pc, #28]	@ (8018658 <mg_tls_client_send_hello+0x3c0>)
 801863c:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8018640:	f7f4 fc66 	bl	800cf10 <mg_iobuf_add>
}
 8018644:	bf00      	nop
 8018646:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 801864a:	46bd      	mov	sp, r7
 801864c:	bdb0      	pop	{r4, r5, r7, pc}
 801864e:	bf00      	nop
 8018650:	08028070 	.word	0x08028070
 8018654:	0802a02c 	.word	0x0802a02c
 8018658:	0802808c 	.word	0x0802808c

0801865c <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 801865c:	b580      	push	{r7, lr}
 801865e:	b08a      	sub	sp, #40	@ 0x28
 8018660:	af00      	add	r7, sp, #0
 8018662:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801866a:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	3368      	adds	r3, #104	@ 0x68
 8018670:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 8018672:	6878      	ldr	r0, [r7, #4]
 8018674:	f7fe fa77 	bl	8016b66 <mg_tls_got_record>
 8018678:	4603      	mov	r3, r0
 801867a:	f083 0301 	eor.w	r3, r3, #1
 801867e:	b2db      	uxtb	r3, r3
 8018680:	2b00      	cmp	r3, #0
 8018682:	d002      	beq.n	801868a <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 8018684:	f06f 0301 	mvn.w	r3, #1
 8018688:	e109      	b.n	801889e <mg_tls_client_recv_hello+0x242>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 801868a:	69fb      	ldr	r3, [r7, #28]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	2b16      	cmp	r3, #22
 8018692:	d105      	bne.n	80186a0 <mg_tls_client_recv_hello+0x44>
 8018694:	69fb      	ldr	r3, [r7, #28]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	3305      	adds	r3, #5
 801869a:	781b      	ldrb	r3, [r3, #0]
 801869c:	2b02      	cmp	r3, #2
 801869e:	d032      	beq.n	8018706 <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 80186a0:	69fb      	ldr	r3, [r7, #28]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	781b      	ldrb	r3, [r3, #0]
 80186a6:	2b15      	cmp	r3, #21
 80186a8:	d10f      	bne.n	80186ca <mg_tls_client_recv_hello+0x6e>
 80186aa:	69fb      	ldr	r3, [r7, #28]
 80186ac:	689b      	ldr	r3, [r3, #8]
 80186ae:	2b06      	cmp	r3, #6
 80186b0:	d90b      	bls.n	80186ca <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 80186b2:	69fb      	ldr	r3, [r7, #28]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	3306      	adds	r3, #6
 80186b8:	781b      	ldrb	r3, [r3, #0]
 80186ba:	461a      	mov	r2, r3
 80186bc:	497a      	ldr	r1, [pc, #488]	@ (80188a8 <mg_tls_client_recv_hello+0x24c>)
 80186be:	6878      	ldr	r0, [r7, #4]
 80186c0:	f7ef fe18 	bl	80082f4 <mg_error>
      return -1;
 80186c4:	f04f 33ff 	mov.w	r3, #4294967295
 80186c8:	e0e9      	b.n	801889e <mg_tls_client_recv_hello+0x242>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 80186ca:	4b78      	ldr	r3, [pc, #480]	@ (80188ac <mg_tls_client_recv_hello+0x250>)
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	2b01      	cmp	r3, #1
 80186d0:	dd12      	ble.n	80186f8 <mg_tls_client_recv_hello+0x9c>
 80186d2:	4b77      	ldr	r3, [pc, #476]	@ (80188b0 <mg_tls_client_recv_hello+0x254>)
 80186d4:	f642 52f1 	movw	r2, #11761	@ 0x2df1
 80186d8:	4976      	ldr	r1, [pc, #472]	@ (80188b4 <mg_tls_client_recv_hello+0x258>)
 80186da:	2002      	movs	r0, #2
 80186dc:	f7f5 fb36 	bl	800dd4c <mg_log_prefix>
 80186e0:	69fb      	ldr	r3, [r7, #28]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	781b      	ldrb	r3, [r3, #0]
 80186e6:	4619      	mov	r1, r3
 80186e8:	69fb      	ldr	r3, [r7, #28]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	3305      	adds	r3, #5
 80186ee:	781b      	ldrb	r3, [r3, #0]
 80186f0:	461a      	mov	r2, r3
 80186f2:	4871      	ldr	r0, [pc, #452]	@ (80188b8 <mg_tls_client_recv_hello+0x25c>)
 80186f4:	f7f5 fb7a 	bl	800ddec <mg_log>
    mg_error(c, "not a server hello packet");
 80186f8:	4970      	ldr	r1, [pc, #448]	@ (80188bc <mg_tls_client_recv_hello+0x260>)
 80186fa:	6878      	ldr	r0, [r7, #4]
 80186fc:	f7ef fdfa 	bl	80082f4 <mg_error>
    return -1;
 8018700:	f04f 33ff 	mov.w	r3, #4294967295
 8018704:	e0cb      	b.n	801889e <mg_tls_client_recv_hello+0x242>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8018706:	69fb      	ldr	r3, [r7, #28]
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	3303      	adds	r3, #3
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	b21b      	sxth	r3, r3
 8018710:	021b      	lsls	r3, r3, #8
 8018712:	b21a      	sxth	r2, r3
 8018714:	69fb      	ldr	r3, [r7, #28]
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	3304      	adds	r3, #4
 801871a:	781b      	ldrb	r3, [r3, #0]
 801871c:	b21b      	sxth	r3, r3
 801871e:	4313      	orrs	r3, r2
 8018720:	b21b      	sxth	r3, r3
 8018722:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8018724:	6a3b      	ldr	r3, [r7, #32]
 8018726:	f103 0020 	add.w	r0, r3, #32
 801872a:	69fb      	ldr	r3, [r7, #28]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	3305      	adds	r3, #5
 8018730:	8b7a      	ldrh	r2, [r7, #26]
 8018732:	4619      	mov	r1, r3
 8018734:	f7fc f880 	bl	8014838 <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 8018738:	69fb      	ldr	r3, [r7, #28]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	334f      	adds	r3, #79	@ 0x4f
 801873e:	781b      	ldrb	r3, [r3, #0]
 8018740:	b21b      	sxth	r3, r3
 8018742:	021b      	lsls	r3, r3, #8
 8018744:	b21a      	sxth	r2, r3
 8018746:	69fb      	ldr	r3, [r7, #28]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	3350      	adds	r3, #80	@ 0x50
 801874c:	781b      	ldrb	r3, [r3, #0]
 801874e:	b21b      	sxth	r3, r3
 8018750:	4313      	orrs	r3, r2
 8018752:	b21b      	sxth	r3, r3
 8018754:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 8018756:	69fb      	ldr	r3, [r7, #28]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	3351      	adds	r3, #81	@ 0x51
 801875c:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 801875e:	8b3a      	ldrh	r2, [r7, #24]
 8018760:	69fb      	ldr	r3, [r7, #28]
 8018762:	689b      	ldr	r3, [r3, #8]
 8018764:	3b51      	subs	r3, #81	@ 0x51
 8018766:	429a      	cmp	r2, r3
 8018768:	f200 8090 	bhi.w	801888c <mg_tls_client_recv_hello+0x230>

  for (j = 0; j < ext_len;) {
 801876c:	2300      	movs	r3, #0
 801876e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018770:	e086      	b.n	8018880 <mg_tls_client_recv_hello+0x224>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 8018772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018774:	697a      	ldr	r2, [r7, #20]
 8018776:	4413      	add	r3, r2
 8018778:	781b      	ldrb	r3, [r3, #0]
 801877a:	b21b      	sxth	r3, r3
 801877c:	021b      	lsls	r3, r3, #8
 801877e:	b21a      	sxth	r2, r3
 8018780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018782:	3301      	adds	r3, #1
 8018784:	6979      	ldr	r1, [r7, #20]
 8018786:	440b      	add	r3, r1
 8018788:	781b      	ldrb	r3, [r3, #0]
 801878a:	b21b      	sxth	r3, r3
 801878c:	4313      	orrs	r3, r2
 801878e:	b21b      	sxth	r3, r3
 8018790:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 8018792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018794:	3302      	adds	r3, #2
 8018796:	697a      	ldr	r2, [r7, #20]
 8018798:	4413      	add	r3, r2
 801879a:	781b      	ldrb	r3, [r3, #0]
 801879c:	b21b      	sxth	r3, r3
 801879e:	021b      	lsls	r3, r3, #8
 80187a0:	b21a      	sxth	r2, r3
 80187a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187a4:	3303      	adds	r3, #3
 80187a6:	6979      	ldr	r1, [r7, #20]
 80187a8:	440b      	add	r3, r1
 80187aa:	781b      	ldrb	r3, [r3, #0]
 80187ac:	b21b      	sxth	r3, r3
 80187ae:	4313      	orrs	r3, r2
 80187b0:	b21b      	sxth	r3, r3
 80187b2:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 80187b4:	8b3a      	ldrh	r2, [r7, #24]
 80187b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187b8:	1ad3      	subs	r3, r2, r3
 80187ba:	1eda      	subs	r2, r3, #3
 80187bc:	8a3b      	ldrh	r3, [r7, #16]
 80187be:	429a      	cmp	r2, r3
 80187c0:	dd66      	ble.n	8018890 <mg_tls_client_recv_hello+0x234>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 80187c2:	8a7b      	ldrh	r3, [r7, #18]
 80187c4:	2b33      	cmp	r3, #51	@ 0x33
 80187c6:	d007      	beq.n	80187d8 <mg_tls_client_recv_hello+0x17c>
      j += (uint16_t) (ext_len2 + 4);
 80187c8:	8a3b      	ldrh	r3, [r7, #16]
 80187ca:	3304      	adds	r3, #4
 80187cc:	b29b      	uxth	r3, r3
 80187ce:	461a      	mov	r2, r3
 80187d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187d2:	4413      	add	r3, r2
 80187d4:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 80187d6:	e053      	b.n	8018880 <mg_tls_client_recv_hello+0x224>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 80187d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187da:	3304      	adds	r3, #4
 80187dc:	697a      	ldr	r2, [r7, #20]
 80187de:	4413      	add	r3, r2
 80187e0:	781b      	ldrb	r3, [r3, #0]
 80187e2:	b21b      	sxth	r3, r3
 80187e4:	021b      	lsls	r3, r3, #8
 80187e6:	b21a      	sxth	r2, r3
 80187e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ea:	3305      	adds	r3, #5
 80187ec:	6979      	ldr	r1, [r7, #20]
 80187ee:	440b      	add	r3, r1
 80187f0:	781b      	ldrb	r3, [r3, #0]
 80187f2:	b21b      	sxth	r3, r3
 80187f4:	4313      	orrs	r3, r2
 80187f6:	b21b      	sxth	r3, r3
 80187f8:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 80187fa:	89fb      	ldrh	r3, [r7, #14]
 80187fc:	2b1d      	cmp	r3, #29
 80187fe:	d006      	beq.n	801880e <mg_tls_client_recv_hello+0x1b2>
      mg_error(c, "bad key exchange group");
 8018800:	492f      	ldr	r1, [pc, #188]	@ (80188c0 <mg_tls_client_recv_hello+0x264>)
 8018802:	6878      	ldr	r0, [r7, #4]
 8018804:	f7ef fd76 	bl	80082f4 <mg_error>
      return -1;
 8018808:	f04f 33ff 	mov.w	r3, #4294967295
 801880c:	e047      	b.n	801889e <mg_tls_client_recv_hello+0x242>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 801880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018810:	3306      	adds	r3, #6
 8018812:	697a      	ldr	r2, [r7, #20]
 8018814:	4413      	add	r3, r2
 8018816:	781b      	ldrb	r3, [r3, #0]
 8018818:	b21b      	sxth	r3, r3
 801881a:	021b      	lsls	r3, r3, #8
 801881c:	b21a      	sxth	r2, r3
 801881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018820:	3307      	adds	r3, #7
 8018822:	6979      	ldr	r1, [r7, #20]
 8018824:	440b      	add	r3, r1
 8018826:	781b      	ldrb	r3, [r3, #0]
 8018828:	b21b      	sxth	r3, r3
 801882a:	4313      	orrs	r3, r2
 801882c:	b21b      	sxth	r3, r3
 801882e:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 8018830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018832:	3308      	adds	r3, #8
 8018834:	697a      	ldr	r2, [r7, #20]
 8018836:	4413      	add	r3, r2
 8018838:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 801883a:	89bb      	ldrh	r3, [r7, #12]
 801883c:	2b20      	cmp	r3, #32
 801883e:	d006      	beq.n	801884e <mg_tls_client_recv_hello+0x1f2>
      mg_error(c, "bad key exchange length");
 8018840:	4920      	ldr	r1, [pc, #128]	@ (80188c4 <mg_tls_client_recv_hello+0x268>)
 8018842:	6878      	ldr	r0, [r7, #4]
 8018844:	f7ef fd56 	bl	80082f4 <mg_error>
      return -1;
 8018848:	f04f 33ff 	mov.w	r3, #4294967295
 801884c:	e027      	b.n	801889e <mg_tls_client_recv_hello+0x242>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 801884e:	6a3b      	ldr	r3, [r7, #32]
 8018850:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8018854:	6a3b      	ldr	r3, [r7, #32]
 8018856:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 801885a:	2301      	movs	r3, #1
 801885c:	68ba      	ldr	r2, [r7, #8]
 801885e:	f008 fa03 	bl	8020c68 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 8018862:	6a3b      	ldr	r3, [r7, #32]
 8018864:	33f0      	adds	r3, #240	@ 0xf0
 8018866:	2220      	movs	r2, #32
 8018868:	4619      	mov	r1, r3
 801886a:	4817      	ldr	r0, [pc, #92]	@ (80188c8 <mg_tls_client_recv_hello+0x26c>)
 801886c:	f7fe f824 	bl	80168b8 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 8018870:	6878      	ldr	r0, [r7, #4]
 8018872:	f7fe f9a0 	bl	8016bb6 <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 8018876:	6878      	ldr	r0, [r7, #4]
 8018878:	f7fe faa8 	bl	8016dcc <mg_tls_generate_handshake_keys>
    return 0;
 801887c:	2300      	movs	r3, #0
 801887e:	e00e      	b.n	801889e <mg_tls_client_recv_hello+0x242>
  for (j = 0; j < ext_len;) {
 8018880:	8b3b      	ldrh	r3, [r7, #24]
 8018882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018884:	429a      	cmp	r2, r3
 8018886:	f6ff af74 	blt.w	8018772 <mg_tls_client_recv_hello+0x116>
  }
fail:
 801888a:	e002      	b.n	8018892 <mg_tls_client_recv_hello+0x236>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 801888c:	bf00      	nop
 801888e:	e000      	b.n	8018892 <mg_tls_client_recv_hello+0x236>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8018890:	bf00      	nop
  mg_error(c, "bad server hello");
 8018892:	490e      	ldr	r1, [pc, #56]	@ (80188cc <mg_tls_client_recv_hello+0x270>)
 8018894:	6878      	ldr	r0, [r7, #4]
 8018896:	f7ef fd2d 	bl	80082f4 <mg_error>
  return -1;
 801889a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801889e:	4618      	mov	r0, r3
 80188a0:	3728      	adds	r7, #40	@ 0x28
 80188a2:	46bd      	mov	sp, r7
 80188a4:	bd80      	pop	{r7, pc}
 80188a6:	bf00      	nop
 80188a8:	08028220 	.word	0x08028220
 80188ac:	24000258 	.word	0x24000258
 80188b0:	0802a2ec 	.word	0x0802a2ec
 80188b4:	080264c4 	.word	0x080264c4
 80188b8:	08028230 	.word	0x08028230
 80188bc:	08028250 	.word	0x08028250
 80188c0:	0802826c 	.word	0x0802826c
 80188c4:	08028284 	.word	0x08028284
 80188c8:	0802829c 	.word	0x0802829c
 80188cc:	080282ac 	.word	0x080282ac

080188d0 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b084      	sub	sp, #16
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80188de:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80188e0:	6878      	ldr	r0, [r7, #4]
 80188e2:	f7fe fdd7 	bl	8017494 <mg_tls_recv_record>
 80188e6:	4603      	mov	r3, r0
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	da02      	bge.n	80188f2 <mg_tls_client_recv_ext+0x22>
    return -1;
 80188ec:	f04f 33ff 	mov.w	r3, #4294967295
 80188f0:	e017      	b.n	8018922 <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	695b      	ldr	r3, [r3, #20]
 80188fa:	4413      	add	r3, r2
 80188fc:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 80188fe:	68bb      	ldr	r3, [r7, #8]
 8018900:	781b      	ldrb	r3, [r3, #0]
 8018902:	2b08      	cmp	r3, #8
 8018904:	d009      	beq.n	801891a <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 8018906:	68bb      	ldr	r3, [r7, #8]
 8018908:	781b      	ldrb	r3, [r3, #0]
 801890a:	461a      	mov	r2, r3
 801890c:	4907      	ldr	r1, [pc, #28]	@ (801892c <mg_tls_client_recv_ext+0x5c>)
 801890e:	6878      	ldr	r0, [r7, #4]
 8018910:	f7ef fcf0 	bl	80082f4 <mg_error>
    return -1;
 8018914:	f04f 33ff 	mov.w	r3, #4294967295
 8018918:	e003      	b.n	8018922 <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 801891a:	6878      	ldr	r0, [r7, #4]
 801891c:	f7fe f96e 	bl	8016bfc <mg_tls_drop_message>
  return 0;
 8018920:	2300      	movs	r3, #0
}
 8018922:	4618      	mov	r0, r3
 8018924:	3710      	adds	r7, #16
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}
 801892a:	bf00      	nop
 801892c:	080282c0 	.word	0x080282c0

08018930 <mg_der_debug_cert_name>:
  struct mg_str sig;    // signature
  uint8_t tbshash[48];  // 32b for sha256/secp256, 48b for sha384/secp384
  size_t tbshashsz;     // actual TBS hash size
};

static void mg_der_debug_cert_name(const char *name, struct mg_der_tlv *tlv) {
 8018930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018932:	b099      	sub	sp, #100	@ 0x64
 8018934:	af06      	add	r7, sp, #24
 8018936:	6178      	str	r0, [r7, #20]
 8018938:	6139      	str	r1, [r7, #16]
  struct mg_der_tlv v;
  struct mg_str cn, c, o, ou;
  cn = c = o = ou = mg_str("");
 801893a:	f107 031c 	add.w	r3, r7, #28
 801893e:	4946      	ldr	r1, [pc, #280]	@ (8018a58 <mg_der_debug_cert_name+0x128>)
 8018940:	4618      	mov	r0, r3
 8018942:	f7fd fa03 	bl	8015d4c <mg_str_s>
 8018946:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801894a:	f107 021c 	add.w	r2, r7, #28
 801894e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018952:	e883 0003 	stmia.w	r3, {r0, r1}
 8018956:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801895a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801895e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018962:	e883 0003 	stmia.w	r3, {r0, r1}
 8018966:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801896a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801896e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018972:	e883 0003 	stmia.w	r3, {r0, r1}
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x03", 3, &v))
 8018976:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801897a:	2203      	movs	r2, #3
 801897c:	4937      	ldr	r1, [pc, #220]	@ (8018a5c <mg_der_debug_cert_name+0x12c>)
 801897e:	6938      	ldr	r0, [r7, #16]
 8018980:	f7fe f84d 	bl	8016a1e <mg_der_find_oid>
 8018984:	4603      	mov	r3, r0
 8018986:	2b00      	cmp	r3, #0
 8018988:	d006      	beq.n	8018998 <mg_der_debug_cert_name+0x68>
    cn = mg_str_n((const char *) v.value, v.len);
 801898a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801898c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801898e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8018992:	4618      	mov	r0, r3
 8018994:	f7fd f9f7 	bl	8015d86 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x06", 3, &v))
 8018998:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801899c:	2203      	movs	r2, #3
 801899e:	4930      	ldr	r1, [pc, #192]	@ (8018a60 <mg_der_debug_cert_name+0x130>)
 80189a0:	6938      	ldr	r0, [r7, #16]
 80189a2:	f7fe f83c 	bl	8016a1e <mg_der_find_oid>
 80189a6:	4603      	mov	r3, r0
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d006      	beq.n	80189ba <mg_der_debug_cert_name+0x8a>
    c = mg_str_n((const char *) v.value, v.len);
 80189ac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80189ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80189b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80189b4:	4618      	mov	r0, r3
 80189b6:	f7fd f9e6 	bl	8015d86 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0a", 3, &v))
 80189ba:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80189be:	2203      	movs	r2, #3
 80189c0:	4928      	ldr	r1, [pc, #160]	@ (8018a64 <mg_der_debug_cert_name+0x134>)
 80189c2:	6938      	ldr	r0, [r7, #16]
 80189c4:	f7fe f82b 	bl	8016a1e <mg_der_find_oid>
 80189c8:	4603      	mov	r3, r0
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d006      	beq.n	80189dc <mg_der_debug_cert_name+0xac>
    o = mg_str_n((const char *) v.value, v.len);
 80189ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80189d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80189d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80189d6:	4618      	mov	r0, r3
 80189d8:	f7fd f9d5 	bl	8015d86 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0b", 3, &v))
 80189dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80189e0:	2203      	movs	r2, #3
 80189e2:	4921      	ldr	r1, [pc, #132]	@ (8018a68 <mg_der_debug_cert_name+0x138>)
 80189e4:	6938      	ldr	r0, [r7, #16]
 80189e6:	f7fe f81a 	bl	8016a1e <mg_der_find_oid>
 80189ea:	4603      	mov	r3, r0
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d00e      	beq.n	8018a0e <mg_der_debug_cert_name+0xde>
    ou = mg_str_n((const char *) v.value, v.len);
 80189f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80189f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80189f4:	f107 0308 	add.w	r3, r7, #8
 80189f8:	4618      	mov	r0, r3
 80189fa:	f7fd f9c4 	bl	8015d86 <mg_str_n>
 80189fe:	f107 031c 	add.w	r3, r7, #28
 8018a02:	f107 0208 	add.w	r2, r7, #8
 8018a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018a0a:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("%s: CN=%.*s, C=%.*s, O=%.*s, OU=%.*s", name, cn.len, cn.buf,
 8018a0e:	4b17      	ldr	r3, [pc, #92]	@ (8018a6c <mg_der_debug_cert_name+0x13c>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	2b03      	cmp	r3, #3
 8018a14:	dd1b      	ble.n	8018a4e <mg_der_debug_cert_name+0x11e>
 8018a16:	4b16      	ldr	r3, [pc, #88]	@ (8018a70 <mg_der_debug_cert_name+0x140>)
 8018a18:	f642 6243 	movw	r2, #11843	@ 0x2e43
 8018a1c:	4915      	ldr	r1, [pc, #84]	@ (8018a74 <mg_der_debug_cert_name+0x144>)
 8018a1e:	2004      	movs	r0, #4
 8018a20:	f7f5 f994 	bl	800dd4c <mg_log_prefix>
 8018a24:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8018a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a28:	607b      	str	r3, [r7, #4]
 8018a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018a30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018a32:	6a3c      	ldr	r4, [r7, #32]
 8018a34:	69fd      	ldr	r5, [r7, #28]
 8018a36:	9505      	str	r5, [sp, #20]
 8018a38:	9404      	str	r4, [sp, #16]
 8018a3a:	9003      	str	r0, [sp, #12]
 8018a3c:	9102      	str	r1, [sp, #8]
 8018a3e:	9201      	str	r2, [sp, #4]
 8018a40:	9300      	str	r3, [sp, #0]
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	4632      	mov	r2, r6
 8018a46:	6979      	ldr	r1, [r7, #20]
 8018a48:	480b      	ldr	r0, [pc, #44]	@ (8018a78 <mg_der_debug_cert_name+0x148>)
 8018a4a:	f7f5 f9cf 	bl	800ddec <mg_log>
              c.len, c.buf, o.len, o.buf, ou.len, ou.buf));
}
 8018a4e:	bf00      	nop
 8018a50:	374c      	adds	r7, #76	@ 0x4c
 8018a52:	46bd      	mov	sp, r7
 8018a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a56:	bf00      	nop
 8018a58:	08026d04 	.word	0x08026d04
 8018a5c:	080282f0 	.word	0x080282f0
 8018a60:	080282f4 	.word	0x080282f4
 8018a64:	080282f8 	.word	0x080282f8
 8018a68:	080282fc 	.word	0x080282fc
 8018a6c:	24000258 	.word	0x24000258
 8018a70:	0802a308 	.word	0x0802a308
 8018a74:	080264c4 	.word	0x080264c4
 8018a78:	08028300 	.word	0x08028300

08018a7c <mg_tls_parse_cert_der>:

static int mg_tls_parse_cert_der(void *buf, size_t dersz,
                                 struct mg_tls_cert *cert) {
 8018a7c:	b590      	push	{r4, r7, lr}
 8018a7e:	b0af      	sub	sp, #188	@ 0xbc
 8018a80:	af04      	add	r7, sp, #16
 8018a82:	6178      	str	r0, [r7, #20]
 8018a84:	6139      	str	r1, [r7, #16]
 8018a86:	60fa      	str	r2, [r7, #12]
  uint8_t *tbs, *der = (uint8_t *) buf;
 8018a88:	697b      	ldr	r3, [r7, #20]
 8018a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  size_t tbssz;
  struct mg_der_tlv root, tbs_cert, field, algo;  // pubkey, signature;
  struct mg_der_tlv pki, pki_algo, pki_key, pki_curve, raw_sig;

  // Parse outermost SEQUENCE
  if (mg_der_parse(der, dersz, &root) <= 0 || root.type != 0x30) return -1;
 8018a8e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8018a92:	461a      	mov	r2, r3
 8018a94:	6939      	ldr	r1, [r7, #16]
 8018a96:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8018a9a:	f7fd ff35 	bl	8016908 <mg_der_parse>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	dd03      	ble.n	8018aac <mg_tls_parse_cert_der+0x30>
 8018aa4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8018aa8:	2b30      	cmp	r3, #48	@ 0x30
 8018aaa:	d002      	beq.n	8018ab2 <mg_tls_parse_cert_der+0x36>
 8018aac:	f04f 33ff 	mov.w	r3, #4294967295
 8018ab0:	e38a      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>

  // Parse TBSCertificate SEQUENCE
  tbs = root.value;
 8018ab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8018ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (mg_der_next(&root, &tbs_cert) <= 0 || tbs_cert.type != 0x30) return -1;
 8018aba:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8018abe:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8018ac2:	4611      	mov	r1, r2
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	f7fd ff7f 	bl	80169c8 <mg_der_next>
 8018aca:	4603      	mov	r3, r0
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	dd03      	ble.n	8018ad8 <mg_tls_parse_cert_der+0x5c>
 8018ad0:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8018ad4:	2b30      	cmp	r3, #48	@ 0x30
 8018ad6:	d002      	beq.n	8018ade <mg_tls_parse_cert_der+0x62>
 8018ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8018adc:	e374      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  tbssz = (size_t) (tbs_cert.value + tbs_cert.len - tbs);
 8018ade:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8018ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8018ae6:	441a      	add	r2, r3
 8018ae8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8018aec:	1ad3      	subs	r3, r2, r3
 8018aee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  // Parse Version (optional field)
  if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 8018af2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018af6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018afa:	4611      	mov	r1, r2
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7fd ff63 	bl	80169c8 <mg_der_next>
 8018b02:	4603      	mov	r3, r0
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	dc02      	bgt.n	8018b0e <mg_tls_parse_cert_der+0x92>
 8018b08:	f04f 33ff 	mov.w	r3, #4294967295
 8018b0c:	e35c      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  if (field.type == 0xa0) {  // v3
 8018b0e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018b12:	2ba0      	cmp	r3, #160	@ 0xa0
 8018b14:	d123      	bne.n	8018b5e <mg_tls_parse_cert_der+0xe2>
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8018b16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018b1a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8018b1c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018b20:	4618      	mov	r0, r3
 8018b22:	f7fd fef1 	bl	8016908 <mg_der_parse>
 8018b26:	4603      	mov	r3, r0
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	dd07      	ble.n	8018b3c <mg_tls_parse_cert_der+0xc0>
 8018b2c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8018b2e:	2b01      	cmp	r3, #1
 8018b30:	d104      	bne.n	8018b3c <mg_tls_parse_cert_der+0xc0>
        field.value[0] != 2)
 8018b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8018b36:	781b      	ldrb	r3, [r3, #0]
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8018b38:	2b02      	cmp	r3, #2
 8018b3a:	d002      	beq.n	8018b42 <mg_tls_parse_cert_der+0xc6>
      return -1;
 8018b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b40:	e342      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
    if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 8018b42:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018b46:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018b4a:	4611      	mov	r1, r2
 8018b4c:	4618      	mov	r0, r3
 8018b4e:	f7fd ff3b 	bl	80169c8 <mg_der_next>
 8018b52:	4603      	mov	r3, r0
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	dc02      	bgt.n	8018b5e <mg_tls_parse_cert_der+0xe2>
 8018b58:	f04f 33ff 	mov.w	r3, #4294967295
 8018b5c:	e334      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse Serial Number
  if (field.type != 2) return -1;
 8018b5e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018b62:	2b02      	cmp	r3, #2
 8018b64:	d002      	beq.n	8018b6c <mg_tls_parse_cert_der+0xf0>
 8018b66:	f04f 33ff 	mov.w	r3, #4294967295
 8018b6a:	e32d      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  cert->sn = mg_str_n((char *) field.value, field.len);
 8018b6c:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8018b70:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8018b72:	68fc      	ldr	r4, [r7, #12]
 8018b74:	463b      	mov	r3, r7
 8018b76:	4618      	mov	r0, r3
 8018b78:	f7fd f905 	bl	8015d86 <mg_str_n>
 8018b7c:	1d23      	adds	r3, r4, #4
 8018b7e:	463a      	mov	r2, r7
 8018b80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018b84:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("cert s/n: %M", mg_print_hex, cert->sn.len, cert->sn.buf));
 8018b88:	4bae      	ldr	r3, [pc, #696]	@ (8018e44 <mg_tls_parse_cert_der+0x3c8>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	2b03      	cmp	r3, #3
 8018b8e:	dd0e      	ble.n	8018bae <mg_tls_parse_cert_der+0x132>
 8018b90:	4bad      	ldr	r3, [pc, #692]	@ (8018e48 <mg_tls_parse_cert_der+0x3cc>)
 8018b92:	f642 6262 	movw	r2, #11874	@ 0x2e62
 8018b96:	49ad      	ldr	r1, [pc, #692]	@ (8018e4c <mg_tls_parse_cert_der+0x3d0>)
 8018b98:	2004      	movs	r0, #4
 8018b9a:	f7f5 f8d7 	bl	800dd4c <mg_log_prefix>
 8018b9e:	68fb      	ldr	r3, [r7, #12]
 8018ba0:	689a      	ldr	r2, [r3, #8]
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	685b      	ldr	r3, [r3, #4]
 8018ba6:	49aa      	ldr	r1, [pc, #680]	@ (8018e50 <mg_tls_parse_cert_der+0x3d4>)
 8018ba8:	48aa      	ldr	r0, [pc, #680]	@ (8018e54 <mg_tls_parse_cert_der+0x3d8>)
 8018baa:	f7f5 f91f 	bl	800ddec <mg_log>

  // Parse signature algorithm (first occurrence)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8018bae:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018bb2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018bb6:	4611      	mov	r1, r2
 8018bb8:	4618      	mov	r0, r3
 8018bba:	f7fd ff05 	bl	80169c8 <mg_der_next>
 8018bbe:	4603      	mov	r3, r0
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	dd03      	ble.n	8018bcc <mg_tls_parse_cert_der+0x150>
 8018bc4:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018bc8:	2b30      	cmp	r3, #48	@ 0x30
 8018bca:	d002      	beq.n	8018bd2 <mg_tls_parse_cert_der+0x156>
 8018bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8018bd0:	e2fa      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&field, &algo) <= 0 || algo.type != 0x06) return -1;
 8018bd2:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8018bd6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018bda:	4611      	mov	r1, r2
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7fd fef3 	bl	80169c8 <mg_der_next>
 8018be2:	4603      	mov	r3, r0
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	dd03      	ble.n	8018bf0 <mg_tls_parse_cert_der+0x174>
 8018be8:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8018bec:	2b06      	cmp	r3, #6
 8018bee:	d002      	beq.n	8018bf6 <mg_tls_parse_cert_der+0x17a>
 8018bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bf4:	e2e8      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>

  MG_VERBOSE(("sig algo (oid): %M", mg_print_hex, algo.len, algo.value));
 8018bf6:	4b93      	ldr	r3, [pc, #588]	@ (8018e44 <mg_tls_parse_cert_der+0x3c8>)
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	2b03      	cmp	r3, #3
 8018bfc:	dd0c      	ble.n	8018c18 <mg_tls_parse_cert_der+0x19c>
 8018bfe:	4b92      	ldr	r3, [pc, #584]	@ (8018e48 <mg_tls_parse_cert_der+0x3cc>)
 8018c00:	f642 6268 	movw	r2, #11880	@ 0x2e68
 8018c04:	4991      	ldr	r1, [pc, #580]	@ (8018e4c <mg_tls_parse_cert_der+0x3d0>)
 8018c06:	2004      	movs	r0, #4
 8018c08:	f7f5 f8a0 	bl	800dd4c <mg_log_prefix>
 8018c0c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8018c0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018c10:	498f      	ldr	r1, [pc, #572]	@ (8018e50 <mg_tls_parse_cert_der+0x3d4>)
 8018c12:	4891      	ldr	r0, [pc, #580]	@ (8018e58 <mg_tls_parse_cert_der+0x3dc>)
 8018c14:	f7f5 f8ea 	bl	800ddec <mg_log>
  // Signature algorithm OID mapping
  if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x02", algo.len) == 0) {
 8018c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018c1a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8018c1c:	498f      	ldr	r1, [pc, #572]	@ (8018e5c <mg_tls_parse_cert_der+0x3e0>)
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f00c fd8a 	bl	8025738 <memcmp>
 8018c24:	4603      	mov	r3, r0
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d11a      	bne.n	8018c60 <mg_tls_parse_cert_der+0x1e4>
    MG_VERBOSE(("sig algo: ECDSA with SHA256"));
 8018c2a:	4b86      	ldr	r3, [pc, #536]	@ (8018e44 <mg_tls_parse_cert_der+0x3c8>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	2b03      	cmp	r3, #3
 8018c30:	dd09      	ble.n	8018c46 <mg_tls_parse_cert_der+0x1ca>
 8018c32:	4b85      	ldr	r3, [pc, #532]	@ (8018e48 <mg_tls_parse_cert_der+0x3cc>)
 8018c34:	f642 626b 	movw	r2, #11883	@ 0x2e6b
 8018c38:	4984      	ldr	r1, [pc, #528]	@ (8018e4c <mg_tls_parse_cert_der+0x3d0>)
 8018c3a:	2004      	movs	r0, #4
 8018c3c:	f7f5 f886 	bl	800dd4c <mg_log_prefix>
 8018c40:	4887      	ldr	r0, [pc, #540]	@ (8018e60 <mg_tls_parse_cert_der+0x3e4>)
 8018c42:	f7f5 f8d3 	bl	800ddec <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	331c      	adds	r3, #28
 8018c4a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8018c4e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8018c52:	4618      	mov	r0, r3
 8018c54:	f7fb ff61 	bl	8014b1a <mg_sha256>
    cert->tbshashsz = 32;
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	2220      	movs	r2, #32
 8018c5c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8018c5e:	e07f      	b.n	8018d60 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 8018c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 8018c62:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 8018c64:	497f      	ldr	r1, [pc, #508]	@ (8018e64 <mg_tls_parse_cert_der+0x3e8>)
 8018c66:	4618      	mov	r0, r3
 8018c68:	f00c fd66 	bl	8025738 <memcmp>
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	d11a      	bne.n	8018ca8 <mg_tls_parse_cert_der+0x22c>
    MG_VERBOSE(("sig algo: RSA with SHA256"));
 8018c72:	4b74      	ldr	r3, [pc, #464]	@ (8018e44 <mg_tls_parse_cert_der+0x3c8>)
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	2b03      	cmp	r3, #3
 8018c78:	dd09      	ble.n	8018c8e <mg_tls_parse_cert_der+0x212>
 8018c7a:	4b73      	ldr	r3, [pc, #460]	@ (8018e48 <mg_tls_parse_cert_der+0x3cc>)
 8018c7c:	f642 6270 	movw	r2, #11888	@ 0x2e70
 8018c80:	4972      	ldr	r1, [pc, #456]	@ (8018e4c <mg_tls_parse_cert_der+0x3d0>)
 8018c82:	2004      	movs	r0, #4
 8018c84:	f7f5 f862 	bl	800dd4c <mg_log_prefix>
 8018c88:	4877      	ldr	r0, [pc, #476]	@ (8018e68 <mg_tls_parse_cert_der+0x3ec>)
 8018c8a:	f7f5 f8af 	bl	800ddec <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	331c      	adds	r3, #28
 8018c92:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8018c96:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f7fb ff3d 	bl	8014b1a <mg_sha256>
    cert->tbshashsz = 32;
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	2220      	movs	r2, #32
 8018ca4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8018ca6:	e05b      	b.n	8018d60 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x03", algo.len) ==
 8018ca8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018caa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8018cac:	496f      	ldr	r1, [pc, #444]	@ (8018e6c <mg_tls_parse_cert_der+0x3f0>)
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f00c fd42 	bl	8025738 <memcmp>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d11a      	bne.n	8018cf0 <mg_tls_parse_cert_der+0x274>
             0) {
    MG_VERBOSE(("sig algo: ECDSA with SHA384"));
 8018cba:	4b62      	ldr	r3, [pc, #392]	@ (8018e44 <mg_tls_parse_cert_der+0x3c8>)
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	2b03      	cmp	r3, #3
 8018cc0:	dd09      	ble.n	8018cd6 <mg_tls_parse_cert_der+0x25a>
 8018cc2:	4b61      	ldr	r3, [pc, #388]	@ (8018e48 <mg_tls_parse_cert_der+0x3cc>)
 8018cc4:	f642 6275 	movw	r2, #11893	@ 0x2e75
 8018cc8:	4960      	ldr	r1, [pc, #384]	@ (8018e4c <mg_tls_parse_cert_der+0x3d0>)
 8018cca:	2004      	movs	r0, #4
 8018ccc:	f7f5 f83e 	bl	800dd4c <mg_log_prefix>
 8018cd0:	4867      	ldr	r0, [pc, #412]	@ (8018e70 <mg_tls_parse_cert_der+0x3f4>)
 8018cd2:	f7f5 f88b 	bl	800ddec <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	331c      	adds	r3, #28
 8018cda:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8018cde:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8018ce2:	4618      	mov	r0, r3
 8018ce4:	f7fc ffef 	bl	8015cc6 <mg_sha384>
    cert->tbshashsz = 48;
 8018ce8:	68fb      	ldr	r3, [r7, #12]
 8018cea:	2230      	movs	r2, #48	@ 0x30
 8018cec:	64da      	str	r2, [r3, #76]	@ 0x4c
 8018cee:	e037      	b.n	8018d60 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 8018cf0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 8018cf2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 8018cf4:	495f      	ldr	r1, [pc, #380]	@ (8018e74 <mg_tls_parse_cert_der+0x3f8>)
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f00c fd1e 	bl	8025738 <memcmp>
 8018cfc:	4603      	mov	r3, r0
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d11a      	bne.n	8018d38 <mg_tls_parse_cert_der+0x2bc>
    MG_VERBOSE(("sig algo: RSA with SHA384"));
 8018d02:	4b50      	ldr	r3, [pc, #320]	@ (8018e44 <mg_tls_parse_cert_der+0x3c8>)
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	2b03      	cmp	r3, #3
 8018d08:	dd09      	ble.n	8018d1e <mg_tls_parse_cert_der+0x2a2>
 8018d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8018e48 <mg_tls_parse_cert_der+0x3cc>)
 8018d0c:	f642 627a 	movw	r2, #11898	@ 0x2e7a
 8018d10:	494e      	ldr	r1, [pc, #312]	@ (8018e4c <mg_tls_parse_cert_der+0x3d0>)
 8018d12:	2004      	movs	r0, #4
 8018d14:	f7f5 f81a 	bl	800dd4c <mg_log_prefix>
 8018d18:	4857      	ldr	r0, [pc, #348]	@ (8018e78 <mg_tls_parse_cert_der+0x3fc>)
 8018d1a:	f7f5 f867 	bl	800ddec <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	331c      	adds	r3, #28
 8018d22:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8018d26:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	f7fc ffcb 	bl	8015cc6 <mg_sha384>
    cert->tbshashsz = 48;
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	2230      	movs	r2, #48	@ 0x30
 8018d34:	64da      	str	r2, [r3, #76]	@ 0x4c
 8018d36:	e013      	b.n	8018d60 <mg_tls_parse_cert_der+0x2e4>
  } else {
    MG_ERROR(
 8018d38:	4b42      	ldr	r3, [pc, #264]	@ (8018e44 <mg_tls_parse_cert_der+0x3c8>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	dd0c      	ble.n	8018d5a <mg_tls_parse_cert_der+0x2de>
 8018d40:	4b41      	ldr	r3, [pc, #260]	@ (8018e48 <mg_tls_parse_cert_der+0x3cc>)
 8018d42:	f642 627e 	movw	r2, #11902	@ 0x2e7e
 8018d46:	4941      	ldr	r1, [pc, #260]	@ (8018e4c <mg_tls_parse_cert_der+0x3d0>)
 8018d48:	2001      	movs	r0, #1
 8018d4a:	f7f4 ffff 	bl	800dd4c <mg_log_prefix>
 8018d4e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8018d50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018d52:	493f      	ldr	r1, [pc, #252]	@ (8018e50 <mg_tls_parse_cert_der+0x3d4>)
 8018d54:	4849      	ldr	r0, [pc, #292]	@ (8018e7c <mg_tls_parse_cert_der+0x400>)
 8018d56:	f7f5 f849 	bl	800ddec <mg_log>
        ("sig algo: unsupported OID: %M", mg_print_hex, algo.len, algo.value));
    return -1;
 8018d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d5e:	e233      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  }
  MG_VERBOSE(("tbs hash: %M", mg_print_hex, cert->tbshashsz, cert->tbshash));
 8018d60:	4b38      	ldr	r3, [pc, #224]	@ (8018e44 <mg_tls_parse_cert_der+0x3c8>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	2b03      	cmp	r3, #3
 8018d66:	dd0e      	ble.n	8018d86 <mg_tls_parse_cert_der+0x30a>
 8018d68:	4b37      	ldr	r3, [pc, #220]	@ (8018e48 <mg_tls_parse_cert_der+0x3cc>)
 8018d6a:	f642 6282 	movw	r2, #11906	@ 0x2e82
 8018d6e:	4937      	ldr	r1, [pc, #220]	@ (8018e4c <mg_tls_parse_cert_der+0x3d0>)
 8018d70:	2004      	movs	r0, #4
 8018d72:	f7f4 ffeb 	bl	800dd4c <mg_log_prefix>
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018d7a:	68fb      	ldr	r3, [r7, #12]
 8018d7c:	331c      	adds	r3, #28
 8018d7e:	4934      	ldr	r1, [pc, #208]	@ (8018e50 <mg_tls_parse_cert_der+0x3d4>)
 8018d80:	483f      	ldr	r0, [pc, #252]	@ (8018e80 <mg_tls_parse_cert_der+0x404>)
 8018d82:	f7f5 f833 	bl	800ddec <mg_log>

  // issuer
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8018d86:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018d8a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018d8e:	4611      	mov	r1, r2
 8018d90:	4618      	mov	r0, r3
 8018d92:	f7fd fe19 	bl	80169c8 <mg_der_next>
 8018d96:	4603      	mov	r3, r0
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	dd03      	ble.n	8018da4 <mg_tls_parse_cert_der+0x328>
 8018d9c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018da0:	2b30      	cmp	r3, #48	@ 0x30
 8018da2:	d002      	beq.n	8018daa <mg_tls_parse_cert_der+0x32e>
 8018da4:	f04f 33ff 	mov.w	r3, #4294967295
 8018da8:	e20e      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("issuer", &field);
 8018daa:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018dae:	4619      	mov	r1, r3
 8018db0:	4834      	ldr	r0, [pc, #208]	@ (8018e84 <mg_tls_parse_cert_der+0x408>)
 8018db2:	f7ff fdbd 	bl	8018930 <mg_der_debug_cert_name>

  // validity dates (before/after)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8018db6:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018dba:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018dbe:	4611      	mov	r1, r2
 8018dc0:	4618      	mov	r0, r3
 8018dc2:	f7fd fe01 	bl	80169c8 <mg_der_next>
 8018dc6:	4603      	mov	r3, r0
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	dd03      	ble.n	8018dd4 <mg_tls_parse_cert_der+0x358>
 8018dcc:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018dd0:	2b30      	cmp	r3, #48	@ 0x30
 8018dd2:	d002      	beq.n	8018dda <mg_tls_parse_cert_der+0x35e>
 8018dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8018dd8:	e1f6      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  if (1) {
    struct mg_der_tlv before, after;
    mg_der_next(&field, &before);
 8018dda:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018dde:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018de2:	4611      	mov	r1, r2
 8018de4:	4618      	mov	r0, r3
 8018de6:	f7fd fdef 	bl	80169c8 <mg_der_next>
    mg_der_next(&field, &after);
 8018dea:	f107 0218 	add.w	r2, r7, #24
 8018dee:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018df2:	4611      	mov	r1, r2
 8018df4:	4618      	mov	r0, r3
 8018df6:	f7fd fde7 	bl	80169c8 <mg_der_next>
    if (memcmp(after.value, "250101000000Z", after.len) < 0) {
 8018dfa:	6a3b      	ldr	r3, [r7, #32]
 8018dfc:	69fa      	ldr	r2, [r7, #28]
 8018dfe:	4922      	ldr	r1, [pc, #136]	@ (8018e88 <mg_tls_parse_cert_der+0x40c>)
 8018e00:	4618      	mov	r0, r3
 8018e02:	f00c fc99 	bl	8025738 <memcmp>
 8018e06:	4603      	mov	r3, r0
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	da41      	bge.n	8018e90 <mg_tls_parse_cert_der+0x414>
      MG_ERROR(("invalid validity dates: before=%M after=%M", mg_print_hex,
 8018e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8018e44 <mg_tls_parse_cert_der+0x3c8>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	dd14      	ble.n	8018e3e <mg_tls_parse_cert_der+0x3c2>
 8018e14:	4b0c      	ldr	r3, [pc, #48]	@ (8018e48 <mg_tls_parse_cert_der+0x3cc>)
 8018e16:	f642 628f 	movw	r2, #11919	@ 0x2e8f
 8018e1a:	490c      	ldr	r1, [pc, #48]	@ (8018e4c <mg_tls_parse_cert_der+0x3d0>)
 8018e1c:	2001      	movs	r0, #1
 8018e1e:	f7f4 ff95 	bl	800dd4c <mg_log_prefix>
 8018e22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8018e24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8018e26:	69fb      	ldr	r3, [r7, #28]
 8018e28:	6a3a      	ldr	r2, [r7, #32]
 8018e2a:	9202      	str	r2, [sp, #8]
 8018e2c:	9301      	str	r3, [sp, #4]
 8018e2e:	4b08      	ldr	r3, [pc, #32]	@ (8018e50 <mg_tls_parse_cert_der+0x3d4>)
 8018e30:	9300      	str	r3, [sp, #0]
 8018e32:	4603      	mov	r3, r0
 8018e34:	460a      	mov	r2, r1
 8018e36:	4906      	ldr	r1, [pc, #24]	@ (8018e50 <mg_tls_parse_cert_der+0x3d4>)
 8018e38:	4814      	ldr	r0, [pc, #80]	@ (8018e8c <mg_tls_parse_cert_der+0x410>)
 8018e3a:	f7f4 ffd7 	bl	800ddec <mg_log>
                before.len, before.value, mg_print_hex, after.len,
                after.value));
      return -1;
 8018e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8018e42:	e1c1      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
 8018e44:	24000258 	.word	0x24000258
 8018e48:	0802a320 	.word	0x0802a320
 8018e4c:	080264c4 	.word	0x080264c4
 8018e50:	080129c5 	.word	0x080129c5
 8018e54:	08028328 	.word	0x08028328
 8018e58:	08028338 	.word	0x08028338
 8018e5c:	0802834c 	.word	0x0802834c
 8018e60:	08028358 	.word	0x08028358
 8018e64:	08028374 	.word	0x08028374
 8018e68:	08028380 	.word	0x08028380
 8018e6c:	0802839c 	.word	0x0802839c
 8018e70:	080283a8 	.word	0x080283a8
 8018e74:	080283c4 	.word	0x080283c4
 8018e78:	080283d0 	.word	0x080283d0
 8018e7c:	080283ec 	.word	0x080283ec
 8018e80:	0802840c 	.word	0x0802840c
 8018e84:	0802841c 	.word	0x0802841c
 8018e88:	08028424 	.word	0x08028424
 8018e8c:	08028434 	.word	0x08028434
    }
  }

  // subject
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8018e90:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018e94:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018e98:	4611      	mov	r1, r2
 8018e9a:	4618      	mov	r0, r3
 8018e9c:	f7fd fd94 	bl	80169c8 <mg_der_next>
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	2b00      	cmp	r3, #0
 8018ea4:	dd03      	ble.n	8018eae <mg_tls_parse_cert_der+0x432>
 8018ea6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018eaa:	2b30      	cmp	r3, #48	@ 0x30
 8018eac:	d002      	beq.n	8018eb4 <mg_tls_parse_cert_der+0x438>
 8018eae:	f04f 33ff 	mov.w	r3, #4294967295
 8018eb2:	e189      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("subject", &field);
 8018eb4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018eb8:	4619      	mov	r1, r3
 8018eba:	48a2      	ldr	r0, [pc, #648]	@ (8019144 <mg_tls_parse_cert_der+0x6c8>)
 8018ebc:	f7ff fd38 	bl	8018930 <mg_der_debug_cert_name>

  // subject public key info
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8018ec0:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8018ec4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8018ec8:	4611      	mov	r1, r2
 8018eca:	4618      	mov	r0, r3
 8018ecc:	f7fd fd7c 	bl	80169c8 <mg_der_next>
 8018ed0:	4603      	mov	r3, r0
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	dd03      	ble.n	8018ede <mg_tls_parse_cert_der+0x462>
 8018ed6:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8018eda:	2b30      	cmp	r3, #48	@ 0x30
 8018edc:	d002      	beq.n	8018ee4 <mg_tls_parse_cert_der+0x468>
 8018ede:	f04f 33ff 	mov.w	r3, #4294967295
 8018ee2:	e171      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>

  if (mg_der_next(&field, &pki) <= 0 || pki.type != 0x30) return -1;
 8018ee4:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8018ee8:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8018eec:	4611      	mov	r1, r2
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f7fd fd6a 	bl	80169c8 <mg_der_next>
 8018ef4:	4603      	mov	r3, r0
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	dd03      	ble.n	8018f02 <mg_tls_parse_cert_der+0x486>
 8018efa:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8018efe:	2b30      	cmp	r3, #48	@ 0x30
 8018f00:	d002      	beq.n	8018f08 <mg_tls_parse_cert_der+0x48c>
 8018f02:	f04f 33ff 	mov.w	r3, #4294967295
 8018f06:	e15f      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&pki, &pki_algo) <= 0 || pki_algo.type != 0x06) return -1;
 8018f08:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8018f0c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8018f10:	4611      	mov	r1, r2
 8018f12:	4618      	mov	r0, r3
 8018f14:	f7fd fd58 	bl	80169c8 <mg_der_next>
 8018f18:	4603      	mov	r3, r0
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	dd03      	ble.n	8018f26 <mg_tls_parse_cert_der+0x4aa>
 8018f1e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8018f22:	2b06      	cmp	r3, #6
 8018f24:	d002      	beq.n	8018f2c <mg_tls_parse_cert_der+0x4b0>
 8018f26:	f04f 33ff 	mov.w	r3, #4294967295
 8018f2a:	e14d      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>

  // public key algorithm
  MG_VERBOSE(("pk algo (oid): %M", mg_print_hex, pki_algo.len, pki_algo.value));
 8018f2c:	4b86      	ldr	r3, [pc, #536]	@ (8019148 <mg_tls_parse_cert_der+0x6cc>)
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	2b03      	cmp	r3, #3
 8018f32:	dd0c      	ble.n	8018f4e <mg_tls_parse_cert_der+0x4d2>
 8018f34:	4b85      	ldr	r3, [pc, #532]	@ (801914c <mg_tls_parse_cert_der+0x6d0>)
 8018f36:	f642 62a1 	movw	r2, #11937	@ 0x2ea1
 8018f3a:	4985      	ldr	r1, [pc, #532]	@ (8019150 <mg_tls_parse_cert_der+0x6d4>)
 8018f3c:	2004      	movs	r0, #4
 8018f3e:	f7f4 ff05 	bl	800dd4c <mg_log_prefix>
 8018f42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8018f44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8018f46:	4983      	ldr	r1, [pc, #524]	@ (8019154 <mg_tls_parse_cert_der+0x6d8>)
 8018f48:	4883      	ldr	r0, [pc, #524]	@ (8019158 <mg_tls_parse_cert_der+0x6dc>)
 8018f4a:	f7f4 ff4f 	bl	800ddec <mg_log>
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 8018f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
             pki_algo.len) == 0) {
 8018f50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 8018f52:	4982      	ldr	r1, [pc, #520]	@ (801915c <mg_tls_parse_cert_der+0x6e0>)
 8018f54:	4618      	mov	r0, r3
 8018f56:	f00c fbef 	bl	8025738 <memcmp>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d111      	bne.n	8018f84 <mg_tls_parse_cert_der+0x508>
    cert->is_ec_pubkey = 1;
 8018f60:	68fb      	ldr	r3, [r7, #12]
 8018f62:	2201      	movs	r2, #1
 8018f64:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp256r1"));
 8018f66:	4b78      	ldr	r3, [pc, #480]	@ (8019148 <mg_tls_parse_cert_der+0x6cc>)
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	2b03      	cmp	r3, #3
 8018f6c:	dd6f      	ble.n	801904e <mg_tls_parse_cert_der+0x5d2>
 8018f6e:	4b77      	ldr	r3, [pc, #476]	@ (801914c <mg_tls_parse_cert_der+0x6d0>)
 8018f70:	f642 62a5 	movw	r2, #11941	@ 0x2ea5
 8018f74:	4976      	ldr	r1, [pc, #472]	@ (8019150 <mg_tls_parse_cert_der+0x6d4>)
 8018f76:	2004      	movs	r0, #4
 8018f78:	f7f4 fee8 	bl	800dd4c <mg_log_prefix>
 8018f7c:	4878      	ldr	r0, [pc, #480]	@ (8019160 <mg_tls_parse_cert_der+0x6e4>)
 8018f7e:	f7f4 ff35 	bl	800ddec <mg_log>
 8018f82:	e064      	b.n	801904e <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8018f84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8018f86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8018f88:	4976      	ldr	r1, [pc, #472]	@ (8019164 <mg_tls_parse_cert_der+0x6e8>)
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f00c fbd4 	bl	8025738 <memcmp>
 8018f90:	4603      	mov	r3, r0
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d111      	bne.n	8018fba <mg_tls_parse_cert_der+0x53e>
    cert->is_ec_pubkey = 1;
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	2201      	movs	r2, #1
 8018f9a:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp384r1"));
 8018f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8019148 <mg_tls_parse_cert_der+0x6cc>)
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	2b03      	cmp	r3, #3
 8018fa2:	dd54      	ble.n	801904e <mg_tls_parse_cert_der+0x5d2>
 8018fa4:	4b69      	ldr	r3, [pc, #420]	@ (801914c <mg_tls_parse_cert_der+0x6d0>)
 8018fa6:	f642 62a9 	movw	r2, #11945	@ 0x2ea9
 8018faa:	4969      	ldr	r1, [pc, #420]	@ (8019150 <mg_tls_parse_cert_der+0x6d4>)
 8018fac:	2004      	movs	r0, #4
 8018fae:	f7f4 fecd 	bl	800dd4c <mg_log_prefix>
 8018fb2:	486d      	ldr	r0, [pc, #436]	@ (8019168 <mg_tls_parse_cert_der+0x6ec>)
 8018fb4:	f7f4 ff1a 	bl	800ddec <mg_log>
 8018fb8:	e049      	b.n	801904e <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8018fba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8018fbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 8018fbe:	496b      	ldr	r1, [pc, #428]	@ (801916c <mg_tls_parse_cert_der+0x6f0>)
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	f00c fbb9 	bl	8025738 <memcmp>
 8018fc6:	4603      	mov	r3, r0
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d111      	bne.n	8018ff0 <mg_tls_parse_cert_der+0x574>
    cert->is_ec_pubkey = 1;
 8018fcc:	68fb      	ldr	r3, [r7, #12]
 8018fce:	2201      	movs	r2, #1
 8018fd0:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: EC public key"));
 8018fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8019148 <mg_tls_parse_cert_der+0x6cc>)
 8018fd4:	681b      	ldr	r3, [r3, #0]
 8018fd6:	2b03      	cmp	r3, #3
 8018fd8:	dd39      	ble.n	801904e <mg_tls_parse_cert_der+0x5d2>
 8018fda:	4b5c      	ldr	r3, [pc, #368]	@ (801914c <mg_tls_parse_cert_der+0x6d0>)
 8018fdc:	f642 62ad 	movw	r2, #11949	@ 0x2ead
 8018fe0:	495b      	ldr	r1, [pc, #364]	@ (8019150 <mg_tls_parse_cert_der+0x6d4>)
 8018fe2:	2004      	movs	r0, #4
 8018fe4:	f7f4 feb2 	bl	800dd4c <mg_log_prefix>
 8018fe8:	4861      	ldr	r0, [pc, #388]	@ (8019170 <mg_tls_parse_cert_der+0x6f4>)
 8018fea:	f7f4 feff 	bl	800ddec <mg_log>
 8018fee:	e02e      	b.n	801904e <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8018ff0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8018ff2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8018ff4:	495f      	ldr	r1, [pc, #380]	@ (8019174 <mg_tls_parse_cert_der+0x6f8>)
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f00c fb9e 	bl	8025738 <memcmp>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d111      	bne.n	8019026 <mg_tls_parse_cert_der+0x5aa>
    cert->is_ec_pubkey = 0;
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	2200      	movs	r2, #0
 8019006:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: RSA"));
 8019008:	4b4f      	ldr	r3, [pc, #316]	@ (8019148 <mg_tls_parse_cert_der+0x6cc>)
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	2b03      	cmp	r3, #3
 801900e:	dd1e      	ble.n	801904e <mg_tls_parse_cert_der+0x5d2>
 8019010:	4b4e      	ldr	r3, [pc, #312]	@ (801914c <mg_tls_parse_cert_der+0x6d0>)
 8019012:	f642 62b1 	movw	r2, #11953	@ 0x2eb1
 8019016:	494e      	ldr	r1, [pc, #312]	@ (8019150 <mg_tls_parse_cert_der+0x6d4>)
 8019018:	2004      	movs	r0, #4
 801901a:	f7f4 fe97 	bl	800dd4c <mg_log_prefix>
 801901e:	4856      	ldr	r0, [pc, #344]	@ (8019178 <mg_tls_parse_cert_der+0x6fc>)
 8019020:	f7f4 fee4 	bl	800ddec <mg_log>
 8019024:	e013      	b.n	801904e <mg_tls_parse_cert_der+0x5d2>
  } else {
    MG_ERROR(("unsupported pk algo: %M", mg_print_hex, pki_algo.len,
 8019026:	4b48      	ldr	r3, [pc, #288]	@ (8019148 <mg_tls_parse_cert_der+0x6cc>)
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	2b00      	cmp	r3, #0
 801902c:	dd0c      	ble.n	8019048 <mg_tls_parse_cert_der+0x5cc>
 801902e:	4b47      	ldr	r3, [pc, #284]	@ (801914c <mg_tls_parse_cert_der+0x6d0>)
 8019030:	f642 62b3 	movw	r2, #11955	@ 0x2eb3
 8019034:	4946      	ldr	r1, [pc, #280]	@ (8019150 <mg_tls_parse_cert_der+0x6d4>)
 8019036:	2001      	movs	r0, #1
 8019038:	f7f4 fe88 	bl	800dd4c <mg_log_prefix>
 801903c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801903e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019040:	4944      	ldr	r1, [pc, #272]	@ (8019154 <mg_tls_parse_cert_der+0x6d8>)
 8019042:	484e      	ldr	r0, [pc, #312]	@ (801917c <mg_tls_parse_cert_der+0x700>)
 8019044:	f7f4 fed2 	bl	800ddec <mg_log>
              pki_algo.value));
    return -1;
 8019048:	f04f 33ff 	mov.w	r3, #4294967295
 801904c:	e0bc      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse public key
  if (cert->is_ec_pubkey) {
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	681b      	ldr	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d011      	beq.n	801907a <mg_tls_parse_cert_der+0x5fe>
    if (mg_der_next(&pki, &pki_curve) <= 0 || pki_curve.type != 0x06) return -1;
 8019056:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801905a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801905e:	4611      	mov	r1, r2
 8019060:	4618      	mov	r0, r3
 8019062:	f7fd fcb1 	bl	80169c8 <mg_der_next>
 8019066:	4603      	mov	r3, r0
 8019068:	2b00      	cmp	r3, #0
 801906a:	dd03      	ble.n	8019074 <mg_tls_parse_cert_der+0x5f8>
 801906c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8019070:	2b06      	cmp	r3, #6
 8019072:	d002      	beq.n	801907a <mg_tls_parse_cert_der+0x5fe>
 8019074:	f04f 33ff 	mov.w	r3, #4294967295
 8019078:	e0a6      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  }
  if (mg_der_next(&field, &pki_key) <= 0 || pki_key.type != 0x03) return -1;
 801907a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801907e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8019082:	4611      	mov	r1, r2
 8019084:	4618      	mov	r0, r3
 8019086:	f7fd fc9f 	bl	80169c8 <mg_der_next>
 801908a:	4603      	mov	r3, r0
 801908c:	2b00      	cmp	r3, #0
 801908e:	dd03      	ble.n	8019098 <mg_tls_parse_cert_der+0x61c>
 8019090:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8019094:	2b03      	cmp	r3, #3
 8019096:	d002      	beq.n	801909e <mg_tls_parse_cert_der+0x622>
 8019098:	f04f 33ff 	mov.w	r3, #4294967295
 801909c:	e094      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>

  if (cert->is_ec_pubkey) {  // Skip leading 0x00 and 0x04 (=uncompressed)
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d010      	beq.n	80190c8 <mg_tls_parse_cert_der+0x64c>
    cert->pubkey = mg_str_n((char *) pki_key.value + 2, pki_key.len - 2);
 80190a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190a8:	1c99      	adds	r1, r3, #2
 80190aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80190ac:	1e9a      	subs	r2, r3, #2
 80190ae:	68fc      	ldr	r4, [r7, #12]
 80190b0:	463b      	mov	r3, r7
 80190b2:	4618      	mov	r0, r3
 80190b4:	f7fc fe67 	bl	8015d86 <mg_str_n>
 80190b8:	f104 030c 	add.w	r3, r4, #12
 80190bc:	463a      	mov	r2, r7
 80190be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80190c2:	e883 0003 	stmia.w	r3, {r0, r1}
 80190c6:	e00f      	b.n	80190e8 <mg_tls_parse_cert_der+0x66c>
  } else {  // Skip leading 0x00 byte
    cert->pubkey = mg_str_n((char *) pki_key.value + 1, pki_key.len - 1);
 80190c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80190ca:	1c59      	adds	r1, r3, #1
 80190cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80190ce:	1e5a      	subs	r2, r3, #1
 80190d0:	68fc      	ldr	r4, [r7, #12]
 80190d2:	463b      	mov	r3, r7
 80190d4:	4618      	mov	r0, r3
 80190d6:	f7fc fe56 	bl	8015d86 <mg_str_n>
 80190da:	f104 030c 	add.w	r3, r4, #12
 80190de:	463a      	mov	r2, r7
 80190e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80190e4:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  // Parse signature
  if (mg_der_next(&root, &field) <= 0 || field.type != 0x30) return -1;
 80190e8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80190ec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80190f0:	4611      	mov	r1, r2
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7fd fc68 	bl	80169c8 <mg_der_next>
 80190f8:	4603      	mov	r3, r0
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	dd03      	ble.n	8019106 <mg_tls_parse_cert_der+0x68a>
 80190fe:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8019102:	2b30      	cmp	r3, #48	@ 0x30
 8019104:	d002      	beq.n	801910c <mg_tls_parse_cert_der+0x690>
 8019106:	f04f 33ff 	mov.w	r3, #4294967295
 801910a:	e05d      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&root, &raw_sig) <= 0 || raw_sig.type != 0x03) return -1;
 801910c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8019110:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8019114:	4611      	mov	r1, r2
 8019116:	4618      	mov	r0, r3
 8019118:	f7fd fc56 	bl	80169c8 <mg_der_next>
 801911c:	4603      	mov	r3, r0
 801911e:	2b00      	cmp	r3, #0
 8019120:	dd03      	ble.n	801912a <mg_tls_parse_cert_der+0x6ae>
 8019122:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8019126:	2b03      	cmp	r3, #3
 8019128:	d002      	beq.n	8019130 <mg_tls_parse_cert_der+0x6b4>
 801912a:	f04f 33ff 	mov.w	r3, #4294967295
 801912e:	e04b      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
  if (raw_sig.len < 1 || raw_sig.value[0] != 0x00) return -1;
 8019130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019132:	2b00      	cmp	r3, #0
 8019134:	d003      	beq.n	801913e <mg_tls_parse_cert_der+0x6c2>
 8019136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019138:	781b      	ldrb	r3, [r3, #0]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d020      	beq.n	8019180 <mg_tls_parse_cert_der+0x704>
 801913e:	f04f 33ff 	mov.w	r3, #4294967295
 8019142:	e041      	b.n	80191c8 <mg_tls_parse_cert_der+0x74c>
 8019144:	08028460 	.word	0x08028460
 8019148:	24000258 	.word	0x24000258
 801914c:	0802a320 	.word	0x0802a320
 8019150:	080264c4 	.word	0x080264c4
 8019154:	080129c5 	.word	0x080129c5
 8019158:	08028468 	.word	0x08028468
 801915c:	0802847c 	.word	0x0802847c
 8019160:	08028488 	.word	0x08028488
 8019164:	080284a4 	.word	0x080284a4
 8019168:	080284b0 	.word	0x080284b0
 801916c:	080284cc 	.word	0x080284cc
 8019170:	080284d4 	.word	0x080284d4
 8019174:	080284ec 	.word	0x080284ec
 8019178:	080284f8 	.word	0x080284f8
 801917c:	08028508 	.word	0x08028508

  cert->sig = mg_str_n((char *) raw_sig.value + 1, raw_sig.len - 1);
 8019180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019182:	1c59      	adds	r1, r3, #1
 8019184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019186:	1e5a      	subs	r2, r3, #1
 8019188:	68fc      	ldr	r4, [r7, #12]
 801918a:	463b      	mov	r3, r7
 801918c:	4618      	mov	r0, r3
 801918e:	f7fc fdfa 	bl	8015d86 <mg_str_n>
 8019192:	f104 0314 	add.w	r3, r4, #20
 8019196:	463a      	mov	r2, r7
 8019198:	e892 0003 	ldmia.w	r2, {r0, r1}
 801919c:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("sig: %M", mg_print_hex, cert->sig.len, cert->sig.buf));
 80191a0:	4b0b      	ldr	r3, [pc, #44]	@ (80191d0 <mg_tls_parse_cert_der+0x754>)
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	2b03      	cmp	r3, #3
 80191a6:	dd0e      	ble.n	80191c6 <mg_tls_parse_cert_der+0x74a>
 80191a8:	4b0a      	ldr	r3, [pc, #40]	@ (80191d4 <mg_tls_parse_cert_der+0x758>)
 80191aa:	f642 62ca 	movw	r2, #11978	@ 0x2eca
 80191ae:	490a      	ldr	r1, [pc, #40]	@ (80191d8 <mg_tls_parse_cert_der+0x75c>)
 80191b0:	2004      	movs	r0, #4
 80191b2:	f7f4 fdcb 	bl	800dd4c <mg_log_prefix>
 80191b6:	68fb      	ldr	r3, [r7, #12]
 80191b8:	699a      	ldr	r2, [r3, #24]
 80191ba:	68fb      	ldr	r3, [r7, #12]
 80191bc:	695b      	ldr	r3, [r3, #20]
 80191be:	4907      	ldr	r1, [pc, #28]	@ (80191dc <mg_tls_parse_cert_der+0x760>)
 80191c0:	4807      	ldr	r0, [pc, #28]	@ (80191e0 <mg_tls_parse_cert_der+0x764>)
 80191c2:	f7f4 fe13 	bl	800ddec <mg_log>

  return 0;
 80191c6:	2300      	movs	r3, #0
}
 80191c8:	4618      	mov	r0, r3
 80191ca:	37ac      	adds	r7, #172	@ 0xac
 80191cc:	46bd      	mov	sp, r7
 80191ce:	bd90      	pop	{r4, r7, pc}
 80191d0:	24000258 	.word	0x24000258
 80191d4:	0802a320 	.word	0x0802a320
 80191d8:	080264c4 	.word	0x080264c4
 80191dc:	080129c5 	.word	0x080129c5
 80191e0:	08028520 	.word	0x08028520

080191e4 <mg_tls_verify_cert_san>:

static int mg_tls_verify_cert_san(const uint8_t *der, size_t dersz,
                                  const char *server_name) {
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b094      	sub	sp, #80	@ 0x50
 80191e8:	af02      	add	r7, sp, #8
 80191ea:	60f8      	str	r0, [r7, #12]
 80191ec:	60b9      	str	r1, [r7, #8]
 80191ee:	607a      	str	r2, [r7, #4]
  struct mg_der_tlv root, field, name;
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 80191f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80191f4:	461a      	mov	r2, r3
 80191f6:	68b9      	ldr	r1, [r7, #8]
 80191f8:	68f8      	ldr	r0, [r7, #12]
 80191fa:	f7fd fb85 	bl	8016908 <mg_der_parse>
 80191fe:	4603      	mov	r3, r0
 8019200:	2b00      	cmp	r3, #0
 8019202:	db0a      	blt.n	801921a <mg_tls_verify_cert_san+0x36>
      mg_der_find_oid(&root, (uint8_t *) "\x55\x1d\x11", 3, &field) < 0) {
 8019204:	f107 0320 	add.w	r3, r7, #32
 8019208:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801920c:	2203      	movs	r2, #3
 801920e:	492f      	ldr	r1, [pc, #188]	@ (80192cc <mg_tls_verify_cert_san+0xe8>)
 8019210:	f7fd fc05 	bl	8016a1e <mg_der_find_oid>
 8019214:	4603      	mov	r3, r0
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 8019216:	2b00      	cmp	r3, #0
 8019218:	da10      	bge.n	801923c <mg_tls_verify_cert_san+0x58>
    MG_ERROR(("failed to parse certificate to extract SAN"));
 801921a:	4b2d      	ldr	r3, [pc, #180]	@ (80192d0 <mg_tls_verify_cert_san+0xec>)
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	2b00      	cmp	r3, #0
 8019220:	dd09      	ble.n	8019236 <mg_tls_verify_cert_san+0x52>
 8019222:	4b2c      	ldr	r3, [pc, #176]	@ (80192d4 <mg_tls_verify_cert_san+0xf0>)
 8019224:	f642 62d4 	movw	r2, #11988	@ 0x2ed4
 8019228:	492b      	ldr	r1, [pc, #172]	@ (80192d8 <mg_tls_verify_cert_san+0xf4>)
 801922a:	2001      	movs	r0, #1
 801922c:	f7f4 fd8e 	bl	800dd4c <mg_log_prefix>
 8019230:	482a      	ldr	r0, [pc, #168]	@ (80192dc <mg_tls_verify_cert_san+0xf8>)
 8019232:	f7f4 fddb 	bl	800ddec <mg_log>
    return -1;
 8019236:	f04f 33ff 	mov.w	r3, #4294967295
 801923a:	e043      	b.n	80192c4 <mg_tls_verify_cert_san+0xe0>
  }
  if (mg_der_parse(field.value, field.len, &field) < 0) {
 801923c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801923e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019240:	f107 0220 	add.w	r2, r7, #32
 8019244:	4618      	mov	r0, r3
 8019246:	f7fd fb5f 	bl	8016908 <mg_der_parse>
 801924a:	4603      	mov	r3, r0
 801924c:	2b00      	cmp	r3, #0
 801924e:	da2c      	bge.n	80192aa <mg_tls_verify_cert_san+0xc6>
    MG_ERROR(
 8019250:	4b1f      	ldr	r3, [pc, #124]	@ (80192d0 <mg_tls_verify_cert_san+0xec>)
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	2b00      	cmp	r3, #0
 8019256:	dd09      	ble.n	801926c <mg_tls_verify_cert_san+0x88>
 8019258:	4b1e      	ldr	r3, [pc, #120]	@ (80192d4 <mg_tls_verify_cert_san+0xf0>)
 801925a:	f642 62d8 	movw	r2, #11992	@ 0x2ed8
 801925e:	491e      	ldr	r1, [pc, #120]	@ (80192d8 <mg_tls_verify_cert_san+0xf4>)
 8019260:	2001      	movs	r0, #1
 8019262:	f7f4 fd73 	bl	800dd4c <mg_log_prefix>
 8019266:	481e      	ldr	r0, [pc, #120]	@ (80192e0 <mg_tls_verify_cert_san+0xfc>)
 8019268:	f7f4 fdc0 	bl	800ddec <mg_log>
        ("certificate subject alternative names is not a constructed object"));
    return -1;
 801926c:	f04f 33ff 	mov.w	r3, #4294967295
 8019270:	e028      	b.n	80192c4 <mg_tls_verify_cert_san+0xe0>
  }
  while (mg_der_next(&field, &name) > 0) {
    if (mg_match(mg_str(server_name),
 8019272:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8019276:	6879      	ldr	r1, [r7, #4]
 8019278:	4618      	mov	r0, r3
 801927a:	f7fc fd67 	bl	8015d4c <mg_str_s>
                 mg_str_n((const char *) name.value, name.len), NULL)) {
 801927e:	69f9      	ldr	r1, [r7, #28]
 8019280:	69ba      	ldr	r2, [r7, #24]
    if (mg_match(mg_str(server_name),
 8019282:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019286:	4618      	mov	r0, r3
 8019288:	f7fc fd7d 	bl	8015d86 <mg_str_n>
 801928c:	2300      	movs	r3, #0
 801928e:	9300      	str	r3, [sp, #0]
 8019290:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019294:	cb0c      	ldmia	r3, {r2, r3}
 8019296:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 801929a:	c903      	ldmia	r1, {r0, r1}
 801929c:	f7fc fe60 	bl	8015f60 <mg_match>
 80192a0:	4603      	mov	r3, r0
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d001      	beq.n	80192aa <mg_tls_verify_cert_san+0xc6>
      // Found SAN that matches the host name
      return 1;
 80192a6:	2301      	movs	r3, #1
 80192a8:	e00c      	b.n	80192c4 <mg_tls_verify_cert_san+0xe0>
  while (mg_der_next(&field, &name) > 0) {
 80192aa:	f107 0214 	add.w	r2, r7, #20
 80192ae:	f107 0320 	add.w	r3, r7, #32
 80192b2:	4611      	mov	r1, r2
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7fd fb87 	bl	80169c8 <mg_der_next>
 80192ba:	4603      	mov	r3, r0
 80192bc:	2b00      	cmp	r3, #0
 80192be:	dcd8      	bgt.n	8019272 <mg_tls_verify_cert_san+0x8e>
    }
  }
  return -1;
 80192c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80192c4:	4618      	mov	r0, r3
 80192c6:	3748      	adds	r7, #72	@ 0x48
 80192c8:	46bd      	mov	sp, r7
 80192ca:	bd80      	pop	{r7, pc}
 80192cc:	08028528 	.word	0x08028528
 80192d0:	24000258 	.word	0x24000258
 80192d4:	0802a338 	.word	0x0802a338
 80192d8:	080264c4 	.word	0x080264c4
 80192dc:	0802852c 	.word	0x0802852c
 80192e0:	08028558 	.word	0x08028558

080192e4 <mg_tls_verify_cert_signature>:

static int mg_tls_verify_cert_signature(const struct mg_tls_cert *cert,
                                        const struct mg_tls_cert *issuer) {
 80192e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80192e6:	b0db      	sub	sp, #364	@ 0x16c
 80192e8:	af04      	add	r7, sp, #16
 80192ea:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80192ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80192f2:	6018      	str	r0, [r3, #0]
 80192f4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80192f8:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80192fc:	6019      	str	r1, [r3, #0]
  if (issuer->is_ec_pubkey) {
 80192fe:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019302:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	2b00      	cmp	r3, #0
 801930c:	f000 80eb 	beq.w	80194e6 <mg_tls_verify_cert_signature+0x202>
    uint8_t sig[128];
    struct mg_der_tlv seq = {0, 0, 0}, a = {0, 0, 0}, b = {0, 0, 0};
 8019310:	2300      	movs	r3, #0
 8019312:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 8019316:	2300      	movs	r3, #0
 8019318:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 801931c:	2300      	movs	r3, #0
 801931e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8019322:	2300      	movs	r3, #0
 8019324:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 8019328:	2300      	movs	r3, #0
 801932a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801932e:	2300      	movs	r3, #0
 8019330:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8019334:	2300      	movs	r3, #0
 8019336:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 801933a:	2300      	movs	r3, #0
 801933c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8019340:	2300      	movs	r3, #0
 8019342:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    mg_der_parse((uint8_t *) cert->sig.buf, cert->sig.len, &seq);
 8019346:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801934a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	6958      	ldr	r0, [r3, #20]
 8019352:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019356:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	699b      	ldr	r3, [r3, #24]
 801935e:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 8019362:	4619      	mov	r1, r3
 8019364:	f7fd fad0 	bl	8016908 <mg_der_parse>
    mg_der_next(&seq, &a);
 8019368:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801936c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019370:	4611      	mov	r1, r2
 8019372:	4618      	mov	r0, r3
 8019374:	f7fd fb28 	bl	80169c8 <mg_der_next>
    mg_der_next(&seq, &b);
 8019378:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 801937c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8019380:	4611      	mov	r1, r2
 8019382:	4618      	mov	r0, r3
 8019384:	f7fd fb20 	bl	80169c8 <mg_der_next>
    if (a.len == 0 || b.len == 0) {
 8019388:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801938c:	2b00      	cmp	r3, #0
 801938e:	d003      	beq.n	8019398 <mg_tls_verify_cert_signature+0xb4>
 8019390:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8019394:	2b00      	cmp	r3, #0
 8019396:	d10f      	bne.n	80193b8 <mg_tls_verify_cert_signature+0xd4>
      MG_ERROR(("cert verification error"));
 8019398:	4b92      	ldr	r3, [pc, #584]	@ (80195e4 <mg_tls_verify_cert_signature+0x300>)
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	2b00      	cmp	r3, #0
 801939e:	dd09      	ble.n	80193b4 <mg_tls_verify_cert_signature+0xd0>
 80193a0:	4b91      	ldr	r3, [pc, #580]	@ (80195e8 <mg_tls_verify_cert_signature+0x304>)
 80193a2:	f642 62ef 	movw	r2, #12015	@ 0x2eef
 80193a6:	4991      	ldr	r1, [pc, #580]	@ (80195ec <mg_tls_verify_cert_signature+0x308>)
 80193a8:	2001      	movs	r0, #1
 80193aa:	f7f4 fccf 	bl	800dd4c <mg_log_prefix>
 80193ae:	4890      	ldr	r0, [pc, #576]	@ (80195f0 <mg_tls_verify_cert_signature+0x30c>)
 80193b0:	f7f4 fd1c 	bl	800ddec <mg_log>
      return 0;
 80193b4:	2300      	movs	r3, #0
 80193b6:	e110      	b.n	80195da <mg_tls_verify_cert_signature+0x2f6>
    }
    if (issuer->pubkey.len == 64) {
 80193b8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80193bc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	691b      	ldr	r3, [r3, #16]
 80193c4:	2b40      	cmp	r3, #64	@ 0x40
 80193c6:	d15f      	bne.n	8019488 <mg_tls_verify_cert_signature+0x1a4>
      const uint32_t N = 32;
 80193c8:	2320      	movs	r3, #32
 80193ca:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      if (a.len > N) a.value += (a.len - N), a.len = N;
 80193ce:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80193d2:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80193d6:	429a      	cmp	r2, r3
 80193d8:	d20d      	bcs.n	80193f6 <mg_tls_verify_cert_signature+0x112>
 80193da:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 80193de:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80193e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80193e6:	1acb      	subs	r3, r1, r3
 80193e8:	4413      	add	r3, r2
 80193ea:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80193ee:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80193f2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      if (b.len > N) b.value += (b.len - N), b.len = N;
 80193f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80193fa:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80193fe:	429a      	cmp	r2, r3
 8019400:	d20d      	bcs.n	801941e <mg_tls_verify_cert_signature+0x13a>
 8019402:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8019406:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801940a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801940e:	1acb      	subs	r3, r1, r3
 8019410:	4413      	add	r3, r2
 8019412:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8019416:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801941a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      memmove(sig, a.value, N);
 801941e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8019422:	f107 0308 	add.w	r3, r7, #8
 8019426:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801942a:	4618      	mov	r0, r3
 801942c:	f00c f994 	bl	8025758 <memmove>
      memmove(sig + N, b.value, N);
 8019430:	f107 0208 	add.w	r2, r7, #8
 8019434:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8019438:	4413      	add	r3, r2
 801943a:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 801943e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8019442:	4618      	mov	r0, r3
 8019444:	f00c f988 	bl	8025758 <memmove>
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 8019448:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801944c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019450:	681b      	ldr	r3, [r3, #0]
 8019452:	68dc      	ldr	r4, [r3, #12]
 8019454:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019458:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	f103 051c 	add.w	r5, r3, #28
                            (unsigned) cert->tbshashsz, sig,
 8019462:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019466:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 801946e:	f005 fba7 	bl	801ebc0 <mg_uecc_secp256r1>
 8019472:	4602      	mov	r2, r0
 8019474:	f107 0308 	add.w	r3, r7, #8
 8019478:	9200      	str	r2, [sp, #0]
 801947a:	4632      	mov	r2, r6
 801947c:	4629      	mov	r1, r5
 801947e:	4620      	mov	r0, r4
 8019480:	f006 fd3a 	bl	801fef8 <mg_uecc_verify>
 8019484:	4603      	mov	r3, r0
 8019486:	e0a8      	b.n	80195da <mg_tls_verify_cert_signature+0x2f6>
                            mg_uecc_secp256r1());
    } else if (issuer->pubkey.len == 96) {
 8019488:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801948c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	691b      	ldr	r3, [r3, #16]
 8019494:	2b60      	cmp	r3, #96	@ 0x60
 8019496:	d10f      	bne.n	80194b8 <mg_tls_verify_cert_signature+0x1d4>
      MG_DEBUG(("ignore secp386 for now"));
 8019498:	4b52      	ldr	r3, [pc, #328]	@ (80195e4 <mg_tls_verify_cert_signature+0x300>)
 801949a:	681b      	ldr	r3, [r3, #0]
 801949c:	2b02      	cmp	r3, #2
 801949e:	dd09      	ble.n	80194b4 <mg_tls_verify_cert_signature+0x1d0>
 80194a0:	4b51      	ldr	r3, [pc, #324]	@ (80195e8 <mg_tls_verify_cert_signature+0x304>)
 80194a2:	f642 62fc 	movw	r2, #12028	@ 0x2efc
 80194a6:	4951      	ldr	r1, [pc, #324]	@ (80195ec <mg_tls_verify_cert_signature+0x308>)
 80194a8:	2003      	movs	r0, #3
 80194aa:	f7f4 fc4f 	bl	800dd4c <mg_log_prefix>
 80194ae:	4851      	ldr	r0, [pc, #324]	@ (80195f4 <mg_tls_verify_cert_signature+0x310>)
 80194b0:	f7f4 fc9c 	bl	800ddec <mg_log>
      return 1;
 80194b4:	2301      	movs	r3, #1
 80194b6:	e090      	b.n	80195da <mg_tls_verify_cert_signature+0x2f6>
    } else {
      MG_ERROR(("unsupported public key length: %d", issuer->pubkey.len));
 80194b8:	4b4a      	ldr	r3, [pc, #296]	@ (80195e4 <mg_tls_verify_cert_signature+0x300>)
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	dd10      	ble.n	80194e2 <mg_tls_verify_cert_signature+0x1fe>
 80194c0:	4b49      	ldr	r3, [pc, #292]	@ (80195e8 <mg_tls_verify_cert_signature+0x304>)
 80194c2:	f642 62ff 	movw	r2, #12031	@ 0x2eff
 80194c6:	4949      	ldr	r1, [pc, #292]	@ (80195ec <mg_tls_verify_cert_signature+0x308>)
 80194c8:	2001      	movs	r0, #1
 80194ca:	f7f4 fc3f 	bl	800dd4c <mg_log_prefix>
 80194ce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80194d2:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	691b      	ldr	r3, [r3, #16]
 80194da:	4619      	mov	r1, r3
 80194dc:	4846      	ldr	r0, [pc, #280]	@ (80195f8 <mg_tls_verify_cert_signature+0x314>)
 80194de:	f7f4 fc85 	bl	800ddec <mg_log>
      return 0;
 80194e2:	2300      	movs	r3, #0
 80194e4:	e079      	b.n	80195da <mg_tls_verify_cert_signature+0x2f6>
    }
  } else {
    int r;
    uint8_t sig2[256];  // 2048 bits
    struct mg_der_tlv seq, modulus, exponent;
    if (mg_der_parse((uint8_t *) issuer->pubkey.buf, issuer->pubkey.len,
 80194e6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80194ea:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	68d8      	ldr	r0, [r3, #12]
 80194f2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80194f6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	691b      	ldr	r3, [r3, #16]
 80194fe:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8019502:	4619      	mov	r1, r3
 8019504:	f7fd fa00 	bl	8016908 <mg_der_parse>
 8019508:	4603      	mov	r3, r0
 801950a:	2b00      	cmp	r3, #0
 801950c:	dd1d      	ble.n	801954a <mg_tls_verify_cert_signature+0x266>
                     &seq) <= 0 ||
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801950e:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8019512:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8019516:	4611      	mov	r1, r2
 8019518:	4618      	mov	r0, r3
 801951a:	f7fd fa55 	bl	80169c8 <mg_der_next>
 801951e:	4603      	mov	r3, r0
                     &seq) <= 0 ||
 8019520:	2b00      	cmp	r3, #0
 8019522:	dd12      	ble.n	801954a <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8019524:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8019528:	2b02      	cmp	r3, #2
 801952a:	d10e      	bne.n	801954a <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801952c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8019530:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8019534:	4611      	mov	r1, r2
 8019536:	4618      	mov	r0, r3
 8019538:	f7fd fa46 	bl	80169c8 <mg_der_next>
 801953c:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801953e:	2b00      	cmp	r3, #0
 8019540:	dd03      	ble.n	801954a <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8019542:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8019546:	2b02      	cmp	r3, #2
 8019548:	d002      	beq.n	8019550 <mg_tls_verify_cert_signature+0x26c>
      return -1;
 801954a:	f04f 33ff 	mov.w	r3, #4294967295
 801954e:	e044      	b.n	80195da <mg_tls_verify_cert_signature+0x2f6>
    }
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 8019550:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8019554:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8019558:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
 801955c:	f8d7 610c 	ldr.w	r6, [r7, #268]	@ 0x10c
                   (uint8_t *) cert->sig.buf, cert->sig.len, sig2,
 8019560:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019564:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	695b      	ldr	r3, [r3, #20]
 801956c:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8019570:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 8019574:	6812      	ldr	r2, [r2, #0]
 8019576:	6992      	ldr	r2, [r2, #24]
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 8019578:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801957c:	9103      	str	r1, [sp, #12]
 801957e:	f107 0108 	add.w	r1, r7, #8
 8019582:	9102      	str	r1, [sp, #8]
 8019584:	9201      	str	r2, [sp, #4]
 8019586:	9300      	str	r3, [sp, #0]
 8019588:	4633      	mov	r3, r6
 801958a:	462a      	mov	r2, r5
 801958c:	4621      	mov	r1, r4
 801958e:	f004 fae8 	bl	801db62 <mg_rsa_mod_pow>
                   sizeof(sig2));

    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 8019592:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8019596:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801959e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80195a2:	f107 0208 	add.w	r2, r7, #8
 80195a6:	18d0      	adds	r0, r2, r3
 80195a8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80195ac:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	f103 011c 	add.w	r1, r3, #28
               cert->tbshashsz);
 80195b6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80195ba:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 80195c2:	461a      	mov	r2, r3
 80195c4:	f00c f8b8 	bl	8025738 <memcmp>
 80195c8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    return r == 0;
 80195cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	bf0c      	ite	eq
 80195d4:	2301      	moveq	r3, #1
 80195d6:	2300      	movne	r3, #0
 80195d8:	b2db      	uxtb	r3, r3
  }
}
 80195da:	4618      	mov	r0, r3
 80195dc:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 80195e0:	46bd      	mov	sp, r7
 80195e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195e4:	24000258 	.word	0x24000258
 80195e8:	0802a350 	.word	0x0802a350
 80195ec:	080264c4 	.word	0x080264c4
 80195f0:	0802859c 	.word	0x0802859c
 80195f4:	080285b4 	.word	0x080285b4
 80195f8:	080285cc 	.word	0x080285cc

080195fc <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 80195fc:	b580      	push	{r7, lr}
 80195fe:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 8019602:	af00      	add	r7, sp, #0
 8019604:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019608:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801960c:	6018      	str	r0, [r3, #0]
  int subj_match = 0;
 801960e:	2300      	movs	r3, #0
 8019610:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019614:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019618:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019622:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
  unsigned char *recv_buf;
  (void) subj_match;

  if (mg_tls_recv_record(c) < 0) {
 8019626:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801962a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801962e:	6818      	ldr	r0, [r3, #0]
 8019630:	f7fd ff30 	bl	8017494 <mg_tls_recv_record>
 8019634:	4603      	mov	r3, r0
 8019636:	2b00      	cmp	r3, #0
 8019638:	da02      	bge.n	8019640 <mg_tls_client_recv_cert+0x44>
    return -1;
 801963a:	f04f 33ff 	mov.w	r3, #4294967295
 801963e:	e24a      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
  }

  recv_buf = &c->rtls.buf[tls->recv_offset];
 8019640:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019644:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8019648:	681b      	ldr	r3, [r3, #0]
 801964a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801964c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8019650:	695b      	ldr	r3, [r3, #20]
 8019652:	4413      	add	r3, r2
 8019654:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 8019658:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801965c:	781b      	ldrb	r3, [r3, #0]
 801965e:	2b0d      	cmp	r3, #13
 8019660:	d11c      	bne.n	801969c <mg_tls_client_recv_cert+0xa0>
    MG_VERBOSE(("got certificate request"));
 8019662:	4bcb      	ldr	r3, [pc, #812]	@ (8019990 <mg_tls_client_recv_cert+0x394>)
 8019664:	681b      	ldr	r3, [r3, #0]
 8019666:	2b03      	cmp	r3, #3
 8019668:	dd09      	ble.n	801967e <mg_tls_client_recv_cert+0x82>
 801966a:	4bca      	ldr	r3, [pc, #808]	@ (8019994 <mg_tls_client_recv_cert+0x398>)
 801966c:	f642 7223 	movw	r2, #12067	@ 0x2f23
 8019670:	49c9      	ldr	r1, [pc, #804]	@ (8019998 <mg_tls_client_recv_cert+0x39c>)
 8019672:	2004      	movs	r0, #4
 8019674:	f7f4 fb6a 	bl	800dd4c <mg_log_prefix>
 8019678:	48c8      	ldr	r0, [pc, #800]	@ (801999c <mg_tls_client_recv_cert+0x3a0>)
 801967a:	f7f4 fbb7 	bl	800ddec <mg_log>
    mg_tls_drop_message(c);
 801967e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019682:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8019686:	6818      	ldr	r0, [r3, #0]
 8019688:	f7fd fab8 	bl	8016bfc <mg_tls_drop_message>
    tls->cert_requested = 1;
 801968c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8019690:	2201      	movs	r2, #1
 8019692:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 8019696:	f04f 33ff 	mov.w	r3, #4294967295
 801969a:	e21c      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
  }

  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 801969c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80196a0:	781b      	ldrb	r3, [r3, #0]
 80196a2:	2b0b      	cmp	r3, #11
 80196a4:	d00e      	beq.n	80196c4 <mg_tls_client_recv_cert+0xc8>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 80196a6:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80196aa:	781b      	ldrb	r3, [r3, #0]
 80196ac:	461a      	mov	r2, r3
 80196ae:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80196b2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80196b6:	49ba      	ldr	r1, [pc, #744]	@ (80199a0 <mg_tls_client_recv_cert+0x3a4>)
 80196b8:	6818      	ldr	r0, [r3, #0]
 80196ba:	f7ee fe1b 	bl	80082f4 <mg_error>
    return -1;
 80196be:	f04f 33ff 	mov.w	r3, #4294967295
 80196c2:	e208      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
  }

  if (tls->recv_len < 11) {
 80196c4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80196c8:	699b      	ldr	r3, [r3, #24]
 80196ca:	2b0a      	cmp	r3, #10
 80196cc:	d80a      	bhi.n	80196e4 <mg_tls_client_recv_cert+0xe8>
    mg_error(c, "certificate list too short");
 80196ce:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80196d2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80196d6:	49b3      	ldr	r1, [pc, #716]	@ (80199a4 <mg_tls_client_recv_cert+0x3a8>)
 80196d8:	6818      	ldr	r0, [r3, #0]
 80196da:	f7ee fe0b 	bl	80082f4 <mg_error>
    return -1;
 80196de:	f04f 33ff 	mov.w	r3, #4294967295
 80196e2:	e1f8      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
  }

  uint32_t full_cert_chain_len = MG_LOAD_BE24(recv_buf + 1);
 80196e4:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80196e8:	3301      	adds	r3, #1
 80196ea:	781b      	ldrb	r3, [r3, #0]
 80196ec:	041a      	lsls	r2, r3, #16
 80196ee:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80196f2:	3302      	adds	r3, #2
 80196f4:	781b      	ldrb	r3, [r3, #0]
 80196f6:	021b      	lsls	r3, r3, #8
 80196f8:	4313      	orrs	r3, r2
 80196fa:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 80196fe:	3203      	adds	r2, #3
 8019700:	7812      	ldrb	r2, [r2, #0]
 8019702:	4313      	orrs	r3, r2
 8019704:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  uint32_t cert_chain_len = MG_LOAD_BE24(recv_buf + 5);
 8019708:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801970c:	3305      	adds	r3, #5
 801970e:	781b      	ldrb	r3, [r3, #0]
 8019710:	041a      	lsls	r2, r3, #16
 8019712:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8019716:	3306      	adds	r3, #6
 8019718:	781b      	ldrb	r3, [r3, #0]
 801971a:	021b      	lsls	r3, r3, #8
 801971c:	4313      	orrs	r3, r2
 801971e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8019722:	3207      	adds	r2, #7
 8019724:	7812      	ldrb	r2, [r2, #0]
 8019726:	4313      	orrs	r3, r2
 8019728:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
  if (cert_chain_len != full_cert_chain_len - 4) {
 801972c:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8019730:	3b04      	subs	r3, #4
 8019732:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8019736:	429a      	cmp	r2, r3
 8019738:	d01c      	beq.n	8019774 <mg_tls_client_recv_cert+0x178>
    MG_ERROR(("full chain length: %d, chain length: %d", full_cert_chain_len,
 801973a:	4b95      	ldr	r3, [pc, #596]	@ (8019990 <mg_tls_client_recv_cert+0x394>)
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	2b00      	cmp	r3, #0
 8019740:	dd0d      	ble.n	801975e <mg_tls_client_recv_cert+0x162>
 8019742:	4b94      	ldr	r3, [pc, #592]	@ (8019994 <mg_tls_client_recv_cert+0x398>)
 8019744:	f642 7236 	movw	r2, #12086	@ 0x2f36
 8019748:	4993      	ldr	r1, [pc, #588]	@ (8019998 <mg_tls_client_recv_cert+0x39c>)
 801974a:	2001      	movs	r0, #1
 801974c:	f7f4 fafe 	bl	800dd4c <mg_log_prefix>
 8019750:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8019754:	f8d7 12f4 	ldr.w	r1, [r7, #756]	@ 0x2f4
 8019758:	4893      	ldr	r0, [pc, #588]	@ (80199a8 <mg_tls_client_recv_cert+0x3ac>)
 801975a:	f7f4 fb47 	bl	800ddec <mg_log>
              cert_chain_len));
    mg_error(c, "certificate chain length mismatch");
 801975e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019762:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8019766:	4991      	ldr	r1, [pc, #580]	@ (80199ac <mg_tls_client_recv_cert+0x3b0>)
 8019768:	6818      	ldr	r0, [r3, #0]
 801976a:	f7ee fdc3 	bl	80082f4 <mg_error>
    return -1;
 801976e:	f04f 33ff 	mov.w	r3, #4294967295
 8019772:	e1b0      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
  }

  // Normally, there are 2-3 certs in a chain
  struct mg_tls_cert certs[8];
  int certnum = 0;
 8019774:	2300      	movs	r3, #0
 8019776:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  uint8_t *p = recv_buf + 8;
 801977a:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801977e:	3308      	adds	r3, #8
 8019780:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  // uint8_t *endp = recv_buf + tls->recv_len;
  uint8_t *endp = recv_buf + cert_chain_len;
 8019784:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8019788:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801978c:	4413      	add	r3, r2
 801978e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec

  int found_ca = 0;
 8019792:	2300      	movs	r3, #0
 8019794:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
  struct mg_tls_cert ca;

  memset(certs, 0, sizeof(certs));
 8019798:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801979c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80197a0:	2100      	movs	r1, #0
 80197a2:	4618      	mov	r0, r3
 80197a4:	f00b fff2 	bl	802578c <memset>
  memset(&ca, 0, sizeof(ca));
 80197a8:	f107 030c 	add.w	r3, r7, #12
 80197ac:	2250      	movs	r2, #80	@ 0x50
 80197ae:	2100      	movs	r1, #0
 80197b0:	4618      	mov	r0, r3
 80197b2:	f00b ffeb 	bl	802578c <memset>

  if (tls->ca_der.len > 0) {
 80197b6:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80197ba:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80197be:	2b00      	cmp	r3, #0
 80197c0:	f000 8134 	beq.w	8019a2c <mg_tls_client_recv_cert+0x430>
    if (mg_tls_parse_cert_der(tls->ca_der.buf, tls->ca_der.len, &ca) < 0) {
 80197c4:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80197c8:	f8d3 0120 	ldr.w	r0, [r3, #288]	@ 0x120
 80197cc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80197d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80197d4:	f107 020c 	add.w	r2, r7, #12
 80197d8:	4619      	mov	r1, r3
 80197da:	f7ff f94f 	bl	8018a7c <mg_tls_parse_cert_der>
 80197de:	4603      	mov	r3, r0
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	da0a      	bge.n	80197fa <mg_tls_client_recv_cert+0x1fe>
      mg_error(c, "failed to parse CA certificate");
 80197e4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80197e8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80197ec:	4970      	ldr	r1, [pc, #448]	@ (80199b0 <mg_tls_client_recv_cert+0x3b4>)
 80197ee:	6818      	ldr	r0, [r3, #0]
 80197f0:	f7ee fd80 	bl	80082f4 <mg_error>
      return -1;
 80197f4:	f04f 33ff 	mov.w	r3, #4294967295
 80197f8:	e16d      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
    }
    MG_VERBOSE(("CA serial: %M", mg_print_hex, ca.sn.len, ca.sn.buf));
 80197fa:	4b65      	ldr	r3, [pc, #404]	@ (8019990 <mg_tls_client_recv_cert+0x394>)
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	2b03      	cmp	r3, #3
 8019800:	f340 8114 	ble.w	8019a2c <mg_tls_client_recv_cert+0x430>
 8019804:	4b63      	ldr	r3, [pc, #396]	@ (8019994 <mg_tls_client_recv_cert+0x398>)
 8019806:	f642 724e 	movw	r2, #12110	@ 0x2f4e
 801980a:	4963      	ldr	r1, [pc, #396]	@ (8019998 <mg_tls_client_recv_cert+0x39c>)
 801980c:	2004      	movs	r0, #4
 801980e:	f7f4 fa9d 	bl	800dd4c <mg_log_prefix>
 8019812:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019816:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 801981a:	689a      	ldr	r2, [r3, #8]
 801981c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019820:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8019824:	685b      	ldr	r3, [r3, #4]
 8019826:	4963      	ldr	r1, [pc, #396]	@ (80199b4 <mg_tls_client_recv_cert+0x3b8>)
 8019828:	4863      	ldr	r0, [pc, #396]	@ (80199b8 <mg_tls_client_recv_cert+0x3bc>)
 801982a:	f7f4 fadf 	bl	800ddec <mg_log>
  }

  while (p < endp) {
 801982e:	e0fd      	b.n	8019a2c <mg_tls_client_recv_cert+0x430>
    struct mg_tls_cert *ci = &certs[certnum++];
 8019830:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8019834:	1c53      	adds	r3, r2, #1
 8019836:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801983a:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801983e:	4613      	mov	r3, r2
 8019840:	009b      	lsls	r3, r3, #2
 8019842:	4413      	add	r3, r2
 8019844:	011b      	lsls	r3, r3, #4
 8019846:	440b      	add	r3, r1
 8019848:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
    uint32_t certsz = MG_LOAD_BE24(p);
 801984c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8019850:	781b      	ldrb	r3, [r3, #0]
 8019852:	041a      	lsls	r2, r3, #16
 8019854:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8019858:	3301      	adds	r3, #1
 801985a:	781b      	ldrb	r3, [r3, #0]
 801985c:	021b      	lsls	r3, r3, #8
 801985e:	4313      	orrs	r3, r2
 8019860:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8019864:	3202      	adds	r2, #2
 8019866:	7812      	ldrb	r2, [r2, #0]
 8019868:	4313      	orrs	r3, r2
 801986a:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
    uint8_t *cert = p + 3;
 801986e:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8019872:	3303      	adds	r3, #3
 8019874:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    uint16_t certext = MG_LOAD_BE16(cert + certsz);
 8019878:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801987c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8019880:	4413      	add	r3, r2
 8019882:	781b      	ldrb	r3, [r3, #0]
 8019884:	b21b      	sxth	r3, r3
 8019886:	021b      	lsls	r3, r3, #8
 8019888:	b21a      	sxth	r2, r3
 801988a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 801988e:	3301      	adds	r3, #1
 8019890:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 8019894:	440b      	add	r3, r1
 8019896:	781b      	ldrb	r3, [r3, #0]
 8019898:	b21b      	sxth	r3, r3
 801989a:	4313      	orrs	r3, r2
 801989c:	b21b      	sxth	r3, r3
 801989e:	f8a7 32de 	strh.w	r3, [r7, #734]	@ 0x2de
    if (certext != 0) {
 80198a2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	@ 0x2de
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d00a      	beq.n	80198c0 <mg_tls_client_recv_cert+0x2c4>
      mg_error(c, "certificate extensions are not supported");
 80198aa:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80198ae:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80198b2:	4942      	ldr	r1, [pc, #264]	@ (80199bc <mg_tls_client_recv_cert+0x3c0>)
 80198b4:	6818      	ldr	r0, [r3, #0]
 80198b6:	f7ee fd1d 	bl	80082f4 <mg_error>
      return -1;
 80198ba:	f04f 33ff 	mov.w	r3, #4294967295
 80198be:	e10a      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
    }
    p = cert + certsz + 2;
 80198c0:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 80198c4:	3302      	adds	r3, #2
 80198c6:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 80198ca:	4413      	add	r3, r2
 80198cc:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

    if (mg_tls_parse_cert_der(cert, certsz, ci) < 0) {
 80198d0:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 80198d4:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 80198d8:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 80198dc:	f7ff f8ce 	bl	8018a7c <mg_tls_parse_cert_der>
 80198e0:	4603      	mov	r3, r0
 80198e2:	2b00      	cmp	r3, #0
 80198e4:	da0a      	bge.n	80198fc <mg_tls_client_recv_cert+0x300>
      mg_error(c, "failed to parse certificate");
 80198e6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80198ea:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80198ee:	4934      	ldr	r1, [pc, #208]	@ (80199c0 <mg_tls_client_recv_cert+0x3c4>)
 80198f0:	6818      	ldr	r0, [r3, #0]
 80198f2:	f7ee fcff 	bl	80082f4 <mg_error>
      return -1;
 80198f6:	f04f 33ff 	mov.w	r3, #4294967295
 80198fa:	e0ec      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
    }

    if (ci == certs) {
 80198fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8019900:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 8019904:	429a      	cmp	r2, r3
 8019906:	d12d      	bne.n	8019964 <mg_tls_client_recv_cert+0x368>
      // First certificate in the chain is peer cert, check SAN and store
      // public key for further CertVerify step
      if (mg_tls_verify_cert_san(cert, certsz, tls->hostname) <= 0) {
 8019908:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801990c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8019910:	461a      	mov	r2, r3
 8019912:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 8019916:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 801991a:	f7ff fc63 	bl	80191e4 <mg_tls_verify_cert_san>
 801991e:	4603      	mov	r3, r0
 8019920:	2b00      	cmp	r3, #0
 8019922:	dc0a      	bgt.n	801993a <mg_tls_client_recv_cert+0x33e>
        mg_error(c, "failed to verify hostname");
 8019924:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019928:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801992c:	4925      	ldr	r1, [pc, #148]	@ (80199c4 <mg_tls_client_recv_cert+0x3c8>)
 801992e:	6818      	ldr	r0, [r3, #0]
 8019930:	f7ee fce0 	bl	80082f4 <mg_error>
        return -1;
 8019934:	f04f 33ff 	mov.w	r3, #4294967295
 8019938:	e0cd      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
      }
      memmove(tls->pubkey, ci->pubkey.buf, ci->pubkey.len);
 801993a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801993e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8019942:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8019946:	68d9      	ldr	r1, [r3, #12]
 8019948:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801994c:	691b      	ldr	r3, [r3, #16]
 801994e:	461a      	mov	r2, r3
 8019950:	f00b ff02 	bl	8025758 <memmove>
      tls->pubkeysz = ci->pubkey.len;
 8019954:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8019958:	691a      	ldr	r2, [r3, #16]
 801995a:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801995e:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
 8019962:	e033      	b.n	80199cc <mg_tls_client_recv_cert+0x3d0>
    } else {
      if (!mg_tls_verify_cert_signature(ci - 1, ci)) {
 8019964:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8019968:	3b50      	subs	r3, #80	@ 0x50
 801996a:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 801996e:	4618      	mov	r0, r3
 8019970:	f7ff fcb8 	bl	80192e4 <mg_tls_verify_cert_signature>
 8019974:	4603      	mov	r3, r0
 8019976:	2b00      	cmp	r3, #0
 8019978:	d128      	bne.n	80199cc <mg_tls_client_recv_cert+0x3d0>
        mg_error(c, "failed to verify certificate chain");
 801997a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 801997e:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8019982:	4911      	ldr	r1, [pc, #68]	@ (80199c8 <mg_tls_client_recv_cert+0x3cc>)
 8019984:	6818      	ldr	r0, [r3, #0]
 8019986:	f7ee fcb5 	bl	80082f4 <mg_error>
        return -1;
 801998a:	f04f 33ff 	mov.w	r3, #4294967295
 801998e:	e0a2      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
 8019990:	24000258 	.word	0x24000258
 8019994:	0802a370 	.word	0x0802a370
 8019998:	080264c4 	.word	0x080264c4
 801999c:	080285f0 	.word	0x080285f0
 80199a0:	08028608 	.word	0x08028608
 80199a4:	08028638 	.word	0x08028638
 80199a8:	08028654 	.word	0x08028654
 80199ac:	0802867c 	.word	0x0802867c
 80199b0:	080286a0 	.word	0x080286a0
 80199b4:	080129c5 	.word	0x080129c5
 80199b8:	080286c0 	.word	0x080286c0
 80199bc:	080286d0 	.word	0x080286d0
 80199c0:	080286fc 	.word	0x080286fc
 80199c4:	08028718 	.word	0x08028718
 80199c8:	08028734 	.word	0x08028734
      }
    }

    if (ca.pubkey.len == ci->pubkey.len &&
 80199cc:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80199d0:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80199d4:	691a      	ldr	r2, [r3, #16]
 80199d6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80199da:	691b      	ldr	r3, [r3, #16]
 80199dc:	429a      	cmp	r2, r3
 80199de:	d116      	bne.n	8019a0e <mg_tls_client_recv_cert+0x412>
        memcmp(ca.pubkey.buf, ci->pubkey.buf, ca.pubkey.len) == 0) {
 80199e0:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80199e4:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80199e8:	68d8      	ldr	r0, [r3, #12]
 80199ea:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 80199ee:	68d9      	ldr	r1, [r3, #12]
 80199f0:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80199f4:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 80199f8:	691b      	ldr	r3, [r3, #16]
 80199fa:	461a      	mov	r2, r3
 80199fc:	f00b fe9c 	bl	8025738 <memcmp>
 8019a00:	4603      	mov	r3, r0
    if (ca.pubkey.len == ci->pubkey.len &&
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d103      	bne.n	8019a0e <mg_tls_client_recv_cert+0x412>
      found_ca = 1;
 8019a06:	2301      	movs	r3, #1
 8019a08:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      break;
 8019a0c:	e015      	b.n	8019a3a <mg_tls_client_recv_cert+0x43e>
    }

    if (certnum == sizeof(certs) / sizeof(certs[0]) - 1) {
 8019a0e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8019a12:	2b07      	cmp	r3, #7
 8019a14:	d10a      	bne.n	8019a2c <mg_tls_client_recv_cert+0x430>
      mg_error(c, "too many certificates in the chain");
 8019a16:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019a1a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8019a1e:	4930      	ldr	r1, [pc, #192]	@ (8019ae0 <mg_tls_client_recv_cert+0x4e4>)
 8019a20:	6818      	ldr	r0, [r3, #0]
 8019a22:	f7ee fc67 	bl	80082f4 <mg_error>
      return -1;
 8019a26:	f04f 33ff 	mov.w	r3, #4294967295
 8019a2a:	e054      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
  while (p < endp) {
 8019a2c:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8019a30:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8019a34:	429a      	cmp	r2, r3
 8019a36:	f4ff aefb 	bcc.w	8019830 <mg_tls_client_recv_cert+0x234>
    }
  }

  if (!found_ca && tls->ca_der.len > 0) {
 8019a3a:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d135      	bne.n	8019aae <mg_tls_client_recv_cert+0x4b2>
 8019a42:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8019a46:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d02f      	beq.n	8019aae <mg_tls_client_recv_cert+0x4b2>
    if (certnum < 1 ||
 8019a4e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	dd12      	ble.n	8019a7c <mg_tls_client_recv_cert+0x480>
        !mg_tls_verify_cert_signature(&certs[certnum - 1], &ca)) {
 8019a56:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8019a5a:	1e5a      	subs	r2, r3, #1
 8019a5c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8019a60:	4613      	mov	r3, r2
 8019a62:	009b      	lsls	r3, r3, #2
 8019a64:	4413      	add	r3, r2
 8019a66:	011b      	lsls	r3, r3, #4
 8019a68:	440b      	add	r3, r1
 8019a6a:	f107 020c 	add.w	r2, r7, #12
 8019a6e:	4611      	mov	r1, r2
 8019a70:	4618      	mov	r0, r3
 8019a72:	f7ff fc37 	bl	80192e4 <mg_tls_verify_cert_signature>
 8019a76:	4603      	mov	r3, r0
    if (certnum < 1 ||
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d10a      	bne.n	8019a92 <mg_tls_client_recv_cert+0x496>
      mg_error(c, "failed to verify CA");
 8019a7c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019a80:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8019a84:	4917      	ldr	r1, [pc, #92]	@ (8019ae4 <mg_tls_client_recv_cert+0x4e8>)
 8019a86:	6818      	ldr	r0, [r3, #0]
 8019a88:	f7ee fc34 	bl	80082f4 <mg_error>
      return -1;
 8019a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019a90:	e021      	b.n	8019ad6 <mg_tls_client_recv_cert+0x4da>
    } else {
      MG_VERBOSE(
 8019a92:	4b15      	ldr	r3, [pc, #84]	@ (8019ae8 <mg_tls_client_recv_cert+0x4ec>)
 8019a94:	681b      	ldr	r3, [r3, #0]
 8019a96:	2b03      	cmp	r3, #3
 8019a98:	dd09      	ble.n	8019aae <mg_tls_client_recv_cert+0x4b2>
 8019a9a:	4b14      	ldr	r3, [pc, #80]	@ (8019aec <mg_tls_client_recv_cert+0x4f0>)
 8019a9c:	f642 7283 	movw	r2, #12163	@ 0x2f83
 8019aa0:	4913      	ldr	r1, [pc, #76]	@ (8019af0 <mg_tls_client_recv_cert+0x4f4>)
 8019aa2:	2004      	movs	r0, #4
 8019aa4:	f7f4 f952 	bl	800dd4c <mg_log_prefix>
 8019aa8:	4812      	ldr	r0, [pc, #72]	@ (8019af4 <mg_tls_client_recv_cert+0x4f8>)
 8019aaa:	f7f4 f99f 	bl	800ddec <mg_log>
          ("CA was not in the chain, but verification with builtin CA passed"));
    }
  }

  mg_tls_drop_message(c);
 8019aae:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019ab2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8019ab6:	6818      	ldr	r0, [r3, #0]
 8019ab8:	f7fd f8a0 	bl	8016bfc <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 8019abc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8019ac0:	f503 618c 	add.w	r1, r3, #1120	@ 0x460
 8019ac4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8019ac8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8019acc:	2200      	movs	r2, #0
 8019ace:	6818      	ldr	r0, [r3, #0]
 8019ad0:	f7fd fdfc 	bl	80176cc <mg_tls_calc_cert_verify_hash>
  return 0;
 8019ad4:	2300      	movs	r3, #0
}
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 8019adc:	46bd      	mov	sp, r7
 8019ade:	bd80      	pop	{r7, pc}
 8019ae0:	08028758 	.word	0x08028758
 8019ae4:	0802877c 	.word	0x0802877c
 8019ae8:	24000258 	.word	0x24000258
 8019aec:	0802a370 	.word	0x0802a370
 8019af0:	080264c4 	.word	0x080264c4
 8019af4:	08028790 	.word	0x08028790

08019af8 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 8019af8:	b5b0      	push	{r4, r5, r7, lr}
 8019afa:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8019afe:	af04      	add	r7, sp, #16
 8019b00:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019b04:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019b08:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019b0a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019b0e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019b18:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8019b1c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019b20:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019b24:	6818      	ldr	r0, [r3, #0]
 8019b26:	f7fd fcb5 	bl	8017494 <mg_tls_recv_record>
 8019b2a:	4603      	mov	r3, r0
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	da02      	bge.n	8019b36 <mg_tls_client_recv_cert_verify+0x3e>
    return -1;
 8019b30:	f04f 33ff 	mov.w	r3, #4294967295
 8019b34:	e1f9      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8019b36:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019b3a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8019b42:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019b46:	695b      	ldr	r3, [r3, #20]
 8019b48:	4413      	add	r3, r2
 8019b4a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 8019b4e:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019b52:	781b      	ldrb	r3, [r3, #0]
 8019b54:	2b0f      	cmp	r3, #15
 8019b56:	d00e      	beq.n	8019b76 <mg_tls_client_recv_cert_verify+0x7e>
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
             recv_buf[0]);
 8019b58:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019b5c:	781b      	ldrb	r3, [r3, #0]
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
 8019b5e:	461a      	mov	r2, r3
 8019b60:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019b64:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019b68:	49cb      	ldr	r1, [pc, #812]	@ (8019e98 <mg_tls_client_recv_cert_verify+0x3a0>)
 8019b6a:	6818      	ldr	r0, [r3, #0]
 8019b6c:	f7ee fbc2 	bl	80082f4 <mg_error>
    return -1;
 8019b70:	f04f 33ff 	mov.w	r3, #4294967295
 8019b74:	e1d9      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
  }
  if (tls->recv_len < 8) {
 8019b76:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019b7a:	699b      	ldr	r3, [r3, #24]
 8019b7c:	2b07      	cmp	r3, #7
 8019b7e:	d80d      	bhi.n	8019b9c <mg_tls_client_recv_cert_verify+0xa4>
    mg_error(c, "server certificate verify is too short: %d bytes",
 8019b80:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019b84:	699a      	ldr	r2, [r3, #24]
 8019b86:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019b8a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019b8e:	49c3      	ldr	r1, [pc, #780]	@ (8019e9c <mg_tls_client_recv_cert_verify+0x3a4>)
 8019b90:	6818      	ldr	r0, [r3, #0]
 8019b92:	f7ee fbaf 	bl	80082f4 <mg_error>
             tls->recv_len);
    return -1;
 8019b96:	f04f 33ff 	mov.w	r3, #4294967295
 8019b9a:	e1c6      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
  }

  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 8019b9c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019ba0:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d008      	beq.n	8019bba <mg_tls_client_recv_cert_verify+0xc2>
    mg_tls_drop_message(c);
 8019ba8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019bac:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019bb0:	6818      	ldr	r0, [r3, #0]
 8019bb2:	f7fd f823 	bl	8016bfc <mg_tls_drop_message>
    return 0;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	e1b7      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
  }

  uint16_t sigalg = MG_LOAD_BE16(recv_buf + 4);
 8019bba:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019bbe:	3304      	adds	r3, #4
 8019bc0:	781b      	ldrb	r3, [r3, #0]
 8019bc2:	b21b      	sxth	r3, r3
 8019bc4:	021b      	lsls	r3, r3, #8
 8019bc6:	b21a      	sxth	r2, r3
 8019bc8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019bcc:	3305      	adds	r3, #5
 8019bce:	781b      	ldrb	r3, [r3, #0]
 8019bd0:	b21b      	sxth	r3, r3
 8019bd2:	4313      	orrs	r3, r2
 8019bd4:	b21b      	sxth	r3, r3
 8019bd6:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
  uint16_t siglen = MG_LOAD_BE16(recv_buf + 6);
 8019bda:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019bde:	3306      	adds	r3, #6
 8019be0:	781b      	ldrb	r3, [r3, #0]
 8019be2:	b21b      	sxth	r3, r3
 8019be4:	021b      	lsls	r3, r3, #8
 8019be6:	b21a      	sxth	r2, r3
 8019be8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019bec:	3307      	adds	r3, #7
 8019bee:	781b      	ldrb	r3, [r3, #0]
 8019bf0:	b21b      	sxth	r3, r3
 8019bf2:	4313      	orrs	r3, r2
 8019bf4:	b21b      	sxth	r3, r3
 8019bf6:	f8a7 3254 	strh.w	r3, [r7, #596]	@ 0x254
  uint8_t *sigbuf = recv_buf + 8;
 8019bfa:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8019bfe:	3308      	adds	r3, #8
 8019c00:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  if (siglen > tls->recv_len - 8) {
 8019c04:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8019c08:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019c0c:	699b      	ldr	r3, [r3, #24]
 8019c0e:	3b08      	subs	r3, #8
 8019c10:	429a      	cmp	r2, r3
 8019c12:	d910      	bls.n	8019c36 <mg_tls_client_recv_cert_verify+0x13e>
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 8019c14:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
             tls->recv_len - 8);
 8019c18:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019c1c:	699b      	ldr	r3, [r3, #24]
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 8019c1e:	3b08      	subs	r3, #8
 8019c20:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8019c24:	f5a1 7017 	sub.w	r0, r1, #604	@ 0x25c
 8019c28:	499d      	ldr	r1, [pc, #628]	@ (8019ea0 <mg_tls_client_recv_cert_verify+0x3a8>)
 8019c2a:	6800      	ldr	r0, [r0, #0]
 8019c2c:	f7ee fb62 	bl	80082f4 <mg_error>
    return -1;
 8019c30:	f04f 33ff 	mov.w	r3, #4294967295
 8019c34:	e179      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
  }
  MG_VERBOSE(
 8019c36:	4b9b      	ldr	r3, [pc, #620]	@ (8019ea4 <mg_tls_client_recv_cert_verify+0x3ac>)
 8019c38:	681b      	ldr	r3, [r3, #0]
 8019c3a:	2b03      	cmp	r3, #3
 8019c3c:	dd0e      	ble.n	8019c5c <mg_tls_client_recv_cert_verify+0x164>
 8019c3e:	4b9a      	ldr	r3, [pc, #616]	@ (8019ea8 <mg_tls_client_recv_cert_verify+0x3b0>)
 8019c40:	f642 72ad 	movw	r2, #12205	@ 0x2fad
 8019c44:	4999      	ldr	r1, [pc, #612]	@ (8019eac <mg_tls_client_recv_cert_verify+0x3b4>)
 8019c46:	2004      	movs	r0, #4
 8019c48:	f7f4 f880 	bl	800dd4c <mg_log_prefix>
 8019c4c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8019c50:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8019c54:	4619      	mov	r1, r3
 8019c56:	4896      	ldr	r0, [pc, #600]	@ (8019eb0 <mg_tls_client_recv_cert_verify+0x3b8>)
 8019c58:	f7f4 f8c8 	bl	800ddec <mg_log>
      ("certificate verification, algo=%04x, siglen=%d", sigalg, siglen));

  if (sigalg == 0x0804) {  // rsa_pss_rsae_sha256
 8019c5c:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8019c60:	f640 0204 	movw	r2, #2052	@ 0x804
 8019c64:	4293      	cmp	r3, r2
 8019c66:	d173      	bne.n	8019d50 <mg_tls_client_recv_cert_verify+0x258>
    uint8_t sig2[512];     // 2048 or 4096 bits
    struct mg_der_tlv seq, modulus, exponent;

    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 8019c68:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019c6c:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8019c70:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019c74:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 8019c78:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 8019c7c:	4619      	mov	r1, r3
 8019c7e:	f7fc fe43 	bl	8016908 <mg_der_parse>
 8019c82:	4603      	mov	r3, r0
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	dd1d      	ble.n	8019cc4 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8019c88:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 8019c8c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8019c90:	4611      	mov	r1, r2
 8019c92:	4618      	mov	r0, r3
 8019c94:	f7fc fe98 	bl	80169c8 <mg_der_next>
 8019c98:	4603      	mov	r3, r0
    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	dd12      	ble.n	8019cc4 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8019c9e:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8019ca2:	2b02      	cmp	r3, #2
 8019ca4:	d10e      	bne.n	8019cc4 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8019ca6:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 8019caa:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8019cae:	4611      	mov	r1, r2
 8019cb0:	4618      	mov	r0, r3
 8019cb2:	f7fc fe89 	bl	80169c8 <mg_der_next>
 8019cb6:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	dd03      	ble.n	8019cc4 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8019cbc:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8019cc0:	2b02      	cmp	r3, #2
 8019cc2:	d00a      	beq.n	8019cda <mg_tls_client_recv_cert_verify+0x1e2>
      mg_error(c, "invalid public key");
 8019cc4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019cc8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019ccc:	4979      	ldr	r1, [pc, #484]	@ (8019eb4 <mg_tls_client_recv_cert_verify+0x3bc>)
 8019cce:	6818      	ldr	r0, [r3, #0]
 8019cd0:	f7ee fb10 	bl	80082f4 <mg_error>
      return -1;
 8019cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8019cd8:	e127      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
    }

    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 8019cda:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 8019cde:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 8019ce2:	f8d7 4234 	ldr.w	r4, [r7, #564]	@ 0x234
 8019ce6:	f8d7 5230 	ldr.w	r5, [r7, #560]	@ 0x230
 8019cea:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 8019cee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019cf2:	9203      	str	r2, [sp, #12]
 8019cf4:	f107 0208 	add.w	r2, r7, #8
 8019cf8:	9202      	str	r2, [sp, #8]
 8019cfa:	9301      	str	r3, [sp, #4]
 8019cfc:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8019d00:	9300      	str	r3, [sp, #0]
 8019d02:	462b      	mov	r3, r5
 8019d04:	4622      	mov	r2, r4
 8019d06:	f003 ff2c 	bl	801db62 <mg_rsa_mod_pow>
                   sigbuf, siglen, sig2, sizeof(sig2));

    if (sig2[sizeof(sig2) - 1] != 0xbc) {
 8019d0a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019d0e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8019d12:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8019d16:	2bbc      	cmp	r3, #188	@ 0xbc
 8019d18:	d00a      	beq.n	8019d30 <mg_tls_client_recv_cert_verify+0x238>
      mg_error(c, "failed to verify RSA certificate (certverify)");
 8019d1a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019d1e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019d22:	4965      	ldr	r1, [pc, #404]	@ (8019eb8 <mg_tls_client_recv_cert_verify+0x3c0>)
 8019d24:	6818      	ldr	r0, [r3, #0]
 8019d26:	f7ee fae5 	bl	80082f4 <mg_error>
      return -1;
 8019d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8019d2e:	e0fc      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
    }
    MG_DEBUG(("certificate verification successful (RSA)"));
 8019d30:	4b5c      	ldr	r3, [pc, #368]	@ (8019ea4 <mg_tls_client_recv_cert_verify+0x3ac>)
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	2b02      	cmp	r3, #2
 8019d36:	f340 80f0 	ble.w	8019f1a <mg_tls_client_recv_cert_verify+0x422>
 8019d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8019ea8 <mg_tls_client_recv_cert_verify+0x3b0>)
 8019d3c:	f642 72c2 	movw	r2, #12226	@ 0x2fc2
 8019d40:	495a      	ldr	r1, [pc, #360]	@ (8019eac <mg_tls_client_recv_cert_verify+0x3b4>)
 8019d42:	2003      	movs	r0, #3
 8019d44:	f7f4 f802 	bl	800dd4c <mg_log_prefix>
 8019d48:	485c      	ldr	r0, [pc, #368]	@ (8019ebc <mg_tls_client_recv_cert_verify+0x3c4>)
 8019d4a:	f7f4 f84f 	bl	800ddec <mg_log>
 8019d4e:	e0e4      	b.n	8019f1a <mg_tls_client_recv_cert_verify+0x422>
  } else if (sigalg == 0x0403) {  // ecdsa_secp256r1_sha256
 8019d50:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8019d54:	f240 4203 	movw	r2, #1027	@ 0x403
 8019d58:	4293      	cmp	r3, r2
 8019d5a:	f040 80c8 	bne.w	8019eee <mg_tls_client_recv_cert_verify+0x3f6>
    // Extract certificate signature and verify it using pubkey and sighash
    uint8_t sig[64];
    struct mg_der_tlv seq, r, s;
    if (mg_der_to_tlv(sigbuf, siglen, &seq) < 0) {
 8019d5e:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 8019d62:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8019d66:	4619      	mov	r1, r3
 8019d68:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 8019d6c:	f7fc fea7 	bl	8016abe <mg_der_to_tlv>
 8019d70:	4603      	mov	r3, r0
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	da0a      	bge.n	8019d8c <mg_tls_client_recv_cert_verify+0x294>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 8019d76:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019d7a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019d7e:	4950      	ldr	r1, [pc, #320]	@ (8019ec0 <mg_tls_client_recv_cert_verify+0x3c8>)
 8019d80:	6818      	ldr	r0, [r3, #0]
 8019d82:	f7ee fab7 	bl	80082f4 <mg_error>
      return -1;
 8019d86:	f04f 33ff 	mov.w	r3, #4294967295
 8019d8a:	e0ce      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &r) < 0) {
 8019d8c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8019d90:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 8019d94:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8019d98:	4618      	mov	r0, r3
 8019d9a:	f7fc fe90 	bl	8016abe <mg_der_to_tlv>
 8019d9e:	4603      	mov	r3, r0
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	da0a      	bge.n	8019dba <mg_tls_client_recv_cert_verify+0x2c2>
      mg_error(c, "missing first part of the signature");
 8019da4:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019da8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019dac:	4945      	ldr	r1, [pc, #276]	@ (8019ec4 <mg_tls_client_recv_cert_verify+0x3cc>)
 8019dae:	6818      	ldr	r0, [r3, #0]
 8019db0:	f7ee faa0 	bl	80082f4 <mg_error>
      return -1;
 8019db4:	f04f 33ff 	mov.w	r3, #4294967295
 8019db8:	e0b7      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(r.value + r.len, seq.len - r.len, &s) < 0) {
 8019dba:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8019dbe:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019dc2:	18d0      	adds	r0, r2, r3
 8019dc4:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8019dc8:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019dcc:	1ad3      	subs	r3, r2, r3
 8019dce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8019dd2:	4619      	mov	r1, r3
 8019dd4:	f7fc fe73 	bl	8016abe <mg_der_to_tlv>
 8019dd8:	4603      	mov	r3, r0
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	da0a      	bge.n	8019df4 <mg_tls_client_recv_cert_verify+0x2fc>
      mg_error(c, "missing second part of the signature");
 8019dde:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019de2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019de6:	4938      	ldr	r1, [pc, #224]	@ (8019ec8 <mg_tls_client_recv_cert_verify+0x3d0>)
 8019de8:	6818      	ldr	r0, [r3, #0]
 8019dea:	f7ee fa83 	bl	80082f4 <mg_error>
      return -1;
 8019dee:	f04f 33ff 	mov.w	r3, #4294967295
 8019df2:	e09a      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
    }
    // Integers may be padded with zeroes
    if (r.len > 32) r.value = r.value + (r.len - 32), r.len = 32;
 8019df4:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019df8:	2b20      	cmp	r3, #32
 8019dfa:	d90a      	bls.n	8019e12 <mg_tls_client_recv_cert_verify+0x31a>
 8019dfc:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8019e00:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8019e04:	3b20      	subs	r3, #32
 8019e06:	4413      	add	r3, r2
 8019e08:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8019e0c:	2320      	movs	r3, #32
 8019e0e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    if (s.len > 32) s.value = s.value + (s.len - 32), s.len = 32;
 8019e12:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8019e16:	2b20      	cmp	r3, #32
 8019e18:	d90a      	bls.n	8019e30 <mg_tls_client_recv_cert_verify+0x338>
 8019e1a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8019e1e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8019e22:	3b20      	subs	r3, #32
 8019e24:	4413      	add	r3, r2
 8019e26:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8019e2a:	2320      	movs	r3, #32
 8019e2c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    memmove(sig, r.value, r.len);
 8019e30:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 8019e34:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8019e38:	f107 0308 	add.w	r3, r7, #8
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f00b fc8b 	bl	8025758 <memmove>
    memmove(sig + 32, s.value, s.len);
 8019e42:	f107 0308 	add.w	r3, r7, #8
 8019e46:	3320      	adds	r3, #32
 8019e48:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 8019e4c:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8019e50:	4618      	mov	r0, r3
 8019e52:	f00b fc81 	bl	8025758 <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 8019e56:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019e5a:	f503 7413 	add.w	r4, r3, #588	@ 0x24c
 8019e5e:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8019e62:	f503 658c 	add.w	r5, r3, #1120	@ 0x460
 8019e66:	f004 feab 	bl	801ebc0 <mg_uecc_secp256r1>
 8019e6a:	4602      	mov	r2, r0
 8019e6c:	f107 0308 	add.w	r3, r7, #8
 8019e70:	9200      	str	r2, [sp, #0]
 8019e72:	2220      	movs	r2, #32
 8019e74:	4629      	mov	r1, r5
 8019e76:	4620      	mov	r0, r4
 8019e78:	f006 f83e 	bl	801fef8 <mg_uecc_verify>
 8019e7c:	4603      	mov	r3, r0
 8019e7e:	2b01      	cmp	r3, #1
 8019e80:	d026      	beq.n	8019ed0 <mg_tls_client_recv_cert_verify+0x3d8>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify EC certificate (certverify)");
 8019e82:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019e86:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019e8a:	4910      	ldr	r1, [pc, #64]	@ (8019ecc <mg_tls_client_recv_cert_verify+0x3d4>)
 8019e8c:	6818      	ldr	r0, [r3, #0]
 8019e8e:	f7ee fa31 	bl	80082f4 <mg_error>
      return -1;
 8019e92:	f04f 33ff 	mov.w	r3, #4294967295
 8019e96:	e048      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
 8019e98:	080287d4 	.word	0x080287d4
 8019e9c:	0802880c 	.word	0x0802880c
 8019ea0:	08028840 	.word	0x08028840
 8019ea4:	24000258 	.word	0x24000258
 8019ea8:	0802a388 	.word	0x0802a388
 8019eac:	080264c4 	.word	0x080264c4
 8019eb0:	08028878 	.word	0x08028878
 8019eb4:	080288a8 	.word	0x080288a8
 8019eb8:	080288bc 	.word	0x080288bc
 8019ebc:	080288ec 	.word	0x080288ec
 8019ec0:	08028918 	.word	0x08028918
 8019ec4:	0802894c 	.word	0x0802894c
 8019ec8:	08028970 	.word	0x08028970
 8019ecc:	08028998 	.word	0x08028998
    }
    MG_DEBUG(("certificate verification successful (EC)"));
 8019ed0:	4b18      	ldr	r3, [pc, #96]	@ (8019f34 <mg_tls_client_recv_cert_verify+0x43c>)
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	2b02      	cmp	r3, #2
 8019ed6:	dd20      	ble.n	8019f1a <mg_tls_client_recv_cert_verify+0x422>
 8019ed8:	4b17      	ldr	r3, [pc, #92]	@ (8019f38 <mg_tls_client_recv_cert_verify+0x440>)
 8019eda:	f642 72df 	movw	r2, #12255	@ 0x2fdf
 8019ede:	4917      	ldr	r1, [pc, #92]	@ (8019f3c <mg_tls_client_recv_cert_verify+0x444>)
 8019ee0:	2003      	movs	r0, #3
 8019ee2:	f7f3 ff33 	bl	800dd4c <mg_log_prefix>
 8019ee6:	4816      	ldr	r0, [pc, #88]	@ (8019f40 <mg_tls_client_recv_cert_verify+0x448>)
 8019ee8:	f7f3 ff80 	bl	800ddec <mg_log>
 8019eec:	e015      	b.n	8019f1a <mg_tls_client_recv_cert_verify+0x422>
    //   0807 = ed25519
    //   0808 = ed448
    //   0809 = rsa_pss_pss_sha256
    //   080A = rsa_pss_pss_sha384
    //   080B = rsa_pss_pss_sha512
    MG_ERROR(("unsupported certverify signature scheme: %x of %d bytes", sigalg,
 8019eee:	4b11      	ldr	r3, [pc, #68]	@ (8019f34 <mg_tls_client_recv_cert_verify+0x43c>)
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	dd0e      	ble.n	8019f14 <mg_tls_client_recv_cert_verify+0x41c>
 8019ef6:	4b10      	ldr	r3, [pc, #64]	@ (8019f38 <mg_tls_client_recv_cert_verify+0x440>)
 8019ef8:	f642 72ea 	movw	r2, #12266	@ 0x2fea
 8019efc:	490f      	ldr	r1, [pc, #60]	@ (8019f3c <mg_tls_client_recv_cert_verify+0x444>)
 8019efe:	2001      	movs	r0, #1
 8019f00:	f7f3 ff24 	bl	800dd4c <mg_log_prefix>
 8019f04:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8019f08:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8019f0c:	4619      	mov	r1, r3
 8019f0e:	480d      	ldr	r0, [pc, #52]	@ (8019f44 <mg_tls_client_recv_cert_verify+0x44c>)
 8019f10:	f7f3 ff6c 	bl	800ddec <mg_log>
              siglen));
    return -1;
 8019f14:	f04f 33ff 	mov.w	r3, #4294967295
 8019f18:	e007      	b.n	8019f2a <mg_tls_client_recv_cert_verify+0x432>
  }
  mg_tls_drop_message(c);
 8019f1a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8019f1e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8019f22:	6818      	ldr	r0, [r3, #0]
 8019f24:	f7fc fe6a 	bl	8016bfc <mg_tls_drop_message>
  return 0;
 8019f28:	2300      	movs	r3, #0
}
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8019f30:	46bd      	mov	sp, r7
 8019f32:	bdb0      	pop	{r4, r5, r7, pc}
 8019f34:	24000258 	.word	0x24000258
 8019f38:	0802a388 	.word	0x0802a388
 8019f3c:	080264c4 	.word	0x080264c4
 8019f40:	080289c8 	.word	0x080289c8
 8019f44:	080289f4 	.word	0x080289f4

08019f48 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b084      	sub	sp, #16
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019f56:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8019f58:	6878      	ldr	r0, [r7, #4]
 8019f5a:	f7fd fa9b 	bl	8017494 <mg_tls_recv_record>
 8019f5e:	4603      	mov	r3, r0
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	da02      	bge.n	8019f6a <mg_tls_client_recv_finish+0x22>
    return -1;
 8019f64:	f04f 33ff 	mov.w	r3, #4294967295
 8019f68:	e017      	b.n	8019f9a <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	695b      	ldr	r3, [r3, #20]
 8019f72:	4413      	add	r3, r2
 8019f74:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	781b      	ldrb	r3, [r3, #0]
 8019f7a:	2b14      	cmp	r3, #20
 8019f7c:	d009      	beq.n	8019f92 <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 8019f7e:	68bb      	ldr	r3, [r7, #8]
 8019f80:	781b      	ldrb	r3, [r3, #0]
 8019f82:	461a      	mov	r2, r3
 8019f84:	4907      	ldr	r1, [pc, #28]	@ (8019fa4 <mg_tls_client_recv_finish+0x5c>)
 8019f86:	6878      	ldr	r0, [r7, #4]
 8019f88:	f7ee f9b4 	bl	80082f4 <mg_error>
    return -1;
 8019f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f90:	e003      	b.n	8019f9a <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 8019f92:	6878      	ldr	r0, [r7, #4]
 8019f94:	f7fc fe32 	bl	8016bfc <mg_tls_drop_message>
  return 0;
 8019f98:	2300      	movs	r3, #0
}
 8019f9a:	4618      	mov	r0, r3
 8019f9c:	3710      	adds	r7, #16
 8019f9e:	46bd      	mov	sp, r7
 8019fa0:	bd80      	pop	{r7, pc}
 8019fa2:	bf00      	nop
 8019fa4:	08028a2c 	.word	0x08028a2c

08019fa8 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 8019fa8:	b580      	push	{r7, lr}
 8019faa:	b0b4      	sub	sp, #208	@ 0xd0
 8019fac:	af02      	add	r7, sp, #8
 8019fae:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8019fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 8019fba:	4b1a      	ldr	r3, [pc, #104]	@ (801a024 <mg_tls_client_send_finish+0x7c>)
 8019fbc:	60fb      	str	r3, [r7, #12]
 8019fbe:	f107 0310 	add.w	r3, r7, #16
 8019fc2:	2220      	movs	r2, #32
 8019fc4:	2100      	movs	r1, #0
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f00b fbe0 	bl	802578c <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8019fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8019fd0:	f103 0120 	add.w	r1, r3, #32
 8019fd4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8019fd8:	2270      	movs	r2, #112	@ 0x70
 8019fda:	4618      	mov	r0, r3
 8019fdc:	f00b fbbc 	bl	8025758 <memmove>
  mg_sha256_final(hash, &sha256);
 8019fe0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8019fe4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8019fe8:	4611      	mov	r1, r2
 8019fea:	4618      	mov	r0, r3
 8019fec:	f7fa fc5d 	bl	80148aa <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 8019ff0:	f107 000c 	add.w	r0, r7, #12
 8019ff4:	3004      	adds	r0, #4
 8019ff6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8019ffa:	f503 61a4 	add.w	r1, r3, #1312	@ 0x520
 8019ffe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801a002:	2220      	movs	r2, #32
 801a004:	9200      	str	r2, [sp, #0]
 801a006:	2220      	movs	r2, #32
 801a008:	f7fa fda3 	bl	8014b52 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 801a00c:	f107 010c 	add.w	r1, r7, #12
 801a010:	2316      	movs	r3, #22
 801a012:	2224      	movs	r2, #36	@ 0x24
 801a014:	6878      	ldr	r0, [r7, #4]
 801a016:	f7fd f941 	bl	801729c <mg_tls_encrypt>
}
 801a01a:	bf00      	nop
 801a01c:	37c8      	adds	r7, #200	@ 0xc8
 801a01e:	46bd      	mov	sp, r7
 801a020:	bd80      	pop	{r7, pc}
 801a022:	bf00      	nop
 801a024:	20000014 	.word	0x20000014

0801a028 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 801a028:	b580      	push	{r7, lr}
 801a02a:	b0e4      	sub	sp, #400	@ 0x190
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a032:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a036:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a038:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a03c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a046:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 801a04a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a04e:	781b      	ldrb	r3, [r3, #0]
 801a050:	2b05      	cmp	r3, #5
 801a052:	f200 80da 	bhi.w	801a20a <mg_tls_client_handshake+0x1e2>
 801a056:	a201      	add	r2, pc, #4	@ (adr r2, 801a05c <mg_tls_client_handshake+0x34>)
 801a058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a05c:	0801a075 	.word	0x0801a075
 801a060:	0801a08b 	.word	0x0801a08b
 801a064:	0801a0a9 	.word	0x0801a0a9
 801a068:	0801a0c7 	.word	0x0801a0c7
 801a06c:	0801a0e5 	.word	0x0801a0e5
 801a070:	0801a103 	.word	0x0801a103
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 801a074:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a078:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a07c:	6818      	ldr	r0, [r3, #0]
 801a07e:	f7fe f90b 	bl	8018298 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 801a082:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a086:	2201      	movs	r2, #1
 801a088:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 801a08a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a08e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a092:	6818      	ldr	r0, [r3, #0]
 801a094:	f7fe fae2 	bl	801865c <mg_tls_client_recv_hello>
 801a098:	4603      	mov	r3, r0
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	f2c0 80c2 	blt.w	801a224 <mg_tls_client_handshake+0x1fc>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 801a0a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a0a4:	2202      	movs	r2, #2
 801a0a6:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 801a0a8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a0ac:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a0b0:	6818      	ldr	r0, [r3, #0]
 801a0b2:	f7fe fc0d 	bl	80188d0 <mg_tls_client_recv_ext>
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	f2c0 80b5 	blt.w	801a228 <mg_tls_client_handshake+0x200>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 801a0be:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a0c2:	2203      	movs	r2, #3
 801a0c4:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 801a0c6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a0ca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a0ce:	6818      	ldr	r0, [r3, #0]
 801a0d0:	f7ff fa94 	bl	80195fc <mg_tls_client_recv_cert>
 801a0d4:	4603      	mov	r3, r0
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	f2c0 80a8 	blt.w	801a22c <mg_tls_client_handshake+0x204>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 801a0dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a0e0:	2204      	movs	r2, #4
 801a0e2:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 801a0e4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a0e8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a0ec:	6818      	ldr	r0, [r3, #0]
 801a0ee:	f7ff fd03 	bl	8019af8 <mg_tls_client_recv_cert_verify>
 801a0f2:	4603      	mov	r3, r0
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	f2c0 809b 	blt.w	801a230 <mg_tls_client_handshake+0x208>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISH;
 801a0fa:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a0fe:	2205      	movs	r2, #5
 801a100:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISH:
      if (mg_tls_client_recv_finish(c) < 0) {
 801a102:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a106:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a10a:	6818      	ldr	r0, [r3, #0]
 801a10c:	f7ff ff1c 	bl	8019f48 <mg_tls_client_recv_finish>
 801a110:	4603      	mov	r3, r0
 801a112:	2b00      	cmp	r3, #0
 801a114:	f2c0 808e 	blt.w	801a234 <mg_tls_client_handshake+0x20c>
        break;
      }
      if (tls->cert_requested) {
 801a118:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a11c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801a120:	2b00      	cmp	r3, #0
 801a122:	d04b      	beq.n	801a1bc <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 801a124:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a128:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 801a12c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801a130:	22c0      	movs	r2, #192	@ 0xc0
 801a132:	4619      	mov	r1, r3
 801a134:	f00b fc5f 	bl	80259f6 <memcpy>
        mg_tls_generate_application_keys(c);
 801a138:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a13c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a140:	6818      	ldr	r0, [r3, #0]
 801a142:	f7fc ff93 	bl	801706c <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 801a146:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a14a:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 801a14e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a152:	4610      	mov	r0, r2
 801a154:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801a158:	22c0      	movs	r2, #192	@ 0xc0
 801a15a:	4619      	mov	r1, r3
 801a15c:	f00b fc4b 	bl	80259f6 <memcpy>
        tls->enc = hs_keys;
 801a160:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a164:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801a168:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 801a16c:	22c0      	movs	r2, #192	@ 0xc0
 801a16e:	4618      	mov	r0, r3
 801a170:	f00b fc41 	bl	80259f6 <memcpy>
        mg_tls_server_send_cert(c);
 801a174:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a178:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a17c:	6818      	ldr	r0, [r3, #0]
 801a17e:	f7fd fda9 	bl	8017cd4 <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 801a182:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a186:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a18a:	2101      	movs	r1, #1
 801a18c:	6818      	ldr	r0, [r3, #0]
 801a18e:	f7fd fec7 	bl	8017f20 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 801a192:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a196:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a19a:	6818      	ldr	r0, [r3, #0]
 801a19c:	f7ff ff04 	bl	8019fa8 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 801a1a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a1a4:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 801a1a8:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 801a1ac:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801a1b0:	4611      	mov	r1, r2
 801a1b2:	22c0      	movs	r2, #192	@ 0xc0
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	f00b fc1e 	bl	80259f6 <memcpy>
 801a1ba:	e00d      	b.n	801a1d8 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 801a1bc:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a1c0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a1c4:	6818      	ldr	r0, [r3, #0]
 801a1c6:	f7ff feef 	bl	8019fa8 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 801a1ca:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a1ce:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a1d2:	6818      	ldr	r0, [r3, #0]
 801a1d4:	f7fc ff4a 	bl	801706c <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 801a1d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a1dc:	2206      	movs	r2, #6
 801a1de:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801a1e0:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a1e4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a1e8:	681a      	ldr	r2, [r3, #0]
 801a1ea:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801a1ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a1f2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      mg_call(c, MG_EV_TLS_HS, NULL);
 801a1f6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a1fa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a1fe:	2200      	movs	r2, #0
 801a200:	2106      	movs	r1, #6
 801a202:	6818      	ldr	r0, [r3, #0]
 801a204:	f7ee f856 	bl	80082b4 <mg_call>
      break;
 801a208:	e015      	b.n	801a236 <mg_tls_client_handshake+0x20e>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 801a20a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801a20e:	781b      	ldrb	r3, [r3, #0]
 801a210:	461a      	mov	r2, r3
 801a212:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801a216:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801a21a:	4909      	ldr	r1, [pc, #36]	@ (801a240 <mg_tls_client_handshake+0x218>)
 801a21c:	6818      	ldr	r0, [r3, #0]
 801a21e:	f7ee f869 	bl	80082f4 <mg_error>
      break;
 801a222:	e008      	b.n	801a236 <mg_tls_client_handshake+0x20e>
        break;
 801a224:	bf00      	nop
 801a226:	e006      	b.n	801a236 <mg_tls_client_handshake+0x20e>
        break;
 801a228:	bf00      	nop
 801a22a:	e004      	b.n	801a236 <mg_tls_client_handshake+0x20e>
        break;
 801a22c:	bf00      	nop
 801a22e:	e002      	b.n	801a236 <mg_tls_client_handshake+0x20e>
        break;
 801a230:	bf00      	nop
 801a232:	e000      	b.n	801a236 <mg_tls_client_handshake+0x20e>
        break;
 801a234:	bf00      	nop
  }
}
 801a236:	bf00      	nop
 801a238:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 801a23c:	46bd      	mov	sp, r7
 801a23e:	bd80      	pop	{r7, pc}
 801a240:	08028a58 	.word	0x08028a58

0801a244 <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 801a244:	b580      	push	{r7, lr}
 801a246:	b084      	sub	sp, #16
 801a248:	af00      	add	r7, sp, #0
 801a24a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a252:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	781b      	ldrb	r3, [r3, #0]
 801a258:	2b07      	cmp	r3, #7
 801a25a:	d002      	beq.n	801a262 <mg_tls_server_handshake+0x1e>
 801a25c:	2b08      	cmp	r3, #8
 801a25e:	d01c      	beq.n	801a29a <mg_tls_server_handshake+0x56>
 801a260:	e02f      	b.n	801a2c2 <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 801a262:	6878      	ldr	r0, [r7, #4]
 801a264:	f7fd fad4 	bl	8017810 <mg_tls_server_recv_hello>
 801a268:	4603      	mov	r3, r0
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	db31      	blt.n	801a2d2 <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 801a26e:	6878      	ldr	r0, [r7, #4]
 801a270:	f7fd fc5a 	bl	8017b28 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 801a274:	6878      	ldr	r0, [r7, #4]
 801a276:	f7fc fda9 	bl	8016dcc <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 801a27a:	6878      	ldr	r0, [r7, #4]
 801a27c:	f7fd fd08 	bl	8017c90 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 801a280:	6878      	ldr	r0, [r7, #4]
 801a282:	f7fd fd27 	bl	8017cd4 <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 801a286:	2100      	movs	r1, #0
 801a288:	6878      	ldr	r0, [r7, #4]
 801a28a:	f7fd fe49 	bl	8017f20 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 801a28e:	6878      	ldr	r0, [r7, #4]
 801a290:	f7fd ff7a 	bl	8018188 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 801a294:	68fb      	ldr	r3, [r7, #12]
 801a296:	2208      	movs	r2, #8
 801a298:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 801a29a:	6878      	ldr	r0, [r7, #4]
 801a29c:	f7fd ffbc 	bl	8018218 <mg_tls_server_recv_finish>
 801a2a0:	4603      	mov	r3, r0
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	db17      	blt.n	801a2d6 <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 801a2a6:	6878      	ldr	r0, [r7, #4]
 801a2a8:	f7fc fee0 	bl	801706c <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	2209      	movs	r2, #9
 801a2b0:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 801a2b2:	687a      	ldr	r2, [r7, #4]
 801a2b4:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801a2b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a2bc:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 801a2c0:	e00a      	b.n	801a2d8 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	781b      	ldrb	r3, [r3, #0]
 801a2c6:	461a      	mov	r2, r3
 801a2c8:	4905      	ldr	r1, [pc, #20]	@ (801a2e0 <mg_tls_server_handshake+0x9c>)
 801a2ca:	6878      	ldr	r0, [r7, #4]
 801a2cc:	f7ee f812 	bl	80082f4 <mg_error>
      break;
 801a2d0:	e002      	b.n	801a2d8 <mg_tls_server_handshake+0x94>
        return;
 801a2d2:	bf00      	nop
 801a2d4:	e000      	b.n	801a2d8 <mg_tls_server_handshake+0x94>
        return;
 801a2d6:	bf00      	nop
  }
}
 801a2d8:	3710      	adds	r7, #16
 801a2da:	46bd      	mov	sp, r7
 801a2dc:	bd80      	pop	{r7, pc}
 801a2de:	bf00      	nop
 801a2e0:	08028a74 	.word	0x08028a74

0801a2e4 <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 801a2e4:	b580      	push	{r7, lr}
 801a2e6:	b084      	sub	sp, #16
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a2f2:	60fb      	str	r3, [r7, #12]
  long n;
  if (c->is_client) {
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801a2fa:	f003 0302 	and.w	r3, r3, #2
 801a2fe:	b2db      	uxtb	r3, r3
 801a300:	2b00      	cmp	r3, #0
 801a302:	d003      	beq.n	801a30c <mg_tls_handshake+0x28>
    // will clear is_hs when sending last chunk
    mg_tls_client_handshake(c);
 801a304:	6878      	ldr	r0, [r7, #4]
 801a306:	f7ff fe8f 	bl	801a028 <mg_tls_client_handshake>
 801a30a:	e00a      	b.n	801a322 <mg_tls_handshake+0x3e>
  } else {
    mg_tls_server_handshake(c);
 801a30c:	6878      	ldr	r0, [r7, #4]
 801a30e:	f7ff ff99 	bl	801a244 <mg_tls_server_handshake>
  }
  while (tls->send.len > 0 &&
 801a312:	e006      	b.n	801a322 <mg_tls_handshake+0x3e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	3304      	adds	r3, #4
 801a318:	68ba      	ldr	r2, [r7, #8]
 801a31a:	2100      	movs	r1, #0
 801a31c:	4618      	mov	r0, r3
 801a31e:	f7f2 fe49 	bl	800cfb4 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801a322:	68fb      	ldr	r3, [r7, #12]
 801a324:	68db      	ldr	r3, [r3, #12]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d00b      	beq.n	801a342 <mg_tls_handshake+0x5e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	6859      	ldr	r1, [r3, #4]
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	68db      	ldr	r3, [r3, #12]
 801a332:	461a      	mov	r2, r3
 801a334:	6878      	ldr	r0, [r7, #4]
 801a336:	f7f6 f8ff 	bl	8010538 <mg_io_send>
 801a33a:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801a33c:	68bb      	ldr	r3, [r7, #8]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	dce8      	bgt.n	801a314 <mg_tls_handshake+0x30>
  } // if last chunk fails to be sent, it will be sent with first app data,
    // otherwise, it needs to be flushed
}
 801a342:	bf00      	nop
 801a344:	3710      	adds	r7, #16
 801a346:	46bd      	mov	sp, r7
 801a348:	bd80      	pop	{r7, pc}
	...

0801a34c <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 801a34c:	b590      	push	{r4, r7, lr}
 801a34e:	b09b      	sub	sp, #108	@ 0x6c
 801a350:	af02      	add	r7, sp, #8
 801a352:	f107 0410 	add.w	r4, r7, #16
 801a356:	e884 0003 	stmia.w	r4, {r0, r1}
 801a35a:	f107 0108 	add.w	r1, r7, #8
 801a35e:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 801a362:	2300      	movs	r3, #0
 801a364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a366:	2300      	movs	r3, #0
 801a368:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 801a36a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a36e:	4946      	ldr	r1, [pc, #280]	@ (801a488 <mg_parse_pem+0x13c>)
 801a370:	4618      	mov	r0, r3
 801a372:	f7fb fceb 	bl	8015d4c <mg_str_s>
 801a376:	f107 0318 	add.w	r3, r7, #24
 801a37a:	9300      	str	r3, [sp, #0]
 801a37c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801a380:	cb0c      	ldmia	r3, {r2, r3}
 801a382:	f107 0110 	add.w	r1, r7, #16
 801a386:	c903      	ldmia	r1, {r0, r1}
 801a388:	f7fb fdea 	bl	8015f60 <mg_match>
 801a38c:	4603      	mov	r3, r0
 801a38e:	f083 0301 	eor.w	r3, r3, #1
 801a392:	b2db      	uxtb	r3, r3
 801a394:	2b00      	cmp	r3, #0
 801a396:	d00f      	beq.n	801a3b8 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 801a398:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 801a39a:	4638      	mov	r0, r7
 801a39c:	f107 0310 	add.w	r3, r7, #16
 801a3a0:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a3a4:	f7fb fd1c 	bl	8015de0 <mg_strdup>
 801a3a8:	4622      	mov	r2, r4
 801a3aa:	463b      	mov	r3, r7
 801a3ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a3b0:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	e062      	b.n	801a47e <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 801a3b8:	f107 0308 	add.w	r3, r7, #8
 801a3bc:	cb0c      	ldmia	r3, {r2, r3}
 801a3be:	f107 0120 	add.w	r1, r7, #32
 801a3c2:	c903      	ldmia	r1, {r0, r1}
 801a3c4:	f7fb fd43 	bl	8015e4e <mg_strcmp>
 801a3c8:	4603      	mov	r3, r0
 801a3ca:	2b00      	cmp	r3, #0
 801a3cc:	d10a      	bne.n	801a3e4 <mg_parse_pem+0x98>
 801a3ce:	f107 0308 	add.w	r3, r7, #8
 801a3d2:	cb0c      	ldmia	r3, {r2, r3}
 801a3d4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801a3d8:	c903      	ldmia	r1, {r0, r1}
 801a3da:	f7fb fd38 	bl	8015e4e <mg_strcmp>
 801a3de:	4603      	mov	r3, r0
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d002      	beq.n	801a3ea <mg_parse_pem+0x9e>
    return -1;  // bad label
 801a3e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a3e8:	e049      	b.n	801a47e <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 801a3ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ec:	4619      	mov	r1, r3
 801a3ee:	2001      	movs	r0, #1
 801a3f0:	f00a fdf2 	bl	8024fd8 <calloc>
 801a3f4:	4603      	mov	r3, r0
 801a3f6:	653b      	str	r3, [r7, #80]	@ 0x50
 801a3f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d102      	bne.n	801a404 <mg_parse_pem+0xb8>
    return -1;
 801a3fe:	f04f 33ff 	mov.w	r3, #4294967295
 801a402:	e03c      	b.n	801a47e <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801a404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a406:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a408:	e01c      	b.n	801a444 <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 801a40a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a40c:	781b      	ldrb	r3, [r3, #0]
 801a40e:	2b20      	cmp	r3, #32
 801a410:	d014      	beq.n	801a43c <mg_parse_pem+0xf0>
 801a412:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a414:	781b      	ldrb	r3, [r3, #0]
 801a416:	2b0a      	cmp	r3, #10
 801a418:	d010      	beq.n	801a43c <mg_parse_pem+0xf0>
 801a41a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a41c:	781b      	ldrb	r3, [r3, #0]
 801a41e:	2b0d      	cmp	r3, #13
 801a420:	d00c      	beq.n	801a43c <mg_parse_pem+0xf0>
 801a422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a424:	781b      	ldrb	r3, [r3, #0]
 801a426:	2b09      	cmp	r3, #9
 801a428:	d008      	beq.n	801a43c <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 801a42a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a42c:	1c5a      	adds	r2, r3, #1
 801a42e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801a430:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a432:	4413      	add	r3, r2
 801a434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a436:	7812      	ldrb	r2, [r2, #0]
 801a438:	701a      	strb	r2, [r3, #0]
 801a43a:	e000      	b.n	801a43e <mg_parse_pem+0xf2>
      continue;
 801a43c:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 801a43e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a440:	3301      	adds	r3, #1
 801a442:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a444:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a448:	4413      	add	r3, r2
 801a44a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a44c:	429a      	cmp	r2, r3
 801a44e:	d3dc      	bcc.n	801a40a <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 801a450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a452:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a454:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801a456:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a458:	f7ed f8a8 	bl	80075ac <mg_base64_decode>
 801a45c:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 801a45e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a460:	2b00      	cmp	r3, #0
 801a462:	d105      	bne.n	801a470 <mg_parse_pem+0x124>
    free(s);
 801a464:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801a466:	f00a fddb 	bl	8025020 <free>
    return -1;
 801a46a:	f04f 33ff 	mov.w	r3, #4294967295
 801a46e:	e006      	b.n	801a47e <mg_parse_pem+0x132>
  }
  der->buf = s;
 801a470:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a472:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801a474:	601a      	str	r2, [r3, #0]
  der->len = m;
 801a476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a478:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a47a:	605a      	str	r2, [r3, #4]
  return 0;
 801a47c:	2300      	movs	r3, #0
}
 801a47e:	4618      	mov	r0, r3
 801a480:	3764      	adds	r7, #100	@ 0x64
 801a482:	46bd      	mov	sp, r7
 801a484:	bd90      	pop	{r4, r7, pc}
 801a486:	bf00      	nop
 801a488:	08028a90 	.word	0x08028a90

0801a48c <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b090      	sub	sp, #64	@ 0x40
 801a490:	af02      	add	r7, sp, #8
 801a492:	6078      	str	r0, [r7, #4]
 801a494:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 801a496:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 801a49a:	2001      	movs	r0, #1
 801a49c:	f00a fd9c 	bl	8024fd8 <calloc>
 801a4a0:	4603      	mov	r3, r0
 801a4a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (tls == NULL) {
 801a4a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d104      	bne.n	801a4b4 <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 801a4aa:	49a5      	ldr	r1, [pc, #660]	@ (801a740 <mg_tls_init+0x2b4>)
 801a4ac:	6878      	ldr	r0, [r7, #4]
 801a4ae:	f7ed ff21 	bl	80082f4 <mg_error>
    return;
 801a4b2:	e141      	b.n	801a738 <mg_tls_init+0x2ac>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801a4ba:	f003 0302 	and.w	r3, r3, #2
 801a4be:	b2db      	uxtb	r3, r3
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d001      	beq.n	801a4c8 <mg_tls_init+0x3c>
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	e000      	b.n	801a4ca <mg_tls_init+0x3e>
 801a4c8:	2207      	movs	r2, #7
  tls->state =
 801a4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a4cc:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 801a4ce:	683b      	ldr	r3, [r7, #0]
 801a4d0:	6a1a      	ldr	r2, [r3, #32]
 801a4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a4d4:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  // tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a4dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 801a4e0:	687a      	ldr	r2, [r7, #4]
 801a4e2:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801a4e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a4ea:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801a4f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801a4f8:	b2d9      	uxtb	r1, r3
 801a4fa:	687a      	ldr	r2, [r7, #4]
 801a4fc:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801a500:	f361 1386 	bfi	r3, r1, #6, #1
 801a504:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 801a508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a50a:	3320      	adds	r3, #32
 801a50c:	4618      	mov	r0, r3
 801a50e:	f7f9 ff4f 	bl	80143b0 <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 801a512:	683b      	ldr	r3, [r7, #0]
 801a514:	69db      	ldr	r3, [r3, #28]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d018      	beq.n	801a54c <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 801a51a:	683b      	ldr	r3, [r7, #0]
 801a51c:	69db      	ldr	r3, [r3, #28]
 801a51e:	2bfc      	cmp	r3, #252	@ 0xfc
 801a520:	d904      	bls.n	801a52c <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 801a522:	4988      	ldr	r1, [pc, #544]	@ (801a744 <mg_tls_init+0x2b8>)
 801a524:	6878      	ldr	r0, [r7, #4]
 801a526:	f7ed fee5 	bl	80082f4 <mg_error>
      return;
 801a52a:	e105      	b.n	801a738 <mg_tls_init+0x2ac>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 801a52c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a52e:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
 801a532:	683b      	ldr	r3, [r7, #0]
 801a534:	699b      	ldr	r3, [r3, #24]
 801a536:	22fd      	movs	r2, #253	@ 0xfd
 801a538:	4619      	mov	r1, r3
 801a53a:	f00b f94e 	bl	80257da <strncpy>
    tls->hostname[opts->name.len] = 0;
 801a53e:	683b      	ldr	r3, [r7, #0]
 801a540:	69db      	ldr	r3, [r3, #28]
 801a542:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a544:	4413      	add	r3, r2
 801a546:	2200      	movs	r2, #0
 801a548:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
  }
  // server CA certificate, store serial number
  if (opts->ca.len > 0) {
 801a54c:	683b      	ldr	r3, [r7, #0]
 801a54e:	685b      	ldr	r3, [r3, #4]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d023      	beq.n	801a59c <mg_tls_init+0x110>
    if (mg_parse_pem(opts->ca, mg_str_s("CERTIFICATE"), &tls->ca_der) < 0) {
 801a554:	f107 0314 	add.w	r3, r7, #20
 801a558:	497b      	ldr	r1, [pc, #492]	@ (801a748 <mg_tls_init+0x2bc>)
 801a55a:	4618      	mov	r0, r3
 801a55c:	f7fb fbf6 	bl	8015d4c <mg_str_s>
 801a560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a562:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801a566:	6839      	ldr	r1, [r7, #0]
 801a568:	9300      	str	r3, [sp, #0]
 801a56a:	f107 0314 	add.w	r3, r7, #20
 801a56e:	cb0c      	ldmia	r3, {r2, r3}
 801a570:	c903      	ldmia	r1, {r0, r1}
 801a572:	f7ff feeb 	bl	801a34c <mg_parse_pem>
 801a576:	4603      	mov	r3, r0
 801a578:	2b00      	cmp	r3, #0
 801a57a:	da0f      	bge.n	801a59c <mg_tls_init+0x110>
      MG_ERROR(("Failed to load certificate"));
 801a57c:	4b73      	ldr	r3, [pc, #460]	@ (801a74c <mg_tls_init+0x2c0>)
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	2b00      	cmp	r3, #0
 801a582:	f340 80d0 	ble.w	801a726 <mg_tls_init+0x29a>
 801a586:	4b72      	ldr	r3, [pc, #456]	@ (801a750 <mg_tls_init+0x2c4>)
 801a588:	f243 02b6 	movw	r2, #12470	@ 0x30b6
 801a58c:	4971      	ldr	r1, [pc, #452]	@ (801a754 <mg_tls_init+0x2c8>)
 801a58e:	2001      	movs	r0, #1
 801a590:	f7f3 fbdc 	bl	800dd4c <mg_log_prefix>
 801a594:	4870      	ldr	r0, [pc, #448]	@ (801a758 <mg_tls_init+0x2cc>)
 801a596:	f7f3 fc29 	bl	800ddec <mg_log>
      return;
 801a59a:	e0c4      	b.n	801a726 <mg_tls_init+0x29a>
    }
  }

  if (opts->cert.buf == NULL) {
 801a59c:	683b      	ldr	r3, [r7, #0]
 801a59e:	689b      	ldr	r3, [r3, #8]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d10f      	bne.n	801a5c4 <mg_tls_init+0x138>
    MG_VERBOSE(("No certificate provided"));
 801a5a4:	4b69      	ldr	r3, [pc, #420]	@ (801a74c <mg_tls_init+0x2c0>)
 801a5a6:	681b      	ldr	r3, [r3, #0]
 801a5a8:	2b03      	cmp	r3, #3
 801a5aa:	f340 80be 	ble.w	801a72a <mg_tls_init+0x29e>
 801a5ae:	4b68      	ldr	r3, [pc, #416]	@ (801a750 <mg_tls_init+0x2c4>)
 801a5b0:	f243 02bc 	movw	r2, #12476	@ 0x30bc
 801a5b4:	4967      	ldr	r1, [pc, #412]	@ (801a754 <mg_tls_init+0x2c8>)
 801a5b6:	2004      	movs	r0, #4
 801a5b8:	f7f3 fbc8 	bl	800dd4c <mg_log_prefix>
 801a5bc:	4867      	ldr	r0, [pc, #412]	@ (801a75c <mg_tls_init+0x2d0>)
 801a5be:	f7f3 fc15 	bl	800ddec <mg_log>
    return;
 801a5c2:	e0b2      	b.n	801a72a <mg_tls_init+0x29e>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 801a5c4:	f107 031c 	add.w	r3, r7, #28
 801a5c8:	495f      	ldr	r1, [pc, #380]	@ (801a748 <mg_tls_init+0x2bc>)
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	f7fb fbbe 	bl	8015d4c <mg_str_s>
 801a5d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a5d2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 801a5d6:	6839      	ldr	r1, [r7, #0]
 801a5d8:	9300      	str	r3, [sp, #0]
 801a5da:	f107 031c 	add.w	r3, r7, #28
 801a5de:	cb0c      	ldmia	r3, {r2, r3}
 801a5e0:	3108      	adds	r1, #8
 801a5e2:	c903      	ldmia	r1, {r0, r1}
 801a5e4:	f7ff feb2 	bl	801a34c <mg_parse_pem>
 801a5e8:	4603      	mov	r3, r0
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	da0f      	bge.n	801a60e <mg_tls_init+0x182>
    MG_ERROR(("Failed to load certificate"));
 801a5ee:	4b57      	ldr	r3, [pc, #348]	@ (801a74c <mg_tls_init+0x2c0>)
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	f340 809b 	ble.w	801a72e <mg_tls_init+0x2a2>
 801a5f8:	4b55      	ldr	r3, [pc, #340]	@ (801a750 <mg_tls_init+0x2c4>)
 801a5fa:	f243 02c2 	movw	r2, #12482	@ 0x30c2
 801a5fe:	4955      	ldr	r1, [pc, #340]	@ (801a754 <mg_tls_init+0x2c8>)
 801a600:	2001      	movs	r0, #1
 801a602:	f7f3 fba3 	bl	800dd4c <mg_log_prefix>
 801a606:	4854      	ldr	r0, [pc, #336]	@ (801a758 <mg_tls_init+0x2cc>)
 801a608:	f7f3 fbf0 	bl	800ddec <mg_log>
    return;
 801a60c:	e08f      	b.n	801a72e <mg_tls_init+0x2a2>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 801a60e:	683b      	ldr	r3, [r7, #0]
 801a610:	691b      	ldr	r3, [r3, #16]
 801a612:	2b00      	cmp	r3, #0
 801a614:	d104      	bne.n	801a620 <mg_tls_init+0x194>
    mg_error(c, "Certificate provided without a private key");
 801a616:	4952      	ldr	r1, [pc, #328]	@ (801a760 <mg_tls_init+0x2d4>)
 801a618:	6878      	ldr	r0, [r7, #4]
 801a61a:	f7ed fe6b 	bl	80082f4 <mg_error>
    return;
 801a61e:	e08b      	b.n	801a738 <mg_tls_init+0x2ac>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 801a620:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a624:	494f      	ldr	r1, [pc, #316]	@ (801a764 <mg_tls_init+0x2d8>)
 801a626:	4618      	mov	r0, r3
 801a628:	f7fb fb90 	bl	8015d4c <mg_str_s>
 801a62c:	6839      	ldr	r1, [r7, #0]
 801a62e:	f107 030c 	add.w	r3, r7, #12
 801a632:	9300      	str	r3, [sp, #0]
 801a634:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801a638:	cb0c      	ldmia	r3, {r2, r3}
 801a63a:	3110      	adds	r1, #16
 801a63c:	c903      	ldmia	r1, {r0, r1}
 801a63e:	f7ff fe85 	bl	801a34c <mg_parse_pem>
 801a642:	4603      	mov	r3, r0
 801a644:	2b00      	cmp	r3, #0
 801a646:	d150      	bne.n	801a6ea <mg_tls_init+0x25e>
    if (key.len < 39) {
 801a648:	693b      	ldr	r3, [r7, #16]
 801a64a:	2b26      	cmp	r3, #38	@ 0x26
 801a64c:	d80e      	bhi.n	801a66c <mg_tls_init+0x1e0>
      MG_ERROR(("EC private key too short"));
 801a64e:	4b3f      	ldr	r3, [pc, #252]	@ (801a74c <mg_tls_init+0x2c0>)
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	2b00      	cmp	r3, #0
 801a654:	dd6d      	ble.n	801a732 <mg_tls_init+0x2a6>
 801a656:	4b3e      	ldr	r3, [pc, #248]	@ (801a750 <mg_tls_init+0x2c4>)
 801a658:	f243 02ce 	movw	r2, #12494	@ 0x30ce
 801a65c:	493d      	ldr	r1, [pc, #244]	@ (801a754 <mg_tls_init+0x2c8>)
 801a65e:	2001      	movs	r0, #1
 801a660:	f7f3 fb74 	bl	800dd4c <mg_log_prefix>
 801a664:	4840      	ldr	r0, [pc, #256]	@ (801a768 <mg_tls_init+0x2dc>)
 801a666:	f7f3 fbc1 	bl	800ddec <mg_log>
      return;
 801a66a:	e062      	b.n	801a732 <mg_tls_init+0x2a6>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 801a66c:	68fb      	ldr	r3, [r7, #12]
 801a66e:	781b      	ldrb	r3, [r3, #0]
 801a670:	2b30      	cmp	r3, #48	@ 0x30
 801a672:	d105      	bne.n	801a680 <mg_tls_init+0x1f4>
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	3301      	adds	r3, #1
 801a678:	781b      	ldrb	r3, [r3, #0]
 801a67a:	b25b      	sxtb	r3, r3
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	da0e      	bge.n	801a69e <mg_tls_init+0x212>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 801a680:	4b32      	ldr	r3, [pc, #200]	@ (801a74c <mg_tls_init+0x2c0>)
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	2b00      	cmp	r3, #0
 801a686:	dd56      	ble.n	801a736 <mg_tls_init+0x2aa>
 801a688:	4b31      	ldr	r3, [pc, #196]	@ (801a750 <mg_tls_init+0x2c4>)
 801a68a:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 801a68e:	4931      	ldr	r1, [pc, #196]	@ (801a754 <mg_tls_init+0x2c8>)
 801a690:	2001      	movs	r0, #1
 801a692:	f7f3 fb5b 	bl	800dd4c <mg_log_prefix>
 801a696:	4835      	ldr	r0, [pc, #212]	@ (801a76c <mg_tls_init+0x2e0>)
 801a698:	f7f3 fba8 	bl	800ddec <mg_log>
      return;
 801a69c:	e04b      	b.n	801a736 <mg_tls_init+0x2aa>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	3302      	adds	r3, #2
 801a6a2:	2205      	movs	r2, #5
 801a6a4:	4932      	ldr	r1, [pc, #200]	@ (801a770 <mg_tls_init+0x2e4>)
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	f00b f846 	bl	8025738 <memcmp>
 801a6ac:	4603      	mov	r3, r0
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d00d      	beq.n	801a6ce <mg_tls_init+0x242>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 801a6b2:	4b26      	ldr	r3, [pc, #152]	@ (801a74c <mg_tls_init+0x2c0>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	dd09      	ble.n	801a6ce <mg_tls_init+0x242>
 801a6ba:	4b25      	ldr	r3, [pc, #148]	@ (801a750 <mg_tls_init+0x2c4>)
 801a6bc:	f243 02d8 	movw	r2, #12504	@ 0x30d8
 801a6c0:	4924      	ldr	r1, [pc, #144]	@ (801a754 <mg_tls_init+0x2c8>)
 801a6c2:	2001      	movs	r0, #1
 801a6c4:	f7f3 fb42 	bl	800dd4c <mg_log_prefix>
 801a6c8:	482a      	ldr	r0, [pc, #168]	@ (801a774 <mg_tls_init+0x2e8>)
 801a6ca:	f7f3 fb8f 	bl	800ddec <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 801a6ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a6d0:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	3307      	adds	r3, #7
 801a6d8:	2220      	movs	r2, #32
 801a6da:	4619      	mov	r1, r3
 801a6dc:	f00b f83c 	bl	8025758 <memmove>
    free((void *) key.buf);
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	f00a fc9c 	bl	8025020 <free>
 801a6e8:	e026      	b.n	801a738 <mg_tls_init+0x2ac>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 801a6ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a6ee:	4922      	ldr	r1, [pc, #136]	@ (801a778 <mg_tls_init+0x2ec>)
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	f7fb fb2b 	bl	8015d4c <mg_str_s>
 801a6f6:	6839      	ldr	r1, [r7, #0]
 801a6f8:	f107 030c 	add.w	r3, r7, #12
 801a6fc:	9300      	str	r3, [sp, #0]
 801a6fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a702:	cb0c      	ldmia	r3, {r2, r3}
 801a704:	3110      	adds	r1, #16
 801a706:	c903      	ldmia	r1, {r0, r1}
 801a708:	f7ff fe20 	bl	801a34c <mg_parse_pem>
 801a70c:	4603      	mov	r3, r0
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d104      	bne.n	801a71c <mg_tls_init+0x290>
    mg_error(c, "PKCS8 private key format is not supported");
 801a712:	491a      	ldr	r1, [pc, #104]	@ (801a77c <mg_tls_init+0x2f0>)
 801a714:	6878      	ldr	r0, [r7, #4]
 801a716:	f7ed fded 	bl	80082f4 <mg_error>
 801a71a:	e00d      	b.n	801a738 <mg_tls_init+0x2ac>
  } else {
    mg_error(c, "Expected EC PRIVATE KEY or PRIVATE KEY");
 801a71c:	4918      	ldr	r1, [pc, #96]	@ (801a780 <mg_tls_init+0x2f4>)
 801a71e:	6878      	ldr	r0, [r7, #4]
 801a720:	f7ed fde8 	bl	80082f4 <mg_error>
 801a724:	e008      	b.n	801a738 <mg_tls_init+0x2ac>
      return;
 801a726:	bf00      	nop
 801a728:	e006      	b.n	801a738 <mg_tls_init+0x2ac>
    return;
 801a72a:	bf00      	nop
 801a72c:	e004      	b.n	801a738 <mg_tls_init+0x2ac>
    return;
 801a72e:	bf00      	nop
 801a730:	e002      	b.n	801a738 <mg_tls_init+0x2ac>
      return;
 801a732:	bf00      	nop
 801a734:	e000      	b.n	801a738 <mg_tls_init+0x2ac>
      return;
 801a736:	bf00      	nop
  }
}
 801a738:	3738      	adds	r7, #56	@ 0x38
 801a73a:	46bd      	mov	sp, r7
 801a73c:	bd80      	pop	{r7, pc}
 801a73e:	bf00      	nop
 801a740:	08028ab4 	.word	0x08028ab4
 801a744:	08028abc 	.word	0x08028abc
 801a748:	08028ad0 	.word	0x08028ad0
 801a74c:	24000258 	.word	0x24000258
 801a750:	0802a3a8 	.word	0x0802a3a8
 801a754:	080264c4 	.word	0x080264c4
 801a758:	08028adc 	.word	0x08028adc
 801a75c:	08028af8 	.word	0x08028af8
 801a760:	08028b10 	.word	0x08028b10
 801a764:	08028b3c 	.word	0x08028b3c
 801a768:	08028b4c 	.word	0x08028b4c
 801a76c:	08028b68 	.word	0x08028b68
 801a770:	08028b8c 	.word	0x08028b8c
 801a774:	08028b94 	.word	0x08028b94
 801a778:	08028bb4 	.word	0x08028bb4
 801a77c:	08028bc0 	.word	0x08028bc0
 801a780:	08028bec 	.word	0x08028bec

0801a784 <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 801a784:	b580      	push	{r7, lr}
 801a786:	b084      	sub	sp, #16
 801a788:	af00      	add	r7, sp, #0
 801a78a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a792:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	2b00      	cmp	r3, #0
 801a798:	d010      	beq.n	801a7bc <mg_tls_free+0x38>
    mg_iobuf_free(&tls->send);
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	3304      	adds	r3, #4
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f7f2 fc53 	bl	800d04a <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 801a7a4:	68fb      	ldr	r3, [r7, #12]
 801a7a6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801a7aa:	4618      	mov	r0, r3
 801a7ac:	f00a fc38 	bl	8025020 <free>
    free((void *) tls->ca_der.buf);
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801a7b6:	4618      	mov	r0, r3
 801a7b8:	f00a fc32 	bl	8025020 <free>
  }
  free(c->tls);
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	f00a fc2c 	bl	8025020 <free>
  c->tls = NULL;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	2200      	movs	r2, #0
 801a7cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 801a7d0:	bf00      	nop
 801a7d2:	3710      	adds	r7, #16
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd80      	pop	{r7, pc}

0801a7d8 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 801a7d8:	b590      	push	{r4, r7, lr}
 801a7da:	b08d      	sub	sp, #52	@ 0x34
 801a7dc:	af04      	add	r7, sp, #16
 801a7de:	60f8      	str	r0, [r7, #12]
 801a7e0:	60b9      	str	r1, [r7, #8]
 801a7e2:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a7ea:	61bb      	str	r3, [r7, #24]
  long n = MG_IO_WAIT;
 801a7ec:	f06f 0301 	mvn.w	r3, #1
 801a7f0:	61fb      	str	r3, [r7, #28]
  bool was_throttled = c->is_tls_throttled;  // see #3074
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801a7f8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801a7fc:	b2db      	uxtb	r3, r3
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	bf14      	ite	ne
 801a802:	2301      	movne	r3, #1
 801a804:	2300      	moveq	r3, #0
 801a806:	75fb      	strb	r3, [r7, #23]
  if (!was_throttled) {                      // encrypt new data
 801a808:	7dfb      	ldrb	r3, [r7, #23]
 801a80a:	f083 0301 	eor.w	r3, r3, #1
 801a80e:	b2db      	uxtb	r3, r3
 801a810:	2b00      	cmp	r3, #0
 801a812:	d01b      	beq.n	801a84c <mg_tls_send+0x74>
    if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a81a:	d902      	bls.n	801a822 <mg_tls_send+0x4a>
 801a81c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801a820:	607b      	str	r3, [r7, #4]
    if (len > 16384) len = 16384;
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801a828:	d902      	bls.n	801a830 <mg_tls_send+0x58>
 801a82a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a82e:	607b      	str	r3, [r7, #4]
    mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 801a830:	2317      	movs	r3, #23
 801a832:	687a      	ldr	r2, [r7, #4]
 801a834:	68b9      	ldr	r1, [r7, #8]
 801a836:	68f8      	ldr	r0, [r7, #12]
 801a838:	f7fc fd30 	bl	801729c <mg_tls_encrypt>
  }  // else, resend outstanding encrypted data in tls->send
  while (tls->send.len > 0 &&
 801a83c:	e006      	b.n	801a84c <mg_tls_send+0x74>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801a83e:	69bb      	ldr	r3, [r7, #24]
 801a840:	3304      	adds	r3, #4
 801a842:	69fa      	ldr	r2, [r7, #28]
 801a844:	2100      	movs	r1, #0
 801a846:	4618      	mov	r0, r3
 801a848:	f7f2 fbb4 	bl	800cfb4 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801a84c:	69bb      	ldr	r3, [r7, #24]
 801a84e:	68db      	ldr	r3, [r3, #12]
 801a850:	2b00      	cmp	r3, #0
 801a852:	d00b      	beq.n	801a86c <mg_tls_send+0x94>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801a854:	69bb      	ldr	r3, [r7, #24]
 801a856:	6859      	ldr	r1, [r3, #4]
 801a858:	69bb      	ldr	r3, [r7, #24]
 801a85a:	68db      	ldr	r3, [r3, #12]
 801a85c:	461a      	mov	r2, r3
 801a85e:	68f8      	ldr	r0, [r7, #12]
 801a860:	f7f5 fe6a 	bl	8010538 <mg_io_send>
 801a864:	61f8      	str	r0, [r7, #28]
  while (tls->send.len > 0 &&
 801a866:	69fb      	ldr	r3, [r7, #28]
 801a868:	2b00      	cmp	r3, #0
 801a86a:	dce8      	bgt.n	801a83e <mg_tls_send+0x66>
  } // if last chunk fails to be sent, it needs to be flushed
  c->is_tls_throttled = (tls->send.len > 0 && n == MG_IO_WAIT);
 801a86c:	69bb      	ldr	r3, [r7, #24]
 801a86e:	68db      	ldr	r3, [r3, #12]
 801a870:	2b00      	cmp	r3, #0
 801a872:	d005      	beq.n	801a880 <mg_tls_send+0xa8>
 801a874:	69fb      	ldr	r3, [r7, #28]
 801a876:	f113 0f02 	cmn.w	r3, #2
 801a87a:	d101      	bne.n	801a880 <mg_tls_send+0xa8>
 801a87c:	2301      	movs	r3, #1
 801a87e:	e000      	b.n	801a882 <mg_tls_send+0xaa>
 801a880:	2300      	movs	r3, #0
 801a882:	f003 0301 	and.w	r3, r3, #1
 801a886:	b2d9      	uxtb	r1, r3
 801a888:	68fa      	ldr	r2, [r7, #12]
 801a88a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801a88e:	f361 13c7 	bfi	r3, r1, #7, #1
 801a892:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  MG_VERBOSE(("%lu %ld %ld %ld %c %c", c->id, (long) len, (long) tls->send.len,
 801a896:	4b1e      	ldr	r3, [pc, #120]	@ (801a910 <mg_tls_send+0x138>)
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	2b03      	cmp	r3, #3
 801a89c:	dd26      	ble.n	801a8ec <mg_tls_send+0x114>
 801a89e:	4b1d      	ldr	r3, [pc, #116]	@ (801a914 <mg_tls_send+0x13c>)
 801a8a0:	f243 02fc 	movw	r2, #12540	@ 0x30fc
 801a8a4:	491c      	ldr	r1, [pc, #112]	@ (801a918 <mg_tls_send+0x140>)
 801a8a6:	2004      	movs	r0, #4
 801a8a8:	f7f3 fa50 	bl	800dd4c <mg_log_prefix>
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801a8b0:	6878      	ldr	r0, [r7, #4]
 801a8b2:	69bb      	ldr	r3, [r7, #24]
 801a8b4:	68db      	ldr	r3, [r3, #12]
 801a8b6:	461c      	mov	r4, r3
 801a8b8:	7dfb      	ldrb	r3, [r7, #23]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d001      	beq.n	801a8c2 <mg_tls_send+0xea>
 801a8be:	2354      	movs	r3, #84	@ 0x54
 801a8c0:	e000      	b.n	801a8c4 <mg_tls_send+0xec>
 801a8c2:	2374      	movs	r3, #116	@ 0x74
 801a8c4:	68fa      	ldr	r2, [r7, #12]
 801a8c6:	f892 20ad 	ldrb.w	r2, [r2, #173]	@ 0xad
 801a8ca:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 801a8ce:	b2d2      	uxtb	r2, r2
 801a8d0:	2a00      	cmp	r2, #0
 801a8d2:	d001      	beq.n	801a8d8 <mg_tls_send+0x100>
 801a8d4:	2254      	movs	r2, #84	@ 0x54
 801a8d6:	e000      	b.n	801a8da <mg_tls_send+0x102>
 801a8d8:	2274      	movs	r2, #116	@ 0x74
 801a8da:	9202      	str	r2, [sp, #8]
 801a8dc:	9301      	str	r3, [sp, #4]
 801a8de:	69fb      	ldr	r3, [r7, #28]
 801a8e0:	9300      	str	r3, [sp, #0]
 801a8e2:	4623      	mov	r3, r4
 801a8e4:	4602      	mov	r2, r0
 801a8e6:	480d      	ldr	r0, [pc, #52]	@ (801a91c <mg_tls_send+0x144>)
 801a8e8:	f7f3 fa80 	bl	800ddec <mg_log>
              n, was_throttled ? 'T' : 't', c->is_tls_throttled ? 'T' : 't'));
  if (n == MG_IO_ERR) return MG_IO_ERR;
 801a8ec:	69fb      	ldr	r3, [r7, #28]
 801a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a8f2:	d102      	bne.n	801a8fa <mg_tls_send+0x122>
 801a8f4:	f04f 33ff 	mov.w	r3, #4294967295
 801a8f8:	e006      	b.n	801a908 <mg_tls_send+0x130>
  if (was_throttled) return MG_IO_WAIT;  // sent throttled data instead
 801a8fa:	7dfb      	ldrb	r3, [r7, #23]
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d002      	beq.n	801a906 <mg_tls_send+0x12e>
 801a900:	f06f 0301 	mvn.w	r3, #1
 801a904:	e000      	b.n	801a908 <mg_tls_send+0x130>
  return (long) len;  // return len even when throttled, already encripted that
 801a906:	687b      	ldr	r3, [r7, #4]
}
 801a908:	4618      	mov	r0, r3
 801a90a:	3724      	adds	r7, #36	@ 0x24
 801a90c:	46bd      	mov	sp, r7
 801a90e:	bd90      	pop	{r4, r7, pc}
 801a910:	24000258 	.word	0x24000258
 801a914:	0802a3b4 	.word	0x0802a3b4
 801a918:	080264c4 	.word	0x080264c4
 801a91c:	08028c14 	.word	0x08028c14

0801a920 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 801a920:	b580      	push	{r7, lr}
 801a922:	b088      	sub	sp, #32
 801a924:	af00      	add	r7, sp, #0
 801a926:	60f8      	str	r0, [r7, #12]
 801a928:	60b9      	str	r1, [r7, #8]
 801a92a:	607a      	str	r2, [r7, #4]
  int r = 0;
 801a92c:	2300      	movs	r3, #0
 801a92e:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a936:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 801a938:	68f8      	ldr	r0, [r7, #12]
 801a93a:	f7fc fdab 	bl	8017494 <mg_tls_recv_record>
 801a93e:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 801a940:	69fb      	ldr	r3, [r7, #28]
 801a942:	2b00      	cmp	r3, #0
 801a944:	da01      	bge.n	801a94a <mg_tls_recv+0x2a>
    return r;
 801a946:	69fb      	ldr	r3, [r7, #28]
 801a948:	e03a      	b.n	801a9c0 <mg_tls_recv+0xa0>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801a94e:	69bb      	ldr	r3, [r7, #24]
 801a950:	695b      	ldr	r3, [r3, #20]
 801a952:	4413      	add	r3, r2
 801a954:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 801a956:	69bb      	ldr	r3, [r7, #24]
 801a958:	7f1b      	ldrb	r3, [r3, #28]
 801a95a:	2b17      	cmp	r3, #23
 801a95c:	d008      	beq.n	801a970 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 801a95e:	69bb      	ldr	r3, [r7, #24]
 801a960:	2200      	movs	r2, #0
 801a962:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 801a964:	68f8      	ldr	r0, [r7, #12]
 801a966:	f7fc f926 	bl	8016bb6 <mg_tls_drop_record>
    return MG_IO_WAIT;
 801a96a:	f06f 0301 	mvn.w	r3, #1
 801a96e:	e027      	b.n	801a9c0 <mg_tls_recv+0xa0>
  }
  if (buf == NULL || len == 0) return 0L;
 801a970:	68bb      	ldr	r3, [r7, #8]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d002      	beq.n	801a97c <mg_tls_recv+0x5c>
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d101      	bne.n	801a980 <mg_tls_recv+0x60>
 801a97c:	2300      	movs	r3, #0
 801a97e:	e01f      	b.n	801a9c0 <mg_tls_recv+0xa0>
  minlen = len < tls->recv_len ? len : tls->recv_len;
 801a980:	69bb      	ldr	r3, [r7, #24]
 801a982:	699b      	ldr	r3, [r3, #24]
 801a984:	687a      	ldr	r2, [r7, #4]
 801a986:	4293      	cmp	r3, r2
 801a988:	bf28      	it	cs
 801a98a:	4613      	movcs	r3, r2
 801a98c:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 801a98e:	693a      	ldr	r2, [r7, #16]
 801a990:	6979      	ldr	r1, [r7, #20]
 801a992:	68b8      	ldr	r0, [r7, #8]
 801a994:	f00a fee0 	bl	8025758 <memmove>
  tls->recv_offset += minlen;
 801a998:	69bb      	ldr	r3, [r7, #24]
 801a99a:	695a      	ldr	r2, [r3, #20]
 801a99c:	693b      	ldr	r3, [r7, #16]
 801a99e:	441a      	add	r2, r3
 801a9a0:	69bb      	ldr	r3, [r7, #24]
 801a9a2:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 801a9a4:	69bb      	ldr	r3, [r7, #24]
 801a9a6:	699a      	ldr	r2, [r3, #24]
 801a9a8:	693b      	ldr	r3, [r7, #16]
 801a9aa:	1ad2      	subs	r2, r2, r3
 801a9ac:	69bb      	ldr	r3, [r7, #24]
 801a9ae:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 801a9b0:	69bb      	ldr	r3, [r7, #24]
 801a9b2:	699b      	ldr	r3, [r3, #24]
 801a9b4:	2b00      	cmp	r3, #0
 801a9b6:	d102      	bne.n	801a9be <mg_tls_recv+0x9e>
    mg_tls_drop_record(c);
 801a9b8:	68f8      	ldr	r0, [r7, #12]
 801a9ba:	f7fc f8fc 	bl	8016bb6 <mg_tls_drop_record>
  }
  return (long) minlen;
 801a9be:	693b      	ldr	r3, [r7, #16]
}
 801a9c0:	4618      	mov	r0, r3
 801a9c2:	3720      	adds	r7, #32
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	bd80      	pop	{r7, pc}

0801a9c8 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 801a9c8:	b480      	push	{r7}
 801a9ca:	b085      	sub	sp, #20
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801a9d6:	60fb      	str	r3, [r7, #12]
  return tls != NULL ? tls->recv_len : 0;
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d002      	beq.n	801a9e4 <mg_tls_pending+0x1c>
 801a9de:	68fb      	ldr	r3, [r7, #12]
 801a9e0:	699b      	ldr	r3, [r3, #24]
 801a9e2:	e000      	b.n	801a9e6 <mg_tls_pending+0x1e>
 801a9e4:	2300      	movs	r3, #0
}
 801a9e6:	4618      	mov	r0, r3
 801a9e8:	3714      	adds	r7, #20
 801a9ea:	46bd      	mov	sp, r7
 801a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f0:	4770      	bx	lr

0801a9f2 <mg_tls_flush>:

void mg_tls_flush(struct mg_connection *c) {
 801a9f2:	b580      	push	{r7, lr}
 801a9f4:	b084      	sub	sp, #16
 801a9f6:	af00      	add	r7, sp, #0
 801a9f8:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801aa00:	60fb      	str	r3, [r7, #12]
  long n;
  while (tls->send.len > 0 &&
 801aa02:	e006      	b.n	801aa12 <mg_tls_flush+0x20>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 801aa04:	68fb      	ldr	r3, [r7, #12]
 801aa06:	3304      	adds	r3, #4
 801aa08:	68ba      	ldr	r2, [r7, #8]
 801aa0a:	2100      	movs	r1, #0
 801aa0c:	4618      	mov	r0, r3
 801aa0e:	f7f2 fad1 	bl	800cfb4 <mg_iobuf_del>
  while (tls->send.len > 0 &&
 801aa12:	68fb      	ldr	r3, [r7, #12]
 801aa14:	68db      	ldr	r3, [r3, #12]
 801aa16:	2b00      	cmp	r3, #0
 801aa18:	d00b      	beq.n	801aa32 <mg_tls_flush+0x40>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 801aa1a:	68fb      	ldr	r3, [r7, #12]
 801aa1c:	6859      	ldr	r1, [r3, #4]
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	68db      	ldr	r3, [r3, #12]
 801aa22:	461a      	mov	r2, r3
 801aa24:	6878      	ldr	r0, [r7, #4]
 801aa26:	f7f5 fd87 	bl	8010538 <mg_io_send>
 801aa2a:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	dce8      	bgt.n	801aa04 <mg_tls_flush+0x12>
  }
}
 801aa32:	bf00      	nop
 801aa34:	3710      	adds	r7, #16
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}

0801aa3a <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 801aa3a:	b480      	push	{r7}
 801aa3c:	b083      	sub	sp, #12
 801aa3e:	af00      	add	r7, sp, #0
 801aa40:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 801aa42:	bf00      	nop
 801aa44:	370c      	adds	r7, #12
 801aa46:	46bd      	mov	sp, r7
 801aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa4c:	4770      	bx	lr
	...

0801aa50 <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 801aa50:	b480      	push	{r7}
 801aa52:	b085      	sub	sp, #20
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	60f8      	str	r0, [r7, #12]
 801aa58:	60b9      	str	r1, [r7, #8]
 801aa5a:	607a      	str	r2, [r7, #4]
 801aa5c:	603b      	str	r3, [r7, #0]
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
#endif
  state[0] = 0x61707865;
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	4a2b      	ldr	r2, [pc, #172]	@ (801ab10 <initialize_state+0xc0>)
 801aa62:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	3304      	adds	r3, #4
 801aa68:	4a2a      	ldr	r2, [pc, #168]	@ (801ab14 <initialize_state+0xc4>)
 801aa6a:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	3308      	adds	r3, #8
 801aa70:	4a29      	ldr	r2, [pc, #164]	@ (801ab18 <initialize_state+0xc8>)
 801aa72:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 801aa74:	68fb      	ldr	r3, [r7, #12]
 801aa76:	330c      	adds	r3, #12
 801aa78:	4a28      	ldr	r2, [pc, #160]	@ (801ab1c <initialize_state+0xcc>)
 801aa7a:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	3310      	adds	r3, #16
 801aa80:	68ba      	ldr	r2, [r7, #8]
 801aa82:	6812      	ldr	r2, [r2, #0]
 801aa84:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	3314      	adds	r3, #20
 801aa8a:	68ba      	ldr	r2, [r7, #8]
 801aa8c:	3204      	adds	r2, #4
 801aa8e:	6812      	ldr	r2, [r2, #0]
 801aa90:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	3318      	adds	r3, #24
 801aa96:	68ba      	ldr	r2, [r7, #8]
 801aa98:	3208      	adds	r2, #8
 801aa9a:	6812      	ldr	r2, [r2, #0]
 801aa9c:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	331c      	adds	r3, #28
 801aaa2:	68ba      	ldr	r2, [r7, #8]
 801aaa4:	320c      	adds	r2, #12
 801aaa6:	6812      	ldr	r2, [r2, #0]
 801aaa8:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	3320      	adds	r3, #32
 801aaae:	68ba      	ldr	r2, [r7, #8]
 801aab0:	3210      	adds	r2, #16
 801aab2:	6812      	ldr	r2, [r2, #0]
 801aab4:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 801aab6:	68fb      	ldr	r3, [r7, #12]
 801aab8:	3324      	adds	r3, #36	@ 0x24
 801aaba:	68ba      	ldr	r2, [r7, #8]
 801aabc:	3214      	adds	r2, #20
 801aabe:	6812      	ldr	r2, [r2, #0]
 801aac0:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	3328      	adds	r3, #40	@ 0x28
 801aac6:	68ba      	ldr	r2, [r7, #8]
 801aac8:	3218      	adds	r2, #24
 801aaca:	6812      	ldr	r2, [r2, #0]
 801aacc:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	332c      	adds	r3, #44	@ 0x2c
 801aad2:	68ba      	ldr	r2, [r7, #8]
 801aad4:	321c      	adds	r2, #28
 801aad6:	6812      	ldr	r2, [r2, #0]
 801aad8:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	3330      	adds	r3, #48	@ 0x30
 801aade:	683a      	ldr	r2, [r7, #0]
 801aae0:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	3334      	adds	r3, #52	@ 0x34
 801aae6:	687a      	ldr	r2, [r7, #4]
 801aae8:	6812      	ldr	r2, [r2, #0]
 801aaea:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	3338      	adds	r3, #56	@ 0x38
 801aaf0:	687a      	ldr	r2, [r7, #4]
 801aaf2:	3204      	adds	r2, #4
 801aaf4:	6812      	ldr	r2, [r2, #0]
 801aaf6:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 801aaf8:	68fb      	ldr	r3, [r7, #12]
 801aafa:	333c      	adds	r3, #60	@ 0x3c
 801aafc:	687a      	ldr	r2, [r7, #4]
 801aafe:	3208      	adds	r2, #8
 801ab00:	6812      	ldr	r2, [r2, #0]
 801ab02:	601a      	str	r2, [r3, #0]
}
 801ab04:	bf00      	nop
 801ab06:	3714      	adds	r7, #20
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0e:	4770      	bx	lr
 801ab10:	61707865 	.word	0x61707865
 801ab14:	3320646e 	.word	0x3320646e
 801ab18:	79622d32 	.word	0x79622d32
 801ab1c:	6b206574 	.word	0x6b206574

0801ab20 <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 801ab20:	b480      	push	{r7}
 801ab22:	b095      	sub	sp, #84	@ 0x54
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	6078      	str	r0, [r7, #4]
 801ab28:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	681b      	ldr	r3, [r3, #0]
 801ab2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	3304      	adds	r3, #4
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	647b      	str	r3, [r7, #68]	@ 0x44
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	3308      	adds	r3, #8
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	643b      	str	r3, [r7, #64]	@ 0x40
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	330c      	adds	r3, #12
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	3310      	adds	r3, #16
 801ab4c:	681b      	ldr	r3, [r3, #0]
 801ab4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	3314      	adds	r3, #20
 801ab54:	681b      	ldr	r3, [r3, #0]
 801ab56:	637b      	str	r3, [r7, #52]	@ 0x34
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	3318      	adds	r3, #24
 801ab5c:	681b      	ldr	r3, [r3, #0]
 801ab5e:	633b      	str	r3, [r7, #48]	@ 0x30
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	331c      	adds	r3, #28
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	3320      	adds	r3, #32
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	3324      	adds	r3, #36	@ 0x24
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	627b      	str	r3, [r7, #36]	@ 0x24
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	3328      	adds	r3, #40	@ 0x28
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	623b      	str	r3, [r7, #32]
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	332c      	adds	r3, #44	@ 0x2c
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	61fb      	str	r3, [r7, #28]
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	3330      	adds	r3, #48	@ 0x30
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	61bb      	str	r3, [r7, #24]
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	3334      	adds	r3, #52	@ 0x34
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	617b      	str	r3, [r7, #20]
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	3338      	adds	r3, #56	@ 0x38
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	613b      	str	r3, [r7, #16]
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	333c      	adds	r3, #60	@ 0x3c
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 801aba8:	2300      	movs	r3, #0
 801abaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801abac:	e182      	b.n	801aeb4 <core_block+0x394>
    __Q(0, 4, 8, 12);
 801abae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801abb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abb2:	4413      	add	r3, r2
 801abb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801abb6:	69ba      	ldr	r2, [r7, #24]
 801abb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801abba:	4053      	eors	r3, r2
 801abbc:	61bb      	str	r3, [r7, #24]
 801abbe:	69bb      	ldr	r3, [r7, #24]
 801abc0:	ea4f 4333 	mov.w	r3, r3, ror #16
 801abc4:	61bb      	str	r3, [r7, #24]
 801abc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801abc8:	69bb      	ldr	r3, [r7, #24]
 801abca:	4413      	add	r3, r2
 801abcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801abce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801abd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801abd2:	4053      	eors	r3, r2
 801abd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801abd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abd8:	ea4f 5333 	mov.w	r3, r3, ror #20
 801abdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801abde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801abe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801abe2:	4413      	add	r3, r2
 801abe4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801abe6:	69ba      	ldr	r2, [r7, #24]
 801abe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801abea:	4053      	eors	r3, r2
 801abec:	61bb      	str	r3, [r7, #24]
 801abee:	69bb      	ldr	r3, [r7, #24]
 801abf0:	ea4f 6333 	mov.w	r3, r3, ror #24
 801abf4:	61bb      	str	r3, [r7, #24]
 801abf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801abf8:	69bb      	ldr	r3, [r7, #24]
 801abfa:	4413      	add	r3, r2
 801abfc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801abfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ac00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac02:	4053      	eors	r3, r2
 801ac04:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ac06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ac08:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ac0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 801ac0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ac10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac12:	4413      	add	r3, r2
 801ac14:	647b      	str	r3, [r7, #68]	@ 0x44
 801ac16:	697a      	ldr	r2, [r7, #20]
 801ac18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ac1a:	4053      	eors	r3, r2
 801ac1c:	617b      	str	r3, [r7, #20]
 801ac1e:	697b      	ldr	r3, [r7, #20]
 801ac20:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ac24:	617b      	str	r3, [r7, #20]
 801ac26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ac28:	697b      	ldr	r3, [r7, #20]
 801ac2a:	4413      	add	r3, r2
 801ac2c:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ac30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac32:	4053      	eors	r3, r2
 801ac34:	637b      	str	r3, [r7, #52]	@ 0x34
 801ac36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac38:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ac3c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ac3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ac40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac42:	4413      	add	r3, r2
 801ac44:	647b      	str	r3, [r7, #68]	@ 0x44
 801ac46:	697a      	ldr	r2, [r7, #20]
 801ac48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ac4a:	4053      	eors	r3, r2
 801ac4c:	617b      	str	r3, [r7, #20]
 801ac4e:	697b      	ldr	r3, [r7, #20]
 801ac50:	ea4f 6333 	mov.w	r3, r3, ror #24
 801ac54:	617b      	str	r3, [r7, #20]
 801ac56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ac58:	697b      	ldr	r3, [r7, #20]
 801ac5a:	4413      	add	r3, r2
 801ac5c:	627b      	str	r3, [r7, #36]	@ 0x24
 801ac5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac62:	4053      	eors	r3, r2
 801ac64:	637b      	str	r3, [r7, #52]	@ 0x34
 801ac66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ac68:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ac6c:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 801ac6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ac70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac72:	4413      	add	r3, r2
 801ac74:	643b      	str	r3, [r7, #64]	@ 0x40
 801ac76:	693a      	ldr	r2, [r7, #16]
 801ac78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ac7a:	4053      	eors	r3, r2
 801ac7c:	613b      	str	r3, [r7, #16]
 801ac7e:	693b      	ldr	r3, [r7, #16]
 801ac80:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ac84:	613b      	str	r3, [r7, #16]
 801ac86:	6a3a      	ldr	r2, [r7, #32]
 801ac88:	693b      	ldr	r3, [r7, #16]
 801ac8a:	4413      	add	r3, r2
 801ac8c:	623b      	str	r3, [r7, #32]
 801ac8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ac90:	6a3b      	ldr	r3, [r7, #32]
 801ac92:	4053      	eors	r3, r2
 801ac94:	633b      	str	r3, [r7, #48]	@ 0x30
 801ac96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ac98:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ac9c:	633b      	str	r3, [r7, #48]	@ 0x30
 801ac9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aca2:	4413      	add	r3, r2
 801aca4:	643b      	str	r3, [r7, #64]	@ 0x40
 801aca6:	693a      	ldr	r2, [r7, #16]
 801aca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801acaa:	4053      	eors	r3, r2
 801acac:	613b      	str	r3, [r7, #16]
 801acae:	693b      	ldr	r3, [r7, #16]
 801acb0:	ea4f 6333 	mov.w	r3, r3, ror #24
 801acb4:	613b      	str	r3, [r7, #16]
 801acb6:	6a3a      	ldr	r2, [r7, #32]
 801acb8:	693b      	ldr	r3, [r7, #16]
 801acba:	4413      	add	r3, r2
 801acbc:	623b      	str	r3, [r7, #32]
 801acbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801acc0:	6a3b      	ldr	r3, [r7, #32]
 801acc2:	4053      	eors	r3, r2
 801acc4:	633b      	str	r3, [r7, #48]	@ 0x30
 801acc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801acc8:	ea4f 6373 	mov.w	r3, r3, ror #25
 801accc:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 801acce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801acd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acd2:	4413      	add	r3, r2
 801acd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801acd6:	68fa      	ldr	r2, [r7, #12]
 801acd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801acda:	4053      	eors	r3, r2
 801acdc:	60fb      	str	r3, [r7, #12]
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ace4:	60fb      	str	r3, [r7, #12]
 801ace6:	69fa      	ldr	r2, [r7, #28]
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	4413      	add	r3, r2
 801acec:	61fb      	str	r3, [r7, #28]
 801acee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801acf0:	69fb      	ldr	r3, [r7, #28]
 801acf2:	4053      	eors	r3, r2
 801acf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801acf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acf8:	ea4f 5333 	mov.w	r3, r3, ror #20
 801acfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801acfe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ad00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad02:	4413      	add	r3, r2
 801ad04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ad06:	68fa      	ldr	r2, [r7, #12]
 801ad08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ad0a:	4053      	eors	r3, r2
 801ad0c:	60fb      	str	r3, [r7, #12]
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	ea4f 6333 	mov.w	r3, r3, ror #24
 801ad14:	60fb      	str	r3, [r7, #12]
 801ad16:	69fa      	ldr	r2, [r7, #28]
 801ad18:	68fb      	ldr	r3, [r7, #12]
 801ad1a:	4413      	add	r3, r2
 801ad1c:	61fb      	str	r3, [r7, #28]
 801ad1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad20:	69fb      	ldr	r3, [r7, #28]
 801ad22:	4053      	eors	r3, r2
 801ad24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ad26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad28:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ad2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 801ad2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ad30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad32:	4413      	add	r3, r2
 801ad34:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ad36:	68fa      	ldr	r2, [r7, #12]
 801ad38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ad3a:	4053      	eors	r3, r2
 801ad3c:	60fb      	str	r3, [r7, #12]
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ad44:	60fb      	str	r3, [r7, #12]
 801ad46:	6a3a      	ldr	r2, [r7, #32]
 801ad48:	68fb      	ldr	r3, [r7, #12]
 801ad4a:	4413      	add	r3, r2
 801ad4c:	623b      	str	r3, [r7, #32]
 801ad4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ad50:	6a3b      	ldr	r3, [r7, #32]
 801ad52:	4053      	eors	r3, r2
 801ad54:	637b      	str	r3, [r7, #52]	@ 0x34
 801ad56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad58:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ad5c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ad5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ad60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad62:	4413      	add	r3, r2
 801ad64:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ad66:	68fa      	ldr	r2, [r7, #12]
 801ad68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ad6a:	4053      	eors	r3, r2
 801ad6c:	60fb      	str	r3, [r7, #12]
 801ad6e:	68fb      	ldr	r3, [r7, #12]
 801ad70:	ea4f 6333 	mov.w	r3, r3, ror #24
 801ad74:	60fb      	str	r3, [r7, #12]
 801ad76:	6a3a      	ldr	r2, [r7, #32]
 801ad78:	68fb      	ldr	r3, [r7, #12]
 801ad7a:	4413      	add	r3, r2
 801ad7c:	623b      	str	r3, [r7, #32]
 801ad7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ad80:	6a3b      	ldr	r3, [r7, #32]
 801ad82:	4053      	eors	r3, r2
 801ad84:	637b      	str	r3, [r7, #52]	@ 0x34
 801ad86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ad88:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ad8c:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 801ad8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ad90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad92:	4413      	add	r3, r2
 801ad94:	647b      	str	r3, [r7, #68]	@ 0x44
 801ad96:	69ba      	ldr	r2, [r7, #24]
 801ad98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ad9a:	4053      	eors	r3, r2
 801ad9c:	61bb      	str	r3, [r7, #24]
 801ad9e:	69bb      	ldr	r3, [r7, #24]
 801ada0:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ada4:	61bb      	str	r3, [r7, #24]
 801ada6:	69fa      	ldr	r2, [r7, #28]
 801ada8:	69bb      	ldr	r3, [r7, #24]
 801adaa:	4413      	add	r3, r2
 801adac:	61fb      	str	r3, [r7, #28]
 801adae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801adb0:	69fb      	ldr	r3, [r7, #28]
 801adb2:	4053      	eors	r3, r2
 801adb4:	633b      	str	r3, [r7, #48]	@ 0x30
 801adb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adb8:	ea4f 5333 	mov.w	r3, r3, ror #20
 801adbc:	633b      	str	r3, [r7, #48]	@ 0x30
 801adbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801adc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adc2:	4413      	add	r3, r2
 801adc4:	647b      	str	r3, [r7, #68]	@ 0x44
 801adc6:	69ba      	ldr	r2, [r7, #24]
 801adc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801adca:	4053      	eors	r3, r2
 801adcc:	61bb      	str	r3, [r7, #24]
 801adce:	69bb      	ldr	r3, [r7, #24]
 801add0:	ea4f 6333 	mov.w	r3, r3, ror #24
 801add4:	61bb      	str	r3, [r7, #24]
 801add6:	69fa      	ldr	r2, [r7, #28]
 801add8:	69bb      	ldr	r3, [r7, #24]
 801adda:	4413      	add	r3, r2
 801addc:	61fb      	str	r3, [r7, #28]
 801adde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ade0:	69fb      	ldr	r3, [r7, #28]
 801ade2:	4053      	eors	r3, r2
 801ade4:	633b      	str	r3, [r7, #48]	@ 0x30
 801ade6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ade8:	ea4f 6373 	mov.w	r3, r3, ror #25
 801adec:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 801adee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801adf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801adf2:	4413      	add	r3, r2
 801adf4:	643b      	str	r3, [r7, #64]	@ 0x40
 801adf6:	697a      	ldr	r2, [r7, #20]
 801adf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801adfa:	4053      	eors	r3, r2
 801adfc:	617b      	str	r3, [r7, #20]
 801adfe:	697b      	ldr	r3, [r7, #20]
 801ae00:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ae04:	617b      	str	r3, [r7, #20]
 801ae06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ae08:	697b      	ldr	r3, [r7, #20]
 801ae0a:	4413      	add	r3, r2
 801ae0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ae0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae12:	4053      	eors	r3, r2
 801ae14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ae16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae18:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ae1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ae1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801ae20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae22:	4413      	add	r3, r2
 801ae24:	643b      	str	r3, [r7, #64]	@ 0x40
 801ae26:	697a      	ldr	r2, [r7, #20]
 801ae28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ae2a:	4053      	eors	r3, r2
 801ae2c:	617b      	str	r3, [r7, #20]
 801ae2e:	697b      	ldr	r3, [r7, #20]
 801ae30:	ea4f 6333 	mov.w	r3, r3, ror #24
 801ae34:	617b      	str	r3, [r7, #20]
 801ae36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801ae38:	697b      	ldr	r3, [r7, #20]
 801ae3a:	4413      	add	r3, r2
 801ae3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ae3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ae40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae42:	4053      	eors	r3, r2
 801ae44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ae46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ae48:	ea4f 6373 	mov.w	r3, r3, ror #25
 801ae4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 801ae4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae52:	4413      	add	r3, r2
 801ae54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ae56:	693a      	ldr	r2, [r7, #16]
 801ae58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ae5a:	4053      	eors	r3, r2
 801ae5c:	613b      	str	r3, [r7, #16]
 801ae5e:	693b      	ldr	r3, [r7, #16]
 801ae60:	ea4f 4333 	mov.w	r3, r3, ror #16
 801ae64:	613b      	str	r3, [r7, #16]
 801ae66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae68:	693b      	ldr	r3, [r7, #16]
 801ae6a:	4413      	add	r3, r2
 801ae6c:	627b      	str	r3, [r7, #36]	@ 0x24
 801ae6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ae70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae72:	4053      	eors	r3, r2
 801ae74:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ae76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae78:	ea4f 5333 	mov.w	r3, r3, ror #20
 801ae7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801ae7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ae80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ae82:	4413      	add	r3, r2
 801ae84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ae86:	693a      	ldr	r2, [r7, #16]
 801ae88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ae8a:	4053      	eors	r3, r2
 801ae8c:	613b      	str	r3, [r7, #16]
 801ae8e:	693b      	ldr	r3, [r7, #16]
 801ae90:	ea4f 6333 	mov.w	r3, r3, ror #24
 801ae94:	613b      	str	r3, [r7, #16]
 801ae96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ae98:	693b      	ldr	r3, [r7, #16]
 801ae9a:	4413      	add	r3, r2
 801ae9c:	627b      	str	r3, [r7, #36]	@ 0x24
 801ae9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801aea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aea2:	4053      	eors	r3, r2
 801aea4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801aea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aea8:	ea4f 6373 	mov.w	r3, r3, ror #25
 801aeac:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 801aeae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aeb0:	3301      	adds	r3, #1
 801aeb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801aeb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aeb6:	2b09      	cmp	r3, #9
 801aeb8:	f77f ae79 	ble.w	801abae <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	681a      	ldr	r2, [r3, #0]
 801aec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aec2:	441a      	add	r2, r3
 801aec4:	683b      	ldr	r3, [r7, #0]
 801aec6:	601a      	str	r2, [r3, #0]
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	3304      	adds	r3, #4
 801aecc:	6819      	ldr	r1, [r3, #0]
 801aece:	683b      	ldr	r3, [r7, #0]
 801aed0:	3304      	adds	r3, #4
 801aed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801aed4:	440a      	add	r2, r1
 801aed6:	601a      	str	r2, [r3, #0]
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	3308      	adds	r3, #8
 801aedc:	6819      	ldr	r1, [r3, #0]
 801aede:	683b      	ldr	r3, [r7, #0]
 801aee0:	3308      	adds	r3, #8
 801aee2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aee4:	440a      	add	r2, r1
 801aee6:	601a      	str	r2, [r3, #0]
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	330c      	adds	r3, #12
 801aeec:	6819      	ldr	r1, [r3, #0]
 801aeee:	683b      	ldr	r3, [r7, #0]
 801aef0:	330c      	adds	r3, #12
 801aef2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801aef4:	440a      	add	r2, r1
 801aef6:	601a      	str	r2, [r3, #0]
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	3310      	adds	r3, #16
 801aefc:	6819      	ldr	r1, [r3, #0]
 801aefe:	683b      	ldr	r3, [r7, #0]
 801af00:	3310      	adds	r3, #16
 801af02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801af04:	440a      	add	r2, r1
 801af06:	601a      	str	r2, [r3, #0]
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	3314      	adds	r3, #20
 801af0c:	6819      	ldr	r1, [r3, #0]
 801af0e:	683b      	ldr	r3, [r7, #0]
 801af10:	3314      	adds	r3, #20
 801af12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801af14:	440a      	add	r2, r1
 801af16:	601a      	str	r2, [r3, #0]
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	3318      	adds	r3, #24
 801af1c:	6819      	ldr	r1, [r3, #0]
 801af1e:	683b      	ldr	r3, [r7, #0]
 801af20:	3318      	adds	r3, #24
 801af22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801af24:	440a      	add	r2, r1
 801af26:	601a      	str	r2, [r3, #0]
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	331c      	adds	r3, #28
 801af2c:	6819      	ldr	r1, [r3, #0]
 801af2e:	683b      	ldr	r3, [r7, #0]
 801af30:	331c      	adds	r3, #28
 801af32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801af34:	440a      	add	r2, r1
 801af36:	601a      	str	r2, [r3, #0]
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	3320      	adds	r3, #32
 801af3c:	6819      	ldr	r1, [r3, #0]
 801af3e:	683b      	ldr	r3, [r7, #0]
 801af40:	3320      	adds	r3, #32
 801af42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801af44:	440a      	add	r2, r1
 801af46:	601a      	str	r2, [r3, #0]
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	3324      	adds	r3, #36	@ 0x24
 801af4c:	6819      	ldr	r1, [r3, #0]
 801af4e:	683b      	ldr	r3, [r7, #0]
 801af50:	3324      	adds	r3, #36	@ 0x24
 801af52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801af54:	440a      	add	r2, r1
 801af56:	601a      	str	r2, [r3, #0]
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	3328      	adds	r3, #40	@ 0x28
 801af5c:	6819      	ldr	r1, [r3, #0]
 801af5e:	683b      	ldr	r3, [r7, #0]
 801af60:	3328      	adds	r3, #40	@ 0x28
 801af62:	6a3a      	ldr	r2, [r7, #32]
 801af64:	440a      	add	r2, r1
 801af66:	601a      	str	r2, [r3, #0]
 801af68:	687b      	ldr	r3, [r7, #4]
 801af6a:	332c      	adds	r3, #44	@ 0x2c
 801af6c:	6819      	ldr	r1, [r3, #0]
 801af6e:	683b      	ldr	r3, [r7, #0]
 801af70:	332c      	adds	r3, #44	@ 0x2c
 801af72:	69fa      	ldr	r2, [r7, #28]
 801af74:	440a      	add	r2, r1
 801af76:	601a      	str	r2, [r3, #0]
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	3330      	adds	r3, #48	@ 0x30
 801af7c:	6819      	ldr	r1, [r3, #0]
 801af7e:	683b      	ldr	r3, [r7, #0]
 801af80:	3330      	adds	r3, #48	@ 0x30
 801af82:	69ba      	ldr	r2, [r7, #24]
 801af84:	440a      	add	r2, r1
 801af86:	601a      	str	r2, [r3, #0]
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	3334      	adds	r3, #52	@ 0x34
 801af8c:	6819      	ldr	r1, [r3, #0]
 801af8e:	683b      	ldr	r3, [r7, #0]
 801af90:	3334      	adds	r3, #52	@ 0x34
 801af92:	697a      	ldr	r2, [r7, #20]
 801af94:	440a      	add	r2, r1
 801af96:	601a      	str	r2, [r3, #0]
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	3338      	adds	r3, #56	@ 0x38
 801af9c:	6819      	ldr	r1, [r3, #0]
 801af9e:	683b      	ldr	r3, [r7, #0]
 801afa0:	3338      	adds	r3, #56	@ 0x38
 801afa2:	693a      	ldr	r2, [r7, #16]
 801afa4:	440a      	add	r2, r1
 801afa6:	601a      	str	r2, [r3, #0]
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	333c      	adds	r3, #60	@ 0x3c
 801afac:	6819      	ldr	r1, [r3, #0]
 801afae:	683b      	ldr	r3, [r7, #0]
 801afb0:	333c      	adds	r3, #60	@ 0x3c
 801afb2:	68fa      	ldr	r2, [r7, #12]
 801afb4:	440a      	add	r2, r1
 801afb6:	601a      	str	r2, [r3, #0]
}
 801afb8:	bf00      	nop
 801afba:	3754      	adds	r7, #84	@ 0x54
 801afbc:	46bd      	mov	sp, r7
 801afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afc2:	4770      	bx	lr

0801afc4 <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 801afc4:	b480      	push	{r7}
 801afc6:	b089      	sub	sp, #36	@ 0x24
 801afc8:	af00      	add	r7, sp, #0
 801afca:	60f8      	str	r0, [r7, #12]
 801afcc:	60b9      	str	r1, [r7, #8]
 801afce:	607a      	str	r2, [r7, #4]
 801afd0:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 801afd2:	683b      	ldr	r3, [r7, #0]
 801afd4:	089b      	lsrs	r3, r3, #2
 801afd6:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 801afd8:	2300      	movs	r3, #0
 801afda:	61fb      	str	r3, [r7, #28]
 801afdc:	e016      	b.n	801b00c <xor_block+0x48>
 801afde:	69fb      	ldr	r3, [r7, #28]
 801afe0:	009b      	lsls	r3, r3, #2
 801afe2:	68ba      	ldr	r2, [r7, #8]
 801afe4:	4413      	add	r3, r2
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	617b      	str	r3, [r7, #20]
 801afea:	69fb      	ldr	r3, [r7, #28]
 801afec:	009b      	lsls	r3, r3, #2
 801afee:	687a      	ldr	r2, [r7, #4]
 801aff0:	4413      	add	r3, r2
 801aff2:	681a      	ldr	r2, [r3, #0]
 801aff4:	697b      	ldr	r3, [r7, #20]
 801aff6:	4053      	eors	r3, r2
 801aff8:	617b      	str	r3, [r7, #20]
 801affa:	69fb      	ldr	r3, [r7, #28]
 801affc:	009b      	lsls	r3, r3, #2
 801affe:	68fa      	ldr	r2, [r7, #12]
 801b000:	4413      	add	r3, r2
 801b002:	697a      	ldr	r2, [r7, #20]
 801b004:	601a      	str	r2, [r3, #0]
 801b006:	69fb      	ldr	r3, [r7, #28]
 801b008:	3301      	adds	r3, #1
 801b00a:	61fb      	str	r3, [r7, #28]
 801b00c:	69fa      	ldr	r2, [r7, #28]
 801b00e:	69bb      	ldr	r3, [r7, #24]
 801b010:	429a      	cmp	r2, r3
 801b012:	d3e4      	bcc.n	801afde <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 801b014:	69bb      	ldr	r3, [r7, #24]
 801b016:	009b      	lsls	r3, r3, #2
 801b018:	68fa      	ldr	r2, [r7, #12]
 801b01a:	4413      	add	r3, r2
 801b01c:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 801b01e:	69bb      	ldr	r3, [r7, #24]
 801b020:	009b      	lsls	r3, r3, #2
 801b022:	68ba      	ldr	r2, [r7, #8]
 801b024:	4413      	add	r3, r2
 801b026:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 801b028:	69bb      	ldr	r3, [r7, #24]
 801b02a:	009b      	lsls	r3, r3, #2
 801b02c:	687a      	ldr	r2, [r7, #4]
 801b02e:	4413      	add	r3, r2
 801b030:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 801b032:	683b      	ldr	r3, [r7, #0]
 801b034:	f003 0303 	and.w	r3, r3, #3
 801b038:	2b03      	cmp	r3, #3
 801b03a:	d026      	beq.n	801b08a <xor_block+0xc6>
 801b03c:	2b03      	cmp	r3, #3
 801b03e:	d846      	bhi.n	801b0ce <xor_block+0x10a>
 801b040:	2b01      	cmp	r3, #1
 801b042:	d002      	beq.n	801b04a <xor_block+0x86>
 801b044:	2b02      	cmp	r3, #2
 801b046:	d00a      	beq.n	801b05e <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 801b048:	e041      	b.n	801b0ce <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801b04a:	68bb      	ldr	r3, [r7, #8]
 801b04c:	781a      	ldrb	r2, [r3, #0]
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	b2db      	uxtb	r3, r3
 801b054:	4053      	eors	r3, r2
 801b056:	b2da      	uxtb	r2, r3
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	701a      	strb	r2, [r3, #0]
      break;
 801b05c:	e037      	b.n	801b0ce <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801b05e:	68bb      	ldr	r3, [r7, #8]
 801b060:	781a      	ldrb	r2, [r3, #0]
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	b2db      	uxtb	r3, r3
 801b068:	4053      	eors	r3, r2
 801b06a:	b2da      	uxtb	r2, r3
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801b070:	68bb      	ldr	r3, [r7, #8]
 801b072:	3301      	adds	r3, #1
 801b074:	7819      	ldrb	r1, [r3, #0]
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	0a1b      	lsrs	r3, r3, #8
 801b07c:	b2da      	uxtb	r2, r3
 801b07e:	68fb      	ldr	r3, [r7, #12]
 801b080:	3301      	adds	r3, #1
 801b082:	404a      	eors	r2, r1
 801b084:	b2d2      	uxtb	r2, r2
 801b086:	701a      	strb	r2, [r3, #0]
      break;
 801b088:	e021      	b.n	801b0ce <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801b08a:	68bb      	ldr	r3, [r7, #8]
 801b08c:	781a      	ldrb	r2, [r3, #0]
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	b2db      	uxtb	r3, r3
 801b094:	4053      	eors	r3, r2
 801b096:	b2da      	uxtb	r2, r3
 801b098:	68fb      	ldr	r3, [r7, #12]
 801b09a:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801b09c:	68bb      	ldr	r3, [r7, #8]
 801b09e:	3301      	adds	r3, #1
 801b0a0:	7819      	ldrb	r1, [r3, #0]
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	681b      	ldr	r3, [r3, #0]
 801b0a6:	0a1b      	lsrs	r3, r3, #8
 801b0a8:	b2da      	uxtb	r2, r3
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	3301      	adds	r3, #1
 801b0ae:	404a      	eors	r2, r1
 801b0b0:	b2d2      	uxtb	r2, r2
 801b0b2:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 801b0b4:	68bb      	ldr	r3, [r7, #8]
 801b0b6:	3302      	adds	r3, #2
 801b0b8:	7819      	ldrb	r1, [r3, #0]
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	0c1b      	lsrs	r3, r3, #16
 801b0c0:	b2da      	uxtb	r2, r3
 801b0c2:	68fb      	ldr	r3, [r7, #12]
 801b0c4:	3302      	adds	r3, #2
 801b0c6:	404a      	eors	r2, r1
 801b0c8:	b2d2      	uxtb	r2, r2
 801b0ca:	701a      	strb	r2, [r3, #0]
      break;
 801b0cc:	bf00      	nop
}
 801b0ce:	bf00      	nop
 801b0d0:	3724      	adds	r7, #36	@ 0x24
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d8:	4770      	bx	lr

0801b0da <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 801b0da:	b580      	push	{r7, lr}
 801b0dc:	b0aa      	sub	sp, #168	@ 0xa8
 801b0de:	af00      	add	r7, sp, #0
 801b0e0:	60f8      	str	r0, [r7, #12]
 801b0e2:	60b9      	str	r1, [r7, #8]
 801b0e4:	607a      	str	r2, [r7, #4]
 801b0e6:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	099b      	lsrs	r3, r3, #6
 801b0ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 801b0f0:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801b0f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801b0f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801b0fc:	6839      	ldr	r1, [r7, #0]
 801b0fe:	f7ff fca7 	bl	801aa50 <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 801b102:	2300      	movs	r3, #0
 801b104:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801b108:	e03c      	b.n	801b184 <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 801b10a:	f107 0218 	add.w	r2, r7, #24
 801b10e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b112:	4611      	mov	r1, r2
 801b114:	4618      	mov	r0, r3
 801b116:	f7ff fd03 	bl	801ab20 <core_block>
    increment_counter(state);
 801b11a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801b11e:	3301      	adds	r3, #1
 801b120:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 801b124:	2300      	movs	r3, #0
 801b126:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801b12a:	e01c      	b.n	801b166 <chacha20_xor_stream+0x8c>
 801b12c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b130:	009b      	lsls	r3, r3, #2
 801b132:	68ba      	ldr	r2, [r7, #8]
 801b134:	4413      	add	r3, r2
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	617b      	str	r3, [r7, #20]
 801b13a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b13e:	009b      	lsls	r3, r3, #2
 801b140:	f107 0218 	add.w	r2, r7, #24
 801b144:	4413      	add	r3, r2
 801b146:	681a      	ldr	r2, [r3, #0]
 801b148:	697b      	ldr	r3, [r7, #20]
 801b14a:	4053      	eors	r3, r2
 801b14c:	617b      	str	r3, [r7, #20]
 801b14e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b152:	009b      	lsls	r3, r3, #2
 801b154:	68fa      	ldr	r2, [r7, #12]
 801b156:	4413      	add	r3, r2
 801b158:	697a      	ldr	r2, [r7, #20]
 801b15a:	601a      	str	r2, [r3, #0]
 801b15c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b160:	3301      	adds	r3, #1
 801b162:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801b166:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801b16a:	2b0f      	cmp	r3, #15
 801b16c:	d9de      	bls.n	801b12c <chacha20_xor_stream+0x52>
 801b16e:	68fb      	ldr	r3, [r7, #12]
 801b170:	3340      	adds	r3, #64	@ 0x40
 801b172:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 801b174:	68bb      	ldr	r3, [r7, #8]
 801b176:	3340      	adds	r3, #64	@ 0x40
 801b178:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 801b17a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801b17e:	3301      	adds	r3, #1
 801b180:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801b184:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801b188:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801b18c:	429a      	cmp	r2, r3
 801b18e:	d3bc      	bcc.n	801b10a <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801b196:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 801b19a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d00f      	beq.n	801b1c2 <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 801b1a2:	f107 0218 	add.w	r2, r7, #24
 801b1a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801b1aa:	4611      	mov	r1, r2
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	f7ff fcb7 	bl	801ab20 <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 801b1b2:	f107 0218 	add.w	r2, r7, #24
 801b1b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801b1ba:	68b9      	ldr	r1, [r7, #8]
 801b1bc:	68f8      	ldr	r0, [r7, #12]
 801b1be:	f7ff ff01 	bl	801afc4 <xor_block>
  }
}
 801b1c2:	bf00      	nop
 801b1c4:	37a8      	adds	r7, #168	@ 0xa8
 801b1c6:	46bd      	mov	sp, r7
 801b1c8:	bd80      	pop	{r7, pc}

0801b1ca <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 801b1ca:	b580      	push	{r7, lr}
 801b1cc:	b0a4      	sub	sp, #144	@ 0x90
 801b1ce:	af00      	add	r7, sp, #0
 801b1d0:	60f8      	str	r0, [r7, #12]
 801b1d2:	60b9      	str	r1, [r7, #8]
 801b1d4:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 801b1d6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801b1da:	2300      	movs	r3, #0
 801b1dc:	687a      	ldr	r2, [r7, #4]
 801b1de:	68b9      	ldr	r1, [r7, #8]
 801b1e0:	f7ff fc36 	bl	801aa50 <initialize_state>
  core_block(state, result);
 801b1e4:	f107 0210 	add.w	r2, r7, #16
 801b1e8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801b1ec:	4611      	mov	r1, r2
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	f7ff fc96 	bl	801ab20 <core_block>
  serialize(poly_key, result);
 801b1f4:	f107 0310 	add.w	r3, r7, #16
 801b1f8:	2220      	movs	r2, #32
 801b1fa:	4619      	mov	r1, r3
 801b1fc:	68f8      	ldr	r0, [r7, #12]
 801b1fe:	f00a fbfa 	bl	80259f6 <memcpy>
  (void) i;
}
 801b202:	bf00      	nop
 801b204:	3790      	adds	r7, #144	@ 0x90
 801b206:	46bd      	mov	sp, r7
 801b208:	bd80      	pop	{r7, pc}

0801b20a <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 801b20a:	b480      	push	{r7}
 801b20c:	b083      	sub	sp, #12
 801b20e:	af00      	add	r7, sp, #0
 801b210:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	781b      	ldrb	r3, [r3, #0]
 801b216:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	3301      	adds	r3, #1
 801b21c:	781b      	ldrb	r3, [r3, #0]
 801b21e:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 801b220:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	3302      	adds	r3, #2
 801b226:	781b      	ldrb	r3, [r3, #0]
 801b228:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 801b22a:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	3303      	adds	r3, #3
 801b230:	781b      	ldrb	r3, [r3, #0]
 801b232:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 801b234:	4313      	orrs	r3, r2
}
 801b236:	4618      	mov	r0, r3
 801b238:	370c      	adds	r7, #12
 801b23a:	46bd      	mov	sp, r7
 801b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b240:	4770      	bx	lr

0801b242 <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 801b242:	b480      	push	{r7}
 801b244:	b083      	sub	sp, #12
 801b246:	af00      	add	r7, sp, #0
 801b248:	6078      	str	r0, [r7, #4]
 801b24a:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 801b24c:	683b      	ldr	r3, [r7, #0]
 801b24e:	b2da      	uxtb	r2, r3
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 801b254:	683b      	ldr	r3, [r7, #0]
 801b256:	0a1a      	lsrs	r2, r3, #8
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	3301      	adds	r3, #1
 801b25c:	b2d2      	uxtb	r2, r2
 801b25e:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 801b260:	683b      	ldr	r3, [r7, #0]
 801b262:	0c1a      	lsrs	r2, r3, #16
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	3302      	adds	r3, #2
 801b268:	b2d2      	uxtb	r2, r2
 801b26a:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 801b26c:	683b      	ldr	r3, [r7, #0]
 801b26e:	0e1a      	lsrs	r2, r3, #24
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	3303      	adds	r3, #3
 801b274:	b2d2      	uxtb	r2, r2
 801b276:	701a      	strb	r2, [r3, #0]
}
 801b278:	bf00      	nop
 801b27a:	370c      	adds	r7, #12
 801b27c:	46bd      	mov	sp, r7
 801b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b282:	4770      	bx	lr

0801b284 <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 801b284:	b580      	push	{r7, lr}
 801b286:	b084      	sub	sp, #16
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]
 801b28c:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 801b292:	6838      	ldr	r0, [r7, #0]
 801b294:	f7ff ffb9 	bl	801b20a <U8TO32>
 801b298:	4603      	mov	r3, r0
 801b29a:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 801b2a2:	683b      	ldr	r3, [r7, #0]
 801b2a4:	3303      	adds	r3, #3
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	f7ff ffaf 	bl	801b20a <U8TO32>
 801b2ac:	4603      	mov	r3, r0
 801b2ae:	089a      	lsrs	r2, r3, #2
 801b2b0:	4b2f      	ldr	r3, [pc, #188]	@ (801b370 <poly1305_init+0xec>)
 801b2b2:	4013      	ands	r3, r2
 801b2b4:	68fa      	ldr	r2, [r7, #12]
 801b2b6:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 801b2b8:	683b      	ldr	r3, [r7, #0]
 801b2ba:	3306      	adds	r3, #6
 801b2bc:	4618      	mov	r0, r3
 801b2be:	f7ff ffa4 	bl	801b20a <U8TO32>
 801b2c2:	4603      	mov	r3, r0
 801b2c4:	091a      	lsrs	r2, r3, #4
 801b2c6:	4b2b      	ldr	r3, [pc, #172]	@ (801b374 <poly1305_init+0xf0>)
 801b2c8:	4013      	ands	r3, r2
 801b2ca:	68fa      	ldr	r2, [r7, #12]
 801b2cc:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 801b2ce:	683b      	ldr	r3, [r7, #0]
 801b2d0:	3309      	adds	r3, #9
 801b2d2:	4618      	mov	r0, r3
 801b2d4:	f7ff ff99 	bl	801b20a <U8TO32>
 801b2d8:	4603      	mov	r3, r0
 801b2da:	099a      	lsrs	r2, r3, #6
 801b2dc:	4b26      	ldr	r3, [pc, #152]	@ (801b378 <poly1305_init+0xf4>)
 801b2de:	4013      	ands	r3, r2
 801b2e0:	68fa      	ldr	r2, [r7, #12]
 801b2e2:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 801b2e4:	683b      	ldr	r3, [r7, #0]
 801b2e6:	330c      	adds	r3, #12
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	f7ff ff8e 	bl	801b20a <U8TO32>
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	0a1b      	lsrs	r3, r3, #8
 801b2f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 801b2fa:	68fb      	ldr	r3, [r7, #12]
 801b2fc:	2200      	movs	r2, #0
 801b2fe:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	2200      	movs	r2, #0
 801b304:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801b306:	68fb      	ldr	r3, [r7, #12]
 801b308:	2200      	movs	r2, #0
 801b30a:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801b30c:	68fb      	ldr	r3, [r7, #12]
 801b30e:	2200      	movs	r2, #0
 801b310:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	2200      	movs	r2, #0
 801b316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 801b318:	683b      	ldr	r3, [r7, #0]
 801b31a:	3310      	adds	r3, #16
 801b31c:	4618      	mov	r0, r3
 801b31e:	f7ff ff74 	bl	801b20a <U8TO32>
 801b322:	4602      	mov	r2, r0
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	3314      	adds	r3, #20
 801b32c:	4618      	mov	r0, r3
 801b32e:	f7ff ff6c 	bl	801b20a <U8TO32>
 801b332:	4602      	mov	r2, r0
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 801b338:	683b      	ldr	r3, [r7, #0]
 801b33a:	3318      	adds	r3, #24
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7ff ff64 	bl	801b20a <U8TO32>
 801b342:	4602      	mov	r2, r0
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 801b348:	683b      	ldr	r3, [r7, #0]
 801b34a:	331c      	adds	r3, #28
 801b34c:	4618      	mov	r0, r3
 801b34e:	f7ff ff5c 	bl	801b20a <U8TO32>
 801b352:	4602      	mov	r2, r0
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	2200      	movs	r2, #0
 801b35c:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	2200      	movs	r2, #0
 801b362:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 801b366:	bf00      	nop
 801b368:	3710      	adds	r7, #16
 801b36a:	46bd      	mov	sp, r7
 801b36c:	bd80      	pop	{r7, pc}
 801b36e:	bf00      	nop
 801b370:	03ffff03 	.word	0x03ffff03
 801b374:	03ffc0ff 	.word	0x03ffc0ff
 801b378:	03f03fff 	.word	0x03f03fff

0801b37c <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 801b37c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b380:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 801b384:	af00      	add	r7, sp, #0
 801b386:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 801b38a:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 801b38e:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 801b392:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b396:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d001      	beq.n	801b3a2 <poly1305_blocks+0x26>
 801b39e:	2300      	movs	r3, #0
 801b3a0:	e001      	b.n	801b3a6 <poly1305_blocks+0x2a>
 801b3a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801b3a6:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 801b3aa:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 801b3b4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b3b8:	685b      	ldr	r3, [r3, #4]
 801b3ba:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 801b3be:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b3c2:	689b      	ldr	r3, [r3, #8]
 801b3c4:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 801b3c8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b3cc:	68db      	ldr	r3, [r3, #12]
 801b3ce:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 801b3d2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b3d6:	691b      	ldr	r3, [r3, #16]
 801b3d8:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 801b3dc:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 801b3e0:	4613      	mov	r3, r2
 801b3e2:	009b      	lsls	r3, r3, #2
 801b3e4:	4413      	add	r3, r2
 801b3e6:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 801b3ea:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801b3ee:	4613      	mov	r3, r2
 801b3f0:	009b      	lsls	r3, r3, #2
 801b3f2:	4413      	add	r3, r2
 801b3f4:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 801b3f8:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 801b3fc:	4613      	mov	r3, r2
 801b3fe:	009b      	lsls	r3, r3, #2
 801b400:	4413      	add	r3, r2
 801b402:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 801b406:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 801b40a:	4613      	mov	r3, r2
 801b40c:	009b      	lsls	r3, r3, #2
 801b40e:	4413      	add	r3, r2
 801b410:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 801b414:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b418:	695b      	ldr	r3, [r3, #20]
 801b41a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 801b41e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b422:	699b      	ldr	r3, [r3, #24]
 801b424:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 801b428:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b42c:	69db      	ldr	r3, [r3, #28]
 801b42e:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 801b432:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b436:	6a1b      	ldr	r3, [r3, #32]
 801b438:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 801b43c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801b440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b442:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 801b446:	f000 be78 	b.w	801c13a <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 801b44a:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 801b44e:	f7ff fedc 	bl	801b20a <U8TO32>
 801b452:	4603      	mov	r3, r0
 801b454:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b458:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801b45c:	4413      	add	r3, r2
 801b45e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 801b462:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801b466:	3303      	adds	r3, #3
 801b468:	4618      	mov	r0, r3
 801b46a:	f7ff fece 	bl	801b20a <U8TO32>
 801b46e:	4603      	mov	r3, r0
 801b470:	089b      	lsrs	r3, r3, #2
 801b472:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b476:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801b47a:	4413      	add	r3, r2
 801b47c:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 801b480:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801b484:	3306      	adds	r3, #6
 801b486:	4618      	mov	r0, r3
 801b488:	f7ff febf 	bl	801b20a <U8TO32>
 801b48c:	4603      	mov	r3, r0
 801b48e:	091b      	lsrs	r3, r3, #4
 801b490:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b494:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801b498:	4413      	add	r3, r2
 801b49a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 801b49e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801b4a2:	3309      	adds	r3, #9
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7ff feb0 	bl	801b20a <U8TO32>
 801b4aa:	4603      	mov	r3, r0
 801b4ac:	099b      	lsrs	r3, r3, #6
 801b4ae:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801b4b2:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801b4b6:	4413      	add	r3, r2
 801b4b8:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 801b4bc:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801b4c0:	330c      	adds	r3, #12
 801b4c2:	4618      	mov	r0, r3
 801b4c4:	f7ff fea1 	bl	801b20a <U8TO32>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	0a1a      	lsrs	r2, r3, #8
 801b4cc:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 801b4d0:	431a      	orrs	r2, r3
 801b4d2:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801b4d6:	4413      	add	r3, r2
 801b4d8:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801b4dc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801b4e0:	2200      	movs	r2, #0
 801b4e2:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 801b4e6:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 801b4ea:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 801b4f4:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 801b4f8:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 801b4fc:	460b      	mov	r3, r1
 801b4fe:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 801b502:	fb02 f203 	mul.w	r2, r2, r3
 801b506:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801b50a:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 801b50e:	4601      	mov	r1, r0
 801b510:	fb01 f303 	mul.w	r3, r1, r3
 801b514:	4413      	add	r3, r2
 801b516:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801b51a:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 801b51e:	fba2 1201 	umull	r1, r2, r2, r1
 801b522:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 801b526:	460a      	mov	r2, r1
 801b528:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 801b52c:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 801b530:	4413      	add	r3, r2
 801b532:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 801b536:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801b53a:	2200      	movs	r2, #0
 801b53c:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 801b540:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 801b544:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801b548:	2200      	movs	r2, #0
 801b54a:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 801b54e:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 801b552:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 801b556:	460b      	mov	r3, r1
 801b558:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 801b55c:	fb02 f203 	mul.w	r2, r2, r3
 801b560:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 801b564:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 801b568:	4601      	mov	r1, r0
 801b56a:	fb01 f303 	mul.w	r3, r1, r3
 801b56e:	4413      	add	r3, r2
 801b570:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 801b574:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 801b578:	fba2 1201 	umull	r1, r2, r2, r1
 801b57c:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 801b580:	460a      	mov	r2, r1
 801b582:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 801b586:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 801b58a:	4413      	add	r3, r2
 801b58c:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 801b590:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 801b594:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 801b598:	4602      	mov	r2, r0
 801b59a:	189b      	adds	r3, r3, r2
 801b59c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801b5a0:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 801b5a4:	460a      	mov	r2, r1
 801b5a6:	4153      	adcs	r3, r2
 801b5a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801b5ac:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801b5b0:	2200      	movs	r2, #0
 801b5b2:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 801b5b6:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 801b5ba:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801b5be:	2200      	movs	r2, #0
 801b5c0:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 801b5c4:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 801b5c8:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 801b5cc:	460b      	mov	r3, r1
 801b5ce:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 801b5d2:	fb02 f203 	mul.w	r2, r2, r3
 801b5d6:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 801b5da:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 801b5de:	4601      	mov	r1, r0
 801b5e0:	fb01 f303 	mul.w	r3, r1, r3
 801b5e4:	4413      	add	r3, r2
 801b5e6:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 801b5ea:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 801b5ee:	fba2 1201 	umull	r1, r2, r2, r1
 801b5f2:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 801b5f6:	460a      	mov	r2, r1
 801b5f8:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 801b5fc:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 801b600:	4413      	add	r3, r2
 801b602:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801b606:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801b60a:	2200      	movs	r2, #0
 801b60c:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 801b610:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 801b614:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801b618:	2200      	movs	r2, #0
 801b61a:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 801b61e:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 801b622:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 801b626:	460b      	mov	r3, r1
 801b628:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 801b62c:	fb02 f203 	mul.w	r2, r2, r3
 801b630:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 801b634:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 801b638:	4601      	mov	r1, r0
 801b63a:	fb01 f303 	mul.w	r3, r1, r3
 801b63e:	4413      	add	r3, r2
 801b640:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 801b644:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 801b648:	fba2 1201 	umull	r1, r2, r2, r1
 801b64c:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 801b650:	460a      	mov	r2, r1
 801b652:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 801b656:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 801b65a:	4413      	add	r3, r2
 801b65c:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 801b660:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 801b664:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 801b668:	4602      	mov	r2, r0
 801b66a:	189b      	adds	r3, r3, r2
 801b66c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801b66e:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 801b672:	460a      	mov	r2, r1
 801b674:	4153      	adcs	r3, r2
 801b676:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801b678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801b67c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801b680:	4602      	mov	r2, r0
 801b682:	189b      	adds	r3, r3, r2
 801b684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801b688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801b68c:	460a      	mov	r2, r1
 801b68e:	4153      	adcs	r3, r2
 801b690:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801b694:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801b698:	2200      	movs	r2, #0
 801b69a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 801b69e:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 801b6a2:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 801b6a6:	2200      	movs	r2, #0
 801b6a8:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 801b6ac:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 801b6b0:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 801b6b4:	460b      	mov	r3, r1
 801b6b6:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 801b6ba:	fb02 f203 	mul.w	r2, r2, r3
 801b6be:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 801b6c2:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 801b6c6:	4601      	mov	r1, r0
 801b6c8:	fb01 f303 	mul.w	r3, r1, r3
 801b6cc:	4413      	add	r3, r2
 801b6ce:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 801b6d2:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 801b6d6:	fba2 1201 	umull	r1, r2, r2, r1
 801b6da:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 801b6de:	460a      	mov	r2, r1
 801b6e0:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 801b6e4:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 801b6e8:	4413      	add	r3, r2
 801b6ea:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801b6ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801b6f2:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 801b6f6:	4602      	mov	r2, r0
 801b6f8:	189b      	adds	r3, r3, r2
 801b6fa:	643b      	str	r3, [r7, #64]	@ 0x40
 801b6fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801b700:	460a      	mov	r2, r1
 801b702:	4153      	adcs	r3, r2
 801b704:	647b      	str	r3, [r7, #68]	@ 0x44
 801b706:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801b70a:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801b70e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801b712:	2200      	movs	r2, #0
 801b714:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 801b718:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 801b71c:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801b720:	2200      	movs	r2, #0
 801b722:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 801b726:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 801b72a:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 801b72e:	460b      	mov	r3, r1
 801b730:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 801b734:	fb02 f203 	mul.w	r2, r2, r3
 801b738:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 801b73c:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 801b740:	4601      	mov	r1, r0
 801b742:	fb01 f303 	mul.w	r3, r1, r3
 801b746:	4413      	add	r3, r2
 801b748:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 801b74c:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 801b750:	fba2 1201 	umull	r1, r2, r2, r1
 801b754:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 801b758:	460a      	mov	r2, r1
 801b75a:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 801b75e:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 801b762:	4413      	add	r3, r2
 801b764:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 801b768:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801b76c:	2200      	movs	r2, #0
 801b76e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 801b772:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 801b776:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801b77a:	2200      	movs	r2, #0
 801b77c:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 801b780:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 801b784:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 801b788:	460b      	mov	r3, r1
 801b78a:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 801b78e:	fb02 f203 	mul.w	r2, r2, r3
 801b792:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 801b796:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 801b79a:	4601      	mov	r1, r0
 801b79c:	fb01 f303 	mul.w	r3, r1, r3
 801b7a0:	4413      	add	r3, r2
 801b7a2:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 801b7a6:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801b7aa:	fba2 1201 	umull	r1, r2, r2, r1
 801b7ae:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 801b7b2:	460a      	mov	r2, r1
 801b7b4:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 801b7b8:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801b7bc:	4413      	add	r3, r2
 801b7be:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801b7c2:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 801b7c6:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 801b7ca:	4602      	mov	r2, r0
 801b7cc:	189b      	adds	r3, r3, r2
 801b7ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b7d2:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 801b7d6:	460a      	mov	r2, r1
 801b7d8:	4153      	adcs	r3, r2
 801b7da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801b7de:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 801b7e8:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 801b7ec:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801b7f0:	2200      	movs	r2, #0
 801b7f2:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 801b7f6:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 801b7fa:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 801b7fe:	460b      	mov	r3, r1
 801b800:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 801b804:	fb02 f203 	mul.w	r2, r2, r3
 801b808:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 801b80c:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 801b810:	4601      	mov	r1, r0
 801b812:	fb01 f303 	mul.w	r3, r1, r3
 801b816:	4413      	add	r3, r2
 801b818:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 801b81c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 801b820:	fba2 1201 	umull	r1, r2, r2, r1
 801b824:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 801b828:	460a      	mov	r2, r1
 801b82a:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 801b82e:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 801b832:	4413      	add	r3, r2
 801b834:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801b838:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801b83c:	2200      	movs	r2, #0
 801b83e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 801b842:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 801b846:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801b84a:	2200      	movs	r2, #0
 801b84c:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 801b850:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 801b854:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 801b858:	460b      	mov	r3, r1
 801b85a:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801b85e:	fb02 f203 	mul.w	r2, r2, r3
 801b862:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 801b866:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 801b86a:	4601      	mov	r1, r0
 801b86c:	fb01 f303 	mul.w	r3, r1, r3
 801b870:	4413      	add	r3, r2
 801b872:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 801b876:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 801b87a:	fba2 1201 	umull	r1, r2, r2, r1
 801b87e:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 801b882:	460a      	mov	r2, r1
 801b884:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 801b888:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 801b88c:	4413      	add	r3, r2
 801b88e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 801b892:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 801b896:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 801b89a:	4602      	mov	r2, r0
 801b89c:	189b      	adds	r3, r3, r2
 801b89e:	663b      	str	r3, [r7, #96]	@ 0x60
 801b8a0:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 801b8a4:	460a      	mov	r2, r1
 801b8a6:	4153      	adcs	r3, r2
 801b8a8:	667b      	str	r3, [r7, #100]	@ 0x64
 801b8aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801b8ae:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 801b8b2:	4602      	mov	r2, r0
 801b8b4:	189b      	adds	r3, r3, r2
 801b8b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801b8ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801b8be:	460a      	mov	r2, r1
 801b8c0:	4153      	adcs	r3, r2
 801b8c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 801b8c6:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801b8ca:	2200      	movs	r2, #0
 801b8cc:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 801b8d0:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 801b8d4:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801b8d8:	2200      	movs	r2, #0
 801b8da:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 801b8de:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 801b8e2:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 801b8e6:	460b      	mov	r3, r1
 801b8e8:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 801b8ec:	fb02 f203 	mul.w	r2, r2, r3
 801b8f0:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801b8f4:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 801b8f8:	4601      	mov	r1, r0
 801b8fa:	fb01 f303 	mul.w	r3, r1, r3
 801b8fe:	4413      	add	r3, r2
 801b900:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 801b904:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 801b908:	fba2 1201 	umull	r1, r2, r2, r1
 801b90c:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 801b910:	460a      	mov	r2, r1
 801b912:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 801b916:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801b91a:	4413      	add	r3, r2
 801b91c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 801b920:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801b924:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 801b928:	4602      	mov	r2, r0
 801b92a:	189b      	adds	r3, r3, r2
 801b92c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b92e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801b932:	460a      	mov	r2, r1
 801b934:	4153      	adcs	r3, r2
 801b936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801b93c:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801b940:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801b944:	2200      	movs	r2, #0
 801b946:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 801b94a:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 801b94e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801b952:	2200      	movs	r2, #0
 801b954:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 801b958:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 801b95c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 801b960:	460b      	mov	r3, r1
 801b962:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 801b966:	fb02 f203 	mul.w	r2, r2, r3
 801b96a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801b96e:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 801b972:	4601      	mov	r1, r0
 801b974:	fb01 f303 	mul.w	r3, r1, r3
 801b978:	4413      	add	r3, r2
 801b97a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801b97e:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 801b982:	fba2 1201 	umull	r1, r2, r2, r1
 801b986:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 801b98a:	460a      	mov	r2, r1
 801b98c:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 801b990:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 801b994:	4413      	add	r3, r2
 801b996:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 801b99a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801b99e:	2200      	movs	r2, #0
 801b9a0:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 801b9a4:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 801b9a8:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801b9ac:	2200      	movs	r2, #0
 801b9ae:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 801b9b2:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 801b9b6:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 801b9ba:	460b      	mov	r3, r1
 801b9bc:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 801b9c0:	fb02 f203 	mul.w	r2, r2, r3
 801b9c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 801b9c8:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 801b9cc:	4601      	mov	r1, r0
 801b9ce:	fb01 f303 	mul.w	r3, r1, r3
 801b9d2:	4413      	add	r3, r2
 801b9d4:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 801b9d8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 801b9dc:	fba2 1201 	umull	r1, r2, r2, r1
 801b9e0:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 801b9e4:	460a      	mov	r2, r1
 801b9e6:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 801b9ea:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 801b9ee:	4413      	add	r3, r2
 801b9f0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 801b9f4:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 801b9f8:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 801b9fc:	4602      	mov	r2, r0
 801b9fe:	189b      	adds	r3, r3, r2
 801ba00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801ba04:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 801ba08:	460a      	mov	r2, r1
 801ba0a:	4153      	adcs	r3, r2
 801ba0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801ba10:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801ba14:	2200      	movs	r2, #0
 801ba16:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 801ba1a:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 801ba1e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801ba22:	2200      	movs	r2, #0
 801ba24:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 801ba28:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 801ba2c:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 801ba30:	460b      	mov	r3, r1
 801ba32:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801ba36:	fb02 f203 	mul.w	r2, r2, r3
 801ba3a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801ba3e:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 801ba42:	4601      	mov	r1, r0
 801ba44:	fb01 f303 	mul.w	r3, r1, r3
 801ba48:	4413      	add	r3, r2
 801ba4a:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 801ba4e:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 801ba52:	fba2 1201 	umull	r1, r2, r2, r1
 801ba56:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 801ba5a:	460a      	mov	r2, r1
 801ba5c:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 801ba60:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 801ba64:	4413      	add	r3, r2
 801ba66:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801ba6a:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801ba6e:	2200      	movs	r2, #0
 801ba70:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 801ba74:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 801ba78:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801ba7c:	2200      	movs	r2, #0
 801ba7e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 801ba82:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 801ba86:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 801ba8a:	460b      	mov	r3, r1
 801ba8c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801ba90:	fb02 f203 	mul.w	r2, r2, r3
 801ba94:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 801ba98:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 801ba9c:	4601      	mov	r1, r0
 801ba9e:	fb01 f303 	mul.w	r3, r1, r3
 801baa2:	4413      	add	r3, r2
 801baa4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 801baa8:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 801baac:	fba2 1201 	umull	r1, r2, r2, r1
 801bab0:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 801bab4:	460a      	mov	r2, r1
 801bab6:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 801baba:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801babe:	4413      	add	r3, r2
 801bac0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 801bac4:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 801bac8:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 801bacc:	4602      	mov	r2, r0
 801bace:	189b      	adds	r3, r3, r2
 801bad0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801bad2:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 801bad6:	460a      	mov	r2, r1
 801bad8:	4153      	adcs	r3, r2
 801bada:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801badc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801bae0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 801bae4:	4602      	mov	r2, r0
 801bae6:	189b      	adds	r3, r3, r2
 801bae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801baec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801baf0:	460a      	mov	r2, r1
 801baf2:	4153      	adcs	r3, r2
 801baf4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 801baf8:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801bafc:	2200      	movs	r2, #0
 801bafe:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 801bb02:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 801bb06:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 801bb0a:	2200      	movs	r2, #0
 801bb0c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801bb10:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 801bb14:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 801bb18:	460b      	mov	r3, r1
 801bb1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 801bb1e:	fb02 f203 	mul.w	r2, r2, r3
 801bb22:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 801bb26:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 801bb2a:	4601      	mov	r1, r0
 801bb2c:	fb01 f303 	mul.w	r3, r1, r3
 801bb30:	4413      	add	r3, r2
 801bb32:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 801bb36:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 801bb3a:	fba2 1201 	umull	r1, r2, r2, r1
 801bb3e:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 801bb42:	460a      	mov	r2, r1
 801bb44:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 801bb48:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 801bb4c:	4413      	add	r3, r2
 801bb4e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 801bb52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801bb56:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 801bb5a:	4602      	mov	r2, r0
 801bb5c:	189b      	adds	r3, r3, r2
 801bb5e:	633b      	str	r3, [r7, #48]	@ 0x30
 801bb60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801bb64:	460a      	mov	r2, r1
 801bb66:	4153      	adcs	r3, r2
 801bb68:	637b      	str	r3, [r7, #52]	@ 0x34
 801bb6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801bb6e:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801bb72:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801bb76:	2200      	movs	r2, #0
 801bb78:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 801bb7c:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 801bb80:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801bb84:	2200      	movs	r2, #0
 801bb86:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 801bb8a:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 801bb8e:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 801bb92:	460b      	mov	r3, r1
 801bb94:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 801bb98:	fb02 f203 	mul.w	r2, r2, r3
 801bb9c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 801bba0:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 801bba4:	4601      	mov	r1, r0
 801bba6:	fb01 f303 	mul.w	r3, r1, r3
 801bbaa:	4413      	add	r3, r2
 801bbac:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 801bbb0:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 801bbb4:	fba2 1201 	umull	r1, r2, r2, r1
 801bbb8:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 801bbbc:	460a      	mov	r2, r1
 801bbbe:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 801bbc2:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 801bbc6:	4413      	add	r3, r2
 801bbc8:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 801bbcc:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 801bbd6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 801bbda:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801bbde:	2200      	movs	r2, #0
 801bbe0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 801bbe4:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 801bbe8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 801bbec:	460b      	mov	r3, r1
 801bbee:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 801bbf2:	fb02 f203 	mul.w	r2, r2, r3
 801bbf6:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 801bbfa:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 801bbfe:	4601      	mov	r1, r0
 801bc00:	fb01 f303 	mul.w	r3, r1, r3
 801bc04:	4413      	add	r3, r2
 801bc06:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 801bc0a:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 801bc0e:	fba2 1201 	umull	r1, r2, r2, r1
 801bc12:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 801bc16:	460a      	mov	r2, r1
 801bc18:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 801bc1c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 801bc20:	4413      	add	r3, r2
 801bc22:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 801bc26:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 801bc2a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 801bc2e:	4602      	mov	r2, r0
 801bc30:	189b      	adds	r3, r3, r2
 801bc32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801bc36:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 801bc3a:	460a      	mov	r2, r1
 801bc3c:	4153      	adcs	r3, r2
 801bc3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801bc42:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801bc46:	2200      	movs	r2, #0
 801bc48:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 801bc4c:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 801bc50:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801bc54:	2200      	movs	r2, #0
 801bc56:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 801bc5a:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 801bc5e:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 801bc62:	460b      	mov	r3, r1
 801bc64:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 801bc68:	fb02 f203 	mul.w	r2, r2, r3
 801bc6c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 801bc70:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 801bc74:	4601      	mov	r1, r0
 801bc76:	fb01 f303 	mul.w	r3, r1, r3
 801bc7a:	4413      	add	r3, r2
 801bc7c:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801bc80:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 801bc84:	fba2 ab01 	umull	sl, fp, r2, r1
 801bc88:	445b      	add	r3, fp
 801bc8a:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801bc8c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801bc90:	2200      	movs	r2, #0
 801bc92:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801bc96:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801bc9a:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801bc9e:	2200      	movs	r2, #0
 801bca0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 801bca4:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 801bca8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 801bcac:	460b      	mov	r3, r1
 801bcae:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801bcb2:	fb02 f203 	mul.w	r2, r2, r3
 801bcb6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801bcba:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 801bcbe:	4601      	mov	r1, r0
 801bcc0:	fb01 f303 	mul.w	r3, r1, r3
 801bcc4:	4413      	add	r3, r2
 801bcc6:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 801bcca:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 801bcce:	fba2 1201 	umull	r1, r2, r2, r1
 801bcd2:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 801bcd6:	460a      	mov	r2, r1
 801bcd8:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 801bcdc:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801bce0:	4413      	add	r3, r2
 801bce2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 801bce6:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 801bcea:	460b      	mov	r3, r1
 801bcec:	eb1a 0303 	adds.w	r3, sl, r3
 801bcf0:	653b      	str	r3, [r7, #80]	@ 0x50
 801bcf2:	4613      	mov	r3, r2
 801bcf4:	eb4b 0303 	adc.w	r3, fp, r3
 801bcf8:	657b      	str	r3, [r7, #84]	@ 0x54
 801bcfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801bcfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801bd02:	4602      	mov	r2, r0
 801bd04:	189b      	adds	r3, r3, r2
 801bd06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801bd0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801bd0e:	460a      	mov	r2, r1
 801bd10:	4153      	adcs	r3, r2
 801bd12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801bd16:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801bd1a:	2200      	movs	r2, #0
 801bd1c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 801bd20:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 801bd24:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801bd28:	2200      	movs	r2, #0
 801bd2a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 801bd2e:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 801bd32:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 801bd36:	460b      	mov	r3, r1
 801bd38:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801bd3c:	fb02 f203 	mul.w	r2, r2, r3
 801bd40:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801bd44:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 801bd48:	4601      	mov	r1, r0
 801bd4a:	fb01 f303 	mul.w	r3, r1, r3
 801bd4e:	4413      	add	r3, r2
 801bd50:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801bd54:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 801bd58:	fba2 1201 	umull	r1, r2, r2, r1
 801bd5c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 801bd60:	460a      	mov	r2, r1
 801bd62:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 801bd66:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801bd6a:	4413      	add	r3, r2
 801bd6c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801bd70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801bd74:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801bd78:	4602      	mov	r2, r0
 801bd7a:	189b      	adds	r3, r3, r2
 801bd7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801bd7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801bd82:	460a      	mov	r2, r1
 801bd84:	4153      	adcs	r3, r2
 801bd86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801bd88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801bd8c:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801bd90:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801bd94:	2200      	movs	r2, #0
 801bd96:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801bd9a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 801bd9e:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801bda2:	2200      	movs	r2, #0
 801bda4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801bda8:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 801bdac:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801bdb0:	460b      	mov	r3, r1
 801bdb2:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801bdb6:	fb02 f203 	mul.w	r2, r2, r3
 801bdba:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801bdbe:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 801bdc2:	4601      	mov	r1, r0
 801bdc4:	fb01 f303 	mul.w	r3, r1, r3
 801bdc8:	4413      	add	r3, r2
 801bdca:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801bdce:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801bdd2:	fba2 8901 	umull	r8, r9, r2, r1
 801bdd6:	444b      	add	r3, r9
 801bdd8:	4699      	mov	r9, r3
 801bdda:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801bdde:	2200      	movs	r2, #0
 801bde0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801bde4:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 801bde8:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801bdec:	2200      	movs	r2, #0
 801bdee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801bdf2:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 801bdf6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 801bdfa:	460b      	mov	r3, r1
 801bdfc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801be00:	fb02 f203 	mul.w	r2, r2, r3
 801be04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801be08:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 801be0c:	4601      	mov	r1, r0
 801be0e:	fb01 f303 	mul.w	r3, r1, r3
 801be12:	4413      	add	r3, r2
 801be14:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801be18:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 801be1c:	fba2 1201 	umull	r1, r2, r2, r1
 801be20:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 801be24:	460a      	mov	r2, r1
 801be26:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 801be2a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801be2e:	4413      	add	r3, r2
 801be30:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801be34:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 801be38:	460b      	mov	r3, r1
 801be3a:	eb18 0303 	adds.w	r3, r8, r3
 801be3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801be42:	4613      	mov	r3, r2
 801be44:	eb49 0303 	adc.w	r3, r9, r3
 801be48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801be4c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801be50:	2200      	movs	r2, #0
 801be52:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801be56:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801be5a:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801be5e:	2200      	movs	r2, #0
 801be60:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801be64:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801be68:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 801be6c:	460b      	mov	r3, r1
 801be6e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801be72:	fb02 f203 	mul.w	r2, r2, r3
 801be76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801be7a:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 801be7e:	4601      	mov	r1, r0
 801be80:	fb01 f303 	mul.w	r3, r1, r3
 801be84:	4413      	add	r3, r2
 801be86:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801be8a:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 801be8e:	fba2 4501 	umull	r4, r5, r2, r1
 801be92:	442b      	add	r3, r5
 801be94:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801be96:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801be9a:	2200      	movs	r2, #0
 801be9c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801bea0:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801bea4:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801bea8:	2200      	movs	r2, #0
 801beaa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801beae:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 801beb2:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 801beb6:	460b      	mov	r3, r1
 801beb8:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801bebc:	fb02 f203 	mul.w	r2, r2, r3
 801bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801bec4:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 801bec8:	4601      	mov	r1, r0
 801beca:	fb01 f303 	mul.w	r3, r1, r3
 801bece:	4413      	add	r3, r2
 801bed0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801bed4:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801bed8:	fba2 1201 	umull	r1, r2, r2, r1
 801bedc:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 801bee0:	460a      	mov	r2, r1
 801bee2:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 801bee6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801beea:	4413      	add	r3, r2
 801beec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801bef0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801bef4:	460b      	mov	r3, r1
 801bef6:	18e3      	adds	r3, r4, r3
 801bef8:	64bb      	str	r3, [r7, #72]	@ 0x48
 801befa:	4613      	mov	r3, r2
 801befc:	eb45 0303 	adc.w	r3, r5, r3
 801bf00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801bf02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801bf06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801bf0a:	4602      	mov	r2, r0
 801bf0c:	189b      	adds	r3, r3, r2
 801bf0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801bf12:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801bf16:	460a      	mov	r2, r1
 801bf18:	4153      	adcs	r3, r2
 801bf1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801bf1e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801bf22:	2200      	movs	r2, #0
 801bf24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801bf28:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801bf2c:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801bf30:	2200      	movs	r2, #0
 801bf32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801bf36:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801bf3a:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 801bf3e:	460b      	mov	r3, r1
 801bf40:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801bf44:	fb02 f203 	mul.w	r2, r2, r3
 801bf48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801bf4c:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 801bf50:	4601      	mov	r1, r0
 801bf52:	fb01 f303 	mul.w	r3, r1, r3
 801bf56:	4413      	add	r3, r2
 801bf58:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801bf5c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 801bf60:	fba2 1201 	umull	r1, r2, r2, r1
 801bf64:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801bf68:	460a      	mov	r2, r1
 801bf6a:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 801bf6e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801bf72:	4413      	add	r3, r2
 801bf74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801bf78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801bf7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801bf80:	4602      	mov	r2, r0
 801bf82:	189b      	adds	r3, r3, r2
 801bf84:	623b      	str	r3, [r7, #32]
 801bf86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801bf8a:	460a      	mov	r2, r1
 801bf8c:	4153      	adcs	r3, r2
 801bf8e:	627b      	str	r3, [r7, #36]	@ 0x24
 801bf90:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801bf94:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 801bf98:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 801bf9c:	f04f 0000 	mov.w	r0, #0
 801bfa0:	f04f 0100 	mov.w	r1, #0
 801bfa4:	0e90      	lsrs	r0, r2, #26
 801bfa6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801bfaa:	0e99      	lsrs	r1, r3, #26
 801bfac:	4603      	mov	r3, r0
 801bfae:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 801bfb2:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801bfb6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801bfba:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 801bfbe:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801bfc2:	2200      	movs	r2, #0
 801bfc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801bfc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801bfcc:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801bfd0:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801bfd4:	1851      	adds	r1, r2, r1
 801bfd6:	61b9      	str	r1, [r7, #24]
 801bfd8:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801bfdc:	414b      	adcs	r3, r1
 801bfde:	61fb      	str	r3, [r7, #28]
 801bfe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801bfe4:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 801bfe8:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801bfec:	f04f 0000 	mov.w	r0, #0
 801bff0:	f04f 0100 	mov.w	r1, #0
 801bff4:	0e90      	lsrs	r0, r2, #26
 801bff6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801bffa:	0e99      	lsrs	r1, r3, #26
 801bffc:	4603      	mov	r3, r0
 801bffe:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 801c002:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801c006:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c00a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 801c00e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801c012:	2200      	movs	r2, #0
 801c014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801c018:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801c01c:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801c020:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801c024:	1851      	adds	r1, r2, r1
 801c026:	6139      	str	r1, [r7, #16]
 801c028:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801c02c:	414b      	adcs	r3, r1
 801c02e:	617b      	str	r3, [r7, #20]
 801c030:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801c034:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 801c038:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801c03c:	f04f 0000 	mov.w	r0, #0
 801c040:	f04f 0100 	mov.w	r1, #0
 801c044:	0e90      	lsrs	r0, r2, #26
 801c046:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801c04a:	0e99      	lsrs	r1, r3, #26
 801c04c:	4603      	mov	r3, r0
 801c04e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 801c052:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 801c056:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c05a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 801c05e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801c062:	2200      	movs	r2, #0
 801c064:	67bb      	str	r3, [r7, #120]	@ 0x78
 801c066:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801c068:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801c06c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801c06e:	1851      	adds	r1, r2, r1
 801c070:	60b9      	str	r1, [r7, #8]
 801c072:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801c074:	414b      	adcs	r3, r1
 801c076:	60fb      	str	r3, [r7, #12]
 801c078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c07c:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 801c080:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801c084:	f04f 0000 	mov.w	r0, #0
 801c088:	f04f 0100 	mov.w	r1, #0
 801c08c:	0e90      	lsrs	r0, r2, #26
 801c08e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801c092:	0e99      	lsrs	r1, r3, #26
 801c094:	4603      	mov	r3, r0
 801c096:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 801c09a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801c09e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c0a2:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 801c0a6:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801c0aa:	2200      	movs	r2, #0
 801c0ac:	673b      	str	r3, [r7, #112]	@ 0x70
 801c0ae:	677a      	str	r2, [r7, #116]	@ 0x74
 801c0b0:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801c0b4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801c0b6:	1851      	adds	r1, r2, r1
 801c0b8:	6039      	str	r1, [r7, #0]
 801c0ba:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801c0bc:	414b      	adcs	r3, r1
 801c0be:	607b      	str	r3, [r7, #4]
 801c0c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c0c4:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 801c0c8:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801c0cc:	f04f 0000 	mov.w	r0, #0
 801c0d0:	f04f 0100 	mov.w	r1, #0
 801c0d4:	0e90      	lsrs	r0, r2, #26
 801c0d6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801c0da:	0e99      	lsrs	r1, r3, #26
 801c0dc:	4603      	mov	r3, r0
 801c0de:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 801c0e2:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 801c0e6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c0ea:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 801c0ee:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 801c0f2:	4613      	mov	r3, r2
 801c0f4:	009b      	lsls	r3, r3, #2
 801c0f6:	441a      	add	r2, r3
 801c0f8:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c0fc:	4413      	add	r3, r2
 801c0fe:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 801c102:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c106:	0e9b      	lsrs	r3, r3, #26
 801c108:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 801c10c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801c110:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c114:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 801c118:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801c11c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801c120:	4413      	add	r3, r2
 801c122:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 801c126:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801c12a:	3310      	adds	r3, #16
 801c12c:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 801c130:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801c134:	3b10      	subs	r3, #16
 801c136:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 801c13a:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801c13e:	2b0f      	cmp	r3, #15
 801c140:	f63f a983 	bhi.w	801b44a <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 801c144:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c148:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 801c14c:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 801c14e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c152:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801c156:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 801c158:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c15c:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 801c160:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 801c162:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c166:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 801c16a:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 801c16c:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801c170:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 801c174:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801c176:	bf00      	nop
 801c178:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 801c17c:	46bd      	mov	sp, r7
 801c17e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c182 <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 801c182:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c186:	b0aa      	sub	sp, #168	@ 0xa8
 801c188:	af00      	add	r7, sp, #0
 801c18a:	6678      	str	r0, [r7, #100]	@ 0x64
 801c18c:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801c18e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801c190:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 801c194:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d030      	beq.n	801c200 <poly1305_finish+0x7e>
    size_t i = st->leftover;
 801c19e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c1a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 801c1a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801c1ac:	1c53      	adds	r3, r2, #1
 801c1ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801c1b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c1b6:	441a      	add	r2, r3
 801c1b8:	2301      	movs	r3, #1
 801c1ba:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 801c1be:	e00d      	b.n	801c1dc <poly1305_finish+0x5a>
 801c1c0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801c1c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c1c8:	4413      	add	r3, r2
 801c1ca:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801c1ce:	2300      	movs	r3, #0
 801c1d0:	7013      	strb	r3, [r2, #0]
 801c1d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c1d6:	3301      	adds	r3, #1
 801c1d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801c1dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801c1e0:	2b0f      	cmp	r3, #15
 801c1e2:	d9ed      	bls.n	801c1c0 <poly1305_finish+0x3e>
    st->final = 1;
 801c1e4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801c1e8:	2301      	movs	r3, #1
 801c1ea:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801c1ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c1f2:	333c      	adds	r3, #60	@ 0x3c
 801c1f4:	2210      	movs	r2, #16
 801c1f6:	4619      	mov	r1, r3
 801c1f8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801c1fc:	f7ff f8be 	bl	801b37c <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 801c200:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c204:	695b      	ldr	r3, [r3, #20]
 801c206:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 801c20a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c20e:	699b      	ldr	r3, [r3, #24]
 801c210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 801c214:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c218:	69db      	ldr	r3, [r3, #28]
 801c21a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 801c21e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c222:	6a1b      	ldr	r3, [r3, #32]
 801c224:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 801c228:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c22e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 801c232:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c236:	0e9b      	lsrs	r3, r3, #26
 801c238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 801c23c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c240:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 801c248:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801c24c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c250:	4413      	add	r3, r2
 801c252:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 801c256:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c25a:	0e9b      	lsrs	r3, r3, #26
 801c25c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 801c260:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c264:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c268:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 801c26c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801c270:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c274:	4413      	add	r3, r2
 801c276:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 801c27a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c27e:	0e9b      	lsrs	r3, r3, #26
 801c280:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 801c284:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c288:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c28c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 801c290:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801c294:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c298:	4413      	add	r3, r2
 801c29a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 801c29e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801c2a2:	0e9b      	lsrs	r3, r3, #26
 801c2a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 801c2a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801c2ac:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c2b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 801c2b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801c2b8:	4613      	mov	r3, r2
 801c2ba:	009b      	lsls	r3, r3, #2
 801c2bc:	441a      	add	r2, r3
 801c2be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c2c2:	4413      	add	r3, r2
 801c2c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 801c2c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c2cc:	0e9b      	lsrs	r3, r3, #26
 801c2ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 801c2d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c2d6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c2da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 801c2de:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c2e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c2e6:	4413      	add	r3, r2
 801c2e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 801c2ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c2f0:	3305      	adds	r3, #5
 801c2f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 801c2f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801c2fa:	0e9b      	lsrs	r3, r3, #26
 801c2fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 801c300:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801c304:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c308:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 801c30c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c310:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c314:	4413      	add	r3, r2
 801c316:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 801c31a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801c31e:	0e9b      	lsrs	r3, r3, #26
 801c320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 801c324:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801c328:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c32c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 801c330:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801c334:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c338:	4413      	add	r3, r2
 801c33a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 801c33c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801c33e:	0e9b      	lsrs	r3, r3, #26
 801c340:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 801c344:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801c346:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c34a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 801c34c:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801c350:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c354:	4413      	add	r3, r2
 801c356:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 801c358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c35a:	0e9b      	lsrs	r3, r3, #26
 801c35c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 801c360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c362:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801c366:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 801c368:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801c36c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801c370:	4413      	add	r3, r2
 801c372:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 801c376:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 801c378:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c37a:	0fdb      	lsrs	r3, r3, #31
 801c37c:	3b01      	subs	r3, #1
 801c37e:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 801c380:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801c384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c386:	4013      	ands	r3, r2
 801c388:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 801c38c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801c390:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c392:	4013      	ands	r3, r2
 801c394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 801c398:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801c39a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c39c:	4013      	ands	r3, r2
 801c39e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 801c3a0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801c3a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c3a4:	4013      	ands	r3, r2
 801c3a6:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 801c3a8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801c3aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c3ac:	4013      	ands	r3, r2
 801c3ae:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 801c3b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c3b2:	43db      	mvns	r3, r3
 801c3b4:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 801c3b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801c3ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c3bc:	401a      	ands	r2, r3
 801c3be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801c3c2:	4313      	orrs	r3, r2
 801c3c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 801c3c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c3cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c3ce:	401a      	ands	r2, r3
 801c3d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801c3d4:	4313      	orrs	r3, r2
 801c3d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 801c3da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801c3de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c3e0:	401a      	ands	r2, r3
 801c3e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801c3e4:	4313      	orrs	r3, r2
 801c3e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 801c3ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801c3ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c3f0:	401a      	ands	r2, r3
 801c3f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801c3f4:	4313      	orrs	r3, r2
 801c3f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 801c3fa:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801c3fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801c400:	401a      	ands	r2, r3
 801c402:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801c404:	4313      	orrs	r3, r2
 801c406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 801c40a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c40e:	069a      	lsls	r2, r3, #26
 801c410:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c414:	4313      	orrs	r3, r2
 801c416:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 801c41a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c41e:	099a      	lsrs	r2, r3, #6
 801c420:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c424:	051b      	lsls	r3, r3, #20
 801c426:	4313      	orrs	r3, r2
 801c428:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 801c42c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c430:	0b1a      	lsrs	r2, r3, #12
 801c432:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c436:	039b      	lsls	r3, r3, #14
 801c438:	4313      	orrs	r3, r2
 801c43a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 801c43e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c442:	0c9a      	lsrs	r2, r3, #18
 801c444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801c448:	021b      	lsls	r3, r3, #8
 801c44a:	4313      	orrs	r3, r2
 801c44c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 801c450:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801c454:	2200      	movs	r2, #0
 801c456:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c458:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801c45a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c45e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c460:	2200      	movs	r2, #0
 801c462:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c464:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801c466:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801c468:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801c46c:	4602      	mov	r2, r0
 801c46e:	189b      	adds	r3, r3, r2
 801c470:	61bb      	str	r3, [r7, #24]
 801c472:	460b      	mov	r3, r1
 801c474:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801c476:	eb42 0303 	adc.w	r3, r2, r3
 801c47a:	61fb      	str	r3, [r7, #28]
 801c47c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c480:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 801c484:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c486:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 801c48a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801c48e:	2200      	movs	r2, #0
 801c490:	653b      	str	r3, [r7, #80]	@ 0x50
 801c492:	657a      	str	r2, [r7, #84]	@ 0x54
 801c494:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c49a:	2200      	movs	r2, #0
 801c49c:	643b      	str	r3, [r7, #64]	@ 0x40
 801c49e:	647a      	str	r2, [r7, #68]	@ 0x44
 801c4a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801c4a2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801c4a6:	4602      	mov	r2, r0
 801c4a8:	189c      	adds	r4, r3, r2
 801c4aa:	460b      	mov	r3, r1
 801c4ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801c4ae:	eb42 0303 	adc.w	r3, r2, r3
 801c4b2:	461d      	mov	r5, r3
 801c4b4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801c4b8:	f04f 0000 	mov.w	r0, #0
 801c4bc:	f04f 0100 	mov.w	r1, #0
 801c4c0:	0018      	movs	r0, r3
 801c4c2:	2100      	movs	r1, #0
 801c4c4:	1823      	adds	r3, r4, r0
 801c4c6:	613b      	str	r3, [r7, #16]
 801c4c8:	eb45 0301 	adc.w	r3, r5, r1
 801c4cc:	617b      	str	r3, [r7, #20]
 801c4ce:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801c4d2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 801c4d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c4d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 801c4dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c4e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801c4e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c4ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c4ec:	2200      	movs	r2, #0
 801c4ee:	633b      	str	r3, [r7, #48]	@ 0x30
 801c4f0:	637a      	str	r2, [r7, #52]	@ 0x34
 801c4f2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801c4f6:	4623      	mov	r3, r4
 801c4f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801c4fc:	4602      	mov	r2, r0
 801c4fe:	eb13 0a02 	adds.w	sl, r3, r2
 801c502:	462b      	mov	r3, r5
 801c504:	460a      	mov	r2, r1
 801c506:	eb43 0b02 	adc.w	fp, r3, r2
 801c50a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801c50e:	f04f 0200 	mov.w	r2, #0
 801c512:	f04f 0300 	mov.w	r3, #0
 801c516:	000a      	movs	r2, r1
 801c518:	2300      	movs	r3, #0
 801c51a:	eb1a 0102 	adds.w	r1, sl, r2
 801c51e:	60b9      	str	r1, [r7, #8]
 801c520:	eb4b 0303 	adc.w	r3, fp, r3
 801c524:	60fb      	str	r3, [r7, #12]
 801c526:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801c52a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 801c52e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c530:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 801c534:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801c538:	2200      	movs	r2, #0
 801c53a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801c53c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801c53e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c544:	2200      	movs	r2, #0
 801c546:	623b      	str	r3, [r7, #32]
 801c548:	627a      	str	r2, [r7, #36]	@ 0x24
 801c54a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801c54e:	4623      	mov	r3, r4
 801c550:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801c554:	4602      	mov	r2, r0
 801c556:	eb13 0802 	adds.w	r8, r3, r2
 801c55a:	462b      	mov	r3, r5
 801c55c:	460a      	mov	r2, r1
 801c55e:	eb43 0902 	adc.w	r9, r3, r2
 801c562:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801c566:	f04f 0200 	mov.w	r2, #0
 801c56a:	f04f 0300 	mov.w	r3, #0
 801c56e:	000a      	movs	r2, r1
 801c570:	2300      	movs	r3, #0
 801c572:	eb18 0102 	adds.w	r1, r8, r2
 801c576:	6039      	str	r1, [r7, #0]
 801c578:	eb49 0303 	adc.w	r3, r9, r3
 801c57c:	607b      	str	r3, [r7, #4]
 801c57e:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c582:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 801c586:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801c588:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 801c58c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801c590:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801c592:	f7fe fe56 	bl	801b242 <U32TO8>
  U32TO8(mac + 4, h1);
 801c596:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c598:	3304      	adds	r3, #4
 801c59a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801c59e:	4618      	mov	r0, r3
 801c5a0:	f7fe fe4f 	bl	801b242 <U32TO8>
  U32TO8(mac + 8, h2);
 801c5a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c5a6:	3308      	adds	r3, #8
 801c5a8:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	f7fe fe48 	bl	801b242 <U32TO8>
  U32TO8(mac + 12, h3);
 801c5b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c5b4:	330c      	adds	r3, #12
 801c5b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	f7fe fe41 	bl	801b242 <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 801c5c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c5c4:	2200      	movs	r2, #0
 801c5c6:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801c5c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801c5d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c5d4:	2200      	movs	r2, #0
 801c5d6:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801c5d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c5dc:	2200      	movs	r2, #0
 801c5de:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801c5e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c5e4:	2200      	movs	r2, #0
 801c5e6:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 801c5e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c5ec:	2200      	movs	r2, #0
 801c5ee:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 801c5f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 801c5f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c5fc:	2200      	movs	r2, #0
 801c5fe:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 801c600:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c604:	2200      	movs	r2, #0
 801c606:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 801c608:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c60c:	2200      	movs	r2, #0
 801c60e:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 801c610:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c614:	2200      	movs	r2, #0
 801c616:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 801c618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c61c:	2200      	movs	r2, #0
 801c61e:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 801c620:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c624:	2200      	movs	r2, #0
 801c626:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 801c628:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c62c:	2200      	movs	r2, #0
 801c62e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801c630:	bf00      	nop
 801c632:	37a8      	adds	r7, #168	@ 0xa8
 801c634:	46bd      	mov	sp, r7
 801c636:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801c63a <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 801c63a:	b580      	push	{r7, lr}
 801c63c:	b088      	sub	sp, #32
 801c63e:	af00      	add	r7, sp, #0
 801c640:	60f8      	str	r0, [r7, #12]
 801c642:	60b9      	str	r1, [r7, #8]
 801c644:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 801c64a:	697b      	ldr	r3, [r7, #20]
 801c64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c64e:	2b00      	cmp	r3, #0
 801c650:	d03d      	beq.n	801c6ce <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 801c652:	697b      	ldr	r3, [r7, #20]
 801c654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c656:	f1c3 0310 	rsb	r3, r3, #16
 801c65a:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 801c65c:	69ba      	ldr	r2, [r7, #24]
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	429a      	cmp	r2, r3
 801c662:	d901      	bls.n	801c668 <poly1305_update+0x2e>
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 801c668:	2300      	movs	r3, #0
 801c66a:	61fb      	str	r3, [r7, #28]
 801c66c:	e00f      	b.n	801c68e <poly1305_update+0x54>
 801c66e:	68ba      	ldr	r2, [r7, #8]
 801c670:	69fb      	ldr	r3, [r7, #28]
 801c672:	441a      	add	r2, r3
 801c674:	697b      	ldr	r3, [r7, #20]
 801c676:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801c678:	69fb      	ldr	r3, [r7, #28]
 801c67a:	440b      	add	r3, r1
 801c67c:	7811      	ldrb	r1, [r2, #0]
 801c67e:	697a      	ldr	r2, [r7, #20]
 801c680:	4413      	add	r3, r2
 801c682:	460a      	mov	r2, r1
 801c684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801c688:	69fb      	ldr	r3, [r7, #28]
 801c68a:	3301      	adds	r3, #1
 801c68c:	61fb      	str	r3, [r7, #28]
 801c68e:	69fa      	ldr	r2, [r7, #28]
 801c690:	69bb      	ldr	r3, [r7, #24]
 801c692:	429a      	cmp	r2, r3
 801c694:	d3eb      	bcc.n	801c66e <poly1305_update+0x34>
    bytes -= want;
 801c696:	687a      	ldr	r2, [r7, #4]
 801c698:	69bb      	ldr	r3, [r7, #24]
 801c69a:	1ad3      	subs	r3, r2, r3
 801c69c:	607b      	str	r3, [r7, #4]
    m += want;
 801c69e:	68ba      	ldr	r2, [r7, #8]
 801c6a0:	69bb      	ldr	r3, [r7, #24]
 801c6a2:	4413      	add	r3, r2
 801c6a4:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 801c6a6:	697b      	ldr	r3, [r7, #20]
 801c6a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c6aa:	69bb      	ldr	r3, [r7, #24]
 801c6ac:	441a      	add	r2, r3
 801c6ae:	697b      	ldr	r3, [r7, #20]
 801c6b0:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 801c6b2:	697b      	ldr	r3, [r7, #20]
 801c6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c6b6:	2b0f      	cmp	r3, #15
 801c6b8:	d93e      	bls.n	801c738 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801c6ba:	697b      	ldr	r3, [r7, #20]
 801c6bc:	333c      	adds	r3, #60	@ 0x3c
 801c6be:	2210      	movs	r2, #16
 801c6c0:	4619      	mov	r1, r3
 801c6c2:	6978      	ldr	r0, [r7, #20]
 801c6c4:	f7fe fe5a 	bl	801b37c <poly1305_blocks>
    st->leftover = 0;
 801c6c8:	697b      	ldr	r3, [r7, #20]
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	2b0f      	cmp	r3, #15
 801c6d2:	d910      	bls.n	801c6f6 <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	f023 030f 	bic.w	r3, r3, #15
 801c6da:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 801c6dc:	693a      	ldr	r2, [r7, #16]
 801c6de:	68b9      	ldr	r1, [r7, #8]
 801c6e0:	6978      	ldr	r0, [r7, #20]
 801c6e2:	f7fe fe4b 	bl	801b37c <poly1305_blocks>
    m += want;
 801c6e6:	68ba      	ldr	r2, [r7, #8]
 801c6e8:	693b      	ldr	r3, [r7, #16]
 801c6ea:	4413      	add	r3, r2
 801c6ec:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 801c6ee:	687a      	ldr	r2, [r7, #4]
 801c6f0:	693b      	ldr	r3, [r7, #16]
 801c6f2:	1ad3      	subs	r3, r2, r3
 801c6f4:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d01e      	beq.n	801c73a <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 801c6fc:	2300      	movs	r3, #0
 801c6fe:	61fb      	str	r3, [r7, #28]
 801c700:	e00f      	b.n	801c722 <poly1305_update+0xe8>
 801c702:	68ba      	ldr	r2, [r7, #8]
 801c704:	69fb      	ldr	r3, [r7, #28]
 801c706:	441a      	add	r2, r3
 801c708:	697b      	ldr	r3, [r7, #20]
 801c70a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801c70c:	69fb      	ldr	r3, [r7, #28]
 801c70e:	440b      	add	r3, r1
 801c710:	7811      	ldrb	r1, [r2, #0]
 801c712:	697a      	ldr	r2, [r7, #20]
 801c714:	4413      	add	r3, r2
 801c716:	460a      	mov	r2, r1
 801c718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801c71c:	69fb      	ldr	r3, [r7, #28]
 801c71e:	3301      	adds	r3, #1
 801c720:	61fb      	str	r3, [r7, #28]
 801c722:	69fa      	ldr	r2, [r7, #28]
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	429a      	cmp	r2, r3
 801c728:	d3eb      	bcc.n	801c702 <poly1305_update+0xc8>
    st->leftover += bytes;
 801c72a:	697b      	ldr	r3, [r7, #20]
 801c72c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	441a      	add	r2, r3
 801c732:	697b      	ldr	r3, [r7, #20]
 801c734:	639a      	str	r2, [r3, #56]	@ 0x38
 801c736:	e000      	b.n	801c73a <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 801c738:	bf00      	nop
  }
}
 801c73a:	3720      	adds	r7, #32
 801c73c:	46bd      	mov	sp, r7
 801c73e:	bd80      	pop	{r7, pc}

0801c740 <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 801c740:	b580      	push	{r7, lr}
 801c742:	b084      	sub	sp, #16
 801c744:	af00      	add	r7, sp, #0
 801c746:	6078      	str	r0, [r7, #4]
 801c748:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 801c74a:	683b      	ldr	r3, [r7, #0]
 801c74c:	f003 030f 	and.w	r3, r3, #15
 801c750:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 801c752:	68fb      	ldr	r3, [r7, #12]
 801c754:	2b00      	cmp	r3, #0
 801c756:	d007      	beq.n	801c768 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 801c758:	68fb      	ldr	r3, [r7, #12]
 801c75a:	f1c3 0310 	rsb	r3, r3, #16
 801c75e:	461a      	mov	r2, r3
 801c760:	4903      	ldr	r1, [pc, #12]	@ (801c770 <pad_if_needed+0x30>)
 801c762:	6878      	ldr	r0, [r7, #4]
 801c764:	f7ff ff69 	bl	801c63a <poly1305_update>
  }
}
 801c768:	bf00      	nop
 801c76a:	3710      	adds	r7, #16
 801c76c:	46bd      	mov	sp, r7
 801c76e:	bd80      	pop	{r7, pc}
 801c770:	24002120 	.word	0x24002120

0801c774 <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 801c774:	b580      	push	{r7, lr}
 801c776:	b086      	sub	sp, #24
 801c778:	af00      	add	r7, sp, #0
 801c77a:	60f8      	str	r0, [r7, #12]
 801c77c:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 801c780:	783b      	ldrb	r3, [r7, #0]
 801c782:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 801c784:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c788:	f04f 0200 	mov.w	r2, #0
 801c78c:	f04f 0300 	mov.w	r3, #0
 801c790:	0a02      	lsrs	r2, r0, #8
 801c792:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801c796:	0a0b      	lsrs	r3, r1, #8
 801c798:	b2d3      	uxtb	r3, r2
 801c79a:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 801c79c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c7a0:	f04f 0200 	mov.w	r2, #0
 801c7a4:	f04f 0300 	mov.w	r3, #0
 801c7a8:	0c02      	lsrs	r2, r0, #16
 801c7aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801c7ae:	0c0b      	lsrs	r3, r1, #16
 801c7b0:	b2d3      	uxtb	r3, r2
 801c7b2:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 801c7b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c7b8:	f04f 0200 	mov.w	r2, #0
 801c7bc:	f04f 0300 	mov.w	r3, #0
 801c7c0:	0e02      	lsrs	r2, r0, #24
 801c7c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801c7c6:	0e0b      	lsrs	r3, r1, #24
 801c7c8:	b2d3      	uxtb	r3, r2
 801c7ca:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 801c7cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c7d0:	f04f 0200 	mov.w	r2, #0
 801c7d4:	f04f 0300 	mov.w	r3, #0
 801c7d8:	000a      	movs	r2, r1
 801c7da:	2300      	movs	r3, #0
 801c7dc:	b2d3      	uxtb	r3, r2
 801c7de:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 801c7e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c7e4:	f04f 0200 	mov.w	r2, #0
 801c7e8:	f04f 0300 	mov.w	r3, #0
 801c7ec:	0a0a      	lsrs	r2, r1, #8
 801c7ee:	2300      	movs	r3, #0
 801c7f0:	b2d3      	uxtb	r3, r2
 801c7f2:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 801c7f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c7f8:	f04f 0200 	mov.w	r2, #0
 801c7fc:	f04f 0300 	mov.w	r3, #0
 801c800:	0c0a      	lsrs	r2, r1, #16
 801c802:	2300      	movs	r3, #0
 801c804:	b2d3      	uxtb	r3, r2
 801c806:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 801c808:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c80c:	f04f 0200 	mov.w	r2, #0
 801c810:	f04f 0300 	mov.w	r3, #0
 801c814:	0e0a      	lsrs	r2, r1, #24
 801c816:	2300      	movs	r3, #0
 801c818:	b2d3      	uxtb	r3, r2
 801c81a:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 801c81c:	f107 0310 	add.w	r3, r7, #16
 801c820:	2208      	movs	r2, #8
 801c822:	4619      	mov	r1, r3
 801c824:	68f8      	ldr	r0, [r7, #12]
 801c826:	f7ff ff08 	bl	801c63a <poly1305_update>
}
 801c82a:	bf00      	nop
 801c82c:	3718      	adds	r7, #24
 801c82e:	46bd      	mov	sp, r7
 801c830:	bd80      	pop	{r7, pc}

0801c832 <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 801c832:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c836:	b0b0      	sub	sp, #192	@ 0xc0
 801c838:	af00      	add	r7, sp, #0
 801c83a:	60f8      	str	r0, [r7, #12]
 801c83c:	60b9      	str	r1, [r7, #8]
 801c83e:	607a      	str	r2, [r7, #4]
 801c840:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 801c842:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801c846:	2220      	movs	r2, #32
 801c848:	2100      	movs	r1, #0
 801c84a:	4618      	mov	r0, r3
 801c84c:	f008 ff9e 	bl	802578c <memset>
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 801c850:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801c854:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801c858:	6839      	ldr	r1, [r7, #0]
 801c85a:	4618      	mov	r0, r3
 801c85c:	f7fe fcb5 	bl	801b1ca <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 801c860:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801c864:	f107 0314 	add.w	r3, r7, #20
 801c868:	4611      	mov	r1, r2
 801c86a:	4618      	mov	r0, r3
 801c86c:	f7fe fd0a 	bl	801b284 <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 801c870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801c874:	2b00      	cmp	r3, #0
 801c876:	d013      	beq.n	801c8a0 <poly1305_calculate_mac+0x6e>
 801c878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d00f      	beq.n	801c8a0 <poly1305_calculate_mac+0x6e>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 801c880:	f107 0314 	add.w	r3, r7, #20
 801c884:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801c888:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7ff fed4 	bl	801c63a <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 801c892:	f107 0314 	add.w	r3, r7, #20
 801c896:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801c89a:	4618      	mov	r0, r3
 801c89c:	f7ff ff50 	bl	801c740 <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 801c8a0:	f107 0314 	add.w	r3, r7, #20
 801c8a4:	687a      	ldr	r2, [r7, #4]
 801c8a6:	68b9      	ldr	r1, [r7, #8]
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	f7ff fec6 	bl	801c63a <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801c8ae:	f107 0314 	add.w	r3, r7, #20
 801c8b2:	6879      	ldr	r1, [r7, #4]
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	f7ff ff43 	bl	801c740 <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 801c8ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801c8be:	2200      	movs	r2, #0
 801c8c0:	4698      	mov	r8, r3
 801c8c2:	4691      	mov	r9, r2
 801c8c4:	f107 0114 	add.w	r1, r7, #20
 801c8c8:	4642      	mov	r2, r8
 801c8ca:	464b      	mov	r3, r9
 801c8cc:	4608      	mov	r0, r1
 801c8ce:	f7ff ff51 	bl	801c774 <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	2200      	movs	r2, #0
 801c8d6:	461c      	mov	r4, r3
 801c8d8:	4615      	mov	r5, r2
 801c8da:	f107 0114 	add.w	r1, r7, #20
 801c8de:	4622      	mov	r2, r4
 801c8e0:	462b      	mov	r3, r5
 801c8e2:	4608      	mov	r0, r1
 801c8e4:	f7ff ff46 	bl	801c774 <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 801c8e8:	f107 0314 	add.w	r3, r7, #20
 801c8ec:	68f9      	ldr	r1, [r7, #12]
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	f7ff fc47 	bl	801c182 <poly1305_finish>
}
 801c8f4:	bf00      	nop
 801c8f6:	37c0      	adds	r7, #192	@ 0xc0
 801c8f8:	46bd      	mov	sp, r7
 801c8fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801c8fe <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 801c8fe:	b580      	push	{r7, lr}
 801c900:	b08a      	sub	sp, #40	@ 0x28
 801c902:	af04      	add	r7, sp, #16
 801c904:	60f8      	str	r0, [r7, #12]
 801c906:	60b9      	str	r1, [r7, #8]
 801c908:	607a      	str	r2, [r7, #4]
 801c90a:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 801c90c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c90e:	3310      	adds	r3, #16
 801c910:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 801c912:	68fa      	ldr	r2, [r7, #12]
 801c914:	697b      	ldr	r3, [r7, #20]
 801c916:	4413      	add	r3, r2
 801c918:	461a      	mov	r2, r3
 801c91a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c91c:	429a      	cmp	r2, r3
 801c91e:	d909      	bls.n	801c934 <mg_chacha20_poly1305_encrypt+0x36>
 801c920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c924:	4413      	add	r3, r2
 801c926:	461a      	mov	r2, r3
 801c928:	68fb      	ldr	r3, [r7, #12]
 801c92a:	429a      	cmp	r2, r3
 801c92c:	d902      	bls.n	801c934 <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 801c92e:	f04f 33ff 	mov.w	r3, #4294967295
 801c932:	e018      	b.n	801c966 <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 801c934:	2301      	movs	r3, #1
 801c936:	9301      	str	r3, [sp, #4]
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	9300      	str	r3, [sp, #0]
 801c93c:	68bb      	ldr	r3, [r7, #8]
 801c93e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c940:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c942:	68f8      	ldr	r0, [r7, #12]
 801c944:	f7fe fbc9 	bl	801b0da <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 801c948:	68fa      	ldr	r2, [r7, #12]
 801c94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c94c:	18d0      	adds	r0, r2, r3
 801c94e:	6a3b      	ldr	r3, [r7, #32]
 801c950:	9302      	str	r3, [sp, #8]
 801c952:	683b      	ldr	r3, [r7, #0]
 801c954:	9301      	str	r3, [sp, #4]
 801c956:	687b      	ldr	r3, [r7, #4]
 801c958:	9300      	str	r3, [sp, #0]
 801c95a:	68bb      	ldr	r3, [r7, #8]
 801c95c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c95e:	68f9      	ldr	r1, [r7, #12]
 801c960:	f7ff ff67 	bl	801c832 <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 801c964:	697b      	ldr	r3, [r7, #20]
}
 801c966:	4618      	mov	r0, r3
 801c968:	3718      	adds	r7, #24
 801c96a:	46bd      	mov	sp, r7
 801c96c:	bd80      	pop	{r7, pc}

0801c96e <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 801c96e:	b580      	push	{r7, lr}
 801c970:	b088      	sub	sp, #32
 801c972:	af02      	add	r7, sp, #8
 801c974:	60f8      	str	r0, [r7, #12]
 801c976:	60b9      	str	r1, [r7, #8]
 801c978:	607a      	str	r2, [r7, #4]
 801c97a:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 801c97c:	6a3b      	ldr	r3, [r7, #32]
 801c97e:	3b10      	subs	r3, #16
 801c980:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 801c982:	683a      	ldr	r2, [r7, #0]
 801c984:	6a3b      	ldr	r3, [r7, #32]
 801c986:	4413      	add	r3, r2
 801c988:	461a      	mov	r2, r3
 801c98a:	68fb      	ldr	r3, [r7, #12]
 801c98c:	429a      	cmp	r2, r3
 801c98e:	d909      	bls.n	801c9a4 <mg_chacha20_poly1305_decrypt+0x36>
 801c990:	68fa      	ldr	r2, [r7, #12]
 801c992:	697b      	ldr	r3, [r7, #20]
 801c994:	4413      	add	r3, r2
 801c996:	461a      	mov	r2, r3
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	429a      	cmp	r2, r3
 801c99c:	d902      	bls.n	801c9a4 <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801c99e:	f04f 33ff 	mov.w	r3, #4294967295
 801c9a2:	e00a      	b.n	801c9ba <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 801c9a4:	2301      	movs	r3, #1
 801c9a6:	9301      	str	r3, [sp, #4]
 801c9a8:	687b      	ldr	r3, [r7, #4]
 801c9aa:	9300      	str	r3, [sp, #0]
 801c9ac:	68bb      	ldr	r3, [r7, #8]
 801c9ae:	697a      	ldr	r2, [r7, #20]
 801c9b0:	6839      	ldr	r1, [r7, #0]
 801c9b2:	68f8      	ldr	r0, [r7, #12]
 801c9b4:	f7fe fb91 	bl	801b0da <chacha20_xor_stream>
  return actual_size;
 801c9b8:	697b      	ldr	r3, [r7, #20]
}
 801c9ba:	4618      	mov	r0, r3
 801c9bc:	3718      	adds	r7, #24
 801c9be:	46bd      	mov	sp, r7
 801c9c0:	bd80      	pop	{r7, pc}

0801c9c2 <bi_initialize>:

/**
 * @brief Start a new bigint context.
 * @return A bigint context.
 */
NS_INTERNAL BI_CTX *bi_initialize(void) {
 801c9c2:	b580      	push	{r7, lr}
 801c9c4:	b082      	sub	sp, #8
 801c9c6:	af00      	add	r7, sp, #0
  /* calloc() sets everything to zero */
  BI_CTX *ctx = (BI_CTX *) calloc(1, sizeof(BI_CTX));
 801c9c8:	2138      	movs	r1, #56	@ 0x38
 801c9ca:	2001      	movs	r0, #1
 801c9cc:	f008 fb04 	bl	8024fd8 <calloc>
 801c9d0:	4603      	mov	r3, r0
 801c9d2:	607b      	str	r3, [r7, #4]

  /* the radix */
  ctx->bi_radix = alloc(ctx, 2);
 801c9d4:	2102      	movs	r1, #2
 801c9d6:	6878      	ldr	r0, [r7, #4]
 801c9d8:	f000 fefe 	bl	801d7d8 <alloc>
 801c9dc:	4602      	mov	r2, r0
 801c9de:	687b      	ldr	r3, [r7, #4]
 801c9e0:	609a      	str	r2, [r3, #8]
  ctx->bi_radix->comps[0] = 0;
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	689b      	ldr	r3, [r3, #8]
 801c9e6:	68db      	ldr	r3, [r3, #12]
 801c9e8:	2200      	movs	r2, #0
 801c9ea:	601a      	str	r2, [r3, #0]
  ctx->bi_radix->comps[1] = 1;
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	689b      	ldr	r3, [r3, #8]
 801c9f0:	68db      	ldr	r3, [r3, #12]
 801c9f2:	3304      	adds	r3, #4
 801c9f4:	2201      	movs	r2, #1
 801c9f6:	601a      	str	r2, [r3, #0]
  bi_permanent(ctx->bi_radix);
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	689b      	ldr	r3, [r3, #8]
 801c9fc:	4618      	mov	r0, r3
 801c9fe:	f000 f81d 	bl	801ca3c <bi_permanent>
  return ctx;
 801ca02:	687b      	ldr	r3, [r7, #4]
}
 801ca04:	4618      	mov	r0, r3
 801ca06:	3708      	adds	r7, #8
 801ca08:	46bd      	mov	sp, r7
 801ca0a:	bd80      	pop	{r7, pc}

0801ca0c <bi_copy>:
 * @brief Increment the number of references to this object.
 * It does not do a full copy.
 * @param bi [in]   The bigint to copy.
 * @return A reference to the same bigint.
 */
NS_INTERNAL bigint *bi_copy(bigint *bi) {
 801ca0c:	b480      	push	{r7}
 801ca0e:	b083      	sub	sp, #12
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) bi->refs++;
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	689b      	ldr	r3, [r3, #8]
 801ca18:	4a07      	ldr	r2, [pc, #28]	@ (801ca38 <bi_copy+0x2c>)
 801ca1a:	4293      	cmp	r3, r2
 801ca1c:	d004      	beq.n	801ca28 <bi_copy+0x1c>
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	689b      	ldr	r3, [r3, #8]
 801ca22:	1c5a      	adds	r2, r3, #1
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	609a      	str	r2, [r3, #8]
  return bi;
 801ca28:	687b      	ldr	r3, [r7, #4]
}
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	370c      	adds	r7, #12
 801ca2e:	46bd      	mov	sp, r7
 801ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca34:	4770      	bx	lr
 801ca36:	bf00      	nop
 801ca38:	7fff55aa 	.word	0x7fff55aa

0801ca3c <bi_permanent>:
 * @brief Simply make a bigint object "unfreeable" if bi_free() is called on it.
 *
 * For this object to be freed, bi_depermanent() must be called.
 * @param bi [in]   The bigint to be made permanent.
 */
NS_INTERNAL void bi_permanent(bigint *bi) {
 801ca3c:	b580      	push	{r7, lr}
 801ca3e:	b082      	sub	sp, #8
 801ca40:	af00      	add	r7, sp, #0
 801ca42:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != 1) {
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	689b      	ldr	r3, [r3, #8]
 801ca48:	2b01      	cmp	r3, #1
 801ca4a:	d001      	beq.n	801ca50 <bi_permanent+0x14>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_permanent: refs was not 1\n");
#endif
    abort();
 801ca4c:	f008 fa9a 	bl	8024f84 <abort>
  }

  bi->refs = PERMANENT;
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	4a03      	ldr	r2, [pc, #12]	@ (801ca60 <bi_permanent+0x24>)
 801ca54:	609a      	str	r2, [r3, #8]
}
 801ca56:	bf00      	nop
 801ca58:	3708      	adds	r7, #8
 801ca5a:	46bd      	mov	sp, r7
 801ca5c:	bd80      	pop	{r7, pc}
 801ca5e:	bf00      	nop
 801ca60:	7fff55aa 	.word	0x7fff55aa

0801ca64 <bi_depermanent>:

/**
 * @brief Take a permanent object and make it eligible for freedom.
 * @param bi [in]   The bigint to be made back to temporary.
 */
NS_INTERNAL void bi_depermanent(bigint *bi) {
 801ca64:	b580      	push	{r7, lr}
 801ca66:	b082      	sub	sp, #8
 801ca68:	af00      	add	r7, sp, #0
 801ca6a:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) {
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	689b      	ldr	r3, [r3, #8]
 801ca70:	4a05      	ldr	r2, [pc, #20]	@ (801ca88 <bi_depermanent+0x24>)
 801ca72:	4293      	cmp	r3, r2
 801ca74:	d001      	beq.n	801ca7a <bi_depermanent+0x16>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_depermanent: bigint was not permanent\n");
#endif
    abort();
 801ca76:	f008 fa85 	bl	8024f84 <abort>
  }

  bi->refs = 1;
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	2201      	movs	r2, #1
 801ca7e:	609a      	str	r2, [r3, #8]
}
 801ca80:	bf00      	nop
 801ca82:	3708      	adds	r7, #8
 801ca84:	46bd      	mov	sp, r7
 801ca86:	bd80      	pop	{r7, pc}
 801ca88:	7fff55aa 	.word	0x7fff55aa

0801ca8c <bi_free>:
 *
 * The memory itself it not actually freed, just tagged as being available
 * @param ctx [in]   The bigint session context.
 * @param bi [in]    The bigint to be freed.
 */
NS_INTERNAL void bi_free(BI_CTX *ctx, bigint *bi) {
 801ca8c:	b580      	push	{r7, lr}
 801ca8e:	b082      	sub	sp, #8
 801ca90:	af00      	add	r7, sp, #0
 801ca92:	6078      	str	r0, [r7, #4]
 801ca94:	6039      	str	r1, [r7, #0]
  check(bi);
  if (bi->refs == PERMANENT) {
 801ca96:	683b      	ldr	r3, [r7, #0]
 801ca98:	689b      	ldr	r3, [r3, #8]
 801ca9a:	4a14      	ldr	r2, [pc, #80]	@ (801caec <bi_free+0x60>)
 801ca9c:	4293      	cmp	r3, r2
 801ca9e:	d01f      	beq.n	801cae0 <bi_free+0x54>
    return;
  }

  if (--bi->refs > 0) {
 801caa0:	683b      	ldr	r3, [r7, #0]
 801caa2:	689b      	ldr	r3, [r3, #8]
 801caa4:	1e5a      	subs	r2, r3, #1
 801caa6:	683b      	ldr	r3, [r7, #0]
 801caa8:	609a      	str	r2, [r3, #8]
 801caaa:	683b      	ldr	r3, [r7, #0]
 801caac:	689b      	ldr	r3, [r3, #8]
 801caae:	2b00      	cmp	r3, #0
 801cab0:	dc18      	bgt.n	801cae4 <bi_free+0x58>
    return;
  }

  bi->next = ctx->free_list;
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	685a      	ldr	r2, [r3, #4]
 801cab6:	683b      	ldr	r3, [r7, #0]
 801cab8:	601a      	str	r2, [r3, #0]
  ctx->free_list = bi;
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	683a      	ldr	r2, [r7, #0]
 801cabe:	605a      	str	r2, [r3, #4]
  ctx->free_count++;
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cac4:	1c5a      	adds	r2, r3, #1
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	631a      	str	r2, [r3, #48]	@ 0x30

  if (--ctx->active_count < 0) {
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cace:	1e5a      	subs	r2, r3, #1
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	62da      	str	r2, [r3, #44]	@ 0x2c
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cad8:	2b00      	cmp	r3, #0
 801cada:	da04      	bge.n	801cae6 <bi_free+0x5a>
#ifdef CONFIG_SSL_FULL_MODE
    printf(
        "bi_free: active_count went negative "
        "- double-freed bigint?\n");
#endif
    abort();
 801cadc:	f008 fa52 	bl	8024f84 <abort>
    return;
 801cae0:	bf00      	nop
 801cae2:	e000      	b.n	801cae6 <bi_free+0x5a>
    return;
 801cae4:	bf00      	nop
  }
}
 801cae6:	3708      	adds	r7, #8
 801cae8:	46bd      	mov	sp, r7
 801caea:	bd80      	pop	{r7, pc}
 801caec:	7fff55aa 	.word	0x7fff55aa

0801caf0 <int_to_bi>:
 * @brief Convert an (unsigned) integer into a bigint.
 * @param ctx [in]   The bigint session context.
 * @param i [in]     The (unsigned) integer to be converted.
 *
 */
NS_INTERNAL bigint *int_to_bi(BI_CTX *ctx, comp i) {
 801caf0:	b580      	push	{r7, lr}
 801caf2:	b084      	sub	sp, #16
 801caf4:	af00      	add	r7, sp, #0
 801caf6:	6078      	str	r0, [r7, #4]
 801caf8:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, 1);
 801cafa:	2101      	movs	r1, #1
 801cafc:	6878      	ldr	r0, [r7, #4]
 801cafe:	f000 fe6b 	bl	801d7d8 <alloc>
 801cb02:	60f8      	str	r0, [r7, #12]
  biR->comps[0] = i;
 801cb04:	68fb      	ldr	r3, [r7, #12]
 801cb06:	68db      	ldr	r3, [r3, #12]
 801cb08:	683a      	ldr	r2, [r7, #0]
 801cb0a:	601a      	str	r2, [r3, #0]
  return biR;
 801cb0c:	68fb      	ldr	r3, [r7, #12]
}
 801cb0e:	4618      	mov	r0, r3
 801cb10:	3710      	adds	r7, #16
 801cb12:	46bd      	mov	sp, r7
 801cb14:	bd80      	pop	{r7, pc}

0801cb16 <bi_clone>:
/**
 * @brief Do a full copy of the bigint object.
 * @param ctx [in]   The bigint session context.
 * @param bi  [in]   The bigint object to be copied.
 */
NS_INTERNAL bigint *bi_clone(BI_CTX *ctx, const bigint *bi) {
 801cb16:	b580      	push	{r7, lr}
 801cb18:	b084      	sub	sp, #16
 801cb1a:	af00      	add	r7, sp, #0
 801cb1c:	6078      	str	r0, [r7, #4]
 801cb1e:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, bi->size);
 801cb20:	683b      	ldr	r3, [r7, #0]
 801cb22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cb26:	4619      	mov	r1, r3
 801cb28:	6878      	ldr	r0, [r7, #4]
 801cb2a:	f000 fe55 	bl	801d7d8 <alloc>
 801cb2e:	60f8      	str	r0, [r7, #12]
  check(bi);
  memcpy(biR->comps, bi->comps, (size_t) bi->size * COMP_BYTE_SIZE);
 801cb30:	68fb      	ldr	r3, [r7, #12]
 801cb32:	68d8      	ldr	r0, [r3, #12]
 801cb34:	683b      	ldr	r3, [r7, #0]
 801cb36:	68d9      	ldr	r1, [r3, #12]
 801cb38:	683b      	ldr	r3, [r7, #0]
 801cb3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cb3e:	009b      	lsls	r3, r3, #2
 801cb40:	461a      	mov	r2, r3
 801cb42:	f008 ff58 	bl	80259f6 <memcpy>
  return biR;
 801cb46:	68fb      	ldr	r3, [r7, #12]
}
 801cb48:	4618      	mov	r0, r3
 801cb4a:	3710      	adds	r7, #16
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	bd80      	pop	{r7, pc}

0801cb50 <bi_add>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the addition.
 */
NS_INTERNAL bigint *bi_add(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801cb50:	b580      	push	{r7, lr}
 801cb52:	b08c      	sub	sp, #48	@ 0x30
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	60f8      	str	r0, [r7, #12]
 801cb58:	60b9      	str	r1, [r7, #8]
 801cb5a:	607a      	str	r2, [r7, #4]
  int n;
  comp carry = 0;
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  comp *pa, *pb;

  check(bia);
  check(bib);

  n = MAX(bia->size, bib->size);
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801cb66:	68bb      	ldr	r3, [r7, #8]
 801cb68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cb6c:	4293      	cmp	r3, r2
 801cb6e:	bfb8      	it	lt
 801cb70:	4613      	movlt	r3, r2
 801cb72:	b21b      	sxth	r3, r3
 801cb74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  more_comps(bia, n + 1);
 801cb76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cb78:	3301      	adds	r3, #1
 801cb7a:	4619      	mov	r1, r3
 801cb7c:	68b8      	ldr	r0, [r7, #8]
 801cb7e:	f000 fdcf 	bl	801d720 <more_comps>
  more_comps(bib, n);
 801cb82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cb84:	6878      	ldr	r0, [r7, #4]
 801cb86:	f000 fdcb 	bl	801d720 <more_comps>
  pa = bia->comps;
 801cb8a:	68bb      	ldr	r3, [r7, #8]
 801cb8c:	68db      	ldr	r3, [r3, #12]
 801cb8e:	627b      	str	r3, [r7, #36]	@ 0x24
  pb = bib->comps;
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	68db      	ldr	r3, [r3, #12]
 801cb94:	623b      	str	r3, [r7, #32]

  do {
    comp sl, rl, cy1;
    sl = *pa + *pb++;
 801cb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb98:	681a      	ldr	r2, [r3, #0]
 801cb9a:	6a3b      	ldr	r3, [r7, #32]
 801cb9c:	1d19      	adds	r1, r3, #4
 801cb9e:	6239      	str	r1, [r7, #32]
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	4413      	add	r3, r2
 801cba4:	61fb      	str	r3, [r7, #28]
    rl = sl + carry;
 801cba6:	69fa      	ldr	r2, [r7, #28]
 801cba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbaa:	4413      	add	r3, r2
 801cbac:	61bb      	str	r3, [r7, #24]
    cy1 = sl < *pa;
 801cbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbb0:	681b      	ldr	r3, [r3, #0]
 801cbb2:	69fa      	ldr	r2, [r7, #28]
 801cbb4:	429a      	cmp	r2, r3
 801cbb6:	bf34      	ite	cc
 801cbb8:	2301      	movcc	r3, #1
 801cbba:	2300      	movcs	r3, #0
 801cbbc:	b2db      	uxtb	r3, r3
 801cbbe:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl < sl);
 801cbc0:	69ba      	ldr	r2, [r7, #24]
 801cbc2:	69fb      	ldr	r3, [r7, #28]
 801cbc4:	429a      	cmp	r2, r3
 801cbc6:	bf34      	ite	cc
 801cbc8:	2301      	movcc	r3, #1
 801cbca:	2300      	movcs	r3, #0
 801cbcc:	b2db      	uxtb	r3, r3
 801cbce:	461a      	mov	r2, r3
 801cbd0:	697b      	ldr	r3, [r7, #20]
 801cbd2:	4313      	orrs	r3, r2
 801cbd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pa++ = rl;
 801cbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbd8:	1d1a      	adds	r2, r3, #4
 801cbda:	627a      	str	r2, [r7, #36]	@ 0x24
 801cbdc:	69ba      	ldr	r2, [r7, #24]
 801cbde:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801cbe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbe2:	3b01      	subs	r3, #1
 801cbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	d1d4      	bne.n	801cb96 <bi_add+0x46>

  *pa = carry; /* do overflow */
 801cbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cbf0:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bib);
 801cbf2:	6879      	ldr	r1, [r7, #4]
 801cbf4:	68f8      	ldr	r0, [r7, #12]
 801cbf6:	f7ff ff49 	bl	801ca8c <bi_free>
  return trim(bia);
 801cbfa:	68b8      	ldr	r0, [r7, #8]
 801cbfc:	f000 fe9d 	bl	801d93a <trim>
 801cc00:	4603      	mov	r3, r0
}
 801cc02:	4618      	mov	r0, r3
 801cc04:	3730      	adds	r7, #48	@ 0x30
 801cc06:	46bd      	mov	sp, r7
 801cc08:	bd80      	pop	{r7, pc}

0801cc0a <bi_subtract>:
 * @param is_negative [out] If defined, indicates that the result was negative.
 * is_negative may be null.
 * @return The result of the subtraction. The result is always positive.
 */
NS_INTERNAL bigint *bi_subtract(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int *is_negative) {
 801cc0a:	b580      	push	{r7, lr}
 801cc0c:	b08c      	sub	sp, #48	@ 0x30
 801cc0e:	af00      	add	r7, sp, #0
 801cc10:	60f8      	str	r0, [r7, #12]
 801cc12:	60b9      	str	r1, [r7, #8]
 801cc14:	607a      	str	r2, [r7, #4]
 801cc16:	603b      	str	r3, [r7, #0]
  int n = bia->size;
 801cc18:	68bb      	ldr	r3, [r7, #8]
 801cc1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cc1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  comp *pa, *pb, carry = 0;
 801cc20:	2300      	movs	r3, #0
 801cc22:	623b      	str	r3, [r7, #32]

  check(bia);
  check(bib);

  more_comps(bib, n);
 801cc24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cc26:	6878      	ldr	r0, [r7, #4]
 801cc28:	f000 fd7a 	bl	801d720 <more_comps>
  pa = bia->comps;
 801cc2c:	68bb      	ldr	r3, [r7, #8]
 801cc2e:	68db      	ldr	r3, [r3, #12]
 801cc30:	62bb      	str	r3, [r7, #40]	@ 0x28
  pb = bib->comps;
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	68db      	ldr	r3, [r3, #12]
 801cc36:	627b      	str	r3, [r7, #36]	@ 0x24

  do {
    comp sl, rl, cy1;
    sl = *pa - *pb++;
 801cc38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc3a:	681a      	ldr	r2, [r3, #0]
 801cc3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc3e:	1d19      	adds	r1, r3, #4
 801cc40:	6279      	str	r1, [r7, #36]	@ 0x24
 801cc42:	681b      	ldr	r3, [r3, #0]
 801cc44:	1ad3      	subs	r3, r2, r3
 801cc46:	61fb      	str	r3, [r7, #28]
    rl = sl - carry;
 801cc48:	69fa      	ldr	r2, [r7, #28]
 801cc4a:	6a3b      	ldr	r3, [r7, #32]
 801cc4c:	1ad3      	subs	r3, r2, r3
 801cc4e:	61bb      	str	r3, [r7, #24]
    cy1 = sl > *pa;
 801cc50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc52:	681b      	ldr	r3, [r3, #0]
 801cc54:	69fa      	ldr	r2, [r7, #28]
 801cc56:	429a      	cmp	r2, r3
 801cc58:	bf8c      	ite	hi
 801cc5a:	2301      	movhi	r3, #1
 801cc5c:	2300      	movls	r3, #0
 801cc5e:	b2db      	uxtb	r3, r3
 801cc60:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl > sl);
 801cc62:	69ba      	ldr	r2, [r7, #24]
 801cc64:	69fb      	ldr	r3, [r7, #28]
 801cc66:	429a      	cmp	r2, r3
 801cc68:	bf8c      	ite	hi
 801cc6a:	2301      	movhi	r3, #1
 801cc6c:	2300      	movls	r3, #0
 801cc6e:	b2db      	uxtb	r3, r3
 801cc70:	461a      	mov	r2, r3
 801cc72:	697b      	ldr	r3, [r7, #20]
 801cc74:	4313      	orrs	r3, r2
 801cc76:	623b      	str	r3, [r7, #32]
    *pa++ = rl;
 801cc78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc7a:	1d1a      	adds	r2, r3, #4
 801cc7c:	62ba      	str	r2, [r7, #40]	@ 0x28
 801cc7e:	69ba      	ldr	r2, [r7, #24]
 801cc80:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801cc82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc84:	3b01      	subs	r3, #1
 801cc86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cc88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc8a:	2b00      	cmp	r3, #0
 801cc8c:	d1d4      	bne.n	801cc38 <bi_subtract+0x2e>

  if (is_negative) /* indicate a negative result */
 801cc8e:	683b      	ldr	r3, [r7, #0]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d002      	beq.n	801cc9a <bi_subtract+0x90>
  {
    *is_negative = (int) carry;
 801cc94:	6a3a      	ldr	r2, [r7, #32]
 801cc96:	683b      	ldr	r3, [r7, #0]
 801cc98:	601a      	str	r2, [r3, #0]
  }

  bi_free(ctx, trim(bib)); /* put bib back to the way it was */
 801cc9a:	6878      	ldr	r0, [r7, #4]
 801cc9c:	f000 fe4d 	bl	801d93a <trim>
 801cca0:	4603      	mov	r3, r0
 801cca2:	4619      	mov	r1, r3
 801cca4:	68f8      	ldr	r0, [r7, #12]
 801cca6:	f7ff fef1 	bl	801ca8c <bi_free>
  return trim(bia);
 801ccaa:	68b8      	ldr	r0, [r7, #8]
 801ccac:	f000 fe45 	bl	801d93a <trim>
 801ccb0:	4603      	mov	r3, r0
}
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	3730      	adds	r7, #48	@ 0x30
 801ccb6:	46bd      	mov	sp, r7
 801ccb8:	bd80      	pop	{r7, pc}

0801ccba <bi_int_multiply>:

/**
 * Perform a multiply between a bigint an an (unsigned) integer
 */
static bigint *bi_int_multiply(BI_CTX *ctx, bigint *bia, comp b) {
 801ccba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ccbe:	b094      	sub	sp, #80	@ 0x50
 801ccc0:	af00      	add	r7, sp, #0
 801ccc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801ccc4:	62b9      	str	r1, [r7, #40]	@ 0x28
 801ccc6:	627a      	str	r2, [r7, #36]	@ 0x24
  int j = 0, n = bia->size;
 801ccc8:	2300      	movs	r3, #0
 801ccca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801cccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ccce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ccd2:	643b      	str	r3, [r7, #64]	@ 0x40
  bigint *biR = alloc(ctx, n + 1);
 801ccd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ccd6:	3301      	adds	r3, #1
 801ccd8:	4619      	mov	r1, r3
 801ccda:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801ccdc:	f000 fd7c 	bl	801d7d8 <alloc>
 801cce0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  comp carry = 0;
 801cce2:	2300      	movs	r3, #0
 801cce4:	64bb      	str	r3, [r7, #72]	@ 0x48
  comp *r = biR->comps;
 801cce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801cce8:	68db      	ldr	r3, [r3, #12]
 801ccea:	647b      	str	r3, [r7, #68]	@ 0x44
  comp *a = bia->comps;
 801ccec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ccee:	68db      	ldr	r3, [r3, #12]
 801ccf0:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);

  /* clear things to start with */
  memset(r, 0, (size_t) ((n + 1) * COMP_BYTE_SIZE));
 801ccf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ccf4:	3301      	adds	r3, #1
 801ccf6:	009b      	lsls	r3, r3, #2
 801ccf8:	461a      	mov	r2, r3
 801ccfa:	2100      	movs	r1, #0
 801ccfc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801ccfe:	f008 fd45 	bl	802578c <memset>

  do {
    long_comp tmp = *r + (long_comp) a[j] * b + carry;
 801cd02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	2200      	movs	r2, #0
 801cd08:	61bb      	str	r3, [r7, #24]
 801cd0a:	61fa      	str	r2, [r7, #28]
 801cd0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cd0e:	009a      	lsls	r2, r3, #2
 801cd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cd12:	4413      	add	r3, r2
 801cd14:	681b      	ldr	r3, [r3, #0]
 801cd16:	2200      	movs	r2, #0
 801cd18:	613b      	str	r3, [r7, #16]
 801cd1a:	617a      	str	r2, [r7, #20]
 801cd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd1e:	2200      	movs	r2, #0
 801cd20:	469a      	mov	sl, r3
 801cd22:	4693      	mov	fp, r2
 801cd24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801cd28:	460b      	mov	r3, r1
 801cd2a:	fb0a f203 	mul.w	r2, sl, r3
 801cd2e:	4603      	mov	r3, r0
 801cd30:	fb03 f30b 	mul.w	r3, r3, fp
 801cd34:	4413      	add	r3, r2
 801cd36:	4602      	mov	r2, r0
 801cd38:	fba2 450a 	umull	r4, r5, r2, sl
 801cd3c:	442b      	add	r3, r5
 801cd3e:	461d      	mov	r5, r3
 801cd40:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801cd44:	460b      	mov	r3, r1
 801cd46:	eb13 0804 	adds.w	r8, r3, r4
 801cd4a:	4613      	mov	r3, r2
 801cd4c:	eb43 0905 	adc.w	r9, r3, r5
 801cd50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cd52:	2200      	movs	r2, #0
 801cd54:	60bb      	str	r3, [r7, #8]
 801cd56:	60fa      	str	r2, [r7, #12]
 801cd58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801cd5c:	460b      	mov	r3, r1
 801cd5e:	eb18 0303 	adds.w	r3, r8, r3
 801cd62:	603b      	str	r3, [r7, #0]
 801cd64:	4613      	mov	r3, r2
 801cd66:	eb49 0303 	adc.w	r3, r9, r3
 801cd6a:	607b      	str	r3, [r7, #4]
 801cd6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cd70:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    *r++ = (comp) tmp; /* downsize */
 801cd74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801cd76:	1d13      	adds	r3, r2, #4
 801cd78:	647b      	str	r3, [r7, #68]	@ 0x44
 801cd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd7c:	6013      	str	r3, [r2, #0]
    carry = (comp)(tmp >> COMP_BIT_SIZE);
 801cd7e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801cd82:	f04f 0000 	mov.w	r0, #0
 801cd86:	f04f 0100 	mov.w	r1, #0
 801cd8a:	0018      	movs	r0, r3
 801cd8c:	2100      	movs	r1, #0
 801cd8e:	4603      	mov	r3, r0
 801cd90:	64bb      	str	r3, [r7, #72]	@ 0x48
  } while (++j < n);
 801cd92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cd94:	3301      	adds	r3, #1
 801cd96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801cd98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801cd9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd9c:	429a      	cmp	r2, r3
 801cd9e:	dbb0      	blt.n	801cd02 <bi_int_multiply+0x48>

  *r = carry;
 801cda0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cda2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801cda4:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bia);
 801cda6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801cda8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801cdaa:	f7ff fe6f 	bl	801ca8c <bi_free>
  return trim(biR);
 801cdae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801cdb0:	f000 fdc3 	bl	801d93a <trim>
 801cdb4:	4603      	mov	r3, r0
}
 801cdb6:	4618      	mov	r0, r3
 801cdb8:	3750      	adds	r7, #80	@ 0x50
 801cdba:	46bd      	mov	sp, r7
 801cdbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801cdc0 <bi_divide>:
 * @param v [in]    Either the denominator or the modulus depending on the mode.
 * @param is_mod [n] Determines if this is a normal division (0) or a reduction
 * (1).
 * @return  The result of the division/reduction.
 */
NS_INTERNAL bigint *bi_divide(BI_CTX *ctx, bigint *u, bigint *v, int is_mod) {
 801cdc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cdc4:	b0a0      	sub	sp, #128	@ 0x80
 801cdc6:	af00      	add	r7, sp, #0
 801cdc8:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801cdca:	64b9      	str	r1, [r7, #72]	@ 0x48
 801cdcc:	647a      	str	r2, [r7, #68]	@ 0x44
 801cdce:	643b      	str	r3, [r7, #64]	@ 0x40
  int n = v->size, m = u->size - n;
 801cdd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cdd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cdd6:	673b      	str	r3, [r7, #112]	@ 0x70
 801cdd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cdda:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cdde:	461a      	mov	r2, r3
 801cde0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cde2:	1ad3      	subs	r3, r2, r3
 801cde4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int j = 0, orig_u_size = u->size;
 801cde6:	2300      	movs	r3, #0
 801cde8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801cdea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cdec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cdf0:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint8_t mod_offset = ctx->mod_offset;
 801cdf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801cdf4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801cdf8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  check(u);
  check(v);

  /* if doing reduction and we are < mod, then return mod */
  if (is_mod && bi_compare(v, u) > 0) {
 801cdfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d00c      	beq.n	801ce1c <bi_divide+0x5c>
 801ce02:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801ce04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801ce06:	f000 fc36 	bl	801d676 <bi_compare>
 801ce0a:	4603      	mov	r3, r0
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	dd05      	ble.n	801ce1c <bi_divide+0x5c>
    bi_free(ctx, v);
 801ce10:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801ce12:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ce14:	f7ff fe3a 	bl	801ca8c <bi_free>
    return u;
 801ce18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ce1a:	e1fe      	b.n	801d21a <bi_divide+0x45a>
  }

  quotient = alloc(ctx, m + 1);
 801ce1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801ce1e:	3301      	adds	r3, #1
 801ce20:	4619      	mov	r1, r3
 801ce22:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ce24:	f000 fcd8 	bl	801d7d8 <alloc>
 801ce28:	6638      	str	r0, [r7, #96]	@ 0x60
  tmp_u = alloc(ctx, n + 1);
 801ce2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ce2c:	3301      	adds	r3, #1
 801ce2e:	4619      	mov	r1, r3
 801ce30:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ce32:	f000 fcd1 	bl	801d7d8 <alloc>
 801ce36:	67b8      	str	r0, [r7, #120]	@ 0x78
  v = trim(v); /* make sure we have no leading 0's */
 801ce38:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801ce3a:	f000 fd7e 	bl	801d93a <trim>
 801ce3e:	6478      	str	r0, [r7, #68]	@ 0x44
  d = (comp)((long_comp) COMP_RADIX / (V1 + 1));
 801ce40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ce42:	68d9      	ldr	r1, [r3, #12]
 801ce44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ce46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ce4a:	461a      	mov	r2, r3
 801ce4c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801ce50:	4413      	add	r3, r2
 801ce52:	009b      	lsls	r3, r3, #2
 801ce54:	440b      	add	r3, r1
 801ce56:	681b      	ldr	r3, [r3, #0]
 801ce58:	3301      	adds	r3, #1
 801ce5a:	2200      	movs	r2, #0
 801ce5c:	461c      	mov	r4, r3
 801ce5e:	4615      	mov	r5, r2
 801ce60:	4622      	mov	r2, r4
 801ce62:	462b      	mov	r3, r5
 801ce64:	f04f 0000 	mov.w	r0, #0
 801ce68:	f04f 0101 	mov.w	r1, #1
 801ce6c:	f7e3 fab8 	bl	80003e0 <__aeabi_uldivmod>
 801ce70:	4602      	mov	r2, r0
 801ce72:	460b      	mov	r3, r1
 801ce74:	4613      	mov	r3, r2
 801ce76:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* clear things to start with */
  memset(quotient->comps, 0, (size_t) ((quotient->size) * COMP_BYTE_SIZE));
 801ce78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ce7a:	68d8      	ldr	r0, [r3, #12]
 801ce7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ce7e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ce82:	009b      	lsls	r3, r3, #2
 801ce84:	461a      	mov	r2, r3
 801ce86:	2100      	movs	r1, #0
 801ce88:	f008 fc80 	bl	802578c <memset>

  /* normalise */
  if (d > 1) {
 801ce8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ce8e:	2b01      	cmp	r3, #1
 801ce90:	d916      	bls.n	801cec0 <bi_divide+0x100>
    u = bi_int_multiply(ctx, u, d);
 801ce92:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801ce94:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801ce96:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ce98:	f7ff ff0f 	bl	801ccba <bi_int_multiply>
 801ce9c:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (is_mod) {
 801ce9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cea0:	2b00      	cmp	r3, #0
 801cea2:	d007      	beq.n	801ceb4 <bi_divide+0xf4>
      v = ctx->bi_normalised_mod[mod_offset];
 801cea4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801cea8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801ceaa:	3306      	adds	r3, #6
 801ceac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ceb0:	647b      	str	r3, [r7, #68]	@ 0x44
 801ceb2:	e005      	b.n	801cec0 <bi_divide+0x100>
    } else {
      v = bi_int_multiply(ctx, v, d);
 801ceb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801ceb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801ceb8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801ceba:	f7ff fefe 	bl	801ccba <bi_int_multiply>
 801cebe:	6478      	str	r0, [r7, #68]	@ 0x44
    }
  }

  if (orig_u_size == u->size) /* new digit position u0 */
 801cec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cec2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cec6:	461a      	mov	r2, r3
 801cec8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ceca:	4293      	cmp	r3, r2
 801cecc:	d105      	bne.n	801ceda <bi_divide+0x11a>
  {
    more_comps(u, orig_u_size + 1);
 801cece:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ced0:	3301      	adds	r3, #1
 801ced2:	4619      	mov	r1, r3
 801ced4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801ced6:	f000 fc23 	bl	801d720 <more_comps>
  }

  do {
    /* get a temporary short version of u */
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801ceda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cedc:	68d8      	ldr	r0, [r3, #12]
 801cede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cee0:	68d9      	ldr	r1, [r3, #12]
 801cee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801cee4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cee8:	461a      	mov	r2, r3
 801ceea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ceec:	1ad3      	subs	r3, r2, r3
 801ceee:	1e5a      	subs	r2, r3, #1
 801cef0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801cef2:	1ad3      	subs	r3, r2, r3
 801cef4:	009b      	lsls	r3, r3, #2
 801cef6:	4419      	add	r1, r3
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801cef8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801cefa:	3301      	adds	r3, #1
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801cefc:	009b      	lsls	r3, r3, #2
 801cefe:	461a      	mov	r2, r3
 801cf00:	f008 fd79 	bl	80259f6 <memcpy>

    /* calculate q' */
    if (U(0) == V1) {
 801cf04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf06:	68d9      	ldr	r1, [r3, #12]
 801cf08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cf0e:	461a      	mov	r2, r3
 801cf10:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cf14:	4413      	add	r3, r2
 801cf16:	009b      	lsls	r3, r3, #2
 801cf18:	440b      	add	r3, r1
 801cf1a:	6818      	ldr	r0, [r3, #0]
 801cf1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf1e:	68d9      	ldr	r1, [r3, #12]
 801cf20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf22:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cf26:	461a      	mov	r2, r3
 801cf28:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cf2c:	4413      	add	r3, r2
 801cf2e:	009b      	lsls	r3, r3, #2
 801cf30:	440b      	add	r3, r1
 801cf32:	681b      	ldr	r3, [r3, #0]
 801cf34:	4298      	cmp	r0, r3
 801cf36:	d103      	bne.n	801cf40 <bi_divide+0x180>
      q_dash = COMP_RADIX - 1;
 801cf38:	f04f 33ff 	mov.w	r3, #4294967295
 801cf3c:	677b      	str	r3, [r7, #116]	@ 0x74
 801cf3e:	e0c2      	b.n	801d0c6 <bi_divide+0x306>
    } else {
      q_dash = (comp)(((long_comp) U(0) * COMP_RADIX + U(1)) / V1);
 801cf40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf42:	68d9      	ldr	r1, [r3, #12]
 801cf44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf46:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cf4a:	461a      	mov	r2, r3
 801cf4c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cf50:	4413      	add	r3, r2
 801cf52:	009b      	lsls	r3, r3, #2
 801cf54:	440b      	add	r3, r1
 801cf56:	681b      	ldr	r3, [r3, #0]
 801cf58:	2200      	movs	r2, #0
 801cf5a:	633b      	str	r3, [r7, #48]	@ 0x30
 801cf5c:	637a      	str	r2, [r7, #52]	@ 0x34
 801cf5e:	f04f 0000 	mov.w	r0, #0
 801cf62:	f04f 0100 	mov.w	r1, #0
 801cf66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cf68:	0019      	movs	r1, r3
 801cf6a:	2000      	movs	r0, #0
 801cf6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf6e:	68dc      	ldr	r4, [r3, #12]
 801cf70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cf72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cf76:	461a      	mov	r2, r3
 801cf78:	4baa      	ldr	r3, [pc, #680]	@ (801d224 <bi_divide+0x464>)
 801cf7a:	4413      	add	r3, r2
 801cf7c:	009b      	lsls	r3, r3, #2
 801cf7e:	4423      	add	r3, r4
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	2200      	movs	r2, #0
 801cf84:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cf86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801cf88:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801cf8c:	4623      	mov	r3, r4
 801cf8e:	18c3      	adds	r3, r0, r3
 801cf90:	623b      	str	r3, [r7, #32]
 801cf92:	462b      	mov	r3, r5
 801cf94:	eb41 0303 	adc.w	r3, r1, r3
 801cf98:	627b      	str	r3, [r7, #36]	@ 0x24
 801cf9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cf9c:	68d9      	ldr	r1, [r3, #12]
 801cf9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfa0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cfa4:	461a      	mov	r2, r3
 801cfa6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cfaa:	4413      	add	r3, r2
 801cfac:	009b      	lsls	r3, r3, #2
 801cfae:	440b      	add	r3, r1
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	2200      	movs	r2, #0
 801cfb4:	61bb      	str	r3, [r7, #24]
 801cfb6:	61fa      	str	r2, [r7, #28]
 801cfb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801cfbc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801cfc0:	f7e3 fa0e 	bl	80003e0 <__aeabi_uldivmod>
 801cfc4:	4602      	mov	r2, r0
 801cfc6:	460b      	mov	r3, r1
 801cfc8:	4613      	mov	r3, r2
 801cfca:	677b      	str	r3, [r7, #116]	@ 0x74

      if (v->size > 1 && V2) {
 801cfcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cfd2:	2b01      	cmp	r3, #1
 801cfd4:	dd77      	ble.n	801d0c6 <bi_divide+0x306>
 801cfd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfd8:	68d9      	ldr	r1, [r3, #12]
 801cfda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801cfdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cfe0:	461a      	mov	r2, r3
 801cfe2:	4b90      	ldr	r3, [pc, #576]	@ (801d224 <bi_divide+0x464>)
 801cfe4:	4413      	add	r3, r2
 801cfe6:	009b      	lsls	r3, r3, #2
 801cfe8:	440b      	add	r3, r1
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d06a      	beq.n	801d0c6 <bi_divide+0x306>
        /* we are implementing the following:
        if (V2*q_dash > (((U(0)*COMP_RADIX + U(1) -
                q_dash*V1)*COMP_RADIX) + U(2))) ... */
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801cff0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cff2:	68d9      	ldr	r1, [r3, #12]
 801cff4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801cff6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801cffa:	461a      	mov	r2, r3
 801cffc:	4b89      	ldr	r3, [pc, #548]	@ (801d224 <bi_divide+0x464>)
 801cffe:	4413      	add	r3, r2
 801d000:	009b      	lsls	r3, r3, #2
 801d002:	440b      	add	r3, r1
 801d004:	6818      	ldr	r0, [r3, #0]
                            (long_comp) q_dash * V1);
 801d006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d008:	68d9      	ldr	r1, [r3, #12]
 801d00a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d00c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d010:	461a      	mov	r2, r3
 801d012:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d016:	4413      	add	r3, r2
 801d018:	009b      	lsls	r3, r3, #2
 801d01a:	440b      	add	r3, r1
 801d01c:	681a      	ldr	r2, [r3, #0]
 801d01e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d020:	fb02 f303 	mul.w	r3, r2, r3
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801d024:	1ac3      	subs	r3, r0, r3
 801d026:	65bb      	str	r3, [r7, #88]	@ 0x58
        if ((long_comp) V2 * q_dash > (long_comp) inner * COMP_RADIX + U(2)) {
 801d028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d02a:	68d9      	ldr	r1, [r3, #12]
 801d02c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d02e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d032:	461a      	mov	r2, r3
 801d034:	4b7b      	ldr	r3, [pc, #492]	@ (801d224 <bi_divide+0x464>)
 801d036:	4413      	add	r3, r2
 801d038:	009b      	lsls	r3, r3, #2
 801d03a:	440b      	add	r3, r1
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	2200      	movs	r2, #0
 801d040:	613b      	str	r3, [r7, #16]
 801d042:	617a      	str	r2, [r7, #20]
 801d044:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d046:	2200      	movs	r2, #0
 801d048:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d04a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801d04c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801d050:	462b      	mov	r3, r5
 801d052:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801d056:	4602      	mov	r2, r0
 801d058:	fb02 f203 	mul.w	r2, r2, r3
 801d05c:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 801d060:	460b      	mov	r3, r1
 801d062:	4621      	mov	r1, r4
 801d064:	fb01 f303 	mul.w	r3, r1, r3
 801d068:	4413      	add	r3, r2
 801d06a:	4622      	mov	r2, r4
 801d06c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801d06e:	fba2 8901 	umull	r8, r9, r2, r1
 801d072:	444b      	add	r3, r9
 801d074:	4699      	mov	r9, r3
 801d076:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d078:	2200      	movs	r2, #0
 801d07a:	60bb      	str	r3, [r7, #8]
 801d07c:	60fa      	str	r2, [r7, #12]
 801d07e:	f04f 0000 	mov.w	r0, #0
 801d082:	f04f 0100 	mov.w	r1, #0
 801d086:	68bb      	ldr	r3, [r7, #8]
 801d088:	0019      	movs	r1, r3
 801d08a:	2000      	movs	r0, #0
 801d08c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d08e:	68dc      	ldr	r4, [r3, #12]
 801d090:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d092:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d096:	461a      	mov	r2, r3
 801d098:	4b63      	ldr	r3, [pc, #396]	@ (801d228 <bi_divide+0x468>)
 801d09a:	4413      	add	r3, r2
 801d09c:	009b      	lsls	r3, r3, #2
 801d09e:	4423      	add	r3, r4
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	2200      	movs	r2, #0
 801d0a4:	603b      	str	r3, [r7, #0]
 801d0a6:	607a      	str	r2, [r7, #4]
 801d0a8:	e9d7 4500 	ldrd	r4, r5, [r7]
 801d0ac:	4623      	mov	r3, r4
 801d0ae:	eb10 0a03 	adds.w	sl, r0, r3
 801d0b2:	462b      	mov	r3, r5
 801d0b4:	eb41 0b03 	adc.w	fp, r1, r3
 801d0b8:	45c2      	cmp	sl, r8
 801d0ba:	eb7b 0309 	sbcs.w	r3, fp, r9
 801d0be:	d202      	bcs.n	801d0c6 <bi_divide+0x306>
          q_dash--;
 801d0c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d0c2:	3b01      	subs	r3, #1
 801d0c4:	677b      	str	r3, [r7, #116]	@ 0x74
        }
      }
    }

    /* multiply and subtract */
    if (q_dash) {
 801d0c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d057      	beq.n	801d17c <bi_divide+0x3bc>
      int is_negative;
      tmp_u = bi_subtract(ctx, tmp_u, bi_int_multiply(ctx, bi_copy(v), q_dash),
 801d0cc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d0ce:	f7ff fc9d 	bl	801ca0c <bi_copy>
 801d0d2:	4603      	mov	r3, r0
 801d0d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801d0d6:	4619      	mov	r1, r3
 801d0d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d0da:	f7ff fdee 	bl	801ccba <bi_int_multiply>
 801d0de:	4602      	mov	r2, r0
 801d0e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801d0e4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d0e6:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d0e8:	f7ff fd8f 	bl	801cc0a <bi_subtract>
 801d0ec:	67b8      	str	r0, [r7, #120]	@ 0x78
                          &is_negative);
      more_comps(tmp_u, n + 1);
 801d0ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d0f0:	3301      	adds	r3, #1
 801d0f2:	4619      	mov	r1, r3
 801d0f4:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 801d0f6:	f000 fb13 	bl	801d720 <more_comps>

      Q(j) = q_dash;
 801d0fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d0fc:	68d9      	ldr	r1, [r3, #12]
 801d0fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d100:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d104:	461a      	mov	r2, r3
 801d106:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d108:	1ad3      	subs	r3, r2, r3
 801d10a:	461a      	mov	r2, r3
 801d10c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d110:	4413      	add	r3, r2
 801d112:	009b      	lsls	r3, r3, #2
 801d114:	18ca      	adds	r2, r1, r3
 801d116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801d118:	6013      	str	r3, [r2, #0]

      /* add back */
      if (is_negative) {
 801d11a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d03d      	beq.n	801d19c <bi_divide+0x3dc>
        Q(j)--;
 801d120:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d122:	68d9      	ldr	r1, [r3, #12]
 801d124:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d126:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d12a:	461a      	mov	r2, r3
 801d12c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d12e:	1ad3      	subs	r3, r2, r3
 801d130:	461a      	mov	r2, r3
 801d132:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d136:	4413      	add	r3, r2
 801d138:	009b      	lsls	r3, r3, #2
 801d13a:	18ca      	adds	r2, r1, r3
 801d13c:	6813      	ldr	r3, [r2, #0]
 801d13e:	3b01      	subs	r3, #1
 801d140:	6013      	str	r3, [r2, #0]
        tmp_u = bi_add(ctx, tmp_u, bi_copy(v));
 801d142:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d144:	f7ff fc62 	bl	801ca0c <bi_copy>
 801d148:	4603      	mov	r3, r0
 801d14a:	461a      	mov	r2, r3
 801d14c:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d14e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d150:	f7ff fcfe 	bl	801cb50 <bi_add>
 801d154:	67b8      	str	r0, [r7, #120]	@ 0x78

        /* lop off the carry */
        tmp_u->size--;
 801d156:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d158:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d15c:	b29b      	uxth	r3, r3
 801d15e:	3b01      	subs	r3, #1
 801d160:	b29b      	uxth	r3, r3
 801d162:	b21b      	sxth	r3, r3
 801d164:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801d166:	8093      	strh	r3, [r2, #4]
        v->size--;
 801d168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d16a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d16e:	b29b      	uxth	r3, r3
 801d170:	3b01      	subs	r3, #1
 801d172:	b29b      	uxth	r3, r3
 801d174:	b21b      	sxth	r3, r3
 801d176:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801d178:	8093      	strh	r3, [r2, #4]
 801d17a:	e00f      	b.n	801d19c <bi_divide+0x3dc>
      }
    } else {
      Q(j) = 0;
 801d17c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d17e:	68d9      	ldr	r1, [r3, #12]
 801d180:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801d182:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d186:	461a      	mov	r2, r3
 801d188:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d18a:	1ad3      	subs	r3, r2, r3
 801d18c:	461a      	mov	r2, r3
 801d18e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d192:	4413      	add	r3, r2
 801d194:	009b      	lsls	r3, r3, #2
 801d196:	18ca      	adds	r2, r1, r3
 801d198:	2300      	movs	r3, #0
 801d19a:	6013      	str	r3, [r2, #0]
    }

    /* copy back to u */
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801d19c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d19e:	68d9      	ldr	r1, [r3, #12]
 801d1a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d1a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d1a6:	461a      	mov	r2, r3
 801d1a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d1aa:	1ad3      	subs	r3, r2, r3
 801d1ac:	1e5a      	subs	r2, r3, #1
 801d1ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d1b0:	1ad3      	subs	r3, r2, r3
 801d1b2:	009b      	lsls	r3, r3, #2
 801d1b4:	18c8      	adds	r0, r1, r3
 801d1b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801d1b8:	68d9      	ldr	r1, [r3, #12]
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801d1ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801d1bc:	3301      	adds	r3, #1
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801d1be:	009b      	lsls	r3, r3, #2
 801d1c0:	461a      	mov	r2, r3
 801d1c2:	f008 fc18 	bl	80259f6 <memcpy>
  } while (++j <= m);
 801d1c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801d1c8:	3301      	adds	r3, #1
 801d1ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801d1cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801d1ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801d1d0:	429a      	cmp	r2, r3
 801d1d2:	f77f ae82 	ble.w	801ceda <bi_divide+0x11a>

  bi_free(ctx, tmp_u);
 801d1d6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801d1d8:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d1da:	f7ff fc57 	bl	801ca8c <bi_free>
  bi_free(ctx, v);
 801d1de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801d1e0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d1e2:	f7ff fc53 	bl	801ca8c <bi_free>

  if (is_mod) /* get the remainder */
 801d1e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d00e      	beq.n	801d20a <bi_divide+0x44a>
  {
    bi_free(ctx, quotient);
 801d1ec:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801d1ee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d1f0:	f7ff fc4c 	bl	801ca8c <bi_free>
    return bi_int_divide(ctx, trim(u), d);
 801d1f4:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801d1f6:	f000 fba0 	bl	801d93a <trim>
 801d1fa:	4603      	mov	r3, r0
 801d1fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d1fe:	4619      	mov	r1, r3
 801d200:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d202:	f000 f813 	bl	801d22c <bi_int_divide>
 801d206:	4603      	mov	r3, r0
 801d208:	e007      	b.n	801d21a <bi_divide+0x45a>
  } else /* get the quotient */
  {
    bi_free(ctx, u);
 801d20a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801d20c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801d20e:	f7ff fc3d 	bl	801ca8c <bi_free>
    return trim(quotient);
 801d212:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801d214:	f000 fb91 	bl	801d93a <trim>
 801d218:	4603      	mov	r3, r0
  }
}
 801d21a:	4618      	mov	r0, r3
 801d21c:	3780      	adds	r7, #128	@ 0x80
 801d21e:	46bd      	mov	sp, r7
 801d220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d224:	3ffffffe 	.word	0x3ffffffe
 801d228:	3ffffffd 	.word	0x3ffffffd

0801d22c <bi_int_divide>:

/*
 * Perform an integer divide on a bigint.
 */
static bigint *bi_int_divide(BI_CTX *ctx, bigint *biR, comp denom) {
 801d22c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d230:	b08a      	sub	sp, #40	@ 0x28
 801d232:	af00      	add	r7, sp, #0
 801d234:	6178      	str	r0, [r7, #20]
 801d236:	6139      	str	r1, [r7, #16]
 801d238:	60fa      	str	r2, [r7, #12]
  int i = biR->size - 1;
 801d23a:	693b      	ldr	r3, [r7, #16]
 801d23c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d240:	3b01      	subs	r3, #1
 801d242:	627b      	str	r3, [r7, #36]	@ 0x24
  long_comp r = 0;
 801d244:	f04f 0200 	mov.w	r2, #0
 801d248:	f04f 0300 	mov.w	r3, #0
 801d24c:	e9c7 2306 	strd	r2, r3, [r7, #24]

  (void) ctx;
  check(biR);

  do {
    r = (r << COMP_BIT_SIZE) + biR->comps[i];
 801d250:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801d254:	f04f 0200 	mov.w	r2, #0
 801d258:	f04f 0300 	mov.w	r3, #0
 801d25c:	0003      	movs	r3, r0
 801d25e:	2200      	movs	r2, #0
 801d260:	6939      	ldr	r1, [r7, #16]
 801d262:	68c8      	ldr	r0, [r1, #12]
 801d264:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d266:	0089      	lsls	r1, r1, #2
 801d268:	4401      	add	r1, r0
 801d26a:	6809      	ldr	r1, [r1, #0]
 801d26c:	2000      	movs	r0, #0
 801d26e:	460c      	mov	r4, r1
 801d270:	4605      	mov	r5, r0
 801d272:	eb12 0804 	adds.w	r8, r2, r4
 801d276:	eb43 0905 	adc.w	r9, r3, r5
 801d27a:	e9c7 8906 	strd	r8, r9, [r7, #24]
    biR->comps[i] = (comp)(r / denom);
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	2200      	movs	r2, #0
 801d282:	603b      	str	r3, [r7, #0]
 801d284:	607a      	str	r2, [r7, #4]
 801d286:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d28a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801d28e:	f7e3 f8a7 	bl	80003e0 <__aeabi_uldivmod>
 801d292:	4602      	mov	r2, r0
 801d294:	460b      	mov	r3, r1
 801d296:	4610      	mov	r0, r2
 801d298:	4619      	mov	r1, r3
 801d29a:	693b      	ldr	r3, [r7, #16]
 801d29c:	68da      	ldr	r2, [r3, #12]
 801d29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2a0:	009b      	lsls	r3, r3, #2
 801d2a2:	4413      	add	r3, r2
 801d2a4:	4602      	mov	r2, r0
 801d2a6:	601a      	str	r2, [r3, #0]
    r %= denom;
 801d2a8:	68fb      	ldr	r3, [r7, #12]
 801d2aa:	2200      	movs	r2, #0
 801d2ac:	469a      	mov	sl, r3
 801d2ae:	4693      	mov	fp, r2
 801d2b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801d2b4:	4652      	mov	r2, sl
 801d2b6:	465b      	mov	r3, fp
 801d2b8:	f7e3 f892 	bl	80003e0 <__aeabi_uldivmod>
 801d2bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
  } while (--i >= 0);
 801d2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2c2:	3b01      	subs	r3, #1
 801d2c4:	627b      	str	r3, [r7, #36]	@ 0x24
 801d2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2c8:	2b00      	cmp	r3, #0
 801d2ca:	dac1      	bge.n	801d250 <bi_int_divide+0x24>

  return trim(biR);
 801d2cc:	6938      	ldr	r0, [r7, #16]
 801d2ce:	f000 fb34 	bl	801d93a <trim>
 801d2d2:	4603      	mov	r3, r0
}
 801d2d4:	4618      	mov	r0, r3
 801d2d6:	3728      	adds	r7, #40	@ 0x28
 801d2d8:	46bd      	mov	sp, r7
 801d2da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d2de <bi_import>:
 * @param ctx [in]  The bigint session context.
 * @param data [in] The data to be converted.
 * @param size [in] The number of bytes of data.
 * @return A bigint representing this data.
 */
NS_INTERNAL bigint *bi_import(BI_CTX *ctx, const uint8_t *data, int size) {
 801d2de:	b580      	push	{r7, lr}
 801d2e0:	b088      	sub	sp, #32
 801d2e2:	af00      	add	r7, sp, #0
 801d2e4:	60f8      	str	r0, [r7, #12]
 801d2e6:	60b9      	str	r1, [r7, #8]
 801d2e8:	607a      	str	r2, [r7, #4]
  bigint *biR = alloc(ctx, (size + COMP_BYTE_SIZE - 1) / COMP_BYTE_SIZE);
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	3303      	adds	r3, #3
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	da00      	bge.n	801d2f4 <bi_import+0x16>
 801d2f2:	3303      	adds	r3, #3
 801d2f4:	109b      	asrs	r3, r3, #2
 801d2f6:	4619      	mov	r1, r3
 801d2f8:	68f8      	ldr	r0, [r7, #12]
 801d2fa:	f000 fa6d 	bl	801d7d8 <alloc>
 801d2fe:	6138      	str	r0, [r7, #16]
  int i, j = 0, offset = 0;
 801d300:	2300      	movs	r3, #0
 801d302:	61bb      	str	r3, [r7, #24]
 801d304:	2300      	movs	r3, #0
 801d306:	617b      	str	r3, [r7, #20]

  memset(biR->comps, 0, (size_t) (biR->size * COMP_BYTE_SIZE));
 801d308:	693b      	ldr	r3, [r7, #16]
 801d30a:	68d8      	ldr	r0, [r3, #12]
 801d30c:	693b      	ldr	r3, [r7, #16]
 801d30e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d312:	009b      	lsls	r3, r3, #2
 801d314:	461a      	mov	r2, r3
 801d316:	2100      	movs	r1, #0
 801d318:	f008 fa38 	bl	802578c <memset>

  for (i = size - 1; i >= 0; i--) {
 801d31c:	687b      	ldr	r3, [r7, #4]
 801d31e:	3b01      	subs	r3, #1
 801d320:	61fb      	str	r3, [r7, #28]
 801d322:	e022      	b.n	801d36a <bi_import+0x8c>
    biR->comps[offset] += (comp) data[i] << (j * 8);
 801d324:	693b      	ldr	r3, [r7, #16]
 801d326:	68da      	ldr	r2, [r3, #12]
 801d328:	697b      	ldr	r3, [r7, #20]
 801d32a:	009b      	lsls	r3, r3, #2
 801d32c:	4413      	add	r3, r2
 801d32e:	6819      	ldr	r1, [r3, #0]
 801d330:	69fb      	ldr	r3, [r7, #28]
 801d332:	68ba      	ldr	r2, [r7, #8]
 801d334:	4413      	add	r3, r2
 801d336:	781b      	ldrb	r3, [r3, #0]
 801d338:	461a      	mov	r2, r3
 801d33a:	69bb      	ldr	r3, [r7, #24]
 801d33c:	00db      	lsls	r3, r3, #3
 801d33e:	409a      	lsls	r2, r3
 801d340:	693b      	ldr	r3, [r7, #16]
 801d342:	68d8      	ldr	r0, [r3, #12]
 801d344:	697b      	ldr	r3, [r7, #20]
 801d346:	009b      	lsls	r3, r3, #2
 801d348:	4403      	add	r3, r0
 801d34a:	440a      	add	r2, r1
 801d34c:	601a      	str	r2, [r3, #0]

    if (++j == COMP_BYTE_SIZE) {
 801d34e:	69bb      	ldr	r3, [r7, #24]
 801d350:	3301      	adds	r3, #1
 801d352:	61bb      	str	r3, [r7, #24]
 801d354:	69bb      	ldr	r3, [r7, #24]
 801d356:	2b04      	cmp	r3, #4
 801d358:	d104      	bne.n	801d364 <bi_import+0x86>
      j = 0;
 801d35a:	2300      	movs	r3, #0
 801d35c:	61bb      	str	r3, [r7, #24]
      offset++;
 801d35e:	697b      	ldr	r3, [r7, #20]
 801d360:	3301      	adds	r3, #1
 801d362:	617b      	str	r3, [r7, #20]
  for (i = size - 1; i >= 0; i--) {
 801d364:	69fb      	ldr	r3, [r7, #28]
 801d366:	3b01      	subs	r3, #1
 801d368:	61fb      	str	r3, [r7, #28]
 801d36a:	69fb      	ldr	r3, [r7, #28]
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	dad9      	bge.n	801d324 <bi_import+0x46>
    }
  }

  return trim(biR);
 801d370:	6938      	ldr	r0, [r7, #16]
 801d372:	f000 fae2 	bl	801d93a <trim>
 801d376:	4603      	mov	r3, r0
}
 801d378:	4618      	mov	r0, r3
 801d37a:	3720      	adds	r7, #32
 801d37c:	46bd      	mov	sp, r7
 801d37e:	bd80      	pop	{r7, pc}

0801d380 <bi_export>:
 * @param x [in]  The bigint to be converted.
 * @param data [out] The converted data as a byte stream.
 * @param size [in] The maximum size of the byte stream. Unused bytes will be
 * zeroed.
 */
NS_INTERNAL void bi_export(BI_CTX *ctx, bigint *x, uint8_t *data, int size) {
 801d380:	b580      	push	{r7, lr}
 801d382:	b08a      	sub	sp, #40	@ 0x28
 801d384:	af00      	add	r7, sp, #0
 801d386:	60f8      	str	r0, [r7, #12]
 801d388:	60b9      	str	r1, [r7, #8]
 801d38a:	607a      	str	r2, [r7, #4]
 801d38c:	603b      	str	r3, [r7, #0]
  int i, j, k = size - 1;
 801d38e:	683b      	ldr	r3, [r7, #0]
 801d390:	3b01      	subs	r3, #1
 801d392:	61fb      	str	r3, [r7, #28]

  check(x);
  memset(data, 0, (size_t) size); /* ensure all leading 0's are cleared */
 801d394:	683b      	ldr	r3, [r7, #0]
 801d396:	461a      	mov	r2, r3
 801d398:	2100      	movs	r1, #0
 801d39a:	6878      	ldr	r0, [r7, #4]
 801d39c:	f008 f9f6 	bl	802578c <memset>

  for (i = 0; i < x->size; i++) {
 801d3a0:	2300      	movs	r3, #0
 801d3a2:	627b      	str	r3, [r7, #36]	@ 0x24
 801d3a4:	e02b      	b.n	801d3fe <bi_export+0x7e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	623b      	str	r3, [r7, #32]
 801d3aa:	e022      	b.n	801d3f2 <bi_export+0x72>
      comp mask = (comp) 0xff << (j * 8);
 801d3ac:	6a3b      	ldr	r3, [r7, #32]
 801d3ae:	00db      	lsls	r3, r3, #3
 801d3b0:	22ff      	movs	r2, #255	@ 0xff
 801d3b2:	fa02 f303 	lsl.w	r3, r2, r3
 801d3b6:	61bb      	str	r3, [r7, #24]
      int num = (int) (x->comps[i] & mask) >> (j * 8);
 801d3b8:	68bb      	ldr	r3, [r7, #8]
 801d3ba:	68da      	ldr	r2, [r3, #12]
 801d3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3be:	009b      	lsls	r3, r3, #2
 801d3c0:	4413      	add	r3, r2
 801d3c2:	681a      	ldr	r2, [r3, #0]
 801d3c4:	69bb      	ldr	r3, [r7, #24]
 801d3c6:	4013      	ands	r3, r2
 801d3c8:	461a      	mov	r2, r3
 801d3ca:	6a3b      	ldr	r3, [r7, #32]
 801d3cc:	00db      	lsls	r3, r3, #3
 801d3ce:	fa42 f303 	asr.w	r3, r2, r3
 801d3d2:	617b      	str	r3, [r7, #20]
      data[k--] = (uint8_t) num;
 801d3d4:	69fb      	ldr	r3, [r7, #28]
 801d3d6:	1e5a      	subs	r2, r3, #1
 801d3d8:	61fa      	str	r2, [r7, #28]
 801d3da:	461a      	mov	r2, r3
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	4413      	add	r3, r2
 801d3e0:	697a      	ldr	r2, [r7, #20]
 801d3e2:	b2d2      	uxtb	r2, r2
 801d3e4:	701a      	strb	r2, [r3, #0]

      if (k < 0) {
 801d3e6:	69fb      	ldr	r3, [r7, #28]
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	db10      	blt.n	801d40e <bi_export+0x8e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801d3ec:	6a3b      	ldr	r3, [r7, #32]
 801d3ee:	3301      	adds	r3, #1
 801d3f0:	623b      	str	r3, [r7, #32]
 801d3f2:	6a3b      	ldr	r3, [r7, #32]
 801d3f4:	2b03      	cmp	r3, #3
 801d3f6:	ddd9      	ble.n	801d3ac <bi_export+0x2c>
  for (i = 0; i < x->size; i++) {
 801d3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3fa:	3301      	adds	r3, #1
 801d3fc:	627b      	str	r3, [r7, #36]	@ 0x24
 801d3fe:	68bb      	ldr	r3, [r7, #8]
 801d400:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d404:	461a      	mov	r2, r3
 801d406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d408:	4293      	cmp	r3, r2
 801d40a:	dbcc      	blt.n	801d3a6 <bi_export+0x26>
        goto buf_done;
      }
    }
  }
buf_done:
 801d40c:	e000      	b.n	801d410 <bi_export+0x90>
        goto buf_done;
 801d40e:	bf00      	nop

  bi_free(ctx, x);
 801d410:	68b9      	ldr	r1, [r7, #8]
 801d412:	68f8      	ldr	r0, [r7, #12]
 801d414:	f7ff fb3a 	bl	801ca8c <bi_free>
}
 801d418:	bf00      	nop
 801d41a:	3728      	adds	r7, #40	@ 0x28
 801d41c:	46bd      	mov	sp, r7
 801d41e:	bd80      	pop	{r7, pc}

0801d420 <bi_set_mod>:
 * @param mod_offset [in] There are three moduluii that can be stored - the
 * standard modulus, and its two primes p and q. This offset refers to which
 * modulus we are referring to.
 * @see bi_free_mod(), bi_mod_power().
 */
NS_INTERNAL void bi_set_mod(BI_CTX *ctx, bigint *bim, int mod_offset) {
 801d420:	b5b0      	push	{r4, r5, r7, lr}
 801d422:	b086      	sub	sp, #24
 801d424:	af00      	add	r7, sp, #0
 801d426:	60f8      	str	r0, [r7, #12]
 801d428:	60b9      	str	r1, [r7, #8]
 801d42a:	607a      	str	r2, [r7, #4]
  int k = bim->size;
 801d42c:	68bb      	ldr	r3, [r7, #8]
 801d42e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d432:	617b      	str	r3, [r7, #20]
  comp d = (comp)((long_comp) COMP_RADIX / (bim->comps[k - 1] + 1));
 801d434:	68bb      	ldr	r3, [r7, #8]
 801d436:	68da      	ldr	r2, [r3, #12]
 801d438:	6979      	ldr	r1, [r7, #20]
 801d43a:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d43e:	440b      	add	r3, r1
 801d440:	009b      	lsls	r3, r3, #2
 801d442:	4413      	add	r3, r2
 801d444:	681b      	ldr	r3, [r3, #0]
 801d446:	3301      	adds	r3, #1
 801d448:	2200      	movs	r2, #0
 801d44a:	461c      	mov	r4, r3
 801d44c:	4615      	mov	r5, r2
 801d44e:	4622      	mov	r2, r4
 801d450:	462b      	mov	r3, r5
 801d452:	f04f 0000 	mov.w	r0, #0
 801d456:	f04f 0101 	mov.w	r1, #1
 801d45a:	f7e2 ffc1 	bl	80003e0 <__aeabi_uldivmod>
 801d45e:	4602      	mov	r2, r0
 801d460:	460b      	mov	r3, r1
 801d462:	4613      	mov	r3, r2
 801d464:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_BIGINT_MONTGOMERY
  bigint *R, *R2;
#endif

  ctx->bi_mod[mod_offset] = bim;
 801d466:	68fa      	ldr	r2, [r7, #12]
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	3302      	adds	r3, #2
 801d46c:	009b      	lsls	r3, r3, #2
 801d46e:	4413      	add	r3, r2
 801d470:	68ba      	ldr	r2, [r7, #8]
 801d472:	605a      	str	r2, [r3, #4]
  bi_permanent(ctx->bi_mod[mod_offset]);
 801d474:	68fa      	ldr	r2, [r7, #12]
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	3302      	adds	r3, #2
 801d47a:	009b      	lsls	r3, r3, #2
 801d47c:	4413      	add	r3, r2
 801d47e:	685b      	ldr	r3, [r3, #4]
 801d480:	4618      	mov	r0, r3
 801d482:	f7ff fadb 	bl	801ca3c <bi_permanent>
  ctx->bi_normalised_mod[mod_offset] = bi_int_multiply(ctx, bim, d);
 801d486:	693a      	ldr	r2, [r7, #16]
 801d488:	68b9      	ldr	r1, [r7, #8]
 801d48a:	68f8      	ldr	r0, [r7, #12]
 801d48c:	f7ff fc15 	bl	801ccba <bi_int_multiply>
 801d490:	4601      	mov	r1, r0
 801d492:	68fb      	ldr	r3, [r7, #12]
 801d494:	687a      	ldr	r2, [r7, #4]
 801d496:	3206      	adds	r2, #6
 801d498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  bi_permanent(ctx->bi_normalised_mod[mod_offset]);
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	687a      	ldr	r2, [r7, #4]
 801d4a0:	3206      	adds	r2, #6
 801d4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d4a6:	4618      	mov	r0, r3
 801d4a8:	f7ff fac8 	bl	801ca3c <bi_permanent>
  ctx->bi_mu[mod_offset] =
      bi_divide(ctx, comp_left_shift(bi_clone(ctx, ctx->bi_radix), k * 2 - 1),
                ctx->bi_mod[mod_offset], 0);
  bi_permanent(ctx->bi_mu[mod_offset]);
#endif
}
 801d4ac:	bf00      	nop
 801d4ae:	3718      	adds	r7, #24
 801d4b0:	46bd      	mov	sp, r7
 801d4b2:	bdb0      	pop	{r4, r5, r7, pc}

0801d4b4 <regular_multiply>:
 * Barrett reduction has no need for some parts of the product, so ignore bits
 * of the multiply. This routine gives Barrett its big performance
 * improvements over Classical/Montgomery reduction methods.
 */
static bigint *regular_multiply(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int inner_partial, int outer_partial) {
 801d4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d4b8:	b098      	sub	sp, #96	@ 0x60
 801d4ba:	af00      	add	r7, sp, #0
 801d4bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801d4be:	62b9      	str	r1, [r7, #40]	@ 0x28
 801d4c0:	627a      	str	r2, [r7, #36]	@ 0x24
 801d4c2:	623b      	str	r3, [r7, #32]
  int i = 0, j;
 801d4c4:	2300      	movs	r3, #0
 801d4c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int n = bia->size;
 801d4c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d4ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int t = bib->size;
 801d4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d4d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  bigint *biR = alloc(ctx, n + t);
 801d4d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d4da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d4dc:	4413      	add	r3, r2
 801d4de:	4619      	mov	r1, r3
 801d4e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d4e2:	f000 f979 	bl	801d7d8 <alloc>
 801d4e6:	6478      	str	r0, [r7, #68]	@ 0x44
  comp *sr = biR->comps;
 801d4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d4ea:	68db      	ldr	r3, [r3, #12]
 801d4ec:	643b      	str	r3, [r7, #64]	@ 0x40
  comp *sa = bia->comps;
 801d4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d4f0:	68db      	ldr	r3, [r3, #12]
 801d4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  comp *sb = bib->comps;
 801d4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4f6:	68db      	ldr	r3, [r3, #12]
 801d4f8:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);
  check(bib);

  /* clear things to start with */
  memset(biR->comps, 0, (size_t) ((n + t) * COMP_BYTE_SIZE));
 801d4fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801d4fc:	68d8      	ldr	r0, [r3, #12]
 801d4fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801d500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d502:	4413      	add	r3, r2
 801d504:	009b      	lsls	r3, r3, #2
 801d506:	461a      	mov	r2, r3
 801d508:	2100      	movs	r1, #0
 801d50a:	f008 f93f 	bl	802578c <memset>

  do {
    long_comp tmp;
    comp carry = 0;
 801d50e:	2300      	movs	r3, #0
 801d510:	657b      	str	r3, [r7, #84]	@ 0x54
    int r_index = i;
 801d512:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d514:	653b      	str	r3, [r7, #80]	@ 0x50
    j = 0;
 801d516:	2300      	movs	r3, #0
 801d518:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (outer_partial && outer_partial - i > 0 && outer_partial < n) {
 801d51a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d014      	beq.n	801d54c <regular_multiply+0x98>
 801d522:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801d526:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d528:	1ad3      	subs	r3, r2, r3
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	dd0e      	ble.n	801d54c <regular_multiply+0x98>
 801d52e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801d532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d534:	429a      	cmp	r2, r3
 801d536:	da09      	bge.n	801d54c <regular_multiply+0x98>
      r_index = outer_partial - 1;
 801d538:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801d53c:	3b01      	subs	r3, #1
 801d53e:	653b      	str	r3, [r7, #80]	@ 0x50
      j = outer_partial - i - 1;
 801d540:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801d544:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d546:	1ad3      	subs	r3, r2, r3
 801d548:	3b01      	subs	r3, #1
 801d54a:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    do {
      if (inner_partial && r_index >= inner_partial) {
 801d54c:	6a3b      	ldr	r3, [r7, #32]
 801d54e:	2b00      	cmp	r3, #0
 801d550:	d003      	beq.n	801d55a <regular_multiply+0xa6>
 801d552:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d554:	6a3b      	ldr	r3, [r7, #32]
 801d556:	429a      	cmp	r2, r3
 801d558:	da5a      	bge.n	801d610 <regular_multiply+0x15c>
        break;
      }

      tmp = sr[r_index] + ((long_comp) sa[j]) * sb[i] + carry;
 801d55a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d55c:	009a      	lsls	r2, r3, #2
 801d55e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d560:	4413      	add	r3, r2
 801d562:	681b      	ldr	r3, [r3, #0]
 801d564:	2200      	movs	r2, #0
 801d566:	61bb      	str	r3, [r7, #24]
 801d568:	61fa      	str	r2, [r7, #28]
 801d56a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d56c:	009a      	lsls	r2, r3, #2
 801d56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801d570:	4413      	add	r3, r2
 801d572:	681b      	ldr	r3, [r3, #0]
 801d574:	2200      	movs	r2, #0
 801d576:	469a      	mov	sl, r3
 801d578:	4693      	mov	fp, r2
 801d57a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d57c:	009a      	lsls	r2, r3, #2
 801d57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d580:	4413      	add	r3, r2
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	2200      	movs	r2, #0
 801d586:	613b      	str	r3, [r7, #16]
 801d588:	617a      	str	r2, [r7, #20]
 801d58a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801d58e:	4603      	mov	r3, r0
 801d590:	fb03 f20b 	mul.w	r2, r3, fp
 801d594:	460b      	mov	r3, r1
 801d596:	fb0a f303 	mul.w	r3, sl, r3
 801d59a:	4413      	add	r3, r2
 801d59c:	4602      	mov	r2, r0
 801d59e:	fbaa 4502 	umull	r4, r5, sl, r2
 801d5a2:	442b      	add	r3, r5
 801d5a4:	461d      	mov	r5, r3
 801d5a6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d5aa:	460b      	mov	r3, r1
 801d5ac:	eb13 0804 	adds.w	r8, r3, r4
 801d5b0:	4613      	mov	r3, r2
 801d5b2:	eb43 0905 	adc.w	r9, r3, r5
 801d5b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d5b8:	2200      	movs	r2, #0
 801d5ba:	60bb      	str	r3, [r7, #8]
 801d5bc:	60fa      	str	r2, [r7, #12]
 801d5be:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d5c2:	460b      	mov	r3, r1
 801d5c4:	eb18 0303 	adds.w	r3, r8, r3
 801d5c8:	603b      	str	r3, [r7, #0]
 801d5ca:	4613      	mov	r3, r2
 801d5cc:	eb49 0303 	adc.w	r3, r9, r3
 801d5d0:	607b      	str	r3, [r7, #4]
 801d5d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d5d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      sr[r_index++] = (comp) tmp; /* downsize */
 801d5da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801d5dc:	1c53      	adds	r3, r2, #1
 801d5de:	653b      	str	r3, [r7, #80]	@ 0x50
 801d5e0:	4613      	mov	r3, r2
 801d5e2:	009a      	lsls	r2, r3, #2
 801d5e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d5e6:	441a      	add	r2, r3
 801d5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d5ea:	6013      	str	r3, [r2, #0]
      carry = (comp) (tmp >> COMP_BIT_SIZE);
 801d5ec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801d5f0:	f04f 0000 	mov.w	r0, #0
 801d5f4:	f04f 0100 	mov.w	r1, #0
 801d5f8:	0018      	movs	r0, r3
 801d5fa:	2100      	movs	r1, #0
 801d5fc:	4603      	mov	r3, r0
 801d5fe:	657b      	str	r3, [r7, #84]	@ 0x54
    } while (++j < n);
 801d600:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801d602:	3301      	adds	r3, #1
 801d604:	65bb      	str	r3, [r7, #88]	@ 0x58
 801d606:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801d608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d60a:	429a      	cmp	r2, r3
 801d60c:	db9e      	blt.n	801d54c <regular_multiply+0x98>
 801d60e:	e000      	b.n	801d612 <regular_multiply+0x15e>
        break;
 801d610:	bf00      	nop

    sr[r_index] = carry;
 801d612:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801d614:	009a      	lsls	r2, r3, #2
 801d616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d618:	441a      	add	r2, r3
 801d61a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801d61c:	6013      	str	r3, [r2, #0]
  } while (++i < t);
 801d61e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801d620:	3301      	adds	r3, #1
 801d622:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d624:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801d626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d628:	429a      	cmp	r2, r3
 801d62a:	f6ff af70 	blt.w	801d50e <regular_multiply+0x5a>

  bi_free(ctx, bia);
 801d62e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801d630:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d632:	f7ff fa2b 	bl	801ca8c <bi_free>
  bi_free(ctx, bib);
 801d636:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d638:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801d63a:	f7ff fa27 	bl	801ca8c <bi_free>
  return trim(biR);
 801d63e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801d640:	f000 f97b 	bl	801d93a <trim>
 801d644:	4603      	mov	r3, r0
}
 801d646:	4618      	mov	r0, r3
 801d648:	3760      	adds	r7, #96	@ 0x60
 801d64a:	46bd      	mov	sp, r7
 801d64c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801d650 <bi_multiply>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the multiplication.
 */
NS_INTERNAL bigint *bi_multiply(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801d650:	b580      	push	{r7, lr}
 801d652:	b086      	sub	sp, #24
 801d654:	af02      	add	r7, sp, #8
 801d656:	60f8      	str	r0, [r7, #12]
 801d658:	60b9      	str	r1, [r7, #8]
 801d65a:	607a      	str	r2, [r7, #4]
    return regular_multiply(ctx, bia, bib, 0, 0);
  }

  return karatsuba(ctx, bia, bib, 0);
#else
  return regular_multiply(ctx, bia, bib, 0, 0);
 801d65c:	2300      	movs	r3, #0
 801d65e:	9300      	str	r3, [sp, #0]
 801d660:	2300      	movs	r3, #0
 801d662:	687a      	ldr	r2, [r7, #4]
 801d664:	68b9      	ldr	r1, [r7, #8]
 801d666:	68f8      	ldr	r0, [r7, #12]
 801d668:	f7ff ff24 	bl	801d4b4 <regular_multiply>
 801d66c:	4603      	mov	r3, r0
#endif
}
 801d66e:	4618      	mov	r0, r3
 801d670:	3710      	adds	r7, #16
 801d672:	46bd      	mov	sp, r7
 801d674:	bd80      	pop	{r7, pc}

0801d676 <bi_compare>:
 * @brief Compare two bigints.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return -1 if smaller, 1 if larger and 0 if equal.
 */
NS_INTERNAL int bi_compare(bigint *bia, bigint *bib) {
 801d676:	b480      	push	{r7}
 801d678:	b087      	sub	sp, #28
 801d67a:	af00      	add	r7, sp, #0
 801d67c:	6078      	str	r0, [r7, #4]
 801d67e:	6039      	str	r1, [r7, #0]
  int r, i;

  check(bia);
  check(bib);

  if (bia->size > bib->size)
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d686:	683b      	ldr	r3, [r7, #0]
 801d688:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d68c:	429a      	cmp	r2, r3
 801d68e:	dd02      	ble.n	801d696 <bi_compare+0x20>
    r = 1;
 801d690:	2301      	movs	r3, #1
 801d692:	617b      	str	r3, [r7, #20]
 801d694:	e03d      	b.n	801d712 <bi_compare+0x9c>
  else if (bia->size < bib->size)
 801d696:	687b      	ldr	r3, [r7, #4]
 801d698:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801d69c:	683b      	ldr	r3, [r7, #0]
 801d69e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d6a2:	429a      	cmp	r2, r3
 801d6a4:	da03      	bge.n	801d6ae <bi_compare+0x38>
    r = -1;
 801d6a6:	f04f 33ff 	mov.w	r3, #4294967295
 801d6aa:	617b      	str	r3, [r7, #20]
 801d6ac:	e031      	b.n	801d712 <bi_compare+0x9c>
  else {
    comp *a = bia->comps;
 801d6ae:	687b      	ldr	r3, [r7, #4]
 801d6b0:	68db      	ldr	r3, [r3, #12]
 801d6b2:	60fb      	str	r3, [r7, #12]
    comp *b = bib->comps;
 801d6b4:	683b      	ldr	r3, [r7, #0]
 801d6b6:	68db      	ldr	r3, [r3, #12]
 801d6b8:	60bb      	str	r3, [r7, #8]

    /* Same number of components.  Compare starting from the high end
     * and working down. */
    r = 0;
 801d6ba:	2300      	movs	r3, #0
 801d6bc:	617b      	str	r3, [r7, #20]
    i = bia->size - 1;
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d6c4:	3b01      	subs	r3, #1
 801d6c6:	613b      	str	r3, [r7, #16]

    do {
      if (a[i] > b[i]) {
 801d6c8:	693b      	ldr	r3, [r7, #16]
 801d6ca:	009b      	lsls	r3, r3, #2
 801d6cc:	68fa      	ldr	r2, [r7, #12]
 801d6ce:	4413      	add	r3, r2
 801d6d0:	681a      	ldr	r2, [r3, #0]
 801d6d2:	693b      	ldr	r3, [r7, #16]
 801d6d4:	009b      	lsls	r3, r3, #2
 801d6d6:	68b9      	ldr	r1, [r7, #8]
 801d6d8:	440b      	add	r3, r1
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	429a      	cmp	r2, r3
 801d6de:	d902      	bls.n	801d6e6 <bi_compare+0x70>
        r = 1;
 801d6e0:	2301      	movs	r3, #1
 801d6e2:	617b      	str	r3, [r7, #20]
        break;
 801d6e4:	e015      	b.n	801d712 <bi_compare+0x9c>
      } else if (a[i] < b[i]) {
 801d6e6:	693b      	ldr	r3, [r7, #16]
 801d6e8:	009b      	lsls	r3, r3, #2
 801d6ea:	68fa      	ldr	r2, [r7, #12]
 801d6ec:	4413      	add	r3, r2
 801d6ee:	681a      	ldr	r2, [r3, #0]
 801d6f0:	693b      	ldr	r3, [r7, #16]
 801d6f2:	009b      	lsls	r3, r3, #2
 801d6f4:	68b9      	ldr	r1, [r7, #8]
 801d6f6:	440b      	add	r3, r1
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	429a      	cmp	r2, r3
 801d6fc:	d203      	bcs.n	801d706 <bi_compare+0x90>
        r = -1;
 801d6fe:	f04f 33ff 	mov.w	r3, #4294967295
 801d702:	617b      	str	r3, [r7, #20]
        break;
 801d704:	e005      	b.n	801d712 <bi_compare+0x9c>
      }
    } while (--i >= 0);
 801d706:	693b      	ldr	r3, [r7, #16]
 801d708:	3b01      	subs	r3, #1
 801d70a:	613b      	str	r3, [r7, #16]
 801d70c:	693b      	ldr	r3, [r7, #16]
 801d70e:	2b00      	cmp	r3, #0
 801d710:	dada      	bge.n	801d6c8 <bi_compare+0x52>
  }

  return r;
 801d712:	697b      	ldr	r3, [r7, #20]
}
 801d714:	4618      	mov	r0, r3
 801d716:	371c      	adds	r7, #28
 801d718:	46bd      	mov	sp, r7
 801d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d71e:	4770      	bx	lr

0801d720 <more_comps>:

/*
 * Allocate and zero more components.  Does not consume bi.
 */
static void more_comps(bigint *bi, int n) {
 801d720:	b580      	push	{r7, lr}
 801d722:	b084      	sub	sp, #16
 801d724:	af00      	add	r7, sp, #0
 801d726:	6078      	str	r0, [r7, #4]
 801d728:	6039      	str	r1, [r7, #0]
  if (n > bi->max_comps) {
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d730:	461a      	mov	r2, r3
 801d732:	683b      	ldr	r3, [r7, #0]
 801d734:	4293      	cmp	r3, r2
 801d736:	dd2e      	ble.n	801d796 <more_comps+0x76>
    int max = MAX(bi->max_comps * 2, n);
 801d738:	687b      	ldr	r3, [r7, #4]
 801d73a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d73e:	005b      	lsls	r3, r3, #1
 801d740:	683a      	ldr	r2, [r7, #0]
 801d742:	4293      	cmp	r3, r2
 801d744:	bfb8      	it	lt
 801d746:	4613      	movlt	r3, r2
 801d748:	60fb      	str	r3, [r7, #12]
    void *p = calloc(1, (size_t) max * COMP_BYTE_SIZE);
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	009b      	lsls	r3, r3, #2
 801d74e:	4619      	mov	r1, r3
 801d750:	2001      	movs	r0, #1
 801d752:	f007 fc41 	bl	8024fd8 <calloc>
 801d756:	4603      	mov	r3, r0
 801d758:	60bb      	str	r3, [r7, #8]
    if (p != NULL && bi->size > 0) memcpy(p, bi->comps, (size_t) bi->max_comps * COMP_BYTE_SIZE);
 801d75a:	68bb      	ldr	r3, [r7, #8]
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	d00e      	beq.n	801d77e <more_comps+0x5e>
 801d760:	687b      	ldr	r3, [r7, #4]
 801d762:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d766:	2b00      	cmp	r3, #0
 801d768:	dd09      	ble.n	801d77e <more_comps+0x5e>
 801d76a:	687b      	ldr	r3, [r7, #4]
 801d76c:	68d9      	ldr	r1, [r3, #12]
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d774:	009b      	lsls	r3, r3, #2
 801d776:	461a      	mov	r2, r3
 801d778:	68b8      	ldr	r0, [r7, #8]
 801d77a:	f008 f93c 	bl	80259f6 <memcpy>
    free(bi->comps);
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	68db      	ldr	r3, [r3, #12]
 801d782:	4618      	mov	r0, r3
 801d784:	f007 fc4c 	bl	8025020 <free>
    bi->max_comps = (short) max;
 801d788:	68fb      	ldr	r3, [r7, #12]
 801d78a:	b21a      	sxth	r2, r3
 801d78c:	687b      	ldr	r3, [r7, #4]
 801d78e:	80da      	strh	r2, [r3, #6]
    bi->comps = (comp *) p;
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	68ba      	ldr	r2, [r7, #8]
 801d794:	60da      	str	r2, [r3, #12]
  }

  if (n > bi->size) {
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d79c:	461a      	mov	r2, r3
 801d79e:	683b      	ldr	r3, [r7, #0]
 801d7a0:	4293      	cmp	r3, r2
 801d7a2:	dd11      	ble.n	801d7c8 <more_comps+0xa8>
    memset(&bi->comps[bi->size], 0, (size_t) (n - bi->size) * COMP_BYTE_SIZE);
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	68da      	ldr	r2, [r3, #12]
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d7ae:	009b      	lsls	r3, r3, #2
 801d7b0:	18d0      	adds	r0, r2, r3
 801d7b2:	687b      	ldr	r3, [r7, #4]
 801d7b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d7b8:	461a      	mov	r2, r3
 801d7ba:	683b      	ldr	r3, [r7, #0]
 801d7bc:	1a9b      	subs	r3, r3, r2
 801d7be:	009b      	lsls	r3, r3, #2
 801d7c0:	461a      	mov	r2, r3
 801d7c2:	2100      	movs	r1, #0
 801d7c4:	f007 ffe2 	bl	802578c <memset>
  }

  bi->size = (short) n;
 801d7c8:	683b      	ldr	r3, [r7, #0]
 801d7ca:	b21a      	sxth	r2, r3
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	809a      	strh	r2, [r3, #4]
}
 801d7d0:	bf00      	nop
 801d7d2:	3710      	adds	r7, #16
 801d7d4:	46bd      	mov	sp, r7
 801d7d6:	bd80      	pop	{r7, pc}

0801d7d8 <alloc>:

/*
 * Make a new empty bigint. It may just use an old one if one is available.
 * Otherwise get one off the heap.
 */
static bigint *alloc(BI_CTX *ctx, int size) {
 801d7d8:	b580      	push	{r7, lr}
 801d7da:	b084      	sub	sp, #16
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	6078      	str	r0, [r7, #4]
 801d7e0:	6039      	str	r1, [r7, #0]
  bigint *biR;

  /* Can we recycle an old bigint? */
  if (ctx->free_list != NULL) {
 801d7e2:	687b      	ldr	r3, [r7, #4]
 801d7e4:	685b      	ldr	r3, [r3, #4]
 801d7e6:	2b00      	cmp	r3, #0
 801d7e8:	d016      	beq.n	801d818 <alloc+0x40>
    biR = ctx->free_list;
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	685b      	ldr	r3, [r3, #4]
 801d7ee:	60fb      	str	r3, [r7, #12]
    ctx->free_list = biR->next;
 801d7f0:	68fb      	ldr	r3, [r7, #12]
 801d7f2:	681a      	ldr	r2, [r3, #0]
 801d7f4:	687b      	ldr	r3, [r7, #4]
 801d7f6:	605a      	str	r2, [r3, #4]
    ctx->free_count--;
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d7fc:	1e5a      	subs	r2, r3, #1
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	631a      	str	r2, [r3, #48]	@ 0x30

    if (biR->refs != 0) {
 801d802:	68fb      	ldr	r3, [r7, #12]
 801d804:	689b      	ldr	r3, [r3, #8]
 801d806:	2b00      	cmp	r3, #0
 801d808:	d001      	beq.n	801d80e <alloc+0x36>
#ifdef CONFIG_SSL_FULL_MODE
      printf("alloc: refs was not 0\n");
#endif
      abort(); /* create a stack trace from a core dump */
 801d80a:	f007 fbbb 	bl	8024f84 <abort>
    }

    more_comps(biR, size);
 801d80e:	6839      	ldr	r1, [r7, #0]
 801d810:	68f8      	ldr	r0, [r7, #12]
 801d812:	f7ff ff85 	bl	801d720 <more_comps>
 801d816:	e013      	b.n	801d840 <alloc+0x68>
  } else {
    /* No free bigints available - create a new one. */
    biR = (bigint *) calloc(1, sizeof(bigint));
 801d818:	2110      	movs	r1, #16
 801d81a:	2001      	movs	r0, #1
 801d81c:	f007 fbdc 	bl	8024fd8 <calloc>
 801d820:	4603      	mov	r3, r0
 801d822:	60fb      	str	r3, [r7, #12]
    biR->comps = (comp *) calloc(1, (size_t) size * COMP_BYTE_SIZE);
 801d824:	683b      	ldr	r3, [r7, #0]
 801d826:	009b      	lsls	r3, r3, #2
 801d828:	4619      	mov	r1, r3
 801d82a:	2001      	movs	r0, #1
 801d82c:	f007 fbd4 	bl	8024fd8 <calloc>
 801d830:	4603      	mov	r3, r0
 801d832:	461a      	mov	r2, r3
 801d834:	68fb      	ldr	r3, [r7, #12]
 801d836:	60da      	str	r2, [r3, #12]
    biR->max_comps = (short) size; /* give some space to spare */
 801d838:	683b      	ldr	r3, [r7, #0]
 801d83a:	b21a      	sxth	r2, r3
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	80da      	strh	r2, [r3, #6]
  }

  biR->size = (short) size;
 801d840:	683b      	ldr	r3, [r7, #0]
 801d842:	b21a      	sxth	r2, r3
 801d844:	68fb      	ldr	r3, [r7, #12]
 801d846:	809a      	strh	r2, [r3, #4]
  biR->refs = 1;
 801d848:	68fb      	ldr	r3, [r7, #12]
 801d84a:	2201      	movs	r2, #1
 801d84c:	609a      	str	r2, [r3, #8]
  biR->next = NULL;
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	2200      	movs	r2, #0
 801d852:	601a      	str	r2, [r3, #0]
  ctx->active_count++;
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d858:	1c5a      	adds	r2, r3, #1
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	62da      	str	r2, [r3, #44]	@ 0x2c
  return biR;
 801d85e:	68fb      	ldr	r3, [r7, #12]
}
 801d860:	4618      	mov	r0, r3
 801d862:	3710      	adds	r7, #16
 801d864:	46bd      	mov	sp, r7
 801d866:	bd80      	pop	{r7, pc}

0801d868 <find_max_exp_index>:

/*
 * Work out the highest '1' bit in an exponent. Used when doing sliding-window
 * exponentiation.
 */
static int find_max_exp_index(bigint *biexp) {
 801d868:	b480      	push	{r7}
 801d86a:	b087      	sub	sp, #28
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	6078      	str	r0, [r7, #4]
  int i = COMP_BIT_SIZE - 1;
 801d870:	231f      	movs	r3, #31
 801d872:	617b      	str	r3, [r7, #20]
  comp shift = COMP_RADIX / 2;
 801d874:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801d878:	613b      	str	r3, [r7, #16]
  comp test = biexp->comps[biexp->size - 1]; /* assume no leading zeroes */
 801d87a:	687b      	ldr	r3, [r7, #4]
 801d87c:	68da      	ldr	r2, [r3, #12]
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d884:	4619      	mov	r1, r3
 801d886:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d88a:	440b      	add	r3, r1
 801d88c:	009b      	lsls	r3, r3, #2
 801d88e:	4413      	add	r3, r2
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	60fb      	str	r3, [r7, #12]

  check(biexp);

  do {
    if (test & shift) {
 801d894:	68fa      	ldr	r2, [r7, #12]
 801d896:	693b      	ldr	r3, [r7, #16]
 801d898:	4013      	ands	r3, r2
 801d89a:	2b00      	cmp	r3, #0
 801d89c:	d007      	beq.n	801d8ae <find_max_exp_index+0x46>
      return i + (biexp->size - 1) * COMP_BIT_SIZE;
 801d89e:	687b      	ldr	r3, [r7, #4]
 801d8a0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d8a4:	3b01      	subs	r3, #1
 801d8a6:	015a      	lsls	r2, r3, #5
 801d8a8:	697b      	ldr	r3, [r7, #20]
 801d8aa:	4413      	add	r3, r2
 801d8ac:	e009      	b.n	801d8c2 <find_max_exp_index+0x5a>
    }

    shift >>= 1;
 801d8ae:	693b      	ldr	r3, [r7, #16]
 801d8b0:	085b      	lsrs	r3, r3, #1
 801d8b2:	613b      	str	r3, [r7, #16]
  } while (i-- != 0);
 801d8b4:	697b      	ldr	r3, [r7, #20]
 801d8b6:	1e5a      	subs	r2, r3, #1
 801d8b8:	617a      	str	r2, [r7, #20]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d1ea      	bne.n	801d894 <find_max_exp_index+0x2c>

  return -1; /* error - must have been a leading 0 */
 801d8be:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d8c2:	4618      	mov	r0, r3
 801d8c4:	371c      	adds	r7, #28
 801d8c6:	46bd      	mov	sp, r7
 801d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8cc:	4770      	bx	lr

0801d8ce <exp_bit_is_one>:

/*
 * Is a particular bit is an exponent 1 or 0? Used when doing sliding-window
 * exponentiation.
 */
static int exp_bit_is_one(bigint *biexp, int offset) {
 801d8ce:	b480      	push	{r7}
 801d8d0:	b087      	sub	sp, #28
 801d8d2:	af00      	add	r7, sp, #0
 801d8d4:	6078      	str	r0, [r7, #4]
 801d8d6:	6039      	str	r1, [r7, #0]
  comp test = biexp->comps[offset / COMP_BIT_SIZE];
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	68da      	ldr	r2, [r3, #12]
 801d8dc:	683b      	ldr	r3, [r7, #0]
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	da00      	bge.n	801d8e4 <exp_bit_is_one+0x16>
 801d8e2:	331f      	adds	r3, #31
 801d8e4:	115b      	asrs	r3, r3, #5
 801d8e6:	009b      	lsls	r3, r3, #2
 801d8e8:	4413      	add	r3, r2
 801d8ea:	681b      	ldr	r3, [r3, #0]
 801d8ec:	60fb      	str	r3, [r7, #12]
  int num_shifts = offset % COMP_BIT_SIZE;
 801d8ee:	683b      	ldr	r3, [r7, #0]
 801d8f0:	425a      	negs	r2, r3
 801d8f2:	f003 031f 	and.w	r3, r3, #31
 801d8f6:	f002 021f 	and.w	r2, r2, #31
 801d8fa:	bf58      	it	pl
 801d8fc:	4253      	negpl	r3, r2
 801d8fe:	60bb      	str	r3, [r7, #8]
  comp shift = 1;
 801d900:	2301      	movs	r3, #1
 801d902:	617b      	str	r3, [r7, #20]
  int i;

  check(biexp);

  for (i = 0; i < num_shifts; i++) {
 801d904:	2300      	movs	r3, #0
 801d906:	613b      	str	r3, [r7, #16]
 801d908:	e005      	b.n	801d916 <exp_bit_is_one+0x48>
    shift <<= 1;
 801d90a:	697b      	ldr	r3, [r7, #20]
 801d90c:	005b      	lsls	r3, r3, #1
 801d90e:	617b      	str	r3, [r7, #20]
  for (i = 0; i < num_shifts; i++) {
 801d910:	693b      	ldr	r3, [r7, #16]
 801d912:	3301      	adds	r3, #1
 801d914:	613b      	str	r3, [r7, #16]
 801d916:	693a      	ldr	r2, [r7, #16]
 801d918:	68bb      	ldr	r3, [r7, #8]
 801d91a:	429a      	cmp	r2, r3
 801d91c:	dbf5      	blt.n	801d90a <exp_bit_is_one+0x3c>
  }

  return (test & shift) != 0;
 801d91e:	68fa      	ldr	r2, [r7, #12]
 801d920:	697b      	ldr	r3, [r7, #20]
 801d922:	4013      	ands	r3, r2
 801d924:	2b00      	cmp	r3, #0
 801d926:	bf14      	ite	ne
 801d928:	2301      	movne	r3, #1
 801d92a:	2300      	moveq	r3, #0
 801d92c:	b2db      	uxtb	r3, r3
}
 801d92e:	4618      	mov	r0, r3
 801d930:	371c      	adds	r7, #28
 801d932:	46bd      	mov	sp, r7
 801d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d938:	4770      	bx	lr

0801d93a <trim>:
#endif

/*
 * Delete any leading 0's (and allow for 0).
 */
static bigint *trim(bigint *bi) {
 801d93a:	b480      	push	{r7}
 801d93c:	b083      	sub	sp, #12
 801d93e:	af00      	add	r7, sp, #0
 801d940:	6078      	str	r0, [r7, #4]
  check(bi);

  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801d942:	e008      	b.n	801d956 <trim+0x1c>
    bi->size--;
 801d944:	687b      	ldr	r3, [r7, #4]
 801d946:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d94a:	b29b      	uxth	r3, r3
 801d94c:	3b01      	subs	r3, #1
 801d94e:	b29b      	uxth	r3, r3
 801d950:	b21a      	sxth	r2, r3
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	809a      	strh	r2, [r3, #4]
  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	68da      	ldr	r2, [r3, #12]
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d960:	4619      	mov	r1, r3
 801d962:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d966:	440b      	add	r3, r1
 801d968:	009b      	lsls	r3, r3, #2
 801d96a:	4413      	add	r3, r2
 801d96c:	681b      	ldr	r3, [r3, #0]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d104      	bne.n	801d97c <trim+0x42>
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d978:	2b01      	cmp	r3, #1
 801d97a:	dce3      	bgt.n	801d944 <trim+0xa>
  }

  return bi;
 801d97c:	687b      	ldr	r3, [r7, #4]
}
 801d97e:	4618      	mov	r0, r3
 801d980:	370c      	adds	r7, #12
 801d982:	46bd      	mov	sp, r7
 801d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d988:	4770      	bx	lr

0801d98a <bi_mod_power>:
 * @param bi  [in]  The bigint on which to perform the mod power operation.
 * @param biexp [in] The bigint exponent.
 * @return The result of the mod exponentiation operation
 * @see bi_set_mod().
 */
NS_INTERNAL bigint *bi_mod_power(BI_CTX *ctx, bigint *bi, bigint *biexp) {
 801d98a:	b590      	push	{r4, r7, lr}
 801d98c:	b08b      	sub	sp, #44	@ 0x2c
 801d98e:	af00      	add	r7, sp, #0
 801d990:	60f8      	str	r0, [r7, #12]
 801d992:	60b9      	str	r1, [r7, #8]
 801d994:	607a      	str	r2, [r7, #4]
  int i = find_max_exp_index(biexp), j, window_size = 1;
 801d996:	6878      	ldr	r0, [r7, #4]
 801d998:	f7ff ff66 	bl	801d868 <find_max_exp_index>
 801d99c:	6278      	str	r0, [r7, #36]	@ 0x24
 801d99e:	2301      	movs	r3, #1
 801d9a0:	613b      	str	r3, [r7, #16]
  bigint *biR = int_to_bi(ctx, 1);
 801d9a2:	2101      	movs	r1, #1
 801d9a4:	68f8      	ldr	r0, [r7, #12]
 801d9a6:	f7ff f8a3 	bl	801caf0 <int_to_bi>
 801d9aa:	61f8      	str	r0, [r7, #28]
    window_size++;

  /* work out the slide constants */
  precompute_slide_window(ctx, window_size, bi);
#else /* just one constant */
  ctx->g = (bigint **) calloc(1, sizeof(bigint *));
 801d9ac:	2104      	movs	r1, #4
 801d9ae:	2001      	movs	r0, #1
 801d9b0:	f007 fb12 	bl	8024fd8 <calloc>
 801d9b4:	4603      	mov	r3, r0
 801d9b6:	461a      	mov	r2, r3
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	625a      	str	r2, [r3, #36]	@ 0x24
  ctx->g[0] = bi_clone(ctx, bi);
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801d9c0:	68b9      	ldr	r1, [r7, #8]
 801d9c2:	68f8      	ldr	r0, [r7, #12]
 801d9c4:	f7ff f8a7 	bl	801cb16 <bi_clone>
 801d9c8:	4603      	mov	r3, r0
 801d9ca:	6023      	str	r3, [r4, #0]
  ctx->window = 1;
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	2201      	movs	r2, #1
 801d9d0:	629a      	str	r2, [r3, #40]	@ 0x28
  bi_permanent(ctx->g[0]);
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d9d6:	681b      	ldr	r3, [r3, #0]
 801d9d8:	4618      	mov	r0, r3
 801d9da:	f7ff f82f 	bl	801ca3c <bi_permanent>
#endif

  /* if sliding-window is off, then only one bit will be done at a time and
   * will reduce to standard left-to-right exponentiation */
  do {
    if (exp_bit_is_one(biexp, i)) {
 801d9de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d9e0:	6878      	ldr	r0, [r7, #4]
 801d9e2:	f7ff ff74 	bl	801d8ce <exp_bit_is_one>
 801d9e6:	4603      	mov	r3, r0
 801d9e8:	2b00      	cmp	r3, #0
 801d9ea:	d06c      	beq.n	801dac6 <bi_mod_power+0x13c>
      int l = i - window_size + 1;
 801d9ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d9ee:	693b      	ldr	r3, [r7, #16]
 801d9f0:	1ad3      	subs	r3, r2, r3
 801d9f2:	3301      	adds	r3, #1
 801d9f4:	61bb      	str	r3, [r7, #24]
      int part_exp = 0;
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	617b      	str	r3, [r7, #20]

      if (l < 0) /* LSB of exponent will always be 1 */
 801d9fa:	69bb      	ldr	r3, [r7, #24]
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	da05      	bge.n	801da0c <bi_mod_power+0x82>
        l = 0;
 801da00:	2300      	movs	r3, #0
 801da02:	61bb      	str	r3, [r7, #24]
 801da04:	e009      	b.n	801da1a <bi_mod_power+0x90>
      else {
        while (exp_bit_is_one(biexp, l) == 0) l++; /* go back up */
 801da06:	69bb      	ldr	r3, [r7, #24]
 801da08:	3301      	adds	r3, #1
 801da0a:	61bb      	str	r3, [r7, #24]
 801da0c:	69b9      	ldr	r1, [r7, #24]
 801da0e:	6878      	ldr	r0, [r7, #4]
 801da10:	f7ff ff5d 	bl	801d8ce <exp_bit_is_one>
 801da14:	4603      	mov	r3, r0
 801da16:	2b00      	cmp	r3, #0
 801da18:	d0f5      	beq.n	801da06 <bi_mod_power+0x7c>
      }

      /* build up the section of the exponent */
      for (j = i; j >= l; j--) {
 801da1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da1c:	623b      	str	r3, [r7, #32]
 801da1e:	e02a      	b.n	801da76 <bi_mod_power+0xec>
        biR = bi_residue(ctx, bi_square(ctx, biR));
 801da20:	69f8      	ldr	r0, [r7, #28]
 801da22:	f7fe fff3 	bl	801ca0c <bi_copy>
 801da26:	4603      	mov	r3, r0
 801da28:	69fa      	ldr	r2, [r7, #28]
 801da2a:	4619      	mov	r1, r3
 801da2c:	68f8      	ldr	r0, [r7, #12]
 801da2e:	f7ff fe0f 	bl	801d650 <bi_multiply>
 801da32:	4601      	mov	r1, r0
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801da3a:	68fa      	ldr	r2, [r7, #12]
 801da3c:	3302      	adds	r3, #2
 801da3e:	009b      	lsls	r3, r3, #2
 801da40:	4413      	add	r3, r2
 801da42:	685a      	ldr	r2, [r3, #4]
 801da44:	2301      	movs	r3, #1
 801da46:	68f8      	ldr	r0, [r7, #12]
 801da48:	f7ff f9ba 	bl	801cdc0 <bi_divide>
 801da4c:	61f8      	str	r0, [r7, #28]
        if (exp_bit_is_one(biexp, j)) part_exp++;
 801da4e:	6a39      	ldr	r1, [r7, #32]
 801da50:	6878      	ldr	r0, [r7, #4]
 801da52:	f7ff ff3c 	bl	801d8ce <exp_bit_is_one>
 801da56:	4603      	mov	r3, r0
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d002      	beq.n	801da62 <bi_mod_power+0xd8>
 801da5c:	697b      	ldr	r3, [r7, #20]
 801da5e:	3301      	adds	r3, #1
 801da60:	617b      	str	r3, [r7, #20]

        if (j != l) part_exp <<= 1;
 801da62:	6a3a      	ldr	r2, [r7, #32]
 801da64:	69bb      	ldr	r3, [r7, #24]
 801da66:	429a      	cmp	r2, r3
 801da68:	d002      	beq.n	801da70 <bi_mod_power+0xe6>
 801da6a:	697b      	ldr	r3, [r7, #20]
 801da6c:	005b      	lsls	r3, r3, #1
 801da6e:	617b      	str	r3, [r7, #20]
      for (j = i; j >= l; j--) {
 801da70:	6a3b      	ldr	r3, [r7, #32]
 801da72:	3b01      	subs	r3, #1
 801da74:	623b      	str	r3, [r7, #32]
 801da76:	6a3a      	ldr	r2, [r7, #32]
 801da78:	69bb      	ldr	r3, [r7, #24]
 801da7a:	429a      	cmp	r2, r3
 801da7c:	dad0      	bge.n	801da20 <bi_mod_power+0x96>
      }

      part_exp = (part_exp - 1) / 2; /* adjust for array */
 801da7e:	697b      	ldr	r3, [r7, #20]
 801da80:	3b01      	subs	r3, #1
 801da82:	2b00      	cmp	r3, #0
 801da84:	da00      	bge.n	801da88 <bi_mod_power+0xfe>
 801da86:	3301      	adds	r3, #1
 801da88:	105b      	asrs	r3, r3, #1
 801da8a:	617b      	str	r3, [r7, #20]
      biR = bi_residue(ctx, bi_multiply(ctx, biR, ctx->g[part_exp]));
 801da8c:	68fb      	ldr	r3, [r7, #12]
 801da8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801da90:	697b      	ldr	r3, [r7, #20]
 801da92:	009b      	lsls	r3, r3, #2
 801da94:	4413      	add	r3, r2
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	461a      	mov	r2, r3
 801da9a:	69f9      	ldr	r1, [r7, #28]
 801da9c:	68f8      	ldr	r0, [r7, #12]
 801da9e:	f7ff fdd7 	bl	801d650 <bi_multiply>
 801daa2:	4601      	mov	r1, r0
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801daaa:	68fa      	ldr	r2, [r7, #12]
 801daac:	3302      	adds	r3, #2
 801daae:	009b      	lsls	r3, r3, #2
 801dab0:	4413      	add	r3, r2
 801dab2:	685a      	ldr	r2, [r3, #4]
 801dab4:	2301      	movs	r3, #1
 801dab6:	68f8      	ldr	r0, [r7, #12]
 801dab8:	f7ff f982 	bl	801cdc0 <bi_divide>
 801dabc:	61f8      	str	r0, [r7, #28]
      i = l - 1;
 801dabe:	69bb      	ldr	r3, [r7, #24]
 801dac0:	3b01      	subs	r3, #1
 801dac2:	627b      	str	r3, [r7, #36]	@ 0x24
 801dac4:	e019      	b.n	801dafa <bi_mod_power+0x170>
    } else /* square it */
    {
      biR = bi_residue(ctx, bi_square(ctx, biR));
 801dac6:	69f8      	ldr	r0, [r7, #28]
 801dac8:	f7fe ffa0 	bl	801ca0c <bi_copy>
 801dacc:	4603      	mov	r3, r0
 801dace:	69fa      	ldr	r2, [r7, #28]
 801dad0:	4619      	mov	r1, r3
 801dad2:	68f8      	ldr	r0, [r7, #12]
 801dad4:	f7ff fdbc 	bl	801d650 <bi_multiply>
 801dad8:	4601      	mov	r1, r0
 801dada:	68fb      	ldr	r3, [r7, #12]
 801dadc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801dae0:	68fa      	ldr	r2, [r7, #12]
 801dae2:	3302      	adds	r3, #2
 801dae4:	009b      	lsls	r3, r3, #2
 801dae6:	4413      	add	r3, r2
 801dae8:	685a      	ldr	r2, [r3, #4]
 801daea:	2301      	movs	r3, #1
 801daec:	68f8      	ldr	r0, [r7, #12]
 801daee:	f7ff f967 	bl	801cdc0 <bi_divide>
 801daf2:	61f8      	str	r0, [r7, #28]
      i--;
 801daf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801daf6:	3b01      	subs	r3, #1
 801daf8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  } while (i >= 0);
 801dafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	f6bf af6e 	bge.w	801d9de <bi_mod_power+0x54>

  /* cleanup */
  for (i = 0; i < ctx->window; i++) {
 801db02:	2300      	movs	r3, #0
 801db04:	627b      	str	r3, [r7, #36]	@ 0x24
 801db06:	e015      	b.n	801db34 <bi_mod_power+0x1aa>
    bi_depermanent(ctx->g[i]);
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801db0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db0e:	009b      	lsls	r3, r3, #2
 801db10:	4413      	add	r3, r2
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	4618      	mov	r0, r3
 801db16:	f7fe ffa5 	bl	801ca64 <bi_depermanent>
    bi_free(ctx, ctx->g[i]);
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801db1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db20:	009b      	lsls	r3, r3, #2
 801db22:	4413      	add	r3, r2
 801db24:	681b      	ldr	r3, [r3, #0]
 801db26:	4619      	mov	r1, r3
 801db28:	68f8      	ldr	r0, [r7, #12]
 801db2a:	f7fe ffaf 	bl	801ca8c <bi_free>
  for (i = 0; i < ctx->window; i++) {
 801db2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db30:	3301      	adds	r3, #1
 801db32:	627b      	str	r3, [r7, #36]	@ 0x24
 801db34:	68fb      	ldr	r3, [r7, #12]
 801db36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801db38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801db3a:	429a      	cmp	r2, r3
 801db3c:	dbe4      	blt.n	801db08 <bi_mod_power+0x17e>
  }

  free(ctx->g);
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801db42:	4618      	mov	r0, r3
 801db44:	f007 fa6c 	bl	8025020 <free>
  bi_free(ctx, bi);
 801db48:	68b9      	ldr	r1, [r7, #8]
 801db4a:	68f8      	ldr	r0, [r7, #12]
 801db4c:	f7fe ff9e 	bl	801ca8c <bi_free>
  bi_free(ctx, biexp);
 801db50:	6879      	ldr	r1, [r7, #4]
 801db52:	68f8      	ldr	r0, [r7, #12]
 801db54:	f7fe ff9a 	bl	801ca8c <bi_free>
#if defined CONFIG_BIGINT_MONTGOMERY
  return ctx->use_classical ? biR : bi_mont(ctx, biR); /* convert back */
#else /* CONFIG_BIGINT_CLASSICAL or CONFIG_BIGINT_BARRETT */
  return biR;
 801db58:	69fb      	ldr	r3, [r7, #28]
#endif
}
 801db5a:	4618      	mov	r0, r3
 801db5c:	372c      	adds	r7, #44	@ 0x2c
 801db5e:	46bd      	mov	sp, r7
 801db60:	bd90      	pop	{r4, r7, pc}

0801db62 <mg_rsa_mod_pow>:
#endif
  return bi_add(ctx, m2, bi_multiply(ctx, q, h));
}
#endif

int mg_rsa_mod_pow(const uint8_t *mod, size_t modsz, const uint8_t *exp, size_t expsz, const uint8_t *msg, size_t msgsz, uint8_t *out, size_t outsz) {
 801db62:	b580      	push	{r7, lr}
 801db64:	b08a      	sub	sp, #40	@ 0x28
 801db66:	af00      	add	r7, sp, #0
 801db68:	60f8      	str	r0, [r7, #12]
 801db6a:	60b9      	str	r1, [r7, #8]
 801db6c:	607a      	str	r2, [r7, #4]
 801db6e:	603b      	str	r3, [r7, #0]
	BI_CTX *bi_ctx = bi_initialize();
 801db70:	f7fe ff27 	bl	801c9c2 <bi_initialize>
 801db74:	6278      	str	r0, [r7, #36]	@ 0x24
	bigint *n = bi_import(bi_ctx, mod, (int) modsz);
 801db76:	68bb      	ldr	r3, [r7, #8]
 801db78:	461a      	mov	r2, r3
 801db7a:	68f9      	ldr	r1, [r7, #12]
 801db7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801db7e:	f7ff fbae 	bl	801d2de <bi_import>
 801db82:	6238      	str	r0, [r7, #32]
	bigint *e = bi_import(bi_ctx, exp, (int) expsz);
 801db84:	683b      	ldr	r3, [r7, #0]
 801db86:	461a      	mov	r2, r3
 801db88:	6879      	ldr	r1, [r7, #4]
 801db8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801db8c:	f7ff fba7 	bl	801d2de <bi_import>
 801db90:	61f8      	str	r0, [r7, #28]
	bigint *h = bi_import(bi_ctx, msg, (int) msgsz);
 801db92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801db94:	461a      	mov	r2, r3
 801db96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801db98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801db9a:	f7ff fba0 	bl	801d2de <bi_import>
 801db9e:	61b8      	str	r0, [r7, #24]
	bi_set_mod(bi_ctx, n, 0);
 801dba0:	2200      	movs	r2, #0
 801dba2:	6a39      	ldr	r1, [r7, #32]
 801dba4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dba6:	f7ff fc3b 	bl	801d420 <bi_set_mod>
	bigint *m1 = bi_mod_power(bi_ctx, h, e);
 801dbaa:	69fa      	ldr	r2, [r7, #28]
 801dbac:	69b9      	ldr	r1, [r7, #24]
 801dbae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dbb0:	f7ff feeb 	bl	801d98a <bi_mod_power>
 801dbb4:	6178      	str	r0, [r7, #20]
	bi_export(bi_ctx, m1, out, (int) outsz);
 801dbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801dbb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801dbba:	6979      	ldr	r1, [r7, #20]
 801dbbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dbbe:	f7ff fbdf 	bl	801d380 <bi_export>
	bi_free(bi_ctx, n);
 801dbc2:	6a39      	ldr	r1, [r7, #32]
 801dbc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dbc6:	f7fe ff61 	bl	801ca8c <bi_free>
	bi_free(bi_ctx, e);
 801dbca:	69f9      	ldr	r1, [r7, #28]
 801dbcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dbce:	f7fe ff5d 	bl	801ca8c <bi_free>
	bi_free(bi_ctx, h);
 801dbd2:	69b9      	ldr	r1, [r7, #24]
 801dbd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dbd6:	f7fe ff59 	bl	801ca8c <bi_free>
	bi_free(bi_ctx, m1);
 801dbda:	6979      	ldr	r1, [r7, #20]
 801dbdc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801dbde:	f7fe ff55 	bl	801ca8c <bi_free>
	return 0;
 801dbe2:	2300      	movs	r3, #0
}
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	3728      	adds	r7, #40	@ 0x28
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	bd80      	pop	{r7, pc}

0801dbec <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 801dbec:	b480      	push	{r7}
 801dbee:	b085      	sub	sp, #20
 801dbf0:	af00      	add	r7, sp, #0
 801dbf2:	6078      	str	r0, [r7, #4]
 801dbf4:	460b      	mov	r3, r1
 801dbf6:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801dbf8:	2300      	movs	r3, #0
 801dbfa:	73fb      	strb	r3, [r7, #15]
 801dbfc:	e00a      	b.n	801dc14 <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 801dbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dc02:	009b      	lsls	r3, r3, #2
 801dc04:	687a      	ldr	r2, [r7, #4]
 801dc06:	4413      	add	r3, r2
 801dc08:	2200      	movs	r2, #0
 801dc0a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801dc0c:	7bfb      	ldrb	r3, [r7, #15]
 801dc0e:	3301      	adds	r3, #1
 801dc10:	b2db      	uxtb	r3, r3
 801dc12:	73fb      	strb	r3, [r7, #15]
 801dc14:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801dc18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dc1c:	429a      	cmp	r2, r3
 801dc1e:	dbee      	blt.n	801dbfe <mg_uecc_vli_clear+0x12>
  }
}
 801dc20:	bf00      	nop
 801dc22:	bf00      	nop
 801dc24:	3714      	adds	r7, #20
 801dc26:	46bd      	mov	sp, r7
 801dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc2c:	4770      	bx	lr

0801dc2e <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 801dc2e:	b480      	push	{r7}
 801dc30:	b085      	sub	sp, #20
 801dc32:	af00      	add	r7, sp, #0
 801dc34:	6078      	str	r0, [r7, #4]
 801dc36:	460b      	mov	r3, r1
 801dc38:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 801dc3a:	2300      	movs	r3, #0
 801dc3c:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801dc3e:	2300      	movs	r3, #0
 801dc40:	72fb      	strb	r3, [r7, #11]
 801dc42:	e00c      	b.n	801dc5e <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 801dc44:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801dc48:	009b      	lsls	r3, r3, #2
 801dc4a:	687a      	ldr	r2, [r7, #4]
 801dc4c:	4413      	add	r3, r2
 801dc4e:	681b      	ldr	r3, [r3, #0]
 801dc50:	68fa      	ldr	r2, [r7, #12]
 801dc52:	4313      	orrs	r3, r2
 801dc54:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 801dc56:	7afb      	ldrb	r3, [r7, #11]
 801dc58:	3301      	adds	r3, #1
 801dc5a:	b2db      	uxtb	r3, r3
 801dc5c:	72fb      	strb	r3, [r7, #11]
 801dc5e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801dc62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dc66:	429a      	cmp	r2, r3
 801dc68:	dbec      	blt.n	801dc44 <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	2b00      	cmp	r3, #0
 801dc6e:	bf0c      	ite	eq
 801dc70:	2301      	moveq	r3, #1
 801dc72:	2300      	movne	r3, #0
 801dc74:	b2db      	uxtb	r3, r3
}
 801dc76:	4618      	mov	r0, r3
 801dc78:	3714      	adds	r7, #20
 801dc7a:	46bd      	mov	sp, r7
 801dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc80:	4770      	bx	lr

0801dc82 <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 801dc82:	b480      	push	{r7}
 801dc84:	b083      	sub	sp, #12
 801dc86:	af00      	add	r7, sp, #0
 801dc88:	6078      	str	r0, [r7, #4]
 801dc8a:	460b      	mov	r3, r1
 801dc8c:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801dc8e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801dc92:	115b      	asrs	r3, r3, #5
 801dc94:	b21b      	sxth	r3, r3
 801dc96:	009b      	lsls	r3, r3, #2
 801dc98:	687a      	ldr	r2, [r7, #4]
 801dc9a:	4413      	add	r3, r2
 801dc9c:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 801dc9e:	887b      	ldrh	r3, [r7, #2]
 801dca0:	f003 031f 	and.w	r3, r3, #31
 801dca4:	2101      	movs	r1, #1
 801dca6:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801dcaa:	4013      	ands	r3, r2
}
 801dcac:	4618      	mov	r0, r3
 801dcae:	370c      	adds	r7, #12
 801dcb0:	46bd      	mov	sp, r7
 801dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcb6:	4770      	bx	lr

0801dcb8 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 801dcb8:	b480      	push	{r7}
 801dcba:	b085      	sub	sp, #20
 801dcbc:	af00      	add	r7, sp, #0
 801dcbe:	6078      	str	r0, [r7, #4]
 801dcc0:	460b      	mov	r3, r1
 801dcc2:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 801dcc4:	78fb      	ldrb	r3, [r7, #3]
 801dcc6:	3b01      	subs	r3, #1
 801dcc8:	b2db      	uxtb	r3, r3
 801dcca:	73fb      	strb	r3, [r7, #15]
 801dccc:	e003      	b.n	801dcd6 <vli_numDigits+0x1e>
 801dcce:	7bfb      	ldrb	r3, [r7, #15]
 801dcd0:	3b01      	subs	r3, #1
 801dcd2:	b2db      	uxtb	r3, r3
 801dcd4:	73fb      	strb	r3, [r7, #15]
 801dcd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dcda:	2b00      	cmp	r3, #0
 801dcdc:	db07      	blt.n	801dcee <vli_numDigits+0x36>
 801dcde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dce2:	009b      	lsls	r3, r3, #2
 801dce4:	687a      	ldr	r2, [r7, #4]
 801dce6:	4413      	add	r3, r2
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	2b00      	cmp	r3, #0
 801dcec:	d0ef      	beq.n	801dcce <vli_numDigits+0x16>
  }

  return (i + 1);
 801dcee:	7bfb      	ldrb	r3, [r7, #15]
 801dcf0:	3301      	adds	r3, #1
 801dcf2:	b2db      	uxtb	r3, r3
 801dcf4:	b25b      	sxtb	r3, r3
}
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	3714      	adds	r7, #20
 801dcfa:	46bd      	mov	sp, r7
 801dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd00:	4770      	bx	lr

0801dd02 <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 801dd02:	b580      	push	{r7, lr}
 801dd04:	b086      	sub	sp, #24
 801dd06:	af00      	add	r7, sp, #0
 801dd08:	6078      	str	r0, [r7, #4]
 801dd0a:	460b      	mov	r3, r1
 801dd0c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 801dd0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dd12:	4619      	mov	r1, r3
 801dd14:	6878      	ldr	r0, [r7, #4]
 801dd16:	f7ff ffcf 	bl	801dcb8 <vli_numDigits>
 801dd1a:	4603      	mov	r3, r0
 801dd1c:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 801dd1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	d101      	bne.n	801dd2a <mg_uecc_vli_numBits+0x28>
    return 0;
 801dd26:	2300      	movs	r3, #0
 801dd28:	e020      	b.n	801dd6c <mg_uecc_vli_numBits+0x6a>
  }

  digit = vli[num_digits - 1];
 801dd2a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801dd2e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801dd32:	4413      	add	r3, r2
 801dd34:	009b      	lsls	r3, r3, #2
 801dd36:	687a      	ldr	r2, [r7, #4]
 801dd38:	4413      	add	r3, r2
 801dd3a:	681b      	ldr	r3, [r3, #0]
 801dd3c:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801dd3e:	2300      	movs	r3, #0
 801dd40:	617b      	str	r3, [r7, #20]
 801dd42:	e005      	b.n	801dd50 <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 801dd44:	693b      	ldr	r3, [r7, #16]
 801dd46:	085b      	lsrs	r3, r3, #1
 801dd48:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801dd4a:	697b      	ldr	r3, [r7, #20]
 801dd4c:	3301      	adds	r3, #1
 801dd4e:	617b      	str	r3, [r7, #20]
 801dd50:	693b      	ldr	r3, [r7, #16]
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d1f6      	bne.n	801dd44 <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801dd56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dd5a:	3b01      	subs	r3, #1
 801dd5c:	b29b      	uxth	r3, r3
 801dd5e:	015b      	lsls	r3, r3, #5
 801dd60:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 801dd62:	697b      	ldr	r3, [r7, #20]
 801dd64:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801dd66:	4413      	add	r3, r2
 801dd68:	b29b      	uxth	r3, r3
 801dd6a:	b21b      	sxth	r3, r3
}
 801dd6c:	4618      	mov	r0, r3
 801dd6e:	3718      	adds	r7, #24
 801dd70:	46bd      	mov	sp, r7
 801dd72:	bd80      	pop	{r7, pc}

0801dd74 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 801dd74:	b480      	push	{r7}
 801dd76:	b087      	sub	sp, #28
 801dd78:	af00      	add	r7, sp, #0
 801dd7a:	60f8      	str	r0, [r7, #12]
 801dd7c:	60b9      	str	r1, [r7, #8]
 801dd7e:	4613      	mov	r3, r2
 801dd80:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801dd82:	2300      	movs	r3, #0
 801dd84:	75fb      	strb	r3, [r7, #23]
 801dd86:	e00f      	b.n	801dda8 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 801dd88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801dd8c:	009b      	lsls	r3, r3, #2
 801dd8e:	68ba      	ldr	r2, [r7, #8]
 801dd90:	441a      	add	r2, r3
 801dd92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801dd96:	009b      	lsls	r3, r3, #2
 801dd98:	68f9      	ldr	r1, [r7, #12]
 801dd9a:	440b      	add	r3, r1
 801dd9c:	6812      	ldr	r2, [r2, #0]
 801dd9e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801dda0:	7dfb      	ldrb	r3, [r7, #23]
 801dda2:	3301      	adds	r3, #1
 801dda4:	b2db      	uxtb	r3, r3
 801dda6:	75fb      	strb	r3, [r7, #23]
 801dda8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801ddac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ddb0:	429a      	cmp	r2, r3
 801ddb2:	dbe9      	blt.n	801dd88 <mg_uecc_vli_set+0x14>
  }
}
 801ddb4:	bf00      	nop
 801ddb6:	bf00      	nop
 801ddb8:	371c      	adds	r7, #28
 801ddba:	46bd      	mov	sp, r7
 801ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddc0:	4770      	bx	lr

0801ddc2 <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 801ddc2:	b480      	push	{r7}
 801ddc4:	b087      	sub	sp, #28
 801ddc6:	af00      	add	r7, sp, #0
 801ddc8:	60f8      	str	r0, [r7, #12]
 801ddca:	60b9      	str	r1, [r7, #8]
 801ddcc:	4613      	mov	r3, r2
 801ddce:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801ddd0:	79fb      	ldrb	r3, [r7, #7]
 801ddd2:	3b01      	subs	r3, #1
 801ddd4:	b2db      	uxtb	r3, r3
 801ddd6:	75fb      	strb	r3, [r7, #23]
 801ddd8:	e024      	b.n	801de24 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 801ddda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ddde:	009b      	lsls	r3, r3, #2
 801dde0:	68fa      	ldr	r2, [r7, #12]
 801dde2:	4413      	add	r3, r2
 801dde4:	681a      	ldr	r2, [r3, #0]
 801dde6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ddea:	009b      	lsls	r3, r3, #2
 801ddec:	68b9      	ldr	r1, [r7, #8]
 801ddee:	440b      	add	r3, r1
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	429a      	cmp	r2, r3
 801ddf4:	d901      	bls.n	801ddfa <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 801ddf6:	2301      	movs	r3, #1
 801ddf8:	e019      	b.n	801de2e <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 801ddfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801ddfe:	009b      	lsls	r3, r3, #2
 801de00:	68fa      	ldr	r2, [r7, #12]
 801de02:	4413      	add	r3, r2
 801de04:	681a      	ldr	r2, [r3, #0]
 801de06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801de0a:	009b      	lsls	r3, r3, #2
 801de0c:	68b9      	ldr	r1, [r7, #8]
 801de0e:	440b      	add	r3, r1
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	429a      	cmp	r2, r3
 801de14:	d202      	bcs.n	801de1c <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 801de16:	f04f 33ff 	mov.w	r3, #4294967295
 801de1a:	e008      	b.n	801de2e <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 801de1c:	7dfb      	ldrb	r3, [r7, #23]
 801de1e:	3b01      	subs	r3, #1
 801de20:	b2db      	uxtb	r3, r3
 801de22:	75fb      	strb	r3, [r7, #23]
 801de24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801de28:	2b00      	cmp	r3, #0
 801de2a:	dad6      	bge.n	801ddda <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 801de2c:	2300      	movs	r3, #0
}
 801de2e:	4618      	mov	r0, r3
 801de30:	371c      	adds	r7, #28
 801de32:	46bd      	mov	sp, r7
 801de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de38:	4770      	bx	lr

0801de3a <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 801de3a:	b480      	push	{r7}
 801de3c:	b087      	sub	sp, #28
 801de3e:	af00      	add	r7, sp, #0
 801de40:	60f8      	str	r0, [r7, #12]
 801de42:	60b9      	str	r1, [r7, #8]
 801de44:	4613      	mov	r3, r2
 801de46:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 801de48:	2300      	movs	r3, #0
 801de4a:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801de4c:	79fb      	ldrb	r3, [r7, #7]
 801de4e:	3b01      	subs	r3, #1
 801de50:	b2db      	uxtb	r3, r3
 801de52:	74fb      	strb	r3, [r7, #19]
 801de54:	e013      	b.n	801de7e <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 801de56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801de5a:	009b      	lsls	r3, r3, #2
 801de5c:	68fa      	ldr	r2, [r7, #12]
 801de5e:	4413      	add	r3, r2
 801de60:	681a      	ldr	r2, [r3, #0]
 801de62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801de66:	009b      	lsls	r3, r3, #2
 801de68:	68b9      	ldr	r1, [r7, #8]
 801de6a:	440b      	add	r3, r1
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	4053      	eors	r3, r2
 801de70:	697a      	ldr	r2, [r7, #20]
 801de72:	4313      	orrs	r3, r2
 801de74:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 801de76:	7cfb      	ldrb	r3, [r7, #19]
 801de78:	3b01      	subs	r3, #1
 801de7a:	b2db      	uxtb	r3, r3
 801de7c:	74fb      	strb	r3, [r7, #19]
 801de7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801de82:	2b00      	cmp	r3, #0
 801de84:	dae7      	bge.n	801de56 <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 801de86:	697b      	ldr	r3, [r7, #20]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	bf0c      	ite	eq
 801de8c:	2301      	moveq	r3, #1
 801de8e:	2300      	movne	r3, #0
 801de90:	b2db      	uxtb	r3, r3
}
 801de92:	4618      	mov	r0, r3
 801de94:	371c      	adds	r7, #28
 801de96:	46bd      	mov	sp, r7
 801de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de9c:	4770      	bx	lr

0801de9e <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 801de9e:	b580      	push	{r7, lr}
 801dea0:	b08e      	sub	sp, #56	@ 0x38
 801dea2:	af00      	add	r7, sp, #0
 801dea4:	60f8      	str	r0, [r7, #12]
 801dea6:	60b9      	str	r1, [r7, #8]
 801dea8:	4613      	mov	r3, r2
 801deaa:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 801deac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801deb0:	f107 0010 	add.w	r0, r7, #16
 801deb4:	68ba      	ldr	r2, [r7, #8]
 801deb6:	68f9      	ldr	r1, [r7, #12]
 801deb8:	f000 f896 	bl	801dfe8 <mg_uecc_vli_sub>
 801debc:	4603      	mov	r3, r0
 801debe:	2b00      	cmp	r3, #0
 801dec0:	bf14      	ite	ne
 801dec2:	2301      	movne	r3, #1
 801dec4:	2300      	moveq	r3, #0
 801dec6:	b2db      	uxtb	r3, r3
 801dec8:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 801deca:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801dece:	f107 0310 	add.w	r3, r7, #16
 801ded2:	4611      	mov	r1, r2
 801ded4:	4618      	mov	r0, r3
 801ded6:	f7ff feaa 	bl	801dc2e <mg_uecc_vli_isZero>
 801deda:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 801dedc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801dede:	2b00      	cmp	r3, #0
 801dee0:	bf0c      	ite	eq
 801dee2:	2301      	moveq	r3, #1
 801dee4:	2300      	movne	r3, #0
 801dee6:	b2db      	uxtb	r3, r3
 801dee8:	461a      	mov	r2, r3
 801deea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801deec:	b2db      	uxtb	r3, r3
 801deee:	005b      	lsls	r3, r3, #1
 801def0:	b2db      	uxtb	r3, r3
 801def2:	1ad3      	subs	r3, r2, r3
 801def4:	b2db      	uxtb	r3, r3
 801def6:	b25b      	sxtb	r3, r3
}
 801def8:	4618      	mov	r0, r3
 801defa:	3738      	adds	r7, #56	@ 0x38
 801defc:	46bd      	mov	sp, r7
 801defe:	bd80      	pop	{r7, pc}

0801df00 <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 801df00:	b480      	push	{r7}
 801df02:	b087      	sub	sp, #28
 801df04:	af00      	add	r7, sp, #0
 801df06:	6078      	str	r0, [r7, #4]
 801df08:	460b      	mov	r3, r1
 801df0a:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 801df10:	2300      	movs	r3, #0
 801df12:	617b      	str	r3, [r7, #20]

  vli += num_words;
 801df14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801df18:	009b      	lsls	r3, r3, #2
 801df1a:	687a      	ldr	r2, [r7, #4]
 801df1c:	4413      	add	r3, r2
 801df1e:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 801df20:	e00b      	b.n	801df3a <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	681b      	ldr	r3, [r3, #0]
 801df26:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	085a      	lsrs	r2, r3, #1
 801df2c:	697b      	ldr	r3, [r7, #20]
 801df2e:	431a      	orrs	r2, r3
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	07db      	lsls	r3, r3, #31
 801df38:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	1f1a      	subs	r2, r3, #4
 801df3e:	607a      	str	r2, [r7, #4]
 801df40:	693a      	ldr	r2, [r7, #16]
 801df42:	429a      	cmp	r2, r3
 801df44:	d3ed      	bcc.n	801df22 <mg_uecc_vli_rshift1+0x22>
  }
}
 801df46:	bf00      	nop
 801df48:	bf00      	nop
 801df4a:	371c      	adds	r7, #28
 801df4c:	46bd      	mov	sp, r7
 801df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df52:	4770      	bx	lr

0801df54 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801df54:	b480      	push	{r7}
 801df56:	b089      	sub	sp, #36	@ 0x24
 801df58:	af00      	add	r7, sp, #0
 801df5a:	60f8      	str	r0, [r7, #12]
 801df5c:	60b9      	str	r1, [r7, #8]
 801df5e:	607a      	str	r2, [r7, #4]
 801df60:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 801df62:	2300      	movs	r3, #0
 801df64:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801df66:	2300      	movs	r3, #0
 801df68:	76fb      	strb	r3, [r7, #27]
 801df6a:	e030      	b.n	801dfce <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 801df6c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801df70:	009b      	lsls	r3, r3, #2
 801df72:	68ba      	ldr	r2, [r7, #8]
 801df74:	4413      	add	r3, r2
 801df76:	681a      	ldr	r2, [r3, #0]
 801df78:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801df7c:	009b      	lsls	r3, r3, #2
 801df7e:	6879      	ldr	r1, [r7, #4]
 801df80:	440b      	add	r3, r1
 801df82:	681b      	ldr	r3, [r3, #0]
 801df84:	4413      	add	r3, r2
 801df86:	69fa      	ldr	r2, [r7, #28]
 801df88:	4413      	add	r3, r2
 801df8a:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 801df8c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801df90:	009b      	lsls	r3, r3, #2
 801df92:	68ba      	ldr	r2, [r7, #8]
 801df94:	4413      	add	r3, r2
 801df96:	681b      	ldr	r3, [r3, #0]
 801df98:	697a      	ldr	r2, [r7, #20]
 801df9a:	429a      	cmp	r2, r3
 801df9c:	d00c      	beq.n	801dfb8 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 801df9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801dfa2:	009b      	lsls	r3, r3, #2
 801dfa4:	68ba      	ldr	r2, [r7, #8]
 801dfa6:	4413      	add	r3, r2
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	697a      	ldr	r2, [r7, #20]
 801dfac:	429a      	cmp	r2, r3
 801dfae:	bf34      	ite	cc
 801dfb0:	2301      	movcc	r3, #1
 801dfb2:	2300      	movcs	r3, #0
 801dfb4:	b2db      	uxtb	r3, r3
 801dfb6:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 801dfb8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801dfbc:	009b      	lsls	r3, r3, #2
 801dfbe:	68fa      	ldr	r2, [r7, #12]
 801dfc0:	4413      	add	r3, r2
 801dfc2:	697a      	ldr	r2, [r7, #20]
 801dfc4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801dfc6:	7efb      	ldrb	r3, [r7, #27]
 801dfc8:	3301      	adds	r3, #1
 801dfca:	b2db      	uxtb	r3, r3
 801dfcc:	76fb      	strb	r3, [r7, #27]
 801dfce:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801dfd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801dfd6:	429a      	cmp	r2, r3
 801dfd8:	dbc8      	blt.n	801df6c <mg_uecc_vli_add+0x18>
  }
  return carry;
 801dfda:	69fb      	ldr	r3, [r7, #28]
}
 801dfdc:	4618      	mov	r0, r3
 801dfde:	3724      	adds	r7, #36	@ 0x24
 801dfe0:	46bd      	mov	sp, r7
 801dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfe6:	4770      	bx	lr

0801dfe8 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801dfe8:	b480      	push	{r7}
 801dfea:	b089      	sub	sp, #36	@ 0x24
 801dfec:	af00      	add	r7, sp, #0
 801dfee:	60f8      	str	r0, [r7, #12]
 801dff0:	60b9      	str	r1, [r7, #8]
 801dff2:	607a      	str	r2, [r7, #4]
 801dff4:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 801dff6:	2300      	movs	r3, #0
 801dff8:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801dffa:	2300      	movs	r3, #0
 801dffc:	76fb      	strb	r3, [r7, #27]
 801dffe:	e030      	b.n	801e062 <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 801e000:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e004:	009b      	lsls	r3, r3, #2
 801e006:	68ba      	ldr	r2, [r7, #8]
 801e008:	4413      	add	r3, r2
 801e00a:	681a      	ldr	r2, [r3, #0]
 801e00c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e010:	009b      	lsls	r3, r3, #2
 801e012:	6879      	ldr	r1, [r7, #4]
 801e014:	440b      	add	r3, r1
 801e016:	681b      	ldr	r3, [r3, #0]
 801e018:	1ad2      	subs	r2, r2, r3
 801e01a:	69fb      	ldr	r3, [r7, #28]
 801e01c:	1ad3      	subs	r3, r2, r3
 801e01e:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 801e020:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e024:	009b      	lsls	r3, r3, #2
 801e026:	68ba      	ldr	r2, [r7, #8]
 801e028:	4413      	add	r3, r2
 801e02a:	681b      	ldr	r3, [r3, #0]
 801e02c:	697a      	ldr	r2, [r7, #20]
 801e02e:	429a      	cmp	r2, r3
 801e030:	d00c      	beq.n	801e04c <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 801e032:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e036:	009b      	lsls	r3, r3, #2
 801e038:	68ba      	ldr	r2, [r7, #8]
 801e03a:	4413      	add	r3, r2
 801e03c:	681b      	ldr	r3, [r3, #0]
 801e03e:	697a      	ldr	r2, [r7, #20]
 801e040:	429a      	cmp	r2, r3
 801e042:	bf8c      	ite	hi
 801e044:	2301      	movhi	r3, #1
 801e046:	2300      	movls	r3, #0
 801e048:	b2db      	uxtb	r3, r3
 801e04a:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 801e04c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801e050:	009b      	lsls	r3, r3, #2
 801e052:	68fa      	ldr	r2, [r7, #12]
 801e054:	4413      	add	r3, r2
 801e056:	697a      	ldr	r2, [r7, #20]
 801e058:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801e05a:	7efb      	ldrb	r3, [r7, #27]
 801e05c:	3301      	adds	r3, #1
 801e05e:	b2db      	uxtb	r3, r3
 801e060:	76fb      	strb	r3, [r7, #27]
 801e062:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801e066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e06a:	429a      	cmp	r2, r3
 801e06c:	dbc8      	blt.n	801e000 <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 801e06e:	69fb      	ldr	r3, [r7, #28]
}
 801e070:	4618      	mov	r0, r3
 801e072:	3724      	adds	r7, #36	@ 0x24
 801e074:	46bd      	mov	sp, r7
 801e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e07a:	4770      	bx	lr

0801e07c <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 801e07c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e080:	b091      	sub	sp, #68	@ 0x44
 801e082:	af00      	add	r7, sp, #0
 801e084:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801e086:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e088:	627a      	str	r2, [r7, #36]	@ 0x24
 801e08a:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 801e08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e08e:	2200      	movs	r2, #0
 801e090:	4698      	mov	r8, r3
 801e092:	4691      	mov	r9, r2
 801e094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e096:	2200      	movs	r2, #0
 801e098:	469a      	mov	sl, r3
 801e09a:	4693      	mov	fp, r2
 801e09c:	fb0a f209 	mul.w	r2, sl, r9
 801e0a0:	fb08 f30b 	mul.w	r3, r8, fp
 801e0a4:	4413      	add	r3, r2
 801e0a6:	fba8 450a 	umull	r4, r5, r8, sl
 801e0aa:	442b      	add	r3, r5
 801e0ac:	461d      	mov	r5, r3
 801e0ae:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 801e0b2:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 801e0b6:	6a3b      	ldr	r3, [r7, #32]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	2200      	movs	r2, #0
 801e0bc:	61bb      	str	r3, [r7, #24]
 801e0be:	61fa      	str	r2, [r7, #28]
 801e0c0:	f04f 0200 	mov.w	r2, #0
 801e0c4:	f04f 0300 	mov.w	r3, #0
 801e0c8:	69b9      	ldr	r1, [r7, #24]
 801e0ca:	000b      	movs	r3, r1
 801e0cc:	2200      	movs	r2, #0
 801e0ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e0d0:	6809      	ldr	r1, [r1, #0]
 801e0d2:	2000      	movs	r0, #0
 801e0d4:	6139      	str	r1, [r7, #16]
 801e0d6:	6178      	str	r0, [r7, #20]
 801e0d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801e0dc:	4621      	mov	r1, r4
 801e0de:	4311      	orrs	r1, r2
 801e0e0:	60b9      	str	r1, [r7, #8]
 801e0e2:	4629      	mov	r1, r5
 801e0e4:	4319      	orrs	r1, r3
 801e0e6:	60f9      	str	r1, [r7, #12]
 801e0e8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801e0ec:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 801e0f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e0f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801e0f8:	1884      	adds	r4, r0, r2
 801e0fa:	603c      	str	r4, [r7, #0]
 801e0fc:	eb41 0303 	adc.w	r3, r1, r3
 801e100:	607b      	str	r3, [r7, #4]
 801e102:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e106:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 801e10a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e10c:	681c      	ldr	r4, [r3, #0]
 801e10e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e112:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801e116:	4290      	cmp	r0, r2
 801e118:	eb71 0303 	sbcs.w	r3, r1, r3
 801e11c:	bf34      	ite	cc
 801e11e:	2301      	movcc	r3, #1
 801e120:	2300      	movcs	r3, #0
 801e122:	b2db      	uxtb	r3, r3
 801e124:	18e2      	adds	r2, r4, r3
 801e126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801e128:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 801e12a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e12e:	f04f 0200 	mov.w	r2, #0
 801e132:	f04f 0300 	mov.w	r3, #0
 801e136:	000a      	movs	r2, r1
 801e138:	2300      	movs	r3, #0
 801e13a:	6a3b      	ldr	r3, [r7, #32]
 801e13c:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 801e13e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e142:	601a      	str	r2, [r3, #0]
#endif
}
 801e144:	bf00      	nop
 801e146:	3744      	adds	r7, #68	@ 0x44
 801e148:	46bd      	mov	sp, r7
 801e14a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e14e:	4770      	bx	lr

0801e150 <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 801e150:	b590      	push	{r4, r7, lr}
 801e152:	b08b      	sub	sp, #44	@ 0x2c
 801e154:	af02      	add	r7, sp, #8
 801e156:	60f8      	str	r0, [r7, #12]
 801e158:	60b9      	str	r1, [r7, #8]
 801e15a:	607a      	str	r2, [r7, #4]
 801e15c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 801e15e:	2300      	movs	r3, #0
 801e160:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 801e162:	2300      	movs	r3, #0
 801e164:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 801e166:	2300      	movs	r3, #0
 801e168:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 801e16a:	2300      	movs	r3, #0
 801e16c:	77bb      	strb	r3, [r7, #30]
 801e16e:	e036      	b.n	801e1de <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 801e170:	2300      	movs	r3, #0
 801e172:	77fb      	strb	r3, [r7, #31]
 801e174:	e01c      	b.n	801e1b0 <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801e176:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e17a:	009b      	lsls	r3, r3, #2
 801e17c:	68ba      	ldr	r2, [r7, #8]
 801e17e:	4413      	add	r3, r2
 801e180:	6818      	ldr	r0, [r3, #0]
 801e182:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801e186:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e18a:	1ad3      	subs	r3, r2, r3
 801e18c:	009b      	lsls	r3, r3, #2
 801e18e:	687a      	ldr	r2, [r7, #4]
 801e190:	4413      	add	r3, r2
 801e192:	6819      	ldr	r1, [r3, #0]
 801e194:	f107 0414 	add.w	r4, r7, #20
 801e198:	f107 0218 	add.w	r2, r7, #24
 801e19c:	f107 0310 	add.w	r3, r7, #16
 801e1a0:	9300      	str	r3, [sp, #0]
 801e1a2:	4623      	mov	r3, r4
 801e1a4:	f7ff ff6a 	bl	801e07c <muladd>
    for (i = 0; i <= k; ++i) {
 801e1a8:	7ffb      	ldrb	r3, [r7, #31]
 801e1aa:	3301      	adds	r3, #1
 801e1ac:	b2db      	uxtb	r3, r3
 801e1ae:	77fb      	strb	r3, [r7, #31]
 801e1b0:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801e1b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801e1b8:	429a      	cmp	r2, r3
 801e1ba:	dddc      	ble.n	801e176 <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 801e1bc:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801e1c0:	009b      	lsls	r3, r3, #2
 801e1c2:	68fa      	ldr	r2, [r7, #12]
 801e1c4:	4413      	add	r3, r2
 801e1c6:	69ba      	ldr	r2, [r7, #24]
 801e1c8:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801e1ca:	697b      	ldr	r3, [r7, #20]
 801e1cc:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801e1ce:	693b      	ldr	r3, [r7, #16]
 801e1d0:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 801e1d6:	7fbb      	ldrb	r3, [r7, #30]
 801e1d8:	3301      	adds	r3, #1
 801e1da:	b2db      	uxtb	r3, r3
 801e1dc:	77bb      	strb	r3, [r7, #30]
 801e1de:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801e1e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e1e6:	429a      	cmp	r2, r3
 801e1e8:	dbc2      	blt.n	801e170 <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801e1ea:	78fb      	ldrb	r3, [r7, #3]
 801e1ec:	77bb      	strb	r3, [r7, #30]
 801e1ee:	e03b      	b.n	801e268 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801e1f0:	7fba      	ldrb	r2, [r7, #30]
 801e1f2:	78fb      	ldrb	r3, [r7, #3]
 801e1f4:	1ad3      	subs	r3, r2, r3
 801e1f6:	b2db      	uxtb	r3, r3
 801e1f8:	3301      	adds	r3, #1
 801e1fa:	b2db      	uxtb	r3, r3
 801e1fc:	77fb      	strb	r3, [r7, #31]
 801e1fe:	e01c      	b.n	801e23a <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801e200:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e204:	009b      	lsls	r3, r3, #2
 801e206:	68ba      	ldr	r2, [r7, #8]
 801e208:	4413      	add	r3, r2
 801e20a:	6818      	ldr	r0, [r3, #0]
 801e20c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801e210:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801e214:	1ad3      	subs	r3, r2, r3
 801e216:	009b      	lsls	r3, r3, #2
 801e218:	687a      	ldr	r2, [r7, #4]
 801e21a:	4413      	add	r3, r2
 801e21c:	6819      	ldr	r1, [r3, #0]
 801e21e:	f107 0414 	add.w	r4, r7, #20
 801e222:	f107 0218 	add.w	r2, r7, #24
 801e226:	f107 0310 	add.w	r3, r7, #16
 801e22a:	9300      	str	r3, [sp, #0]
 801e22c:	4623      	mov	r3, r4
 801e22e:	f7ff ff25 	bl	801e07c <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801e232:	7ffb      	ldrb	r3, [r7, #31]
 801e234:	3301      	adds	r3, #1
 801e236:	b2db      	uxtb	r3, r3
 801e238:	77fb      	strb	r3, [r7, #31]
 801e23a:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801e23e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e242:	429a      	cmp	r2, r3
 801e244:	dbdc      	blt.n	801e200 <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 801e246:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801e24a:	009b      	lsls	r3, r3, #2
 801e24c:	68fa      	ldr	r2, [r7, #12]
 801e24e:	4413      	add	r3, r2
 801e250:	69ba      	ldr	r2, [r7, #24]
 801e252:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801e254:	697b      	ldr	r3, [r7, #20]
 801e256:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801e258:	693b      	ldr	r3, [r7, #16]
 801e25a:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801e25c:	2300      	movs	r3, #0
 801e25e:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801e260:	7fbb      	ldrb	r3, [r7, #30]
 801e262:	3301      	adds	r3, #1
 801e264:	b2db      	uxtb	r3, r3
 801e266:	77bb      	strb	r3, [r7, #30]
 801e268:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801e26c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e270:	005b      	lsls	r3, r3, #1
 801e272:	3b01      	subs	r3, #1
 801e274:	429a      	cmp	r2, r3
 801e276:	dbbb      	blt.n	801e1f0 <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 801e278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e27c:	00db      	lsls	r3, r3, #3
 801e27e:	3b04      	subs	r3, #4
 801e280:	68fa      	ldr	r2, [r7, #12]
 801e282:	4413      	add	r3, r2
 801e284:	69ba      	ldr	r2, [r7, #24]
 801e286:	601a      	str	r2, [r3, #0]
}
 801e288:	bf00      	nop
 801e28a:	3724      	adds	r7, #36	@ 0x24
 801e28c:	46bd      	mov	sp, r7
 801e28e:	bd90      	pop	{r4, r7, pc}

0801e290 <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801e290:	b580      	push	{r7, lr}
 801e292:	b086      	sub	sp, #24
 801e294:	af00      	add	r7, sp, #0
 801e296:	60f8      	str	r0, [r7, #12]
 801e298:	60b9      	str	r1, [r7, #8]
 801e29a:	607a      	str	r2, [r7, #4]
 801e29c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 801e29e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e2a2:	687a      	ldr	r2, [r7, #4]
 801e2a4:	68b9      	ldr	r1, [r7, #8]
 801e2a6:	68f8      	ldr	r0, [r7, #12]
 801e2a8:	f7ff fe54 	bl	801df54 <mg_uecc_vli_add>
 801e2ac:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 801e2ae:	697b      	ldr	r3, [r7, #20]
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d109      	bne.n	801e2c8 <mg_uecc_vli_modAdd+0x38>
 801e2b4:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e2b8:	461a      	mov	r2, r3
 801e2ba:	68f9      	ldr	r1, [r7, #12]
 801e2bc:	6838      	ldr	r0, [r7, #0]
 801e2be:	f7ff fd80 	bl	801ddc2 <mg_uecc_vli_cmp_unsafe>
 801e2c2:	4603      	mov	r3, r0
 801e2c4:	2b01      	cmp	r3, #1
 801e2c6:	d006      	beq.n	801e2d6 <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 801e2c8:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e2cc:	683a      	ldr	r2, [r7, #0]
 801e2ce:	68f9      	ldr	r1, [r7, #12]
 801e2d0:	68f8      	ldr	r0, [r7, #12]
 801e2d2:	f7ff fe89 	bl	801dfe8 <mg_uecc_vli_sub>
  }
}
 801e2d6:	bf00      	nop
 801e2d8:	3718      	adds	r7, #24
 801e2da:	46bd      	mov	sp, r7
 801e2dc:	bd80      	pop	{r7, pc}

0801e2de <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801e2de:	b580      	push	{r7, lr}
 801e2e0:	b086      	sub	sp, #24
 801e2e2:	af00      	add	r7, sp, #0
 801e2e4:	60f8      	str	r0, [r7, #12]
 801e2e6:	60b9      	str	r1, [r7, #8]
 801e2e8:	607a      	str	r2, [r7, #4]
 801e2ea:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 801e2ec:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e2f0:	687a      	ldr	r2, [r7, #4]
 801e2f2:	68b9      	ldr	r1, [r7, #8]
 801e2f4:	68f8      	ldr	r0, [r7, #12]
 801e2f6:	f7ff fe77 	bl	801dfe8 <mg_uecc_vli_sub>
 801e2fa:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 801e2fc:	697b      	ldr	r3, [r7, #20]
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d006      	beq.n	801e310 <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 801e302:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801e306:	683a      	ldr	r2, [r7, #0]
 801e308:	68f9      	ldr	r1, [r7, #12]
 801e30a:	68f8      	ldr	r0, [r7, #12]
 801e30c:	f7ff fe22 	bl	801df54 <mg_uecc_vli_add>
  }
}
 801e310:	bf00      	nop
 801e312:	3718      	adds	r7, #24
 801e314:	46bd      	mov	sp, r7
 801e316:	bd80      	pop	{r7, pc}

0801e318 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 801e318:	b590      	push	{r4, r7, lr}
 801e31a:	b0ad      	sub	sp, #180	@ 0xb4
 801e31c:	af00      	add	r7, sp, #0
 801e31e:	60f8      	str	r0, [r7, #12]
 801e320:	60b9      	str	r1, [r7, #8]
 801e322:	607a      	str	r2, [r7, #4]
 801e324:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 801e326:	f107 0318 	add.w	r3, r7, #24
 801e32a:	613b      	str	r3, [r7, #16]
 801e32c:	68bb      	ldr	r3, [r7, #8]
 801e32e:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801e330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e334:	b29b      	uxth	r3, r3
 801e336:	019b      	lsls	r3, r3, #6
 801e338:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 801e33a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e33e:	4619      	mov	r1, r3
 801e340:	6878      	ldr	r0, [r7, #4]
 801e342:	f7ff fcde 	bl	801dd02 <mg_uecc_vli_numBits>
 801e346:	4603      	mov	r3, r0
 801e348:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801e34a:	1ae3      	subs	r3, r4, r3
 801e34c:	b29b      	uxth	r3, r3
 801e34e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 801e352:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801e356:	2b00      	cmp	r3, #0
 801e358:	da00      	bge.n	801e35c <mg_uecc_vli_mmod+0x44>
 801e35a:	331f      	adds	r3, #31
 801e35c:	115b      	asrs	r3, r3, #5
 801e35e:	b21b      	sxth	r3, r3
 801e360:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 801e364:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801e368:	425a      	negs	r2, r3
 801e36a:	f003 031f 	and.w	r3, r3, #31
 801e36e:	f002 021f 	and.w	r2, r2, #31
 801e372:	bf58      	it	pl
 801e374:	4253      	negpl	r3, r2
 801e376:	b21b      	sxth	r3, r3
 801e378:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 801e37c:	2300      	movs	r3, #0
 801e37e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 801e382:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801e386:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e38a:	4611      	mov	r1, r2
 801e38c:	4618      	mov	r0, r3
 801e38e:	f7ff fc2d 	bl	801dbec <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 801e392:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801e396:	2b00      	cmp	r3, #0
 801e398:	dd34      	ble.n	801e404 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801e39a:	2300      	movs	r3, #0
 801e39c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e3a0:	e029      	b.n	801e3f6 <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801e3a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e3a6:	009b      	lsls	r3, r3, #2
 801e3a8:	687a      	ldr	r2, [r7, #4]
 801e3aa:	4413      	add	r3, r2
 801e3ac:	681a      	ldr	r2, [r3, #0]
 801e3ae:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801e3b2:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801e3b6:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801e3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e3be:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801e3c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801e3c4:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801e3c6:	009b      	lsls	r3, r3, #2
 801e3c8:	33b0      	adds	r3, #176	@ 0xb0
 801e3ca:	443b      	add	r3, r7
 801e3cc:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 801e3d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e3d4:	009b      	lsls	r3, r3, #2
 801e3d6:	687a      	ldr	r2, [r7, #4]
 801e3d8:	4413      	add	r3, r2
 801e3da:	681a      	ldr	r2, [r3, #0]
 801e3dc:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801e3e0:	f1c3 0320 	rsb	r3, r3, #32
 801e3e4:	fa22 f303 	lsr.w	r3, r2, r3
 801e3e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801e3ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e3f0:	3301      	adds	r3, #1
 801e3f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e3f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e3fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801e3fe:	429a      	cmp	r2, r3
 801e400:	d3cf      	bcc.n	801e3a2 <mg_uecc_vli_mmod+0x8a>
 801e402:	e00b      	b.n	801e41c <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 801e404:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 801e408:	009b      	lsls	r3, r3, #2
 801e40a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e40e:	4413      	add	r3, r2
 801e410:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e414:	6879      	ldr	r1, [r7, #4]
 801e416:	4618      	mov	r0, r3
 801e418:	f7ff fcac 	bl	801dd74 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 801e41c:	2301      	movs	r3, #1
 801e41e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e422:	e09f      	b.n	801e564 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 801e424:	2300      	movs	r3, #0
 801e426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 801e42a:	2300      	movs	r3, #0
 801e42c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801e430:	e053      	b.n	801e4da <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 801e432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e436:	009b      	lsls	r3, r3, #2
 801e438:	33b0      	adds	r3, #176	@ 0xb0
 801e43a:	443b      	add	r3, r7
 801e43c:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801e440:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e444:	009b      	lsls	r3, r3, #2
 801e446:	4413      	add	r3, r2
 801e448:	681a      	ldr	r2, [r3, #0]
 801e44a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e44e:	009b      	lsls	r3, r3, #2
 801e450:	33b0      	adds	r3, #176	@ 0xb0
 801e452:	443b      	add	r3, r7
 801e454:	f853 3c58 	ldr.w	r3, [r3, #-88]
 801e458:	1ad2      	subs	r2, r2, r3
 801e45a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e45e:	1ad3      	subs	r3, r2, r3
 801e460:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 801e464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e468:	009b      	lsls	r3, r3, #2
 801e46a:	33b0      	adds	r3, #176	@ 0xb0
 801e46c:	443b      	add	r3, r7
 801e46e:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801e472:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e476:	009b      	lsls	r3, r3, #2
 801e478:	4413      	add	r3, r2
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801e480:	429a      	cmp	r2, r3
 801e482:	d014      	beq.n	801e4ae <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 801e484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e488:	009b      	lsls	r3, r3, #2
 801e48a:	33b0      	adds	r3, #176	@ 0xb0
 801e48c:	443b      	add	r3, r7
 801e48e:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801e492:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e496:	009b      	lsls	r3, r3, #2
 801e498:	4413      	add	r3, r2
 801e49a:	681b      	ldr	r3, [r3, #0]
 801e49c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801e4a0:	429a      	cmp	r2, r3
 801e4a2:	bf8c      	ite	hi
 801e4a4:	2301      	movhi	r3, #1
 801e4a6:	2300      	movls	r3, #0
 801e4a8:	b2db      	uxtb	r3, r3
 801e4aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 801e4ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e4b2:	f1c3 0301 	rsb	r3, r3, #1
 801e4b6:	009b      	lsls	r3, r3, #2
 801e4b8:	33b0      	adds	r3, #176	@ 0xb0
 801e4ba:	443b      	add	r3, r7
 801e4bc:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801e4c0:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801e4c4:	009b      	lsls	r3, r3, #2
 801e4c6:	4413      	add	r3, r2
 801e4c8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801e4cc:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 801e4ce:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801e4d2:	3301      	adds	r3, #1
 801e4d4:	b2db      	uxtb	r3, r3
 801e4d6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801e4da:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 801e4de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e4e2:	005b      	lsls	r3, r3, #1
 801e4e4:	429a      	cmp	r2, r3
 801e4e6:	dba4      	blt.n	801e432 <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 801e4e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801e4ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801e4f0:	429a      	cmp	r2, r3
 801e4f2:	bf0c      	ite	eq
 801e4f4:	2301      	moveq	r3, #1
 801e4f6:	2300      	movne	r3, #0
 801e4f8:	b2db      	uxtb	r3, r3
 801e4fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 801e4fe:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e502:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801e506:	4611      	mov	r1, r2
 801e508:	4618      	mov	r0, r3
 801e50a:	f7ff fcf9 	bl	801df00 <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801e50e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e512:	3b01      	subs	r3, #1
 801e514:	009b      	lsls	r3, r3, #2
 801e516:	33b0      	adds	r3, #176	@ 0xb0
 801e518:	443b      	add	r3, r7
 801e51a:	f853 1c58 	ldr.w	r1, [r3, #-88]
 801e51e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e522:	009b      	lsls	r3, r3, #2
 801e524:	33b0      	adds	r3, #176	@ 0xb0
 801e526:	443b      	add	r3, r7
 801e528:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 801e52c:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801e52e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e532:	3b01      	subs	r3, #1
 801e534:	430a      	orrs	r2, r1
 801e536:	009b      	lsls	r3, r3, #2
 801e538:	33b0      	adds	r3, #176	@ 0xb0
 801e53a:	443b      	add	r3, r7
 801e53c:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 801e540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e544:	009b      	lsls	r3, r3, #2
 801e546:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801e54a:	4413      	add	r3, r2
 801e54c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e550:	4611      	mov	r1, r2
 801e552:	4618      	mov	r0, r3
 801e554:	f7ff fcd4 	bl	801df00 <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 801e558:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801e55c:	3b01      	subs	r3, #1
 801e55e:	b29b      	uxth	r3, r3
 801e560:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 801e564:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801e568:	2b00      	cmp	r3, #0
 801e56a:	f6bf af5b 	bge.w	801e424 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 801e56e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801e572:	009b      	lsls	r3, r3, #2
 801e574:	33b0      	adds	r3, #176	@ 0xb0
 801e576:	443b      	add	r3, r7
 801e578:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 801e57c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e580:	4619      	mov	r1, r3
 801e582:	68f8      	ldr	r0, [r7, #12]
 801e584:	f7ff fbf6 	bl	801dd74 <mg_uecc_vli_set>
}
 801e588:	bf00      	nop
 801e58a:	37b4      	adds	r7, #180	@ 0xb4
 801e58c:	46bd      	mov	sp, r7
 801e58e:	bd90      	pop	{r4, r7, pc}

0801e590 <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 801e590:	b580      	push	{r7, lr}
 801e592:	b094      	sub	sp, #80	@ 0x50
 801e594:	af00      	add	r7, sp, #0
 801e596:	60f8      	str	r0, [r7, #12]
 801e598:	60b9      	str	r1, [r7, #8]
 801e59a:	607a      	str	r2, [r7, #4]
 801e59c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 801e59e:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801e5a2:	f107 0010 	add.w	r0, r7, #16
 801e5a6:	687a      	ldr	r2, [r7, #4]
 801e5a8:	68b9      	ldr	r1, [r7, #8]
 801e5aa:	f7ff fdd1 	bl	801e150 <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 801e5ae:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801e5b2:	f107 0110 	add.w	r1, r7, #16
 801e5b6:	683a      	ldr	r2, [r7, #0]
 801e5b8:	68f8      	ldr	r0, [r7, #12]
 801e5ba:	f7ff fead 	bl	801e318 <mg_uecc_vli_mmod>
}
 801e5be:	bf00      	nop
 801e5c0:	3750      	adds	r7, #80	@ 0x50
 801e5c2:	46bd      	mov	sp, r7
 801e5c4:	bd80      	pop	{r7, pc}

0801e5c6 <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 801e5c6:	b580      	push	{r7, lr}
 801e5c8:	b094      	sub	sp, #80	@ 0x50
 801e5ca:	af00      	add	r7, sp, #0
 801e5cc:	60f8      	str	r0, [r7, #12]
 801e5ce:	60b9      	str	r1, [r7, #8]
 801e5d0:	607a      	str	r2, [r7, #4]
 801e5d2:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 801e5d4:	683b      	ldr	r3, [r7, #0]
 801e5d6:	f993 3000 	ldrsb.w	r3, [r3]
 801e5da:	f107 0010 	add.w	r0, r7, #16
 801e5de:	687a      	ldr	r2, [r7, #4]
 801e5e0:	68b9      	ldr	r1, [r7, #8]
 801e5e2:	f7ff fdb5 	bl	801e150 <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 801e5e6:	683b      	ldr	r3, [r7, #0]
 801e5e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e5ec:	f107 0210 	add.w	r2, r7, #16
 801e5f0:	4611      	mov	r1, r2
 801e5f2:	68f8      	ldr	r0, [r7, #12]
 801e5f4:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 801e5f6:	bf00      	nop
 801e5f8:	3750      	adds	r7, #80	@ 0x50
 801e5fa:	46bd      	mov	sp, r7
 801e5fc:	bd80      	pop	{r7, pc}

0801e5fe <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 801e5fe:	b580      	push	{r7, lr}
 801e600:	b084      	sub	sp, #16
 801e602:	af00      	add	r7, sp, #0
 801e604:	60f8      	str	r0, [r7, #12]
 801e606:	60b9      	str	r1, [r7, #8]
 801e608:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	68ba      	ldr	r2, [r7, #8]
 801e60e:	68b9      	ldr	r1, [r7, #8]
 801e610:	68f8      	ldr	r0, [r7, #12]
 801e612:	f7ff ffd8 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
}
 801e616:	bf00      	nop
 801e618:	3710      	adds	r7, #16
 801e61a:	46bd      	mov	sp, r7
 801e61c:	bd80      	pop	{r7, pc}

0801e61e <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 801e61e:	b580      	push	{r7, lr}
 801e620:	b086      	sub	sp, #24
 801e622:	af00      	add	r7, sp, #0
 801e624:	60f8      	str	r0, [r7, #12]
 801e626:	60b9      	str	r1, [r7, #8]
 801e628:	4613      	mov	r3, r2
 801e62a:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 801e62c:	2300      	movs	r3, #0
 801e62e:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 801e630:	68fb      	ldr	r3, [r7, #12]
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	f003 0301 	and.w	r3, r3, #1
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d007      	beq.n	801e64c <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 801e63c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e640:	68ba      	ldr	r2, [r7, #8]
 801e642:	68f9      	ldr	r1, [r7, #12]
 801e644:	68f8      	ldr	r0, [r7, #12]
 801e646:	f7ff fc85 	bl	801df54 <mg_uecc_vli_add>
 801e64a:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 801e64c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801e650:	4619      	mov	r1, r3
 801e652:	68f8      	ldr	r0, [r7, #12]
 801e654:	f7ff fc54 	bl	801df00 <mg_uecc_vli_rshift1>
  if (carry) {
 801e658:	697b      	ldr	r3, [r7, #20]
 801e65a:	2b00      	cmp	r3, #0
 801e65c:	d013      	beq.n	801e686 <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 801e65e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801e662:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e666:	4413      	add	r3, r2
 801e668:	009b      	lsls	r3, r3, #2
 801e66a:	68fa      	ldr	r2, [r7, #12]
 801e66c:	4413      	add	r3, r2
 801e66e:	681a      	ldr	r2, [r3, #0]
 801e670:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801e674:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e678:	440b      	add	r3, r1
 801e67a:	009b      	lsls	r3, r3, #2
 801e67c:	68f9      	ldr	r1, [r7, #12]
 801e67e:	440b      	add	r3, r1
 801e680:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801e684:	601a      	str	r2, [r3, #0]
  }
}
 801e686:	bf00      	nop
 801e688:	3718      	adds	r7, #24
 801e68a:	46bd      	mov	sp, r7
 801e68c:	bd80      	pop	{r7, pc}

0801e68e <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801e68e:	b580      	push	{r7, lr}
 801e690:	b0a6      	sub	sp, #152	@ 0x98
 801e692:	af00      	add	r7, sp, #0
 801e694:	60f8      	str	r0, [r7, #12]
 801e696:	60b9      	str	r1, [r7, #8]
 801e698:	607a      	str	r2, [r7, #4]
 801e69a:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 801e69c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e6a0:	4619      	mov	r1, r3
 801e6a2:	68b8      	ldr	r0, [r7, #8]
 801e6a4:	f7ff fac3 	bl	801dc2e <mg_uecc_vli_isZero>
 801e6a8:	4603      	mov	r3, r0
 801e6aa:	2b00      	cmp	r3, #0
 801e6ac:	d006      	beq.n	801e6bc <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 801e6ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e6b2:	4619      	mov	r1, r3
 801e6b4:	68f8      	ldr	r0, [r7, #12]
 801e6b6:	f7ff fa99 	bl	801dbec <mg_uecc_vli_clear>
 801e6ba:	e0de      	b.n	801e87a <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 801e6bc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e6c0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801e6c4:	68b9      	ldr	r1, [r7, #8]
 801e6c6:	4618      	mov	r0, r3
 801e6c8:	f7ff fb54 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 801e6cc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e6d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801e6d4:	6879      	ldr	r1, [r7, #4]
 801e6d6:	4618      	mov	r0, r3
 801e6d8:	f7ff fb4c 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 801e6dc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e6e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e6e4:	4611      	mov	r1, r2
 801e6e6:	4618      	mov	r0, r3
 801e6e8:	f7ff fa80 	bl	801dbec <mg_uecc_vli_clear>
  u[0] = 1;
 801e6ec:	2301      	movs	r3, #1
 801e6ee:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 801e6f0:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e6f4:	f107 0314 	add.w	r3, r7, #20
 801e6f8:	4611      	mov	r1, r2
 801e6fa:	4618      	mov	r0, r3
 801e6fc:	f7ff fa76 	bl	801dbec <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801e700:	e0a2      	b.n	801e848 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 801e702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801e704:	f003 0301 	and.w	r3, r3, #1
 801e708:	2b00      	cmp	r3, #0
 801e70a:	d110      	bne.n	801e72e <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 801e70c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e710:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801e714:	4611      	mov	r1, r2
 801e716:	4618      	mov	r0, r3
 801e718:	f7ff fbf2 	bl	801df00 <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 801e71c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e720:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e724:	6879      	ldr	r1, [r7, #4]
 801e726:	4618      	mov	r0, r3
 801e728:	f7ff ff79 	bl	801e61e <vli_modInv_update>
 801e72c:	e08c      	b.n	801e848 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 801e72e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801e730:	f003 0301 	and.w	r3, r3, #1
 801e734:	2b00      	cmp	r3, #0
 801e736:	d110      	bne.n	801e75a <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 801e738:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e73c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801e740:	4611      	mov	r1, r2
 801e742:	4618      	mov	r0, r3
 801e744:	f7ff fbdc 	bl	801df00 <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 801e748:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e74c:	f107 0314 	add.w	r3, r7, #20
 801e750:	6879      	ldr	r1, [r7, #4]
 801e752:	4618      	mov	r0, r3
 801e754:	f7ff ff63 	bl	801e61e <vli_modInv_update>
 801e758:	e076      	b.n	801e848 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 801e75a:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801e75e:	2b00      	cmp	r3, #0
 801e760:	dd39      	ble.n	801e7d6 <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 801e762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e766:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801e76a:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801e76e:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801e772:	f7ff fc39 	bl	801dfe8 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 801e776:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e77a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801e77e:	4611      	mov	r1, r2
 801e780:	4618      	mov	r0, r3
 801e782:	f7ff fbbd 	bl	801df00 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 801e786:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e78a:	f107 0114 	add.w	r1, r7, #20
 801e78e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e792:	4618      	mov	r0, r3
 801e794:	f7ff fb15 	bl	801ddc2 <mg_uecc_vli_cmp_unsafe>
 801e798:	4603      	mov	r3, r0
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	da08      	bge.n	801e7b0 <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 801e79e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e7a2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801e7a6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801e7aa:	687a      	ldr	r2, [r7, #4]
 801e7ac:	f7ff fbd2 	bl	801df54 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 801e7b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e7b4:	f107 0214 	add.w	r2, r7, #20
 801e7b8:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801e7bc:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801e7c0:	f7ff fc12 	bl	801dfe8 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 801e7c4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e7c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e7cc:	6879      	ldr	r1, [r7, #4]
 801e7ce:	4618      	mov	r0, r3
 801e7d0:	f7ff ff25 	bl	801e61e <vli_modInv_update>
 801e7d4:	e038      	b.n	801e848 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 801e7d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e7da:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801e7de:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801e7e2:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801e7e6:	f7ff fbff 	bl	801dfe8 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 801e7ea:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e7ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801e7f2:	4611      	mov	r1, r2
 801e7f4:	4618      	mov	r0, r3
 801e7f6:	f7ff fb83 	bl	801df00 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 801e7fa:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e7fe:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801e802:	f107 0314 	add.w	r3, r7, #20
 801e806:	4618      	mov	r0, r3
 801e808:	f7ff fadb 	bl	801ddc2 <mg_uecc_vli_cmp_unsafe>
 801e80c:	4603      	mov	r3, r0
 801e80e:	2b00      	cmp	r3, #0
 801e810:	da08      	bge.n	801e824 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 801e812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e816:	f107 0114 	add.w	r1, r7, #20
 801e81a:	f107 0014 	add.w	r0, r7, #20
 801e81e:	687a      	ldr	r2, [r7, #4]
 801e820:	f7ff fb98 	bl	801df54 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 801e824:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e828:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801e82c:	f107 0114 	add.w	r1, r7, #20
 801e830:	f107 0014 	add.w	r0, r7, #20
 801e834:	f7ff fbd8 	bl	801dfe8 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 801e838:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e83c:	f107 0314 	add.w	r3, r7, #20
 801e840:	6879      	ldr	r1, [r7, #4]
 801e842:	4618      	mov	r0, r3
 801e844:	f7ff feeb 	bl	801e61e <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801e848:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e84c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801e850:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801e854:	4618      	mov	r0, r3
 801e856:	f7ff fab4 	bl	801ddc2 <mg_uecc_vli_cmp_unsafe>
 801e85a:	4603      	mov	r3, r0
 801e85c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801e860:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801e864:	2b00      	cmp	r3, #0
 801e866:	f47f af4c 	bne.w	801e702 <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 801e86a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801e86e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801e872:	4619      	mov	r1, r3
 801e874:	68f8      	ldr	r0, [r7, #12]
 801e876:	f7ff fa7d 	bl	801dd74 <mg_uecc_vli_set>
}
 801e87a:	3798      	adds	r7, #152	@ 0x98
 801e87c:	46bd      	mov	sp, r7
 801e87e:	bd80      	pop	{r7, pc}

0801e880 <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 801e880:	b580      	push	{r7, lr}
 801e882:	b098      	sub	sp, #96	@ 0x60
 801e884:	af02      	add	r7, sp, #8
 801e886:	60f8      	str	r0, [r7, #12]
 801e888:	60b9      	str	r1, [r7, #8]
 801e88a:	607a      	str	r2, [r7, #4]
 801e88c:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801e88e:	683b      	ldr	r3, [r7, #0]
 801e890:	781b      	ldrb	r3, [r3, #0]
 801e892:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 801e896:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e89a:	4619      	mov	r1, r3
 801e89c:	6878      	ldr	r0, [r7, #4]
 801e89e:	f7ff f9c6 	bl	801dc2e <mg_uecc_vli_isZero>
 801e8a2:	4603      	mov	r3, r0
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	f040 80e6 	bne.w	801ea76 <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 801e8aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e8ae:	683a      	ldr	r2, [r7, #0]
 801e8b0:	68b9      	ldr	r1, [r7, #8]
 801e8b2:	4618      	mov	r0, r3
 801e8b4:	f7ff fea3 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 801e8b8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801e8bc:	f107 0010 	add.w	r0, r7, #16
 801e8c0:	683b      	ldr	r3, [r7, #0]
 801e8c2:	68f9      	ldr	r1, [r7, #12]
 801e8c4:	f7ff fe7f 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 801e8c8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e8cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e8d0:	683a      	ldr	r2, [r7, #0]
 801e8d2:	4618      	mov	r0, r3
 801e8d4:	f7ff fe93 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 801e8d8:	683b      	ldr	r3, [r7, #0]
 801e8da:	687a      	ldr	r2, [r7, #4]
 801e8dc:	68b9      	ldr	r1, [r7, #8]
 801e8de:	68b8      	ldr	r0, [r7, #8]
 801e8e0:	f7ff fe71 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 801e8e4:	683a      	ldr	r2, [r7, #0]
 801e8e6:	6879      	ldr	r1, [r7, #4]
 801e8e8:	6878      	ldr	r0, [r7, #4]
 801e8ea:	f7ff fe88 	bl	801e5fe <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 801e8ee:	683b      	ldr	r3, [r7, #0]
 801e8f0:	1d1a      	adds	r2, r3, #4
 801e8f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e8f6:	9300      	str	r3, [sp, #0]
 801e8f8:	4613      	mov	r3, r2
 801e8fa:	687a      	ldr	r2, [r7, #4]
 801e8fc:	68f9      	ldr	r1, [r7, #12]
 801e8fe:	68f8      	ldr	r0, [r7, #12]
 801e900:	f7ff fcc6 	bl	801e290 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 801e904:	683b      	ldr	r3, [r7, #0]
 801e906:	1d1a      	adds	r2, r3, #4
 801e908:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e90c:	9300      	str	r3, [sp, #0]
 801e90e:	4613      	mov	r3, r2
 801e910:	687a      	ldr	r2, [r7, #4]
 801e912:	6879      	ldr	r1, [r7, #4]
 801e914:	6878      	ldr	r0, [r7, #4]
 801e916:	f7ff fcbb 	bl	801e290 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 801e91a:	683b      	ldr	r3, [r7, #0]
 801e91c:	1d1a      	adds	r2, r3, #4
 801e91e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e922:	9300      	str	r3, [sp, #0]
 801e924:	4613      	mov	r3, r2
 801e926:	687a      	ldr	r2, [r7, #4]
 801e928:	68f9      	ldr	r1, [r7, #12]
 801e92a:	6878      	ldr	r0, [r7, #4]
 801e92c:	f7ff fcd7 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 801e930:	683b      	ldr	r3, [r7, #0]
 801e932:	687a      	ldr	r2, [r7, #4]
 801e934:	68f9      	ldr	r1, [r7, #12]
 801e936:	68f8      	ldr	r0, [r7, #12]
 801e938:	f7ff fe45 	bl	801e5c6 <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 801e93c:	683b      	ldr	r3, [r7, #0]
 801e93e:	1d1a      	adds	r2, r3, #4
 801e940:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e944:	9300      	str	r3, [sp, #0]
 801e946:	4613      	mov	r3, r2
 801e948:	68fa      	ldr	r2, [r7, #12]
 801e94a:	68f9      	ldr	r1, [r7, #12]
 801e94c:	6878      	ldr	r0, [r7, #4]
 801e94e:	f7ff fc9f 	bl	801e290 <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 801e952:	683b      	ldr	r3, [r7, #0]
 801e954:	1d1a      	adds	r2, r3, #4
 801e956:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e95a:	9300      	str	r3, [sp, #0]
 801e95c:	4613      	mov	r3, r2
 801e95e:	687a      	ldr	r2, [r7, #4]
 801e960:	68f9      	ldr	r1, [r7, #12]
 801e962:	68f8      	ldr	r0, [r7, #12]
 801e964:	f7ff fc94 	bl	801e290 <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 801e968:	2100      	movs	r1, #0
 801e96a:	68f8      	ldr	r0, [r7, #12]
 801e96c:	f7ff f989 	bl	801dc82 <mg_uecc_vli_testBit>
 801e970:	4603      	mov	r3, r0
 801e972:	2b00      	cmp	r3, #0
 801e974:	d024      	beq.n	801e9c0 <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 801e976:	683b      	ldr	r3, [r7, #0]
 801e978:	1d1a      	adds	r2, r3, #4
 801e97a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e97e:	68f9      	ldr	r1, [r7, #12]
 801e980:	68f8      	ldr	r0, [r7, #12]
 801e982:	f7ff fae7 	bl	801df54 <mg_uecc_vli_add>
 801e986:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 801e988:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e98c:	4619      	mov	r1, r3
 801e98e:	68f8      	ldr	r0, [r7, #12]
 801e990:	f7ff fab6 	bl	801df00 <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 801e994:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801e998:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e99c:	4413      	add	r3, r2
 801e99e:	009b      	lsls	r3, r3, #2
 801e9a0:	68fa      	ldr	r2, [r7, #12]
 801e9a2:	4413      	add	r3, r2
 801e9a4:	6819      	ldr	r1, [r3, #0]
 801e9a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801e9a8:	07da      	lsls	r2, r3, #31
 801e9aa:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 801e9ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801e9b2:	4403      	add	r3, r0
 801e9b4:	009b      	lsls	r3, r3, #2
 801e9b6:	68f8      	ldr	r0, [r7, #12]
 801e9b8:	4403      	add	r3, r0
 801e9ba:	430a      	orrs	r2, r1
 801e9bc:	601a      	str	r2, [r3, #0]
 801e9be:	e005      	b.n	801e9cc <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 801e9c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e9c4:	4619      	mov	r1, r3
 801e9c6:	68f8      	ldr	r0, [r7, #12]
 801e9c8:	f7ff fa9a 	bl	801df00 <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 801e9cc:	683a      	ldr	r2, [r7, #0]
 801e9ce:	68f9      	ldr	r1, [r7, #12]
 801e9d0:	6878      	ldr	r0, [r7, #4]
 801e9d2:	f7ff fe14 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 801e9d6:	683b      	ldr	r3, [r7, #0]
 801e9d8:	1d19      	adds	r1, r3, #4
 801e9da:	f107 0210 	add.w	r2, r7, #16
 801e9de:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e9e2:	9300      	str	r3, [sp, #0]
 801e9e4:	460b      	mov	r3, r1
 801e9e6:	6879      	ldr	r1, [r7, #4]
 801e9e8:	6878      	ldr	r0, [r7, #4]
 801e9ea:	f7ff fc78 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 801e9ee:	683b      	ldr	r3, [r7, #0]
 801e9f0:	1d19      	adds	r1, r3, #4
 801e9f2:	f107 0210 	add.w	r2, r7, #16
 801e9f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801e9fa:	9300      	str	r3, [sp, #0]
 801e9fc:	460b      	mov	r3, r1
 801e9fe:	6879      	ldr	r1, [r7, #4]
 801ea00:	6878      	ldr	r0, [r7, #4]
 801ea02:	f7ff fc6c 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 801ea06:	683b      	ldr	r3, [r7, #0]
 801ea08:	1d1a      	adds	r2, r3, #4
 801ea0a:	f107 0110 	add.w	r1, r7, #16
 801ea0e:	f107 0010 	add.w	r0, r7, #16
 801ea12:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801ea16:	9300      	str	r3, [sp, #0]
 801ea18:	4613      	mov	r3, r2
 801ea1a:	687a      	ldr	r2, [r7, #4]
 801ea1c:	f7ff fc5f 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 801ea20:	f107 0210 	add.w	r2, r7, #16
 801ea24:	683b      	ldr	r3, [r7, #0]
 801ea26:	68f9      	ldr	r1, [r7, #12]
 801ea28:	68f8      	ldr	r0, [r7, #12]
 801ea2a:	f7ff fdcc 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 801ea2e:	683b      	ldr	r3, [r7, #0]
 801ea30:	1d19      	adds	r1, r3, #4
 801ea32:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801ea36:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801ea3a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801ea3e:	9300      	str	r3, [sp, #0]
 801ea40:	460b      	mov	r3, r1
 801ea42:	68f9      	ldr	r1, [r7, #12]
 801ea44:	f7ff fc4b 	bl	801e2de <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 801ea48:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801ea4c:	461a      	mov	r2, r3
 801ea4e:	6879      	ldr	r1, [r7, #4]
 801ea50:	68f8      	ldr	r0, [r7, #12]
 801ea52:	f7ff f98f 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 801ea56:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801ea5a:	461a      	mov	r2, r3
 801ea5c:	68b9      	ldr	r1, [r7, #8]
 801ea5e:	6878      	ldr	r0, [r7, #4]
 801ea60:	f7ff f988 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 801ea64:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801ea68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801ea6c:	4619      	mov	r1, r3
 801ea6e:	68b8      	ldr	r0, [r7, #8]
 801ea70:	f7ff f980 	bl	801dd74 <mg_uecc_vli_set>
 801ea74:	e000      	b.n	801ea78 <double_jacobian_default+0x1f8>
    return;
 801ea76:	bf00      	nop
}
 801ea78:	3758      	adds	r7, #88	@ 0x58
 801ea7a:	46bd      	mov	sp, r7
 801ea7c:	bd80      	pop	{r7, pc}

0801ea7e <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 801ea7e:	b580      	push	{r7, lr}
 801ea80:	b090      	sub	sp, #64	@ 0x40
 801ea82:	af02      	add	r7, sp, #8
 801ea84:	60f8      	str	r0, [r7, #12]
 801ea86:	60b9      	str	r1, [r7, #8]
 801ea88:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 801ea8a:	f107 0314 	add.w	r3, r7, #20
 801ea8e:	2220      	movs	r2, #32
 801ea90:	2100      	movs	r1, #0
 801ea92:	4618      	mov	r0, r3
 801ea94:	f006 fe7a 	bl	802578c <memset>
 801ea98:	2303      	movs	r3, #3
 801ea9a:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	781b      	ldrb	r3, [r3, #0]
 801eaa0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 801eaa4:	687a      	ldr	r2, [r7, #4]
 801eaa6:	68b9      	ldr	r1, [r7, #8]
 801eaa8:	68f8      	ldr	r0, [r7, #12]
 801eaaa:	f7ff fda8 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	1d19      	adds	r1, r3, #4
 801eab2:	f107 0214 	add.w	r2, r7, #20
 801eab6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801eaba:	9300      	str	r3, [sp, #0]
 801eabc:	460b      	mov	r3, r1
 801eabe:	68f9      	ldr	r1, [r7, #12]
 801eac0:	68f8      	ldr	r0, [r7, #12]
 801eac2:	f7ff fc0c 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	68ba      	ldr	r2, [r7, #8]
 801eaca:	68f9      	ldr	r1, [r7, #12]
 801eacc:	68f8      	ldr	r0, [r7, #12]
 801eace:	f7ff fd7a 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	1d19      	adds	r1, r3, #4
 801eadc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801eae0:	9300      	str	r3, [sp, #0]
 801eae2:	460b      	mov	r3, r1
 801eae4:	68f9      	ldr	r1, [r7, #12]
 801eae6:	68f8      	ldr	r0, [r7, #12]
 801eae8:	f7ff fbd2 	bl	801e290 <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 801eaec:	bf00      	nop
 801eaee:	3738      	adds	r7, #56	@ 0x38
 801eaf0:	46bd      	mov	sp, r7
 801eaf2:	bd80      	pop	{r7, pc}

0801eaf4 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 801eaf4:	b580      	push	{r7, lr}
 801eaf6:	b094      	sub	sp, #80	@ 0x50
 801eaf8:	af00      	add	r7, sp, #0
 801eafa:	6078      	str	r0, [r7, #4]
 801eafc:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 801eafe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801eb02:	2220      	movs	r2, #32
 801eb04:	2100      	movs	r1, #0
 801eb06:	4618      	mov	r0, r3
 801eb08:	f006 fe40 	bl	802578c <memset>
 801eb0c:	2301      	movs	r3, #1
 801eb0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 801eb10:	f107 030c 	add.w	r3, r7, #12
 801eb14:	2220      	movs	r2, #32
 801eb16:	2100      	movs	r1, #0
 801eb18:	4618      	mov	r0, r3
 801eb1a:	f006 fe37 	bl	802578c <memset>
 801eb1e:	2301      	movs	r3, #1
 801eb20:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 801eb22:	683b      	ldr	r3, [r7, #0]
 801eb24:	781b      	ldrb	r3, [r3, #0]
 801eb26:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 801eb2a:	683b      	ldr	r3, [r7, #0]
 801eb2c:	1d19      	adds	r1, r3, #4
 801eb2e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801eb32:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801eb36:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801eb3a:	f7ff fa0b 	bl	801df54 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801eb3e:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801eb42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801eb46:	4611      	mov	r1, r2
 801eb48:	4618      	mov	r0, r3
 801eb4a:	f7ff f8da 	bl	801dd02 <mg_uecc_vli_numBits>
 801eb4e:	4603      	mov	r3, r0
 801eb50:	b29b      	uxth	r3, r3
 801eb52:	3b01      	subs	r3, #1
 801eb54:	b29b      	uxth	r3, r3
 801eb56:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801eb5a:	e020      	b.n	801eb9e <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 801eb5c:	f107 010c 	add.w	r1, r7, #12
 801eb60:	f107 030c 	add.w	r3, r7, #12
 801eb64:	683a      	ldr	r2, [r7, #0]
 801eb66:	4618      	mov	r0, r3
 801eb68:	f7ff fd49 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 801eb6c:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 801eb70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801eb74:	4611      	mov	r1, r2
 801eb76:	4618      	mov	r0, r3
 801eb78:	f7ff f883 	bl	801dc82 <mg_uecc_vli_testBit>
 801eb7c:	4603      	mov	r3, r0
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	d007      	beq.n	801eb92 <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 801eb82:	f107 010c 	add.w	r1, r7, #12
 801eb86:	f107 000c 	add.w	r0, r7, #12
 801eb8a:	683b      	ldr	r3, [r7, #0]
 801eb8c:	687a      	ldr	r2, [r7, #4]
 801eb8e:	f7ff fd1a 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801eb92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801eb96:	3b01      	subs	r3, #1
 801eb98:	b29b      	uxth	r3, r3
 801eb9a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801eb9e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801eba2:	2b01      	cmp	r3, #1
 801eba4:	dcda      	bgt.n	801eb5c <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 801eba6:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801ebaa:	f107 030c 	add.w	r3, r7, #12
 801ebae:	4619      	mov	r1, r3
 801ebb0:	6878      	ldr	r0, [r7, #4]
 801ebb2:	f7ff f8df 	bl	801dd74 <mg_uecc_vli_set>
}
 801ebb6:	bf00      	nop
 801ebb8:	3750      	adds	r7, #80	@ 0x50
 801ebba:	46bd      	mov	sp, r7
 801ebbc:	bd80      	pop	{r7, pc}
	...

0801ebc0 <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 801ebc0:	b480      	push	{r7}
 801ebc2:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 801ebc4:	4b02      	ldr	r3, [pc, #8]	@ (801ebd0 <mg_uecc_secp256r1+0x10>)
}
 801ebc6:	4618      	mov	r0, r3
 801ebc8:	46bd      	mov	sp, r7
 801ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebce:	4770      	bx	lr
 801ebd0:	08029f78 	.word	0x08029f78

0801ebd4 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 801ebd4:	b580      	push	{r7, lr}
 801ebd6:	b08c      	sub	sp, #48	@ 0x30
 801ebd8:	af00      	add	r7, sp, #0
 801ebda:	6078      	str	r0, [r7, #4]
 801ebdc:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 801ebde:	2208      	movs	r2, #8
 801ebe0:	6839      	ldr	r1, [r7, #0]
 801ebe2:	6878      	ldr	r0, [r7, #4]
 801ebe4:	f7ff f8c6 	bl	801dd74 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 801ebe8:	2300      	movs	r3, #0
 801ebea:	617b      	str	r3, [r7, #20]
 801ebec:	697b      	ldr	r3, [r7, #20]
 801ebee:	613b      	str	r3, [r7, #16]
 801ebf0:	693b      	ldr	r3, [r7, #16]
 801ebf2:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 801ebf4:	683b      	ldr	r3, [r7, #0]
 801ebf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ebf8:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 801ebfa:	683b      	ldr	r3, [r7, #0]
 801ebfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ebfe:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 801ec00:	683b      	ldr	r3, [r7, #0]
 801ec02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ec04:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 801ec06:	683b      	ldr	r3, [r7, #0]
 801ec08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec0a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801ec0c:	683b      	ldr	r3, [r7, #0]
 801ec0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ec10:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801ec12:	f107 020c 	add.w	r2, r7, #12
 801ec16:	f107 010c 	add.w	r1, r7, #12
 801ec1a:	f107 000c 	add.w	r0, r7, #12
 801ec1e:	2308      	movs	r3, #8
 801ec20:	f7ff f998 	bl	801df54 <mg_uecc_vli_add>
 801ec24:	4603      	mov	r3, r0
 801ec26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801ec28:	f107 020c 	add.w	r2, r7, #12
 801ec2c:	2308      	movs	r3, #8
 801ec2e:	6879      	ldr	r1, [r7, #4]
 801ec30:	6878      	ldr	r0, [r7, #4]
 801ec32:	f7ff f98f 	bl	801df54 <mg_uecc_vli_add>
 801ec36:	4603      	mov	r3, r0
 801ec38:	461a      	mov	r2, r3
 801ec3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec3c:	4413      	add	r3, r2
 801ec3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 801ec40:	683b      	ldr	r3, [r7, #0]
 801ec42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ec44:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 801ec46:	683b      	ldr	r3, [r7, #0]
 801ec48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ec4a:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 801ec4c:	683b      	ldr	r3, [r7, #0]
 801ec4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec50:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 801ec52:	683b      	ldr	r3, [r7, #0]
 801ec54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ec56:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 801ec58:	2300      	movs	r3, #0
 801ec5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801ec5c:	f107 020c 	add.w	r2, r7, #12
 801ec60:	f107 010c 	add.w	r1, r7, #12
 801ec64:	f107 000c 	add.w	r0, r7, #12
 801ec68:	2308      	movs	r3, #8
 801ec6a:	f7ff f973 	bl	801df54 <mg_uecc_vli_add>
 801ec6e:	4603      	mov	r3, r0
 801ec70:	461a      	mov	r2, r3
 801ec72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec74:	4413      	add	r3, r2
 801ec76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801ec78:	f107 020c 	add.w	r2, r7, #12
 801ec7c:	2308      	movs	r3, #8
 801ec7e:	6879      	ldr	r1, [r7, #4]
 801ec80:	6878      	ldr	r0, [r7, #4]
 801ec82:	f7ff f967 	bl	801df54 <mg_uecc_vli_add>
 801ec86:	4603      	mov	r3, r0
 801ec88:	461a      	mov	r2, r3
 801ec8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec8c:	4413      	add	r3, r2
 801ec8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 801ec90:	683b      	ldr	r3, [r7, #0]
 801ec92:	6a1b      	ldr	r3, [r3, #32]
 801ec94:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 801ec96:	683b      	ldr	r3, [r7, #0]
 801ec98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ec9a:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 801ec9c:	683b      	ldr	r3, [r7, #0]
 801ec9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eca0:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801eca2:	2300      	movs	r3, #0
 801eca4:	623b      	str	r3, [r7, #32]
 801eca6:	6a3b      	ldr	r3, [r7, #32]
 801eca8:	61fb      	str	r3, [r7, #28]
 801ecaa:	69fb      	ldr	r3, [r7, #28]
 801ecac:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 801ecae:	683b      	ldr	r3, [r7, #0]
 801ecb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ecb2:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801ecb4:	683b      	ldr	r3, [r7, #0]
 801ecb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ecb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801ecba:	f107 020c 	add.w	r2, r7, #12
 801ecbe:	2308      	movs	r3, #8
 801ecc0:	6879      	ldr	r1, [r7, #4]
 801ecc2:	6878      	ldr	r0, [r7, #4]
 801ecc4:	f7ff f946 	bl	801df54 <mg_uecc_vli_add>
 801ecc8:	4603      	mov	r3, r0
 801ecca:	461a      	mov	r2, r3
 801eccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecce:	4413      	add	r3, r2
 801ecd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 801ecd2:	683b      	ldr	r3, [r7, #0]
 801ecd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ecd6:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 801ecd8:	683b      	ldr	r3, [r7, #0]
 801ecda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ecdc:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 801ecde:	683b      	ldr	r3, [r7, #0]
 801ece0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ece2:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 801ece4:	683b      	ldr	r3, [r7, #0]
 801ece6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ece8:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 801ecea:	683b      	ldr	r3, [r7, #0]
 801ecec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ecee:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 801ecf0:	683b      	ldr	r3, [r7, #0]
 801ecf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ecf4:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 801ecf6:	683b      	ldr	r3, [r7, #0]
 801ecf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ecfa:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 801ecfc:	683b      	ldr	r3, [r7, #0]
 801ecfe:	6a1b      	ldr	r3, [r3, #32]
 801ed00:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801ed02:	f107 020c 	add.w	r2, r7, #12
 801ed06:	2308      	movs	r3, #8
 801ed08:	6879      	ldr	r1, [r7, #4]
 801ed0a:	6878      	ldr	r0, [r7, #4]
 801ed0c:	f7ff f922 	bl	801df54 <mg_uecc_vli_add>
 801ed10:	4603      	mov	r3, r0
 801ed12:	461a      	mov	r2, r3
 801ed14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed16:	4413      	add	r3, r2
 801ed18:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 801ed1a:	683b      	ldr	r3, [r7, #0]
 801ed1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed1e:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 801ed20:	683b      	ldr	r3, [r7, #0]
 801ed22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ed24:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 801ed26:	683b      	ldr	r3, [r7, #0]
 801ed28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ed2a:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	623b      	str	r3, [r7, #32]
 801ed30:	6a3b      	ldr	r3, [r7, #32]
 801ed32:	61fb      	str	r3, [r7, #28]
 801ed34:	69fb      	ldr	r3, [r7, #28]
 801ed36:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 801ed38:	683b      	ldr	r3, [r7, #0]
 801ed3a:	6a1b      	ldr	r3, [r3, #32]
 801ed3c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 801ed3e:	683b      	ldr	r3, [r7, #0]
 801ed40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed42:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801ed44:	f107 020c 	add.w	r2, r7, #12
 801ed48:	2308      	movs	r3, #8
 801ed4a:	6879      	ldr	r1, [r7, #4]
 801ed4c:	6878      	ldr	r0, [r7, #4]
 801ed4e:	f7ff f94b 	bl	801dfe8 <mg_uecc_vli_sub>
 801ed52:	4603      	mov	r3, r0
 801ed54:	461a      	mov	r2, r3
 801ed56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed58:	1a9b      	subs	r3, r3, r2
 801ed5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 801ed5c:	683b      	ldr	r3, [r7, #0]
 801ed5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ed60:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 801ed62:	683b      	ldr	r3, [r7, #0]
 801ed64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ed66:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 801ed68:	683b      	ldr	r3, [r7, #0]
 801ed6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ed6c:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 801ed6e:	683b      	ldr	r3, [r7, #0]
 801ed70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ed72:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 801ed74:	2300      	movs	r3, #0
 801ed76:	623b      	str	r3, [r7, #32]
 801ed78:	6a3b      	ldr	r3, [r7, #32]
 801ed7a:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 801ed7c:	683b      	ldr	r3, [r7, #0]
 801ed7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ed80:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 801ed82:	683b      	ldr	r3, [r7, #0]
 801ed84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ed86:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801ed88:	f107 020c 	add.w	r2, r7, #12
 801ed8c:	2308      	movs	r3, #8
 801ed8e:	6879      	ldr	r1, [r7, #4]
 801ed90:	6878      	ldr	r0, [r7, #4]
 801ed92:	f7ff f929 	bl	801dfe8 <mg_uecc_vli_sub>
 801ed96:	4603      	mov	r3, r0
 801ed98:	461a      	mov	r2, r3
 801ed9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed9c:	1a9b      	subs	r3, r3, r2
 801ed9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 801eda0:	683b      	ldr	r3, [r7, #0]
 801eda2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eda4:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 801eda6:	683b      	ldr	r3, [r7, #0]
 801eda8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801edaa:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 801edac:	683b      	ldr	r3, [r7, #0]
 801edae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801edb0:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 801edb2:	683b      	ldr	r3, [r7, #0]
 801edb4:	6a1b      	ldr	r3, [r3, #32]
 801edb6:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 801edb8:	683b      	ldr	r3, [r7, #0]
 801edba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801edbc:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 801edbe:	683b      	ldr	r3, [r7, #0]
 801edc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edc2:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801edc4:	2300      	movs	r3, #0
 801edc6:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 801edc8:	683b      	ldr	r3, [r7, #0]
 801edca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801edcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801edce:	f107 020c 	add.w	r2, r7, #12
 801edd2:	2308      	movs	r3, #8
 801edd4:	6879      	ldr	r1, [r7, #4]
 801edd6:	6878      	ldr	r0, [r7, #4]
 801edd8:	f7ff f906 	bl	801dfe8 <mg_uecc_vli_sub>
 801eddc:	4603      	mov	r3, r0
 801edde:	461a      	mov	r2, r3
 801ede0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ede2:	1a9b      	subs	r3, r3, r2
 801ede4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 801ede6:	683b      	ldr	r3, [r7, #0]
 801ede8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801edea:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 801edec:	683b      	ldr	r3, [r7, #0]
 801edee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801edf0:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 801edf2:	2300      	movs	r3, #0
 801edf4:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 801edf6:	683b      	ldr	r3, [r7, #0]
 801edf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801edfa:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 801edfc:	683b      	ldr	r3, [r7, #0]
 801edfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ee00:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 801ee02:	683b      	ldr	r3, [r7, #0]
 801ee04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ee06:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801ee08:	2300      	movs	r3, #0
 801ee0a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 801ee0c:	683b      	ldr	r3, [r7, #0]
 801ee0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ee10:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801ee12:	f107 020c 	add.w	r2, r7, #12
 801ee16:	2308      	movs	r3, #8
 801ee18:	6879      	ldr	r1, [r7, #4]
 801ee1a:	6878      	ldr	r0, [r7, #4]
 801ee1c:	f7ff f8e4 	bl	801dfe8 <mg_uecc_vli_sub>
 801ee20:	4603      	mov	r3, r0
 801ee22:	461a      	mov	r2, r3
 801ee24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee26:	1a9b      	subs	r3, r3, r2
 801ee28:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 801ee2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee2c:	2b00      	cmp	r3, #0
 801ee2e:	da19      	bge.n	801ee64 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 801ee30:	2308      	movs	r3, #8
 801ee32:	4a14      	ldr	r2, [pc, #80]	@ (801ee84 <vli_mmod_fast_secp256r1+0x2b0>)
 801ee34:	6879      	ldr	r1, [r7, #4]
 801ee36:	6878      	ldr	r0, [r7, #4]
 801ee38:	f7ff f88c 	bl	801df54 <mg_uecc_vli_add>
 801ee3c:	4603      	mov	r3, r0
 801ee3e:	461a      	mov	r2, r3
 801ee40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee42:	4413      	add	r3, r2
 801ee44:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 801ee46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee48:	2b00      	cmp	r3, #0
 801ee4a:	dbf1      	blt.n	801ee30 <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 801ee4c:	e015      	b.n	801ee7a <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 801ee4e:	2308      	movs	r3, #8
 801ee50:	4a0c      	ldr	r2, [pc, #48]	@ (801ee84 <vli_mmod_fast_secp256r1+0x2b0>)
 801ee52:	6879      	ldr	r1, [r7, #4]
 801ee54:	6878      	ldr	r0, [r7, #4]
 801ee56:	f7ff f8c7 	bl	801dfe8 <mg_uecc_vli_sub>
 801ee5a:	4603      	mov	r3, r0
 801ee5c:	461a      	mov	r2, r3
 801ee5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee60:	1a9b      	subs	r3, r3, r2
 801ee62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 801ee64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	d1f1      	bne.n	801ee4e <vli_mmod_fast_secp256r1+0x27a>
 801ee6a:	2208      	movs	r2, #8
 801ee6c:	6879      	ldr	r1, [r7, #4]
 801ee6e:	4805      	ldr	r0, [pc, #20]	@ (801ee84 <vli_mmod_fast_secp256r1+0x2b0>)
 801ee70:	f7fe ffa7 	bl	801ddc2 <mg_uecc_vli_cmp_unsafe>
 801ee74:	4603      	mov	r3, r0
 801ee76:	2b01      	cmp	r3, #1
 801ee78:	d1e9      	bne.n	801ee4e <vli_mmod_fast_secp256r1+0x27a>
}
 801ee7a:	bf00      	nop
 801ee7c:	3730      	adds	r7, #48	@ 0x30
 801ee7e:	46bd      	mov	sp, r7
 801ee80:	bd80      	pop	{r7, pc}
 801ee82:	bf00      	nop
 801ee84:	08029f7c 	.word	0x08029f7c

0801ee88 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 801ee88:	b580      	push	{r7, lr}
 801ee8a:	b08c      	sub	sp, #48	@ 0x30
 801ee8c:	af00      	add	r7, sp, #0
 801ee8e:	60f8      	str	r0, [r7, #12]
 801ee90:	60b9      	str	r1, [r7, #8]
 801ee92:	607a      	str	r2, [r7, #4]
 801ee94:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 801ee96:	f107 0310 	add.w	r3, r7, #16
 801ee9a:	683a      	ldr	r2, [r7, #0]
 801ee9c:	6879      	ldr	r1, [r7, #4]
 801ee9e:	4618      	mov	r0, r3
 801eea0:	f7ff fbad 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 801eea4:	f107 0210 	add.w	r2, r7, #16
 801eea8:	683b      	ldr	r3, [r7, #0]
 801eeaa:	68f9      	ldr	r1, [r7, #12]
 801eeac:	68f8      	ldr	r0, [r7, #12]
 801eeae:	f7ff fb8a 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 801eeb2:	f107 0110 	add.w	r1, r7, #16
 801eeb6:	f107 0010 	add.w	r0, r7, #16
 801eeba:	683b      	ldr	r3, [r7, #0]
 801eebc:	687a      	ldr	r2, [r7, #4]
 801eebe:	f7ff fb82 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 801eec2:	f107 0210 	add.w	r2, r7, #16
 801eec6:	683b      	ldr	r3, [r7, #0]
 801eec8:	68b9      	ldr	r1, [r7, #8]
 801eeca:	68b8      	ldr	r0, [r7, #8]
 801eecc:	f7ff fb7b 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
}
 801eed0:	bf00      	nop
 801eed2:	3730      	adds	r7, #48	@ 0x30
 801eed4:	46bd      	mov	sp, r7
 801eed6:	bd80      	pop	{r7, pc}

0801eed8 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 801eed8:	b590      	push	{r4, r7, lr}
 801eeda:	b08f      	sub	sp, #60	@ 0x3c
 801eedc:	af00      	add	r7, sp, #0
 801eede:	60f8      	str	r0, [r7, #12]
 801eee0:	60b9      	str	r1, [r7, #8]
 801eee2:	607a      	str	r2, [r7, #4]
 801eee4:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801eee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eee8:	781b      	ldrb	r3, [r3, #0]
 801eeea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 801eeee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801eef0:	2b00      	cmp	r3, #0
 801eef2:	d008      	beq.n	801ef06 <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 801eef4:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801eef8:	f107 0314 	add.w	r3, r7, #20
 801eefc:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801eefe:	4618      	mov	r0, r3
 801ef00:	f7fe ff38 	bl	801dd74 <mg_uecc_vli_set>
 801ef04:	e009      	b.n	801ef1a <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 801ef06:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801ef0a:	f107 0314 	add.w	r3, r7, #20
 801ef0e:	4611      	mov	r1, r2
 801ef10:	4618      	mov	r0, r3
 801ef12:	f7fe fe6b 	bl	801dbec <mg_uecc_vli_clear>
    z[0] = 1;
 801ef16:	2301      	movs	r3, #1
 801ef18:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 801ef1a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ef1e:	461a      	mov	r2, r3
 801ef20:	68f9      	ldr	r1, [r7, #12]
 801ef22:	6878      	ldr	r0, [r7, #4]
 801ef24:	f7fe ff26 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 801ef28:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ef2c:	461a      	mov	r2, r3
 801ef2e:	68b9      	ldr	r1, [r7, #8]
 801ef30:	6838      	ldr	r0, [r7, #0]
 801ef32:	f7fe ff1f 	bl	801dd74 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 801ef36:	f107 0214 	add.w	r2, r7, #20
 801ef3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef3c:	68b9      	ldr	r1, [r7, #8]
 801ef3e:	68f8      	ldr	r0, [r7, #12]
 801ef40:	f7ff ffa2 	bl	801ee88 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 801ef44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef46:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801ef4a:	f107 0214 	add.w	r2, r7, #20
 801ef4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef50:	68b9      	ldr	r1, [r7, #8]
 801ef52:	68f8      	ldr	r0, [r7, #12]
 801ef54:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 801ef56:	f107 0214 	add.w	r2, r7, #20
 801ef5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef5c:	6839      	ldr	r1, [r7, #0]
 801ef5e:	6878      	ldr	r0, [r7, #4]
 801ef60:	f7ff ff92 	bl	801ee88 <apply_z>
}
 801ef64:	bf00      	nop
 801ef66:	373c      	adds	r7, #60	@ 0x3c
 801ef68:	46bd      	mov	sp, r7
 801ef6a:	bd90      	pop	{r4, r7, pc}

0801ef6c <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 801ef6c:	b580      	push	{r7, lr}
 801ef6e:	b090      	sub	sp, #64	@ 0x40
 801ef70:	af02      	add	r7, sp, #8
 801ef72:	60f8      	str	r0, [r7, #12]
 801ef74:	60b9      	str	r1, [r7, #8]
 801ef76:	607a      	str	r2, [r7, #4]
 801ef78:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801ef7a:	f107 0314 	add.w	r3, r7, #20
 801ef7e:	2220      	movs	r2, #32
 801ef80:	2100      	movs	r1, #0
 801ef82:	4618      	mov	r0, r3
 801ef84:	f006 fc02 	bl	802578c <memset>
  wordcount_t num_words = curve->num_words;
 801ef88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef8a:	781b      	ldrb	r3, [r3, #0]
 801ef8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801ef90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ef92:	1d1a      	adds	r2, r3, #4
 801ef94:	f107 0014 	add.w	r0, r7, #20
 801ef98:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ef9c:	9300      	str	r3, [sp, #0]
 801ef9e:	4613      	mov	r3, r2
 801efa0:	68fa      	ldr	r2, [r7, #12]
 801efa2:	6879      	ldr	r1, [r7, #4]
 801efa4:	f7ff f99b 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801efa8:	f107 0114 	add.w	r1, r7, #20
 801efac:	f107 0314 	add.w	r3, r7, #20
 801efb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801efb2:	4618      	mov	r0, r3
 801efb4:	f7ff fb23 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801efb8:	f107 0214 	add.w	r2, r7, #20
 801efbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801efbe:	68f9      	ldr	r1, [r7, #12]
 801efc0:	68f8      	ldr	r0, [r7, #12]
 801efc2:	f7ff fb00 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801efc6:	f107 0214 	add.w	r2, r7, #20
 801efca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801efcc:	6879      	ldr	r1, [r7, #4]
 801efce:	6878      	ldr	r0, [r7, #4]
 801efd0:	f7ff faf9 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801efd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801efd6:	1d1a      	adds	r2, r3, #4
 801efd8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801efdc:	9300      	str	r3, [sp, #0]
 801efde:	4613      	mov	r3, r2
 801efe0:	68ba      	ldr	r2, [r7, #8]
 801efe2:	6839      	ldr	r1, [r7, #0]
 801efe4:	6838      	ldr	r0, [r7, #0]
 801efe6:	f7ff f97a 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 801efea:	f107 0314 	add.w	r3, r7, #20
 801efee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801eff0:	6839      	ldr	r1, [r7, #0]
 801eff2:	4618      	mov	r0, r3
 801eff4:	f7ff fb03 	bl	801e5fe <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 801eff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801effa:	1d1a      	adds	r2, r3, #4
 801effc:	f107 0114 	add.w	r1, r7, #20
 801f000:	f107 0014 	add.w	r0, r7, #20
 801f004:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801f008:	9300      	str	r3, [sp, #0]
 801f00a:	4613      	mov	r3, r2
 801f00c:	68fa      	ldr	r2, [r7, #12]
 801f00e:	f7ff f966 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 801f012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f014:	1d1a      	adds	r2, r3, #4
 801f016:	f107 0114 	add.w	r1, r7, #20
 801f01a:	f107 0014 	add.w	r0, r7, #20
 801f01e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801f022:	9300      	str	r3, [sp, #0]
 801f024:	4613      	mov	r3, r2
 801f026:	687a      	ldr	r2, [r7, #4]
 801f028:	f7ff f959 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 801f02c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f02e:	1d1a      	adds	r2, r3, #4
 801f030:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801f034:	9300      	str	r3, [sp, #0]
 801f036:	4613      	mov	r3, r2
 801f038:	68fa      	ldr	r2, [r7, #12]
 801f03a:	6879      	ldr	r1, [r7, #4]
 801f03c:	6878      	ldr	r0, [r7, #4]
 801f03e:	f7ff f94e 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 801f042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f044:	687a      	ldr	r2, [r7, #4]
 801f046:	68b9      	ldr	r1, [r7, #8]
 801f048:	68b8      	ldr	r0, [r7, #8]
 801f04a:	f7ff fabc 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 801f04e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f050:	1d19      	adds	r1, r3, #4
 801f052:	f107 0214 	add.w	r2, r7, #20
 801f056:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801f05a:	9300      	str	r3, [sp, #0]
 801f05c:	460b      	mov	r3, r1
 801f05e:	68f9      	ldr	r1, [r7, #12]
 801f060:	6878      	ldr	r0, [r7, #4]
 801f062:	f7ff f93c 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 801f066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f068:	687a      	ldr	r2, [r7, #4]
 801f06a:	6839      	ldr	r1, [r7, #0]
 801f06c:	6838      	ldr	r0, [r7, #0]
 801f06e:	f7ff faaa 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 801f072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f074:	1d1a      	adds	r2, r3, #4
 801f076:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801f07a:	9300      	str	r3, [sp, #0]
 801f07c:	4613      	mov	r3, r2
 801f07e:	68ba      	ldr	r2, [r7, #8]
 801f080:	6839      	ldr	r1, [r7, #0]
 801f082:	6838      	ldr	r0, [r7, #0]
 801f084:	f7ff f92b 	bl	801e2de <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 801f088:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801f08c:	f107 0314 	add.w	r3, r7, #20
 801f090:	4619      	mov	r1, r3
 801f092:	6878      	ldr	r0, [r7, #4]
 801f094:	f7fe fe6e 	bl	801dd74 <mg_uecc_vli_set>
}
 801f098:	bf00      	nop
 801f09a:	3738      	adds	r7, #56	@ 0x38
 801f09c:	46bd      	mov	sp, r7
 801f09e:	bd80      	pop	{r7, pc}

0801f0a0 <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 801f0a0:	b590      	push	{r4, r7, lr}
 801f0a2:	b0a1      	sub	sp, #132	@ 0x84
 801f0a4:	af02      	add	r7, sp, #8
 801f0a6:	60f8      	str	r0, [r7, #12]
 801f0a8:	60b9      	str	r1, [r7, #8]
 801f0aa:	607a      	str	r2, [r7, #4]
 801f0ac:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801f0ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801f0b2:	2220      	movs	r2, #32
 801f0b4:	2100      	movs	r1, #0
 801f0b6:	4618      	mov	r0, r3
 801f0b8:	f006 fb68 	bl	802578c <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801f0bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f0c0:	781b      	ldrb	r3, [r3, #0]
 801f0c2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801f0c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f0ca:	1d1a      	adds	r2, r3, #4
 801f0cc:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801f0d0:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f0d4:	9300      	str	r3, [sp, #0]
 801f0d6:	4613      	mov	r3, r2
 801f0d8:	68fa      	ldr	r2, [r7, #12]
 801f0da:	6879      	ldr	r1, [r7, #4]
 801f0dc:	f7ff f8ff 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801f0e0:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801f0e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801f0e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801f0ec:	4618      	mov	r0, r3
 801f0ee:	f7ff fa86 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801f0f2:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801f0f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f0fa:	68f9      	ldr	r1, [r7, #12]
 801f0fc:	68f8      	ldr	r0, [r7, #12]
 801f0fe:	f7ff fa62 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801f102:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801f106:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f10a:	6879      	ldr	r1, [r7, #4]
 801f10c:	6878      	ldr	r0, [r7, #4]
 801f10e:	f7ff fa5a 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 801f112:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f116:	1d1a      	adds	r2, r3, #4
 801f118:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801f11c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f120:	9300      	str	r3, [sp, #0]
 801f122:	4613      	mov	r3, r2
 801f124:	68ba      	ldr	r2, [r7, #8]
 801f126:	6839      	ldr	r1, [r7, #0]
 801f128:	f7ff f8b2 	bl	801e290 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801f12c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f130:	1d1a      	adds	r2, r3, #4
 801f132:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f136:	9300      	str	r3, [sp, #0]
 801f138:	4613      	mov	r3, r2
 801f13a:	68ba      	ldr	r2, [r7, #8]
 801f13c:	6839      	ldr	r1, [r7, #0]
 801f13e:	6838      	ldr	r0, [r7, #0]
 801f140:	f7ff f8cd 	bl	801e2de <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 801f144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f148:	1d1a      	adds	r2, r3, #4
 801f14a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f14e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f152:	9300      	str	r3, [sp, #0]
 801f154:	4613      	mov	r3, r2
 801f156:	68fa      	ldr	r2, [r7, #12]
 801f158:	6879      	ldr	r1, [r7, #4]
 801f15a:	f7ff f8c0 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 801f15e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f162:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f166:	68b9      	ldr	r1, [r7, #8]
 801f168:	68b8      	ldr	r0, [r7, #8]
 801f16a:	f7ff fa2c 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 801f16e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f172:	1d1a      	adds	r2, r3, #4
 801f174:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f178:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f17c:	9300      	str	r3, [sp, #0]
 801f17e:	4613      	mov	r3, r2
 801f180:	687a      	ldr	r2, [r7, #4]
 801f182:	68f9      	ldr	r1, [r7, #12]
 801f184:	f7ff f884 	bl	801e290 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 801f188:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801f18c:	6839      	ldr	r1, [r7, #0]
 801f18e:	6878      	ldr	r0, [r7, #4]
 801f190:	f7ff fa35 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 801f194:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f198:	1d19      	adds	r1, r3, #4
 801f19a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f19e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f1a2:	9300      	str	r3, [sp, #0]
 801f1a4:	460b      	mov	r3, r1
 801f1a6:	6879      	ldr	r1, [r7, #4]
 801f1a8:	6878      	ldr	r0, [r7, #4]
 801f1aa:	f7ff f898 	bl	801e2de <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 801f1ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f1b2:	1d1a      	adds	r2, r3, #4
 801f1b4:	f107 0014 	add.w	r0, r7, #20
 801f1b8:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f1bc:	9300      	str	r3, [sp, #0]
 801f1be:	4613      	mov	r3, r2
 801f1c0:	687a      	ldr	r2, [r7, #4]
 801f1c2:	68f9      	ldr	r1, [r7, #12]
 801f1c4:	f7ff f88b 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 801f1c8:	f107 0214 	add.w	r2, r7, #20
 801f1cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f1d0:	6839      	ldr	r1, [r7, #0]
 801f1d2:	6838      	ldr	r0, [r7, #0]
 801f1d4:	f7ff f9f7 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 801f1d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f1dc:	1d1a      	adds	r2, r3, #4
 801f1de:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f1e2:	9300      	str	r3, [sp, #0]
 801f1e4:	4613      	mov	r3, r2
 801f1e6:	68ba      	ldr	r2, [r7, #8]
 801f1e8:	6839      	ldr	r1, [r7, #0]
 801f1ea:	6838      	ldr	r0, [r7, #0]
 801f1ec:	f7ff f877 	bl	801e2de <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 801f1f0:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801f1f4:	f107 0314 	add.w	r3, r7, #20
 801f1f8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801f1fc:	4618      	mov	r0, r3
 801f1fe:	f7ff f9fe 	bl	801e5fe <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 801f202:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f206:	1d1c      	adds	r4, r3, #4
 801f208:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f20c:	f107 0114 	add.w	r1, r7, #20
 801f210:	f107 0014 	add.w	r0, r7, #20
 801f214:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f218:	9300      	str	r3, [sp, #0]
 801f21a:	4623      	mov	r3, r4
 801f21c:	f7ff f85f 	bl	801e2de <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 801f220:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f224:	1d1a      	adds	r2, r3, #4
 801f226:	f107 0114 	add.w	r1, r7, #20
 801f22a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f22e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f232:	9300      	str	r3, [sp, #0]
 801f234:	4613      	mov	r3, r2
 801f236:	68fa      	ldr	r2, [r7, #12]
 801f238:	f7ff f851 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 801f23c:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801f240:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f244:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801f248:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f24c:	f7ff f9bb 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 801f250:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801f254:	1d1a      	adds	r2, r3, #4
 801f256:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801f25a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801f25e:	9300      	str	r3, [sp, #0]
 801f260:	4613      	mov	r3, r2
 801f262:	68ba      	ldr	r2, [r7, #8]
 801f264:	68b8      	ldr	r0, [r7, #8]
 801f266:	f7ff f83a 	bl	801e2de <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 801f26a:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 801f26e:	f107 0314 	add.w	r3, r7, #20
 801f272:	4619      	mov	r1, r3
 801f274:	68f8      	ldr	r0, [r7, #12]
 801f276:	f7fe fd7d 	bl	801dd74 <mg_uecc_vli_set>
}
 801f27a:	bf00      	nop
 801f27c:	377c      	adds	r7, #124	@ 0x7c
 801f27e:	46bd      	mov	sp, r7
 801f280:	bd90      	pop	{r4, r7, pc}

0801f282 <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 801f282:	b590      	push	{r4, r7, lr}
 801f284:	b0b1      	sub	sp, #196	@ 0xc4
 801f286:	af02      	add	r7, sp, #8
 801f288:	60f8      	str	r0, [r7, #12]
 801f28a:	60b9      	str	r1, [r7, #8]
 801f28c:	607a      	str	r2, [r7, #4]
 801f28e:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 801f290:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f294:	781b      	ldrb	r3, [r3, #0]
 801f296:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 801f29a:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801f29e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f2a2:	3320      	adds	r3, #32
 801f2a4:	68b9      	ldr	r1, [r7, #8]
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	f7fe fd64 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 801f2ac:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f2b0:	009b      	lsls	r3, r3, #2
 801f2b2:	68ba      	ldr	r2, [r7, #8]
 801f2b4:	18d1      	adds	r1, r2, r3
 801f2b6:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801f2ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f2be:	3320      	adds	r3, #32
 801f2c0:	4618      	mov	r0, r3
 801f2c2:	f7fe fd57 	bl	801dd74 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 801f2c6:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801f2ca:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f2ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801f2d2:	f103 0120 	add.w	r1, r3, #32
 801f2d6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f2da:	f103 0020 	add.w	r0, r3, #32
 801f2de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f2e2:	9301      	str	r3, [sp, #4]
 801f2e4:	683b      	ldr	r3, [r7, #0]
 801f2e6:	9300      	str	r3, [sp, #0]
 801f2e8:	4623      	mov	r3, r4
 801f2ea:	f7ff fdf5 	bl	801eed8 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 801f2ee:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801f2f2:	3b02      	subs	r3, #2
 801f2f4:	b29b      	uxth	r3, r3
 801f2f6:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801f2fa:	e059      	b.n	801f3b0 <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 801f2fc:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801f300:	4619      	mov	r1, r3
 801f302:	6878      	ldr	r0, [r7, #4]
 801f304:	f7fe fcbd 	bl	801dc82 <mg_uecc_vli_testBit>
 801f308:	4603      	mov	r3, r0
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	bf0c      	ite	eq
 801f30e:	2301      	moveq	r3, #1
 801f310:	2300      	movne	r3, #0
 801f312:	b2db      	uxtb	r3, r3
 801f314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801f318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f31c:	f1c3 0301 	rsb	r3, r3, #1
 801f320:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f324:	015b      	lsls	r3, r3, #5
 801f326:	18d0      	adds	r0, r2, r3
 801f328:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f32c:	f1c3 0301 	rsb	r3, r3, #1
 801f330:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f334:	015b      	lsls	r3, r3, #5
 801f336:	18d1      	adds	r1, r2, r3
 801f338:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f33c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f340:	015b      	lsls	r3, r3, #5
 801f342:	18d4      	adds	r4, r2, r3
 801f344:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f348:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f34c:	015b      	lsls	r3, r3, #5
 801f34e:	441a      	add	r2, r3
 801f350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f354:	9300      	str	r3, [sp, #0]
 801f356:	4613      	mov	r3, r2
 801f358:	4622      	mov	r2, r4
 801f35a:	f7ff fea1 	bl	801f0a0 <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801f35e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f362:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f366:	015b      	lsls	r3, r3, #5
 801f368:	18d0      	adds	r0, r2, r3
 801f36a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f36e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f372:	015b      	lsls	r3, r3, #5
 801f374:	18d1      	adds	r1, r2, r3
 801f376:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f37a:	f1c3 0301 	rsb	r3, r3, #1
 801f37e:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f382:	015b      	lsls	r3, r3, #5
 801f384:	18d4      	adds	r4, r2, r3
 801f386:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f38a:	f1c3 0301 	rsb	r3, r3, #1
 801f38e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f392:	015b      	lsls	r3, r3, #5
 801f394:	441a      	add	r2, r3
 801f396:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f39a:	9300      	str	r3, [sp, #0]
 801f39c:	4613      	mov	r3, r2
 801f39e:	4622      	mov	r2, r4
 801f3a0:	f7ff fde4 	bl	801ef6c <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 801f3a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 801f3a8:	3b01      	subs	r3, #1
 801f3aa:	b29b      	uxth	r3, r3
 801f3ac:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801f3b0:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	dca1      	bgt.n	801f2fc <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 801f3b8:	2100      	movs	r1, #0
 801f3ba:	6878      	ldr	r0, [r7, #4]
 801f3bc:	f7fe fc61 	bl	801dc82 <mg_uecc_vli_testBit>
 801f3c0:	4603      	mov	r3, r0
 801f3c2:	2b00      	cmp	r3, #0
 801f3c4:	bf0c      	ite	eq
 801f3c6:	2301      	moveq	r3, #1
 801f3c8:	2300      	movne	r3, #0
 801f3ca:	b2db      	uxtb	r3, r3
 801f3cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801f3d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f3d4:	f1c3 0301 	rsb	r3, r3, #1
 801f3d8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f3dc:	015b      	lsls	r3, r3, #5
 801f3de:	18d0      	adds	r0, r2, r3
 801f3e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f3e4:	f1c3 0301 	rsb	r3, r3, #1
 801f3e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f3ec:	015b      	lsls	r3, r3, #5
 801f3ee:	18d1      	adds	r1, r2, r3
 801f3f0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f3f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f3f8:	015b      	lsls	r3, r3, #5
 801f3fa:	18d4      	adds	r4, r2, r3
 801f3fc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f400:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f404:	015b      	lsls	r3, r3, #5
 801f406:	441a      	add	r2, r3
 801f408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f40c:	9300      	str	r3, [sp, #0]
 801f40e:	4613      	mov	r3, r2
 801f410:	4622      	mov	r2, r4
 801f412:	f7ff fe45 	bl	801f0a0 <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 801f416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f41a:	1d1c      	adds	r4, r3, #4
 801f41c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f420:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f424:	f103 0120 	add.w	r1, r3, #32
 801f428:	f107 0010 	add.w	r0, r7, #16
 801f42c:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f430:	9300      	str	r3, [sp, #0]
 801f432:	4623      	mov	r3, r4
 801f434:	f7fe ff53 	bl	801e2de <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 801f438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f43c:	f1c3 0301 	rsb	r3, r3, #1
 801f440:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f444:	015b      	lsls	r3, r3, #5
 801f446:	441a      	add	r2, r3
 801f448:	f107 0110 	add.w	r1, r7, #16
 801f44c:	f107 0010 	add.w	r0, r7, #16
 801f450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f454:	f7ff f8b7 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 801f458:	f107 0110 	add.w	r1, r7, #16
 801f45c:	f107 0010 	add.w	r0, r7, #16
 801f460:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f464:	68ba      	ldr	r2, [r7, #8]
 801f466:	f7ff f8ae 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 801f46a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f46e:	1d1a      	adds	r2, r3, #4
 801f470:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f474:	f107 0110 	add.w	r1, r7, #16
 801f478:	f107 0010 	add.w	r0, r7, #16
 801f47c:	f7ff f907 	bl	801e68e <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 801f480:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f484:	009b      	lsls	r3, r3, #2
 801f486:	68ba      	ldr	r2, [r7, #8]
 801f488:	441a      	add	r2, r3
 801f48a:	f107 0110 	add.w	r1, r7, #16
 801f48e:	f107 0010 	add.w	r0, r7, #16
 801f492:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f496:	f7ff f896 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 801f49a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f49e:	f1c3 0301 	rsb	r3, r3, #1
 801f4a2:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f4a6:	015b      	lsls	r3, r3, #5
 801f4a8:	441a      	add	r2, r3
 801f4aa:	f107 0110 	add.w	r1, r7, #16
 801f4ae:	f107 0010 	add.w	r0, r7, #16
 801f4b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f4b6:	f7ff f886 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801f4ba:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f4be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f4c2:	015b      	lsls	r3, r3, #5
 801f4c4:	18d0      	adds	r0, r2, r3
 801f4c6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f4ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f4ce:	015b      	lsls	r3, r3, #5
 801f4d0:	18d1      	adds	r1, r2, r3
 801f4d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f4d6:	f1c3 0301 	rsb	r3, r3, #1
 801f4da:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f4de:	015b      	lsls	r3, r3, #5
 801f4e0:	18d4      	adds	r4, r2, r3
 801f4e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f4e6:	f1c3 0301 	rsb	r3, r3, #1
 801f4ea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801f4ee:	015b      	lsls	r3, r3, #5
 801f4f0:	441a      	add	r2, r3
 801f4f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f4f6:	9300      	str	r3, [sp, #0]
 801f4f8:	4613      	mov	r3, r2
 801f4fa:	4622      	mov	r2, r4
 801f4fc:	f7ff fd36 	bl	801ef6c <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 801f500:	f107 0210 	add.w	r2, r7, #16
 801f504:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801f508:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 801f50c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801f510:	f7ff fcba 	bl	801ee88 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 801f514:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801f518:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f51c:	4619      	mov	r1, r3
 801f51e:	68f8      	ldr	r0, [r7, #12]
 801f520:	f7fe fc28 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 801f524:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801f528:	009b      	lsls	r3, r3, #2
 801f52a:	68fa      	ldr	r2, [r7, #12]
 801f52c:	4413      	add	r3, r2
 801f52e:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801f532:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801f536:	4618      	mov	r0, r3
 801f538:	f7fe fc1c 	bl	801dd74 <mg_uecc_vli_set>
}
 801f53c:	bf00      	nop
 801f53e:	37bc      	adds	r7, #188	@ 0xbc
 801f540:	46bd      	mov	sp, r7
 801f542:	bd90      	pop	{r4, r7, pc}

0801f544 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 801f544:	b580      	push	{r7, lr}
 801f546:	b086      	sub	sp, #24
 801f548:	af00      	add	r7, sp, #0
 801f54a:	60f8      	str	r0, [r7, #12]
 801f54c:	60b9      	str	r1, [r7, #8]
 801f54e:	607a      	str	r2, [r7, #4]
 801f550:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801f552:	683b      	ldr	r3, [r7, #0]
 801f554:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f558:	331f      	adds	r3, #31
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	da00      	bge.n	801f560 <regularize_k+0x1c>
 801f55e:	331f      	adds	r3, #31
 801f560:	115b      	asrs	r3, r3, #5
 801f562:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 801f564:	683b      	ldr	r3, [r7, #0]
 801f566:	885b      	ldrh	r3, [r3, #2]
 801f568:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801f56a:	683b      	ldr	r3, [r7, #0]
 801f56c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801f570:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f574:	68f9      	ldr	r1, [r7, #12]
 801f576:	68b8      	ldr	r0, [r7, #8]
 801f578:	f7fe fcec 	bl	801df54 <mg_uecc_vli_add>
 801f57c:	4603      	mov	r3, r0
 801f57e:	2b00      	cmp	r3, #0
 801f580:	d10f      	bne.n	801f5a2 <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 801f582:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801f586:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f58a:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801f58c:	429a      	cmp	r2, r3
 801f58e:	da0a      	bge.n	801f5a6 <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 801f590:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801f594:	4619      	mov	r1, r3
 801f596:	68b8      	ldr	r0, [r7, #8]
 801f598:	f7fe fb73 	bl	801dc82 <mg_uecc_vli_testBit>
 801f59c:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 801f59e:	2b00      	cmp	r3, #0
 801f5a0:	d001      	beq.n	801f5a6 <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801f5a2:	2301      	movs	r3, #1
 801f5a4:	e000      	b.n	801f5a8 <regularize_k+0x64>
 801f5a6:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 801f5a8:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 801f5aa:	683b      	ldr	r3, [r7, #0]
 801f5ac:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801f5b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801f5b4:	68b9      	ldr	r1, [r7, #8]
 801f5b6:	6878      	ldr	r0, [r7, #4]
 801f5b8:	f7fe fccc 	bl	801df54 <mg_uecc_vli_add>
  return carry;
 801f5bc:	693b      	ldr	r3, [r7, #16]
}
 801f5be:	4618      	mov	r0, r3
 801f5c0:	3718      	adds	r7, #24
 801f5c2:	46bd      	mov	sp, r7
 801f5c4:	bd80      	pop	{r7, pc}
	...

0801f5c8 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 801f5c8:	b580      	push	{r7, lr}
 801f5ca:	b088      	sub	sp, #32
 801f5cc:	af00      	add	r7, sp, #0
 801f5ce:	60f8      	str	r0, [r7, #12]
 801f5d0:	60b9      	str	r1, [r7, #8]
 801f5d2:	4613      	mov	r3, r2
 801f5d4:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801f5d6:	f04f 33ff 	mov.w	r3, #4294967295
 801f5da:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 801f5dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f5e0:	4619      	mov	r1, r3
 801f5e2:	68b8      	ldr	r0, [r7, #8]
 801f5e4:	f7fe fb8d 	bl	801dd02 <mg_uecc_vli_numBits>
 801f5e8:	4603      	mov	r3, r0
 801f5ea:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 801f5ec:	4b2a      	ldr	r3, [pc, #168]	@ (801f698 <mg_uecc_generate_random_int+0xd0>)
 801f5ee:	681b      	ldr	r3, [r3, #0]
 801f5f0:	2b00      	cmp	r3, #0
 801f5f2:	d101      	bne.n	801f5f8 <mg_uecc_generate_random_int+0x30>
    return 0;
 801f5f4:	2300      	movs	r3, #0
 801f5f6:	e04b      	b.n	801f690 <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801f5f8:	2300      	movs	r3, #0
 801f5fa:	61fb      	str	r3, [r7, #28]
 801f5fc:	e044      	b.n	801f688 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 801f5fe:	4b26      	ldr	r3, [pc, #152]	@ (801f698 <mg_uecc_generate_random_int+0xd0>)
 801f600:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 801f602:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801f606:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 801f608:	4611      	mov	r1, r2
 801f60a:	68f8      	ldr	r0, [r7, #12]
 801f60c:	4798      	blx	r3
 801f60e:	4603      	mov	r3, r0
 801f610:	2b00      	cmp	r3, #0
 801f612:	d101      	bne.n	801f618 <mg_uecc_generate_random_int+0x50>
      return 0;
 801f614:	2300      	movs	r3, #0
 801f616:	e03b      	b.n	801f690 <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 801f618:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801f61c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f620:	4413      	add	r3, r2
 801f622:	009b      	lsls	r3, r3, #2
 801f624:	68fa      	ldr	r2, [r7, #12]
 801f626:	4413      	add	r3, r2
 801f628:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 801f62a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f62e:	b29b      	uxth	r3, r3
 801f630:	015b      	lsls	r3, r3, #5
 801f632:	b29a      	uxth	r2, r3
 801f634:	8afb      	ldrh	r3, [r7, #22]
 801f636:	1ad3      	subs	r3, r2, r3
 801f638:	b29b      	uxth	r3, r3
 801f63a:	b21b      	sxth	r3, r3
 801f63c:	461a      	mov	r2, r3
 801f63e:	69bb      	ldr	r3, [r7, #24]
 801f640:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 801f644:	f997 0007 	ldrsb.w	r0, [r7, #7]
 801f648:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801f64c:	4403      	add	r3, r0
 801f64e:	009b      	lsls	r3, r3, #2
 801f650:	68f8      	ldr	r0, [r7, #12]
 801f652:	4403      	add	r3, r0
 801f654:	400a      	ands	r2, r1
 801f656:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 801f658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f65c:	4619      	mov	r1, r3
 801f65e:	68f8      	ldr	r0, [r7, #12]
 801f660:	f7fe fae5 	bl	801dc2e <mg_uecc_vli_isZero>
 801f664:	4603      	mov	r3, r0
 801f666:	2b00      	cmp	r3, #0
 801f668:	d10b      	bne.n	801f682 <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 801f66a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801f66e:	461a      	mov	r2, r3
 801f670:	68f9      	ldr	r1, [r7, #12]
 801f672:	68b8      	ldr	r0, [r7, #8]
 801f674:	f7fe fc13 	bl	801de9e <mg_uecc_vli_cmp>
 801f678:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 801f67a:	2b01      	cmp	r3, #1
 801f67c:	d101      	bne.n	801f682 <mg_uecc_generate_random_int+0xba>
      return 1;
 801f67e:	2301      	movs	r3, #1
 801f680:	e006      	b.n	801f690 <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801f682:	69fb      	ldr	r3, [r7, #28]
 801f684:	3301      	adds	r3, #1
 801f686:	61fb      	str	r3, [r7, #28]
 801f688:	69fb      	ldr	r3, [r7, #28]
 801f68a:	2b3f      	cmp	r3, #63	@ 0x3f
 801f68c:	d9b7      	bls.n	801f5fe <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 801f68e:	2300      	movs	r3, #0
}
 801f690:	4618      	mov	r0, r3
 801f692:	3720      	adds	r7, #32
 801f694:	46bd      	mov	sp, r7
 801f696:	bd80      	pop	{r7, pc}
 801f698:	24002130 	.word	0x24002130

0801f69c <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 801f69c:	b480      	push	{r7}
 801f69e:	b087      	sub	sp, #28
 801f6a0:	af00      	add	r7, sp, #0
 801f6a2:	60f8      	str	r0, [r7, #12]
 801f6a4:	60b9      	str	r1, [r7, #8]
 801f6a6:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 801f6a8:	2300      	movs	r3, #0
 801f6aa:	617b      	str	r3, [r7, #20]
 801f6ac:	e018      	b.n	801f6e0 <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801f6ae:	68bb      	ldr	r3, [r7, #8]
 801f6b0:	1e5a      	subs	r2, r3, #1
 801f6b2:	697b      	ldr	r3, [r7, #20]
 801f6b4:	1ad3      	subs	r3, r2, r3
 801f6b6:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 801f6b8:	693b      	ldr	r3, [r7, #16]
 801f6ba:	f023 0303 	bic.w	r3, r3, #3
 801f6be:	687a      	ldr	r2, [r7, #4]
 801f6c0:	4413      	add	r3, r2
 801f6c2:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 801f6c4:	693b      	ldr	r3, [r7, #16]
 801f6c6:	f003 0303 	and.w	r3, r3, #3
 801f6ca:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 801f6cc:	fa22 f103 	lsr.w	r1, r2, r3
 801f6d0:	697b      	ldr	r3, [r7, #20]
 801f6d2:	68fa      	ldr	r2, [r7, #12]
 801f6d4:	4413      	add	r3, r2
 801f6d6:	b2ca      	uxtb	r2, r1
 801f6d8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 801f6da:	697b      	ldr	r3, [r7, #20]
 801f6dc:	3301      	adds	r3, #1
 801f6de:	617b      	str	r3, [r7, #20]
 801f6e0:	697a      	ldr	r2, [r7, #20]
 801f6e2:	68bb      	ldr	r3, [r7, #8]
 801f6e4:	429a      	cmp	r2, r3
 801f6e6:	dbe2      	blt.n	801f6ae <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 801f6e8:	bf00      	nop
 801f6ea:	bf00      	nop
 801f6ec:	371c      	adds	r7, #28
 801f6ee:	46bd      	mov	sp, r7
 801f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6f4:	4770      	bx	lr

0801f6f6 <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 801f6f6:	b580      	push	{r7, lr}
 801f6f8:	b086      	sub	sp, #24
 801f6fa:	af00      	add	r7, sp, #0
 801f6fc:	60f8      	str	r0, [r7, #12]
 801f6fe:	60b9      	str	r1, [r7, #8]
 801f700:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	3303      	adds	r3, #3
 801f706:	2b00      	cmp	r3, #0
 801f708:	da00      	bge.n	801f70c <mg_uecc_vli_bytesToNative+0x16>
 801f70a:	3303      	adds	r3, #3
 801f70c:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 801f70e:	b25b      	sxtb	r3, r3
 801f710:	4619      	mov	r1, r3
 801f712:	68f8      	ldr	r0, [r7, #12]
 801f714:	f7fe fa6a 	bl	801dbec <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 801f718:	2300      	movs	r3, #0
 801f71a:	617b      	str	r3, [r7, #20]
 801f71c:	e01e      	b.n	801f75c <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	1e5a      	subs	r2, r3, #1
 801f722:	697b      	ldr	r3, [r7, #20]
 801f724:	1ad3      	subs	r3, r2, r3
 801f726:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 801f728:	693b      	ldr	r3, [r7, #16]
 801f72a:	f023 0303 	bic.w	r3, r3, #3
 801f72e:	68fa      	ldr	r2, [r7, #12]
 801f730:	4413      	add	r3, r2
 801f732:	6819      	ldr	r1, [r3, #0]
 801f734:	697b      	ldr	r3, [r7, #20]
 801f736:	68ba      	ldr	r2, [r7, #8]
 801f738:	4413      	add	r3, r2
 801f73a:	781b      	ldrb	r3, [r3, #0]
 801f73c:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 801f73e:	693b      	ldr	r3, [r7, #16]
 801f740:	f003 0303 	and.w	r3, r3, #3
 801f744:	00db      	lsls	r3, r3, #3
 801f746:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 801f748:	693b      	ldr	r3, [r7, #16]
 801f74a:	f023 0303 	bic.w	r3, r3, #3
 801f74e:	68f8      	ldr	r0, [r7, #12]
 801f750:	4403      	add	r3, r0
 801f752:	430a      	orrs	r2, r1
 801f754:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 801f756:	697b      	ldr	r3, [r7, #20]
 801f758:	3301      	adds	r3, #1
 801f75a:	617b      	str	r3, [r7, #20]
 801f75c:	697a      	ldr	r2, [r7, #20]
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	429a      	cmp	r2, r3
 801f762:	dbdc      	blt.n	801f71e <mg_uecc_vli_bytesToNative+0x28>
  }
}
 801f764:	bf00      	nop
 801f766:	bf00      	nop
 801f768:	3718      	adds	r7, #24
 801f76a:	46bd      	mov	sp, r7
 801f76c:	bd80      	pop	{r7, pc}

0801f76e <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 801f76e:	b580      	push	{r7, lr}
 801f770:	b08a      	sub	sp, #40	@ 0x28
 801f772:	af00      	add	r7, sp, #0
 801f774:	60f8      	str	r0, [r7, #12]
 801f776:	60b9      	str	r1, [r7, #8]
 801f778:	607a      	str	r2, [r7, #4]
 801f77a:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 801f77c:	683b      	ldr	r3, [r7, #0]
 801f77e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f782:	3307      	adds	r3, #7
 801f784:	2b00      	cmp	r3, #0
 801f786:	da00      	bge.n	801f78a <bits2int+0x1c>
 801f788:	3307      	adds	r3, #7
 801f78a:	10db      	asrs	r3, r3, #3
 801f78c:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 801f78e:	683b      	ldr	r3, [r7, #0]
 801f790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f794:	331f      	adds	r3, #31
 801f796:	2b00      	cmp	r3, #0
 801f798:	da00      	bge.n	801f79c <bits2int+0x2e>
 801f79a:	331f      	adds	r3, #31
 801f79c:	115b      	asrs	r3, r3, #5
 801f79e:	b25b      	sxtb	r3, r3
 801f7a0:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 801f7a2:	687a      	ldr	r2, [r7, #4]
 801f7a4:	69fb      	ldr	r3, [r7, #28]
 801f7a6:	429a      	cmp	r2, r3
 801f7a8:	d901      	bls.n	801f7ae <bits2int+0x40>
    bits_size = num_n_bytes;
 801f7aa:	69fb      	ldr	r3, [r7, #28]
 801f7ac:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 801f7ae:	69bb      	ldr	r3, [r7, #24]
 801f7b0:	b25b      	sxtb	r3, r3
 801f7b2:	4619      	mov	r1, r3
 801f7b4:	68f8      	ldr	r0, [r7, #12]
 801f7b6:	f7fe fa19 	bl	801dbec <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 801f7ba:	687b      	ldr	r3, [r7, #4]
 801f7bc:	461a      	mov	r2, r3
 801f7be:	68b9      	ldr	r1, [r7, #8]
 801f7c0:	68f8      	ldr	r0, [r7, #12]
 801f7c2:	f7ff ff98 	bl	801f6f6 <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	00db      	lsls	r3, r3, #3
 801f7ca:	683a      	ldr	r2, [r7, #0]
 801f7cc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801f7d0:	4293      	cmp	r3, r2
 801f7d2:	d93a      	bls.n	801f84a <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	00db      	lsls	r3, r3, #3
 801f7d8:	683a      	ldr	r2, [r7, #0]
 801f7da:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801f7de:	1a9b      	subs	r3, r3, r2
 801f7e0:	617b      	str	r3, [r7, #20]
  carry = 0;
 801f7e2:	2300      	movs	r3, #0
 801f7e4:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 801f7e6:	69bb      	ldr	r3, [r7, #24]
 801f7e8:	009b      	lsls	r3, r3, #2
 801f7ea:	68fa      	ldr	r2, [r7, #12]
 801f7ec:	4413      	add	r3, r2
 801f7ee:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 801f7f0:	e010      	b.n	801f814 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 801f7f2:	6a3b      	ldr	r3, [r7, #32]
 801f7f4:	681b      	ldr	r3, [r3, #0]
 801f7f6:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 801f7f8:	693a      	ldr	r2, [r7, #16]
 801f7fa:	697b      	ldr	r3, [r7, #20]
 801f7fc:	40da      	lsrs	r2, r3
 801f7fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f800:	431a      	orrs	r2, r3
 801f802:	6a3b      	ldr	r3, [r7, #32]
 801f804:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 801f806:	697b      	ldr	r3, [r7, #20]
 801f808:	f1c3 0320 	rsb	r3, r3, #32
 801f80c:	693a      	ldr	r2, [r7, #16]
 801f80e:	fa02 f303 	lsl.w	r3, r2, r3
 801f812:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 801f814:	6a3b      	ldr	r3, [r7, #32]
 801f816:	1f1a      	subs	r2, r3, #4
 801f818:	623a      	str	r2, [r7, #32]
 801f81a:	68fa      	ldr	r2, [r7, #12]
 801f81c:	429a      	cmp	r2, r3
 801f81e:	d3e8      	bcc.n	801f7f2 <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 801f820:	683b      	ldr	r3, [r7, #0]
 801f822:	3324      	adds	r3, #36	@ 0x24
 801f824:	69ba      	ldr	r2, [r7, #24]
 801f826:	b252      	sxtb	r2, r2
 801f828:	68f9      	ldr	r1, [r7, #12]
 801f82a:	4618      	mov	r0, r3
 801f82c:	f7fe fac9 	bl	801ddc2 <mg_uecc_vli_cmp_unsafe>
 801f830:	4603      	mov	r3, r0
 801f832:	2b01      	cmp	r3, #1
 801f834:	d00a      	beq.n	801f84c <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 801f836:	683b      	ldr	r3, [r7, #0]
 801f838:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801f83c:	69bb      	ldr	r3, [r7, #24]
 801f83e:	b25b      	sxtb	r3, r3
 801f840:	68f9      	ldr	r1, [r7, #12]
 801f842:	68f8      	ldr	r0, [r7, #12]
 801f844:	f7fe fbd0 	bl	801dfe8 <mg_uecc_vli_sub>
 801f848:	e000      	b.n	801f84c <bits2int+0xde>
    return;
 801f84a:	bf00      	nop
  }
}
 801f84c:	3728      	adds	r7, #40	@ 0x28
 801f84e:	46bd      	mov	sp, r7
 801f850:	bd80      	pop	{r7, pc}
	...

0801f854 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 801f854:	b590      	push	{r4, r7, lr}
 801f856:	b0ad      	sub	sp, #180	@ 0xb4
 801f858:	af02      	add	r7, sp, #8
 801f85a:	60f8      	str	r0, [r7, #12]
 801f85c:	60b9      	str	r1, [r7, #8]
 801f85e:	607a      	str	r2, [r7, #4]
 801f860:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 801f862:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801f866:	657b      	str	r3, [r7, #84]	@ 0x54
 801f868:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801f86c:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 801f86e:	2300      	movs	r3, #0
 801f870:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 801f874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f878:	781b      	ldrb	r3, [r3, #0]
 801f87a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801f87e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f882:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f886:	331f      	adds	r3, #31
 801f888:	2b00      	cmp	r3, #0
 801f88a:	da00      	bge.n	801f88e <mg_uecc_sign_with_k_internal+0x3a>
 801f88c:	331f      	adds	r3, #31
 801f88e:	115b      	asrs	r3, r3, #5
 801f890:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 801f894:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f898:	885b      	ldrh	r3, [r3, #2]
 801f89a:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 801f89e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 801f8a2:	4619      	mov	r1, r3
 801f8a4:	6838      	ldr	r0, [r7, #0]
 801f8a6:	f7fe f9c2 	bl	801dc2e <mg_uecc_vli_isZero>
 801f8aa:	4603      	mov	r3, r0
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d10b      	bne.n	801f8c8 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 801f8b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f8b4:	3324      	adds	r3, #36	@ 0x24
 801f8b6:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801f8ba:	6839      	ldr	r1, [r7, #0]
 801f8bc:	4618      	mov	r0, r3
 801f8be:	f7fe faee 	bl	801de9e <mg_uecc_vli_cmp>
 801f8c2:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 801f8c4:	2b01      	cmp	r3, #1
 801f8c6:	d001      	beq.n	801f8cc <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 801f8c8:	2300      	movs	r3, #0
 801f8ca:	e128      	b.n	801fb1e <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 801f8cc:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801f8d0:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801f8d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f8d8:	6838      	ldr	r0, [r7, #0]
 801f8da:	f7ff fe33 	bl	801f544 <regularize_k>
 801f8de:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 801f8e2:	4b91      	ldr	r3, [pc, #580]	@ (801fb28 <mg_uecc_sign_with_k_internal+0x2d4>)
 801f8e4:	681b      	ldr	r3, [r3, #0]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	d01c      	beq.n	801f924 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 801f8ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f8ee:	009b      	lsls	r3, r3, #2
 801f8f0:	33a8      	adds	r3, #168	@ 0xa8
 801f8f2:	443b      	add	r3, r7
 801f8f4:	f853 0c54 	ldr.w	r0, [r3, #-84]
 801f8f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f8fc:	3304      	adds	r3, #4
 801f8fe:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801f902:	4619      	mov	r1, r3
 801f904:	f7ff fe60 	bl	801f5c8 <mg_uecc_generate_random_int>
 801f908:	4603      	mov	r3, r0
 801f90a:	2b00      	cmp	r3, #0
 801f90c:	d101      	bne.n	801f912 <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 801f90e:	2300      	movs	r3, #0
 801f910:	e105      	b.n	801fb1e <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 801f912:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f916:	009b      	lsls	r3, r3, #2
 801f918:	33a8      	adds	r3, #168	@ 0xa8
 801f91a:	443b      	add	r3, r7
 801f91c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801f920:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801f924:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f928:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 801f92c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801f930:	2b00      	cmp	r3, #0
 801f932:	bf0c      	ite	eq
 801f934:	2301      	moveq	r3, #1
 801f936:	2300      	movne	r3, #0
 801f938:	b2db      	uxtb	r3, r3
 801f93a:	009b      	lsls	r3, r3, #2
 801f93c:	33a8      	adds	r3, #168	@ 0xa8
 801f93e:	443b      	add	r3, r7
 801f940:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 801f944:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 801f948:	3301      	adds	r3, #1
 801f94a:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801f94c:	b21b      	sxth	r3, r3
 801f94e:	f107 0014 	add.w	r0, r7, #20
 801f952:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801f956:	9201      	str	r2, [sp, #4]
 801f958:	9300      	str	r3, [sp, #0]
 801f95a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801f95e:	4622      	mov	r2, r4
 801f960:	f7ff fc8f 	bl	801f282 <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 801f964:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801f968:	f107 0314 	add.w	r3, r7, #20
 801f96c:	4611      	mov	r1, r2
 801f96e:	4618      	mov	r0, r3
 801f970:	f7fe f95d 	bl	801dc2e <mg_uecc_vli_isZero>
 801f974:	4603      	mov	r3, r0
 801f976:	2b00      	cmp	r3, #0
 801f978:	d001      	beq.n	801f97e <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 801f97a:	2300      	movs	r3, #0
 801f97c:	e0cf      	b.n	801fb1e <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 801f97e:	4b6a      	ldr	r3, [pc, #424]	@ (801fb28 <mg_uecc_sign_with_k_internal+0x2d4>)
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	2b00      	cmp	r3, #0
 801f984:	d10a      	bne.n	801f99c <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 801f986:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801f98a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801f98e:	4611      	mov	r1, r2
 801f990:	4618      	mov	r0, r3
 801f992:	f7fe f92b 	bl	801dbec <mg_uecc_vli_clear>
    tmp[0] = 1;
 801f996:	2301      	movs	r3, #1
 801f998:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801f99a:	e00f      	b.n	801f9bc <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 801f99c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f9a0:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801f9a4:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801f9a8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801f9ac:	4618      	mov	r0, r3
 801f9ae:	f7ff fe0b 	bl	801f5c8 <mg_uecc_generate_random_int>
 801f9b2:	4603      	mov	r3, r0
 801f9b4:	2b00      	cmp	r3, #0
 801f9b6:	d101      	bne.n	801f9bc <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 801f9b8:	2300      	movs	r3, #0
 801f9ba:	e0b0      	b.n	801fb1e <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 801f9bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f9c0:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801f9c4:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801f9c8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f9cc:	9300      	str	r3, [sp, #0]
 801f9ce:	460b      	mov	r3, r1
 801f9d0:	6839      	ldr	r1, [r7, #0]
 801f9d2:	6838      	ldr	r0, [r7, #0]
 801f9d4:	f7fe fddc 	bl	801e590 <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 801f9d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f9dc:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801f9e0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f9e4:	6839      	ldr	r1, [r7, #0]
 801f9e6:	6838      	ldr	r0, [r7, #0]
 801f9e8:	f7fe fe51 	bl	801e68e <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 801f9ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801f9f0:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801f9f4:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801f9f8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801f9fc:	9300      	str	r3, [sp, #0]
 801f9fe:	460b      	mov	r3, r1
 801fa00:	6839      	ldr	r1, [r7, #0]
 801fa02:	6838      	ldr	r0, [r7, #0]
 801fa04:	f7fe fdc4 	bl	801e590 <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 801fa08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fa0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fa10:	4619      	mov	r1, r3
 801fa12:	f107 0314 	add.w	r3, r7, #20
 801fa16:	461a      	mov	r2, r3
 801fa18:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 801fa1c:	f7ff fe3e 	bl	801f69c <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 801fa20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fa24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fa28:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	da00      	bge.n	801fa30 <mg_uecc_sign_with_k_internal+0x1dc>
 801fa2e:	3307      	adds	r3, #7
 801fa30:	10db      	asrs	r3, r3, #3
 801fa32:	461a      	mov	r2, r3
 801fa34:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801fa38:	68f9      	ldr	r1, [r7, #12]
 801fa3a:	4618      	mov	r0, r3
 801fa3c:	f7ff fe5b 	bl	801f6f6 <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 801fa40:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801fa44:	3b01      	subs	r3, #1
 801fa46:	009b      	lsls	r3, r3, #2
 801fa48:	33a8      	adds	r3, #168	@ 0xa8
 801fa4a:	443b      	add	r3, r7
 801fa4c:	2200      	movs	r2, #0
 801fa4e:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 801fa52:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801fa56:	f107 0114 	add.w	r1, r7, #20
 801fa5a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801fa5e:	4618      	mov	r0, r3
 801fa60:	f7fe f988 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 801fa64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fa68:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801fa6c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801fa70:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801fa74:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801fa78:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801fa7c:	9300      	str	r3, [sp, #0]
 801fa7e:	4623      	mov	r3, r4
 801fa80:	f7fe fd86 	bl	801e590 <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 801fa84:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801fa88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fa8c:	687a      	ldr	r2, [r7, #4]
 801fa8e:	68b9      	ldr	r1, [r7, #8]
 801fa90:	f7ff fe6d 	bl	801f76e <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 801fa94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fa98:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801fa9c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801faa0:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801faa4:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801faa8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801faac:	9300      	str	r3, [sp, #0]
 801faae:	4623      	mov	r3, r4
 801fab0:	f7fe fbee 	bl	801e290 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 801fab4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fab8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801fabc:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801fac0:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801fac4:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801fac8:	9300      	str	r3, [sp, #0]
 801faca:	4613      	mov	r3, r2
 801facc:	683a      	ldr	r2, [r7, #0]
 801face:	f7fe fd5f 	bl	801e590 <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 801fad2:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801fad6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801fada:	4611      	mov	r1, r2
 801fadc:	4618      	mov	r0, r3
 801fade:	f7fe f910 	bl	801dd02 <mg_uecc_vli_numBits>
 801fae2:	4603      	mov	r3, r0
 801fae4:	461a      	mov	r2, r3
 801fae6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801faea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801faee:	00db      	lsls	r3, r3, #3
 801faf0:	429a      	cmp	r2, r3
 801faf2:	dd01      	ble.n	801faf8 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 801faf4:	2300      	movs	r3, #0
 801faf6:	e012      	b.n	801fb1e <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 801faf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fafc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fb00:	461a      	mov	r2, r3
 801fb02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801fb06:	1898      	adds	r0, r3, r2
 801fb08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801fb0c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fb10:	4619      	mov	r1, r3
 801fb12:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801fb16:	461a      	mov	r2, r3
 801fb18:	f7ff fdc0 	bl	801f69c <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 801fb1c:	2301      	movs	r3, #1
}
 801fb1e:	4618      	mov	r0, r3
 801fb20:	37ac      	adds	r7, #172	@ 0xac
 801fb22:	46bd      	mov	sp, r7
 801fb24:	bd90      	pop	{r4, r7, pc}
 801fb26:	bf00      	nop
 801fb28:	24002130 	.word	0x24002130

0801fb2c <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 801fb2c:	b580      	push	{r7, lr}
 801fb2e:	b084      	sub	sp, #16
 801fb30:	af00      	add	r7, sp, #0
 801fb32:	6078      	str	r0, [r7, #4]
 801fb34:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	695a      	ldr	r2, [r3, #20]
 801fb3a:	687b      	ldr	r3, [r7, #4]
 801fb3c:	691b      	ldr	r3, [r3, #16]
 801fb3e:	005b      	lsls	r3, r3, #1
 801fb40:	4413      	add	r3, r2
 801fb42:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 801fb44:	2300      	movs	r3, #0
 801fb46:	60fb      	str	r3, [r7, #12]
 801fb48:	e00d      	b.n	801fb66 <HMAC_init+0x3a>
 801fb4a:	683a      	ldr	r2, [r7, #0]
 801fb4c:	68fb      	ldr	r3, [r7, #12]
 801fb4e:	4413      	add	r3, r2
 801fb50:	781a      	ldrb	r2, [r3, #0]
 801fb52:	68b9      	ldr	r1, [r7, #8]
 801fb54:	68fb      	ldr	r3, [r7, #12]
 801fb56:	440b      	add	r3, r1
 801fb58:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 801fb5c:	b2d2      	uxtb	r2, r2
 801fb5e:	701a      	strb	r2, [r3, #0]
 801fb60:	68fb      	ldr	r3, [r7, #12]
 801fb62:	3301      	adds	r3, #1
 801fb64:	60fb      	str	r3, [r7, #12]
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	691b      	ldr	r3, [r3, #16]
 801fb6a:	68fa      	ldr	r2, [r7, #12]
 801fb6c:	429a      	cmp	r2, r3
 801fb6e:	d3ec      	bcc.n	801fb4a <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 801fb70:	e007      	b.n	801fb82 <HMAC_init+0x56>
 801fb72:	68ba      	ldr	r2, [r7, #8]
 801fb74:	68fb      	ldr	r3, [r7, #12]
 801fb76:	4413      	add	r3, r2
 801fb78:	2236      	movs	r2, #54	@ 0x36
 801fb7a:	701a      	strb	r2, [r3, #0]
 801fb7c:	68fb      	ldr	r3, [r7, #12]
 801fb7e:	3301      	adds	r3, #1
 801fb80:	60fb      	str	r3, [r7, #12]
 801fb82:	687b      	ldr	r3, [r7, #4]
 801fb84:	68db      	ldr	r3, [r3, #12]
 801fb86:	68fa      	ldr	r2, [r7, #12]
 801fb88:	429a      	cmp	r2, r3
 801fb8a:	d3f2      	bcc.n	801fb72 <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	681b      	ldr	r3, [r3, #0]
 801fb90:	6878      	ldr	r0, [r7, #4]
 801fb92:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801fb94:	687b      	ldr	r3, [r7, #4]
 801fb96:	685b      	ldr	r3, [r3, #4]
 801fb98:	687a      	ldr	r2, [r7, #4]
 801fb9a:	68d2      	ldr	r2, [r2, #12]
 801fb9c:	68b9      	ldr	r1, [r7, #8]
 801fb9e:	6878      	ldr	r0, [r7, #4]
 801fba0:	4798      	blx	r3
}
 801fba2:	bf00      	nop
 801fba4:	3710      	adds	r7, #16
 801fba6:	46bd      	mov	sp, r7
 801fba8:	bd80      	pop	{r7, pc}

0801fbaa <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 801fbaa:	b580      	push	{r7, lr}
 801fbac:	b084      	sub	sp, #16
 801fbae:	af00      	add	r7, sp, #0
 801fbb0:	60f8      	str	r0, [r7, #12]
 801fbb2:	60b9      	str	r1, [r7, #8]
 801fbb4:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 801fbb6:	68fb      	ldr	r3, [r7, #12]
 801fbb8:	685b      	ldr	r3, [r3, #4]
 801fbba:	687a      	ldr	r2, [r7, #4]
 801fbbc:	68b9      	ldr	r1, [r7, #8]
 801fbbe:	68f8      	ldr	r0, [r7, #12]
 801fbc0:	4798      	blx	r3
}
 801fbc2:	bf00      	nop
 801fbc4:	3710      	adds	r7, #16
 801fbc6:	46bd      	mov	sp, r7
 801fbc8:	bd80      	pop	{r7, pc}

0801fbca <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 801fbca:	b580      	push	{r7, lr}
 801fbcc:	b086      	sub	sp, #24
 801fbce:	af00      	add	r7, sp, #0
 801fbd0:	60f8      	str	r0, [r7, #12]
 801fbd2:	60b9      	str	r1, [r7, #8]
 801fbd4:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801fbd6:	68fb      	ldr	r3, [r7, #12]
 801fbd8:	695a      	ldr	r2, [r3, #20]
 801fbda:	68fb      	ldr	r3, [r7, #12]
 801fbdc:	691b      	ldr	r3, [r3, #16]
 801fbde:	005b      	lsls	r3, r3, #1
 801fbe0:	4413      	add	r3, r2
 801fbe2:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 801fbe4:	2300      	movs	r3, #0
 801fbe6:	617b      	str	r3, [r7, #20]
 801fbe8:	e00d      	b.n	801fc06 <HMAC_finish+0x3c>
 801fbea:	68ba      	ldr	r2, [r7, #8]
 801fbec:	697b      	ldr	r3, [r7, #20]
 801fbee:	4413      	add	r3, r2
 801fbf0:	781a      	ldrb	r2, [r3, #0]
 801fbf2:	6939      	ldr	r1, [r7, #16]
 801fbf4:	697b      	ldr	r3, [r7, #20]
 801fbf6:	440b      	add	r3, r1
 801fbf8:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 801fbfc:	b2d2      	uxtb	r2, r2
 801fbfe:	701a      	strb	r2, [r3, #0]
 801fc00:	697b      	ldr	r3, [r7, #20]
 801fc02:	3301      	adds	r3, #1
 801fc04:	617b      	str	r3, [r7, #20]
 801fc06:	68fb      	ldr	r3, [r7, #12]
 801fc08:	691b      	ldr	r3, [r3, #16]
 801fc0a:	697a      	ldr	r2, [r7, #20]
 801fc0c:	429a      	cmp	r2, r3
 801fc0e:	d3ec      	bcc.n	801fbea <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 801fc10:	e007      	b.n	801fc22 <HMAC_finish+0x58>
 801fc12:	693a      	ldr	r2, [r7, #16]
 801fc14:	697b      	ldr	r3, [r7, #20]
 801fc16:	4413      	add	r3, r2
 801fc18:	225c      	movs	r2, #92	@ 0x5c
 801fc1a:	701a      	strb	r2, [r3, #0]
 801fc1c:	697b      	ldr	r3, [r7, #20]
 801fc1e:	3301      	adds	r3, #1
 801fc20:	617b      	str	r3, [r7, #20]
 801fc22:	68fb      	ldr	r3, [r7, #12]
 801fc24:	68db      	ldr	r3, [r3, #12]
 801fc26:	697a      	ldr	r2, [r7, #20]
 801fc28:	429a      	cmp	r2, r3
 801fc2a:	d3f2      	bcc.n	801fc12 <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 801fc2c:	68fb      	ldr	r3, [r7, #12]
 801fc2e:	689b      	ldr	r3, [r3, #8]
 801fc30:	6879      	ldr	r1, [r7, #4]
 801fc32:	68f8      	ldr	r0, [r7, #12]
 801fc34:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 801fc36:	68fb      	ldr	r3, [r7, #12]
 801fc38:	681b      	ldr	r3, [r3, #0]
 801fc3a:	68f8      	ldr	r0, [r7, #12]
 801fc3c:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801fc3e:	68fb      	ldr	r3, [r7, #12]
 801fc40:	685b      	ldr	r3, [r3, #4]
 801fc42:	68fa      	ldr	r2, [r7, #12]
 801fc44:	68d2      	ldr	r2, [r2, #12]
 801fc46:	6939      	ldr	r1, [r7, #16]
 801fc48:	68f8      	ldr	r0, [r7, #12]
 801fc4a:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 801fc4c:	68fb      	ldr	r3, [r7, #12]
 801fc4e:	685b      	ldr	r3, [r3, #4]
 801fc50:	68fa      	ldr	r2, [r7, #12]
 801fc52:	6912      	ldr	r2, [r2, #16]
 801fc54:	6879      	ldr	r1, [r7, #4]
 801fc56:	68f8      	ldr	r0, [r7, #12]
 801fc58:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 801fc5a:	68fb      	ldr	r3, [r7, #12]
 801fc5c:	689b      	ldr	r3, [r3, #8]
 801fc5e:	6879      	ldr	r1, [r7, #4]
 801fc60:	68f8      	ldr	r0, [r7, #12]
 801fc62:	4798      	blx	r3
}
 801fc64:	bf00      	nop
 801fc66:	3718      	adds	r7, #24
 801fc68:	46bd      	mov	sp, r7
 801fc6a:	bd80      	pop	{r7, pc}

0801fc6c <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 801fc6c:	b580      	push	{r7, lr}
 801fc6e:	b084      	sub	sp, #16
 801fc70:	af00      	add	r7, sp, #0
 801fc72:	60f8      	str	r0, [r7, #12]
 801fc74:	60b9      	str	r1, [r7, #8]
 801fc76:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 801fc78:	68b9      	ldr	r1, [r7, #8]
 801fc7a:	68f8      	ldr	r0, [r7, #12]
 801fc7c:	f7ff ff56 	bl	801fb2c <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 801fc80:	68fb      	ldr	r3, [r7, #12]
 801fc82:	691b      	ldr	r3, [r3, #16]
 801fc84:	461a      	mov	r2, r3
 801fc86:	6879      	ldr	r1, [r7, #4]
 801fc88:	68f8      	ldr	r0, [r7, #12]
 801fc8a:	f7ff ff8e 	bl	801fbaa <HMAC_update>
  HMAC_finish(hash_context, K, V);
 801fc8e:	687a      	ldr	r2, [r7, #4]
 801fc90:	68b9      	ldr	r1, [r7, #8]
 801fc92:	68f8      	ldr	r0, [r7, #12]
 801fc94:	f7ff ff99 	bl	801fbca <HMAC_finish>
}
 801fc98:	bf00      	nop
 801fc9a:	3710      	adds	r7, #16
 801fc9c:	46bd      	mov	sp, r7
 801fc9e:	bd80      	pop	{r7, pc}

0801fca0 <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 801fca0:	b580      	push	{r7, lr}
 801fca2:	b096      	sub	sp, #88	@ 0x58
 801fca4:	af02      	add	r7, sp, #8
 801fca6:	60f8      	str	r0, [r7, #12]
 801fca8:	60b9      	str	r1, [r7, #8]
 801fcaa:	607a      	str	r2, [r7, #4]
 801fcac:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 801fcae:	683b      	ldr	r3, [r7, #0]
 801fcb0:	695b      	ldr	r3, [r3, #20]
 801fcb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 801fcb4:	683b      	ldr	r3, [r7, #0]
 801fcb6:	691b      	ldr	r3, [r3, #16]
 801fcb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fcba:	4413      	add	r3, r2
 801fcbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 801fcbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fcc0:	785b      	ldrb	r3, [r3, #1]
 801fcc2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801fcc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fcc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801fccc:	331f      	adds	r3, #31
 801fcce:	2b00      	cmp	r3, #0
 801fcd0:	da00      	bge.n	801fcd4 <mg_uecc_sign_deterministic+0x34>
 801fcd2:	331f      	adds	r3, #31
 801fcd4:	115b      	asrs	r3, r3, #5
 801fcd6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 801fcda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fcdc:	885b      	ldrh	r3, [r3, #2]
 801fcde:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 801fce0:	2300      	movs	r3, #0
 801fce2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fce4:	e00c      	b.n	801fd00 <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 801fce6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fcea:	4413      	add	r3, r2
 801fcec:	2201      	movs	r2, #1
 801fcee:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 801fcf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fcf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fcf4:	4413      	add	r3, r2
 801fcf6:	2200      	movs	r2, #0
 801fcf8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 801fcfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fcfc:	3301      	adds	r3, #1
 801fcfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fd00:	683b      	ldr	r3, [r7, #0]
 801fd02:	691b      	ldr	r3, [r3, #16]
 801fd04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801fd06:	429a      	cmp	r2, r3
 801fd08:	d3ed      	bcc.n	801fce6 <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801fd0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fd0c:	6838      	ldr	r0, [r7, #0]
 801fd0e:	f7ff ff0d 	bl	801fb2c <HMAC_init>
  V[hash_context->result_size] = 0x00;
 801fd12:	683b      	ldr	r3, [r7, #0]
 801fd14:	691b      	ldr	r3, [r3, #16]
 801fd16:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fd18:	4413      	add	r3, r2
 801fd1a:	2200      	movs	r2, #0
 801fd1c:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801fd1e:	683b      	ldr	r3, [r7, #0]
 801fd20:	691b      	ldr	r3, [r3, #16]
 801fd22:	3301      	adds	r3, #1
 801fd24:	461a      	mov	r2, r3
 801fd26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fd28:	6838      	ldr	r0, [r7, #0]
 801fd2a:	f7ff ff3e 	bl	801fbaa <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801fd2e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801fd32:	461a      	mov	r2, r3
 801fd34:	68f9      	ldr	r1, [r7, #12]
 801fd36:	6838      	ldr	r0, [r7, #0]
 801fd38:	f7ff ff37 	bl	801fbaa <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801fd3c:	687a      	ldr	r2, [r7, #4]
 801fd3e:	68b9      	ldr	r1, [r7, #8]
 801fd40:	6838      	ldr	r0, [r7, #0]
 801fd42:	f7ff ff32 	bl	801fbaa <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801fd46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fd48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fd4a:	6838      	ldr	r0, [r7, #0]
 801fd4c:	f7ff ff3d 	bl	801fbca <HMAC_finish>

  update_V(hash_context, K, V);
 801fd50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fd52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fd54:	6838      	ldr	r0, [r7, #0]
 801fd56:	f7ff ff89 	bl	801fc6c <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801fd5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fd5c:	6838      	ldr	r0, [r7, #0]
 801fd5e:	f7ff fee5 	bl	801fb2c <HMAC_init>
  V[hash_context->result_size] = 0x01;
 801fd62:	683b      	ldr	r3, [r7, #0]
 801fd64:	691b      	ldr	r3, [r3, #16]
 801fd66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fd68:	4413      	add	r3, r2
 801fd6a:	2201      	movs	r2, #1
 801fd6c:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801fd6e:	683b      	ldr	r3, [r7, #0]
 801fd70:	691b      	ldr	r3, [r3, #16]
 801fd72:	3301      	adds	r3, #1
 801fd74:	461a      	mov	r2, r3
 801fd76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fd78:	6838      	ldr	r0, [r7, #0]
 801fd7a:	f7ff ff16 	bl	801fbaa <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801fd7e:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801fd82:	461a      	mov	r2, r3
 801fd84:	68f9      	ldr	r1, [r7, #12]
 801fd86:	6838      	ldr	r0, [r7, #0]
 801fd88:	f7ff ff0f 	bl	801fbaa <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801fd8c:	687a      	ldr	r2, [r7, #4]
 801fd8e:	68b9      	ldr	r1, [r7, #8]
 801fd90:	6838      	ldr	r0, [r7, #0]
 801fd92:	f7ff ff0a 	bl	801fbaa <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801fd96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fd98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fd9a:	6838      	ldr	r0, [r7, #0]
 801fd9c:	f7ff ff15 	bl	801fbca <HMAC_finish>

  update_V(hash_context, K, V);
 801fda0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fda2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fda4:	6838      	ldr	r0, [r7, #0]
 801fda6:	f7ff ff61 	bl	801fc6c <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801fdaa:	2300      	movs	r3, #0
 801fdac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801fdae:	e084      	b.n	801feba <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 801fdb0:	f107 0310 	add.w	r3, r7, #16
 801fdb4:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 801fdb6:	2300      	movs	r3, #0
 801fdb8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 801fdbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fdbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fdc0:	6838      	ldr	r0, [r7, #0]
 801fdc2:	f7ff ff53 	bl	801fc6c <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 801fdc6:	2300      	movs	r3, #0
 801fdc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fdca:	e017      	b.n	801fdfc <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 801fdcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fdce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fdd0:	441a      	add	r2, r3
 801fdd2:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 801fdd6:	b2cb      	uxtb	r3, r1
 801fdd8:	3301      	adds	r3, #1
 801fdda:	b2db      	uxtb	r3, r3
 801fddc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801fde0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fde2:	440b      	add	r3, r1
 801fde4:	7812      	ldrb	r2, [r2, #0]
 801fde6:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 801fde8:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 801fdec:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fdf0:	009b      	lsls	r3, r3, #2
 801fdf2:	429a      	cmp	r2, r3
 801fdf4:	da08      	bge.n	801fe08 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 801fdf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801fdf8:	3301      	adds	r3, #1
 801fdfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 801fdfc:	683b      	ldr	r3, [r7, #0]
 801fdfe:	691b      	ldr	r3, [r3, #16]
 801fe00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801fe02:	429a      	cmp	r2, r3
 801fe04:	d3e2      	bcc.n	801fdcc <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 801fe06:	e7d9      	b.n	801fdbc <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 801fe08:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 801fe0a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fe0e:	015a      	lsls	r2, r3, #5
 801fe10:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801fe14:	429a      	cmp	r2, r3
 801fe16:	dd20      	ble.n	801fe5a <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801fe18:	f04f 33ff 	mov.w	r3, #4294967295
 801fe1c:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 801fe1e:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fe22:	3b01      	subs	r3, #1
 801fe24:	009b      	lsls	r3, r3, #2
 801fe26:	3350      	adds	r3, #80	@ 0x50
 801fe28:	443b      	add	r3, r7
 801fe2a:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 801fe2e:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fe32:	b29b      	uxth	r3, r3
 801fe34:	015b      	lsls	r3, r3, #5
 801fe36:	b29a      	uxth	r2, r3
 801fe38:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801fe3a:	1ad3      	subs	r3, r2, r3
 801fe3c:	b29b      	uxth	r3, r3
 801fe3e:	b21b      	sxth	r3, r3
 801fe40:	461a      	mov	r2, r3
          mask >>
 801fe42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801fe44:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 801fe48:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801fe4c:	3b01      	subs	r3, #1
 801fe4e:	400a      	ands	r2, r1
 801fe50:	009b      	lsls	r3, r3, #2
 801fe52:	3350      	adds	r3, #80	@ 0x50
 801fe54:	443b      	add	r3, r7
 801fe56:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 801fe5a:	f107 0210 	add.w	r2, r7, #16
 801fe5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801fe60:	9301      	str	r3, [sp, #4]
 801fe62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801fe64:	9300      	str	r3, [sp, #0]
 801fe66:	4613      	mov	r3, r2
 801fe68:	687a      	ldr	r2, [r7, #4]
 801fe6a:	68b9      	ldr	r1, [r7, #8]
 801fe6c:	68f8      	ldr	r0, [r7, #12]
 801fe6e:	f7ff fcf1 	bl	801f854 <mg_uecc_sign_with_k_internal>
 801fe72:	4603      	mov	r3, r0
 801fe74:	2b00      	cmp	r3, #0
 801fe76:	d001      	beq.n	801fe7c <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 801fe78:	2301      	movs	r3, #1
 801fe7a:	e023      	b.n	801fec4 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 801fe7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fe7e:	6838      	ldr	r0, [r7, #0]
 801fe80:	f7ff fe54 	bl	801fb2c <HMAC_init>
    V[hash_context->result_size] = 0x00;
 801fe84:	683b      	ldr	r3, [r7, #0]
 801fe86:	691b      	ldr	r3, [r3, #16]
 801fe88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fe8a:	4413      	add	r3, r2
 801fe8c:	2200      	movs	r2, #0
 801fe8e:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 801fe90:	683b      	ldr	r3, [r7, #0]
 801fe92:	691b      	ldr	r3, [r3, #16]
 801fe94:	3301      	adds	r3, #1
 801fe96:	461a      	mov	r2, r3
 801fe98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fe9a:	6838      	ldr	r0, [r7, #0]
 801fe9c:	f7ff fe85 	bl	801fbaa <HMAC_update>
    HMAC_finish(hash_context, K, K);
 801fea0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801fea2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fea4:	6838      	ldr	r0, [r7, #0]
 801fea6:	f7ff fe90 	bl	801fbca <HMAC_finish>

    update_V(hash_context, K, V);
 801feaa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801feac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801feae:	6838      	ldr	r0, [r7, #0]
 801feb0:	f7ff fedc 	bl	801fc6c <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801feb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801feb6:	3301      	adds	r3, #1
 801feb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801feba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801febc:	2b3f      	cmp	r3, #63	@ 0x3f
 801febe:	f67f af77 	bls.w	801fdb0 <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 801fec2:	2300      	movs	r3, #0
}
 801fec4:	4618      	mov	r0, r3
 801fec6:	3750      	adds	r7, #80	@ 0x50
 801fec8:	46bd      	mov	sp, r7
 801feca:	bd80      	pop	{r7, pc}

0801fecc <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 801fecc:	b480      	push	{r7}
 801fece:	b083      	sub	sp, #12
 801fed0:	af00      	add	r7, sp, #0
 801fed2:	4603      	mov	r3, r0
 801fed4:	460a      	mov	r2, r1
 801fed6:	80fb      	strh	r3, [r7, #6]
 801fed8:	4613      	mov	r3, r2
 801feda:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 801fedc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801fee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801fee4:	4293      	cmp	r3, r2
 801fee6:	bfb8      	it	lt
 801fee8:	4613      	movlt	r3, r2
 801feea:	b21b      	sxth	r3, r3
}
 801feec:	4618      	mov	r0, r3
 801feee:	370c      	adds	r7, #12
 801fef0:	46bd      	mov	sp, r7
 801fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fef6:	4770      	bx	lr

0801fef8 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 801fef8:	b590      	push	{r4, r7, lr}
 801fefa:	b0ff      	sub	sp, #508	@ 0x1fc
 801fefc:	af02      	add	r7, sp, #8
 801fefe:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 801ff02:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 801ff06:	6020      	str	r0, [r4, #0]
 801ff08:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 801ff0c:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 801ff10:	6001      	str	r1, [r0, #0]
 801ff12:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 801ff16:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 801ff1a:	600a      	str	r2, [r1, #0]
 801ff1c:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 801ff20:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 801ff24:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801ff26:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ff2a:	781b      	ldrb	r3, [r3, #0]
 801ff2c:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801ff30:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ff34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801ff38:	331f      	adds	r3, #31
 801ff3a:	2b00      	cmp	r3, #0
 801ff3c:	da00      	bge.n	801ff40 <mg_uecc_verify+0x48>
 801ff3e:	331f      	adds	r3, #31
 801ff40:	115b      	asrs	r3, r3, #5
 801ff42:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 801ff46:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801ff4a:	3b01      	subs	r3, #1
 801ff4c:	009b      	lsls	r3, r3, #2
 801ff4e:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801ff52:	443b      	add	r3, r7
 801ff54:	2200      	movs	r2, #0
 801ff56:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 801ff5a:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801ff5e:	1e5a      	subs	r2, r3, #1
 801ff60:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801ff64:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801ff68:	2100      	movs	r1, #0
 801ff6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 801ff6e:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801ff72:	1e5a      	subs	r2, r3, #1
 801ff74:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801ff78:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801ff7c:	2100      	movs	r1, #0
 801ff7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 801ff82:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ff86:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ff8a:	461a      	mov	r2, r3
 801ff8c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801ff90:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801ff94:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801ff98:	6819      	ldr	r1, [r3, #0]
 801ff9a:	f7ff fbac 	bl	801f6f6 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801ff9e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801ffa2:	009b      	lsls	r3, r3, #2
 801ffa4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801ffa8:	18d0      	adds	r0, r2, r3
 801ffaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ffae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ffb2:	461a      	mov	r2, r3
 801ffb4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801ffb8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 801ffc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ffc4:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801ffc8:	461a      	mov	r2, r3
 801ffca:	f7ff fb94 	bl	801f6f6 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 801ffce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ffd2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801ffd6:	461a      	mov	r2, r3
 801ffd8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801ffdc:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801ffe0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801ffe4:	6819      	ldr	r1, [r3, #0]
 801ffe6:	f7ff fb86 	bl	801f6f6 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 801ffea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801ffee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801fff2:	461a      	mov	r2, r3
 801fff4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801fff8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801fffc:	681b      	ldr	r3, [r3, #0]
 801fffe:	1899      	adds	r1, r3, r2
 8020000:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020004:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8020008:	461a      	mov	r2, r3
 802000a:	f107 0310 	add.w	r3, r7, #16
 802000e:	4618      	mov	r0, r3
 8020010:	f7ff fb71 	bl	801f6f6 <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 8020014:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020018:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 802001c:	4611      	mov	r1, r2
 802001e:	4618      	mov	r0, r3
 8020020:	f7fd fe05 	bl	801dc2e <mg_uecc_vli_isZero>
 8020024:	4603      	mov	r3, r0
 8020026:	2b00      	cmp	r3, #0
 8020028:	d10a      	bne.n	8020040 <mg_uecc_verify+0x148>
 802002a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 802002e:	f107 0310 	add.w	r3, r7, #16
 8020032:	4611      	mov	r1, r2
 8020034:	4618      	mov	r0, r3
 8020036:	f7fd fdfa 	bl	801dc2e <mg_uecc_vli_isZero>
 802003a:	4603      	mov	r3, r0
 802003c:	2b00      	cmp	r3, #0
 802003e:	d001      	beq.n	8020044 <mg_uecc_verify+0x14c>
    return 0;
 8020040:	2300      	movs	r3, #0
 8020042:	e220      	b.n	8020486 <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8020044:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020048:	3324      	adds	r3, #36	@ 0x24
 802004a:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 802004e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8020052:	4618      	mov	r0, r3
 8020054:	f7fd feb5 	bl	801ddc2 <mg_uecc_vli_cmp_unsafe>
 8020058:	4603      	mov	r3, r0
 802005a:	2b01      	cmp	r3, #1
 802005c:	d10c      	bne.n	8020078 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 802005e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020062:	3324      	adds	r3, #36	@ 0x24
 8020064:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020068:	f107 0110 	add.w	r1, r7, #16
 802006c:	4618      	mov	r0, r3
 802006e:	f7fd fea8 	bl	801ddc2 <mg_uecc_vli_cmp_unsafe>
 8020072:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 8020074:	2b01      	cmp	r3, #1
 8020076:	d001      	beq.n	802007c <mg_uecc_verify+0x184>
    return 0;
 8020078:	2300      	movs	r3, #0
 802007a:	e204      	b.n	8020486 <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 802007c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020080:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020084:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020088:	f107 0110 	add.w	r1, r7, #16
 802008c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020090:	f7fe fafd 	bl	801e68e <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 8020094:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020098:	3b01      	subs	r3, #1
 802009a:	009b      	lsls	r3, r3, #2
 802009c:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80200a0:	443b      	add	r3, r7
 80200a2:	2200      	movs	r2, #0
 80200a4:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 80200a8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80200ac:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 80200b0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80200b4:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 80200b8:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80200bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80200c0:	6812      	ldr	r2, [r2, #0]
 80200c2:	6809      	ldr	r1, [r1, #0]
 80200c4:	f7ff fb53 	bl	801f76e <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 80200c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80200cc:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80200d0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80200d4:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 80200d8:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 80200dc:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 80200e0:	9300      	str	r3, [sp, #0]
 80200e2:	4623      	mov	r3, r4
 80200e4:	f7fe fa54 	bl	801e590 <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 80200e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80200ec:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 80200f0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80200f4:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80200f8:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80200fc:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020100:	9300      	str	r3, [sp, #0]
 8020102:	4623      	mov	r3, r4
 8020104:	f7fe fa44 	bl	801e590 <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 8020108:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 802010c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8020110:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8020114:	4618      	mov	r0, r3
 8020116:	f7fd fe2d 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 802011a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 802011e:	009b      	lsls	r3, r3, #2
 8020120:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020124:	18d0      	adds	r0, r2, r3
 8020126:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 802012a:	009b      	lsls	r3, r3, #2
 802012c:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8020130:	4413      	add	r3, r2
 8020132:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020136:	4619      	mov	r1, r3
 8020138:	f7fd fe1c 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 802013c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020140:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 8020144:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020148:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 802014c:	4618      	mov	r0, r3
 802014e:	f7fd fe11 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 8020152:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020156:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 802015a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 802015e:	009b      	lsls	r3, r3, #2
 8020160:	18d1      	adds	r1, r2, r3
 8020162:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020166:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 802016a:	4618      	mov	r0, r3
 802016c:	f7fd fe02 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 8020170:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020174:	1d1c      	adds	r4, r3, #4
 8020176:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 802017a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 802017e:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020182:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020186:	9300      	str	r3, [sp, #0]
 8020188:	4623      	mov	r3, r4
 802018a:	f7fe f8a8 	bl	801e2de <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 802018e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020192:	009b      	lsls	r3, r3, #2
 8020194:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8020198:	18d4      	adds	r4, r2, r3
 802019a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 802019e:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80201a2:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80201a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80201aa:	9300      	str	r3, [sp, #0]
 80201ac:	4623      	mov	r3, r4
 80201ae:	f7fe fedd 	bl	801ef6c <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 80201b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80201b6:	1d1a      	adds	r2, r3, #4
 80201b8:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80201bc:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80201c0:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80201c4:	f7fe fa63 	bl	801e68e <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 80201c8:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80201cc:	009b      	lsls	r3, r3, #2
 80201ce:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80201d2:	18d1      	adds	r1, r2, r3
 80201d4:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80201d8:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80201dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80201e0:	f7fe fe52 	bl	801ee88 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 80201e4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80201e8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80201ec:	2200      	movs	r2, #0
 80201ee:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 80201f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80201f4:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 80201f8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80201fc:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020200:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 8020202:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020206:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 802020a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 802020e:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 8020210:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8020214:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8020218:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 802021c:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 802021e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020222:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020226:	4611      	mov	r1, r2
 8020228:	4618      	mov	r0, r3
 802022a:	f7fd fd6a 	bl	801dd02 <mg_uecc_vli_numBits>
 802022e:	4603      	mov	r3, r0
 8020230:	461c      	mov	r4, r3
 8020232:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 8020236:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 802023a:	4611      	mov	r1, r2
 802023c:	4618      	mov	r0, r3
 802023e:	f7fd fd60 	bl	801dd02 <mg_uecc_vli_numBits>
 8020242:	4603      	mov	r3, r0
 8020244:	4619      	mov	r1, r3
 8020246:	4620      	mov	r0, r4
 8020248:	f7ff fe40 	bl	801fecc <smax>
 802024c:	4603      	mov	r3, r0
 802024e:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8020252:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 8020256:	3b01      	subs	r3, #1
 8020258:	b29b      	uxth	r3, r3
 802025a:	b21a      	sxth	r2, r3
 802025c:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 8020260:	4611      	mov	r1, r2
 8020262:	4618      	mov	r0, r3
 8020264:	f7fd fd0d 	bl	801dc82 <mg_uecc_vli_testBit>
 8020268:	4603      	mov	r3, r0
 802026a:	2b00      	cmp	r3, #0
 802026c:	bf14      	ite	ne
 802026e:	2301      	movne	r3, #1
 8020270:	2300      	moveq	r3, #0
 8020272:	b2db      	uxtb	r3, r3
 8020274:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 8020276:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 802027a:	3b01      	subs	r3, #1
 802027c:	b29b      	uxth	r3, r3
 802027e:	b21a      	sxth	r2, r3
 8020280:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8020284:	4611      	mov	r1, r2
 8020286:	4618      	mov	r0, r3
 8020288:	f7fd fcfb 	bl	801dc82 <mg_uecc_vli_testBit>
 802028c:	4603      	mov	r3, r0
 802028e:	2b00      	cmp	r3, #0
 8020290:	d001      	beq.n	8020296 <mg_uecc_verify+0x39e>
 8020292:	2302      	movs	r3, #2
 8020294:	e000      	b.n	8020298 <mg_uecc_verify+0x3a0>
 8020296:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 8020298:	ea43 0204 	orr.w	r2, r3, r4
  point =
 802029c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 80202a0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80202a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80202a8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 80202ac:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80202b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80202b4:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 80202b8:	4618      	mov	r0, r3
 80202ba:	f7fd fd5b 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 80202be:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80202c2:	009b      	lsls	r3, r3, #2
 80202c4:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 80202c8:	18d1      	adds	r1, r2, r3
 80202ca:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80202ce:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80202d2:	4618      	mov	r0, r3
 80202d4:	f7fd fd4e 	bl	801dd74 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 80202d8:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 80202dc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80202e0:	4611      	mov	r1, r2
 80202e2:	4618      	mov	r0, r3
 80202e4:	f7fd fc82 	bl	801dbec <mg_uecc_vli_clear>
  z[0] = 1;
 80202e8:	2301      	movs	r3, #1
 80202ea:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 80202ee:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 80202f2:	3b02      	subs	r3, #2
 80202f4:	b29b      	uxth	r3, r3
 80202f6:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 80202fa:	e087      	b.n	802040c <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 80202fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020300:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8020304:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020308:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 802030c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8020310:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020314:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8020316:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 802031a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 802031e:	4611      	mov	r1, r2
 8020320:	4618      	mov	r0, r3
 8020322:	f7fd fcae 	bl	801dc82 <mg_uecc_vli_testBit>
 8020326:	4603      	mov	r3, r0
 8020328:	2b00      	cmp	r3, #0
 802032a:	bf14      	ite	ne
 802032c:	2301      	movne	r3, #1
 802032e:	2300      	moveq	r3, #0
 8020330:	b2db      	uxtb	r3, r3
 8020332:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 8020334:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 8020338:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 802033c:	4611      	mov	r1, r2
 802033e:	4618      	mov	r0, r3
 8020340:	f7fd fc9f 	bl	801dc82 <mg_uecc_vli_testBit>
 8020344:	4603      	mov	r3, r0
 8020346:	2b00      	cmp	r3, #0
 8020348:	d001      	beq.n	802034e <mg_uecc_verify+0x456>
 802034a:	2302      	movs	r3, #2
 802034c:	e000      	b.n	8020350 <mg_uecc_verify+0x458>
 802034e:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 8020350:	4323      	orrs	r3, r4
 8020352:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 8020356:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 802035a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 802035e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8020362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020366:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 802036a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 802036e:	2b00      	cmp	r3, #0
 8020370:	d046      	beq.n	8020400 <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 8020372:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020376:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 802037a:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 802037e:	4618      	mov	r0, r3
 8020380:	f7fd fcf8 	bl	801dd74 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 8020384:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020388:	009b      	lsls	r3, r3, #2
 802038a:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 802038e:	18d1      	adds	r1, r2, r3
 8020390:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020394:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8020398:	4618      	mov	r0, r3
 802039a:	f7fd fceb 	bl	801dd74 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 802039e:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80203a2:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80203a6:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80203aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80203ae:	f7fe fd6b 	bl	801ee88 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 80203b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80203b6:	1d1c      	adds	r4, r3, #4
 80203b8:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80203bc:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80203c0:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 80203c4:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 80203c8:	9300      	str	r3, [sp, #0]
 80203ca:	4623      	mov	r3, r4
 80203cc:	f7fd ff87 	bl	801e2de <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 80203d0:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 80203d4:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80203d8:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 80203dc:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 80203e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80203e4:	9300      	str	r3, [sp, #0]
 80203e6:	4623      	mov	r3, r4
 80203e8:	f7fe fdc0 	bl	801ef6c <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 80203ec:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80203f0:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 80203f4:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 80203f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80203fc:	f7fe f8e3 	bl	801e5c6 <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 8020400:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 8020404:	3b01      	subs	r3, #1
 8020406:	b29b      	uxth	r3, r3
 8020408:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 802040c:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 8020410:	2b00      	cmp	r3, #0
 8020412:	f6bf af73 	bge.w	80202fc <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 8020416:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802041a:	1d1a      	adds	r2, r3, #4
 802041c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 8020420:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8020424:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8020428:	f7fe f931 	bl	801e68e <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 802042c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8020430:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8020434:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8020438:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802043c:	f7fe fd24 	bl	801ee88 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 8020440:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8020444:	3324      	adds	r3, #36	@ 0x24
 8020446:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 802044a:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 802044e:	4618      	mov	r0, r3
 8020450:	f7fd fcb7 	bl	801ddc2 <mg_uecc_vli_cmp_unsafe>
 8020454:	4603      	mov	r3, r0
 8020456:	2b01      	cmp	r3, #1
 8020458:	d00b      	beq.n	8020472 <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 802045a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 802045e:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8020462:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 8020466:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 802046a:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 802046e:	f7fd fdbb 	bl	801dfe8 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 8020472:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 8020476:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 802047a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 802047e:	4618      	mov	r0, r3
 8020480:	f7fd fcdb 	bl	801de3a <mg_uecc_vli_equal>
 8020484:	4603      	mov	r3, r0
}
 8020486:	4618      	mov	r0, r3
 8020488:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 802048c:	46bd      	mov	sp, r7
 802048e:	bd90      	pop	{r4, r7, pc}

08020490 <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 8020490:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8020494:	b08f      	sub	sp, #60	@ 0x3c
 8020496:	af00      	add	r7, sp, #0
 8020498:	62f8      	str	r0, [r7, #44]	@ 0x2c
 802049a:	62b9      	str	r1, [r7, #40]	@ 0x28
 802049c:	627a      	str	r2, [r7, #36]	@ 0x24
 802049e:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 80204a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80204a2:	2200      	movs	r2, #0
 80204a4:	469a      	mov	sl, r3
 80204a6:	4693      	mov	fp, r2
 80204a8:	6a3b      	ldr	r3, [r7, #32]
 80204aa:	2200      	movs	r2, #0
 80204ac:	61bb      	str	r3, [r7, #24]
 80204ae:	61fa      	str	r2, [r7, #28]
 80204b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80204b4:	4603      	mov	r3, r0
 80204b6:	fb03 f20b 	mul.w	r2, r3, fp
 80204ba:	460b      	mov	r3, r1
 80204bc:	fb0a f303 	mul.w	r3, sl, r3
 80204c0:	4413      	add	r3, r2
 80204c2:	4602      	mov	r2, r0
 80204c4:	fbaa 4502 	umull	r4, r5, sl, r2
 80204c8:	442b      	add	r3, r5
 80204ca:	461d      	mov	r5, r3
 80204cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80204ce:	2200      	movs	r2, #0
 80204d0:	613b      	str	r3, [r7, #16]
 80204d2:	617a      	str	r2, [r7, #20]
 80204d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80204d8:	460b      	mov	r3, r1
 80204da:	eb14 0803 	adds.w	r8, r4, r3
 80204de:	4613      	mov	r3, r2
 80204e0:	eb45 0903 	adc.w	r9, r5, r3
 80204e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80204e6:	681b      	ldr	r3, [r3, #0]
 80204e8:	2200      	movs	r2, #0
 80204ea:	60bb      	str	r3, [r7, #8]
 80204ec:	60fa      	str	r2, [r7, #12]
 80204ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80204f2:	460b      	mov	r3, r1
 80204f4:	eb18 0303 	adds.w	r3, r8, r3
 80204f8:	603b      	str	r3, [r7, #0]
 80204fa:	4613      	mov	r3, r2
 80204fc:	eb49 0303 	adc.w	r3, r9, r3
 8020500:	607b      	str	r3, [r7, #4]
 8020502:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020506:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 802050a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 802050e:	f04f 0200 	mov.w	r2, #0
 8020512:	f04f 0300 	mov.w	r3, #0
 8020516:	000a      	movs	r2, r1
 8020518:	2300      	movs	r3, #0
 802051a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802051c:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 802051e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8020520:	4618      	mov	r0, r3
 8020522:	373c      	adds	r7, #60	@ 0x3c
 8020524:	46bd      	mov	sp, r7
 8020526:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 802052a:	4770      	bx	lr

0802052c <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 802052c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8020530:	b08b      	sub	sp, #44	@ 0x2c
 8020532:	af00      	add	r7, sp, #0
 8020534:	61f8      	str	r0, [r7, #28]
 8020536:	61b9      	str	r1, [r7, #24]
 8020538:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 802053a:	69fb      	ldr	r3, [r7, #28]
 802053c:	681b      	ldr	r3, [r3, #0]
 802053e:	2200      	movs	r2, #0
 8020540:	60bb      	str	r3, [r7, #8]
 8020542:	60fa      	str	r2, [r7, #12]
 8020544:	69bb      	ldr	r3, [r7, #24]
 8020546:	2200      	movs	r2, #0
 8020548:	469a      	mov	sl, r3
 802054a:	4693      	mov	fp, r2
 802054c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8020550:	460b      	mov	r3, r1
 8020552:	eb13 040a 	adds.w	r4, r3, sl
 8020556:	4613      	mov	r3, r2
 8020558:	eb43 050b 	adc.w	r5, r3, fp
 802055c:	697b      	ldr	r3, [r7, #20]
 802055e:	2200      	movs	r2, #0
 8020560:	4698      	mov	r8, r3
 8020562:	4691      	mov	r9, r2
 8020564:	eb14 0308 	adds.w	r3, r4, r8
 8020568:	603b      	str	r3, [r7, #0]
 802056a:	eb45 0309 	adc.w	r3, r5, r9
 802056e:	607b      	str	r3, [r7, #4]
 8020570:	e9d7 3400 	ldrd	r3, r4, [r7]
 8020574:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 8020578:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802057c:	f04f 0200 	mov.w	r2, #0
 8020580:	f04f 0300 	mov.w	r3, #0
 8020584:	000a      	movs	r2, r1
 8020586:	2300      	movs	r3, #0
 8020588:	69fb      	ldr	r3, [r7, #28]
 802058a:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 802058c:	6a3b      	ldr	r3, [r7, #32]
}
 802058e:	4618      	mov	r0, r3
 8020590:	372c      	adds	r7, #44	@ 0x2c
 8020592:	46bd      	mov	sp, r7
 8020594:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8020598:	4770      	bx	lr

0802059a <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 802059a:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 802059e:	b085      	sub	sp, #20
 80205a0:	af00      	add	r7, sp, #0
 80205a2:	6078      	str	r0, [r7, #4]
 80205a4:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 80205a6:	6879      	ldr	r1, [r7, #4]
 80205a8:	6809      	ldr	r1, [r1, #0]
 80205aa:	2000      	movs	r0, #0
 80205ac:	460c      	mov	r4, r1
 80205ae:	4605      	mov	r5, r0
 80205b0:	6839      	ldr	r1, [r7, #0]
 80205b2:	2000      	movs	r0, #0
 80205b4:	460a      	mov	r2, r1
 80205b6:	4603      	mov	r3, r0
 80205b8:	eb14 0802 	adds.w	r8, r4, r2
 80205bc:	eb45 0903 	adc.w	r9, r5, r3
 80205c0:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 80205c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80205c8:	f04f 0200 	mov.w	r2, #0
 80205cc:	f04f 0300 	mov.w	r3, #0
 80205d0:	000a      	movs	r2, r1
 80205d2:	2300      	movs	r3, #0
 80205d4:	687b      	ldr	r3, [r7, #4]
 80205d6:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 80205d8:	68bb      	ldr	r3, [r7, #8]
}
 80205da:	4618      	mov	r0, r3
 80205dc:	3714      	adds	r7, #20
 80205de:	46bd      	mov	sp, r7
 80205e0:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80205e4:	4770      	bx	lr

080205e6 <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 80205e6:	b590      	push	{r4, r7, lr}
 80205e8:	b085      	sub	sp, #20
 80205ea:	af00      	add	r7, sp, #0
 80205ec:	6078      	str	r0, [r7, #4]
 80205ee:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	331c      	adds	r3, #28
 80205f4:	681b      	ldr	r3, [r3, #0]
 80205f6:	0fda      	lsrs	r2, r3, #31
 80205f8:	683b      	ldr	r3, [r7, #0]
 80205fa:	005b      	lsls	r3, r3, #1
 80205fc:	4313      	orrs	r3, r2
 80205fe:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	331c      	adds	r3, #28
 8020604:	681a      	ldr	r2, [r3, #0]
 8020606:	687b      	ldr	r3, [r7, #4]
 8020608:	331c      	adds	r3, #28
 802060a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 802060e:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 8020610:	683a      	ldr	r2, [r7, #0]
 8020612:	4613      	mov	r3, r2
 8020614:	00db      	lsls	r3, r3, #3
 8020616:	4413      	add	r3, r2
 8020618:	005b      	lsls	r3, r3, #1
 802061a:	4413      	add	r3, r2
 802061c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 802061e:	2300      	movs	r3, #0
 8020620:	60fb      	str	r3, [r7, #12]
 8020622:	e012      	b.n	802064a <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 8020624:	68fb      	ldr	r3, [r7, #12]
 8020626:	009b      	lsls	r3, r3, #2
 8020628:	687a      	ldr	r2, [r7, #4]
 802062a:	4413      	add	r3, r2
 802062c:	6819      	ldr	r1, [r3, #0]
 802062e:	68fb      	ldr	r3, [r7, #12]
 8020630:	009b      	lsls	r3, r3, #2
 8020632:	687a      	ldr	r2, [r7, #4]
 8020634:	18d4      	adds	r4, r2, r3
 8020636:	f107 0308 	add.w	r3, r7, #8
 802063a:	4618      	mov	r0, r3
 802063c:	f7ff ffad 	bl	802059a <adc0>
 8020640:	4603      	mov	r3, r0
 8020642:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 8020644:	68fb      	ldr	r3, [r7, #12]
 8020646:	3301      	adds	r3, #1
 8020648:	60fb      	str	r3, [r7, #12]
 802064a:	68fb      	ldr	r3, [r7, #12]
 802064c:	2b07      	cmp	r3, #7
 802064e:	d9e9      	bls.n	8020624 <propagate+0x3e>
  }
}
 8020650:	bf00      	nop
 8020652:	bf00      	nop
 8020654:	3714      	adds	r7, #20
 8020656:	46bd      	mov	sp, r7
 8020658:	bd90      	pop	{r4, r7, pc}

0802065a <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 802065a:	b590      	push	{r4, r7, lr}
 802065c:	b087      	sub	sp, #28
 802065e:	af00      	add	r7, sp, #0
 8020660:	60f8      	str	r0, [r7, #12]
 8020662:	60b9      	str	r1, [r7, #8]
 8020664:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 8020666:	2300      	movs	r3, #0
 8020668:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 802066a:	2300      	movs	r3, #0
 802066c:	617b      	str	r3, [r7, #20]
 802066e:	e018      	b.n	80206a2 <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 8020670:	697b      	ldr	r3, [r7, #20]
 8020672:	009b      	lsls	r3, r3, #2
 8020674:	68ba      	ldr	r2, [r7, #8]
 8020676:	4413      	add	r3, r2
 8020678:	6819      	ldr	r1, [r3, #0]
 802067a:	697b      	ldr	r3, [r7, #20]
 802067c:	009b      	lsls	r3, r3, #2
 802067e:	687a      	ldr	r2, [r7, #4]
 8020680:	4413      	add	r3, r2
 8020682:	6818      	ldr	r0, [r3, #0]
 8020684:	697b      	ldr	r3, [r7, #20]
 8020686:	009b      	lsls	r3, r3, #2
 8020688:	68fa      	ldr	r2, [r7, #12]
 802068a:	18d4      	adds	r4, r2, r3
 802068c:	f107 0310 	add.w	r3, r7, #16
 8020690:	4602      	mov	r2, r0
 8020692:	4618      	mov	r0, r3
 8020694:	f7ff ff4a 	bl	802052c <adc>
 8020698:	4603      	mov	r3, r0
 802069a:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 802069c:	697b      	ldr	r3, [r7, #20]
 802069e:	3301      	adds	r3, #1
 80206a0:	617b      	str	r3, [r7, #20]
 80206a2:	697b      	ldr	r3, [r7, #20]
 80206a4:	2b07      	cmp	r3, #7
 80206a6:	d9e3      	bls.n	8020670 <add+0x16>
  }
  propagate(out, carry);
 80206a8:	693b      	ldr	r3, [r7, #16]
 80206aa:	4619      	mov	r1, r3
 80206ac:	68f8      	ldr	r0, [r7, #12]
 80206ae:	f7ff ff9a 	bl	80205e6 <propagate>
}
 80206b2:	bf00      	nop
 80206b4:	371c      	adds	r7, #28
 80206b6:	46bd      	mov	sp, r7
 80206b8:	bd90      	pop	{r4, r7, pc}

080206ba <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 80206ba:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80206be:	b08a      	sub	sp, #40	@ 0x28
 80206c0:	af00      	add	r7, sp, #0
 80206c2:	6178      	str	r0, [r7, #20]
 80206c4:	6139      	str	r1, [r7, #16]
 80206c6:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 80206c8:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 80206cc:	f04f 33ff 	mov.w	r3, #4294967295
 80206d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80206d4:	2300      	movs	r3, #0
 80206d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80206d8:	e032      	b.n	8020740 <sub+0x86>
    carry = carry + a[i] - b[i];
 80206da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206dc:	009b      	lsls	r3, r3, #2
 80206de:	693a      	ldr	r2, [r7, #16]
 80206e0:	4413      	add	r3, r2
 80206e2:	681b      	ldr	r3, [r3, #0]
 80206e4:	2200      	movs	r2, #0
 80206e6:	4698      	mov	r8, r3
 80206e8:	4691      	mov	r9, r2
 80206ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80206ee:	eb18 0402 	adds.w	r4, r8, r2
 80206f2:	eb49 0503 	adc.w	r5, r9, r3
 80206f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80206f8:	009b      	lsls	r3, r3, #2
 80206fa:	68fa      	ldr	r2, [r7, #12]
 80206fc:	4413      	add	r3, r2
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	2200      	movs	r2, #0
 8020702:	469a      	mov	sl, r3
 8020704:	4693      	mov	fp, r2
 8020706:	ebb4 030a 	subs.w	r3, r4, sl
 802070a:	603b      	str	r3, [r7, #0]
 802070c:	eb65 030b 	sbc.w	r3, r5, fp
 8020710:	607b      	str	r3, [r7, #4]
 8020712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8020716:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 802071a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802071c:	009b      	lsls	r3, r3, #2
 802071e:	697a      	ldr	r2, [r7, #20]
 8020720:	4413      	add	r3, r2
 8020722:	69ba      	ldr	r2, [r7, #24]
 8020724:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 8020726:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 802072a:	f04f 0200 	mov.w	r2, #0
 802072e:	f04f 0300 	mov.w	r3, #0
 8020732:	000a      	movs	r2, r1
 8020734:	17cb      	asrs	r3, r1, #31
 8020736:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 802073a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802073c:	3301      	adds	r3, #1
 802073e:	627b      	str	r3, [r7, #36]	@ 0x24
 8020740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020742:	2b07      	cmp	r3, #7
 8020744:	d9c9      	bls.n	80206da <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 8020746:	69bb      	ldr	r3, [r7, #24]
 8020748:	3301      	adds	r3, #1
 802074a:	4619      	mov	r1, r3
 802074c:	6978      	ldr	r0, [r7, #20]
 802074e:	f7ff ff4a 	bl	80205e6 <propagate>
}
 8020752:	bf00      	nop
 8020754:	3728      	adds	r7, #40	@ 0x28
 8020756:	46bd      	mov	sp, r7
 8020758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0802075c <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 802075c:	b5b0      	push	{r4, r5, r7, lr}
 802075e:	b09a      	sub	sp, #104	@ 0x68
 8020760:	af00      	add	r7, sp, #0
 8020762:	60f8      	str	r0, [r7, #12]
 8020764:	60b9      	str	r1, [r7, #8]
 8020766:	607a      	str	r2, [r7, #4]
 8020768:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 802076a:	f107 031c 	add.w	r3, r7, #28
 802076e:	2240      	movs	r2, #64	@ 0x40
 8020770:	2100      	movs	r1, #0
 8020772:	4618      	mov	r0, r3
 8020774:	f005 f80a 	bl	802578c <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 8020778:	2300      	movs	r3, #0
 802077a:	667b      	str	r3, [r7, #100]	@ 0x64
 802077c:	e03a      	b.n	80207f4 <mul+0x98>
    limb_t mand = b[i];
 802077e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8020780:	009b      	lsls	r3, r3, #2
 8020782:	687a      	ldr	r2, [r7, #4]
 8020784:	4413      	add	r3, r2
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 802078a:	2300      	movs	r3, #0
 802078c:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 802078e:	2300      	movs	r3, #0
 8020790:	663b      	str	r3, [r7, #96]	@ 0x60
 8020792:	e020      	b.n	80207d6 <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 8020794:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020796:	009b      	lsls	r3, r3, #2
 8020798:	68ba      	ldr	r2, [r7, #8]
 802079a:	4413      	add	r3, r2
 802079c:	681b      	ldr	r3, [r3, #0]
 802079e:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 80207a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80207a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80207a4:	4413      	add	r3, r2
 80207a6:	009b      	lsls	r3, r3, #2
 80207a8:	3368      	adds	r3, #104	@ 0x68
 80207aa:	443b      	add	r3, r7
 80207ac:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 80207b0:	697d      	ldr	r5, [r7, #20]
 80207b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80207b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80207b6:	18d4      	adds	r4, r2, r3
 80207b8:	f107 0018 	add.w	r0, r7, #24
 80207bc:	462b      	mov	r3, r5
 80207be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80207c0:	f7ff fe66 	bl	8020490 <umaal>
 80207c4:	4602      	mov	r2, r0
 80207c6:	00a3      	lsls	r3, r4, #2
 80207c8:	3368      	adds	r3, #104	@ 0x68
 80207ca:	443b      	add	r3, r7
 80207cc:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 80207d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80207d2:	3301      	adds	r3, #1
 80207d4:	663b      	str	r3, [r7, #96]	@ 0x60
 80207d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80207d8:	2b07      	cmp	r3, #7
 80207da:	d9db      	bls.n	8020794 <mul+0x38>
    }
    accum[i + j] = carry2;
 80207dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80207de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80207e0:	4413      	add	r3, r2
 80207e2:	69ba      	ldr	r2, [r7, #24]
 80207e4:	009b      	lsls	r3, r3, #2
 80207e6:	3368      	adds	r3, #104	@ 0x68
 80207e8:	443b      	add	r3, r7
 80207ea:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 80207ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80207f0:	3301      	adds	r3, #1
 80207f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80207f4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80207f6:	683b      	ldr	r3, [r7, #0]
 80207f8:	429a      	cmp	r2, r3
 80207fa:	d3c0      	bcc.n	802077e <mul+0x22>
  }

  carry2 = 0;
 80207fc:	2300      	movs	r3, #0
 80207fe:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 8020800:	2300      	movs	r3, #0
 8020802:	663b      	str	r3, [r7, #96]	@ 0x60
 8020804:	e01b      	b.n	802083e <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 8020806:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020808:	009b      	lsls	r3, r3, #2
 802080a:	3368      	adds	r3, #104	@ 0x68
 802080c:	443b      	add	r3, r7
 802080e:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 8020812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020814:	3308      	adds	r3, #8
 8020816:	009b      	lsls	r3, r3, #2
 8020818:	3368      	adds	r3, #104	@ 0x68
 802081a:	443b      	add	r3, r7
 802081c:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 8020820:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020822:	009b      	lsls	r3, r3, #2
 8020824:	68fa      	ldr	r2, [r7, #12]
 8020826:	18d4      	adds	r4, r2, r3
 8020828:	f107 0018 	add.w	r0, r7, #24
 802082c:	462b      	mov	r3, r5
 802082e:	2226      	movs	r2, #38	@ 0x26
 8020830:	f7ff fe2e 	bl	8020490 <umaal>
 8020834:	4603      	mov	r3, r0
 8020836:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 8020838:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 802083a:	3301      	adds	r3, #1
 802083c:	663b      	str	r3, [r7, #96]	@ 0x60
 802083e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8020840:	2b07      	cmp	r3, #7
 8020842:	d9e0      	bls.n	8020806 <mul+0xaa>
  }
  propagate(out, carry2);
 8020844:	69bb      	ldr	r3, [r7, #24]
 8020846:	4619      	mov	r1, r3
 8020848:	68f8      	ldr	r0, [r7, #12]
 802084a:	f7ff fecc 	bl	80205e6 <propagate>
}
 802084e:	bf00      	nop
 8020850:	3768      	adds	r7, #104	@ 0x68
 8020852:	46bd      	mov	sp, r7
 8020854:	bdb0      	pop	{r4, r5, r7, pc}

08020856 <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 8020856:	b580      	push	{r7, lr}
 8020858:	b082      	sub	sp, #8
 802085a:	af00      	add	r7, sp, #0
 802085c:	6078      	str	r0, [r7, #4]
 802085e:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 8020860:	2308      	movs	r3, #8
 8020862:	683a      	ldr	r2, [r7, #0]
 8020864:	6839      	ldr	r1, [r7, #0]
 8020866:	6878      	ldr	r0, [r7, #4]
 8020868:	f7ff ff78 	bl	802075c <mul>
}
 802086c:	bf00      	nop
 802086e:	3708      	adds	r7, #8
 8020870:	46bd      	mov	sp, r7
 8020872:	bd80      	pop	{r7, pc}

08020874 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 8020874:	b580      	push	{r7, lr}
 8020876:	b082      	sub	sp, #8
 8020878:	af00      	add	r7, sp, #0
 802087a:	6078      	str	r0, [r7, #4]
 802087c:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 802087e:	2308      	movs	r3, #8
 8020880:	687a      	ldr	r2, [r7, #4]
 8020882:	6839      	ldr	r1, [r7, #0]
 8020884:	6878      	ldr	r0, [r7, #4]
 8020886:	f7ff ff69 	bl	802075c <mul>
}
 802088a:	bf00      	nop
 802088c:	3708      	adds	r7, #8
 802088e:	46bd      	mov	sp, r7
 8020890:	bd80      	pop	{r7, pc}

08020892 <sqr1>:
static void sqr1(mg_fe a) {
 8020892:	b580      	push	{r7, lr}
 8020894:	b082      	sub	sp, #8
 8020896:	af00      	add	r7, sp, #0
 8020898:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 802089a:	6879      	ldr	r1, [r7, #4]
 802089c:	6878      	ldr	r0, [r7, #4]
 802089e:	f7ff ffe9 	bl	8020874 <mul1>
}
 80208a2:	bf00      	nop
 80208a4:	3708      	adds	r7, #8
 80208a6:	46bd      	mov	sp, r7
 80208a8:	bd80      	pop	{r7, pc}

080208aa <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 80208aa:	b480      	push	{r7}
 80208ac:	b087      	sub	sp, #28
 80208ae:	af00      	add	r7, sp, #0
 80208b0:	60f8      	str	r0, [r7, #12]
 80208b2:	60b9      	str	r1, [r7, #8]
 80208b4:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 80208b6:	2300      	movs	r3, #0
 80208b8:	617b      	str	r3, [r7, #20]
 80208ba:	e028      	b.n	802090e <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 80208bc:	697b      	ldr	r3, [r7, #20]
 80208be:	009b      	lsls	r3, r3, #2
 80208c0:	68fa      	ldr	r2, [r7, #12]
 80208c2:	4413      	add	r3, r2
 80208c4:	681a      	ldr	r2, [r3, #0]
 80208c6:	697b      	ldr	r3, [r7, #20]
 80208c8:	009b      	lsls	r3, r3, #2
 80208ca:	68b9      	ldr	r1, [r7, #8]
 80208cc:	440b      	add	r3, r1
 80208ce:	681b      	ldr	r3, [r3, #0]
 80208d0:	4053      	eors	r3, r2
 80208d2:	687a      	ldr	r2, [r7, #4]
 80208d4:	4013      	ands	r3, r2
 80208d6:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 80208d8:	697b      	ldr	r3, [r7, #20]
 80208da:	009b      	lsls	r3, r3, #2
 80208dc:	68fa      	ldr	r2, [r7, #12]
 80208de:	4413      	add	r3, r2
 80208e0:	6819      	ldr	r1, [r3, #0]
 80208e2:	697b      	ldr	r3, [r7, #20]
 80208e4:	009b      	lsls	r3, r3, #2
 80208e6:	68fa      	ldr	r2, [r7, #12]
 80208e8:	4413      	add	r3, r2
 80208ea:	693a      	ldr	r2, [r7, #16]
 80208ec:	404a      	eors	r2, r1
 80208ee:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 80208f0:	697b      	ldr	r3, [r7, #20]
 80208f2:	009b      	lsls	r3, r3, #2
 80208f4:	68ba      	ldr	r2, [r7, #8]
 80208f6:	4413      	add	r3, r2
 80208f8:	6819      	ldr	r1, [r3, #0]
 80208fa:	697b      	ldr	r3, [r7, #20]
 80208fc:	009b      	lsls	r3, r3, #2
 80208fe:	68ba      	ldr	r2, [r7, #8]
 8020900:	4413      	add	r3, r2
 8020902:	693a      	ldr	r2, [r7, #16]
 8020904:	404a      	eors	r2, r1
 8020906:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 8020908:	697b      	ldr	r3, [r7, #20]
 802090a:	3301      	adds	r3, #1
 802090c:	617b      	str	r3, [r7, #20]
 802090e:	697b      	ldr	r3, [r7, #20]
 8020910:	2b0f      	cmp	r3, #15
 8020912:	d9d3      	bls.n	80208bc <condswap+0x12>
  }
}
 8020914:	bf00      	nop
 8020916:	bf00      	nop
 8020918:	371c      	adds	r7, #28
 802091a:	46bd      	mov	sp, r7
 802091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020920:	4770      	bx	lr

08020922 <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 8020922:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020926:	b08b      	sub	sp, #44	@ 0x2c
 8020928:	af00      	add	r7, sp, #0
 802092a:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 802092c:	2313      	movs	r3, #19
 802092e:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 8020930:	2300      	movs	r3, #0
 8020932:	627b      	str	r3, [r7, #36]	@ 0x24
 8020934:	e012      	b.n	802095c <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 8020936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020938:	009b      	lsls	r3, r3, #2
 802093a:	68fa      	ldr	r2, [r7, #12]
 802093c:	4413      	add	r3, r2
 802093e:	6819      	ldr	r1, [r3, #0]
 8020940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020942:	009b      	lsls	r3, r3, #2
 8020944:	68fa      	ldr	r2, [r7, #12]
 8020946:	18d6      	adds	r6, r2, r3
 8020948:	f107 0314 	add.w	r3, r7, #20
 802094c:	4618      	mov	r0, r3
 802094e:	f7ff fe24 	bl	802059a <adc0>
 8020952:	4603      	mov	r3, r0
 8020954:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 8020956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020958:	3301      	adds	r3, #1
 802095a:	627b      	str	r3, [r7, #36]	@ 0x24
 802095c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802095e:	2b07      	cmp	r3, #7
 8020960:	d9e9      	bls.n	8020936 <canon+0x14>
  }
  propagate(x, carry0);
 8020962:	697b      	ldr	r3, [r7, #20]
 8020964:	4619      	mov	r1, r3
 8020966:	68f8      	ldr	r0, [r7, #12]
 8020968:	f7ff fe3d 	bl	80205e6 <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 802096c:	f06f 0212 	mvn.w	r2, #18
 8020970:	f04f 33ff 	mov.w	r3, #4294967295
 8020974:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 8020978:	2300      	movs	r3, #0
 802097a:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 802097c:	2300      	movs	r3, #0
 802097e:	627b      	str	r3, [r7, #36]	@ 0x24
 8020980:	e02a      	b.n	80209d8 <canon+0xb6>
    carry += x[i];
 8020982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020984:	009b      	lsls	r3, r3, #2
 8020986:	68fa      	ldr	r2, [r7, #12]
 8020988:	4413      	add	r3, r2
 802098a:	681b      	ldr	r3, [r3, #0]
 802098c:	2200      	movs	r2, #0
 802098e:	4698      	mov	r8, r3
 8020990:	4691      	mov	r9, r2
 8020992:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8020996:	eb12 0108 	adds.w	r1, r2, r8
 802099a:	6039      	str	r1, [r7, #0]
 802099c:	eb43 0309 	adc.w	r3, r3, r9
 80209a0:	607b      	str	r3, [r7, #4]
 80209a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80209a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 80209aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209ac:	009b      	lsls	r3, r3, #2
 80209ae:	68fa      	ldr	r2, [r7, #12]
 80209b0:	4413      	add	r3, r2
 80209b2:	69ba      	ldr	r2, [r7, #24]
 80209b4:	601a      	str	r2, [r3, #0]
 80209b6:	681b      	ldr	r3, [r3, #0]
 80209b8:	6a3a      	ldr	r2, [r7, #32]
 80209ba:	4313      	orrs	r3, r2
 80209bc:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 80209be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80209c2:	f04f 0200 	mov.w	r2, #0
 80209c6:	f04f 0300 	mov.w	r3, #0
 80209ca:	000a      	movs	r2, r1
 80209cc:	17cb      	asrs	r3, r1, #31
 80209ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 80209d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209d4:	3301      	adds	r3, #1
 80209d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80209d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209da:	2b07      	cmp	r3, #7
 80209dc:	d9d1      	bls.n	8020982 <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 80209de:	6a3b      	ldr	r3, [r7, #32]
 80209e0:	2200      	movs	r2, #0
 80209e2:	461c      	mov	r4, r3
 80209e4:	4615      	mov	r5, r2
 80209e6:	f114 3aff 	adds.w	sl, r4, #4294967295
 80209ea:	f145 3bff 	adc.w	fp, r5, #4294967295
 80209ee:	f04f 0200 	mov.w	r2, #0
 80209f2:	f04f 0300 	mov.w	r3, #0
 80209f6:	465a      	mov	r2, fp
 80209f8:	2300      	movs	r3, #0
 80209fa:	4613      	mov	r3, r2
}
 80209fc:	4618      	mov	r0, r3
 80209fe:	372c      	adds	r7, #44	@ 0x2c
 8020a00:	46bd      	mov	sp, r7
 8020a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020a08 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 8020a08:	b580      	push	{r7, lr}
 8020a0a:	b088      	sub	sp, #32
 8020a0c:	af00      	add	r7, sp, #0
 8020a0e:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8020a10:	687b      	ldr	r3, [r7, #4]
 8020a12:	61fb      	str	r3, [r7, #28]
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	3320      	adds	r3, #32
 8020a18:	61bb      	str	r3, [r7, #24]
 8020a1a:	687b      	ldr	r3, [r7, #4]
 8020a1c:	3340      	adds	r3, #64	@ 0x40
 8020a1e:	617b      	str	r3, [r7, #20]
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	3360      	adds	r3, #96	@ 0x60
 8020a24:	613b      	str	r3, [r7, #16]
 8020a26:	687b      	ldr	r3, [r7, #4]
 8020a28:	3380      	adds	r3, #128	@ 0x80
 8020a2a:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 8020a2c:	69ba      	ldr	r2, [r7, #24]
 8020a2e:	69f9      	ldr	r1, [r7, #28]
 8020a30:	68f8      	ldr	r0, [r7, #12]
 8020a32:	f7ff fe12 	bl	802065a <add>
  sub(z2, x2, z2);                                 // z2 = B
 8020a36:	69ba      	ldr	r2, [r7, #24]
 8020a38:	69f9      	ldr	r1, [r7, #28]
 8020a3a:	69b8      	ldr	r0, [r7, #24]
 8020a3c:	f7ff fe3d 	bl	80206ba <sub>
  add(x2, x3, z3);                                 // x2 = C
 8020a40:	693a      	ldr	r2, [r7, #16]
 8020a42:	6979      	ldr	r1, [r7, #20]
 8020a44:	69f8      	ldr	r0, [r7, #28]
 8020a46:	f7ff fe08 	bl	802065a <add>
  sub(z3, x3, z3);                                 // z3 = D
 8020a4a:	693a      	ldr	r2, [r7, #16]
 8020a4c:	6979      	ldr	r1, [r7, #20]
 8020a4e:	6938      	ldr	r0, [r7, #16]
 8020a50:	f7ff fe33 	bl	80206ba <sub>
  mul1(z3, t1);                                    // z3 = DA
 8020a54:	68f9      	ldr	r1, [r7, #12]
 8020a56:	6938      	ldr	r0, [r7, #16]
 8020a58:	f7ff ff0c 	bl	8020874 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 8020a5c:	69b9      	ldr	r1, [r7, #24]
 8020a5e:	69f8      	ldr	r0, [r7, #28]
 8020a60:	f7ff ff08 	bl	8020874 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 8020a64:	69fa      	ldr	r2, [r7, #28]
 8020a66:	6939      	ldr	r1, [r7, #16]
 8020a68:	6978      	ldr	r0, [r7, #20]
 8020a6a:	f7ff fdf6 	bl	802065a <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 8020a6e:	69fa      	ldr	r2, [r7, #28]
 8020a70:	6939      	ldr	r1, [r7, #16]
 8020a72:	6938      	ldr	r0, [r7, #16]
 8020a74:	f7ff fe21 	bl	80206ba <sub>
  sqr1(t1);                                        // t1 = AA
 8020a78:	68f8      	ldr	r0, [r7, #12]
 8020a7a:	f7ff ff0a 	bl	8020892 <sqr1>
  sqr1(z2);                                        // z2 = BB
 8020a7e:	69b8      	ldr	r0, [r7, #24]
 8020a80:	f7ff ff07 	bl	8020892 <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 8020a84:	69ba      	ldr	r2, [r7, #24]
 8020a86:	68f9      	ldr	r1, [r7, #12]
 8020a88:	69f8      	ldr	r0, [r7, #28]
 8020a8a:	f7ff fe16 	bl	80206ba <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 8020a8e:	2301      	movs	r3, #1
 8020a90:	4a06      	ldr	r2, [pc, #24]	@ (8020aac <ladder_part1+0xa4>)
 8020a92:	69f9      	ldr	r1, [r7, #28]
 8020a94:	69b8      	ldr	r0, [r7, #24]
 8020a96:	f7ff fe61 	bl	802075c <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 8020a9a:	68fa      	ldr	r2, [r7, #12]
 8020a9c:	69b9      	ldr	r1, [r7, #24]
 8020a9e:	69b8      	ldr	r0, [r7, #24]
 8020aa0:	f7ff fddb 	bl	802065a <add>
}
 8020aa4:	bf00      	nop
 8020aa6:	3720      	adds	r7, #32
 8020aa8:	46bd      	mov	sp, r7
 8020aaa:	bd80      	pop	{r7, pc}
 8020aac:	0802a04c 	.word	0x0802a04c

08020ab0 <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 8020ab0:	b580      	push	{r7, lr}
 8020ab2:	b088      	sub	sp, #32
 8020ab4:	af00      	add	r7, sp, #0
 8020ab6:	6078      	str	r0, [r7, #4]
 8020ab8:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 8020aba:	687b      	ldr	r3, [r7, #4]
 8020abc:	61fb      	str	r3, [r7, #28]
 8020abe:	687b      	ldr	r3, [r7, #4]
 8020ac0:	3320      	adds	r3, #32
 8020ac2:	61bb      	str	r3, [r7, #24]
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	3340      	adds	r3, #64	@ 0x40
 8020ac8:	617b      	str	r3, [r7, #20]
 8020aca:	687b      	ldr	r3, [r7, #4]
 8020acc:	3360      	adds	r3, #96	@ 0x60
 8020ace:	613b      	str	r3, [r7, #16]
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	3380      	adds	r3, #128	@ 0x80
 8020ad4:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 8020ad6:	6938      	ldr	r0, [r7, #16]
 8020ad8:	f7ff fedb 	bl	8020892 <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 8020adc:	6839      	ldr	r1, [r7, #0]
 8020ade:	6938      	ldr	r0, [r7, #16]
 8020ae0:	f7ff fec8 	bl	8020874 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 8020ae4:	6978      	ldr	r0, [r7, #20]
 8020ae6:	f7ff fed4 	bl	8020892 <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 8020aea:	69f9      	ldr	r1, [r7, #28]
 8020aec:	69b8      	ldr	r0, [r7, #24]
 8020aee:	f7ff fec1 	bl	8020874 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 8020af2:	69fa      	ldr	r2, [r7, #28]
 8020af4:	68f9      	ldr	r1, [r7, #12]
 8020af6:	69f8      	ldr	r0, [r7, #28]
 8020af8:	f7ff fddf 	bl	80206ba <sub>
  mul1(x2, t1);     // x2 = AA*BB
 8020afc:	68f9      	ldr	r1, [r7, #12]
 8020afe:	69f8      	ldr	r0, [r7, #28]
 8020b00:	f7ff feb8 	bl	8020874 <mul1>
}
 8020b04:	bf00      	nop
 8020b06:	3720      	adds	r7, #32
 8020b08:	46bd      	mov	sp, r7
 8020b0a:	bd80      	pop	{r7, pc}

08020b0c <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 8020b0c:	b580      	push	{r7, lr}
 8020b0e:	b094      	sub	sp, #80	@ 0x50
 8020b10:	af00      	add	r7, sp, #0
 8020b12:	60f8      	str	r0, [r7, #12]
 8020b14:	60b9      	str	r1, [r7, #8]
 8020b16:	607a      	str	r2, [r7, #4]
 8020b18:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 8020b1a:	2300      	movs	r3, #0
 8020b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 8020b1e:	68fb      	ldr	r3, [r7, #12]
 8020b20:	643b      	str	r3, [r7, #64]	@ 0x40
 8020b22:	68fb      	ldr	r3, [r7, #12]
 8020b24:	3340      	adds	r3, #64	@ 0x40
 8020b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8020b28:	68fb      	ldr	r3, [r7, #12]
 8020b2a:	3360      	adds	r3, #96	@ 0x60
 8020b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 8020b2e:	2280      	movs	r2, #128	@ 0x80
 8020b30:	2100      	movs	r1, #0
 8020b32:	68f8      	ldr	r0, [r7, #12]
 8020b34:	f004 fe2a 	bl	802578c <memset>
  x2[0] = z3[0] = 1;
 8020b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020b3a:	2201      	movs	r2, #1
 8020b3c:	601a      	str	r2, [r3, #0]
 8020b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020b40:	681a      	ldr	r2, [r3, #0]
 8020b42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020b44:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8020b46:	2300      	movs	r3, #0
 8020b48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020b4a:	e031      	b.n	8020bb0 <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 8020b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b4e:	009b      	lsls	r3, r3, #2
 8020b50:	3303      	adds	r3, #3
 8020b52:	687a      	ldr	r2, [r7, #4]
 8020b54:	4413      	add	r3, r2
 8020b56:	781b      	ldrb	r3, [r3, #0]
 8020b58:	061a      	lsls	r2, r3, #24
 8020b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b5c:	009b      	lsls	r3, r3, #2
 8020b5e:	3302      	adds	r3, #2
 8020b60:	6879      	ldr	r1, [r7, #4]
 8020b62:	440b      	add	r3, r1
 8020b64:	781b      	ldrb	r3, [r3, #0]
 8020b66:	041b      	lsls	r3, r3, #16
 8020b68:	431a      	orrs	r2, r3
 8020b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b6c:	009b      	lsls	r3, r3, #2
 8020b6e:	3301      	adds	r3, #1
 8020b70:	6879      	ldr	r1, [r7, #4]
 8020b72:	440b      	add	r3, r1
 8020b74:	781b      	ldrb	r3, [r3, #0]
 8020b76:	021b      	lsls	r3, r3, #8
 8020b78:	4313      	orrs	r3, r2
 8020b7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8020b7c:	0092      	lsls	r2, r2, #2
 8020b7e:	4611      	mov	r1, r2
 8020b80:	687a      	ldr	r2, [r7, #4]
 8020b82:	440a      	add	r2, r1
 8020b84:	7812      	ldrb	r2, [r2, #0]
 8020b86:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 8020b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b8a:	009b      	lsls	r3, r3, #2
 8020b8c:	3350      	adds	r3, #80	@ 0x50
 8020b8e:	443b      	add	r3, r7
 8020b90:	f843 2c3c 	str.w	r2, [r3, #-60]
 8020b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b96:	009b      	lsls	r3, r3, #2
 8020b98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8020b9a:	441a      	add	r2, r3
 8020b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020b9e:	009b      	lsls	r3, r3, #2
 8020ba0:	3350      	adds	r3, #80	@ 0x50
 8020ba2:	443b      	add	r3, r7
 8020ba4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8020ba8:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 8020baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020bac:	3301      	adds	r3, #1
 8020bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020bb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020bb2:	2b07      	cmp	r3, #7
 8020bb4:	ddca      	ble.n	8020b4c <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 8020bb6:	23ff      	movs	r3, #255	@ 0xff
 8020bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020bba:	e049      	b.n	8020c50 <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 8020bbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020bbe:	2b00      	cmp	r3, #0
 8020bc0:	da00      	bge.n	8020bc4 <x25519_core+0xb8>
 8020bc2:	3307      	adds	r3, #7
 8020bc4:	10db      	asrs	r3, r3, #3
 8020bc6:	461a      	mov	r2, r3
 8020bc8:	68bb      	ldr	r3, [r7, #8]
 8020bca:	4413      	add	r3, r2
 8020bcc:	781b      	ldrb	r3, [r3, #0]
 8020bce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 8020bd2:	683b      	ldr	r3, [r7, #0]
 8020bd4:	2b00      	cmp	r3, #0
 8020bd6:	d01a      	beq.n	8020c0e <x25519_core+0x102>
      if (i / 8 == 0) {
 8020bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020bda:	3307      	adds	r3, #7
 8020bdc:	2b0e      	cmp	r3, #14
 8020bde:	d806      	bhi.n	8020bee <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 8020be0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8020be4:	f023 0307 	bic.w	r3, r3, #7
 8020be8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8020bec:	e00f      	b.n	8020c0e <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 8020bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020bf0:	3bf8      	subs	r3, #248	@ 0xf8
 8020bf2:	2b07      	cmp	r3, #7
 8020bf4:	d80b      	bhi.n	8020c0e <x25519_core+0x102>
        bytei &= 0x7F;
 8020bf6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8020bfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8020bfe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 8020c02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8020c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020c0a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 8020c0e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8020c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020c14:	f003 0307 	and.w	r3, r3, #7
 8020c18:	fa42 f303 	asr.w	r3, r2, r3
 8020c1c:	f003 0301 	and.w	r3, r3, #1
 8020c20:	425b      	negs	r3, r3
 8020c22:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 8020c24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020c28:	4053      	eors	r3, r2
 8020c2a:	461a      	mov	r2, r3
 8020c2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020c2e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8020c30:	f7ff fe3b 	bl	80208aa <condswap>
    swap = doswap;
 8020c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020c36:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 8020c38:	68f8      	ldr	r0, [r7, #12]
 8020c3a:	f7ff fee5 	bl	8020a08 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 8020c3e:	f107 0314 	add.w	r3, r7, #20
 8020c42:	4619      	mov	r1, r3
 8020c44:	68f8      	ldr	r0, [r7, #12]
 8020c46:	f7ff ff33 	bl	8020ab0 <ladder_part2>
  for (i = 255; i >= 0; i--) {
 8020c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020c4c:	3b01      	subs	r3, #1
 8020c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020c50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020c52:	2b00      	cmp	r3, #0
 8020c54:	dab2      	bge.n	8020bbc <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 8020c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020c58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020c5a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8020c5c:	f7ff fe25 	bl	80208aa <condswap>
}
 8020c60:	bf00      	nop
 8020c62:	3750      	adds	r7, #80	@ 0x50
 8020c64:	46bd      	mov	sp, r7
 8020c66:	bd80      	pop	{r7, pc}

08020c68 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 8020c68:	b580      	push	{r7, lr}
 8020c6a:	b0be      	sub	sp, #248	@ 0xf8
 8020c6c:	af00      	add	r7, sp, #0
 8020c6e:	60f8      	str	r0, [r7, #12]
 8020c70:	60b9      	str	r1, [r7, #8]
 8020c72:	607a      	str	r2, [r7, #4]
 8020c74:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 8020c76:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8020c7a:	683b      	ldr	r3, [r7, #0]
 8020c7c:	687a      	ldr	r2, [r7, #4]
 8020c7e:	68b9      	ldr	r1, [r7, #8]
 8020c80:	f7ff ff44 	bl	8020b0c <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 8020c84:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8020c88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 8020c8c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8020c90:	3320      	adds	r3, #32
 8020c92:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 8020c96:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8020c9a:	3360      	adds	r3, #96	@ 0x60
 8020c9c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 8020ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8020ca4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 8020ca8:	2300      	movs	r3, #0
 8020caa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8020cae:	e043      	b.n	8020d38 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 8020cb0:	4952      	ldr	r1, [pc, #328]	@ (8020dfc <mg_tls_x25519+0x194>)
 8020cb2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8020cb6:	4613      	mov	r3, r2
 8020cb8:	005b      	lsls	r3, r3, #1
 8020cba:	4413      	add	r3, r2
 8020cbc:	440b      	add	r3, r1
 8020cbe:	781b      	ldrb	r3, [r3, #0]
 8020cc0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8020cc4:	015b      	lsls	r3, r3, #5
 8020cc6:	4413      	add	r3, r2
 8020cc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 8020ccc:	494b      	ldr	r1, [pc, #300]	@ (8020dfc <mg_tls_x25519+0x194>)
 8020cce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8020cd2:	4613      	mov	r3, r2
 8020cd4:	005b      	lsls	r3, r3, #1
 8020cd6:	4413      	add	r3, r2
 8020cd8:	440b      	add	r3, r1
 8020cda:	3302      	adds	r3, #2
 8020cdc:	781b      	ldrb	r3, [r3, #0]
 8020cde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8020ce2:	e00e      	b.n	8020d02 <mg_tls_x25519+0x9a>
      sqr(a, prev);
 8020ce4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8020ce8:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8020cec:	f7ff fdb3 	bl	8020856 <sqr>
      prev = a;
 8020cf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8020cf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 8020cf8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8020cfc:	3b01      	subs	r3, #1
 8020cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8020d02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	dcec      	bgt.n	8020ce4 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 8020d0a:	493c      	ldr	r1, [pc, #240]	@ (8020dfc <mg_tls_x25519+0x194>)
 8020d0c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8020d10:	4613      	mov	r3, r2
 8020d12:	005b      	lsls	r3, r3, #1
 8020d14:	4413      	add	r3, r2
 8020d16:	440b      	add	r3, r1
 8020d18:	3301      	adds	r3, #1
 8020d1a:	781b      	ldrb	r3, [r3, #0]
 8020d1c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8020d20:	015b      	lsls	r3, r3, #5
 8020d22:	4413      	add	r3, r2
 8020d24:	4619      	mov	r1, r3
 8020d26:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 8020d2a:	f7ff fda3 	bl	8020874 <mul1>
  for (i = 0; i < 13; i++) {
 8020d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020d32:	3301      	adds	r3, #1
 8020d34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8020d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020d3c:	2b0c      	cmp	r3, #12
 8020d3e:	ddb7      	ble.n	8020cb0 <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 8020d40:	f107 0014 	add.w	r0, r7, #20
 8020d44:	2308      	movs	r3, #8
 8020d46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8020d4a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8020d4e:	f7ff fd05 	bl	802075c <mul>
  ret = (int) canon(out_limbs);
 8020d52:	f107 0314 	add.w	r3, r7, #20
 8020d56:	4618      	mov	r0, r3
 8020d58:	f7ff fde3 	bl	8020922 <canon>
 8020d5c:	4603      	mov	r3, r0
 8020d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 8020d62:	683b      	ldr	r3, [r7, #0]
 8020d64:	2b00      	cmp	r3, #0
 8020d66:	d102      	bne.n	8020d6e <mg_tls_x25519+0x106>
 8020d68:	2300      	movs	r3, #0
 8020d6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 8020d6e:	2300      	movs	r3, #0
 8020d70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8020d74:	e038      	b.n	8020de8 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 8020d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020d7a:	009b      	lsls	r3, r3, #2
 8020d7c:	33f8      	adds	r3, #248	@ 0xf8
 8020d7e:	443b      	add	r3, r7
 8020d80:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 8020d84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 8020d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020d8c:	009b      	lsls	r3, r3, #2
 8020d8e:	461a      	mov	r2, r3
 8020d90:	68fb      	ldr	r3, [r7, #12]
 8020d92:	4413      	add	r3, r2
 8020d94:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8020d98:	b2d2      	uxtb	r2, r2
 8020d9a:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 8020d9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020da0:	0a19      	lsrs	r1, r3, #8
 8020da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020da6:	009b      	lsls	r3, r3, #2
 8020da8:	3301      	adds	r3, #1
 8020daa:	68fa      	ldr	r2, [r7, #12]
 8020dac:	4413      	add	r3, r2
 8020dae:	b2ca      	uxtb	r2, r1
 8020db0:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 8020db2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020db6:	0c19      	lsrs	r1, r3, #16
 8020db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020dbc:	009b      	lsls	r3, r3, #2
 8020dbe:	3302      	adds	r3, #2
 8020dc0:	68fa      	ldr	r2, [r7, #12]
 8020dc2:	4413      	add	r3, r2
 8020dc4:	b2ca      	uxtb	r2, r1
 8020dc6:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 8020dc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8020dcc:	0e19      	lsrs	r1, r3, #24
 8020dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020dd2:	009b      	lsls	r3, r3, #2
 8020dd4:	3303      	adds	r3, #3
 8020dd6:	68fa      	ldr	r2, [r7, #12]
 8020dd8:	4413      	add	r3, r2
 8020dda:	b2ca      	uxtb	r2, r1
 8020ddc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 8020dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020de2:	3301      	adds	r3, #1
 8020de4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8020de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8020dec:	2b07      	cmp	r3, #7
 8020dee:	ddc2      	ble.n	8020d76 <mg_tls_x25519+0x10e>
  }
  return ret;
 8020df0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 8020df4:	4618      	mov	r0, r3
 8020df6:	37f8      	adds	r7, #248	@ 0xf8
 8020df8:	46bd      	mov	sp, r7
 8020dfa:	bd80      	pop	{r7, pc}
 8020dfc:	0802a3c0 	.word	0x0802a3c0

08020e00 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 8020e00:	b580      	push	{r7, lr}
 8020e02:	b082      	sub	sp, #8
 8020e04:	af00      	add	r7, sp, #0
 8020e06:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8020e08:	2204      	movs	r2, #4
 8020e0a:	491b      	ldr	r1, [pc, #108]	@ (8020e78 <mg_url_is_ssl+0x78>)
 8020e0c:	6878      	ldr	r0, [r7, #4]
 8020e0e:	f004 fcd2 	bl	80257b6 <strncmp>
 8020e12:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8020e14:	2b00      	cmp	r3, #0
 8020e16:	d027      	beq.n	8020e68 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8020e18:	2206      	movs	r2, #6
 8020e1a:	4918      	ldr	r1, [pc, #96]	@ (8020e7c <mg_url_is_ssl+0x7c>)
 8020e1c:	6878      	ldr	r0, [r7, #4]
 8020e1e:	f004 fcca 	bl	80257b6 <strncmp>
 8020e22:	4603      	mov	r3, r0
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	d01f      	beq.n	8020e68 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8020e28:	2206      	movs	r2, #6
 8020e2a:	4915      	ldr	r1, [pc, #84]	@ (8020e80 <mg_url_is_ssl+0x80>)
 8020e2c:	6878      	ldr	r0, [r7, #4]
 8020e2e:	f004 fcc2 	bl	80257b6 <strncmp>
 8020e32:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 8020e34:	2b00      	cmp	r3, #0
 8020e36:	d017      	beq.n	8020e68 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8020e38:	2204      	movs	r2, #4
 8020e3a:	4912      	ldr	r1, [pc, #72]	@ (8020e84 <mg_url_is_ssl+0x84>)
 8020e3c:	6878      	ldr	r0, [r7, #4]
 8020e3e:	f004 fcba 	bl	80257b6 <strncmp>
 8020e42:	4603      	mov	r3, r0
 8020e44:	2b00      	cmp	r3, #0
 8020e46:	d00f      	beq.n	8020e68 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8020e48:	2204      	movs	r2, #4
 8020e4a:	490f      	ldr	r1, [pc, #60]	@ (8020e88 <mg_url_is_ssl+0x88>)
 8020e4c:	6878      	ldr	r0, [r7, #4]
 8020e4e:	f004 fcb2 	bl	80257b6 <strncmp>
 8020e52:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 8020e54:	2b00      	cmp	r3, #0
 8020e56:	d007      	beq.n	8020e68 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 8020e58:	2205      	movs	r2, #5
 8020e5a:	490c      	ldr	r1, [pc, #48]	@ (8020e8c <mg_url_is_ssl+0x8c>)
 8020e5c:	6878      	ldr	r0, [r7, #4]
 8020e5e:	f004 fcaa 	bl	80257b6 <strncmp>
 8020e62:	4603      	mov	r3, r0
 8020e64:	2b00      	cmp	r3, #0
 8020e66:	d101      	bne.n	8020e6c <mg_url_is_ssl+0x6c>
 8020e68:	2301      	movs	r3, #1
 8020e6a:	e000      	b.n	8020e6e <mg_url_is_ssl+0x6e>
 8020e6c:	2300      	movs	r3, #0
}
 8020e6e:	4618      	mov	r0, r3
 8020e70:	3708      	adds	r7, #8
 8020e72:	46bd      	mov	sp, r7
 8020e74:	bd80      	pop	{r7, pc}
 8020e76:	bf00      	nop
 8020e78:	08028c2c 	.word	0x08028c2c
 8020e7c:	08028c34 	.word	0x08028c34
 8020e80:	08028c3c 	.word	0x08028c3c
 8020e84:	08028c44 	.word	0x08028c44
 8020e88:	08028c4c 	.word	0x08028c4c
 8020e8c:	08028c54 	.word	0x08028c54

08020e90 <urlparse>:

static struct url urlparse(const char *url) {
 8020e90:	b5b0      	push	{r4, r5, r7, lr}
 8020e92:	b08a      	sub	sp, #40	@ 0x28
 8020e94:	af00      	add	r7, sp, #0
 8020e96:	6078      	str	r0, [r7, #4]
 8020e98:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 8020e9a:	f107 0308 	add.w	r3, r7, #8
 8020e9e:	221c      	movs	r2, #28
 8020ea0:	2100      	movs	r1, #0
 8020ea2:	4618      	mov	r0, r3
 8020ea4:	f004 fc72 	bl	802578c <memset>
  for (i = 0; url[i] != '\0'; i++) {
 8020ea8:	2300      	movs	r3, #0
 8020eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8020eac:	e05b      	b.n	8020f66 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 8020eae:	683a      	ldr	r2, [r7, #0]
 8020eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020eb2:	4413      	add	r3, r2
 8020eb4:	781b      	ldrb	r3, [r3, #0]
 8020eb6:	2b2f      	cmp	r3, #47	@ 0x2f
 8020eb8:	d112      	bne.n	8020ee0 <urlparse+0x50>
 8020eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ebc:	2b00      	cmp	r3, #0
 8020ebe:	d00f      	beq.n	8020ee0 <urlparse+0x50>
 8020ec0:	697b      	ldr	r3, [r7, #20]
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d10c      	bne.n	8020ee0 <urlparse+0x50>
 8020ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ec8:	3b01      	subs	r3, #1
 8020eca:	683a      	ldr	r2, [r7, #0]
 8020ecc:	4413      	add	r3, r2
 8020ece:	781b      	ldrb	r3, [r3, #0]
 8020ed0:	2b2f      	cmp	r3, #47	@ 0x2f
 8020ed2:	d105      	bne.n	8020ee0 <urlparse+0x50>
      u.host = i + 1;
 8020ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ed6:	3301      	adds	r3, #1
 8020ed8:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8020eda:	2300      	movs	r3, #0
 8020edc:	61bb      	str	r3, [r7, #24]
 8020ede:	e03f      	b.n	8020f60 <urlparse+0xd0>
    } else if (url[i] == ']') {
 8020ee0:	683a      	ldr	r2, [r7, #0]
 8020ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ee4:	4413      	add	r3, r2
 8020ee6:	781b      	ldrb	r3, [r3, #0]
 8020ee8:	2b5d      	cmp	r3, #93	@ 0x5d
 8020eea:	d102      	bne.n	8020ef2 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 8020eec:	2300      	movs	r3, #0
 8020eee:	61bb      	str	r3, [r7, #24]
 8020ef0:	e036      	b.n	8020f60 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 8020ef2:	683a      	ldr	r2, [r7, #0]
 8020ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ef6:	4413      	add	r3, r2
 8020ef8:	781b      	ldrb	r3, [r3, #0]
 8020efa:	2b3a      	cmp	r3, #58	@ 0x3a
 8020efc:	d109      	bne.n	8020f12 <urlparse+0x82>
 8020efe:	69bb      	ldr	r3, [r7, #24]
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	d106      	bne.n	8020f12 <urlparse+0x82>
 8020f04:	69fb      	ldr	r3, [r7, #28]
 8020f06:	2b00      	cmp	r3, #0
 8020f08:	d103      	bne.n	8020f12 <urlparse+0x82>
      u.port = i + 1;
 8020f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f0c:	3301      	adds	r3, #1
 8020f0e:	61bb      	str	r3, [r7, #24]
 8020f10:	e026      	b.n	8020f60 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 8020f12:	683a      	ldr	r2, [r7, #0]
 8020f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f16:	4413      	add	r3, r2
 8020f18:	781b      	ldrb	r3, [r3, #0]
 8020f1a:	2b40      	cmp	r3, #64	@ 0x40
 8020f1c:	d112      	bne.n	8020f44 <urlparse+0xb4>
 8020f1e:	68fb      	ldr	r3, [r7, #12]
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d10f      	bne.n	8020f44 <urlparse+0xb4>
 8020f24:	693b      	ldr	r3, [r7, #16]
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	d10c      	bne.n	8020f44 <urlparse+0xb4>
 8020f2a:	69fb      	ldr	r3, [r7, #28]
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	d109      	bne.n	8020f44 <urlparse+0xb4>
      u.user = u.host;
 8020f30:	697b      	ldr	r3, [r7, #20]
 8020f32:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 8020f34:	69bb      	ldr	r3, [r7, #24]
 8020f36:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 8020f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f3a:	3301      	adds	r3, #1
 8020f3c:	617b      	str	r3, [r7, #20]
      u.port = 0;
 8020f3e:	2300      	movs	r3, #0
 8020f40:	61bb      	str	r3, [r7, #24]
 8020f42:	e00d      	b.n	8020f60 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 8020f44:	683a      	ldr	r2, [r7, #0]
 8020f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f48:	4413      	add	r3, r2
 8020f4a:	781b      	ldrb	r3, [r3, #0]
 8020f4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8020f4e:	d107      	bne.n	8020f60 <urlparse+0xd0>
 8020f50:	697b      	ldr	r3, [r7, #20]
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	d004      	beq.n	8020f60 <urlparse+0xd0>
 8020f56:	69fb      	ldr	r3, [r7, #28]
 8020f58:	2b00      	cmp	r3, #0
 8020f5a:	d101      	bne.n	8020f60 <urlparse+0xd0>
      u.uri = i;
 8020f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f5e:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 8020f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f62:	3301      	adds	r3, #1
 8020f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8020f66:	683a      	ldr	r2, [r7, #0]
 8020f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f6a:	4413      	add	r3, r2
 8020f6c:	781b      	ldrb	r3, [r3, #0]
 8020f6e:	2b00      	cmp	r3, #0
 8020f70:	d19d      	bne.n	8020eae <urlparse+0x1e>
    }
  }
  u.end = i;
 8020f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020f74:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 8020f76:	687b      	ldr	r3, [r7, #4]
 8020f78:	461d      	mov	r5, r3
 8020f7a:	f107 0408 	add.w	r4, r7, #8
 8020f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8020f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8020f82:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8020f86:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8020f8a:	6878      	ldr	r0, [r7, #4]
 8020f8c:	3728      	adds	r7, #40	@ 0x28
 8020f8e:	46bd      	mov	sp, r7
 8020f90:	bdb0      	pop	{r4, r5, r7, pc}

08020f92 <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 8020f92:	b580      	push	{r7, lr}
 8020f94:	b08c      	sub	sp, #48	@ 0x30
 8020f96:	af00      	add	r7, sp, #0
 8020f98:	6078      	str	r0, [r7, #4]
 8020f9a:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 8020f9c:	f107 0310 	add.w	r3, r7, #16
 8020fa0:	6839      	ldr	r1, [r7, #0]
 8020fa2:	4618      	mov	r0, r3
 8020fa4:	f7ff ff74 	bl	8020e90 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 8020fa8:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 8020faa:	2b00      	cmp	r3, #0
 8020fac:	d004      	beq.n	8020fb8 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 8020fae:	6a3a      	ldr	r2, [r7, #32]
 8020fb0:	69fb      	ldr	r3, [r7, #28]
 8020fb2:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 8020fb4:	3b01      	subs	r3, #1
 8020fb6:	e009      	b.n	8020fcc <mg_url_host+0x3a>
 8020fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 8020fba:	2b00      	cmp	r3, #0
 8020fbc:	d003      	beq.n	8020fc6 <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 8020fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8020fc0:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 8020fc2:	1ad3      	subs	r3, r2, r3
 8020fc4:	e002      	b.n	8020fcc <mg_url_host+0x3a>
 8020fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8020fc8:	69fb      	ldr	r3, [r7, #28]
 8020fca:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 8020fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 8020fce:	69fb      	ldr	r3, [r7, #28]
 8020fd0:	683a      	ldr	r2, [r7, #0]
 8020fd2:	18d1      	adds	r1, r2, r3
 8020fd4:	f107 0308 	add.w	r3, r7, #8
 8020fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8020fda:	4618      	mov	r0, r3
 8020fdc:	f7f4 fed3 	bl	8015d86 <mg_str_n>
  return s;
 8020fe0:	687b      	ldr	r3, [r7, #4]
 8020fe2:	461a      	mov	r2, r3
 8020fe4:	f107 0308 	add.w	r3, r7, #8
 8020fe8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020fec:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8020ff0:	6878      	ldr	r0, [r7, #4]
 8020ff2:	3730      	adds	r7, #48	@ 0x30
 8020ff4:	46bd      	mov	sp, r7
 8020ff6:	bd80      	pop	{r7, pc}

08020ff8 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 8020ff8:	b580      	push	{r7, lr}
 8020ffa:	b08a      	sub	sp, #40	@ 0x28
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 8021000:	f107 0308 	add.w	r3, r7, #8
 8021004:	6879      	ldr	r1, [r7, #4]
 8021006:	4618      	mov	r0, r3
 8021008:	f7ff ff42 	bl	8020e90 <urlparse>
  unsigned short port = 0;
 802100c:	2300      	movs	r3, #0
 802100e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 8021010:	2205      	movs	r2, #5
 8021012:	4925      	ldr	r1, [pc, #148]	@ (80210a8 <mg_url_port+0xb0>)
 8021014:	6878      	ldr	r0, [r7, #4]
 8021016:	f004 fbce 	bl	80257b6 <strncmp>
 802101a:	4603      	mov	r3, r0
 802101c:	2b00      	cmp	r3, #0
 802101e:	d007      	beq.n	8021030 <mg_url_port+0x38>
 8021020:	2203      	movs	r2, #3
 8021022:	4922      	ldr	r1, [pc, #136]	@ (80210ac <mg_url_port+0xb4>)
 8021024:	6878      	ldr	r0, [r7, #4]
 8021026:	f004 fbc6 	bl	80257b6 <strncmp>
 802102a:	4603      	mov	r3, r0
 802102c:	2b00      	cmp	r3, #0
 802102e:	d101      	bne.n	8021034 <mg_url_port+0x3c>
 8021030:	2350      	movs	r3, #80	@ 0x50
 8021032:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 8021034:	2204      	movs	r2, #4
 8021036:	491e      	ldr	r1, [pc, #120]	@ (80210b0 <mg_url_port+0xb8>)
 8021038:	6878      	ldr	r0, [r7, #4]
 802103a:	f004 fbbc 	bl	80257b6 <strncmp>
 802103e:	4603      	mov	r3, r0
 8021040:	2b00      	cmp	r3, #0
 8021042:	d007      	beq.n	8021054 <mg_url_port+0x5c>
 8021044:	2206      	movs	r2, #6
 8021046:	491b      	ldr	r1, [pc, #108]	@ (80210b4 <mg_url_port+0xbc>)
 8021048:	6878      	ldr	r0, [r7, #4]
 802104a:	f004 fbb4 	bl	80257b6 <strncmp>
 802104e:	4603      	mov	r3, r0
 8021050:	2b00      	cmp	r3, #0
 8021052:	d102      	bne.n	802105a <mg_url_port+0x62>
    port = 443;
 8021054:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8021058:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 802105a:	2205      	movs	r2, #5
 802105c:	4916      	ldr	r1, [pc, #88]	@ (80210b8 <mg_url_port+0xc0>)
 802105e:	6878      	ldr	r0, [r7, #4]
 8021060:	f004 fba9 	bl	80257b6 <strncmp>
 8021064:	4603      	mov	r3, r0
 8021066:	2b00      	cmp	r3, #0
 8021068:	d102      	bne.n	8021070 <mg_url_port+0x78>
 802106a:	f240 735b 	movw	r3, #1883	@ 0x75b
 802106e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 8021070:	2206      	movs	r2, #6
 8021072:	4912      	ldr	r1, [pc, #72]	@ (80210bc <mg_url_port+0xc4>)
 8021074:	6878      	ldr	r0, [r7, #4]
 8021076:	f004 fb9e 	bl	80257b6 <strncmp>
 802107a:	4603      	mov	r3, r0
 802107c:	2b00      	cmp	r3, #0
 802107e:	d102      	bne.n	8021086 <mg_url_port+0x8e>
 8021080:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 8021084:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 8021086:	69bb      	ldr	r3, [r7, #24]
 8021088:	2b00      	cmp	r3, #0
 802108a:	d007      	beq.n	802109c <mg_url_port+0xa4>
 802108c:	69bb      	ldr	r3, [r7, #24]
 802108e:	687a      	ldr	r2, [r7, #4]
 8021090:	4413      	add	r3, r2
 8021092:	4618      	mov	r0, r3
 8021094:	f003 ff9c 	bl	8024fd0 <atoi>
 8021098:	4603      	mov	r3, r0
 802109a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 802109c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 802109e:	4618      	mov	r0, r3
 80210a0:	3728      	adds	r7, #40	@ 0x28
 80210a2:	46bd      	mov	sp, r7
 80210a4:	bd80      	pop	{r7, pc}
 80210a6:	bf00      	nop
 80210a8:	08028c5c 	.word	0x08028c5c
 80210ac:	08028c64 	.word	0x08028c64
 80210b0:	08028c2c 	.word	0x08028c2c
 80210b4:	08028c34 	.word	0x08028c34
 80210b8:	08028c68 	.word	0x08028c68
 80210bc:	08028c3c 	.word	0x08028c3c

080210c0 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 80210c0:	b480      	push	{r7}
 80210c2:	b083      	sub	sp, #12
 80210c4:	af00      	add	r7, sp, #0
 80210c6:	6078      	str	r0, [r7, #4]
 80210c8:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 80210ca:	687b      	ldr	r3, [r7, #4]
 80210cc:	2b00      	cmp	r3, #0
 80210ce:	d00a      	beq.n	80210e6 <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 80210d0:	e004      	b.n	80210dc <mg_bzero+0x1c>
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	1c5a      	adds	r2, r3, #1
 80210d6:	607a      	str	r2, [r7, #4]
 80210d8:	2200      	movs	r2, #0
 80210da:	701a      	strb	r2, [r3, #0]
 80210dc:	683b      	ldr	r3, [r7, #0]
 80210de:	1e5a      	subs	r2, r3, #1
 80210e0:	603a      	str	r2, [r7, #0]
 80210e2:	2b00      	cmp	r3, #0
 80210e4:	d1f5      	bne.n	80210d2 <mg_bzero+0x12>
  }
}
 80210e6:	bf00      	nop
 80210e8:	370c      	adds	r7, #12
 80210ea:	46bd      	mov	sp, r7
 80210ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210f0:	4770      	bx	lr
	...

080210f4 <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 80210f4:	b580      	push	{r7, lr}
 80210f6:	b084      	sub	sp, #16
 80210f8:	af00      	add	r7, sp, #0
 80210fa:	6078      	str	r0, [r7, #4]
 80210fc:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 80210fe:	6839      	ldr	r1, [r7, #0]
 8021100:	6878      	ldr	r0, [r7, #4]
 8021102:	f7df fb03 	bl	800070c <mg_random>
  for (i = 0; i < len; i++) {
 8021106:	2300      	movs	r3, #0
 8021108:	60fb      	str	r3, [r7, #12]
 802110a:	e02d      	b.n	8021168 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 802110c:	687a      	ldr	r2, [r7, #4]
 802110e:	68fb      	ldr	r3, [r7, #12]
 8021110:	4413      	add	r3, r2
 8021112:	781a      	ldrb	r2, [r3, #0]
 8021114:	0853      	lsrs	r3, r2, #1
 8021116:	4919      	ldr	r1, [pc, #100]	@ (802117c <mg_random_str+0x88>)
 8021118:	fba1 1303 	umull	r1, r3, r1, r3
 802111c:	0919      	lsrs	r1, r3, #4
 802111e:	460b      	mov	r3, r1
 8021120:	015b      	lsls	r3, r3, #5
 8021122:	1a5b      	subs	r3, r3, r1
 8021124:	005b      	lsls	r3, r3, #1
 8021126:	1ad3      	subs	r3, r2, r3
 8021128:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 802112a:	683b      	ldr	r3, [r7, #0]
 802112c:	3b01      	subs	r3, #1
 802112e:	68fa      	ldr	r2, [r7, #12]
 8021130:	429a      	cmp	r2, r3
 8021132:	d011      	beq.n	8021158 <mg_random_str+0x64>
 8021134:	7afb      	ldrb	r3, [r7, #11]
 8021136:	2b19      	cmp	r3, #25
 8021138:	d803      	bhi.n	8021142 <mg_random_str+0x4e>
 802113a:	7afb      	ldrb	r3, [r7, #11]
 802113c:	3361      	adds	r3, #97	@ 0x61
 802113e:	b2db      	uxtb	r3, r3
 8021140:	e00b      	b.n	802115a <mg_random_str+0x66>
 8021142:	7afb      	ldrb	r3, [r7, #11]
 8021144:	2b33      	cmp	r3, #51	@ 0x33
 8021146:	d803      	bhi.n	8021150 <mg_random_str+0x5c>
 8021148:	7afb      	ldrb	r3, [r7, #11]
 802114a:	3327      	adds	r3, #39	@ 0x27
 802114c:	b2db      	uxtb	r3, r3
 802114e:	e004      	b.n	802115a <mg_random_str+0x66>
 8021150:	7afb      	ldrb	r3, [r7, #11]
 8021152:	3b04      	subs	r3, #4
 8021154:	b2db      	uxtb	r3, r3
 8021156:	e000      	b.n	802115a <mg_random_str+0x66>
 8021158:	2300      	movs	r3, #0
 802115a:	6879      	ldr	r1, [r7, #4]
 802115c:	68fa      	ldr	r2, [r7, #12]
 802115e:	440a      	add	r2, r1
 8021160:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 8021162:	68fb      	ldr	r3, [r7, #12]
 8021164:	3301      	adds	r3, #1
 8021166:	60fb      	str	r3, [r7, #12]
 8021168:	68fa      	ldr	r2, [r7, #12]
 802116a:	683b      	ldr	r3, [r7, #0]
 802116c:	429a      	cmp	r2, r3
 802116e:	d3cd      	bcc.n	802110c <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 8021170:	687b      	ldr	r3, [r7, #4]
}
 8021172:	4618      	mov	r0, r3
 8021174:	3710      	adds	r7, #16
 8021176:	46bd      	mov	sp, r7
 8021178:	bd80      	pop	{r7, pc}
 802117a:	bf00      	nop
 802117c:	84210843 	.word	0x84210843

08021180 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 8021180:	b480      	push	{r7}
 8021182:	b087      	sub	sp, #28
 8021184:	af00      	add	r7, sp, #0
 8021186:	60f8      	str	r0, [r7, #12]
 8021188:	60b9      	str	r1, [r7, #8]
 802118a:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 802118c:	68fb      	ldr	r3, [r7, #12]
 802118e:	43db      	mvns	r3, r3
 8021190:	60fb      	str	r3, [r7, #12]
  while (len--) {
 8021192:	e01f      	b.n	80211d4 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 8021194:	68bb      	ldr	r3, [r7, #8]
 8021196:	1c5a      	adds	r2, r3, #1
 8021198:	60ba      	str	r2, [r7, #8]
 802119a:	781b      	ldrb	r3, [r3, #0]
 802119c:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 802119e:	7dfa      	ldrb	r2, [r7, #23]
 80211a0:	68fb      	ldr	r3, [r7, #12]
 80211a2:	4053      	eors	r3, r2
 80211a4:	f003 030f 	and.w	r3, r3, #15
 80211a8:	4a11      	ldr	r2, [pc, #68]	@ (80211f0 <mg_crc32+0x70>)
 80211aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80211ae:	68fb      	ldr	r3, [r7, #12]
 80211b0:	091b      	lsrs	r3, r3, #4
 80211b2:	4053      	eors	r3, r2
 80211b4:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 80211b6:	7dfb      	ldrb	r3, [r7, #23]
 80211b8:	091b      	lsrs	r3, r3, #4
 80211ba:	b2db      	uxtb	r3, r3
 80211bc:	461a      	mov	r2, r3
 80211be:	68fb      	ldr	r3, [r7, #12]
 80211c0:	4053      	eors	r3, r2
 80211c2:	f003 030f 	and.w	r3, r3, #15
 80211c6:	4a0a      	ldr	r2, [pc, #40]	@ (80211f0 <mg_crc32+0x70>)
 80211c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80211cc:	68fb      	ldr	r3, [r7, #12]
 80211ce:	091b      	lsrs	r3, r3, #4
 80211d0:	4053      	eors	r3, r2
 80211d2:	60fb      	str	r3, [r7, #12]
  while (len--) {
 80211d4:	687b      	ldr	r3, [r7, #4]
 80211d6:	1e5a      	subs	r2, r3, #1
 80211d8:	607a      	str	r2, [r7, #4]
 80211da:	2b00      	cmp	r3, #0
 80211dc:	d1da      	bne.n	8021194 <mg_crc32+0x14>
  }
  return ~crc;
 80211de:	68fb      	ldr	r3, [r7, #12]
 80211e0:	43db      	mvns	r3, r3
}
 80211e2:	4618      	mov	r0, r3
 80211e4:	371c      	adds	r7, #28
 80211e6:	46bd      	mov	sp, r7
 80211e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211ec:	4770      	bx	lr
 80211ee:	bf00      	nop
 80211f0:	0802a3e8 	.word	0x0802a3e8

080211f4 <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 80211f4:	b480      	push	{r7}
 80211f6:	b085      	sub	sp, #20
 80211f8:	af00      	add	r7, sp, #0
 80211fa:	463b      	mov	r3, r7
 80211fc:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 8021200:	683b      	ldr	r3, [r7, #0]
 8021202:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '~') return false;  // Starts with ~
 8021208:	683b      	ldr	r3, [r7, #0]
 802120a:	781b      	ldrb	r3, [r3, #0]
 802120c:	2b7e      	cmp	r3, #126	@ 0x7e
 802120e:	d101      	bne.n	8021214 <mg_path_is_sane+0x20>
 8021210:	2300      	movs	r3, #0
 8021212:	e02f      	b.n	8021274 <mg_path_is_sane+0x80>
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 8021214:	683b      	ldr	r3, [r7, #0]
 8021216:	781b      	ldrb	r3, [r3, #0]
 8021218:	2b2e      	cmp	r3, #46	@ 0x2e
 802121a:	d123      	bne.n	8021264 <mg_path_is_sane+0x70>
 802121c:	683b      	ldr	r3, [r7, #0]
 802121e:	3301      	adds	r3, #1
 8021220:	781b      	ldrb	r3, [r3, #0]
 8021222:	2b2e      	cmp	r3, #46	@ 0x2e
 8021224:	d11e      	bne.n	8021264 <mg_path_is_sane+0x70>
 8021226:	2300      	movs	r3, #0
 8021228:	e024      	b.n	8021274 <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 802122a:	68fb      	ldr	r3, [r7, #12]
 802122c:	781b      	ldrb	r3, [r3, #0]
 802122e:	2b2f      	cmp	r3, #47	@ 0x2f
 8021230:	d003      	beq.n	802123a <mg_path_is_sane+0x46>
 8021232:	68fb      	ldr	r3, [r7, #12]
 8021234:	781b      	ldrb	r3, [r3, #0]
 8021236:	2b5c      	cmp	r3, #92	@ 0x5c
 8021238:	d10e      	bne.n	8021258 <mg_path_is_sane+0x64>
 802123a:	68bb      	ldr	r3, [r7, #8]
 802123c:	2b01      	cmp	r3, #1
 802123e:	d90b      	bls.n	8021258 <mg_path_is_sane+0x64>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8021240:	68fb      	ldr	r3, [r7, #12]
 8021242:	3301      	adds	r3, #1
 8021244:	781b      	ldrb	r3, [r3, #0]
 8021246:	2b2e      	cmp	r3, #46	@ 0x2e
 8021248:	d106      	bne.n	8021258 <mg_path_is_sane+0x64>
 802124a:	68fb      	ldr	r3, [r7, #12]
 802124c:	3302      	adds	r3, #2
 802124e:	781b      	ldrb	r3, [r3, #0]
 8021250:	2b2e      	cmp	r3, #46	@ 0x2e
 8021252:	d101      	bne.n	8021258 <mg_path_is_sane+0x64>
 8021254:	2300      	movs	r3, #0
 8021256:	e00d      	b.n	8021274 <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 8021258:	68fb      	ldr	r3, [r7, #12]
 802125a:	3301      	adds	r3, #1
 802125c:	60fb      	str	r3, [r7, #12]
 802125e:	68bb      	ldr	r3, [r7, #8]
 8021260:	3b01      	subs	r3, #1
 8021262:	60bb      	str	r3, [r7, #8]
 8021264:	68fb      	ldr	r3, [r7, #12]
 8021266:	781b      	ldrb	r3, [r3, #0]
 8021268:	2b00      	cmp	r3, #0
 802126a:	d002      	beq.n	8021272 <mg_path_is_sane+0x7e>
 802126c:	68bb      	ldr	r3, [r7, #8]
 802126e:	2b00      	cmp	r3, #0
 8021270:	d1db      	bne.n	802122a <mg_path_is_sane+0x36>
    }
  }
  return true;
 8021272:	2301      	movs	r3, #1
}
 8021274:	4618      	mov	r0, r3
 8021276:	3714      	adds	r7, #20
 8021278:	46bd      	mov	sp, r7
 802127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802127e:	4770      	bx	lr

08021280 <mg_ntohs>:
#endif
}
#endif

// network format equates big endian order
uint16_t mg_ntohs(uint16_t net) {
 8021280:	b480      	push	{r7}
 8021282:	b083      	sub	sp, #12
 8021284:	af00      	add	r7, sp, #0
 8021286:	4603      	mov	r3, r0
 8021288:	80fb      	strh	r3, [r7, #6]
  return MG_LOAD_BE16(&net);
 802128a:	1dbb      	adds	r3, r7, #6
 802128c:	781b      	ldrb	r3, [r3, #0]
 802128e:	b21b      	sxth	r3, r3
 8021290:	021b      	lsls	r3, r3, #8
 8021292:	b21a      	sxth	r2, r3
 8021294:	1dbb      	adds	r3, r7, #6
 8021296:	3301      	adds	r3, #1
 8021298:	781b      	ldrb	r3, [r3, #0]
 802129a:	b21b      	sxth	r3, r3
 802129c:	4313      	orrs	r3, r2
 802129e:	b21b      	sxth	r3, r3
 80212a0:	b29b      	uxth	r3, r3
}
 80212a2:	4618      	mov	r0, r3
 80212a4:	370c      	adds	r7, #12
 80212a6:	46bd      	mov	sp, r7
 80212a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212ac:	4770      	bx	lr

080212ae <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 80212ae:	b480      	push	{r7}
 80212b0:	b083      	sub	sp, #12
 80212b2:	af00      	add	r7, sp, #0
 80212b4:	6078      	str	r0, [r7, #4]
  return MG_LOAD_BE32(&net);
 80212b6:	1d3b      	adds	r3, r7, #4
 80212b8:	781b      	ldrb	r3, [r3, #0]
 80212ba:	061a      	lsls	r2, r3, #24
 80212bc:	1d3b      	adds	r3, r7, #4
 80212be:	3301      	adds	r3, #1
 80212c0:	781b      	ldrb	r3, [r3, #0]
 80212c2:	041b      	lsls	r3, r3, #16
 80212c4:	431a      	orrs	r2, r3
 80212c6:	1d3b      	adds	r3, r7, #4
 80212c8:	3302      	adds	r3, #2
 80212ca:	781b      	ldrb	r3, [r3, #0]
 80212cc:	021b      	lsls	r3, r3, #8
 80212ce:	431a      	orrs	r2, r3
 80212d0:	1d3b      	adds	r3, r7, #4
 80212d2:	3303      	adds	r3, #3
 80212d4:	781b      	ldrb	r3, [r3, #0]
 80212d6:	4313      	orrs	r3, r2
}
 80212d8:	4618      	mov	r0, r3
 80212da:	370c      	adds	r7, #12
 80212dc:	46bd      	mov	sp, r7
 80212de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212e2:	4770      	bx	lr

080212e4 <mg_ws_vprintf>:
  size_t header_len;
  size_t data_len;
};

size_t mg_ws_vprintf(struct mg_connection *c, int op, const char *fmt,
                     va_list *ap) {
 80212e4:	b580      	push	{r7, lr}
 80212e6:	b086      	sub	sp, #24
 80212e8:	af00      	add	r7, sp, #0
 80212ea:	60f8      	str	r0, [r7, #12]
 80212ec:	60b9      	str	r1, [r7, #8]
 80212ee:	607a      	str	r2, [r7, #4]
 80212f0:	603b      	str	r3, [r7, #0]
  size_t len = c->send.len;
 80212f2:	68fb      	ldr	r3, [r7, #12]
 80212f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80212f6:	617b      	str	r3, [r7, #20]
  size_t n = mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80212f8:	68fb      	ldr	r3, [r7, #12]
 80212fa:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80212fe:	683b      	ldr	r3, [r7, #0]
 8021300:	687a      	ldr	r2, [r7, #4]
 8021302:	4809      	ldr	r0, [pc, #36]	@ (8021328 <mg_ws_vprintf+0x44>)
 8021304:	f7e7 fe88 	bl	8009018 <mg_vxprintf>
 8021308:	6138      	str	r0, [r7, #16]
  mg_ws_wrap(c, c->send.len - len, op);
 802130a:	68fb      	ldr	r3, [r7, #12]
 802130c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 802130e:	697b      	ldr	r3, [r7, #20]
 8021310:	1ad3      	subs	r3, r2, r3
 8021312:	68ba      	ldr	r2, [r7, #8]
 8021314:	4619      	mov	r1, r3
 8021316:	68f8      	ldr	r0, [r7, #12]
 8021318:	f000 fca0 	bl	8021c5c <mg_ws_wrap>
  return n;
 802131c:	693b      	ldr	r3, [r7, #16]
}
 802131e:	4618      	mov	r0, r3
 8021320:	3718      	adds	r7, #24
 8021322:	46bd      	mov	sp, r7
 8021324:	bd80      	pop	{r7, pc}
 8021326:	bf00      	nop
 8021328:	08012551 	.word	0x08012551

0802132c <mg_ws_printf>:

size_t mg_ws_printf(struct mg_connection *c, int op, const char *fmt, ...) {
 802132c:	b40c      	push	{r2, r3}
 802132e:	b580      	push	{r7, lr}
 8021330:	b084      	sub	sp, #16
 8021332:	af00      	add	r7, sp, #0
 8021334:	6078      	str	r0, [r7, #4]
 8021336:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8021338:	2300      	movs	r3, #0
 802133a:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 802133c:	f107 031c 	add.w	r3, r7, #28
 8021340:	60bb      	str	r3, [r7, #8]
  len = mg_ws_vprintf(c, op, fmt, &ap);
 8021342:	f107 0308 	add.w	r3, r7, #8
 8021346:	69ba      	ldr	r2, [r7, #24]
 8021348:	6839      	ldr	r1, [r7, #0]
 802134a:	6878      	ldr	r0, [r7, #4]
 802134c:	f7ff ffca 	bl	80212e4 <mg_ws_vprintf>
 8021350:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8021352:	68fb      	ldr	r3, [r7, #12]
}
 8021354:	4618      	mov	r0, r3
 8021356:	3710      	adds	r7, #16
 8021358:	46bd      	mov	sp, r7
 802135a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802135e:	b002      	add	sp, #8
 8021360:	4770      	bx	lr
	...

08021364 <ws_handshake>:

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 8021364:	b580      	push	{r7, lr}
 8021366:	b0aa      	sub	sp, #168	@ 0xa8
 8021368:	af00      	add	r7, sp, #0
 802136a:	60f8      	str	r0, [r7, #12]
 802136c:	60b9      	str	r1, [r7, #8]
 802136e:	607a      	str	r2, [r7, #4]
 8021370:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 8021372:	4b29      	ldr	r3, [pc, #164]	@ (8021418 <ws_handshake+0xb4>)
 8021374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 8021378:	f107 0314 	add.w	r3, r7, #20
 802137c:	4618      	mov	r0, r3
 802137e:	f7f2 ff15 	bl	80141ac <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->buf, wskey->len);
 8021382:	68bb      	ldr	r3, [r7, #8]
 8021384:	6819      	ldr	r1, [r3, #0]
 8021386:	68bb      	ldr	r3, [r7, #8]
 8021388:	685a      	ldr	r2, [r3, #4]
 802138a:	f107 0314 	add.w	r3, r7, #20
 802138e:	4618      	mov	r0, r3
 8021390:	f7f2 ff36 	bl	8014200 <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 8021394:	f107 0314 	add.w	r3, r7, #20
 8021398:	2224      	movs	r2, #36	@ 0x24
 802139a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802139e:	4618      	mov	r0, r3
 80213a0:	f7f2 ff2e 	bl	8014200 <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 80213a4:	f107 0214 	add.w	r2, r7, #20
 80213a8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80213ac:	4611      	mov	r1, r2
 80213ae:	4618      	mov	r0, r3
 80213b0:	f7f2 ff8c 	bl	80142cc <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha, sizeof(b64_sha));
 80213b4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80213b8:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 80213bc:	231e      	movs	r3, #30
 80213be:	2114      	movs	r1, #20
 80213c0:	f7e6 f8aa 	bl	8007518 <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 80213c4:	68fb      	ldr	r3, [r7, #12]
 80213c6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80213ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80213ce:	4a13      	ldr	r2, [pc, #76]	@ (802141c <ws_handshake+0xb8>)
 80213d0:	4813      	ldr	r0, [pc, #76]	@ (8021420 <ws_handshake+0xbc>)
 80213d2:	f7e7 fe06 	bl	8008fe2 <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 80213d6:	683b      	ldr	r3, [r7, #0]
 80213d8:	2b00      	cmp	r3, #0
 80213da:	d008      	beq.n	80213ee <ws_handshake+0x8a>
 80213dc:	68fb      	ldr	r3, [r7, #12]
 80213de:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80213e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80213e6:	683a      	ldr	r2, [r7, #0]
 80213e8:	480d      	ldr	r0, [pc, #52]	@ (8021420 <ws_handshake+0xbc>)
 80213ea:	f7e7 fe15 	bl	8009018 <mg_vxprintf>
  if (wsproto != NULL) {
 80213ee:	687b      	ldr	r3, [r7, #4]
 80213f0:	2b00      	cmp	r3, #0
 80213f2:	d008      	beq.n	8021406 <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 80213f4:	687b      	ldr	r3, [r7, #4]
 80213f6:	685b      	ldr	r3, [r3, #4]
 80213f8:	461a      	mov	r2, r3
              wsproto->buf);
 80213fa:	687b      	ldr	r3, [r7, #4]
 80213fc:	681b      	ldr	r3, [r3, #0]
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 80213fe:	4909      	ldr	r1, [pc, #36]	@ (8021424 <ws_handshake+0xc0>)
 8021400:	68f8      	ldr	r0, [r7, #12]
 8021402:	f7ec fdff 	bl	800e004 <mg_printf>
  }
  mg_send(c, "\r\n", 2);
 8021406:	2202      	movs	r2, #2
 8021408:	4907      	ldr	r1, [pc, #28]	@ (8021428 <ws_handshake+0xc4>)
 802140a:	68f8      	ldr	r0, [r7, #12]
 802140c:	f7f0 ff34 	bl	8012278 <mg_send>
}
 8021410:	bf00      	nop
 8021412:	37a8      	adds	r7, #168	@ 0xa8
 8021414:	46bd      	mov	sp, r7
 8021416:	bd80      	pop	{r7, pc}
 8021418:	08028cac 	.word	0x08028cac
 802141c:	08028cd4 	.word	0x08028cd4
 8021420:	08012551 	.word	0x08012551
 8021424:	08028d3c 	.word	0x08028d3c
 8021428:	0802680c 	.word	0x0802680c

0802142c <be32>:

static uint32_t be32(const uint8_t *p) {
 802142c:	b480      	push	{r7}
 802142e:	b083      	sub	sp, #12
 8021430:	af00      	add	r7, sp, #0
 8021432:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 8021434:	687b      	ldr	r3, [r7, #4]
 8021436:	3303      	adds	r3, #3
 8021438:	781b      	ldrb	r3, [r3, #0]
 802143a:	461a      	mov	r2, r3
 802143c:	687b      	ldr	r3, [r7, #4]
 802143e:	3302      	adds	r3, #2
 8021440:	781b      	ldrb	r3, [r3, #0]
 8021442:	021b      	lsls	r3, r3, #8
 8021444:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 8021446:	687b      	ldr	r3, [r7, #4]
 8021448:	3301      	adds	r3, #1
 802144a:	781b      	ldrb	r3, [r3, #0]
 802144c:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 802144e:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 8021450:	687b      	ldr	r3, [r7, #4]
 8021452:	781b      	ldrb	r3, [r3, #0]
 8021454:	061b      	lsls	r3, r3, #24
 8021456:	4313      	orrs	r3, r2
}
 8021458:	4618      	mov	r0, r3
 802145a:	370c      	adds	r7, #12
 802145c:	46bd      	mov	sp, r7
 802145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021462:	4770      	bx	lr

08021464 <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 8021464:	b5b0      	push	{r4, r5, r7, lr}
 8021466:	b08a      	sub	sp, #40	@ 0x28
 8021468:	af00      	add	r7, sp, #0
 802146a:	60f8      	str	r0, [r7, #12]
 802146c:	60b9      	str	r1, [r7, #8]
 802146e:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 8021470:	2300      	movs	r3, #0
 8021472:	61fb      	str	r3, [r7, #28]
 8021474:	2300      	movs	r3, #0
 8021476:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 8021478:	220c      	movs	r2, #12
 802147a:	2100      	movs	r1, #0
 802147c:	6878      	ldr	r0, [r7, #4]
 802147e:	f004 f985 	bl	802578c <memset>
  if (len >= 2) {
 8021482:	68bb      	ldr	r3, [r7, #8]
 8021484:	2b01      	cmp	r3, #1
 8021486:	d953      	bls.n	8021530 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 8021488:	68fb      	ldr	r3, [r7, #12]
 802148a:	3301      	adds	r3, #1
 802148c:	781b      	ldrb	r3, [r3, #0]
 802148e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8021492:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 8021494:	68fb      	ldr	r3, [r7, #12]
 8021496:	3301      	adds	r3, #1
 8021498:	781b      	ldrb	r3, [r3, #0]
 802149a:	b25b      	sxtb	r3, r3
 802149c:	115b      	asrs	r3, r3, #5
 802149e:	b25b      	sxtb	r3, r3
 80214a0:	f003 0304 	and.w	r3, r3, #4
 80214a4:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 80214a6:	68fb      	ldr	r3, [r7, #12]
 80214a8:	781a      	ldrb	r2, [r3, #0]
 80214aa:	687b      	ldr	r3, [r7, #4]
 80214ac:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 80214ae:	69fb      	ldr	r3, [r7, #28]
 80214b0:	2b7d      	cmp	r3, #125	@ 0x7d
 80214b2:	d80b      	bhi.n	80214cc <ws_process+0x68>
 80214b4:	68ba      	ldr	r2, [r7, #8]
 80214b6:	6a3b      	ldr	r3, [r7, #32]
 80214b8:	429a      	cmp	r2, r3
 80214ba:	d307      	bcc.n	80214cc <ws_process+0x68>
      msg->data_len = n;
 80214bc:	687b      	ldr	r3, [r7, #4]
 80214be:	69fa      	ldr	r2, [r7, #28]
 80214c0:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 80214c2:	6a3b      	ldr	r3, [r7, #32]
 80214c4:	1c9a      	adds	r2, r3, #2
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	605a      	str	r2, [r3, #4]
 80214ca:	e031      	b.n	8021530 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 80214cc:	69fb      	ldr	r3, [r7, #28]
 80214ce:	2b7e      	cmp	r3, #126	@ 0x7e
 80214d0:	d113      	bne.n	80214fa <ws_process+0x96>
 80214d2:	6a3b      	ldr	r3, [r7, #32]
 80214d4:	3304      	adds	r3, #4
 80214d6:	68ba      	ldr	r2, [r7, #8]
 80214d8:	429a      	cmp	r2, r3
 80214da:	d30e      	bcc.n	80214fa <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 80214dc:	6a3b      	ldr	r3, [r7, #32]
 80214de:	1d1a      	adds	r2, r3, #4
 80214e0:	687b      	ldr	r3, [r7, #4]
 80214e2:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 80214e4:	68fb      	ldr	r3, [r7, #12]
 80214e6:	3302      	adds	r3, #2
 80214e8:	781b      	ldrb	r3, [r3, #0]
 80214ea:	021b      	lsls	r3, r3, #8
 80214ec:	68fa      	ldr	r2, [r7, #12]
 80214ee:	3203      	adds	r2, #3
 80214f0:	7812      	ldrb	r2, [r2, #0]
 80214f2:	431a      	orrs	r2, r3
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	609a      	str	r2, [r3, #8]
 80214f8:	e01a      	b.n	8021530 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 80214fa:	6a3b      	ldr	r3, [r7, #32]
 80214fc:	330a      	adds	r3, #10
 80214fe:	68ba      	ldr	r2, [r7, #8]
 8021500:	429a      	cmp	r2, r3
 8021502:	d315      	bcc.n	8021530 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 8021504:	6a3b      	ldr	r3, [r7, #32]
 8021506:	f103 020a 	add.w	r2, r3, #10
 802150a:	687b      	ldr	r3, [r7, #4]
 802150c:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 802150e:	68fb      	ldr	r3, [r7, #12]
 8021510:	3302      	adds	r3, #2
 8021512:	4618      	mov	r0, r3
 8021514:	f7ff ff8a 	bl	802142c <be32>
 8021518:	4603      	mov	r3, r0
 802151a:	2200      	movs	r2, #0
 802151c:	461c      	mov	r4, r3
 802151e:	4615      	mov	r5, r2
 8021520:	68fb      	ldr	r3, [r7, #12]
 8021522:	3306      	adds	r3, #6
 8021524:	4618      	mov	r0, r3
 8021526:	f7ff ff81 	bl	802142c <be32>
 802152a:	4602      	mov	r2, r0
      msg->data_len =
 802152c:	687b      	ldr	r3, [r7, #4]
 802152e:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 8021530:	687b      	ldr	r3, [r7, #4]
 8021532:	689b      	ldr	r3, [r3, #8]
 8021534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8021538:	d901      	bls.n	802153e <ws_process+0xda>
 802153a:	2300      	movs	r3, #0
 802153c:	e036      	b.n	80215ac <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 802153e:	687b      	ldr	r3, [r7, #4]
 8021540:	685a      	ldr	r2, [r3, #4]
 8021542:	687b      	ldr	r3, [r7, #4]
 8021544:	689b      	ldr	r3, [r3, #8]
 8021546:	4413      	add	r3, r2
 8021548:	68ba      	ldr	r2, [r7, #8]
 802154a:	429a      	cmp	r2, r3
 802154c:	d201      	bcs.n	8021552 <ws_process+0xee>
 802154e:	2300      	movs	r3, #0
 8021550:	e02c      	b.n	80215ac <ws_process+0x148>
  if (mask_len > 0) {
 8021552:	6a3b      	ldr	r3, [r7, #32]
 8021554:	2b00      	cmp	r3, #0
 8021556:	d024      	beq.n	80215a2 <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	685b      	ldr	r3, [r3, #4]
 802155c:	68fa      	ldr	r2, [r7, #12]
 802155e:	4413      	add	r3, r2
 8021560:	61bb      	str	r3, [r7, #24]
 8021562:	6a3b      	ldr	r3, [r7, #32]
 8021564:	425b      	negs	r3, r3
 8021566:	69ba      	ldr	r2, [r7, #24]
 8021568:	4413      	add	r3, r2
 802156a:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 802156c:	2300      	movs	r3, #0
 802156e:	627b      	str	r3, [r7, #36]	@ 0x24
 8021570:	e012      	b.n	8021598 <ws_process+0x134>
 8021572:	69ba      	ldr	r2, [r7, #24]
 8021574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021576:	4413      	add	r3, r2
 8021578:	7819      	ldrb	r1, [r3, #0]
 802157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802157c:	f003 0303 	and.w	r3, r3, #3
 8021580:	697a      	ldr	r2, [r7, #20]
 8021582:	4413      	add	r3, r2
 8021584:	781a      	ldrb	r2, [r3, #0]
 8021586:	69b8      	ldr	r0, [r7, #24]
 8021588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802158a:	4403      	add	r3, r0
 802158c:	404a      	eors	r2, r1
 802158e:	b2d2      	uxtb	r2, r2
 8021590:	701a      	strb	r2, [r3, #0]
 8021592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021594:	3301      	adds	r3, #1
 8021596:	627b      	str	r3, [r7, #36]	@ 0x24
 8021598:	687b      	ldr	r3, [r7, #4]
 802159a:	689b      	ldr	r3, [r3, #8]
 802159c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802159e:	429a      	cmp	r2, r3
 80215a0:	d3e7      	bcc.n	8021572 <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	685a      	ldr	r2, [r3, #4]
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	689b      	ldr	r3, [r3, #8]
 80215aa:	4413      	add	r3, r2
}
 80215ac:	4618      	mov	r0, r3
 80215ae:	3728      	adds	r7, #40	@ 0x28
 80215b0:	46bd      	mov	sp, r7
 80215b2:	bdb0      	pop	{r4, r5, r7, pc}

080215b4 <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 80215b4:	b5b0      	push	{r4, r5, r7, lr}
 80215b6:	b088      	sub	sp, #32
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	60f8      	str	r0, [r7, #12]
 80215bc:	60b9      	str	r1, [r7, #8]
 80215be:	603b      	str	r3, [r7, #0]
 80215c0:	4613      	mov	r3, r2
 80215c2:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 80215c4:	2300      	movs	r3, #0
 80215c6:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 80215c8:	68bb      	ldr	r3, [r7, #8]
 80215ca:	b25b      	sxtb	r3, r3
 80215cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80215d0:	b25b      	sxtb	r3, r3
 80215d2:	b2da      	uxtb	r2, r3
 80215d4:	683b      	ldr	r3, [r7, #0]
 80215d6:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 80215d8:	68fb      	ldr	r3, [r7, #12]
 80215da:	2b7d      	cmp	r3, #125	@ 0x7d
 80215dc:	d807      	bhi.n	80215ee <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 80215de:	683b      	ldr	r3, [r7, #0]
 80215e0:	3301      	adds	r3, #1
 80215e2:	68fa      	ldr	r2, [r7, #12]
 80215e4:	b2d2      	uxtb	r2, r2
 80215e6:	701a      	strb	r2, [r3, #0]
    n = 2;
 80215e8:	2302      	movs	r3, #2
 80215ea:	61fb      	str	r3, [r7, #28]
 80215ec:	e038      	b.n	8021660 <mkhdr+0xac>
  } else if (len < 65536) {
 80215ee:	68fb      	ldr	r3, [r7, #12]
 80215f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80215f4:	d211      	bcs.n	802161a <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 80215f6:	68fb      	ldr	r3, [r7, #12]
 80215f8:	b29b      	uxth	r3, r3
 80215fa:	4618      	mov	r0, r3
 80215fc:	f7ff fe40 	bl	8021280 <mg_ntohs>
 8021600:	4603      	mov	r3, r0
 8021602:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 8021604:	683b      	ldr	r3, [r7, #0]
 8021606:	3301      	adds	r3, #1
 8021608:	227e      	movs	r2, #126	@ 0x7e
 802160a:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 802160c:	683b      	ldr	r3, [r7, #0]
 802160e:	3302      	adds	r3, #2
 8021610:	8b7a      	ldrh	r2, [r7, #26]
 8021612:	801a      	strh	r2, [r3, #0]
    n = 4;
 8021614:	2304      	movs	r3, #4
 8021616:	61fb      	str	r3, [r7, #28]
 8021618:	e022      	b.n	8021660 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 802161a:	683b      	ldr	r3, [r7, #0]
 802161c:	3301      	adds	r3, #1
 802161e:	227f      	movs	r2, #127	@ 0x7f
 8021620:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 8021622:	68fb      	ldr	r3, [r7, #12]
 8021624:	2200      	movs	r2, #0
 8021626:	461c      	mov	r4, r3
 8021628:	4615      	mov	r5, r2
 802162a:	f04f 0200 	mov.w	r2, #0
 802162e:	f04f 0300 	mov.w	r3, #0
 8021632:	002a      	movs	r2, r5
 8021634:	2300      	movs	r3, #0
 8021636:	4613      	mov	r3, r2
 8021638:	4618      	mov	r0, r3
 802163a:	f7ff fe38 	bl	80212ae <mg_ntohl>
 802163e:	4603      	mov	r3, r0
 8021640:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 8021642:	683b      	ldr	r3, [r7, #0]
 8021644:	3302      	adds	r3, #2
 8021646:	697a      	ldr	r2, [r7, #20]
 8021648:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 802164a:	68f8      	ldr	r0, [r7, #12]
 802164c:	f7ff fe2f 	bl	80212ae <mg_ntohl>
 8021650:	4603      	mov	r3, r0
 8021652:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 8021654:	683b      	ldr	r3, [r7, #0]
 8021656:	3306      	adds	r3, #6
 8021658:	697a      	ldr	r2, [r7, #20]
 802165a:	601a      	str	r2, [r3, #0]
    n = 10;
 802165c:	230a      	movs	r3, #10
 802165e:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 8021660:	79fb      	ldrb	r3, [r7, #7]
 8021662:	2b00      	cmp	r3, #0
 8021664:	d012      	beq.n	802168c <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 8021666:	683b      	ldr	r3, [r7, #0]
 8021668:	3301      	adds	r3, #1
 802166a:	781a      	ldrb	r2, [r3, #0]
 802166c:	683b      	ldr	r3, [r7, #0]
 802166e:	3301      	adds	r3, #1
 8021670:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8021674:	b2d2      	uxtb	r2, r2
 8021676:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 8021678:	683a      	ldr	r2, [r7, #0]
 802167a:	69fb      	ldr	r3, [r7, #28]
 802167c:	4413      	add	r3, r2
 802167e:	2104      	movs	r1, #4
 8021680:	4618      	mov	r0, r3
 8021682:	f7df f843 	bl	800070c <mg_random>
    n += 4;
 8021686:	69fb      	ldr	r3, [r7, #28]
 8021688:	3304      	adds	r3, #4
 802168a:	61fb      	str	r3, [r7, #28]
  }
  return n;
 802168c:	69fb      	ldr	r3, [r7, #28]
}
 802168e:	4618      	mov	r0, r3
 8021690:	3720      	adds	r7, #32
 8021692:	46bd      	mov	sp, r7
 8021694:	bdb0      	pop	{r4, r5, r7, pc}

08021696 <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 8021696:	b480      	push	{r7}
 8021698:	b087      	sub	sp, #28
 802169a:	af00      	add	r7, sp, #0
 802169c:	6078      	str	r0, [r7, #4]
 802169e:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 80216a0:	687b      	ldr	r3, [r7, #4]
 80216a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80216a6:	f003 0302 	and.w	r3, r3, #2
 80216aa:	b2db      	uxtb	r3, r3
 80216ac:	2b00      	cmp	r3, #0
 80216ae:	d028      	beq.n	8021702 <mg_ws_mask+0x6c>
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80216b4:	2b00      	cmp	r3, #0
 80216b6:	d024      	beq.n	8021702 <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 80216b8:	687b      	ldr	r3, [r7, #4]
 80216ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80216bc:	687b      	ldr	r3, [r7, #4]
 80216be:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80216c0:	683b      	ldr	r3, [r7, #0]
 80216c2:	1acb      	subs	r3, r1, r3
 80216c4:	4413      	add	r3, r2
 80216c6:	613b      	str	r3, [r7, #16]
 80216c8:	693b      	ldr	r3, [r7, #16]
 80216ca:	3b04      	subs	r3, #4
 80216cc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 80216ce:	2300      	movs	r3, #0
 80216d0:	617b      	str	r3, [r7, #20]
 80216d2:	e012      	b.n	80216fa <mg_ws_mask+0x64>
 80216d4:	693a      	ldr	r2, [r7, #16]
 80216d6:	697b      	ldr	r3, [r7, #20]
 80216d8:	4413      	add	r3, r2
 80216da:	7819      	ldrb	r1, [r3, #0]
 80216dc:	697b      	ldr	r3, [r7, #20]
 80216de:	f003 0303 	and.w	r3, r3, #3
 80216e2:	68fa      	ldr	r2, [r7, #12]
 80216e4:	4413      	add	r3, r2
 80216e6:	781a      	ldrb	r2, [r3, #0]
 80216e8:	6938      	ldr	r0, [r7, #16]
 80216ea:	697b      	ldr	r3, [r7, #20]
 80216ec:	4403      	add	r3, r0
 80216ee:	404a      	eors	r2, r1
 80216f0:	b2d2      	uxtb	r2, r2
 80216f2:	701a      	strb	r2, [r3, #0]
 80216f4:	697b      	ldr	r3, [r7, #20]
 80216f6:	3301      	adds	r3, #1
 80216f8:	617b      	str	r3, [r7, #20]
 80216fa:	697a      	ldr	r2, [r7, #20]
 80216fc:	683b      	ldr	r3, [r7, #0]
 80216fe:	429a      	cmp	r2, r3
 8021700:	d3e8      	bcc.n	80216d4 <mg_ws_mask+0x3e>
  }
}
 8021702:	bf00      	nop
 8021704:	371c      	adds	r7, #28
 8021706:	46bd      	mov	sp, r7
 8021708:	f85d 7b04 	ldr.w	r7, [sp], #4
 802170c:	4770      	bx	lr
	...

08021710 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 8021710:	b580      	push	{r7, lr}
 8021712:	b08a      	sub	sp, #40	@ 0x28
 8021714:	af00      	add	r7, sp, #0
 8021716:	60f8      	str	r0, [r7, #12]
 8021718:	60b9      	str	r1, [r7, #8]
 802171a:	607a      	str	r2, [r7, #4]
 802171c:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 802171e:	68fb      	ldr	r3, [r7, #12]
 8021720:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8021724:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8021728:	b2db      	uxtb	r3, r3
 802172a:	2b00      	cmp	r3, #0
 802172c:	bf14      	ite	ne
 802172e:	2301      	movne	r3, #1
 8021730:	2300      	moveq	r3, #0
 8021732:	b2da      	uxtb	r2, r3
 8021734:	f107 0314 	add.w	r3, r7, #20
 8021738:	6839      	ldr	r1, [r7, #0]
 802173a:	6878      	ldr	r0, [r7, #4]
 802173c:	f7ff ff3a 	bl	80215b4 <mkhdr>
 8021740:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!mg_send(c, header, header_len)) return 0;
 8021742:	f107 0314 	add.w	r3, r7, #20
 8021746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021748:	4619      	mov	r1, r3
 802174a:	68f8      	ldr	r0, [r7, #12]
 802174c:	f7f0 fd94 	bl	8012278 <mg_send>
 8021750:	4603      	mov	r3, r0
 8021752:	f083 0301 	eor.w	r3, r3, #1
 8021756:	b2db      	uxtb	r3, r3
 8021758:	2b00      	cmp	r3, #0
 802175a:	d001      	beq.n	8021760 <mg_ws_send+0x50>
 802175c:	2300      	movs	r3, #0
 802175e:	e024      	b.n	80217aa <mg_ws_send+0x9a>
  if (!mg_send(c, buf, len)) return header_len;
 8021760:	687a      	ldr	r2, [r7, #4]
 8021762:	68b9      	ldr	r1, [r7, #8]
 8021764:	68f8      	ldr	r0, [r7, #12]
 8021766:	f7f0 fd87 	bl	8012278 <mg_send>
 802176a:	4603      	mov	r3, r0
 802176c:	f083 0301 	eor.w	r3, r3, #1
 8021770:	b2db      	uxtb	r3, r3
 8021772:	2b00      	cmp	r3, #0
 8021774:	d001      	beq.n	802177a <mg_ws_send+0x6a>
 8021776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021778:	e017      	b.n	80217aa <mg_ws_send+0x9a>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 802177a:	4b0e      	ldr	r3, [pc, #56]	@ (80217b4 <mg_ws_send+0xa4>)
 802177c:	681b      	ldr	r3, [r3, #0]
 802177e:	2b03      	cmp	r3, #3
 8021780:	dd0c      	ble.n	802179c <mg_ws_send+0x8c>
 8021782:	4b0d      	ldr	r3, [pc, #52]	@ (80217b8 <mg_ws_send+0xa8>)
 8021784:	f644 6268 	movw	r2, #20072	@ 0x4e68
 8021788:	490c      	ldr	r1, [pc, #48]	@ (80217bc <mg_ws_send+0xac>)
 802178a:	2004      	movs	r0, #4
 802178c:	f7ec fade 	bl	800dd4c <mg_log_prefix>
 8021790:	6879      	ldr	r1, [r7, #4]
 8021792:	687a      	ldr	r2, [r7, #4]
 8021794:	68bb      	ldr	r3, [r7, #8]
 8021796:	480a      	ldr	r0, [pc, #40]	@ (80217c0 <mg_ws_send+0xb0>)
 8021798:	f7ec fb28 	bl	800ddec <mg_log>
  mg_ws_mask(c, len);
 802179c:	6879      	ldr	r1, [r7, #4]
 802179e:	68f8      	ldr	r0, [r7, #12]
 80217a0:	f7ff ff79 	bl	8021696 <mg_ws_mask>
  return header_len + len;
 80217a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	4413      	add	r3, r2
}
 80217aa:	4618      	mov	r0, r3
 80217ac:	3728      	adds	r7, #40	@ 0x28
 80217ae:	46bd      	mov	sp, r7
 80217b0:	bd80      	pop	{r7, pc}
 80217b2:	bf00      	nop
 80217b4:	24000258 	.word	0x24000258
 80217b8:	0802a428 	.word	0x0802a428
 80217bc:	080264c4 	.word	0x080264c4
 80217c0:	08028d5c 	.word	0x08028d5c

080217c4 <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 80217c4:	b580      	push	{r7, lr}
 80217c6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 80217ca:	af00      	add	r7, sp, #0
 80217cc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80217d0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80217d4:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 80217d6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80217da:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80217de:	681b      	ldr	r3, [r3, #0]
 80217e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80217e2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80217e6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80217ee:	4619      	mov	r1, r3
 80217f0:	4610      	mov	r0, r2
 80217f2:	f7e8 fc3b 	bl	800a06c <mg_http_get_request_len>
 80217f6:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
  if (n < 0) {
 80217fa:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 80217fe:	2b00      	cmp	r3, #0
 8021800:	da08      	bge.n	8021814 <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 8021802:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8021806:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802180a:	4936      	ldr	r1, [pc, #216]	@ (80218e4 <mg_ws_client_handshake+0x120>)
 802180c:	6818      	ldr	r0, [r3, #0]
 802180e:	f7e6 fd71 	bl	80082f4 <mg_error>
 8021812:	e060      	b.n	80218d6 <mg_ws_client_handshake+0x112>
  } else if (n > 0) {
 8021814:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8021818:	2b00      	cmp	r3, #0
 802181a:	dd5a      	ble.n	80218d2 <mg_ws_client_handshake+0x10e>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 802181c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8021820:	2b0e      	cmp	r3, #14
 8021822:	dd0e      	ble.n	8021842 <mg_ws_client_handshake+0x7e>
 8021824:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8021828:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802182c:	681b      	ldr	r3, [r3, #0]
 802182e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021830:	3309      	adds	r3, #9
 8021832:	2203      	movs	r2, #3
 8021834:	492c      	ldr	r1, [pc, #176]	@ (80218e8 <mg_ws_client_handshake+0x124>)
 8021836:	4618      	mov	r0, r3
 8021838:	f003 ff7e 	bl	8025738 <memcmp>
 802183c:	4603      	mov	r3, r0
 802183e:	2b00      	cmp	r3, #0
 8021840:	d008      	beq.n	8021854 <mg_ws_client_handshake+0x90>
      mg_error(c, "ws handshake error");
 8021842:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8021846:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802184a:	4928      	ldr	r1, [pc, #160]	@ (80218ec <mg_ws_client_handshake+0x128>)
 802184c:	6818      	ldr	r0, [r3, #0]
 802184e:	f7e6 fd51 	bl	80082f4 <mg_error>
 8021852:	e031      	b.n	80218b8 <mg_ws_client_handshake+0xf4>
    } else {
      struct mg_http_message hm;
      if (mg_http_parse((char *) c->recv.buf, c->recv.len, &hm)) {
 8021854:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8021858:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802185c:	681b      	ldr	r3, [r3, #0]
 802185e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8021860:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8021864:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8021868:	681b      	ldr	r3, [r3, #0]
 802186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802186c:	f107 020c 	add.w	r2, r7, #12
 8021870:	4619      	mov	r1, r3
 8021872:	f7e8 fe05 	bl	800a480 <mg_http_parse>
 8021876:	4603      	mov	r3, r0
 8021878:	2b00      	cmp	r3, #0
 802187a:	d015      	beq.n	80218a8 <mg_ws_client_handshake+0xe4>
        c->is_websocket = 1;
 802187c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 8021880:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 8021884:	681a      	ldr	r2, [r3, #0]
 8021886:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802188a:	f043 0302 	orr.w	r3, r3, #2
 802188e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_call(c, MG_EV_WS_OPEN, &hm);
 8021892:	f107 020c 	add.w	r2, r7, #12
 8021896:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 802189a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 802189e:	210c      	movs	r1, #12
 80218a0:	6818      	ldr	r0, [r3, #0]
 80218a2:	f7e6 fd07 	bl	80082b4 <mg_call>
 80218a6:	e007      	b.n	80218b8 <mg_ws_client_handshake+0xf4>
      } else {
        mg_error(c, "ws handshake error");
 80218a8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80218ac:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80218b0:	490e      	ldr	r1, [pc, #56]	@ (80218ec <mg_ws_client_handshake+0x128>)
 80218b2:	6818      	ldr	r0, [r3, #0]
 80218b4:	f7e6 fd1e 	bl	80082f4 <mg_error>
      }
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 80218b8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 80218bc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	3338      	adds	r3, #56	@ 0x38
 80218c4:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 80218c8:	2100      	movs	r1, #0
 80218ca:	4618      	mov	r0, r3
 80218cc:	f7eb fb72 	bl	800cfb4 <mg_iobuf_del>
 80218d0:	e001      	b.n	80218d6 <mg_ws_client_handshake+0x112>
  } else {
    return true;  // Request is not yet received, quit event handler
 80218d2:	2301      	movs	r3, #1
 80218d4:	e000      	b.n	80218d8 <mg_ws_client_handshake+0x114>
  }
  return false;  // Continue event handler
 80218d6:	2300      	movs	r3, #0
}
 80218d8:	4618      	mov	r0, r3
 80218da:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 80218de:	46bd      	mov	sp, r7
 80218e0:	bd80      	pop	{r7, pc}
 80218e2:	bf00      	nop
 80218e4:	08028d70 	.word	0x08028d70
 80218e8:	08028d7c 	.word	0x08028d7c
 80218ec:	08028d80 	.word	0x08028d80

080218f0 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {
 80218f0:	b580      	push	{r7, lr}
 80218f2:	b090      	sub	sp, #64	@ 0x40
 80218f4:	af00      	add	r7, sp, #0
 80218f6:	6178      	str	r0, [r7, #20]
 80218f8:	6139      	str	r1, [r7, #16]
 80218fa:	60fa      	str	r2, [r7, #12]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 80218fc:	697b      	ldr	r3, [r7, #20]
 80218fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8021902:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 8021904:	693b      	ldr	r3, [r7, #16]
 8021906:	2b07      	cmp	r3, #7
 8021908:	f040 813c 	bne.w	8021b84 <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 802190c:	697b      	ldr	r3, [r7, #20]
 802190e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8021912:	f003 0302 	and.w	r3, r3, #2
 8021916:	b2db      	uxtb	r3, r3
 8021918:	2b00      	cmp	r3, #0
 802191a:	f000 8120 	beq.w	8021b5e <mg_ws_cb+0x26e>
 802191e:	697b      	ldr	r3, [r7, #20]
 8021920:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8021924:	f003 0302 	and.w	r3, r3, #2
 8021928:	b2db      	uxtb	r3, r3
 802192a:	2b00      	cmp	r3, #0
 802192c:	f040 8117 	bne.w	8021b5e <mg_ws_cb+0x26e>
 8021930:	6978      	ldr	r0, [r7, #20]
 8021932:	f7ff ff47 	bl	80217c4 <mg_ws_client_handshake>
 8021936:	4603      	mov	r3, r0
 8021938:	2b00      	cmp	r3, #0
 802193a:	f040 8122 	bne.w	8021b82 <mg_ws_cb+0x292>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 802193e:	e10e      	b.n	8021b5e <mg_ws_cb+0x26e>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 8021940:	697b      	ldr	r3, [r7, #20]
 8021942:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021948:	440b      	add	r3, r1
 802194a:	4413      	add	r3, r2
 802194c:	637b      	str	r3, [r7, #52]	@ 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 802194e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8021950:	61bb      	str	r3, [r7, #24]
 8021952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021954:	61fb      	str	r3, [r7, #28]
 8021956:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 802195a:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 802195e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021962:	4413      	add	r3, r2
 8021964:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 8021966:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 802196a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 802196e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8021972:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8021976:	f003 030f 	and.w	r3, r3, #15
 802197a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.buf));
      switch (op) {
 802197e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8021982:	2b0a      	cmp	r3, #10
 8021984:	d877      	bhi.n	8021a76 <mg_ws_cb+0x186>
 8021986:	a201      	add	r2, pc, #4	@ (adr r2, 802198c <mg_ws_cb+0x9c>)
 8021988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802198c:	080219b9 	.word	0x080219b9
 8021990:	08021a13 	.word	0x08021a13
 8021994:	08021a13 	.word	0x08021a13
 8021998:	08021a77 	.word	0x08021a77
 802199c:	08021a77 	.word	0x08021a77
 80219a0:	08021a77 	.word	0x08021a77
 80219a4:	08021a77 	.word	0x08021a77
 80219a8:	08021a77 	.word	0x08021a77
 80219ac:	08021a2b 	.word	0x08021a2b
 80219b0:	080219c9 	.word	0x080219c9
 80219b4:	08021a03 	.word	0x08021a03
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 80219b8:	f107 0318 	add.w	r3, r7, #24
 80219bc:	461a      	mov	r2, r3
 80219be:	210e      	movs	r1, #14
 80219c0:	6978      	ldr	r0, [r7, #20]
 80219c2:	f7e6 fc77 	bl	80082b4 <mg_call>
          break;
 80219c6:	e05f      	b.n	8021a88 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 80219c8:	4b70      	ldr	r3, [pc, #448]	@ (8021b8c <mg_ws_cb+0x29c>)
 80219ca:	681b      	ldr	r3, [r3, #0]
 80219cc:	2b02      	cmp	r3, #2
 80219ce:	dd0a      	ble.n	80219e6 <mg_ws_cb+0xf6>
 80219d0:	4b6f      	ldr	r3, [pc, #444]	@ (8021b90 <mg_ws_cb+0x2a0>)
 80219d2:	f644 6298 	movw	r2, #20120	@ 0x4e98
 80219d6:	496f      	ldr	r1, [pc, #444]	@ (8021b94 <mg_ws_cb+0x2a4>)
 80219d8:	2003      	movs	r0, #3
 80219da:	f7ec f9b7 	bl	800dd4c <mg_log_prefix>
 80219de:	496e      	ldr	r1, [pc, #440]	@ (8021b98 <mg_ws_cb+0x2a8>)
 80219e0:	486e      	ldr	r0, [pc, #440]	@ (8021b9c <mg_ws_cb+0x2ac>)
 80219e2:	f7ec fa03 	bl	800ddec <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 80219e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80219e8:	230a      	movs	r3, #10
 80219ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80219ec:	6978      	ldr	r0, [r7, #20]
 80219ee:	f7ff fe8f 	bl	8021710 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 80219f2:	f107 0318 	add.w	r3, r7, #24
 80219f6:	461a      	mov	r2, r3
 80219f8:	210e      	movs	r1, #14
 80219fa:	6978      	ldr	r0, [r7, #20]
 80219fc:	f7e6 fc5a 	bl	80082b4 <mg_call>
          break;
 8021a00:	e042      	b.n	8021a88 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 8021a02:	f107 0318 	add.w	r3, r7, #24
 8021a06:	461a      	mov	r2, r3
 8021a08:	210e      	movs	r1, #14
 8021a0a:	6978      	ldr	r0, [r7, #20]
 8021a0c:	f7e6 fc52 	bl	80082b4 <mg_call>
          break;
 8021a10:	e03a      	b.n	8021a88 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 8021a12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8021a16:	2b00      	cmp	r3, #0
 8021a18:	d035      	beq.n	8021a86 <mg_ws_cb+0x196>
 8021a1a:	f107 0318 	add.w	r3, r7, #24
 8021a1e:	461a      	mov	r2, r3
 8021a20:	210d      	movs	r1, #13
 8021a22:	6978      	ldr	r0, [r7, #20]
 8021a24:	f7e6 fc46 	bl	80082b4 <mg_call>
          break;
 8021a28:	e02d      	b.n	8021a86 <mg_ws_cb+0x196>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 8021a2a:	4b58      	ldr	r3, [pc, #352]	@ (8021b8c <mg_ws_cb+0x29c>)
 8021a2c:	681b      	ldr	r3, [r3, #0]
 8021a2e:	2b02      	cmp	r3, #2
 8021a30:	dd0c      	ble.n	8021a4c <mg_ws_cb+0x15c>
 8021a32:	4b57      	ldr	r3, [pc, #348]	@ (8021b90 <mg_ws_cb+0x2a0>)
 8021a34:	f644 62a4 	movw	r2, #20132	@ 0x4ea4
 8021a38:	4956      	ldr	r1, [pc, #344]	@ (8021b94 <mg_ws_cb+0x2a4>)
 8021a3a:	2003      	movs	r0, #3
 8021a3c:	f7ec f986 	bl	800dd4c <mg_log_prefix>
 8021a40:	697b      	ldr	r3, [r7, #20]
 8021a42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021a44:	4619      	mov	r1, r3
 8021a46:	4856      	ldr	r0, [pc, #344]	@ (8021ba0 <mg_ws_cb+0x2b0>)
 8021a48:	f7ec f9d0 	bl	800ddec <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 8021a4c:	f107 0318 	add.w	r3, r7, #24
 8021a50:	461a      	mov	r2, r3
 8021a52:	210e      	movs	r1, #14
 8021a54:	6978      	ldr	r0, [r7, #20]
 8021a56:	f7e6 fc2d 	bl	80082b4 <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.buf, m.data.len, WEBSOCKET_OP_CLOSE);
 8021a5a:	69b9      	ldr	r1, [r7, #24]
 8021a5c:	69fa      	ldr	r2, [r7, #28]
 8021a5e:	2308      	movs	r3, #8
 8021a60:	6978      	ldr	r0, [r7, #20]
 8021a62:	f7ff fe55 	bl	8021710 <mg_ws_send>
          c->is_draining = 1;
 8021a66:	697a      	ldr	r2, [r7, #20]
 8021a68:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021a6c:	f043 0310 	orr.w	r3, r3, #16
 8021a70:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 8021a74:	e008      	b.n	8021a88 <mg_ws_cb+0x198>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 8021a76:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8021a7a:	461a      	mov	r2, r3
 8021a7c:	4949      	ldr	r1, [pc, #292]	@ (8021ba4 <mg_ws_cb+0x2b4>)
 8021a7e:	6978      	ldr	r0, [r7, #20]
 8021a80:	f7e6 fc38 	bl	80082f4 <mg_error>
          break;
 8021a84:	e000      	b.n	8021a88 <mg_ws_cb+0x198>
          break;
 8021a86:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 8021a88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d003      	beq.n	8021a98 <mg_ws_cb+0x1a8>
 8021a90:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8021a94:	2b00      	cmp	r3, #0
 8021a96:	d11f      	bne.n	8021ad8 <mg_ws_cb+0x1e8>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 8021a98:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8021a9c:	2b00      	cmp	r3, #0
 8021a9e:	d008      	beq.n	8021ab2 <mg_ws_cb+0x1c2>
 8021aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021aa2:	3301      	adds	r3, #1
 8021aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8021aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021aa8:	3b01      	subs	r3, #1
 8021aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8021aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021aae:	3b01      	subs	r3, #1
 8021ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 8021ab2:	697b      	ldr	r3, [r7, #20]
 8021ab4:	3338      	adds	r3, #56	@ 0x38
 8021ab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8021ab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021aba:	4618      	mov	r0, r3
 8021abc:	f7eb fa7a 	bl	800cfb4 <mg_iobuf_del>
        len -= msg.header_len;
 8021ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021ac2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021ac4:	1ad3      	subs	r3, r2, r3
 8021ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
        ofs += len;
 8021ac8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8021aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021acc:	4413      	add	r3, r2
 8021ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = (void *) ofs;
 8021ad0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8021ad2:	697b      	ldr	r3, [r7, #20]
 8021ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 8021ad8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8021adc:	2b00      	cmp	r3, #0
 8021ade:	d00a      	beq.n	8021af6 <mg_ws_cb+0x206>
 8021ae0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8021ae4:	2b00      	cmp	r3, #0
 8021ae6:	d006      	beq.n	8021af6 <mg_ws_cb+0x206>
 8021ae8:	697b      	ldr	r3, [r7, #20]
 8021aea:	3338      	adds	r3, #56	@ 0x38
 8021aec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021aee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021af0:	4618      	mov	r0, r3
 8021af2:	f7eb fa5f 	bl	800cfb4 <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op && (ofs > 0)) {
 8021af6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8021afa:	2b00      	cmp	r3, #0
 8021afc:	d02f      	beq.n	8021b5e <mg_ws_cb+0x26e>
 8021afe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d12b      	bne.n	8021b5e <mg_ws_cb+0x26e>
 8021b06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b08:	2b00      	cmp	r3, #0
 8021b0a:	d028      	beq.n	8021b5e <mg_ws_cb+0x26e>
        m.flags = c->recv.buf[0];
 8021b0c:	697b      	ldr	r3, [r7, #20]
 8021b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b10:	781b      	ldrb	r3, [r3, #0]
 8021b12:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 8021b16:	697b      	ldr	r3, [r7, #20]
 8021b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8021b1a:	1c59      	adds	r1, r3, #1
 8021b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b1e:	1e5a      	subs	r2, r3, #1
 8021b20:	463b      	mov	r3, r7
 8021b22:	4618      	mov	r0, r3
 8021b24:	f7f4 f92f 	bl	8015d86 <mg_str_n>
 8021b28:	f107 0318 	add.w	r3, r7, #24
 8021b2c:	463a      	mov	r2, r7
 8021b2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021b32:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 8021b36:	f107 0318 	add.w	r3, r7, #24
 8021b3a:	461a      	mov	r2, r3
 8021b3c:	210d      	movs	r1, #13
 8021b3e:	6978      	ldr	r0, [r7, #20]
 8021b40:	f7e6 fbb8 	bl	80082b4 <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 8021b44:	697b      	ldr	r3, [r7, #20]
 8021b46:	3338      	adds	r3, #56	@ 0x38
 8021b48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8021b4a:	2100      	movs	r1, #0
 8021b4c:	4618      	mov	r0, r3
 8021b4e:	f7eb fa31 	bl	800cfb4 <mg_iobuf_del>
        ofs = 0;
 8021b52:	2300      	movs	r3, #0
 8021b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = NULL;
 8021b56:	697b      	ldr	r3, [r7, #20]
 8021b58:	2200      	movs	r2, #0
 8021b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 8021b5e:	697b      	ldr	r3, [r7, #20]
 8021b60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b64:	18d0      	adds	r0, r2, r3
 8021b66:	697b      	ldr	r3, [r7, #20]
 8021b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021b6c:	1ad3      	subs	r3, r2, r3
 8021b6e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8021b72:	4619      	mov	r1, r3
 8021b74:	f7ff fc76 	bl	8021464 <ws_process>
 8021b78:	4603      	mov	r3, r0
 8021b7a:	2b00      	cmp	r3, #0
 8021b7c:	f47f aee0 	bne.w	8021940 <mg_ws_cb+0x50>
 8021b80:	e000      	b.n	8021b84 <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 8021b82:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 8021b84:	3740      	adds	r7, #64	@ 0x40
 8021b86:	46bd      	mov	sp, r7
 8021b88:	bd80      	pop	{r7, pc}
 8021b8a:	bf00      	nop
 8021b8c:	24000258 	.word	0x24000258
 8021b90:	0802a434 	.word	0x0802a434
 8021b94:	080264c4 	.word	0x080264c4
 8021b98:	08028d94 	.word	0x08028d94
 8021b9c:	08026790 	.word	0x08026790
 8021ba0:	08028d9c 	.word	0x08028d9c
 8021ba4:	08028dac 	.word	0x08028dac

08021ba8 <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 8021ba8:	b40c      	push	{r2, r3}
 8021baa:	b580      	push	{r7, lr}
 8021bac:	b088      	sub	sp, #32
 8021bae:	af02      	add	r7, sp, #8
 8021bb0:	6078      	str	r0, [r7, #4]
 8021bb2:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 8021bb4:	4924      	ldr	r1, [pc, #144]	@ (8021c48 <mg_ws_upgrade+0xa0>)
 8021bb6:	6838      	ldr	r0, [r7, #0]
 8021bb8:	f7e8 faa6 	bl	800a108 <mg_http_get_header>
 8021bbc:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 8021bbe:	687b      	ldr	r3, [r7, #4]
 8021bc0:	4a22      	ldr	r2, [pc, #136]	@ (8021c4c <mg_ws_upgrade+0xa4>)
 8021bc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->pfn_data = NULL;
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	2200      	movs	r2, #0
 8021bca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  if (wskey == NULL) {
 8021bce:	697b      	ldr	r3, [r7, #20]
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	d10e      	bne.n	8021bf2 <mg_ws_upgrade+0x4a>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 8021bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8021c50 <mg_ws_upgrade+0xa8>)
 8021bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8021c54 <mg_ws_upgrade+0xac>)
 8021bd8:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8021bdc:	6878      	ldr	r0, [r7, #4]
 8021bde:	f7e9 fb09 	bl	800b1f4 <mg_http_reply>
    c->is_draining = 1;
 8021be2:	687a      	ldr	r2, [r7, #4]
 8021be4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021be8:	f043 0310 	orr.w	r3, r3, #16
 8021bec:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 8021bf0:	e023      	b.n	8021c3a <mg_ws_upgrade+0x92>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 8021bf2:	4919      	ldr	r1, [pc, #100]	@ (8021c58 <mg_ws_upgrade+0xb0>)
 8021bf4:	6838      	ldr	r0, [r7, #0]
 8021bf6:	f7e8 fa87 	bl	800a108 <mg_http_get_header>
 8021bfa:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 8021bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021c00:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 8021c02:	f107 030c 	add.w	r3, r7, #12
 8021c06:	9300      	str	r3, [sp, #0]
 8021c08:	6a3b      	ldr	r3, [r7, #32]
 8021c0a:	693a      	ldr	r2, [r7, #16]
 8021c0c:	6979      	ldr	r1, [r7, #20]
 8021c0e:	6878      	ldr	r0, [r7, #4]
 8021c10:	f7ff fba8 	bl	8021364 <ws_handshake>
    c->is_websocket = 1;
 8021c14:	687a      	ldr	r2, [r7, #4]
 8021c16:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021c1a:	f043 0302 	orr.w	r3, r3, #2
 8021c1e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->is_resp = 0;
 8021c22:	687a      	ldr	r2, [r7, #4]
 8021c24:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 8021c28:	f023 0301 	bic.w	r3, r3, #1
 8021c2c:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    mg_call(c, MG_EV_WS_OPEN, hm);
 8021c30:	683a      	ldr	r2, [r7, #0]
 8021c32:	210c      	movs	r1, #12
 8021c34:	6878      	ldr	r0, [r7, #4]
 8021c36:	f7e6 fb3d 	bl	80082b4 <mg_call>
}
 8021c3a:	bf00      	nop
 8021c3c:	3718      	adds	r7, #24
 8021c3e:	46bd      	mov	sp, r7
 8021c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021c44:	b002      	add	sp, #8
 8021c46:	4770      	bx	lr
 8021c48:	08028e3c 	.word	0x08028e3c
 8021c4c:	080218f1 	.word	0x080218f1
 8021c50:	08028e50 	.word	0x08028e50
 8021c54:	08026d04 	.word	0x08026d04
 8021c58:	08028e68 	.word	0x08028e68

08021c5c <mg_ws_wrap>:

size_t mg_ws_wrap(struct mg_connection *c, size_t len, int op) {
 8021c5c:	b580      	push	{r7, lr}
 8021c5e:	b08a      	sub	sp, #40	@ 0x28
 8021c60:	af00      	add	r7, sp, #0
 8021c62:	60f8      	str	r0, [r7, #12]
 8021c64:	60b9      	str	r1, [r7, #8]
 8021c66:	607a      	str	r2, [r7, #4]
  uint8_t header[14], *p;
  size_t header_len = mkhdr(len, op, c->is_client, header);
 8021c68:	68fb      	ldr	r3, [r7, #12]
 8021c6a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8021c6e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8021c72:	b2db      	uxtb	r3, r3
 8021c74:	2b00      	cmp	r3, #0
 8021c76:	bf14      	ite	ne
 8021c78:	2301      	movne	r3, #1
 8021c7a:	2300      	moveq	r3, #0
 8021c7c:	b2da      	uxtb	r2, r3
 8021c7e:	f107 0310 	add.w	r3, r7, #16
 8021c82:	6879      	ldr	r1, [r7, #4]
 8021c84:	68b8      	ldr	r0, [r7, #8]
 8021c86:	f7ff fc95 	bl	80215b4 <mkhdr>
 8021c8a:	6278      	str	r0, [r7, #36]	@ 0x24

  // NOTE: order of operations is important!
  if (mg_iobuf_add(&c->send, c->send.len, NULL, header_len) != 0) {
 8021c8c:	68fb      	ldr	r3, [r7, #12]
 8021c8e:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 8021c92:	68fb      	ldr	r3, [r7, #12]
 8021c94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8021c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021c98:	2200      	movs	r2, #0
 8021c9a:	f7eb f939 	bl	800cf10 <mg_iobuf_add>
 8021c9e:	4603      	mov	r3, r0
 8021ca0:	2b00      	cmp	r3, #0
 8021ca2:	d01e      	beq.n	8021ce2 <mg_ws_wrap+0x86>
    p = &c->send.buf[c->send.len - len];         // p points to data
 8021ca4:	68fb      	ldr	r3, [r7, #12]
 8021ca6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8021ca8:	68fb      	ldr	r3, [r7, #12]
 8021caa:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8021cac:	68bb      	ldr	r3, [r7, #8]
 8021cae:	1acb      	subs	r3, r1, r3
 8021cb0:	4413      	add	r3, r2
 8021cb2:	623b      	str	r3, [r7, #32]
    memmove(p, p - header_len, len);             // Shift data
 8021cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021cb6:	425b      	negs	r3, r3
 8021cb8:	6a3a      	ldr	r2, [r7, #32]
 8021cba:	4413      	add	r3, r2
 8021cbc:	68ba      	ldr	r2, [r7, #8]
 8021cbe:	4619      	mov	r1, r3
 8021cc0:	6a38      	ldr	r0, [r7, #32]
 8021cc2:	f003 fd49 	bl	8025758 <memmove>
    memcpy(p - header_len, header, header_len);  // Prepend header
 8021cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021cc8:	425b      	negs	r3, r3
 8021cca:	6a3a      	ldr	r2, [r7, #32]
 8021ccc:	4413      	add	r3, r2
 8021cce:	f107 0110 	add.w	r1, r7, #16
 8021cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021cd4:	4618      	mov	r0, r3
 8021cd6:	f003 fe8e 	bl	80259f6 <memcpy>
    mg_ws_mask(c, len);                          // Mask data
 8021cda:	68b9      	ldr	r1, [r7, #8]
 8021cdc:	68f8      	ldr	r0, [r7, #12]
 8021cde:	f7ff fcda 	bl	8021696 <mg_ws_mask>
  }
  return c->send.len;
 8021ce2:	68fb      	ldr	r3, [r7, #12]
 8021ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 8021ce6:	4618      	mov	r0, r3
 8021ce8:	3728      	adds	r7, #40	@ 0x28
 8021cea:	46bd      	mov	sp, r7
 8021cec:	bd80      	pop	{r7, pc}
	...

08021cf0 <mg_phy_id_to_str>:
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31,
  MG_PHY_ICS189432_REG_POLL = 17
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 8021cf0:	b480      	push	{r7}
 8021cf2:	b083      	sub	sp, #12
 8021cf4:	af00      	add	r7, sp, #0
 8021cf6:	4603      	mov	r3, r0
 8021cf8:	460a      	mov	r2, r1
 8021cfa:	80fb      	strh	r3, [r7, #6]
 8021cfc:	4613      	mov	r3, r2
 8021cfe:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 8021d00:	88fb      	ldrh	r3, [r7, #6]
 8021d02:	2b22      	cmp	r3, #34	@ 0x22
 8021d04:	dc40      	bgt.n	8021d88 <mg_phy_id_to_str+0x98>
 8021d06:	2b07      	cmp	r3, #7
 8021d08:	db63      	blt.n	8021dd2 <mg_phy_id_to_str+0xe2>
 8021d0a:	3b07      	subs	r3, #7
 8021d0c:	2b1b      	cmp	r3, #27
 8021d0e:	d860      	bhi.n	8021dd2 <mg_phy_id_to_str+0xe2>
 8021d10:	a201      	add	r2, pc, #4	@ (adr r2, 8021d18 <mg_phy_id_to_str+0x28>)
 8021d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d16:	bf00      	nop
 8021d18:	08021dc7 	.word	0x08021dc7
 8021d1c:	08021dd3 	.word	0x08021dd3
 8021d20:	08021dd3 	.word	0x08021dd3
 8021d24:	08021dd3 	.word	0x08021dd3
 8021d28:	08021dd3 	.word	0x08021dd3
 8021d2c:	08021dd3 	.word	0x08021dd3
 8021d30:	08021dd3 	.word	0x08021dd3
 8021d34:	08021dd3 	.word	0x08021dd3
 8021d38:	08021dd3 	.word	0x08021dd3
 8021d3c:	08021dd3 	.word	0x08021dd3
 8021d40:	08021dd3 	.word	0x08021dd3
 8021d44:	08021dd3 	.word	0x08021dd3
 8021d48:	08021dd3 	.word	0x08021dd3
 8021d4c:	08021dd3 	.word	0x08021dd3
 8021d50:	08021dcf 	.word	0x08021dcf
 8021d54:	08021dd3 	.word	0x08021dd3
 8021d58:	08021dd3 	.word	0x08021dd3
 8021d5c:	08021dd3 	.word	0x08021dd3
 8021d60:	08021dd3 	.word	0x08021dd3
 8021d64:	08021dd3 	.word	0x08021dd3
 8021d68:	08021dd3 	.word	0x08021dd3
 8021d6c:	08021dcb 	.word	0x08021dcb
 8021d70:	08021dd3 	.word	0x08021dd3
 8021d74:	08021dd3 	.word	0x08021dd3
 8021d78:	08021dd3 	.word	0x08021dd3
 8021d7c:	08021dd3 	.word	0x08021dd3
 8021d80:	08021dd3 	.word	0x08021dd3
 8021d84:	08021dc3 	.word	0x08021dc3
 8021d88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021d8c:	d121      	bne.n	8021dd2 <mg_phy_id_to_str+0xe2>
    case MG_PHY_DP83x:
      switch (id2) {
 8021d8e:	88bb      	ldrh	r3, [r7, #4]
 8021d90:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8021d94:	4293      	cmp	r3, r2
 8021d96:	d00c      	beq.n	8021db2 <mg_phy_id_to_str+0xc2>
 8021d98:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8021d9c:	4293      	cmp	r3, r2
 8021d9e:	dc0e      	bgt.n	8021dbe <mg_phy_id_to_str+0xce>
 8021da0:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8021da4:	4293      	cmp	r3, r2
 8021da6:	d006      	beq.n	8021db6 <mg_phy_id_to_str+0xc6>
 8021da8:	f24a 1240 	movw	r2, #41280	@ 0xa140
 8021dac:	4293      	cmp	r3, r2
 8021dae:	d004      	beq.n	8021dba <mg_phy_id_to_str+0xca>
 8021db0:	e005      	b.n	8021dbe <mg_phy_id_to_str+0xce>
        case MG_PHY_DP83867:
          return "DP83867";
 8021db2:	4b0b      	ldr	r3, [pc, #44]	@ (8021de0 <mg_phy_id_to_str+0xf0>)
 8021db4:	e00e      	b.n	8021dd4 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83848:
          return "DP83848";
 8021db6:	4b0b      	ldr	r3, [pc, #44]	@ (8021de4 <mg_phy_id_to_str+0xf4>)
 8021db8:	e00c      	b.n	8021dd4 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83825:
          return "DP83825";
 8021dba:	4b0b      	ldr	r3, [pc, #44]	@ (8021de8 <mg_phy_id_to_str+0xf8>)
 8021dbc:	e00a      	b.n	8021dd4 <mg_phy_id_to_str+0xe4>
        default:
          return "DP83x";
 8021dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8021dec <mg_phy_id_to_str+0xfc>)
 8021dc0:	e008      	b.n	8021dd4 <mg_phy_id_to_str+0xe4>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 8021dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8021df0 <mg_phy_id_to_str+0x100>)
 8021dc4:	e006      	b.n	8021dd4 <mg_phy_id_to_str+0xe4>
    case MG_PHY_LAN87x:
      return "LAN87x";
 8021dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8021df4 <mg_phy_id_to_str+0x104>)
 8021dc8:	e004      	b.n	8021dd4 <mg_phy_id_to_str+0xe4>
    case MG_PHY_RTL8201:
      return "RTL8201";
 8021dca:	4b0b      	ldr	r3, [pc, #44]	@ (8021df8 <mg_phy_id_to_str+0x108>)
 8021dcc:	e002      	b.n	8021dd4 <mg_phy_id_to_str+0xe4>
    case MG_PHY_ICS1894x:
      return "ICS1894x";
 8021dce:	4b0b      	ldr	r3, [pc, #44]	@ (8021dfc <mg_phy_id_to_str+0x10c>)
 8021dd0:	e000      	b.n	8021dd4 <mg_phy_id_to_str+0xe4>
    default:
      return "unknown";
 8021dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8021e00 <mg_phy_id_to_str+0x110>)
  }
  (void) id2;
}
 8021dd4:	4618      	mov	r0, r3
 8021dd6:	370c      	adds	r7, #12
 8021dd8:	46bd      	mov	sp, r7
 8021dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dde:	4770      	bx	lr
 8021de0:	08028e80 	.word	0x08028e80
 8021de4:	08028e88 	.word	0x08028e88
 8021de8:	08028e90 	.word	0x08028e90
 8021dec:	08028e98 	.word	0x08028e98
 8021df0:	08028ea0 	.word	0x08028ea0
 8021df4:	08028ea8 	.word	0x08028ea8
 8021df8:	08028eb0 	.word	0x08028eb0
 8021dfc:	08028eb8 	.word	0x08028eb8
 8021e00:	08028ec4 	.word	0x08028ec4

08021e04 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8021e04:	b5b0      	push	{r4, r5, r7, lr}
 8021e06:	b084      	sub	sp, #16
 8021e08:	af00      	add	r7, sp, #0
 8021e0a:	6078      	str	r0, [r7, #4]
 8021e0c:	460b      	mov	r3, r1
 8021e0e:	70fb      	strb	r3, [r7, #3]
 8021e10:	4613      	mov	r3, r2
 8021e12:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8021e14:	687b      	ldr	r3, [r7, #4]
 8021e16:	685b      	ldr	r3, [r3, #4]
 8021e18:	78f8      	ldrb	r0, [r7, #3]
 8021e1a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8021e1e:	2100      	movs	r1, #0
 8021e20:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 8021e22:	bf00      	nop
 8021e24:	687b      	ldr	r3, [r7, #4]
 8021e26:	681b      	ldr	r3, [r3, #0]
 8021e28:	78fa      	ldrb	r2, [r7, #3]
 8021e2a:	2100      	movs	r1, #0
 8021e2c:	4610      	mov	r0, r2
 8021e2e:	4798      	blx	r3
 8021e30:	4603      	mov	r3, r0
 8021e32:	b21b      	sxth	r3, r3
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	dbf5      	blt.n	8021e24 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8021e38:	687b      	ldr	r3, [r7, #4]
 8021e3a:	681b      	ldr	r3, [r3, #0]
 8021e3c:	78fa      	ldrb	r2, [r7, #3]
 8021e3e:	2102      	movs	r1, #2
 8021e40:	4610      	mov	r0, r2
 8021e42:	4798      	blx	r3
 8021e44:	4603      	mov	r3, r0
 8021e46:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	681b      	ldr	r3, [r3, #0]
 8021e4c:	78fa      	ldrb	r2, [r7, #3]
 8021e4e:	2103      	movs	r1, #3
 8021e50:	4610      	mov	r0, r2
 8021e52:	4798      	blx	r3
 8021e54:	4603      	mov	r3, r0
 8021e56:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 8021e58:	4b42      	ldr	r3, [pc, #264]	@ (8021f64 <mg_phy_init+0x160>)
 8021e5a:	681b      	ldr	r3, [r3, #0]
 8021e5c:	2b01      	cmp	r3, #1
 8021e5e:	dd14      	ble.n	8021e8a <mg_phy_init+0x86>
 8021e60:	4b41      	ldr	r3, [pc, #260]	@ (8021f68 <mg_phy_init+0x164>)
 8021e62:	f245 6224 	movw	r2, #22052	@ 0x5624
 8021e66:	4941      	ldr	r1, [pc, #260]	@ (8021f6c <mg_phy_init+0x168>)
 8021e68:	2002      	movs	r0, #2
 8021e6a:	f7eb ff6f 	bl	800dd4c <mg_log_prefix>
 8021e6e:	89fc      	ldrh	r4, [r7, #14]
 8021e70:	89bd      	ldrh	r5, [r7, #12]
 8021e72:	89ba      	ldrh	r2, [r7, #12]
 8021e74:	89fb      	ldrh	r3, [r7, #14]
 8021e76:	4611      	mov	r1, r2
 8021e78:	4618      	mov	r0, r3
 8021e7a:	f7ff ff39 	bl	8021cf0 <mg_phy_id_to_str>
 8021e7e:	4603      	mov	r3, r0
 8021e80:	462a      	mov	r2, r5
 8021e82:	4621      	mov	r1, r4
 8021e84:	483a      	ldr	r0, [pc, #232]	@ (8021f70 <mg_phy_init+0x16c>)
 8021e86:	f7eb ffb1 	bl	800ddec <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 8021e8a:	89fb      	ldrh	r3, [r7, #14]
 8021e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021e90:	d11f      	bne.n	8021ed2 <mg_phy_init+0xce>
 8021e92:	89bb      	ldrh	r3, [r7, #12]
 8021e94:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8021e98:	4293      	cmp	r3, r2
 8021e9a:	d11a      	bne.n	8021ed2 <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 8021e9c:	687b      	ldr	r3, [r7, #4]
 8021e9e:	685b      	ldr	r3, [r3, #4]
 8021ea0:	78f8      	ldrb	r0, [r7, #3]
 8021ea2:	221f      	movs	r2, #31
 8021ea4:	210d      	movs	r1, #13
 8021ea6:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 8021ea8:	687b      	ldr	r3, [r7, #4]
 8021eaa:	685b      	ldr	r3, [r3, #4]
 8021eac:	78f8      	ldrb	r0, [r7, #3]
 8021eae:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8021eb2:	210e      	movs	r1, #14
 8021eb4:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	685b      	ldr	r3, [r3, #4]
 8021eba:	78f8      	ldrb	r0, [r7, #3]
 8021ebc:	f244 021f 	movw	r2, #16415	@ 0x401f
 8021ec0:	210d      	movs	r1, #13
 8021ec2:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 8021ec4:	687b      	ldr	r3, [r7, #4]
 8021ec6:	685b      	ldr	r3, [r3, #4]
 8021ec8:	78f8      	ldrb	r0, [r7, #3]
 8021eca:	f240 120d 	movw	r2, #269	@ 0x10d
 8021ece:	210e      	movs	r1, #14
 8021ed0:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 8021ed2:	78bb      	ldrb	r3, [r7, #2]
 8021ed4:	f003 0302 	and.w	r3, r3, #2
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	d12e      	bne.n	8021f3a <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8021edc:	89fb      	ldrh	r3, [r7, #14]
 8021ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021ee2:	d110      	bne.n	8021f06 <mg_phy_init+0x102>
 8021ee4:	89bb      	ldrh	r3, [r7, #12]
 8021ee6:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8021eea:	4293      	cmp	r3, r2
 8021eec:	d00b      	beq.n	8021f06 <mg_phy_init+0x102>
 8021eee:	89bb      	ldrh	r3, [r7, #12]
 8021ef0:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8021ef4:	4293      	cmp	r3, r2
 8021ef6:	d006      	beq.n	8021f06 <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	685b      	ldr	r3, [r3, #4]
 8021efc:	78f8      	ldrb	r0, [r7, #3]
 8021efe:	2281      	movs	r2, #129	@ 0x81
 8021f00:	2117      	movs	r1, #23
 8021f02:	4798      	blx	r3
 8021f04:	e019      	b.n	8021f3a <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 8021f06:	89fb      	ldrh	r3, [r7, #14]
 8021f08:	2b22      	cmp	r3, #34	@ 0x22
 8021f0a:	d116      	bne.n	8021f3a <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 8021f10:	687b      	ldr	r3, [r7, #4]
 8021f12:	681b      	ldr	r3, [r3, #0]
 8021f14:	78fa      	ldrb	r2, [r7, #3]
 8021f16:	2100      	movs	r1, #0
 8021f18:	4610      	mov	r0, r2
 8021f1a:	4798      	blx	r3
 8021f1c:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8021f1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8021f22:	b29a      	uxth	r2, r3
 8021f24:	78fb      	ldrb	r3, [r7, #3]
 8021f26:	2100      	movs	r1, #0
 8021f28:	4618      	mov	r0, r3
 8021f2a:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8021f2c:	687b      	ldr	r3, [r7, #4]
 8021f2e:	685b      	ldr	r3, [r3, #4]
 8021f30:	78f8      	ldrb	r0, [r7, #3]
 8021f32:	f248 1280 	movw	r2, #33152	@ 0x8180
 8021f36:	211f      	movs	r1, #31
 8021f38:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 8021f3a:	78bb      	ldrb	r3, [r7, #2]
 8021f3c:	f003 0301 	and.w	r3, r3, #1
 8021f40:	2b00      	cmp	r3, #0
 8021f42:	d00a      	beq.n	8021f5a <mg_phy_init+0x156>
 8021f44:	89fb      	ldrh	r3, [r7, #14]
 8021f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8021f4a:	d106      	bne.n	8021f5a <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	685b      	ldr	r3, [r3, #4]
 8021f50:	78f8      	ldrb	r0, [r7, #3]
 8021f52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8021f56:	2118      	movs	r1, #24
 8021f58:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 8021f5a:	bf00      	nop
 8021f5c:	3710      	adds	r7, #16
 8021f5e:	46bd      	mov	sp, r7
 8021f60:	bdb0      	pop	{r4, r5, r7, pc}
 8021f62:	bf00      	nop
 8021f64:	24000258 	.word	0x24000258
 8021f68:	0802a440 	.word	0x0802a440
 8021f6c:	080264c4 	.word	0x080264c4
 8021f70:	08028ecc 	.word	0x08028ecc

08021f74 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 8021f74:	b580      	push	{r7, lr}
 8021f76:	b08a      	sub	sp, #40	@ 0x28
 8021f78:	af00      	add	r7, sp, #0
 8021f7a:	60f8      	str	r0, [r7, #12]
 8021f7c:	607a      	str	r2, [r7, #4]
 8021f7e:	603b      	str	r3, [r7, #0]
 8021f80:	460b      	mov	r3, r1
 8021f82:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 8021f84:	2300      	movs	r3, #0
 8021f86:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 8021f8a:	68fb      	ldr	r3, [r7, #12]
 8021f8c:	681b      	ldr	r3, [r3, #0]
 8021f8e:	7afa      	ldrb	r2, [r7, #11]
 8021f90:	2101      	movs	r1, #1
 8021f92:	4610      	mov	r0, r2
 8021f94:	4798      	blx	r3
 8021f96:	4603      	mov	r3, r0
 8021f98:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8021f9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8021f9c:	f003 0320 	and.w	r3, r3, #32
 8021fa0:	2b00      	cmp	r3, #0
 8021fa2:	d00c      	beq.n	8021fbe <mg_phy_up+0x4a>
 8021fa4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8021fa6:	f003 0304 	and.w	r3, r3, #4
 8021faa:	2b00      	cmp	r3, #0
 8021fac:	d107      	bne.n	8021fbe <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 8021fae:	68fb      	ldr	r3, [r7, #12]
 8021fb0:	681b      	ldr	r3, [r3, #0]
 8021fb2:	7afa      	ldrb	r2, [r7, #11]
 8021fb4:	2101      	movs	r1, #1
 8021fb6:	4610      	mov	r0, r2
 8021fb8:	4798      	blx	r3
 8021fba:	4603      	mov	r3, r0
 8021fbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 8021fbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8021fc0:	f003 0304 	and.w	r3, r3, #4
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	bf14      	ite	ne
 8021fc8:	2301      	movne	r3, #1
 8021fca:	2300      	moveq	r3, #0
 8021fcc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 8021fd0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	f000 80dc 	beq.w	8022192 <mg_phy_up+0x21e>
 8021fda:	687b      	ldr	r3, [r7, #4]
 8021fdc:	2b00      	cmp	r3, #0
 8021fde:	f000 80d8 	beq.w	8022192 <mg_phy_up+0x21e>
 8021fe2:	683b      	ldr	r3, [r7, #0]
 8021fe4:	2b00      	cmp	r3, #0
 8021fe6:	f000 80d4 	beq.w	8022192 <mg_phy_up+0x21e>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8021fea:	68fb      	ldr	r3, [r7, #12]
 8021fec:	681b      	ldr	r3, [r3, #0]
 8021fee:	7afa      	ldrb	r2, [r7, #11]
 8021ff0:	2102      	movs	r1, #2
 8021ff2:	4610      	mov	r0, r2
 8021ff4:	4798      	blx	r3
 8021ff6:	4603      	mov	r3, r0
 8021ff8:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8021ffa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8021ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8022000:	d14b      	bne.n	802209a <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 8022002:	68fb      	ldr	r3, [r7, #12]
 8022004:	681b      	ldr	r3, [r3, #0]
 8022006:	7afa      	ldrb	r2, [r7, #11]
 8022008:	2103      	movs	r1, #3
 802200a:	4610      	mov	r0, r2
 802200c:	4798      	blx	r3
 802200e:	4603      	mov	r3, r0
 8022010:	833b      	strh	r3, [r7, #24]
      if (id2 == MG_PHY_DP83867) {
 8022012:	8b3b      	ldrh	r3, [r7, #24]
 8022014:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8022018:	4293      	cmp	r3, r2
 802201a:	d120      	bne.n	802205e <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 802201c:	68fb      	ldr	r3, [r7, #12]
 802201e:	681b      	ldr	r3, [r3, #0]
 8022020:	7afa      	ldrb	r2, [r7, #11]
 8022022:	2111      	movs	r1, #17
 8022024:	4610      	mov	r0, r2
 8022026:	4798      	blx	r3
 8022028:	4603      	mov	r3, r0
 802202a:	82bb      	strh	r3, [r7, #20]
        *full_duplex = physts & MG_BIT(13);
 802202c:	8abb      	ldrh	r3, [r7, #20]
 802202e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022032:	2b00      	cmp	r3, #0
 8022034:	bf14      	ite	ne
 8022036:	2301      	movne	r3, #1
 8022038:	2300      	moveq	r3, #0
 802203a:	b2da      	uxtb	r2, r3
 802203c:	687b      	ldr	r3, [r7, #4]
 802203e:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 8022040:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8022044:	2b00      	cmp	r3, #0
 8022046:	db06      	blt.n	8022056 <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 8022048:	8abb      	ldrh	r3, [r7, #20]
 802204a:	0b9b      	lsrs	r3, r3, #14
 802204c:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 802204e:	f003 0301 	and.w	r3, r3, #1
 8022052:	b2da      	uxtb	r2, r3
 8022054:	e000      	b.n	8022058 <mg_phy_up+0xe4>
 8022056:	2202      	movs	r2, #2
 8022058:	683b      	ldr	r3, [r7, #0]
 802205a:	701a      	strb	r2, [r3, #0]
 802205c:	e099      	b.n	8022192 <mg_phy_up+0x21e>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 802205e:	68fb      	ldr	r3, [r7, #12]
 8022060:	681b      	ldr	r3, [r3, #0]
 8022062:	7afa      	ldrb	r2, [r7, #11]
 8022064:	2110      	movs	r1, #16
 8022066:	4610      	mov	r0, r2
 8022068:	4798      	blx	r3
 802206a:	4603      	mov	r3, r0
 802206c:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(2);
 802206e:	8afb      	ldrh	r3, [r7, #22]
 8022070:	f003 0304 	and.w	r3, r3, #4
 8022074:	2b00      	cmp	r3, #0
 8022076:	bf14      	ite	ne
 8022078:	2301      	movne	r3, #1
 802207a:	2300      	moveq	r3, #0
 802207c:	b2da      	uxtb	r2, r3
 802207e:	687b      	ldr	r3, [r7, #4]
 8022080:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8022082:	8afb      	ldrh	r3, [r7, #22]
 8022084:	f003 0302 	and.w	r3, r3, #2
 8022088:	2b00      	cmp	r3, #0
 802208a:	bf0c      	ite	eq
 802208c:	2301      	moveq	r3, #1
 802208e:	2300      	movne	r3, #0
 8022090:	b2db      	uxtb	r3, r3
 8022092:	461a      	mov	r2, r3
 8022094:	683b      	ldr	r3, [r7, #0]
 8022096:	701a      	strb	r2, [r3, #0]
 8022098:	e07b      	b.n	8022192 <mg_phy_up+0x21e>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 802209a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802209c:	2b22      	cmp	r3, #34	@ 0x22
 802209e:	d11d      	bne.n	80220dc <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	681b      	ldr	r3, [r3, #0]
 80220a4:	7afa      	ldrb	r2, [r7, #11]
 80220a6:	211e      	movs	r1, #30
 80220a8:	4610      	mov	r0, r2
 80220aa:	4798      	blx	r3
 80220ac:	4603      	mov	r3, r0
 80220ae:	837b      	strh	r3, [r7, #26]
      *full_duplex = pc1r & MG_BIT(2);
 80220b0:	8b7b      	ldrh	r3, [r7, #26]
 80220b2:	f003 0304 	and.w	r3, r3, #4
 80220b6:	2b00      	cmp	r3, #0
 80220b8:	bf14      	ite	ne
 80220ba:	2301      	movne	r3, #1
 80220bc:	2300      	moveq	r3, #0
 80220be:	b2da      	uxtb	r2, r3
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 80220c4:	8b7b      	ldrh	r3, [r7, #26]
 80220c6:	f003 0303 	and.w	r3, r3, #3
 80220ca:	2b01      	cmp	r3, #1
 80220cc:	bf14      	ite	ne
 80220ce:	2301      	movne	r3, #1
 80220d0:	2300      	moveq	r3, #0
 80220d2:	b2db      	uxtb	r3, r3
 80220d4:	461a      	mov	r2, r3
 80220d6:	683b      	ldr	r3, [r7, #0]
 80220d8:	701a      	strb	r2, [r3, #0]
 80220da:	e05a      	b.n	8022192 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_LAN87x) {
 80220dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80220de:	2b07      	cmp	r3, #7
 80220e0:	d11a      	bne.n	8022118 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 80220e2:	68fb      	ldr	r3, [r7, #12]
 80220e4:	681b      	ldr	r3, [r3, #0]
 80220e6:	7afa      	ldrb	r2, [r7, #11]
 80220e8:	211f      	movs	r1, #31
 80220ea:	4610      	mov	r0, r2
 80220ec:	4798      	blx	r3
 80220ee:	4603      	mov	r3, r0
 80220f0:	83bb      	strh	r3, [r7, #28]
      *full_duplex = scsr & MG_BIT(4);
 80220f2:	8bbb      	ldrh	r3, [r7, #28]
 80220f4:	f003 0310 	and.w	r3, r3, #16
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	bf14      	ite	ne
 80220fc:	2301      	movne	r3, #1
 80220fe:	2300      	moveq	r3, #0
 8022100:	b2da      	uxtb	r2, r3
 8022102:	687b      	ldr	r3, [r7, #4]
 8022104:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8022106:	8bbb      	ldrh	r3, [r7, #28]
 8022108:	08db      	lsrs	r3, r3, #3
 802210a:	b2db      	uxtb	r3, r3
 802210c:	f003 0301 	and.w	r3, r3, #1
 8022110:	b2da      	uxtb	r2, r3
 8022112:	683b      	ldr	r3, [r7, #0]
 8022114:	701a      	strb	r2, [r3, #0]
 8022116:	e03c      	b.n	8022192 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_RTL8201) {
 8022118:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802211a:	2b1c      	cmp	r3, #28
 802211c:	d11a      	bne.n	8022154 <mg_phy_up+0x1e0>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 802211e:	68fb      	ldr	r3, [r7, #12]
 8022120:	681b      	ldr	r3, [r3, #0]
 8022122:	7afa      	ldrb	r2, [r7, #11]
 8022124:	2100      	movs	r1, #0
 8022126:	4610      	mov	r0, r2
 8022128:	4798      	blx	r3
 802212a:	4603      	mov	r3, r0
 802212c:	83fb      	strh	r3, [r7, #30]
      *full_duplex = bcr & MG_BIT(8);
 802212e:	8bfb      	ldrh	r3, [r7, #30]
 8022130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8022134:	2b00      	cmp	r3, #0
 8022136:	bf14      	ite	ne
 8022138:	2301      	movne	r3, #1
 802213a:	2300      	moveq	r3, #0
 802213c:	b2da      	uxtb	r2, r3
 802213e:	687b      	ldr	r3, [r7, #4]
 8022140:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8022142:	8bfb      	ldrh	r3, [r7, #30]
 8022144:	0b5b      	lsrs	r3, r3, #13
 8022146:	b2db      	uxtb	r3, r3
 8022148:	f003 0301 	and.w	r3, r3, #1
 802214c:	b2da      	uxtb	r2, r3
 802214e:	683b      	ldr	r3, [r7, #0]
 8022150:	701a      	strb	r2, [r3, #0]
 8022152:	e01e      	b.n	8022192 <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_ICS1894x) {
 8022154:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8022156:	2b15      	cmp	r3, #21
 8022158:	d11b      	bne.n	8022192 <mg_phy_up+0x21e>
      uint16_t poll_reg = phy->read_reg(phy_addr, MG_PHY_ICS189432_REG_POLL);
 802215a:	68fb      	ldr	r3, [r7, #12]
 802215c:	681b      	ldr	r3, [r3, #0]
 802215e:	7afa      	ldrb	r2, [r7, #11]
 8022160:	2111      	movs	r1, #17
 8022162:	4610      	mov	r0, r2
 8022164:	4798      	blx	r3
 8022166:	4603      	mov	r3, r0
 8022168:	843b      	strh	r3, [r7, #32]
      *full_duplex = poll_reg & MG_BIT(14);
 802216a:	8c3b      	ldrh	r3, [r7, #32]
 802216c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022170:	2b00      	cmp	r3, #0
 8022172:	bf14      	ite	ne
 8022174:	2301      	movne	r3, #1
 8022176:	2300      	moveq	r3, #0
 8022178:	b2da      	uxtb	r2, r3
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	701a      	strb	r2, [r3, #0]
      *speed = (poll_reg & MG_BIT(15)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 802217e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022182:	13db      	asrs	r3, r3, #15
 8022184:	b21b      	sxth	r3, r3
 8022186:	b2db      	uxtb	r3, r3
 8022188:	f003 0301 	and.w	r3, r3, #1
 802218c:	b2da      	uxtb	r2, r3
 802218e:	683b      	ldr	r3, [r7, #0]
 8022190:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 8022192:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8022196:	4618      	mov	r0, r3
 8022198:	3728      	adds	r7, #40	@ 0x28
 802219a:	46bd      	mov	sp, r7
 802219c:	bd80      	pop	{r7, pc}
	...

080221a0 <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 80221a0:	b480      	push	{r7}
 80221a2:	b083      	sub	sp, #12
 80221a4:	af00      	add	r7, sp, #0
 80221a6:	4603      	mov	r3, r0
 80221a8:	460a      	mov	r2, r1
 80221aa:	71fb      	strb	r3, [r7, #7]
 80221ac:	4613      	mov	r3, r2
 80221ae:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 80221b0:	4b17      	ldr	r3, [pc, #92]	@ (8022210 <eth_read_phy+0x70>)
 80221b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80221b6:	4a16      	ldr	r2, [pc, #88]	@ (8022210 <eth_read_phy+0x70>)
 80221b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80221bc:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 80221c0:	4b13      	ldr	r3, [pc, #76]	@ (8022210 <eth_read_phy+0x70>)
 80221c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80221c6:	79fb      	ldrb	r3, [r7, #7]
 80221c8:	0559      	lsls	r1, r3, #21
 80221ca:	79bb      	ldrb	r3, [r7, #6]
 80221cc:	041b      	lsls	r3, r3, #16
 80221ce:	430b      	orrs	r3, r1
 80221d0:	4313      	orrs	r3, r2
 80221d2:	4a0f      	ldr	r2, [pc, #60]	@ (8022210 <eth_read_phy+0x70>)
 80221d4:	f043 030c 	orr.w	r3, r3, #12
 80221d8:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 80221dc:	4b0c      	ldr	r3, [pc, #48]	@ (8022210 <eth_read_phy+0x70>)
 80221de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80221e2:	4a0b      	ldr	r2, [pc, #44]	@ (8022210 <eth_read_phy+0x70>)
 80221e4:	f043 0301 	orr.w	r3, r3, #1
 80221e8:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 80221ec:	bf00      	nop
 80221ee:	4b08      	ldr	r3, [pc, #32]	@ (8022210 <eth_read_phy+0x70>)
 80221f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80221f4:	f003 0301 	and.w	r3, r3, #1
 80221f8:	2b00      	cmp	r3, #0
 80221fa:	d1f8      	bne.n	80221ee <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 80221fc:	4b04      	ldr	r3, [pc, #16]	@ (8022210 <eth_read_phy+0x70>)
 80221fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8022202:	b29b      	uxth	r3, r3
}
 8022204:	4618      	mov	r0, r3
 8022206:	370c      	adds	r7, #12
 8022208:	46bd      	mov	sp, r7
 802220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802220e:	4770      	bx	lr
 8022210:	40028000 	.word	0x40028000

08022214 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8022214:	b480      	push	{r7}
 8022216:	b083      	sub	sp, #12
 8022218:	af00      	add	r7, sp, #0
 802221a:	4603      	mov	r3, r0
 802221c:	71fb      	strb	r3, [r7, #7]
 802221e:	460b      	mov	r3, r1
 8022220:	71bb      	strb	r3, [r7, #6]
 8022222:	4613      	mov	r3, r2
 8022224:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 8022226:	4a18      	ldr	r2, [pc, #96]	@ (8022288 <eth_write_phy+0x74>)
 8022228:	88bb      	ldrh	r3, [r7, #4]
 802222a:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 802222e:	4b16      	ldr	r3, [pc, #88]	@ (8022288 <eth_write_phy+0x74>)
 8022230:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022234:	4a14      	ldr	r2, [pc, #80]	@ (8022288 <eth_write_phy+0x74>)
 8022236:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 802223a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 802223e:	4b12      	ldr	r3, [pc, #72]	@ (8022288 <eth_write_phy+0x74>)
 8022240:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8022244:	79fb      	ldrb	r3, [r7, #7]
 8022246:	0559      	lsls	r1, r3, #21
 8022248:	79bb      	ldrb	r3, [r7, #6]
 802224a:	041b      	lsls	r3, r3, #16
 802224c:	430b      	orrs	r3, r1
 802224e:	4313      	orrs	r3, r2
 8022250:	4a0d      	ldr	r2, [pc, #52]	@ (8022288 <eth_write_phy+0x74>)
 8022252:	f043 0304 	orr.w	r3, r3, #4
 8022256:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 802225a:	4b0b      	ldr	r3, [pc, #44]	@ (8022288 <eth_write_phy+0x74>)
 802225c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022260:	4a09      	ldr	r2, [pc, #36]	@ (8022288 <eth_write_phy+0x74>)
 8022262:	f043 0301 	orr.w	r3, r3, #1
 8022266:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 802226a:	bf00      	nop
 802226c:	4b06      	ldr	r3, [pc, #24]	@ (8022288 <eth_write_phy+0x74>)
 802226e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8022272:	f003 0301 	and.w	r3, r3, #1
 8022276:	2b00      	cmp	r3, #0
 8022278:	d1f8      	bne.n	802226c <eth_write_phy+0x58>
}
 802227a:	bf00      	nop
 802227c:	bf00      	nop
 802227e:	370c      	adds	r7, #12
 8022280:	46bd      	mov	sp, r7
 8022282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022286:	4770      	bx	lr
 8022288:	40028000 	.word	0x40028000

0802228c <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 802228c:	b580      	push	{r7, lr}
 802228e:	b08a      	sub	sp, #40	@ 0x28
 8022290:	af00      	add	r7, sp, #0
 8022292:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8022294:	687b      	ldr	r3, [r7, #4]
 8022296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022298:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 802229a:	4a90      	ldr	r2, [pc, #576]	@ (80224dc <mg_tcpip_driver_stm32h_init+0x250>)
 802229c:	687b      	ldr	r3, [r7, #4]
 802229e:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 80222a0:	69bb      	ldr	r3, [r7, #24]
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d002      	beq.n	80222ac <mg_tcpip_driver_stm32h_init+0x20>
 80222a6:	69bb      	ldr	r3, [r7, #24]
 80222a8:	791b      	ldrb	r3, [r3, #4]
 80222aa:	e000      	b.n	80222ae <mg_tcpip_driver_stm32h_init+0x22>
 80222ac:	2300      	movs	r3, #0
 80222ae:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 80222b0:	69bb      	ldr	r3, [r7, #24]
 80222b2:	2b00      	cmp	r3, #0
 80222b4:	d002      	beq.n	80222bc <mg_tcpip_driver_stm32h_init+0x30>
 80222b6:	69bb      	ldr	r3, [r7, #24]
 80222b8:	795b      	ldrb	r3, [r3, #5]
 80222ba:	e000      	b.n	80222be <mg_tcpip_driver_stm32h_init+0x32>
 80222bc:	2302      	movs	r3, #2
 80222be:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80222c0:	2300      	movs	r3, #0
 80222c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80222c4:	e017      	b.n	80222f6 <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 80222c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80222c8:	f240 6204 	movw	r2, #1540	@ 0x604
 80222cc:	fb02 f303 	mul.w	r3, r2, r3
 80222d0:	4a83      	ldr	r2, [pc, #524]	@ (80224e0 <mg_tcpip_driver_stm32h_init+0x254>)
 80222d2:	4413      	add	r3, r2
 80222d4:	4619      	mov	r1, r3
 80222d6:	4a83      	ldr	r2, [pc, #524]	@ (80224e4 <mg_tcpip_driver_stm32h_init+0x258>)
 80222d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80222da:	011b      	lsls	r3, r3, #4
 80222dc:	4413      	add	r3, r2
 80222de:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 80222e0:	4a80      	ldr	r2, [pc, #512]	@ (80224e4 <mg_tcpip_driver_stm32h_init+0x258>)
 80222e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80222e4:	011b      	lsls	r3, r3, #4
 80222e6:	4413      	add	r3, r2
 80222e8:	330c      	adds	r3, #12
 80222ea:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80222ee:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80222f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80222f2:	3301      	adds	r3, #1
 80222f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80222f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80222f8:	2b03      	cmp	r3, #3
 80222fa:	dde4      	ble.n	80222c6 <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 80222fc:	2300      	movs	r3, #0
 80222fe:	623b      	str	r3, [r7, #32]
 8022300:	e00f      	b.n	8022322 <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 8022302:	6a3b      	ldr	r3, [r7, #32]
 8022304:	f240 6204 	movw	r2, #1540	@ 0x604
 8022308:	fb02 f303 	mul.w	r3, r2, r3
 802230c:	4a76      	ldr	r2, [pc, #472]	@ (80224e8 <mg_tcpip_driver_stm32h_init+0x25c>)
 802230e:	4413      	add	r3, r2
 8022310:	4619      	mov	r1, r3
 8022312:	4a76      	ldr	r2, [pc, #472]	@ (80224ec <mg_tcpip_driver_stm32h_init+0x260>)
 8022314:	6a3b      	ldr	r3, [r7, #32]
 8022316:	011b      	lsls	r3, r3, #4
 8022318:	4413      	add	r3, r2
 802231a:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 802231c:	6a3b      	ldr	r3, [r7, #32]
 802231e:	3301      	adds	r3, #1
 8022320:	623b      	str	r3, [r7, #32]
 8022322:	6a3b      	ldr	r3, [r7, #32]
 8022324:	2b03      	cmp	r3, #3
 8022326:	ddec      	ble.n	8022302 <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 8022328:	4b71      	ldr	r3, [pc, #452]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 802232a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802232e:	681b      	ldr	r3, [r3, #0]
 8022330:	4a6f      	ldr	r2, [pc, #444]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022332:	f043 0301 	orr.w	r3, r3, #1
 8022336:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802233a:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 802233c:	2300      	movs	r3, #0
 802233e:	61fb      	str	r3, [r7, #28]
 8022340:	e002      	b.n	8022348 <mg_tcpip_driver_stm32h_init+0xbc>
 8022342:	69fb      	ldr	r3, [r7, #28]
 8022344:	3301      	adds	r3, #1
 8022346:	61fb      	str	r3, [r7, #28]
 8022348:	69fb      	ldr	r3, [r7, #28]
 802234a:	2b03      	cmp	r3, #3
 802234c:	ddf9      	ble.n	8022342 <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 802234e:	bf00      	nop
 8022350:	4b67      	ldr	r3, [pc, #412]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022352:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022356:	681b      	ldr	r3, [r3, #0]
 8022358:	f003 0301 	and.w	r3, r3, #1
 802235c:	2b00      	cmp	r3, #0
 802235e:	d1f7      	bne.n	8022350 <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 8022360:	69bb      	ldr	r3, [r7, #24]
 8022362:	2b00      	cmp	r3, #0
 8022364:	d006      	beq.n	8022374 <mg_tcpip_driver_stm32h_init+0xe8>
 8022366:	69bb      	ldr	r3, [r7, #24]
 8022368:	681b      	ldr	r3, [r3, #0]
 802236a:	2b00      	cmp	r3, #0
 802236c:	db02      	blt.n	8022374 <mg_tcpip_driver_stm32h_init+0xe8>
 802236e:	69bb      	ldr	r3, [r7, #24]
 8022370:	681b      	ldr	r3, [r3, #0]
 8022372:	e000      	b.n	8022376 <mg_tcpip_driver_stm32h_init+0xea>
 8022374:	2307      	movs	r3, #7
 8022376:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 8022378:	693b      	ldr	r3, [r7, #16]
 802237a:	021b      	lsls	r3, r3, #8
 802237c:	4a5c      	ldr	r2, [pc, #368]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 802237e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8022382:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 8022386:	4b5a      	ldr	r3, [pc, #360]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802238c:	461a      	mov	r2, r3
 802238e:	2300      	movs	r3, #0
 8022390:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 8022392:	4b57      	ldr	r3, [pc, #348]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022398:	685b      	ldr	r3, [r3, #4]
 802239a:	4a55      	ldr	r2, [pc, #340]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 802239c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80223a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80223a4:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 80223a6:	4b52      	ldr	r3, [pc, #328]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 80223a8:	2200      	movs	r2, #0
 80223aa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 80223ae:	4b50      	ldr	r3, [pc, #320]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 80223b0:	2280      	movs	r2, #128	@ 0x80
 80223b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if !MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(10);  // Perfect filtering
 80223b4:	4b4e      	ldr	r3, [pc, #312]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 80223b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80223ba:	609a      	str	r2, [r3, #8]
#endif
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 80223bc:	4a4d      	ldr	r2, [pc, #308]	@ (80224f4 <mg_tcpip_driver_stm32h_init+0x268>)
 80223be:	f107 0308 	add.w	r3, r7, #8
 80223c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80223c6:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 80223ca:	7dba      	ldrb	r2, [r7, #22]
 80223cc:	7df9      	ldrb	r1, [r7, #23]
 80223ce:	f107 0308 	add.w	r3, r7, #8
 80223d2:	4618      	mov	r0, r3
 80223d4:	f7ff fd16 	bl	8021e04 <mg_phy_init>
  ETH->DMACRDLAR =
 80223d8:	4a45      	ldr	r2, [pc, #276]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 80223da:	4b42      	ldr	r3, [pc, #264]	@ (80224e4 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACRDLAR =
 80223dc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80223e0:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 80223e4:	4b42      	ldr	r3, [pc, #264]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 80223e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80223ea:	461a      	mov	r2, r3
 80223ec:	2303      	movs	r3, #3
 80223ee:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 80223f2:	4a3f      	ldr	r2, [pc, #252]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 80223f4:	4b40      	ldr	r3, [pc, #256]	@ (80224f8 <mg_tcpip_driver_stm32h_init+0x26c>)
  ETH->DMACRDTPR =
 80223f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80223fa:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 80223fe:	4a3c      	ldr	r2, [pc, #240]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 8022400:	4b3a      	ldr	r3, [pc, #232]	@ (80224ec <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDLAR =
 8022402:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022406:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 802240a:	4b39      	ldr	r3, [pc, #228]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 802240c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022410:	461a      	mov	r2, r3
 8022412:	2303      	movs	r3, #3
 8022414:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 8022418:	4a35      	ldr	r2, [pc, #212]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 802241a:	4b34      	ldr	r3, [pc, #208]	@ (80224ec <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDTPR =
 802241c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022420:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 8022424:	4b32      	ldr	r3, [pc, #200]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022426:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802242a:	461a      	mov	r2, r3
 802242c:	2300      	movs	r3, #0
 802242e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 8022432:	4b2f      	ldr	r3, [pc, #188]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022434:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022438:	461a      	mov	r2, r3
 802243a:	f248 0340 	movw	r3, #32832	@ 0x8040
 802243e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 8022442:	4b2b      	ldr	r3, [pc, #172]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022444:	f24e 0203 	movw	r2, #57347	@ 0xe003
 8022448:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 802244a:	4b29      	ldr	r3, [pc, #164]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 802244c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8022450:	4a27      	ldr	r2, [pc, #156]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022452:	f043 0302 	orr.w	r3, r3, #2
 8022456:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 802245a:	4b25      	ldr	r3, [pc, #148]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 802245c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8022460:	4a23      	ldr	r2, [pc, #140]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022462:	f043 0320 	orr.w	r3, r3, #32
 8022466:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 802246a:	4b21      	ldr	r3, [pc, #132]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 802246c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022470:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8022474:	4a1e      	ldr	r2, [pc, #120]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022476:	f043 0301 	orr.w	r3, r3, #1
 802247a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802247e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 8022482:	4b1b      	ldr	r3, [pc, #108]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 8022484:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022488:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 802248c:	4a18      	ldr	r2, [pc, #96]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 802248e:	f043 0301 	orr.w	r3, r3, #1
 8022492:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022496:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	795b      	ldrb	r3, [r3, #5]
 802249e:	021b      	lsls	r3, r3, #8
 80224a0:	687a      	ldr	r2, [r7, #4]
 80224a2:	7912      	ldrb	r2, [r2, #4]
 80224a4:	4611      	mov	r1, r2
 80224a6:	4a12      	ldr	r2, [pc, #72]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
 80224a8:	430b      	orrs	r3, r1
 80224aa:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80224ae:	687b      	ldr	r3, [r7, #4]
 80224b0:	78db      	ldrb	r3, [r3, #3]
 80224b2:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 80224b4:	687b      	ldr	r3, [r7, #4]
 80224b6:	789b      	ldrb	r3, [r3, #2]
 80224b8:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80224ba:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80224bc:	687b      	ldr	r3, [r7, #4]
 80224be:	785b      	ldrb	r3, [r3, #1]
 80224c0:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 80224c2:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80224c4:	687a      	ldr	r2, [r7, #4]
 80224c6:	7812      	ldrb	r2, [r2, #0]
 80224c8:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80224ca:	4a09      	ldr	r2, [pc, #36]	@ (80224f0 <mg_tcpip_driver_stm32h_init+0x264>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 80224cc:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 80224ce:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 80224d2:	2301      	movs	r3, #1
}
 80224d4:	4618      	mov	r0, r3
 80224d6:	3728      	adds	r7, #40	@ 0x28
 80224d8:	46bd      	mov	sp, r7
 80224da:	bd80      	pop	{r7, pc}
 80224dc:	240051d4 	.word	0x240051d4
 80224e0:	240021b4 	.word	0x240021b4
 80224e4:	24002134 	.word	0x24002134
 80224e8:	240039c4 	.word	0x240039c4
 80224ec:	24002174 	.word	0x24002174
 80224f0:	40028000 	.word	0x40028000
 80224f4:	08028ee8 	.word	0x08028ee8
 80224f8:	24002164 	.word	0x24002164

080224fc <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 80224fc:	b580      	push	{r7, lr}
 80224fe:	b088      	sub	sp, #32
 8022500:	af02      	add	r7, sp, #8
 8022502:	60f8      	str	r0, [r7, #12]
 8022504:	60b9      	str	r1, [r7, #8]
 8022506:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8022508:	68bb      	ldr	r3, [r7, #8]
 802250a:	f240 6204 	movw	r2, #1540	@ 0x604
 802250e:	4293      	cmp	r3, r2
 8022510:	d912      	bls.n	8022538 <mg_tcpip_driver_stm32h_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 8022512:	4b5e      	ldr	r3, [pc, #376]	@ (802268c <mg_tcpip_driver_stm32h_tx+0x190>)
 8022514:	681b      	ldr	r3, [r3, #0]
 8022516:	2b00      	cmp	r3, #0
 8022518:	dd0b      	ble.n	8022532 <mg_tcpip_driver_stm32h_tx+0x36>
 802251a:	4b5d      	ldr	r3, [pc, #372]	@ (8022690 <mg_tcpip_driver_stm32h_tx+0x194>)
 802251c:	f645 526f 	movw	r2, #23919	@ 0x5d6f
 8022520:	495c      	ldr	r1, [pc, #368]	@ (8022694 <mg_tcpip_driver_stm32h_tx+0x198>)
 8022522:	2001      	movs	r0, #1
 8022524:	f7eb fc12 	bl	800dd4c <mg_log_prefix>
 8022528:	68bb      	ldr	r3, [r7, #8]
 802252a:	4619      	mov	r1, r3
 802252c:	485a      	ldr	r0, [pc, #360]	@ (8022698 <mg_tcpip_driver_stm32h_tx+0x19c>)
 802252e:	f7eb fc5d 	bl	800ddec <mg_log>
    len = 0;  // Frame is too big
 8022532:	2300      	movs	r3, #0
 8022534:	60bb      	str	r3, [r7, #8]
 8022536:	e08d      	b.n	8022654 <mg_tcpip_driver_stm32h_tx+0x158>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 8022538:	4b58      	ldr	r3, [pc, #352]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802253a:	681b      	ldr	r3, [r3, #0]
 802253c:	4a58      	ldr	r2, [pc, #352]	@ (80226a0 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 802253e:	011b      	lsls	r3, r3, #4
 8022540:	4413      	add	r3, r2
 8022542:	330c      	adds	r3, #12
 8022544:	681b      	ldr	r3, [r3, #0]
 8022546:	2b00      	cmp	r3, #0
 8022548:	da4a      	bge.n	80225e0 <mg_tcpip_driver_stm32h_tx+0xe4>
    ifp->nerr++;
 802254a:	687b      	ldr	r3, [r7, #4]
 802254c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8022550:	1c5a      	adds	r2, r3, #1
 8022552:	687b      	ldr	r3, [r7, #4]
 8022554:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 8022558:	4b4c      	ldr	r3, [pc, #304]	@ (802268c <mg_tcpip_driver_stm32h_tx+0x190>)
 802255a:	681b      	ldr	r3, [r3, #0]
 802255c:	2b00      	cmp	r3, #0
 802255e:	dd1e      	ble.n	802259e <mg_tcpip_driver_stm32h_tx+0xa2>
 8022560:	4b4b      	ldr	r3, [pc, #300]	@ (8022690 <mg_tcpip_driver_stm32h_tx+0x194>)
 8022562:	f645 5273 	movw	r2, #23923	@ 0x5d73
 8022566:	494b      	ldr	r1, [pc, #300]	@ (8022694 <mg_tcpip_driver_stm32h_tx+0x198>)
 8022568:	2001      	movs	r0, #1
 802256a:	f7eb fbef 	bl	800dd4c <mg_log_prefix>
 802256e:	4b4b      	ldr	r3, [pc, #300]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8022570:	6819      	ldr	r1, [r3, #0]
 8022572:	4b4a      	ldr	r3, [pc, #296]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8022574:	681b      	ldr	r3, [r3, #0]
 8022576:	4a4a      	ldr	r2, [pc, #296]	@ (80226a0 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8022578:	011b      	lsls	r3, r3, #4
 802257a:	4413      	add	r3, r2
 802257c:	330c      	adds	r3, #12
 802257e:	681a      	ldr	r2, [r3, #0]
 8022580:	4b48      	ldr	r3, [pc, #288]	@ (80226a4 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8022582:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022586:	f8d3 0160 	ldr.w	r0, [r3, #352]	@ 0x160
 802258a:	4b46      	ldr	r3, [pc, #280]	@ (80226a4 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 802258c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022590:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8022594:	9300      	str	r3, [sp, #0]
 8022596:	4603      	mov	r3, r0
 8022598:	4843      	ldr	r0, [pc, #268]	@ (80226a8 <mg_tcpip_driver_stm32h_tx+0x1ac>)
 802259a:	f7eb fc27 	bl	800ddec <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 802259e:	2300      	movs	r3, #0
 80225a0:	617b      	str	r3, [r7, #20]
 80225a2:	e017      	b.n	80225d4 <mg_tcpip_driver_stm32h_tx+0xd8>
 80225a4:	4b39      	ldr	r3, [pc, #228]	@ (802268c <mg_tcpip_driver_stm32h_tx+0x190>)
 80225a6:	681b      	ldr	r3, [r3, #0]
 80225a8:	2b00      	cmp	r3, #0
 80225aa:	dd10      	ble.n	80225ce <mg_tcpip_driver_stm32h_tx+0xd2>
 80225ac:	4b38      	ldr	r3, [pc, #224]	@ (8022690 <mg_tcpip_driver_stm32h_tx+0x194>)
 80225ae:	f645 5275 	movw	r2, #23925	@ 0x5d75
 80225b2:	4938      	ldr	r1, [pc, #224]	@ (8022694 <mg_tcpip_driver_stm32h_tx+0x198>)
 80225b4:	2001      	movs	r0, #1
 80225b6:	f7eb fbc9 	bl	800dd4c <mg_log_prefix>
 80225ba:	4a39      	ldr	r2, [pc, #228]	@ (80226a0 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80225bc:	697b      	ldr	r3, [r7, #20]
 80225be:	011b      	lsls	r3, r3, #4
 80225c0:	4413      	add	r3, r2
 80225c2:	330c      	adds	r3, #12
 80225c4:	681b      	ldr	r3, [r3, #0]
 80225c6:	4619      	mov	r1, r3
 80225c8:	4838      	ldr	r0, [pc, #224]	@ (80226ac <mg_tcpip_driver_stm32h_tx+0x1b0>)
 80225ca:	f7eb fc0f 	bl	800ddec <mg_log>
 80225ce:	697b      	ldr	r3, [r7, #20]
 80225d0:	3301      	adds	r3, #1
 80225d2:	617b      	str	r3, [r7, #20]
 80225d4:	697b      	ldr	r3, [r7, #20]
 80225d6:	2b03      	cmp	r3, #3
 80225d8:	dde4      	ble.n	80225a4 <mg_tcpip_driver_stm32h_tx+0xa8>
    len = 0;  // All descriptors are busy, fail
 80225da:	2300      	movs	r3, #0
 80225dc:	60bb      	str	r3, [r7, #8]
 80225de:	e039      	b.n	8022654 <mg_tcpip_driver_stm32h_tx+0x158>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 80225e0:	4b2e      	ldr	r3, [pc, #184]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80225e2:	681b      	ldr	r3, [r3, #0]
 80225e4:	f240 6204 	movw	r2, #1540	@ 0x604
 80225e8:	fb02 f303 	mul.w	r3, r2, r3
 80225ec:	4a30      	ldr	r2, [pc, #192]	@ (80226b0 <mg_tcpip_driver_stm32h_tx+0x1b4>)
 80225ee:	4413      	add	r3, r2
 80225f0:	68ba      	ldr	r2, [r7, #8]
 80225f2:	68f9      	ldr	r1, [r7, #12]
 80225f4:	4618      	mov	r0, r3
 80225f6:	f003 f9fe 	bl	80259f6 <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 80225fa:	4b28      	ldr	r3, [pc, #160]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80225fc:	681b      	ldr	r3, [r3, #0]
 80225fe:	4a28      	ldr	r2, [pc, #160]	@ (80226a0 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8022600:	011b      	lsls	r3, r3, #4
 8022602:	4413      	add	r3, r2
 8022604:	3308      	adds	r3, #8
 8022606:	68ba      	ldr	r2, [r7, #8]
 8022608:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 802260a:	4b24      	ldr	r3, [pc, #144]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802260c:	681b      	ldr	r3, [r3, #0]
 802260e:	4a24      	ldr	r2, [pc, #144]	@ (80226a0 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8022610:	011b      	lsls	r3, r3, #4
 8022612:	4413      	add	r3, r2
 8022614:	330c      	adds	r3, #12
 8022616:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 802261a:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 802261c:	4b1f      	ldr	r3, [pc, #124]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802261e:	681b      	ldr	r3, [r3, #0]
 8022620:	4a1f      	ldr	r2, [pc, #124]	@ (80226a0 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8022622:	011b      	lsls	r3, r3, #4
 8022624:	4413      	add	r3, r2
 8022626:	330c      	adds	r3, #12
 8022628:	681a      	ldr	r2, [r3, #0]
 802262a:	4b1c      	ldr	r3, [pc, #112]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802262c:	681b      	ldr	r3, [r3, #0]
 802262e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8022632:	491b      	ldr	r1, [pc, #108]	@ (80226a0 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8022634:	011b      	lsls	r3, r3, #4
 8022636:	440b      	add	r3, r1
 8022638:	330c      	adds	r3, #12
 802263a:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 802263c:	4b17      	ldr	r3, [pc, #92]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802263e:	681b      	ldr	r3, [r3, #0]
 8022640:	3301      	adds	r3, #1
 8022642:	4a16      	ldr	r2, [pc, #88]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8022644:	6013      	str	r3, [r2, #0]
 8022646:	4b15      	ldr	r3, [pc, #84]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8022648:	681b      	ldr	r3, [r3, #0]
 802264a:	2b03      	cmp	r3, #3
 802264c:	d902      	bls.n	8022654 <mg_tcpip_driver_stm32h_tx+0x158>
 802264e:	4b13      	ldr	r3, [pc, #76]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8022650:	2200      	movs	r2, #0
 8022652:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 8022654:	4b13      	ldr	r3, [pc, #76]	@ (80226a4 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8022656:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802265a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 802265e:	4a11      	ldr	r2, [pc, #68]	@ (80226a4 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8022660:	f043 0306 	orr.w	r3, r3, #6
 8022664:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022668:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 802266c:	4b0b      	ldr	r3, [pc, #44]	@ (802269c <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802266e:	681b      	ldr	r3, [r3, #0]
 8022670:	011b      	lsls	r3, r3, #4
 8022672:	4a0b      	ldr	r2, [pc, #44]	@ (80226a0 <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8022674:	441a      	add	r2, r3
 8022676:	4b0b      	ldr	r3, [pc, #44]	@ (80226a4 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 8022678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802267c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 8022680:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 8022682:	4618      	mov	r0, r3
 8022684:	3718      	adds	r7, #24
 8022686:	46bd      	mov	sp, r7
 8022688:	bd80      	pop	{r7, pc}
 802268a:	bf00      	nop
 802268c:	24000258 	.word	0x24000258
 8022690:	0802a44c 	.word	0x0802a44c
 8022694:	080264c4 	.word	0x080264c4
 8022698:	08028ef0 	.word	0x08028ef0
 802269c:	240051d8 	.word	0x240051d8
 80226a0:	24002174 	.word	0x24002174
 80226a4:	40028000 	.word	0x40028000
 80226a8:	08028f04 	.word	0x08028f04
 80226ac:	08028f2c 	.word	0x08028f2c
 80226b0:	240039c4 	.word	0x240039c4

080226b4 <mg_tcpip_driver_stm32h_update_hash_table>:

static void mg_tcpip_driver_stm32h_update_hash_table(struct mg_tcpip_if *ifp) {
 80226b4:	b480      	push	{r7}
 80226b6:	b083      	sub	sp, #12
 80226b8:	af00      	add	r7, sp, #0
 80226ba:	6078      	str	r0, [r7, #4]
#if MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(4);  // Pass Multicast (pass all multicast frames)
#else
  // TODO(): read database, rebuild hash table
  // add mDNS / DNS-SD multicast address
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 80226bc:	4b14      	ldr	r3, [pc, #80]	@ (8022710 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80226be:	78db      	ldrb	r3, [r3, #3]
 80226c0:	061a      	lsls	r2, r3, #24
                 (uint32_t) mcast_addr[2] << 16 |
 80226c2:	4b13      	ldr	r3, [pc, #76]	@ (8022710 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80226c4:	789b      	ldrb	r3, [r3, #2]
 80226c6:	041b      	lsls	r3, r3, #16
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 80226c8:	431a      	orrs	r2, r3
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 80226ca:	4b11      	ldr	r3, [pc, #68]	@ (8022710 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80226cc:	785b      	ldrb	r3, [r3, #1]
 80226ce:	021b      	lsls	r3, r3, #8
                 (uint32_t) mcast_addr[2] << 16 |
 80226d0:	4313      	orrs	r3, r2
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 80226d2:	4a0f      	ldr	r2, [pc, #60]	@ (8022710 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80226d4:	7812      	ldrb	r2, [r2, #0]
 80226d6:	4611      	mov	r1, r2
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 80226d8:	4a0e      	ldr	r2, [pc, #56]	@ (8022714 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 80226da:	430b      	orrs	r3, r1
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 80226dc:	f8c2 330c 	str.w	r3, [r2, #780]	@ 0x30c
  ETH->MACA1HR = (uint32_t) mcast_addr[5] << 8 | (uint32_t) mcast_addr[4];
 80226e0:	4b0b      	ldr	r3, [pc, #44]	@ (8022710 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80226e2:	795b      	ldrb	r3, [r3, #5]
 80226e4:	021b      	lsls	r3, r3, #8
 80226e6:	4a0a      	ldr	r2, [pc, #40]	@ (8022710 <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 80226e8:	7912      	ldrb	r2, [r2, #4]
 80226ea:	4611      	mov	r1, r2
 80226ec:	4a09      	ldr	r2, [pc, #36]	@ (8022714 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 80226ee:	430b      	orrs	r3, r1
 80226f0:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
  ETH->MACA1HR |= MG_BIT(31);  // AE
 80226f4:	4b07      	ldr	r3, [pc, #28]	@ (8022714 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 80226f6:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 80226fa:	4a06      	ldr	r2, [pc, #24]	@ (8022714 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 80226fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8022700:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
#endif
(void) ifp;
}
 8022704:	bf00      	nop
 8022706:	370c      	adds	r7, #12
 8022708:	46bd      	mov	sp, r7
 802270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802270e:	4770      	bx	lr
 8022710:	24000260 	.word	0x24000260
 8022714:	40028000 	.word	0x40028000

08022718 <mg_tcpip_driver_stm32h_poll>:

static bool mg_tcpip_driver_stm32h_poll(struct mg_tcpip_if *ifp, bool s1) {
 8022718:	b580      	push	{r7, lr}
 802271a:	b088      	sub	sp, #32
 802271c:	af00      	add	r7, sp, #0
 802271e:	6078      	str	r0, [r7, #4]
 8022720:	460b      	mov	r3, r1
 8022722:	70fb      	strb	r3, [r7, #3]
  if (ifp->update_mac_hash_table) {
 8022724:	687b      	ldr	r3, [r7, #4]
 8022726:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 802272a:	2b00      	cmp	r3, #0
 802272c:	d006      	beq.n	802273c <mg_tcpip_driver_stm32h_poll+0x24>
    mg_tcpip_driver_stm32h_update_hash_table(ifp);
 802272e:	6878      	ldr	r0, [r7, #4]
 8022730:	f7ff ffc0 	bl	80226b4 <mg_tcpip_driver_stm32h_update_hash_table>
    ifp->update_mac_hash_table = false;
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	2200      	movs	r2, #0
 8022738:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  }
  if (!s1) return false;
 802273c:	78fb      	ldrb	r3, [r7, #3]
 802273e:	f083 0301 	eor.w	r3, r3, #1
 8022742:	b2db      	uxtb	r3, r3
 8022744:	2b00      	cmp	r3, #0
 8022746:	d001      	beq.n	802274c <mg_tcpip_driver_stm32h_poll+0x34>
 8022748:	2300      	movs	r3, #0
 802274a:	e063      	b.n	8022814 <mg_tcpip_driver_stm32h_poll+0xfc>
  struct mg_tcpip_driver_stm32h_data *d =
 802274c:	687b      	ldr	r3, [r7, #4]
 802274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022750:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 8022752:	69bb      	ldr	r3, [r7, #24]
 8022754:	2b00      	cmp	r3, #0
 8022756:	d002      	beq.n	802275e <mg_tcpip_driver_stm32h_poll+0x46>
 8022758:	69bb      	ldr	r3, [r7, #24]
 802275a:	791b      	ldrb	r3, [r3, #4]
 802275c:	e000      	b.n	8022760 <mg_tcpip_driver_stm32h_poll+0x48>
 802275e:	2300      	movs	r3, #0
 8022760:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 8022762:	2300      	movs	r3, #0
 8022764:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 8022766:	2300      	movs	r3, #0
 8022768:	75bb      	strb	r3, [r7, #22]
 802276a:	2300      	movs	r3, #0
 802276c:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 802276e:	4a2b      	ldr	r2, [pc, #172]	@ (802281c <mg_tcpip_driver_stm32h_poll+0x104>)
 8022770:	f107 030c 	add.w	r3, r7, #12
 8022774:	e892 0003 	ldmia.w	r2, {r0, r1}
 8022778:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 802277c:	f107 0315 	add.w	r3, r7, #21
 8022780:	f107 0214 	add.w	r2, r7, #20
 8022784:	7df9      	ldrb	r1, [r7, #23]
 8022786:	f107 000c 	add.w	r0, r7, #12
 802278a:	f7ff fbf3 	bl	8021f74 <mg_phy_up>
 802278e:	4603      	mov	r3, r0
 8022790:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8022798:	2b00      	cmp	r3, #0
 802279a:	d13a      	bne.n	8022812 <mg_tcpip_driver_stm32h_poll+0xfa>
 802279c:	7dbb      	ldrb	r3, [r7, #22]
 802279e:	2b00      	cmp	r3, #0
 80227a0:	d037      	beq.n	8022812 <mg_tcpip_driver_stm32h_poll+0xfa>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 80227a2:	4b1f      	ldr	r3, [pc, #124]	@ (8022820 <mg_tcpip_driver_stm32h_poll+0x108>)
 80227a4:	681b      	ldr	r3, [r3, #0]
 80227a6:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80227aa:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 80227ac:	7d7b      	ldrb	r3, [r7, #21]
 80227ae:	2b00      	cmp	r3, #0
 80227b0:	d103      	bne.n	80227ba <mg_tcpip_driver_stm32h_poll+0xa2>
 80227b2:	69fb      	ldr	r3, [r7, #28]
 80227b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80227b8:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 80227ba:	7d3b      	ldrb	r3, [r7, #20]
 80227bc:	f083 0301 	eor.w	r3, r3, #1
 80227c0:	b2db      	uxtb	r3, r3
 80227c2:	2b00      	cmp	r3, #0
 80227c4:	d003      	beq.n	80227ce <mg_tcpip_driver_stm32h_poll+0xb6>
 80227c6:	69fb      	ldr	r3, [r7, #28]
 80227c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80227cc:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 80227ce:	4a14      	ldr	r2, [pc, #80]	@ (8022820 <mg_tcpip_driver_stm32h_poll+0x108>)
 80227d0:	69fb      	ldr	r3, [r7, #28]
 80227d2:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 80227d4:	4b13      	ldr	r3, [pc, #76]	@ (8022824 <mg_tcpip_driver_stm32h_poll+0x10c>)
 80227d6:	681b      	ldr	r3, [r3, #0]
 80227d8:	2b02      	cmp	r3, #2
 80227da:	dd1a      	ble.n	8022812 <mg_tcpip_driver_stm32h_poll+0xfa>
 80227dc:	4b12      	ldr	r3, [pc, #72]	@ (8022828 <mg_tcpip_driver_stm32h_poll+0x110>)
 80227de:	f645 52a8 	movw	r2, #23976	@ 0x5da8
 80227e2:	4912      	ldr	r1, [pc, #72]	@ (802282c <mg_tcpip_driver_stm32h_poll+0x114>)
 80227e4:	2003      	movs	r0, #3
 80227e6:	f7eb fab1 	bl	800dd4c <mg_log_prefix>
 80227ea:	69fb      	ldr	r3, [r7, #28]
 80227ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80227f0:	2b00      	cmp	r3, #0
 80227f2:	d001      	beq.n	80227f8 <mg_tcpip_driver_stm32h_poll+0xe0>
 80227f4:	2164      	movs	r1, #100	@ 0x64
 80227f6:	e000      	b.n	80227fa <mg_tcpip_driver_stm32h_poll+0xe2>
 80227f8:	210a      	movs	r1, #10
 80227fa:	69fb      	ldr	r3, [r7, #28]
 80227fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022800:	2b00      	cmp	r3, #0
 8022802:	d001      	beq.n	8022808 <mg_tcpip_driver_stm32h_poll+0xf0>
 8022804:	4b0a      	ldr	r3, [pc, #40]	@ (8022830 <mg_tcpip_driver_stm32h_poll+0x118>)
 8022806:	e000      	b.n	802280a <mg_tcpip_driver_stm32h_poll+0xf2>
 8022808:	4b0a      	ldr	r3, [pc, #40]	@ (8022834 <mg_tcpip_driver_stm32h_poll+0x11c>)
 802280a:	461a      	mov	r2, r3
 802280c:	480a      	ldr	r0, [pc, #40]	@ (8022838 <mg_tcpip_driver_stm32h_poll+0x120>)
 802280e:	f7eb faed 	bl	800ddec <mg_log>
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 8022812:	7dbb      	ldrb	r3, [r7, #22]
}
 8022814:	4618      	mov	r0, r3
 8022816:	3720      	adds	r7, #32
 8022818:	46bd      	mov	sp, r7
 802281a:	bd80      	pop	{r7, pc}
 802281c:	08028ee8 	.word	0x08028ee8
 8022820:	40028000 	.word	0x40028000
 8022824:	24000258 	.word	0x24000258
 8022828:	0802a468 	.word	0x0802a468
 802282c:	080264c4 	.word	0x080264c4
 8022830:	08028f34 	.word	0x08028f34
 8022834:	08028f3c 	.word	0x08028f3c
 8022838:	08028f44 	.word	0x08028f44

0802283c <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 802283c:	b580      	push	{r7, lr}
 802283e:	b082      	sub	sp, #8
 8022840:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 8022842:	4b40      	ldr	r3, [pc, #256]	@ (8022944 <ETH_IRQHandler+0x108>)
 8022844:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022848:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 802284c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022850:	2b00      	cmp	r3, #0
 8022852:	d065      	beq.n	8022920 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 8022854:	4b3b      	ldr	r3, [pc, #236]	@ (8022944 <ETH_IRQHandler+0x108>)
 8022856:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802285a:	461a      	mov	r2, r3
 802285c:	f248 0340 	movw	r3, #32832	@ 0x8040
 8022860:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8022864:	2300      	movs	r3, #0
 8022866:	607b      	str	r3, [r7, #4]
 8022868:	e055      	b.n	8022916 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 802286a:	4b37      	ldr	r3, [pc, #220]	@ (8022948 <ETH_IRQHandler+0x10c>)
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	4a37      	ldr	r2, [pc, #220]	@ (802294c <ETH_IRQHandler+0x110>)
 8022870:	011b      	lsls	r3, r3, #4
 8022872:	4413      	add	r3, r2
 8022874:	330c      	adds	r3, #12
 8022876:	681b      	ldr	r3, [r3, #0]
 8022878:	2b00      	cmp	r3, #0
 802287a:	db50      	blt.n	802291e <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 802287c:	4b32      	ldr	r3, [pc, #200]	@ (8022948 <ETH_IRQHandler+0x10c>)
 802287e:	681b      	ldr	r3, [r3, #0]
 8022880:	4a32      	ldr	r2, [pc, #200]	@ (802294c <ETH_IRQHandler+0x110>)
 8022882:	011b      	lsls	r3, r3, #4
 8022884:	4413      	add	r3, r2
 8022886:	330c      	adds	r3, #12
 8022888:	681b      	ldr	r3, [r3, #0]
 802288a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 802288e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8022892:	d128      	bne.n	80228e6 <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 8022894:	4b2c      	ldr	r3, [pc, #176]	@ (8022948 <ETH_IRQHandler+0x10c>)
 8022896:	681b      	ldr	r3, [r3, #0]
 8022898:	4a2c      	ldr	r2, [pc, #176]	@ (802294c <ETH_IRQHandler+0x110>)
 802289a:	011b      	lsls	r3, r3, #4
 802289c:	4413      	add	r3, r2
 802289e:	330c      	adds	r3, #12
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 80228a6:	2b00      	cmp	r3, #0
 80228a8:	d11d      	bne.n	80228e6 <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 80228aa:	4b27      	ldr	r3, [pc, #156]	@ (8022948 <ETH_IRQHandler+0x10c>)
 80228ac:	681b      	ldr	r3, [r3, #0]
 80228ae:	4a27      	ldr	r2, [pc, #156]	@ (802294c <ETH_IRQHandler+0x110>)
 80228b0:	011b      	lsls	r3, r3, #4
 80228b2:	4413      	add	r3, r2
 80228b4:	330c      	adds	r3, #12
 80228b6:	681b      	ldr	r3, [r3, #0]
 80228b8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80228bc:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 80228be:	4b22      	ldr	r3, [pc, #136]	@ (8022948 <ETH_IRQHandler+0x10c>)
 80228c0:	681b      	ldr	r3, [r3, #0]
 80228c2:	f240 6204 	movw	r2, #1540	@ 0x604
 80228c6:	fb02 f303 	mul.w	r3, r2, r3
 80228ca:	4a21      	ldr	r2, [pc, #132]	@ (8022950 <ETH_IRQHandler+0x114>)
 80228cc:	1898      	adds	r0, r3, r2
 80228ce:	683b      	ldr	r3, [r7, #0]
 80228d0:	2b04      	cmp	r3, #4
 80228d2:	d902      	bls.n	80228da <ETH_IRQHandler+0x9e>
 80228d4:	683b      	ldr	r3, [r7, #0]
 80228d6:	3b04      	subs	r3, #4
 80228d8:	e000      	b.n	80228dc <ETH_IRQHandler+0xa0>
 80228da:	683b      	ldr	r3, [r7, #0]
 80228dc:	4a1d      	ldr	r2, [pc, #116]	@ (8022954 <ETH_IRQHandler+0x118>)
 80228de:	6812      	ldr	r2, [r2, #0]
 80228e0:	4619      	mov	r1, r3
 80228e2:	f7ee ffef 	bl	80118c4 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 80228e6:	4b18      	ldr	r3, [pc, #96]	@ (8022948 <ETH_IRQHandler+0x10c>)
 80228e8:	681b      	ldr	r3, [r3, #0]
 80228ea:	4a18      	ldr	r2, [pc, #96]	@ (802294c <ETH_IRQHandler+0x110>)
 80228ec:	011b      	lsls	r3, r3, #4
 80228ee:	4413      	add	r3, r2
 80228f0:	330c      	adds	r3, #12
 80228f2:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80228f6:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 80228f8:	4b13      	ldr	r3, [pc, #76]	@ (8022948 <ETH_IRQHandler+0x10c>)
 80228fa:	681b      	ldr	r3, [r3, #0]
 80228fc:	3301      	adds	r3, #1
 80228fe:	4a12      	ldr	r2, [pc, #72]	@ (8022948 <ETH_IRQHandler+0x10c>)
 8022900:	6013      	str	r3, [r2, #0]
 8022902:	4b11      	ldr	r3, [pc, #68]	@ (8022948 <ETH_IRQHandler+0x10c>)
 8022904:	681b      	ldr	r3, [r3, #0]
 8022906:	2b03      	cmp	r3, #3
 8022908:	d902      	bls.n	8022910 <ETH_IRQHandler+0xd4>
 802290a:	4b0f      	ldr	r3, [pc, #60]	@ (8022948 <ETH_IRQHandler+0x10c>)
 802290c:	2200      	movs	r2, #0
 802290e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8022910:	687b      	ldr	r3, [r7, #4]
 8022912:	3301      	adds	r3, #1
 8022914:	607b      	str	r3, [r7, #4]
 8022916:	687b      	ldr	r3, [r7, #4]
 8022918:	2b09      	cmp	r3, #9
 802291a:	d9a6      	bls.n	802286a <ETH_IRQHandler+0x2e>
 802291c:	e000      	b.n	8022920 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 802291e:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8022920:	4b08      	ldr	r3, [pc, #32]	@ (8022944 <ETH_IRQHandler+0x108>)
 8022922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8022926:	461a      	mov	r2, r3
 8022928:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 802292c:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8022930:	4a04      	ldr	r2, [pc, #16]	@ (8022944 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 8022932:	4b09      	ldr	r3, [pc, #36]	@ (8022958 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8022934:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8022938:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 802293c:	bf00      	nop
 802293e:	3708      	adds	r7, #8
 8022940:	46bd      	mov	sp, r7
 8022942:	bd80      	pop	{r7, pc}
 8022944:	40028000 	.word	0x40028000
 8022948:	240051dc 	.word	0x240051dc
 802294c:	24002134 	.word	0x24002134
 8022950:	240021b4 	.word	0x240021b4
 8022954:	240051d4 	.word	0x240051d4
 8022958:	24002164 	.word	0x24002164

0802295c <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1749138029},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 802295c:	b480      	push	{r7}
 802295e:	b083      	sub	sp, #12
 8022960:	af00      	add	r7, sp, #0
 8022962:	6078      	str	r0, [r7, #4]
 8022964:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 8022966:	e005      	b.n	8022974 <scmp+0x18>
 8022968:	687b      	ldr	r3, [r7, #4]
 802296a:	3301      	adds	r3, #1
 802296c:	607b      	str	r3, [r7, #4]
 802296e:	683b      	ldr	r3, [r7, #0]
 8022970:	3301      	adds	r3, #1
 8022972:	603b      	str	r3, [r7, #0]
 8022974:	687b      	ldr	r3, [r7, #4]
 8022976:	781b      	ldrb	r3, [r3, #0]
 8022978:	2b00      	cmp	r3, #0
 802297a:	d005      	beq.n	8022988 <scmp+0x2c>
 802297c:	687b      	ldr	r3, [r7, #4]
 802297e:	781a      	ldrb	r2, [r3, #0]
 8022980:	683b      	ldr	r3, [r7, #0]
 8022982:	781b      	ldrb	r3, [r3, #0]
 8022984:	429a      	cmp	r2, r3
 8022986:	d0ef      	beq.n	8022968 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 8022988:	687b      	ldr	r3, [r7, #4]
 802298a:	781b      	ldrb	r3, [r3, #0]
 802298c:	461a      	mov	r2, r3
 802298e:	683b      	ldr	r3, [r7, #0]
 8022990:	781b      	ldrb	r3, [r3, #0]
 8022992:	1ad3      	subs	r3, r2, r3
}
 8022994:	4618      	mov	r0, r3
 8022996:	370c      	adds	r7, #12
 8022998:	46bd      	mov	sp, r7
 802299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802299e:	4770      	bx	lr

080229a0 <mg_unlist>:
const char *mg_unlist(size_t no) {
 80229a0:	b480      	push	{r7}
 80229a2:	b083      	sub	sp, #12
 80229a4:	af00      	add	r7, sp, #0
 80229a6:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 80229a8:	4906      	ldr	r1, [pc, #24]	@ (80229c4 <mg_unlist+0x24>)
 80229aa:	687a      	ldr	r2, [r7, #4]
 80229ac:	4613      	mov	r3, r2
 80229ae:	005b      	lsls	r3, r3, #1
 80229b0:	4413      	add	r3, r2
 80229b2:	00db      	lsls	r3, r3, #3
 80229b4:	440b      	add	r3, r1
 80229b6:	681b      	ldr	r3, [r3, #0]
}
 80229b8:	4618      	mov	r0, r3
 80229ba:	370c      	adds	r7, #12
 80229bc:	46bd      	mov	sp, r7
 80229be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229c2:	4770      	bx	lr
 80229c4:	08037570 	.word	0x08037570

080229c8 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 80229c8:	b580      	push	{r7, lr}
 80229ca:	b086      	sub	sp, #24
 80229cc:	af00      	add	r7, sp, #0
 80229ce:	60f8      	str	r0, [r7, #12]
 80229d0:	60b9      	str	r1, [r7, #8]
 80229d2:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 80229d4:	4b16      	ldr	r3, [pc, #88]	@ (8022a30 <mg_unpack+0x68>)
 80229d6:	617b      	str	r3, [r7, #20]
 80229d8:	e020      	b.n	8022a1c <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 80229da:	697b      	ldr	r3, [r7, #20]
 80229dc:	681b      	ldr	r3, [r3, #0]
 80229de:	68f9      	ldr	r1, [r7, #12]
 80229e0:	4618      	mov	r0, r3
 80229e2:	f7ff ffbb 	bl	802295c <scmp>
 80229e6:	4603      	mov	r3, r0
 80229e8:	2b00      	cmp	r3, #0
 80229ea:	d113      	bne.n	8022a14 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 80229ec:	68bb      	ldr	r3, [r7, #8]
 80229ee:	2b00      	cmp	r3, #0
 80229f0:	d004      	beq.n	80229fc <mg_unpack+0x34>
 80229f2:	697b      	ldr	r3, [r7, #20]
 80229f4:	689b      	ldr	r3, [r3, #8]
 80229f6:	1e5a      	subs	r2, r3, #1
 80229f8:	68bb      	ldr	r3, [r7, #8]
 80229fa:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	2b00      	cmp	r3, #0
 8022a00:	d005      	beq.n	8022a0e <mg_unpack+0x46>
 8022a02:	697b      	ldr	r3, [r7, #20]
 8022a04:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8022a08:	6879      	ldr	r1, [r7, #4]
 8022a0a:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 8022a0e:	697b      	ldr	r3, [r7, #20]
 8022a10:	685b      	ldr	r3, [r3, #4]
 8022a12:	e008      	b.n	8022a26 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 8022a14:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 8022a16:	697b      	ldr	r3, [r7, #20]
 8022a18:	3318      	adds	r3, #24
 8022a1a:	617b      	str	r3, [r7, #20]
 8022a1c:	697b      	ldr	r3, [r7, #20]
 8022a1e:	681b      	ldr	r3, [r3, #0]
 8022a20:	2b00      	cmp	r3, #0
 8022a22:	d1da      	bne.n	80229da <mg_unpack+0x12>
  }
  return NULL;
 8022a24:	2300      	movs	r3, #0
}
 8022a26:	4618      	mov	r0, r3
 8022a28:	3718      	adds	r7, #24
 8022a2a:	46bd      	mov	sp, r7
 8022a2c:	bd80      	pop	{r7, pc}
 8022a2e:	bf00      	nop
 8022a30:	08037570 	.word	0x08037570

08022a34 <glue_modbus_read_reg>:

// Read/write registers via Modbus API
// Return true if the register is read/written successfully, false otherwise
// The address is a 16-bit unsigned integer, the value is also a 16-bit unsigned integer
// The address is in the range [s_modbus_base, s_modbus_base + count), where count is the number of registers
bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 8022a34:	b580      	push	{r7, lr}
 8022a36:	b084      	sub	sp, #16
 8022a38:	af00      	add	r7, sp, #0
 8022a3a:	4603      	mov	r3, r0
 8022a3c:	6039      	str	r1, [r7, #0]
 8022a3e:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 8022a40:	2300      	movs	r3, #0
 8022a42:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8022a44:	23e1      	movs	r3, #225	@ 0xe1
 8022a46:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8022a48:	4b19      	ldr	r3, [pc, #100]	@ (8022ab0 <glue_modbus_read_reg+0x7c>)
 8022a4a:	881b      	ldrh	r3, [r3, #0]
 8022a4c:	88fa      	ldrh	r2, [r7, #6]
 8022a4e:	429a      	cmp	r2, r3
 8022a50:	d312      	bcc.n	8022a78 <glue_modbus_read_reg+0x44>
 8022a52:	88fa      	ldrh	r2, [r7, #6]
 8022a54:	4b16      	ldr	r3, [pc, #88]	@ (8022ab0 <glue_modbus_read_reg+0x7c>)
 8022a56:	881b      	ldrh	r3, [r3, #0]
 8022a58:	4619      	mov	r1, r3
 8022a5a:	68bb      	ldr	r3, [r7, #8]
 8022a5c:	440b      	add	r3, r1
 8022a5e:	429a      	cmp	r2, r3
 8022a60:	d20a      	bcs.n	8022a78 <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 8022a62:	88fb      	ldrh	r3, [r7, #6]
 8022a64:	4a12      	ldr	r2, [pc, #72]	@ (8022ab0 <glue_modbus_read_reg+0x7c>)
 8022a66:	8812      	ldrh	r2, [r2, #0]
 8022a68:	1a9b      	subs	r3, r3, r2
 8022a6a:	4a12      	ldr	r2, [pc, #72]	@ (8022ab4 <glue_modbus_read_reg+0x80>)
 8022a6c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8022a70:	683b      	ldr	r3, [r7, #0]
 8022a72:	801a      	strh	r2, [r3, #0]
    success = true;
 8022a74:	2301      	movs	r3, #1
 8022a76:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Read OK" : "Read FAIL", address, *value));
 8022a78:	4b0f      	ldr	r3, [pc, #60]	@ (8022ab8 <glue_modbus_read_reg+0x84>)
 8022a7a:	681b      	ldr	r3, [r3, #0]
 8022a7c:	2b01      	cmp	r3, #1
 8022a7e:	dd11      	ble.n	8022aa4 <glue_modbus_read_reg+0x70>
 8022a80:	4b0e      	ldr	r3, [pc, #56]	@ (8022abc <glue_modbus_read_reg+0x88>)
 8022a82:	221a      	movs	r2, #26
 8022a84:	490e      	ldr	r1, [pc, #56]	@ (8022ac0 <glue_modbus_read_reg+0x8c>)
 8022a86:	2002      	movs	r0, #2
 8022a88:	f7eb f960 	bl	800dd4c <mg_log_prefix>
 8022a8c:	7bfb      	ldrb	r3, [r7, #15]
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	d001      	beq.n	8022a96 <glue_modbus_read_reg+0x62>
 8022a92:	490c      	ldr	r1, [pc, #48]	@ (8022ac4 <glue_modbus_read_reg+0x90>)
 8022a94:	e000      	b.n	8022a98 <glue_modbus_read_reg+0x64>
 8022a96:	490c      	ldr	r1, [pc, #48]	@ (8022ac8 <glue_modbus_read_reg+0x94>)
 8022a98:	88fa      	ldrh	r2, [r7, #6]
 8022a9a:	683b      	ldr	r3, [r7, #0]
 8022a9c:	881b      	ldrh	r3, [r3, #0]
 8022a9e:	480b      	ldr	r0, [pc, #44]	@ (8022acc <glue_modbus_read_reg+0x98>)
 8022aa0:	f7eb f9a4 	bl	800ddec <mg_log>
  return success;
 8022aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8022aa6:	4618      	mov	r0, r3
 8022aa8:	3710      	adds	r7, #16
 8022aaa:	46bd      	mov	sp, r7
 8022aac:	bd80      	pop	{r7, pc}
 8022aae:	bf00      	nop
 8022ab0:	240002b0 	.word	0x240002b0
 8022ab4:	24005274 	.word	0x24005274
 8022ab8:	24000258 	.word	0x24000258
 8022abc:	080375a0 	.word	0x080375a0
 8022ac0:	08028f74 	.word	0x08028f74
 8022ac4:	08028f90 	.word	0x08028f90
 8022ac8:	08028f98 	.word	0x08028f98
 8022acc:	08028fa4 	.word	0x08028fa4

08022ad0 <ws_voltage>:

void ws_voltage(struct mg_connection *c) {
 8022ad0:	b580      	push	{r7, lr}
 8022ad2:	b086      	sub	sp, #24
 8022ad4:	af04      	add	r7, sp, #16
 8022ad6:	6078      	str	r0, [r7, #4]
  mg_ws_printf(c, WEBSOCKET_OP_TEXT, "{%m: %u}", MG_ESC("voltage"), glue_get_local_reg(1010));
 8022ad8:	f240 30f2 	movw	r0, #1010	@ 0x3f2
 8022adc:	f000 f864 	bl	8022ba8 <glue_get_local_reg>
 8022ae0:	4603      	mov	r3, r0
 8022ae2:	9302      	str	r3, [sp, #8]
 8022ae4:	4b06      	ldr	r3, [pc, #24]	@ (8022b00 <ws_voltage+0x30>)
 8022ae6:	9301      	str	r3, [sp, #4]
 8022ae8:	2300      	movs	r3, #0
 8022aea:	9300      	str	r3, [sp, #0]
 8022aec:	4b05      	ldr	r3, [pc, #20]	@ (8022b04 <ws_voltage+0x34>)
 8022aee:	4a06      	ldr	r2, [pc, #24]	@ (8022b08 <ws_voltage+0x38>)
 8022af0:	2101      	movs	r1, #1
 8022af2:	6878      	ldr	r0, [r7, #4]
 8022af4:	f7fe fc1a 	bl	802132c <mg_ws_printf>
}
 8022af8:	bf00      	nop
 8022afa:	3708      	adds	r7, #8
 8022afc:	46bd      	mov	sp, r7
 8022afe:	bd80      	pop	{r7, pc}
 8022b00:	08028fc0 	.word	0x08028fc0
 8022b04:	08012a4d 	.word	0x08012a4d
 8022b08:	08028fb4 	.word	0x08028fb4

08022b0c <glue_modbus_write_reg>:

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 8022b0c:	b580      	push	{r7, lr}
 8022b0e:	b084      	sub	sp, #16
 8022b10:	af00      	add	r7, sp, #0
 8022b12:	4603      	mov	r3, r0
 8022b14:	460a      	mov	r2, r1
 8022b16:	80fb      	strh	r3, [r7, #6]
 8022b18:	4613      	mov	r3, r2
 8022b1a:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 8022b1c:	2300      	movs	r3, #0
 8022b1e:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8022b20:	23e1      	movs	r3, #225	@ 0xe1
 8022b22:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8022b24:	4b18      	ldr	r3, [pc, #96]	@ (8022b88 <glue_modbus_write_reg+0x7c>)
 8022b26:	881b      	ldrh	r3, [r3, #0]
 8022b28:	88fa      	ldrh	r2, [r7, #6]
 8022b2a:	429a      	cmp	r2, r3
 8022b2c:	d311      	bcc.n	8022b52 <glue_modbus_write_reg+0x46>
 8022b2e:	88fa      	ldrh	r2, [r7, #6]
 8022b30:	4b15      	ldr	r3, [pc, #84]	@ (8022b88 <glue_modbus_write_reg+0x7c>)
 8022b32:	881b      	ldrh	r3, [r3, #0]
 8022b34:	4619      	mov	r1, r3
 8022b36:	68bb      	ldr	r3, [r7, #8]
 8022b38:	440b      	add	r3, r1
 8022b3a:	429a      	cmp	r2, r3
 8022b3c:	d209      	bcs.n	8022b52 <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 8022b3e:	88fb      	ldrh	r3, [r7, #6]
 8022b40:	4a11      	ldr	r2, [pc, #68]	@ (8022b88 <glue_modbus_write_reg+0x7c>)
 8022b42:	8812      	ldrh	r2, [r2, #0]
 8022b44:	1a9b      	subs	r3, r3, r2
 8022b46:	4911      	ldr	r1, [pc, #68]	@ (8022b8c <glue_modbus_write_reg+0x80>)
 8022b48:	88ba      	ldrh	r2, [r7, #4]
 8022b4a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 8022b4e:	2301      	movs	r3, #1
 8022b50:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Write OK" : "Write FAIL", address, value));
 8022b52:	4b0f      	ldr	r3, [pc, #60]	@ (8022b90 <glue_modbus_write_reg+0x84>)
 8022b54:	681b      	ldr	r3, [r3, #0]
 8022b56:	2b01      	cmp	r3, #1
 8022b58:	dd10      	ble.n	8022b7c <glue_modbus_write_reg+0x70>
 8022b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8022b94 <glue_modbus_write_reg+0x88>)
 8022b5c:	2229      	movs	r2, #41	@ 0x29
 8022b5e:	490e      	ldr	r1, [pc, #56]	@ (8022b98 <glue_modbus_write_reg+0x8c>)
 8022b60:	2002      	movs	r0, #2
 8022b62:	f7eb f8f3 	bl	800dd4c <mg_log_prefix>
 8022b66:	7bfb      	ldrb	r3, [r7, #15]
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	d001      	beq.n	8022b70 <glue_modbus_write_reg+0x64>
 8022b6c:	490b      	ldr	r1, [pc, #44]	@ (8022b9c <glue_modbus_write_reg+0x90>)
 8022b6e:	e000      	b.n	8022b72 <glue_modbus_write_reg+0x66>
 8022b70:	490b      	ldr	r1, [pc, #44]	@ (8022ba0 <glue_modbus_write_reg+0x94>)
 8022b72:	88fa      	ldrh	r2, [r7, #6]
 8022b74:	88bb      	ldrh	r3, [r7, #4]
 8022b76:	480b      	ldr	r0, [pc, #44]	@ (8022ba4 <glue_modbus_write_reg+0x98>)
 8022b78:	f7eb f938 	bl	800ddec <mg_log>
  return success;
 8022b7c:	7bfb      	ldrb	r3, [r7, #15]

}
 8022b7e:	4618      	mov	r0, r3
 8022b80:	3710      	adds	r7, #16
 8022b82:	46bd      	mov	sp, r7
 8022b84:	bd80      	pop	{r7, pc}
 8022b86:	bf00      	nop
 8022b88:	240002b0 	.word	0x240002b0
 8022b8c:	24005274 	.word	0x24005274
 8022b90:	24000258 	.word	0x24000258
 8022b94:	080375b8 	.word	0x080375b8
 8022b98:	08028f74 	.word	0x08028f74
 8022b9c:	08028fc8 	.word	0x08028fc8
 8022ba0:	08028fd4 	.word	0x08028fd4
 8022ba4:	08028fa4 	.word	0x08028fa4

08022ba8 <glue_get_local_reg>:

uint16_t glue_get_local_reg(uint16_t address) {
 8022ba8:	b480      	push	{r7}
 8022baa:	b085      	sub	sp, #20
 8022bac:	af00      	add	r7, sp, #0
 8022bae:	4603      	mov	r3, r0
 8022bb0:	80fb      	strh	r3, [r7, #6]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8022bb2:	23e1      	movs	r3, #225	@ 0xe1
 8022bb4:	60fb      	str	r3, [r7, #12]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8022bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8022bf0 <glue_get_local_reg+0x48>)
 8022bb8:	881b      	ldrh	r3, [r3, #0]
 8022bba:	88fa      	ldrh	r2, [r7, #6]
 8022bbc:	429a      	cmp	r2, r3
 8022bbe:	d30f      	bcc.n	8022be0 <glue_get_local_reg+0x38>
 8022bc0:	88fa      	ldrh	r2, [r7, #6]
 8022bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8022bf0 <glue_get_local_reg+0x48>)
 8022bc4:	881b      	ldrh	r3, [r3, #0]
 8022bc6:	4619      	mov	r1, r3
 8022bc8:	68fb      	ldr	r3, [r7, #12]
 8022bca:	440b      	add	r3, r1
 8022bcc:	429a      	cmp	r2, r3
 8022bce:	d207      	bcs.n	8022be0 <glue_get_local_reg+0x38>
    return s_modbus_regs[address - s_modbus_base];
 8022bd0:	88fb      	ldrh	r3, [r7, #6]
 8022bd2:	4a07      	ldr	r2, [pc, #28]	@ (8022bf0 <glue_get_local_reg+0x48>)
 8022bd4:	8812      	ldrh	r2, [r2, #0]
 8022bd6:	1a9b      	subs	r3, r3, r2
 8022bd8:	4a06      	ldr	r2, [pc, #24]	@ (8022bf4 <glue_get_local_reg+0x4c>)
 8022bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8022bde:	e000      	b.n	8022be2 <glue_get_local_reg+0x3a>
  }
  return 0;
 8022be0:	2300      	movs	r3, #0
}
 8022be2:	4618      	mov	r0, r3
 8022be4:	3714      	adds	r7, #20
 8022be6:	46bd      	mov	sp, r7
 8022be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bec:	4770      	bx	lr
 8022bee:	bf00      	nop
 8022bf0:	240002b0 	.word	0x240002b0
 8022bf4:	24005274 	.word	0x24005274

08022bf8 <glue_authenticate>:
  return true;
}
// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 8022bf8:	b580      	push	{r7, lr}
 8022bfa:	b084      	sub	sp, #16
 8022bfc:	af00      	add	r7, sp, #0
 8022bfe:	6078      	str	r0, [r7, #4]
 8022c00:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 8022c02:	2300      	movs	r3, #0
 8022c04:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "admin") == 0 && strcmp(pass, "admin") == 0) {
 8022c06:	4913      	ldr	r1, [pc, #76]	@ (8022c54 <glue_authenticate+0x5c>)
 8022c08:	6878      	ldr	r0, [r7, #4]
 8022c0a:	f7dd fb81 	bl	8000310 <strcmp>
 8022c0e:	4603      	mov	r3, r0
 8022c10:	2b00      	cmp	r3, #0
 8022c12:	d109      	bne.n	8022c28 <glue_authenticate+0x30>
 8022c14:	490f      	ldr	r1, [pc, #60]	@ (8022c54 <glue_authenticate+0x5c>)
 8022c16:	6838      	ldr	r0, [r7, #0]
 8022c18:	f7dd fb7a 	bl	8000310 <strcmp>
 8022c1c:	4603      	mov	r3, r0
 8022c1e:	2b00      	cmp	r3, #0
 8022c20:	d102      	bne.n	8022c28 <glue_authenticate+0x30>
    level = 7;  // Administrator
 8022c22:	2307      	movs	r3, #7
 8022c24:	60fb      	str	r3, [r7, #12]
 8022c26:	e00f      	b.n	8022c48 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 8022c28:	490b      	ldr	r1, [pc, #44]	@ (8022c58 <glue_authenticate+0x60>)
 8022c2a:	6878      	ldr	r0, [r7, #4]
 8022c2c:	f7dd fb70 	bl	8000310 <strcmp>
 8022c30:	4603      	mov	r3, r0
 8022c32:	2b00      	cmp	r3, #0
 8022c34:	d108      	bne.n	8022c48 <glue_authenticate+0x50>
 8022c36:	4908      	ldr	r1, [pc, #32]	@ (8022c58 <glue_authenticate+0x60>)
 8022c38:	6838      	ldr	r0, [r7, #0]
 8022c3a:	f7dd fb69 	bl	8000310 <strcmp>
 8022c3e:	4603      	mov	r3, r0
 8022c40:	2b00      	cmp	r3, #0
 8022c42:	d101      	bne.n	8022c48 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 8022c44:	2303      	movs	r3, #3
 8022c46:	60fb      	str	r3, [r7, #12]
  }
  return level;
 8022c48:	68fb      	ldr	r3, [r7, #12]
}
 8022c4a:	4618      	mov	r0, r3
 8022c4c:	3710      	adds	r7, #16
 8022c4e:	46bd      	mov	sp, r7
 8022c50:	bd80      	pop	{r7, pc}
 8022c52:	bf00      	nop
 8022c54:	08028fe0 	.word	0x08028fe0
 8022c58:	08028fe8 	.word	0x08028fe8

08022c5c <glue_check_reboot>:

static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 8022c5c:	b580      	push	{r7, lr}
 8022c5e:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 8022c60:	f7f3 f84e 	bl	8015d00 <mg_now>
 8022c64:	4b05      	ldr	r3, [pc, #20]	@ (8022c7c <glue_check_reboot+0x20>)
 8022c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022c6a:	4290      	cmp	r0, r2
 8022c6c:	eb71 0303 	sbcs.w	r3, r1, r3
 8022c70:	bf34      	ite	cc
 8022c72:	2301      	movcc	r3, #1
 8022c74:	2300      	movcs	r3, #0
 8022c76:	b2db      	uxtb	r3, r3
}
 8022c78:	4618      	mov	r0, r3
 8022c7a:	bd80      	pop	{r7, pc}
 8022c7c:	24005438 	.word	0x24005438

08022c80 <glue_start_reboot>:
void glue_start_reboot(struct mg_str params) {
 8022c80:	b5b0      	push	{r4, r5, r7, lr}
 8022c82:	b082      	sub	sp, #8
 8022c84:	af00      	add	r7, sp, #0
 8022c86:	463b      	mov	r3, r7
 8022c88:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 8022c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8022ccc <glue_start_reboot+0x4c>)
 8022c8e:	681b      	ldr	r3, [r3, #0]
 8022c90:	2b02      	cmp	r3, #2
 8022c92:	dd0b      	ble.n	8022cac <glue_start_reboot+0x2c>
 8022c94:	4b0e      	ldr	r3, [pc, #56]	@ (8022cd0 <glue_start_reboot+0x50>)
 8022c96:	224e      	movs	r2, #78	@ 0x4e
 8022c98:	490e      	ldr	r1, [pc, #56]	@ (8022cd4 <glue_start_reboot+0x54>)
 8022c9a:	2003      	movs	r0, #3
 8022c9c:	f7eb f856 	bl	800dd4c <mg_log_prefix>
 8022ca0:	687b      	ldr	r3, [r7, #4]
 8022ca2:	683a      	ldr	r2, [r7, #0]
 8022ca4:	4619      	mov	r1, r3
 8022ca6:	480c      	ldr	r0, [pc, #48]	@ (8022cd8 <glue_start_reboot+0x58>)
 8022ca8:	f7eb f8a0 	bl	800ddec <mg_log>
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 8022cac:	f7f3 f828 	bl	8015d00 <mg_now>
 8022cb0:	4602      	mov	r2, r0
 8022cb2:	460b      	mov	r3, r1
 8022cb4:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8022cb8:	f143 0500 	adc.w	r5, r3, #0
 8022cbc:	4b07      	ldr	r3, [pc, #28]	@ (8022cdc <glue_start_reboot+0x5c>)
 8022cbe:	e9c3 4500 	strd	r4, r5, [r3]
}
 8022cc2:	bf00      	nop
 8022cc4:	3708      	adds	r7, #8
 8022cc6:	46bd      	mov	sp, r7
 8022cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8022cca:	bf00      	nop
 8022ccc:	24000258 	.word	0x24000258
 8022cd0:	080375d0 	.word	0x080375d0
 8022cd4:	08028f74 	.word	0x08028f74
 8022cd8:	08028ff0 	.word	0x08028ff0
 8022cdc:	24005438 	.word	0x24005438

08022ce0 <glue_check_reformat>:

static uint64_t s_action_timeout_reformat;  // Time when reformat ends
bool glue_check_reformat(void) {
 8022ce0:	b580      	push	{r7, lr}
 8022ce2:	af00      	add	r7, sp, #0
  return s_action_timeout_reformat > mg_now(); // Return true if reformat is in progress
 8022ce4:	f7f3 f80c 	bl	8015d00 <mg_now>
 8022ce8:	4b05      	ldr	r3, [pc, #20]	@ (8022d00 <glue_check_reformat+0x20>)
 8022cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022cee:	4290      	cmp	r0, r2
 8022cf0:	eb71 0303 	sbcs.w	r3, r1, r3
 8022cf4:	bf34      	ite	cc
 8022cf6:	2301      	movcc	r3, #1
 8022cf8:	2300      	movcs	r3, #0
 8022cfa:	b2db      	uxtb	r3, r3
}
 8022cfc:	4618      	mov	r0, r3
 8022cfe:	bd80      	pop	{r7, pc}
 8022d00:	24005440 	.word	0x24005440

08022d04 <glue_start_reformat>:
void glue_start_reformat(struct mg_str params) {
 8022d04:	b5b0      	push	{r4, r5, r7, lr}
 8022d06:	b082      	sub	sp, #8
 8022d08:	af00      	add	r7, sp, #0
 8022d0a:	463b      	mov	r3, r7
 8022d0c:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 8022d10:	4b0f      	ldr	r3, [pc, #60]	@ (8022d50 <glue_start_reformat+0x4c>)
 8022d12:	681b      	ldr	r3, [r3, #0]
 8022d14:	2b02      	cmp	r3, #2
 8022d16:	dd0b      	ble.n	8022d30 <glue_start_reformat+0x2c>
 8022d18:	4b0e      	ldr	r3, [pc, #56]	@ (8022d54 <glue_start_reformat+0x50>)
 8022d1a:	2257      	movs	r2, #87	@ 0x57
 8022d1c:	490e      	ldr	r1, [pc, #56]	@ (8022d58 <glue_start_reformat+0x54>)
 8022d1e:	2003      	movs	r0, #3
 8022d20:	f7eb f814 	bl	800dd4c <mg_log_prefix>
 8022d24:	687b      	ldr	r3, [r7, #4]
 8022d26:	683a      	ldr	r2, [r7, #0]
 8022d28:	4619      	mov	r1, r3
 8022d2a:	480c      	ldr	r0, [pc, #48]	@ (8022d5c <glue_start_reformat+0x58>)
 8022d2c:	f7eb f85e 	bl	800ddec <mg_log>
  s_action_timeout_reformat = mg_now() + 1000; // Start reformat, finish after 1 second
 8022d30:	f7f2 ffe6 	bl	8015d00 <mg_now>
 8022d34:	4602      	mov	r2, r0
 8022d36:	460b      	mov	r3, r1
 8022d38:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8022d3c:	f143 0500 	adc.w	r5, r3, #0
 8022d40:	4b07      	ldr	r3, [pc, #28]	@ (8022d60 <glue_start_reformat+0x5c>)
 8022d42:	e9c3 4500 	strd	r4, r5, [r3]
}
 8022d46:	bf00      	nop
 8022d48:	3708      	adds	r7, #8
 8022d4a:	46bd      	mov	sp, r7
 8022d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8022d4e:	bf00      	nop
 8022d50:	24000258 	.word	0x24000258
 8022d54:	080375e4 	.word	0x080375e4
 8022d58:	08028f74 	.word	0x08028f74
 8022d5c:	08028ff0 	.word	0x08028ff0
 8022d60:	24005440 	.word	0x24005440

08022d64 <glue_ota_begin_firmware_update>:

void *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 8022d64:	b580      	push	{r7, lr}
 8022d66:	b084      	sub	sp, #16
 8022d68:	af00      	add	r7, sp, #0
 8022d6a:	6078      	str	r0, [r7, #4]
 8022d6c:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 8022d6e:	6838      	ldr	r0, [r7, #0]
 8022d70:	f7ef fb0e 	bl	8012390 <mg_ota_begin>
 8022d74:	4603      	mov	r3, r0
 8022d76:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
 8022d78:	4b0c      	ldr	r3, [pc, #48]	@ (8022dac <glue_ota_begin_firmware_update+0x48>)
 8022d7a:	681b      	ldr	r3, [r3, #0]
 8022d7c:	2b02      	cmp	r3, #2
 8022d7e:	dd0b      	ble.n	8022d98 <glue_ota_begin_firmware_update+0x34>
 8022d80:	4b0b      	ldr	r3, [pc, #44]	@ (8022db0 <glue_ota_begin_firmware_update+0x4c>)
 8022d82:	225d      	movs	r2, #93	@ 0x5d
 8022d84:	490b      	ldr	r1, [pc, #44]	@ (8022db4 <glue_ota_begin_firmware_update+0x50>)
 8022d86:	2003      	movs	r0, #3
 8022d88:	f7ea ffe0 	bl	800dd4c <mg_log_prefix>
 8022d8c:	7bfb      	ldrb	r3, [r7, #15]
 8022d8e:	683a      	ldr	r2, [r7, #0]
 8022d90:	6879      	ldr	r1, [r7, #4]
 8022d92:	4809      	ldr	r0, [pc, #36]	@ (8022db8 <glue_ota_begin_firmware_update+0x54>)
 8022d94:	f7eb f82a 	bl	800ddec <mg_log>
  return ok ? (void *) 1 : NULL;
 8022d98:	7bfb      	ldrb	r3, [r7, #15]
 8022d9a:	2b00      	cmp	r3, #0
 8022d9c:	d001      	beq.n	8022da2 <glue_ota_begin_firmware_update+0x3e>
 8022d9e:	2301      	movs	r3, #1
 8022da0:	e000      	b.n	8022da4 <glue_ota_begin_firmware_update+0x40>
 8022da2:	2300      	movs	r3, #0
}
 8022da4:	4618      	mov	r0, r3
 8022da6:	3710      	adds	r7, #16
 8022da8:	46bd      	mov	sp, r7
 8022daa:	bd80      	pop	{r7, pc}
 8022dac:	24000258 	.word	0x24000258
 8022db0:	080375f8 	.word	0x080375f8
 8022db4:	08028f74 	.word	0x08028f74
 8022db8:	0802900c 	.word	0x0802900c

08022dbc <glue_ota_end_firmware_update>:
bool glue_ota_end_firmware_update(void *context) {
 8022dbc:	b580      	push	{r7, lr}
 8022dbe:	b086      	sub	sp, #24
 8022dc0:	af04      	add	r7, sp, #16
 8022dc2:	6078      	str	r0, [r7, #4]
  mg_timer_add(&g_mgr, 500, 0, (void (*)(void *)) (void *) mg_ota_end, context);
 8022dc4:	687b      	ldr	r3, [r7, #4]
 8022dc6:	9302      	str	r3, [sp, #8]
 8022dc8:	4b07      	ldr	r3, [pc, #28]	@ (8022de8 <glue_ota_end_firmware_update+0x2c>)
 8022dca:	9301      	str	r3, [sp, #4]
 8022dcc:	2300      	movs	r3, #0
 8022dce:	9300      	str	r3, [sp, #0]
 8022dd0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8022dd4:	f04f 0300 	mov.w	r3, #0
 8022dd8:	4804      	ldr	r0, [pc, #16]	@ (8022dec <glue_ota_end_firmware_update+0x30>)
 8022dda:	f7eb fd79 	bl	800e8d0 <mg_timer_add>
  return true;
 8022dde:	2301      	movs	r3, #1
}
 8022de0:	4618      	mov	r0, r3
 8022de2:	3708      	adds	r7, #8
 8022de4:	46bd      	mov	sp, r7
 8022de6:	bd80      	pop	{r7, pc}
 8022de8:	080123e1 	.word	0x080123e1
 8022dec:	24005448 	.word	0x24005448

08022df0 <glue_ota_write_firmware_update>:
bool glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 8022df0:	b580      	push	{r7, lr}
 8022df2:	b084      	sub	sp, #16
 8022df4:	af00      	add	r7, sp, #0
 8022df6:	60f8      	str	r0, [r7, #12]
 8022df8:	60b9      	str	r1, [r7, #8]
 8022dfa:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
 8022dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8022e30 <glue_ota_write_firmware_update+0x40>)
 8022dfe:	681b      	ldr	r3, [r3, #0]
 8022e00:	2b02      	cmp	r3, #2
 8022e02:	dd0b      	ble.n	8022e1c <glue_ota_write_firmware_update+0x2c>
 8022e04:	4b0b      	ldr	r3, [pc, #44]	@ (8022e34 <glue_ota_write_firmware_update+0x44>)
 8022e06:	2265      	movs	r2, #101	@ 0x65
 8022e08:	490b      	ldr	r1, [pc, #44]	@ (8022e38 <glue_ota_write_firmware_update+0x48>)
 8022e0a:	2003      	movs	r0, #3
 8022e0c:	f7ea ff9e 	bl	800dd4c <mg_log_prefix>
 8022e10:	687b      	ldr	r3, [r7, #4]
 8022e12:	68ba      	ldr	r2, [r7, #8]
 8022e14:	68f9      	ldr	r1, [r7, #12]
 8022e16:	4809      	ldr	r0, [pc, #36]	@ (8022e3c <glue_ota_write_firmware_update+0x4c>)
 8022e18:	f7ea ffe8 	bl	800ddec <mg_log>
  return mg_ota_write(buf, len);
 8022e1c:	6879      	ldr	r1, [r7, #4]
 8022e1e:	68b8      	ldr	r0, [r7, #8]
 8022e20:	f7ef facc 	bl	80123bc <mg_ota_write>
 8022e24:	4603      	mov	r3, r0
}
 8022e26:	4618      	mov	r0, r3
 8022e28:	3710      	adds	r7, #16
 8022e2a:	46bd      	mov	sp, r7
 8022e2c:	bd80      	pop	{r7, pc}
 8022e2e:	bf00      	nop
 8022e30:	24000258 	.word	0x24000258
 8022e34:	08037618 	.word	0x08037618
 8022e38:	08028f74 	.word	0x08028f74
 8022e3c:	08029020 	.word	0x08029020

08022e40 <glue_upload_open_file_upload>:

void *glue_upload_open_file_upload(char *file_name, size_t total_size) {
 8022e40:	b580      	push	{r7, lr}
 8022e42:	b0a4      	sub	sp, #144	@ 0x90
 8022e44:	af00      	add	r7, sp, #0
 8022e46:	6078      	str	r0, [r7, #4]
 8022e48:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 8022e4a:	2300      	movs	r3, #0
 8022e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 8022e50:	2300      	movs	r3, #0
 8022e52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 8022e56:	212f      	movs	r1, #47	@ 0x2f
 8022e58:	6878      	ldr	r0, [r7, #4]
 8022e5a:	f002 fcd1 	bl	8025800 <strrchr>
 8022e5e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8022e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022e66:	2b00      	cmp	r3, #0
 8022e68:	d102      	bne.n	8022e70 <glue_upload_open_file_upload+0x30>
 8022e6a:	687b      	ldr	r3, [r7, #4]
 8022e6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 8022e70:	f107 0008 	add.w	r0, r7, #8
 8022e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8022e78:	4a0d      	ldr	r2, [pc, #52]	@ (8022eb0 <glue_upload_open_file_upload+0x70>)
 8022e7a:	2180      	movs	r1, #128	@ 0x80
 8022e7c:	f7ef fba0 	bl	80125c0 <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
 8022e80:	4b0c      	ldr	r3, [pc, #48]	@ (8022eb4 <glue_upload_open_file_upload+0x74>)
 8022e82:	681b      	ldr	r3, [r3, #0]
 8022e84:	2b02      	cmp	r3, #2
 8022e86:	dd0d      	ble.n	8022ea4 <glue_upload_open_file_upload+0x64>
 8022e88:	4b0b      	ldr	r3, [pc, #44]	@ (8022eb8 <glue_upload_open_file_upload+0x78>)
 8022e8a:	2271      	movs	r2, #113	@ 0x71
 8022e8c:	490b      	ldr	r1, [pc, #44]	@ (8022ebc <glue_upload_open_file_upload+0x7c>)
 8022e8e:	2003      	movs	r0, #3
 8022e90:	f7ea ff5c 	bl	800dd4c <mg_log_prefix>
 8022e94:	f107 0108 	add.w	r1, r7, #8
 8022e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8022e9c:	683a      	ldr	r2, [r7, #0]
 8022e9e:	4808      	ldr	r0, [pc, #32]	@ (8022ec0 <glue_upload_open_file_upload+0x80>)
 8022ea0:	f7ea ffa4 	bl	800ddec <mg_log>
  return fp;
 8022ea4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8022ea8:	4618      	mov	r0, r3
 8022eaa:	3790      	adds	r7, #144	@ 0x90
 8022eac:	46bd      	mov	sp, r7
 8022eae:	bd80      	pop	{r7, pc}
 8022eb0:	08029030 	.word	0x08029030
 8022eb4:	24000258 	.word	0x24000258
 8022eb8:	08037638 	.word	0x08037638
 8022ebc:	08028f74 	.word	0x08028f74
 8022ec0:	08029038 	.word	0x08029038

08022ec4 <glue_upload_close_file_upload>:
bool glue_upload_close_file_upload(void *fp) {
 8022ec4:	b580      	push	{r7, lr}
 8022ec6:	b082      	sub	sp, #8
 8022ec8:	af00      	add	r7, sp, #0
 8022eca:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
 8022ecc:	4b09      	ldr	r3, [pc, #36]	@ (8022ef4 <glue_upload_close_file_upload+0x30>)
 8022ece:	681b      	ldr	r3, [r3, #0]
 8022ed0:	2b02      	cmp	r3, #2
 8022ed2:	dd09      	ble.n	8022ee8 <glue_upload_close_file_upload+0x24>
 8022ed4:	4b08      	ldr	r3, [pc, #32]	@ (8022ef8 <glue_upload_close_file_upload+0x34>)
 8022ed6:	2275      	movs	r2, #117	@ 0x75
 8022ed8:	4908      	ldr	r1, [pc, #32]	@ (8022efc <glue_upload_close_file_upload+0x38>)
 8022eda:	2003      	movs	r0, #3
 8022edc:	f7ea ff36 	bl	800dd4c <mg_log_prefix>
 8022ee0:	6879      	ldr	r1, [r7, #4]
 8022ee2:	4807      	ldr	r0, [pc, #28]	@ (8022f00 <glue_upload_close_file_upload+0x3c>)
 8022ee4:	f7ea ff82 	bl	800ddec <mg_log>
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 8022ee8:	2300      	movs	r3, #0
#endif
}
 8022eea:	4618      	mov	r0, r3
 8022eec:	3708      	adds	r7, #8
 8022eee:	46bd      	mov	sp, r7
 8022ef0:	bd80      	pop	{r7, pc}
 8022ef2:	bf00      	nop
 8022ef4:	24000258 	.word	0x24000258
 8022ef8:	08037658 	.word	0x08037658
 8022efc:	08028f74 	.word	0x08028f74
 8022f00:	08029058 	.word	0x08029058

08022f04 <glue_upload_write_file_upload>:
bool glue_upload_write_file_upload(void *fp, void *buf, size_t len) {
 8022f04:	b580      	push	{r7, lr}
 8022f06:	b084      	sub	sp, #16
 8022f08:	af00      	add	r7, sp, #0
 8022f0a:	60f8      	str	r0, [r7, #12]
 8022f0c:	60b9      	str	r1, [r7, #8]
 8022f0e:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
 8022f10:	4b0a      	ldr	r3, [pc, #40]	@ (8022f3c <glue_upload_write_file_upload+0x38>)
 8022f12:	681b      	ldr	r3, [r3, #0]
 8022f14:	2b02      	cmp	r3, #2
 8022f16:	dd0b      	ble.n	8022f30 <glue_upload_write_file_upload+0x2c>
 8022f18:	4b09      	ldr	r3, [pc, #36]	@ (8022f40 <glue_upload_write_file_upload+0x3c>)
 8022f1a:	227d      	movs	r2, #125	@ 0x7d
 8022f1c:	4909      	ldr	r1, [pc, #36]	@ (8022f44 <glue_upload_write_file_upload+0x40>)
 8022f1e:	2003      	movs	r0, #3
 8022f20:	f7ea ff14 	bl	800dd4c <mg_log_prefix>
 8022f24:	687b      	ldr	r3, [r7, #4]
 8022f26:	68ba      	ldr	r2, [r7, #8]
 8022f28:	68f9      	ldr	r1, [r7, #12]
 8022f2a:	4807      	ldr	r0, [pc, #28]	@ (8022f48 <glue_upload_write_file_upload+0x44>)
 8022f2c:	f7ea ff5e 	bl	800ddec <mg_log>
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 8022f30:	2300      	movs	r3, #0
#endif
}
 8022f32:	4618      	mov	r0, r3
 8022f34:	3710      	adds	r7, #16
 8022f36:	46bd      	mov	sp, r7
 8022f38:	bd80      	pop	{r7, pc}
 8022f3a:	bf00      	nop
 8022f3c:	24000258 	.word	0x24000258
 8022f40:	08037678 	.word	0x08037678
 8022f44:	08028f74 	.word	0x08028f74
 8022f48:	08029064 	.word	0x08029064

08022f4c <glue_reply_graph_data>:

void glue_reply_graph_data(struct mg_connection *c, struct mg_http_message *hm) {
 8022f4c:	b580      	push	{r7, lr}
 8022f4e:	b086      	sub	sp, #24
 8022f50:	af02      	add	r7, sp, #8
 8022f52:	6078      	str	r0, [r7, #4]
 8022f54:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8022f56:	4b08      	ldr	r3, [pc, #32]	@ (8022f78 <glue_reply_graph_data+0x2c>)
 8022f58:	60fb      	str	r3, [r7, #12]
  const char *value = "[[1724576787,20.3],[1724576847,27.2],[1724576907,29.7],[1724576967,27.9],[1724577027,25.1],[1724577087,23.8],[1724577147,22.5],[1724577207,22.2],[1724577267,23.3],[1724577327,23.9]]";
 8022f5a:	4b08      	ldr	r3, [pc, #32]	@ (8022f7c <glue_reply_graph_data+0x30>)
 8022f5c:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8022f5e:	68bb      	ldr	r3, [r7, #8]
 8022f60:	9300      	str	r3, [sp, #0]
 8022f62:	4b07      	ldr	r3, [pc, #28]	@ (8022f80 <glue_reply_graph_data+0x34>)
 8022f64:	68fa      	ldr	r2, [r7, #12]
 8022f66:	21c8      	movs	r1, #200	@ 0xc8
 8022f68:	6878      	ldr	r0, [r7, #4]
 8022f6a:	f7e8 f943 	bl	800b1f4 <mg_http_reply>
}
 8022f6e:	bf00      	nop
 8022f70:	3710      	adds	r7, #16
 8022f72:	46bd      	mov	sp, r7
 8022f74:	bd80      	pop	{r7, pc}
 8022f76:	bf00      	nop
 8022f78:	08029080 	.word	0x08029080
 8022f7c:	080290bc 	.word	0x080290bc
 8022f80:	08029174 	.word	0x08029174

08022f84 <glue_get_state>:
static struct state s_state = {42, 27, 67, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 8022f84:	b5b0      	push	{r4, r5, r7, lr}
 8022f86:	b082      	sub	sp, #8
 8022f88:	af00      	add	r7, sp, #0
 8022f8a:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 8022f8c:	687b      	ldr	r3, [r7, #4]
 8022f8e:	4a17      	ldr	r2, [pc, #92]	@ (8022fec <glue_get_state+0x68>)
 8022f90:	461c      	mov	r4, r3
 8022f92:	4615      	mov	r5, r2
 8022f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8022f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8022f9c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8022fa0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  data->speed = glue_get_local_reg(1005);
 8022fa4:	f240 30ed 	movw	r0, #1005	@ 0x3ed
 8022fa8:	f7ff fdfe 	bl	8022ba8 <glue_get_local_reg>
 8022fac:	4603      	mov	r3, r0
 8022fae:	461a      	mov	r2, r3
 8022fb0:	687b      	ldr	r3, [r7, #4]
 8022fb2:	601a      	str	r2, [r3, #0]
  data->temperature = glue_get_local_reg(1006);
 8022fb4:	f240 30ee 	movw	r0, #1006	@ 0x3ee
 8022fb8:	f7ff fdf6 	bl	8022ba8 <glue_get_local_reg>
 8022fbc:	4603      	mov	r3, r0
 8022fbe:	461a      	mov	r2, r3
 8022fc0:	687b      	ldr	r3, [r7, #4]
 8022fc2:	605a      	str	r2, [r3, #4]
  data->humidity = glue_get_local_reg(1007);
 8022fc4:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8022fc8:	f7ff fdee 	bl	8022ba8 <glue_get_local_reg>
 8022fcc:	4603      	mov	r3, r0
 8022fce:	461a      	mov	r2, r3
 8022fd0:	687b      	ldr	r3, [r7, #4]
 8022fd2:	609a      	str	r2, [r3, #8]
  data->level= glue_get_local_reg(1008);
 8022fd4:	f44f 707c 	mov.w	r0, #1008	@ 0x3f0
 8022fd8:	f7ff fde6 	bl	8022ba8 <glue_get_local_reg>
 8022fdc:	4603      	mov	r3, r0
 8022fde:	461a      	mov	r2, r3
 8022fe0:	687b      	ldr	r3, [r7, #4]
 8022fe2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8022fe4:	bf00      	nop
 8022fe6:	3708      	adds	r7, #8
 8022fe8:	46bd      	mov	sp, r7
 8022fea:	bdb0      	pop	{r4, r5, r7, pc}
 8022fec:	240002b4 	.word	0x240002b4

08022ff0 <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 8022ff0:	b580      	push	{r7, lr}
 8022ff2:	b082      	sub	sp, #8
 8022ff4:	af00      	add	r7, sp, #0
 8022ff6:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 8022ff8:	687b      	ldr	r3, [r7, #4]
 8022ffa:	4a17      	ldr	r2, [pc, #92]	@ (8023058 <glue_get_leds+0x68>)
 8022ffc:	8811      	ldrh	r1, [r2, #0]
 8022ffe:	7892      	ldrb	r2, [r2, #2]
 8023000:	8019      	strh	r1, [r3, #0]
 8023002:	709a      	strb	r2, [r3, #2]
  data->led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8023004:	2101      	movs	r1, #1
 8023006:	4815      	ldr	r0, [pc, #84]	@ (802305c <glue_get_leds+0x6c>)
 8023008:	f7df fb1c 	bl	8002644 <HAL_GPIO_ReadPin>
 802300c:	4603      	mov	r3, r0
 802300e:	2b00      	cmp	r3, #0
 8023010:	bf14      	ite	ne
 8023012:	2301      	movne	r3, #1
 8023014:	2300      	moveq	r3, #0
 8023016:	b2da      	uxtb	r2, r3
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	701a      	strb	r2, [r3, #0]
  data->led2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1);
 802301c:	2102      	movs	r1, #2
 802301e:	4810      	ldr	r0, [pc, #64]	@ (8023060 <glue_get_leds+0x70>)
 8023020:	f7df fb10 	bl	8002644 <HAL_GPIO_ReadPin>
 8023024:	4603      	mov	r3, r0
 8023026:	2b00      	cmp	r3, #0
 8023028:	bf14      	ite	ne
 802302a:	2301      	movne	r3, #1
 802302c:	2300      	moveq	r3, #0
 802302e:	b2da      	uxtb	r2, r3
 8023030:	687b      	ldr	r3, [r7, #4]
 8023032:	705a      	strb	r2, [r3, #1]
  data->led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8023034:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8023038:	4808      	ldr	r0, [pc, #32]	@ (802305c <glue_get_leds+0x6c>)
 802303a:	f7df fb03 	bl	8002644 <HAL_GPIO_ReadPin>
 802303e:	4603      	mov	r3, r0
 8023040:	2b00      	cmp	r3, #0
 8023042:	bf14      	ite	ne
 8023044:	2301      	movne	r3, #1
 8023046:	2300      	moveq	r3, #0
 8023048:	b2da      	uxtb	r2, r3
 802304a:	687b      	ldr	r3, [r7, #4]
 802304c:	709a      	strb	r2, [r3, #2]
}
 802304e:	bf00      	nop
 8023050:	3708      	adds	r7, #8
 8023052:	46bd      	mov	sp, r7
 8023054:	bd80      	pop	{r7, pc}
 8023056:	bf00      	nop
 8023058:	240002e0 	.word	0x240002e0
 802305c:	58020400 	.word	0x58020400
 8023060:	58021000 	.word	0x58021000

08023064 <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 8023064:	b580      	push	{r7, lr}
 8023066:	b082      	sub	sp, #8
 8023068:	af00      	add	r7, sp, #0
 802306a:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 802306c:	4b0f      	ldr	r3, [pc, #60]	@ (80230ac <glue_set_leds+0x48>)
 802306e:	687a      	ldr	r2, [r7, #4]
 8023070:	8811      	ldrh	r1, [r2, #0]
 8023072:	7892      	ldrb	r2, [r2, #2]
 8023074:	8019      	strh	r1, [r3, #0]
 8023076:	709a      	strb	r2, [r3, #2]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, data->led1 ? GPIO_PIN_SET : GPIO_PIN_RESET);  // LD1
 8023078:	687b      	ldr	r3, [r7, #4]
 802307a:	781b      	ldrb	r3, [r3, #0]
 802307c:	461a      	mov	r2, r3
 802307e:	2101      	movs	r1, #1
 8023080:	480b      	ldr	r0, [pc, #44]	@ (80230b0 <glue_set_leds+0x4c>)
 8023082:	f7df faf7 	bl	8002674 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, data->led2 ? GPIO_PIN_SET : GPIO_PIN_RESET);  // LD2
 8023086:	687b      	ldr	r3, [r7, #4]
 8023088:	785b      	ldrb	r3, [r3, #1]
 802308a:	461a      	mov	r2, r3
 802308c:	2102      	movs	r1, #2
 802308e:	4809      	ldr	r0, [pc, #36]	@ (80230b4 <glue_set_leds+0x50>)
 8023090:	f7df faf0 	bl	8002674 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, data->led3 ? GPIO_PIN_SET : GPIO_PIN_RESET); // LD3
 8023094:	687b      	ldr	r3, [r7, #4]
 8023096:	789b      	ldrb	r3, [r3, #2]
 8023098:	461a      	mov	r2, r3
 802309a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 802309e:	4804      	ldr	r0, [pc, #16]	@ (80230b0 <glue_set_leds+0x4c>)
 80230a0:	f7df fae8 	bl	8002674 <HAL_GPIO_WritePin>
}
 80230a4:	bf00      	nop
 80230a6:	3708      	adds	r7, #8
 80230a8:	46bd      	mov	sp, r7
 80230aa:	bd80      	pop	{r7, pc}
 80230ac:	240002e0 	.word	0x240002e0
 80230b0:	58020400 	.word	0x58020400
 80230b4:	58021000 	.word	0x58021000

080230b8 <glue_get_network_settings>:

static struct network_settings s_network_settings = {"192.168.0.42", "192.168.0.1", "255.255.255.0", true};
void glue_get_network_settings(struct network_settings *data) {
 80230b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80230ba:	b083      	sub	sp, #12
 80230bc:	af00      	add	r7, sp, #0
 80230be:	6078      	str	r0, [r7, #4]
  *data = s_network_settings;  // Sync with your device
 80230c0:	687b      	ldr	r3, [r7, #4]
 80230c2:	4a0e      	ldr	r2, [pc, #56]	@ (80230fc <glue_get_network_settings+0x44>)
 80230c4:	4614      	mov	r4, r2
 80230c6:	469c      	mov	ip, r3
 80230c8:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80230cc:	4665      	mov	r5, ip
 80230ce:	4626      	mov	r6, r4
 80230d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80230d2:	6028      	str	r0, [r5, #0]
 80230d4:	6069      	str	r1, [r5, #4]
 80230d6:	60aa      	str	r2, [r5, #8]
 80230d8:	60eb      	str	r3, [r5, #12]
 80230da:	3410      	adds	r4, #16
 80230dc:	f10c 0c10 	add.w	ip, ip, #16
 80230e0:	4574      	cmp	r4, lr
 80230e2:	d1f3      	bne.n	80230cc <glue_get_network_settings+0x14>
 80230e4:	4665      	mov	r5, ip
 80230e6:	4623      	mov	r3, r4
 80230e8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80230ea:	6028      	str	r0, [r5, #0]
 80230ec:	6069      	str	r1, [r5, #4]
 80230ee:	60aa      	str	r2, [r5, #8]
 80230f0:	781b      	ldrb	r3, [r3, #0]
 80230f2:	732b      	strb	r3, [r5, #12]
}
 80230f4:	bf00      	nop
 80230f6:	370c      	adds	r7, #12
 80230f8:	46bd      	mov	sp, r7
 80230fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80230fc:	240002e4 	.word	0x240002e4

08023100 <glue_set_network_settings>:
void glue_set_network_settings(struct network_settings *data) {
 8023100:	b4f0      	push	{r4, r5, r6, r7}
 8023102:	b082      	sub	sp, #8
 8023104:	af00      	add	r7, sp, #0
 8023106:	6078      	str	r0, [r7, #4]
  s_network_settings = *data; // Sync with your device
 8023108:	4a0e      	ldr	r2, [pc, #56]	@ (8023144 <glue_set_network_settings+0x44>)
 802310a:	687b      	ldr	r3, [r7, #4]
 802310c:	461c      	mov	r4, r3
 802310e:	4616      	mov	r6, r2
 8023110:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8023114:	4635      	mov	r5, r6
 8023116:	4623      	mov	r3, r4
 8023118:	6818      	ldr	r0, [r3, #0]
 802311a:	6859      	ldr	r1, [r3, #4]
 802311c:	689a      	ldr	r2, [r3, #8]
 802311e:	68db      	ldr	r3, [r3, #12]
 8023120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8023122:	3410      	adds	r4, #16
 8023124:	3610      	adds	r6, #16
 8023126:	4564      	cmp	r4, ip
 8023128:	d1f4      	bne.n	8023114 <glue_set_network_settings+0x14>
 802312a:	4633      	mov	r3, r6
 802312c:	6820      	ldr	r0, [r4, #0]
 802312e:	6861      	ldr	r1, [r4, #4]
 8023130:	68a2      	ldr	r2, [r4, #8]
 8023132:	c307      	stmia	r3!, {r0, r1, r2}
 8023134:	7b22      	ldrb	r2, [r4, #12]
 8023136:	701a      	strb	r2, [r3, #0]
}
 8023138:	bf00      	nop
 802313a:	3708      	adds	r7, #8
 802313c:	46bd      	mov	sp, r7
 802313e:	bcf0      	pop	{r4, r5, r6, r7}
 8023140:	4770      	bx	lr
 8023142:	bf00      	nop
 8023144:	240002e4 	.word	0x240002e4

08023148 <glue_get_settings>:

static struct settings s_settings = {"edit & save me", "info", 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 8023148:	b580      	push	{r7, lr}
 802314a:	b082      	sub	sp, #8
 802314c:	af00      	add	r7, sp, #0
 802314e:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 8023150:	687b      	ldr	r3, [r7, #4]
 8023152:	4a05      	ldr	r2, [pc, #20]	@ (8023168 <glue_get_settings+0x20>)
 8023154:	4618      	mov	r0, r3
 8023156:	4611      	mov	r1, r2
 8023158:	2348      	movs	r3, #72	@ 0x48
 802315a:	461a      	mov	r2, r3
 802315c:	f002 fc4b 	bl	80259f6 <memcpy>
}
 8023160:	bf00      	nop
 8023162:	3708      	adds	r7, #8
 8023164:	46bd      	mov	sp, r7
 8023166:	bd80      	pop	{r7, pc}
 8023168:	24000328 	.word	0x24000328

0802316c <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 802316c:	b580      	push	{r7, lr}
 802316e:	b082      	sub	sp, #8
 8023170:	af00      	add	r7, sp, #0
 8023172:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 8023174:	4a05      	ldr	r2, [pc, #20]	@ (802318c <glue_set_settings+0x20>)
 8023176:	687b      	ldr	r3, [r7, #4]
 8023178:	4610      	mov	r0, r2
 802317a:	4619      	mov	r1, r3
 802317c:	2348      	movs	r3, #72	@ 0x48
 802317e:	461a      	mov	r2, r3
 8023180:	f002 fc39 	bl	80259f6 <memcpy>
}
 8023184:	bf00      	nop
 8023186:	3708      	adds	r7, #8
 8023188:	46bd      	mov	sp, r7
 802318a:	bd80      	pop	{r7, pc}
 802318c:	24000328 	.word	0x24000328

08023190 <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 8023190:	b580      	push	{r7, lr}
 8023192:	b082      	sub	sp, #8
 8023194:	af00      	add	r7, sp, #0
 8023196:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 8023198:	687b      	ldr	r3, [r7, #4]
 802319a:	4a05      	ldr	r2, [pc, #20]	@ (80231b0 <glue_get_security+0x20>)
 802319c:	4618      	mov	r0, r3
 802319e:	4611      	mov	r1, r2
 80231a0:	2350      	movs	r3, #80	@ 0x50
 80231a2:	461a      	mov	r2, r3
 80231a4:	f002 fc27 	bl	80259f6 <memcpy>
}
 80231a8:	bf00      	nop
 80231aa:	3708      	adds	r7, #8
 80231ac:	46bd      	mov	sp, r7
 80231ae:	bd80      	pop	{r7, pc}
 80231b0:	24000370 	.word	0x24000370

080231b4 <glue_set_security>:
void glue_set_security(struct security *data) {
 80231b4:	b580      	push	{r7, lr}
 80231b6:	b082      	sub	sp, #8
 80231b8:	af00      	add	r7, sp, #0
 80231ba:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 80231bc:	4a05      	ldr	r2, [pc, #20]	@ (80231d4 <glue_set_security+0x20>)
 80231be:	687b      	ldr	r3, [r7, #4]
 80231c0:	4610      	mov	r0, r2
 80231c2:	4619      	mov	r1, r3
 80231c4:	2350      	movs	r3, #80	@ 0x50
 80231c6:	461a      	mov	r2, r3
 80231c8:	f002 fc15 	bl	80259f6 <memcpy>
}
 80231cc:	bf00      	nop
 80231ce:	3708      	adds	r7, #8
 80231d0:	46bd      	mov	sp, r7
 80231d2:	bd80      	pop	{r7, pc}
 80231d4:	24000370 	.word	0x24000370

080231d8 <glue_reply_loglevels>:

void glue_reply_loglevels(struct mg_connection *c, struct mg_http_message *hm) {
 80231d8:	b580      	push	{r7, lr}
 80231da:	b086      	sub	sp, #24
 80231dc:	af02      	add	r7, sp, #8
 80231de:	6078      	str	r0, [r7, #4]
 80231e0:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 80231e2:	4b08      	ldr	r3, [pc, #32]	@ (8023204 <glue_reply_loglevels+0x2c>)
 80231e4:	60fb      	str	r3, [r7, #12]
  const char *value = "[\"disabled\",\"error\",\"info\",\"debug\",\"verbose\"]";
 80231e6:	4b08      	ldr	r3, [pc, #32]	@ (8023208 <glue_reply_loglevels+0x30>)
 80231e8:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 80231ea:	68bb      	ldr	r3, [r7, #8]
 80231ec:	9300      	str	r3, [sp, #0]
 80231ee:	4b07      	ldr	r3, [pc, #28]	@ (802320c <glue_reply_loglevels+0x34>)
 80231f0:	68fa      	ldr	r2, [r7, #12]
 80231f2:	21c8      	movs	r1, #200	@ 0xc8
 80231f4:	6878      	ldr	r0, [r7, #4]
 80231f6:	f7e7 fffd 	bl	800b1f4 <mg_http_reply>
}
 80231fa:	bf00      	nop
 80231fc:	3710      	adds	r7, #16
 80231fe:	46bd      	mov	sp, r7
 8023200:	bd80      	pop	{r7, pc}
 8023202:	bf00      	nop
 8023204:	08029080 	.word	0x08029080
 8023208:	08029178 	.word	0x08029178
 802320c:	08029174 	.word	0x08029174

08023210 <glue_reply_events>:
void glue_reply_events(struct mg_connection *c, struct mg_http_message *hm) {
 8023210:	b580      	push	{r7, lr}
 8023212:	b086      	sub	sp, #24
 8023214:	af02      	add	r7, sp, #8
 8023216:	6078      	str	r0, [r7, #4]
 8023218:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 802321a:	4b08      	ldr	r3, [pc, #32]	@ (802323c <glue_reply_events+0x2c>)
 802321c:	60fb      	str	r3, [r7, #12]
  const char *value = "[{\"priority\":1,\"timestamp\":1738653279,\"active\":false,\"message\":\"event 1\"},{\"priority\":2,\"timestamp\":1738653390,\"active\":true,\"message\":\"event 2\"}]";
 802321e:	4b08      	ldr	r3, [pc, #32]	@ (8023240 <glue_reply_events+0x30>)
 8023220:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8023222:	68bb      	ldr	r3, [r7, #8]
 8023224:	9300      	str	r3, [sp, #0]
 8023226:	4b07      	ldr	r3, [pc, #28]	@ (8023244 <glue_reply_events+0x34>)
 8023228:	68fa      	ldr	r2, [r7, #12]
 802322a:	21c8      	movs	r1, #200	@ 0xc8
 802322c:	6878      	ldr	r0, [r7, #4]
 802322e:	f7e7 ffe1 	bl	800b1f4 <mg_http_reply>
}
 8023232:	bf00      	nop
 8023234:	3710      	adds	r7, #16
 8023236:	46bd      	mov	sp, r7
 8023238:	bd80      	pop	{r7, pc}
 802323a:	bf00      	nop
 802323c:	08029080 	.word	0x08029080
 8023240:	080291a8 	.word	0x080291a8
 8023244:	08029174 	.word	0x08029174

08023248 <get_api_handler>:
  (struct apihandler *) &s_apihandler_security,
  (struct apihandler *) &s_apihandler_loglevels,
  (struct apihandler *) &s_apihandler_events
};

static struct apihandler *get_api_handler(struct mg_str name) {
 8023248:	b580      	push	{r7, lr}
 802324a:	b086      	sub	sp, #24
 802324c:	af00      	add	r7, sp, #0
 802324e:	463b      	mov	r3, r7
 8023250:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t num_handlers = sizeof(s_apihandlers) / sizeof(s_apihandlers[0]);
 8023254:	230c      	movs	r3, #12
 8023256:	613b      	str	r3, [r7, #16]
  size_t i;
  if (name.len == 0) return NULL;
 8023258:	687b      	ldr	r3, [r7, #4]
 802325a:	2b00      	cmp	r3, #0
 802325c:	d101      	bne.n	8023262 <get_api_handler+0x1a>
 802325e:	2300      	movs	r3, #0
 8023260:	e039      	b.n	80232d6 <get_api_handler+0x8e>
  if (num_handlers == 0) return NULL;
 8023262:	693b      	ldr	r3, [r7, #16]
 8023264:	2b00      	cmp	r3, #0
 8023266:	d101      	bne.n	802326c <get_api_handler+0x24>
 8023268:	2300      	movs	r3, #0
 802326a:	e034      	b.n	80232d6 <get_api_handler+0x8e>
  for (i = 0; i < num_handlers; i++) {
 802326c:	2300      	movs	r3, #0
 802326e:	617b      	str	r3, [r7, #20]
 8023270:	e02c      	b.n	80232cc <get_api_handler+0x84>
    struct apihandler *h = s_apihandlers[i];
 8023272:	4a1b      	ldr	r2, [pc, #108]	@ (80232e0 <get_api_handler+0x98>)
 8023274:	697b      	ldr	r3, [r7, #20]
 8023276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802327a:	60fb      	str	r3, [r7, #12]
    size_t n = strlen(h->name);
 802327c:	68fb      	ldr	r3, [r7, #12]
 802327e:	681b      	ldr	r3, [r3, #0]
 8023280:	4618      	mov	r0, r3
 8023282:	f7dd f8a5 	bl	80003d0 <strlen>
 8023286:	60b8      	str	r0, [r7, #8]
    if (n > name.len) continue;
 8023288:	687b      	ldr	r3, [r7, #4]
 802328a:	68ba      	ldr	r2, [r7, #8]
 802328c:	429a      	cmp	r2, r3
 802328e:	d815      	bhi.n	80232bc <get_api_handler+0x74>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 8023290:	6838      	ldr	r0, [r7, #0]
 8023292:	68fb      	ldr	r3, [r7, #12]
 8023294:	681b      	ldr	r3, [r3, #0]
 8023296:	68ba      	ldr	r2, [r7, #8]
 8023298:	4619      	mov	r1, r3
 802329a:	f002 fa8c 	bl	80257b6 <strncmp>
 802329e:	4603      	mov	r3, r0
 80232a0:	2b00      	cmp	r3, #0
 80232a2:	d10d      	bne.n	80232c0 <get_api_handler+0x78>
    if (name.len > n && name.buf[n] != '/') continue;
 80232a4:	687b      	ldr	r3, [r7, #4]
 80232a6:	68ba      	ldr	r2, [r7, #8]
 80232a8:	429a      	cmp	r2, r3
 80232aa:	d205      	bcs.n	80232b8 <get_api_handler+0x70>
 80232ac:	683a      	ldr	r2, [r7, #0]
 80232ae:	68bb      	ldr	r3, [r7, #8]
 80232b0:	4413      	add	r3, r2
 80232b2:	781b      	ldrb	r3, [r3, #0]
 80232b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80232b6:	d105      	bne.n	80232c4 <get_api_handler+0x7c>
    return h;
 80232b8:	68fb      	ldr	r3, [r7, #12]
 80232ba:	e00c      	b.n	80232d6 <get_api_handler+0x8e>
    if (n > name.len) continue;
 80232bc:	bf00      	nop
 80232be:	e002      	b.n	80232c6 <get_api_handler+0x7e>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 80232c0:	bf00      	nop
 80232c2:	e000      	b.n	80232c6 <get_api_handler+0x7e>
    if (name.len > n && name.buf[n] != '/') continue;
 80232c4:	bf00      	nop
  for (i = 0; i < num_handlers; i++) {
 80232c6:	697b      	ldr	r3, [r7, #20]
 80232c8:	3301      	adds	r3, #1
 80232ca:	617b      	str	r3, [r7, #20]
 80232cc:	697a      	ldr	r2, [r7, #20]
 80232ce:	693b      	ldr	r3, [r7, #16]
 80232d0:	429a      	cmp	r2, r3
 80232d2:	d3ce      	bcc.n	8023272 <get_api_handler+0x2a>
  }
  return NULL;
 80232d4:	2300      	movs	r3, #0
}
 80232d6:	4618      	mov	r0, r3
 80232d8:	3718      	adds	r7, #24
 80232da:	46bd      	mov	sp, r7
 80232dc:	bd80      	pop	{r7, pc}
 80232de:	bf00      	nop
 80232e0:	240007ec 	.word	0x240007ec

080232e4 <find_handler>:

static struct apihandler *find_handler(struct mg_http_message *hm) {
 80232e4:	b580      	push	{r7, lr}
 80232e6:	b084      	sub	sp, #16
 80232e8:	af00      	add	r7, sp, #0
 80232ea:	6078      	str	r0, [r7, #4]
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 80232ec:	687b      	ldr	r3, [r7, #4]
 80232ee:	68db      	ldr	r3, [r3, #12]
 80232f0:	2b05      	cmp	r3, #5
 80232f2:	d909      	bls.n	8023308 <find_handler+0x24>
 80232f4:	687b      	ldr	r3, [r7, #4]
 80232f6:	689b      	ldr	r3, [r3, #8]
 80232f8:	2205      	movs	r2, #5
 80232fa:	490f      	ldr	r1, [pc, #60]	@ (8023338 <find_handler+0x54>)
 80232fc:	4618      	mov	r0, r3
 80232fe:	f002 fa5a 	bl	80257b6 <strncmp>
 8023302:	4603      	mov	r3, r0
 8023304:	2b00      	cmp	r3, #0
 8023306:	d001      	beq.n	802330c <find_handler+0x28>
 8023308:	2300      	movs	r3, #0
 802330a:	e011      	b.n	8023330 <find_handler+0x4c>
  return get_api_handler(mg_str_n(hm->uri.buf + 5, hm->uri.len - 5));
 802330c:	687b      	ldr	r3, [r7, #4]
 802330e:	689b      	ldr	r3, [r3, #8]
 8023310:	1d59      	adds	r1, r3, #5
 8023312:	687b      	ldr	r3, [r7, #4]
 8023314:	68db      	ldr	r3, [r3, #12]
 8023316:	1f5a      	subs	r2, r3, #5
 8023318:	f107 0308 	add.w	r3, r7, #8
 802331c:	4618      	mov	r0, r3
 802331e:	f7f2 fd32 	bl	8015d86 <mg_str_n>
 8023322:	f107 0308 	add.w	r3, r7, #8
 8023326:	e893 0003 	ldmia.w	r3, {r0, r1}
 802332a:	f7ff ff8d 	bl	8023248 <get_api_handler>
 802332e:	4603      	mov	r3, r0
}
 8023330:	4618      	mov	r0, r3
 8023332:	3710      	adds	r7, #16
 8023334:	46bd      	mov	sp, r7
 8023336:	bd80      	pop	{r7, pc}
 8023338:	080293f0 	.word	0x080293f0

0802333c <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 802333c:	b590      	push	{r4, r7, lr}
 802333e:	b089      	sub	sp, #36	@ 0x24
 8023340:	af00      	add	r7, sp, #0
 8023342:	f107 0408 	add.w	r4, r7, #8
 8023346:	e884 0003 	stmia.w	r4, {r0, r1}
 802334a:	607a      	str	r2, [r7, #4]
 802334c:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 802334e:	f107 0010 	add.w	r0, r7, #16
 8023352:	687b      	ldr	r3, [r7, #4]
 8023354:	f107 0208 	add.w	r2, r7, #8
 8023358:	ca06      	ldmia	r2, {r1, r2}
 802335a:	f7ea fb93 	bl	800da84 <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 802335e:	697b      	ldr	r3, [r7, #20]
 8023360:	2b01      	cmp	r3, #1
 8023362:	d913      	bls.n	802338c <mg_json_get_str2+0x50>
 8023364:	693b      	ldr	r3, [r7, #16]
 8023366:	781b      	ldrb	r3, [r3, #0]
 8023368:	2b22      	cmp	r3, #34	@ 0x22
 802336a:	d10f      	bne.n	802338c <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 802336c:	693b      	ldr	r3, [r7, #16]
 802336e:	1c59      	adds	r1, r3, #1
 8023370:	697b      	ldr	r3, [r7, #20]
 8023372:	1e9a      	subs	r2, r3, #2
 8023374:	f107 0318 	add.w	r3, r7, #24
 8023378:	4618      	mov	r0, r3
 802337a:	f7f2 fd04 	bl	8015d86 <mg_str_n>
 802337e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8023380:	683a      	ldr	r2, [r7, #0]
 8023382:	f107 0118 	add.w	r1, r7, #24
 8023386:	c903      	ldmia	r1, {r0, r1}
 8023388:	f7ea fc22 	bl	800dbd0 <mg_json_unescape>
  }
}
 802338c:	bf00      	nop
 802338e:	3724      	adds	r7, #36	@ 0x24
 8023390:	46bd      	mov	sp, r7
 8023392:	bd90      	pop	{r4, r7, pc}

08023394 <authenticate>:
void mongoose_set_auth_handler(int (*fn)(const char *, const char *)) {
  s_auth = fn;
}

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 8023394:	b580      	push	{r7, lr}
 8023396:	b0ba      	sub	sp, #232	@ 0xe8
 8023398:	af02      	add	r7, sp, #8
 802339a:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 802339c:	2300      	movs	r3, #0
 802339e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 80233a2:	f107 030c 	add.w	r3, r7, #12
 80233a6:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80233aa:	2264      	movs	r2, #100	@ 0x64
 80233ac:	9200      	str	r2, [sp, #0]
 80233ae:	2264      	movs	r2, #100	@ 0x64
 80233b0:	6878      	ldr	r0, [r7, #4]
 80233b2:	f7e8 fe95 	bl	800c0e0 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 80233b6:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80233ba:	2b00      	cmp	r3, #0
 80233bc:	d06f      	beq.n	802349e <authenticate+0x10a>
 80233be:	7b3b      	ldrb	r3, [r7, #12]
 80233c0:	2b00      	cmp	r3, #0
 80233c2:	d06c      	beq.n	802349e <authenticate+0x10a>
    // Both user and password is set, auth by user/password via glue API
    int level = s_auth(user, pass);
 80233c4:	4b5b      	ldr	r3, [pc, #364]	@ (8023534 <authenticate+0x1a0>)
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	f107 010c 	add.w	r1, r7, #12
 80233cc:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 80233d0:	4610      	mov	r0, r2
 80233d2:	4798      	blx	r3
 80233d4:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
 80233d8:	4b57      	ldr	r3, [pc, #348]	@ (8023538 <authenticate+0x1a4>)
 80233da:	681b      	ldr	r3, [r3, #0]
 80233dc:	2b02      	cmp	r3, #2
 80233de:	dd0e      	ble.n	80233fe <authenticate+0x6a>
 80233e0:	4b56      	ldr	r3, [pc, #344]	@ (802353c <authenticate+0x1a8>)
 80233e2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80233e6:	4956      	ldr	r1, [pc, #344]	@ (8023540 <authenticate+0x1ac>)
 80233e8:	2003      	movs	r0, #3
 80233ea:	f7ea fcaf 	bl	800dd4c <mg_log_prefix>
 80233ee:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80233f2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80233f6:	4619      	mov	r1, r3
 80233f8:	4852      	ldr	r0, [pc, #328]	@ (8023544 <authenticate+0x1b0>)
 80233fa:	f7ea fcf7 	bl	800ddec <mg_log>
    if (level > 0) {  // Proceed only if the firmware authenticated us
 80233fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8023402:	2b00      	cmp	r3, #0
 8023404:	dd75      	ble.n	80234f2 <authenticate+0x15e>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023406:	4b50      	ldr	r3, [pc, #320]	@ (8023548 <authenticate+0x1b4>)
 8023408:	681b      	ldr	r3, [r3, #0]
 802340a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802340e:	e014      	b.n	802343a <authenticate+0xa6>
        if (strcmp(user, u->name) == 0) result = u;
 8023410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023414:	1d1a      	adds	r2, r3, #4
 8023416:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802341a:	4611      	mov	r1, r2
 802341c:	4618      	mov	r0, r3
 802341e:	f7dc ff77 	bl	8000310 <strcmp>
 8023422:	4603      	mov	r3, r0
 8023424:	2b00      	cmp	r3, #0
 8023426:	d103      	bne.n	8023430 <authenticate+0x9c>
 8023428:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802342c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8023430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8023434:	681b      	ldr	r3, [r3, #0]
 8023436:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 802343a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802343e:	2b00      	cmp	r3, #0
 8023440:	d003      	beq.n	802344a <authenticate+0xb6>
 8023442:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023446:	2b00      	cmp	r3, #0
 8023448:	d0e2      	beq.n	8023410 <authenticate+0x7c>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 802344a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802344e:	2b00      	cmp	r3, #0
 8023450:	d14f      	bne.n	80234f2 <authenticate+0x15e>
        result = (struct user *) calloc(1, sizeof(*result));
 8023452:	2140      	movs	r1, #64	@ 0x40
 8023454:	2001      	movs	r0, #1
 8023456:	f001 fdbf 	bl	8024fd8 <calloc>
 802345a:	4603      	mov	r3, r0
 802345c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 8023460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023464:	1d18      	adds	r0, r3, #4
 8023466:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802346a:	4a38      	ldr	r2, [pc, #224]	@ (802354c <authenticate+0x1b8>)
 802346c:	2120      	movs	r1, #32
 802346e:	f7ef f8a7 	bl	80125c0 <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 8023472:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023476:	3324      	adds	r3, #36	@ 0x24
 8023478:	2114      	movs	r1, #20
 802347a:	4618      	mov	r0, r3
 802347c:	f7fd fe3a 	bl	80210f4 <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 8023480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023484:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8023488:	63da      	str	r2, [r3, #60]	@ 0x3c
 802348a:	4b2f      	ldr	r3, [pc, #188]	@ (8023548 <authenticate+0x1b4>)
 802348c:	681a      	ldr	r2, [r3, #0]
 802348e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8023492:	601a      	str	r2, [r3, #0]
 8023494:	4a2c      	ldr	r2, [pc, #176]	@ (8023548 <authenticate+0x1b4>)
 8023496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802349a:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 802349c:	e029      	b.n	80234f2 <authenticate+0x15e>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 802349e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	d126      	bne.n	80234f4 <authenticate+0x160>
 80234a6:	7b3b      	ldrb	r3, [r7, #12]
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	d023      	beq.n	80234f4 <authenticate+0x160>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 80234ac:	4b26      	ldr	r3, [pc, #152]	@ (8023548 <authenticate+0x1b4>)
 80234ae:	681b      	ldr	r3, [r3, #0]
 80234b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80234b4:	e014      	b.n	80234e0 <authenticate+0x14c>
      if (strcmp(u->token, pass) == 0) result = u;
 80234b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80234ba:	3324      	adds	r3, #36	@ 0x24
 80234bc:	f107 020c 	add.w	r2, r7, #12
 80234c0:	4611      	mov	r1, r2
 80234c2:	4618      	mov	r0, r3
 80234c4:	f7dc ff24 	bl	8000310 <strcmp>
 80234c8:	4603      	mov	r3, r0
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	d103      	bne.n	80234d6 <authenticate+0x142>
 80234ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80234d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 80234d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80234da:	681b      	ldr	r3, [r3, #0]
 80234dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80234e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80234e4:	2b00      	cmp	r3, #0
 80234e6:	d005      	beq.n	80234f4 <authenticate+0x160>
 80234e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80234ec:	2b00      	cmp	r3, #0
 80234ee:	d0e2      	beq.n	80234b6 <authenticate+0x122>
 80234f0:	e000      	b.n	80234f4 <authenticate+0x160>
  if (user[0] != '\0' && pass[0] != '\0') {
 80234f2:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
 80234f4:	4b10      	ldr	r3, [pc, #64]	@ (8023538 <authenticate+0x1a4>)
 80234f6:	681b      	ldr	r3, [r3, #0]
 80234f8:	2b03      	cmp	r3, #3
 80234fa:	dd14      	ble.n	8023526 <authenticate+0x192>
 80234fc:	4b0f      	ldr	r3, [pc, #60]	@ (802353c <authenticate+0x1a8>)
 80234fe:	f240 122b 	movw	r2, #299	@ 0x12b
 8023502:	490f      	ldr	r1, [pc, #60]	@ (8023540 <authenticate+0x1ac>)
 8023504:	2004      	movs	r0, #4
 8023506:	f7ea fc21 	bl	800dd4c <mg_log_prefix>
 802350a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802350e:	2b00      	cmp	r3, #0
 8023510:	d001      	beq.n	8023516 <authenticate+0x182>
 8023512:	4b0f      	ldr	r3, [pc, #60]	@ (8023550 <authenticate+0x1bc>)
 8023514:	e000      	b.n	8023518 <authenticate+0x184>
 8023516:	4b0f      	ldr	r3, [pc, #60]	@ (8023554 <authenticate+0x1c0>)
 8023518:	f107 020c 	add.w	r2, r7, #12
 802351c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8023520:	480d      	ldr	r0, [pc, #52]	@ (8023558 <authenticate+0x1c4>)
 8023522:	f7ea fc63 	bl	800ddec <mg_log>
  return result;
 8023526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 802352a:	4618      	mov	r0, r3
 802352c:	37e0      	adds	r7, #224	@ 0xe0
 802352e:	46bd      	mov	sp, r7
 8023530:	bd80      	pop	{r7, pc}
 8023532:	bf00      	nop
 8023534:	2400081c 	.word	0x2400081c
 8023538:	24000258 	.word	0x24000258
 802353c:	08037698 	.word	0x08037698
 8023540:	080293f8 	.word	0x080293f8
 8023544:	0802945c 	.word	0x0802945c
 8023548:	24005490 	.word	0x24005490
 802354c:	08029470 	.word	0x08029470
 8023550:	08029474 	.word	0x08029474
 8023554:	08029478 	.word	0x08029478
 8023558:	08029480 	.word	0x08029480

0802355c <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 802355c:	b580      	push	{r7, lr}
 802355e:	b0cc      	sub	sp, #304	@ 0x130
 8023560:	af0a      	add	r7, sp, #40	@ 0x28
 8023562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8023566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 802356a:	6018      	str	r0, [r3, #0]
 802356c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8023570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8023574:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 8023576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802357a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 802357e:	681b      	ldr	r3, [r3, #0]
 8023580:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8023584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8023588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 802358c:	681b      	ldr	r3, [r3, #0]
 802358e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8023592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8023596:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8023598:	2b00      	cmp	r3, #0
 802359a:	d001      	beq.n	80235a0 <handle_login+0x44>
 802359c:	4b1e      	ldr	r3, [pc, #120]	@ (8023618 <handle_login+0xbc>)
 802359e:	e000      	b.n	80235a2 <handle_login+0x46>
 80235a0:	4b1e      	ldr	r3, [pc, #120]	@ (802361c <handle_login+0xc0>)
 80235a2:	f107 0008 	add.w	r0, r7, #8
 80235a6:	491e      	ldr	r1, [pc, #120]	@ (8023620 <handle_login+0xc4>)
 80235a8:	9101      	str	r1, [sp, #4]
 80235aa:	9300      	str	r3, [sp, #0]
 80235ac:	4613      	mov	r3, r2
 80235ae:	4a1d      	ldr	r2, [pc, #116]	@ (8023624 <handle_login+0xc8>)
 80235b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80235b4:	f7ef f804 	bl	80125c0 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
                MG_ESC("user"), MG_ESC(u->name),    //
 80235b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80235bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80235c0:	681b      	ldr	r3, [r3, #0]
 80235c2:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
 80235c4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80235c8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80235cc:	6812      	ldr	r2, [r2, #0]
 80235ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80235d0:	f107 0108 	add.w	r1, r7, #8
 80235d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80235d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80235dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80235de:	4a12      	ldr	r2, [pc, #72]	@ (8023628 <handle_login+0xcc>)
 80235e0:	9208      	str	r2, [sp, #32]
 80235e2:	2200      	movs	r2, #0
 80235e4:	9207      	str	r2, [sp, #28]
 80235e6:	4a11      	ldr	r2, [pc, #68]	@ (802362c <handle_login+0xd0>)
 80235e8:	9206      	str	r2, [sp, #24]
 80235ea:	9305      	str	r3, [sp, #20]
 80235ec:	2300      	movs	r3, #0
 80235ee:	9304      	str	r3, [sp, #16]
 80235f0:	4b0e      	ldr	r3, [pc, #56]	@ (802362c <handle_login+0xd0>)
 80235f2:	9303      	str	r3, [sp, #12]
 80235f4:	4b0e      	ldr	r3, [pc, #56]	@ (8023630 <handle_login+0xd4>)
 80235f6:	9302      	str	r3, [sp, #8]
 80235f8:	2300      	movs	r3, #0
 80235fa:	9301      	str	r3, [sp, #4]
 80235fc:	4b0b      	ldr	r3, [pc, #44]	@ (802362c <handle_login+0xd0>)
 80235fe:	9300      	str	r3, [sp, #0]
 8023600:	4b0c      	ldr	r3, [pc, #48]	@ (8023634 <handle_login+0xd8>)
 8023602:	460a      	mov	r2, r1
 8023604:	21c8      	movs	r1, #200	@ 0xc8
 8023606:	6800      	ldr	r0, [r0, #0]
 8023608:	f7e7 fdf4 	bl	800b1f4 <mg_http_reply>
                MG_ESC("level"), u->level);
}
 802360c:	bf00      	nop
 802360e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8023612:	46bd      	mov	sp, r7
 8023614:	bd80      	pop	{r7, pc}
 8023616:	bf00      	nop
 8023618:	08029490 	.word	0x08029490
 802361c:	0802949c 	.word	0x0802949c
 8023620:	00015180 	.word	0x00015180
 8023624:	080294a0 	.word	0x080294a0
 8023628:	08029290 	.word	0x08029290
 802362c:	08012a4d 	.word	0x08012a4d
 8023630:	080294fc 	.word	0x080294fc
 8023634:	080294ec 	.word	0x080294ec

08023638 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 8023638:	b580      	push	{r7, lr}
 802363a:	b0c2      	sub	sp, #264	@ 0x108
 802363c:	af00      	add	r7, sp, #0
 802363e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8023642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8023646:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 8023648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802364c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8023650:	681b      	ldr	r3, [r3, #0]
 8023652:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8023656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802365a:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 802365c:	2b00      	cmp	r3, #0
 802365e:	d001      	beq.n	8023664 <handle_logout+0x2c>
 8023660:	4b0d      	ldr	r3, [pc, #52]	@ (8023698 <handle_logout+0x60>)
 8023662:	e000      	b.n	8023666 <handle_logout+0x2e>
 8023664:	4b0d      	ldr	r3, [pc, #52]	@ (802369c <handle_logout+0x64>)
 8023666:	f107 0008 	add.w	r0, r7, #8
 802366a:	4a0d      	ldr	r2, [pc, #52]	@ (80236a0 <handle_logout+0x68>)
 802366c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8023670:	f7ee ffa6 	bl	80125c0 <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 8023674:	f107 0208 	add.w	r2, r7, #8
 8023678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802367c:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8023680:	4b08      	ldr	r3, [pc, #32]	@ (80236a4 <handle_logout+0x6c>)
 8023682:	f240 1191 	movw	r1, #401	@ 0x191
 8023686:	6800      	ldr	r0, [r0, #0]
 8023688:	f7e7 fdb4 	bl	800b1f4 <mg_http_reply>
}
 802368c:	bf00      	nop
 802368e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8023692:	46bd      	mov	sp, r7
 8023694:	bd80      	pop	{r7, pc}
 8023696:	bf00      	nop
 8023698:	08029490 	.word	0x08029490
 802369c:	0802949c 	.word	0x0802949c
 80236a0:	08029504 	.word	0x08029504
 80236a4:	08029568 	.word	0x08029568

080236a8 <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 80236a8:	b580      	push	{r7, lr}
 80236aa:	b082      	sub	sp, #8
 80236ac:	af00      	add	r7, sp, #0
 80236ae:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 80236b0:	687b      	ldr	r3, [r7, #4]
 80236b2:	2200      	movs	r2, #0
 80236b4:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 80236b6:	687b      	ldr	r3, [r7, #4]
 80236b8:	691b      	ldr	r3, [r3, #16]
 80236ba:	2b00      	cmp	r3, #0
 80236bc:	d00c      	beq.n	80236d8 <close_uploaded_file+0x30>
 80236be:	687b      	ldr	r3, [r7, #4]
 80236c0:	68db      	ldr	r3, [r3, #12]
 80236c2:	2b00      	cmp	r3, #0
 80236c4:	d008      	beq.n	80236d8 <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 80236c6:	687b      	ldr	r3, [r7, #4]
 80236c8:	691b      	ldr	r3, [r3, #16]
 80236ca:	687a      	ldr	r2, [r7, #4]
 80236cc:	68d2      	ldr	r2, [r2, #12]
 80236ce:	4610      	mov	r0, r2
 80236d0:	4798      	blx	r3
    us->fp = NULL;
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	2200      	movs	r2, #0
 80236d6:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 80236d8:	2218      	movs	r2, #24
 80236da:	2100      	movs	r1, #0
 80236dc:	6878      	ldr	r0, [r7, #4]
 80236de:	f002 f855 	bl	802578c <memset>
}
 80236e2:	bf00      	nop
 80236e4:	3708      	adds	r7, #8
 80236e6:	46bd      	mov	sp, r7
 80236e8:	bd80      	pop	{r7, pc}
	...

080236ec <file_closer>:

static bool file_closer(void *p) {
 80236ec:	b580      	push	{r7, lr}
 80236ee:	b082      	sub	sp, #8
 80236f0:	af00      	add	r7, sp, #0
 80236f2:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) p);
 80236f4:	6878      	ldr	r0, [r7, #4]
 80236f6:	f7e6 f85b 	bl	80097b0 <mg_fs_close>
  MG_INFO(("AAAAAAAAA %p", p));
 80236fa:	4b0a      	ldr	r3, [pc, #40]	@ (8023724 <file_closer+0x38>)
 80236fc:	681b      	ldr	r3, [r3, #0]
 80236fe:	2b01      	cmp	r3, #1
 8023700:	dd0a      	ble.n	8023718 <file_closer+0x2c>
 8023702:	4b09      	ldr	r3, [pc, #36]	@ (8023728 <file_closer+0x3c>)
 8023704:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8023708:	4908      	ldr	r1, [pc, #32]	@ (802372c <file_closer+0x40>)
 802370a:	2002      	movs	r0, #2
 802370c:	f7ea fb1e 	bl	800dd4c <mg_log_prefix>
 8023710:	6879      	ldr	r1, [r7, #4]
 8023712:	4807      	ldr	r0, [pc, #28]	@ (8023730 <file_closer+0x44>)
 8023714:	f7ea fb6a 	bl	800ddec <mg_log>
  return true;
 8023718:	2301      	movs	r3, #1
}
 802371a:	4618      	mov	r0, r3
 802371c:	3708      	adds	r7, #8
 802371e:	46bd      	mov	sp, r7
 8023720:	bd80      	pop	{r7, pc}
 8023722:	bf00      	nop
 8023724:	24000258 	.word	0x24000258
 8023728:	080376a8 	.word	0x080376a8
 802372c:	080293f8 	.word	0x080293f8
 8023730:	08029578 	.word	0x08029578

08023734 <file_writer>:

static bool file_writer(void *p, void *buf, size_t len) {
 8023734:	b580      	push	{r7, lr}
 8023736:	b086      	sub	sp, #24
 8023738:	af00      	add	r7, sp, #0
 802373a:	60f8      	str	r0, [r7, #12]
 802373c:	60b9      	str	r1, [r7, #8]
 802373e:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) p;
 8023740:	68fb      	ldr	r3, [r7, #12]
 8023742:	617b      	str	r3, [r7, #20]
  size_t written = fd->fs->wr(fd->fd, buf, len);
 8023744:	697b      	ldr	r3, [r7, #20]
 8023746:	685b      	ldr	r3, [r3, #4]
 8023748:	695b      	ldr	r3, [r3, #20]
 802374a:	697a      	ldr	r2, [r7, #20]
 802374c:	6810      	ldr	r0, [r2, #0]
 802374e:	687a      	ldr	r2, [r7, #4]
 8023750:	68b9      	ldr	r1, [r7, #8]
 8023752:	4798      	blx	r3
 8023754:	6138      	str	r0, [r7, #16]
  MG_INFO(("AAAAAAAAA %lu", written));
 8023756:	4b0d      	ldr	r3, [pc, #52]	@ (802378c <file_writer+0x58>)
 8023758:	681b      	ldr	r3, [r3, #0]
 802375a:	2b01      	cmp	r3, #1
 802375c:	dd0a      	ble.n	8023774 <file_writer+0x40>
 802375e:	4b0c      	ldr	r3, [pc, #48]	@ (8023790 <file_writer+0x5c>)
 8023760:	f240 1265 	movw	r2, #357	@ 0x165
 8023764:	490b      	ldr	r1, [pc, #44]	@ (8023794 <file_writer+0x60>)
 8023766:	2002      	movs	r0, #2
 8023768:	f7ea faf0 	bl	800dd4c <mg_log_prefix>
 802376c:	6939      	ldr	r1, [r7, #16]
 802376e:	480a      	ldr	r0, [pc, #40]	@ (8023798 <file_writer+0x64>)
 8023770:	f7ea fb3c 	bl	800ddec <mg_log>
  return written == len;
 8023774:	693a      	ldr	r2, [r7, #16]
 8023776:	687b      	ldr	r3, [r7, #4]
 8023778:	429a      	cmp	r2, r3
 802377a:	bf0c      	ite	eq
 802377c:	2301      	moveq	r3, #1
 802377e:	2300      	movne	r3, #0
 8023780:	b2db      	uxtb	r3, r3
}
 8023782:	4618      	mov	r0, r3
 8023784:	3718      	adds	r7, #24
 8023786:	46bd      	mov	sp, r7
 8023788:	bd80      	pop	{r7, pc}
 802378a:	bf00      	nop
 802378c:	24000258 	.word	0x24000258
 8023790:	080376b4 	.word	0x080376b4
 8023794:	080293f8 	.word	0x080293f8
 8023798:	08029588 	.word	0x08029588

0802379c <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 802379c:	b590      	push	{r4, r7, lr}
 802379e:	b08d      	sub	sp, #52	@ 0x34
 80237a0:	af04      	add	r7, sp, #16
 80237a2:	60f8      	str	r0, [r7, #12]
 80237a4:	60b9      	str	r1, [r7, #8]
 80237a6:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 80237a8:	68fb      	ldr	r3, [r7, #12]
 80237aa:	3388      	adds	r3, #136	@ 0x88
 80237ac:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 80237ae:	69fb      	ldr	r3, [r7, #28]
 80237b0:	781b      	ldrb	r3, [r3, #0]
 80237b2:	2b55      	cmp	r3, #85	@ 0x55
 80237b4:	f040 80ae 	bne.w	8023914 <upload_handler+0x178>
 80237b8:	68bb      	ldr	r3, [r7, #8]
 80237ba:	2b07      	cmp	r3, #7
 80237bc:	f040 80aa 	bne.w	8023914 <upload_handler+0x178>
 80237c0:	69fb      	ldr	r3, [r7, #28]
 80237c2:	685b      	ldr	r3, [r3, #4]
 80237c4:	2b00      	cmp	r3, #0
 80237c6:	f000 80a5 	beq.w	8023914 <upload_handler+0x178>
      c->recv.len > 0) {
 80237ca:	68fb      	ldr	r3, [r7, #12]
 80237cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 80237ce:	2b00      	cmp	r3, #0
 80237d0:	f000 80a0 	beq.w	8023914 <upload_handler+0x178>
    size_t alignment = 512;  // Maximum flash write granularity (iMXRT, Pico)
 80237d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80237d8:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 80237da:	69fb      	ldr	r3, [r7, #28]
 80237dc:	689a      	ldr	r2, [r3, #8]
 80237de:	68fb      	ldr	r3, [r7, #12]
 80237e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80237e2:	441a      	add	r2, r3
 80237e4:	69fb      	ldr	r3, [r7, #28]
 80237e6:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 80237e8:	429a      	cmp	r2, r3
 80237ea:	d210      	bcs.n	802380e <upload_handler+0x72>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 80237ec:	69bb      	ldr	r3, [r7, #24]
 80237ee:	2b00      	cmp	r3, #0
 80237f0:	d102      	bne.n	80237f8 <upload_handler+0x5c>
 80237f2:	68fb      	ldr	r3, [r7, #12]
 80237f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80237f6:	e007      	b.n	8023808 <upload_handler+0x6c>
 80237f8:	68fb      	ldr	r3, [r7, #12]
 80237fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80237fc:	69bb      	ldr	r3, [r7, #24]
 80237fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8023802:	69ba      	ldr	r2, [r7, #24]
 8023804:	fb02 f303 	mul.w	r3, r2, r3
 8023808:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 802380a:	697b      	ldr	r3, [r7, #20]
 802380c:	e001      	b.n	8023812 <upload_handler+0x76>
 802380e:	68fb      	ldr	r3, [r7, #12]
 8023810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 8023812:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 8023814:	697b      	ldr	r3, [r7, #20]
 8023816:	2b00      	cmp	r3, #0
 8023818:	d00a      	beq.n	8023830 <upload_handler+0x94>
 802381a:	69fb      	ldr	r3, [r7, #28]
 802381c:	695b      	ldr	r3, [r3, #20]
 802381e:	69fa      	ldr	r2, [r7, #28]
 8023820:	68d0      	ldr	r0, [r2, #12]
 8023822:	68fa      	ldr	r2, [r7, #12]
 8023824:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8023826:	697a      	ldr	r2, [r7, #20]
 8023828:	4798      	blx	r3
 802382a:	4603      	mov	r3, r0
 802382c:	2b00      	cmp	r3, #0
 802382e:	d001      	beq.n	8023834 <upload_handler+0x98>
 8023830:	2301      	movs	r3, #1
 8023832:	e000      	b.n	8023836 <upload_handler+0x9a>
 8023834:	2300      	movs	r3, #0
 8023836:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 8023838:	69fb      	ldr	r3, [r7, #28]
 802383a:	689a      	ldr	r2, [r3, #8]
 802383c:	697b      	ldr	r3, [r7, #20]
 802383e:	441a      	add	r2, r3
 8023840:	69fb      	ldr	r3, [r7, #28]
 8023842:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 8023844:	4b3a      	ldr	r3, [pc, #232]	@ (8023930 <upload_handler+0x194>)
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	2b02      	cmp	r3, #2
 802384a:	dd18      	ble.n	802387e <upload_handler+0xe2>
 802384c:	4b39      	ldr	r3, [pc, #228]	@ (8023934 <upload_handler+0x198>)
 802384e:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 8023852:	4939      	ldr	r1, [pc, #228]	@ (8023938 <upload_handler+0x19c>)
 8023854:	2003      	movs	r0, #3
 8023856:	f7ea fa79 	bl	800dd4c <mg_log_prefix>
 802385a:	68fb      	ldr	r3, [r7, #12]
 802385c:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 802385e:	68fb      	ldr	r3, [r7, #12]
 8023860:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8023862:	69fb      	ldr	r3, [r7, #28]
 8023864:	689b      	ldr	r3, [r3, #8]
 8023866:	69fa      	ldr	r2, [r7, #28]
 8023868:	6852      	ldr	r2, [r2, #4]
 802386a:	7cf9      	ldrb	r1, [r7, #19]
 802386c:	9102      	str	r1, [sp, #8]
 802386e:	9201      	str	r2, [sp, #4]
 8023870:	9300      	str	r3, [sp, #0]
 8023872:	4623      	mov	r3, r4
 8023874:	697a      	ldr	r2, [r7, #20]
 8023876:	4601      	mov	r1, r0
 8023878:	4830      	ldr	r0, [pc, #192]	@ (802393c <upload_handler+0x1a0>)
 802387a:	f7ea fab7 	bl	800ddec <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 802387e:	68fb      	ldr	r3, [r7, #12]
 8023880:	3338      	adds	r3, #56	@ 0x38
 8023882:	697a      	ldr	r2, [r7, #20]
 8023884:	2100      	movs	r1, #0
 8023886:	4618      	mov	r0, r3
 8023888:	f7e9 fb94 	bl	800cfb4 <mg_iobuf_del>
    if (ok == false) {
 802388c:	7cfb      	ldrb	r3, [r7, #19]
 802388e:	f083 0301 	eor.w	r3, r3, #1
 8023892:	b2db      	uxtb	r3, r3
 8023894:	2b00      	cmp	r3, #0
 8023896:	d011      	beq.n	80238bc <upload_handler+0x120>
      mg_http_reply(c, 400, "", "Upload error\n");
 8023898:	4b29      	ldr	r3, [pc, #164]	@ (8023940 <upload_handler+0x1a4>)
 802389a:	4a2a      	ldr	r2, [pc, #168]	@ (8023944 <upload_handler+0x1a8>)
 802389c:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80238a0:	68f8      	ldr	r0, [r7, #12]
 80238a2:	f7e7 fca7 	bl	800b1f4 <mg_http_reply>
      close_uploaded_file(us);
 80238a6:	69f8      	ldr	r0, [r7, #28]
 80238a8:	f7ff fefe 	bl	80236a8 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 80238ac:	68fa      	ldr	r2, [r7, #12]
 80238ae:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80238b2:	f043 0310 	orr.w	r3, r3, #16
 80238b6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 80238ba:	e02b      	b.n	8023914 <upload_handler+0x178>
    } else if (us->received >= us->expected) {
 80238bc:	69fb      	ldr	r3, [r7, #28]
 80238be:	689a      	ldr	r2, [r3, #8]
 80238c0:	69fb      	ldr	r3, [r7, #28]
 80238c2:	685b      	ldr	r3, [r3, #4]
 80238c4:	429a      	cmp	r2, r3
 80238c6:	d325      	bcc.n	8023914 <upload_handler+0x178>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 80238c8:	4b19      	ldr	r3, [pc, #100]	@ (8023930 <upload_handler+0x194>)
 80238ca:	681b      	ldr	r3, [r3, #0]
 80238cc:	2b01      	cmp	r3, #1
 80238ce:	dd0e      	ble.n	80238ee <upload_handler+0x152>
 80238d0:	4b18      	ldr	r3, [pc, #96]	@ (8023934 <upload_handler+0x198>)
 80238d2:	f240 1283 	movw	r2, #387	@ 0x183
 80238d6:	4918      	ldr	r1, [pc, #96]	@ (8023938 <upload_handler+0x19c>)
 80238d8:	2002      	movs	r0, #2
 80238da:	f7ea fa37 	bl	800dd4c <mg_log_prefix>
 80238de:	68fb      	ldr	r3, [r7, #12]
 80238e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80238e2:	69fb      	ldr	r3, [r7, #28]
 80238e4:	689b      	ldr	r3, [r3, #8]
 80238e6:	461a      	mov	r2, r3
 80238e8:	4817      	ldr	r0, [pc, #92]	@ (8023948 <upload_handler+0x1ac>)
 80238ea:	f7ea fa7f 	bl	800ddec <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 80238ee:	69fb      	ldr	r3, [r7, #28]
 80238f0:	689b      	ldr	r3, [r3, #8]
 80238f2:	9300      	str	r3, [sp, #0]
 80238f4:	4b15      	ldr	r3, [pc, #84]	@ (802394c <upload_handler+0x1b0>)
 80238f6:	2200      	movs	r2, #0
 80238f8:	21c8      	movs	r1, #200	@ 0xc8
 80238fa:	68f8      	ldr	r0, [r7, #12]
 80238fc:	f7e7 fc7a 	bl	800b1f4 <mg_http_reply>
      close_uploaded_file(us);
 8023900:	69f8      	ldr	r0, [r7, #28]
 8023902:	f7ff fed1 	bl	80236a8 <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8023906:	68fa      	ldr	r2, [r7, #12]
 8023908:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 802390c:	f043 0310 	orr.w	r3, r3, #16
 8023910:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 8023914:	69fb      	ldr	r3, [r7, #28]
 8023916:	781b      	ldrb	r3, [r3, #0]
 8023918:	2b55      	cmp	r3, #85	@ 0x55
 802391a:	d105      	bne.n	8023928 <upload_handler+0x18c>
 802391c:	68bb      	ldr	r3, [r7, #8]
 802391e:	2b09      	cmp	r3, #9
 8023920:	d102      	bne.n	8023928 <upload_handler+0x18c>
 8023922:	69f8      	ldr	r0, [r7, #28]
 8023924:	f7ff fec0 	bl	80236a8 <close_uploaded_file>
  (void) ev_data;
}
 8023928:	3724      	adds	r7, #36	@ 0x24
 802392a:	46bd      	mov	sp, r7
 802392c:	bd90      	pop	{r4, r7, pc}
 802392e:	bf00      	nop
 8023930:	24000258 	.word	0x24000258
 8023934:	080376c0 	.word	0x080376c0
 8023938:	080293f8 	.word	0x080293f8
 802393c:	08029598 	.word	0x08029598
 8023940:	080295bc 	.word	0x080295bc
 8023944:	0802949c 	.word	0x0802949c
 8023948:	080295cc 	.word	0x080295cc
 802394c:	080295e0 	.word	0x080295e0

08023950 <get_file_name_from_uri>:

static void get_file_name_from_uri(struct mg_str uri, char *buf, size_t len) {
 8023950:	b590      	push	{r4, r7, lr}
 8023952:	b08f      	sub	sp, #60	@ 0x3c
 8023954:	af02      	add	r7, sp, #8
 8023956:	f107 0408 	add.w	r4, r7, #8
 802395a:	e884 0003 	stmia.w	r4, {r0, r1}
 802395e:	607a      	str	r2, [r7, #4]
 8023960:	603b      	str	r3, [r7, #0]
  struct mg_str parts[3];
  memset(parts, 0, sizeof(parts));           // Init match parts
 8023962:	f107 0310 	add.w	r3, r7, #16
 8023966:	2218      	movs	r2, #24
 8023968:	2100      	movs	r1, #0
 802396a:	4618      	mov	r0, r3
 802396c:	f001 ff0e 	bl	802578c <memset>
  mg_match(uri, mg_str("/api/*/#"), parts);  // Fetch file name
 8023970:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8023974:	490d      	ldr	r1, [pc, #52]	@ (80239ac <get_file_name_from_uri+0x5c>)
 8023976:	4618      	mov	r0, r3
 8023978:	f7f2 f9e8 	bl	8015d4c <mg_str_s>
 802397c:	f107 0310 	add.w	r3, r7, #16
 8023980:	9300      	str	r3, [sp, #0]
 8023982:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8023986:	cb0c      	ldmia	r3, {r2, r3}
 8023988:	f107 0108 	add.w	r1, r7, #8
 802398c:	c903      	ldmia	r1, {r0, r1}
 802398e:	f7f2 fae7 	bl	8015f60 <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, buf, len, 0);
 8023992:	69b8      	ldr	r0, [r7, #24]
 8023994:	69f9      	ldr	r1, [r7, #28]
 8023996:	2300      	movs	r3, #0
 8023998:	9300      	str	r3, [sp, #0]
 802399a:	683b      	ldr	r3, [r7, #0]
 802399c:	687a      	ldr	r2, [r7, #4]
 802399e:	f7e6 fac0 	bl	8009f22 <mg_url_decode>
}
 80239a2:	bf00      	nop
 80239a4:	3734      	adds	r7, #52	@ 0x34
 80239a6:	46bd      	mov	sp, r7
 80239a8:	bd90      	pop	{r4, r7, pc}
 80239aa:	bf00      	nop
 80239ac:	080295e8 	.word	0x080295e8

080239b0 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 80239b0:	b580      	push	{r7, lr}
 80239b2:	b09e      	sub	sp, #120	@ 0x78
 80239b4:	af00      	add	r7, sp, #0
 80239b6:	60f8      	str	r0, [r7, #12]
 80239b8:	60b9      	str	r1, [r7, #8]
 80239ba:	607a      	str	r2, [r7, #4]
 80239bc:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 80239be:	68fb      	ldr	r3, [r7, #12]
 80239c0:	3388      	adds	r3, #136	@ 0x88
 80239c2:	677b      	str	r3, [r7, #116]	@ 0x74
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));  // Cleanup upload state
 80239c4:	2218      	movs	r2, #24
 80239c6:	2100      	movs	r1, #0
 80239c8:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80239ca:	f001 fedf 	bl	802578c <memset>
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 80239ce:	f107 0210 	add.w	r2, r7, #16
 80239d2:	68b9      	ldr	r1, [r7, #8]
 80239d4:	2364      	movs	r3, #100	@ 0x64
 80239d6:	3108      	adds	r1, #8
 80239d8:	c903      	ldmia	r1, {r0, r1}
 80239da:	f7ff ffb9 	bl	8023950 <get_file_name_from_uri>
  us->fp = fn_open(path, hm->body.len);
 80239de:	68bb      	ldr	r3, [r7, #8]
 80239e0:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 80239e4:	f107 0210 	add.w	r2, r7, #16
 80239e8:	687b      	ldr	r3, [r7, #4]
 80239ea:	4610      	mov	r0, r2
 80239ec:	4798      	blx	r3
 80239ee:	4602      	mov	r2, r0
 80239f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80239f2:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 80239f4:	4b29      	ldr	r3, [pc, #164]	@ (8023a9c <prep_upload+0xec>)
 80239f6:	681b      	ldr	r3, [r3, #0]
 80239f8:	2b02      	cmp	r3, #2
 80239fa:	dd10      	ble.n	8023a1e <prep_upload+0x6e>
 80239fc:	4b28      	ldr	r3, [pc, #160]	@ (8023aa0 <prep_upload+0xf0>)
 80239fe:	f240 129f 	movw	r2, #415	@ 0x19f
 8023a02:	4928      	ldr	r1, [pc, #160]	@ (8023aa4 <prep_upload+0xf4>)
 8023a04:	2003      	movs	r0, #3
 8023a06:	f7ea f9a1 	bl	800dd4c <mg_log_prefix>
 8023a0a:	68bb      	ldr	r3, [r7, #8]
 8023a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8023a10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023a12:	68db      	ldr	r3, [r3, #12]
 8023a14:	f107 0110 	add.w	r1, r7, #16
 8023a18:	4823      	ldr	r0, [pc, #140]	@ (8023aa8 <prep_upload+0xf8>)
 8023a1a:	f7ea f9e7 	bl	800ddec <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 8023a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023a20:	2255      	movs	r2, #85	@ 0x55
 8023a22:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 8023a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023a26:	68db      	ldr	r3, [r3, #12]
 8023a28:	2b00      	cmp	r3, #0
 8023a2a:	d10e      	bne.n	8023a4a <prep_upload+0x9a>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 8023a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8023aac <prep_upload+0xfc>)
 8023a2e:	4a20      	ldr	r2, [pc, #128]	@ (8023ab0 <prep_upload+0x100>)
 8023a30:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8023a34:	68f8      	ldr	r0, [r7, #12]
 8023a36:	f7e7 fbdd 	bl	800b1f4 <mg_http_reply>
    c->is_draining = 1;
 8023a3a:	68fa      	ldr	r2, [r7, #12]
 8023a3c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8023a40:	f043 0310 	orr.w	r3, r3, #16
 8023a44:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 8023a48:	e023      	b.n	8023a92 <prep_upload+0xe2>
    us->expected = hm->body.len;              // Store number of bytes we expect
 8023a4a:	68bb      	ldr	r3, [r7, #8]
 8023a4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8023a50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023a52:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 8023a54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023a56:	683a      	ldr	r2, [r7, #0]
 8023a58:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 8023a5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8023a5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8023a60:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 8023a62:	68fb      	ldr	r3, [r7, #12]
 8023a64:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8023a68:	68bb      	ldr	r3, [r7, #8]
 8023a6a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8023a6e:	461a      	mov	r2, r3
 8023a70:	2100      	movs	r1, #0
 8023a72:	f7e9 fa9f 	bl	800cfb4 <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 8023a76:	68fb      	ldr	r3, [r7, #12]
 8023a78:	4a0e      	ldr	r2, [pc, #56]	@ (8023ab4 <prep_upload+0x104>)
 8023a7a:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 8023a7c:	68fb      	ldr	r3, [r7, #12]
 8023a7e:	2200      	movs	r2, #0
 8023a80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 8023a84:	68fb      	ldr	r3, [r7, #12]
 8023a86:	3340      	adds	r3, #64	@ 0x40
 8023a88:	461a      	mov	r2, r3
 8023a8a:	2107      	movs	r1, #7
 8023a8c:	68f8      	ldr	r0, [r7, #12]
 8023a8e:	f7e4 fc11 	bl	80082b4 <mg_call>
}
 8023a92:	bf00      	nop
 8023a94:	3778      	adds	r7, #120	@ 0x78
 8023a96:	46bd      	mov	sp, r7
 8023a98:	bd80      	pop	{r7, pc}
 8023a9a:	bf00      	nop
 8023a9c:	24000258 	.word	0x24000258
 8023aa0:	080376d0 	.word	0x080376d0
 8023aa4:	080293f8 	.word	0x080293f8
 8023aa8:	080295f4 	.word	0x080295f4
 8023aac:	08029610 	.word	0x08029610
 8023ab0:	08029624 	.word	0x08029624
 8023ab4:	0802379d 	.word	0x0802379d

08023ab8 <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 8023ab8:	b580      	push	{r7, lr}
 8023aba:	b08e      	sub	sp, #56	@ 0x38
 8023abc:	af02      	add	r7, sp, #8
 8023abe:	60f8      	str	r0, [r7, #12]
 8023ac0:	60b9      	str	r1, [r7, #8]
 8023ac2:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8023ac4:	68fb      	ldr	r3, [r7, #12]
 8023ac6:	3388      	adds	r3, #136	@ 0x88
 8023ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8023aca:	687b      	ldr	r3, [r7, #4]
 8023acc:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8023ace:	68bb      	ldr	r3, [r7, #8]
 8023ad0:	2b0a      	cmp	r3, #10
 8023ad2:	d153      	bne.n	8023b7c <handle_uploads+0xc4>
 8023ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023ad6:	781b      	ldrb	r3, [r3, #0]
 8023ad8:	2b00      	cmp	r3, #0
 8023ada:	d14f      	bne.n	8023b7c <handle_uploads+0xc4>
      mg_strcmp(hm->method, mg_str("POST")) == 0) {
 8023adc:	f107 0314 	add.w	r3, r7, #20
 8023ae0:	4928      	ldr	r1, [pc, #160]	@ (8023b84 <handle_uploads+0xcc>)
 8023ae2:	4618      	mov	r0, r3
 8023ae4:	f7f2 f932 	bl	8015d4c <mg_str_s>
 8023ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8023aea:	f107 0314 	add.w	r3, r7, #20
 8023aee:	cb0c      	ldmia	r3, {r2, r3}
 8023af0:	c903      	ldmia	r1, {r0, r1}
 8023af2:	f7f2 f9ac 	bl	8015e4e <mg_strcmp>
 8023af6:	4603      	mov	r3, r0
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8023af8:	2b00      	cmp	r3, #0
 8023afa:	d13f      	bne.n	8023b7c <handle_uploads+0xc4>
    struct apihandler *h = find_handler(hm);
 8023afc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8023afe:	f7ff fbf1 	bl	80232e4 <find_handler>
 8023b02:	6278      	str	r0, [r7, #36]	@ 0x24
    if (h != NULL &&
 8023b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b06:	2b00      	cmp	r3, #0
 8023b08:	d021      	beq.n	8023b4e <handle_uploads+0x96>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8023b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b0c:	685b      	ldr	r3, [r3, #4]
 8023b0e:	491e      	ldr	r1, [pc, #120]	@ (8023b88 <handle_uploads+0xd0>)
 8023b10:	4618      	mov	r0, r3
 8023b12:	f7dc fbfd 	bl	8000310 <strcmp>
 8023b16:	4603      	mov	r3, r0
    if (h != NULL &&
 8023b18:	2b00      	cmp	r3, #0
 8023b1a:	d008      	beq.n	8023b2e <handle_uploads+0x76>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8023b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b1e:	685b      	ldr	r3, [r3, #4]
 8023b20:	491a      	ldr	r1, [pc, #104]	@ (8023b8c <handle_uploads+0xd4>)
 8023b22:	4618      	mov	r0, r3
 8023b24:	f7dc fbf4 	bl	8000310 <strcmp>
 8023b28:	4603      	mov	r3, r0
 8023b2a:	2b00      	cmp	r3, #0
 8023b2c:	d10f      	bne.n	8023b4e <handle_uploads+0x96>
      struct apihandler_upload *hu = (struct apihandler_upload *) h;
 8023b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b30:	623b      	str	r3, [r7, #32]
      prep_upload(c, hm, hu->opener, hu->closer, hu->writer);
 8023b32:	6a3b      	ldr	r3, [r7, #32]
 8023b34:	699a      	ldr	r2, [r3, #24]
 8023b36:	6a3b      	ldr	r3, [r7, #32]
 8023b38:	69d9      	ldr	r1, [r3, #28]
 8023b3a:	6a3b      	ldr	r3, [r7, #32]
 8023b3c:	6a1b      	ldr	r3, [r3, #32]
 8023b3e:	9300      	str	r3, [sp, #0]
 8023b40:	460b      	mov	r3, r1
 8023b42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8023b44:	68f8      	ldr	r0, [r7, #12]
 8023b46:	f7ff ff33 	bl	80239b0 <prep_upload>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8023b4a:	bf00      	nop
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
      struct apihandler_file *hf = (struct apihandler_file *) h;
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
    }
  }
}
 8023b4c:	e016      	b.n	8023b7c <handle_uploads+0xc4>
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
 8023b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b50:	2b00      	cmp	r3, #0
 8023b52:	d013      	beq.n	8023b7c <handle_uploads+0xc4>
 8023b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b56:	685b      	ldr	r3, [r3, #4]
 8023b58:	490d      	ldr	r1, [pc, #52]	@ (8023b90 <handle_uploads+0xd8>)
 8023b5a:	4618      	mov	r0, r3
 8023b5c:	f7dc fbd8 	bl	8000310 <strcmp>
 8023b60:	4603      	mov	r3, r0
 8023b62:	2b00      	cmp	r3, #0
 8023b64:	d10a      	bne.n	8023b7c <handle_uploads+0xc4>
      struct apihandler_file *hf = (struct apihandler_file *) h;
 8023b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023b68:	61fb      	str	r3, [r7, #28]
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
 8023b6a:	69fb      	ldr	r3, [r7, #28]
 8023b6c:	699a      	ldr	r2, [r3, #24]
 8023b6e:	4b09      	ldr	r3, [pc, #36]	@ (8023b94 <handle_uploads+0xdc>)
 8023b70:	9300      	str	r3, [sp, #0]
 8023b72:	4b09      	ldr	r3, [pc, #36]	@ (8023b98 <handle_uploads+0xe0>)
 8023b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8023b76:	68f8      	ldr	r0, [r7, #12]
 8023b78:	f7ff ff1a 	bl	80239b0 <prep_upload>
}
 8023b7c:	bf00      	nop
 8023b7e:	3730      	adds	r7, #48	@ 0x30
 8023b80:	46bd      	mov	sp, r7
 8023b82:	bd80      	pop	{r7, pc}
 8023b84:	08029660 	.word	0x08029660
 8023b88:	0802937c 	.word	0x0802937c
 8023b8c:	0802936c 	.word	0x0802936c
 8023b90:	0802942c 	.word	0x0802942c
 8023b94:	08023735 	.word	0x08023735
 8023b98:	080236ed 	.word	0x080236ed

08023b9c <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void),
                          void (*start_fn)(struct mg_str)) {
 8023b9c:	b580      	push	{r7, lr}
 8023b9e:	b088      	sub	sp, #32
 8023ba0:	af02      	add	r7, sp, #8
 8023ba2:	60f8      	str	r0, [r7, #12]
 8023ba4:	60b9      	str	r1, [r7, #8]
 8023ba6:	607a      	str	r2, [r7, #4]
 8023ba8:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 8023baa:	68bb      	ldr	r3, [r7, #8]
 8023bac:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8023bb0:	2b00      	cmp	r3, #0
 8023bb2:	d01c      	beq.n	8023bee <handle_action+0x52>
    start_fn(hm->body);
 8023bb4:	68ba      	ldr	r2, [r7, #8]
 8023bb6:	683b      	ldr	r3, [r7, #0]
 8023bb8:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8023bbc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8023bc0:	4798      	blx	r3
    if (check_fn()) {
 8023bc2:	687b      	ldr	r3, [r7, #4]
 8023bc4:	4798      	blx	r3
 8023bc6:	4603      	mov	r3, r0
 8023bc8:	2b00      	cmp	r3, #0
 8023bca:	d009      	beq.n	8023be0 <handle_action+0x44>
      struct action_state *as = (struct action_state *) c->data;
 8023bcc:	68fb      	ldr	r3, [r7, #12]
 8023bce:	3388      	adds	r3, #136	@ 0x88
 8023bd0:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 8023bd2:	697b      	ldr	r3, [r7, #20]
 8023bd4:	2241      	movs	r2, #65	@ 0x41
 8023bd6:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 8023bd8:	697b      	ldr	r3, [r7, #20]
 8023bda:	687a      	ldr	r2, [r7, #4]
 8023bdc:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 8023bde:	e015      	b.n	8023c0c <handle_action+0x70>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 8023be0:	4b0c      	ldr	r3, [pc, #48]	@ (8023c14 <handle_action+0x78>)
 8023be2:	4a0d      	ldr	r2, [pc, #52]	@ (8023c18 <handle_action+0x7c>)
 8023be4:	21c8      	movs	r1, #200	@ 0xc8
 8023be6:	68f8      	ldr	r0, [r7, #12]
 8023be8:	f7e7 fb04 	bl	800b1f4 <mg_http_reply>
}
 8023bec:	e00e      	b.n	8023c0c <handle_action+0x70>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 8023bee:	687b      	ldr	r3, [r7, #4]
 8023bf0:	4798      	blx	r3
 8023bf2:	4603      	mov	r3, r0
 8023bf4:	2b00      	cmp	r3, #0
 8023bf6:	d001      	beq.n	8023bfc <handle_action+0x60>
 8023bf8:	4b08      	ldr	r3, [pc, #32]	@ (8023c1c <handle_action+0x80>)
 8023bfa:	e000      	b.n	8023bfe <handle_action+0x62>
 8023bfc:	4b05      	ldr	r3, [pc, #20]	@ (8023c14 <handle_action+0x78>)
 8023bfe:	9300      	str	r3, [sp, #0]
 8023c00:	4b07      	ldr	r3, [pc, #28]	@ (8023c20 <handle_action+0x84>)
 8023c02:	4a05      	ldr	r2, [pc, #20]	@ (8023c18 <handle_action+0x7c>)
 8023c04:	21c8      	movs	r1, #200	@ 0xc8
 8023c06:	68f8      	ldr	r0, [r7, #12]
 8023c08:	f7e7 faf4 	bl	800b1f4 <mg_http_reply>
}
 8023c0c:	bf00      	nop
 8023c0e:	3718      	adds	r7, #24
 8023c10:	46bd      	mov	sp, r7
 8023c12:	bd80      	pop	{r7, pc}
 8023c14:	08029668 	.word	0x08029668
 8023c18:	08029624 	.word	0x08029624
 8023c1c:	08029670 	.word	0x08029670
 8023c20:	08029470 	.word	0x08029470

08023c24 <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 8023c24:	b580      	push	{r7, lr}
 8023c26:	b08e      	sub	sp, #56	@ 0x38
 8023c28:	af04      	add	r7, sp, #16
 8023c2a:	60f8      	str	r0, [r7, #12]
 8023c2c:	60b9      	str	r1, [r7, #8]
 8023c2e:	607a      	str	r2, [r7, #4]
  const struct attribute *a = va_arg(*ap, struct attribute *);
 8023c30:	687b      	ldr	r3, [r7, #4]
 8023c32:	681b      	ldr	r3, [r3, #0]
 8023c34:	1d19      	adds	r1, r3, #4
 8023c36:	687a      	ldr	r2, [r7, #4]
 8023c38:	6011      	str	r1, [r2, #0]
 8023c3a:	681b      	ldr	r3, [r3, #0]
 8023c3c:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 8023c3e:	687b      	ldr	r3, [r7, #4]
 8023c40:	681b      	ldr	r3, [r3, #0]
 8023c42:	1d19      	adds	r1, r3, #4
 8023c44:	687a      	ldr	r2, [r7, #4]
 8023c46:	6011      	str	r1, [r2, #0]
 8023c48:	681b      	ldr	r3, [r3, #0]
 8023c4a:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8023c4c:	2300      	movs	r3, #0
 8023c4e:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8023c50:	2300      	movs	r3, #0
 8023c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8023c54:	e0bf      	b.n	8023dd6 <print_struct+0x1b2>
    char *attrptr = data + a[i].offset;
 8023c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023c58:	4613      	mov	r3, r2
 8023c5a:	005b      	lsls	r3, r3, #1
 8023c5c:	4413      	add	r3, r2
 8023c5e:	00db      	lsls	r3, r3, #3
 8023c60:	461a      	mov	r2, r3
 8023c62:	69bb      	ldr	r3, [r7, #24]
 8023c64:	4413      	add	r3, r2
 8023c66:	68db      	ldr	r3, [r3, #12]
 8023c68:	697a      	ldr	r2, [r7, #20]
 8023c6a:	4413      	add	r3, r2
 8023c6c:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",", MG_ESC(a[i].name));
 8023c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023c70:	2b00      	cmp	r3, #0
 8023c72:	d101      	bne.n	8023c78 <print_struct+0x54>
 8023c74:	4960      	ldr	r1, [pc, #384]	@ (8023df8 <print_struct+0x1d4>)
 8023c76:	e000      	b.n	8023c7a <print_struct+0x56>
 8023c78:	4960      	ldr	r1, [pc, #384]	@ (8023dfc <print_struct+0x1d8>)
 8023c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023c7c:	4613      	mov	r3, r2
 8023c7e:	005b      	lsls	r3, r3, #1
 8023c80:	4413      	add	r3, r2
 8023c82:	00db      	lsls	r3, r3, #3
 8023c84:	461a      	mov	r2, r3
 8023c86:	69bb      	ldr	r3, [r7, #24]
 8023c88:	4413      	add	r3, r2
 8023c8a:	681b      	ldr	r3, [r3, #0]
 8023c8c:	9302      	str	r3, [sp, #8]
 8023c8e:	2300      	movs	r3, #0
 8023c90:	9301      	str	r3, [sp, #4]
 8023c92:	4b5b      	ldr	r3, [pc, #364]	@ (8023e00 <print_struct+0x1dc>)
 8023c94:	9300      	str	r3, [sp, #0]
 8023c96:	460b      	mov	r3, r1
 8023c98:	4a5a      	ldr	r2, [pc, #360]	@ (8023e04 <print_struct+0x1e0>)
 8023c9a:	68b9      	ldr	r1, [r7, #8]
 8023c9c:	68f8      	ldr	r0, [r7, #12]
 8023c9e:	f7e5 f9a0 	bl	8008fe2 <mg_xprintf>
 8023ca2:	4602      	mov	r2, r0
 8023ca4:	6a3b      	ldr	r3, [r7, #32]
 8023ca6:	4413      	add	r3, r2
 8023ca8:	623b      	str	r3, [r7, #32]
    if (strcmp(a[i].type, "int") == 0) {
 8023caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023cac:	4613      	mov	r3, r2
 8023cae:	005b      	lsls	r3, r3, #1
 8023cb0:	4413      	add	r3, r2
 8023cb2:	00db      	lsls	r3, r3, #3
 8023cb4:	461a      	mov	r2, r3
 8023cb6:	69bb      	ldr	r3, [r7, #24]
 8023cb8:	4413      	add	r3, r2
 8023cba:	685b      	ldr	r3, [r3, #4]
 8023cbc:	4952      	ldr	r1, [pc, #328]	@ (8023e08 <print_struct+0x1e4>)
 8023cbe:	4618      	mov	r0, r3
 8023cc0:	f7dc fb26 	bl	8000310 <strcmp>
 8023cc4:	4603      	mov	r3, r0
 8023cc6:	2b00      	cmp	r3, #0
 8023cc8:	d10b      	bne.n	8023ce2 <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 8023cca:	693b      	ldr	r3, [r7, #16]
 8023ccc:	681b      	ldr	r3, [r3, #0]
 8023cce:	4a4f      	ldr	r2, [pc, #316]	@ (8023e0c <print_struct+0x1e8>)
 8023cd0:	68b9      	ldr	r1, [r7, #8]
 8023cd2:	68f8      	ldr	r0, [r7, #12]
 8023cd4:	f7e5 f985 	bl	8008fe2 <mg_xprintf>
 8023cd8:	4602      	mov	r2, r0
 8023cda:	6a3b      	ldr	r3, [r7, #32]
 8023cdc:	4413      	add	r3, r2
 8023cde:	623b      	str	r3, [r7, #32]
 8023ce0:	e076      	b.n	8023dd0 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "double") == 0) {
 8023ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023ce4:	4613      	mov	r3, r2
 8023ce6:	005b      	lsls	r3, r3, #1
 8023ce8:	4413      	add	r3, r2
 8023cea:	00db      	lsls	r3, r3, #3
 8023cec:	461a      	mov	r2, r3
 8023cee:	69bb      	ldr	r3, [r7, #24]
 8023cf0:	4413      	add	r3, r2
 8023cf2:	685b      	ldr	r3, [r3, #4]
 8023cf4:	4946      	ldr	r1, [pc, #280]	@ (8023e10 <print_struct+0x1ec>)
 8023cf6:	4618      	mov	r0, r3
 8023cf8:	f7dc fb0a 	bl	8000310 <strcmp>
 8023cfc:	4603      	mov	r3, r0
 8023cfe:	2b00      	cmp	r3, #0
 8023d00:	d11d      	bne.n	8023d3e <print_struct+0x11a>
      const char *fmt = a[i].format;
 8023d02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023d04:	4613      	mov	r3, r2
 8023d06:	005b      	lsls	r3, r3, #1
 8023d08:	4413      	add	r3, r2
 8023d0a:	00db      	lsls	r3, r3, #3
 8023d0c:	461a      	mov	r2, r3
 8023d0e:	69bb      	ldr	r3, [r7, #24]
 8023d10:	4413      	add	r3, r2
 8023d12:	689b      	ldr	r3, [r3, #8]
 8023d14:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 8023d16:	69fb      	ldr	r3, [r7, #28]
 8023d18:	2b00      	cmp	r3, #0
 8023d1a:	d101      	bne.n	8023d20 <print_struct+0xfc>
 8023d1c:	4b3d      	ldr	r3, [pc, #244]	@ (8023e14 <print_struct+0x1f0>)
 8023d1e:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 8023d20:	693b      	ldr	r3, [r7, #16]
 8023d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d26:	e9cd 2300 	strd	r2, r3, [sp]
 8023d2a:	69fa      	ldr	r2, [r7, #28]
 8023d2c:	68b9      	ldr	r1, [r7, #8]
 8023d2e:	68f8      	ldr	r0, [r7, #12]
 8023d30:	f7e5 f957 	bl	8008fe2 <mg_xprintf>
 8023d34:	4602      	mov	r2, r0
 8023d36:	6a3b      	ldr	r3, [r7, #32]
 8023d38:	4413      	add	r3, r2
 8023d3a:	623b      	str	r3, [r7, #32]
 8023d3c:	e048      	b.n	8023dd0 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "bool") == 0) {
 8023d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023d40:	4613      	mov	r3, r2
 8023d42:	005b      	lsls	r3, r3, #1
 8023d44:	4413      	add	r3, r2
 8023d46:	00db      	lsls	r3, r3, #3
 8023d48:	461a      	mov	r2, r3
 8023d4a:	69bb      	ldr	r3, [r7, #24]
 8023d4c:	4413      	add	r3, r2
 8023d4e:	685b      	ldr	r3, [r3, #4]
 8023d50:	4931      	ldr	r1, [pc, #196]	@ (8023e18 <print_struct+0x1f4>)
 8023d52:	4618      	mov	r0, r3
 8023d54:	f7dc fadc 	bl	8000310 <strcmp>
 8023d58:	4603      	mov	r3, r0
 8023d5a:	2b00      	cmp	r3, #0
 8023d5c:	d110      	bne.n	8023d80 <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 8023d5e:	693b      	ldr	r3, [r7, #16]
 8023d60:	781b      	ldrb	r3, [r3, #0]
 8023d62:	2b00      	cmp	r3, #0
 8023d64:	d001      	beq.n	8023d6a <print_struct+0x146>
 8023d66:	4b2d      	ldr	r3, [pc, #180]	@ (8023e1c <print_struct+0x1f8>)
 8023d68:	e000      	b.n	8023d6c <print_struct+0x148>
 8023d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8023e20 <print_struct+0x1fc>)
 8023d6c:	4a2d      	ldr	r2, [pc, #180]	@ (8023e24 <print_struct+0x200>)
 8023d6e:	68b9      	ldr	r1, [r7, #8]
 8023d70:	68f8      	ldr	r0, [r7, #12]
 8023d72:	f7e5 f936 	bl	8008fe2 <mg_xprintf>
 8023d76:	4602      	mov	r2, r0
 8023d78:	6a3b      	ldr	r3, [r7, #32]
 8023d7a:	4413      	add	r3, r2
 8023d7c:	623b      	str	r3, [r7, #32]
 8023d7e:	e027      	b.n	8023dd0 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "string") == 0) {
 8023d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023d82:	4613      	mov	r3, r2
 8023d84:	005b      	lsls	r3, r3, #1
 8023d86:	4413      	add	r3, r2
 8023d88:	00db      	lsls	r3, r3, #3
 8023d8a:	461a      	mov	r2, r3
 8023d8c:	69bb      	ldr	r3, [r7, #24]
 8023d8e:	4413      	add	r3, r2
 8023d90:	685b      	ldr	r3, [r3, #4]
 8023d92:	4925      	ldr	r1, [pc, #148]	@ (8023e28 <print_struct+0x204>)
 8023d94:	4618      	mov	r0, r3
 8023d96:	f7dc fabb 	bl	8000310 <strcmp>
 8023d9a:	4603      	mov	r3, r0
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	d10e      	bne.n	8023dbe <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 8023da0:	693b      	ldr	r3, [r7, #16]
 8023da2:	9301      	str	r3, [sp, #4]
 8023da4:	2300      	movs	r3, #0
 8023da6:	9300      	str	r3, [sp, #0]
 8023da8:	4b15      	ldr	r3, [pc, #84]	@ (8023e00 <print_struct+0x1dc>)
 8023daa:	4a20      	ldr	r2, [pc, #128]	@ (8023e2c <print_struct+0x208>)
 8023dac:	68b9      	ldr	r1, [r7, #8]
 8023dae:	68f8      	ldr	r0, [r7, #12]
 8023db0:	f7e5 f917 	bl	8008fe2 <mg_xprintf>
 8023db4:	4602      	mov	r2, r0
 8023db6:	6a3b      	ldr	r3, [r7, #32]
 8023db8:	4413      	add	r3, r2
 8023dba:	623b      	str	r3, [r7, #32]
 8023dbc:	e008      	b.n	8023dd0 <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 8023dbe:	4a1c      	ldr	r2, [pc, #112]	@ (8023e30 <print_struct+0x20c>)
 8023dc0:	68b9      	ldr	r1, [r7, #8]
 8023dc2:	68f8      	ldr	r0, [r7, #12]
 8023dc4:	f7e5 f90d 	bl	8008fe2 <mg_xprintf>
 8023dc8:	4602      	mov	r2, r0
 8023dca:	6a3b      	ldr	r3, [r7, #32]
 8023dcc:	4413      	add	r3, r2
 8023dce:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8023dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023dd2:	3301      	adds	r3, #1
 8023dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8023dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023dd8:	4613      	mov	r3, r2
 8023dda:	005b      	lsls	r3, r3, #1
 8023ddc:	4413      	add	r3, r2
 8023dde:	00db      	lsls	r3, r3, #3
 8023de0:	461a      	mov	r2, r3
 8023de2:	69bb      	ldr	r3, [r7, #24]
 8023de4:	4413      	add	r3, r2
 8023de6:	681b      	ldr	r3, [r3, #0]
 8023de8:	2b00      	cmp	r3, #0
 8023dea:	f47f af34 	bne.w	8023c56 <print_struct+0x32>
    }
  }
  return len;
 8023dee:	6a3b      	ldr	r3, [r7, #32]
}
 8023df0:	4618      	mov	r0, r3
 8023df2:	3728      	adds	r7, #40	@ 0x28
 8023df4:	46bd      	mov	sp, r7
 8023df6:	bd80      	pop	{r7, pc}
 8023df8:	0802949c 	.word	0x0802949c
 8023dfc:	08029678 	.word	0x08029678
 8023e00:	08012a4d 	.word	0x08012a4d
 8023e04:	0802967c 	.word	0x0802967c
 8023e08:	08029244 	.word	0x08029244
 8023e0c:	08029684 	.word	0x08029684
 8023e10:	080292fc 	.word	0x080292fc
 8023e14:	08029688 	.word	0x08029688
 8023e18:	08029280 	.word	0x08029280
 8023e1c:	08029670 	.word	0x08029670
 8023e20:	08029668 	.word	0x08029668
 8023e24:	08029470 	.word	0x08029470
 8023e28:	08029270 	.word	0x08029270
 8023e2c:	0802968c 	.word	0x0802968c
 8023e30:	08029690 	.word	0x08029690

08023e34 <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler_data *h) {
 8023e34:	b580      	push	{r7, lr}
 8023e36:	b0a8      	sub	sp, #160	@ 0xa0
 8023e38:	af04      	add	r7, sp, #16
 8023e3a:	60f8      	str	r0, [r7, #12]
 8023e3c:	60b9      	str	r1, [r7, #8]
 8023e3e:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 8023e40:	687b      	ldr	r3, [r7, #4]
 8023e42:	69db      	ldr	r3, [r3, #28]
 8023e44:	4619      	mov	r1, r3
 8023e46:	2001      	movs	r0, #1
 8023e48:	f001 f8c6 	bl	8024fd8 <calloc>
 8023e4c:	4603      	mov	r3, r0
 8023e4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 8023e52:	687b      	ldr	r3, [r7, #4]
 8023e54:	6a1b      	ldr	r3, [r3, #32]
 8023e56:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8023e5a:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 8023e5c:	68bb      	ldr	r3, [r7, #8]
 8023e5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8023e62:	2b00      	cmp	r3, #0
 8023e64:	f000 80da 	beq.w	802401c <handle_object+0x1e8>
 8023e68:	687b      	ldr	r3, [r7, #4]
 8023e6a:	69db      	ldr	r3, [r3, #28]
 8023e6c:	2b00      	cmp	r3, #0
 8023e6e:	f000 80d5 	beq.w	802401c <handle_object+0x1e8>
    char *tmp = calloc(1, h->data_size);
 8023e72:	687b      	ldr	r3, [r7, #4]
 8023e74:	69db      	ldr	r3, [r3, #28]
 8023e76:	4619      	mov	r1, r3
 8023e78:	2001      	movs	r0, #1
 8023e7a:	f001 f8ad 	bl	8024fd8 <calloc>
 8023e7e:	4603      	mov	r3, r0
 8023e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 8023e84:	687b      	ldr	r3, [r7, #4]
 8023e86:	69db      	ldr	r3, [r3, #28]
 8023e88:	461a      	mov	r2, r3
 8023e8a:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8023e8e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8023e92:	f001 fdb0 	bl	80259f6 <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8023e96:	2300      	movs	r3, #0
 8023e98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8023e9c:	e08e      	b.n	8023fbc <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 8023e9e:	687b      	ldr	r3, [r7, #4]
 8023ea0:	6999      	ldr	r1, [r3, #24]
 8023ea2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8023ea6:	4613      	mov	r3, r2
 8023ea8:	005b      	lsls	r3, r3, #1
 8023eaa:	4413      	add	r3, r2
 8023eac:	00db      	lsls	r3, r3, #3
 8023eae:	440b      	add	r3, r1
 8023eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 8023eb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023eb8:	681b      	ldr	r3, [r3, #0]
 8023eba:	f107 0010 	add.w	r0, r7, #16
 8023ebe:	4a62      	ldr	r2, [pc, #392]	@ (8024048 <handle_object+0x214>)
 8023ec0:	2164      	movs	r1, #100	@ 0x64
 8023ec2:	f7ee fb7d 	bl	80125c0 <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 8023ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023eca:	685b      	ldr	r3, [r3, #4]
 8023ecc:	495f      	ldr	r1, [pc, #380]	@ (802404c <handle_object+0x218>)
 8023ece:	4618      	mov	r0, r3
 8023ed0:	f7dc fa1e 	bl	8000310 <strcmp>
 8023ed4:	4603      	mov	r3, r0
 8023ed6:	2b00      	cmp	r3, #0
 8023ed8:	d11c      	bne.n	8023f14 <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 8023eda:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8023ede:	f107 0210 	add.w	r2, r7, #16
 8023ee2:	68b9      	ldr	r1, [r7, #8]
 8023ee4:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8023ee8:	c903      	ldmia	r1, {r0, r1}
 8023eea:	f7e9 fdf0 	bl	800dace <mg_json_get_num>
 8023eee:	4603      	mov	r3, r0
 8023ef0:	2b00      	cmp	r3, #0
 8023ef2:	d05e      	beq.n	8023fb2 <handle_object+0x17e>
          int v = (int) d;
 8023ef4:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 8023ef8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8023efc:	ee17 3a90 	vmov	r3, s15
 8023f00:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 8023f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023f06:	68db      	ldr	r3, [r3, #12]
 8023f08:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8023f0c:	4413      	add	r3, r2
 8023f0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8023f10:	601a      	str	r2, [r3, #0]
 8023f12:	e04e      	b.n	8023fb2 <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 8023f14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023f18:	685b      	ldr	r3, [r3, #4]
 8023f1a:	494d      	ldr	r1, [pc, #308]	@ (8024050 <handle_object+0x21c>)
 8023f1c:	4618      	mov	r0, r3
 8023f1e:	f7dc f9f7 	bl	8000310 <strcmp>
 8023f22:	4603      	mov	r3, r0
 8023f24:	2b00      	cmp	r3, #0
 8023f26:	d10e      	bne.n	8023f46 <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 8023f28:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023f2c:	68db      	ldr	r3, [r3, #12]
 8023f2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8023f32:	4413      	add	r3, r2
 8023f34:	f107 0210 	add.w	r2, r7, #16
 8023f38:	68b9      	ldr	r1, [r7, #8]
 8023f3a:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8023f3e:	c903      	ldmia	r1, {r0, r1}
 8023f40:	f7e9 fe0a 	bl	800db58 <mg_json_get_bool>
 8023f44:	e035      	b.n	8023fb2 <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 8023f46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023f4a:	685b      	ldr	r3, [r3, #4]
 8023f4c:	4941      	ldr	r1, [pc, #260]	@ (8024054 <handle_object+0x220>)
 8023f4e:	4618      	mov	r0, r3
 8023f50:	f7dc f9de 	bl	8000310 <strcmp>
 8023f54:	4603      	mov	r3, r0
 8023f56:	2b00      	cmp	r3, #0
 8023f58:	d10e      	bne.n	8023f78 <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 8023f5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023f5e:	68db      	ldr	r3, [r3, #12]
 8023f60:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8023f64:	4413      	add	r3, r2
 8023f66:	f107 0210 	add.w	r2, r7, #16
 8023f6a:	68b9      	ldr	r1, [r7, #8]
 8023f6c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8023f70:	c903      	ldmia	r1, {r0, r1}
 8023f72:	f7e9 fdac 	bl	800dace <mg_json_get_num>
 8023f76:	e01c      	b.n	8023fb2 <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 8023f78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023f7c:	685b      	ldr	r3, [r3, #4]
 8023f7e:	4936      	ldr	r1, [pc, #216]	@ (8024058 <handle_object+0x224>)
 8023f80:	4618      	mov	r0, r3
 8023f82:	f7dc f9c5 	bl	8000310 <strcmp>
 8023f86:	4603      	mov	r3, r0
 8023f88:	2b00      	cmp	r3, #0
 8023f8a:	d112      	bne.n	8023fb2 <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 8023f8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023f90:	68db      	ldr	r3, [r3, #12]
 8023f92:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8023f96:	18d0      	adds	r0, r2, r3
 8023f98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8023f9c:	691b      	ldr	r3, [r3, #16]
 8023f9e:	f107 0210 	add.w	r2, r7, #16
 8023fa2:	68b9      	ldr	r1, [r7, #8]
 8023fa4:	9300      	str	r3, [sp, #0]
 8023fa6:	4603      	mov	r3, r0
 8023fa8:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8023fac:	c903      	ldmia	r1, {r0, r1}
 8023fae:	f7ff f9c5 	bl	802333c <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8023fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8023fb6:	3301      	adds	r3, #1
 8023fb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8023fbc:	687b      	ldr	r3, [r7, #4]
 8023fbe:	6999      	ldr	r1, [r3, #24]
 8023fc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8023fc4:	4613      	mov	r3, r2
 8023fc6:	005b      	lsls	r3, r3, #1
 8023fc8:	4413      	add	r3, r2
 8023fca:	00db      	lsls	r3, r3, #3
 8023fcc:	440b      	add	r3, r1
 8023fce:	681b      	ldr	r3, [r3, #0]
 8023fd0:	2b00      	cmp	r3, #0
 8023fd2:	f47f af64 	bne.w	8023e9e <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 8023fd6:	687b      	ldr	r3, [r7, #4]
 8023fd8:	69db      	ldr	r3, [r3, #28]
 8023fda:	461a      	mov	r2, r3
 8023fdc:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8023fe0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8023fe4:	f001 fba8 	bl	8025738 <memcmp>
 8023fe8:	4603      	mov	r3, r0
 8023fea:	2b00      	cmp	r3, #0
 8023fec:	d004      	beq.n	8023ff8 <handle_object+0x1c4>
 8023fee:	4b1b      	ldr	r3, [pc, #108]	@ (802405c <handle_object+0x228>)
 8023ff0:	681b      	ldr	r3, [r3, #0]
 8023ff2:	3301      	adds	r3, #1
 8023ff4:	4a19      	ldr	r2, [pc, #100]	@ (802405c <handle_object+0x228>)
 8023ff6:	6013      	str	r3, [r2, #0]
    if (h->setter != NULL) h->setter(tmp);  // Can be NULL if readonly
 8023ff8:	687b      	ldr	r3, [r7, #4]
 8023ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8023ffc:	2b00      	cmp	r3, #0
 8023ffe:	d004      	beq.n	802400a <handle_object+0x1d6>
 8024000:	687b      	ldr	r3, [r7, #4]
 8024002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8024004:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8024008:	4798      	blx	r3
    free(tmp);
 802400a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 802400e:	f001 f807 	bl	8025020 <free>
    h->getter(data);  // Re-sync again after setting
 8024012:	687b      	ldr	r3, [r7, #4]
 8024014:	6a1b      	ldr	r3, [r3, #32]
 8024016:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 802401a:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h->attributes,
 802401c:	687b      	ldr	r3, [r7, #4]
 802401e:	699b      	ldr	r3, [r3, #24]
 8024020:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8024024:	9202      	str	r2, [sp, #8]
 8024026:	9301      	str	r3, [sp, #4]
 8024028:	4b0d      	ldr	r3, [pc, #52]	@ (8024060 <handle_object+0x22c>)
 802402a:	9300      	str	r3, [sp, #0]
 802402c:	4b0d      	ldr	r3, [pc, #52]	@ (8024064 <handle_object+0x230>)
 802402e:	4a0e      	ldr	r2, [pc, #56]	@ (8024068 <handle_object+0x234>)
 8024030:	21c8      	movs	r1, #200	@ 0xc8
 8024032:	68f8      	ldr	r0, [r7, #12]
 8024034:	f7e7 f8de 	bl	800b1f4 <mg_http_reply>
                data);
  free(data);
 8024038:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 802403c:	f000 fff0 	bl	8025020 <free>
}
 8024040:	bf00      	nop
 8024042:	3790      	adds	r7, #144	@ 0x90
 8024044:	46bd      	mov	sp, r7
 8024046:	bd80      	pop	{r7, pc}
 8024048:	08029698 	.word	0x08029698
 802404c:	08029244 	.word	0x08029244
 8024050:	08029280 	.word	0x08029280
 8024054:	080292fc 	.word	0x080292fc
 8024058:	08029270 	.word	0x08029270
 802405c:	2400548c 	.word	0x2400548c
 8024060:	08023c25 	.word	0x08023c25
 8024064:	080296a0 	.word	0x080296a0
 8024068:	08029624 	.word	0x08029624

0802406c <print_array>:

static size_t print_array(void (*out)(char, void *), void *ptr, va_list *ap) {
 802406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024070:	b093      	sub	sp, #76	@ 0x4c
 8024072:	af02      	add	r7, sp, #8
 8024074:	6178      	str	r0, [r7, #20]
 8024076:	6139      	str	r1, [r7, #16]
 8024078:	60fa      	str	r2, [r7, #12]
  struct apihandler_array *ha = va_arg(*ap, struct apihandler_array *);
 802407a:	68fb      	ldr	r3, [r7, #12]
 802407c:	681b      	ldr	r3, [r3, #0]
 802407e:	1d19      	adds	r1, r3, #4
 8024080:	68fa      	ldr	r2, [r7, #12]
 8024082:	6011      	str	r1, [r2, #0]
 8024084:	681b      	ldr	r3, [r3, #0]
 8024086:	637b      	str	r3, [r7, #52]	@ 0x34
  uint64_t size = *va_arg(*ap, uint64_t *);
 8024088:	68fb      	ldr	r3, [r7, #12]
 802408a:	681b      	ldr	r3, [r3, #0]
 802408c:	1d19      	adds	r1, r3, #4
 802408e:	68fa      	ldr	r2, [r7, #12]
 8024090:	6011      	str	r1, [r2, #0]
 8024092:	681b      	ldr	r3, [r3, #0]
 8024094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024098:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  uint64_t start = *va_arg(*ap, uint64_t *);
 802409c:	68fb      	ldr	r3, [r7, #12]
 802409e:	681b      	ldr	r3, [r3, #0]
 80240a0:	1d19      	adds	r1, r3, #4
 80240a2:	68fa      	ldr	r2, [r7, #12]
 80240a4:	6011      	str	r1, [r2, #0]
 80240a6:	681b      	ldr	r3, [r3, #0]
 80240a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i, max = 20, len = 0;
 80240b0:	2314      	movs	r3, #20
 80240b2:	61fb      	str	r3, [r7, #28]
 80240b4:	2300      	movs	r3, #0
 80240b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  void *data = calloc(1, ha->data_size);
 80240b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80240ba:	69db      	ldr	r3, [r3, #28]
 80240bc:	4619      	mov	r1, r3
 80240be:	2001      	movs	r0, #1
 80240c0:	f000 ff8a 	bl	8024fd8 <calloc>
 80240c4:	4603      	mov	r3, r0
 80240c6:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < max && start + i < size; i++) {
 80240c8:	2300      	movs	r3, #0
 80240ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80240cc:	e02f      	b.n	802412e <print_array+0xc2>
    ha->getter(start + i, data);
 80240ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80240d0:	6a1e      	ldr	r6, [r3, #32]
 80240d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80240d4:	2200      	movs	r2, #0
 80240d6:	469a      	mov	sl, r3
 80240d8:	4693      	mov	fp, r2
 80240da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80240de:	eb1a 0102 	adds.w	r1, sl, r2
 80240e2:	6039      	str	r1, [r7, #0]
 80240e4:	eb4b 0303 	adc.w	r3, fp, r3
 80240e8:	607b      	str	r3, [r7, #4]
 80240ea:	69ba      	ldr	r2, [r7, #24]
 80240ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80240f0:	47b0      	blx	r6
    if (i > 0) len += mg_xprintf(out, ptr, ",");
 80240f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d008      	beq.n	802410a <print_array+0x9e>
 80240f8:	4a1b      	ldr	r2, [pc, #108]	@ (8024168 <print_array+0xfc>)
 80240fa:	6939      	ldr	r1, [r7, #16]
 80240fc:	6978      	ldr	r0, [r7, #20]
 80240fe:	f7e4 ff70 	bl	8008fe2 <mg_xprintf>
 8024102:	4602      	mov	r2, r0
 8024104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024106:	4413      	add	r3, r2
 8024108:	63bb      	str	r3, [r7, #56]	@ 0x38
    len += mg_xprintf(out, ptr, "{%M}", print_struct, ha->attributes, data);
 802410a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802410c:	699b      	ldr	r3, [r3, #24]
 802410e:	69ba      	ldr	r2, [r7, #24]
 8024110:	9201      	str	r2, [sp, #4]
 8024112:	9300      	str	r3, [sp, #0]
 8024114:	4b15      	ldr	r3, [pc, #84]	@ (802416c <print_array+0x100>)
 8024116:	4a16      	ldr	r2, [pc, #88]	@ (8024170 <print_array+0x104>)
 8024118:	6939      	ldr	r1, [r7, #16]
 802411a:	6978      	ldr	r0, [r7, #20]
 802411c:	f7e4 ff61 	bl	8008fe2 <mg_xprintf>
 8024120:	4602      	mov	r2, r0
 8024122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8024124:	4413      	add	r3, r2
 8024126:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < max && start + i < size; i++) {
 8024128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802412a:	3301      	adds	r3, #1
 802412c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 802412e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8024130:	69fb      	ldr	r3, [r7, #28]
 8024132:	429a      	cmp	r2, r3
 8024134:	d20f      	bcs.n	8024156 <print_array+0xea>
 8024136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8024138:	2200      	movs	r2, #0
 802413a:	4698      	mov	r8, r3
 802413c:	4691      	mov	r9, r2
 802413e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8024142:	eb18 0402 	adds.w	r4, r8, r2
 8024146:	eb49 0503 	adc.w	r5, r9, r3
 802414a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 802414e:	4294      	cmp	r4, r2
 8024150:	eb75 0303 	sbcs.w	r3, r5, r3
 8024154:	d3bb      	bcc.n	80240ce <print_array+0x62>
  }
  free(data);
 8024156:	69b8      	ldr	r0, [r7, #24]
 8024158:	f000 ff62 	bl	8025020 <free>
  return len;
 802415c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 802415e:	4618      	mov	r0, r3
 8024160:	3744      	adds	r7, #68	@ 0x44
 8024162:	46bd      	mov	sp, r7
 8024164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024168:	08029678 	.word	0x08029678
 802416c:	08023c25 	.word	0x08023c25
 8024170:	080296a8 	.word	0x080296a8

08024174 <handle_array>:

static void handle_array(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler_array *h) {
 8024174:	b590      	push	{r4, r7, lr}
 8024176:	b0a9      	sub	sp, #164	@ 0xa4
 8024178:	af14      	add	r7, sp, #80	@ 0x50
 802417a:	60f8      	str	r0, [r7, #12]
 802417c:	60b9      	str	r1, [r7, #8]
 802417e:	607a      	str	r2, [r7, #4]
  char buf[40] = "";
 8024180:	f107 0320 	add.w	r3, r7, #32
 8024184:	2228      	movs	r2, #40	@ 0x28
 8024186:	2100      	movs	r1, #0
 8024188:	4618      	mov	r0, r3
 802418a:	f001 faff 	bl	802578c <memset>
  uint64_t size = h->sizer();
 802418e:	687b      	ldr	r3, [r7, #4]
 8024190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8024192:	4798      	blx	r3
 8024194:	4602      	mov	r2, r0
 8024196:	460b      	mov	r3, r1
 8024198:	e9c7 2306 	strd	r2, r3, [r7, #24]
  uint64_t start = 0;
 802419c:	f04f 0200 	mov.w	r2, #0
 80241a0:	f04f 0300 	mov.w	r3, #0
 80241a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_get_var(&hm->query, "start", buf, sizeof(buf));
 80241a8:	68bb      	ldr	r3, [r7, #8]
 80241aa:	f103 0010 	add.w	r0, r3, #16
 80241ae:	f107 0220 	add.w	r2, r7, #32
 80241b2:	2328      	movs	r3, #40	@ 0x28
 80241b4:	4927      	ldr	r1, [pc, #156]	@ (8024254 <handle_array+0xe0>)
 80241b6:	f7e5 fe3f 	bl	8009e38 <mg_http_get_var>
  if (!mg_str_to_num(mg_str(buf), 10, &start, sizeof(start))) start = 0;
 80241ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80241be:	f107 0220 	add.w	r2, r7, #32
 80241c2:	4611      	mov	r1, r2
 80241c4:	4618      	mov	r0, r3
 80241c6:	f7f1 fdc1 	bl	8015d4c <mg_str_s>
 80241ca:	f107 0310 	add.w	r3, r7, #16
 80241ce:	2208      	movs	r2, #8
 80241d0:	9200      	str	r2, [sp, #0]
 80241d2:	220a      	movs	r2, #10
 80241d4:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80241d8:	c903      	ldmia	r1, {r0, r1}
 80241da:	f7f2 f812 	bl	8016202 <mg_str_to_num>
 80241de:	4603      	mov	r3, r0
 80241e0:	f083 0301 	eor.w	r3, r3, #1
 80241e4:	b2db      	uxtb	r3, r3
 80241e6:	2b00      	cmp	r3, #0
 80241e8:	d005      	beq.n	80241f6 <handle_array+0x82>
 80241ea:	f04f 0200 	mov.w	r2, #0
 80241ee:	f04f 0300 	mov.w	r3, #0
 80241f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_reply(c, 200, JSON_HEADERS, "{%m:%llu, %m:%llu, %m:[%M]}\n",
 80241f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80241fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80241fe:	f107 0410 	add.w	r4, r7, #16
 8024202:	9412      	str	r4, [sp, #72]	@ 0x48
 8024204:	f107 0418 	add.w	r4, r7, #24
 8024208:	9411      	str	r4, [sp, #68]	@ 0x44
 802420a:	687c      	ldr	r4, [r7, #4]
 802420c:	9410      	str	r4, [sp, #64]	@ 0x40
 802420e:	4c12      	ldr	r4, [pc, #72]	@ (8024258 <handle_array+0xe4>)
 8024210:	940f      	str	r4, [sp, #60]	@ 0x3c
 8024212:	4c12      	ldr	r4, [pc, #72]	@ (802425c <handle_array+0xe8>)
 8024214:	940e      	str	r4, [sp, #56]	@ 0x38
 8024216:	2400      	movs	r4, #0
 8024218:	940d      	str	r4, [sp, #52]	@ 0x34
 802421a:	4c11      	ldr	r4, [pc, #68]	@ (8024260 <handle_array+0xec>)
 802421c:	940c      	str	r4, [sp, #48]	@ 0x30
 802421e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8024222:	490c      	ldr	r1, [pc, #48]	@ (8024254 <handle_array+0xe0>)
 8024224:	9108      	str	r1, [sp, #32]
 8024226:	2100      	movs	r1, #0
 8024228:	9107      	str	r1, [sp, #28]
 802422a:	490d      	ldr	r1, [pc, #52]	@ (8024260 <handle_array+0xec>)
 802422c:	9106      	str	r1, [sp, #24]
 802422e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8024232:	4b0c      	ldr	r3, [pc, #48]	@ (8024264 <handle_array+0xf0>)
 8024234:	9302      	str	r3, [sp, #8]
 8024236:	2300      	movs	r3, #0
 8024238:	9301      	str	r3, [sp, #4]
 802423a:	4b09      	ldr	r3, [pc, #36]	@ (8024260 <handle_array+0xec>)
 802423c:	9300      	str	r3, [sp, #0]
 802423e:	4b0a      	ldr	r3, [pc, #40]	@ (8024268 <handle_array+0xf4>)
 8024240:	4a0a      	ldr	r2, [pc, #40]	@ (802426c <handle_array+0xf8>)
 8024242:	21c8      	movs	r1, #200	@ 0xc8
 8024244:	68f8      	ldr	r0, [r7, #12]
 8024246:	f7e6 ffd5 	bl	800b1f4 <mg_http_reply>
                MG_ESC("size"), size, MG_ESC("start"), start, MG_ESC("data"),
                print_array, h, &size, &start);
}
 802424a:	bf00      	nop
 802424c:	3754      	adds	r7, #84	@ 0x54
 802424e:	46bd      	mov	sp, r7
 8024250:	bd90      	pop	{r4, r7, pc}
 8024252:	bf00      	nop
 8024254:	080296b0 	.word	0x080296b0
 8024258:	0802406d 	.word	0x0802406d
 802425c:	080293a0 	.word	0x080293a0
 8024260:	08012a4d 	.word	0x08012a4d
 8024264:	080296d8 	.word	0x080296d8
 8024268:	080296b8 	.word	0x080296b8
 802426c:	08029624 	.word	0x08029624

08024270 <handle_file>:
  }
  return len;
}

static void handle_file(struct mg_connection *c, struct mg_http_message *hm,
                        struct apihandler_file *hf) {
 8024270:	b580      	push	{r7, lr}
 8024272:	b09e      	sub	sp, #120	@ 0x78
 8024274:	af00      	add	r7, sp, #0
 8024276:	60f8      	str	r0, [r7, #12]
 8024278:	60b9      	str	r1, [r7, #8]
 802427a:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 802427c:	f107 0214 	add.w	r2, r7, #20
 8024280:	68b9      	ldr	r1, [r7, #8]
 8024282:	2364      	movs	r3, #100	@ 0x64
 8024284:	3108      	adds	r1, #8
 8024286:	c903      	ldmia	r1, {r0, r1}
 8024288:	f7ff fb62 	bl	8023950 <get_file_name_from_uri>
  hf->server(c, hm, path);
 802428c:	687b      	ldr	r3, [r7, #4]
 802428e:	69db      	ldr	r3, [r3, #28]
 8024290:	f107 0214 	add.w	r2, r7, #20
 8024294:	68b9      	ldr	r1, [r7, #8]
 8024296:	68f8      	ldr	r0, [r7, #12]
 8024298:	4798      	blx	r3
}
 802429a:	bf00      	nop
 802429c:	3778      	adds	r7, #120	@ 0x78
 802429e:	46bd      	mov	sp, r7
 80242a0:	bd80      	pop	{r7, pc}
	...

080242a4 <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 80242a4:	b580      	push	{r7, lr}
 80242a6:	b088      	sub	sp, #32
 80242a8:	af02      	add	r7, sp, #8
 80242aa:	60f8      	str	r0, [r7, #12]
 80242ac:	60b9      	str	r1, [r7, #8]
 80242ae:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0 || strcmp(h->type, "data") == 0) {
 80242b0:	687b      	ldr	r3, [r7, #4]
 80242b2:	685b      	ldr	r3, [r3, #4]
 80242b4:	4932      	ldr	r1, [pc, #200]	@ (8024380 <handle_api_call+0xdc>)
 80242b6:	4618      	mov	r0, r3
 80242b8:	f7dc f82a 	bl	8000310 <strcmp>
 80242bc:	4603      	mov	r3, r0
 80242be:	2b00      	cmp	r3, #0
 80242c0:	d008      	beq.n	80242d4 <handle_api_call+0x30>
 80242c2:	687b      	ldr	r3, [r7, #4]
 80242c4:	685b      	ldr	r3, [r3, #4]
 80242c6:	492f      	ldr	r1, [pc, #188]	@ (8024384 <handle_api_call+0xe0>)
 80242c8:	4618      	mov	r0, r3
 80242ca:	f7dc f821 	bl	8000310 <strcmp>
 80242ce:	4603      	mov	r3, r0
 80242d0:	2b00      	cmp	r3, #0
 80242d2:	d105      	bne.n	80242e0 <handle_api_call+0x3c>
    handle_object(c, hm, (struct apihandler_data *) h);
 80242d4:	687a      	ldr	r2, [r7, #4]
 80242d6:	68b9      	ldr	r1, [r7, #8]
 80242d8:	68f8      	ldr	r0, [r7, #12]
 80242da:	f7ff fdab 	bl	8023e34 <handle_object>
  } else if (strcmp(h->type, "custom") == 0) {
    ((struct apihandler_custom *) h)->reply(c, hm);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 80242de:	e04a      	b.n	8024376 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "array") == 0) {
 80242e0:	687b      	ldr	r3, [r7, #4]
 80242e2:	685b      	ldr	r3, [r3, #4]
 80242e4:	4928      	ldr	r1, [pc, #160]	@ (8024388 <handle_api_call+0xe4>)
 80242e6:	4618      	mov	r0, r3
 80242e8:	f7dc f812 	bl	8000310 <strcmp>
 80242ec:	4603      	mov	r3, r0
 80242ee:	2b00      	cmp	r3, #0
 80242f0:	d105      	bne.n	80242fe <handle_api_call+0x5a>
    handle_array(c, hm, (struct apihandler_array *) h);
 80242f2:	687a      	ldr	r2, [r7, #4]
 80242f4:	68b9      	ldr	r1, [r7, #8]
 80242f6:	68f8      	ldr	r0, [r7, #12]
 80242f8:	f7ff ff3c 	bl	8024174 <handle_array>
}
 80242fc:	e03b      	b.n	8024376 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "action") == 0) {
 80242fe:	687b      	ldr	r3, [r7, #4]
 8024300:	685b      	ldr	r3, [r3, #4]
 8024302:	4922      	ldr	r1, [pc, #136]	@ (802438c <handle_api_call+0xe8>)
 8024304:	4618      	mov	r0, r3
 8024306:	f7dc f803 	bl	8000310 <strcmp>
 802430a:	4603      	mov	r3, r0
 802430c:	2b00      	cmp	r3, #0
 802430e:	d10a      	bne.n	8024326 <handle_api_call+0x82>
    struct apihandler_action *ha = (struct apihandler_action *) h;
 8024310:	687b      	ldr	r3, [r7, #4]
 8024312:	617b      	str	r3, [r7, #20]
    handle_action(c, hm, ha->checker, ha->starter);
 8024314:	697b      	ldr	r3, [r7, #20]
 8024316:	699a      	ldr	r2, [r3, #24]
 8024318:	697b      	ldr	r3, [r7, #20]
 802431a:	69db      	ldr	r3, [r3, #28]
 802431c:	68b9      	ldr	r1, [r7, #8]
 802431e:	68f8      	ldr	r0, [r7, #12]
 8024320:	f7ff fc3c 	bl	8023b9c <handle_action>
}
 8024324:	e027      	b.n	8024376 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "file") == 0) {
 8024326:	687b      	ldr	r3, [r7, #4]
 8024328:	685b      	ldr	r3, [r3, #4]
 802432a:	4919      	ldr	r1, [pc, #100]	@ (8024390 <handle_api_call+0xec>)
 802432c:	4618      	mov	r0, r3
 802432e:	f7db ffef 	bl	8000310 <strcmp>
 8024332:	4603      	mov	r3, r0
 8024334:	2b00      	cmp	r3, #0
 8024336:	d105      	bne.n	8024344 <handle_api_call+0xa0>
    handle_file(c, hm, (struct apihandler_file *) h);
 8024338:	687a      	ldr	r2, [r7, #4]
 802433a:	68b9      	ldr	r1, [r7, #8]
 802433c:	68f8      	ldr	r0, [r7, #12]
 802433e:	f7ff ff97 	bl	8024270 <handle_file>
}
 8024342:	e018      	b.n	8024376 <handle_api_call+0xd2>
  } else if (strcmp(h->type, "custom") == 0) {
 8024344:	687b      	ldr	r3, [r7, #4]
 8024346:	685b      	ldr	r3, [r3, #4]
 8024348:	4912      	ldr	r1, [pc, #72]	@ (8024394 <handle_api_call+0xf0>)
 802434a:	4618      	mov	r0, r3
 802434c:	f7db ffe0 	bl	8000310 <strcmp>
 8024350:	4603      	mov	r3, r0
 8024352:	2b00      	cmp	r3, #0
 8024354:	d105      	bne.n	8024362 <handle_api_call+0xbe>
    ((struct apihandler_custom *) h)->reply(c, hm);
 8024356:	687b      	ldr	r3, [r7, #4]
 8024358:	699b      	ldr	r3, [r3, #24]
 802435a:	68b9      	ldr	r1, [r7, #8]
 802435c:	68f8      	ldr	r0, [r7, #12]
 802435e:	4798      	blx	r3
}
 8024360:	e009      	b.n	8024376 <handle_api_call+0xd2>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 8024362:	687b      	ldr	r3, [r7, #4]
 8024364:	685b      	ldr	r3, [r3, #4]
 8024366:	9300      	str	r3, [sp, #0]
 8024368:	4b0b      	ldr	r3, [pc, #44]	@ (8024398 <handle_api_call+0xf4>)
 802436a:	4a0c      	ldr	r2, [pc, #48]	@ (802439c <handle_api_call+0xf8>)
 802436c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8024370:	68f8      	ldr	r0, [r7, #12]
 8024372:	f7e6 ff3f 	bl	800b1f4 <mg_http_reply>
}
 8024376:	bf00      	nop
 8024378:	3718      	adds	r7, #24
 802437a:	46bd      	mov	sp, r7
 802437c:	bd80      	pop	{r7, pc}
 802437e:	bf00      	nop
 8024380:	080296ec 	.word	0x080296ec
 8024384:	080293a0 	.word	0x080293a0
 8024388:	080296f4 	.word	0x080296f4
 802438c:	08029348 	.word	0x08029348
 8024390:	0802942c 	.word	0x0802942c
 8024394:	08029390 	.word	0x08029390
 8024398:	080296fc 	.word	0x080296fc
 802439c:	08029624 	.word	0x08029624

080243a0 <glue_update_state>:

void glue_update_state(void) {
 80243a0:	b480      	push	{r7}
 80243a2:	af00      	add	r7, sp, #0
  s_device_change_version++;
 80243a4:	4b04      	ldr	r3, [pc, #16]	@ (80243b8 <glue_update_state+0x18>)
 80243a6:	681b      	ldr	r3, [r3, #0]
 80243a8:	3301      	adds	r3, #1
 80243aa:	4a03      	ldr	r2, [pc, #12]	@ (80243b8 <glue_update_state+0x18>)
 80243ac:	6013      	str	r3, [r2, #0]
}
 80243ae:	bf00      	nop
 80243b0:	46bd      	mov	sp, r7
 80243b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243b6:	4770      	bx	lr
 80243b8:	2400548c 	.word	0x2400548c

080243bc <http_ev_handler>:

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 80243bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80243be:	b0b5      	sub	sp, #212	@ 0xd4
 80243c0:	af06      	add	r7, sp, #24
 80243c2:	61f8      	str	r0, [r7, #28]
 80243c4:	61b9      	str	r1, [r7, #24]
 80243c6:	617a      	str	r2, [r7, #20]
  if (ev == MG_EV_HTTP_HDRS && c->data[0] == 0) {
 80243c8:	69bb      	ldr	r3, [r7, #24]
 80243ca:	2b0a      	cmp	r3, #10
 80243cc:	d164      	bne.n	8024498 <http_ev_handler+0xdc>
 80243ce:	69fb      	ldr	r3, [r7, #28]
 80243d0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80243d4:	2b00      	cmp	r3, #0
 80243d6:	d15f      	bne.n	8024498 <http_ev_handler+0xdc>
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80243d8:	697b      	ldr	r3, [r7, #20]
 80243da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 80243de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80243e2:	49b4      	ldr	r1, [pc, #720]	@ (80246b4 <http_ev_handler+0x2f8>)
 80243e4:	4618      	mov	r0, r3
 80243e6:	f7f1 fcb1 	bl	8015d4c <mg_str_s>
 80243ea:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80243ee:	2300      	movs	r3, #0
 80243f0:	9300      	str	r3, [sp, #0]
 80243f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80243f6:	cb0c      	ldmia	r3, {r2, r3}
 80243f8:	3108      	adds	r1, #8
 80243fa:	c903      	ldmia	r1, {r0, r1}
 80243fc:	f7f1 fdb0 	bl	8015f60 <mg_match>
 8024400:	4603      	mov	r3, r0
 8024402:	2b00      	cmp	r3, #0
 8024404:	d113      	bne.n	802442e <http_ev_handler+0x72>
        mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 8024406:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 802440a:	49ab      	ldr	r1, [pc, #684]	@ (80246b8 <http_ev_handler+0x2fc>)
 802440c:	4618      	mov	r0, r3
 802440e:	f7f1 fc9d 	bl	8015d4c <mg_str_s>
 8024412:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8024416:	2300      	movs	r3, #0
 8024418:	9300      	str	r3, [sp, #0]
 802441a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 802441e:	cb0c      	ldmia	r3, {r2, r3}
 8024420:	3108      	adds	r1, #8
 8024422:	c903      	ldmia	r1, {r0, r1}
 8024424:	f7f1 fd9c 	bl	8015f60 <mg_match>
 8024428:	4603      	mov	r3, r0
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 802442a:	2b00      	cmp	r3, #0
 802442c:	d034      	beq.n	8024498 <http_ev_handler+0xdc>
      struct apihandler *h = find_handler(hm);
 802442e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 8024432:	f7fe ff57 	bl	80232e4 <find_handler>
 8024436:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
      struct user *u = authenticate(hm);
 802443a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 802443e:	f7fe ffa9 	bl	8023394 <authenticate>
 8024442:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
      if ((u == NULL ||
 8024446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802444a:	2b00      	cmp	r3, #0
 802444c:	d019      	beq.n	8024482 <http_ev_handler+0xc6>
 802444e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8024452:	2b00      	cmp	r3, #0
 8024454:	d020      	beq.n	8024498 <http_ev_handler+0xdc>
           (h != NULL && (u->level < h->read_level ||
 8024456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802445a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802445c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8024460:	68db      	ldr	r3, [r3, #12]
 8024462:	429a      	cmp	r2, r3
 8024464:	db0d      	blt.n	8024482 <http_ev_handler+0xc6>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8024466:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 802446a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
           (h != NULL && (u->level < h->read_level ||
 802446e:	2b00      	cmp	r3, #0
 8024470:	d012      	beq.n	8024498 <http_ev_handler+0xdc>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 8024472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8024476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8024478:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 802447c:	691b      	ldr	r3, [r3, #16]
 802447e:	429a      	cmp	r2, r3
 8024480:	da0a      	bge.n	8024498 <http_ev_handler+0xdc>
        mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 8024482:	4b8e      	ldr	r3, [pc, #568]	@ (80246bc <http_ev_handler+0x300>)
 8024484:	4a8e      	ldr	r2, [pc, #568]	@ (80246c0 <http_ev_handler+0x304>)
 8024486:	f240 1193 	movw	r1, #403	@ 0x193
 802448a:	69f8      	ldr	r0, [r7, #28]
 802448c:	f7e6 feb2 	bl	800b1f4 <mg_http_reply>
        c->data[0] = 'Z';  // Mark this connection as handled
 8024490:	69fb      	ldr	r3, [r7, #28]
 8024492:	225a      	movs	r2, #90	@ 0x5a
 8024494:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    }
#endif
  }

  // We're checking c->is_websocket cause WS connection use c->data
  if (c->is_websocket == 0) handle_uploads(c, ev, ev_data);
 8024498:	69fb      	ldr	r3, [r7, #28]
 802449a:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 802449e:	f003 0302 	and.w	r3, r3, #2
 80244a2:	b2db      	uxtb	r3, r3
 80244a4:	2b00      	cmp	r3, #0
 80244a6:	d104      	bne.n	80244b2 <http_ev_handler+0xf6>
 80244a8:	697a      	ldr	r2, [r7, #20]
 80244aa:	69b9      	ldr	r1, [r7, #24]
 80244ac:	69f8      	ldr	r0, [r7, #28]
 80244ae:	f7ff fb03 	bl	8023ab8 <handle_uploads>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 80244b2:	69bb      	ldr	r3, [r7, #24]
 80244b4:	2b02      	cmp	r3, #2
 80244b6:	d128      	bne.n	802450a <http_ev_handler+0x14e>
 80244b8:	69fb      	ldr	r3, [r7, #28]
 80244ba:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80244be:	f003 0302 	and.w	r3, r3, #2
 80244c2:	b2db      	uxtb	r3, r3
 80244c4:	2b00      	cmp	r3, #0
 80244c6:	d120      	bne.n	802450a <http_ev_handler+0x14e>
 80244c8:	69fb      	ldr	r3, [r7, #28]
 80244ca:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80244ce:	2b41      	cmp	r3, #65	@ 0x41
 80244d0:	d11b      	bne.n	802450a <http_ev_handler+0x14e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 80244d2:	69fb      	ldr	r3, [r7, #28]
 80244d4:	3388      	adds	r3, #136	@ 0x88
 80244d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (as->fn() == false) {
 80244da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80244de:	685b      	ldr	r3, [r3, #4]
 80244e0:	4798      	blx	r3
 80244e2:	4603      	mov	r3, r0
 80244e4:	f083 0301 	eor.w	r3, r3, #1
 80244e8:	b2db      	uxtb	r3, r3
 80244ea:	2b00      	cmp	r3, #0
 80244ec:	f000 813b 	beq.w	8024766 <http_ev_handler+0x3aa>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 80244f0:	4b74      	ldr	r3, [pc, #464]	@ (80246c4 <http_ev_handler+0x308>)
 80244f2:	4a73      	ldr	r2, [pc, #460]	@ (80246c0 <http_ev_handler+0x304>)
 80244f4:	21c8      	movs	r1, #200	@ 0xc8
 80244f6:	69f8      	ldr	r0, [r7, #28]
 80244f8:	f7e6 fe7c 	bl	800b1f4 <mg_http_reply>
      memset(as, 0, sizeof(*as));
 80244fc:	2208      	movs	r2, #8
 80244fe:	2100      	movs	r1, #0
 8024500:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 8024504:	f001 f942 	bl	802578c <memset>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8024508:	e12d      	b.n	8024766 <http_ev_handler+0x3aa>
    }
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802450a:	69bb      	ldr	r3, [r7, #24]
 802450c:	2b0b      	cmp	r3, #11
 802450e:	f040 80f3 	bne.w	80246f8 <http_ev_handler+0x33c>
 8024512:	69fb      	ldr	r3, [r7, #28]
 8024514:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8024518:	f003 0302 	and.w	r3, r3, #2
 802451c:	b2db      	uxtb	r3, r3
 802451e:	2b00      	cmp	r3, #0
 8024520:	f040 80ea 	bne.w	80246f8 <http_ev_handler+0x33c>
 8024524:	69fb      	ldr	r3, [r7, #28]
 8024526:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 802452a:	2b00      	cmp	r3, #0
 802452c:	f040 80e4 	bne.w	80246f8 <http_ev_handler+0x33c>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8024530:	697b      	ldr	r3, [r7, #20]
 8024532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
#if WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    struct apihandler *h = find_handler(hm);
 8024536:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 802453a:	f7fe fed3 	bl	80232e4 <find_handler>
 802453e:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 8024542:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8024546:	f7fe ff25 	bl	8023394 <authenticate>
 802454a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 802454e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8024552:	495d      	ldr	r1, [pc, #372]	@ (80246c8 <http_ev_handler+0x30c>)
 8024554:	4618      	mov	r0, r3
 8024556:	f7f1 fbf9 	bl	8015d4c <mg_str_s>
 802455a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802455e:	2300      	movs	r3, #0
 8024560:	9300      	str	r3, [sp, #0]
 8024562:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8024566:	cb0c      	ldmia	r3, {r2, r3}
 8024568:	3108      	adds	r1, #8
 802456a:	c903      	ldmia	r1, {r0, r1}
 802456c:	f7f1 fcf8 	bl	8015f60 <mg_match>
 8024570:	4603      	mov	r3, r0
 8024572:	2b00      	cmp	r3, #0
 8024574:	d005      	beq.n	8024582 <http_ev_handler+0x1c6>
      handle_login(c, u);
 8024576:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 802457a:	69f8      	ldr	r0, [r7, #28]
 802457c:	f7fe ffee 	bl	802355c <handle_login>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8024580:	e0f3      	b.n	802476a <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 8024582:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8024586:	4951      	ldr	r1, [pc, #324]	@ (80246cc <http_ev_handler+0x310>)
 8024588:	4618      	mov	r0, r3
 802458a:	f7f1 fbdf 	bl	8015d4c <mg_str_s>
 802458e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8024592:	2300      	movs	r3, #0
 8024594:	9300      	str	r3, [sp, #0]
 8024596:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 802459a:	cb0c      	ldmia	r3, {r2, r3}
 802459c:	3108      	adds	r1, #8
 802459e:	c903      	ldmia	r1, {r0, r1}
 80245a0:	f7f1 fcde 	bl	8015f60 <mg_match>
 80245a4:	4603      	mov	r3, r0
 80245a6:	2b00      	cmp	r3, #0
 80245a8:	d003      	beq.n	80245b2 <http_ev_handler+0x1f6>
      handle_logout(c);
 80245aa:	69f8      	ldr	r0, [r7, #28]
 80245ac:	f7ff f844 	bl	8023638 <handle_logout>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80245b0:	e0db      	b.n	802476a <http_ev_handler+0x3ae>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 80245b2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80245b6:	4946      	ldr	r1, [pc, #280]	@ (80246d0 <http_ev_handler+0x314>)
 80245b8:	4618      	mov	r0, r3
 80245ba:	f7f1 fbc7 	bl	8015d4c <mg_str_s>
 80245be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80245c2:	2300      	movs	r3, #0
 80245c4:	9300      	str	r3, [sp, #0]
 80245c6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80245ca:	cb0c      	ldmia	r3, {r2, r3}
 80245cc:	3108      	adds	r1, #8
 80245ce:	c903      	ldmia	r1, {r0, r1}
 80245d0:	f7f1 fcc6 	bl	8015f60 <mg_match>
 80245d4:	4603      	mov	r3, r0
 80245d6:	2b00      	cmp	r3, #0
 80245d8:	d006      	beq.n	80245e8 <http_ev_handler+0x22c>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 80245da:	4b3e      	ldr	r3, [pc, #248]	@ (80246d4 <http_ev_handler+0x318>)
 80245dc:	4a38      	ldr	r2, [pc, #224]	@ (80246c0 <http_ev_handler+0x304>)
 80245de:	21c8      	movs	r1, #200	@ 0xc8
 80245e0:	69f8      	ldr	r0, [r7, #28]
 80245e2:	f7e6 fe07 	bl	800b1f4 <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80245e6:	e0c0      	b.n	802476a <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 80245e8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80245ec:	4932      	ldr	r1, [pc, #200]	@ (80246b8 <http_ev_handler+0x2fc>)
 80245ee:	4618      	mov	r0, r3
 80245f0:	f7f1 fbac 	bl	8015d4c <mg_str_s>
 80245f4:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80245f8:	2300      	movs	r3, #0
 80245fa:	9300      	str	r3, [sp, #0]
 80245fc:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8024600:	cb0c      	ldmia	r3, {r2, r3}
 8024602:	3108      	adds	r1, #8
 8024604:	c903      	ldmia	r1, {r0, r1}
 8024606:	f7f1 fcab 	bl	8015f60 <mg_match>
 802460a:	4603      	mov	r3, r0
 802460c:	2b00      	cmp	r3, #0
 802460e:	d006      	beq.n	802461e <http_ev_handler+0x262>
      mg_ws_upgrade(c, hm, NULL);
 8024610:	2200      	movs	r2, #0
 8024612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8024616:	69f8      	ldr	r0, [r7, #28]
 8024618:	f7fd fac6 	bl	8021ba8 <mg_ws_upgrade>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802461c:	e0a5      	b.n	802476a <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 802461e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8024622:	492d      	ldr	r1, [pc, #180]	@ (80246d8 <http_ev_handler+0x31c>)
 8024624:	4618      	mov	r0, r3
 8024626:	f7f1 fb91 	bl	8015d4c <mg_str_s>
 802462a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802462e:	2300      	movs	r3, #0
 8024630:	9300      	str	r3, [sp, #0]
 8024632:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8024636:	cb0c      	ldmia	r3, {r2, r3}
 8024638:	3108      	adds	r1, #8
 802463a:	c903      	ldmia	r1, {r0, r1}
 802463c:	f7f1 fc90 	bl	8015f60 <mg_match>
 8024640:	4603      	mov	r3, r0
 8024642:	2b00      	cmp	r3, #0
 8024644:	d00f      	beq.n	8024666 <http_ev_handler+0x2aa>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 8024646:	4b25      	ldr	r3, [pc, #148]	@ (80246dc <http_ev_handler+0x320>)
 8024648:	681b      	ldr	r3, [r3, #0]
 802464a:	9303      	str	r3, [sp, #12]
 802464c:	4b24      	ldr	r3, [pc, #144]	@ (80246e0 <http_ev_handler+0x324>)
 802464e:	9302      	str	r3, [sp, #8]
 8024650:	2300      	movs	r3, #0
 8024652:	9301      	str	r3, [sp, #4]
 8024654:	4b23      	ldr	r3, [pc, #140]	@ (80246e4 <http_ev_handler+0x328>)
 8024656:	9300      	str	r3, [sp, #0]
 8024658:	4b23      	ldr	r3, [pc, #140]	@ (80246e8 <http_ev_handler+0x32c>)
 802465a:	4a19      	ldr	r2, [pc, #100]	@ (80246c0 <http_ev_handler+0x304>)
 802465c:	21c8      	movs	r1, #200	@ 0xc8
 802465e:	69f8      	ldr	r0, [r7, #28]
 8024660:	f7e6 fdc8 	bl	800b1f4 <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8024664:	e081      	b.n	802476a <http_ev_handler+0x3ae>
                    s_device_change_version);
    } else if (h != NULL) {
 8024666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 802466a:	2b00      	cmp	r3, #0
 802466c:	d007      	beq.n	802467e <http_ev_handler+0x2c2>
      handle_api_call(c, hm, h);
 802466e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8024672:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8024676:	69f8      	ldr	r0, [r7, #28]
 8024678:	f7ff fe14 	bl	80242a4 <handle_api_call>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802467c:	e075      	b.n	802476a <http_ev_handler+0x3ae>
    } else if (c->data[0] == 0)
 802467e:	69fb      	ldr	r3, [r7, #28]
 8024680:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8024684:	2b00      	cmp	r3, #0
 8024686:	d170      	bne.n	802476a <http_ev_handler+0x3ae>
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    {
#if WIZARD_ENABLE_HTTP_UI
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 8024688:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802468c:	2218      	movs	r2, #24
 802468e:	2100      	movs	r1, #0
 8024690:	4618      	mov	r0, r3
 8024692:	f001 f87b 	bl	802578c <memset>
      opts.root_dir = "/web_root/";
 8024696:	4b15      	ldr	r3, [pc, #84]	@ (80246ec <http_ev_handler+0x330>)
 8024698:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 802469a:	4b15      	ldr	r3, [pc, #84]	@ (80246f0 <http_ev_handler+0x334>)
 802469c:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 802469e:	4b15      	ldr	r3, [pc, #84]	@ (80246f4 <http_ev_handler+0x338>)
 80246a0:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 80246a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80246a6:	461a      	mov	r2, r3
 80246a8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80246ac:	69f8      	ldr	r0, [r7, #28]
 80246ae:	f7e7 fcb3 	bl	800c018 <mg_http_serve_dir>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80246b2:	e05a      	b.n	802476a <http_ev_handler+0x3ae>
 80246b4:	08029714 	.word	0x08029714
 80246b8:	0802971c 	.word	0x0802971c
 80246bc:	08029728 	.word	0x08029728
 80246c0:	08029624 	.word	0x08029624
 80246c4:	08029670 	.word	0x08029670
 80246c8:	08029738 	.word	0x08029738
 80246cc:	08029744 	.word	0x08029744
 80246d0:	08029750 	.word	0x08029750
 80246d4:	08029758 	.word	0x08029758
 80246d8:	08029760 	.word	0x08029760
 80246dc:	2400548c 	.word	0x2400548c
 80246e0:	08029268 	.word	0x08029268
 80246e4:	08012a4d 	.word	0x08012a4d
 80246e8:	08029770 	.word	0x08029770
 80246ec:	0802977c 	.word	0x0802977c
 80246f0:	24000010 	.word	0x24000010
 80246f4:	08029788 	.word	0x08029788
#else
      mg_http_reply(c, 200, "", ":)\n");
#endif  // WIZARD_ENABLE_HTTP_UI
    }
  } else if (ev == MG_EV_WS_MSG || ev == MG_EV_WS_CTL) {
 80246f8:	69bb      	ldr	r3, [r7, #24]
 80246fa:	2b0d      	cmp	r3, #13
 80246fc:	d036      	beq.n	802476c <http_ev_handler+0x3b0>
 80246fe:	69bb      	ldr	r3, [r7, #24]
 8024700:	2b0e      	cmp	r3, #14
 8024702:	d033      	beq.n	802476c <http_ev_handler+0x3b0>
    // Ignore received data
  } else if (ev == MG_EV_ACCEPT) {
 8024704:	69bb      	ldr	r3, [r7, #24]
 8024706:	2b05      	cmp	r3, #5
 8024708:	d130      	bne.n	802476c <http_ev_handler+0x3b0>
    if (c->fn_data != NULL) {  // TLS listener
 802470a:	69fb      	ldr	r3, [r7, #28]
 802470c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 802470e:	2b00      	cmp	r3, #0
 8024710:	d02c      	beq.n	802476c <http_ev_handler+0x3b0>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 8024712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8024716:	2224      	movs	r2, #36	@ 0x24
 8024718:	2100      	movs	r1, #0
 802471a:	4618      	mov	r0, r3
 802471c:	f001 f836 	bl	802578c <memset>
      opts.cert = mg_str(TLS_CERT);
 8024720:	f107 0308 	add.w	r3, r7, #8
 8024724:	493a      	ldr	r1, [pc, #232]	@ (8024810 <http_ev_handler+0x454>)
 8024726:	4618      	mov	r0, r3
 8024728:	f7f1 fb10 	bl	8015d4c <mg_str_s>
 802472c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8024730:	f107 0208 	add.w	r2, r7, #8
 8024734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024738:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 802473c:	f107 0308 	add.w	r3, r7, #8
 8024740:	4934      	ldr	r1, [pc, #208]	@ (8024814 <http_ev_handler+0x458>)
 8024742:	4618      	mov	r0, r3
 8024744:	f7f1 fb02 	bl	8015d4c <mg_str_s>
 8024748:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 802474c:	f107 0208 	add.w	r2, r7, #8
 8024750:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024754:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 8024758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 802475c:	4619      	mov	r1, r3
 802475e:	69f8      	ldr	r0, [r7, #28]
 8024760:	f7f5 fe94 	bl	801a48c <mg_tls_init>
 8024764:	e002      	b.n	802476c <http_ev_handler+0x3b0>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 8024766:	bf00      	nop
 8024768:	e000      	b.n	802476c <http_ev_handler+0x3b0>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802476a:	bf00      	nop
    }
  }

  if (ev == MG_EV_HTTP_MSG) {
 802476c:	69bb      	ldr	r3, [r7, #24]
 802476e:	2b0b      	cmp	r3, #11
 8024770:	d149      	bne.n	8024806 <http_ev_handler+0x44a>
    // Show this request
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8024772:	697b      	ldr	r3, [r7, #20]
 8024774:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s %lu", c->id, hm->method.len,
 8024778:	4b27      	ldr	r3, [pc, #156]	@ (8024818 <http_ev_handler+0x45c>)
 802477a:	681b      	ldr	r3, [r3, #0]
 802477c:	2b02      	cmp	r3, #2
 802477e:	dd32      	ble.n	80247e6 <http_ev_handler+0x42a>
 8024780:	4b26      	ldr	r3, [pc, #152]	@ (802481c <http_ev_handler+0x460>)
 8024782:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 8024786:	4926      	ldr	r1, [pc, #152]	@ (8024820 <http_ev_handler+0x464>)
 8024788:	2003      	movs	r0, #3
 802478a:	f7e9 fadf 	bl	800dd4c <mg_log_prefix>
 802478e:	69fb      	ldr	r3, [r7, #28]
 8024790:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8024792:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8024796:	685b      	ldr	r3, [r3, #4]
 8024798:	607b      	str	r3, [r7, #4]
 802479a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 802479e:	681b      	ldr	r3, [r3, #0]
 80247a0:	603b      	str	r3, [r7, #0]
 80247a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80247a6:	68db      	ldr	r3, [r3, #12]
 80247a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80247ac:	6892      	ldr	r2, [r2, #8]
 80247ae:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80247b2:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 80247b6:	69f8      	ldr	r0, [r7, #28]
 80247b8:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 80247ba:	280f      	cmp	r0, #15
 80247bc:	d901      	bls.n	80247c2 <http_ev_handler+0x406>
 80247be:	2003      	movs	r0, #3
 80247c0:	e000      	b.n	80247c4 <http_ev_handler+0x408>
 80247c2:	2000      	movs	r0, #0
 80247c4:	69fc      	ldr	r4, [r7, #28]
 80247c6:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 80247c8:	3409      	adds	r4, #9
 80247ca:	69fd      	ldr	r5, [r7, #28]
 80247cc:	6d2d      	ldr	r5, [r5, #80]	@ 0x50
 80247ce:	9505      	str	r5, [sp, #20]
 80247d0:	9404      	str	r4, [sp, #16]
 80247d2:	9003      	str	r0, [sp, #12]
 80247d4:	9102      	str	r1, [sp, #8]
 80247d6:	9201      	str	r2, [sp, #4]
 80247d8:	9300      	str	r3, [sp, #0]
 80247da:	683b      	ldr	r3, [r7, #0]
 80247dc:	687a      	ldr	r2, [r7, #4]
 80247de:	4631      	mov	r1, r6
 80247e0:	4810      	ldr	r0, [pc, #64]	@ (8024824 <http_ev_handler+0x468>)
 80247e2:	f7e9 fb03 	bl	800ddec <mg_log>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9], c->send.len));
    if (c->data[0] == 'Z') {
 80247e6:	69fb      	ldr	r3, [r7, #28]
 80247e8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80247ec:	2b5a      	cmp	r3, #90	@ 0x5a
 80247ee:	d10a      	bne.n	8024806 <http_ev_handler+0x44a>
      c->data[0] = 0;
 80247f0:	69fb      	ldr	r3, [r7, #28]
 80247f2:	2200      	movs	r2, #0
 80247f4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      c->is_resp = 0;
 80247f8:	69fa      	ldr	r2, [r7, #28]
 80247fa:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80247fe:	f023 0301 	bic.w	r3, r3, #1
 8024802:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    }
  }
}
 8024806:	bf00      	nop
 8024808:	37bc      	adds	r7, #188	@ 0xbc
 802480a:	46bd      	mov	sp, r7
 802480c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802480e:	bf00      	nop
 8024810:	080297a4 	.word	0x080297a4
 8024814:	08029980 	.word	0x08029980
 8024818:	24000258 	.word	0x24000258
 802481c:	080376dc 	.word	0x080376dc
 8024820:	080293f8 	.word	0x080293f8
 8024824:	08029a64 	.word	0x08029a64

08024828 <mongoose_add_ws_handler>:
static struct ws_handler
    s_ws_handlers[sizeof(((struct mg_connection *) 0)->data) /
                  sizeof(struct ws_handler)];
static size_t s_ws_handlers_count;

void mongoose_add_ws_handler(unsigned ms, void (*fn)(struct mg_connection *)) {
 8024828:	b580      	push	{r7, lr}
 802482a:	b084      	sub	sp, #16
 802482c:	af00      	add	r7, sp, #0
 802482e:	6078      	str	r0, [r7, #4]
 8024830:	6039      	str	r1, [r7, #0]
  size_t max = sizeof(s_ws_handlers) / sizeof(s_ws_handlers[0]);
 8024832:	2304      	movs	r3, #4
 8024834:	60fb      	str	r3, [r7, #12]
  if (s_ws_handlers_count >= max) {
 8024836:	4b15      	ldr	r3, [pc, #84]	@ (802488c <mongoose_add_ws_handler+0x64>)
 8024838:	681b      	ldr	r3, [r3, #0]
 802483a:	68fa      	ldr	r2, [r7, #12]
 802483c:	429a      	cmp	r2, r3
 802483e:	d80f      	bhi.n	8024860 <mongoose_add_ws_handler+0x38>
    MG_ERROR(("WS handlers limit exceeded, max %lu", max));
 8024840:	4b13      	ldr	r3, [pc, #76]	@ (8024890 <mongoose_add_ws_handler+0x68>)
 8024842:	681b      	ldr	r3, [r3, #0]
 8024844:	2b00      	cmp	r3, #0
 8024846:	dd1d      	ble.n	8024884 <mongoose_add_ws_handler+0x5c>
 8024848:	4b12      	ldr	r3, [pc, #72]	@ (8024894 <mongoose_add_ws_handler+0x6c>)
 802484a:	f240 22bb 	movw	r2, #699	@ 0x2bb
 802484e:	4912      	ldr	r1, [pc, #72]	@ (8024898 <mongoose_add_ws_handler+0x70>)
 8024850:	2001      	movs	r0, #1
 8024852:	f7e9 fa7b 	bl	800dd4c <mg_log_prefix>
 8024856:	68f9      	ldr	r1, [r7, #12]
 8024858:	4810      	ldr	r0, [pc, #64]	@ (802489c <mongoose_add_ws_handler+0x74>)
 802485a:	f7e9 fac7 	bl	800ddec <mg_log>
  } else {
    s_ws_handlers[s_ws_handlers_count].timeout_ms = ms;
    s_ws_handlers[s_ws_handlers_count].fn = fn;
    s_ws_handlers_count++;
  }
};
 802485e:	e011      	b.n	8024884 <mongoose_add_ws_handler+0x5c>
    s_ws_handlers[s_ws_handlers_count].timeout_ms = ms;
 8024860:	4b0a      	ldr	r3, [pc, #40]	@ (802488c <mongoose_add_ws_handler+0x64>)
 8024862:	681b      	ldr	r3, [r3, #0]
 8024864:	490e      	ldr	r1, [pc, #56]	@ (80248a0 <mongoose_add_ws_handler+0x78>)
 8024866:	687a      	ldr	r2, [r7, #4]
 8024868:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    s_ws_handlers[s_ws_handlers_count].fn = fn;
 802486c:	4b07      	ldr	r3, [pc, #28]	@ (802488c <mongoose_add_ws_handler+0x64>)
 802486e:	681b      	ldr	r3, [r3, #0]
 8024870:	4a0b      	ldr	r2, [pc, #44]	@ (80248a0 <mongoose_add_ws_handler+0x78>)
 8024872:	00db      	lsls	r3, r3, #3
 8024874:	4413      	add	r3, r2
 8024876:	683a      	ldr	r2, [r7, #0]
 8024878:	605a      	str	r2, [r3, #4]
    s_ws_handlers_count++;
 802487a:	4b04      	ldr	r3, [pc, #16]	@ (802488c <mongoose_add_ws_handler+0x64>)
 802487c:	681b      	ldr	r3, [r3, #0]
 802487e:	3301      	adds	r3, #1
 8024880:	4a02      	ldr	r2, [pc, #8]	@ (802488c <mongoose_add_ws_handler+0x64>)
 8024882:	6013      	str	r3, [r2, #0]
};
 8024884:	bf00      	nop
 8024886:	3710      	adds	r7, #16
 8024888:	46bd      	mov	sp, r7
 802488a:	bd80      	pop	{r7, pc}
 802488c:	240054b4 	.word	0x240054b4
 8024890:	24000258 	.word	0x24000258
 8024894:	080376ec 	.word	0x080376ec
 8024898:	080293f8 	.word	0x080293f8
 802489c:	08029a84 	.word	0x08029a84
 80248a0:	24005494 	.word	0x24005494

080248a4 <send_websocket_data>:

static void send_websocket_data(void) {
 80248a4:	b5b0      	push	{r4, r5, r7, lr}
 80248a6:	b088      	sub	sp, #32
 80248a8:	af02      	add	r7, sp, #8
  struct mg_connection *c;
  uint64_t now = mg_millis();
 80248aa:	f7db ff5d 	bl	8000768 <mg_millis>
 80248ae:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for (c = g_mgr.conns; c != NULL; c = c->next) {
 80248b2:	4b2a      	ldr	r3, [pc, #168]	@ (802495c <send_websocket_data+0xb8>)
 80248b4:	681b      	ldr	r3, [r3, #0]
 80248b6:	617b      	str	r3, [r7, #20]
 80248b8:	e048      	b.n	802494c <send_websocket_data+0xa8>
    uint64_t *timers = (uint64_t *) &c->data[0];
 80248ba:	697b      	ldr	r3, [r7, #20]
 80248bc:	3388      	adds	r3, #136	@ 0x88
 80248be:	607b      	str	r3, [r7, #4]
    size_t i;

    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 80248c0:	697b      	ldr	r3, [r7, #20]
 80248c2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80248c6:	f003 0302 	and.w	r3, r3, #2
 80248ca:	b2db      	uxtb	r3, r3
 80248cc:	2b00      	cmp	r3, #0
 80248ce:	d037      	beq.n	8024940 <send_websocket_data+0x9c>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 80248d0:	697b      	ldr	r3, [r7, #20]
 80248d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80248d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80248d8:	d834      	bhi.n	8024944 <send_websocket_data+0xa0>

    for (i = 0; i < s_ws_handlers_count; i++) {
 80248da:	2300      	movs	r3, #0
 80248dc:	613b      	str	r3, [r7, #16]
 80248de:	e029      	b.n	8024934 <send_websocket_data+0x90>
      if (c->pfn_data == NULL ||
 80248e0:	697b      	ldr	r3, [r7, #20]
 80248e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80248e6:	2b00      	cmp	r3, #0
 80248e8:	d016      	beq.n	8024918 <send_websocket_data+0x74>
          mg_timer_expired(&timers[i], s_ws_handlers[i].timeout_ms, now)) {
 80248ea:	693b      	ldr	r3, [r7, #16]
 80248ec:	00db      	lsls	r3, r3, #3
 80248ee:	687a      	ldr	r2, [r7, #4]
 80248f0:	18d1      	adds	r1, r2, r3
 80248f2:	4a1b      	ldr	r2, [pc, #108]	@ (8024960 <send_websocket_data+0xbc>)
 80248f4:	693b      	ldr	r3, [r7, #16]
 80248f6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80248fa:	2200      	movs	r2, #0
 80248fc:	461c      	mov	r4, r3
 80248fe:	4615      	mov	r5, r2
 8024900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024904:	e9cd 2300 	strd	r2, r3, [sp]
 8024908:	4622      	mov	r2, r4
 802490a:	462b      	mov	r3, r5
 802490c:	4608      	mov	r0, r1
 802490e:	f7f1 fef5 	bl	80166fc <mg_timer_expired>
 8024912:	4603      	mov	r3, r0
      if (c->pfn_data == NULL ||
 8024914:	2b00      	cmp	r3, #0
 8024916:	d00a      	beq.n	802492e <send_websocket_data+0x8a>
        s_ws_handlers[i].fn(c);
 8024918:	4a11      	ldr	r2, [pc, #68]	@ (8024960 <send_websocket_data+0xbc>)
 802491a:	693b      	ldr	r3, [r7, #16]
 802491c:	00db      	lsls	r3, r3, #3
 802491e:	4413      	add	r3, r2
 8024920:	685b      	ldr	r3, [r3, #4]
 8024922:	6978      	ldr	r0, [r7, #20]
 8024924:	4798      	blx	r3
        c->pfn_data = (void *) 1;
 8024926:	697b      	ldr	r3, [r7, #20]
 8024928:	2201      	movs	r2, #1
 802492a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    for (i = 0; i < s_ws_handlers_count; i++) {
 802492e:	693b      	ldr	r3, [r7, #16]
 8024930:	3301      	adds	r3, #1
 8024932:	613b      	str	r3, [r7, #16]
 8024934:	4b0b      	ldr	r3, [pc, #44]	@ (8024964 <send_websocket_data+0xc0>)
 8024936:	681b      	ldr	r3, [r3, #0]
 8024938:	693a      	ldr	r2, [r7, #16]
 802493a:	429a      	cmp	r2, r3
 802493c:	d3d0      	bcc.n	80248e0 <send_websocket_data+0x3c>
 802493e:	e002      	b.n	8024946 <send_websocket_data+0xa2>
    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 8024940:	bf00      	nop
 8024942:	e000      	b.n	8024946 <send_websocket_data+0xa2>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 8024944:	bf00      	nop
  for (c = g_mgr.conns; c != NULL; c = c->next) {
 8024946:	697b      	ldr	r3, [r7, #20]
 8024948:	681b      	ldr	r3, [r3, #0]
 802494a:	617b      	str	r3, [r7, #20]
 802494c:	697b      	ldr	r3, [r7, #20]
 802494e:	2b00      	cmp	r3, #0
 8024950:	d1b3      	bne.n	80248ba <send_websocket_data+0x16>
      }
    }
  }
}
 8024952:	bf00      	nop
 8024954:	bf00      	nop
 8024956:	3718      	adds	r7, #24
 8024958:	46bd      	mov	sp, r7
 802495a:	bdb0      	pop	{r4, r5, r7, pc}
 802495c:	24005448 	.word	0x24005448
 8024960:	24005494 	.word	0x24005494
 8024964:	240054b4 	.word	0x240054b4

08024968 <handle_modbus_pdu>:
#if WIZARD_ENABLE_MODBUS
static struct mongoose_modbus_handlers s_modbus_handlers = {
    glue_modbus_read_reg, glue_modbus_write_reg};

static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 8024968:	b5b0      	push	{r4, r5, r7, lr}
 802496a:	b0d0      	sub	sp, #320	@ 0x140
 802496c:	af00      	add	r7, sp, #0
 802496e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024972:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8024976:	6018      	str	r0, [r3, #0]
 8024978:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 802497c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024980:	6019      	str	r1, [r3, #0]
 8024982:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024986:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 802498a:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
 802498c:	4bb8      	ldr	r3, [pc, #736]	@ (8024c70 <handle_modbus_pdu+0x308>)
 802498e:	681b      	ldr	r3, [r3, #0]
 8024990:	2b02      	cmp	r3, #2
 8024992:	dd13      	ble.n	80249bc <handle_modbus_pdu+0x54>
 8024994:	4bb7      	ldr	r3, [pc, #732]	@ (8024c74 <handle_modbus_pdu+0x30c>)
 8024996:	f240 3225 	movw	r2, #805	@ 0x325
 802499a:	49b7      	ldr	r1, [pc, #732]	@ (8024c78 <handle_modbus_pdu+0x310>)
 802499c:	2003      	movs	r0, #3
 802499e:	f7e9 f9d5 	bl	800dd4c <mg_log_prefix>
 80249a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80249a6:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80249aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80249ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80249b2:	6812      	ldr	r2, [r2, #0]
 80249b4:	6819      	ldr	r1, [r3, #0]
 80249b6:	48b1      	ldr	r0, [pc, #708]	@ (8024c7c <handle_modbus_pdu+0x314>)
 80249b8:	f7e9 fa18 	bl	800ddec <mg_log>
  mg_hexdump(buf, len);
 80249bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80249c0:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80249c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80249c8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80249cc:	6811      	ldr	r1, [r2, #0]
 80249ce:	6818      	ldr	r0, [r3, #0]
 80249d0:	f7e9 fa42 	bl	800de58 <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 80249d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80249d8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80249dc:	681b      	ldr	r3, [r3, #0]
 80249de:	2b0b      	cmp	r3, #11
 80249e0:	d80f      	bhi.n	8024a02 <handle_modbus_pdu+0x9a>
    MG_ERROR(("PDU too small"));
 80249e2:	4ba3      	ldr	r3, [pc, #652]	@ (8024c70 <handle_modbus_pdu+0x308>)
 80249e4:	681b      	ldr	r3, [r3, #0]
 80249e6:	2b00      	cmp	r3, #0
 80249e8:	f340 81f8 	ble.w	8024ddc <handle_modbus_pdu+0x474>
 80249ec:	4ba1      	ldr	r3, [pc, #644]	@ (8024c74 <handle_modbus_pdu+0x30c>)
 80249ee:	f240 3229 	movw	r2, #809	@ 0x329
 80249f2:	49a1      	ldr	r1, [pc, #644]	@ (8024c78 <handle_modbus_pdu+0x310>)
 80249f4:	2001      	movs	r0, #1
 80249f6:	f7e9 f9a9 	bl	800dd4c <mg_log_prefix>
 80249fa:	48a1      	ldr	r0, [pc, #644]	@ (8024c80 <handle_modbus_pdu+0x318>)
 80249fc:	f7e9 f9f6 	bl	800ddec <mg_log>
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
    mg_send(c, response, response_len);
  }
}
 8024a00:	e1ec      	b.n	8024ddc <handle_modbus_pdu+0x474>
    uint8_t func = buf[7];  // Function
 8024a02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024a06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024a0a:	681b      	ldr	r3, [r3, #0]
 8024a0c:	79db      	ldrb	r3, [r3, #7]
 8024a0e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 8024a12:	2300      	movs	r3, #0
 8024a14:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 8024a18:	2300      	movs	r3, #0
 8024a1a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(response, buf, 8);
 8024a1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024a22:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024a26:	f107 0014 	add.w	r0, r7, #20
 8024a2a:	2208      	movs	r2, #8
 8024a2c:	6819      	ldr	r1, [r3, #0]
 8024a2e:	f000 ffe2 	bl	80259f6 <memcpy>
    if (func == 6) {  // write single holding register
 8024a32:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8024a36:	2b06      	cmp	r3, #6
 8024a38:	d155      	bne.n	8024ae6 <handle_modbus_pdu+0x17e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8024a3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024a3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024a42:	681b      	ldr	r3, [r3, #0]
 8024a44:	3308      	adds	r3, #8
 8024a46:	881b      	ldrh	r3, [r3, #0]
 8024a48:	4618      	mov	r0, r3
 8024a4a:	f7fc fc19 	bl	8021280 <mg_ntohs>
 8024a4e:	4603      	mov	r3, r0
 8024a50:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 8024a54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024a58:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024a5c:	681b      	ldr	r3, [r3, #0]
 8024a5e:	330a      	adds	r3, #10
 8024a60:	881b      	ldrh	r3, [r3, #0]
 8024a62:	4618      	mov	r0, r3
 8024a64:	f7fc fc0c 	bl	8021280 <mg_ntohs>
 8024a68:	4603      	mov	r3, r0
 8024a6a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = s_modbus_handlers.write_reg_fn(start, value);
 8024a6e:	4b85      	ldr	r3, [pc, #532]	@ (8024c84 <handle_modbus_pdu+0x31c>)
 8024a70:	685b      	ldr	r3, [r3, #4]
 8024a72:	f8b7 111c 	ldrh.w	r1, [r7, #284]	@ 0x11c
 8024a76:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8024a7a:	4610      	mov	r0, r2
 8024a7c:	4798      	blx	r3
 8024a7e:	4603      	mov	r3, r0
 8024a80:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 8024a84:	f107 0314 	add.w	r3, r7, #20
 8024a88:	f103 0408 	add.w	r4, r3, #8
 8024a8c:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8024a90:	4618      	mov	r0, r3
 8024a92:	f7fc fbf5 	bl	8021280 <mg_ntohs>
 8024a96:	4603      	mov	r3, r0
 8024a98:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 8024a9a:	f107 0314 	add.w	r3, r7, #20
 8024a9e:	f103 040a 	add.w	r4, r3, #10
 8024aa2:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8024aa6:	4618      	mov	r0, r3
 8024aa8:	f7fc fbea 	bl	8021280 <mg_ntohs>
 8024aac:	4603      	mov	r3, r0
 8024aae:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 8024ab0:	230c      	movs	r3, #12
 8024ab2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8024ab6:	4b6e      	ldr	r3, [pc, #440]	@ (8024c70 <handle_modbus_pdu+0x308>)
 8024ab8:	681b      	ldr	r3, [r3, #0]
 8024aba:	2b02      	cmp	r3, #2
 8024abc:	f340 8142 	ble.w	8024d44 <handle_modbus_pdu+0x3dc>
 8024ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8024c74 <handle_modbus_pdu+0x30c>)
 8024ac2:	f240 323b 	movw	r2, #827	@ 0x33b
 8024ac6:	496c      	ldr	r1, [pc, #432]	@ (8024c78 <handle_modbus_pdu+0x310>)
 8024ac8:	2003      	movs	r0, #3
 8024aca:	f7e9 f93f 	bl	800dd4c <mg_log_prefix>
 8024ace:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8024ad2:	2b00      	cmp	r3, #0
 8024ad4:	d001      	beq.n	8024ada <handle_modbus_pdu+0x172>
 8024ad6:	4b6c      	ldr	r3, [pc, #432]	@ (8024c88 <handle_modbus_pdu+0x320>)
 8024ad8:	e000      	b.n	8024adc <handle_modbus_pdu+0x174>
 8024ada:	4b6c      	ldr	r3, [pc, #432]	@ (8024c8c <handle_modbus_pdu+0x324>)
 8024adc:	4619      	mov	r1, r3
 8024ade:	486c      	ldr	r0, [pc, #432]	@ (8024c90 <handle_modbus_pdu+0x328>)
 8024ae0:	f7e9 f984 	bl	800ddec <mg_log>
 8024ae4:	e12e      	b.n	8024d44 <handle_modbus_pdu+0x3dc>
    } else if (func == 16) {  // Write multiple
 8024ae6:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8024aea:	2b10      	cmp	r3, #16
 8024aec:	f040 808c 	bne.w	8024c08 <handle_modbus_pdu+0x2a0>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8024af0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024af4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024af8:	681b      	ldr	r3, [r3, #0]
 8024afa:	3308      	adds	r3, #8
 8024afc:	881b      	ldrh	r3, [r3, #0]
 8024afe:	4618      	mov	r0, r3
 8024b00:	f7fc fbbe 	bl	8021280 <mg_ntohs>
 8024b04:	4603      	mov	r3, r0
 8024b06:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8024b0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024b0e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024b12:	681b      	ldr	r3, [r3, #0]
 8024b14:	330a      	adds	r3, #10
 8024b16:	881b      	ldrh	r3, [r3, #0]
 8024b18:	4618      	mov	r0, r3
 8024b1a:	f7fc fbb1 	bl	8021280 <mg_ntohs>
 8024b1e:	4603      	mov	r3, r0
 8024b20:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 8024b24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024b28:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024b2c:	681b      	ldr	r3, [r3, #0]
 8024b2e:	330d      	adds	r3, #13
 8024b30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 8024b34:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8024b38:	3305      	adds	r3, #5
 8024b3a:	005b      	lsls	r3, r3, #1
 8024b3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8024b40:	f080 8100 	bcs.w	8024d44 <handle_modbus_pdu+0x3dc>
        for (i = 0; i < num; i++) {
 8024b44:	2300      	movs	r3, #0
 8024b46:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8024b4a:	e024      	b.n	8024b96 <handle_modbus_pdu+0x22e>
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 8024b4c:	4b4d      	ldr	r3, [pc, #308]	@ (8024c84 <handle_modbus_pdu+0x31c>)
 8024b4e:	685c      	ldr	r4, [r3, #4]
 8024b50:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8024b54:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8024b58:	4413      	add	r3, r2
 8024b5a:	b29d      	uxth	r5, r3
                                                   mg_htons(data[i]));
 8024b5c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8024b60:	005b      	lsls	r3, r3, #1
 8024b62:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8024b66:	4413      	add	r3, r2
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 8024b68:	881b      	ldrh	r3, [r3, #0]
 8024b6a:	4618      	mov	r0, r3
 8024b6c:	f7fc fb88 	bl	8021280 <mg_ntohs>
 8024b70:	4603      	mov	r3, r0
 8024b72:	4619      	mov	r1, r3
 8024b74:	4628      	mov	r0, r5
 8024b76:	47a0      	blx	r4
 8024b78:	4603      	mov	r3, r0
 8024b7a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 8024b7e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8024b82:	f083 0301 	eor.w	r3, r3, #1
 8024b86:	b2db      	uxtb	r3, r3
 8024b88:	2b00      	cmp	r3, #0
 8024b8a:	d10b      	bne.n	8024ba4 <handle_modbus_pdu+0x23c>
        for (i = 0; i < num; i++) {
 8024b8c:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8024b90:	3301      	adds	r3, #1
 8024b92:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8024b96:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8024b9a:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8024b9e:	429a      	cmp	r2, r3
 8024ba0:	d3d4      	bcc.n	8024b4c <handle_modbus_pdu+0x1e4>
 8024ba2:	e000      	b.n	8024ba6 <handle_modbus_pdu+0x23e>
          if (success == false) break;
 8024ba4:	bf00      	nop
        *(uint16_t *) &response[8] = mg_htons(start);
 8024ba6:	f107 0314 	add.w	r3, r7, #20
 8024baa:	f103 0408 	add.w	r4, r3, #8
 8024bae:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8024bb2:	4618      	mov	r0, r3
 8024bb4:	f7fc fb64 	bl	8021280 <mg_ntohs>
 8024bb8:	4603      	mov	r3, r0
 8024bba:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 8024bbc:	f107 0314 	add.w	r3, r7, #20
 8024bc0:	f103 040a 	add.w	r4, r3, #10
 8024bc4:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8024bc8:	4618      	mov	r0, r3
 8024bca:	f7fc fb59 	bl	8021280 <mg_ntohs>
 8024bce:	4603      	mov	r3, r0
 8024bd0:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 8024bd2:	230c      	movs	r3, #12
 8024bd4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8024bd8:	4b25      	ldr	r3, [pc, #148]	@ (8024c70 <handle_modbus_pdu+0x308>)
 8024bda:	681b      	ldr	r3, [r3, #0]
 8024bdc:	2b02      	cmp	r3, #2
 8024bde:	f340 80b1 	ble.w	8024d44 <handle_modbus_pdu+0x3dc>
 8024be2:	4b24      	ldr	r3, [pc, #144]	@ (8024c74 <handle_modbus_pdu+0x30c>)
 8024be4:	f240 3249 	movw	r2, #841	@ 0x349
 8024be8:	4923      	ldr	r1, [pc, #140]	@ (8024c78 <handle_modbus_pdu+0x310>)
 8024bea:	2003      	movs	r0, #3
 8024bec:	f7e9 f8ae 	bl	800dd4c <mg_log_prefix>
 8024bf0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8024bf4:	2b00      	cmp	r3, #0
 8024bf6:	d001      	beq.n	8024bfc <handle_modbus_pdu+0x294>
 8024bf8:	4b23      	ldr	r3, [pc, #140]	@ (8024c88 <handle_modbus_pdu+0x320>)
 8024bfa:	e000      	b.n	8024bfe <handle_modbus_pdu+0x296>
 8024bfc:	4b23      	ldr	r3, [pc, #140]	@ (8024c8c <handle_modbus_pdu+0x324>)
 8024bfe:	4619      	mov	r1, r3
 8024c00:	4823      	ldr	r0, [pc, #140]	@ (8024c90 <handle_modbus_pdu+0x328>)
 8024c02:	f7e9 f8f3 	bl	800ddec <mg_log>
 8024c06:	e09d      	b.n	8024d44 <handle_modbus_pdu+0x3dc>
    } else if (func == 3 || func == 4) {  // Read multiple
 8024c08:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8024c0c:	2b03      	cmp	r3, #3
 8024c0e:	d004      	beq.n	8024c1a <handle_modbus_pdu+0x2b2>
 8024c10:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8024c14:	2b04      	cmp	r3, #4
 8024c16:	f040 8095 	bne.w	8024d44 <handle_modbus_pdu+0x3dc>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8024c1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024c1e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024c22:	681b      	ldr	r3, [r3, #0]
 8024c24:	3308      	adds	r3, #8
 8024c26:	881b      	ldrh	r3, [r3, #0]
 8024c28:	4618      	mov	r0, r3
 8024c2a:	f7fc fb29 	bl	8021280 <mg_ntohs>
 8024c2e:	4603      	mov	r3, r0
 8024c30:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8024c34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024c38:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8024c3c:	681b      	ldr	r3, [r3, #0]
 8024c3e:	330a      	adds	r3, #10
 8024c40:	881b      	ldrh	r3, [r3, #0]
 8024c42:	4618      	mov	r0, r3
 8024c44:	f7fc fb1c 	bl	8021280 <mg_ntohs>
 8024c48:	4603      	mov	r3, r0
 8024c4a:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 8024c4e:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8024c52:	005b      	lsls	r3, r3, #1
 8024c54:	3309      	adds	r3, #9
 8024c56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8024c5a:	d273      	bcs.n	8024d44 <handle_modbus_pdu+0x3dc>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 8024c5c:	f107 0314 	add.w	r3, r7, #20
 8024c60:	3309      	adds	r3, #9
 8024c62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 8024c66:	2300      	movs	r3, #0
 8024c68:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8024c6c:	e03a      	b.n	8024ce4 <handle_modbus_pdu+0x37c>
 8024c6e:	bf00      	nop
 8024c70:	24000258 	.word	0x24000258
 8024c74:	08037704 	.word	0x08037704
 8024c78:	080293f8 	.word	0x080293f8
 8024c7c:	08029aa8 	.word	0x08029aa8
 8024c80:	08029acc 	.word	0x08029acc
 8024c84:	24000820 	.word	0x24000820
 8024c88:	08029adc 	.word	0x08029adc
 8024c8c:	08029ae4 	.word	0x08029ae4
 8024c90:	08029aec 	.word	0x08029aec
          success = s_modbus_handlers.read_reg_fn((uint16_t) (start + i), &val);
 8024c94:	4b54      	ldr	r3, [pc, #336]	@ (8024de8 <handle_modbus_pdu+0x480>)
 8024c96:	681b      	ldr	r3, [r3, #0]
 8024c98:	f8b7 1130 	ldrh.w	r1, [r7, #304]	@ 0x130
 8024c9c:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8024ca0:	440a      	add	r2, r1
 8024ca2:	b292      	uxth	r2, r2
 8024ca4:	f507 718d 	add.w	r1, r7, #282	@ 0x11a
 8024ca8:	4610      	mov	r0, r2
 8024caa:	4798      	blx	r3
 8024cac:	4603      	mov	r3, r0
 8024cae:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 8024cb2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8024cb6:	f083 0301 	eor.w	r3, r3, #1
 8024cba:	b2db      	uxtb	r3, r3
 8024cbc:	2b00      	cmp	r3, #0
 8024cbe:	d118      	bne.n	8024cf2 <handle_modbus_pdu+0x38a>
          data[i] = mg_htons(val);
 8024cc0:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 8024cc4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8024cc8:	005b      	lsls	r3, r3, #1
 8024cca:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8024cce:	18d4      	adds	r4, r2, r3
 8024cd0:	4608      	mov	r0, r1
 8024cd2:	f7fc fad5 	bl	8021280 <mg_ntohs>
 8024cd6:	4603      	mov	r3, r0
 8024cd8:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 8024cda:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8024cde:	3301      	adds	r3, #1
 8024ce0:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8024ce4:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8024ce8:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8024cec:	429a      	cmp	r2, r3
 8024cee:	d3d1      	bcc.n	8024c94 <handle_modbus_pdu+0x32c>
 8024cf0:	e000      	b.n	8024cf4 <handle_modbus_pdu+0x38c>
          if (success == false) break;
 8024cf2:	bf00      	nop
        response[8] = (uint8_t) (num * 2);
 8024cf4:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8024cf8:	b2db      	uxtb	r3, r3
 8024cfa:	005b      	lsls	r3, r3, #1
 8024cfc:	b2da      	uxtb	r2, r3
 8024cfe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024d02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8024d06:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 8024d08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024d0c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8024d10:	7a1b      	ldrb	r3, [r3, #8]
 8024d12:	3309      	adds	r3, #9
 8024d14:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8024d18:	4b34      	ldr	r3, [pc, #208]	@ (8024dec <handle_modbus_pdu+0x484>)
 8024d1a:	681b      	ldr	r3, [r3, #0]
 8024d1c:	2b02      	cmp	r3, #2
 8024d1e:	dd11      	ble.n	8024d44 <handle_modbus_pdu+0x3dc>
 8024d20:	4b33      	ldr	r3, [pc, #204]	@ (8024df0 <handle_modbus_pdu+0x488>)
 8024d22:	f240 3257 	movw	r2, #855	@ 0x357
 8024d26:	4933      	ldr	r1, [pc, #204]	@ (8024df4 <handle_modbus_pdu+0x48c>)
 8024d28:	2003      	movs	r0, #3
 8024d2a:	f7e9 f80f 	bl	800dd4c <mg_log_prefix>
 8024d2e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8024d32:	2b00      	cmp	r3, #0
 8024d34:	d001      	beq.n	8024d3a <handle_modbus_pdu+0x3d2>
 8024d36:	4b30      	ldr	r3, [pc, #192]	@ (8024df8 <handle_modbus_pdu+0x490>)
 8024d38:	e000      	b.n	8024d3c <handle_modbus_pdu+0x3d4>
 8024d3a:	4b30      	ldr	r3, [pc, #192]	@ (8024dfc <handle_modbus_pdu+0x494>)
 8024d3c:	4619      	mov	r1, r3
 8024d3e:	4830      	ldr	r0, [pc, #192]	@ (8024e00 <handle_modbus_pdu+0x498>)
 8024d40:	f7e9 f854 	bl	800ddec <mg_log>
    if (success == false) {
 8024d44:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8024d48:	f083 0301 	eor.w	r3, r3, #1
 8024d4c:	b2db      	uxtb	r3, r3
 8024d4e:	2b00      	cmp	r3, #0
 8024d50:	d015      	beq.n	8024d7e <handle_modbus_pdu+0x416>
      response_len = 9;
 8024d52:	2309      	movs	r3, #9
 8024d54:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 8024d58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024d5c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8024d60:	79db      	ldrb	r3, [r3, #7]
 8024d62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8024d66:	b2da      	uxtb	r2, r3
 8024d68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024d6c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8024d70:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 8024d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024d76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8024d7a:	2204      	movs	r2, #4
 8024d7c:	721a      	strb	r2, [r3, #8]
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 8024d7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8024d82:	b29b      	uxth	r3, r3
 8024d84:	3b06      	subs	r3, #6
 8024d86:	b29a      	uxth	r2, r3
 8024d88:	f107 0314 	add.w	r3, r7, #20
 8024d8c:	1d1c      	adds	r4, r3, #4
 8024d8e:	4610      	mov	r0, r2
 8024d90:	f7fc fa76 	bl	8021280 <mg_ntohs>
 8024d94:	4603      	mov	r3, r0
 8024d96:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
 8024d98:	4b14      	ldr	r3, [pc, #80]	@ (8024dec <handle_modbus_pdu+0x484>)
 8024d9a:	681b      	ldr	r3, [r3, #0]
 8024d9c:	2b02      	cmp	r3, #2
 8024d9e:	dd0b      	ble.n	8024db8 <handle_modbus_pdu+0x450>
 8024da0:	4b13      	ldr	r3, [pc, #76]	@ (8024df0 <handle_modbus_pdu+0x488>)
 8024da2:	f44f 7258 	mov.w	r2, #864	@ 0x360
 8024da6:	4913      	ldr	r1, [pc, #76]	@ (8024df4 <handle_modbus_pdu+0x48c>)
 8024da8:	2003      	movs	r0, #3
 8024daa:	f7e8 ffcf 	bl	800dd4c <mg_log_prefix>
 8024dae:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8024db2:	4814      	ldr	r0, [pc, #80]	@ (8024e04 <handle_modbus_pdu+0x49c>)
 8024db4:	f7e9 f81a 	bl	800ddec <mg_log>
    mg_hexdump(response, response_len);
 8024db8:	f107 0314 	add.w	r3, r7, #20
 8024dbc:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8024dc0:	4618      	mov	r0, r3
 8024dc2:	f7e9 f849 	bl	800de58 <mg_hexdump>
    mg_send(c, response, response_len);
 8024dc6:	f107 0114 	add.w	r1, r7, #20
 8024dca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8024dce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8024dd2:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8024dd6:	6818      	ldr	r0, [r3, #0]
 8024dd8:	f7ed fa4e 	bl	8012278 <mg_send>
}
 8024ddc:	bf00      	nop
 8024dde:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8024de2:	46bd      	mov	sp, r7
 8024de4:	bdb0      	pop	{r4, r5, r7, pc}
 8024de6:	bf00      	nop
 8024de8:	24000820 	.word	0x24000820
 8024dec:	24000258 	.word	0x24000258
 8024df0:	08037704 	.word	0x08037704
 8024df4:	080293f8 	.word	0x080293f8
 8024df8:	08029adc 	.word	0x08029adc
 8024dfc:	08029ae4 	.word	0x08029ae4
 8024e00:	08029aec 	.word	0x08029aec
 8024e04:	08029b00 	.word	0x08029b00

08024e08 <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8024e08:	b580      	push	{r7, lr}
 8024e0a:	b086      	sub	sp, #24
 8024e0c:	af00      	add	r7, sp, #0
 8024e0e:	60f8      	str	r0, [r7, #12]
 8024e10:	60b9      	str	r1, [r7, #8]
 8024e12:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 8024e14:	68bb      	ldr	r3, [r7, #8]
 8024e16:	2b07      	cmp	r3, #7
 8024e18:	d13a      	bne.n	8024e90 <modbus_ev_handler+0x88>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 8024e1a:	68fb      	ldr	r3, [r7, #12]
 8024e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8024e1e:	2b06      	cmp	r3, #6
 8024e20:	d933      	bls.n	8024e8a <modbus_ev_handler+0x82>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 8024e22:	68fb      	ldr	r3, [r7, #12]
 8024e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8024e26:	3304      	adds	r3, #4
 8024e28:	881b      	ldrh	r3, [r3, #0]
 8024e2a:	4618      	mov	r0, r3
 8024e2c:	f7fc fa28 	bl	8021280 <mg_ntohs>
 8024e30:	4603      	mov	r3, r0
 8024e32:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
 8024e34:	4b18      	ldr	r3, [pc, #96]	@ (8024e98 <modbus_ev_handler+0x90>)
 8024e36:	681b      	ldr	r3, [r3, #0]
 8024e38:	2b01      	cmp	r3, #1
 8024e3a:	dd0e      	ble.n	8024e5a <modbus_ev_handler+0x52>
 8024e3c:	4b17      	ldr	r3, [pc, #92]	@ (8024e9c <modbus_ev_handler+0x94>)
 8024e3e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8024e42:	4917      	ldr	r1, [pc, #92]	@ (8024ea0 <modbus_ev_handler+0x98>)
 8024e44:	2002      	movs	r0, #2
 8024e46:	f7e8 ff81 	bl	800dd4c <mg_log_prefix>
 8024e4a:	68fb      	ldr	r3, [r7, #12]
 8024e4c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8024e4e:	8afb      	ldrh	r3, [r7, #22]
 8024e50:	3306      	adds	r3, #6
 8024e52:	461a      	mov	r2, r3
 8024e54:	4813      	ldr	r0, [pc, #76]	@ (8024ea4 <modbus_ev_handler+0x9c>)
 8024e56:	f7e8 ffc9 	bl	800ddec <mg_log>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 8024e5a:	68fb      	ldr	r3, [r7, #12]
 8024e5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8024e5e:	8afb      	ldrh	r3, [r7, #22]
 8024e60:	3306      	adds	r3, #6
 8024e62:	429a      	cmp	r2, r3
 8024e64:	d313      	bcc.n	8024e8e <modbus_ev_handler+0x86>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 8024e66:	68fb      	ldr	r3, [r7, #12]
 8024e68:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8024e6a:	8afb      	ldrh	r3, [r7, #22]
 8024e6c:	3306      	adds	r3, #6
 8024e6e:	461a      	mov	r2, r3
 8024e70:	68f8      	ldr	r0, [r7, #12]
 8024e72:	f7ff fd79 	bl	8024968 <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 8024e76:	68fb      	ldr	r3, [r7, #12]
 8024e78:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8024e7c:	8afb      	ldrh	r3, [r7, #22]
 8024e7e:	3306      	adds	r3, #6
 8024e80:	461a      	mov	r2, r3
 8024e82:	2100      	movs	r1, #0
 8024e84:	f7e8 f896 	bl	800cfb4 <mg_iobuf_del>
 8024e88:	e002      	b.n	8024e90 <modbus_ev_handler+0x88>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 8024e8a:	bf00      	nop
 8024e8c:	e000      	b.n	8024e90 <modbus_ev_handler+0x88>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 8024e8e:	bf00      	nop
  }
  (void) ev_data;
}
 8024e90:	3718      	adds	r7, #24
 8024e92:	46bd      	mov	sp, r7
 8024e94:	bd80      	pop	{r7, pc}
 8024e96:	bf00      	nop
 8024e98:	24000258 	.word	0x24000258
 8024e9c:	08037718 	.word	0x08037718
 8024ea0:	080293f8 	.word	0x080293f8
 8024ea4:	08029b1c 	.word	0x08029b1c

08024ea8 <mongoose_init>:
  }
  (void) ev_data;
}
#endif  // WIZARD_CAPTIVE_PORTAL

void mongoose_init(void) {
 8024ea8:	b580      	push	{r7, lr}
 8024eaa:	b09a      	sub	sp, #104	@ 0x68
 8024eac:	af00      	add	r7, sp, #0
  mg_mgr_init(&g_mgr);      // Initialise event manager
 8024eae:	4824      	ldr	r0, [pc, #144]	@ (8024f40 <mongoose_init+0x98>)
 8024eb0:	f7e9 fd34 	bl	800e91c <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 8024eb4:	4b23      	ldr	r3, [pc, #140]	@ (8024f44 <mongoose_init+0x9c>)
 8024eb6:	2203      	movs	r2, #3
 8024eb8:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 8024eba:	4b22      	ldr	r3, [pc, #136]	@ (8024f44 <mongoose_init+0x9c>)
 8024ebc:	681b      	ldr	r3, [r3, #0]
 8024ebe:	2b01      	cmp	r3, #1
 8024ec0:	dd09      	ble.n	8024ed6 <mongoose_init+0x2e>
 8024ec2:	4b21      	ldr	r3, [pc, #132]	@ (8024f48 <mongoose_init+0xa0>)
 8024ec4:	f240 32ad 	movw	r2, #941	@ 0x3ad
 8024ec8:	4920      	ldr	r1, [pc, #128]	@ (8024f4c <mongoose_init+0xa4>)
 8024eca:	2002      	movs	r0, #2
 8024ecc:	f7e8 ff3e 	bl	800dd4c <mg_log_prefix>
 8024ed0:	481f      	ldr	r0, [pc, #124]	@ (8024f50 <mongoose_init+0xa8>)
 8024ed2:	f7e8 ff8b 	bl	800ddec <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 8024ed6:	2300      	movs	r3, #0
 8024ed8:	4a1e      	ldr	r2, [pc, #120]	@ (8024f54 <mongoose_init+0xac>)
 8024eda:	491f      	ldr	r1, [pc, #124]	@ (8024f58 <mongoose_init+0xb0>)
 8024edc:	4818      	ldr	r0, [pc, #96]	@ (8024f40 <mongoose_init+0x98>)
 8024ede:	f7e7 ff55 	bl	800cd8c <mg_http_listen>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 8024ee2:	1d38      	adds	r0, r7, #4
 8024ee4:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8024ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8024f5c <mongoose_init+0xb4>)
 8024eea:	2164      	movs	r1, #100	@ 0x64
 8024eec:	f7ed fb68 	bl	80125c0 <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
 8024ef0:	4b14      	ldr	r3, [pc, #80]	@ (8024f44 <mongoose_init+0x9c>)
 8024ef2:	681b      	ldr	r3, [r3, #0]
 8024ef4:	2b01      	cmp	r3, #1
 8024ef6:	dd0b      	ble.n	8024f10 <mongoose_init+0x68>
 8024ef8:	4b13      	ldr	r3, [pc, #76]	@ (8024f48 <mongoose_init+0xa0>)
 8024efa:	f240 32c7 	movw	r2, #967	@ 0x3c7
 8024efe:	4913      	ldr	r1, [pc, #76]	@ (8024f4c <mongoose_init+0xa4>)
 8024f00:	2002      	movs	r0, #2
 8024f02:	f7e8 ff23 	bl	800dd4c <mg_log_prefix>
 8024f06:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8024f0a:	4815      	ldr	r0, [pc, #84]	@ (8024f60 <mongoose_init+0xb8>)
 8024f0c:	f7e8 ff6e 	bl	800ddec <mg_log>
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 8024f10:	1d39      	adds	r1, r7, #4
 8024f12:	2300      	movs	r3, #0
 8024f14:	4a13      	ldr	r2, [pc, #76]	@ (8024f64 <mongoose_init+0xbc>)
 8024f16:	480a      	ldr	r0, [pc, #40]	@ (8024f40 <mongoose_init+0x98>)
 8024f18:	f7e9 fc34 	bl	800e784 <mg_listen>
  MG_INFO(("Starting MDNS (domain name: %s.local)", WIZARD_MDNS_NAME));
  mg_mdns_listen(&g_mgr, WIZARD_MDNS_NAME);
#endif

  glue_lock_init();
  MG_INFO(("Mongoose init complete"));
 8024f1c:	4b09      	ldr	r3, [pc, #36]	@ (8024f44 <mongoose_init+0x9c>)
 8024f1e:	681b      	ldr	r3, [r3, #0]
 8024f20:	2b01      	cmp	r3, #1
 8024f22:	dd09      	ble.n	8024f38 <mongoose_init+0x90>
 8024f24:	4b08      	ldr	r3, [pc, #32]	@ (8024f48 <mongoose_init+0xa0>)
 8024f26:	f240 32d7 	movw	r2, #983	@ 0x3d7
 8024f2a:	4908      	ldr	r1, [pc, #32]	@ (8024f4c <mongoose_init+0xa4>)
 8024f2c:	2002      	movs	r0, #2
 8024f2e:	f7e8 ff0d 	bl	800dd4c <mg_log_prefix>
 8024f32:	480d      	ldr	r0, [pc, #52]	@ (8024f68 <mongoose_init+0xc0>)
 8024f34:	f7e8 ff5a 	bl	800ddec <mg_log>
}
 8024f38:	bf00      	nop
 8024f3a:	3768      	adds	r7, #104	@ 0x68
 8024f3c:	46bd      	mov	sp, r7
 8024f3e:	bd80      	pop	{r7, pc}
 8024f40:	24005448 	.word	0x24005448
 8024f44:	24000258 	.word	0x24000258
 8024f48:	0803772c 	.word	0x0803772c
 8024f4c:	080293f8 	.word	0x080293f8
 8024f50:	08029b34 	.word	0x08029b34
 8024f54:	080243bd 	.word	0x080243bd
 8024f58:	08029b4c 	.word	0x08029b4c
 8024f5c:	08029b60 	.word	0x08029b60
 8024f60:	08029b74 	.word	0x08029b74
 8024f64:	08024e09 	.word	0x08024e09
 8024f68:	08029b9c 	.word	0x08029b9c

08024f6c <mongoose_poll>:

void mongoose_poll(void) {
 8024f6c:	b580      	push	{r7, lr}
 8024f6e:	af00      	add	r7, sp, #0
  glue_lock();
  mg_mgr_poll(&g_mgr, 10);
 8024f70:	210a      	movs	r1, #10
 8024f72:	4803      	ldr	r0, [pc, #12]	@ (8024f80 <mongoose_poll+0x14>)
 8024f74:	f7ed f84e 	bl	8012014 <mg_mgr_poll>
#if WIZARD_ENABLE_WEBSOCKET
  send_websocket_data();
 8024f78:	f7ff fc94 	bl	80248a4 <send_websocket_data>
#endif
  glue_unlock();
 8024f7c:	bf00      	nop
 8024f7e:	bd80      	pop	{r7, pc}
 8024f80:	24005448 	.word	0x24005448

08024f84 <abort>:
 8024f84:	b508      	push	{r3, lr}
 8024f86:	2006      	movs	r0, #6
 8024f88:	f000 fc8e 	bl	80258a8 <raise>
 8024f8c:	2001      	movs	r0, #1
 8024f8e:	f7dc fa92 	bl	80014b6 <_exit>
	...

08024f94 <__assert_func>:
 8024f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024f96:	4614      	mov	r4, r2
 8024f98:	461a      	mov	r2, r3
 8024f9a:	4b09      	ldr	r3, [pc, #36]	@ (8024fc0 <__assert_func+0x2c>)
 8024f9c:	681b      	ldr	r3, [r3, #0]
 8024f9e:	4605      	mov	r5, r0
 8024fa0:	68d8      	ldr	r0, [r3, #12]
 8024fa2:	b14c      	cbz	r4, 8024fb8 <__assert_func+0x24>
 8024fa4:	4b07      	ldr	r3, [pc, #28]	@ (8024fc4 <__assert_func+0x30>)
 8024fa6:	9100      	str	r1, [sp, #0]
 8024fa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024fac:	4906      	ldr	r1, [pc, #24]	@ (8024fc8 <__assert_func+0x34>)
 8024fae:	462b      	mov	r3, r5
 8024fb0:	f000 fa42 	bl	8025438 <fiprintf>
 8024fb4:	f7ff ffe6 	bl	8024f84 <abort>
 8024fb8:	4b04      	ldr	r3, [pc, #16]	@ (8024fcc <__assert_func+0x38>)
 8024fba:	461c      	mov	r4, r3
 8024fbc:	e7f3      	b.n	8024fa6 <__assert_func+0x12>
 8024fbe:	bf00      	nop
 8024fc0:	24000834 	.word	0x24000834
 8024fc4:	0803773a 	.word	0x0803773a
 8024fc8:	08037747 	.word	0x08037747
 8024fcc:	08037775 	.word	0x08037775

08024fd0 <atoi>:
 8024fd0:	220a      	movs	r2, #10
 8024fd2:	2100      	movs	r1, #0
 8024fd4:	f000 b982 	b.w	80252dc <strtol>

08024fd8 <calloc>:
 8024fd8:	4b02      	ldr	r3, [pc, #8]	@ (8024fe4 <calloc+0xc>)
 8024fda:	460a      	mov	r2, r1
 8024fdc:	4601      	mov	r1, r0
 8024fde:	6818      	ldr	r0, [r3, #0]
 8024fe0:	f000 b802 	b.w	8024fe8 <_calloc_r>
 8024fe4:	24000834 	.word	0x24000834

08024fe8 <_calloc_r>:
 8024fe8:	b570      	push	{r4, r5, r6, lr}
 8024fea:	fba1 5402 	umull	r5, r4, r1, r2
 8024fee:	b934      	cbnz	r4, 8024ffe <_calloc_r+0x16>
 8024ff0:	4629      	mov	r1, r5
 8024ff2:	f000 f83f 	bl	8025074 <_malloc_r>
 8024ff6:	4606      	mov	r6, r0
 8024ff8:	b928      	cbnz	r0, 8025006 <_calloc_r+0x1e>
 8024ffa:	4630      	mov	r0, r6
 8024ffc:	bd70      	pop	{r4, r5, r6, pc}
 8024ffe:	220c      	movs	r2, #12
 8025000:	6002      	str	r2, [r0, #0]
 8025002:	2600      	movs	r6, #0
 8025004:	e7f9      	b.n	8024ffa <_calloc_r+0x12>
 8025006:	462a      	mov	r2, r5
 8025008:	4621      	mov	r1, r4
 802500a:	f000 fbbf 	bl	802578c <memset>
 802500e:	e7f4      	b.n	8024ffa <_calloc_r+0x12>

08025010 <malloc>:
 8025010:	4b02      	ldr	r3, [pc, #8]	@ (802501c <malloc+0xc>)
 8025012:	4601      	mov	r1, r0
 8025014:	6818      	ldr	r0, [r3, #0]
 8025016:	f000 b82d 	b.w	8025074 <_malloc_r>
 802501a:	bf00      	nop
 802501c:	24000834 	.word	0x24000834

08025020 <free>:
 8025020:	4b02      	ldr	r3, [pc, #8]	@ (802502c <free+0xc>)
 8025022:	4601      	mov	r1, r0
 8025024:	6818      	ldr	r0, [r3, #0]
 8025026:	f000 bcf5 	b.w	8025a14 <_free_r>
 802502a:	bf00      	nop
 802502c:	24000834 	.word	0x24000834

08025030 <sbrk_aligned>:
 8025030:	b570      	push	{r4, r5, r6, lr}
 8025032:	4e0f      	ldr	r6, [pc, #60]	@ (8025070 <sbrk_aligned+0x40>)
 8025034:	460c      	mov	r4, r1
 8025036:	6831      	ldr	r1, [r6, #0]
 8025038:	4605      	mov	r5, r0
 802503a:	b911      	cbnz	r1, 8025042 <sbrk_aligned+0x12>
 802503c:	f000 fc84 	bl	8025948 <_sbrk_r>
 8025040:	6030      	str	r0, [r6, #0]
 8025042:	4621      	mov	r1, r4
 8025044:	4628      	mov	r0, r5
 8025046:	f000 fc7f 	bl	8025948 <_sbrk_r>
 802504a:	1c43      	adds	r3, r0, #1
 802504c:	d103      	bne.n	8025056 <sbrk_aligned+0x26>
 802504e:	f04f 34ff 	mov.w	r4, #4294967295
 8025052:	4620      	mov	r0, r4
 8025054:	bd70      	pop	{r4, r5, r6, pc}
 8025056:	1cc4      	adds	r4, r0, #3
 8025058:	f024 0403 	bic.w	r4, r4, #3
 802505c:	42a0      	cmp	r0, r4
 802505e:	d0f8      	beq.n	8025052 <sbrk_aligned+0x22>
 8025060:	1a21      	subs	r1, r4, r0
 8025062:	4628      	mov	r0, r5
 8025064:	f000 fc70 	bl	8025948 <_sbrk_r>
 8025068:	3001      	adds	r0, #1
 802506a:	d1f2      	bne.n	8025052 <sbrk_aligned+0x22>
 802506c:	e7ef      	b.n	802504e <sbrk_aligned+0x1e>
 802506e:	bf00      	nop
 8025070:	240054b8 	.word	0x240054b8

08025074 <_malloc_r>:
 8025074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025078:	1ccd      	adds	r5, r1, #3
 802507a:	f025 0503 	bic.w	r5, r5, #3
 802507e:	3508      	adds	r5, #8
 8025080:	2d0c      	cmp	r5, #12
 8025082:	bf38      	it	cc
 8025084:	250c      	movcc	r5, #12
 8025086:	2d00      	cmp	r5, #0
 8025088:	4606      	mov	r6, r0
 802508a:	db01      	blt.n	8025090 <_malloc_r+0x1c>
 802508c:	42a9      	cmp	r1, r5
 802508e:	d904      	bls.n	802509a <_malloc_r+0x26>
 8025090:	230c      	movs	r3, #12
 8025092:	6033      	str	r3, [r6, #0]
 8025094:	2000      	movs	r0, #0
 8025096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802509a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025170 <_malloc_r+0xfc>
 802509e:	f000 f869 	bl	8025174 <__malloc_lock>
 80250a2:	f8d8 3000 	ldr.w	r3, [r8]
 80250a6:	461c      	mov	r4, r3
 80250a8:	bb44      	cbnz	r4, 80250fc <_malloc_r+0x88>
 80250aa:	4629      	mov	r1, r5
 80250ac:	4630      	mov	r0, r6
 80250ae:	f7ff ffbf 	bl	8025030 <sbrk_aligned>
 80250b2:	1c43      	adds	r3, r0, #1
 80250b4:	4604      	mov	r4, r0
 80250b6:	d158      	bne.n	802516a <_malloc_r+0xf6>
 80250b8:	f8d8 4000 	ldr.w	r4, [r8]
 80250bc:	4627      	mov	r7, r4
 80250be:	2f00      	cmp	r7, #0
 80250c0:	d143      	bne.n	802514a <_malloc_r+0xd6>
 80250c2:	2c00      	cmp	r4, #0
 80250c4:	d04b      	beq.n	802515e <_malloc_r+0xea>
 80250c6:	6823      	ldr	r3, [r4, #0]
 80250c8:	4639      	mov	r1, r7
 80250ca:	4630      	mov	r0, r6
 80250cc:	eb04 0903 	add.w	r9, r4, r3
 80250d0:	f000 fc3a 	bl	8025948 <_sbrk_r>
 80250d4:	4581      	cmp	r9, r0
 80250d6:	d142      	bne.n	802515e <_malloc_r+0xea>
 80250d8:	6821      	ldr	r1, [r4, #0]
 80250da:	1a6d      	subs	r5, r5, r1
 80250dc:	4629      	mov	r1, r5
 80250de:	4630      	mov	r0, r6
 80250e0:	f7ff ffa6 	bl	8025030 <sbrk_aligned>
 80250e4:	3001      	adds	r0, #1
 80250e6:	d03a      	beq.n	802515e <_malloc_r+0xea>
 80250e8:	6823      	ldr	r3, [r4, #0]
 80250ea:	442b      	add	r3, r5
 80250ec:	6023      	str	r3, [r4, #0]
 80250ee:	f8d8 3000 	ldr.w	r3, [r8]
 80250f2:	685a      	ldr	r2, [r3, #4]
 80250f4:	bb62      	cbnz	r2, 8025150 <_malloc_r+0xdc>
 80250f6:	f8c8 7000 	str.w	r7, [r8]
 80250fa:	e00f      	b.n	802511c <_malloc_r+0xa8>
 80250fc:	6822      	ldr	r2, [r4, #0]
 80250fe:	1b52      	subs	r2, r2, r5
 8025100:	d420      	bmi.n	8025144 <_malloc_r+0xd0>
 8025102:	2a0b      	cmp	r2, #11
 8025104:	d917      	bls.n	8025136 <_malloc_r+0xc2>
 8025106:	1961      	adds	r1, r4, r5
 8025108:	42a3      	cmp	r3, r4
 802510a:	6025      	str	r5, [r4, #0]
 802510c:	bf18      	it	ne
 802510e:	6059      	strne	r1, [r3, #4]
 8025110:	6863      	ldr	r3, [r4, #4]
 8025112:	bf08      	it	eq
 8025114:	f8c8 1000 	streq.w	r1, [r8]
 8025118:	5162      	str	r2, [r4, r5]
 802511a:	604b      	str	r3, [r1, #4]
 802511c:	4630      	mov	r0, r6
 802511e:	f000 f82f 	bl	8025180 <__malloc_unlock>
 8025122:	f104 000b 	add.w	r0, r4, #11
 8025126:	1d23      	adds	r3, r4, #4
 8025128:	f020 0007 	bic.w	r0, r0, #7
 802512c:	1ac2      	subs	r2, r0, r3
 802512e:	bf1c      	itt	ne
 8025130:	1a1b      	subne	r3, r3, r0
 8025132:	50a3      	strne	r3, [r4, r2]
 8025134:	e7af      	b.n	8025096 <_malloc_r+0x22>
 8025136:	6862      	ldr	r2, [r4, #4]
 8025138:	42a3      	cmp	r3, r4
 802513a:	bf0c      	ite	eq
 802513c:	f8c8 2000 	streq.w	r2, [r8]
 8025140:	605a      	strne	r2, [r3, #4]
 8025142:	e7eb      	b.n	802511c <_malloc_r+0xa8>
 8025144:	4623      	mov	r3, r4
 8025146:	6864      	ldr	r4, [r4, #4]
 8025148:	e7ae      	b.n	80250a8 <_malloc_r+0x34>
 802514a:	463c      	mov	r4, r7
 802514c:	687f      	ldr	r7, [r7, #4]
 802514e:	e7b6      	b.n	80250be <_malloc_r+0x4a>
 8025150:	461a      	mov	r2, r3
 8025152:	685b      	ldr	r3, [r3, #4]
 8025154:	42a3      	cmp	r3, r4
 8025156:	d1fb      	bne.n	8025150 <_malloc_r+0xdc>
 8025158:	2300      	movs	r3, #0
 802515a:	6053      	str	r3, [r2, #4]
 802515c:	e7de      	b.n	802511c <_malloc_r+0xa8>
 802515e:	230c      	movs	r3, #12
 8025160:	6033      	str	r3, [r6, #0]
 8025162:	4630      	mov	r0, r6
 8025164:	f000 f80c 	bl	8025180 <__malloc_unlock>
 8025168:	e794      	b.n	8025094 <_malloc_r+0x20>
 802516a:	6005      	str	r5, [r0, #0]
 802516c:	e7d6      	b.n	802511c <_malloc_r+0xa8>
 802516e:	bf00      	nop
 8025170:	240054bc 	.word	0x240054bc

08025174 <__malloc_lock>:
 8025174:	4801      	ldr	r0, [pc, #4]	@ (802517c <__malloc_lock+0x8>)
 8025176:	f000 bc34 	b.w	80259e2 <__retarget_lock_acquire_recursive>
 802517a:	bf00      	nop
 802517c:	24005600 	.word	0x24005600

08025180 <__malloc_unlock>:
 8025180:	4801      	ldr	r0, [pc, #4]	@ (8025188 <__malloc_unlock+0x8>)
 8025182:	f000 bc2f 	b.w	80259e4 <__retarget_lock_release_recursive>
 8025186:	bf00      	nop
 8025188:	24005600 	.word	0x24005600

0802518c <srand>:
 802518c:	b538      	push	{r3, r4, r5, lr}
 802518e:	4b10      	ldr	r3, [pc, #64]	@ (80251d0 <srand+0x44>)
 8025190:	681d      	ldr	r5, [r3, #0]
 8025192:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8025194:	4604      	mov	r4, r0
 8025196:	b9b3      	cbnz	r3, 80251c6 <srand+0x3a>
 8025198:	2018      	movs	r0, #24
 802519a:	f7ff ff39 	bl	8025010 <malloc>
 802519e:	4602      	mov	r2, r0
 80251a0:	6328      	str	r0, [r5, #48]	@ 0x30
 80251a2:	b920      	cbnz	r0, 80251ae <srand+0x22>
 80251a4:	4b0b      	ldr	r3, [pc, #44]	@ (80251d4 <srand+0x48>)
 80251a6:	480c      	ldr	r0, [pc, #48]	@ (80251d8 <srand+0x4c>)
 80251a8:	2146      	movs	r1, #70	@ 0x46
 80251aa:	f7ff fef3 	bl	8024f94 <__assert_func>
 80251ae:	490b      	ldr	r1, [pc, #44]	@ (80251dc <srand+0x50>)
 80251b0:	4b0b      	ldr	r3, [pc, #44]	@ (80251e0 <srand+0x54>)
 80251b2:	e9c0 1300 	strd	r1, r3, [r0]
 80251b6:	4b0b      	ldr	r3, [pc, #44]	@ (80251e4 <srand+0x58>)
 80251b8:	6083      	str	r3, [r0, #8]
 80251ba:	230b      	movs	r3, #11
 80251bc:	8183      	strh	r3, [r0, #12]
 80251be:	2100      	movs	r1, #0
 80251c0:	2001      	movs	r0, #1
 80251c2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80251c6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80251c8:	2200      	movs	r2, #0
 80251ca:	611c      	str	r4, [r3, #16]
 80251cc:	615a      	str	r2, [r3, #20]
 80251ce:	bd38      	pop	{r3, r4, r5, pc}
 80251d0:	24000834 	.word	0x24000834
 80251d4:	08037776 	.word	0x08037776
 80251d8:	0803778d 	.word	0x0803778d
 80251dc:	abcd330e 	.word	0xabcd330e
 80251e0:	e66d1234 	.word	0xe66d1234
 80251e4:	0005deec 	.word	0x0005deec

080251e8 <_strtol_l.isra.0>:
 80251e8:	2b24      	cmp	r3, #36	@ 0x24
 80251ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80251ee:	4686      	mov	lr, r0
 80251f0:	4690      	mov	r8, r2
 80251f2:	d801      	bhi.n	80251f8 <_strtol_l.isra.0+0x10>
 80251f4:	2b01      	cmp	r3, #1
 80251f6:	d106      	bne.n	8025206 <_strtol_l.isra.0+0x1e>
 80251f8:	f000 fbc8 	bl	802598c <__errno>
 80251fc:	2316      	movs	r3, #22
 80251fe:	6003      	str	r3, [r0, #0]
 8025200:	2000      	movs	r0, #0
 8025202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025206:	4834      	ldr	r0, [pc, #208]	@ (80252d8 <_strtol_l.isra.0+0xf0>)
 8025208:	460d      	mov	r5, r1
 802520a:	462a      	mov	r2, r5
 802520c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025210:	5d06      	ldrb	r6, [r0, r4]
 8025212:	f016 0608 	ands.w	r6, r6, #8
 8025216:	d1f8      	bne.n	802520a <_strtol_l.isra.0+0x22>
 8025218:	2c2d      	cmp	r4, #45	@ 0x2d
 802521a:	d110      	bne.n	802523e <_strtol_l.isra.0+0x56>
 802521c:	782c      	ldrb	r4, [r5, #0]
 802521e:	2601      	movs	r6, #1
 8025220:	1c95      	adds	r5, r2, #2
 8025222:	f033 0210 	bics.w	r2, r3, #16
 8025226:	d115      	bne.n	8025254 <_strtol_l.isra.0+0x6c>
 8025228:	2c30      	cmp	r4, #48	@ 0x30
 802522a:	d10d      	bne.n	8025248 <_strtol_l.isra.0+0x60>
 802522c:	782a      	ldrb	r2, [r5, #0]
 802522e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8025232:	2a58      	cmp	r2, #88	@ 0x58
 8025234:	d108      	bne.n	8025248 <_strtol_l.isra.0+0x60>
 8025236:	786c      	ldrb	r4, [r5, #1]
 8025238:	3502      	adds	r5, #2
 802523a:	2310      	movs	r3, #16
 802523c:	e00a      	b.n	8025254 <_strtol_l.isra.0+0x6c>
 802523e:	2c2b      	cmp	r4, #43	@ 0x2b
 8025240:	bf04      	itt	eq
 8025242:	782c      	ldrbeq	r4, [r5, #0]
 8025244:	1c95      	addeq	r5, r2, #2
 8025246:	e7ec      	b.n	8025222 <_strtol_l.isra.0+0x3a>
 8025248:	2b00      	cmp	r3, #0
 802524a:	d1f6      	bne.n	802523a <_strtol_l.isra.0+0x52>
 802524c:	2c30      	cmp	r4, #48	@ 0x30
 802524e:	bf14      	ite	ne
 8025250:	230a      	movne	r3, #10
 8025252:	2308      	moveq	r3, #8
 8025254:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8025258:	f10c 3cff 	add.w	ip, ip, #4294967295
 802525c:	2200      	movs	r2, #0
 802525e:	fbbc f9f3 	udiv	r9, ip, r3
 8025262:	4610      	mov	r0, r2
 8025264:	fb03 ca19 	mls	sl, r3, r9, ip
 8025268:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 802526c:	2f09      	cmp	r7, #9
 802526e:	d80f      	bhi.n	8025290 <_strtol_l.isra.0+0xa8>
 8025270:	463c      	mov	r4, r7
 8025272:	42a3      	cmp	r3, r4
 8025274:	dd1b      	ble.n	80252ae <_strtol_l.isra.0+0xc6>
 8025276:	1c57      	adds	r7, r2, #1
 8025278:	d007      	beq.n	802528a <_strtol_l.isra.0+0xa2>
 802527a:	4581      	cmp	r9, r0
 802527c:	d314      	bcc.n	80252a8 <_strtol_l.isra.0+0xc0>
 802527e:	d101      	bne.n	8025284 <_strtol_l.isra.0+0x9c>
 8025280:	45a2      	cmp	sl, r4
 8025282:	db11      	blt.n	80252a8 <_strtol_l.isra.0+0xc0>
 8025284:	fb00 4003 	mla	r0, r0, r3, r4
 8025288:	2201      	movs	r2, #1
 802528a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802528e:	e7eb      	b.n	8025268 <_strtol_l.isra.0+0x80>
 8025290:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8025294:	2f19      	cmp	r7, #25
 8025296:	d801      	bhi.n	802529c <_strtol_l.isra.0+0xb4>
 8025298:	3c37      	subs	r4, #55	@ 0x37
 802529a:	e7ea      	b.n	8025272 <_strtol_l.isra.0+0x8a>
 802529c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80252a0:	2f19      	cmp	r7, #25
 80252a2:	d804      	bhi.n	80252ae <_strtol_l.isra.0+0xc6>
 80252a4:	3c57      	subs	r4, #87	@ 0x57
 80252a6:	e7e4      	b.n	8025272 <_strtol_l.isra.0+0x8a>
 80252a8:	f04f 32ff 	mov.w	r2, #4294967295
 80252ac:	e7ed      	b.n	802528a <_strtol_l.isra.0+0xa2>
 80252ae:	1c53      	adds	r3, r2, #1
 80252b0:	d108      	bne.n	80252c4 <_strtol_l.isra.0+0xdc>
 80252b2:	2322      	movs	r3, #34	@ 0x22
 80252b4:	f8ce 3000 	str.w	r3, [lr]
 80252b8:	4660      	mov	r0, ip
 80252ba:	f1b8 0f00 	cmp.w	r8, #0
 80252be:	d0a0      	beq.n	8025202 <_strtol_l.isra.0+0x1a>
 80252c0:	1e69      	subs	r1, r5, #1
 80252c2:	e006      	b.n	80252d2 <_strtol_l.isra.0+0xea>
 80252c4:	b106      	cbz	r6, 80252c8 <_strtol_l.isra.0+0xe0>
 80252c6:	4240      	negs	r0, r0
 80252c8:	f1b8 0f00 	cmp.w	r8, #0
 80252cc:	d099      	beq.n	8025202 <_strtol_l.isra.0+0x1a>
 80252ce:	2a00      	cmp	r2, #0
 80252d0:	d1f6      	bne.n	80252c0 <_strtol_l.isra.0+0xd8>
 80252d2:	f8c8 1000 	str.w	r1, [r8]
 80252d6:	e794      	b.n	8025202 <_strtol_l.isra.0+0x1a>
 80252d8:	08037819 	.word	0x08037819

080252dc <strtol>:
 80252dc:	4613      	mov	r3, r2
 80252de:	460a      	mov	r2, r1
 80252e0:	4601      	mov	r1, r0
 80252e2:	4802      	ldr	r0, [pc, #8]	@ (80252ec <strtol+0x10>)
 80252e4:	6800      	ldr	r0, [r0, #0]
 80252e6:	f7ff bf7f 	b.w	80251e8 <_strtol_l.isra.0>
 80252ea:	bf00      	nop
 80252ec:	24000834 	.word	0x24000834

080252f0 <std>:
 80252f0:	2300      	movs	r3, #0
 80252f2:	b510      	push	{r4, lr}
 80252f4:	4604      	mov	r4, r0
 80252f6:	e9c0 3300 	strd	r3, r3, [r0]
 80252fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80252fe:	6083      	str	r3, [r0, #8]
 8025300:	8181      	strh	r1, [r0, #12]
 8025302:	6643      	str	r3, [r0, #100]	@ 0x64
 8025304:	81c2      	strh	r2, [r0, #14]
 8025306:	6183      	str	r3, [r0, #24]
 8025308:	4619      	mov	r1, r3
 802530a:	2208      	movs	r2, #8
 802530c:	305c      	adds	r0, #92	@ 0x5c
 802530e:	f000 fa3d 	bl	802578c <memset>
 8025312:	4b0d      	ldr	r3, [pc, #52]	@ (8025348 <std+0x58>)
 8025314:	6263      	str	r3, [r4, #36]	@ 0x24
 8025316:	4b0d      	ldr	r3, [pc, #52]	@ (802534c <std+0x5c>)
 8025318:	62a3      	str	r3, [r4, #40]	@ 0x28
 802531a:	4b0d      	ldr	r3, [pc, #52]	@ (8025350 <std+0x60>)
 802531c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802531e:	4b0d      	ldr	r3, [pc, #52]	@ (8025354 <std+0x64>)
 8025320:	6323      	str	r3, [r4, #48]	@ 0x30
 8025322:	4b0d      	ldr	r3, [pc, #52]	@ (8025358 <std+0x68>)
 8025324:	6224      	str	r4, [r4, #32]
 8025326:	429c      	cmp	r4, r3
 8025328:	d006      	beq.n	8025338 <std+0x48>
 802532a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802532e:	4294      	cmp	r4, r2
 8025330:	d002      	beq.n	8025338 <std+0x48>
 8025332:	33d0      	adds	r3, #208	@ 0xd0
 8025334:	429c      	cmp	r4, r3
 8025336:	d105      	bne.n	8025344 <std+0x54>
 8025338:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802533c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025340:	f000 bb4e 	b.w	80259e0 <__retarget_lock_init_recursive>
 8025344:	bd10      	pop	{r4, pc}
 8025346:	bf00      	nop
 8025348:	08025589 	.word	0x08025589
 802534c:	080255ab 	.word	0x080255ab
 8025350:	080255e3 	.word	0x080255e3
 8025354:	08025607 	.word	0x08025607
 8025358:	240054c0 	.word	0x240054c0

0802535c <stdio_exit_handler>:
 802535c:	4a02      	ldr	r2, [pc, #8]	@ (8025368 <stdio_exit_handler+0xc>)
 802535e:	4903      	ldr	r1, [pc, #12]	@ (802536c <stdio_exit_handler+0x10>)
 8025360:	4803      	ldr	r0, [pc, #12]	@ (8025370 <stdio_exit_handler+0x14>)
 8025362:	f000 b87b 	b.w	802545c <_fwalk_sglue>
 8025366:	bf00      	nop
 8025368:	24000828 	.word	0x24000828
 802536c:	0802614d 	.word	0x0802614d
 8025370:	24000838 	.word	0x24000838

08025374 <cleanup_stdio>:
 8025374:	6841      	ldr	r1, [r0, #4]
 8025376:	4b0c      	ldr	r3, [pc, #48]	@ (80253a8 <cleanup_stdio+0x34>)
 8025378:	4299      	cmp	r1, r3
 802537a:	b510      	push	{r4, lr}
 802537c:	4604      	mov	r4, r0
 802537e:	d001      	beq.n	8025384 <cleanup_stdio+0x10>
 8025380:	f000 fee4 	bl	802614c <_fflush_r>
 8025384:	68a1      	ldr	r1, [r4, #8]
 8025386:	4b09      	ldr	r3, [pc, #36]	@ (80253ac <cleanup_stdio+0x38>)
 8025388:	4299      	cmp	r1, r3
 802538a:	d002      	beq.n	8025392 <cleanup_stdio+0x1e>
 802538c:	4620      	mov	r0, r4
 802538e:	f000 fedd 	bl	802614c <_fflush_r>
 8025392:	68e1      	ldr	r1, [r4, #12]
 8025394:	4b06      	ldr	r3, [pc, #24]	@ (80253b0 <cleanup_stdio+0x3c>)
 8025396:	4299      	cmp	r1, r3
 8025398:	d004      	beq.n	80253a4 <cleanup_stdio+0x30>
 802539a:	4620      	mov	r0, r4
 802539c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253a0:	f000 bed4 	b.w	802614c <_fflush_r>
 80253a4:	bd10      	pop	{r4, pc}
 80253a6:	bf00      	nop
 80253a8:	240054c0 	.word	0x240054c0
 80253ac:	24005528 	.word	0x24005528
 80253b0:	24005590 	.word	0x24005590

080253b4 <global_stdio_init.part.0>:
 80253b4:	b510      	push	{r4, lr}
 80253b6:	4b0b      	ldr	r3, [pc, #44]	@ (80253e4 <global_stdio_init.part.0+0x30>)
 80253b8:	4c0b      	ldr	r4, [pc, #44]	@ (80253e8 <global_stdio_init.part.0+0x34>)
 80253ba:	4a0c      	ldr	r2, [pc, #48]	@ (80253ec <global_stdio_init.part.0+0x38>)
 80253bc:	601a      	str	r2, [r3, #0]
 80253be:	4620      	mov	r0, r4
 80253c0:	2200      	movs	r2, #0
 80253c2:	2104      	movs	r1, #4
 80253c4:	f7ff ff94 	bl	80252f0 <std>
 80253c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80253cc:	2201      	movs	r2, #1
 80253ce:	2109      	movs	r1, #9
 80253d0:	f7ff ff8e 	bl	80252f0 <std>
 80253d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80253d8:	2202      	movs	r2, #2
 80253da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80253de:	2112      	movs	r1, #18
 80253e0:	f7ff bf86 	b.w	80252f0 <std>
 80253e4:	240055f8 	.word	0x240055f8
 80253e8:	240054c0 	.word	0x240054c0
 80253ec:	0802535d 	.word	0x0802535d

080253f0 <__sfp_lock_acquire>:
 80253f0:	4801      	ldr	r0, [pc, #4]	@ (80253f8 <__sfp_lock_acquire+0x8>)
 80253f2:	f000 baf6 	b.w	80259e2 <__retarget_lock_acquire_recursive>
 80253f6:	bf00      	nop
 80253f8:	24005601 	.word	0x24005601

080253fc <__sfp_lock_release>:
 80253fc:	4801      	ldr	r0, [pc, #4]	@ (8025404 <__sfp_lock_release+0x8>)
 80253fe:	f000 baf1 	b.w	80259e4 <__retarget_lock_release_recursive>
 8025402:	bf00      	nop
 8025404:	24005601 	.word	0x24005601

08025408 <__sinit>:
 8025408:	b510      	push	{r4, lr}
 802540a:	4604      	mov	r4, r0
 802540c:	f7ff fff0 	bl	80253f0 <__sfp_lock_acquire>
 8025410:	6a23      	ldr	r3, [r4, #32]
 8025412:	b11b      	cbz	r3, 802541c <__sinit+0x14>
 8025414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025418:	f7ff bff0 	b.w	80253fc <__sfp_lock_release>
 802541c:	4b04      	ldr	r3, [pc, #16]	@ (8025430 <__sinit+0x28>)
 802541e:	6223      	str	r3, [r4, #32]
 8025420:	4b04      	ldr	r3, [pc, #16]	@ (8025434 <__sinit+0x2c>)
 8025422:	681b      	ldr	r3, [r3, #0]
 8025424:	2b00      	cmp	r3, #0
 8025426:	d1f5      	bne.n	8025414 <__sinit+0xc>
 8025428:	f7ff ffc4 	bl	80253b4 <global_stdio_init.part.0>
 802542c:	e7f2      	b.n	8025414 <__sinit+0xc>
 802542e:	bf00      	nop
 8025430:	08025375 	.word	0x08025375
 8025434:	240055f8 	.word	0x240055f8

08025438 <fiprintf>:
 8025438:	b40e      	push	{r1, r2, r3}
 802543a:	b503      	push	{r0, r1, lr}
 802543c:	4601      	mov	r1, r0
 802543e:	ab03      	add	r3, sp, #12
 8025440:	4805      	ldr	r0, [pc, #20]	@ (8025458 <fiprintf+0x20>)
 8025442:	f853 2b04 	ldr.w	r2, [r3], #4
 8025446:	6800      	ldr	r0, [r0, #0]
 8025448:	9301      	str	r3, [sp, #4]
 802544a:	f000 fb57 	bl	8025afc <_vfiprintf_r>
 802544e:	b002      	add	sp, #8
 8025450:	f85d eb04 	ldr.w	lr, [sp], #4
 8025454:	b003      	add	sp, #12
 8025456:	4770      	bx	lr
 8025458:	24000834 	.word	0x24000834

0802545c <_fwalk_sglue>:
 802545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025460:	4607      	mov	r7, r0
 8025462:	4688      	mov	r8, r1
 8025464:	4614      	mov	r4, r2
 8025466:	2600      	movs	r6, #0
 8025468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802546c:	f1b9 0901 	subs.w	r9, r9, #1
 8025470:	d505      	bpl.n	802547e <_fwalk_sglue+0x22>
 8025472:	6824      	ldr	r4, [r4, #0]
 8025474:	2c00      	cmp	r4, #0
 8025476:	d1f7      	bne.n	8025468 <_fwalk_sglue+0xc>
 8025478:	4630      	mov	r0, r6
 802547a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802547e:	89ab      	ldrh	r3, [r5, #12]
 8025480:	2b01      	cmp	r3, #1
 8025482:	d907      	bls.n	8025494 <_fwalk_sglue+0x38>
 8025484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025488:	3301      	adds	r3, #1
 802548a:	d003      	beq.n	8025494 <_fwalk_sglue+0x38>
 802548c:	4629      	mov	r1, r5
 802548e:	4638      	mov	r0, r7
 8025490:	47c0      	blx	r8
 8025492:	4306      	orrs	r6, r0
 8025494:	3568      	adds	r5, #104	@ 0x68
 8025496:	e7e9      	b.n	802546c <_fwalk_sglue+0x10>

08025498 <iprintf>:
 8025498:	b40f      	push	{r0, r1, r2, r3}
 802549a:	b507      	push	{r0, r1, r2, lr}
 802549c:	4906      	ldr	r1, [pc, #24]	@ (80254b8 <iprintf+0x20>)
 802549e:	ab04      	add	r3, sp, #16
 80254a0:	6808      	ldr	r0, [r1, #0]
 80254a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80254a6:	6881      	ldr	r1, [r0, #8]
 80254a8:	9301      	str	r3, [sp, #4]
 80254aa:	f000 fb27 	bl	8025afc <_vfiprintf_r>
 80254ae:	b003      	add	sp, #12
 80254b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80254b4:	b004      	add	sp, #16
 80254b6:	4770      	bx	lr
 80254b8:	24000834 	.word	0x24000834

080254bc <putchar>:
 80254bc:	4b02      	ldr	r3, [pc, #8]	@ (80254c8 <putchar+0xc>)
 80254be:	4601      	mov	r1, r0
 80254c0:	6818      	ldr	r0, [r3, #0]
 80254c2:	6882      	ldr	r2, [r0, #8]
 80254c4:	f000 becc 	b.w	8026260 <_putc_r>
 80254c8:	24000834 	.word	0x24000834

080254cc <_puts_r>:
 80254cc:	6a03      	ldr	r3, [r0, #32]
 80254ce:	b570      	push	{r4, r5, r6, lr}
 80254d0:	6884      	ldr	r4, [r0, #8]
 80254d2:	4605      	mov	r5, r0
 80254d4:	460e      	mov	r6, r1
 80254d6:	b90b      	cbnz	r3, 80254dc <_puts_r+0x10>
 80254d8:	f7ff ff96 	bl	8025408 <__sinit>
 80254dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80254de:	07db      	lsls	r3, r3, #31
 80254e0:	d405      	bmi.n	80254ee <_puts_r+0x22>
 80254e2:	89a3      	ldrh	r3, [r4, #12]
 80254e4:	0598      	lsls	r0, r3, #22
 80254e6:	d402      	bmi.n	80254ee <_puts_r+0x22>
 80254e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80254ea:	f000 fa7a 	bl	80259e2 <__retarget_lock_acquire_recursive>
 80254ee:	89a3      	ldrh	r3, [r4, #12]
 80254f0:	0719      	lsls	r1, r3, #28
 80254f2:	d502      	bpl.n	80254fa <_puts_r+0x2e>
 80254f4:	6923      	ldr	r3, [r4, #16]
 80254f6:	2b00      	cmp	r3, #0
 80254f8:	d135      	bne.n	8025566 <_puts_r+0x9a>
 80254fa:	4621      	mov	r1, r4
 80254fc:	4628      	mov	r0, r5
 80254fe:	f000 f8c5 	bl	802568c <__swsetup_r>
 8025502:	b380      	cbz	r0, 8025566 <_puts_r+0x9a>
 8025504:	f04f 35ff 	mov.w	r5, #4294967295
 8025508:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802550a:	07da      	lsls	r2, r3, #31
 802550c:	d405      	bmi.n	802551a <_puts_r+0x4e>
 802550e:	89a3      	ldrh	r3, [r4, #12]
 8025510:	059b      	lsls	r3, r3, #22
 8025512:	d402      	bmi.n	802551a <_puts_r+0x4e>
 8025514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8025516:	f000 fa65 	bl	80259e4 <__retarget_lock_release_recursive>
 802551a:	4628      	mov	r0, r5
 802551c:	bd70      	pop	{r4, r5, r6, pc}
 802551e:	2b00      	cmp	r3, #0
 8025520:	da04      	bge.n	802552c <_puts_r+0x60>
 8025522:	69a2      	ldr	r2, [r4, #24]
 8025524:	429a      	cmp	r2, r3
 8025526:	dc17      	bgt.n	8025558 <_puts_r+0x8c>
 8025528:	290a      	cmp	r1, #10
 802552a:	d015      	beq.n	8025558 <_puts_r+0x8c>
 802552c:	6823      	ldr	r3, [r4, #0]
 802552e:	1c5a      	adds	r2, r3, #1
 8025530:	6022      	str	r2, [r4, #0]
 8025532:	7019      	strb	r1, [r3, #0]
 8025534:	68a3      	ldr	r3, [r4, #8]
 8025536:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802553a:	3b01      	subs	r3, #1
 802553c:	60a3      	str	r3, [r4, #8]
 802553e:	2900      	cmp	r1, #0
 8025540:	d1ed      	bne.n	802551e <_puts_r+0x52>
 8025542:	2b00      	cmp	r3, #0
 8025544:	da11      	bge.n	802556a <_puts_r+0x9e>
 8025546:	4622      	mov	r2, r4
 8025548:	210a      	movs	r1, #10
 802554a:	4628      	mov	r0, r5
 802554c:	f000 f85f 	bl	802560e <__swbuf_r>
 8025550:	3001      	adds	r0, #1
 8025552:	d0d7      	beq.n	8025504 <_puts_r+0x38>
 8025554:	250a      	movs	r5, #10
 8025556:	e7d7      	b.n	8025508 <_puts_r+0x3c>
 8025558:	4622      	mov	r2, r4
 802555a:	4628      	mov	r0, r5
 802555c:	f000 f857 	bl	802560e <__swbuf_r>
 8025560:	3001      	adds	r0, #1
 8025562:	d1e7      	bne.n	8025534 <_puts_r+0x68>
 8025564:	e7ce      	b.n	8025504 <_puts_r+0x38>
 8025566:	3e01      	subs	r6, #1
 8025568:	e7e4      	b.n	8025534 <_puts_r+0x68>
 802556a:	6823      	ldr	r3, [r4, #0]
 802556c:	1c5a      	adds	r2, r3, #1
 802556e:	6022      	str	r2, [r4, #0]
 8025570:	220a      	movs	r2, #10
 8025572:	701a      	strb	r2, [r3, #0]
 8025574:	e7ee      	b.n	8025554 <_puts_r+0x88>
	...

08025578 <puts>:
 8025578:	4b02      	ldr	r3, [pc, #8]	@ (8025584 <puts+0xc>)
 802557a:	4601      	mov	r1, r0
 802557c:	6818      	ldr	r0, [r3, #0]
 802557e:	f7ff bfa5 	b.w	80254cc <_puts_r>
 8025582:	bf00      	nop
 8025584:	24000834 	.word	0x24000834

08025588 <__sread>:
 8025588:	b510      	push	{r4, lr}
 802558a:	460c      	mov	r4, r1
 802558c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025590:	f000 f9b4 	bl	80258fc <_read_r>
 8025594:	2800      	cmp	r0, #0
 8025596:	bfab      	itete	ge
 8025598:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802559a:	89a3      	ldrhlt	r3, [r4, #12]
 802559c:	181b      	addge	r3, r3, r0
 802559e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80255a2:	bfac      	ite	ge
 80255a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80255a6:	81a3      	strhlt	r3, [r4, #12]
 80255a8:	bd10      	pop	{r4, pc}

080255aa <__swrite>:
 80255aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255ae:	461f      	mov	r7, r3
 80255b0:	898b      	ldrh	r3, [r1, #12]
 80255b2:	05db      	lsls	r3, r3, #23
 80255b4:	4605      	mov	r5, r0
 80255b6:	460c      	mov	r4, r1
 80255b8:	4616      	mov	r6, r2
 80255ba:	d505      	bpl.n	80255c8 <__swrite+0x1e>
 80255bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255c0:	2302      	movs	r3, #2
 80255c2:	2200      	movs	r2, #0
 80255c4:	f000 f988 	bl	80258d8 <_lseek_r>
 80255c8:	89a3      	ldrh	r3, [r4, #12]
 80255ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80255ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80255d2:	81a3      	strh	r3, [r4, #12]
 80255d4:	4632      	mov	r2, r6
 80255d6:	463b      	mov	r3, r7
 80255d8:	4628      	mov	r0, r5
 80255da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80255de:	f000 b9c3 	b.w	8025968 <_write_r>

080255e2 <__sseek>:
 80255e2:	b510      	push	{r4, lr}
 80255e4:	460c      	mov	r4, r1
 80255e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80255ea:	f000 f975 	bl	80258d8 <_lseek_r>
 80255ee:	1c43      	adds	r3, r0, #1
 80255f0:	89a3      	ldrh	r3, [r4, #12]
 80255f2:	bf15      	itete	ne
 80255f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80255f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80255fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80255fe:	81a3      	strheq	r3, [r4, #12]
 8025600:	bf18      	it	ne
 8025602:	81a3      	strhne	r3, [r4, #12]
 8025604:	bd10      	pop	{r4, pc}

08025606 <__sclose>:
 8025606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802560a:	f000 b955 	b.w	80258b8 <_close_r>

0802560e <__swbuf_r>:
 802560e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025610:	460e      	mov	r6, r1
 8025612:	4614      	mov	r4, r2
 8025614:	4605      	mov	r5, r0
 8025616:	b118      	cbz	r0, 8025620 <__swbuf_r+0x12>
 8025618:	6a03      	ldr	r3, [r0, #32]
 802561a:	b90b      	cbnz	r3, 8025620 <__swbuf_r+0x12>
 802561c:	f7ff fef4 	bl	8025408 <__sinit>
 8025620:	69a3      	ldr	r3, [r4, #24]
 8025622:	60a3      	str	r3, [r4, #8]
 8025624:	89a3      	ldrh	r3, [r4, #12]
 8025626:	071a      	lsls	r2, r3, #28
 8025628:	d501      	bpl.n	802562e <__swbuf_r+0x20>
 802562a:	6923      	ldr	r3, [r4, #16]
 802562c:	b943      	cbnz	r3, 8025640 <__swbuf_r+0x32>
 802562e:	4621      	mov	r1, r4
 8025630:	4628      	mov	r0, r5
 8025632:	f000 f82b 	bl	802568c <__swsetup_r>
 8025636:	b118      	cbz	r0, 8025640 <__swbuf_r+0x32>
 8025638:	f04f 37ff 	mov.w	r7, #4294967295
 802563c:	4638      	mov	r0, r7
 802563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025640:	6823      	ldr	r3, [r4, #0]
 8025642:	6922      	ldr	r2, [r4, #16]
 8025644:	1a98      	subs	r0, r3, r2
 8025646:	6963      	ldr	r3, [r4, #20]
 8025648:	b2f6      	uxtb	r6, r6
 802564a:	4283      	cmp	r3, r0
 802564c:	4637      	mov	r7, r6
 802564e:	dc05      	bgt.n	802565c <__swbuf_r+0x4e>
 8025650:	4621      	mov	r1, r4
 8025652:	4628      	mov	r0, r5
 8025654:	f000 fd7a 	bl	802614c <_fflush_r>
 8025658:	2800      	cmp	r0, #0
 802565a:	d1ed      	bne.n	8025638 <__swbuf_r+0x2a>
 802565c:	68a3      	ldr	r3, [r4, #8]
 802565e:	3b01      	subs	r3, #1
 8025660:	60a3      	str	r3, [r4, #8]
 8025662:	6823      	ldr	r3, [r4, #0]
 8025664:	1c5a      	adds	r2, r3, #1
 8025666:	6022      	str	r2, [r4, #0]
 8025668:	701e      	strb	r6, [r3, #0]
 802566a:	6962      	ldr	r2, [r4, #20]
 802566c:	1c43      	adds	r3, r0, #1
 802566e:	429a      	cmp	r2, r3
 8025670:	d004      	beq.n	802567c <__swbuf_r+0x6e>
 8025672:	89a3      	ldrh	r3, [r4, #12]
 8025674:	07db      	lsls	r3, r3, #31
 8025676:	d5e1      	bpl.n	802563c <__swbuf_r+0x2e>
 8025678:	2e0a      	cmp	r6, #10
 802567a:	d1df      	bne.n	802563c <__swbuf_r+0x2e>
 802567c:	4621      	mov	r1, r4
 802567e:	4628      	mov	r0, r5
 8025680:	f000 fd64 	bl	802614c <_fflush_r>
 8025684:	2800      	cmp	r0, #0
 8025686:	d0d9      	beq.n	802563c <__swbuf_r+0x2e>
 8025688:	e7d6      	b.n	8025638 <__swbuf_r+0x2a>
	...

0802568c <__swsetup_r>:
 802568c:	b538      	push	{r3, r4, r5, lr}
 802568e:	4b29      	ldr	r3, [pc, #164]	@ (8025734 <__swsetup_r+0xa8>)
 8025690:	4605      	mov	r5, r0
 8025692:	6818      	ldr	r0, [r3, #0]
 8025694:	460c      	mov	r4, r1
 8025696:	b118      	cbz	r0, 80256a0 <__swsetup_r+0x14>
 8025698:	6a03      	ldr	r3, [r0, #32]
 802569a:	b90b      	cbnz	r3, 80256a0 <__swsetup_r+0x14>
 802569c:	f7ff feb4 	bl	8025408 <__sinit>
 80256a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256a4:	0719      	lsls	r1, r3, #28
 80256a6:	d422      	bmi.n	80256ee <__swsetup_r+0x62>
 80256a8:	06da      	lsls	r2, r3, #27
 80256aa:	d407      	bmi.n	80256bc <__swsetup_r+0x30>
 80256ac:	2209      	movs	r2, #9
 80256ae:	602a      	str	r2, [r5, #0]
 80256b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80256b4:	81a3      	strh	r3, [r4, #12]
 80256b6:	f04f 30ff 	mov.w	r0, #4294967295
 80256ba:	e033      	b.n	8025724 <__swsetup_r+0x98>
 80256bc:	0758      	lsls	r0, r3, #29
 80256be:	d512      	bpl.n	80256e6 <__swsetup_r+0x5a>
 80256c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80256c2:	b141      	cbz	r1, 80256d6 <__swsetup_r+0x4a>
 80256c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80256c8:	4299      	cmp	r1, r3
 80256ca:	d002      	beq.n	80256d2 <__swsetup_r+0x46>
 80256cc:	4628      	mov	r0, r5
 80256ce:	f000 f9a1 	bl	8025a14 <_free_r>
 80256d2:	2300      	movs	r3, #0
 80256d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80256d6:	89a3      	ldrh	r3, [r4, #12]
 80256d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80256dc:	81a3      	strh	r3, [r4, #12]
 80256de:	2300      	movs	r3, #0
 80256e0:	6063      	str	r3, [r4, #4]
 80256e2:	6923      	ldr	r3, [r4, #16]
 80256e4:	6023      	str	r3, [r4, #0]
 80256e6:	89a3      	ldrh	r3, [r4, #12]
 80256e8:	f043 0308 	orr.w	r3, r3, #8
 80256ec:	81a3      	strh	r3, [r4, #12]
 80256ee:	6923      	ldr	r3, [r4, #16]
 80256f0:	b94b      	cbnz	r3, 8025706 <__swsetup_r+0x7a>
 80256f2:	89a3      	ldrh	r3, [r4, #12]
 80256f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80256f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80256fc:	d003      	beq.n	8025706 <__swsetup_r+0x7a>
 80256fe:	4621      	mov	r1, r4
 8025700:	4628      	mov	r0, r5
 8025702:	f000 fd71 	bl	80261e8 <__smakebuf_r>
 8025706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802570a:	f013 0201 	ands.w	r2, r3, #1
 802570e:	d00a      	beq.n	8025726 <__swsetup_r+0x9a>
 8025710:	2200      	movs	r2, #0
 8025712:	60a2      	str	r2, [r4, #8]
 8025714:	6962      	ldr	r2, [r4, #20]
 8025716:	4252      	negs	r2, r2
 8025718:	61a2      	str	r2, [r4, #24]
 802571a:	6922      	ldr	r2, [r4, #16]
 802571c:	b942      	cbnz	r2, 8025730 <__swsetup_r+0xa4>
 802571e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8025722:	d1c5      	bne.n	80256b0 <__swsetup_r+0x24>
 8025724:	bd38      	pop	{r3, r4, r5, pc}
 8025726:	0799      	lsls	r1, r3, #30
 8025728:	bf58      	it	pl
 802572a:	6962      	ldrpl	r2, [r4, #20]
 802572c:	60a2      	str	r2, [r4, #8]
 802572e:	e7f4      	b.n	802571a <__swsetup_r+0x8e>
 8025730:	2000      	movs	r0, #0
 8025732:	e7f7      	b.n	8025724 <__swsetup_r+0x98>
 8025734:	24000834 	.word	0x24000834

08025738 <memcmp>:
 8025738:	b510      	push	{r4, lr}
 802573a:	3901      	subs	r1, #1
 802573c:	4402      	add	r2, r0
 802573e:	4290      	cmp	r0, r2
 8025740:	d101      	bne.n	8025746 <memcmp+0xe>
 8025742:	2000      	movs	r0, #0
 8025744:	e005      	b.n	8025752 <memcmp+0x1a>
 8025746:	7803      	ldrb	r3, [r0, #0]
 8025748:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802574c:	42a3      	cmp	r3, r4
 802574e:	d001      	beq.n	8025754 <memcmp+0x1c>
 8025750:	1b18      	subs	r0, r3, r4
 8025752:	bd10      	pop	{r4, pc}
 8025754:	3001      	adds	r0, #1
 8025756:	e7f2      	b.n	802573e <memcmp+0x6>

08025758 <memmove>:
 8025758:	4288      	cmp	r0, r1
 802575a:	b510      	push	{r4, lr}
 802575c:	eb01 0402 	add.w	r4, r1, r2
 8025760:	d902      	bls.n	8025768 <memmove+0x10>
 8025762:	4284      	cmp	r4, r0
 8025764:	4623      	mov	r3, r4
 8025766:	d807      	bhi.n	8025778 <memmove+0x20>
 8025768:	1e43      	subs	r3, r0, #1
 802576a:	42a1      	cmp	r1, r4
 802576c:	d008      	beq.n	8025780 <memmove+0x28>
 802576e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025772:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025776:	e7f8      	b.n	802576a <memmove+0x12>
 8025778:	4402      	add	r2, r0
 802577a:	4601      	mov	r1, r0
 802577c:	428a      	cmp	r2, r1
 802577e:	d100      	bne.n	8025782 <memmove+0x2a>
 8025780:	bd10      	pop	{r4, pc}
 8025782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802578a:	e7f7      	b.n	802577c <memmove+0x24>

0802578c <memset>:
 802578c:	4402      	add	r2, r0
 802578e:	4603      	mov	r3, r0
 8025790:	4293      	cmp	r3, r2
 8025792:	d100      	bne.n	8025796 <memset+0xa>
 8025794:	4770      	bx	lr
 8025796:	f803 1b01 	strb.w	r1, [r3], #1
 802579a:	e7f9      	b.n	8025790 <memset+0x4>

0802579c <strchr>:
 802579c:	b2c9      	uxtb	r1, r1
 802579e:	4603      	mov	r3, r0
 80257a0:	4618      	mov	r0, r3
 80257a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80257a6:	b112      	cbz	r2, 80257ae <strchr+0x12>
 80257a8:	428a      	cmp	r2, r1
 80257aa:	d1f9      	bne.n	80257a0 <strchr+0x4>
 80257ac:	4770      	bx	lr
 80257ae:	2900      	cmp	r1, #0
 80257b0:	bf18      	it	ne
 80257b2:	2000      	movne	r0, #0
 80257b4:	4770      	bx	lr

080257b6 <strncmp>:
 80257b6:	b510      	push	{r4, lr}
 80257b8:	b16a      	cbz	r2, 80257d6 <strncmp+0x20>
 80257ba:	3901      	subs	r1, #1
 80257bc:	1884      	adds	r4, r0, r2
 80257be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80257c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80257c6:	429a      	cmp	r2, r3
 80257c8:	d103      	bne.n	80257d2 <strncmp+0x1c>
 80257ca:	42a0      	cmp	r0, r4
 80257cc:	d001      	beq.n	80257d2 <strncmp+0x1c>
 80257ce:	2a00      	cmp	r2, #0
 80257d0:	d1f5      	bne.n	80257be <strncmp+0x8>
 80257d2:	1ad0      	subs	r0, r2, r3
 80257d4:	bd10      	pop	{r4, pc}
 80257d6:	4610      	mov	r0, r2
 80257d8:	e7fc      	b.n	80257d4 <strncmp+0x1e>

080257da <strncpy>:
 80257da:	b510      	push	{r4, lr}
 80257dc:	3901      	subs	r1, #1
 80257de:	4603      	mov	r3, r0
 80257e0:	b132      	cbz	r2, 80257f0 <strncpy+0x16>
 80257e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80257e6:	f803 4b01 	strb.w	r4, [r3], #1
 80257ea:	3a01      	subs	r2, #1
 80257ec:	2c00      	cmp	r4, #0
 80257ee:	d1f7      	bne.n	80257e0 <strncpy+0x6>
 80257f0:	441a      	add	r2, r3
 80257f2:	2100      	movs	r1, #0
 80257f4:	4293      	cmp	r3, r2
 80257f6:	d100      	bne.n	80257fa <strncpy+0x20>
 80257f8:	bd10      	pop	{r4, pc}
 80257fa:	f803 1b01 	strb.w	r1, [r3], #1
 80257fe:	e7f9      	b.n	80257f4 <strncpy+0x1a>

08025800 <strrchr>:
 8025800:	b538      	push	{r3, r4, r5, lr}
 8025802:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8025806:	4603      	mov	r3, r0
 8025808:	d10e      	bne.n	8025828 <strrchr+0x28>
 802580a:	4621      	mov	r1, r4
 802580c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025810:	f7ff bfc4 	b.w	802579c <strchr>
 8025814:	1c43      	adds	r3, r0, #1
 8025816:	4605      	mov	r5, r0
 8025818:	4621      	mov	r1, r4
 802581a:	4618      	mov	r0, r3
 802581c:	f7ff ffbe 	bl	802579c <strchr>
 8025820:	2800      	cmp	r0, #0
 8025822:	d1f7      	bne.n	8025814 <strrchr+0x14>
 8025824:	4628      	mov	r0, r5
 8025826:	bd38      	pop	{r3, r4, r5, pc}
 8025828:	2500      	movs	r5, #0
 802582a:	e7f5      	b.n	8025818 <strrchr+0x18>

0802582c <strstr>:
 802582c:	780a      	ldrb	r2, [r1, #0]
 802582e:	b570      	push	{r4, r5, r6, lr}
 8025830:	b96a      	cbnz	r2, 802584e <strstr+0x22>
 8025832:	bd70      	pop	{r4, r5, r6, pc}
 8025834:	429a      	cmp	r2, r3
 8025836:	d109      	bne.n	802584c <strstr+0x20>
 8025838:	460c      	mov	r4, r1
 802583a:	4605      	mov	r5, r0
 802583c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8025840:	2b00      	cmp	r3, #0
 8025842:	d0f6      	beq.n	8025832 <strstr+0x6>
 8025844:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8025848:	429e      	cmp	r6, r3
 802584a:	d0f7      	beq.n	802583c <strstr+0x10>
 802584c:	3001      	adds	r0, #1
 802584e:	7803      	ldrb	r3, [r0, #0]
 8025850:	2b00      	cmp	r3, #0
 8025852:	d1ef      	bne.n	8025834 <strstr+0x8>
 8025854:	4618      	mov	r0, r3
 8025856:	e7ec      	b.n	8025832 <strstr+0x6>

08025858 <_raise_r>:
 8025858:	291f      	cmp	r1, #31
 802585a:	b538      	push	{r3, r4, r5, lr}
 802585c:	4605      	mov	r5, r0
 802585e:	460c      	mov	r4, r1
 8025860:	d904      	bls.n	802586c <_raise_r+0x14>
 8025862:	2316      	movs	r3, #22
 8025864:	6003      	str	r3, [r0, #0]
 8025866:	f04f 30ff 	mov.w	r0, #4294967295
 802586a:	bd38      	pop	{r3, r4, r5, pc}
 802586c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802586e:	b112      	cbz	r2, 8025876 <_raise_r+0x1e>
 8025870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8025874:	b94b      	cbnz	r3, 802588a <_raise_r+0x32>
 8025876:	4628      	mov	r0, r5
 8025878:	f000 f864 	bl	8025944 <_getpid_r>
 802587c:	4622      	mov	r2, r4
 802587e:	4601      	mov	r1, r0
 8025880:	4628      	mov	r0, r5
 8025882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025886:	f000 b84b 	b.w	8025920 <_kill_r>
 802588a:	2b01      	cmp	r3, #1
 802588c:	d00a      	beq.n	80258a4 <_raise_r+0x4c>
 802588e:	1c59      	adds	r1, r3, #1
 8025890:	d103      	bne.n	802589a <_raise_r+0x42>
 8025892:	2316      	movs	r3, #22
 8025894:	6003      	str	r3, [r0, #0]
 8025896:	2001      	movs	r0, #1
 8025898:	e7e7      	b.n	802586a <_raise_r+0x12>
 802589a:	2100      	movs	r1, #0
 802589c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80258a0:	4620      	mov	r0, r4
 80258a2:	4798      	blx	r3
 80258a4:	2000      	movs	r0, #0
 80258a6:	e7e0      	b.n	802586a <_raise_r+0x12>

080258a8 <raise>:
 80258a8:	4b02      	ldr	r3, [pc, #8]	@ (80258b4 <raise+0xc>)
 80258aa:	4601      	mov	r1, r0
 80258ac:	6818      	ldr	r0, [r3, #0]
 80258ae:	f7ff bfd3 	b.w	8025858 <_raise_r>
 80258b2:	bf00      	nop
 80258b4:	24000834 	.word	0x24000834

080258b8 <_close_r>:
 80258b8:	b538      	push	{r3, r4, r5, lr}
 80258ba:	4d06      	ldr	r5, [pc, #24]	@ (80258d4 <_close_r+0x1c>)
 80258bc:	2300      	movs	r3, #0
 80258be:	4604      	mov	r4, r0
 80258c0:	4608      	mov	r0, r1
 80258c2:	602b      	str	r3, [r5, #0]
 80258c4:	f7db fe1f 	bl	8001506 <_close>
 80258c8:	1c43      	adds	r3, r0, #1
 80258ca:	d102      	bne.n	80258d2 <_close_r+0x1a>
 80258cc:	682b      	ldr	r3, [r5, #0]
 80258ce:	b103      	cbz	r3, 80258d2 <_close_r+0x1a>
 80258d0:	6023      	str	r3, [r4, #0]
 80258d2:	bd38      	pop	{r3, r4, r5, pc}
 80258d4:	240055fc 	.word	0x240055fc

080258d8 <_lseek_r>:
 80258d8:	b538      	push	{r3, r4, r5, lr}
 80258da:	4d07      	ldr	r5, [pc, #28]	@ (80258f8 <_lseek_r+0x20>)
 80258dc:	4604      	mov	r4, r0
 80258de:	4608      	mov	r0, r1
 80258e0:	4611      	mov	r1, r2
 80258e2:	2200      	movs	r2, #0
 80258e4:	602a      	str	r2, [r5, #0]
 80258e6:	461a      	mov	r2, r3
 80258e8:	f7db fe34 	bl	8001554 <_lseek>
 80258ec:	1c43      	adds	r3, r0, #1
 80258ee:	d102      	bne.n	80258f6 <_lseek_r+0x1e>
 80258f0:	682b      	ldr	r3, [r5, #0]
 80258f2:	b103      	cbz	r3, 80258f6 <_lseek_r+0x1e>
 80258f4:	6023      	str	r3, [r4, #0]
 80258f6:	bd38      	pop	{r3, r4, r5, pc}
 80258f8:	240055fc 	.word	0x240055fc

080258fc <_read_r>:
 80258fc:	b538      	push	{r3, r4, r5, lr}
 80258fe:	4d07      	ldr	r5, [pc, #28]	@ (802591c <_read_r+0x20>)
 8025900:	4604      	mov	r4, r0
 8025902:	4608      	mov	r0, r1
 8025904:	4611      	mov	r1, r2
 8025906:	2200      	movs	r2, #0
 8025908:	602a      	str	r2, [r5, #0]
 802590a:	461a      	mov	r2, r3
 802590c:	f7db fdde 	bl	80014cc <_read>
 8025910:	1c43      	adds	r3, r0, #1
 8025912:	d102      	bne.n	802591a <_read_r+0x1e>
 8025914:	682b      	ldr	r3, [r5, #0]
 8025916:	b103      	cbz	r3, 802591a <_read_r+0x1e>
 8025918:	6023      	str	r3, [r4, #0]
 802591a:	bd38      	pop	{r3, r4, r5, pc}
 802591c:	240055fc 	.word	0x240055fc

08025920 <_kill_r>:
 8025920:	b538      	push	{r3, r4, r5, lr}
 8025922:	4d07      	ldr	r5, [pc, #28]	@ (8025940 <_kill_r+0x20>)
 8025924:	2300      	movs	r3, #0
 8025926:	4604      	mov	r4, r0
 8025928:	4608      	mov	r0, r1
 802592a:	4611      	mov	r1, r2
 802592c:	602b      	str	r3, [r5, #0]
 802592e:	f7db fdb2 	bl	8001496 <_kill>
 8025932:	1c43      	adds	r3, r0, #1
 8025934:	d102      	bne.n	802593c <_kill_r+0x1c>
 8025936:	682b      	ldr	r3, [r5, #0]
 8025938:	b103      	cbz	r3, 802593c <_kill_r+0x1c>
 802593a:	6023      	str	r3, [r4, #0]
 802593c:	bd38      	pop	{r3, r4, r5, pc}
 802593e:	bf00      	nop
 8025940:	240055fc 	.word	0x240055fc

08025944 <_getpid_r>:
 8025944:	f7db bd9f 	b.w	8001486 <_getpid>

08025948 <_sbrk_r>:
 8025948:	b538      	push	{r3, r4, r5, lr}
 802594a:	4d06      	ldr	r5, [pc, #24]	@ (8025964 <_sbrk_r+0x1c>)
 802594c:	2300      	movs	r3, #0
 802594e:	4604      	mov	r4, r0
 8025950:	4608      	mov	r0, r1
 8025952:	602b      	str	r3, [r5, #0]
 8025954:	f7db fe0c 	bl	8001570 <_sbrk>
 8025958:	1c43      	adds	r3, r0, #1
 802595a:	d102      	bne.n	8025962 <_sbrk_r+0x1a>
 802595c:	682b      	ldr	r3, [r5, #0]
 802595e:	b103      	cbz	r3, 8025962 <_sbrk_r+0x1a>
 8025960:	6023      	str	r3, [r4, #0]
 8025962:	bd38      	pop	{r3, r4, r5, pc}
 8025964:	240055fc 	.word	0x240055fc

08025968 <_write_r>:
 8025968:	b538      	push	{r3, r4, r5, lr}
 802596a:	4d07      	ldr	r5, [pc, #28]	@ (8025988 <_write_r+0x20>)
 802596c:	4604      	mov	r4, r0
 802596e:	4608      	mov	r0, r1
 8025970:	4611      	mov	r1, r2
 8025972:	2200      	movs	r2, #0
 8025974:	602a      	str	r2, [r5, #0]
 8025976:	461a      	mov	r2, r3
 8025978:	f7da ff04 	bl	8000784 <_write>
 802597c:	1c43      	adds	r3, r0, #1
 802597e:	d102      	bne.n	8025986 <_write_r+0x1e>
 8025980:	682b      	ldr	r3, [r5, #0]
 8025982:	b103      	cbz	r3, 8025986 <_write_r+0x1e>
 8025984:	6023      	str	r3, [r4, #0]
 8025986:	bd38      	pop	{r3, r4, r5, pc}
 8025988:	240055fc 	.word	0x240055fc

0802598c <__errno>:
 802598c:	4b01      	ldr	r3, [pc, #4]	@ (8025994 <__errno+0x8>)
 802598e:	6818      	ldr	r0, [r3, #0]
 8025990:	4770      	bx	lr
 8025992:	bf00      	nop
 8025994:	24000834 	.word	0x24000834

08025998 <__libc_init_array>:
 8025998:	b570      	push	{r4, r5, r6, lr}
 802599a:	4d0d      	ldr	r5, [pc, #52]	@ (80259d0 <__libc_init_array+0x38>)
 802599c:	4c0d      	ldr	r4, [pc, #52]	@ (80259d4 <__libc_init_array+0x3c>)
 802599e:	1b64      	subs	r4, r4, r5
 80259a0:	10a4      	asrs	r4, r4, #2
 80259a2:	2600      	movs	r6, #0
 80259a4:	42a6      	cmp	r6, r4
 80259a6:	d109      	bne.n	80259bc <__libc_init_array+0x24>
 80259a8:	4d0b      	ldr	r5, [pc, #44]	@ (80259d8 <__libc_init_array+0x40>)
 80259aa:	4c0c      	ldr	r4, [pc, #48]	@ (80259dc <__libc_init_array+0x44>)
 80259ac:	f000 fcae 	bl	802630c <_init>
 80259b0:	1b64      	subs	r4, r4, r5
 80259b2:	10a4      	asrs	r4, r4, #2
 80259b4:	2600      	movs	r6, #0
 80259b6:	42a6      	cmp	r6, r4
 80259b8:	d105      	bne.n	80259c6 <__libc_init_array+0x2e>
 80259ba:	bd70      	pop	{r4, r5, r6, pc}
 80259bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80259c0:	4798      	blx	r3
 80259c2:	3601      	adds	r6, #1
 80259c4:	e7ee      	b.n	80259a4 <__libc_init_array+0xc>
 80259c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80259ca:	4798      	blx	r3
 80259cc:	3601      	adds	r6, #1
 80259ce:	e7f2      	b.n	80259b6 <__libc_init_array+0x1e>
 80259d0:	08037924 	.word	0x08037924
 80259d4:	08037924 	.word	0x08037924
 80259d8:	08037924 	.word	0x08037924
 80259dc:	08037928 	.word	0x08037928

080259e0 <__retarget_lock_init_recursive>:
 80259e0:	4770      	bx	lr

080259e2 <__retarget_lock_acquire_recursive>:
 80259e2:	4770      	bx	lr

080259e4 <__retarget_lock_release_recursive>:
 80259e4:	4770      	bx	lr

080259e6 <strcpy>:
 80259e6:	4603      	mov	r3, r0
 80259e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80259ec:	f803 2b01 	strb.w	r2, [r3], #1
 80259f0:	2a00      	cmp	r2, #0
 80259f2:	d1f9      	bne.n	80259e8 <strcpy+0x2>
 80259f4:	4770      	bx	lr

080259f6 <memcpy>:
 80259f6:	440a      	add	r2, r1
 80259f8:	4291      	cmp	r1, r2
 80259fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80259fe:	d100      	bne.n	8025a02 <memcpy+0xc>
 8025a00:	4770      	bx	lr
 8025a02:	b510      	push	{r4, lr}
 8025a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025a0c:	4291      	cmp	r1, r2
 8025a0e:	d1f9      	bne.n	8025a04 <memcpy+0xe>
 8025a10:	bd10      	pop	{r4, pc}
	...

08025a14 <_free_r>:
 8025a14:	b538      	push	{r3, r4, r5, lr}
 8025a16:	4605      	mov	r5, r0
 8025a18:	2900      	cmp	r1, #0
 8025a1a:	d041      	beq.n	8025aa0 <_free_r+0x8c>
 8025a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025a20:	1f0c      	subs	r4, r1, #4
 8025a22:	2b00      	cmp	r3, #0
 8025a24:	bfb8      	it	lt
 8025a26:	18e4      	addlt	r4, r4, r3
 8025a28:	f7ff fba4 	bl	8025174 <__malloc_lock>
 8025a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8025aa4 <_free_r+0x90>)
 8025a2e:	6813      	ldr	r3, [r2, #0]
 8025a30:	b933      	cbnz	r3, 8025a40 <_free_r+0x2c>
 8025a32:	6063      	str	r3, [r4, #4]
 8025a34:	6014      	str	r4, [r2, #0]
 8025a36:	4628      	mov	r0, r5
 8025a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025a3c:	f7ff bba0 	b.w	8025180 <__malloc_unlock>
 8025a40:	42a3      	cmp	r3, r4
 8025a42:	d908      	bls.n	8025a56 <_free_r+0x42>
 8025a44:	6820      	ldr	r0, [r4, #0]
 8025a46:	1821      	adds	r1, r4, r0
 8025a48:	428b      	cmp	r3, r1
 8025a4a:	bf01      	itttt	eq
 8025a4c:	6819      	ldreq	r1, [r3, #0]
 8025a4e:	685b      	ldreq	r3, [r3, #4]
 8025a50:	1809      	addeq	r1, r1, r0
 8025a52:	6021      	streq	r1, [r4, #0]
 8025a54:	e7ed      	b.n	8025a32 <_free_r+0x1e>
 8025a56:	461a      	mov	r2, r3
 8025a58:	685b      	ldr	r3, [r3, #4]
 8025a5a:	b10b      	cbz	r3, 8025a60 <_free_r+0x4c>
 8025a5c:	42a3      	cmp	r3, r4
 8025a5e:	d9fa      	bls.n	8025a56 <_free_r+0x42>
 8025a60:	6811      	ldr	r1, [r2, #0]
 8025a62:	1850      	adds	r0, r2, r1
 8025a64:	42a0      	cmp	r0, r4
 8025a66:	d10b      	bne.n	8025a80 <_free_r+0x6c>
 8025a68:	6820      	ldr	r0, [r4, #0]
 8025a6a:	4401      	add	r1, r0
 8025a6c:	1850      	adds	r0, r2, r1
 8025a6e:	4283      	cmp	r3, r0
 8025a70:	6011      	str	r1, [r2, #0]
 8025a72:	d1e0      	bne.n	8025a36 <_free_r+0x22>
 8025a74:	6818      	ldr	r0, [r3, #0]
 8025a76:	685b      	ldr	r3, [r3, #4]
 8025a78:	6053      	str	r3, [r2, #4]
 8025a7a:	4408      	add	r0, r1
 8025a7c:	6010      	str	r0, [r2, #0]
 8025a7e:	e7da      	b.n	8025a36 <_free_r+0x22>
 8025a80:	d902      	bls.n	8025a88 <_free_r+0x74>
 8025a82:	230c      	movs	r3, #12
 8025a84:	602b      	str	r3, [r5, #0]
 8025a86:	e7d6      	b.n	8025a36 <_free_r+0x22>
 8025a88:	6820      	ldr	r0, [r4, #0]
 8025a8a:	1821      	adds	r1, r4, r0
 8025a8c:	428b      	cmp	r3, r1
 8025a8e:	bf04      	itt	eq
 8025a90:	6819      	ldreq	r1, [r3, #0]
 8025a92:	685b      	ldreq	r3, [r3, #4]
 8025a94:	6063      	str	r3, [r4, #4]
 8025a96:	bf04      	itt	eq
 8025a98:	1809      	addeq	r1, r1, r0
 8025a9a:	6021      	streq	r1, [r4, #0]
 8025a9c:	6054      	str	r4, [r2, #4]
 8025a9e:	e7ca      	b.n	8025a36 <_free_r+0x22>
 8025aa0:	bd38      	pop	{r3, r4, r5, pc}
 8025aa2:	bf00      	nop
 8025aa4:	240054bc 	.word	0x240054bc

08025aa8 <__sfputc_r>:
 8025aa8:	6893      	ldr	r3, [r2, #8]
 8025aaa:	3b01      	subs	r3, #1
 8025aac:	2b00      	cmp	r3, #0
 8025aae:	b410      	push	{r4}
 8025ab0:	6093      	str	r3, [r2, #8]
 8025ab2:	da08      	bge.n	8025ac6 <__sfputc_r+0x1e>
 8025ab4:	6994      	ldr	r4, [r2, #24]
 8025ab6:	42a3      	cmp	r3, r4
 8025ab8:	db01      	blt.n	8025abe <__sfputc_r+0x16>
 8025aba:	290a      	cmp	r1, #10
 8025abc:	d103      	bne.n	8025ac6 <__sfputc_r+0x1e>
 8025abe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025ac2:	f7ff bda4 	b.w	802560e <__swbuf_r>
 8025ac6:	6813      	ldr	r3, [r2, #0]
 8025ac8:	1c58      	adds	r0, r3, #1
 8025aca:	6010      	str	r0, [r2, #0]
 8025acc:	7019      	strb	r1, [r3, #0]
 8025ace:	4608      	mov	r0, r1
 8025ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025ad4:	4770      	bx	lr

08025ad6 <__sfputs_r>:
 8025ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025ad8:	4606      	mov	r6, r0
 8025ada:	460f      	mov	r7, r1
 8025adc:	4614      	mov	r4, r2
 8025ade:	18d5      	adds	r5, r2, r3
 8025ae0:	42ac      	cmp	r4, r5
 8025ae2:	d101      	bne.n	8025ae8 <__sfputs_r+0x12>
 8025ae4:	2000      	movs	r0, #0
 8025ae6:	e007      	b.n	8025af8 <__sfputs_r+0x22>
 8025ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025aec:	463a      	mov	r2, r7
 8025aee:	4630      	mov	r0, r6
 8025af0:	f7ff ffda 	bl	8025aa8 <__sfputc_r>
 8025af4:	1c43      	adds	r3, r0, #1
 8025af6:	d1f3      	bne.n	8025ae0 <__sfputs_r+0xa>
 8025af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08025afc <_vfiprintf_r>:
 8025afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b00:	460d      	mov	r5, r1
 8025b02:	b09d      	sub	sp, #116	@ 0x74
 8025b04:	4614      	mov	r4, r2
 8025b06:	4698      	mov	r8, r3
 8025b08:	4606      	mov	r6, r0
 8025b0a:	b118      	cbz	r0, 8025b14 <_vfiprintf_r+0x18>
 8025b0c:	6a03      	ldr	r3, [r0, #32]
 8025b0e:	b90b      	cbnz	r3, 8025b14 <_vfiprintf_r+0x18>
 8025b10:	f7ff fc7a 	bl	8025408 <__sinit>
 8025b14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025b16:	07d9      	lsls	r1, r3, #31
 8025b18:	d405      	bmi.n	8025b26 <_vfiprintf_r+0x2a>
 8025b1a:	89ab      	ldrh	r3, [r5, #12]
 8025b1c:	059a      	lsls	r2, r3, #22
 8025b1e:	d402      	bmi.n	8025b26 <_vfiprintf_r+0x2a>
 8025b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025b22:	f7ff ff5e 	bl	80259e2 <__retarget_lock_acquire_recursive>
 8025b26:	89ab      	ldrh	r3, [r5, #12]
 8025b28:	071b      	lsls	r3, r3, #28
 8025b2a:	d501      	bpl.n	8025b30 <_vfiprintf_r+0x34>
 8025b2c:	692b      	ldr	r3, [r5, #16]
 8025b2e:	b99b      	cbnz	r3, 8025b58 <_vfiprintf_r+0x5c>
 8025b30:	4629      	mov	r1, r5
 8025b32:	4630      	mov	r0, r6
 8025b34:	f7ff fdaa 	bl	802568c <__swsetup_r>
 8025b38:	b170      	cbz	r0, 8025b58 <_vfiprintf_r+0x5c>
 8025b3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025b3c:	07dc      	lsls	r4, r3, #31
 8025b3e:	d504      	bpl.n	8025b4a <_vfiprintf_r+0x4e>
 8025b40:	f04f 30ff 	mov.w	r0, #4294967295
 8025b44:	b01d      	add	sp, #116	@ 0x74
 8025b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025b4a:	89ab      	ldrh	r3, [r5, #12]
 8025b4c:	0598      	lsls	r0, r3, #22
 8025b4e:	d4f7      	bmi.n	8025b40 <_vfiprintf_r+0x44>
 8025b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025b52:	f7ff ff47 	bl	80259e4 <__retarget_lock_release_recursive>
 8025b56:	e7f3      	b.n	8025b40 <_vfiprintf_r+0x44>
 8025b58:	2300      	movs	r3, #0
 8025b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b5c:	2320      	movs	r3, #32
 8025b5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8025b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8025b66:	2330      	movs	r3, #48	@ 0x30
 8025b68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8025d18 <_vfiprintf_r+0x21c>
 8025b6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8025b70:	f04f 0901 	mov.w	r9, #1
 8025b74:	4623      	mov	r3, r4
 8025b76:	469a      	mov	sl, r3
 8025b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8025b7c:	b10a      	cbz	r2, 8025b82 <_vfiprintf_r+0x86>
 8025b7e:	2a25      	cmp	r2, #37	@ 0x25
 8025b80:	d1f9      	bne.n	8025b76 <_vfiprintf_r+0x7a>
 8025b82:	ebba 0b04 	subs.w	fp, sl, r4
 8025b86:	d00b      	beq.n	8025ba0 <_vfiprintf_r+0xa4>
 8025b88:	465b      	mov	r3, fp
 8025b8a:	4622      	mov	r2, r4
 8025b8c:	4629      	mov	r1, r5
 8025b8e:	4630      	mov	r0, r6
 8025b90:	f7ff ffa1 	bl	8025ad6 <__sfputs_r>
 8025b94:	3001      	adds	r0, #1
 8025b96:	f000 80a7 	beq.w	8025ce8 <_vfiprintf_r+0x1ec>
 8025b9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025b9c:	445a      	add	r2, fp
 8025b9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8025ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8025ba4:	2b00      	cmp	r3, #0
 8025ba6:	f000 809f 	beq.w	8025ce8 <_vfiprintf_r+0x1ec>
 8025baa:	2300      	movs	r3, #0
 8025bac:	f04f 32ff 	mov.w	r2, #4294967295
 8025bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025bb4:	f10a 0a01 	add.w	sl, sl, #1
 8025bb8:	9304      	str	r3, [sp, #16]
 8025bba:	9307      	str	r3, [sp, #28]
 8025bbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025bc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8025bc2:	4654      	mov	r4, sl
 8025bc4:	2205      	movs	r2, #5
 8025bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025bca:	4853      	ldr	r0, [pc, #332]	@ (8025d18 <_vfiprintf_r+0x21c>)
 8025bcc:	f7da fbb0 	bl	8000330 <memchr>
 8025bd0:	9a04      	ldr	r2, [sp, #16]
 8025bd2:	b9d8      	cbnz	r0, 8025c0c <_vfiprintf_r+0x110>
 8025bd4:	06d1      	lsls	r1, r2, #27
 8025bd6:	bf44      	itt	mi
 8025bd8:	2320      	movmi	r3, #32
 8025bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025bde:	0713      	lsls	r3, r2, #28
 8025be0:	bf44      	itt	mi
 8025be2:	232b      	movmi	r3, #43	@ 0x2b
 8025be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025be8:	f89a 3000 	ldrb.w	r3, [sl]
 8025bec:	2b2a      	cmp	r3, #42	@ 0x2a
 8025bee:	d015      	beq.n	8025c1c <_vfiprintf_r+0x120>
 8025bf0:	9a07      	ldr	r2, [sp, #28]
 8025bf2:	4654      	mov	r4, sl
 8025bf4:	2000      	movs	r0, #0
 8025bf6:	f04f 0c0a 	mov.w	ip, #10
 8025bfa:	4621      	mov	r1, r4
 8025bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025c00:	3b30      	subs	r3, #48	@ 0x30
 8025c02:	2b09      	cmp	r3, #9
 8025c04:	d94b      	bls.n	8025c9e <_vfiprintf_r+0x1a2>
 8025c06:	b1b0      	cbz	r0, 8025c36 <_vfiprintf_r+0x13a>
 8025c08:	9207      	str	r2, [sp, #28]
 8025c0a:	e014      	b.n	8025c36 <_vfiprintf_r+0x13a>
 8025c0c:	eba0 0308 	sub.w	r3, r0, r8
 8025c10:	fa09 f303 	lsl.w	r3, r9, r3
 8025c14:	4313      	orrs	r3, r2
 8025c16:	9304      	str	r3, [sp, #16]
 8025c18:	46a2      	mov	sl, r4
 8025c1a:	e7d2      	b.n	8025bc2 <_vfiprintf_r+0xc6>
 8025c1c:	9b03      	ldr	r3, [sp, #12]
 8025c1e:	1d19      	adds	r1, r3, #4
 8025c20:	681b      	ldr	r3, [r3, #0]
 8025c22:	9103      	str	r1, [sp, #12]
 8025c24:	2b00      	cmp	r3, #0
 8025c26:	bfbb      	ittet	lt
 8025c28:	425b      	neglt	r3, r3
 8025c2a:	f042 0202 	orrlt.w	r2, r2, #2
 8025c2e:	9307      	strge	r3, [sp, #28]
 8025c30:	9307      	strlt	r3, [sp, #28]
 8025c32:	bfb8      	it	lt
 8025c34:	9204      	strlt	r2, [sp, #16]
 8025c36:	7823      	ldrb	r3, [r4, #0]
 8025c38:	2b2e      	cmp	r3, #46	@ 0x2e
 8025c3a:	d10a      	bne.n	8025c52 <_vfiprintf_r+0x156>
 8025c3c:	7863      	ldrb	r3, [r4, #1]
 8025c3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8025c40:	d132      	bne.n	8025ca8 <_vfiprintf_r+0x1ac>
 8025c42:	9b03      	ldr	r3, [sp, #12]
 8025c44:	1d1a      	adds	r2, r3, #4
 8025c46:	681b      	ldr	r3, [r3, #0]
 8025c48:	9203      	str	r2, [sp, #12]
 8025c4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025c4e:	3402      	adds	r4, #2
 8025c50:	9305      	str	r3, [sp, #20]
 8025c52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8025d28 <_vfiprintf_r+0x22c>
 8025c56:	7821      	ldrb	r1, [r4, #0]
 8025c58:	2203      	movs	r2, #3
 8025c5a:	4650      	mov	r0, sl
 8025c5c:	f7da fb68 	bl	8000330 <memchr>
 8025c60:	b138      	cbz	r0, 8025c72 <_vfiprintf_r+0x176>
 8025c62:	9b04      	ldr	r3, [sp, #16]
 8025c64:	eba0 000a 	sub.w	r0, r0, sl
 8025c68:	2240      	movs	r2, #64	@ 0x40
 8025c6a:	4082      	lsls	r2, r0
 8025c6c:	4313      	orrs	r3, r2
 8025c6e:	3401      	adds	r4, #1
 8025c70:	9304      	str	r3, [sp, #16]
 8025c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025c76:	4829      	ldr	r0, [pc, #164]	@ (8025d1c <_vfiprintf_r+0x220>)
 8025c78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025c7c:	2206      	movs	r2, #6
 8025c7e:	f7da fb57 	bl	8000330 <memchr>
 8025c82:	2800      	cmp	r0, #0
 8025c84:	d03f      	beq.n	8025d06 <_vfiprintf_r+0x20a>
 8025c86:	4b26      	ldr	r3, [pc, #152]	@ (8025d20 <_vfiprintf_r+0x224>)
 8025c88:	bb1b      	cbnz	r3, 8025cd2 <_vfiprintf_r+0x1d6>
 8025c8a:	9b03      	ldr	r3, [sp, #12]
 8025c8c:	3307      	adds	r3, #7
 8025c8e:	f023 0307 	bic.w	r3, r3, #7
 8025c92:	3308      	adds	r3, #8
 8025c94:	9303      	str	r3, [sp, #12]
 8025c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025c98:	443b      	add	r3, r7
 8025c9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8025c9c:	e76a      	b.n	8025b74 <_vfiprintf_r+0x78>
 8025c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8025ca2:	460c      	mov	r4, r1
 8025ca4:	2001      	movs	r0, #1
 8025ca6:	e7a8      	b.n	8025bfa <_vfiprintf_r+0xfe>
 8025ca8:	2300      	movs	r3, #0
 8025caa:	3401      	adds	r4, #1
 8025cac:	9305      	str	r3, [sp, #20]
 8025cae:	4619      	mov	r1, r3
 8025cb0:	f04f 0c0a 	mov.w	ip, #10
 8025cb4:	4620      	mov	r0, r4
 8025cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025cba:	3a30      	subs	r2, #48	@ 0x30
 8025cbc:	2a09      	cmp	r2, #9
 8025cbe:	d903      	bls.n	8025cc8 <_vfiprintf_r+0x1cc>
 8025cc0:	2b00      	cmp	r3, #0
 8025cc2:	d0c6      	beq.n	8025c52 <_vfiprintf_r+0x156>
 8025cc4:	9105      	str	r1, [sp, #20]
 8025cc6:	e7c4      	b.n	8025c52 <_vfiprintf_r+0x156>
 8025cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8025ccc:	4604      	mov	r4, r0
 8025cce:	2301      	movs	r3, #1
 8025cd0:	e7f0      	b.n	8025cb4 <_vfiprintf_r+0x1b8>
 8025cd2:	ab03      	add	r3, sp, #12
 8025cd4:	9300      	str	r3, [sp, #0]
 8025cd6:	462a      	mov	r2, r5
 8025cd8:	4b12      	ldr	r3, [pc, #72]	@ (8025d24 <_vfiprintf_r+0x228>)
 8025cda:	a904      	add	r1, sp, #16
 8025cdc:	4630      	mov	r0, r6
 8025cde:	f3af 8000 	nop.w
 8025ce2:	4607      	mov	r7, r0
 8025ce4:	1c78      	adds	r0, r7, #1
 8025ce6:	d1d6      	bne.n	8025c96 <_vfiprintf_r+0x19a>
 8025ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8025cea:	07d9      	lsls	r1, r3, #31
 8025cec:	d405      	bmi.n	8025cfa <_vfiprintf_r+0x1fe>
 8025cee:	89ab      	ldrh	r3, [r5, #12]
 8025cf0:	059a      	lsls	r2, r3, #22
 8025cf2:	d402      	bmi.n	8025cfa <_vfiprintf_r+0x1fe>
 8025cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8025cf6:	f7ff fe75 	bl	80259e4 <__retarget_lock_release_recursive>
 8025cfa:	89ab      	ldrh	r3, [r5, #12]
 8025cfc:	065b      	lsls	r3, r3, #25
 8025cfe:	f53f af1f 	bmi.w	8025b40 <_vfiprintf_r+0x44>
 8025d02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025d04:	e71e      	b.n	8025b44 <_vfiprintf_r+0x48>
 8025d06:	ab03      	add	r3, sp, #12
 8025d08:	9300      	str	r3, [sp, #0]
 8025d0a:	462a      	mov	r2, r5
 8025d0c:	4b05      	ldr	r3, [pc, #20]	@ (8025d24 <_vfiprintf_r+0x228>)
 8025d0e:	a904      	add	r1, sp, #16
 8025d10:	4630      	mov	r0, r6
 8025d12:	f000 f879 	bl	8025e08 <_printf_i>
 8025d16:	e7e4      	b.n	8025ce2 <_vfiprintf_r+0x1e6>
 8025d18:	080377e5 	.word	0x080377e5
 8025d1c:	080377ef 	.word	0x080377ef
 8025d20:	00000000 	.word	0x00000000
 8025d24:	08025ad7 	.word	0x08025ad7
 8025d28:	080377eb 	.word	0x080377eb

08025d2c <_printf_common>:
 8025d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025d30:	4616      	mov	r6, r2
 8025d32:	4698      	mov	r8, r3
 8025d34:	688a      	ldr	r2, [r1, #8]
 8025d36:	690b      	ldr	r3, [r1, #16]
 8025d38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025d3c:	4293      	cmp	r3, r2
 8025d3e:	bfb8      	it	lt
 8025d40:	4613      	movlt	r3, r2
 8025d42:	6033      	str	r3, [r6, #0]
 8025d44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8025d48:	4607      	mov	r7, r0
 8025d4a:	460c      	mov	r4, r1
 8025d4c:	b10a      	cbz	r2, 8025d52 <_printf_common+0x26>
 8025d4e:	3301      	adds	r3, #1
 8025d50:	6033      	str	r3, [r6, #0]
 8025d52:	6823      	ldr	r3, [r4, #0]
 8025d54:	0699      	lsls	r1, r3, #26
 8025d56:	bf42      	ittt	mi
 8025d58:	6833      	ldrmi	r3, [r6, #0]
 8025d5a:	3302      	addmi	r3, #2
 8025d5c:	6033      	strmi	r3, [r6, #0]
 8025d5e:	6825      	ldr	r5, [r4, #0]
 8025d60:	f015 0506 	ands.w	r5, r5, #6
 8025d64:	d106      	bne.n	8025d74 <_printf_common+0x48>
 8025d66:	f104 0a19 	add.w	sl, r4, #25
 8025d6a:	68e3      	ldr	r3, [r4, #12]
 8025d6c:	6832      	ldr	r2, [r6, #0]
 8025d6e:	1a9b      	subs	r3, r3, r2
 8025d70:	42ab      	cmp	r3, r5
 8025d72:	dc26      	bgt.n	8025dc2 <_printf_common+0x96>
 8025d74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8025d78:	6822      	ldr	r2, [r4, #0]
 8025d7a:	3b00      	subs	r3, #0
 8025d7c:	bf18      	it	ne
 8025d7e:	2301      	movne	r3, #1
 8025d80:	0692      	lsls	r2, r2, #26
 8025d82:	d42b      	bmi.n	8025ddc <_printf_common+0xb0>
 8025d84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8025d88:	4641      	mov	r1, r8
 8025d8a:	4638      	mov	r0, r7
 8025d8c:	47c8      	blx	r9
 8025d8e:	3001      	adds	r0, #1
 8025d90:	d01e      	beq.n	8025dd0 <_printf_common+0xa4>
 8025d92:	6823      	ldr	r3, [r4, #0]
 8025d94:	6922      	ldr	r2, [r4, #16]
 8025d96:	f003 0306 	and.w	r3, r3, #6
 8025d9a:	2b04      	cmp	r3, #4
 8025d9c:	bf02      	ittt	eq
 8025d9e:	68e5      	ldreq	r5, [r4, #12]
 8025da0:	6833      	ldreq	r3, [r6, #0]
 8025da2:	1aed      	subeq	r5, r5, r3
 8025da4:	68a3      	ldr	r3, [r4, #8]
 8025da6:	bf0c      	ite	eq
 8025da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025dac:	2500      	movne	r5, #0
 8025dae:	4293      	cmp	r3, r2
 8025db0:	bfc4      	itt	gt
 8025db2:	1a9b      	subgt	r3, r3, r2
 8025db4:	18ed      	addgt	r5, r5, r3
 8025db6:	2600      	movs	r6, #0
 8025db8:	341a      	adds	r4, #26
 8025dba:	42b5      	cmp	r5, r6
 8025dbc:	d11a      	bne.n	8025df4 <_printf_common+0xc8>
 8025dbe:	2000      	movs	r0, #0
 8025dc0:	e008      	b.n	8025dd4 <_printf_common+0xa8>
 8025dc2:	2301      	movs	r3, #1
 8025dc4:	4652      	mov	r2, sl
 8025dc6:	4641      	mov	r1, r8
 8025dc8:	4638      	mov	r0, r7
 8025dca:	47c8      	blx	r9
 8025dcc:	3001      	adds	r0, #1
 8025dce:	d103      	bne.n	8025dd8 <_printf_common+0xac>
 8025dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8025dd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025dd8:	3501      	adds	r5, #1
 8025dda:	e7c6      	b.n	8025d6a <_printf_common+0x3e>
 8025ddc:	18e1      	adds	r1, r4, r3
 8025dde:	1c5a      	adds	r2, r3, #1
 8025de0:	2030      	movs	r0, #48	@ 0x30
 8025de2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8025de6:	4422      	add	r2, r4
 8025de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8025dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8025df0:	3302      	adds	r3, #2
 8025df2:	e7c7      	b.n	8025d84 <_printf_common+0x58>
 8025df4:	2301      	movs	r3, #1
 8025df6:	4622      	mov	r2, r4
 8025df8:	4641      	mov	r1, r8
 8025dfa:	4638      	mov	r0, r7
 8025dfc:	47c8      	blx	r9
 8025dfe:	3001      	adds	r0, #1
 8025e00:	d0e6      	beq.n	8025dd0 <_printf_common+0xa4>
 8025e02:	3601      	adds	r6, #1
 8025e04:	e7d9      	b.n	8025dba <_printf_common+0x8e>
	...

08025e08 <_printf_i>:
 8025e08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025e0c:	7e0f      	ldrb	r7, [r1, #24]
 8025e0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025e10:	2f78      	cmp	r7, #120	@ 0x78
 8025e12:	4691      	mov	r9, r2
 8025e14:	4680      	mov	r8, r0
 8025e16:	460c      	mov	r4, r1
 8025e18:	469a      	mov	sl, r3
 8025e1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8025e1e:	d807      	bhi.n	8025e30 <_printf_i+0x28>
 8025e20:	2f62      	cmp	r7, #98	@ 0x62
 8025e22:	d80a      	bhi.n	8025e3a <_printf_i+0x32>
 8025e24:	2f00      	cmp	r7, #0
 8025e26:	f000 80d1 	beq.w	8025fcc <_printf_i+0x1c4>
 8025e2a:	2f58      	cmp	r7, #88	@ 0x58
 8025e2c:	f000 80b8 	beq.w	8025fa0 <_printf_i+0x198>
 8025e30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025e34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8025e38:	e03a      	b.n	8025eb0 <_printf_i+0xa8>
 8025e3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8025e3e:	2b15      	cmp	r3, #21
 8025e40:	d8f6      	bhi.n	8025e30 <_printf_i+0x28>
 8025e42:	a101      	add	r1, pc, #4	@ (adr r1, 8025e48 <_printf_i+0x40>)
 8025e44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025e48:	08025ea1 	.word	0x08025ea1
 8025e4c:	08025eb5 	.word	0x08025eb5
 8025e50:	08025e31 	.word	0x08025e31
 8025e54:	08025e31 	.word	0x08025e31
 8025e58:	08025e31 	.word	0x08025e31
 8025e5c:	08025e31 	.word	0x08025e31
 8025e60:	08025eb5 	.word	0x08025eb5
 8025e64:	08025e31 	.word	0x08025e31
 8025e68:	08025e31 	.word	0x08025e31
 8025e6c:	08025e31 	.word	0x08025e31
 8025e70:	08025e31 	.word	0x08025e31
 8025e74:	08025fb3 	.word	0x08025fb3
 8025e78:	08025edf 	.word	0x08025edf
 8025e7c:	08025f6d 	.word	0x08025f6d
 8025e80:	08025e31 	.word	0x08025e31
 8025e84:	08025e31 	.word	0x08025e31
 8025e88:	08025fd5 	.word	0x08025fd5
 8025e8c:	08025e31 	.word	0x08025e31
 8025e90:	08025edf 	.word	0x08025edf
 8025e94:	08025e31 	.word	0x08025e31
 8025e98:	08025e31 	.word	0x08025e31
 8025e9c:	08025f75 	.word	0x08025f75
 8025ea0:	6833      	ldr	r3, [r6, #0]
 8025ea2:	1d1a      	adds	r2, r3, #4
 8025ea4:	681b      	ldr	r3, [r3, #0]
 8025ea6:	6032      	str	r2, [r6, #0]
 8025ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025eac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025eb0:	2301      	movs	r3, #1
 8025eb2:	e09c      	b.n	8025fee <_printf_i+0x1e6>
 8025eb4:	6833      	ldr	r3, [r6, #0]
 8025eb6:	6820      	ldr	r0, [r4, #0]
 8025eb8:	1d19      	adds	r1, r3, #4
 8025eba:	6031      	str	r1, [r6, #0]
 8025ebc:	0606      	lsls	r6, r0, #24
 8025ebe:	d501      	bpl.n	8025ec4 <_printf_i+0xbc>
 8025ec0:	681d      	ldr	r5, [r3, #0]
 8025ec2:	e003      	b.n	8025ecc <_printf_i+0xc4>
 8025ec4:	0645      	lsls	r5, r0, #25
 8025ec6:	d5fb      	bpl.n	8025ec0 <_printf_i+0xb8>
 8025ec8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025ecc:	2d00      	cmp	r5, #0
 8025ece:	da03      	bge.n	8025ed8 <_printf_i+0xd0>
 8025ed0:	232d      	movs	r3, #45	@ 0x2d
 8025ed2:	426d      	negs	r5, r5
 8025ed4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025ed8:	4858      	ldr	r0, [pc, #352]	@ (802603c <_printf_i+0x234>)
 8025eda:	230a      	movs	r3, #10
 8025edc:	e011      	b.n	8025f02 <_printf_i+0xfa>
 8025ede:	6821      	ldr	r1, [r4, #0]
 8025ee0:	6833      	ldr	r3, [r6, #0]
 8025ee2:	0608      	lsls	r0, r1, #24
 8025ee4:	f853 5b04 	ldr.w	r5, [r3], #4
 8025ee8:	d402      	bmi.n	8025ef0 <_printf_i+0xe8>
 8025eea:	0649      	lsls	r1, r1, #25
 8025eec:	bf48      	it	mi
 8025eee:	b2ad      	uxthmi	r5, r5
 8025ef0:	2f6f      	cmp	r7, #111	@ 0x6f
 8025ef2:	4852      	ldr	r0, [pc, #328]	@ (802603c <_printf_i+0x234>)
 8025ef4:	6033      	str	r3, [r6, #0]
 8025ef6:	bf14      	ite	ne
 8025ef8:	230a      	movne	r3, #10
 8025efa:	2308      	moveq	r3, #8
 8025efc:	2100      	movs	r1, #0
 8025efe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8025f02:	6866      	ldr	r6, [r4, #4]
 8025f04:	60a6      	str	r6, [r4, #8]
 8025f06:	2e00      	cmp	r6, #0
 8025f08:	db05      	blt.n	8025f16 <_printf_i+0x10e>
 8025f0a:	6821      	ldr	r1, [r4, #0]
 8025f0c:	432e      	orrs	r6, r5
 8025f0e:	f021 0104 	bic.w	r1, r1, #4
 8025f12:	6021      	str	r1, [r4, #0]
 8025f14:	d04b      	beq.n	8025fae <_printf_i+0x1a6>
 8025f16:	4616      	mov	r6, r2
 8025f18:	fbb5 f1f3 	udiv	r1, r5, r3
 8025f1c:	fb03 5711 	mls	r7, r3, r1, r5
 8025f20:	5dc7      	ldrb	r7, [r0, r7]
 8025f22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025f26:	462f      	mov	r7, r5
 8025f28:	42bb      	cmp	r3, r7
 8025f2a:	460d      	mov	r5, r1
 8025f2c:	d9f4      	bls.n	8025f18 <_printf_i+0x110>
 8025f2e:	2b08      	cmp	r3, #8
 8025f30:	d10b      	bne.n	8025f4a <_printf_i+0x142>
 8025f32:	6823      	ldr	r3, [r4, #0]
 8025f34:	07df      	lsls	r7, r3, #31
 8025f36:	d508      	bpl.n	8025f4a <_printf_i+0x142>
 8025f38:	6923      	ldr	r3, [r4, #16]
 8025f3a:	6861      	ldr	r1, [r4, #4]
 8025f3c:	4299      	cmp	r1, r3
 8025f3e:	bfde      	ittt	le
 8025f40:	2330      	movle	r3, #48	@ 0x30
 8025f42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025f46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8025f4a:	1b92      	subs	r2, r2, r6
 8025f4c:	6122      	str	r2, [r4, #16]
 8025f4e:	f8cd a000 	str.w	sl, [sp]
 8025f52:	464b      	mov	r3, r9
 8025f54:	aa03      	add	r2, sp, #12
 8025f56:	4621      	mov	r1, r4
 8025f58:	4640      	mov	r0, r8
 8025f5a:	f7ff fee7 	bl	8025d2c <_printf_common>
 8025f5e:	3001      	adds	r0, #1
 8025f60:	d14a      	bne.n	8025ff8 <_printf_i+0x1f0>
 8025f62:	f04f 30ff 	mov.w	r0, #4294967295
 8025f66:	b004      	add	sp, #16
 8025f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025f6c:	6823      	ldr	r3, [r4, #0]
 8025f6e:	f043 0320 	orr.w	r3, r3, #32
 8025f72:	6023      	str	r3, [r4, #0]
 8025f74:	4832      	ldr	r0, [pc, #200]	@ (8026040 <_printf_i+0x238>)
 8025f76:	2778      	movs	r7, #120	@ 0x78
 8025f78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8025f7c:	6823      	ldr	r3, [r4, #0]
 8025f7e:	6831      	ldr	r1, [r6, #0]
 8025f80:	061f      	lsls	r7, r3, #24
 8025f82:	f851 5b04 	ldr.w	r5, [r1], #4
 8025f86:	d402      	bmi.n	8025f8e <_printf_i+0x186>
 8025f88:	065f      	lsls	r7, r3, #25
 8025f8a:	bf48      	it	mi
 8025f8c:	b2ad      	uxthmi	r5, r5
 8025f8e:	6031      	str	r1, [r6, #0]
 8025f90:	07d9      	lsls	r1, r3, #31
 8025f92:	bf44      	itt	mi
 8025f94:	f043 0320 	orrmi.w	r3, r3, #32
 8025f98:	6023      	strmi	r3, [r4, #0]
 8025f9a:	b11d      	cbz	r5, 8025fa4 <_printf_i+0x19c>
 8025f9c:	2310      	movs	r3, #16
 8025f9e:	e7ad      	b.n	8025efc <_printf_i+0xf4>
 8025fa0:	4826      	ldr	r0, [pc, #152]	@ (802603c <_printf_i+0x234>)
 8025fa2:	e7e9      	b.n	8025f78 <_printf_i+0x170>
 8025fa4:	6823      	ldr	r3, [r4, #0]
 8025fa6:	f023 0320 	bic.w	r3, r3, #32
 8025faa:	6023      	str	r3, [r4, #0]
 8025fac:	e7f6      	b.n	8025f9c <_printf_i+0x194>
 8025fae:	4616      	mov	r6, r2
 8025fb0:	e7bd      	b.n	8025f2e <_printf_i+0x126>
 8025fb2:	6833      	ldr	r3, [r6, #0]
 8025fb4:	6825      	ldr	r5, [r4, #0]
 8025fb6:	6961      	ldr	r1, [r4, #20]
 8025fb8:	1d18      	adds	r0, r3, #4
 8025fba:	6030      	str	r0, [r6, #0]
 8025fbc:	062e      	lsls	r6, r5, #24
 8025fbe:	681b      	ldr	r3, [r3, #0]
 8025fc0:	d501      	bpl.n	8025fc6 <_printf_i+0x1be>
 8025fc2:	6019      	str	r1, [r3, #0]
 8025fc4:	e002      	b.n	8025fcc <_printf_i+0x1c4>
 8025fc6:	0668      	lsls	r0, r5, #25
 8025fc8:	d5fb      	bpl.n	8025fc2 <_printf_i+0x1ba>
 8025fca:	8019      	strh	r1, [r3, #0]
 8025fcc:	2300      	movs	r3, #0
 8025fce:	6123      	str	r3, [r4, #16]
 8025fd0:	4616      	mov	r6, r2
 8025fd2:	e7bc      	b.n	8025f4e <_printf_i+0x146>
 8025fd4:	6833      	ldr	r3, [r6, #0]
 8025fd6:	1d1a      	adds	r2, r3, #4
 8025fd8:	6032      	str	r2, [r6, #0]
 8025fda:	681e      	ldr	r6, [r3, #0]
 8025fdc:	6862      	ldr	r2, [r4, #4]
 8025fde:	2100      	movs	r1, #0
 8025fe0:	4630      	mov	r0, r6
 8025fe2:	f7da f9a5 	bl	8000330 <memchr>
 8025fe6:	b108      	cbz	r0, 8025fec <_printf_i+0x1e4>
 8025fe8:	1b80      	subs	r0, r0, r6
 8025fea:	6060      	str	r0, [r4, #4]
 8025fec:	6863      	ldr	r3, [r4, #4]
 8025fee:	6123      	str	r3, [r4, #16]
 8025ff0:	2300      	movs	r3, #0
 8025ff2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025ff6:	e7aa      	b.n	8025f4e <_printf_i+0x146>
 8025ff8:	6923      	ldr	r3, [r4, #16]
 8025ffa:	4632      	mov	r2, r6
 8025ffc:	4649      	mov	r1, r9
 8025ffe:	4640      	mov	r0, r8
 8026000:	47d0      	blx	sl
 8026002:	3001      	adds	r0, #1
 8026004:	d0ad      	beq.n	8025f62 <_printf_i+0x15a>
 8026006:	6823      	ldr	r3, [r4, #0]
 8026008:	079b      	lsls	r3, r3, #30
 802600a:	d413      	bmi.n	8026034 <_printf_i+0x22c>
 802600c:	68e0      	ldr	r0, [r4, #12]
 802600e:	9b03      	ldr	r3, [sp, #12]
 8026010:	4298      	cmp	r0, r3
 8026012:	bfb8      	it	lt
 8026014:	4618      	movlt	r0, r3
 8026016:	e7a6      	b.n	8025f66 <_printf_i+0x15e>
 8026018:	2301      	movs	r3, #1
 802601a:	4632      	mov	r2, r6
 802601c:	4649      	mov	r1, r9
 802601e:	4640      	mov	r0, r8
 8026020:	47d0      	blx	sl
 8026022:	3001      	adds	r0, #1
 8026024:	d09d      	beq.n	8025f62 <_printf_i+0x15a>
 8026026:	3501      	adds	r5, #1
 8026028:	68e3      	ldr	r3, [r4, #12]
 802602a:	9903      	ldr	r1, [sp, #12]
 802602c:	1a5b      	subs	r3, r3, r1
 802602e:	42ab      	cmp	r3, r5
 8026030:	dcf2      	bgt.n	8026018 <_printf_i+0x210>
 8026032:	e7eb      	b.n	802600c <_printf_i+0x204>
 8026034:	2500      	movs	r5, #0
 8026036:	f104 0619 	add.w	r6, r4, #25
 802603a:	e7f5      	b.n	8026028 <_printf_i+0x220>
 802603c:	080377f6 	.word	0x080377f6
 8026040:	08037807 	.word	0x08037807

08026044 <__sflush_r>:
 8026044:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8026048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802604c:	0716      	lsls	r6, r2, #28
 802604e:	4605      	mov	r5, r0
 8026050:	460c      	mov	r4, r1
 8026052:	d454      	bmi.n	80260fe <__sflush_r+0xba>
 8026054:	684b      	ldr	r3, [r1, #4]
 8026056:	2b00      	cmp	r3, #0
 8026058:	dc02      	bgt.n	8026060 <__sflush_r+0x1c>
 802605a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802605c:	2b00      	cmp	r3, #0
 802605e:	dd48      	ble.n	80260f2 <__sflush_r+0xae>
 8026060:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8026062:	2e00      	cmp	r6, #0
 8026064:	d045      	beq.n	80260f2 <__sflush_r+0xae>
 8026066:	2300      	movs	r3, #0
 8026068:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802606c:	682f      	ldr	r7, [r5, #0]
 802606e:	6a21      	ldr	r1, [r4, #32]
 8026070:	602b      	str	r3, [r5, #0]
 8026072:	d030      	beq.n	80260d6 <__sflush_r+0x92>
 8026074:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8026076:	89a3      	ldrh	r3, [r4, #12]
 8026078:	0759      	lsls	r1, r3, #29
 802607a:	d505      	bpl.n	8026088 <__sflush_r+0x44>
 802607c:	6863      	ldr	r3, [r4, #4]
 802607e:	1ad2      	subs	r2, r2, r3
 8026080:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8026082:	b10b      	cbz	r3, 8026088 <__sflush_r+0x44>
 8026084:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8026086:	1ad2      	subs	r2, r2, r3
 8026088:	2300      	movs	r3, #0
 802608a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802608c:	6a21      	ldr	r1, [r4, #32]
 802608e:	4628      	mov	r0, r5
 8026090:	47b0      	blx	r6
 8026092:	1c43      	adds	r3, r0, #1
 8026094:	89a3      	ldrh	r3, [r4, #12]
 8026096:	d106      	bne.n	80260a6 <__sflush_r+0x62>
 8026098:	6829      	ldr	r1, [r5, #0]
 802609a:	291d      	cmp	r1, #29
 802609c:	d82b      	bhi.n	80260f6 <__sflush_r+0xb2>
 802609e:	4a2a      	ldr	r2, [pc, #168]	@ (8026148 <__sflush_r+0x104>)
 80260a0:	40ca      	lsrs	r2, r1
 80260a2:	07d6      	lsls	r6, r2, #31
 80260a4:	d527      	bpl.n	80260f6 <__sflush_r+0xb2>
 80260a6:	2200      	movs	r2, #0
 80260a8:	6062      	str	r2, [r4, #4]
 80260aa:	04d9      	lsls	r1, r3, #19
 80260ac:	6922      	ldr	r2, [r4, #16]
 80260ae:	6022      	str	r2, [r4, #0]
 80260b0:	d504      	bpl.n	80260bc <__sflush_r+0x78>
 80260b2:	1c42      	adds	r2, r0, #1
 80260b4:	d101      	bne.n	80260ba <__sflush_r+0x76>
 80260b6:	682b      	ldr	r3, [r5, #0]
 80260b8:	b903      	cbnz	r3, 80260bc <__sflush_r+0x78>
 80260ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80260bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80260be:	602f      	str	r7, [r5, #0]
 80260c0:	b1b9      	cbz	r1, 80260f2 <__sflush_r+0xae>
 80260c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80260c6:	4299      	cmp	r1, r3
 80260c8:	d002      	beq.n	80260d0 <__sflush_r+0x8c>
 80260ca:	4628      	mov	r0, r5
 80260cc:	f7ff fca2 	bl	8025a14 <_free_r>
 80260d0:	2300      	movs	r3, #0
 80260d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80260d4:	e00d      	b.n	80260f2 <__sflush_r+0xae>
 80260d6:	2301      	movs	r3, #1
 80260d8:	4628      	mov	r0, r5
 80260da:	47b0      	blx	r6
 80260dc:	4602      	mov	r2, r0
 80260de:	1c50      	adds	r0, r2, #1
 80260e0:	d1c9      	bne.n	8026076 <__sflush_r+0x32>
 80260e2:	682b      	ldr	r3, [r5, #0]
 80260e4:	2b00      	cmp	r3, #0
 80260e6:	d0c6      	beq.n	8026076 <__sflush_r+0x32>
 80260e8:	2b1d      	cmp	r3, #29
 80260ea:	d001      	beq.n	80260f0 <__sflush_r+0xac>
 80260ec:	2b16      	cmp	r3, #22
 80260ee:	d11e      	bne.n	802612e <__sflush_r+0xea>
 80260f0:	602f      	str	r7, [r5, #0]
 80260f2:	2000      	movs	r0, #0
 80260f4:	e022      	b.n	802613c <__sflush_r+0xf8>
 80260f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80260fa:	b21b      	sxth	r3, r3
 80260fc:	e01b      	b.n	8026136 <__sflush_r+0xf2>
 80260fe:	690f      	ldr	r7, [r1, #16]
 8026100:	2f00      	cmp	r7, #0
 8026102:	d0f6      	beq.n	80260f2 <__sflush_r+0xae>
 8026104:	0793      	lsls	r3, r2, #30
 8026106:	680e      	ldr	r6, [r1, #0]
 8026108:	bf08      	it	eq
 802610a:	694b      	ldreq	r3, [r1, #20]
 802610c:	600f      	str	r7, [r1, #0]
 802610e:	bf18      	it	ne
 8026110:	2300      	movne	r3, #0
 8026112:	eba6 0807 	sub.w	r8, r6, r7
 8026116:	608b      	str	r3, [r1, #8]
 8026118:	f1b8 0f00 	cmp.w	r8, #0
 802611c:	dde9      	ble.n	80260f2 <__sflush_r+0xae>
 802611e:	6a21      	ldr	r1, [r4, #32]
 8026120:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8026122:	4643      	mov	r3, r8
 8026124:	463a      	mov	r2, r7
 8026126:	4628      	mov	r0, r5
 8026128:	47b0      	blx	r6
 802612a:	2800      	cmp	r0, #0
 802612c:	dc08      	bgt.n	8026140 <__sflush_r+0xfc>
 802612e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026136:	81a3      	strh	r3, [r4, #12]
 8026138:	f04f 30ff 	mov.w	r0, #4294967295
 802613c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026140:	4407      	add	r7, r0
 8026142:	eba8 0800 	sub.w	r8, r8, r0
 8026146:	e7e7      	b.n	8026118 <__sflush_r+0xd4>
 8026148:	20400001 	.word	0x20400001

0802614c <_fflush_r>:
 802614c:	b538      	push	{r3, r4, r5, lr}
 802614e:	690b      	ldr	r3, [r1, #16]
 8026150:	4605      	mov	r5, r0
 8026152:	460c      	mov	r4, r1
 8026154:	b913      	cbnz	r3, 802615c <_fflush_r+0x10>
 8026156:	2500      	movs	r5, #0
 8026158:	4628      	mov	r0, r5
 802615a:	bd38      	pop	{r3, r4, r5, pc}
 802615c:	b118      	cbz	r0, 8026166 <_fflush_r+0x1a>
 802615e:	6a03      	ldr	r3, [r0, #32]
 8026160:	b90b      	cbnz	r3, 8026166 <_fflush_r+0x1a>
 8026162:	f7ff f951 	bl	8025408 <__sinit>
 8026166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802616a:	2b00      	cmp	r3, #0
 802616c:	d0f3      	beq.n	8026156 <_fflush_r+0xa>
 802616e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8026170:	07d0      	lsls	r0, r2, #31
 8026172:	d404      	bmi.n	802617e <_fflush_r+0x32>
 8026174:	0599      	lsls	r1, r3, #22
 8026176:	d402      	bmi.n	802617e <_fflush_r+0x32>
 8026178:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802617a:	f7ff fc32 	bl	80259e2 <__retarget_lock_acquire_recursive>
 802617e:	4628      	mov	r0, r5
 8026180:	4621      	mov	r1, r4
 8026182:	f7ff ff5f 	bl	8026044 <__sflush_r>
 8026186:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026188:	07da      	lsls	r2, r3, #31
 802618a:	4605      	mov	r5, r0
 802618c:	d4e4      	bmi.n	8026158 <_fflush_r+0xc>
 802618e:	89a3      	ldrh	r3, [r4, #12]
 8026190:	059b      	lsls	r3, r3, #22
 8026192:	d4e1      	bmi.n	8026158 <_fflush_r+0xc>
 8026194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026196:	f7ff fc25 	bl	80259e4 <__retarget_lock_release_recursive>
 802619a:	e7dd      	b.n	8026158 <_fflush_r+0xc>

0802619c <__swhatbuf_r>:
 802619c:	b570      	push	{r4, r5, r6, lr}
 802619e:	460c      	mov	r4, r1
 80261a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80261a4:	2900      	cmp	r1, #0
 80261a6:	b096      	sub	sp, #88	@ 0x58
 80261a8:	4615      	mov	r5, r2
 80261aa:	461e      	mov	r6, r3
 80261ac:	da0d      	bge.n	80261ca <__swhatbuf_r+0x2e>
 80261ae:	89a3      	ldrh	r3, [r4, #12]
 80261b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80261b4:	f04f 0100 	mov.w	r1, #0
 80261b8:	bf14      	ite	ne
 80261ba:	2340      	movne	r3, #64	@ 0x40
 80261bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80261c0:	2000      	movs	r0, #0
 80261c2:	6031      	str	r1, [r6, #0]
 80261c4:	602b      	str	r3, [r5, #0]
 80261c6:	b016      	add	sp, #88	@ 0x58
 80261c8:	bd70      	pop	{r4, r5, r6, pc}
 80261ca:	466a      	mov	r2, sp
 80261cc:	f000 f87c 	bl	80262c8 <_fstat_r>
 80261d0:	2800      	cmp	r0, #0
 80261d2:	dbec      	blt.n	80261ae <__swhatbuf_r+0x12>
 80261d4:	9901      	ldr	r1, [sp, #4]
 80261d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80261da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80261de:	4259      	negs	r1, r3
 80261e0:	4159      	adcs	r1, r3
 80261e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80261e6:	e7eb      	b.n	80261c0 <__swhatbuf_r+0x24>

080261e8 <__smakebuf_r>:
 80261e8:	898b      	ldrh	r3, [r1, #12]
 80261ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80261ec:	079d      	lsls	r5, r3, #30
 80261ee:	4606      	mov	r6, r0
 80261f0:	460c      	mov	r4, r1
 80261f2:	d507      	bpl.n	8026204 <__smakebuf_r+0x1c>
 80261f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80261f8:	6023      	str	r3, [r4, #0]
 80261fa:	6123      	str	r3, [r4, #16]
 80261fc:	2301      	movs	r3, #1
 80261fe:	6163      	str	r3, [r4, #20]
 8026200:	b003      	add	sp, #12
 8026202:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026204:	ab01      	add	r3, sp, #4
 8026206:	466a      	mov	r2, sp
 8026208:	f7ff ffc8 	bl	802619c <__swhatbuf_r>
 802620c:	9f00      	ldr	r7, [sp, #0]
 802620e:	4605      	mov	r5, r0
 8026210:	4639      	mov	r1, r7
 8026212:	4630      	mov	r0, r6
 8026214:	f7fe ff2e 	bl	8025074 <_malloc_r>
 8026218:	b948      	cbnz	r0, 802622e <__smakebuf_r+0x46>
 802621a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802621e:	059a      	lsls	r2, r3, #22
 8026220:	d4ee      	bmi.n	8026200 <__smakebuf_r+0x18>
 8026222:	f023 0303 	bic.w	r3, r3, #3
 8026226:	f043 0302 	orr.w	r3, r3, #2
 802622a:	81a3      	strh	r3, [r4, #12]
 802622c:	e7e2      	b.n	80261f4 <__smakebuf_r+0xc>
 802622e:	89a3      	ldrh	r3, [r4, #12]
 8026230:	6020      	str	r0, [r4, #0]
 8026232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8026236:	81a3      	strh	r3, [r4, #12]
 8026238:	9b01      	ldr	r3, [sp, #4]
 802623a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802623e:	b15b      	cbz	r3, 8026258 <__smakebuf_r+0x70>
 8026240:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026244:	4630      	mov	r0, r6
 8026246:	f000 f851 	bl	80262ec <_isatty_r>
 802624a:	b128      	cbz	r0, 8026258 <__smakebuf_r+0x70>
 802624c:	89a3      	ldrh	r3, [r4, #12]
 802624e:	f023 0303 	bic.w	r3, r3, #3
 8026252:	f043 0301 	orr.w	r3, r3, #1
 8026256:	81a3      	strh	r3, [r4, #12]
 8026258:	89a3      	ldrh	r3, [r4, #12]
 802625a:	431d      	orrs	r5, r3
 802625c:	81a5      	strh	r5, [r4, #12]
 802625e:	e7cf      	b.n	8026200 <__smakebuf_r+0x18>

08026260 <_putc_r>:
 8026260:	b570      	push	{r4, r5, r6, lr}
 8026262:	460d      	mov	r5, r1
 8026264:	4614      	mov	r4, r2
 8026266:	4606      	mov	r6, r0
 8026268:	b118      	cbz	r0, 8026272 <_putc_r+0x12>
 802626a:	6a03      	ldr	r3, [r0, #32]
 802626c:	b90b      	cbnz	r3, 8026272 <_putc_r+0x12>
 802626e:	f7ff f8cb 	bl	8025408 <__sinit>
 8026272:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8026274:	07d8      	lsls	r0, r3, #31
 8026276:	d405      	bmi.n	8026284 <_putc_r+0x24>
 8026278:	89a3      	ldrh	r3, [r4, #12]
 802627a:	0599      	lsls	r1, r3, #22
 802627c:	d402      	bmi.n	8026284 <_putc_r+0x24>
 802627e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8026280:	f7ff fbaf 	bl	80259e2 <__retarget_lock_acquire_recursive>
 8026284:	68a3      	ldr	r3, [r4, #8]
 8026286:	3b01      	subs	r3, #1
 8026288:	2b00      	cmp	r3, #0
 802628a:	60a3      	str	r3, [r4, #8]
 802628c:	da05      	bge.n	802629a <_putc_r+0x3a>
 802628e:	69a2      	ldr	r2, [r4, #24]
 8026290:	4293      	cmp	r3, r2
 8026292:	db12      	blt.n	80262ba <_putc_r+0x5a>
 8026294:	b2eb      	uxtb	r3, r5
 8026296:	2b0a      	cmp	r3, #10
 8026298:	d00f      	beq.n	80262ba <_putc_r+0x5a>
 802629a:	6823      	ldr	r3, [r4, #0]
 802629c:	1c5a      	adds	r2, r3, #1
 802629e:	6022      	str	r2, [r4, #0]
 80262a0:	701d      	strb	r5, [r3, #0]
 80262a2:	b2ed      	uxtb	r5, r5
 80262a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80262a6:	07da      	lsls	r2, r3, #31
 80262a8:	d405      	bmi.n	80262b6 <_putc_r+0x56>
 80262aa:	89a3      	ldrh	r3, [r4, #12]
 80262ac:	059b      	lsls	r3, r3, #22
 80262ae:	d402      	bmi.n	80262b6 <_putc_r+0x56>
 80262b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80262b2:	f7ff fb97 	bl	80259e4 <__retarget_lock_release_recursive>
 80262b6:	4628      	mov	r0, r5
 80262b8:	bd70      	pop	{r4, r5, r6, pc}
 80262ba:	4629      	mov	r1, r5
 80262bc:	4622      	mov	r2, r4
 80262be:	4630      	mov	r0, r6
 80262c0:	f7ff f9a5 	bl	802560e <__swbuf_r>
 80262c4:	4605      	mov	r5, r0
 80262c6:	e7ed      	b.n	80262a4 <_putc_r+0x44>

080262c8 <_fstat_r>:
 80262c8:	b538      	push	{r3, r4, r5, lr}
 80262ca:	4d07      	ldr	r5, [pc, #28]	@ (80262e8 <_fstat_r+0x20>)
 80262cc:	2300      	movs	r3, #0
 80262ce:	4604      	mov	r4, r0
 80262d0:	4608      	mov	r0, r1
 80262d2:	4611      	mov	r1, r2
 80262d4:	602b      	str	r3, [r5, #0]
 80262d6:	f7db f922 	bl	800151e <_fstat>
 80262da:	1c43      	adds	r3, r0, #1
 80262dc:	d102      	bne.n	80262e4 <_fstat_r+0x1c>
 80262de:	682b      	ldr	r3, [r5, #0]
 80262e0:	b103      	cbz	r3, 80262e4 <_fstat_r+0x1c>
 80262e2:	6023      	str	r3, [r4, #0]
 80262e4:	bd38      	pop	{r3, r4, r5, pc}
 80262e6:	bf00      	nop
 80262e8:	240055fc 	.word	0x240055fc

080262ec <_isatty_r>:
 80262ec:	b538      	push	{r3, r4, r5, lr}
 80262ee:	4d06      	ldr	r5, [pc, #24]	@ (8026308 <_isatty_r+0x1c>)
 80262f0:	2300      	movs	r3, #0
 80262f2:	4604      	mov	r4, r0
 80262f4:	4608      	mov	r0, r1
 80262f6:	602b      	str	r3, [r5, #0]
 80262f8:	f7db f921 	bl	800153e <_isatty>
 80262fc:	1c43      	adds	r3, r0, #1
 80262fe:	d102      	bne.n	8026306 <_isatty_r+0x1a>
 8026300:	682b      	ldr	r3, [r5, #0]
 8026302:	b103      	cbz	r3, 8026306 <_isatty_r+0x1a>
 8026304:	6023      	str	r3, [r4, #0]
 8026306:	bd38      	pop	{r3, r4, r5, pc}
 8026308:	240055fc 	.word	0x240055fc

0802630c <_init>:
 802630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802630e:	bf00      	nop
 8026310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026312:	bc08      	pop	{r3}
 8026314:	469e      	mov	lr, r3
 8026316:	4770      	bx	lr

08026318 <_fini>:
 8026318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802631a:	bf00      	nop
 802631c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802631e:	bc08      	pop	{r3}
 8026320:	469e      	mov	lr, r3
 8026322:	4770      	bx	lr
 8026324:	0000      	movs	r0, r0
	...

08026328 <__is_dualbank_veneer>:
 8026328:	f85f f000 	ldr.w	pc, [pc]	@ 802632c <__is_dualbank_veneer+0x4>
 802632c:	24000885 	.word	0x24000885

08026330 <__single_bank_swap_veneer>:
 8026330:	f85f f000 	ldr.w	pc, [pc]	@ 8026334 <__single_bank_swap_veneer+0x4>
 8026334:	24000da9 	.word	0x24000da9

Disassembly of section .data:

24000000 <SystemCoreClock>:
24000000:	03d09000                                ....

24000004 <SystemD2Clock>:
24000004:	03d09000                                ....

24000008 <uwTickPrio>:
24000008:	00000010                                ....

2400000c <uwTickFreq>:
2400000c:	00000001                                ....

24000010 <mg_fs_packed>:
24000010:	08009833 08009895 08009991 080099f3     3...............
24000020:	08009a0f 08009a65 08009a7f 08009ab7     ....e...........
24000030:	08009acf 08009ae5                       ........

24000038 <mg_fs_posix>:
24000038:	08009afb 08009b15 08009b2d 08009b45     ........-...E...
24000048:	08009b59 08009b73 08009b8d 08009ba7     Y...s...........
24000058:	08009bbf 08009bd5                       ........

24000060 <s_known_types>:
24000060:	08026d50 00000004 08026d58 00000018     Pm......Xm......
24000070:	08026d74 00000003 08026d58 00000018     tm......Xm......
24000080:	08026d78 00000003 08026d7c 00000017     xm......|m......
24000090:	08026d94 00000002 08026d98 0000001e     .m.......m......
240000a0:	08026db8 00000003 08026d98 0000001e     .m.......m......
240000b0:	08026dbc 00000003 08026dc0 00000009     .m.......m......
240000c0:	08026dcc 00000003 08026dd0 00000009     .m.......m......
240000d0:	08026ddc 00000003 08026de0 0000000a     .m.......m......
240000e0:	08026dec 00000004 08026de0 0000000a     .m.......m......
240000f0:	08026df4 00000004 08026dfc 00000009     .m.......m......
24000100:	08026e08 00000003 08026e0c 00000008     .n.......n......
24000110:	08026e18 00000003 08026e1c 0000000d     .n.......n......
24000120:	08026e2c 00000003 08026e30 00000019     ,n......0n......
24000130:	08026e4c 00000003 08026e50 0000000f     Ln......Pn......
24000140:	08026e60 00000003 08026e64 00000008     `n......dn......
24000150:	08026e70 00000003 08026e74 00000012     pn......tn......
24000160:	08026e88 00000003 08026e8c 00000018     .n.......n......
24000170:	08026ea8 00000002 08026eac 00000010     .n.......n......
24000180:	08026ec0 00000003 08026ec4 0000000c     .n.......n......
24000190:	08026ed4 00000004 08026edc 00000010     .n.......n......
240001a0:	08026ef0 00000003 08026ef4 0000000f     .n.......n......
240001b0:	08026f04 00000003 08026f08 0000000a     .o.......o......
240001c0:	08026f14 00000003 08026f18 00000009     .o.......o......
240001d0:	08026f24 00000004 08026f2c 0000000a     $o......,o......
240001e0:	08026f38 00000003 08026f3c 0000000f     8o......<o......
240001f0:	08026f4c 00000005 08026d58 00000018     Lo......Xm......
24000200:	08026f54 00000003 08026f58 00000012     To......Xo......
24000210:	08026f6c 00000003 08026f70 00000009     lo......po......
24000220:	08026f7c 00000004 08026f84 0000000a     |o.......o......
24000230:	08026f90 00000003 08026f94 0000000f     .o.......o......
24000240:	08026fa4 00000003 08026fa8 0000000a     .o.......o......
	...

24000258 <mg_log_level>:
24000258:	00000002                                ....

2400025c <s_log_func>:
2400025c:	08012657                                W&..

24000260 <mcast_addr>:
24000260:	005e0001 0000fb00                       ..^.....

24000268 <s_mg_flash_stm32h7>:
24000268:	08000000 00000000 00020000 00000020     ............ ...
24000278:	24000c39 24000bb5                       9..$...$

24000280 <zeros_sha256_digest>:
24000280:	42c4b0e3 141cfc98 c8f4fb9a 24b96f99     ...B.........o.$
24000290:	e441ae27 4c939b64 1b9995a4 55b85278     '.A.d..L....xR.U

240002a0 <mg_tcpip_driver_stm32h>:
240002a0:	0802228d 080224fd 00000000 08022719     ."...$.......'..

240002b0 <s_modbus_base>:
240002b0:	000003e8                                ....

240002b4 <s_state>:
240002b4:	0000002a 0000001b 00000043 0000000a     *.......C.......
240002c4:	2e302e31 00000030 00000000 00000000     1.0.0...........
240002d4:	00000000 00000001 00000053              ........S...

240002e0 <s_leds>:
240002e0:	00000100                                ....

240002e4 <s_network_settings>:
240002e4:	2e323931 2e383631 32342e30 00000000     192.168.0.42....
240002f4:	00000000 2e323931 2e383631 00312e30     ....192.168.0.1.
	...
2400030c:	2e353532 2e353532 2e353532 00000030     255.255.255.0...
2400031c:	00000000 00000001 00000000              ............

24000328 <s_settings>:
24000328:	74696465 73202620 20657661 0000656d     edit & save me..
	...
24000350:	6f666e69 00000000 00000000 00000000     info............
24000360:	9ad42c3d 405ec7e6 00000011 00000001     =,....^@........

24000370 <s_security>:
24000370:	696d6461 0000006e 00000000 00000000     admin...........
	...
24000398:	72657375 00000000 00000000 00000000     user............
	...

240003c0 <s_state_attributes>:
240003c0:	0802923c 08029244 00000000 00000000     <...D...........
	...
240003d8:	08029248 08029244 00000000 00000004     H...D...........
	...
240003f0:	08029254 08029244 00000000 00000008     T...D...........
	...
24000408:	08029260 08029244 00000000 0000000c     `...D...........
	...
24000420:	08029268 08029270 00000000 00000010     h...p...........
24000430:	00000014 00000000 08029278 08029280     ........x.......
24000440:	00000000 00000024 00000000 00000000     ....$...........
24000450:	08029288 08029280 00000000 00000025     ............%...
	...
24000468:	08029290 08029244 00000000 00000028     ....D.......(...
	...

24000498 <s_leds_attributes>:
24000498:	08029298 08029280 00000000 00000000     ................
	...
240004b0:	080292a0 08029280 00000000 00000001     ................
	...
240004c8:	080292a8 08029280 00000000 00000002     ................
	...

240004f8 <s_network_settings_attributes>:
240004f8:	080292b0 08029270 00000000 00000000     ....p...........
24000508:	00000014 00000000 080292bc 08029270     ............p...
24000518:	00000000 00000014 00000014 00000000     ................
24000528:	080292c8 08029270 00000000 00000028     ....p.......(...
24000538:	00000014 00000000 080292d0 08029280     ................
24000548:	00000000 0000003c 00000000 00000000     ....<...........
	...

24000570 <s_settings_attributes>:
24000570:	080292d8 08029270 00000000 00000000     ....p...........
24000580:	00000028 00000000 080292e4 08029270     (...........p...
24000590:	00000000 00000028 0000000a 00000000     ....(...........
240005a0:	080292f0 080292fc 08029304 00000038     ............8...
	...
240005b8:	0802930c 08029244 00000000 00000040     ....D.......@...
	...
240005d0:	08029314 08029280 00000000 00000044     ............D...
	...

24000600 <s_security_attributes>:
24000600:	08029320 08029270 00000000 00000000      ...p...........
24000610:	00000028 00000000 08029330 08029270     (.......0...p...
24000620:	00000000 00000028 00000028 00000000     ....(...(.......
	...

24000648 <s_apihandler_reboot>:
24000648:	08029340 08029348 00000000 00000003     @...H...........
24000658:	00000007 00000000 08022c5d 08022c81     ........],...,..

24000668 <s_apihandler_reformat>:
24000668:	08029350 08029348 00000000 00000003     P...H...........
24000678:	00000007 00000000 08022ce1 08022d05     .........,...-..

24000688 <s_apihandler_firmware_update>:
24000688:	0802935c 0802936c 00000000 00000003     \...l...........
24000698:	00000007 00000000 08022d65 08022dbd     ........e-...-..
240006a8:	08022df1                                .-..

240006ac <s_apihandler_file_upload>:
240006ac:	08029370 0802937c 00000000 00000003     p...|...........
240006bc:	00000007 00000000 08022e41 08022ec5     ........A.......
240006cc:	08022f05                                ./..

240006d0 <s_apihandler_graph_data>:
240006d0:	08029384 08029390 00000000 00000003     ................
240006e0:	00000003 00000000 08022f4d              ........M/..

240006ec <s_apihandler_state>:
240006ec:	08029398 080293a0 00000001 00000000     ................
	...
24000704:	240003c0 0000002c 08022f85 00000000     ...$,..../......

24000714 <s_apihandler_leds>:
24000714:	080293a8 080293a0 00000000 00000003     ................
24000724:	00000003 00000000 24000498 00000003     ...........$....
24000734:	08022ff1 08023065                       ./..e0..

2400073c <s_apihandler_network_settings>:
2400073c:	080293b0 080293a0 00000000 00000003     ................
2400074c:	00000007 00000000 240004f8 0000003d     ...........$=...
2400075c:	080230b9 08023101                       .0...1..

24000764 <s_apihandler_settings>:
24000764:	080293c4 080293a0 00000000 00000003     ................
24000774:	00000007 00000000 24000570 00000048     ........p..$H...
24000784:	08023149 0802316d                       I1..m1..

2400078c <s_apihandler_security>:
2400078c:	080293d0 080293a0 00000000 00000007     ................
2400079c:	00000007 00000000 24000600 00000050     ...........$P...
240007ac:	08023191 080231b5                       .1...1..

240007b4 <s_apihandler_loglevels>:
240007b4:	080293dc 08029390 00000000 00000000     ................
	...
240007cc:	080231d9                                .1..

240007d0 <s_apihandler_events>:
240007d0:	080293e8 08029390 00000000 00000000     ................
	...
240007e8:	08023211                                .2..

240007ec <s_apihandlers>:
240007ec:	24000648 24000668 24000688 240006ac     H..$h..$...$...$
240007fc:	240006d0 240006ec 24000714 2400073c     ...$...$...$<..$
2400080c:	24000764 2400078c 240007b4 240007d0     d..$...$...$...$

2400081c <s_auth>:
2400081c:	08022bf9                                .+..

24000820 <s_modbus_handlers>:
24000820:	08022a35 08022b0d                       5*...+..

24000828 <__sglue>:
24000828:	00000000 00000003 240054c0              .........T.$

24000834 <_impure_ptr>:
24000834:	24000838                                8..$

24000838 <_impure_data>:
24000838:	00000000 240054c0 24005528 24005590     .....T.$(U.$.U.$
	...

24000884 <is_dualbank>:
MG_IRAM static bool is_dualbank(void) {
24000884:	b480      	push	{r7}
24000886:	af00      	add	r7, sp, #0
  return (s_mg_flash_stm32h7.size < 2 * 1024 * 1024) ? false : true;
24000888:	4b06      	ldr	r3, [pc, #24]	@ (240008a4 <is_dualbank+0x20>)
2400088a:	685b      	ldr	r3, [r3, #4]
2400088c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24000890:	bf2c      	ite	cs
24000892:	2301      	movcs	r3, #1
24000894:	2300      	movcc	r3, #0
24000896:	b2db      	uxtb	r3, r3
}
24000898:	4618      	mov	r0, r3
2400089a:	46bd      	mov	sp, r7
2400089c:	f85d 7b04 	ldr.w	r7, [sp], #4
240008a0:	4770      	bx	lr
240008a2:	bf00      	nop
240008a4:	24000268 	.word	0x24000268

240008a8 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
240008a8:	b580      	push	{r7, lr}
240008aa:	af00      	add	r7, sp, #0
  if (unlocked == false) {
240008ac:	4b11      	ldr	r3, [pc, #68]	@ (240008f4 <flash_unlock+0x4c>)
240008ae:	781b      	ldrb	r3, [r3, #0]
240008b0:	f083 0301 	eor.w	r3, r3, #1
240008b4:	b2db      	uxtb	r3, r3
240008b6:	2b00      	cmp	r3, #0
240008b8:	d019      	beq.n	240008ee <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
240008ba:	4b0f      	ldr	r3, [pc, #60]	@ (240008f8 <flash_unlock+0x50>)
240008bc:	4a0f      	ldr	r2, [pc, #60]	@ (240008fc <flash_unlock+0x54>)
240008be:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
240008c0:	4b0d      	ldr	r3, [pc, #52]	@ (240008f8 <flash_unlock+0x50>)
240008c2:	4a0f      	ldr	r2, [pc, #60]	@ (24000900 <flash_unlock+0x58>)
240008c4:	601a      	str	r2, [r3, #0]
    if (is_dualbank()) {
240008c6:	f7ff ffdd 	bl	24000884 <is_dualbank>
240008ca:	4603      	mov	r3, r0
240008cc:	2b00      	cmp	r3, #0
240008ce:	d005      	beq.n	240008dc <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
240008d0:	4b0c      	ldr	r3, [pc, #48]	@ (24000904 <flash_unlock+0x5c>)
240008d2:	4a0a      	ldr	r2, [pc, #40]	@ (240008fc <flash_unlock+0x54>)
240008d4:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
240008d6:	4b0b      	ldr	r3, [pc, #44]	@ (24000904 <flash_unlock+0x5c>)
240008d8:	4a09      	ldr	r2, [pc, #36]	@ (24000900 <flash_unlock+0x58>)
240008da:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
240008dc:	4b0a      	ldr	r3, [pc, #40]	@ (24000908 <flash_unlock+0x60>)
240008de:	4a0b      	ldr	r2, [pc, #44]	@ (2400090c <flash_unlock+0x64>)
240008e0:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
240008e2:	4b09      	ldr	r3, [pc, #36]	@ (24000908 <flash_unlock+0x60>)
240008e4:	4a0a      	ldr	r2, [pc, #40]	@ (24000910 <flash_unlock+0x68>)
240008e6:	601a      	str	r2, [r3, #0]
    unlocked = true;
240008e8:	4b02      	ldr	r3, [pc, #8]	@ (240008f4 <flash_unlock+0x4c>)
240008ea:	2201      	movs	r2, #1
240008ec:	701a      	strb	r2, [r3, #0]
}
240008ee:	bf00      	nop
240008f0:	bd80      	pop	{r7, pc}
240008f2:	bf00      	nop
240008f4:	24005270 	.word	0x24005270
240008f8:	52002004 	.word	0x52002004
240008fc:	45670123 	.word	0x45670123
24000900:	cdef89ab 	.word	0xcdef89ab
24000904:	52002104 	.word	0x52002104
24000908:	52002008 	.word	0x52002008
2400090c:	08192a3b 	.word	0x08192a3b
24000910:	4c5d6e7f 	.word	0x4c5d6e7f

24000914 <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
24000914:	b480      	push	{r7}
24000916:	b087      	sub	sp, #28
24000918:	af00      	add	r7, sp, #0
2400091a:	6078      	str	r0, [r7, #4]
  char *base = (char *) s_mg_flash_stm32h7.start,
2400091c:	4b15      	ldr	r3, [pc, #84]	@ (24000974 <flash_page_start+0x60>)
2400091e:	681b      	ldr	r3, [r3, #0]
24000920:	617b      	str	r3, [r7, #20]
       *end = base + s_mg_flash_stm32h7.size;
24000922:	4b14      	ldr	r3, [pc, #80]	@ (24000974 <flash_page_start+0x60>)
24000924:	685b      	ldr	r3, [r3, #4]
24000926:	697a      	ldr	r2, [r7, #20]
24000928:	4413      	add	r3, r2
2400092a:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
2400092c:	687b      	ldr	r3, [r7, #4]
2400092e:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % s_mg_flash_stm32h7.secsz) == 0;
24000930:	68fa      	ldr	r2, [r7, #12]
24000932:	697b      	ldr	r3, [r7, #20]
24000934:	429a      	cmp	r2, r3
24000936:	d312      	bcc.n	2400095e <flash_page_start+0x4a>
24000938:	68fa      	ldr	r2, [r7, #12]
2400093a:	693b      	ldr	r3, [r7, #16]
2400093c:	429a      	cmp	r2, r3
2400093e:	d20e      	bcs.n	2400095e <flash_page_start+0x4a>
24000940:	68fa      	ldr	r2, [r7, #12]
24000942:	697b      	ldr	r3, [r7, #20]
24000944:	1ad3      	subs	r3, r2, r3
24000946:	461a      	mov	r2, r3
24000948:	4b0a      	ldr	r3, [pc, #40]	@ (24000974 <flash_page_start+0x60>)
2400094a:	689b      	ldr	r3, [r3, #8]
2400094c:	fbb2 f1f3 	udiv	r1, r2, r3
24000950:	fb01 f303 	mul.w	r3, r1, r3
24000954:	1ad3      	subs	r3, r2, r3
24000956:	2b00      	cmp	r3, #0
24000958:	d101      	bne.n	2400095e <flash_page_start+0x4a>
2400095a:	2301      	movs	r3, #1
2400095c:	e000      	b.n	24000960 <flash_page_start+0x4c>
2400095e:	2300      	movs	r3, #0
24000960:	f003 0301 	and.w	r3, r3, #1
24000964:	b2db      	uxtb	r3, r3
}
24000966:	4618      	mov	r0, r3
24000968:	371c      	adds	r7, #28
2400096a:	46bd      	mov	sp, r7
2400096c:	f85d 7b04 	ldr.w	r7, [sp], #4
24000970:	4770      	bx	lr
24000972:	bf00      	nop
24000974:	24000268 	.word	0x24000268

24000978 <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
24000978:	b480      	push	{r7}
2400097a:	b083      	sub	sp, #12
2400097c:	af00      	add	r7, sp, #0
2400097e:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
24000980:	687b      	ldr	r3, [r7, #4]
24000982:	3310      	adds	r3, #16
24000984:	681a      	ldr	r2, [r3, #0]
24000986:	4b06      	ldr	r3, [pc, #24]	@ (240009a0 <flash_is_err+0x28>)
24000988:	4013      	ands	r3, r2
2400098a:	2b00      	cmp	r3, #0
2400098c:	bf14      	ite	ne
2400098e:	2301      	movne	r3, #1
24000990:	2300      	moveq	r3, #0
24000992:	b2db      	uxtb	r3, r3
}
24000994:	4618      	mov	r0, r3
24000996:	370c      	adds	r7, #12
24000998:	46bd      	mov	sp, r7
2400099a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400099e:	4770      	bx	lr
240009a0:	0ffe0000 	.word	0x0ffe0000

240009a4 <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
240009a4:	b480      	push	{r7}
240009a6:	b083      	sub	sp, #12
240009a8:	af00      	add	r7, sp, #0
240009aa:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
240009ac:	bf00      	nop
240009ae:	687b      	ldr	r3, [r7, #4]
240009b0:	3310      	adds	r3, #16
240009b2:	681b      	ldr	r3, [r3, #0]
240009b4:	f003 0305 	and.w	r3, r3, #5
240009b8:	2b00      	cmp	r3, #0
240009ba:	d1f8      	bne.n	240009ae <flash_wait+0xa>
}
240009bc:	bf00      	nop
240009be:	bf00      	nop
240009c0:	370c      	adds	r7, #12
240009c2:	46bd      	mov	sp, r7
240009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240009c8:	4770      	bx	lr

240009ca <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
240009ca:	b580      	push	{r7, lr}
240009cc:	b082      	sub	sp, #8
240009ce:	af00      	add	r7, sp, #0
240009d0:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
240009d2:	6878      	ldr	r0, [r7, #4]
240009d4:	f7ff ffe6 	bl	240009a4 <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
240009d8:	687b      	ldr	r3, [r7, #4]
240009da:	3314      	adds	r3, #20
240009dc:	461a      	mov	r2, r3
240009de:	4b03      	ldr	r3, [pc, #12]	@ (240009ec <flash_clear_err+0x22>)
240009e0:	6013      	str	r3, [r2, #0]
}
240009e2:	bf00      	nop
240009e4:	3708      	adds	r7, #8
240009e6:	46bd      	mov	sp, r7
240009e8:	bd80      	pop	{r7, pc}
240009ea:	bf00      	nop
240009ec:	07ff0000 	.word	0x07ff0000

240009f0 <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
240009f0:	b480      	push	{r7}
240009f2:	b083      	sub	sp, #12
240009f4:	af00      	add	r7, sp, #0
240009f6:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
240009f8:	687b      	ldr	r3, [r7, #4]
240009fa:	3318      	adds	r3, #24
240009fc:	681b      	ldr	r3, [r3, #0]
240009fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000a02:	2b00      	cmp	r3, #0
24000a04:	bf14      	ite	ne
24000a06:	2301      	movne	r3, #1
24000a08:	2300      	moveq	r3, #0
24000a0a:	b2db      	uxtb	r3, r3
}
24000a0c:	4618      	mov	r0, r3
24000a0e:	370c      	adds	r7, #12
24000a10:	46bd      	mov	sp, r7
24000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a16:	4770      	bx	lr

24000a18 <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
24000a18:	b580      	push	{r7, lr}
24000a1a:	b084      	sub	sp, #16
24000a1c:	af00      	add	r7, sp, #0
24000a1e:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000a20:	4b0d      	ldr	r3, [pc, #52]	@ (24000a58 <flash_bank+0x40>)
24000a22:	681b      	ldr	r3, [r3, #0]
24000a24:	687a      	ldr	r2, [r7, #4]
24000a26:	1ad3      	subs	r3, r2, r3
24000a28:	60fb      	str	r3, [r7, #12]
  if (!is_dualbank()) return FLASH_BASE1;
24000a2a:	f7ff ff2b 	bl	24000884 <is_dualbank>
24000a2e:	4603      	mov	r3, r0
24000a30:	f083 0301 	eor.w	r3, r3, #1
24000a34:	b2db      	uxtb	r3, r3
24000a36:	2b00      	cmp	r3, #0
24000a38:	d001      	beq.n	24000a3e <flash_bank+0x26>
24000a3a:	4b08      	ldr	r3, [pc, #32]	@ (24000a5c <flash_bank+0x44>)
24000a3c:	e008      	b.n	24000a50 <flash_bank+0x38>
  return ofs < s_mg_flash_stm32h7.size / 2 ? FLASH_BASE1 : FLASH_BASE2;
24000a3e:	4b06      	ldr	r3, [pc, #24]	@ (24000a58 <flash_bank+0x40>)
24000a40:	685b      	ldr	r3, [r3, #4]
24000a42:	085b      	lsrs	r3, r3, #1
24000a44:	68fa      	ldr	r2, [r7, #12]
24000a46:	429a      	cmp	r2, r3
24000a48:	d201      	bcs.n	24000a4e <flash_bank+0x36>
24000a4a:	4b04      	ldr	r3, [pc, #16]	@ (24000a5c <flash_bank+0x44>)
24000a4c:	e000      	b.n	24000a50 <flash_bank+0x38>
24000a4e:	4b04      	ldr	r3, [pc, #16]	@ (24000a60 <flash_bank+0x48>)
}
24000a50:	4618      	mov	r0, r3
24000a52:	3710      	adds	r7, #16
24000a54:	46bd      	mov	sp, r7
24000a56:	bd80      	pop	{r7, pc}
24000a58:	24000268 	.word	0x24000268
24000a5c:	52002000 	.word	0x52002000
24000a60:	52002100 	.word	0x52002100

24000a64 <mg_stm32h7_erase>:
MG_IRAM static bool mg_stm32h7_erase(void *addr) {
24000a64:	b580      	push	{r7, lr}
24000a66:	b08a      	sub	sp, #40	@ 0x28
24000a68:	af02      	add	r7, sp, #8
24000a6a:	6078      	str	r0, [r7, #4]
  bool ok = false;
24000a6c:	2300      	movs	r3, #0
24000a6e:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
24000a70:	6878      	ldr	r0, [r7, #4]
24000a72:	f7ff ff4f 	bl	24000914 <flash_page_start>
24000a76:	4603      	mov	r3, r0
24000a78:	f083 0301 	eor.w	r3, r3, #1
24000a7c:	b2db      	uxtb	r3, r3
24000a7e:	2b00      	cmp	r3, #0
24000a80:	d00f      	beq.n	24000aa2 <mg_stm32h7_erase+0x3e>
    MG_ERROR(("%p is not on a sector boundary", addr));
24000a82:	4b44      	ldr	r3, [pc, #272]	@ (24000b94 <mg_stm32h7_erase+0x130>)
24000a84:	681b      	ldr	r3, [r3, #0]
24000a86:	2b00      	cmp	r3, #0
24000a88:	dd7e      	ble.n	24000b88 <mg_stm32h7_erase+0x124>
24000a8a:	4b43      	ldr	r3, [pc, #268]	@ (24000b98 <mg_stm32h7_erase+0x134>)
24000a8c:	f641 5228 	movw	r2, #7464	@ 0x1d28
24000a90:	4942      	ldr	r1, [pc, #264]	@ (24000b9c <mg_stm32h7_erase+0x138>)
24000a92:	2001      	movs	r0, #1
24000a94:	f000 f9b4 	bl	24000e00 <__mg_log_prefix_veneer>
24000a98:	6879      	ldr	r1, [r7, #4]
24000a9a:	4841      	ldr	r0, [pc, #260]	@ (24000ba0 <mg_stm32h7_erase+0x13c>)
24000a9c:	f000 f9ac 	bl	24000df8 <__mg_log_veneer>
24000aa0:	e072      	b.n	24000b88 <mg_stm32h7_erase+0x124>
    uintptr_t diff = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000aa2:	4b40      	ldr	r3, [pc, #256]	@ (24000ba4 <mg_stm32h7_erase+0x140>)
24000aa4:	681b      	ldr	r3, [r3, #0]
24000aa6:	687a      	ldr	r2, [r7, #4]
24000aa8:	1ad3      	subs	r3, r2, r3
24000aaa:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / s_mg_flash_stm32h7.secsz;
24000aac:	4b3d      	ldr	r3, [pc, #244]	@ (24000ba4 <mg_stm32h7_erase+0x140>)
24000aae:	689b      	ldr	r3, [r3, #8]
24000ab0:	697a      	ldr	r2, [r7, #20]
24000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
24000ab6:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
24000ab8:	6878      	ldr	r0, [r7, #4]
24000aba:	f7ff ffad 	bl	24000a18 <flash_bank>
24000abe:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
24000ac0:	693b      	ldr	r3, [r7, #16]
24000ac2:	330c      	adds	r3, #12
24000ac4:	681b      	ldr	r3, [r3, #0]
24000ac6:	60fb      	str	r3, [r7, #12]
    flash_unlock();
24000ac8:	f7ff feee 	bl	240008a8 <flash_unlock>
    if (sector > 7) sector -= 8;
24000acc:	69bb      	ldr	r3, [r7, #24]
24000ace:	2b07      	cmp	r3, #7
24000ad0:	d902      	bls.n	24000ad8 <mg_stm32h7_erase+0x74>
24000ad2:	69bb      	ldr	r3, [r7, #24]
24000ad4:	3b08      	subs	r3, #8
24000ad6:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
24000ad8:	6938      	ldr	r0, [r7, #16]
24000ada:	f7ff ff76 	bl	240009ca <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
24000ade:	693b      	ldr	r3, [r7, #16]
24000ae0:	330c      	adds	r3, #12
24000ae2:	461a      	mov	r2, r3
24000ae4:	2320      	movs	r3, #32
24000ae6:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
24000ae8:	693b      	ldr	r3, [r7, #16]
24000aea:	330c      	adds	r3, #12
24000aec:	681a      	ldr	r2, [r3, #0]
24000aee:	69bb      	ldr	r3, [r7, #24]
24000af0:	021b      	lsls	r3, r3, #8
24000af2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24000af6:	6939      	ldr	r1, [r7, #16]
24000af8:	310c      	adds	r1, #12
24000afa:	4313      	orrs	r3, r2
24000afc:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
24000afe:	693b      	ldr	r3, [r7, #16]
24000b00:	330c      	adds	r3, #12
24000b02:	681b      	ldr	r3, [r3, #0]
24000b04:	693a      	ldr	r2, [r7, #16]
24000b06:	320c      	adds	r2, #12
24000b08:	f043 0304 	orr.w	r3, r3, #4
24000b0c:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
24000b0e:	693b      	ldr	r3, [r7, #16]
24000b10:	330c      	adds	r3, #12
24000b12:	681b      	ldr	r3, [r3, #0]
24000b14:	693a      	ldr	r2, [r7, #16]
24000b16:	320c      	adds	r2, #12
24000b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24000b1c:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
24000b1e:	6938      	ldr	r0, [r7, #16]
24000b20:	f7ff ff2a 	bl	24000978 <flash_is_err>
24000b24:	4603      	mov	r3, r0
24000b26:	2b00      	cmp	r3, #0
24000b28:	bf14      	ite	ne
24000b2a:	2301      	movne	r3, #1
24000b2c:	2300      	moveq	r3, #0
24000b2e:	b2db      	uxtb	r3, r3
24000b30:	f083 0301 	eor.w	r3, r3, #1
24000b34:	b2db      	uxtb	r3, r3
24000b36:	77fb      	strb	r3, [r7, #31]
24000b38:	7ffb      	ldrb	r3, [r7, #31]
24000b3a:	f003 0301 	and.w	r3, r3, #1
24000b3e:	77fb      	strb	r3, [r7, #31]
    MG_DEBUG(("Erase sector %lu @ %p %s. CR %#lx SR %#lx", sector, addr,
24000b40:	4b14      	ldr	r3, [pc, #80]	@ (24000b94 <mg_stm32h7_erase+0x130>)
24000b42:	681b      	ldr	r3, [r3, #0]
24000b44:	2b02      	cmp	r3, #2
24000b46:	dd1a      	ble.n	24000b7e <mg_stm32h7_erase+0x11a>
24000b48:	4b13      	ldr	r3, [pc, #76]	@ (24000b98 <mg_stm32h7_erase+0x134>)
24000b4a:	f641 5238 	movw	r2, #7480	@ 0x1d38
24000b4e:	4913      	ldr	r1, [pc, #76]	@ (24000b9c <mg_stm32h7_erase+0x138>)
24000b50:	2003      	movs	r0, #3
24000b52:	f000 f955 	bl	24000e00 <__mg_log_prefix_veneer>
24000b56:	7ffb      	ldrb	r3, [r7, #31]
24000b58:	2b00      	cmp	r3, #0
24000b5a:	d001      	beq.n	24000b60 <mg_stm32h7_erase+0xfc>
24000b5c:	4912      	ldr	r1, [pc, #72]	@ (24000ba8 <mg_stm32h7_erase+0x144>)
24000b5e:	e000      	b.n	24000b62 <mg_stm32h7_erase+0xfe>
24000b60:	4912      	ldr	r1, [pc, #72]	@ (24000bac <mg_stm32h7_erase+0x148>)
24000b62:	693b      	ldr	r3, [r7, #16]
24000b64:	330c      	adds	r3, #12
24000b66:	681b      	ldr	r3, [r3, #0]
24000b68:	693a      	ldr	r2, [r7, #16]
24000b6a:	3210      	adds	r2, #16
24000b6c:	6812      	ldr	r2, [r2, #0]
24000b6e:	9201      	str	r2, [sp, #4]
24000b70:	9300      	str	r3, [sp, #0]
24000b72:	460b      	mov	r3, r1
24000b74:	687a      	ldr	r2, [r7, #4]
24000b76:	69b9      	ldr	r1, [r7, #24]
24000b78:	480d      	ldr	r0, [pc, #52]	@ (24000bb0 <mg_stm32h7_erase+0x14c>)
24000b7a:	f000 f93d 	bl	24000df8 <__mg_log_veneer>
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
24000b7e:	693b      	ldr	r3, [r7, #16]
24000b80:	330c      	adds	r3, #12
24000b82:	461a      	mov	r2, r3
24000b84:	68fb      	ldr	r3, [r7, #12]
24000b86:	6013      	str	r3, [r2, #0]
  return ok;
24000b88:	7ffb      	ldrb	r3, [r7, #31]
}
24000b8a:	4618      	mov	r0, r3
24000b8c:	3720      	adds	r7, #32
24000b8e:	46bd      	mov	sp, r7
24000b90:	bd80      	pop	{r7, pc}
24000b92:	bf00      	nop
24000b94:	24000258 	.word	0x24000258
24000b98:	0802a234 	.word	0x0802a234
24000b9c:	080264c4 	.word	0x080264c4
24000ba0:	08027b04 	.word	0x08027b04
24000ba4:	24000268 	.word	0x24000268
24000ba8:	08026744 	.word	0x08026744
24000bac:	08026748 	.word	0x08026748
24000bb0:	08027b24 	.word	0x08027b24

24000bb4 <mg_stm32h7_swap>:
MG_IRAM static bool mg_stm32h7_swap(void) {
24000bb4:	b580      	push	{r7, lr}
24000bb6:	b082      	sub	sp, #8
24000bb8:	af00      	add	r7, sp, #0
  if (!is_dualbank()) return true;
24000bba:	f7ff fe63 	bl	24000884 <is_dualbank>
24000bbe:	4603      	mov	r3, r0
24000bc0:	f083 0301 	eor.w	r3, r3, #1
24000bc4:	b2db      	uxtb	r3, r3
24000bc6:	2b00      	cmp	r3, #0
24000bc8:	d001      	beq.n	24000bce <mg_stm32h7_swap+0x1a>
24000bca:	2301      	movs	r3, #1
24000bcc:	e02e      	b.n	24000c2c <mg_stm32h7_swap+0x78>
  uint32_t bank = FLASH_BASE1;
24000bce:	4b19      	ldr	r3, [pc, #100]	@ (24000c34 <mg_stm32h7_swap+0x80>)
24000bd0:	607b      	str	r3, [r7, #4]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
24000bd2:	6878      	ldr	r0, [r7, #4]
24000bd4:	f7ff ff0c 	bl	240009f0 <flash_bank_is_swapped>
24000bd8:	4603      	mov	r3, r0
24000bda:	2b00      	cmp	r3, #0
24000bdc:	d001      	beq.n	24000be2 <mg_stm32h7_swap+0x2e>
24000bde:	2300      	movs	r3, #0
24000be0:	e001      	b.n	24000be6 <mg_stm32h7_swap+0x32>
24000be2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
24000be6:	603b      	str	r3, [r7, #0]
  flash_unlock();
24000be8:	f7ff fe5e 	bl	240008a8 <flash_unlock>
  flash_clear_err(bank);
24000bec:	6878      	ldr	r0, [r7, #4]
24000bee:	f7ff feec 	bl	240009ca <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
24000bf2:	687b      	ldr	r3, [r7, #4]
24000bf4:	3320      	adds	r3, #32
24000bf6:	681b      	ldr	r3, [r3, #0]
24000bf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
24000bfc:	687b      	ldr	r3, [r7, #4]
24000bfe:	3320      	adds	r3, #32
24000c00:	4619      	mov	r1, r3
24000c02:	683b      	ldr	r3, [r7, #0]
24000c04:	4313      	orrs	r3, r2
24000c06:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
24000c08:	687b      	ldr	r3, [r7, #4]
24000c0a:	3318      	adds	r3, #24
24000c0c:	681b      	ldr	r3, [r3, #0]
24000c0e:	687a      	ldr	r2, [r7, #4]
24000c10:	3218      	adds	r2, #24
24000c12:	f043 0302 	orr.w	r3, r3, #2
24000c16:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
24000c18:	bf00      	nop
24000c1a:	687b      	ldr	r3, [r7, #4]
24000c1c:	331c      	adds	r3, #28
24000c1e:	681b      	ldr	r3, [r3, #0]
24000c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000c24:	683a      	ldr	r2, [r7, #0]
24000c26:	429a      	cmp	r2, r3
24000c28:	d1f7      	bne.n	24000c1a <mg_stm32h7_swap+0x66>
  return true;
24000c2a:	2301      	movs	r3, #1
}
24000c2c:	4618      	mov	r0, r3
24000c2e:	3708      	adds	r7, #8
24000c30:	46bd      	mov	sp, r7
24000c32:	bd80      	pop	{r7, pc}
24000c34:	52002000 	.word	0x52002000

24000c38 <mg_stm32h7_write>:
MG_IRAM static bool mg_stm32h7_write(void *addr, const void *buf, size_t len) {
24000c38:	b580      	push	{r7, lr}
24000c3a:	b08c      	sub	sp, #48	@ 0x30
24000c3c:	af02      	add	r7, sp, #8
24000c3e:	60f8      	str	r0, [r7, #12]
24000c40:	60b9      	str	r1, [r7, #8]
24000c42:	607a      	str	r2, [r7, #4]
  if ((len % s_mg_flash_stm32h7.align) != 0) {
24000c44:	4b4f      	ldr	r3, [pc, #316]	@ (24000d84 <mg_stm32h7_write+0x14c>)
24000c46:	68da      	ldr	r2, [r3, #12]
24000c48:	687b      	ldr	r3, [r7, #4]
24000c4a:	fbb3 f1f2 	udiv	r1, r3, r2
24000c4e:	fb01 f202 	mul.w	r2, r1, r2
24000c52:	1a9b      	subs	r3, r3, r2
24000c54:	2b00      	cmp	r3, #0
24000c56:	d013      	beq.n	24000c80 <mg_stm32h7_write+0x48>
    MG_ERROR(("%lu is not aligned to %lu", len, s_mg_flash_stm32h7.align));
24000c58:	4b4b      	ldr	r3, [pc, #300]	@ (24000d88 <mg_stm32h7_write+0x150>)
24000c5a:	681b      	ldr	r3, [r3, #0]
24000c5c:	2b00      	cmp	r3, #0
24000c5e:	dd0d      	ble.n	24000c7c <mg_stm32h7_write+0x44>
24000c60:	4b4a      	ldr	r3, [pc, #296]	@ (24000d8c <mg_stm32h7_write+0x154>)
24000c62:	f641 5252 	movw	r2, #7506	@ 0x1d52
24000c66:	494a      	ldr	r1, [pc, #296]	@ (24000d90 <mg_stm32h7_write+0x158>)
24000c68:	2001      	movs	r0, #1
24000c6a:	f000 f8c9 	bl	24000e00 <__mg_log_prefix_veneer>
24000c6e:	4b45      	ldr	r3, [pc, #276]	@ (24000d84 <mg_stm32h7_write+0x14c>)
24000c70:	68db      	ldr	r3, [r3, #12]
24000c72:	461a      	mov	r2, r3
24000c74:	6879      	ldr	r1, [r7, #4]
24000c76:	4847      	ldr	r0, [pc, #284]	@ (24000d94 <mg_stm32h7_write+0x15c>)
24000c78:	f000 f8be 	bl	24000df8 <__mg_log_veneer>
    return false;
24000c7c:	2300      	movs	r3, #0
24000c7e:	e07d      	b.n	24000d7c <mg_stm32h7_write+0x144>
  uint32_t bank = flash_bank(addr);
24000c80:	68f8      	ldr	r0, [r7, #12]
24000c82:	f7ff fec9 	bl	24000a18 <flash_bank>
24000c86:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
24000c88:	68fb      	ldr	r3, [r7, #12]
24000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
24000c8c:	68bb      	ldr	r3, [r7, #8]
24000c8e:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
24000c90:	68ba      	ldr	r2, [r7, #8]
24000c92:	687b      	ldr	r3, [r7, #4]
24000c94:	4413      	add	r3, r2
24000c96:	617b      	str	r3, [r7, #20]
  bool ok = true;
24000c98:	2301      	movs	r3, #1
24000c9a:	77fb      	strb	r3, [r7, #31]
  MG_ARM_DISABLE_IRQ();
24000c9c:	b672      	cpsid	i
  flash_unlock();
24000c9e:	f7ff fe03 	bl	240008a8 <flash_unlock>
  flash_clear_err(bank);
24000ca2:	69b8      	ldr	r0, [r7, #24]
24000ca4:	f7ff fe91 	bl	240009ca <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
24000ca8:	69bb      	ldr	r3, [r7, #24]
24000caa:	330c      	adds	r3, #12
24000cac:	461a      	mov	r2, r3
24000cae:	2302      	movs	r3, #2
24000cb0:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
24000cb2:	69bb      	ldr	r3, [r7, #24]
24000cb4:	330c      	adds	r3, #12
24000cb6:	681b      	ldr	r3, [r3, #0]
24000cb8:	69ba      	ldr	r2, [r7, #24]
24000cba:	320c      	adds	r2, #12
24000cbc:	f043 0320 	orr.w	r3, r3, #32
24000cc0:	6013      	str	r3, [r2, #0]
  while (ok && src < end) {
24000cc2:	e024      	b.n	24000d0e <mg_stm32h7_write+0xd6>
    if (flash_page_start(dst) && mg_stm32h7_erase(dst) == false) {
24000cc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000cc6:	f7ff fe25 	bl	24000914 <flash_page_start>
24000cca:	4603      	mov	r3, r0
24000ccc:	2b00      	cmp	r3, #0
24000cce:	d00b      	beq.n	24000ce8 <mg_stm32h7_write+0xb0>
24000cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000cd2:	f7ff fec7 	bl	24000a64 <mg_stm32h7_erase>
24000cd6:	4603      	mov	r3, r0
24000cd8:	f083 0301 	eor.w	r3, r3, #1
24000cdc:	b2db      	uxtb	r3, r3
24000cde:	2b00      	cmp	r3, #0
24000ce0:	d002      	beq.n	24000ce8 <mg_stm32h7_write+0xb0>
      ok = false;
24000ce2:	2300      	movs	r3, #0
24000ce4:	77fb      	strb	r3, [r7, #31]
      break;
24000ce6:	e019      	b.n	24000d1c <mg_stm32h7_write+0xe4>
    *(volatile uint32_t *) dst++ = *src++;
24000ce8:	6a3a      	ldr	r2, [r7, #32]
24000cea:	1d13      	adds	r3, r2, #4
24000cec:	623b      	str	r3, [r7, #32]
24000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24000cf0:	1d19      	adds	r1, r3, #4
24000cf2:	6279      	str	r1, [r7, #36]	@ 0x24
24000cf4:	6812      	ldr	r2, [r2, #0]
24000cf6:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
24000cf8:	69b8      	ldr	r0, [r7, #24]
24000cfa:	f7ff fe53 	bl	240009a4 <flash_wait>
    if (flash_is_err(bank)) ok = false;
24000cfe:	69b8      	ldr	r0, [r7, #24]
24000d00:	f7ff fe3a 	bl	24000978 <flash_is_err>
24000d04:	4603      	mov	r3, r0
24000d06:	2b00      	cmp	r3, #0
24000d08:	d001      	beq.n	24000d0e <mg_stm32h7_write+0xd6>
24000d0a:	2300      	movs	r3, #0
24000d0c:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
24000d0e:	7ffb      	ldrb	r3, [r7, #31]
24000d10:	2b00      	cmp	r3, #0
24000d12:	d003      	beq.n	24000d1c <mg_stm32h7_write+0xe4>
24000d14:	6a3a      	ldr	r2, [r7, #32]
24000d16:	697b      	ldr	r3, [r7, #20]
24000d18:	429a      	cmp	r2, r3
24000d1a:	d3d3      	bcc.n	24000cc4 <mg_stm32h7_write+0x8c>
  if (!s_flash_irq_disabled) MG_ARM_ENABLE_IRQ();
24000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (24000d98 <mg_stm32h7_write+0x160>)
24000d1e:	781b      	ldrb	r3, [r3, #0]
24000d20:	f083 0301 	eor.w	r3, r3, #1
24000d24:	b2db      	uxtb	r3, r3
24000d26:	2b00      	cmp	r3, #0
24000d28:	d000      	beq.n	24000d2c <mg_stm32h7_write+0xf4>
24000d2a:	b662      	cpsie	i
  MG_DEBUG(("Flash write %lu bytes @ %p: %s. CR %#lx SR %#lx", len, dst,
24000d2c:	4b16      	ldr	r3, [pc, #88]	@ (24000d88 <mg_stm32h7_write+0x150>)
24000d2e:	681b      	ldr	r3, [r3, #0]
24000d30:	2b02      	cmp	r3, #2
24000d32:	dd1a      	ble.n	24000d6a <mg_stm32h7_write+0x132>
24000d34:	4b15      	ldr	r3, [pc, #84]	@ (24000d8c <mg_stm32h7_write+0x154>)
24000d36:	f641 5269 	movw	r2, #7529	@ 0x1d69
24000d3a:	4915      	ldr	r1, [pc, #84]	@ (24000d90 <mg_stm32h7_write+0x158>)
24000d3c:	2003      	movs	r0, #3
24000d3e:	f000 f85f 	bl	24000e00 <__mg_log_prefix_veneer>
24000d42:	7ffb      	ldrb	r3, [r7, #31]
24000d44:	2b00      	cmp	r3, #0
24000d46:	d001      	beq.n	24000d4c <mg_stm32h7_write+0x114>
24000d48:	4914      	ldr	r1, [pc, #80]	@ (24000d9c <mg_stm32h7_write+0x164>)
24000d4a:	e000      	b.n	24000d4e <mg_stm32h7_write+0x116>
24000d4c:	4914      	ldr	r1, [pc, #80]	@ (24000da0 <mg_stm32h7_write+0x168>)
24000d4e:	69bb      	ldr	r3, [r7, #24]
24000d50:	330c      	adds	r3, #12
24000d52:	681b      	ldr	r3, [r3, #0]
24000d54:	69ba      	ldr	r2, [r7, #24]
24000d56:	3210      	adds	r2, #16
24000d58:	6812      	ldr	r2, [r2, #0]
24000d5a:	9201      	str	r2, [sp, #4]
24000d5c:	9300      	str	r3, [sp, #0]
24000d5e:	460b      	mov	r3, r1
24000d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24000d62:	6879      	ldr	r1, [r7, #4]
24000d64:	480f      	ldr	r0, [pc, #60]	@ (24000da4 <mg_stm32h7_write+0x16c>)
24000d66:	f000 f847 	bl	24000df8 <__mg_log_veneer>
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
24000d6a:	69bb      	ldr	r3, [r7, #24]
24000d6c:	330c      	adds	r3, #12
24000d6e:	681b      	ldr	r3, [r3, #0]
24000d70:	69ba      	ldr	r2, [r7, #24]
24000d72:	320c      	adds	r2, #12
24000d74:	f023 0302 	bic.w	r3, r3, #2
24000d78:	6013      	str	r3, [r2, #0]
  return ok;
24000d7a:	7ffb      	ldrb	r3, [r7, #31]
}
24000d7c:	4618      	mov	r0, r3
24000d7e:	3728      	adds	r7, #40	@ 0x28
24000d80:	46bd      	mov	sp, r7
24000d82:	bd80      	pop	{r7, pc}
24000d84:	24000268 	.word	0x24000268
24000d88:	24000258 	.word	0x24000258
24000d8c:	0802a248 	.word	0x0802a248
24000d90:	080264c4 	.word	0x080264c4
24000d94:	08027b50 	.word	0x08027b50
24000d98:	240020f0 	.word	0x240020f0
24000d9c:	08026744 	.word	0x08026744
24000da0:	08026748 	.word	0x08026748
24000da4:	08027b6c 	.word	0x08027b6c

24000da8 <single_bank_swap>:
MG_IRAM static void single_bank_swap(char *p1, char *p2, size_t s, size_t ss) {
24000da8:	b580      	push	{r7, lr}
24000daa:	b086      	sub	sp, #24
24000dac:	af00      	add	r7, sp, #0
24000dae:	60f8      	str	r0, [r7, #12]
24000db0:	60b9      	str	r1, [r7, #8]
24000db2:	607a      	str	r2, [r7, #4]
24000db4:	603b      	str	r3, [r7, #0]
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000db6:	2300      	movs	r3, #0
24000db8:	617b      	str	r3, [r7, #20]
24000dba:	e00d      	b.n	24000dd8 <single_bank_swap+0x30>
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
24000dbc:	68fa      	ldr	r2, [r7, #12]
24000dbe:	697b      	ldr	r3, [r7, #20]
24000dc0:	18d0      	adds	r0, r2, r3
24000dc2:	68ba      	ldr	r2, [r7, #8]
24000dc4:	697b      	ldr	r3, [r7, #20]
24000dc6:	4413      	add	r3, r2
24000dc8:	683a      	ldr	r2, [r7, #0]
24000dca:	4619      	mov	r1, r3
24000dcc:	f7ff ff34 	bl	24000c38 <mg_stm32h7_write>
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000dd0:	697a      	ldr	r2, [r7, #20]
24000dd2:	683b      	ldr	r3, [r7, #0]
24000dd4:	4413      	add	r3, r2
24000dd6:	617b      	str	r3, [r7, #20]
24000dd8:	697a      	ldr	r2, [r7, #20]
24000dda:	687b      	ldr	r3, [r7, #4]
24000ddc:	429a      	cmp	r2, r3
24000dde:	d3ed      	bcc.n	24000dbc <single_bank_swap+0x14>
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
24000de0:	4b03      	ldr	r3, [pc, #12]	@ (24000df0 <single_bank_swap+0x48>)
24000de2:	4a04      	ldr	r2, [pc, #16]	@ (24000df4 <single_bank_swap+0x4c>)
24000de4:	601a      	str	r2, [r3, #0]
}
24000de6:	bf00      	nop
24000de8:	3718      	adds	r7, #24
24000dea:	46bd      	mov	sp, r7
24000dec:	bd80      	pop	{r7, pc}
24000dee:	bf00      	nop
24000df0:	e000ed0c 	.word	0xe000ed0c
24000df4:	05fa0004 	.word	0x05fa0004

24000df8 <__mg_log_veneer>:
24000df8:	f85f f000 	ldr.w	pc, [pc]	@ 24000dfc <__mg_log_veneer+0x4>
24000dfc:	0800dded 	.word	0x0800dded

24000e00 <__mg_log_prefix_veneer>:
24000e00:	f85f f000 	ldr.w	pc, [pc]	@ 24000e04 <__mg_log_prefix_veneer+0x4>
24000e04:	0800dd4d 	.word	0x0800dd4d
