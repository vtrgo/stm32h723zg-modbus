
vtrModbusTCP-H723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000241a0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011408  08024470  08024470  00025470  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08035878  08035878  00036878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08035880  08035880  00036880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08035884  08035884  00036884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000e08  24000000  08035888  00037000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .RxDescripSection 00000060  24000e08  08036690  00037e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  24000e68  080366f0  00037e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036dc  24000ec8  08036750  00037ec8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  240045a4  08036750  000385a4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00037ec8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b577  00000000  00000000  00037ef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330e  00000000  00000000  0006346d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020c8  00000000  00000000  00066780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b55  00000000  00000000  00068848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000362c4  00000000  00000000  0006a39d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025ab1  00000000  00000000  000a0661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00154b29  00000000  00000000  000c6112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021ac3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a198  00000000  00000000  0021ac80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00224e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000ec8 	.word	0x24000ec8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08024448 	.word	0x08024448

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000ecc 	.word	0x24000ecc
 800030c:	08024448 	.word	0x08024448

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <mg_random>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool mg_random(void *buf, size_t len) {  // Use on-board RNG
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
 800071a:	e01a      	b.n	8000752 <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4619      	mov	r1, r3
 8000722:	4810      	ldr	r0, [pc, #64]	@ (8000764 <mg_random+0x58>)
 8000724:	f004 fbb0 	bl	8004e88 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	18d0      	adds	r0, r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	3304      	adds	r3, #4
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d203      	bcs.n	8000740 <mg_random+0x34>
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	e000      	b.n	8000742 <mg_random+0x36>
 8000740:	2304      	movs	r3, #4
 8000742:	f107 0108 	add.w	r1, r7, #8
 8000746:	461a      	mov	r2, r3
 8000748:	f023 f95f 	bl	8023a0a <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3304      	adds	r3, #4
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d3e0      	bcc.n	800071c <mg_random+0x10>
  }
  return true; // TODO(): ensure successful RNG init, then return on false above
 800075a:	2301      	movs	r3, #1
}
 800075c:	4618      	mov	r0, r3
 800075e:	3710      	adds	r7, #16
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	24000fcc 	.word	0x24000fcc

08000768 <mg_millis>:

uint64_t mg_millis(void) {
 8000768:	b5b0      	push	{r4, r5, r7, lr}
 800076a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800076c:	f000 fe48 	bl	8001400 <HAL_GetTick>
 8000770:	4603      	mov	r3, r0
 8000772:	2200      	movs	r2, #0
 8000774:	461c      	mov	r4, r3
 8000776:	4615      	mov	r5, r2
 8000778:	4622      	mov	r2, r4
 800077a:	462b      	mov	r3, r5
}
 800077c:	4610      	mov	r0, r2
 800077e:	4619      	mov	r1, r3
 8000780:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000784 <_write>:

int _write(int fd, unsigned char *buf, int len) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
  if (fd == 1 || fd == 2) {                     // stdout or stderr ?
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d002      	beq.n	800079c <_write+0x18>
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2b02      	cmp	r3, #2
 800079a:	d107      	bne.n	80007ac <_write+0x28>
    HAL_UART_Transmit(&huart3, buf, len, 999);  // Print to the UART
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	4804      	ldr	r0, [pc, #16]	@ (80007b8 <_write+0x34>)
 80007a8:	f004 fcc3 	bl	8005132 <HAL_UART_Transmit>
  }
  return len;
 80007ac:	687b      	ldr	r3, [r7, #4]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3710      	adds	r7, #16
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	24000fe0 	.word	0x24000fe0

080007bc <my_get_leds>:

void my_get_leds(struct leds *leds) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  leds->led1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80007c4:	2101      	movs	r1, #1
 80007c6:	4814      	ldr	r0, [pc, #80]	@ (8000818 <my_get_leds+0x5c>)
 80007c8:	f001 fd26 	bl	8002218 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	bf14      	ite	ne
 80007d2:	2301      	movne	r3, #1
 80007d4:	2300      	moveq	r3, #0
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	701a      	strb	r2, [r3, #0]
  leds->led2 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_1);
 80007dc:	2102      	movs	r1, #2
 80007de:	480f      	ldr	r0, [pc, #60]	@ (800081c <my_get_leds+0x60>)
 80007e0:	f001 fd1a 	bl	8002218 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf14      	ite	ne
 80007ea:	2301      	movne	r3, #1
 80007ec:	2300      	moveq	r3, #0
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	705a      	strb	r2, [r3, #1]
  leds->led3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80007f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f8:	4807      	ldr	r0, [pc, #28]	@ (8000818 <my_get_leds+0x5c>)
 80007fa:	f001 fd0d 	bl	8002218 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf14      	ite	ne
 8000804:	2301      	movne	r3, #1
 8000806:	2300      	moveq	r3, #0
 8000808:	b2da      	uxtb	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	709a      	strb	r2, [r3, #2]
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	58020400 	.word	0x58020400
 800081c:	58021000 	.word	0x58021000

08000820 <my_set_leds>:
void my_set_leds(struct leds *leds) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, leds->led1);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	461a      	mov	r2, r3
 800082e:	2101      	movs	r1, #1
 8000830:	480a      	ldr	r0, [pc, #40]	@ (800085c <my_set_leds+0x3c>)
 8000832:	f001 fd09 	bl	8002248 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, leds->led2);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	785b      	ldrb	r3, [r3, #1]
 800083a:	461a      	mov	r2, r3
 800083c:	2102      	movs	r1, #2
 800083e:	4808      	ldr	r0, [pc, #32]	@ (8000860 <my_set_leds+0x40>)
 8000840:	f001 fd02 	bl	8002248 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, leds->led3);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	789b      	ldrb	r3, [r3, #2]
 8000848:	461a      	mov	r2, r3
 800084a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800084e:	4803      	ldr	r0, [pc, #12]	@ (800085c <my_set_leds+0x3c>)
 8000850:	f001 fcfa 	bl	8002248 <HAL_GPIO_WritePin>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	58020400 	.word	0x58020400
 8000860:	58021000 	.word	0x58021000

08000864 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000868:	f000 fd44 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086c:	f000 f81e 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000870:	f000 f93c 	bl	8000aec <MX_GPIO_Init>
  MX_ETH_Init();
 8000874:	f000 f88c 	bl	8000990 <MX_ETH_Init>
  MX_RNG_Init();
 8000878:	f000 f8d6 	bl	8000a28 <MX_RNG_Init>
  MX_USART3_UART_Init();
 800087c:	f000 f8ea 	bl	8000a54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  mongoose_init();
 8000880:	f022 fc20 	bl	80230c4 <mongoose_init>
  mongoose_set_http_handlers("leds", my_get_leds, my_set_leds);
 8000884:	4a06      	ldr	r2, [pc, #24]	@ (80008a0 <main+0x3c>)
 8000886:	4907      	ldr	r1, [pc, #28]	@ (80008a4 <main+0x40>)
 8000888:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <main+0x44>)
 800088a:	f020 fe15 	bl	80214b8 <mongoose_set_http_handlers>
  glue_modbus_write_reg(1200, 9999);
 800088e:	f242 710f 	movw	r1, #9999	@ 0x270f
 8000892:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8000896:	f020 fa51 	bl	8020d3c <glue_modbus_write_reg>
  for (;;) {

    mongoose_poll();
 800089a:	f022 fc75 	bl	8023188 <mongoose_poll>
 800089e:	e7fc      	b.n	800089a <main+0x36>
 80008a0:	08000821 	.word	0x08000821
 80008a4:	080007bd 	.word	0x080007bd
 80008a8:	08024470 	.word	0x08024470

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	@ 0x70
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	224c      	movs	r2, #76	@ 0x4c
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f022 ff6f 	bl	802379e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2220      	movs	r2, #32
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f022 ff69 	bl	802379e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008cc:	2002      	movs	r0, #2
 80008ce:	f001 fcd5 	bl	800227c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b2d      	ldr	r3, [pc, #180]	@ (800098c <SystemClock_Config+0xe0>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008de:	4a2b      	ldr	r2, [pc, #172]	@ (800098c <SystemClock_Config+0xe0>)
 80008e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008e4:	6193      	str	r3, [r2, #24]
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <SystemClock_Config+0xe0>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f2:	bf00      	nop
 80008f4:	4b25      	ldr	r3, [pc, #148]	@ (800098c <SystemClock_Config+0xe0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000900:	d1f8      	bne.n	80008f4 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000902:	2322      	movs	r3, #34	@ 0x22
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000906:	2301      	movs	r3, #1
 8000908:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800090a:	2340      	movs	r3, #64	@ 0x40
 800090c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800090e:	2301      	movs	r3, #1
 8000910:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000916:	2300      	movs	r3, #0
 8000918:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800091a:	2304      	movs	r3, #4
 800091c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800091e:	230c      	movs	r3, #12
 8000920:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000922:	2301      	movs	r3, #1
 8000924:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000926:	2304      	movs	r3, #4
 8000928:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800092e:	230c      	movs	r3, #12
 8000930:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000932:	2300      	movs	r3, #0
 8000934:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fcd6 	bl	80022f0 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800094a:	f000 f9bd 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	233f      	movs	r3, #63	@ 0x3f
 8000950:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2303      	movs	r3, #3
 8000954:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800095a:	2308      	movs	r3, #8
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800095e:	2340      	movs	r3, #64	@ 0x40
 8000960:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000962:	2340      	movs	r3, #64	@ 0x40
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800096c:	2340      	movs	r3, #64	@ 0x40
 800096e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	2101      	movs	r1, #1
 8000974:	4618      	mov	r0, r3
 8000976:	f002 f895 	bl	8002aa4 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000980:	f000 f9a2 	bl	8000cc8 <Error_Handler>
  }
}
 8000984:	bf00      	nop
 8000986:	3770      	adds	r7, #112	@ 0x70
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	58024800 	.word	0x58024800

08000990 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_ETH_Init+0x80>)
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <MX_ETH_Init+0x84>)
 8000998:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800099a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <MX_ETH_Init+0x88>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a18 <MX_ETH_Init+0x88>)
 80009a2:	2280      	movs	r2, #128	@ 0x80
 80009a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <MX_ETH_Init+0x88>)
 80009a8:	22e1      	movs	r2, #225	@ 0xe1
 80009aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <MX_ETH_Init+0x88>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <MX_ETH_Init+0x88>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80009b8:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <MX_ETH_Init+0x88>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_ETH_Init+0x80>)
 80009c0:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <MX_ETH_Init+0x88>)
 80009c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <MX_ETH_Init+0x80>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80009ca:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <MX_ETH_Init+0x80>)
 80009cc:	4a13      	ldr	r2, [pc, #76]	@ (8000a1c <MX_ETH_Init+0x8c>)
 80009ce:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a10 <MX_ETH_Init+0x80>)
 80009d2:	4a13      	ldr	r2, [pc, #76]	@ (8000a20 <MX_ETH_Init+0x90>)
 80009d4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_ETH_Init+0x80>)
 80009d8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80009dc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009de:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_ETH_Init+0x80>)
 80009e0:	f000 fe3e 	bl	8001660 <HAL_ETH_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009ea:	f000 f96d 	bl	8000cc8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009ee:	2238      	movs	r2, #56	@ 0x38
 80009f0:	2100      	movs	r1, #0
 80009f2:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <MX_ETH_Init+0x94>)
 80009f4:	f022 fed3 	bl	802379e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a24 <MX_ETH_Init+0x94>)
 80009fa:	2221      	movs	r2, #33	@ 0x21
 80009fc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <MX_ETH_Init+0x94>)
 8000a00:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a04:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a06:	4b07      	ldr	r3, [pc, #28]	@ (8000a24 <MX_ETH_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	24000f1c 	.word	0x24000f1c
 8000a14:	40028000 	.word	0x40028000
 8000a18:	24001074 	.word	0x24001074
 8000a1c:	24000e68 	.word	0x24000e68
 8000a20:	24000e08 	.word	0x24000e08
 8000a24:	24000ee4 	.word	0x24000ee4

08000a28 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <MX_RNG_Init+0x24>)
 8000a2e:	4a08      	ldr	r2, [pc, #32]	@ (8000a50 <MX_RNG_Init+0x28>)
 8000a30:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_RNG_Init+0x24>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_RNG_Init+0x24>)
 8000a3a:	f004 f981 	bl	8004d40 <HAL_RNG_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000a44:	f000 f940 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	24000fcc 	.word	0x24000fcc
 8000a50:	48021800 	.word	0x48021800

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ae8 <MX_USART3_UART_Init+0x94>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b17      	ldr	r3, [pc, #92]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b14      	ldr	r3, [pc, #80]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9c:	4811      	ldr	r0, [pc, #68]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f004 faf8 	bl	8005092 <HAL_UART_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f000 f90e 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480d      	ldr	r0, [pc, #52]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f005 fc93 	bl	80063da <HAL_UARTEx_SetTxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f000 f905 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4808      	ldr	r0, [pc, #32]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f005 fcc8 	bl	8006456 <HAL_UARTEx_SetRxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f000 f8fc 	bl	8000cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	@ (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f005 fc49 	bl	8006368 <HAL_UARTEx_DisableFifoMode>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f8f4 	bl	8000cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	24000fe0 	.word	0x24000fe0
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	@ 0x30
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b6a      	ldr	r3, [pc, #424]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	4a68      	ldr	r2, [pc, #416]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b12:	4b66      	ldr	r3, [pc, #408]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
 8000b1e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b20:	4b62      	ldr	r3, [pc, #392]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	4a61      	ldr	r2, [pc, #388]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b30:	4b5e      	ldr	r3, [pc, #376]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b5b      	ldr	r3, [pc, #364]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	4a59      	ldr	r2, [pc, #356]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4e:	4b57      	ldr	r3, [pc, #348]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	f003 0301 	and.w	r3, r3, #1
 8000b58:	613b      	str	r3, [r7, #16]
 8000b5a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b53      	ldr	r3, [pc, #332]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b62:	4a52      	ldr	r2, [pc, #328]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	4a4a      	ldr	r2, [pc, #296]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8a:	4b48      	ldr	r3, [pc, #288]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b98:	4b44      	ldr	r3, [pc, #272]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	4a43      	ldr	r2, [pc, #268]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba8:	4b40      	ldr	r3, [pc, #256]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	4a3b      	ldr	r2, [pc, #236]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc6:	4b39      	ldr	r3, [pc, #228]	@ (8000cac <MX_GPIO_Init+0x1c0>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bda:	4835      	ldr	r0, [pc, #212]	@ (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000bdc:	f001 fb34 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000be6:	4833      	ldr	r0, [pc, #204]	@ (8000cb4 <MX_GPIO_Init+0x1c8>)
 8000be8:	f001 fb2e 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2102      	movs	r1, #2
 8000bf0:	4831      	ldr	r0, [pc, #196]	@ (8000cb8 <MX_GPIO_Init+0x1cc>)
 8000bf2:	f001 fb29 	bl	8002248 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	482c      	ldr	r0, [pc, #176]	@ (8000cbc <MX_GPIO_Init+0x1d0>)
 8000c0c:	f001 f95c 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c10:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c16:	2301      	movs	r3, #1
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4821      	ldr	r0, [pc, #132]	@ (8000cb0 <MX_GPIO_Init+0x1c4>)
 8000c2a:	f001 f94d 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	481b      	ldr	r0, [pc, #108]	@ (8000cb4 <MX_GPIO_Init+0x1c8>)
 8000c48:	f001 f93e 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c4c:	2380      	movs	r3, #128	@ 0x80
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c50:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <MX_GPIO_Init+0x1d4>)
 8000c62:	f001 f931 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c78:	230a      	movs	r3, #10
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4619      	mov	r1, r3
 8000c82:	4810      	ldr	r0, [pc, #64]	@ (8000cc4 <MX_GPIO_Init+0x1d8>)
 8000c84:	f001 f920 	bl	8001ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	@ (8000cb8 <MX_GPIO_Init+0x1cc>)
 8000ca0:	f001 f912 	bl	8001ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ca4:	bf00      	nop
 8000ca6:	3730      	adds	r7, #48	@ 0x30
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020400 	.word	0x58020400
 8000cb4:	58020c00 	.word	0x58020c00
 8000cb8:	58021000 	.word	0x58021000
 8000cbc:	58020800 	.word	0x58020800
 8000cc0:	58021800 	.word	0x58021800
 8000cc4:	58020000 	.word	0x58020000

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_MspInit+0x30>)
 8000cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce0:	4a08      	ldr	r2, [pc, #32]	@ (8000d04 <HAL_MspInit+0x30>)
 8000ce2:	f043 0302 	orr.w	r3, r3, #2
 8000ce6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_MspInit+0x30>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cf0:	f003 0302 	and.w	r3, r3, #2
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	58024400 	.word	0x58024400

08000d08 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	@ 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a5d      	ldr	r2, [pc, #372]	@ (8000e9c <HAL_ETH_MspInit+0x194>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	f040 80b3 	bne.w	8000e92 <HAL_ETH_MspInit+0x18a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d32:	4a5b      	ldr	r2, [pc, #364]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d3c:	4b58      	ldr	r3, [pc, #352]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d4a:	4b55      	ldr	r3, [pc, #340]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d50:	4a53      	ldr	r2, [pc, #332]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d5a:	4b51      	ldr	r3, [pc, #324]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d68:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d6e:	4a4c      	ldr	r2, [pc, #304]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d78:	4b49      	ldr	r3, [pc, #292]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b46      	ldr	r3, [pc, #280]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	4a44      	ldr	r2, [pc, #272]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d96:	4b42      	ldr	r3, [pc, #264]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	4a3d      	ldr	r2, [pc, #244]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b37      	ldr	r3, [pc, #220]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	4a35      	ldr	r2, [pc, #212]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd2:	4b33      	ldr	r3, [pc, #204]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	4a2e      	ldr	r2, [pc, #184]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dfe:	2332      	movs	r3, #50	@ 0x32
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0e:	230b      	movs	r3, #11
 8000e10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4822      	ldr	r0, [pc, #136]	@ (8000ea4 <HAL_ETH_MspInit+0x19c>)
 8000e1a:	f001 f855 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e1e:	2386      	movs	r3, #134	@ 0x86
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	481b      	ldr	r0, [pc, #108]	@ (8000ea8 <HAL_ETH_MspInit+0x1a0>)
 8000e3a:	f001 f845 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e50:	230b      	movs	r3, #11
 8000e52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4814      	ldr	r0, [pc, #80]	@ (8000eac <HAL_ETH_MspInit+0x1a4>)
 8000e5c:	f001 f834 	bl	8001ec8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e72:	230b      	movs	r3, #11
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	@ (8000eb0 <HAL_ETH_MspInit+0x1a8>)
 8000e7e:	f001 f823 	bl	8001ec8 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	203d      	movs	r0, #61	@ 0x3d
 8000e88:	f000 fbb5 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000e8c:	203d      	movs	r0, #61	@ 0x3d
 8000e8e:	f000 fbcc 	bl	800162a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e92:	bf00      	nop
 8000e94:	3738      	adds	r7, #56	@ 0x38
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40028000 	.word	0x40028000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020800 	.word	0x58020800
 8000ea8:	58020000 	.word	0x58020000
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	58021800 	.word	0x58021800

08000eb4 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0b2      	sub	sp, #200	@ 0xc8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	22b8      	movs	r2, #184	@ 0xb8
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f022 fc6a 	bl	802379e <memset>
  if(hrng->Instance==RNG)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a14      	ldr	r2, [pc, #80]	@ (8000f20 <HAL_RNG_MspInit+0x6c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d121      	bne.n	8000f18 <HAL_RNG_MspInit+0x64>

    /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000ed4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 f966 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8000ef6:	f7ff fee7 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000efa:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <HAL_RNG_MspInit+0x70>)
 8000efc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000f00:	4a08      	ldr	r2, [pc, #32]	@ (8000f24 <HAL_RNG_MspInit+0x70>)
 8000f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f06:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000f0a:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <HAL_RNG_MspInit+0x70>)
 8000f0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8000f18:	bf00      	nop
 8000f1a:	37c8      	adds	r7, #200	@ 0xc8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	48021800 	.word	0x48021800
 8000f24:	58024400 	.word	0x58024400

08000f28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b0b8      	sub	sp, #224	@ 0xe0
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	22b8      	movs	r2, #184	@ 0xb8
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f022 fc28 	bl	802379e <memset>
  if(huart->Instance==USART3)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4a27      	ldr	r2, [pc, #156]	@ (8000ff0 <HAL_UART_MspInit+0xc8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d146      	bne.n	8000fe6 <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f58:	f04f 0202 	mov.w	r2, #2
 8000f5c:	f04f 0300 	mov.w	r3, #0
 8000f60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 f924 	bl	80031bc <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f7a:	f7ff fea5 	bl	8000cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <HAL_UART_MspInit+0xcc>)
 8000f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f84:	4a1b      	ldr	r2, [pc, #108]	@ (8000ff4 <HAL_UART_MspInit+0xcc>)
 8000f86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <HAL_UART_MspInit+0xcc>)
 8000f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9c:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_UART_MspInit+0xcc>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa2:	4a14      	ldr	r2, [pc, #80]	@ (8000ff4 <HAL_UART_MspInit+0xcc>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <HAL_UART_MspInit+0xcc>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000fba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fda:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <HAL_UART_MspInit+0xd0>)
 8000fe2:	f000 ff71 	bl	8001ec8 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000fe6:	bf00      	nop
 8000fe8:	37e0      	adds	r7, #224	@ 0xe0
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40004800 	.word	0x40004800
 8000ff4:	58024400 	.word	0x58024400
 8000ff8:	58020c00 	.word	0x58020c00

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <NMI_Handler+0x4>

08001004 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <HardFault_Handler+0x4>

0800100c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <MemManage_Handler+0x4>

08001014 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <UsageFault_Handler+0x4>

08001024 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001052:	f000 f9c1 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}

0800105a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <_kill>:

int _kill(int pid, int sig)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001074:	f022 fc94 	bl	80239a0 <__errno>
 8001078:	4603      	mov	r3, r0
 800107a:	2216      	movs	r2, #22
 800107c:	601a      	str	r2, [r3, #0]
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <_exit>:

void _exit (int status)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001092:	f04f 31ff 	mov.w	r1, #4294967295
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ffe7 	bl	800106a <_kill>
  while (1) {}    /* Make sure we hang here */
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <_exit+0x12>

080010a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
  }

  return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_close>:
  }
  return len;
}

int _close(int file)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001102:	605a      	str	r2, [r3, #4]
  return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <_isatty>:

int _isatty(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800114c:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <_sbrk+0x5c>)
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <_sbrk+0x60>)
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <_sbrk+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d102      	bne.n	8001166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <_sbrk+0x64>)
 8001162:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <_sbrk+0x68>)
 8001164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001166:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <_sbrk+0x64>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	429a      	cmp	r2, r3
 8001172:	d207      	bcs.n	8001184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001174:	f022 fc14 	bl	80239a0 <__errno>
 8001178:	4603      	mov	r3, r0
 800117a:	220c      	movs	r2, #12
 800117c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	e009      	b.n	8001198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001184:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118a:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <_sbrk+0x64>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4413      	add	r3, r2
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <_sbrk+0x64>)
 8001194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001196:	68fb      	ldr	r3, [r7, #12]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3718      	adds	r7, #24
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	24050000 	.word	0x24050000
 80011a4:	00000400 	.word	0x00000400
 80011a8:	2400107c 	.word	0x2400107c
 80011ac:	240045a8 	.word	0x240045a8

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011b4:	4b32      	ldr	r3, [pc, #200]	@ (8001280 <SystemInit+0xd0>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ba:	4a31      	ldr	r2, [pc, #196]	@ (8001280 <SystemInit+0xd0>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <SystemInit+0xd4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	2b06      	cmp	r3, #6
 80011ce:	d807      	bhi.n	80011e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001284 <SystemInit+0xd4>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 030f 	bic.w	r3, r3, #15
 80011d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001284 <SystemInit+0xd4>)
 80011da:	f043 0307 	orr.w	r3, r3, #7
 80011de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011e0:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <SystemInit+0xd8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a28      	ldr	r2, [pc, #160]	@ (8001288 <SystemInit+0xd8>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011ec:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <SystemInit+0xd8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011f2:	4b25      	ldr	r3, [pc, #148]	@ (8001288 <SystemInit+0xd8>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	4924      	ldr	r1, [pc, #144]	@ (8001288 <SystemInit+0xd8>)
 80011f8:	4b24      	ldr	r3, [pc, #144]	@ (800128c <SystemInit+0xdc>)
 80011fa:	4013      	ands	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011fe:	4b21      	ldr	r3, [pc, #132]	@ (8001284 <SystemInit+0xd4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d007      	beq.n	800121a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800120a:	4b1e      	ldr	r3, [pc, #120]	@ (8001284 <SystemInit+0xd4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 030f 	bic.w	r3, r3, #15
 8001212:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <SystemInit+0xd4>)
 8001214:	f043 0307 	orr.w	r3, r3, #7
 8001218:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800121a:	4b1b      	ldr	r3, [pc, #108]	@ (8001288 <SystemInit+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <SystemInit+0xd8>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001226:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <SystemInit+0xd8>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <SystemInit+0xd8>)
 800122e:	4a18      	ldr	r2, [pc, #96]	@ (8001290 <SystemInit+0xe0>)
 8001230:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001232:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <SystemInit+0xd8>)
 8001234:	4a17      	ldr	r2, [pc, #92]	@ (8001294 <SystemInit+0xe4>)
 8001236:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <SystemInit+0xd8>)
 800123a:	4a17      	ldr	r2, [pc, #92]	@ (8001298 <SystemInit+0xe8>)
 800123c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800123e:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <SystemInit+0xd8>)
 8001240:	2200      	movs	r2, #0
 8001242:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001244:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <SystemInit+0xd8>)
 8001246:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <SystemInit+0xe8>)
 8001248:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <SystemInit+0xd8>)
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001250:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <SystemInit+0xd8>)
 8001252:	4a11      	ldr	r2, [pc, #68]	@ (8001298 <SystemInit+0xe8>)
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <SystemInit+0xd8>)
 8001258:	2200      	movs	r2, #0
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <SystemInit+0xd8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a09      	ldr	r2, [pc, #36]	@ (8001288 <SystemInit+0xd8>)
 8001262:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001266:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001268:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <SystemInit+0xd8>)
 800126a:	2200      	movs	r2, #0
 800126c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800126e:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <SystemInit+0xec>)
 8001270:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001274:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00
 8001284:	52002000 	.word	0x52002000
 8001288:	58024400 	.word	0x58024400
 800128c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001290:	02020200 	.word	0x02020200
 8001294:	01ff0000 	.word	0x01ff0000
 8001298:	01010280 	.word	0x01010280
 800129c:	52004000 	.word	0x52004000

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a4:	f7ff ff84 	bl	80011b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a8:	480c      	ldr	r0, [pc, #48]	@ (80012dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012aa:	490d      	ldr	r1, [pc, #52]	@ (80012e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ac:	4a0d      	ldr	r2, [pc, #52]	@ (80012e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b0:	e002      	b.n	80012b8 <LoopCopyDataInit>

080012b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b6:	3304      	adds	r3, #4

080012b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012bc:	d3f9      	bcc.n	80012b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012c0:	4c0a      	ldr	r4, [pc, #40]	@ (80012ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c4:	e001      	b.n	80012ca <LoopFillZerobss>

080012c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c8:	3204      	adds	r2, #4

080012ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012cc:	d3fb      	bcc.n	80012c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ce:	f022 fb6d 	bl	80239ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff fac7 	bl	8000864 <main>
  bx  lr
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80012dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012e0:	24000e08 	.word	0x24000e08
  ldr r2, =_sidata
 80012e4:	08035888 	.word	0x08035888
  ldr r2, =_sbss
 80012e8:	24000ec8 	.word	0x24000ec8
  ldr r4, =_ebss
 80012ec:	240045a4 	.word	0x240045a4

080012f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC3_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 f970 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001300:	f001 fd86 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8001304:	4602      	mov	r2, r0
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_Init+0x68>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	0a1b      	lsrs	r3, r3, #8
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	4913      	ldr	r1, [pc, #76]	@ (8001360 <HAL_Init+0x6c>)
 8001312:	5ccb      	ldrb	r3, [r1, r3]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	fa22 f303 	lsr.w	r3, r2, r3
 800131c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800131e:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_Init+0x68>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <HAL_Init+0x6c>)
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	fa22 f303 	lsr.w	r3, r2, r3
 8001334:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <HAL_Init+0x70>)
 8001336:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001338:	4a0b      	ldr	r2, [pc, #44]	@ (8001368 <HAL_Init+0x74>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f814 	bl	800136c <HAL_InitTick>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e002      	b.n	8001354 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134e:	f7ff fcc1 	bl	8000cd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	58024400 	.word	0x58024400
 8001360:	08027b54 	.word	0x08027b54
 8001364:	24000004 	.word	0x24000004
 8001368:	24000000 	.word	0x24000000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_InitTick+0x60>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e021      	b.n	80013c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_InitTick+0x64>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f955 	bl	8001646 <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f91f 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <HAL_InitTick+0x68>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	2400000c 	.word	0x2400000c
 80013d0:	24000000 	.word	0x24000000
 80013d4:	24000008 	.word	0x24000008

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	2400000c 	.word	0x2400000c
 80013fc:	24001080 	.word	0x24001080

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	24001080 	.word	0x24001080

08001418 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001428:	4904      	ldr	r1, [pc, #16]	@ (800143c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	58000400 	.word	0x58000400

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <__NVIC_SetPriorityGrouping+0x40>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	4313      	orrs	r3, r2
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <__NVIC_SetPriorityGrouping+0x40>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00
 8001484:	05fa0000 	.word	0x05fa0000

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	88fb      	ldrh	r3, [r7, #6]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4907      	ldr	r1, [pc, #28]	@ (80014dc <__NVIC_EnableIRQ+0x38>)
 80014be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	@ (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	@ (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	88fb      	ldrh	r3, [r7, #6]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	@ 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	@ 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	@ (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	@ (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff29 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001604:	f7ff ff40 	bl	8001488 <__NVIC_GetPriorityGrouping>
 8001608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff ff90 	bl	8001534 <NVIC_EncodePriority>
 8001614:	4602      	mov	r2, r0
 8001616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff5f 	bl	80014e0 <__NVIC_SetPriority>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff33 	bl	80014a4 <__NVIC_EnableIRQ>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffa4 	bl	800159c <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0e3      	b.n	800183a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2220      	movs	r2, #32
 8001680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff fb3f 	bl	8000d08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168a:	4b6e      	ldr	r3, [pc, #440]	@ (8001844 <HAL_ETH_Init+0x1e4>)
 800168c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001690:	4a6c      	ldr	r2, [pc, #432]	@ (8001844 <HAL_ETH_Init+0x1e4>)
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800169a:	4b6a      	ldr	r3, [pc, #424]	@ (8001844 <HAL_ETH_Init+0x1e4>)
 800169c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7a1b      	ldrb	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff feb1 	bl	8001418 <HAL_SYSCFG_ETHInterfaceSelect>
 80016b6:	e003      	b.n	80016c0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016b8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80016bc:	f7ff feac 	bl	8001418 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80016c0:	4b61      	ldr	r3, [pc, #388]	@ (8001848 <HAL_ETH_Init+0x1e8>)
 80016c2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016dc:	f7ff fe90 	bl	8001400 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016e2:	e011      	b.n	8001708 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016e4:	f7ff fe8c 	bl	8001400 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016f2:	d909      	bls.n	8001708 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2204      	movs	r2, #4
 80016f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	22e0      	movs	r2, #224	@ 0xe0
 8001700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e098      	b.n	800183a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1e4      	bne.n	80016e4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f89e 	bl	800185c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001720:	f001 fcf0 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 8001724:	4603      	mov	r3, r0
 8001726:	4a49      	ldr	r2, [pc, #292]	@ (800184c <HAL_ETH_Init+0x1ec>)
 8001728:	fba2 2303 	umull	r2, r3, r2, r3
 800172c:	0c9a      	lsrs	r2, r3, #18
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	3a01      	subs	r2, #1
 8001734:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fa81 	bl	8001c40 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001746:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800174a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001756:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800175a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d009      	beq.n	800177e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	22e0      	movs	r2, #224	@ 0xe0
 8001776:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e05d      	b.n	800183a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001786:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800178a:	4b31      	ldr	r3, [pc, #196]	@ (8001850 <HAL_ETH_Init+0x1f0>)
 800178c:	4013      	ands	r3, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6952      	ldr	r2, [r2, #20]
 8001792:	0051      	lsls	r1, r2, #1
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	430b      	orrs	r3, r1
 800179a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800179e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 fae9 	bl	8001d7a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 fb2f 	bl	8001e0c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	3305      	adds	r3, #5
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021a      	lsls	r2, r3, #8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	3304      	adds	r3, #4
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	3303      	adds	r3, #3
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	061a      	lsls	r2, r3, #24
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	3302      	adds	r3, #2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	041b      	lsls	r3, r3, #16
 80017e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	3301      	adds	r3, #1
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017ec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017fa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017fc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b11      	ldr	r3, [pc, #68]	@ (8001854 <HAL_ETH_Init+0x1f4>)
 800180e:	430b      	orrs	r3, r1
 8001810:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b0d      	ldr	r3, [pc, #52]	@ (8001858 <HAL_ETH_Init+0x1f8>)
 8001822:	430b      	orrs	r3, r1
 8001824:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2210      	movs	r2, #16
 8001834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	58024400 	.word	0x58024400
 8001848:	58000400 	.word	0x58000400
 800184c:	431bde83 	.word	0x431bde83
 8001850:	ffff8001 	.word	0xffff8001
 8001854:	0c020060 	.word	0x0c020060
 8001858:	0c20c000 	.word	0x0c20c000

0800185c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800186c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001874:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001876:	f001 fc45 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 800187a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4a1a      	ldr	r2, [pc, #104]	@ (80018e8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d804      	bhi.n	800188e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e022      	b.n	80018d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	4a16      	ldr	r2, [pc, #88]	@ (80018ec <HAL_ETH_SetMDIOClockRange+0x90>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d204      	bcs.n	80018a0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	e019      	b.n	80018d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4a13      	ldr	r2, [pc, #76]	@ (80018f0 <HAL_ETH_SetMDIOClockRange+0x94>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d915      	bls.n	80018d4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4a12      	ldr	r2, [pc, #72]	@ (80018f4 <HAL_ETH_SetMDIOClockRange+0x98>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d804      	bhi.n	80018ba <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e00c      	b.n	80018d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	4a0e      	ldr	r2, [pc, #56]	@ (80018f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d804      	bhi.n	80018cc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	e003      	b.n	80018d4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80018d2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	02160ebf 	.word	0x02160ebf
 80018ec:	03938700 	.word	0x03938700
 80018f0:	05f5e0ff 	.word	0x05f5e0ff
 80018f4:	08f0d17f 	.word	0x08f0d17f
 80018f8:	0ee6b27f 	.word	0x0ee6b27f

080018fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800190e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001916:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	7b1b      	ldrb	r3, [r3, #12]
 800191c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800191e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7b5b      	ldrb	r3, [r3, #13]
 8001924:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	7b9b      	ldrb	r3, [r3, #14]
 800192c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800192e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	7bdb      	ldrb	r3, [r3, #15]
 8001934:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001936:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	7c12      	ldrb	r2, [r2, #16]
 800193c:	2a00      	cmp	r2, #0
 800193e:	d102      	bne.n	8001946 <ETH_SetMACConfig+0x4a>
 8001940:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001944:	e000      	b.n	8001948 <ETH_SetMACConfig+0x4c>
 8001946:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001948:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	7c52      	ldrb	r2, [r2, #17]
 800194e:	2a00      	cmp	r2, #0
 8001950:	d102      	bne.n	8001958 <ETH_SetMACConfig+0x5c>
 8001952:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001956:	e000      	b.n	800195a <ETH_SetMACConfig+0x5e>
 8001958:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800195a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	7c9b      	ldrb	r3, [r3, #18]
 8001960:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001962:	431a      	orrs	r2, r3
               macconf->Speed |
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001968:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800196e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7f1b      	ldrb	r3, [r3, #28]
 8001974:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001976:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	7f5b      	ldrb	r3, [r3, #29]
 800197c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800197e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	7f92      	ldrb	r2, [r2, #30]
 8001984:	2a00      	cmp	r2, #0
 8001986:	d102      	bne.n	800198e <ETH_SetMACConfig+0x92>
 8001988:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800198c:	e000      	b.n	8001990 <ETH_SetMACConfig+0x94>
 800198e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001990:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	7fdb      	ldrb	r3, [r3, #31]
 8001996:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001998:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019a0:	2a00      	cmp	r2, #0
 80019a2:	d102      	bne.n	80019aa <ETH_SetMACConfig+0xae>
 80019a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a8:	e000      	b.n	80019ac <ETH_SetMACConfig+0xb0>
 80019aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019ac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019ba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80019bc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b56      	ldr	r3, [pc, #344]	@ (8001b28 <ETH_SetMACConfig+0x22c>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	68f9      	ldr	r1, [r7, #12]
 80019d6:	430b      	orrs	r3, r1
 80019d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80019fa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001a04:	2a00      	cmp	r2, #0
 8001a06:	d102      	bne.n	8001a0e <ETH_SetMACConfig+0x112>
 8001a08:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a0c:	e000      	b.n	8001a10 <ETH_SetMACConfig+0x114>
 8001a0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a10:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a16:	4313      	orrs	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	4b42      	ldr	r3, [pc, #264]	@ (8001b2c <ETH_SetMACConfig+0x230>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	68f9      	ldr	r1, [r7, #12]
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a34:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b3a      	ldr	r3, [pc, #232]	@ (8001b30 <ETH_SetMACConfig+0x234>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	68f9      	ldr	r1, [r7, #12]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a58:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d101      	bne.n	8001a6e <ETH_SetMACConfig+0x172>
 8001a6a:	2280      	movs	r2, #128	@ 0x80
 8001a6c:	e000      	b.n	8001a70 <ETH_SetMACConfig+0x174>
 8001a6e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a70:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a76:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a82:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001a86:	4013      	ands	r3, r2
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	430b      	orrs	r3, r1
 8001a90:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001a98:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001aa0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aae:	f023 0103 	bic.w	r1, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001ac6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	d101      	bne.n	8001aea <ETH_SetMACConfig+0x1ee>
 8001ae6:	2240      	movs	r2, #64	@ 0x40
 8001ae8:	e000      	b.n	8001aec <ETH_SetMACConfig+0x1f0>
 8001aea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001aec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001af4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001af6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001afe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001b0c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	00048083 	.word	0x00048083
 8001b2c:	c0f88000 	.word	0xc0f88000
 8001b30:	fffffef0 	.word	0xfffffef0

08001b34 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b38      	ldr	r3, [pc, #224]	@ (8001c2c <ETH_SetDMAConfig+0xf8>)
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b5a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	7b1b      	ldrb	r3, [r3, #12]
 8001b6c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c30 <ETH_SetDMAConfig+0xfc>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	430b      	orrs	r3, r1
 8001b88:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b8c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	7b5b      	ldrb	r3, [r3, #13]
 8001b92:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001ba8:	4b22      	ldr	r3, [pc, #136]	@ (8001c34 <ETH_SetDMAConfig+0x100>)
 8001baa:	4013      	ands	r3, r2
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	68f9      	ldr	r1, [r7, #12]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bb8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	7d1b      	ldrb	r3, [r3, #20]
 8001bc4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bc6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	7f5b      	ldrb	r3, [r3, #29]
 8001bcc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bda:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001bde:	4b16      	ldr	r3, [pc, #88]	@ (8001c38 <ETH_SetDMAConfig+0x104>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6812      	ldr	r2, [r2, #0]
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	430b      	orrs	r3, r1
 8001bea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bee:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	7f1b      	ldrb	r3, [r3, #28]
 8001bf6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c08:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <ETH_SetDMAConfig+0x108>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	68f9      	ldr	r1, [r7, #12]
 8001c16:	430b      	orrs	r3, r1
 8001c18:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c1c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	ffff87fd 	.word	0xffff87fd
 8001c30:	ffff2ffe 	.word	0xffff2ffe
 8001c34:	fffec000 	.word	0xfffec000
 8001c38:	ffc0efef 	.word	0xffc0efef
 8001c3c:	7fc0ffff 	.word	0x7fc0ffff

08001c40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0a4      	sub	sp, #144	@ 0x90
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c80:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001c98:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001c9c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001cd8:	2320      	movs	r3, #32
 8001cda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cea:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001cf0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cf4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d24:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d28:	4619      	mov	r1, r3
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff fde6 	bl	80018fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d34:	2301      	movs	r3, #1
 8001d36:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d4a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d4e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d54:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d60:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d66:	f107 0308 	add.w	r3, r7, #8
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff fee1 	bl	8001b34 <ETH_SetDMAConfig>
}
 8001d72:	bf00      	nop
 8001d74:	3790      	adds	r7, #144	@ 0x90
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	e01d      	b.n	8001dc4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68d9      	ldr	r1, [r3, #12]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	440b      	add	r3, r1
 8001d98:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2200      	movs	r2, #0
 8001da4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	3206      	adds	r2, #6
 8001dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d9de      	bls.n	8001d88 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dec:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	e023      	b.n	8001e62 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6919      	ldr	r1, [r3, #16]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4613      	mov	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4413      	add	r3, r2
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	440b      	add	r3, r1
 8001e2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2200      	movs	r2, #0
 8001e36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2200      	movs	r2, #0
 8001e48:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e50:	68b9      	ldr	r1, [r7, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	3212      	adds	r2, #18
 8001e58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d9d8      	bls.n	8001e1a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2303      	movs	r3, #3
 8001e92:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ed6:	4b86      	ldr	r3, [pc, #536]	@ (80020f0 <HAL_GPIO_Init+0x228>)
 8001ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eda:	e18c      	b.n	80021f6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 817e 	beq.w	80021f0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d005      	beq.n	8001f0c <HAL_GPIO_Init+0x44>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d130      	bne.n	8001f6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2203      	movs	r2, #3
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4013      	ands	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f42:	2201      	movs	r2, #1
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	091b      	lsrs	r3, r3, #4
 8001f58:	f003 0201 	and.w	r2, r3, #1
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d017      	beq.n	8001faa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	2203      	movs	r2, #3
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	689a      	ldr	r2, [r3, #8]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d123      	bne.n	8001ffe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	220f      	movs	r2, #15
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	691a      	ldr	r2, [r3, #16]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	69b9      	ldr	r1, [r7, #24]
 8001ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	2203      	movs	r2, #3
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0203 	and.w	r2, r3, #3
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80d8 	beq.w	80021f0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002040:	4b2c      	ldr	r3, [pc, #176]	@ (80020f4 <HAL_GPIO_Init+0x22c>)
 8002042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002046:	4a2b      	ldr	r2, [pc, #172]	@ (80020f4 <HAL_GPIO_Init+0x22c>)
 8002048:	f043 0302 	orr.w	r3, r3, #2
 800204c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002050:	4b28      	ldr	r3, [pc, #160]	@ (80020f4 <HAL_GPIO_Init+0x22c>)
 8002052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205e:	4a26      	ldr	r2, [pc, #152]	@ (80020f8 <HAL_GPIO_Init+0x230>)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	089b      	lsrs	r3, r3, #2
 8002064:	3302      	adds	r3, #2
 8002066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	220f      	movs	r2, #15
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a1d      	ldr	r2, [pc, #116]	@ (80020fc <HAL_GPIO_Init+0x234>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d04a      	beq.n	8002120 <HAL_GPIO_Init+0x258>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a1c      	ldr	r2, [pc, #112]	@ (8002100 <HAL_GPIO_Init+0x238>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02b      	beq.n	80020ea <HAL_GPIO_Init+0x222>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a1b      	ldr	r2, [pc, #108]	@ (8002104 <HAL_GPIO_Init+0x23c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d025      	beq.n	80020e6 <HAL_GPIO_Init+0x21e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1a      	ldr	r2, [pc, #104]	@ (8002108 <HAL_GPIO_Init+0x240>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01f      	beq.n	80020e2 <HAL_GPIO_Init+0x21a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a19      	ldr	r2, [pc, #100]	@ (800210c <HAL_GPIO_Init+0x244>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d019      	beq.n	80020de <HAL_GPIO_Init+0x216>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a18      	ldr	r2, [pc, #96]	@ (8002110 <HAL_GPIO_Init+0x248>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d013      	beq.n	80020da <HAL_GPIO_Init+0x212>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_GPIO_Init+0x24c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00d      	beq.n	80020d6 <HAL_GPIO_Init+0x20e>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <HAL_GPIO_Init+0x250>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d007      	beq.n	80020d2 <HAL_GPIO_Init+0x20a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a15      	ldr	r2, [pc, #84]	@ (800211c <HAL_GPIO_Init+0x254>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d101      	bne.n	80020ce <HAL_GPIO_Init+0x206>
 80020ca:	2309      	movs	r3, #9
 80020cc:	e029      	b.n	8002122 <HAL_GPIO_Init+0x25a>
 80020ce:	230a      	movs	r3, #10
 80020d0:	e027      	b.n	8002122 <HAL_GPIO_Init+0x25a>
 80020d2:	2307      	movs	r3, #7
 80020d4:	e025      	b.n	8002122 <HAL_GPIO_Init+0x25a>
 80020d6:	2306      	movs	r3, #6
 80020d8:	e023      	b.n	8002122 <HAL_GPIO_Init+0x25a>
 80020da:	2305      	movs	r3, #5
 80020dc:	e021      	b.n	8002122 <HAL_GPIO_Init+0x25a>
 80020de:	2304      	movs	r3, #4
 80020e0:	e01f      	b.n	8002122 <HAL_GPIO_Init+0x25a>
 80020e2:	2303      	movs	r3, #3
 80020e4:	e01d      	b.n	8002122 <HAL_GPIO_Init+0x25a>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e01b      	b.n	8002122 <HAL_GPIO_Init+0x25a>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e019      	b.n	8002122 <HAL_GPIO_Init+0x25a>
 80020ee:	bf00      	nop
 80020f0:	58000080 	.word	0x58000080
 80020f4:	58024400 	.word	0x58024400
 80020f8:	58000400 	.word	0x58000400
 80020fc:	58020000 	.word	0x58020000
 8002100:	58020400 	.word	0x58020400
 8002104:	58020800 	.word	0x58020800
 8002108:	58020c00 	.word	0x58020c00
 800210c:	58021000 	.word	0x58021000
 8002110:	58021400 	.word	0x58021400
 8002114:	58021800 	.word	0x58021800
 8002118:	58021c00 	.word	0x58021c00
 800211c:	58022400 	.word	0x58022400
 8002120:	2300      	movs	r3, #0
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	f002 0203 	and.w	r2, r2, #3
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	4093      	lsls	r3, r2
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002132:	4938      	ldr	r1, [pc, #224]	@ (8002214 <HAL_GPIO_Init+0x34c>)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	089b      	lsrs	r3, r3, #2
 8002138:	3302      	adds	r3, #2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002166:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002194:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d003      	beq.n	80021c0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	3301      	adds	r3, #1
 80021f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f ae6b 	bne.w	8001edc <HAL_GPIO_Init+0x14>
  }
}
 8002206:	bf00      	nop
 8002208:	bf00      	nop
 800220a:	3724      	adds	r7, #36	@ 0x24
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	58000400 	.word	0x58000400

08002218 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	887b      	ldrh	r3, [r7, #2]
 800222a:	4013      	ands	r3, r2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002230:	2301      	movs	r3, #1
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e001      	b.n	800223a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002236:	2300      	movs	r3, #0
 8002238:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
 8002254:	4613      	mov	r3, r2
 8002256:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002258:	787b      	ldrb	r3, [r7, #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002264:	e003      	b.n	800226e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002266:	887b      	ldrh	r3, [r7, #2]
 8002268:	041a      	lsls	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	619a      	str	r2, [r3, #24]
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_PWREx_ConfigSupply+0x70>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b04      	cmp	r3, #4
 800228e:	d00a      	beq.n	80022a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002290:	4b16      	ldr	r3, [pc, #88]	@ (80022ec <HAL_PWREx_ConfigSupply+0x70>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e01f      	b.n	80022e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e01d      	b.n	80022e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <HAL_PWREx_ConfigSupply+0x70>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	f023 0207 	bic.w	r2, r3, #7
 80022ae:	490f      	ldr	r1, [pc, #60]	@ (80022ec <HAL_PWREx_ConfigSupply+0x70>)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80022b6:	f7ff f8a3 	bl	8001400 <HAL_GetTick>
 80022ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022bc:	e009      	b.n	80022d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80022be:	f7ff f89f 	bl	8001400 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022cc:	d901      	bls.n	80022d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e007      	b.n	80022e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80022d2:	4b06      	ldr	r3, [pc, #24]	@ (80022ec <HAL_PWREx_ConfigSupply+0x70>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022de:	d1ee      	bne.n	80022be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	58024800 	.word	0x58024800

080022f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08c      	sub	sp, #48	@ 0x30
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e3c8      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 8087 	beq.w	800241e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002310:	4b88      	ldr	r3, [pc, #544]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002318:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800231a:	4b86      	ldr	r3, [pc, #536]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002322:	2b10      	cmp	r3, #16
 8002324:	d007      	beq.n	8002336 <HAL_RCC_OscConfig+0x46>
 8002326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002328:	2b18      	cmp	r3, #24
 800232a:	d110      	bne.n	800234e <HAL_RCC_OscConfig+0x5e>
 800232c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d10b      	bne.n	800234e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002336:	4b7f      	ldr	r3, [pc, #508]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d06c      	beq.n	800241c <HAL_RCC_OscConfig+0x12c>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d168      	bne.n	800241c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e3a2      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x76>
 8002358:	4b76      	ldr	r3, [pc, #472]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a75      	ldr	r2, [pc, #468]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 800235e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e02e      	b.n	80023c4 <HAL_RCC_OscConfig+0xd4>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10c      	bne.n	8002388 <HAL_RCC_OscConfig+0x98>
 800236e:	4b71      	ldr	r3, [pc, #452]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a70      	ldr	r2, [pc, #448]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	4b6e      	ldr	r3, [pc, #440]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a6d      	ldr	r2, [pc, #436]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002380:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	e01d      	b.n	80023c4 <HAL_RCC_OscConfig+0xd4>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002390:	d10c      	bne.n	80023ac <HAL_RCC_OscConfig+0xbc>
 8002392:	4b68      	ldr	r3, [pc, #416]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a67      	ldr	r2, [pc, #412]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	4b65      	ldr	r3, [pc, #404]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a64      	ldr	r2, [pc, #400]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e00b      	b.n	80023c4 <HAL_RCC_OscConfig+0xd4>
 80023ac:	4b61      	ldr	r3, [pc, #388]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a60      	ldr	r2, [pc, #384]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80023b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b5e      	ldr	r3, [pc, #376]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80023be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d013      	beq.n	80023f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff f818 	bl	8001400 <HAL_GetTick>
 80023d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff f814 	bl	8001400 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	@ 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e356      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023e6:	4b53      	ldr	r3, [pc, #332]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe4>
 80023f2:	e014      	b.n	800241e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff f804 	bl	8001400 <HAL_GetTick>
 80023f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff f800 	bl	8001400 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	@ 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e342      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800240e:	4b49      	ldr	r3, [pc, #292]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x10c>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 808c 	beq.w	8002544 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242c:	4b41      	ldr	r3, [pc, #260]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002434:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002436:	4b3f      	ldr	r3, [pc, #252]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800243a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <HAL_RCC_OscConfig+0x162>
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	2b18      	cmp	r3, #24
 8002446:	d137      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1c8>
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d132      	bne.n	80024b8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002452:	4b38      	ldr	r3, [pc, #224]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d005      	beq.n	800246a <HAL_RCC_OscConfig+0x17a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e314      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800246a:	4b32      	ldr	r3, [pc, #200]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 0219 	bic.w	r2, r3, #25
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	492f      	ldr	r1, [pc, #188]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe ffc0 	bl	8001400 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002484:	f7fe ffbc 	bl	8001400 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e2fe      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002496:	4b27      	ldr	r3, [pc, #156]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0f0      	beq.n	8002484 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	061b      	lsls	r3, r3, #24
 80024b0:	4920      	ldr	r1, [pc, #128]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b6:	e045      	b.n	8002544 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d026      	beq.n	800250e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024c0:	4b1c      	ldr	r3, [pc, #112]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 0219 	bic.w	r2, r3, #25
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4919      	ldr	r1, [pc, #100]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7fe ff95 	bl	8001400 <HAL_GetTick>
 80024d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024da:	f7fe ff91 	bl	8001400 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e2d3      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	061b      	lsls	r3, r3, #24
 8002506:	490b      	ldr	r1, [pc, #44]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	e01a      	b.n	8002544 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a08      	ldr	r2, [pc, #32]	@ (8002534 <HAL_RCC_OscConfig+0x244>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe ff71 	bl	8001400 <HAL_GetTick>
 800251e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe ff6d 	bl	8001400 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d903      	bls.n	8002538 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e2af      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
 8002534:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002538:	4b96      	ldr	r3, [pc, #600]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	d06a      	beq.n	8002626 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002550:	4b90      	ldr	r3, [pc, #576]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002558:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800255a:	4b8e      	ldr	r3, [pc, #568]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b08      	cmp	r3, #8
 8002564:	d007      	beq.n	8002576 <HAL_RCC_OscConfig+0x286>
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b18      	cmp	r3, #24
 800256a:	d11b      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2b4>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	2b01      	cmp	r3, #1
 8002574:	d116      	bne.n	80025a4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002576:	4b87      	ldr	r3, [pc, #540]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x29e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b80      	cmp	r3, #128	@ 0x80
 8002588:	d001      	beq.n	800258e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e282      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800258e:	4b81      	ldr	r3, [pc, #516]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	497d      	ldr	r1, [pc, #500]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a2:	e040      	b.n	8002626 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d023      	beq.n	80025f4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025ac:	4b79      	ldr	r3, [pc, #484]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a78      	ldr	r2, [pc, #480]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80025b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe ff22 	bl	8001400 <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025c0:	f7fe ff1e 	bl	8001400 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e260      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025d2:	4b70      	ldr	r3, [pc, #448]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025de:	4b6d      	ldr	r3, [pc, #436]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	4969      	ldr	r1, [pc, #420]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60cb      	str	r3, [r1, #12]
 80025f2:	e018      	b.n	8002626 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025f4:	4b67      	ldr	r3, [pc, #412]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a66      	ldr	r2, [pc, #408]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80025fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002600:	f7fe fefe 	bl	8001400 <HAL_GetTick>
 8002604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002606:	e008      	b.n	800261a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002608:	f7fe fefa 	bl	8001400 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b02      	cmp	r3, #2
 8002614:	d901      	bls.n	800261a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e23c      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800261a:	4b5e      	ldr	r3, [pc, #376]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d036      	beq.n	80026a0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d019      	beq.n	800266e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263a:	4b56      	ldr	r3, [pc, #344]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	4a55      	ldr	r2, [pc, #340]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fedb 	bl	8001400 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7fe fed7 	bl	8001400 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e219      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002660:	4b4c      	ldr	r3, [pc, #304]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002662:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x35e>
 800266c:	e018      	b.n	80026a0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800266e:	4b49      	ldr	r3, [pc, #292]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002672:	4a48      	ldr	r2, [pc, #288]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267a:	f7fe fec1 	bl	8001400 <HAL_GetTick>
 800267e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002682:	f7fe febd 	bl	8001400 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1ff      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002694:	4b3f      	ldr	r3, [pc, #252]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d036      	beq.n	800271a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d019      	beq.n	80026e8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026b4:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a36      	ldr	r2, [pc, #216]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80026ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026c0:	f7fe fe9e 	bl	8001400 <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026c8:	f7fe fe9a 	bl	8001400 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e1dc      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026da:	4b2e      	ldr	r3, [pc, #184]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x3d8>
 80026e6:	e018      	b.n	800271a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a29      	ldr	r2, [pc, #164]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 80026ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fe84 	bl	8001400 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026fc:	f7fe fe80 	bl	8001400 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e1c2      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800270e:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 8086 	beq.w	8002834 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_RCC_OscConfig+0x4a8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a1a      	ldr	r2, [pc, #104]	@ (8002798 <HAL_RCC_OscConfig+0x4a8>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002734:	f7fe fe64 	bl	8001400 <HAL_GetTick>
 8002738:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800273c:	f7fe fe60 	bl	8001400 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b64      	cmp	r3, #100	@ 0x64
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e1a2      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <HAL_RCC_OscConfig+0x4a8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d106      	bne.n	8002770 <HAL_RCC_OscConfig+0x480>
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002766:	4a0b      	ldr	r2, [pc, #44]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6713      	str	r3, [r2, #112]	@ 0x70
 800276e:	e032      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e6>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d111      	bne.n	800279c <HAL_RCC_OscConfig+0x4ac>
 8002778:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	4a05      	ldr	r2, [pc, #20]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	6713      	str	r3, [r2, #112]	@ 0x70
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002788:	4a02      	ldr	r2, [pc, #8]	@ (8002794 <HAL_RCC_OscConfig+0x4a4>)
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002790:	e021      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e6>
 8002792:	bf00      	nop
 8002794:	58024400 	.word	0x58024400
 8002798:	58024800 	.word	0x58024800
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	d10c      	bne.n	80027be <HAL_RCC_OscConfig+0x4ce>
 80027a4:	4b83      	ldr	r3, [pc, #524]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	4a82      	ldr	r2, [pc, #520]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b0:	4b80      	ldr	r3, [pc, #512]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	4a7f      	ldr	r2, [pc, #508]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80027bc:	e00b      	b.n	80027d6 <HAL_RCC_OscConfig+0x4e6>
 80027be:	4b7d      	ldr	r3, [pc, #500]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	4a7c      	ldr	r2, [pc, #496]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ca:	4b7a      	ldr	r3, [pc, #488]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	4a79      	ldr	r2, [pc, #484]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d015      	beq.n	800280a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe fe0f 	bl	8001400 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fe0b 	bl	8001400 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e14b      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027fc:	4b6d      	ldr	r3, [pc, #436]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ee      	beq.n	80027e6 <HAL_RCC_OscConfig+0x4f6>
 8002808:	e014      	b.n	8002834 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280a:	f7fe fdf9 	bl	8001400 <HAL_GetTick>
 800280e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002810:	e00a      	b.n	8002828 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002812:	f7fe fdf5 	bl	8001400 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002820:	4293      	cmp	r3, r2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e135      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002828:	4b62      	ldr	r3, [pc, #392]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ee      	bne.n	8002812 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 812a 	beq.w	8002a92 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800283e:	4b5d      	ldr	r3, [pc, #372]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002846:	2b18      	cmp	r3, #24
 8002848:	f000 80ba 	beq.w	80029c0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002850:	2b02      	cmp	r3, #2
 8002852:	f040 8095 	bne.w	8002980 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002856:	4b57      	ldr	r3, [pc, #348]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800285c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe fdcd 	bl	8001400 <HAL_GetTick>
 8002866:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fdc9 	bl	8001400 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e10b      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800287c:	4b4d      	ldr	r3, [pc, #308]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002888:	4b4a      	ldr	r3, [pc, #296]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800288a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800288c:	4b4a      	ldr	r3, [pc, #296]	@ (80029b8 <HAL_RCC_OscConfig+0x6c8>)
 800288e:	4013      	ands	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002898:	0112      	lsls	r2, r2, #4
 800289a:	430a      	orrs	r2, r1
 800289c:	4945      	ldr	r1, [pc, #276]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	628b      	str	r3, [r1, #40]	@ 0x28
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b0:	3b01      	subs	r3, #1
 80028b2:	025b      	lsls	r3, r3, #9
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ca:	3b01      	subs	r3, #1
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80028d2:	4938      	ldr	r1, [pc, #224]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028d8:	4b36      	ldr	r3, [pc, #216]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	4a35      	ldr	r2, [pc, #212]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028e4:	4b33      	ldr	r3, [pc, #204]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80028e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028e8:	4b34      	ldr	r3, [pc, #208]	@ (80029bc <HAL_RCC_OscConfig+0x6cc>)
 80028ea:	4013      	ands	r3, r2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028f0:	00d2      	lsls	r2, r2, #3
 80028f2:	4930      	ldr	r1, [pc, #192]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028f8:	4b2e      	ldr	r3, [pc, #184]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80028fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fc:	f023 020c 	bic.w	r2, r3, #12
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	492b      	ldr	r1, [pc, #172]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800290a:	4b2a      	ldr	r3, [pc, #168]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800290c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290e:	f023 0202 	bic.w	r2, r3, #2
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002916:	4927      	ldr	r1, [pc, #156]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002918:	4313      	orrs	r3, r2
 800291a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800291c:	4b25      	ldr	r3, [pc, #148]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	4a24      	ldr	r2, [pc, #144]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002928:	4b22      	ldr	r3, [pc, #136]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800292a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292c:	4a21      	ldr	r2, [pc, #132]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800292e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002934:	4b1f      	ldr	r3, [pc, #124]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002938:	4a1e      	ldr	r2, [pc, #120]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800293a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800293e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002940:	4b1c      	ldr	r3, [pc, #112]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	4a1b      	ldr	r2, [pc, #108]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a18      	ldr	r2, [pc, #96]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7fe fd52 	bl	8001400 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002960:	f7fe fd4e 	bl	8001400 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e090      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x670>
 800297e:	e088      	b.n	8002a92 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0b      	ldr	r2, [pc, #44]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 8002986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800298a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298c:	f7fe fd38 	bl	8001400 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe fd34 	bl	8001400 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e076      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a6:	4b03      	ldr	r3, [pc, #12]	@ (80029b4 <HAL_RCC_OscConfig+0x6c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f0      	bne.n	8002994 <HAL_RCC_OscConfig+0x6a4>
 80029b2:	e06e      	b.n	8002a92 <HAL_RCC_OscConfig+0x7a2>
 80029b4:	58024400 	.word	0x58024400
 80029b8:	fffffc0c 	.word	0xfffffc0c
 80029bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029c0:	4b36      	ldr	r3, [pc, #216]	@ (8002a9c <HAL_RCC_OscConfig+0x7ac>)
 80029c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029c6:	4b35      	ldr	r3, [pc, #212]	@ (8002a9c <HAL_RCC_OscConfig+0x7ac>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d031      	beq.n	8002a38 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f003 0203 	and.w	r2, r3, #3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	429a      	cmp	r2, r3
 80029e0:	d12a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d122      	bne.n	8002a38 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d11a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	0a5b      	lsrs	r3, r3, #9
 8002a06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d111      	bne.n	8002a38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d108      	bne.n	8002a38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	0e1b      	lsrs	r3, r3, #24
 8002a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e02b      	b.n	8002a94 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a3c:	4b17      	ldr	r3, [pc, #92]	@ (8002a9c <HAL_RCC_OscConfig+0x7ac>)
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a40:	08db      	lsrs	r3, r3, #3
 8002a42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d01f      	beq.n	8002a92 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a52:	4b12      	ldr	r3, [pc, #72]	@ (8002a9c <HAL_RCC_OscConfig+0x7ac>)
 8002a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a56:	4a11      	ldr	r2, [pc, #68]	@ (8002a9c <HAL_RCC_OscConfig+0x7ac>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a5e:	f7fe fccf 	bl	8001400 <HAL_GetTick>
 8002a62:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a64:	bf00      	nop
 8002a66:	f7fe fccb 	bl	8001400 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d0f9      	beq.n	8002a66 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <HAL_RCC_OscConfig+0x7ac>)
 8002a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a76:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <HAL_RCC_OscConfig+0x7b0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a7e:	00d2      	lsls	r2, r2, #3
 8002a80:	4906      	ldr	r1, [pc, #24]	@ (8002a9c <HAL_RCC_OscConfig+0x7ac>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a86:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_RCC_OscConfig+0x7ac>)
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8a:	4a04      	ldr	r2, [pc, #16]	@ (8002a9c <HAL_RCC_OscConfig+0x7ac>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3730      	adds	r7, #48	@ 0x30
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	ffff0007 	.word	0xffff0007

08002aa4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e19c      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b8a      	ldr	r3, [pc, #552]	@ (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b87      	ldr	r3, [pc, #540]	@ (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 020f 	bic.w	r2, r3, #15
 8002ace:	4985      	ldr	r1, [pc, #532]	@ (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b83      	ldr	r3, [pc, #524]	@ (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e184      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d010      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	4b7b      	ldr	r3, [pc, #492]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d908      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b04:	4b78      	ldr	r3, [pc, #480]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4975      	ldr	r1, [pc, #468]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d010      	beq.n	8002b44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	4b70      	ldr	r3, [pc, #448]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d908      	bls.n	8002b44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b32:	4b6d      	ldr	r3, [pc, #436]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	496a      	ldr	r1, [pc, #424]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d010      	beq.n	8002b72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	4b64      	ldr	r3, [pc, #400]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d908      	bls.n	8002b72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b60:	4b61      	ldr	r3, [pc, #388]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	495e      	ldr	r1, [pc, #376]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d010      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	4b59      	ldr	r3, [pc, #356]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d908      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b8e:	4b56      	ldr	r3, [pc, #344]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	4953      	ldr	r1, [pc, #332]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0302 	and.w	r3, r3, #2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68da      	ldr	r2, [r3, #12]
 8002bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d908      	bls.n	8002bce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f023 020f 	bic.w	r2, r3, #15
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4947      	ldr	r1, [pc, #284]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d055      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bda:	4b43      	ldr	r3, [pc, #268]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	4940      	ldr	r1, [pc, #256]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d107      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d121      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0f6      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d115      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0ea      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c24:	4b30      	ldr	r3, [pc, #192]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0de      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c34:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0d6      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c44:	4b28      	ldr	r3, [pc, #160]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	f023 0207 	bic.w	r2, r3, #7
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4925      	ldr	r1, [pc, #148]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c56:	f7fe fbd3 	bl	8001400 <HAL_GetTick>
 8002c5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c5e:	f7fe fbcf 	bl	8001400 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0be      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d1eb      	bne.n	8002c5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	4b14      	ldr	r3, [pc, #80]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d208      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ca2:	4b11      	ldr	r3, [pc, #68]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f023 020f 	bic.w	r2, r3, #15
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	490e      	ldr	r1, [pc, #56]	@ (8002ce8 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d214      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc2:	4b08      	ldr	r3, [pc, #32]	@ (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 020f 	bic.w	r2, r3, #15
 8002cca:	4906      	ldr	r1, [pc, #24]	@ (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <HAL_RCC_ClockConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e086      	b.n	8002df2 <HAL_RCC_ClockConfig+0x34e>
 8002ce4:	52002000 	.word	0x52002000
 8002ce8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d010      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d208      	bcs.n	8002d1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d08:	4b3c      	ldr	r3, [pc, #240]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	4939      	ldr	r1, [pc, #228]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	4b34      	ldr	r3, [pc, #208]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d208      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d36:	4b31      	ldr	r3, [pc, #196]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	492e      	ldr	r1, [pc, #184]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d010      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d208      	bcs.n	8002d76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d64:	4b25      	ldr	r3, [pc, #148]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	4922      	ldr	r1, [pc, #136]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d010      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69da      	ldr	r2, [r3, #28]
 8002d86:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d208      	bcs.n	8002da4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d92:	4b1a      	ldr	r3, [pc, #104]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4917      	ldr	r1, [pc, #92]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002da4:	f000 f834 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b14      	ldr	r3, [pc, #80]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	4912      	ldr	r1, [pc, #72]	@ (8002e00 <HAL_RCC_ClockConfig+0x35c>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_RCC_ClockConfig+0x358>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a0d      	ldr	r2, [pc, #52]	@ (8002e00 <HAL_RCC_ClockConfig+0x35c>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <HAL_RCC_ClockConfig+0x360>)
 8002dda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8002e08 <HAL_RCC_ClockConfig+0x364>)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002de2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <HAL_RCC_ClockConfig+0x368>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fac0 	bl	800136c <HAL_InitTick>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	58024400 	.word	0x58024400
 8002e00:	08027b54 	.word	0x08027b54
 8002e04:	24000004 	.word	0x24000004
 8002e08:	24000000 	.word	0x24000000
 8002e0c:	24000008 	.word	0x24000008

08002e10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	@ 0x24
 8002e14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e16:	4bb3      	ldr	r3, [pc, #716]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e1e:	2b18      	cmp	r3, #24
 8002e20:	f200 8155 	bhi.w	80030ce <HAL_RCC_GetSysClockFreq+0x2be>
 8002e24:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2a:	bf00      	nop
 8002e2c:	08002e91 	.word	0x08002e91
 8002e30:	080030cf 	.word	0x080030cf
 8002e34:	080030cf 	.word	0x080030cf
 8002e38:	080030cf 	.word	0x080030cf
 8002e3c:	080030cf 	.word	0x080030cf
 8002e40:	080030cf 	.word	0x080030cf
 8002e44:	080030cf 	.word	0x080030cf
 8002e48:	080030cf 	.word	0x080030cf
 8002e4c:	08002eb7 	.word	0x08002eb7
 8002e50:	080030cf 	.word	0x080030cf
 8002e54:	080030cf 	.word	0x080030cf
 8002e58:	080030cf 	.word	0x080030cf
 8002e5c:	080030cf 	.word	0x080030cf
 8002e60:	080030cf 	.word	0x080030cf
 8002e64:	080030cf 	.word	0x080030cf
 8002e68:	080030cf 	.word	0x080030cf
 8002e6c:	08002ebd 	.word	0x08002ebd
 8002e70:	080030cf 	.word	0x080030cf
 8002e74:	080030cf 	.word	0x080030cf
 8002e78:	080030cf 	.word	0x080030cf
 8002e7c:	080030cf 	.word	0x080030cf
 8002e80:	080030cf 	.word	0x080030cf
 8002e84:	080030cf 	.word	0x080030cf
 8002e88:	080030cf 	.word	0x080030cf
 8002e8c:	08002ec3 	.word	0x08002ec3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e90:	4b94      	ldr	r3, [pc, #592]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e9c:	4b91      	ldr	r3, [pc, #580]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	08db      	lsrs	r3, r3, #3
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	4a90      	ldr	r2, [pc, #576]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002eae:	e111      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002eb0:	4b8d      	ldr	r3, [pc, #564]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002eb2:	61bb      	str	r3, [r7, #24]
      break;
 8002eb4:	e10e      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002eb8:	61bb      	str	r3, [r7, #24]
      break;
 8002eba:	e10b      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ebc:	4b8c      	ldr	r3, [pc, #560]	@ (80030f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ebe:	61bb      	str	r3, [r7, #24]
      break;
 8002ec0:	e108      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ec2:	4b88      	ldr	r3, [pc, #544]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ecc:	4b85      	ldr	r3, [pc, #532]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ed6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ed8:	4b82      	ldr	r3, [pc, #520]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ee2:	4b80      	ldr	r3, [pc, #512]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee6:	08db      	lsrs	r3, r3, #3
 8002ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80e1 	beq.w	80030c8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	f000 8083 	beq.w	8003014 <HAL_RCC_GetSysClockFreq+0x204>
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	f200 80a1 	bhi.w	8003058 <HAL_RCC_GetSysClockFreq+0x248>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_RCC_GetSysClockFreq+0x114>
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d056      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f22:	e099      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f24:	4b6f      	ldr	r3, [pc, #444]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d02d      	beq.n	8002f8c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f30:	4b6c      	ldr	r3, [pc, #432]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	08db      	lsrs	r3, r3, #3
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	4a6b      	ldr	r2, [pc, #428]	@ (80030e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	ee07 3a90 	vmov	s15, r3
 8002f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f5a:	4b62      	ldr	r3, [pc, #392]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f6e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f8a:	e087      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f96:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80030f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f9e:	4b51      	ldr	r3, [pc, #324]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fce:	e065      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fda:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80030fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe2:	4b40      	ldr	r3, [pc, #256]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ff6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003012:	e043      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800301e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003100 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003026:	4b2f      	ldr	r3, [pc, #188]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302e:	ee07 3a90 	vmov	s15, r3
 8003032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003036:	ed97 6a02 	vldr	s12, [r7, #8]
 800303a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800303e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800304a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800304e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003056:	e021      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003062:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80030fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800306a:	4b1e      	ldr	r3, [pc, #120]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307a:	ed97 6a02 	vldr	s12, [r7, #8]
 800307e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80030f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800308e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800309a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800309c:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	0a5b      	lsrs	r3, r3, #9
 80030a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030a6:	3301      	adds	r3, #1
 80030a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	ee07 3a90 	vmov	s15, r3
 80030b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80030b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c0:	ee17 3a90 	vmov	r3, s15
 80030c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030c6:	e005      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
      break;
 80030cc:	e002      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80030ce:	4b07      	ldr	r3, [pc, #28]	@ (80030ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030d0:	61bb      	str	r3, [r7, #24]
      break;
 80030d2:	bf00      	nop
  }

  return sysclockfreq;
 80030d4:	69bb      	ldr	r3, [r7, #24]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3724      	adds	r7, #36	@ 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	58024400 	.word	0x58024400
 80030e8:	03d09000 	.word	0x03d09000
 80030ec:	003d0900 	.word	0x003d0900
 80030f0:	007a1200 	.word	0x007a1200
 80030f4:	46000000 	.word	0x46000000
 80030f8:	4c742400 	.word	0x4c742400
 80030fc:	4a742400 	.word	0x4a742400
 8003100:	4af42400 	.word	0x4af42400

08003104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800310a:	f7ff fe81 	bl	8002e10 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <HAL_RCC_GetHCLKFreq+0x50>)
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490f      	ldr	r1, [pc, #60]	@ (8003158 <HAL_RCC_GetHCLKFreq+0x54>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	f003 031f 	and.w	r3, r3, #31
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003128:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_RCC_GetHCLKFreq+0x50>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	4a09      	ldr	r2, [pc, #36]	@ (8003158 <HAL_RCC_GetHCLKFreq+0x54>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	fa22 f303 	lsr.w	r3, r2, r3
 800313e:	4a07      	ldr	r2, [pc, #28]	@ (800315c <HAL_RCC_GetHCLKFreq+0x58>)
 8003140:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003142:	4a07      	ldr	r2, [pc, #28]	@ (8003160 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003148:	4b04      	ldr	r3, [pc, #16]	@ (800315c <HAL_RCC_GetHCLKFreq+0x58>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	58024400 	.word	0x58024400
 8003158:	08027b54 	.word	0x08027b54
 800315c:	24000004 	.word	0x24000004
 8003160:	24000000 	.word	0x24000000

08003164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003168:	f7ff ffcc 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 800316c:	4602      	mov	r2, r0
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	4904      	ldr	r1, [pc, #16]	@ (800318c <HAL_RCC_GetPCLK1Freq+0x28>)
 800317a:	5ccb      	ldrb	r3, [r1, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	58024400 	.word	0x58024400
 800318c:	08027b54 	.word	0x08027b54

08003190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003194:	f7ff ffb6 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4904      	ldr	r1, [pc, #16]	@ (80031b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	58024400 	.word	0x58024400
 80031b8:	08027b54 	.word	0x08027b54

080031bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031c0:	b0c6      	sub	sp, #280	@ 0x118
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031dc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80031e0:	2500      	movs	r5, #0
 80031e2:	ea54 0305 	orrs.w	r3, r4, r5
 80031e6:	d049      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80031e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031f2:	d02f      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80031f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031f8:	d828      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80031fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031fe:	d01a      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003200:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003204:	d822      	bhi.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800320a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800320e:	d007      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003210:	e01c      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003212:	4bab      	ldr	r3, [pc, #684]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	4aaa      	ldr	r2, [pc, #680]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800321c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800321e:	e01a      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003220:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003224:	3308      	adds	r3, #8
 8003226:	2102      	movs	r1, #2
 8003228:	4618      	mov	r0, r3
 800322a:	f001 fc25 	bl	8004a78 <RCCEx_PLL2_Config>
 800322e:	4603      	mov	r3, r0
 8003230:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003234:	e00f      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800323a:	3328      	adds	r3, #40	@ 0x28
 800323c:	2102      	movs	r1, #2
 800323e:	4618      	mov	r0, r3
 8003240:	f001 fccc 	bl	8004bdc <RCCEx_PLL3_Config>
 8003244:	4603      	mov	r3, r0
 8003246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800324a:	e004      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003252:	e000      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003254:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003256:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800325e:	4b98      	ldr	r3, [pc, #608]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003262:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003266:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800326a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800326c:	4a94      	ldr	r2, [pc, #592]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800326e:	430b      	orrs	r3, r1
 8003270:	6513      	str	r3, [r2, #80]	@ 0x50
 8003272:	e003      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003278:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800327c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003284:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003288:	f04f 0900 	mov.w	r9, #0
 800328c:	ea58 0309 	orrs.w	r3, r8, r9
 8003290:	d047      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	2b04      	cmp	r3, #4
 800329a:	d82a      	bhi.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800329c:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032b9 	.word	0x080032b9
 80032a8:	080032c7 	.word	0x080032c7
 80032ac:	080032dd 	.word	0x080032dd
 80032b0:	080032fb 	.word	0x080032fb
 80032b4:	080032fb 	.word	0x080032fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b8:	4b81      	ldr	r3, [pc, #516]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032bc:	4a80      	ldr	r2, [pc, #512]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032c4:	e01a      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032ca:	3308      	adds	r3, #8
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 fbd2 	bl	8004a78 <RCCEx_PLL2_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032da:	e00f      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80032e0:	3328      	adds	r3, #40	@ 0x28
 80032e2:	2100      	movs	r1, #0
 80032e4:	4618      	mov	r0, r3
 80032e6:	f001 fc79 	bl	8004bdc <RCCEx_PLL3_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032f0:	e004      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80032f8:	e000      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80032fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003304:	4b6e      	ldr	r3, [pc, #440]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003308:	f023 0107 	bic.w	r1, r3, #7
 800330c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	4a6b      	ldr	r2, [pc, #428]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003314:	430b      	orrs	r3, r1
 8003316:	6513      	str	r3, [r2, #80]	@ 0x50
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800331e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800332e:	f04f 0b00 	mov.w	fp, #0
 8003332:	ea5a 030b 	orrs.w	r3, sl, fp
 8003336:	d05b      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800333c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003340:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003344:	d03b      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003346:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800334a:	d834      	bhi.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800334c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003350:	d037      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003352:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003356:	d82e      	bhi.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003358:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800335c:	d033      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800335e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003362:	d828      	bhi.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003364:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003368:	d01a      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800336a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800336e:	d822      	bhi.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003374:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003378:	d007      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800337a:	e01c      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800337c:	4b50      	ldr	r3, [pc, #320]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	4a4f      	ldr	r2, [pc, #316]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003382:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003386:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003388:	e01e      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800338a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800338e:	3308      	adds	r3, #8
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f001 fb70 	bl	8004a78 <RCCEx_PLL2_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800339e:	e013      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033a4:	3328      	adds	r3, #40	@ 0x28
 80033a6:	2100      	movs	r1, #0
 80033a8:	4618      	mov	r0, r3
 80033aa:	f001 fc17 	bl	8004bdc <RCCEx_PLL3_Config>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033b4:	e008      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80033bc:	e004      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80033be:	bf00      	nop
 80033c0:	e002      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80033c2:	bf00      	nop
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80033c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80033d0:	4b3b      	ldr	r3, [pc, #236]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80033d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033e0:	4a37      	ldr	r2, [pc, #220]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033e6:	e003      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80033f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80033fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003406:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d05d      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003414:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003418:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800341c:	d03b      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800341e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003422:	d834      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003428:	d037      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800342a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800342e:	d82e      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003430:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003434:	d033      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003436:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800343a:	d828      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800343c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003440:	d01a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003442:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003446:	d822      	bhi.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800344c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003450:	d007      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003452:	e01c      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003454:	4b1a      	ldr	r3, [pc, #104]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003458:	4a19      	ldr	r2, [pc, #100]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800345a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800345e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003460:	e01e      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003466:	3308      	adds	r3, #8
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fb04 	bl	8004a78 <RCCEx_PLL2_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003476:	e013      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800347c:	3328      	adds	r3, #40	@ 0x28
 800347e:	2100      	movs	r1, #0
 8003480:	4618      	mov	r0, r3
 8003482:	f001 fbab 	bl	8004bdc <RCCEx_PLL3_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800348c:	e008      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003494:	e004      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003496:	bf00      	nop
 8003498:	e002      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800349a:	bf00      	nop
 800349c:	e000      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800349e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10d      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80034b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034b8:	4a01      	ldr	r2, [pc, #4]	@ (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ba:	430b      	orrs	r3, r1
 80034bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034be:	e005      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80034c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80034cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80034d8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80034e2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4313      	orrs	r3, r2
 80034ea:	d03a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80034ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034f2:	2b30      	cmp	r3, #48	@ 0x30
 80034f4:	d01f      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80034f6:	2b30      	cmp	r3, #48	@ 0x30
 80034f8:	d819      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x372>
 80034fa:	2b20      	cmp	r3, #32
 80034fc:	d00c      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80034fe:	2b20      	cmp	r3, #32
 8003500:	d815      	bhi.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d019      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003506:	2b10      	cmp	r3, #16
 8003508:	d111      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350a:	4baa      	ldr	r3, [pc, #680]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800350c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350e:	4aa9      	ldr	r2, [pc, #676]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003514:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003516:	e011      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800351c:	3308      	adds	r3, #8
 800351e:	2102      	movs	r1, #2
 8003520:	4618      	mov	r0, r3
 8003522:	f001 faa9 	bl	8004a78 <RCCEx_PLL2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003534:	e002      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800353a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800353c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003544:	4b9b      	ldr	r3, [pc, #620]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003548:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800354c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003552:	4a98      	ldr	r2, [pc, #608]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003554:	430b      	orrs	r3, r1
 8003556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003558:	e003      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800355e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800356e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003572:	2300      	movs	r3, #0
 8003574:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003578:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800357c:	460b      	mov	r3, r1
 800357e:	4313      	orrs	r3, r2
 8003580:	d051      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003588:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800358c:	d035      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800358e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003592:	d82e      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003594:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003598:	d031      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 800359a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800359e:	d828      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80035a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035a4:	d01a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80035a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035aa:	d822      	bhi.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b4:	d007      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80035b6:	e01c      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b8:	4b7e      	ldr	r3, [pc, #504]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035bc:	4a7d      	ldr	r2, [pc, #500]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035c4:	e01c      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ca:	3308      	adds	r3, #8
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fa52 	bl	8004a78 <RCCEx_PLL2_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035da:	e011      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e0:	3328      	adds	r3, #40	@ 0x28
 80035e2:	2100      	movs	r1, #0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f001 faf9 	bl	8004bdc <RCCEx_PLL3_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035f0:	e006      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035f8:	e002      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80035fa:	bf00      	nop
 80035fc:	e000      	b.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80035fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003608:	4b6a      	ldr	r3, [pc, #424]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800360a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003616:	4a67      	ldr	r2, [pc, #412]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003618:	430b      	orrs	r3, r1
 800361a:	6513      	str	r3, [r2, #80]	@ 0x50
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003622:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003626:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800362a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003632:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800363c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003640:	460b      	mov	r3, r1
 8003642:	4313      	orrs	r3, r2
 8003644:	d053      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800364a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800364c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003650:	d033      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003652:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003656:	d82c      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003658:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800365c:	d02f      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x502>
 800365e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003662:	d826      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003664:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003668:	d02b      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800366a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800366e:	d820      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003670:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003674:	d012      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800367a:	d81a      	bhi.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d022      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003684:	d115      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368a:	3308      	adds	r3, #8
 800368c:	2101      	movs	r1, #1
 800368e:	4618      	mov	r0, r3
 8003690:	f001 f9f2 	bl	8004a78 <RCCEx_PLL2_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800369a:	e015      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800369c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a0:	3328      	adds	r3, #40	@ 0x28
 80036a2:	2101      	movs	r1, #1
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 fa99 	bl	8004bdc <RCCEx_PLL3_Config>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80036b0:	e00a      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80036ba:	bf00      	nop
 80036bc:	e004      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80036be:	bf00      	nop
 80036c0:	e002      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80036c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80036d0:	4b38      	ldr	r3, [pc, #224]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80036d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036de:	4a35      	ldr	r2, [pc, #212]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80036fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003704:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d058      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800370e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003712:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003716:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800371a:	d033      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800371c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003720:	d82c      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003726:	d02f      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372c:	d826      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800372e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003732:	d02b      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003734:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003738:	d820      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800373a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800373e:	d012      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003740:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003744:	d81a      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003746:	2b00      	cmp	r3, #0
 8003748:	d022      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800374a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800374e:	d115      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003754:	3308      	adds	r3, #8
 8003756:	2101      	movs	r1, #1
 8003758:	4618      	mov	r0, r3
 800375a:	f001 f98d 	bl	8004a78 <RCCEx_PLL2_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003764:	e015      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800376a:	3328      	adds	r3, #40	@ 0x28
 800376c:	2101      	movs	r1, #1
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fa34 	bl	8004bdc <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800377a:	e00a      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003782:	e006      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003784:	bf00      	nop
 8003786:	e004      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003788:	bf00      	nop
 800378a:	e002      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800378c:	bf00      	nop
 800378e:	e000      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003792:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10e      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800379a:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800379c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80037a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037aa:	4a02      	ldr	r2, [pc, #8]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80037b0:	e006      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80037b2:	bf00      	nop
 80037b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80037c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80037cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037d0:	2300      	movs	r3, #0
 80037d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80037d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80037da:	460b      	mov	r3, r1
 80037dc:	4313      	orrs	r3, r2
 80037de:	d037      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80037e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037ea:	d00e      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80037ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037f0:	d816      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80037f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037fa:	d111      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037fc:	4bc4      	ldr	r3, [pc, #784]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	4ac3      	ldr	r2, [pc, #780]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003808:	e00f      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800380a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800380e:	3308      	adds	r3, #8
 8003810:	2101      	movs	r1, #1
 8003812:	4618      	mov	r0, r3
 8003814:	f001 f930 	bl	8004a78 <RCCEx_PLL2_Config>
 8003818:	4603      	mov	r3, r0
 800381a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800381e:	e004      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003826:	e000      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800382a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10a      	bne.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003832:	4bb7      	ldr	r3, [pc, #732]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003836:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800383a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003840:	4ab3      	ldr	r2, [pc, #716]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003842:	430b      	orrs	r3, r1
 8003844:	6513      	str	r3, [r2, #80]	@ 0x50
 8003846:	e003      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800384c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003858:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800385c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003866:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800386a:	460b      	mov	r3, r1
 800386c:	4313      	orrs	r3, r2
 800386e:	d039      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003876:	2b03      	cmp	r3, #3
 8003878:	d81c      	bhi.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800387a:	a201      	add	r2, pc, #4	@ (adr r2, 8003880 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003880:	080038bd 	.word	0x080038bd
 8003884:	08003891 	.word	0x08003891
 8003888:	0800389f 	.word	0x0800389f
 800388c:	080038bd 	.word	0x080038bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003890:	4b9f      	ldr	r3, [pc, #636]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003894:	4a9e      	ldr	r2, [pc, #632]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800389c:	e00f      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800389e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a2:	3308      	adds	r3, #8
 80038a4:	2102      	movs	r1, #2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 f8e6 	bl	8004a78 <RCCEx_PLL2_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80038b2:	e004      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80038bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80038c6:	4b92      	ldr	r3, [pc, #584]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ca:	f023 0103 	bic.w	r1, r3, #3
 80038ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80038d6:	430b      	orrs	r3, r1
 80038d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038da:	e003      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80038f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038f4:	2300      	movs	r3, #0
 80038f6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038fe:	460b      	mov	r3, r1
 8003900:	4313      	orrs	r3, r2
 8003902:	f000 8099 	beq.w	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003906:	4b83      	ldr	r3, [pc, #524]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a82      	ldr	r2, [pc, #520]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800390c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003910:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003912:	f7fd fd75 	bl	8001400 <HAL_GetTick>
 8003916:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800391a:	e00b      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800391c:	f7fd fd70 	bl	8001400 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b64      	cmp	r3, #100	@ 0x64
 800392a:	d903      	bls.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003932:	e005      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003934:	4b77      	ldr	r3, [pc, #476]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ed      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003944:	2b00      	cmp	r3, #0
 8003946:	d173      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003948:	4b71      	ldr	r3, [pc, #452]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800394a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003950:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003954:	4053      	eors	r3, r2
 8003956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395a:	2b00      	cmp	r3, #0
 800395c:	d015      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395e:	4b6c      	ldr	r3, [pc, #432]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003966:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800396a:	4b69      	ldr	r3, [pc, #420]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800396c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396e:	4a68      	ldr	r2, [pc, #416]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003974:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003976:	4b66      	ldr	r3, [pc, #408]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397a:	4a65      	ldr	r2, [pc, #404]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800397c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003980:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003982:	4a63      	ldr	r2, [pc, #396]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003988:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800398a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003996:	d118      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd fd32 	bl	8001400 <HAL_GetTick>
 800399c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a0:	e00d      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fd fd2d 	bl	8001400 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80039ac:	1ad2      	subs	r2, r2, r3
 80039ae:	f241 3388 	movw	r3, #5000	@ 0x1388
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d903      	bls.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80039bc:	e005      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039be:	4b54      	ldr	r3, [pc, #336]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0eb      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80039ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d129      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039e2:	d10e      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x846>
 80039e4:	4b4a      	ldr	r3, [pc, #296]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80039ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039f4:	091a      	lsrs	r2, r3, #4
 80039f6:	4b48      	ldr	r3, [pc, #288]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	4a45      	ldr	r2, [pc, #276]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6113      	str	r3, [r2, #16]
 8003a00:	e005      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003a02:	4b43      	ldr	r3, [pc, #268]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	4a42      	ldr	r2, [pc, #264]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003a0c:	6113      	str	r3, [r2, #16]
 8003a0e:	4b40      	ldr	r3, [pc, #256]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a10:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1e:	4a3c      	ldr	r2, [pc, #240]	@ (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a24:	e008      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003a2e:	e003      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f002 0301 	and.w	r3, r2, #1
 8003a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f000 808f 	beq.w	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a60:	2b28      	cmp	r3, #40	@ 0x28
 8003a62:	d871      	bhi.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003a64:	a201      	add	r2, pc, #4	@ (adr r2, 8003a6c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003b51 	.word	0x08003b51
 8003a70:	08003b49 	.word	0x08003b49
 8003a74:	08003b49 	.word	0x08003b49
 8003a78:	08003b49 	.word	0x08003b49
 8003a7c:	08003b49 	.word	0x08003b49
 8003a80:	08003b49 	.word	0x08003b49
 8003a84:	08003b49 	.word	0x08003b49
 8003a88:	08003b49 	.word	0x08003b49
 8003a8c:	08003b1d 	.word	0x08003b1d
 8003a90:	08003b49 	.word	0x08003b49
 8003a94:	08003b49 	.word	0x08003b49
 8003a98:	08003b49 	.word	0x08003b49
 8003a9c:	08003b49 	.word	0x08003b49
 8003aa0:	08003b49 	.word	0x08003b49
 8003aa4:	08003b49 	.word	0x08003b49
 8003aa8:	08003b49 	.word	0x08003b49
 8003aac:	08003b33 	.word	0x08003b33
 8003ab0:	08003b49 	.word	0x08003b49
 8003ab4:	08003b49 	.word	0x08003b49
 8003ab8:	08003b49 	.word	0x08003b49
 8003abc:	08003b49 	.word	0x08003b49
 8003ac0:	08003b49 	.word	0x08003b49
 8003ac4:	08003b49 	.word	0x08003b49
 8003ac8:	08003b49 	.word	0x08003b49
 8003acc:	08003b51 	.word	0x08003b51
 8003ad0:	08003b49 	.word	0x08003b49
 8003ad4:	08003b49 	.word	0x08003b49
 8003ad8:	08003b49 	.word	0x08003b49
 8003adc:	08003b49 	.word	0x08003b49
 8003ae0:	08003b49 	.word	0x08003b49
 8003ae4:	08003b49 	.word	0x08003b49
 8003ae8:	08003b49 	.word	0x08003b49
 8003aec:	08003b51 	.word	0x08003b51
 8003af0:	08003b49 	.word	0x08003b49
 8003af4:	08003b49 	.word	0x08003b49
 8003af8:	08003b49 	.word	0x08003b49
 8003afc:	08003b49 	.word	0x08003b49
 8003b00:	08003b49 	.word	0x08003b49
 8003b04:	08003b49 	.word	0x08003b49
 8003b08:	08003b49 	.word	0x08003b49
 8003b0c:	08003b51 	.word	0x08003b51
 8003b10:	58024400 	.word	0x58024400
 8003b14:	58024800 	.word	0x58024800
 8003b18:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b20:	3308      	adds	r3, #8
 8003b22:	2101      	movs	r1, #1
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 ffa7 	bl	8004a78 <RCCEx_PLL2_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b30:	e00f      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b36:	3328      	adds	r3, #40	@ 0x28
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 f84e 	bl	8004bdc <RCCEx_PLL3_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b46:	e004      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b4e:	e000      	b.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003b50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10a      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b5a:	4bbf      	ldr	r3, [pc, #764]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b68:	4abb      	ldr	r2, [pc, #748]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b6e:	e003      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b80:	f002 0302 	and.w	r3, r2, #2
 8003b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4313      	orrs	r3, r2
 8003b96:	d041      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d824      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003bf5 	.word	0x08003bf5
 8003bac:	08003bc1 	.word	0x08003bc1
 8003bb0:	08003bd7 	.word	0x08003bd7
 8003bb4:	08003bf5 	.word	0x08003bf5
 8003bb8:	08003bf5 	.word	0x08003bf5
 8003bbc:	08003bf5 	.word	0x08003bf5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 ff55 	bl	8004a78 <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bd4:	e00f      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bda:	3328      	adds	r3, #40	@ 0x28
 8003bdc:	2101      	movs	r1, #1
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fffc 	bl	8004bdc <RCCEx_PLL3_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bea:	e004      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10a      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bfe:	4b96      	ldr	r3, [pc, #600]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c02:	f023 0107 	bic.w	r1, r3, #7
 8003c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c0c:	4a92      	ldr	r2, [pc, #584]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c12:	e003      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c18:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f002 0304 	and.w	r3, r2, #4
 8003c28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c32:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c36:	460b      	mov	r3, r1
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	d044      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d825      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003c48:	a201      	add	r2, pc, #4	@ (adr r2, 8003c50 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4e:	bf00      	nop
 8003c50:	08003c9d 	.word	0x08003c9d
 8003c54:	08003c69 	.word	0x08003c69
 8003c58:	08003c7f 	.word	0x08003c7f
 8003c5c:	08003c9d 	.word	0x08003c9d
 8003c60:	08003c9d 	.word	0x08003c9d
 8003c64:	08003c9d 	.word	0x08003c9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c6c:	3308      	adds	r3, #8
 8003c6e:	2101      	movs	r1, #1
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 ff01 	bl	8004a78 <RCCEx_PLL2_Config>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c7c:	e00f      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c82:	3328      	adds	r3, #40	@ 0x28
 8003c84:	2101      	movs	r1, #1
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 ffa8 	bl	8004bdc <RCCEx_PLL3_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c92:	e004      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c9a:	e000      	b.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003c9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10b      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003caa:	f023 0107 	bic.w	r1, r3, #7
 8003cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb6:	4a68      	ldr	r2, [pc, #416]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003cb8:	430b      	orrs	r3, r1
 8003cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cbc:	e003      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cc2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cce:	f002 0320 	and.w	r3, r2, #32
 8003cd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003cdc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	d055      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cf2:	d033      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003cf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cf8:	d82c      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfe:	d02f      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d04:	d826      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d0a:	d02b      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003d0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d10:	d820      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d16:	d012      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003d18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d1c:	d81a      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d022      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d26:	d115      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 fea1 	bl	8004a78 <RCCEx_PLL2_Config>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d3c:	e015      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d42:	3328      	adds	r3, #40	@ 0x28
 8003d44:	2102      	movs	r1, #2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 ff48 	bl	8004bdc <RCCEx_PLL3_Config>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d52:	e00a      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d5a:	e006      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d5c:	bf00      	nop
 8003d5e:	e004      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d60:	bf00      	nop
 8003d62:	e002      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d64:	bf00      	nop
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d72:	4b39      	ldr	r3, [pc, #228]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d76:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d82:	4a35      	ldr	r2, [pc, #212]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d84:	430b      	orrs	r3, r1
 8003d86:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d88:	e003      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003d9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003da8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003dac:	460b      	mov	r3, r1
 8003dae:	4313      	orrs	r3, r2
 8003db0:	d058      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003dba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003dbe:	d033      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003dc0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003dc4:	d82c      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dca:	d02f      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd0:	d826      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003dd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003dd6:	d02b      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003dd8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ddc:	d820      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003de2:	d012      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003de4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003de8:	d81a      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d022      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df2:	d115      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df8:	3308      	adds	r3, #8
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fe3b 	bl	8004a78 <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e08:	e015      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0e:	3328      	adds	r3, #40	@ 0x28
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fee2 	bl	8004bdc <RCCEx_PLL3_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003e1e:	e00a      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e26:	e006      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e28:	bf00      	nop
 8003e2a:	e004      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e2c:	bf00      	nop
 8003e2e:	e002      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e30:	bf00      	nop
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10e      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e3e:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e42:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e4e:	4a02      	ldr	r2, [pc, #8]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e50:	430b      	orrs	r3, r1
 8003e52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e54:	e006      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003e56:	bf00      	nop
 8003e58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003e70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e74:	2300      	movs	r3, #0
 8003e76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	d055      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e88:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e8c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e90:	d033      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003e92:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e96:	d82c      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e9c:	d02f      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003e9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea2:	d826      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ea4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ea8:	d02b      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003eaa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003eae:	d820      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eb4:	d012      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003eb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eba:	d81a      	bhi.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d022      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec4:	d115      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eca:	3308      	adds	r3, #8
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fdd2 	bl	8004a78 <RCCEx_PLL2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003eda:	e015      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee0:	3328      	adds	r3, #40	@ 0x28
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 fe79 	bl	8004bdc <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e00a      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ef8:	e006      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003efa:	bf00      	nop
 8003efc:	e004      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f10:	4ba0      	ldr	r3, [pc, #640]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f14:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f20:	4a9c      	ldr	r2, [pc, #624]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f22:	430b      	orrs	r3, r1
 8003f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f26:	e003      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f002 0308 	and.w	r3, r2, #8
 8003f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f40:	2300      	movs	r3, #0
 8003f42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f46:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d01e      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f62:	3328      	adds	r3, #40	@ 0x28
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fe38 	bl	8004bdc <RCCEx_PLL3_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003f78:	4b86      	ldr	r3, [pc, #536]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f88:	4a82      	ldr	r2, [pc, #520]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f8a:	430b      	orrs	r3, r1
 8003f8c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f002 0310 	and.w	r3, r2, #16
 8003f9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fa4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4313      	orrs	r3, r2
 8003fac:	d01e      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fba:	d10c      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fc0:	3328      	adds	r3, #40	@ 0x28
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fe09 	bl	8004bdc <RCCEx_PLL3_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fd6:	4b6f      	ldr	r3, [pc, #444]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe6:	4a6b      	ldr	r2, [pc, #428]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003ff8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ffe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004002:	460b      	mov	r3, r1
 8004004:	4313      	orrs	r3, r2
 8004006:	d03e      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004010:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004014:	d022      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004016:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800401a:	d81b      	bhi.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d003      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004024:	d00b      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004026:	e015      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402c:	3308      	adds	r3, #8
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fd21 	bl	8004a78 <RCCEx_PLL2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800403c:	e00f      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800403e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004042:	3328      	adds	r3, #40	@ 0x28
 8004044:	2102      	movs	r1, #2
 8004046:	4618      	mov	r0, r3
 8004048:	f000 fdc8 	bl	8004bdc <RCCEx_PLL3_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004052:	e004      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004066:	4b4b      	ldr	r3, [pc, #300]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800406e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004072:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004076:	4a47      	ldr	r2, [pc, #284]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004078:	430b      	orrs	r3, r1
 800407a:	6593      	str	r3, [r2, #88]	@ 0x58
 800407c:	e003      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004082:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004092:	673b      	str	r3, [r7, #112]	@ 0x70
 8004094:	2300      	movs	r3, #0
 8004096:	677b      	str	r3, [r7, #116]	@ 0x74
 8004098:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800409c:	460b      	mov	r3, r1
 800409e:	4313      	orrs	r3, r2
 80040a0:	d03b      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80040a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040ae:	d01f      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80040b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040b4:	d818      	bhi.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80040b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040ba:	d003      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80040bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040c0:	d007      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80040c2:	e011      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c4:	4b33      	ldr	r3, [pc, #204]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c8:	4a32      	ldr	r2, [pc, #200]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80040d0:	e00f      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d6:	3328      	adds	r3, #40	@ 0x28
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fd7e 	bl	8004bdc <RCCEx_PLL3_Config>
 80040e0:	4603      	mov	r3, r0
 80040e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80040e6:	e004      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80040f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040fa:	4b26      	ldr	r3, [pc, #152]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004102:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004106:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800410a:	4a22      	ldr	r2, [pc, #136]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800410c:	430b      	orrs	r3, r1
 800410e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004110:	e003      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004116:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800411a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004126:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004128:	2300      	movs	r3, #0
 800412a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800412c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004130:	460b      	mov	r3, r1
 8004132:	4313      	orrs	r3, r2
 8004134:	d034      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004144:	d007      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004146:	e011      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004148:	4b12      	ldr	r3, [pc, #72]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	4a11      	ldr	r2, [pc, #68]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800414e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004152:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004154:	e00e      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415a:	3308      	adds	r3, #8
 800415c:	2102      	movs	r1, #2
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fc8a 	bl	8004a78 <RCCEx_PLL2_Config>
 8004164:	4603      	mov	r3, r0
 8004166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004174:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10d      	bne.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800417c:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800417e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004180:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800418a:	4a02      	ldr	r2, [pc, #8]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800418c:	430b      	orrs	r3, r1
 800418e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004190:	e006      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004192:	bf00      	nop
 8004194:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004198:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800419c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80041ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ae:	2300      	movs	r3, #0
 80041b0:	667b      	str	r3, [r7, #100]	@ 0x64
 80041b2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80041b6:	460b      	mov	r3, r1
 80041b8:	4313      	orrs	r3, r2
 80041ba:	d00c      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c0:	3328      	adds	r3, #40	@ 0x28
 80041c2:	2102      	movs	r1, #2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fd09 	bl	8004bdc <RCCEx_PLL3_Config>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d002      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80041e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041e4:	2300      	movs	r3, #0
 80041e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80041ec:	460b      	mov	r3, r1
 80041ee:	4313      	orrs	r3, r2
 80041f0:	d036      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80041f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041fc:	d018      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80041fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004202:	d811      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004204:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004208:	d014      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800420a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800420e:	d80b      	bhi.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d011      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004218:	d106      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421a:	4bb7      	ldr	r3, [pc, #732]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	4ab6      	ldr	r2, [pc, #728]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004220:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004224:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004226:	e008      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800422e:	e004      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004230:	bf00      	nop
 8004232:	e002      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004234:	bf00      	nop
 8004236:	e000      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800423e:	2b00      	cmp	r3, #0
 8004240:	d10a      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004242:	4bad      	ldr	r3, [pc, #692]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004246:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800424a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004250:	4aa9      	ldr	r2, [pc, #676]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004252:	430b      	orrs	r3, r1
 8004254:	6553      	str	r3, [r2, #84]	@ 0x54
 8004256:	e003      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004258:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800425c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800426c:	653b      	str	r3, [r7, #80]	@ 0x50
 800426e:	2300      	movs	r3, #0
 8004270:	657b      	str	r3, [r7, #84]	@ 0x54
 8004272:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004276:	460b      	mov	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	d009      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800427c:	4b9e      	ldr	r3, [pc, #632]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800427e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004280:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800428a:	4a9b      	ldr	r2, [pc, #620]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800428c:	430b      	orrs	r3, r1
 800428e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800429c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800429e:	2300      	movs	r3, #0
 80042a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d009      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ac:	4b92      	ldr	r3, [pc, #584]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80042b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ba:	4a8f      	ldr	r2, [pc, #572]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042bc:	430b      	orrs	r3, r1
 80042be:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80042cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ce:	2300      	movs	r3, #0
 80042d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80042d6:	460b      	mov	r3, r1
 80042d8:	4313      	orrs	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042dc:	4b86      	ldr	r3, [pc, #536]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	4a85      	ldr	r2, [pc, #532]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042e6:	6113      	str	r3, [r2, #16]
 80042e8:	4b83      	ldr	r3, [pc, #524]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042ea:	6919      	ldr	r1, [r3, #16]
 80042ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80042f4:	4a80      	ldr	r2, [pc, #512]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80042f6:	430b      	orrs	r3, r1
 80042f8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004302:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004306:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004308:	2300      	movs	r3, #0
 800430a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800430c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004310:	460b      	mov	r3, r1
 8004312:	4313      	orrs	r3, r2
 8004314:	d009      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004316:	4b78      	ldr	r3, [pc, #480]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800431e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004324:	4a74      	ldr	r2, [pc, #464]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004326:	430b      	orrs	r3, r1
 8004328:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800432a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004332:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004336:	633b      	str	r3, [r7, #48]	@ 0x30
 8004338:	2300      	movs	r3, #0
 800433a:	637b      	str	r3, [r7, #52]	@ 0x34
 800433c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004340:	460b      	mov	r3, r1
 8004342:	4313      	orrs	r3, r2
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004346:	4b6c      	ldr	r3, [pc, #432]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800434e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004356:	4a68      	ldr	r2, [pc, #416]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004358:	430b      	orrs	r3, r1
 800435a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800435c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004364:	2100      	movs	r1, #0
 8004366:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800436e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004372:	460b      	mov	r3, r1
 8004374:	4313      	orrs	r3, r2
 8004376:	d011      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437c:	3308      	adds	r3, #8
 800437e:	2100      	movs	r1, #0
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fb79 	bl	8004a78 <RCCEx_PLL2_Config>
 8004386:	4603      	mov	r3, r0
 8004388:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800438c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004398:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800439c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	2100      	movs	r1, #0
 80043a6:	6239      	str	r1, [r7, #32]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043b2:	460b      	mov	r3, r1
 80043b4:	4313      	orrs	r3, r2
 80043b6:	d011      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043bc:	3308      	adds	r3, #8
 80043be:	2101      	movs	r1, #1
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fb59 	bl	8004a78 <RCCEx_PLL2_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80043cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80043dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	2100      	movs	r1, #0
 80043e6:	61b9      	str	r1, [r7, #24]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	d011      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fc:	3308      	adds	r3, #8
 80043fe:	2102      	movs	r1, #2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fb39 	bl	8004a78 <RCCEx_PLL2_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800440c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800441c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004424:	2100      	movs	r1, #0
 8004426:	6139      	str	r1, [r7, #16]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004432:	460b      	mov	r3, r1
 8004434:	4313      	orrs	r3, r2
 8004436:	d011      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443c:	3328      	adds	r3, #40	@ 0x28
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fbcb 	bl	8004bdc <RCCEx_PLL3_Config>
 8004446:	4603      	mov	r3, r0
 8004448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800444c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800445c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	2100      	movs	r1, #0
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d011      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447c:	3328      	adds	r3, #40	@ 0x28
 800447e:	2101      	movs	r1, #1
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fbab 	bl	8004bdc <RCCEx_PLL3_Config>
 8004486:	4603      	mov	r3, r0
 8004488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800448c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004498:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800449c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a4:	2100      	movs	r1, #0
 80044a6:	6039      	str	r1, [r7, #0]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	607b      	str	r3, [r7, #4]
 80044ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044b2:	460b      	mov	r3, r1
 80044b4:	4313      	orrs	r3, r2
 80044b6:	d011      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044bc:	3328      	adds	r3, #40	@ 0x28
 80044be:	2102      	movs	r1, #2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fb8b 	bl	8004bdc <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80044dc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80044f0:	46bd      	mov	sp, r7
 80044f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f6:	bf00      	nop
 80044f8:	58024400 	.word	0x58024400

080044fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004500:	f7fe fe00 	bl	8003104 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4904      	ldr	r1, [pc, #16]	@ (8004524 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	58024400 	.word	0x58024400
 8004524:	08027b54 	.word	0x08027b54

08004528 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	@ 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004530:	4ba1      	ldr	r3, [pc, #644]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800453a:	4b9f      	ldr	r3, [pc, #636]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	0b1b      	lsrs	r3, r3, #12
 8004540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004544:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004546:	4b9c      	ldr	r3, [pc, #624]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004552:	4b99      	ldr	r3, [pc, #612]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8111 	beq.w	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b02      	cmp	r3, #2
 800457a:	f000 8083 	beq.w	8004684 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b02      	cmp	r3, #2
 8004582:	f200 80a1 	bhi.w	80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d056      	beq.n	8004640 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004592:	e099      	b.n	80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004594:	4b88      	ldr	r3, [pc, #544]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02d      	beq.n	80045fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045a0:	4b85      	ldr	r3, [pc, #532]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	08db      	lsrs	r3, r3, #3
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	4a84      	ldr	r2, [pc, #528]	@ (80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ca:	4b7b      	ldr	r3, [pc, #492]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045da:	ed97 6a03 	vldr	s12, [r7, #12]
 80045de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045fa:	e087      	b.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80047c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800460a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460e:	4b6a      	ldr	r3, [pc, #424]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004622:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800463e:	e065      	b.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800464e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004652:	4b59      	ldr	r3, [pc, #356]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004662:	ed97 6a03 	vldr	s12, [r7, #12]
 8004666:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800466a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004682:	e043      	b.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004696:	4b48      	ldr	r3, [pc, #288]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c6:	e021      	b.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046da:	4b37      	ldr	r3, [pc, #220]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800470a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800470c:	4b2a      	ldr	r3, [pc, #168]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	0a5b      	lsrs	r3, r3, #9
 8004712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004726:	edd7 6a07 	vldr	s13, [r7, #28]
 800472a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004732:	ee17 2a90 	vmov	r2, s15
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800473a:	4b1f      	ldr	r3, [pc, #124]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004754:	edd7 6a07 	vldr	s13, [r7, #28]
 8004758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800475c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004760:	ee17 2a90 	vmov	r2, s15
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004768:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	0e1b      	lsrs	r3, r3, #24
 800476e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800477e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004782:	edd7 6a07 	vldr	s13, [r7, #28]
 8004786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800478a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800478e:	ee17 2a90 	vmov	r2, s15
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004796:	e008      	b.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
}
 80047aa:	bf00      	nop
 80047ac:	3724      	adds	r7, #36	@ 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400
 80047bc:	03d09000 	.word	0x03d09000
 80047c0:	46000000 	.word	0x46000000
 80047c4:	4c742400 	.word	0x4c742400
 80047c8:	4a742400 	.word	0x4a742400
 80047cc:	4af42400 	.word	0x4af42400

080047d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	@ 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80047e2:	4b9f      	ldr	r3, [pc, #636]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	0d1b      	lsrs	r3, r3, #20
 80047e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047fa:	4b99      	ldr	r3, [pc, #612]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fe:	08db      	lsrs	r3, r3, #3
 8004800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8111 	beq.w	8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b02      	cmp	r3, #2
 8004822:	f000 8083 	beq.w	800492c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b02      	cmp	r3, #2
 800482a:	f200 80a1 	bhi.w	8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d056      	beq.n	80048e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800483a:	e099      	b.n	8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800483c:	4b88      	ldr	r3, [pc, #544]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d02d      	beq.n	80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004848:	4b85      	ldr	r3, [pc, #532]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	4a84      	ldr	r2, [pc, #528]	@ (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b7b      	ldr	r3, [pc, #492]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a03 	vldr	s12, [r7, #12]
 8004886:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048a2:	e087      	b.n	80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e6:	e065      	b.n	80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fa:	4b59      	ldr	r3, [pc, #356]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490a:	ed97 6a03 	vldr	s12, [r7, #12]
 800490e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492a:	e043      	b.n	80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800493a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493e:	4b48      	ldr	r3, [pc, #288]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004952:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496e:	e021      	b.n	80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800497e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004982:	4b37      	ldr	r3, [pc, #220]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004992:	ed97 6a03 	vldr	s12, [r7, #12]
 8004996:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800499a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	0a5b      	lsrs	r3, r3, #9
 80049ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049da:	ee17 2a90 	vmov	r2, s15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80049e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a08:	ee17 2a90 	vmov	r2, s15
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a10:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a36:	ee17 2a90 	vmov	r2, s15
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a3e:	e008      	b.n	8004a52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
}
 8004a52:	bf00      	nop
 8004a54:	3724      	adds	r7, #36	@ 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	58024400 	.word	0x58024400
 8004a64:	03d09000 	.word	0x03d09000
 8004a68:	46000000 	.word	0x46000000
 8004a6c:	4c742400 	.word	0x4c742400
 8004a70:	4a742400 	.word	0x4a742400
 8004a74:	4af42400 	.word	0x4af42400

08004a78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a86:	4b53      	ldr	r3, [pc, #332]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d101      	bne.n	8004a96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e099      	b.n	8004bca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a96:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a4e      	ldr	r2, [pc, #312]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa2:	f7fc fcad 	bl	8001400 <HAL_GetTick>
 8004aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004aa8:	e008      	b.n	8004abc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004aaa:	f7fc fca9 	bl	8001400 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e086      	b.n	8004bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004abc:	4b45      	ldr	r3, [pc, #276]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ac8:	4b42      	ldr	r3, [pc, #264]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	031b      	lsls	r3, r3, #12
 8004ad6:	493f      	ldr	r1, [pc, #252]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	628b      	str	r3, [r1, #40]	@ 0x28
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	025b      	lsls	r3, r3, #9
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b0c:	4931      	ldr	r1, [pc, #196]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b12:	4b30      	ldr	r3, [pc, #192]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	492d      	ldr	r1, [pc, #180]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b24:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	f023 0220 	bic.w	r2, r3, #32
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	4928      	ldr	r1, [pc, #160]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b36:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	4a26      	ldr	r2, [pc, #152]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	f023 0310 	bic.w	r3, r3, #16
 8004b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b42:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b46:	4b24      	ldr	r3, [pc, #144]	@ (8004bd8 <RCCEx_PLL2_Config+0x160>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	69d2      	ldr	r2, [r2, #28]
 8004b4e:	00d2      	lsls	r2, r2, #3
 8004b50:	4920      	ldr	r1, [pc, #128]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b56:	4b1f      	ldr	r3, [pc, #124]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	f043 0310 	orr.w	r3, r3, #16
 8004b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b68:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6c:	4a19      	ldr	r2, [pc, #100]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b74:	e00f      	b.n	8004b96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d106      	bne.n	8004b8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b7c:	4b15      	ldr	r3, [pc, #84]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	4a14      	ldr	r2, [pc, #80]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b88:	e005      	b.n	8004b96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b8a:	4b12      	ldr	r3, [pc, #72]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	4a11      	ldr	r2, [pc, #68]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b96:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba2:	f7fc fc2d 	bl	8001400 <HAL_GetTick>
 8004ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ba8:	e008      	b.n	8004bbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004baa:	f7fc fc29 	bl	8001400 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e006      	b.n	8004bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	ffff0007 	.word	0xffff0007

08004bdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bea:	4b53      	ldr	r3, [pc, #332]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d101      	bne.n	8004bfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e099      	b.n	8004d2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a4e      	ldr	r2, [pc, #312]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c06:	f7fc fbfb 	bl	8001400 <HAL_GetTick>
 8004c0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c0c:	e008      	b.n	8004c20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c0e:	f7fc fbf7 	bl	8001400 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e086      	b.n	8004d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c20:	4b45      	ldr	r3, [pc, #276]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f0      	bne.n	8004c0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c2c:	4b42      	ldr	r3, [pc, #264]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	051b      	lsls	r3, r3, #20
 8004c3a:	493f      	ldr	r1, [pc, #252]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	025b      	lsls	r3, r3, #9
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c70:	4931      	ldr	r1, [pc, #196]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c76:	4b30      	ldr	r3, [pc, #192]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	492d      	ldr	r1, [pc, #180]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c88:	4b2b      	ldr	r3, [pc, #172]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	4928      	ldr	r1, [pc, #160]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c9a:	4b27      	ldr	r3, [pc, #156]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	4a26      	ldr	r2, [pc, #152]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ca6:	4b24      	ldr	r3, [pc, #144]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004caa:	4b24      	ldr	r3, [pc, #144]	@ (8004d3c <RCCEx_PLL3_Config+0x160>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	69d2      	ldr	r2, [r2, #28]
 8004cb2:	00d2      	lsls	r2, r2, #3
 8004cb4:	4920      	ldr	r1, [pc, #128]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cba:	4b1f      	ldr	r3, [pc, #124]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	4a19      	ldr	r2, [pc, #100]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cd8:	e00f      	b.n	8004cfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ce0:	4b15      	ldr	r3, [pc, #84]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004ce6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cec:	e005      	b.n	8004cfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cee:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	4a11      	ldr	r2, [pc, #68]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d06:	f7fc fb7b 	bl	8001400 <HAL_GetTick>
 8004d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d0c:	e008      	b.n	8004d20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d0e:	f7fc fb77 	bl	8001400 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e006      	b.n	8004d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d20:	4b05      	ldr	r3, [pc, #20]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	58024400 	.word	0x58024400
 8004d3c:	ffff0007 	.word	0xffff0007

08004d40 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e092      	b.n	8004e78 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	7a5b      	ldrb	r3, [r3, #9]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d105      	bne.n	8004d68 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fc f8a6 	bl	8000eb4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0204 	bic.w	r2, r2, #4
 8004d7c:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	4b3e      	ldr	r3, [pc, #248]	@ (8004e80 <HAL_RNG_Init+0x140>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6852      	ldr	r2, [r2, #4]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004d96:	601a      	str	r2, [r3, #0]
#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a39      	ldr	r2, [pc, #228]	@ (8004e84 <HAL_RNG_Init+0x144>)
 8004d9e:	611a      	str	r2, [r3, #16]
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f247 2274 	movw	r2, #29300	@ 0x7274
 8004da8:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004db8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dba:	f7fc fb21 	bl	8001400 <HAL_GetTick>
 8004dbe:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004dc0:	e016      	b.n	8004df0 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004dc2:	f7fc fb1d 	bl	8001400 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d90f      	bls.n	8004df0 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dde:	d107      	bne.n	8004df0 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e043      	b.n	8004e78 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dfe:	d0e0      	beq.n	8004dc2 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0204 	orr.w	r2, r2, #4
 8004e0e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e1a:	2b40      	cmp	r3, #64	@ 0x40
 8004e1c:	d104      	bne.n	8004e28 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e027      	b.n	8004e78 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004e28:	f7fc faea 	bl	8001400 <HAL_GetTick>
 8004e2c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004e2e:	e015      	b.n	8004e5c <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004e30:	f7fc fae6 	bl	8001400 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d90e      	bls.n	8004e5c <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d007      	beq.n	8004e5c <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2204      	movs	r2, #4
 8004e50:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e00d      	b.n	8004e78 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d1e2      	bne.n	8004e30 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	bfffffdf 	.word	0xbfffffdf
 8004e84:	17590abc 	.word	0x17590abc

08004e88 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	7a1b      	ldrb	r3, [r3, #8]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e068      	b.n	8004f74 <HAL_RNG_GenerateRandomNumber+0xec>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	7a5b      	ldrb	r3, [r3, #9]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d157      	bne.n	8004f62 <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d10f      	bne.n	8004ee6 <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2208      	movs	r2, #8
 8004eca:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f85f 	bl	8004f90 <RNG_RecoverSeedError>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 8004ed6:	7bfb      	ldrb	r3, [r7, #15]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d104      	bne.n	8004ee6 <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	60da      	str	r2, [r3, #12]
        return status;
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	e046      	b.n	8004f74 <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ee6:	f7fc fa8b 	bl	8001400 <HAL_GetTick>
 8004eea:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004eec:	e018      	b.n	8004f20 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004eee:	f7fc fa87 	bl	8001400 <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d911      	bls.n	8004f20 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d00a      	beq.n	8004f20 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e029      	b.n	8004f74 <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d1df      	bne.n	8004eee <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f42:	2b40      	cmp	r3, #64	@ 0x40
 8004f44:	d105      	bne.n	8004f52 <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2208      	movs	r2, #8
 8004f4a:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
 8004f50:	e003      	b.n	8004f5a <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691a      	ldr	r2, [r3, #16]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	725a      	strb	r2, [r3, #9]
 8004f60:	e004      	b.n	8004f6c <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2204      	movs	r2, #4
 8004f66:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	721a      	strb	r2, [r3, #8]

  return status;
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d008      	beq.n	8004fbc <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	e05f      	b.n	800507c <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004fca:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8004fda:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d110      	bne.n	800500e <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f043 0202 	orr.w	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f7ff ffb9 	bl	8004f7c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e03d      	b.n	800508a <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501c:	d0e0      	beq.n	8004fe0 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005028:	2b40      	cmp	r3, #64	@ 0x40
 800502a:	d107      	bne.n	800503c <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800503a:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800503c:	2302      	movs	r3, #2
 800503e:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3b01      	subs	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d110      	bne.n	800506e <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f043 0202 	orr.w	r2, r3, #2
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ff89 	bl	8004f7c <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e00d      	b.n	800508a <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0304 	and.w	r3, r3, #4
 8005078:	2b04      	cmp	r3, #4
 800507a:	d0e1      	beq.n	8005040 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f023 0208 	bic.w	r2, r3, #8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b082      	sub	sp, #8
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e042      	b.n	800512a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d106      	bne.n	80050bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fb ff36 	bl	8000f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2224      	movs	r2, #36	@ 0x24
 80050c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0201 	bic.w	r2, r2, #1
 80050d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 ff23 	bl	8005f28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f8b4 	bl	8005250 <UART_SetConfig>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e01b      	b.n	800512a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005100:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005110:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 ffa2 	bl	800606c <UART_CheckIdleState>
 8005128:	4603      	mov	r3, r0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b08a      	sub	sp, #40	@ 0x28
 8005136:	af02      	add	r7, sp, #8
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	603b      	str	r3, [r7, #0]
 800513e:	4613      	mov	r3, r2
 8005140:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005148:	2b20      	cmp	r3, #32
 800514a:	d17b      	bne.n	8005244 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_UART_Transmit+0x26>
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e074      	b.n	8005246 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2221      	movs	r2, #33	@ 0x21
 8005168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800516c:	f7fc f948 	bl	8001400 <HAL_GetTick>
 8005170:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	88fa      	ldrh	r2, [r7, #6]
 8005176:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	88fa      	ldrh	r2, [r7, #6]
 800517e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800518a:	d108      	bne.n	800519e <HAL_UART_Transmit+0x6c>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005194:	2300      	movs	r3, #0
 8005196:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	e003      	b.n	80051a6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051a6:	e030      	b.n	800520a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2200      	movs	r2, #0
 80051b0:	2180      	movs	r1, #128	@ 0x80
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f001 f804 	bl	80061c0 <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e03d      	b.n	8005246 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	3302      	adds	r3, #2
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	e007      	b.n	80051f8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	781a      	ldrb	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	3301      	adds	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1c8      	bne.n	80051a8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2200      	movs	r2, #0
 800521e:	2140      	movs	r1, #64	@ 0x40
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 ffcd 	bl	80061c0 <UART_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e006      	b.n	8005246 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e000      	b.n	8005246 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005244:	2302      	movs	r3, #2
  }
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005254:	b092      	sub	sp, #72	@ 0x48
 8005256:	af00      	add	r7, sp, #0
 8005258:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	431a      	orrs	r2, r3
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	431a      	orrs	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	4313      	orrs	r3, r2
 8005276:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	4bbe      	ldr	r3, [pc, #760]	@ (8005578 <UART_SetConfig+0x328>)
 8005280:	4013      	ands	r3, r2
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005288:	430b      	orrs	r3, r1
 800528a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	68da      	ldr	r2, [r3, #12]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4ab3      	ldr	r2, [pc, #716]	@ (800557c <UART_SetConfig+0x32c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052b8:	4313      	orrs	r3, r2
 80052ba:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	4baf      	ldr	r3, [pc, #700]	@ (8005580 <UART_SetConfig+0x330>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	f023 010f 	bic.w	r1, r3, #15
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4aa6      	ldr	r2, [pc, #664]	@ (8005584 <UART_SetConfig+0x334>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d177      	bne.n	80053e0 <UART_SetConfig+0x190>
 80052f0:	4ba5      	ldr	r3, [pc, #660]	@ (8005588 <UART_SetConfig+0x338>)
 80052f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052f8:	2b28      	cmp	r3, #40	@ 0x28
 80052fa:	d86d      	bhi.n	80053d8 <UART_SetConfig+0x188>
 80052fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005304 <UART_SetConfig+0xb4>)
 80052fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005302:	bf00      	nop
 8005304:	080053a9 	.word	0x080053a9
 8005308:	080053d9 	.word	0x080053d9
 800530c:	080053d9 	.word	0x080053d9
 8005310:	080053d9 	.word	0x080053d9
 8005314:	080053d9 	.word	0x080053d9
 8005318:	080053d9 	.word	0x080053d9
 800531c:	080053d9 	.word	0x080053d9
 8005320:	080053d9 	.word	0x080053d9
 8005324:	080053b1 	.word	0x080053b1
 8005328:	080053d9 	.word	0x080053d9
 800532c:	080053d9 	.word	0x080053d9
 8005330:	080053d9 	.word	0x080053d9
 8005334:	080053d9 	.word	0x080053d9
 8005338:	080053d9 	.word	0x080053d9
 800533c:	080053d9 	.word	0x080053d9
 8005340:	080053d9 	.word	0x080053d9
 8005344:	080053b9 	.word	0x080053b9
 8005348:	080053d9 	.word	0x080053d9
 800534c:	080053d9 	.word	0x080053d9
 8005350:	080053d9 	.word	0x080053d9
 8005354:	080053d9 	.word	0x080053d9
 8005358:	080053d9 	.word	0x080053d9
 800535c:	080053d9 	.word	0x080053d9
 8005360:	080053d9 	.word	0x080053d9
 8005364:	080053c1 	.word	0x080053c1
 8005368:	080053d9 	.word	0x080053d9
 800536c:	080053d9 	.word	0x080053d9
 8005370:	080053d9 	.word	0x080053d9
 8005374:	080053d9 	.word	0x080053d9
 8005378:	080053d9 	.word	0x080053d9
 800537c:	080053d9 	.word	0x080053d9
 8005380:	080053d9 	.word	0x080053d9
 8005384:	080053c9 	.word	0x080053c9
 8005388:	080053d9 	.word	0x080053d9
 800538c:	080053d9 	.word	0x080053d9
 8005390:	080053d9 	.word	0x080053d9
 8005394:	080053d9 	.word	0x080053d9
 8005398:	080053d9 	.word	0x080053d9
 800539c:	080053d9 	.word	0x080053d9
 80053a0:	080053d9 	.word	0x080053d9
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	2301      	movs	r3, #1
 80053aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ae:	e326      	b.n	80059fe <UART_SetConfig+0x7ae>
 80053b0:	2304      	movs	r3, #4
 80053b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b6:	e322      	b.n	80059fe <UART_SetConfig+0x7ae>
 80053b8:	2308      	movs	r3, #8
 80053ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053be:	e31e      	b.n	80059fe <UART_SetConfig+0x7ae>
 80053c0:	2310      	movs	r3, #16
 80053c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c6:	e31a      	b.n	80059fe <UART_SetConfig+0x7ae>
 80053c8:	2320      	movs	r3, #32
 80053ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ce:	e316      	b.n	80059fe <UART_SetConfig+0x7ae>
 80053d0:	2340      	movs	r3, #64	@ 0x40
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d6:	e312      	b.n	80059fe <UART_SetConfig+0x7ae>
 80053d8:	2380      	movs	r3, #128	@ 0x80
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053de:	e30e      	b.n	80059fe <UART_SetConfig+0x7ae>
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a69      	ldr	r2, [pc, #420]	@ (800558c <UART_SetConfig+0x33c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d130      	bne.n	800544c <UART_SetConfig+0x1fc>
 80053ea:	4b67      	ldr	r3, [pc, #412]	@ (8005588 <UART_SetConfig+0x338>)
 80053ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	d826      	bhi.n	8005444 <UART_SetConfig+0x1f4>
 80053f6:	a201      	add	r2, pc, #4	@ (adr r2, 80053fc <UART_SetConfig+0x1ac>)
 80053f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fc:	08005415 	.word	0x08005415
 8005400:	0800541d 	.word	0x0800541d
 8005404:	08005425 	.word	0x08005425
 8005408:	0800542d 	.word	0x0800542d
 800540c:	08005435 	.word	0x08005435
 8005410:	0800543d 	.word	0x0800543d
 8005414:	2300      	movs	r3, #0
 8005416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541a:	e2f0      	b.n	80059fe <UART_SetConfig+0x7ae>
 800541c:	2304      	movs	r3, #4
 800541e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005422:	e2ec      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005424:	2308      	movs	r3, #8
 8005426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542a:	e2e8      	b.n	80059fe <UART_SetConfig+0x7ae>
 800542c:	2310      	movs	r3, #16
 800542e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005432:	e2e4      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005434:	2320      	movs	r3, #32
 8005436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543a:	e2e0      	b.n	80059fe <UART_SetConfig+0x7ae>
 800543c:	2340      	movs	r3, #64	@ 0x40
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005442:	e2dc      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005444:	2380      	movs	r3, #128	@ 0x80
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544a:	e2d8      	b.n	80059fe <UART_SetConfig+0x7ae>
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a4f      	ldr	r2, [pc, #316]	@ (8005590 <UART_SetConfig+0x340>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d130      	bne.n	80054b8 <UART_SetConfig+0x268>
 8005456:	4b4c      	ldr	r3, [pc, #304]	@ (8005588 <UART_SetConfig+0x338>)
 8005458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	2b05      	cmp	r3, #5
 8005460:	d826      	bhi.n	80054b0 <UART_SetConfig+0x260>
 8005462:	a201      	add	r2, pc, #4	@ (adr r2, 8005468 <UART_SetConfig+0x218>)
 8005464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005468:	08005481 	.word	0x08005481
 800546c:	08005489 	.word	0x08005489
 8005470:	08005491 	.word	0x08005491
 8005474:	08005499 	.word	0x08005499
 8005478:	080054a1 	.word	0x080054a1
 800547c:	080054a9 	.word	0x080054a9
 8005480:	2300      	movs	r3, #0
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005486:	e2ba      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005488:	2304      	movs	r3, #4
 800548a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548e:	e2b6      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005490:	2308      	movs	r3, #8
 8005492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005496:	e2b2      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005498:	2310      	movs	r3, #16
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549e:	e2ae      	b.n	80059fe <UART_SetConfig+0x7ae>
 80054a0:	2320      	movs	r3, #32
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a6:	e2aa      	b.n	80059fe <UART_SetConfig+0x7ae>
 80054a8:	2340      	movs	r3, #64	@ 0x40
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ae:	e2a6      	b.n	80059fe <UART_SetConfig+0x7ae>
 80054b0:	2380      	movs	r3, #128	@ 0x80
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b6:	e2a2      	b.n	80059fe <UART_SetConfig+0x7ae>
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a35      	ldr	r2, [pc, #212]	@ (8005594 <UART_SetConfig+0x344>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d130      	bne.n	8005524 <UART_SetConfig+0x2d4>
 80054c2:	4b31      	ldr	r3, [pc, #196]	@ (8005588 <UART_SetConfig+0x338>)
 80054c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	2b05      	cmp	r3, #5
 80054cc:	d826      	bhi.n	800551c <UART_SetConfig+0x2cc>
 80054ce:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <UART_SetConfig+0x284>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	080054ed 	.word	0x080054ed
 80054d8:	080054f5 	.word	0x080054f5
 80054dc:	080054fd 	.word	0x080054fd
 80054e0:	08005505 	.word	0x08005505
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	08005515 	.word	0x08005515
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f2:	e284      	b.n	80059fe <UART_SetConfig+0x7ae>
 80054f4:	2304      	movs	r3, #4
 80054f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fa:	e280      	b.n	80059fe <UART_SetConfig+0x7ae>
 80054fc:	2308      	movs	r3, #8
 80054fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005502:	e27c      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005504:	2310      	movs	r3, #16
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550a:	e278      	b.n	80059fe <UART_SetConfig+0x7ae>
 800550c:	2320      	movs	r3, #32
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005512:	e274      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005514:	2340      	movs	r3, #64	@ 0x40
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551a:	e270      	b.n	80059fe <UART_SetConfig+0x7ae>
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005522:	e26c      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1b      	ldr	r2, [pc, #108]	@ (8005598 <UART_SetConfig+0x348>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d142      	bne.n	80055b4 <UART_SetConfig+0x364>
 800552e:	4b16      	ldr	r3, [pc, #88]	@ (8005588 <UART_SetConfig+0x338>)
 8005530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	2b05      	cmp	r3, #5
 8005538:	d838      	bhi.n	80055ac <UART_SetConfig+0x35c>
 800553a:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <UART_SetConfig+0x2f0>)
 800553c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005540:	08005559 	.word	0x08005559
 8005544:	08005561 	.word	0x08005561
 8005548:	08005569 	.word	0x08005569
 800554c:	08005571 	.word	0x08005571
 8005550:	0800559d 	.word	0x0800559d
 8005554:	080055a5 	.word	0x080055a5
 8005558:	2300      	movs	r3, #0
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555e:	e24e      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005560:	2304      	movs	r3, #4
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005566:	e24a      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005568:	2308      	movs	r3, #8
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556e:	e246      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005570:	2310      	movs	r3, #16
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005576:	e242      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005578:	cfff69f3 	.word	0xcfff69f3
 800557c:	58000c00 	.word	0x58000c00
 8005580:	11fff4ff 	.word	0x11fff4ff
 8005584:	40011000 	.word	0x40011000
 8005588:	58024400 	.word	0x58024400
 800558c:	40004400 	.word	0x40004400
 8005590:	40004800 	.word	0x40004800
 8005594:	40004c00 	.word	0x40004c00
 8005598:	40005000 	.word	0x40005000
 800559c:	2320      	movs	r3, #32
 800559e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a2:	e22c      	b.n	80059fe <UART_SetConfig+0x7ae>
 80055a4:	2340      	movs	r3, #64	@ 0x40
 80055a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055aa:	e228      	b.n	80059fe <UART_SetConfig+0x7ae>
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055b2:	e224      	b.n	80059fe <UART_SetConfig+0x7ae>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4ab1      	ldr	r2, [pc, #708]	@ (8005880 <UART_SetConfig+0x630>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d176      	bne.n	80056ac <UART_SetConfig+0x45c>
 80055be:	4bb1      	ldr	r3, [pc, #708]	@ (8005884 <UART_SetConfig+0x634>)
 80055c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055c6:	2b28      	cmp	r3, #40	@ 0x28
 80055c8:	d86c      	bhi.n	80056a4 <UART_SetConfig+0x454>
 80055ca:	a201      	add	r2, pc, #4	@ (adr r2, 80055d0 <UART_SetConfig+0x380>)
 80055cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d0:	08005675 	.word	0x08005675
 80055d4:	080056a5 	.word	0x080056a5
 80055d8:	080056a5 	.word	0x080056a5
 80055dc:	080056a5 	.word	0x080056a5
 80055e0:	080056a5 	.word	0x080056a5
 80055e4:	080056a5 	.word	0x080056a5
 80055e8:	080056a5 	.word	0x080056a5
 80055ec:	080056a5 	.word	0x080056a5
 80055f0:	0800567d 	.word	0x0800567d
 80055f4:	080056a5 	.word	0x080056a5
 80055f8:	080056a5 	.word	0x080056a5
 80055fc:	080056a5 	.word	0x080056a5
 8005600:	080056a5 	.word	0x080056a5
 8005604:	080056a5 	.word	0x080056a5
 8005608:	080056a5 	.word	0x080056a5
 800560c:	080056a5 	.word	0x080056a5
 8005610:	08005685 	.word	0x08005685
 8005614:	080056a5 	.word	0x080056a5
 8005618:	080056a5 	.word	0x080056a5
 800561c:	080056a5 	.word	0x080056a5
 8005620:	080056a5 	.word	0x080056a5
 8005624:	080056a5 	.word	0x080056a5
 8005628:	080056a5 	.word	0x080056a5
 800562c:	080056a5 	.word	0x080056a5
 8005630:	0800568d 	.word	0x0800568d
 8005634:	080056a5 	.word	0x080056a5
 8005638:	080056a5 	.word	0x080056a5
 800563c:	080056a5 	.word	0x080056a5
 8005640:	080056a5 	.word	0x080056a5
 8005644:	080056a5 	.word	0x080056a5
 8005648:	080056a5 	.word	0x080056a5
 800564c:	080056a5 	.word	0x080056a5
 8005650:	08005695 	.word	0x08005695
 8005654:	080056a5 	.word	0x080056a5
 8005658:	080056a5 	.word	0x080056a5
 800565c:	080056a5 	.word	0x080056a5
 8005660:	080056a5 	.word	0x080056a5
 8005664:	080056a5 	.word	0x080056a5
 8005668:	080056a5 	.word	0x080056a5
 800566c:	080056a5 	.word	0x080056a5
 8005670:	0800569d 	.word	0x0800569d
 8005674:	2301      	movs	r3, #1
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e1c0      	b.n	80059fe <UART_SetConfig+0x7ae>
 800567c:	2304      	movs	r3, #4
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e1bc      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005684:	2308      	movs	r3, #8
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e1b8      	b.n	80059fe <UART_SetConfig+0x7ae>
 800568c:	2310      	movs	r3, #16
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e1b4      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005694:	2320      	movs	r3, #32
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e1b0      	b.n	80059fe <UART_SetConfig+0x7ae>
 800569c:	2340      	movs	r3, #64	@ 0x40
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e1ac      	b.n	80059fe <UART_SetConfig+0x7ae>
 80056a4:	2380      	movs	r3, #128	@ 0x80
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056aa:	e1a8      	b.n	80059fe <UART_SetConfig+0x7ae>
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a75      	ldr	r2, [pc, #468]	@ (8005888 <UART_SetConfig+0x638>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d130      	bne.n	8005718 <UART_SetConfig+0x4c8>
 80056b6:	4b73      	ldr	r3, [pc, #460]	@ (8005884 <UART_SetConfig+0x634>)
 80056b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	2b05      	cmp	r3, #5
 80056c0:	d826      	bhi.n	8005710 <UART_SetConfig+0x4c0>
 80056c2:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <UART_SetConfig+0x478>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	080056e1 	.word	0x080056e1
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	080056f1 	.word	0x080056f1
 80056d4:	080056f9 	.word	0x080056f9
 80056d8:	08005701 	.word	0x08005701
 80056dc:	08005709 	.word	0x08005709
 80056e0:	2300      	movs	r3, #0
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e18a      	b.n	80059fe <UART_SetConfig+0x7ae>
 80056e8:	2304      	movs	r3, #4
 80056ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ee:	e186      	b.n	80059fe <UART_SetConfig+0x7ae>
 80056f0:	2308      	movs	r3, #8
 80056f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056f6:	e182      	b.n	80059fe <UART_SetConfig+0x7ae>
 80056f8:	2310      	movs	r3, #16
 80056fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056fe:	e17e      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005700:	2320      	movs	r3, #32
 8005702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005706:	e17a      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005708:	2340      	movs	r3, #64	@ 0x40
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e176      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005710:	2380      	movs	r3, #128	@ 0x80
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005716:	e172      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a5b      	ldr	r2, [pc, #364]	@ (800588c <UART_SetConfig+0x63c>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d130      	bne.n	8005784 <UART_SetConfig+0x534>
 8005722:	4b58      	ldr	r3, [pc, #352]	@ (8005884 <UART_SetConfig+0x634>)
 8005724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	2b05      	cmp	r3, #5
 800572c:	d826      	bhi.n	800577c <UART_SetConfig+0x52c>
 800572e:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <UART_SetConfig+0x4e4>)
 8005730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005734:	0800574d 	.word	0x0800574d
 8005738:	08005755 	.word	0x08005755
 800573c:	0800575d 	.word	0x0800575d
 8005740:	08005765 	.word	0x08005765
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005775 	.word	0x08005775
 800574c:	2300      	movs	r3, #0
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005752:	e154      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005754:	2304      	movs	r3, #4
 8005756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800575a:	e150      	b.n	80059fe <UART_SetConfig+0x7ae>
 800575c:	2308      	movs	r3, #8
 800575e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005762:	e14c      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005764:	2310      	movs	r3, #16
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576a:	e148      	b.n	80059fe <UART_SetConfig+0x7ae>
 800576c:	2320      	movs	r3, #32
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005772:	e144      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005774:	2340      	movs	r3, #64	@ 0x40
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e140      	b.n	80059fe <UART_SetConfig+0x7ae>
 800577c:	2380      	movs	r3, #128	@ 0x80
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005782:	e13c      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a41      	ldr	r2, [pc, #260]	@ (8005890 <UART_SetConfig+0x640>)
 800578a:	4293      	cmp	r3, r2
 800578c:	f040 8082 	bne.w	8005894 <UART_SetConfig+0x644>
 8005790:	4b3c      	ldr	r3, [pc, #240]	@ (8005884 <UART_SetConfig+0x634>)
 8005792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005794:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005798:	2b28      	cmp	r3, #40	@ 0x28
 800579a:	d86d      	bhi.n	8005878 <UART_SetConfig+0x628>
 800579c:	a201      	add	r2, pc, #4	@ (adr r2, 80057a4 <UART_SetConfig+0x554>)
 800579e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a2:	bf00      	nop
 80057a4:	08005849 	.word	0x08005849
 80057a8:	08005879 	.word	0x08005879
 80057ac:	08005879 	.word	0x08005879
 80057b0:	08005879 	.word	0x08005879
 80057b4:	08005879 	.word	0x08005879
 80057b8:	08005879 	.word	0x08005879
 80057bc:	08005879 	.word	0x08005879
 80057c0:	08005879 	.word	0x08005879
 80057c4:	08005851 	.word	0x08005851
 80057c8:	08005879 	.word	0x08005879
 80057cc:	08005879 	.word	0x08005879
 80057d0:	08005879 	.word	0x08005879
 80057d4:	08005879 	.word	0x08005879
 80057d8:	08005879 	.word	0x08005879
 80057dc:	08005879 	.word	0x08005879
 80057e0:	08005879 	.word	0x08005879
 80057e4:	08005859 	.word	0x08005859
 80057e8:	08005879 	.word	0x08005879
 80057ec:	08005879 	.word	0x08005879
 80057f0:	08005879 	.word	0x08005879
 80057f4:	08005879 	.word	0x08005879
 80057f8:	08005879 	.word	0x08005879
 80057fc:	08005879 	.word	0x08005879
 8005800:	08005879 	.word	0x08005879
 8005804:	08005861 	.word	0x08005861
 8005808:	08005879 	.word	0x08005879
 800580c:	08005879 	.word	0x08005879
 8005810:	08005879 	.word	0x08005879
 8005814:	08005879 	.word	0x08005879
 8005818:	08005879 	.word	0x08005879
 800581c:	08005879 	.word	0x08005879
 8005820:	08005879 	.word	0x08005879
 8005824:	08005869 	.word	0x08005869
 8005828:	08005879 	.word	0x08005879
 800582c:	08005879 	.word	0x08005879
 8005830:	08005879 	.word	0x08005879
 8005834:	08005879 	.word	0x08005879
 8005838:	08005879 	.word	0x08005879
 800583c:	08005879 	.word	0x08005879
 8005840:	08005879 	.word	0x08005879
 8005844:	08005871 	.word	0x08005871
 8005848:	2301      	movs	r3, #1
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800584e:	e0d6      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005856:	e0d2      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585e:	e0ce      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005866:	e0ca      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005868:	2320      	movs	r3, #32
 800586a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586e:	e0c6      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005870:	2340      	movs	r3, #64	@ 0x40
 8005872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005876:	e0c2      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005878:	2380      	movs	r3, #128	@ 0x80
 800587a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587e:	e0be      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005880:	40011400 	.word	0x40011400
 8005884:	58024400 	.word	0x58024400
 8005888:	40007800 	.word	0x40007800
 800588c:	40007c00 	.word	0x40007c00
 8005890:	40011800 	.word	0x40011800
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4aad      	ldr	r2, [pc, #692]	@ (8005b50 <UART_SetConfig+0x900>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d176      	bne.n	800598c <UART_SetConfig+0x73c>
 800589e:	4bad      	ldr	r3, [pc, #692]	@ (8005b54 <UART_SetConfig+0x904>)
 80058a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058a6:	2b28      	cmp	r3, #40	@ 0x28
 80058a8:	d86c      	bhi.n	8005984 <UART_SetConfig+0x734>
 80058aa:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <UART_SetConfig+0x660>)
 80058ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b0:	08005955 	.word	0x08005955
 80058b4:	08005985 	.word	0x08005985
 80058b8:	08005985 	.word	0x08005985
 80058bc:	08005985 	.word	0x08005985
 80058c0:	08005985 	.word	0x08005985
 80058c4:	08005985 	.word	0x08005985
 80058c8:	08005985 	.word	0x08005985
 80058cc:	08005985 	.word	0x08005985
 80058d0:	0800595d 	.word	0x0800595d
 80058d4:	08005985 	.word	0x08005985
 80058d8:	08005985 	.word	0x08005985
 80058dc:	08005985 	.word	0x08005985
 80058e0:	08005985 	.word	0x08005985
 80058e4:	08005985 	.word	0x08005985
 80058e8:	08005985 	.word	0x08005985
 80058ec:	08005985 	.word	0x08005985
 80058f0:	08005965 	.word	0x08005965
 80058f4:	08005985 	.word	0x08005985
 80058f8:	08005985 	.word	0x08005985
 80058fc:	08005985 	.word	0x08005985
 8005900:	08005985 	.word	0x08005985
 8005904:	08005985 	.word	0x08005985
 8005908:	08005985 	.word	0x08005985
 800590c:	08005985 	.word	0x08005985
 8005910:	0800596d 	.word	0x0800596d
 8005914:	08005985 	.word	0x08005985
 8005918:	08005985 	.word	0x08005985
 800591c:	08005985 	.word	0x08005985
 8005920:	08005985 	.word	0x08005985
 8005924:	08005985 	.word	0x08005985
 8005928:	08005985 	.word	0x08005985
 800592c:	08005985 	.word	0x08005985
 8005930:	08005975 	.word	0x08005975
 8005934:	08005985 	.word	0x08005985
 8005938:	08005985 	.word	0x08005985
 800593c:	08005985 	.word	0x08005985
 8005940:	08005985 	.word	0x08005985
 8005944:	08005985 	.word	0x08005985
 8005948:	08005985 	.word	0x08005985
 800594c:	08005985 	.word	0x08005985
 8005950:	0800597d 	.word	0x0800597d
 8005954:	2301      	movs	r3, #1
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595a:	e050      	b.n	80059fe <UART_SetConfig+0x7ae>
 800595c:	2304      	movs	r3, #4
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005962:	e04c      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005964:	2308      	movs	r3, #8
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596a:	e048      	b.n	80059fe <UART_SetConfig+0x7ae>
 800596c:	2310      	movs	r3, #16
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005972:	e044      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005974:	2320      	movs	r3, #32
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597a:	e040      	b.n	80059fe <UART_SetConfig+0x7ae>
 800597c:	2340      	movs	r3, #64	@ 0x40
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e03c      	b.n	80059fe <UART_SetConfig+0x7ae>
 8005984:	2380      	movs	r3, #128	@ 0x80
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e038      	b.n	80059fe <UART_SetConfig+0x7ae>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a71      	ldr	r2, [pc, #452]	@ (8005b58 <UART_SetConfig+0x908>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d130      	bne.n	80059f8 <UART_SetConfig+0x7a8>
 8005996:	4b6f      	ldr	r3, [pc, #444]	@ (8005b54 <UART_SetConfig+0x904>)
 8005998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d826      	bhi.n	80059f0 <UART_SetConfig+0x7a0>
 80059a2:	a201      	add	r2, pc, #4	@ (adr r2, 80059a8 <UART_SetConfig+0x758>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059c1 	.word	0x080059c1
 80059ac:	080059c9 	.word	0x080059c9
 80059b0:	080059d1 	.word	0x080059d1
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	2302      	movs	r3, #2
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c6:	e01a      	b.n	80059fe <UART_SetConfig+0x7ae>
 80059c8:	2304      	movs	r3, #4
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ce:	e016      	b.n	80059fe <UART_SetConfig+0x7ae>
 80059d0:	2308      	movs	r3, #8
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d6:	e012      	b.n	80059fe <UART_SetConfig+0x7ae>
 80059d8:	2310      	movs	r3, #16
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059de:	e00e      	b.n	80059fe <UART_SetConfig+0x7ae>
 80059e0:	2320      	movs	r3, #32
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e00a      	b.n	80059fe <UART_SetConfig+0x7ae>
 80059e8:	2340      	movs	r3, #64	@ 0x40
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e006      	b.n	80059fe <UART_SetConfig+0x7ae>
 80059f0:	2380      	movs	r3, #128	@ 0x80
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e002      	b.n	80059fe <UART_SetConfig+0x7ae>
 80059f8:	2380      	movs	r3, #128	@ 0x80
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a55      	ldr	r2, [pc, #340]	@ (8005b58 <UART_SetConfig+0x908>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	f040 80f8 	bne.w	8005bfa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a0a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	dc46      	bgt.n	8005aa0 <UART_SetConfig+0x850>
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	db75      	blt.n	8005b02 <UART_SetConfig+0x8b2>
 8005a16:	3b02      	subs	r3, #2
 8005a18:	2b1e      	cmp	r3, #30
 8005a1a:	d872      	bhi.n	8005b02 <UART_SetConfig+0x8b2>
 8005a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a24 <UART_SetConfig+0x7d4>)
 8005a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a22:	bf00      	nop
 8005a24:	08005aa7 	.word	0x08005aa7
 8005a28:	08005b03 	.word	0x08005b03
 8005a2c:	08005aaf 	.word	0x08005aaf
 8005a30:	08005b03 	.word	0x08005b03
 8005a34:	08005b03 	.word	0x08005b03
 8005a38:	08005b03 	.word	0x08005b03
 8005a3c:	08005abf 	.word	0x08005abf
 8005a40:	08005b03 	.word	0x08005b03
 8005a44:	08005b03 	.word	0x08005b03
 8005a48:	08005b03 	.word	0x08005b03
 8005a4c:	08005b03 	.word	0x08005b03
 8005a50:	08005b03 	.word	0x08005b03
 8005a54:	08005b03 	.word	0x08005b03
 8005a58:	08005b03 	.word	0x08005b03
 8005a5c:	08005acf 	.word	0x08005acf
 8005a60:	08005b03 	.word	0x08005b03
 8005a64:	08005b03 	.word	0x08005b03
 8005a68:	08005b03 	.word	0x08005b03
 8005a6c:	08005b03 	.word	0x08005b03
 8005a70:	08005b03 	.word	0x08005b03
 8005a74:	08005b03 	.word	0x08005b03
 8005a78:	08005b03 	.word	0x08005b03
 8005a7c:	08005b03 	.word	0x08005b03
 8005a80:	08005b03 	.word	0x08005b03
 8005a84:	08005b03 	.word	0x08005b03
 8005a88:	08005b03 	.word	0x08005b03
 8005a8c:	08005b03 	.word	0x08005b03
 8005a90:	08005b03 	.word	0x08005b03
 8005a94:	08005b03 	.word	0x08005b03
 8005a98:	08005b03 	.word	0x08005b03
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	2b40      	cmp	r3, #64	@ 0x40
 8005aa2:	d02a      	beq.n	8005afa <UART_SetConfig+0x8aa>
 8005aa4:	e02d      	b.n	8005b02 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005aa6:	f7fe fd29 	bl	80044fc <HAL_RCCEx_GetD3PCLK1Freq>
 8005aaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005aac:	e02f      	b.n	8005b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f7fe fd38 	bl	8004528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005abc:	e027      	b.n	8005b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005abe:	f107 0318 	add.w	r3, r7, #24
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fe84 	bl	80047d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005acc:	e01f      	b.n	8005b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ace:	4b21      	ldr	r3, [pc, #132]	@ (8005b54 <UART_SetConfig+0x904>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d009      	beq.n	8005aee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ada:	4b1e      	ldr	r3, [pc, #120]	@ (8005b54 <UART_SetConfig+0x904>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	08db      	lsrs	r3, r3, #3
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b5c <UART_SetConfig+0x90c>)
 8005ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aec:	e00f      	b.n	8005b0e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005aee:	4b1b      	ldr	r3, [pc, #108]	@ (8005b5c <UART_SetConfig+0x90c>)
 8005af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af2:	e00c      	b.n	8005b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005af4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b60 <UART_SetConfig+0x910>)
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af8:	e009      	b.n	8005b0e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b00:	e005      	b.n	8005b0e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f000 81ee 	beq.w	8005ef2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b1a:	4a12      	ldr	r2, [pc, #72]	@ (8005b64 <UART_SetConfig+0x914>)
 8005b1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b24:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b28:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	4413      	add	r3, r2
 8005b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d305      	bcc.n	8005b46 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d910      	bls.n	8005b68 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b4c:	e1d1      	b.n	8005ef2 <UART_SetConfig+0xca2>
 8005b4e:	bf00      	nop
 8005b50:	40011c00 	.word	0x40011c00
 8005b54:	58024400 	.word	0x58024400
 8005b58:	58000c00 	.word	0x58000c00
 8005b5c:	03d09000 	.word	0x03d09000
 8005b60:	003d0900 	.word	0x003d0900
 8005b64:	08027b64 	.word	0x08027b64
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	60fa      	str	r2, [r7, #12]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b74:	4ac0      	ldr	r2, [pc, #768]	@ (8005e78 <UART_SetConfig+0xc28>)
 8005b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	603b      	str	r3, [r7, #0]
 8005b80:	607a      	str	r2, [r7, #4]
 8005b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b8a:	f7fa fc29 	bl	80003e0 <__aeabi_uldivmod>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4610      	mov	r0, r2
 8005b94:	4619      	mov	r1, r3
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	020b      	lsls	r3, r1, #8
 8005ba0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ba4:	0202      	lsls	r2, r0, #8
 8005ba6:	6979      	ldr	r1, [r7, #20]
 8005ba8:	6849      	ldr	r1, [r1, #4]
 8005baa:	0849      	lsrs	r1, r1, #1
 8005bac:	2000      	movs	r0, #0
 8005bae:	460c      	mov	r4, r1
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	eb12 0804 	adds.w	r8, r2, r4
 8005bb6:	eb43 0905 	adc.w	r9, r3, r5
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	469a      	mov	sl, r3
 8005bc2:	4693      	mov	fp, r2
 8005bc4:	4652      	mov	r2, sl
 8005bc6:	465b      	mov	r3, fp
 8005bc8:	4640      	mov	r0, r8
 8005bca:	4649      	mov	r1, r9
 8005bcc:	f7fa fc08 	bl	80003e0 <__aeabi_uldivmod>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bde:	d308      	bcc.n	8005bf2 <UART_SetConfig+0x9a2>
 8005be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005be6:	d204      	bcs.n	8005bf2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bee:	60da      	str	r2, [r3, #12]
 8005bf0:	e17f      	b.n	8005ef2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005bf8:	e17b      	b.n	8005ef2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c02:	f040 80bd 	bne.w	8005d80 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005c06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	dc48      	bgt.n	8005ca0 <UART_SetConfig+0xa50>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	db7b      	blt.n	8005d0a <UART_SetConfig+0xaba>
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d879      	bhi.n	8005d0a <UART_SetConfig+0xaba>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <UART_SetConfig+0x9cc>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005ca7 	.word	0x08005ca7
 8005c20:	08005caf 	.word	0x08005caf
 8005c24:	08005d0b 	.word	0x08005d0b
 8005c28:	08005d0b 	.word	0x08005d0b
 8005c2c:	08005cb7 	.word	0x08005cb7
 8005c30:	08005d0b 	.word	0x08005d0b
 8005c34:	08005d0b 	.word	0x08005d0b
 8005c38:	08005d0b 	.word	0x08005d0b
 8005c3c:	08005cc7 	.word	0x08005cc7
 8005c40:	08005d0b 	.word	0x08005d0b
 8005c44:	08005d0b 	.word	0x08005d0b
 8005c48:	08005d0b 	.word	0x08005d0b
 8005c4c:	08005d0b 	.word	0x08005d0b
 8005c50:	08005d0b 	.word	0x08005d0b
 8005c54:	08005d0b 	.word	0x08005d0b
 8005c58:	08005d0b 	.word	0x08005d0b
 8005c5c:	08005cd7 	.word	0x08005cd7
 8005c60:	08005d0b 	.word	0x08005d0b
 8005c64:	08005d0b 	.word	0x08005d0b
 8005c68:	08005d0b 	.word	0x08005d0b
 8005c6c:	08005d0b 	.word	0x08005d0b
 8005c70:	08005d0b 	.word	0x08005d0b
 8005c74:	08005d0b 	.word	0x08005d0b
 8005c78:	08005d0b 	.word	0x08005d0b
 8005c7c:	08005d0b 	.word	0x08005d0b
 8005c80:	08005d0b 	.word	0x08005d0b
 8005c84:	08005d0b 	.word	0x08005d0b
 8005c88:	08005d0b 	.word	0x08005d0b
 8005c8c:	08005d0b 	.word	0x08005d0b
 8005c90:	08005d0b 	.word	0x08005d0b
 8005c94:	08005d0b 	.word	0x08005d0b
 8005c98:	08005d0b 	.word	0x08005d0b
 8005c9c:	08005cfd 	.word	0x08005cfd
 8005ca0:	2b40      	cmp	r3, #64	@ 0x40
 8005ca2:	d02e      	beq.n	8005d02 <UART_SetConfig+0xab2>
 8005ca4:	e031      	b.n	8005d0a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca6:	f7fd fa5d 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8005caa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cac:	e033      	b.n	8005d16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cae:	f7fd fa6f 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 8005cb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cb4:	e02f      	b.n	8005d16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fe fc34 	bl	8004528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cc4:	e027      	b.n	8005d16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cc6:	f107 0318 	add.w	r3, r7, #24
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fd80 	bl	80047d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd4:	e01f      	b.n	8005d16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cd6:	4b69      	ldr	r3, [pc, #420]	@ (8005e7c <UART_SetConfig+0xc2c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005ce2:	4b66      	ldr	r3, [pc, #408]	@ (8005e7c <UART_SetConfig+0xc2c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	08db      	lsrs	r3, r3, #3
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	4a64      	ldr	r2, [pc, #400]	@ (8005e80 <UART_SetConfig+0xc30>)
 8005cee:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cf4:	e00f      	b.n	8005d16 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005cf6:	4b62      	ldr	r3, [pc, #392]	@ (8005e80 <UART_SetConfig+0xc30>)
 8005cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfa:	e00c      	b.n	8005d16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cfc:	4b61      	ldr	r3, [pc, #388]	@ (8005e84 <UART_SetConfig+0xc34>)
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d00:	e009      	b.n	8005d16 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d08:	e005      	b.n	8005d16 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80ea 	beq.w	8005ef2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	4a55      	ldr	r2, [pc, #340]	@ (8005e78 <UART_SetConfig+0xc28>)
 8005d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d30:	005a      	lsls	r2, r3, #1
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	441a      	add	r2, r3
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d42:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	d916      	bls.n	8005d78 <UART_SetConfig+0xb28>
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d50:	d212      	bcs.n	8005d78 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f023 030f 	bic.w	r3, r3, #15
 8005d5a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005d74:	60da      	str	r2, [r3, #12]
 8005d76:	e0bc      	b.n	8005ef2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d7e:	e0b8      	b.n	8005ef2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d80:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	dc4b      	bgt.n	8005e20 <UART_SetConfig+0xbd0>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f2c0 8087 	blt.w	8005e9c <UART_SetConfig+0xc4c>
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	f200 8084 	bhi.w	8005e9c <UART_SetConfig+0xc4c>
 8005d94:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <UART_SetConfig+0xb4c>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005e27 	.word	0x08005e27
 8005da0:	08005e2f 	.word	0x08005e2f
 8005da4:	08005e9d 	.word	0x08005e9d
 8005da8:	08005e9d 	.word	0x08005e9d
 8005dac:	08005e37 	.word	0x08005e37
 8005db0:	08005e9d 	.word	0x08005e9d
 8005db4:	08005e9d 	.word	0x08005e9d
 8005db8:	08005e9d 	.word	0x08005e9d
 8005dbc:	08005e47 	.word	0x08005e47
 8005dc0:	08005e9d 	.word	0x08005e9d
 8005dc4:	08005e9d 	.word	0x08005e9d
 8005dc8:	08005e9d 	.word	0x08005e9d
 8005dcc:	08005e9d 	.word	0x08005e9d
 8005dd0:	08005e9d 	.word	0x08005e9d
 8005dd4:	08005e9d 	.word	0x08005e9d
 8005dd8:	08005e9d 	.word	0x08005e9d
 8005ddc:	08005e57 	.word	0x08005e57
 8005de0:	08005e9d 	.word	0x08005e9d
 8005de4:	08005e9d 	.word	0x08005e9d
 8005de8:	08005e9d 	.word	0x08005e9d
 8005dec:	08005e9d 	.word	0x08005e9d
 8005df0:	08005e9d 	.word	0x08005e9d
 8005df4:	08005e9d 	.word	0x08005e9d
 8005df8:	08005e9d 	.word	0x08005e9d
 8005dfc:	08005e9d 	.word	0x08005e9d
 8005e00:	08005e9d 	.word	0x08005e9d
 8005e04:	08005e9d 	.word	0x08005e9d
 8005e08:	08005e9d 	.word	0x08005e9d
 8005e0c:	08005e9d 	.word	0x08005e9d
 8005e10:	08005e9d 	.word	0x08005e9d
 8005e14:	08005e9d 	.word	0x08005e9d
 8005e18:	08005e9d 	.word	0x08005e9d
 8005e1c:	08005e8f 	.word	0x08005e8f
 8005e20:	2b40      	cmp	r3, #64	@ 0x40
 8005e22:	d037      	beq.n	8005e94 <UART_SetConfig+0xc44>
 8005e24:	e03a      	b.n	8005e9c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e26:	f7fd f99d 	bl	8003164 <HAL_RCC_GetPCLK1Freq>
 8005e2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e2c:	e03c      	b.n	8005ea8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e2e:	f7fd f9af 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 8005e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e34:	e038      	b.n	8005ea8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe fb74 	bl	8004528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e44:	e030      	b.n	8005ea8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e46:	f107 0318 	add.w	r3, r7, #24
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe fcc0 	bl	80047d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e54:	e028      	b.n	8005ea8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e56:	4b09      	ldr	r3, [pc, #36]	@ (8005e7c <UART_SetConfig+0xc2c>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d012      	beq.n	8005e88 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e62:	4b06      	ldr	r3, [pc, #24]	@ (8005e7c <UART_SetConfig+0xc2c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	08db      	lsrs	r3, r3, #3
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	4a04      	ldr	r2, [pc, #16]	@ (8005e80 <UART_SetConfig+0xc30>)
 8005e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e74:	e018      	b.n	8005ea8 <UART_SetConfig+0xc58>
 8005e76:	bf00      	nop
 8005e78:	08027b64 	.word	0x08027b64
 8005e7c:	58024400 	.word	0x58024400
 8005e80:	03d09000 	.word	0x03d09000
 8005e84:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005e88:	4b24      	ldr	r3, [pc, #144]	@ (8005f1c <UART_SetConfig+0xccc>)
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e8c:	e00c      	b.n	8005ea8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e8e:	4b24      	ldr	r3, [pc, #144]	@ (8005f20 <UART_SetConfig+0xcd0>)
 8005e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e92:	e009      	b.n	8005ea8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e9a:	e005      	b.n	8005ea8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ea6:	bf00      	nop
    }

    if (pclk != 0U)
 8005ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d021      	beq.n	8005ef2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f24 <UART_SetConfig+0xcd4>)
 8005eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ebc:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	441a      	add	r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	2b0f      	cmp	r3, #15
 8005ed6:	d909      	bls.n	8005eec <UART_SetConfig+0xc9c>
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ede:	d205      	bcs.n	8005eec <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee2:	b29a      	uxth	r2, r3
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	e002      	b.n	8005ef2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f0e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3748      	adds	r7, #72	@ 0x48
 8005f16:	46bd      	mov	sp, r7
 8005f18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f1c:	03d09000 	.word	0x03d09000
 8005f20:	003d0900 	.word	0x003d0900
 8005f24:	08027b64 	.word	0x08027b64

08005f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f34:	f003 0308 	and.w	r3, r3, #8
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f78:	f003 0302 	and.w	r3, r3, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9a:	f003 0304 	and.w	r3, r3, #4
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01a      	beq.n	800603e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006026:	d10a      	bne.n	800603e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	430a      	orrs	r2, r1
 800605e:	605a      	str	r2, [r3, #4]
  }
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b098      	sub	sp, #96	@ 0x60
 8006070:	af02      	add	r7, sp, #8
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800607c:	f7fb f9c0 	bl	8001400 <HAL_GetTick>
 8006080:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b08      	cmp	r3, #8
 800608e:	d12f      	bne.n	80060f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006090:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006098:	2200      	movs	r2, #0
 800609a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f88e 	bl	80061c0 <UART_WaitOnFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d022      	beq.n	80060f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060be:	653b      	str	r3, [r7, #80]	@ 0x50
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	461a      	mov	r2, r3
 80060c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e6      	bne.n	80060aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	e063      	b.n	80061b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d149      	bne.n	8006192 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006106:	2200      	movs	r2, #0
 8006108:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f857 	bl	80061c0 <UART_WaitOnFlagUntilTimeout>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d03c      	beq.n	8006192 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	623b      	str	r3, [r7, #32]
   return(result);
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800612c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	461a      	mov	r2, r3
 8006134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006136:	633b      	str	r3, [r7, #48]	@ 0x30
 8006138:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800613c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e6      	bne.n	8006118 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3308      	adds	r3, #8
 8006150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	60fb      	str	r3, [r7, #12]
   return(result);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3308      	adds	r3, #8
 8006168:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800616a:	61fa      	str	r2, [r7, #28]
 800616c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	69b9      	ldr	r1, [r7, #24]
 8006170:	69fa      	ldr	r2, [r7, #28]
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	617b      	str	r3, [r7, #20]
   return(result);
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e5      	bne.n	800614a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2220      	movs	r2, #32
 8006182:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e012      	b.n	80061b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2220      	movs	r2, #32
 800619e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3758      	adds	r7, #88	@ 0x58
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	603b      	str	r3, [r7, #0]
 80061cc:	4613      	mov	r3, r2
 80061ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d0:	e04f      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d8:	d04b      	beq.n	8006272 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061da:	f7fb f911 	bl	8001400 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d302      	bcc.n	80061f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e04e      	b.n	8006292 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0304 	and.w	r3, r3, #4
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d037      	beq.n	8006272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b80      	cmp	r3, #128	@ 0x80
 8006206:	d034      	beq.n	8006272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b40      	cmp	r3, #64	@ 0x40
 800620c:	d031      	beq.n	8006272 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b08      	cmp	r3, #8
 800621a:	d110      	bne.n	800623e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2208      	movs	r2, #8
 8006222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f839 	bl	800629c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2208      	movs	r2, #8
 800622e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e029      	b.n	8006292 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800624c:	d111      	bne.n	8006272 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f81f 	bl	800629c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2220      	movs	r2, #32
 8006262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e00f      	b.n	8006292 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69da      	ldr	r2, [r3, #28]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4013      	ands	r3, r2
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	429a      	cmp	r2, r3
 8006280:	bf0c      	ite	eq
 8006282:	2301      	moveq	r3, #1
 8006284:	2300      	movne	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	461a      	mov	r2, r3
 800628a:	79fb      	ldrb	r3, [r7, #7]
 800628c:	429a      	cmp	r2, r3
 800628e:	d0a0      	beq.n	80061d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b095      	sub	sp, #84	@ 0x54
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80062c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e6      	bne.n	80062a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3308      	adds	r3, #8
 80062dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6a3b      	ldr	r3, [r7, #32]
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006364 <UART_EndRxTransfer+0xc8>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e5      	bne.n	80062d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800630e:	2b01      	cmp	r3, #1
 8006310:	d118      	bne.n	8006344 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	f023 0310 	bic.w	r3, r3, #16
 8006326:	647b      	str	r3, [r7, #68]	@ 0x44
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6979      	ldr	r1, [r7, #20]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	613b      	str	r3, [r7, #16]
   return(result);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e6      	bne.n	8006312 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006358:	bf00      	nop
 800635a:	3754      	adds	r7, #84	@ 0x54
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr
 8006364:	effffffe 	.word	0xeffffffe

08006368 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_UARTEx_DisableFifoMode+0x16>
 800637a:	2302      	movs	r3, #2
 800637c:	e027      	b.n	80063ce <HAL_UARTEx_DisableFifoMode+0x66>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2224      	movs	r2, #36	@ 0x24
 800638a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f022 0201 	bic.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80063ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	68fa      	ldr	r2, [r7, #12]
 80063ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d101      	bne.n	80063f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063ee:	2302      	movs	r3, #2
 80063f0:	e02d      	b.n	800644e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2224      	movs	r2, #36	@ 0x24
 80063fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0201 	bic.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f850 	bl	80064d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}

08006456 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006456:	b580      	push	{r7, lr}
 8006458:	b084      	sub	sp, #16
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
 800645e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800646a:	2302      	movs	r3, #2
 800646c:	e02d      	b.n	80064ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2224      	movs	r2, #36	@ 0x24
 800647a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0201 	bic.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	683a      	ldr	r2, [r7, #0]
 80064a6:	430a      	orrs	r2, r1
 80064a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f812 	bl	80064d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
	...

080064d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d108      	bne.n	80064f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064f4:	e031      	b.n	800655a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064f6:	2310      	movs	r3, #16
 80064f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064fa:	2310      	movs	r3, #16
 80064fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	0e5b      	lsrs	r3, r3, #25
 8006506:	b2db      	uxtb	r3, r3
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	0f5b      	lsrs	r3, r3, #29
 8006516:	b2db      	uxtb	r3, r3
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	7b3a      	ldrb	r2, [r7, #12]
 8006522:	4911      	ldr	r1, [pc, #68]	@ (8006568 <UARTEx_SetNbDataToProcess+0x94>)
 8006524:	5c8a      	ldrb	r2, [r1, r2]
 8006526:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800652a:	7b3a      	ldrb	r2, [r7, #12]
 800652c:	490f      	ldr	r1, [pc, #60]	@ (800656c <UARTEx_SetNbDataToProcess+0x98>)
 800652e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006530:	fb93 f3f2 	sdiv	r3, r3, r2
 8006534:	b29a      	uxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800653c:	7bfb      	ldrb	r3, [r7, #15]
 800653e:	7b7a      	ldrb	r2, [r7, #13]
 8006540:	4909      	ldr	r1, [pc, #36]	@ (8006568 <UARTEx_SetNbDataToProcess+0x94>)
 8006542:	5c8a      	ldrb	r2, [r1, r2]
 8006544:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006548:	7b7a      	ldrb	r2, [r7, #13]
 800654a:	4908      	ldr	r1, [pc, #32]	@ (800656c <UARTEx_SetNbDataToProcess+0x98>)
 800654c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800654e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006552:	b29a      	uxth	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800655a:	bf00      	nop
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	08027b7c 	.word	0x08027b7c
 800656c:	08027b84 	.word	0x08027b84

08006570 <mg_base64_encode_single>:
#ifdef MG_ENABLE_LINES
#line 1 "src/base64.c"
#endif


static int mg_base64_encode_single(int c) {
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b19      	cmp	r3, #25
 800657c:	dc02      	bgt.n	8006584 <mg_base64_encode_single+0x14>
    return c + 'A';
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3341      	adds	r3, #65	@ 0x41
 8006582:	e011      	b.n	80065a8 <mg_base64_encode_single+0x38>
  } else if (c < 52) {
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b33      	cmp	r3, #51	@ 0x33
 8006588:	dc02      	bgt.n	8006590 <mg_base64_encode_single+0x20>
    return c - 26 + 'a';
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	3347      	adds	r3, #71	@ 0x47
 800658e:	e00b      	b.n	80065a8 <mg_base64_encode_single+0x38>
  } else if (c < 62) {
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b3d      	cmp	r3, #61	@ 0x3d
 8006594:	dc02      	bgt.n	800659c <mg_base64_encode_single+0x2c>
    return c - 52 + '0';
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	3b04      	subs	r3, #4
 800659a:	e005      	b.n	80065a8 <mg_base64_encode_single+0x38>
  } else {
    return c == 62 ? '+' : '/';
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b3e      	cmp	r3, #62	@ 0x3e
 80065a0:	d101      	bne.n	80065a6 <mg_base64_encode_single+0x36>
 80065a2:	232b      	movs	r3, #43	@ 0x2b
 80065a4:	e000      	b.n	80065a8 <mg_base64_encode_single+0x38>
 80065a6:	232f      	movs	r3, #47	@ 0x2f
  }
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <mg_base64_decode_single>:

static int mg_base64_decode_single(int c) {
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b40      	cmp	r3, #64	@ 0x40
 80065c0:	dd05      	ble.n	80065ce <mg_base64_decode_single+0x1a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b5a      	cmp	r3, #90	@ 0x5a
 80065c6:	dc02      	bgt.n	80065ce <mg_base64_decode_single+0x1a>
    return c - 'A';
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	3b41      	subs	r3, #65	@ 0x41
 80065cc:	e022      	b.n	8006614 <mg_base64_decode_single+0x60>
  } else if (c >= 'a' && c <= 'z') {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b60      	cmp	r3, #96	@ 0x60
 80065d2:	dd05      	ble.n	80065e0 <mg_base64_decode_single+0x2c>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b7a      	cmp	r3, #122	@ 0x7a
 80065d8:	dc02      	bgt.n	80065e0 <mg_base64_decode_single+0x2c>
    return c + 26 - 'a';
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3b47      	subs	r3, #71	@ 0x47
 80065de:	e019      	b.n	8006614 <mg_base64_decode_single+0x60>
  } else if (c >= '0' && c <= '9') {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b2f      	cmp	r3, #47	@ 0x2f
 80065e4:	dd05      	ble.n	80065f2 <mg_base64_decode_single+0x3e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b39      	cmp	r3, #57	@ 0x39
 80065ea:	dc02      	bgt.n	80065f2 <mg_base64_decode_single+0x3e>
    return c + 52 - '0';
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	e010      	b.n	8006614 <mg_base64_decode_single+0x60>
  } else if (c == '+') {
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b2b      	cmp	r3, #43	@ 0x2b
 80065f6:	d101      	bne.n	80065fc <mg_base64_decode_single+0x48>
    return 62;
 80065f8:	233e      	movs	r3, #62	@ 0x3e
 80065fa:	e00b      	b.n	8006614 <mg_base64_decode_single+0x60>
  } else if (c == '/') {
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8006600:	d101      	bne.n	8006606 <mg_base64_decode_single+0x52>
    return 63;
 8006602:	233f      	movs	r3, #63	@ 0x3f
 8006604:	e006      	b.n	8006614 <mg_base64_decode_single+0x60>
  } else if (c == '=') {
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b3d      	cmp	r3, #61	@ 0x3d
 800660a:	d101      	bne.n	8006610 <mg_base64_decode_single+0x5c>
    return 64;
 800660c:	2340      	movs	r3, #64	@ 0x40
 800660e:	e001      	b.n	8006614 <mg_base64_decode_single+0x60>
  } else {
    return -1;
 8006610:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8006614:	4618      	mov	r0, r3
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <mg_base64_update>:

size_t mg_base64_update(unsigned char ch, char *to, size_t n) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	73fb      	strb	r3, [r7, #15]
  unsigned long rem = (n & 3) % 3;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f003 0203 	and.w	r2, r3, #3
 8006634:	4b38      	ldr	r3, [pc, #224]	@ (8006718 <mg_base64_update+0xf8>)
 8006636:	fba3 1302 	umull	r1, r3, r3, r2
 800663a:	0859      	lsrs	r1, r3, #1
 800663c:	460b      	mov	r3, r1
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	440b      	add	r3, r1
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d119      	bne.n	8006680 <mg_base64_update+0x60>
    to[n] = (char) mg_base64_encode_single(ch >> 2);
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	089b      	lsrs	r3, r3, #2
 8006650:	b2db      	uxtb	r3, r3
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff ff8c 	bl	8006570 <mg_base64_encode_single>
 8006658:	4601      	mov	r1, r0
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	b2ca      	uxtb	r2, r1
 8006662:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	b2da      	uxtb	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3301      	adds	r3, #1
 800666e:	607b      	str	r3, [r7, #4]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	440b      	add	r3, r1
 8006676:	f002 0230 	and.w	r2, r2, #48	@ 0x30
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e046      	b.n	800670e <mg_base64_update+0xee>
  } else if (rem == 1) {
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d11f      	bne.n	80066c6 <mg_base64_update+0xa6>
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 4));
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4413      	add	r3, r2
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	091b      	lsrs	r3, r3, #4
 8006692:	b2db      	uxtb	r3, r3
 8006694:	4313      	orrs	r3, r2
 8006696:	b2db      	uxtb	r3, r3
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff ff69 	bl	8006570 <mg_base64_encode_single>
 800669e:	4601      	mov	r1, r0
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4413      	add	r3, r2
 80066a6:	b2ca      	uxtb	r2, r1
 80066a8:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 80066aa:	7bfb      	ldrb	r3, [r7, #15]
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	b2da      	uxtb	r2, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3301      	adds	r3, #1
 80066b4:	607b      	str	r3, [r7, #4]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	440b      	add	r3, r1
 80066bc:	f002 023c 	and.w	r2, r2, #60	@ 0x3c
 80066c0:	b2d2      	uxtb	r2, r2
 80066c2:	701a      	strb	r2, [r3, #0]
 80066c4:	e023      	b.n	800670e <mg_base64_update+0xee>
  } else {
    to[n] = (char) mg_base64_encode_single(to[n] | (ch >> 6));
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4413      	add	r3, r2
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	099b      	lsrs	r3, r3, #6
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	4313      	orrs	r3, r2
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff ff49 	bl	8006570 <mg_base64_encode_single>
 80066de:	4601      	mov	r1, r0
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4413      	add	r3, r2
 80066e6:	b2ca      	uxtb	r2, r1
 80066e8:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_base64_encode_single(ch & 63);
 80066ea:	7bfb      	ldrb	r3, [r7, #15]
 80066ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff ff3d 	bl	8006570 <mg_base64_encode_single>
 80066f6:	4601      	mov	r1, r0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3301      	adds	r3, #1
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	b2ca      	uxtb	r2, r1
 8006706:	701a      	strb	r2, [r3, #0]
    n++;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3301      	adds	r3, #1
 800670c:	607b      	str	r3, [r7, #4]
  }
  return n;
 800670e:	687b      	ldr	r3, [r7, #4]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	aaaaaaab 	.word	0xaaaaaaab

0800671c <mg_base64_final>:

size_t mg_base64_final(char *to, size_t n) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  size_t saved = n;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	f003 0303 	and.w	r3, r3, #3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <mg_base64_final+0x24>
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	6879      	ldr	r1, [r7, #4]
 8006738:	2000      	movs	r0, #0
 800673a:	f7ff ff71 	bl	8006620 <mg_base64_update>
 800673e:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f003 0303 	and.w	r3, r3, #3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d10a      	bne.n	8006760 <mg_base64_final+0x44>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	3b01      	subs	r3, #1
 800674e:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 8006750:	e006      	b.n	8006760 <mg_base64_final+0x44>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	603a      	str	r2, [r7, #0]
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	223d      	movs	r2, #61	@ 0x3d
 800675e:	701a      	strb	r2, [r3, #0]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f3      	bne.n	8006752 <mg_base64_final+0x36>
  to[n] = '\0';
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	4413      	add	r3, r2
 8006770:	2200      	movs	r2, #0
 8006772:	701a      	strb	r2, [r3, #0]
  return n;
 8006774:	683b      	ldr	r3, [r7, #0]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <mg_base64_encode>:

size_t mg_base64_encode(const unsigned char *p, size_t n, char *to, size_t dl) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
  size_t i, len = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	613b      	str	r3, [r7, #16]
  if (dl > 0) to[0] = '\0';
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <mg_base64_encode+0x1e>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
  if (dl < ((n / 3) + (n % 3 ? 1 : 0)) * 4 + 1) return 0;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006810 <mg_base64_encode+0x90>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	0858      	lsrs	r0, r3, #1
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	4b19      	ldr	r3, [pc, #100]	@ (8006810 <mg_base64_encode+0x90>)
 80067ac:	fba3 2301 	umull	r2, r3, r3, r1
 80067b0:	085a      	lsrs	r2, r3, #1
 80067b2:	4613      	mov	r3, r2
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	4413      	add	r3, r2
 80067b8:	1aca      	subs	r2, r1, r3
 80067ba:	2a00      	cmp	r2, #0
 80067bc:	d001      	beq.n	80067c2 <mg_base64_encode+0x42>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <mg_base64_encode+0x44>
 80067c2:	2300      	movs	r3, #0
 80067c4:	4403      	add	r3, r0
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	3301      	adds	r3, #1
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d201      	bcs.n	80067d4 <mg_base64_encode+0x54>
 80067d0:	2300      	movs	r3, #0
 80067d2:	e019      	b.n	8006808 <mg_base64_encode+0x88>
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]
 80067d8:	e00c      	b.n	80067f4 <mg_base64_encode+0x74>
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4413      	add	r3, r2
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	6879      	ldr	r1, [r7, #4]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff ff1a 	bl	8006620 <mg_base64_update>
 80067ec:	6138      	str	r0, [r7, #16]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	3301      	adds	r3, #1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d3ee      	bcc.n	80067da <mg_base64_encode+0x5a>
  len = mg_base64_final(to, len);
 80067fc:	6939      	ldr	r1, [r7, #16]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff ff8c 	bl	800671c <mg_base64_final>
 8006804:	6138      	str	r0, [r7, #16]
  return len;
 8006806:	693b      	ldr	r3, [r7, #16]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3718      	adds	r7, #24
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	aaaaaaab 	.word	0xaaaaaaab

08006814 <mg_base64_decode>:

size_t mg_base64_decode(const char *src, size_t n, char *dst, size_t dl) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b08a      	sub	sp, #40	@ 0x28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <mg_base64_decode+0x1c>
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	4413      	add	r3, r2
 800682e:	e000      	b.n	8006832 <mg_base64_decode+0x1e>
 8006830:	2300      	movs	r3, #0
 8006832:	623b      	str	r3, [r7, #32]
  size_t len = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
  if (dl < n / 4 * 3 + 1) goto fail;
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	089a      	lsrs	r2, r3, #2
 800683c:	4613      	mov	r3, r2
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	4413      	add	r3, r2
 8006842:	3301      	adds	r3, #1
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	429a      	cmp	r2, r3
 8006848:	d378      	bcc.n	800693c <mg_base64_decode+0x128>
  while (src != NULL && src + 3 < end) {
 800684a:	e068      	b.n	800691e <mg_base64_decode+0x10a>
    int a = mg_base64_decode_single(src[0]),
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff feaf 	bl	80065b4 <mg_base64_decode_single>
 8006856:	61f8      	str	r0, [r7, #28]
        b = mg_base64_decode_single(src[1]),
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3301      	adds	r3, #1
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fea8 	bl	80065b4 <mg_base64_decode_single>
 8006864:	61b8      	str	r0, [r7, #24]
        c = mg_base64_decode_single(src[2]),
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3302      	adds	r3, #2
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fea1 	bl	80065b4 <mg_base64_decode_single>
 8006872:	6178      	str	r0, [r7, #20]
        d = mg_base64_decode_single(src[3]);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3303      	adds	r3, #3
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fe9a 	bl	80065b4 <mg_base64_decode_single>
 8006880:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) {
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	2b40      	cmp	r3, #64	@ 0x40
 8006886:	d05b      	beq.n	8006940 <mg_base64_decode+0x12c>
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	2b00      	cmp	r3, #0
 800688c:	db58      	blt.n	8006940 <mg_base64_decode+0x12c>
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	2b40      	cmp	r3, #64	@ 0x40
 8006892:	d055      	beq.n	8006940 <mg_base64_decode+0x12c>
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2b00      	cmp	r3, #0
 8006898:	db52      	blt.n	8006940 <mg_base64_decode+0x12c>
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	db4f      	blt.n	8006940 <mg_base64_decode+0x12c>
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	db4c      	blt.n	8006940 <mg_base64_decode+0x12c>
      goto fail;
    }
    dst[len++] = (char) ((a << 2) | (b >> 4));
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	b25b      	sxtb	r3, r3
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	b25a      	sxtb	r2, r3
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	111b      	asrs	r3, r3, #4
 80068b2:	b25b      	sxtb	r3, r3
 80068b4:	4313      	orrs	r3, r2
 80068b6:	b259      	sxtb	r1, r3
 80068b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	4413      	add	r3, r2
 80068c2:	b2ca      	uxtb	r2, r1
 80068c4:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3302      	adds	r3, #2
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b3d      	cmp	r3, #61	@ 0x3d
 80068ce:	d023      	beq.n	8006918 <mg_base64_decode+0x104>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	b25b      	sxtb	r3, r3
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	b25a      	sxtb	r2, r3
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	109b      	asrs	r3, r3, #2
 80068dc:	b25b      	sxtb	r3, r3
 80068de:	4313      	orrs	r3, r2
 80068e0:	b259      	sxtb	r1, r3
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	4413      	add	r3, r2
 80068ec:	b2ca      	uxtb	r2, r1
 80068ee:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	3303      	adds	r3, #3
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	2b3d      	cmp	r3, #61	@ 0x3d
 80068f8:	d00e      	beq.n	8006918 <mg_base64_decode+0x104>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	b25b      	sxtb	r3, r3
 80068fe:	019b      	lsls	r3, r3, #6
 8006900:	b25a      	sxtb	r2, r3
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	b25b      	sxtb	r3, r3
 8006906:	4313      	orrs	r3, r2
 8006908:	b259      	sxtb	r1, r3
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	4413      	add	r3, r2
 8006914:	b2ca      	uxtb	r2, r1
 8006916:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3304      	adds	r3, #4
 800691c:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <mg_base64_decode+0x11a>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3303      	adds	r3, #3
 8006928:	6a3a      	ldr	r2, [r7, #32]
 800692a:	429a      	cmp	r2, r3
 800692c:	d88e      	bhi.n	800684c <mg_base64_decode+0x38>
  }
  dst[len] = '\0';
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006932:	4413      	add	r3, r2
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
  return len;
 8006938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693a:	e009      	b.n	8006950 <mg_base64_decode+0x13c>
  if (dl < n / 4 * 3 + 1) goto fail;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <mg_base64_decode+0x12e>
      goto fail;
 8006940:	bf00      	nop
fail:
  if (dl > 0) dst[0] = '\0';
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <mg_base64_decode+0x13a>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
  return 0;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3728      	adds	r7, #40	@ 0x28
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct dns_data **head, struct dns_data *d) {
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data, head, d);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e002      	b.n	800696e <mg_dns_free+0x16>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	60fb      	str	r3, [r7, #12]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	429a      	cmp	r2, r3
 8006976:	d1f7      	bne.n	8006968 <mg_dns_free+0x10>
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	601a      	str	r2, [r3, #0]
  free(d);
 8006980:	6838      	ldr	r0, [r7, #0]
 8006982:	f01c fc5b 	bl	802323c <free>
}
 8006986:	bf00      	nop
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d;
  struct dns_data **head = (struct dns_data **) &c->mgr->active_dns_requests;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	332c      	adds	r3, #44	@ 0x2c
 800699c:	613b      	str	r3, [r7, #16]
  for (d = *head; d != NULL; d = tmp) {
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	617b      	str	r3, [r7, #20]
 80069a4:	e00d      	b.n	80069c2 <mg_resolve_cancel+0x34>
    tmp = d->next;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
    if (d->c == c) mg_dns_free(head, d);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d103      	bne.n	80069be <mg_resolve_cancel+0x30>
 80069b6:	6979      	ldr	r1, [r7, #20]
 80069b8:	6938      	ldr	r0, [r7, #16]
 80069ba:	f7ff ffcd 	bl	8006958 <mg_dns_free>
  for (d = *head; d != NULL; d = tmp) {
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d1ee      	bne.n	80069a6 <mg_resolve_cancel+0x18>
  }
}
 80069c8:	bf00      	nop
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
  if (ev != MG_EV_POLL && ev < (int) (sizeof(names) / sizeof(names[0]))) {
    MG_PROF_ADD(c, names[ev]);
  }
#endif
  // Fire protocol handler first, user handler second. See #2559
  if (c->pfn != NULL) c->pfn(c, ev, ev_data);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d006      	beq.n	80069f6 <mg_call+0x24>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	68b9      	ldr	r1, [r7, #8]
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	4798      	blx	r3
  if (c->fn != NULL) c->fn(c, ev, ev_data);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <mg_call+0x38>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	4798      	blx	r3
}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8006a14:	b40e      	push	{r1, r2, r3}
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b095      	sub	sp, #84	@ 0x54
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 8006a1e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006a22:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8006a24:	f107 030c 	add.w	r3, r7, #12
 8006a28:	f107 0010 	add.w	r0, r7, #16
 8006a2c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a2e:	2140      	movs	r1, #64	@ 0x40
 8006a30:	f009 ff5e 	bl	80108f0 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %ld %s", c->id, c->fd, buf));
 8006a34:	4b14      	ldr	r3, [pc, #80]	@ (8006a88 <mg_error+0x74>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	dd0f      	ble.n	8006a5c <mg_error+0x48>
 8006a3c:	4b13      	ldr	r3, [pc, #76]	@ (8006a8c <mg_error+0x78>)
 8006a3e:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8006a42:	4913      	ldr	r1, [pc, #76]	@ (8006a90 <mg_error+0x7c>)
 8006a44:	2001      	movs	r0, #1
 8006a46:	f005 fcf5 	bl	800c434 <mg_log_prefix>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a52:	f107 0310 	add.w	r3, r7, #16
 8006a56:	480f      	ldr	r0, [pc, #60]	@ (8006a94 <mg_error+0x80>)
 8006a58:	f005 fd3c 	bl	800c4d4 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8006a62:	f043 0320 	orr.w	r3, r3, #32
 8006a66:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler override it
 8006a6a:	f107 0310 	add.w	r3, r7, #16
 8006a6e:	461a      	mov	r2, r3
 8006a70:	2100      	movs	r1, #0
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff ffad 	bl	80069d2 <mg_call>
}
 8006a78:	bf00      	nop
 8006a7a:	3754      	adds	r7, #84	@ 0x54
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a82:	b003      	add	sp, #12
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	24000258 	.word	0x24000258
 8006a8c:	08027ff0 	.word	0x08027ff0
 8006a90:	08024478 	.word	0x08024478
 8006a94:	08024628 	.word	0x08024628

08006a98 <mg_ota_flash_begin>:

static char *s_addr;      // Current address to write to
static size_t s_size;     // Firmware size to flash. In-progress indicator
static uint32_t s_crc32;  // Firmware checksum

bool mg_ota_flash_begin(size_t new_firmware_size, struct mg_flash *flash) {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  bool ok = false;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]
  if (s_size) {
 8006aa6:	4b30      	ldr	r3, [pc, #192]	@ (8006b68 <mg_ota_flash_begin+0xd0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <mg_ota_flash_begin+0x34>
    MG_ERROR(("OTA already in progress. Call mg_ota_end()"));
 8006aae:	4b2f      	ldr	r3, [pc, #188]	@ (8006b6c <mg_ota_flash_begin+0xd4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	dd52      	ble.n	8006b5c <mg_ota_flash_begin+0xc4>
 8006ab6:	4b2e      	ldr	r3, [pc, #184]	@ (8006b70 <mg_ota_flash_begin+0xd8>)
 8006ab8:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8006abc:	492d      	ldr	r1, [pc, #180]	@ (8006b74 <mg_ota_flash_begin+0xdc>)
 8006abe:	2001      	movs	r0, #1
 8006ac0:	f005 fcb8 	bl	800c434 <mg_log_prefix>
 8006ac4:	482c      	ldr	r0, [pc, #176]	@ (8006b78 <mg_ota_flash_begin+0xe0>)
 8006ac6:	f005 fd05 	bl	800c4d4 <mg_log>
 8006aca:	e047      	b.n	8006b5c <mg_ota_flash_begin+0xc4>
  } else {
    size_t half = flash->size / 2;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	60bb      	str	r3, [r7, #8]
    s_crc32 = 0;
 8006ad4:	4b29      	ldr	r3, [pc, #164]	@ (8006b7c <mg_ota_flash_begin+0xe4>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
    s_addr = (char *) flash->start + half;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	4a27      	ldr	r2, [pc, #156]	@ (8006b80 <mg_ota_flash_begin+0xe8>)
 8006ae4:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("FW %lu bytes, max %lu", new_firmware_size, half));
 8006ae6:	4b21      	ldr	r3, [pc, #132]	@ (8006b6c <mg_ota_flash_begin+0xd4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	dd0b      	ble.n	8006b06 <mg_ota_flash_begin+0x6e>
 8006aee:	4b20      	ldr	r3, [pc, #128]	@ (8006b70 <mg_ota_flash_begin+0xd8>)
 8006af0:	f240 2211 	movw	r2, #529	@ 0x211
 8006af4:	491f      	ldr	r1, [pc, #124]	@ (8006b74 <mg_ota_flash_begin+0xdc>)
 8006af6:	2003      	movs	r0, #3
 8006af8:	f005 fc9c 	bl	800c434 <mg_log_prefix>
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4820      	ldr	r0, [pc, #128]	@ (8006b84 <mg_ota_flash_begin+0xec>)
 8006b02:	f005 fce7 	bl	800c4d4 <mg_log>
    if (new_firmware_size < half) {
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d216      	bcs.n	8006b3c <mg_ota_flash_begin+0xa4>
      ok = true;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	73fb      	strb	r3, [r7, #15]
      s_size = new_firmware_size;
 8006b12:	4a15      	ldr	r2, [pc, #84]	@ (8006b68 <mg_ota_flash_begin+0xd0>)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6013      	str	r3, [r2, #0]
      MG_INFO(("Starting OTA, firmware size %lu", s_size));
 8006b18:	4b14      	ldr	r3, [pc, #80]	@ (8006b6c <mg_ota_flash_begin+0xd4>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	dd1d      	ble.n	8006b5c <mg_ota_flash_begin+0xc4>
 8006b20:	4b13      	ldr	r3, [pc, #76]	@ (8006b70 <mg_ota_flash_begin+0xd8>)
 8006b22:	f240 2215 	movw	r2, #533	@ 0x215
 8006b26:	4913      	ldr	r1, [pc, #76]	@ (8006b74 <mg_ota_flash_begin+0xdc>)
 8006b28:	2002      	movs	r0, #2
 8006b2a:	f005 fc83 	bl	800c434 <mg_log_prefix>
 8006b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006b68 <mg_ota_flash_begin+0xd0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4619      	mov	r1, r3
 8006b34:	4814      	ldr	r0, [pc, #80]	@ (8006b88 <mg_ota_flash_begin+0xf0>)
 8006b36:	f005 fccd 	bl	800c4d4 <mg_log>
 8006b3a:	e00f      	b.n	8006b5c <mg_ota_flash_begin+0xc4>
    } else {
      MG_ERROR(("Firmware %lu is too big to fit %lu", new_firmware_size, half));
 8006b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b6c <mg_ota_flash_begin+0xd4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	dd0b      	ble.n	8006b5c <mg_ota_flash_begin+0xc4>
 8006b44:	4b0a      	ldr	r3, [pc, #40]	@ (8006b70 <mg_ota_flash_begin+0xd8>)
 8006b46:	f240 2217 	movw	r2, #535	@ 0x217
 8006b4a:	490a      	ldr	r1, [pc, #40]	@ (8006b74 <mg_ota_flash_begin+0xdc>)
 8006b4c:	2001      	movs	r0, #1
 8006b4e:	f005 fc71 	bl	800c434 <mg_log_prefix>
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	480d      	ldr	r0, [pc, #52]	@ (8006b8c <mg_ota_flash_begin+0xf4>)
 8006b58:	f005 fcbc 	bl	800c4d4 <mg_log>
    }
  }
  return ok;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	24001088 	.word	0x24001088
 8006b6c:	24000258 	.word	0x24000258
 8006b70:	08027ffc 	.word	0x08027ffc
 8006b74:	08024478 	.word	0x08024478
 8006b78:	08024634 	.word	0x08024634
 8006b7c:	2400108c 	.word	0x2400108c
 8006b80:	24001084 	.word	0x24001084
 8006b84:	08024660 	.word	0x08024660
 8006b88:	08024678 	.word	0x08024678
 8006b8c:	08024698 	.word	0x08024698

08006b90 <mg_ota_flash_write>:

bool mg_ota_flash_write(const void *buf, size_t len, struct mg_flash *flash) {
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	b08c      	sub	sp, #48	@ 0x30
 8006b96:	af02      	add	r7, sp, #8
 8006b98:	60f8      	str	r0, [r7, #12]
 8006b9a:	60b9      	str	r1, [r7, #8]
 8006b9c:	607a      	str	r2, [r7, #4]
  bool ok = false;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (s_size == 0) {
 8006ba4:	4b54      	ldr	r3, [pc, #336]	@ (8006cf8 <mg_ota_flash_write+0x168>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10f      	bne.n	8006bcc <mg_ota_flash_write+0x3c>
    MG_ERROR(("OTA is not started, call mg_ota_begin()"));
 8006bac:	4b53      	ldr	r3, [pc, #332]	@ (8006cfc <mg_ota_flash_write+0x16c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f340 8099 	ble.w	8006ce8 <mg_ota_flash_write+0x158>
 8006bb6:	4b52      	ldr	r3, [pc, #328]	@ (8006d00 <mg_ota_flash_write+0x170>)
 8006bb8:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8006bbc:	4951      	ldr	r1, [pc, #324]	@ (8006d04 <mg_ota_flash_write+0x174>)
 8006bbe:	2001      	movs	r0, #1
 8006bc0:	f005 fc38 	bl	800c434 <mg_log_prefix>
 8006bc4:	4850      	ldr	r0, [pc, #320]	@ (8006d08 <mg_ota_flash_write+0x178>)
 8006bc6:	f005 fc85 	bl	800c4d4 <mg_log>
 8006bca:	e08d      	b.n	8006ce8 <mg_ota_flash_write+0x158>
  } else {
    size_t len_aligned_down = MG_ROUND_DOWN(len, flash->align);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d009      	beq.n	8006be8 <mg_ota_flash_write+0x58>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	68d2      	ldr	r2, [r2, #12]
 8006be2:	fb02 f303 	mul.w	r3, r2, r3
 8006be6:	e000      	b.n	8006bea <mg_ota_flash_write+0x5a>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	623b      	str	r3, [r7, #32]
    if (len_aligned_down) ok = flash->write_fn(s_addr, buf, len_aligned_down);
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <mg_ota_flash_write+0x76>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	4a45      	ldr	r2, [pc, #276]	@ (8006d0c <mg_ota_flash_write+0x17c>)
 8006bf8:	6810      	ldr	r0, [r2, #0]
 8006bfa:	6a3a      	ldr	r2, [r7, #32]
 8006bfc:	68f9      	ldr	r1, [r7, #12]
 8006bfe:	4798      	blx	r3
 8006c00:	4603      	mov	r3, r0
 8006c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (len_aligned_down < len) {
 8006c06:	6a3a      	ldr	r2, [r7, #32]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d244      	bcs.n	8006c98 <mg_ota_flash_write+0x108>
 8006c0e:	466b      	mov	r3, sp
 8006c10:	469a      	mov	sl, r3
      size_t left = len - len_aligned_down;
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	6a3b      	ldr	r3, [r7, #32]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	61fb      	str	r3, [r7, #28]
      char tmp[flash->align];
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68de      	ldr	r6, [r3, #12]
 8006c1e:	4633      	mov	r3, r6
 8006c20:	3b01      	subs	r3, #1
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	2300      	movs	r3, #0
 8006c26:	46b0      	mov	r8, r6
 8006c28:	4699      	mov	r9, r3
 8006c2a:	f04f 0200 	mov.w	r2, #0
 8006c2e:	f04f 0300 	mov.w	r3, #0
 8006c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	4634      	mov	r4, r6
 8006c42:	461d      	mov	r5, r3
 8006c44:	f04f 0200 	mov.w	r2, #0
 8006c48:	f04f 0300 	mov.w	r3, #0
 8006c4c:	00eb      	lsls	r3, r5, #3
 8006c4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c52:	00e2      	lsls	r2, r4, #3
 8006c54:	1df3      	adds	r3, r6, #7
 8006c56:	08db      	lsrs	r3, r3, #3
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	ebad 0d03 	sub.w	sp, sp, r3
 8006c5e:	ab02      	add	r3, sp, #8
 8006c60:	3300      	adds	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]
      memset(tmp, 0xff, sizeof(tmp));
 8006c64:	4632      	mov	r2, r6
 8006c66:	21ff      	movs	r1, #255	@ 0xff
 8006c68:	6978      	ldr	r0, [r7, #20]
 8006c6a:	f01c fd98 	bl	802379e <memset>
      memcpy(tmp, (char *) buf + len_aligned_down, left);
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	4413      	add	r3, r2
 8006c74:	69fa      	ldr	r2, [r7, #28]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6978      	ldr	r0, [r7, #20]
 8006c7a:	f01c fec6 	bl	8023a0a <memcpy>
      ok = flash->write_fn(s_addr + len_aligned_down, tmp, sizeof(tmp));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	4a22      	ldr	r2, [pc, #136]	@ (8006d0c <mg_ota_flash_write+0x17c>)
 8006c84:	6811      	ldr	r1, [r2, #0]
 8006c86:	6a3a      	ldr	r2, [r7, #32]
 8006c88:	1888      	adds	r0, r1, r2
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	6979      	ldr	r1, [r7, #20]
 8006c8e:	4798      	blx	r3
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c96:	46d5      	mov	sp, sl
    }
    s_crc32 = mg_crc32(s_crc32, (char *) buf, len);  // Update CRC
 8006c98:	4b1d      	ldr	r3, [pc, #116]	@ (8006d10 <mg_ota_flash_write+0x180>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	68f9      	ldr	r1, [r7, #12]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f018 fc2d 	bl	801f500 <mg_crc32>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	4a19      	ldr	r2, [pc, #100]	@ (8006d10 <mg_ota_flash_write+0x180>)
 8006caa:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("%#x %p %lu -> %d", s_addr - len, buf, len, ok));
 8006cac:	4b13      	ldr	r3, [pc, #76]	@ (8006cfc <mg_ota_flash_write+0x16c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	dd13      	ble.n	8006cdc <mg_ota_flash_write+0x14c>
 8006cb4:	4b12      	ldr	r3, [pc, #72]	@ (8006d00 <mg_ota_flash_write+0x170>)
 8006cb6:	f44f 720b 	mov.w	r2, #556	@ 0x22c
 8006cba:	4912      	ldr	r1, [pc, #72]	@ (8006d04 <mg_ota_flash_write+0x174>)
 8006cbc:	2003      	movs	r0, #3
 8006cbe:	f005 fbb9 	bl	800c434 <mg_log_prefix>
 8006cc2:	4b12      	ldr	r3, [pc, #72]	@ (8006d0c <mg_ota_flash_write+0x17c>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	425b      	negs	r3, r3
 8006cca:	18d1      	adds	r1, r2, r3
 8006ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	480f      	ldr	r0, [pc, #60]	@ (8006d14 <mg_ota_flash_write+0x184>)
 8006cd8:	f005 fbfc 	bl	800c4d4 <mg_log>
    s_addr += len;
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8006d0c <mg_ota_flash_write+0x17c>)
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	4a09      	ldr	r2, [pc, #36]	@ (8006d0c <mg_ota_flash_write+0x17c>)
 8006ce6:	6013      	str	r3, [r2, #0]
  }
  return ok;
 8006ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3728      	adds	r7, #40	@ 0x28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cf6:	bf00      	nop
 8006cf8:	24001088 	.word	0x24001088
 8006cfc:	24000258 	.word	0x24000258
 8006d00:	08028010 	.word	0x08028010
 8006d04:	08024478 	.word	0x08024478
 8006d08:	080246bc 	.word	0x080246bc
 8006d0c:	24001084 	.word	0x24001084
 8006d10:	2400108c 	.word	0x2400108c
 8006d14:	080246e4 	.word	0x080246e4

08006d18 <mg_ota_flash_end>:

bool mg_ota_flash_end(struct mg_flash *flash) {
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	6078      	str	r0, [r7, #4]
  char *base = (char *) flash->start + flash->size / 2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	4413      	add	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
  bool ok = false;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	75fb      	strb	r3, [r7, #23]
  if (s_size) {
 8006d32:	4b2f      	ldr	r3, [pc, #188]	@ (8006df0 <mg_ota_flash_end+0xd8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d040      	beq.n	8006dbc <mg_ota_flash_end+0xa4>
    size_t size = (size_t) (s_addr - base);
 8006d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8006df4 <mg_ota_flash_end+0xdc>)
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	60fb      	str	r3, [r7, #12]
    uint32_t crc32 = mg_crc32(0, base, s_size);
 8006d44:	4b2a      	ldr	r3, [pc, #168]	@ (8006df0 <mg_ota_flash_end+0xd8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6939      	ldr	r1, [r7, #16]
 8006d4c:	2000      	movs	r0, #0
 8006d4e:	f018 fbd7 	bl	801f500 <mg_crc32>
 8006d52:	60b8      	str	r0, [r7, #8]
    if (size == s_size && crc32 == s_crc32) ok = true;
 8006d54:	4b26      	ldr	r3, [pc, #152]	@ (8006df0 <mg_ota_flash_end+0xd8>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d106      	bne.n	8006d6c <mg_ota_flash_end+0x54>
 8006d5e:	4b26      	ldr	r3, [pc, #152]	@ (8006df8 <mg_ota_flash_end+0xe0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d101      	bne.n	8006d6c <mg_ota_flash_end+0x54>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]
    MG_DEBUG(("CRC: %x/%x, size: %lu/%lu, status: %s", s_crc32, crc32, s_size,
 8006d6c:	4b23      	ldr	r3, [pc, #140]	@ (8006dfc <mg_ota_flash_end+0xe4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	dd18      	ble.n	8006da6 <mg_ota_flash_end+0x8e>
 8006d74:	4b22      	ldr	r3, [pc, #136]	@ (8006e00 <mg_ota_flash_end+0xe8>)
 8006d76:	f240 2239 	movw	r2, #569	@ 0x239
 8006d7a:	4922      	ldr	r1, [pc, #136]	@ (8006e04 <mg_ota_flash_end+0xec>)
 8006d7c:	2003      	movs	r0, #3
 8006d7e:	f005 fb59 	bl	800c434 <mg_log_prefix>
 8006d82:	4b1d      	ldr	r3, [pc, #116]	@ (8006df8 <mg_ota_flash_end+0xe0>)
 8006d84:	6819      	ldr	r1, [r3, #0]
 8006d86:	4b1a      	ldr	r3, [pc, #104]	@ (8006df0 <mg_ota_flash_end+0xd8>)
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <mg_ota_flash_end+0x7c>
 8006d90:	4b1d      	ldr	r3, [pc, #116]	@ (8006e08 <mg_ota_flash_end+0xf0>)
 8006d92:	e000      	b.n	8006d96 <mg_ota_flash_end+0x7e>
 8006d94:	4b1d      	ldr	r3, [pc, #116]	@ (8006e0c <mg_ota_flash_end+0xf4>)
 8006d96:	9301      	str	r3, [sp, #4]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	481b      	ldr	r0, [pc, #108]	@ (8006e10 <mg_ota_flash_end+0xf8>)
 8006da2:	f005 fb97 	bl	800c4d4 <mg_log>
              size, ok ? "ok" : "fail"));
    s_size = 0;
 8006da6:	4b12      	ldr	r3, [pc, #72]	@ (8006df0 <mg_ota_flash_end+0xd8>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
    if (ok) ok = flash->swap_fn();
 8006dac:	7dfb      	ldrb	r3, [r7, #23]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d004      	beq.n	8006dbc <mg_ota_flash_end+0xa4>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	4798      	blx	r3
 8006db8:	4603      	mov	r3, r0
 8006dba:	75fb      	strb	r3, [r7, #23]
  }
  MG_INFO(("Finishing OTA: %s", ok ? "ok" : "fail"));
 8006dbc:	4b0f      	ldr	r3, [pc, #60]	@ (8006dfc <mg_ota_flash_end+0xe4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	dd10      	ble.n	8006de6 <mg_ota_flash_end+0xce>
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e00 <mg_ota_flash_end+0xe8>)
 8006dc6:	f240 223e 	movw	r2, #574	@ 0x23e
 8006dca:	490e      	ldr	r1, [pc, #56]	@ (8006e04 <mg_ota_flash_end+0xec>)
 8006dcc:	2002      	movs	r0, #2
 8006dce:	f005 fb31 	bl	800c434 <mg_log_prefix>
 8006dd2:	7dfb      	ldrb	r3, [r7, #23]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <mg_ota_flash_end+0xc4>
 8006dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e08 <mg_ota_flash_end+0xf0>)
 8006dda:	e000      	b.n	8006dde <mg_ota_flash_end+0xc6>
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <mg_ota_flash_end+0xf4>)
 8006dde:	4619      	mov	r1, r3
 8006de0:	480c      	ldr	r0, [pc, #48]	@ (8006e14 <mg_ota_flash_end+0xfc>)
 8006de2:	f005 fb77 	bl	800c4d4 <mg_log>
  return ok;
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	24001088 	.word	0x24001088
 8006df4:	24001084 	.word	0x24001084
 8006df8:	2400108c 	.word	0x2400108c
 8006dfc:	24000258 	.word	0x24000258
 8006e00:	08028024 	.word	0x08028024
 8006e04:	08024478 	.word	0x08024478
 8006e08:	080246f8 	.word	0x080246f8
 8006e0c:	080246fc 	.word	0x080246fc
 8006e10:	08024704 	.word	0x08024704
 8006e14:	0802472c 	.word	0x0802472c

08006e18 <is_digit>:
#endif




static bool is_digit(int c) {
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b2f      	cmp	r3, #47	@ 0x2f
 8006e24:	dd04      	ble.n	8006e30 <is_digit+0x18>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b39      	cmp	r3, #57	@ 0x39
 8006e2a:	dc01      	bgt.n	8006e30 <is_digit+0x18>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <is_digit+0x1a>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	b2db      	uxtb	r3, r3
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  int n = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	617a      	str	r2, [r7, #20]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4413      	add	r3, r2
 8006e60:	2265      	movs	r2, #101	@ 0x65
 8006e62:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	617a      	str	r2, [r7, #20]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8006e7c:	dd01      	ble.n	8006e82 <addexp+0x3e>
 8006e7e:	2300      	movs	r3, #0
 8006e80:	e057      	b.n	8006f32 <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b09      	cmp	r3, #9
 8006e86:	dc07      	bgt.n	8006e98 <addexp+0x54>
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	1c5a      	adds	r2, r3, #1
 8006e8c:	617a      	str	r2, [r7, #20]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	2230      	movs	r2, #48	@ 0x30
 8006e96:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	2b63      	cmp	r3, #99	@ 0x63
 8006e9c:	dd1c      	ble.n	8006ed8 <addexp+0x94>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	4a27      	ldr	r2, [pc, #156]	@ (8006f40 <addexp+0xfc>)
 8006ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8006ea6:	1152      	asrs	r2, r2, #5
 8006ea8:	17db      	asrs	r3, r3, #31
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	1c59      	adds	r1, r3, #1
 8006eb2:	6179      	str	r1, [r7, #20]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	440b      	add	r3, r1
 8006eba:	3230      	adds	r2, #48	@ 0x30
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8006f40 <addexp+0xfc>)
 8006ec4:	fb82 1203 	smull	r1, r2, r2, r3
 8006ec8:	1151      	asrs	r1, r2, #5
 8006eca:	17da      	asrs	r2, r3, #31
 8006ecc:	1a8a      	subs	r2, r1, r2
 8006ece:	2164      	movs	r1, #100	@ 0x64
 8006ed0:	fb01 f202 	mul.w	r2, r1, r2
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b09      	cmp	r3, #9
 8006edc:	dd1d      	ble.n	8006f1a <addexp+0xd6>
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	4a18      	ldr	r2, [pc, #96]	@ (8006f44 <addexp+0x100>)
 8006ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8006ee6:	1092      	asrs	r2, r2, #2
 8006ee8:	17db      	asrs	r3, r3, #31
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	1c59      	adds	r1, r3, #1
 8006ef2:	6179      	str	r1, [r7, #20]
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	440b      	add	r3, r1
 8006efa:	3230      	adds	r2, #48	@ 0x30
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	4b10      	ldr	r3, [pc, #64]	@ (8006f44 <addexp+0x100>)
 8006f04:	fb83 1302 	smull	r1, r3, r3, r2
 8006f08:	1099      	asrs	r1, r3, #2
 8006f0a:	17d3      	asrs	r3, r2, #31
 8006f0c:	1ac9      	subs	r1, r1, r3
 8006f0e:	460b      	mov	r3, r1
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	1c59      	adds	r1, r3, #1
 8006f22:	6179      	str	r1, [r7, #20]
 8006f24:	4619      	mov	r1, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	440b      	add	r3, r1
 8006f2a:	3230      	adds	r2, #48	@ 0x30
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	701a      	strb	r2, [r3, #0]
  return n;
 8006f30:	697b      	ldr	r3, [r7, #20]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	51eb851f 	.word	0x51eb851f
 8006f44:	66666667 	.word	0x66666667

08006f48 <xisinf>:

static int xisinf(double x) {
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8006f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f56:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8006f5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	000a      	movs	r2, r1
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f70:	4a08      	ldr	r2, [pc, #32]	@ (8006f94 <xisinf+0x4c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d106      	bne.n	8006f84 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8006f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f7a:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <xisinf+0x3c>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <xisinf+0x3e>
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	7ff00000 	.word	0x7ff00000

08006f98 <xisnan>:

static int xisnan(double x) {
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 8006fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fa6:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8006faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006fae:	f04f 0200 	mov.w	r2, #0
 8006fb2:	f04f 0300 	mov.w	r3, #0
 8006fb6:	000a      	movs	r2, r1
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4613      	mov	r3, r2
 8006fbc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
             ((unsigned) ieee754.u != 0) >
 8006fc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bf14      	ite	ne
 8006fca:	2301      	movne	r3, #1
 8006fcc:	2300      	moveq	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8006fd0:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 8006fd2:	4a06      	ldr	r2, [pc, #24]	@ (8006fec <xisnan+0x54>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	bf8c      	ite	hi
 8006fd8:	2301      	movhi	r3, #1
 8006fda:	2300      	movls	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	7ff00000 	.word	0x7ff00000

08006ff0 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b0a0      	sub	sp, #128	@ 0x80
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	6178      	str	r0, [r7, #20]
 8006ff8:	6139      	str	r1, [r7, #16]
 8006ffa:	ed87 0b02 	vstr	d0, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	673b      	str	r3, [r7, #112]	@ 0x70
 8007006:	2300      	movs	r3, #0
 8007008:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800700a:	2300      	movs	r3, #0
 800700c:	66bb      	str	r3, [r7, #104]	@ 0x68
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 800700e:	ed97 7b02 	vldr	d7, [r7, #8]
 8007012:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701a:	d107      	bne.n	800702c <mg_dtoa+0x3c>
 800701c:	4bb8      	ldr	r3, [pc, #736]	@ (8007300 <mg_dtoa+0x310>)
 800701e:	4ab9      	ldr	r2, [pc, #740]	@ (8007304 <mg_dtoa+0x314>)
 8007020:	6939      	ldr	r1, [r7, #16]
 8007022:	6978      	ldr	r0, [r7, #20]
 8007024:	f009 fc8c 	bl	8010940 <mg_snprintf>
 8007028:	4603      	mov	r3, r0
 800702a:	e28d      	b.n	8007548 <mg_dtoa+0x558>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 800702c:	ed97 0b02 	vldr	d0, [r7, #8]
 8007030:	f7ff ff8a 	bl	8006f48 <xisinf>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d010      	beq.n	800705c <mg_dtoa+0x6c>
 800703a:	ed97 7b02 	vldr	d7, [r7, #8]
 800703e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007046:	dd01      	ble.n	800704c <mg_dtoa+0x5c>
 8007048:	4baf      	ldr	r3, [pc, #700]	@ (8007308 <mg_dtoa+0x318>)
 800704a:	e000      	b.n	800704e <mg_dtoa+0x5e>
 800704c:	4baf      	ldr	r3, [pc, #700]	@ (800730c <mg_dtoa+0x31c>)
 800704e:	4aad      	ldr	r2, [pc, #692]	@ (8007304 <mg_dtoa+0x314>)
 8007050:	6939      	ldr	r1, [r7, #16]
 8007052:	6978      	ldr	r0, [r7, #20]
 8007054:	f009 fc74 	bl	8010940 <mg_snprintf>
 8007058:	4603      	mov	r3, r0
 800705a:	e275      	b.n	8007548 <mg_dtoa+0x558>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 800705c:	ed97 0b02 	vldr	d0, [r7, #8]
 8007060:	f7ff ff9a 	bl	8006f98 <xisnan>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d007      	beq.n	800707a <mg_dtoa+0x8a>
 800706a:	4ba9      	ldr	r3, [pc, #676]	@ (8007310 <mg_dtoa+0x320>)
 800706c:	4aa5      	ldr	r2, [pc, #660]	@ (8007304 <mg_dtoa+0x314>)
 800706e:	6939      	ldr	r1, [r7, #16]
 8007070:	6978      	ldr	r0, [r7, #20]
 8007072:	f009 fc65 	bl	8010940 <mg_snprintf>
 8007076:	4603      	mov	r3, r0
 8007078:	e266      	b.n	8007548 <mg_dtoa+0x558>
  if (d < 0.0) d = -d, buf[s++] = '-';
 800707a:	ed97 7b02 	vldr	d7, [r7, #8]
 800707e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007086:	d50d      	bpl.n	80070a4 <mg_dtoa+0xb4>
 8007088:	ed97 7b02 	vldr	d7, [r7, #8]
 800708c:	eeb1 7b47 	vneg.f64	d7, d7
 8007090:	ed87 7b02 	vstr	d7, [r7, #8]
 8007094:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	673a      	str	r2, [r7, #112]	@ 0x70
 800709a:	3378      	adds	r3, #120	@ 0x78
 800709c:	443b      	add	r3, r7
 800709e:	222d      	movs	r2, #45	@ 0x2d
 80070a0:	f803 2c60 	strb.w	r2, [r3, #-96]

  // Round
  saved = d;
 80070a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
  if (tz) {
 80070ac:	78fb      	ldrb	r3, [r7, #3]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d024      	beq.n	80070fc <mg_dtoa+0x10c>
    mul = 1.0;
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	4b97      	ldr	r3, [pc, #604]	@ (8007314 <mg_dtoa+0x324>)
 80070b8:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80070bc:	e007      	b.n	80070ce <mg_dtoa+0xde>
 80070be:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80070c2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80070c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80070ca:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80070ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80070d2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80070d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070de:	db12      	blt.n	8007106 <mg_dtoa+0x116>
 80070e0:	ed97 5b02 	vldr	d5, [r7, #8]
 80070e4:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80070e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80070ec:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80070f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80070f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f8:	dae1      	bge.n	80070be <mg_dtoa+0xce>
 80070fa:	e00d      	b.n	8007118 <mg_dtoa+0x128>
  } else {
    mul = 0.1;
 80070fc:	a37e      	add	r3, pc, #504	@ (adr r3, 80072f8 <mg_dtoa+0x308>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  }

  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 8007106:	e007      	b.n	8007118 <mg_dtoa+0x128>
 8007108:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 800710c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007110:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007114:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 8007118:	ed97 7b02 	vldr	d7, [r7, #8]
 800711c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007120:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007128:	d80c      	bhi.n	8007144 <mg_dtoa+0x154>
 800712a:	ed97 5b02 	vldr	d5, [r7, #8]
 800712e:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8007132:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007136:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800713a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800713e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007142:	d9e1      	bls.n	8007108 <mg_dtoa+0x118>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8007144:	2300      	movs	r3, #0
 8007146:	677b      	str	r3, [r7, #116]	@ 0x74
 8007148:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 800714c:	eeb1 6b04 	vmov.f64	d6, #20	@ 0x40a00000  5.0
 8007150:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007154:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 8007158:	e00a      	b.n	8007170 <mg_dtoa+0x180>
 800715a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800715e:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007162:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007166:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 800716a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800716c:	3301      	adds	r3, #1
 800716e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007170:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	429a      	cmp	r2, r3
 8007176:	dbf0      	blt.n	800715a <mg_dtoa+0x16a>

  d += t;
 8007178:	ed97 6b02 	vldr	d6, [r7, #8]
 800717c:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8007180:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007184:	ed87 7b02 	vstr	d7, [r7, #8]

  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	4b61      	ldr	r3, [pc, #388]	@ (8007314 <mg_dtoa+0x324>)
 800718e:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8007192:	e00a      	b.n	80071aa <mg_dtoa+0x1ba>
 8007194:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8007198:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800719c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071a0:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80071a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071a6:	3301      	adds	r3, #1
 80071a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071aa:	ed97 7b02 	vldr	d7, [r7, #8]
 80071ae:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80071b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ba:	db0c      	blt.n	80071d6 <mg_dtoa+0x1e6>
 80071bc:	ed97 5b02 	vldr	d5, [r7, #8]
 80071c0:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80071c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80071c8:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80071cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d4:	dade      	bge.n	8007194 <mg_dtoa+0x1a4>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80071d6:	e00a      	b.n	80071ee <mg_dtoa+0x1fe>
 80071d8:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 80071dc:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80071e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80071e4:	ed87 7b16 	vstr	d7, [r7, #88]	@ 0x58
 80071e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071ea:	3b01      	subs	r3, #1
 80071ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80071f2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80071f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fe:	d50c      	bpl.n	800721a <mg_dtoa+0x22a>
 8007200:	ed97 5b02 	vldr	d5, [r7, #8]
 8007204:	ed97 6b16 	vldr	d6, [r7, #88]	@ 0x58
 8007208:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800720c:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8007210:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007218:	d4de      	bmi.n	80071d8 <mg_dtoa+0x1e8>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (tz && e >= width && width > 1) {
 800721a:	78fb      	ldrb	r3, [r7, #3]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d031      	beq.n	8007284 <mg_dtoa+0x294>
 8007220:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	429a      	cmp	r2, r3
 8007226:	db2d      	blt.n	8007284 <mg_dtoa+0x294>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b01      	cmp	r3, #1
 800722c:	dd2a      	ble.n	8007284 <mg_dtoa+0x294>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800722e:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8007232:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 8007236:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800723a:	78fb      	ldrb	r3, [r7, #3]
 800723c:	f107 0018 	add.w	r0, r7, #24
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	eeb0 0b45 	vmov.f64	d0, d5
 8007246:	2128      	movs	r1, #40	@ 0x28
 8007248:	f7ff fed2 	bl	8006ff0 <mg_dtoa>
 800724c:	4603      	mov	r3, r0
 800724e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8007250:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007254:	4413      	add	r3, r2
 8007256:	f107 0218 	add.w	r2, r7, #24
 800725a:	4413      	add	r3, r2
 800725c:	222b      	movs	r2, #43	@ 0x2b
 800725e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007260:	4618      	mov	r0, r3
 8007262:	f7ff fdef 	bl	8006e44 <addexp>
 8007266:	4602      	mov	r2, r0
 8007268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800726a:	4413      	add	r3, r2
 800726c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800726e:	f107 0318 	add.w	r3, r7, #24
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007276:	4a28      	ldr	r2, [pc, #160]	@ (8007318 <mg_dtoa+0x328>)
 8007278:	6939      	ldr	r1, [r7, #16]
 800727a:	6978      	ldr	r0, [r7, #20]
 800727c:	f009 fb60 	bl	8010940 <mg_snprintf>
 8007280:	4603      	mov	r3, r0
 8007282:	e161      	b.n	8007548 <mg_dtoa+0x558>
  } else if (tz && e <= -width && width > 1) {
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d048      	beq.n	800731c <mg_dtoa+0x32c>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	425b      	negs	r3, r3
 800728e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007290:	429a      	cmp	r2, r3
 8007292:	dc43      	bgt.n	800731c <mg_dtoa+0x32c>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b01      	cmp	r3, #1
 8007298:	dd40      	ble.n	800731c <mg_dtoa+0x32c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800729a:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 800729e:	ed97 7b16 	vldr	d7, [r7, #88]	@ 0x58
 80072a2:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	f107 0018 	add.w	r0, r7, #24
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	eeb0 0b45 	vmov.f64	d0, d5
 80072b2:	2128      	movs	r1, #40	@ 0x28
 80072b4:	f7ff fe9c 	bl	8006ff0 <mg_dtoa>
 80072b8:	4603      	mov	r3, r0
 80072ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 80072bc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80072be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072c0:	4413      	add	r3, r2
 80072c2:	f107 0218 	add.w	r2, r7, #24
 80072c6:	18d0      	adds	r0, r2, r3
 80072c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072ca:	425b      	negs	r3, r3
 80072cc:	222d      	movs	r2, #45	@ 0x2d
 80072ce:	4619      	mov	r1, r3
 80072d0:	f7ff fdb8 	bl	8006e44 <addexp>
 80072d4:	4602      	mov	r2, r0
 80072d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072d8:	4413      	add	r3, r2
 80072da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80072dc:	f107 0318 	add.w	r3, r7, #24
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072e4:	4a0c      	ldr	r2, [pc, #48]	@ (8007318 <mg_dtoa+0x328>)
 80072e6:	6939      	ldr	r1, [r7, #16]
 80072e8:	6978      	ldr	r0, [r7, #20]
 80072ea:	f009 fb29 	bl	8010940 <mg_snprintf>
 80072ee:	4603      	mov	r3, r0
 80072f0:	e12a      	b.n	8007548 <mg_dtoa+0x558>
 80072f2:	bf00      	nop
 80072f4:	f3af 8000 	nop.w
 80072f8:	9999999a 	.word	0x9999999a
 80072fc:	3fb99999 	.word	0x3fb99999
 8007300:	08024740 	.word	0x08024740
 8007304:	08024744 	.word	0x08024744
 8007308:	08024748 	.word	0x08024748
 800730c:	0802474c 	.word	0x0802474c
 8007310:	08024754 	.word	0x08024754
 8007314:	3ff00000 	.word	0x3ff00000
 8007318:	08024758 	.word	0x08024758
  } else {
    int targ_width = width;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8007320:	2300      	movs	r3, #0
 8007322:	677b      	str	r3, [r7, #116]	@ 0x74
 8007324:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007328:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 800732c:	e037      	b.n	800739e <mg_dtoa+0x3ae>
      int ch = (int) (d / t);
 800732e:	ed97 5b02 	vldr	d5, [r7, #8]
 8007332:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 8007336:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800733a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800733e:	ee17 3a90 	vmov	r3, s15
 8007342:	647b      	str	r3, [r7, #68]	@ 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8007344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007346:	2b00      	cmp	r3, #0
 8007348:	dc02      	bgt.n	8007350 <mg_dtoa+0x360>
 800734a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800734c:	2b00      	cmp	r3, #0
 800734e:	dd0c      	ble.n	800736a <mg_dtoa+0x37a>
 8007350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007352:	b2da      	uxtb	r2, r3
 8007354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007356:	1c59      	adds	r1, r3, #1
 8007358:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800735a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800735c:	440b      	add	r3, r1
 800735e:	3230      	adds	r2, #48	@ 0x30
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	3378      	adds	r3, #120	@ 0x78
 8007364:	443b      	add	r3, r7
 8007366:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 800736a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007374:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8007378:	ee26 7b07 	vmul.f64	d7, d6, d7
 800737c:	ed97 6b02 	vldr	d6, [r7, #8]
 8007380:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007384:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8007388:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800738c:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 8007390:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007394:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8007398:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800739a:	3301      	adds	r3, #1
 800739c:	677b      	str	r3, [r7, #116]	@ 0x74
 800739e:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80073a2:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80073a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80073aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073ae:	db04      	blt.n	80073ba <mg_dtoa+0x3ca>
 80073b0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80073b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073b4:	4413      	add	r3, r2
 80073b6:	2b27      	cmp	r3, #39	@ 0x27
 80073b8:	ddb9      	ble.n	800732e <mg_dtoa+0x33e>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 80073ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d118      	bne.n	80073f2 <mg_dtoa+0x402>
 80073c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	673a      	str	r2, [r7, #112]	@ 0x70
 80073c6:	3378      	adds	r3, #120	@ 0x78
 80073c8:	443b      	add	r3, r7
 80073ca:	2230      	movs	r2, #48	@ 0x30
 80073cc:	f803 2c60 	strb.w	r2, [r3, #-96]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80073d0:	e00f      	b.n	80073f2 <mg_dtoa+0x402>
 80073d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073d8:	3378      	adds	r3, #120	@ 0x78
 80073da:	443b      	add	r3, r7
 80073dc:	2230      	movs	r2, #48	@ 0x30
 80073de:	f803 2c60 	strb.w	r2, [r3, #-96]
 80073e2:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80073e6:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80073ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80073ee:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
 80073f2:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 80073f6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80073fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80073fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007402:	db04      	blt.n	800740e <mg_dtoa+0x41e>
 8007404:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007408:	4413      	add	r3, r2
 800740a:	2b27      	cmp	r3, #39	@ 0x27
 800740c:	dde1      	ble.n	80073d2 <mg_dtoa+0x3e2>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 800740e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007410:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007412:	4413      	add	r3, r2
 8007414:	2b27      	cmp	r3, #39	@ 0x27
 8007416:	dc09      	bgt.n	800742c <mg_dtoa+0x43c>
 8007418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	673a      	str	r2, [r7, #112]	@ 0x70
 800741e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007420:	4413      	add	r3, r2
 8007422:	3378      	adds	r3, #120	@ 0x78
 8007424:	443b      	add	r3, r7
 8007426:	222e      	movs	r2, #46	@ 0x2e
 8007428:	f803 2c60 	strb.w	r2, [r3, #-96]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    if (!tz && n > 0) targ_width = width + n;
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	f083 0301 	eor.w	r3, r3, #1
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d006      	beq.n	8007446 <mg_dtoa+0x456>
 8007438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800743a:	2b00      	cmp	r3, #0
 800743c:	dd03      	ble.n	8007446 <mg_dtoa+0x456>
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007442:	4413      	add	r3, r2
 8007444:	657b      	str	r3, [r7, #84]	@ 0x54
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 8007446:	2300      	movs	r3, #0
 8007448:	677b      	str	r3, [r7, #116]	@ 0x74
 800744a:	a342      	add	r3, pc, #264	@ (adr r3, 8007554 <mg_dtoa+0x564>)
 800744c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007450:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
 8007454:	e031      	b.n	80074ba <mg_dtoa+0x4ca>
      int ch = (int) (d / t);
 8007456:	ed97 5b02 	vldr	d5, [r7, #8]
 800745a:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 800745e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007462:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007466:	ee17 3a90 	vmov	r3, s15
 800746a:	643b      	str	r3, [r7, #64]	@ 0x40
      buf[s + n++] = (char) (ch + '0');
 800746c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800746e:	b2da      	uxtb	r2, r3
 8007470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007472:	1c59      	adds	r1, r3, #1
 8007474:	66f9      	str	r1, [r7, #108]	@ 0x6c
 8007476:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8007478:	440b      	add	r3, r1
 800747a:	3230      	adds	r2, #48	@ 0x30
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	3378      	adds	r3, #120	@ 0x78
 8007480:	443b      	add	r3, r7
 8007482:	f803 2c60 	strb.w	r2, [r3, #-96]
      d -= ch * t;
 8007486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007490:	ed97 7b18 	vldr	d7, [r7, #96]	@ 0x60
 8007494:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007498:	ed97 6b02 	vldr	d6, [r7, #8]
 800749c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80074a0:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 80074a4:	ed97 6b18 	vldr	d6, [r7, #96]	@ 0x60
 80074a8:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 80074ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80074b0:	ed87 7b18 	vstr	d7, [r7, #96]	@ 0x60
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < targ_width; i++) {
 80074b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074b6:	3301      	adds	r3, #1
 80074b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80074ba:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80074bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074be:	4413      	add	r3, r2
 80074c0:	2b27      	cmp	r3, #39	@ 0x27
 80074c2:	dc07      	bgt.n	80074d4 <mg_dtoa+0x4e4>
 80074c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074c8:	429a      	cmp	r2, r3
 80074ca:	dbc4      	blt.n	8007456 <mg_dtoa+0x466>
    }
  }

  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 80074cc:	e002      	b.n	80074d4 <mg_dtoa+0x4e4>
 80074ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074d0:	3b01      	subs	r3, #1
 80074d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00c      	beq.n	80074f4 <mg_dtoa+0x504>
 80074da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dd09      	ble.n	80074f4 <mg_dtoa+0x504>
 80074e0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80074e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074e4:	4413      	add	r3, r2
 80074e6:	3b01      	subs	r3, #1
 80074e8:	3378      	adds	r3, #120	@ 0x78
 80074ea:	443b      	add	r3, r7
 80074ec:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 80074f0:	2b30      	cmp	r3, #48	@ 0x30
 80074f2:	d0ec      	beq.n	80074ce <mg_dtoa+0x4de>
  if (tz && n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00f      	beq.n	800751a <mg_dtoa+0x52a>
 80074fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	dd0c      	ble.n	800751a <mg_dtoa+0x52a>
 8007500:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007504:	4413      	add	r3, r2
 8007506:	3b01      	subs	r3, #1
 8007508:	3378      	adds	r3, #120	@ 0x78
 800750a:	443b      	add	r3, r7
 800750c:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8007510:	2b2e      	cmp	r3, #46	@ 0x2e
 8007512:	d102      	bne.n	800751a <mg_dtoa+0x52a>
 8007514:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007516:	3b01      	subs	r3, #1
 8007518:	66fb      	str	r3, [r7, #108]	@ 0x6c
  n += s;
 800751a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800751c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800751e:	4413      	add	r3, r2
 8007520:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 8007522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007524:	2b27      	cmp	r3, #39	@ 0x27
 8007526:	dd01      	ble.n	800752c <mg_dtoa+0x53c>
 8007528:	2327      	movs	r3, #39	@ 0x27
 800752a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  buf[n] = '\0';
 800752c:	f107 0218 	add.w	r2, r7, #24
 8007530:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007532:	4413      	add	r3, r2
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 8007538:	f107 0318 	add.w	r3, r7, #24
 800753c:	4a04      	ldr	r2, [pc, #16]	@ (8007550 <mg_dtoa+0x560>)
 800753e:	6939      	ldr	r1, [r7, #16]
 8007540:	6978      	ldr	r0, [r7, #20]
 8007542:	f009 f9fd 	bl	8010940 <mg_snprintf>
 8007546:	4603      	mov	r3, r0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3778      	adds	r7, #120	@ 0x78
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	08024744 	.word	0x08024744
 8007554:	9999999a 	.word	0x9999999a
 8007558:	3fb99999 	.word	0x3fb99999

0800755c <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 800755c:	b5b0      	push	{r4, r5, r7, lr}
 800755e:	b08c      	sub	sp, #48	@ 0x30
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8007568:	4b53      	ldr	r3, [pc, #332]	@ (80076b8 <mg_lld+0x15c>)
 800756a:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 800756c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007570:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  size_t s = 0, n, i;
 8007574:	2300      	movs	r3, #0
 8007576:	627b      	str	r3, [r7, #36]	@ 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8007578:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800757c:	2b00      	cmp	r3, #0
 800757e:	d012      	beq.n	80075a6 <mg_lld+0x4a>
 8007580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007584:	2b00      	cmp	r3, #0
 8007586:	da0e      	bge.n	80075a6 <mg_lld+0x4a>
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	627a      	str	r2, [r7, #36]	@ 0x24
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	222d      	movs	r2, #45	@ 0x2d
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800759a:	2100      	movs	r1, #0
 800759c:	4254      	negs	r4, r2
 800759e:	eb61 0503 	sbc.w	r5, r1, r3
 80075a2:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 80075a6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d021      	beq.n	80075f2 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 80075ae:	2300      	movs	r3, #0
 80075b0:	623b      	str	r3, [r7, #32]
 80075b2:	e019      	b.n	80075e8 <mg_lld+0x8c>
 80075b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b6:	f003 030f 	and.w	r3, r3, #15
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	441a      	add	r2, r3
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	1c59      	adds	r1, r3, #1
 80075c2:	6239      	str	r1, [r7, #32]
 80075c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80075c6:	440b      	add	r3, r1
 80075c8:	68f9      	ldr	r1, [r7, #12]
 80075ca:	440b      	add	r3, r1
 80075cc:	7812      	ldrb	r2, [r2, #0]
 80075ce:	701a      	strb	r2, [r3, #0]
 80075d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	0902      	lsrs	r2, r0, #4
 80075de:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80075e2:	090b      	lsrs	r3, r1, #4
 80075e4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80075e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075ec:	4313      	orrs	r3, r2
 80075ee:	d1e1      	bne.n	80075b4 <mg_lld+0x58>
 80075f0:	e025      	b.n	800763e <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80075f2:	2300      	movs	r3, #0
 80075f4:	623b      	str	r3, [r7, #32]
 80075f6:	e01e      	b.n	8007636 <mg_lld+0xda>
 80075f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80075fc:	f04f 020a 	mov.w	r2, #10
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	f7f8 feec 	bl	80003e0 <__aeabi_uldivmod>
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	441a      	add	r2, r3
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	1c59      	adds	r1, r3, #1
 8007610:	6239      	str	r1, [r7, #32]
 8007612:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007614:	440b      	add	r3, r1
 8007616:	68f9      	ldr	r1, [r7, #12]
 8007618:	440b      	add	r3, r1
 800761a:	7812      	ldrb	r2, [r2, #0]
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007622:	f04f 020a 	mov.w	r2, #10
 8007626:	f04f 0300 	mov.w	r3, #0
 800762a:	f7f8 fed9 	bl	80003e0 <__aeabi_uldivmod>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 8007636:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800763a:	4313      	orrs	r3, r2
 800763c:	d1dc      	bne.n	80075f8 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 800763e:	2300      	movs	r3, #0
 8007640:	61fb      	str	r3, [r7, #28]
 8007642:	e022      	b.n	800768a <mg_lld+0x12e>
    char t = buf[s + i];
 8007644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	4413      	add	r3, r2
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8007652:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	441a      	add	r2, r3
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	1ad3      	subs	r3, r2, r3
 800765c:	3b01      	subs	r3, #1
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	441a      	add	r2, r3
 8007662:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	440b      	add	r3, r1
 8007668:	68f9      	ldr	r1, [r7, #12]
 800766a:	440b      	add	r3, r1
 800766c:	7812      	ldrb	r2, [r2, #0]
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007672:	6a3b      	ldr	r3, [r7, #32]
 8007674:	441a      	add	r2, r3
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	7dfa      	ldrb	r2, [r7, #23]
 8007682:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	3301      	adds	r3, #1
 8007688:	61fb      	str	r3, [r7, #28]
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	085b      	lsrs	r3, r3, #1
 800768e:	69fa      	ldr	r2, [r7, #28]
 8007690:	429a      	cmp	r2, r3
 8007692:	d3d7      	bcc.n	8007644 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8007694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007698:	4313      	orrs	r3, r2
 800769a:	d106      	bne.n	80076aa <mg_lld+0x14e>
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	623a      	str	r2, [r7, #32]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4413      	add	r3, r2
 80076a6:	2230      	movs	r2, #48	@ 0x30
 80076a8:	701a      	strb	r2, [r3, #0]
  return n + s;
 80076aa:	6a3a      	ldr	r2, [r7, #32]
 80076ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ae:	4413      	add	r3, r2
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3730      	adds	r7, #48	@ 0x30
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bdb0      	pop	{r4, r5, r7, pc}
 80076b8:	08024760 	.word	0x08024760

080076bc <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 80076ce:	e009      	b.n	80076e4 <scpy+0x28>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	617a      	str	r2, [r7, #20]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	4413      	add	r3, r2
 80076da:	781a      	ldrb	r2, [r3, #0]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	68b9      	ldr	r1, [r7, #8]
 80076e0:	4610      	mov	r0, r2
 80076e2:	4798      	blx	r3
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d205      	bcs.n	80076f8 <scpy+0x3c>
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	4413      	add	r3, r2
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1eb      	bne.n	80076d0 <scpy+0x14>
  return i;
 80076f8:	697b      	ldr	r3, [r7, #20]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8007702:	b40c      	push	{r2, r3}
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8007712:	f107 031c 	add.w	r3, r7, #28
 8007716:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8007718:	f107 0308 	add.w	r3, r7, #8
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f809 	bl	8007738 <mg_vxprintf>
 8007726:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8007728:	68fb      	ldr	r3, [r7, #12]
}
 800772a:	4618      	mov	r0, r3
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007734:	b002      	add	sp, #8
 8007736:	4770      	bx	lr

08007738 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8007738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800773c:	b0a6      	sub	sp, #152	@ 0x98
 800773e:	af02      	add	r7, sp, #8
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
 8007746:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  while (fmt[i] != '\0') {
 8007754:	e383      	b.n	8007e5e <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800775c:	4413      	add	r3, r2
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b25      	cmp	r3, #37	@ 0x25
 8007762:	f040 8369 	bne.w	8007e38 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8007766:	2300      	movs	r3, #0
 8007768:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800776a:	2300      	movs	r3, #0
 800776c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800776e:	2300      	movs	r3, #0
 8007770:	677b      	str	r3, [r7, #116]	@ 0x74
 8007772:	f04f 33ff 	mov.w	r3, #4294967295
 8007776:	673b      	str	r3, [r7, #112]	@ 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8007778:	2320      	movs	r3, #32
 800777a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800777e:	2300      	movs	r3, #0
 8007780:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8007784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007788:	3301      	adds	r3, #1
 800778a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007794:	4413      	add	r3, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '#') x++, c = fmt[++i];
 800779c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077a0:	2b23      	cmp	r3, #35	@ 0x23
 80077a2:	d10e      	bne.n	80077c2 <mg_vxprintf+0x8a>
 80077a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80077a6:	3301      	adds	r3, #1
 80077a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077ae:	3301      	adds	r3, #1
 80077b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077ba:	4413      	add	r3, r2
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '-') minus++, c = fmt[++i];
 80077c2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077c6:	2b2d      	cmp	r3, #45	@ 0x2d
 80077c8:	d110      	bne.n	80077ec <mg_vxprintf+0xb4>
 80077ca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80077ce:	3301      	adds	r3, #1
 80077d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80077d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077d8:	3301      	adds	r3, #1
 80077da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077e4:	4413      	add	r3, r2
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 80077ec:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80077f0:	2b30      	cmp	r3, #48	@ 0x30
 80077f2:	d127      	bne.n	8007844 <mg_vxprintf+0x10c>
 80077f4:	2330      	movs	r3, #48	@ 0x30
 80077f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80077fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077fe:	3301      	adds	r3, #1
 8007800:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800780a:	4413      	add	r3, r2
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8007812:	e017      	b.n	8007844 <mg_vxprintf+0x10c>
 8007814:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	005b      	lsls	r3, r3, #1
 800781e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007820:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8007824:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007826:	4413      	add	r3, r2
 8007828:	3b30      	subs	r3, #48	@ 0x30
 800782a:	677b      	str	r3, [r7, #116]	@ 0x74
 800782c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007830:	3301      	adds	r3, #1
 8007832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800783c:	4413      	add	r3, r2
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8007844:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff fae5 	bl	8006e18 <is_digit>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1df      	bne.n	8007814 <mg_vxprintf+0xdc>
      if (c == '.') {
 8007854:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007858:	2b2e      	cmp	r3, #46	@ 0x2e
 800785a:	d153      	bne.n	8007904 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 800785c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007860:	3301      	adds	r3, #1
 8007862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800786c:	4413      	add	r3, r2
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == '*') {
 8007874:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007878:	2b2a      	cmp	r3, #42	@ 0x2a
 800787a:	d113      	bne.n	80078a4 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	1d19      	adds	r1, r3, #4
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	6011      	str	r1, [r2, #0]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	673b      	str	r3, [r7, #112]	@ 0x70
          c = fmt[++i];
 800788a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800788e:	3301      	adds	r3, #1
 8007890:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800789a:	4413      	add	r3, r2
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80078a2:	e02f      	b.n	8007904 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	673b      	str	r3, [r7, #112]	@ 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 80078a8:	e017      	b.n	80078da <mg_vxprintf+0x1a2>
 80078aa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80078b6:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 80078ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078bc:	4413      	add	r3, r2
 80078be:	3b30      	subs	r3, #48	@ 0x30
 80078c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80078c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078c6:	3301      	adds	r3, #1
 80078c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078d2:	4413      	add	r3, r2
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80078da:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80078de:	4618      	mov	r0, r3
 80078e0:	f7ff fa9a 	bl	8006e18 <is_digit>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1df      	bne.n	80078aa <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 80078ea:	e00b      	b.n	8007904 <mg_vxprintf+0x1cc>
 80078ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078f0:	3301      	adds	r3, #1
 80078f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078fc:	4413      	add	r3, r2
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8007904:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007908:	2b68      	cmp	r3, #104	@ 0x68
 800790a:	d0ef      	beq.n	80078ec <mg_vxprintf+0x1b4>
      if (c == 'l') {
 800790c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007910:	2b6c      	cmp	r3, #108	@ 0x6c
 8007912:	d121      	bne.n	8007958 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8007914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007916:	3301      	adds	r3, #1
 8007918:	67bb      	str	r3, [r7, #120]	@ 0x78
 800791a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800791e:	3301      	adds	r3, #1
 8007920:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800792a:	4413      	add	r3, r2
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8007932:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007936:	2b6c      	cmp	r3, #108	@ 0x6c
 8007938:	d10e      	bne.n	8007958 <mg_vxprintf+0x220>
 800793a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800793c:	3301      	adds	r3, #1
 800793e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007940:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007944:	3301      	adds	r3, #1
 8007946:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007950:	4413      	add	r3, r2
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8007958:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800795c:	2b70      	cmp	r3, #112	@ 0x70
 800795e:	d103      	bne.n	8007968 <mg_vxprintf+0x230>
 8007960:	2301      	movs	r3, #1
 8007962:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007964:	2301      	movs	r3, #1
 8007966:	67bb      	str	r3, [r7, #120]	@ 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8007968:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800796c:	2b64      	cmp	r3, #100	@ 0x64
 800796e:	d018      	beq.n	80079a2 <mg_vxprintf+0x26a>
 8007970:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007974:	2b75      	cmp	r3, #117	@ 0x75
 8007976:	d014      	beq.n	80079a2 <mg_vxprintf+0x26a>
 8007978:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800797c:	2b78      	cmp	r3, #120	@ 0x78
 800797e:	d010      	beq.n	80079a2 <mg_vxprintf+0x26a>
 8007980:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007984:	2b58      	cmp	r3, #88	@ 0x58
 8007986:	d00c      	beq.n	80079a2 <mg_vxprintf+0x26a>
 8007988:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800798c:	2b70      	cmp	r3, #112	@ 0x70
 800798e:	d008      	beq.n	80079a2 <mg_vxprintf+0x26a>
 8007990:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007994:	2b67      	cmp	r3, #103	@ 0x67
 8007996:	d004      	beq.n	80079a2 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8007998:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800799c:	2b66      	cmp	r3, #102	@ 0x66
 800799e:	f040 816c 	bne.w	8007c7a <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 80079a2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80079a6:	2b64      	cmp	r3, #100	@ 0x64
 80079a8:	bf0c      	ite	eq
 80079aa:	2301      	moveq	r3, #1
 80079ac:	2300      	movne	r3, #0
 80079ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80079b2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80079b6:	2b78      	cmp	r3, #120	@ 0x78
 80079b8:	d007      	beq.n	80079ca <mg_vxprintf+0x292>
 80079ba:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80079be:	2b58      	cmp	r3, #88	@ 0x58
 80079c0:	d003      	beq.n	80079ca <mg_vxprintf+0x292>
 80079c2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80079c6:	2b70      	cmp	r3, #112	@ 0x70
 80079c8:	d101      	bne.n	80079ce <mg_vxprintf+0x296>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e000      	b.n	80079d0 <mg_vxprintf+0x298>
 80079ce:	2300      	movs	r3, #0
 80079d0:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 80079d4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 80079e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <mg_vxprintf+0x2b2>
 80079e6:	2302      	movs	r3, #2
 80079e8:	e000      	b.n	80079ec <mg_vxprintf+0x2b4>
 80079ea:	2300      	movs	r3, #0
 80079ec:	65bb      	str	r3, [r7, #88]	@ 0x58
        if (c == 'g' || c == 'f') {
 80079ee:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80079f2:	2b67      	cmp	r3, #103	@ 0x67
 80079f4:	d003      	beq.n	80079fe <mg_vxprintf+0x2c6>
 80079f6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80079fa:	2b66      	cmp	r3, #102	@ 0x66
 80079fc:	d124      	bne.n	8007a48 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3307      	adds	r3, #7
 8007a04:	f023 0307 	bic.w	r3, r3, #7
 8007a08:	f103 0108 	add.w	r1, r3, #8
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	6011      	str	r1, [r2, #0]
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
          if (pr == ~0U) pr = 6;
 8007a18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1e:	d101      	bne.n	8007a24 <mg_vxprintf+0x2ec>
 8007a20:	2306      	movs	r3, #6
 8007a22:	673b      	str	r3, [r7, #112]	@ 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8007a24:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007a26:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007a2a:	2b67      	cmp	r3, #103	@ 0x67
 8007a2c:	bf0c      	ite	eq
 8007a2e:	2301      	moveq	r3, #1
 8007a30:	2300      	movne	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	f107 0014 	add.w	r0, r7, #20
 8007a38:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8007a3c:	2128      	movs	r1, #40	@ 0x28
 8007a3e:	f7ff fad7 	bl	8006ff0 <mg_dtoa>
 8007a42:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        if (c == 'g' || c == 'f') {
 8007a46:	e069      	b.n	8007b1c <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8007a48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d11c      	bne.n	8007a88 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	3307      	adds	r3, #7
 8007a54:	f023 0307 	bic.w	r3, r3, #7
 8007a58:	f103 0108 	add.w	r1, r3, #8
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	6011      	str	r1, [r2, #0]
 8007a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a64:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
          k = mg_lld(tmp, v, s, h);
 8007a68:	f107 0114 	add.w	r1, r7, #20
 8007a6c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007a70:	9301      	str	r3, [sp, #4]
 8007a72:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007a7c:	4608      	mov	r0, r1
 8007a7e:	f7ff fd6d 	bl	800755c <mg_lld>
 8007a82:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8007a86:	e049      	b.n	8007b1c <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8007a88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d123      	bne.n	8007ad6 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	1d19      	adds	r1, r3, #4
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	6011      	str	r1, [r2, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	653b      	str	r3, [r7, #80]	@ 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8007a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <mg_vxprintf+0x376>
 8007aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007aa6:	17da      	asrs	r2, r3, #31
 8007aa8:	461c      	mov	r4, r3
 8007aaa:	4615      	mov	r5, r2
 8007aac:	e003      	b.n	8007ab6 <mg_vxprintf+0x37e>
 8007aae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	461c      	mov	r4, r3
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	f107 0114 	add.w	r1, r7, #20
 8007aba:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	4622      	mov	r2, r4
 8007ac8:	462b      	mov	r3, r5
 8007aca:	4608      	mov	r0, r1
 8007acc:	f7ff fd46 	bl	800755c <mg_lld>
 8007ad0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8007ad4:	e022      	b.n	8007b1c <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	1d19      	adds	r1, r3, #4
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	6011      	str	r1, [r2, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	657b      	str	r3, [r7, #84]	@ 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8007ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <mg_vxprintf+0x3be>
 8007aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aee:	17da      	asrs	r2, r3, #31
 8007af0:	4698      	mov	r8, r3
 8007af2:	4691      	mov	r9, r2
 8007af4:	e003      	b.n	8007afe <mg_vxprintf+0x3c6>
 8007af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af8:	2200      	movs	r2, #0
 8007afa:	4698      	mov	r8, r3
 8007afc:	4691      	mov	r9, r2
 8007afe:	f107 0114 	add.w	r1, r7, #20
 8007b02:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	4642      	mov	r2, r8
 8007b10:	464b      	mov	r3, r9
 8007b12:	4608      	mov	r0, r1
 8007b14:	f7ff fd22 	bl	800755c <mg_lld>
 8007b18:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b22:	e007      	b.n	8007b34 <mg_vxprintf+0x3fc>
 8007b24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b26:	3b01      	subs	r3, #1
 8007b28:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b2e:	3301      	adds	r3, #1
 8007b30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b34:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007b38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d202      	bcs.n	8007b44 <mg_vxprintf+0x40c>
 8007b3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1ef      	bne.n	8007b24 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8007b44:	2300      	movs	r3, #0
 8007b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b4a:	e011      	b.n	8007b70 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8007b4c:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007b50:	2301      	movs	r3, #1
 8007b52:	68b9      	ldr	r1, [r7, #8]
 8007b54:	68f8      	ldr	r0, [r7, #12]
 8007b56:	f7ff fdb1 	bl	80076bc <scpy>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b60:	4413      	add	r3, r2
 8007b62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8007b66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d110      	bne.n	8007b9a <mg_vxprintf+0x462>
 8007b78:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10c      	bne.n	8007b9a <mg_vxprintf+0x462>
 8007b80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d207      	bcs.n	8007b9a <mg_vxprintf+0x462>
 8007b8a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007b8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b92:	4413      	add	r3, r2
 8007b94:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d8d8      	bhi.n	8007b4c <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8007b9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b9c:	4ab7      	ldr	r2, [pc, #732]	@ (8007e7c <mg_vxprintf+0x744>)
 8007b9e:	68b9      	ldr	r1, [r7, #8]
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f7ff fd8b 	bl	80076bc <scpy>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bac:	4413      	add	r3, r2
 8007bae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bb8:	e011      	b.n	8007bde <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8007bba:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	68b9      	ldr	r1, [r7, #8]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7ff fd7a 	bl	80076bc <scpy>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007bce:	4413      	add	r3, r2
 8007bd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8007bd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007bd8:	3301      	adds	r3, #1
 8007bda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bde:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007be2:	2b30      	cmp	r3, #48	@ 0x30
 8007be4:	d10c      	bne.n	8007c00 <mg_vxprintf+0x4c8>
 8007be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d207      	bcs.n	8007c00 <mg_vxprintf+0x4c8>
 8007bf0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007bf8:	4413      	add	r3, r2
 8007bfa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d8dc      	bhi.n	8007bba <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8007c00:	f107 0214 	add.w	r2, r7, #20
 8007c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c08:	68b9      	ldr	r1, [r7, #8]
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff fd56 	bl	80076bc <scpy>
 8007c10:	4602      	mov	r2, r0
 8007c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c16:	4413      	add	r3, r2
 8007c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c22:	e011      	b.n	8007c48 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8007c24:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007c28:	2301      	movs	r3, #1
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f7ff fd45 	bl	80076bc <scpy>
 8007c32:	4602      	mov	r2, r0
 8007c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c38:	4413      	add	r3, r2
 8007c3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8007c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c42:	3301      	adds	r3, #1
 8007c44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c48:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	f040 80ea 	bne.w	8007e26 <mg_vxprintf+0x6ee>
 8007c52:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80e5 	beq.w	8007e26 <mg_vxprintf+0x6ee>
 8007c5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c62:	429a      	cmp	r2, r3
 8007c64:	f080 80df 	bcs.w	8007e26 <mg_vxprintf+0x6ee>
 8007c68:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007c6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007c70:	4413      	add	r3, r2
 8007c72:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d8d5      	bhi.n	8007c24 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8007c78:	e0d5      	b.n	8007e26 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8007c7a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c7e:	2b6d      	cmp	r3, #109	@ 0x6d
 8007c80:	d003      	beq.n	8007c8a <mg_vxprintf+0x552>
 8007c82:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c86:	2b4d      	cmp	r3, #77	@ 0x4d
 8007c88:	d128      	bne.n	8007cdc <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	1d19      	adds	r1, r3, #4
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	6011      	str	r1, [r2, #0]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	663b      	str	r3, [r7, #96]	@ 0x60
        if (c == 'm') out('"', param);
 8007c98:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007c9c:	2b6d      	cmp	r3, #109	@ 0x6d
 8007c9e:	d103      	bne.n	8007ca8 <mg_vxprintf+0x570>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	68b9      	ldr	r1, [r7, #8]
 8007ca4:	2022      	movs	r0, #34	@ 0x22
 8007ca6:	4798      	blx	r3
        n += f(out, param, ap);
 8007ca8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	68b9      	ldr	r1, [r7, #8]
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	4798      	blx	r3
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007cb8:	4413      	add	r3, r2
 8007cba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        if (c == 'm') n += 2, out('"', param);
 8007cbe:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007cc2:	2b6d      	cmp	r3, #109	@ 0x6d
 8007cc4:	f040 80b1 	bne.w	8007e2a <mg_vxprintf+0x6f2>
 8007cc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ccc:	3302      	adds	r3, #2
 8007cce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	2022      	movs	r0, #34	@ 0x22
 8007cd8:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8007cda:	e0a6      	b.n	8007e2a <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8007cdc:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ce0:	2b63      	cmp	r3, #99	@ 0x63
 8007ce2:	d112      	bne.n	8007d0a <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	1d19      	adds	r1, r3, #4
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	6011      	str	r1, [r2, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	667b      	str	r3, [r7, #100]	@ 0x64
        out((char) ch, param);
 8007cf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4798      	blx	r3
        n++;
 8007cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d02:	3301      	adds	r3, #1
 8007d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d08:	e090      	b.n	8007e2c <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8007d0a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007d0e:	2b73      	cmp	r3, #115	@ 0x73
 8007d10:	d16b      	bne.n	8007dea <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	1d19      	adds	r1, r3, #4
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	6011      	str	r1, [r2, #0]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	66bb      	str	r3, [r7, #104]	@ 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8007d20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d26:	d109      	bne.n	8007d3c <mg_vxprintf+0x604>
 8007d28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <mg_vxprintf+0x600>
 8007d2e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8007d30:	f7f8 fb4e 	bl	80003d0 <strlen>
 8007d34:	4603      	mov	r3, r0
 8007d36:	e000      	b.n	8007d3a <mg_vxprintf+0x602>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	673b      	str	r3, [r7, #112]	@ 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d42:	e011      	b.n	8007d68 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8007d44:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007d48:	2301      	movs	r3, #1
 8007d4a:	68b9      	ldr	r1, [r7, #8]
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fcb5 	bl	80076bc <scpy>
 8007d52:	4602      	mov	r2, r0
 8007d54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d58:	4413      	add	r3, r2
 8007d5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8007d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d62:	3301      	adds	r3, #1
 8007d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d68:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <mg_vxprintf+0x64e>
 8007d70:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007d72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d206      	bcs.n	8007d86 <mg_vxprintf+0x64e>
 8007d78:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007d7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d7e:	4413      	add	r3, r2
 8007d80:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d8de      	bhi.n	8007d44 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8007d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007d88:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fc95 	bl	80076bc <scpy>
 8007d92:	4602      	mov	r2, r0
 8007d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007d98:	4413      	add	r3, r2
 8007d9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007da4:	e011      	b.n	8007dca <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8007da6:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8007daa:	2301      	movs	r3, #1
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f7ff fc84 	bl	80076bc <scpy>
 8007db4:	4602      	mov	r2, r0
 8007db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007dba:	4413      	add	r3, r2
 8007dbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8007dc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007dca:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d02c      	beq.n	8007e2c <mg_vxprintf+0x6f4>
 8007dd2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007dd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d228      	bcs.n	8007e2c <mg_vxprintf+0x6f4>
 8007dda:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007dde:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007de0:	4413      	add	r3, r2
 8007de2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d8de      	bhi.n	8007da6 <mg_vxprintf+0x66e>
 8007de8:	e020      	b.n	8007e2c <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 8007dea:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007dee:	2b25      	cmp	r3, #37	@ 0x25
 8007df0:	d109      	bne.n	8007e06 <mg_vxprintf+0x6ce>
        out('%', param);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	2025      	movs	r0, #37	@ 0x25
 8007df8:	4798      	blx	r3
        n++;
 8007dfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007dfe:	3301      	adds	r3, #1
 8007e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e04:	e012      	b.n	8007e2c <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	2025      	movs	r0, #37	@ 0x25
 8007e0c:	4798      	blx	r3
        out(c, param);
 8007e0e:	f897 206e 	ldrb.w	r2, [r7, #110]	@ 0x6e
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	68b9      	ldr	r1, [r7, #8]
 8007e16:	4610      	mov	r0, r2
 8007e18:	4798      	blx	r3
        n += 2;
 8007e1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e1e:	3302      	adds	r3, #2
 8007e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e24:	e002      	b.n	8007e2c <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 8007e26:	bf00      	nop
 8007e28:	e000      	b.n	8007e2c <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 8007e2a:	bf00      	nop
      }
      i++;
 8007e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e30:	3301      	adds	r3, #1
 8007e32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e36:	e012      	b.n	8007e5e <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e3e:	4413      	add	r3, r2
 8007e40:	781a      	ldrb	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	68b9      	ldr	r1, [r7, #8]
 8007e46:	4610      	mov	r0, r2
 8007e48:	4798      	blx	r3
 8007e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e4e:	3301      	adds	r3, #1
 8007e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e58:	3301      	adds	r3, #1
 8007e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  while (fmt[i] != '\0') {
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e64:	4413      	add	r3, r2
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f47f ac74 	bne.w	8007756 <mg_vxprintf+0x1e>
    }
  }
  return n;
 8007e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3790      	adds	r7, #144	@ 0x90
 8007e76:	46bd      	mov	sp, r7
 8007e78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007e7c:	08024774 	.word	0x08024774

08007e80 <mg_fs_open>:
#endif




struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b086      	sub	sp, #24
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8007e8c:	2108      	movs	r1, #8
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f01b f9b0 	bl	80231f4 <calloc>
 8007e94:	4603      	mov	r3, r0
 8007e96:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d013      	beq.n	8007ec6 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	68b8      	ldr	r0, [r7, #8]
 8007ea6:	4798      	blx	r3
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <mg_fs_open+0x46>
      free(fd);
 8007ebc:	6978      	ldr	r0, [r7, #20]
 8007ebe:	f01b f9bd 	bl	802323c <free>
      fd = NULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8007ec6:	697b      	ldr	r3, [r7, #20]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4798      	blx	r3
    free(fd);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f01b f9a5 	bl	802323c <free>
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <is_dir_prefix>:
  size_t len = 0;
  const char *buf = mg_unpack(path, &len, NULL);
  return mg_str_n(buf, len);
}

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b084      	sub	sp, #16
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	60f8      	str	r0, [r7, #12]
 8007f02:	60b9      	str	r1, [r7, #8]
 8007f04:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7f8 fa62 	bl	80003d0 <strlen>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d219      	bcs.n	8007f48 <is_dir_prefix+0x4e>
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f01b fc55 	bl	80237c8 <strncmp>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d111      	bne.n	8007f48 <is_dir_prefix+0x4e>
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00c      	beq.n	8007f44 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4413      	add	r3, r2
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b2f      	cmp	r3, #47	@ 0x2f
 8007f34:	d006      	beq.n	8007f44 <is_dir_prefix+0x4a>
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b2f      	cmp	r3, #47	@ 0x2f
 8007f42:	d101      	bne.n	8007f48 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8007f44:	2301      	movs	r3, #1
 8007f46:	e000      	b.n	8007f4a <is_dir_prefix+0x50>
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b088      	sub	sp, #32
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7f8 fa36 	bl	80003d0 <strlen>
 8007f64:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	68b9      	ldr	r1, [r7, #8]
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f018 fe62 	bl	8020c34 <mg_unpack>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <packed_stat+0x28>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e017      	b.n	8007faa <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	e00c      	b.n	8007f9a <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	69b9      	ldr	r1, [r7, #24]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f7ff ffb8 	bl	8007efa <is_dir_prefix>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <packed_stat+0x42>
 8007f90:	2304      	movs	r3, #4
 8007f92:	e00a      	b.n	8007faa <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	3301      	adds	r3, #1
 8007f98:	61fb      	str	r3, [r7, #28]
 8007f9a:	69f8      	ldr	r0, [r7, #28]
 8007f9c:	f018 fe36 	bl	8020c0c <mg_unlist>
 8007fa0:	6178      	str	r0, [r7, #20]
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1eb      	bne.n	8007f80 <packed_stat+0x2e>
  }
  return 0;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b0be      	sub	sp, #248	@ 0xf8
 8007fb8:	af02      	add	r7, sp, #8
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f7f8 fa05 	bl	80003d0 <strlen>
 8007fc6:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
  tmp[0] = '\0';  // Previously listed entry
 8007fca:	2300      	movs	r3, #0
 8007fcc:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8007fce:	2300      	movs	r3, #0
 8007fd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fd4:	e05a      	b.n	800808c <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 8007fd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007fda:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f7ff ff8b 	bl	8007efa <is_dir_prefix>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d048      	beq.n	800807c <packed_list+0xc8>
    begin = &path[n + 1];
 8007fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fee:	3301      	adds	r3, #1
 8007ff0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    end = strchr(begin, '/');
 8007ffa:	212f      	movs	r1, #47	@ 0x2f
 8007ffc:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8008000:	f01b fbd5 	bl	80237ae <strchr>
 8008004:	f8c7 00ec 	str.w	r0, [r7, #236]	@ 0xec
    if (end == NULL) end = begin + strlen(begin);
 8008008:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800800c:	2b00      	cmp	r3, #0
 800800e:	d109      	bne.n	8008024 <packed_list+0x70>
 8008010:	f8d7 00dc 	ldr.w	r0, [r7, #220]	@ 0xdc
 8008014:	f7f8 f9dc 	bl	80003d0 <strlen>
 8008018:	4602      	mov	r2, r0
 800801a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800801e:	4413      	add	r3, r2
 8008020:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 8008024:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8008028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800802c:	1ad2      	subs	r2, r2, r3
 800802e:	f107 0078 	add.w	r0, r7, #120	@ 0x78
 8008032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	4613      	mov	r3, r2
 800803a:	4a1c      	ldr	r2, [pc, #112]	@ (80080ac <packed_list+0xf8>)
 800803c:	2164      	movs	r1, #100	@ 0x64
 800803e:	f008 fc7f 	bl	8010940 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 8008042:	2300      	movs	r3, #0
 8008044:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8008048:	f107 0214 	add.w	r2, r7, #20
 800804c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8008050:	4611      	mov	r1, r2
 8008052:	4618      	mov	r0, r3
 8008054:	f7f8 f95c 	bl	8000310 <strcmp>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d010      	beq.n	8008080 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 800805e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	4610      	mov	r0, r2
 8008068:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 800806a:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800806e:	f107 0314 	add.w	r3, r7, #20
 8008072:	4611      	mov	r1, r2
 8008074:	4618      	mov	r0, r3
 8008076:	f01b fcc0 	bl	80239fa <strcpy>
 800807a:	e002      	b.n	8008082 <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 800807c:	bf00      	nop
 800807e:	e000      	b.n	8008082 <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8008080:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8008082:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008086:	3301      	adds	r3, #1
 8008088:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800808c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8008090:	f018 fdbc 	bl	8020c0c <mg_unlist>
 8008094:	f8c7 00e0 	str.w	r0, [r7, #224]	@ 0xe0
 8008098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800809c:	2b00      	cmp	r3, #0
 800809e:	d19a      	bne.n	8007fd6 <packed_list+0x22>
  }
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	37f0      	adds	r7, #240	@ 0xf0
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	08024758 	.word	0x08024758

080080b0 <packed_open>:

static void *packed_open(const char *path, int flags) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 80080be:	f107 030c 	add.w	r3, r7, #12
 80080c2:	2200      	movs	r2, #0
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f018 fdb4 	bl	8020c34 <mg_unpack>
 80080cc:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 80080ce:	2300      	movs	r3, #0
 80080d0:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <packed_open+0x2c>
 80080d8:	2300      	movs	r3, #0
 80080da:	e016      	b.n	800810a <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f003 0302 	and.w	r3, r3, #2
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <packed_open+0x3a>
 80080e6:	2300      	movs	r3, #0
 80080e8:	e00f      	b.n	800810a <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 80080ea:	210c      	movs	r1, #12
 80080ec:	2001      	movs	r0, #1
 80080ee:	f01b f881 	bl	80231f4 <calloc>
 80080f2:	4603      	mov	r3, r0
 80080f4:	613b      	str	r3, [r7, #16]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d005      	beq.n	8008108 <packed_open+0x58>
    fp->size = size;
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8008108:	693b      	ldr	r3, [r7, #16]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <packed_close>:

static void packed_close(void *fp) {
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <packed_close+0x14>
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f01b f88b 	bl	802323c <free>
}
 8008126:	bf00      	nop
 8008128:	3708      	adds	r7, #8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 800812e:	b580      	push	{r7, lr}
 8008130:	b086      	sub	sp, #24
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	441a      	add	r2, r3
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	429a      	cmp	r2, r3
 800814c:	d905      	bls.n	800815a <packed_read+0x2c>
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	685a      	ldr	r2, [r3, #4]
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	4413      	add	r3, r2
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	4619      	mov	r1, r3
 8008168:	68b8      	ldr	r0, [r7, #8]
 800816a:	f01b fc4e 	bl	8023a0a <memcpy>
  fp->pos += len;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	441a      	add	r2, r3
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	609a      	str	r2, [r3, #8]
  return len;
 800817a:	687b      	ldr	r3, [r7, #4]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	683a      	ldr	r2, [r7, #0]
 80081b0:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d903      	bls.n	80081c6 <packed_seek+0x28>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	685a      	ldr	r2, [r3, #4]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	609a      	str	r2, [r3, #8]
  return fp->pos;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	370c      	adds	r7, #12
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <packed_remove>:

static bool packed_remove(const char *path) {
 80081ee:	b480      	push	{r7}
 80081f0:	b083      	sub	sp, #12
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 800821a:	b480      	push	{r7}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	60f8      	str	r0, [r7, #12]
 8008222:	60b9      	str	r1, [r7, #8]
 8008224:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 8008234:	b480      	push	{r7}
 8008236:	b085      	sub	sp, #20
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 8008240:	bf00      	nop
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <p_open>:
static void *p_open(const char *path, int flags) {
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <p_close>:
static void p_close(void *fp) {
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3714      	adds	r7, #20
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr

08008292 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8008292:	b480      	push	{r7}
 8008294:	b085      	sub	sp, #20
 8008296:	af00      	add	r7, sp, #0
 8008298:	60f8      	str	r0, [r7, #12]
 800829a:	60b9      	str	r1, [r7, #8]
 800829c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800829e:	2300      	movs	r3, #0
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 80082b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 80082c6:	b480      	push	{r7}
 80082c8:	b083      	sub	sp, #12
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <p_remove>:
static bool p_remove(const char *path) {
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <p_mkdir>:
static bool p_mkdir(const char *path) {
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <mg_ncasecmp>:





static int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 800830a:	b480      	push	{r7}
 800830c:	b089      	sub	sp, #36	@ 0x24
 800830e:	af00      	add	r7, sp, #0
 8008310:	60f8      	str	r0, [r7, #12]
 8008312:	60b9      	str	r1, [r7, #8]
 8008314:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	61fb      	str	r3, [r7, #28]
  if (len > 0) do {
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d02d      	beq.n	800837c <mg_ncasecmp+0x72>
      int c = *s1++, d = *s2++;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	60fa      	str	r2, [r7, #12]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	61bb      	str	r3, [r7, #24]
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	60ba      	str	r2, [r7, #8]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	617b      	str	r3, [r7, #20]
      if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	2b40      	cmp	r3, #64	@ 0x40
 8008338:	dd05      	ble.n	8008346 <mg_ncasecmp+0x3c>
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b5a      	cmp	r3, #90	@ 0x5a
 800833e:	dc02      	bgt.n	8008346 <mg_ncasecmp+0x3c>
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	3320      	adds	r3, #32
 8008344:	61bb      	str	r3, [r7, #24]
      if (d >= 'A' && d <= 'Z') d += 'a' - 'A';
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b40      	cmp	r3, #64	@ 0x40
 800834a:	dd05      	ble.n	8008358 <mg_ncasecmp+0x4e>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008350:	dc02      	bgt.n	8008358 <mg_ncasecmp+0x4e>
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	3320      	adds	r3, #32
 8008356:	617b      	str	r3, [r7, #20]
      diff = c - d;
 8008358:	69ba      	ldr	r2, [r7, #24]
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	61fb      	str	r3, [r7, #28]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <mg_ncasecmp+0x72>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3b01      	subs	r3, #1
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <mg_ncasecmp+0x72>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	3b01      	subs	r3, #1
 8008374:	607b      	str	r3, [r7, #4]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1d1      	bne.n	8008320 <mg_ncasecmp+0x16>
  return diff;
 800837c:	69fb      	ldr	r3, [r7, #28]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3724      	adds	r7, #36	@ 0x24
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
	...

0800838c <mg_to_size_t>:

bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 800838c:	b480      	push	{r7}
 800838e:	b08b      	sub	sp, #44	@ 0x2c
 8008390:	af00      	add	r7, sp, #0
 8008392:	f107 0308 	add.w	r3, r7, #8
 8008396:	e883 0003 	stmia.w	r3, {r0, r1}
 800839a:	607a      	str	r2, [r7, #4]
  size_t i = 0, max = (size_t) -1, max2 = max / 10, result = 0, ndigits = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	627b      	str	r3, [r7, #36]	@ 0x24
 80083a0:	f04f 33ff 	mov.w	r3, #4294967295
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	4a42      	ldr	r2, [pc, #264]	@ (80084b4 <mg_to_size_t+0x128>)
 80083aa:	fba2 2303 	umull	r2, r3, r2, r3
 80083ae:	08db      	lsrs	r3, r3, #3
 80083b0:	617b      	str	r3, [r7, #20]
 80083b2:	2300      	movs	r3, #0
 80083b4:	623b      	str	r3, [r7, #32]
 80083b6:	2300      	movs	r3, #0
 80083b8:	61fb      	str	r3, [r7, #28]
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 80083ba:	e002      	b.n	80083c2 <mg_to_size_t+0x36>
 80083bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083be:	3301      	adds	r3, #1
 80083c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d20b      	bcs.n	80083e2 <mg_to_size_t+0x56>
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ce:	4413      	add	r3, r2
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b20      	cmp	r3, #32
 80083d4:	d0f2      	beq.n	80083bc <mg_to_size_t+0x30>
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083da:	4413      	add	r3, r2
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b09      	cmp	r3, #9
 80083e0:	d0ec      	beq.n	80083bc <mg_to_size_t+0x30>
  if (i < str.len && str.buf[i] == '-') return false;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d22b      	bcs.n	8008442 <mg_to_size_t+0xb6>
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ee:	4413      	add	r3, r2
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80083f4:	d125      	bne.n	8008442 <mg_to_size_t+0xb6>
 80083f6:	2300      	movs	r3, #0
 80083f8:	e056      	b.n	80084a8 <mg_to_size_t+0x11c>
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
    size_t digit = (size_t) (str.buf[i] - '0');
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	4413      	add	r3, r2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	3b30      	subs	r3, #48	@ 0x30
 8008404:	613b      	str	r3, [r7, #16]
    if (result > max2) return false;  // Overflow
 8008406:	6a3a      	ldr	r2, [r7, #32]
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	429a      	cmp	r2, r3
 800840c:	d901      	bls.n	8008412 <mg_to_size_t+0x86>
 800840e:	2300      	movs	r3, #0
 8008410:	e04a      	b.n	80084a8 <mg_to_size_t+0x11c>
    result *= 10;
 8008412:	6a3a      	ldr	r2, [r7, #32]
 8008414:	4613      	mov	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	005b      	lsls	r3, r3, #1
 800841c:	623b      	str	r3, [r7, #32]
    if (result > max - digit) return false;  // Overflow
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	6a3a      	ldr	r2, [r7, #32]
 8008426:	429a      	cmp	r2, r3
 8008428:	d901      	bls.n	800842e <mg_to_size_t+0xa2>
 800842a:	2300      	movs	r3, #0
 800842c:	e03c      	b.n	80084a8 <mg_to_size_t+0x11c>
    result += digit;
 800842e:	6a3a      	ldr	r2, [r7, #32]
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	4413      	add	r3, r2
 8008434:	623b      	str	r3, [r7, #32]
    i++, ndigits++;
 8008436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008438:	3301      	adds	r3, #1
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	3301      	adds	r3, #1
 8008440:	61fb      	str	r3, [r7, #28]
  while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008446:	429a      	cmp	r2, r3
 8008448:	d20f      	bcs.n	800846a <mg_to_size_t+0xde>
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844e:	4413      	add	r3, r2
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b2f      	cmp	r3, #47	@ 0x2f
 8008454:	d909      	bls.n	800846a <mg_to_size_t+0xde>
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800845a:	4413      	add	r3, r2
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b39      	cmp	r3, #57	@ 0x39
 8008460:	d9cb      	bls.n	80083fa <mg_to_size_t+0x6e>
  }
  while (i < str.len && (str.buf[i] == ' ' || str.buf[i] == '\t')) i++;
 8008462:	e002      	b.n	800846a <mg_to_size_t+0xde>
 8008464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008466:	3301      	adds	r3, #1
 8008468:	627b      	str	r3, [r7, #36]	@ 0x24
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800846e:	429a      	cmp	r2, r3
 8008470:	d20b      	bcs.n	800848a <mg_to_size_t+0xfe>
 8008472:	68ba      	ldr	r2, [r7, #8]
 8008474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008476:	4413      	add	r3, r2
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b20      	cmp	r3, #32
 800847c:	d0f2      	beq.n	8008464 <mg_to_size_t+0xd8>
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	4413      	add	r3, r2
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b09      	cmp	r3, #9
 8008488:	d0ec      	beq.n	8008464 <mg_to_size_t+0xd8>
  if (ndigits == 0) return false;  // #2322: Content-Length = 1 * DIGIT
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <mg_to_size_t+0x108>
 8008490:	2300      	movs	r3, #0
 8008492:	e009      	b.n	80084a8 <mg_to_size_t+0x11c>
  if (i != str.len) return false;  // Ditto
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008498:	429a      	cmp	r2, r3
 800849a:	d001      	beq.n	80084a0 <mg_to_size_t+0x114>
 800849c:	2300      	movs	r3, #0
 800849e:	e003      	b.n	80084a8 <mg_to_size_t+0x11c>
  *val = (size_t) result;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a3a      	ldr	r2, [r7, #32]
 80084a4:	601a      	str	r2, [r3, #0]
  return true;
 80084a6:	2301      	movs	r3, #1
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	372c      	adds	r7, #44	@ 0x2c
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	cccccccd 	.word	0xcccccccd

080084b8 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80084b8:	b082      	sub	sp, #8
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b08e      	sub	sp, #56	@ 0x38
 80084be:	af02      	add	r7, sp, #8
 80084c0:	60f8      	str	r0, [r7, #12]
 80084c2:	1d38      	adds	r0, r7, #4
 80084c4:	e880 0006 	stmia.w	r0, {r1, r2}
 80084c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_str entry, k, v, result = mg_str_n(NULL, 0);
 80084ca:	f107 0310 	add.w	r3, r7, #16
 80084ce:	2200      	movs	r2, #0
 80084d0:	2100      	movs	r1, #0
 80084d2:	4618      	mov	r0, r3
 80084d4:	f00b fe17 	bl	8014106 <mg_str_n>
  while (mg_span(buf, &entry, &buf, '&')) {
 80084d8:	e023      	b.n	8008522 <mg_http_var+0x6a>
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 80084da:	f107 0318 	add.w	r3, r7, #24
 80084de:	f107 0220 	add.w	r2, r7, #32
 80084e2:	213d      	movs	r1, #61	@ 0x3d
 80084e4:	9100      	str	r1, [sp, #0]
 80084e6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80084ea:	c903      	ldmia	r1, {r0, r1}
 80084ec:	f00b ffec 	bl	80144c8 <mg_span>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d015      	beq.n	8008522 <mg_http_var+0x6a>
 80084f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d111      	bne.n	8008522 <mg_http_var+0x6a>
        mg_ncasecmp(name.buf, k.buf, k.len) == 0) {
 80084fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008500:	6a39      	ldr	r1, [r7, #32]
 8008502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008504:	4618      	mov	r0, r3
 8008506:	f7ff ff00 	bl	800830a <mg_ncasecmp>
 800850a:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') && name.len == k.len &&
 800850c:	2b00      	cmp	r3, #0
 800850e:	d108      	bne.n	8008522 <mg_http_var+0x6a>
      result = v;
 8008510:	f107 0310 	add.w	r3, r7, #16
 8008514:	f107 0218 	add.w	r2, r7, #24
 8008518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800851c:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8008520:	e00b      	b.n	800853a <mg_http_var+0x82>
  while (mg_span(buf, &entry, &buf, '&')) {
 8008522:	1d3b      	adds	r3, r7, #4
 8008524:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8008528:	2126      	movs	r1, #38	@ 0x26
 800852a:	9100      	str	r1, [sp, #0]
 800852c:	1d39      	adds	r1, r7, #4
 800852e:	c903      	ldmia	r1, {r0, r1}
 8008530:	f00b ffca 	bl	80144c8 <mg_span>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1cf      	bne.n	80084da <mg_http_var+0x22>
    }
  }
  return result;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	461a      	mov	r2, r3
 800853e:	f107 0310 	add.w	r3, r7, #16
 8008542:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008546:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	3730      	adds	r7, #48	@ 0x30
 800854e:	46bd      	mov	sp, r7
 8008550:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008554:	b002      	add	sp, #8
 8008556:	4770      	bx	lr

08008558 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8008558:	b580      	push	{r7, lr}
 800855a:	b08c      	sub	sp, #48	@ 0x30
 800855c:	af02      	add	r7, sp, #8
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
  int len;
  if (dst != NULL && dst_len > 0) {
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d005      	beq.n	8008578 <mg_http_get_var+0x20>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <mg_http_get_var+0x20>
    dst[0] = '\0';  // If destination buffer is valid, always nul-terminate it
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	701a      	strb	r2, [r3, #0]
  }
  if (dst == NULL || dst_len == 0) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <mg_http_get_var+0x2c>
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <mg_http_get_var+0x34>
    len = -2;  // Bad destination
 8008584:	f06f 0301 	mvn.w	r3, #1
 8008588:	627b      	str	r3, [r7, #36]	@ 0x24
 800858a:	e033      	b.n	80085f4 <mg_http_get_var+0x9c>
  } else if (buf->buf == NULL || name == NULL || buf->len == 0) {
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d006      	beq.n	80085a2 <mg_http_get_var+0x4a>
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d003      	beq.n	80085a2 <mg_http_get_var+0x4a>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d103      	bne.n	80085aa <mg_http_get_var+0x52>
    len = -1;  // Bad source
 80085a2:	f04f 33ff 	mov.w	r3, #4294967295
 80085a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80085a8:	e024      	b.n	80085f4 <mg_http_get_var+0x9c>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80085aa:	f107 031c 	add.w	r3, r7, #28
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f00b fd8b 	bl	80140cc <mg_str_s>
 80085b6:	f107 0014 	add.w	r0, r7, #20
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	ca06      	ldmia	r2, {r1, r2}
 80085c4:	f7ff ff78 	bl	80084b8 <mg_http_var>
    if (v.buf == NULL) {
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <mg_http_get_var+0x7e>
      len = -4;  // Name does not exist
 80085ce:	f06f 0303 	mvn.w	r3, #3
 80085d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085d4:	e00e      	b.n	80085f4 <mg_http_get_var+0x9c>
    } else {
      len = mg_url_decode(v.buf, v.len, dst, dst_len, 1);
 80085d6:	6978      	ldr	r0, [r7, #20]
 80085d8:	69b9      	ldr	r1, [r7, #24]
 80085da:	2301      	movs	r3, #1
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	f000 f82e 	bl	8008642 <mg_url_decode>
 80085e6:	6278      	str	r0, [r7, #36]	@ 0x24
      if (len < 0) len = -3;  // Failed to decode
 80085e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	da02      	bge.n	80085f4 <mg_http_get_var+0x9c>
 80085ee:	f06f 0302 	mvn.w	r3, #2
 80085f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  return len;
 80085f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3728      	adds	r7, #40	@ 0x28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <isx>:

static bool isx(int c) {
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b2f      	cmp	r3, #47	@ 0x2f
 800860a:	dd02      	ble.n	8008612 <isx+0x14>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b39      	cmp	r3, #57	@ 0x39
 8008610:	dd0b      	ble.n	800862a <isx+0x2c>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2b60      	cmp	r3, #96	@ 0x60
 8008616:	dd02      	ble.n	800861e <isx+0x20>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2b66      	cmp	r3, #102	@ 0x66
 800861c:	dd05      	ble.n	800862a <isx+0x2c>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b40      	cmp	r3, #64	@ 0x40
 8008622:	dd04      	ble.n	800862e <isx+0x30>
         (c >= 'A' && c <= 'F');
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2b46      	cmp	r3, #70	@ 0x46
 8008628:	dc01      	bgt.n	800862e <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800862a:	2301      	movs	r3, #1
 800862c:	e000      	b.n	8008630 <isx+0x32>
 800862e:	2300      	movs	r3, #0
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	b2db      	uxtb	r3, r3
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8008642:	b580      	push	{r7, lr}
 8008644:	b08a      	sub	sp, #40	@ 0x28
 8008646:	af02      	add	r7, sp, #8
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	60b9      	str	r1, [r7, #8]
 800864c:	607a      	str	r2, [r7, #4]
 800864e:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8008650:	2300      	movs	r3, #0
 8008652:	61bb      	str	r3, [r7, #24]
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	61fb      	str	r3, [r7, #28]
 8008658:	e059      	b.n	800870e <mg_url_decode+0xcc>
    if (src[i] == '%') {
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	4413      	add	r3, r2
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	2b25      	cmp	r3, #37	@ 0x25
 8008664:	d136      	bne.n	80086d4 <mg_url_decode+0x92>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	3302      	adds	r3, #2
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	429a      	cmp	r2, r3
 800866e:	d92e      	bls.n	80086ce <mg_url_decode+0x8c>
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	3301      	adds	r3, #1
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	4413      	add	r3, r2
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff ffbf 	bl	80085fe <isx>
 8008680:	4603      	mov	r3, r0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d023      	beq.n	80086ce <mg_url_decode+0x8c>
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	3302      	adds	r3, #2
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4413      	add	r3, r2
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	4618      	mov	r0, r3
 8008692:	f7ff ffb4 	bl	80085fe <isx>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d018      	beq.n	80086ce <mg_url_decode+0x8c>
        mg_str_to_num(mg_str_n(src + i + 1, 2), 16, &dst[j], sizeof(uint8_t));
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	3301      	adds	r3, #1
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	18d1      	adds	r1, r2, r3
 80086a4:	f107 0310 	add.w	r3, r7, #16
 80086a8:	2202      	movs	r2, #2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f00b fd2b 	bl	8014106 <mg_str_n>
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	4413      	add	r3, r2
 80086b6:	2201      	movs	r2, #1
 80086b8:	9200      	str	r2, [sp, #0]
 80086ba:	2210      	movs	r2, #16
 80086bc:	f107 0110 	add.w	r1, r7, #16
 80086c0:	c903      	ldmia	r1, {r0, r1}
 80086c2:	f00b ff5e 	bl	8014582 <mg_str_to_num>
        i += 2;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	3302      	adds	r3, #2
 80086ca:	61fb      	str	r3, [r7, #28]
 80086cc:	e019      	b.n	8008702 <mg_url_decode+0xc0>
      } else {
        return -1;
 80086ce:	f04f 33ff 	mov.w	r3, #4294967295
 80086d2:	e03a      	b.n	800874a <mg_url_decode+0x108>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 80086d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00b      	beq.n	80086f2 <mg_url_decode+0xb0>
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	4413      	add	r3, r2
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	2b2b      	cmp	r3, #43	@ 0x2b
 80086e4:	d105      	bne.n	80086f2 <mg_url_decode+0xb0>
      dst[j] = ' ';
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	4413      	add	r3, r2
 80086ec:	2220      	movs	r2, #32
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	e007      	b.n	8008702 <mg_url_decode+0xc0>
    } else {
      dst[j] = src[i];
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	441a      	add	r2, r3
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	440b      	add	r3, r1
 80086fe:	7812      	ldrb	r2, [r2, #0]
 8008700:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	3301      	adds	r3, #1
 8008706:	61fb      	str	r3, [r7, #28]
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	3301      	adds	r3, #1
 800870c:	61bb      	str	r3, [r7, #24]
 800870e:	69fa      	ldr	r2, [r7, #28]
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	429a      	cmp	r2, r3
 8008714:	d204      	bcs.n	8008720 <mg_url_decode+0xde>
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	3301      	adds	r3, #1
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d89c      	bhi.n	800865a <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d204      	bcs.n	8008732 <mg_url_decode+0xf0>
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	4413      	add	r3, r2
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8008732:	69fa      	ldr	r2, [r7, #28]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	429a      	cmp	r2, r3
 8008738:	d305      	bcc.n	8008746 <mg_url_decode+0x104>
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	d201      	bcs.n	8008746 <mg_url_decode+0x104>
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	e001      	b.n	800874a <mg_url_decode+0x108>
 8008746:	f04f 33ff 	mov.w	r3, #4294967295
}
 800874a:	4618      	mov	r0, r3
 800874c:	3720      	adds	r7, #32
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <isok>:

static bool isok(uint8_t c) {
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	4603      	mov	r3, r0
 800875a:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c == '\t' || c >= ' ';
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	2b0a      	cmp	r3, #10
 8008760:	d008      	beq.n	8008774 <isok+0x22>
 8008762:	79fb      	ldrb	r3, [r7, #7]
 8008764:	2b0d      	cmp	r3, #13
 8008766:	d005      	beq.n	8008774 <isok+0x22>
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b09      	cmp	r3, #9
 800876c:	d002      	beq.n	8008774 <isok+0x22>
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	2b1f      	cmp	r3, #31
 8008772:	d901      	bls.n	8008778 <isok+0x26>
 8008774:	2301      	movs	r3, #1
 8008776:	e000      	b.n	800877a <isok+0x28>
 8008778:	2300      	movs	r3, #0
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	b2db      	uxtb	r3, r3
}
 8008780:	4618      	mov	r0, r3
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8008796:	2300      	movs	r3, #0
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	e03c      	b.n	8008816 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4413      	add	r3, r2
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff ffd4 	bl	8008752 <isok>
 80087aa:	4603      	mov	r3, r0
 80087ac:	f083 0301 	eor.w	r3, r3, #1
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <mg_http_get_request_len+0x30>
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ba:	e031      	b.n	8008820 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00c      	beq.n	80087dc <mg_http_get_request_len+0x50>
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4413      	add	r3, r2
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b0a      	cmp	r3, #10
 80087cc:	d106      	bne.n	80087dc <mg_http_get_request_len+0x50>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3b01      	subs	r3, #1
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	4413      	add	r3, r2
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	2b0a      	cmp	r3, #10
 80087da:	d016      	beq.n	800880a <mg_http_get_request_len+0x7e>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d916      	bls.n	8008810 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4413      	add	r3, r2
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	2b0a      	cmp	r3, #10
 80087ec:	d110      	bne.n	8008810 <mg_http_get_request_len+0x84>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	4413      	add	r3, r2
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b0d      	cmp	r3, #13
 80087fa:	d109      	bne.n	8008810 <mg_http_get_request_len+0x84>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	3b02      	subs	r3, #2
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	4413      	add	r3, r2
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b0a      	cmp	r3, #10
 8008808:	d102      	bne.n	8008810 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3301      	adds	r3, #1
 800880e:	e007      	b.n	8008820 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	429a      	cmp	r2, r3
 800881c:	d3be      	bcc.n	800879c <mg_http_get_request_len+0x10>
  }
  return 0;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <mg_http_get_header>:
struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8008832:	6838      	ldr	r0, [r7, #0]
 8008834:	f7f7 fdcc 	bl	80003d0 <strlen>
 8008838:	61b8      	str	r0, [r7, #24]
 800883a:	231e      	movs	r3, #30
 800883c:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800883e:	2300      	movs	r3, #0
 8008840:	61fb      	str	r3, [r7, #28]
 8008842:	e01f      	b.n	8008884 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	3302      	adds	r3, #2
 8008848:	011b      	lsls	r3, r3, #4
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	4413      	add	r3, r2
 800884e:	613b      	str	r3, [r7, #16]
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	011b      	lsls	r3, r3, #4
 8008854:	3328      	adds	r3, #40	@ 0x28
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	4413      	add	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->buf, name, n) == 0) return v;
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	429a      	cmp	r2, r3
 8008864:	d10b      	bne.n	800887e <mg_http_get_header+0x56>
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	6839      	ldr	r1, [r7, #0]
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fd4b 	bl	800830a <mg_ncasecmp>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <mg_http_get_header+0x56>
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	e010      	b.n	80088a0 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	3301      	adds	r3, #1
 8008882:	61fb      	str	r3, [r7, #28]
 8008884:	69fa      	ldr	r2, [r7, #28]
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	429a      	cmp	r2, r3
 800888a:	d208      	bcs.n	800889e <mg_http_get_header+0x76>
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	3302      	adds	r3, #2
 8008892:	011b      	lsls	r3, r3, #4
 8008894:	4413      	add	r3, r2
 8008896:	3304      	adds	r3, #4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1d2      	bne.n	8008844 <mg_http_get_header+0x1c>
  }
  return NULL;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3720      	adds	r7, #32
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <vcb>:

// Is it a valid utf-8 continuation byte
static bool vcb(uint8_t c) {
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	71fb      	strb	r3, [r7, #7]
  return (c & 0xc0) == 0x80;
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80088b8:	2b80      	cmp	r3, #128	@ 0x80
 80088ba:	bf0c      	ite	eq
 80088bc:	2301      	moveq	r3, #1
 80088be:	2300      	movne	r3, #0
 80088c0:	b2db      	uxtb	r3, r3
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <clen>:

// Get character length (valid utf-8). Used to parse method, URI, headers
static size_t clen(const char *s, const char *end) {
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b086      	sub	sp, #24
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
 80088d6:	6039      	str	r1, [r7, #0]
  const unsigned char *u = (unsigned char *) s, c = *u;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	617b      	str	r3, [r7, #20]
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	74fb      	strb	r3, [r7, #19]
  long n = (long) (end - s);
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	60fb      	str	r3, [r7, #12]
  if (c > ' ' && c <= '~') return 1;  // Usual ascii printed char
 80088ea:	7cfb      	ldrb	r3, [r7, #19]
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	d904      	bls.n	80088fa <clen+0x2c>
 80088f0:	7cfb      	ldrb	r3, [r7, #19]
 80088f2:	2b7e      	cmp	r3, #126	@ 0x7e
 80088f4:	d801      	bhi.n	80088fa <clen+0x2c>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e054      	b.n	80089a4 <clen+0xd6>
  if ((c & 0xe0) == 0xc0 && n > 1 && vcb(u[1])) return 2;  // 2-byte UTF8
 80088fa:	7cfb      	ldrb	r3, [r7, #19]
 80088fc:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8008900:	2bc0      	cmp	r3, #192	@ 0xc0
 8008902:	d10d      	bne.n	8008920 <clen+0x52>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b01      	cmp	r3, #1
 8008908:	dd0a      	ble.n	8008920 <clen+0x52>
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	3301      	adds	r3, #1
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	4618      	mov	r0, r3
 8008912:	f7ff ffc9 	bl	80088a8 <vcb>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <clen+0x52>
 800891c:	2302      	movs	r3, #2
 800891e:	e041      	b.n	80089a4 <clen+0xd6>
  if ((c & 0xf0) == 0xe0 && n > 2 && vcb(u[1]) && vcb(u[2])) return 3;
 8008920:	7cfb      	ldrb	r3, [r7, #19]
 8008922:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008926:	2be0      	cmp	r3, #224	@ 0xe0
 8008928:	d116      	bne.n	8008958 <clen+0x8a>
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2b02      	cmp	r3, #2
 800892e:	dd13      	ble.n	8008958 <clen+0x8a>
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	3301      	adds	r3, #1
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f7ff ffb6 	bl	80088a8 <vcb>
 800893c:	4603      	mov	r3, r0
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <clen+0x8a>
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	3302      	adds	r3, #2
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff ffad 	bl	80088a8 <vcb>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <clen+0x8a>
 8008954:	2303      	movs	r3, #3
 8008956:	e025      	b.n	80089a4 <clen+0xd6>
  if ((c & 0xf8) == 0xf0 && n > 3 && vcb(u[1]) && vcb(u[2]) && vcb(u[3]))
 8008958:	7cfb      	ldrb	r3, [r7, #19]
 800895a:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 800895e:	2bf0      	cmp	r3, #240	@ 0xf0
 8008960:	d11f      	bne.n	80089a2 <clen+0xd4>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2b03      	cmp	r3, #3
 8008966:	dd1c      	ble.n	80089a2 <clen+0xd4>
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	3301      	adds	r3, #1
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff ff9a 	bl	80088a8 <vcb>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d013      	beq.n	80089a2 <clen+0xd4>
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	3302      	adds	r3, #2
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	4618      	mov	r0, r3
 8008982:	f7ff ff91 	bl	80088a8 <vcb>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <clen+0xd4>
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	3303      	adds	r3, #3
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff ff88 	bl	80088a8 <vcb>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <clen+0xd4>
    return 4;
 800899e:	2304      	movs	r3, #4
 80089a0:	e000      	b.n	80089a4 <clen+0xd6>
  return 0;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <skiptorn>:

// Skip until the newline. Return advanced `s`, or NULL on error
static const char *skiptorn(const char *s, const char *end, struct mg_str *v) {
 80089ac:	b480      	push	{r7}
 80089ae:	b085      	sub	sp, #20
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  v->buf = (char *) s;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	601a      	str	r2, [r3, #0]
  while (s < end && s[0] != '\n' && s[0] != '\r') s++, v->len++;  // To newline
 80089be:	e007      	b.n	80089d0 <skiptorn+0x24>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3301      	adds	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	1c5a      	adds	r2, r3, #1
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	605a      	str	r2, [r3, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d207      	bcs.n	80089e8 <skiptorn+0x3c>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b0a      	cmp	r3, #10
 80089de:	d003      	beq.n	80089e8 <skiptorn+0x3c>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	2b0d      	cmp	r3, #13
 80089e6:	d1eb      	bne.n	80089c0 <skiptorn+0x14>
  if (s >= end || (s[0] == '\r' && s[1] != '\n')) return NULL;    // Stray \r
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d208      	bcs.n	8008a02 <skiptorn+0x56>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b0d      	cmp	r3, #13
 80089f6:	d106      	bne.n	8008a06 <skiptorn+0x5a>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3301      	adds	r3, #1
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2b0a      	cmp	r3, #10
 8008a00:	d001      	beq.n	8008a06 <skiptorn+0x5a>
 8008a02:	2300      	movs	r3, #0
 8008a04:	e017      	b.n	8008a36 <skiptorn+0x8a>
  if (s < end && s[0] == '\r') s++;                               // Skip \r
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d206      	bcs.n	8008a1c <skiptorn+0x70>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	2b0d      	cmp	r3, #13
 8008a14:	d102      	bne.n	8008a1c <skiptorn+0x70>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]
  if (s >= end || *s++ != '\n') return NULL;                      // Skip \n
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d205      	bcs.n	8008a30 <skiptorn+0x84>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	1c5a      	adds	r2, r3, #1
 8008a28:	60fa      	str	r2, [r7, #12]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b0a      	cmp	r3, #10
 8008a2e:	d001      	beq.n	8008a34 <skiptorn+0x88>
 8008a30:	2300      	movs	r3, #0
 8008a32:	e000      	b.n	8008a36 <skiptorn+0x8a>
  return s;
 8008a34:	68fb      	ldr	r3, [r7, #12]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3714      	adds	r7, #20
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, size_t max_hdrs) {
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b08a      	sub	sp, #40	@ 0x28
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	607a      	str	r2, [r7, #4]
 8008a4e:	603b      	str	r3, [r7, #0]
  size_t i, n;
  for (i = 0; i < max_hdrs; i++) {
 8008a50:	2300      	movs	r3, #0
 8008a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a54:	e09a      	b.n	8008b8c <mg_http_parse_headers+0x14a>
    struct mg_str k = {NULL, 0}, v = {NULL, 0};
 8008a56:	2300      	movs	r3, #0
 8008a58:	61bb      	str	r3, [r7, #24]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61fb      	str	r3, [r7, #28]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	613b      	str	r3, [r7, #16]
 8008a62:	2300      	movs	r3, #0
 8008a64:	617b      	str	r3, [r7, #20]
    if (s >= end) return false;
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d301      	bcc.n	8008a72 <mg_http_parse_headers+0x30>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e092      	b.n	8008b98 <mg_http_parse_headers+0x156>
    if (s[0] == '\n' || (s[0] == '\r' && s[1] == '\n')) break;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	2b0a      	cmp	r3, #10
 8008a78:	f000 808d 	beq.w	8008b96 <mg_http_parse_headers+0x154>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b0d      	cmp	r3, #13
 8008a82:	d105      	bne.n	8008a90 <mg_http_parse_headers+0x4e>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	3301      	adds	r3, #1
 8008a88:	781b      	ldrb	r3, [r3, #0]
 8008a8a:	2b0a      	cmp	r3, #10
 8008a8c:	f000 8083 	beq.w	8008b96 <mg_http_parse_headers+0x154>
    k.buf = (char *) s;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	61bb      	str	r3, [r7, #24]
    while (s < end && s[0] != ':' && (n = clen(s, end)) > 0) s += n, k.len += n;
 8008a94:	e007      	b.n	8008aa6 <mg_http_parse_headers+0x64>
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	6a3b      	ldr	r3, [r7, #32]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	69fa      	ldr	r2, [r7, #28]
 8008aa0:	6a3b      	ldr	r3, [r7, #32]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	61fb      	str	r3, [r7, #28]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d20b      	bcs.n	8008ac6 <mg_http_parse_headers+0x84>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ab4:	d007      	beq.n	8008ac6 <mg_http_parse_headers+0x84>
 8008ab6:	68b9      	ldr	r1, [r7, #8]
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f7ff ff08 	bl	80088ce <clen>
 8008abe:	6238      	str	r0, [r7, #32]
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e7      	bne.n	8008a96 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                     // Empty name
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <mg_http_parse_headers+0x8e>
 8008acc:	2300      	movs	r3, #0
 8008ace:	e063      	b.n	8008b98 <mg_http_parse_headers+0x156>
    if (s >= end || clen(s, end) == 0) return false;  // Invalid UTF-8
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d206      	bcs.n	8008ae6 <mg_http_parse_headers+0xa4>
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff fef7 	bl	80088ce <clen>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d101      	bne.n	8008aea <mg_http_parse_headers+0xa8>
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	e056      	b.n	8008b98 <mg_http_parse_headers+0x156>
    if (*s++ != ':') return false;  // Invalid, not followed by :
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	60fa      	str	r2, [r7, #12]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b3a      	cmp	r3, #58	@ 0x3a
 8008af4:	d004      	beq.n	8008b00 <mg_http_parse_headers+0xbe>
 8008af6:	2300      	movs	r3, #0
 8008af8:	e04e      	b.n	8008b98 <mg_http_parse_headers+0x156>
    // if (clen(s, end) == 0) return false;        // Invalid UTF-8
    while (s < end && (s[0] == ' ' || s[0] == '\t')) s++;  // Skip spaces
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d207      	bcs.n	8008b18 <mg_http_parse_headers+0xd6>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	d0f4      	beq.n	8008afa <mg_http_parse_headers+0xb8>
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b09      	cmp	r3, #9
 8008b16:	d0f0      	beq.n	8008afa <mg_http_parse_headers+0xb8>
    if ((s = skiptorn(s, end, &v)) == NULL) return false;
 8008b18:	f107 0310 	add.w	r3, r7, #16
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f7ff ff43 	bl	80089ac <skiptorn>
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d104      	bne.n	8008b38 <mg_http_parse_headers+0xf6>
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e032      	b.n	8008b98 <mg_http_parse_headers+0x156>
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
      v.len--;  // Trim spaces
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	3b01      	subs	r3, #1
 8008b36:	617b      	str	r3, [r7, #20]
    while (v.len > 0 && (v.buf[v.len - 1] == ' ' || v.buf[v.len - 1] == '\t')) {
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00d      	beq.n	8008b5a <mg_http_parse_headers+0x118>
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	3b01      	subs	r3, #1
 8008b44:	4413      	add	r3, r2
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	2b20      	cmp	r3, #32
 8008b4a:	d0f2      	beq.n	8008b32 <mg_http_parse_headers+0xf0>
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	4413      	add	r3, r2
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	2b09      	cmp	r3, #9
 8008b58:	d0eb      	beq.n	8008b32 <mg_http_parse_headers+0xf0>
    }
    // MG_INFO(("--HH [%.*s] [%.*s]", (int) k.len, k.buf, (int) v.len, v.buf));
    h[i].name = k, h[i].value = v;  // Success. Assign values
 8008b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5c:	011b      	lsls	r3, r3, #4
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	4413      	add	r3, r2
 8008b62:	461a      	mov	r2, r3
 8008b64:	f107 0318 	add.w	r3, r7, #24
 8008b68:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b6c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	4413      	add	r3, r2
 8008b78:	3308      	adds	r3, #8
 8008b7a:	f107 0210 	add.w	r2, r7, #16
 8008b7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008b82:	e883 0003 	stmia.w	r3, {r0, r1}
  for (i = 0; i < max_hdrs; i++) {
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	3301      	adds	r3, #1
 8008b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	f4ff af60 	bcc.w	8008a56 <mg_http_parse_headers+0x14>
  }
  return true;
 8008b96:	2301      	movs	r3, #1
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3728      	adds	r7, #40	@ 0x28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b092      	sub	sp, #72	@ 0x48
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f7ff fdec 	bl	800878c <mg_http_get_request_len>
 8008bb4:	6478      	str	r0, [r7, #68]	@ 0x44
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d003      	beq.n	8008bc4 <mg_http_parse+0x24>
 8008bbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	e000      	b.n	8008bc6 <mg_http_parse+0x26>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  const struct mg_str *cl;
  size_t n;
  bool version_prefix_valid;

  memset(hm, 0, sizeof(*hm));
 8008bc8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8008bcc:	2100      	movs	r1, #0
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f01a fde5 	bl	802379e <memset>
  if (req_len <= 0) return req_len;
 8008bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dc01      	bgt.n	8008bde <mg_http_parse+0x3e>
 8008bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bdc:	e18f      	b.n	8008efe <mg_http_parse+0x35e>

  hm->message.buf = hm->head.buf = (char *) s;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
  hm->body.buf = (char *) end;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bf6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  hm->head.len = (size_t) req_len;
 8008bfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
  hm->message.len = hm->body.len = (size_t) -1;  // Set body length to infinite
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f04f 32ff 	mov.w	r2, #4294967295
 8008c08:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

  // Parse request line
  hm->method.buf = (char *) s;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	601a      	str	r2, [r3, #0]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->method.len += n;
 8008c1e:	e009      	b.n	8008c34 <mg_http_parse+0x94>
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c24:	4413      	add	r3, r2
 8008c26:	60fb      	str	r3, [r7, #12]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c2e:	441a      	add	r2, r3
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	605a      	str	r2, [r3, #4]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d20b      	bcs.n	8008c54 <mg_http_parse+0xb4>
 8008c3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7ff fe45 	bl	80088ce <clen>
 8008c44:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d1e9      	bne.n	8008c20 <mg_http_parse+0x80>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8008c4c:	e002      	b.n	8008c54 <mg_http_parse+0xb4>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	3301      	adds	r3, #1
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d203      	bcs.n	8008c64 <mg_http_parse+0xc4>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	2b20      	cmp	r3, #32
 8008c62:	d0f4      	beq.n	8008c4e <mg_http_parse+0xae>
  hm->uri.buf = (char *) s;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	609a      	str	r2, [r3, #8]
  while (s < end && (n = clen(s, end)) > 0) s += n, hm->uri.len += n;
 8008c6a:	e009      	b.n	8008c80 <mg_http_parse+0xe0>
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c70:	4413      	add	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	68da      	ldr	r2, [r3, #12]
 8008c78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c7a:	441a      	add	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	60da      	str	r2, [r3, #12]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d20b      	bcs.n	8008ca0 <mg_http_parse+0x100>
 8008c88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff fe1f 	bl	80088ce <clen>
 8008c90:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8008c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1e9      	bne.n	8008c6c <mg_http_parse+0xcc>
  while (s < end && s[0] == ' ') s++;  // Skip spaces
 8008c98:	e002      	b.n	8008ca0 <mg_http_parse+0x100>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d203      	bcs.n	8008cb0 <mg_http_parse+0x110>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	2b20      	cmp	r3, #32
 8008cae:	d0f4      	beq.n	8008c9a <mg_http_parse+0xfa>
  is_response = hm->method.len > 5 &&
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	2b05      	cmp	r3, #5
 8008cb6:	d90b      	bls.n	8008cd0 <mg_http_parse+0x130>
                (mg_ncasecmp(hm->method.buf, "HTTP/", 5) == 0);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	4992      	ldr	r1, [pc, #584]	@ (8008f08 <mg_http_parse+0x368>)
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7ff fb22 	bl	800830a <mg_ncasecmp>
 8008cc6:	4603      	mov	r3, r0
  is_response = hm->method.len > 5 &&
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <mg_http_parse+0x130>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e000      	b.n	8008cd2 <mg_http_parse+0x132>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if ((s = skiptorn(s, end, &hm->proto)) == NULL) return false;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3318      	adds	r3, #24
 8008cd8:	461a      	mov	r2, r3
 8008cda:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7ff fe65 	bl	80089ac <skiptorn>
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <mg_http_parse+0x14e>
 8008cea:	2300      	movs	r3, #0
 8008cec:	e107      	b.n	8008efe <mg_http_parse+0x35e>
  // If we're given a version, check that it is HTTP/x.x
  version_prefix_valid = hm->proto.len > 5 &&
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d90b      	bls.n	8008d0e <mg_http_parse+0x16e>
                         (mg_ncasecmp(hm->proto.buf, "HTTP/", 5) == 0);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	699b      	ldr	r3, [r3, #24]
 8008cfa:	2205      	movs	r2, #5
 8008cfc:	4982      	ldr	r1, [pc, #520]	@ (8008f08 <mg_http_parse+0x368>)
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7ff fb03 	bl	800830a <mg_ncasecmp>
 8008d04:	4603      	mov	r3, r0
  version_prefix_valid = hm->proto.len > 5 &&
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <mg_http_parse+0x16e>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e000      	b.n	8008d10 <mg_http_parse+0x170>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008d14:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (!is_response && hm->proto.len > 0 &&
 8008d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d12f      	bne.n	8008d86 <mg_http_parse+0x1e6>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d02b      	beq.n	8008d86 <mg_http_parse+0x1e6>
    (!version_prefix_valid || hm->proto.len != 8 ||
 8008d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d32:	f083 0301 	eor.w	r3, r3, #1
 8008d36:	b2db      	uxtb	r3, r3
  if (!is_response && hm->proto.len > 0 &&
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d121      	bne.n	8008d80 <mg_http_parse+0x1e0>
    (!version_prefix_valid || hm->proto.len != 8 ||
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	d11d      	bne.n	8008d80 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	3305      	adds	r3, #5
 8008d4a:	781b      	ldrb	r3, [r3, #0]
    (!version_prefix_valid || hm->proto.len != 8 ||
 8008d4c:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d4e:	d917      	bls.n	8008d80 <mg_http_parse+0x1e0>
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	3305      	adds	r3, #5
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b39      	cmp	r3, #57	@ 0x39
 8008d5a:	d811      	bhi.n	8008d80 <mg_http_parse+0x1e0>
    (hm->proto.buf[6] != '.') ||
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	699b      	ldr	r3, [r3, #24]
 8008d60:	3306      	adds	r3, #6
 8008d62:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[5] < '0' || hm->proto.buf[5] > '9') ||
 8008d64:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d66:	d10b      	bne.n	8008d80 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	3307      	adds	r3, #7
 8008d6e:	781b      	ldrb	r3, [r3, #0]
    (hm->proto.buf[6] != '.') ||
 8008d70:	2b2f      	cmp	r3, #47	@ 0x2f
 8008d72:	d905      	bls.n	8008d80 <mg_http_parse+0x1e0>
    (hm->proto.buf[7] < '0' || hm->proto.buf[7] > '9'))) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	3307      	adds	r3, #7
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b39      	cmp	r3, #57	@ 0x39
 8008d7e:	d902      	bls.n	8008d86 <mg_http_parse+0x1e6>
    return -1;
 8008d80:	f04f 33ff 	mov.w	r3, #4294967295
 8008d84:	e0bb      	b.n	8008efe <mg_http_parse+0x35e>
  }

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.buf, '?', hm->uri.len)) != NULL) {
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6898      	ldr	r0, [r3, #8]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	213f      	movs	r1, #63	@ 0x3f
 8008d92:	f7f7 facd 	bl	8000330 <memchr>
 8008d96:	6338      	str	r0, [r7, #48]	@ 0x30
 8008d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d015      	beq.n	8008dca <mg_http_parse+0x22a>
    hm->query.buf = (char *) qs + 1;
 8008d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da0:	1c5a      	adds	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.buf[hm->uri.len] - (qs + 1));
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689a      	ldr	r2, [r3, #8]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	441a      	add	r2, r3
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	3301      	adds	r3, #1
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	461a      	mov	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.buf);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	689b      	ldr	r3, [r3, #8]
 8008dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	60da      	str	r2, [r3, #12]
  }

  // Sanity check. Allow protocol/reason to be empty
  // Do this check after hm->method.len and hm->uri.len are finalised
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <mg_http_parse+0x23a>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <mg_http_parse+0x240>
 8008dda:	f04f 33ff 	mov.w	r3, #4294967295
 8008dde:	e08e      	b.n	8008efe <mg_http_parse+0x35e>

  if (!mg_http_parse_headers(s, end, hm->headers,
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f103 0220 	add.w	r2, r3, #32
 8008de6:	231e      	movs	r3, #30
 8008de8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f7ff fe29 	bl	8008a42 <mg_http_parse_headers>
 8008df0:	4603      	mov	r3, r0
 8008df2:	f083 0301 	eor.w	r3, r3, #1
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d002      	beq.n	8008e02 <mg_http_parse+0x262>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8008dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8008e00:	e07d      	b.n	8008efe <mg_http_parse+0x35e>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8008e02:	4942      	ldr	r1, [pc, #264]	@ (8008f0c <mg_http_parse+0x36c>)
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f7ff fd0f 	bl	8008828 <mg_http_get_header>
 8008e0a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d018      	beq.n	8008e44 <mg_http_parse+0x2a4>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8008e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008e1e:	f7ff fab5 	bl	800838c <mg_to_size_t>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f083 0301 	eor.w	r3, r3, #1
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <mg_http_parse+0x294>
 8008e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e32:	e064      	b.n	8008efe <mg_http_parse+0x35e>
    hm->message.len = (size_t) req_len + hm->body.len;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008e3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e3c:	441a      	add	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4e:	d12a      	bne.n	8008ea6 <mg_http_parse+0x306>
 8008e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d127      	bne.n	8008ea6 <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8008e56:	f107 0314 	add.w	r3, r7, #20
 8008e5a:	492d      	ldr	r1, [pc, #180]	@ (8008f10 <mg_http_parse+0x370>)
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f00b f935 	bl	80140cc <mg_str_s>
 8008e62:	6879      	ldr	r1, [r7, #4]
 8008e64:	f107 0314 	add.w	r3, r7, #20
 8008e68:	cb0c      	ldmia	r3, {r2, r3}
 8008e6a:	c903      	ldmia	r1, {r0, r1}
 8008e6c:	f00b f9f1 	bl	8014252 <mg_strcasecmp>
 8008e70:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d017      	beq.n	8008ea6 <mg_http_parse+0x306>
      mg_strcasecmp(hm->method, mg_str("POST")) != 0) {
 8008e76:	f107 031c 	add.w	r3, r7, #28
 8008e7a:	4926      	ldr	r1, [pc, #152]	@ (8008f14 <mg_http_parse+0x374>)
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f00b f925 	bl	80140cc <mg_str_s>
 8008e82:	6879      	ldr	r1, [r7, #4]
 8008e84:	f107 031c 	add.w	r3, r7, #28
 8008e88:	cb0c      	ldmia	r3, {r2, r3}
 8008e8a:	c903      	ldmia	r1, {r0, r1}
 8008e8c:	f00b f9e1 	bl	8014252 <mg_strcasecmp>
 8008e90:	4603      	mov	r3, r0
      mg_strcasecmp(hm->method, mg_str("PUT")) != 0 &&
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d007      	beq.n	8008ea6 <mg_http_parse+0x306>
    hm->body.len = 0;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8008e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb0:	d11b      	bne.n	8008eea <mg_http_parse+0x34a>
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d018      	beq.n	8008eea <mg_http_parse+0x34a>
      mg_strcasecmp(hm->uri, mg_str("204")) == 0) {
 8008eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ebc:	4916      	ldr	r1, [pc, #88]	@ (8008f18 <mg_http_parse+0x378>)
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f00b f904 	bl	80140cc <mg_str_s>
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008eca:	cb0c      	ldmia	r3, {r2, r3}
 8008ecc:	3108      	adds	r1, #8
 8008ece:	c903      	ldmia	r1, {r0, r1}
 8008ed0:	f00b f9bf 	bl	8014252 <mg_strcasecmp>
 8008ed4:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d107      	bne.n	8008eea <mg_http_parse+0x34a>
    hm->body.len = 0;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    hm->message.len = (size_t) req_len;
 8008ee2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  }
  if (hm->message.len < (size_t) req_len) return -1;  // Overflow protection
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8008ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d202      	bcs.n	8008efc <mg_http_parse+0x35c>
 8008ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8008efa:	e000      	b.n	8008efe <mg_http_parse+0x35e>

  return req_len;
 8008efc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3748      	adds	r7, #72	@ 0x48
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	080247d4 	.word	0x080247d4
 8008f0c:	080247dc 	.word	0x080247dc
 8008f10:	080247ec 	.word	0x080247ec
 8008f14:	080247f0 	.word	0x080247f0
 8008f18:	080247f8 	.word	0x080247f8

08008f1c <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3b64      	subs	r3, #100	@ 0x64
 8008f28:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	f200 8469 	bhi.w	8009804 <mg_http_status_code_str+0x8e8>
 8008f32:	a101      	add	r1, pc, #4	@ (adr r1, 8008f38 <mg_http_status_code_str+0x1c>)
 8008f34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f38:	08009709 	.word	0x08009709
 8008f3c:	0800970d 	.word	0x0800970d
 8008f40:	08009711 	.word	0x08009711
 8008f44:	08009805 	.word	0x08009805
 8008f48:	08009805 	.word	0x08009805
 8008f4c:	08009805 	.word	0x08009805
 8008f50:	08009805 	.word	0x08009805
 8008f54:	08009805 	.word	0x08009805
 8008f58:	08009805 	.word	0x08009805
 8008f5c:	08009805 	.word	0x08009805
 8008f60:	08009805 	.word	0x08009805
 8008f64:	08009805 	.word	0x08009805
 8008f68:	08009805 	.word	0x08009805
 8008f6c:	08009805 	.word	0x08009805
 8008f70:	08009805 	.word	0x08009805
 8008f74:	08009805 	.word	0x08009805
 8008f78:	08009805 	.word	0x08009805
 8008f7c:	08009805 	.word	0x08009805
 8008f80:	08009805 	.word	0x08009805
 8008f84:	08009805 	.word	0x08009805
 8008f88:	08009805 	.word	0x08009805
 8008f8c:	08009805 	.word	0x08009805
 8008f90:	08009805 	.word	0x08009805
 8008f94:	08009805 	.word	0x08009805
 8008f98:	08009805 	.word	0x08009805
 8008f9c:	08009805 	.word	0x08009805
 8008fa0:	08009805 	.word	0x08009805
 8008fa4:	08009805 	.word	0x08009805
 8008fa8:	08009805 	.word	0x08009805
 8008fac:	08009805 	.word	0x08009805
 8008fb0:	08009805 	.word	0x08009805
 8008fb4:	08009805 	.word	0x08009805
 8008fb8:	08009805 	.word	0x08009805
 8008fbc:	08009805 	.word	0x08009805
 8008fc0:	08009805 	.word	0x08009805
 8008fc4:	08009805 	.word	0x08009805
 8008fc8:	08009805 	.word	0x08009805
 8008fcc:	08009805 	.word	0x08009805
 8008fd0:	08009805 	.word	0x08009805
 8008fd4:	08009805 	.word	0x08009805
 8008fd8:	08009805 	.word	0x08009805
 8008fdc:	08009805 	.word	0x08009805
 8008fe0:	08009805 	.word	0x08009805
 8008fe4:	08009805 	.word	0x08009805
 8008fe8:	08009805 	.word	0x08009805
 8008fec:	08009805 	.word	0x08009805
 8008ff0:	08009805 	.word	0x08009805
 8008ff4:	08009805 	.word	0x08009805
 8008ff8:	08009805 	.word	0x08009805
 8008ffc:	08009805 	.word	0x08009805
 8009000:	08009805 	.word	0x08009805
 8009004:	08009805 	.word	0x08009805
 8009008:	08009805 	.word	0x08009805
 800900c:	08009805 	.word	0x08009805
 8009010:	08009805 	.word	0x08009805
 8009014:	08009805 	.word	0x08009805
 8009018:	08009805 	.word	0x08009805
 800901c:	08009805 	.word	0x08009805
 8009020:	08009805 	.word	0x08009805
 8009024:	08009805 	.word	0x08009805
 8009028:	08009805 	.word	0x08009805
 800902c:	08009805 	.word	0x08009805
 8009030:	08009805 	.word	0x08009805
 8009034:	08009805 	.word	0x08009805
 8009038:	08009805 	.word	0x08009805
 800903c:	08009805 	.word	0x08009805
 8009040:	08009805 	.word	0x08009805
 8009044:	08009805 	.word	0x08009805
 8009048:	08009805 	.word	0x08009805
 800904c:	08009805 	.word	0x08009805
 8009050:	08009805 	.word	0x08009805
 8009054:	08009805 	.word	0x08009805
 8009058:	08009805 	.word	0x08009805
 800905c:	08009805 	.word	0x08009805
 8009060:	08009805 	.word	0x08009805
 8009064:	08009805 	.word	0x08009805
 8009068:	08009805 	.word	0x08009805
 800906c:	08009805 	.word	0x08009805
 8009070:	08009805 	.word	0x08009805
 8009074:	08009805 	.word	0x08009805
 8009078:	08009805 	.word	0x08009805
 800907c:	08009805 	.word	0x08009805
 8009080:	08009805 	.word	0x08009805
 8009084:	08009805 	.word	0x08009805
 8009088:	08009805 	.word	0x08009805
 800908c:	08009805 	.word	0x08009805
 8009090:	08009805 	.word	0x08009805
 8009094:	08009805 	.word	0x08009805
 8009098:	08009805 	.word	0x08009805
 800909c:	08009805 	.word	0x08009805
 80090a0:	08009805 	.word	0x08009805
 80090a4:	08009805 	.word	0x08009805
 80090a8:	08009805 	.word	0x08009805
 80090ac:	08009805 	.word	0x08009805
 80090b0:	08009805 	.word	0x08009805
 80090b4:	08009805 	.word	0x08009805
 80090b8:	08009805 	.word	0x08009805
 80090bc:	08009805 	.word	0x08009805
 80090c0:	08009805 	.word	0x08009805
 80090c4:	08009805 	.word	0x08009805
 80090c8:	08009715 	.word	0x08009715
 80090cc:	08009719 	.word	0x08009719
 80090d0:	0800971d 	.word	0x0800971d
 80090d4:	08009721 	.word	0x08009721
 80090d8:	08009725 	.word	0x08009725
 80090dc:	08009729 	.word	0x08009729
 80090e0:	0800972d 	.word	0x0800972d
 80090e4:	08009731 	.word	0x08009731
 80090e8:	08009735 	.word	0x08009735
 80090ec:	08009805 	.word	0x08009805
 80090f0:	08009805 	.word	0x08009805
 80090f4:	08009805 	.word	0x08009805
 80090f8:	08009805 	.word	0x08009805
 80090fc:	08009805 	.word	0x08009805
 8009100:	08009805 	.word	0x08009805
 8009104:	08009805 	.word	0x08009805
 8009108:	08009805 	.word	0x08009805
 800910c:	08009805 	.word	0x08009805
 8009110:	08009805 	.word	0x08009805
 8009114:	08009805 	.word	0x08009805
 8009118:	08009805 	.word	0x08009805
 800911c:	08009805 	.word	0x08009805
 8009120:	08009805 	.word	0x08009805
 8009124:	08009805 	.word	0x08009805
 8009128:	08009805 	.word	0x08009805
 800912c:	08009805 	.word	0x08009805
 8009130:	08009739 	.word	0x08009739
 8009134:	08009805 	.word	0x08009805
 8009138:	08009805 	.word	0x08009805
 800913c:	08009805 	.word	0x08009805
 8009140:	08009805 	.word	0x08009805
 8009144:	08009805 	.word	0x08009805
 8009148:	08009805 	.word	0x08009805
 800914c:	08009805 	.word	0x08009805
 8009150:	08009805 	.word	0x08009805
 8009154:	08009805 	.word	0x08009805
 8009158:	08009805 	.word	0x08009805
 800915c:	08009805 	.word	0x08009805
 8009160:	08009805 	.word	0x08009805
 8009164:	08009805 	.word	0x08009805
 8009168:	08009805 	.word	0x08009805
 800916c:	08009805 	.word	0x08009805
 8009170:	08009805 	.word	0x08009805
 8009174:	08009805 	.word	0x08009805
 8009178:	08009805 	.word	0x08009805
 800917c:	08009805 	.word	0x08009805
 8009180:	08009805 	.word	0x08009805
 8009184:	08009805 	.word	0x08009805
 8009188:	08009805 	.word	0x08009805
 800918c:	08009805 	.word	0x08009805
 8009190:	08009805 	.word	0x08009805
 8009194:	08009805 	.word	0x08009805
 8009198:	08009805 	.word	0x08009805
 800919c:	08009805 	.word	0x08009805
 80091a0:	08009805 	.word	0x08009805
 80091a4:	08009805 	.word	0x08009805
 80091a8:	08009805 	.word	0x08009805
 80091ac:	08009805 	.word	0x08009805
 80091b0:	08009805 	.word	0x08009805
 80091b4:	08009805 	.word	0x08009805
 80091b8:	08009805 	.word	0x08009805
 80091bc:	08009805 	.word	0x08009805
 80091c0:	08009805 	.word	0x08009805
 80091c4:	08009805 	.word	0x08009805
 80091c8:	08009805 	.word	0x08009805
 80091cc:	08009805 	.word	0x08009805
 80091d0:	08009805 	.word	0x08009805
 80091d4:	08009805 	.word	0x08009805
 80091d8:	08009805 	.word	0x08009805
 80091dc:	08009805 	.word	0x08009805
 80091e0:	08009805 	.word	0x08009805
 80091e4:	08009805 	.word	0x08009805
 80091e8:	08009805 	.word	0x08009805
 80091ec:	08009805 	.word	0x08009805
 80091f0:	08009805 	.word	0x08009805
 80091f4:	08009805 	.word	0x08009805
 80091f8:	08009805 	.word	0x08009805
 80091fc:	08009805 	.word	0x08009805
 8009200:	08009805 	.word	0x08009805
 8009204:	08009805 	.word	0x08009805
 8009208:	08009805 	.word	0x08009805
 800920c:	08009805 	.word	0x08009805
 8009210:	08009805 	.word	0x08009805
 8009214:	08009805 	.word	0x08009805
 8009218:	08009805 	.word	0x08009805
 800921c:	08009805 	.word	0x08009805
 8009220:	08009805 	.word	0x08009805
 8009224:	08009805 	.word	0x08009805
 8009228:	08009805 	.word	0x08009805
 800922c:	08009805 	.word	0x08009805
 8009230:	08009805 	.word	0x08009805
 8009234:	08009805 	.word	0x08009805
 8009238:	08009805 	.word	0x08009805
 800923c:	08009805 	.word	0x08009805
 8009240:	08009805 	.word	0x08009805
 8009244:	08009805 	.word	0x08009805
 8009248:	08009805 	.word	0x08009805
 800924c:	08009805 	.word	0x08009805
 8009250:	08009805 	.word	0x08009805
 8009254:	08009805 	.word	0x08009805
 8009258:	0800973d 	.word	0x0800973d
 800925c:	08009741 	.word	0x08009741
 8009260:	08009745 	.word	0x08009745
 8009264:	08009749 	.word	0x08009749
 8009268:	0800974d 	.word	0x0800974d
 800926c:	08009751 	.word	0x08009751
 8009270:	08009805 	.word	0x08009805
 8009274:	08009755 	.word	0x08009755
 8009278:	08009759 	.word	0x08009759
 800927c:	08009805 	.word	0x08009805
 8009280:	08009805 	.word	0x08009805
 8009284:	08009805 	.word	0x08009805
 8009288:	08009805 	.word	0x08009805
 800928c:	08009805 	.word	0x08009805
 8009290:	08009805 	.word	0x08009805
 8009294:	08009805 	.word	0x08009805
 8009298:	08009805 	.word	0x08009805
 800929c:	08009805 	.word	0x08009805
 80092a0:	08009805 	.word	0x08009805
 80092a4:	08009805 	.word	0x08009805
 80092a8:	08009805 	.word	0x08009805
 80092ac:	08009805 	.word	0x08009805
 80092b0:	08009805 	.word	0x08009805
 80092b4:	08009805 	.word	0x08009805
 80092b8:	08009805 	.word	0x08009805
 80092bc:	08009805 	.word	0x08009805
 80092c0:	08009805 	.word	0x08009805
 80092c4:	08009805 	.word	0x08009805
 80092c8:	08009805 	.word	0x08009805
 80092cc:	08009805 	.word	0x08009805
 80092d0:	08009805 	.word	0x08009805
 80092d4:	08009805 	.word	0x08009805
 80092d8:	08009805 	.word	0x08009805
 80092dc:	08009805 	.word	0x08009805
 80092e0:	08009805 	.word	0x08009805
 80092e4:	08009805 	.word	0x08009805
 80092e8:	08009805 	.word	0x08009805
 80092ec:	08009805 	.word	0x08009805
 80092f0:	08009805 	.word	0x08009805
 80092f4:	08009805 	.word	0x08009805
 80092f8:	08009805 	.word	0x08009805
 80092fc:	08009805 	.word	0x08009805
 8009300:	08009805 	.word	0x08009805
 8009304:	08009805 	.word	0x08009805
 8009308:	08009805 	.word	0x08009805
 800930c:	08009805 	.word	0x08009805
 8009310:	08009805 	.word	0x08009805
 8009314:	08009805 	.word	0x08009805
 8009318:	08009805 	.word	0x08009805
 800931c:	08009805 	.word	0x08009805
 8009320:	08009805 	.word	0x08009805
 8009324:	08009805 	.word	0x08009805
 8009328:	08009805 	.word	0x08009805
 800932c:	08009805 	.word	0x08009805
 8009330:	08009805 	.word	0x08009805
 8009334:	08009805 	.word	0x08009805
 8009338:	08009805 	.word	0x08009805
 800933c:	08009805 	.word	0x08009805
 8009340:	08009805 	.word	0x08009805
 8009344:	08009805 	.word	0x08009805
 8009348:	08009805 	.word	0x08009805
 800934c:	08009805 	.word	0x08009805
 8009350:	08009805 	.word	0x08009805
 8009354:	08009805 	.word	0x08009805
 8009358:	08009805 	.word	0x08009805
 800935c:	08009805 	.word	0x08009805
 8009360:	08009805 	.word	0x08009805
 8009364:	08009805 	.word	0x08009805
 8009368:	08009805 	.word	0x08009805
 800936c:	08009805 	.word	0x08009805
 8009370:	08009805 	.word	0x08009805
 8009374:	08009805 	.word	0x08009805
 8009378:	08009805 	.word	0x08009805
 800937c:	08009805 	.word	0x08009805
 8009380:	08009805 	.word	0x08009805
 8009384:	08009805 	.word	0x08009805
 8009388:	08009805 	.word	0x08009805
 800938c:	08009805 	.word	0x08009805
 8009390:	08009805 	.word	0x08009805
 8009394:	08009805 	.word	0x08009805
 8009398:	08009805 	.word	0x08009805
 800939c:	08009805 	.word	0x08009805
 80093a0:	08009805 	.word	0x08009805
 80093a4:	08009805 	.word	0x08009805
 80093a8:	08009805 	.word	0x08009805
 80093ac:	08009805 	.word	0x08009805
 80093b0:	08009805 	.word	0x08009805
 80093b4:	08009805 	.word	0x08009805
 80093b8:	08009805 	.word	0x08009805
 80093bc:	08009805 	.word	0x08009805
 80093c0:	08009805 	.word	0x08009805
 80093c4:	08009805 	.word	0x08009805
 80093c8:	08009805 	.word	0x08009805
 80093cc:	08009805 	.word	0x08009805
 80093d0:	08009805 	.word	0x08009805
 80093d4:	08009805 	.word	0x08009805
 80093d8:	08009805 	.word	0x08009805
 80093dc:	08009805 	.word	0x08009805
 80093e0:	08009805 	.word	0x08009805
 80093e4:	08009805 	.word	0x08009805
 80093e8:	0800975d 	.word	0x0800975d
 80093ec:	08009761 	.word	0x08009761
 80093f0:	08009765 	.word	0x08009765
 80093f4:	08009769 	.word	0x08009769
 80093f8:	0800976d 	.word	0x0800976d
 80093fc:	08009771 	.word	0x08009771
 8009400:	08009775 	.word	0x08009775
 8009404:	08009779 	.word	0x08009779
 8009408:	0800977d 	.word	0x0800977d
 800940c:	08009781 	.word	0x08009781
 8009410:	08009785 	.word	0x08009785
 8009414:	08009789 	.word	0x08009789
 8009418:	0800978d 	.word	0x0800978d
 800941c:	08009791 	.word	0x08009791
 8009420:	08009795 	.word	0x08009795
 8009424:	08009799 	.word	0x08009799
 8009428:	0800979d 	.word	0x0800979d
 800942c:	080097a1 	.word	0x080097a1
 8009430:	080097a5 	.word	0x080097a5
 8009434:	08009805 	.word	0x08009805
 8009438:	08009805 	.word	0x08009805
 800943c:	080097a9 	.word	0x080097a9
 8009440:	080097ad 	.word	0x080097ad
 8009444:	080097b1 	.word	0x080097b1
 8009448:	080097b5 	.word	0x080097b5
 800944c:	08009805 	.word	0x08009805
 8009450:	080097b9 	.word	0x080097b9
 8009454:	08009805 	.word	0x08009805
 8009458:	080097bd 	.word	0x080097bd
 800945c:	080097c1 	.word	0x080097c1
 8009460:	08009805 	.word	0x08009805
 8009464:	080097c5 	.word	0x080097c5
 8009468:	08009805 	.word	0x08009805
 800946c:	08009805 	.word	0x08009805
 8009470:	08009805 	.word	0x08009805
 8009474:	08009805 	.word	0x08009805
 8009478:	08009805 	.word	0x08009805
 800947c:	08009805 	.word	0x08009805
 8009480:	08009805 	.word	0x08009805
 8009484:	08009805 	.word	0x08009805
 8009488:	08009805 	.word	0x08009805
 800948c:	08009805 	.word	0x08009805
 8009490:	08009805 	.word	0x08009805
 8009494:	08009805 	.word	0x08009805
 8009498:	080097c9 	.word	0x080097c9
 800949c:	08009805 	.word	0x08009805
 80094a0:	08009805 	.word	0x08009805
 80094a4:	08009805 	.word	0x08009805
 80094a8:	08009805 	.word	0x08009805
 80094ac:	08009805 	.word	0x08009805
 80094b0:	08009805 	.word	0x08009805
 80094b4:	080097cd 	.word	0x080097cd
 80094b8:	08009805 	.word	0x08009805
 80094bc:	08009805 	.word	0x08009805
 80094c0:	08009805 	.word	0x08009805
 80094c4:	08009805 	.word	0x08009805
 80094c8:	08009805 	.word	0x08009805
 80094cc:	08009805 	.word	0x08009805
 80094d0:	08009805 	.word	0x08009805
 80094d4:	08009805 	.word	0x08009805
 80094d8:	08009805 	.word	0x08009805
 80094dc:	08009805 	.word	0x08009805
 80094e0:	08009805 	.word	0x08009805
 80094e4:	08009805 	.word	0x08009805
 80094e8:	08009805 	.word	0x08009805
 80094ec:	08009805 	.word	0x08009805
 80094f0:	08009805 	.word	0x08009805
 80094f4:	08009805 	.word	0x08009805
 80094f8:	08009805 	.word	0x08009805
 80094fc:	08009805 	.word	0x08009805
 8009500:	08009805 	.word	0x08009805
 8009504:	08009805 	.word	0x08009805
 8009508:	08009805 	.word	0x08009805
 800950c:	08009805 	.word	0x08009805
 8009510:	08009805 	.word	0x08009805
 8009514:	08009805 	.word	0x08009805
 8009518:	08009805 	.word	0x08009805
 800951c:	08009805 	.word	0x08009805
 8009520:	08009805 	.word	0x08009805
 8009524:	08009805 	.word	0x08009805
 8009528:	08009805 	.word	0x08009805
 800952c:	08009805 	.word	0x08009805
 8009530:	08009805 	.word	0x08009805
 8009534:	08009805 	.word	0x08009805
 8009538:	08009805 	.word	0x08009805
 800953c:	08009805 	.word	0x08009805
 8009540:	08009805 	.word	0x08009805
 8009544:	08009805 	.word	0x08009805
 8009548:	08009805 	.word	0x08009805
 800954c:	08009805 	.word	0x08009805
 8009550:	08009805 	.word	0x08009805
 8009554:	08009805 	.word	0x08009805
 8009558:	08009805 	.word	0x08009805
 800955c:	08009805 	.word	0x08009805
 8009560:	08009805 	.word	0x08009805
 8009564:	08009805 	.word	0x08009805
 8009568:	08009805 	.word	0x08009805
 800956c:	08009805 	.word	0x08009805
 8009570:	08009805 	.word	0x08009805
 8009574:	080097d1 	.word	0x080097d1
 8009578:	080097d5 	.word	0x080097d5
 800957c:	080097d9 	.word	0x080097d9
 8009580:	080097dd 	.word	0x080097dd
 8009584:	080097e1 	.word	0x080097e1
 8009588:	080097e5 	.word	0x080097e5
 800958c:	080097e9 	.word	0x080097e9
 8009590:	080097ed 	.word	0x080097ed
 8009594:	080097f1 	.word	0x080097f1
 8009598:	080097f5 	.word	0x080097f5
 800959c:	08009805 	.word	0x08009805
 80095a0:	080097f9 	.word	0x080097f9
 80095a4:	080097fd 	.word	0x080097fd
 80095a8:	08009805 	.word	0x08009805
 80095ac:	08009805 	.word	0x08009805
 80095b0:	08009805 	.word	0x08009805
 80095b4:	08009805 	.word	0x08009805
 80095b8:	08009805 	.word	0x08009805
 80095bc:	08009805 	.word	0x08009805
 80095c0:	08009805 	.word	0x08009805
 80095c4:	08009805 	.word	0x08009805
 80095c8:	08009805 	.word	0x08009805
 80095cc:	08009805 	.word	0x08009805
 80095d0:	08009805 	.word	0x08009805
 80095d4:	08009805 	.word	0x08009805
 80095d8:	08009805 	.word	0x08009805
 80095dc:	08009805 	.word	0x08009805
 80095e0:	08009805 	.word	0x08009805
 80095e4:	08009805 	.word	0x08009805
 80095e8:	08009805 	.word	0x08009805
 80095ec:	08009805 	.word	0x08009805
 80095f0:	08009805 	.word	0x08009805
 80095f4:	08009805 	.word	0x08009805
 80095f8:	08009805 	.word	0x08009805
 80095fc:	08009805 	.word	0x08009805
 8009600:	08009805 	.word	0x08009805
 8009604:	08009805 	.word	0x08009805
 8009608:	08009805 	.word	0x08009805
 800960c:	08009805 	.word	0x08009805
 8009610:	08009805 	.word	0x08009805
 8009614:	08009805 	.word	0x08009805
 8009618:	08009805 	.word	0x08009805
 800961c:	08009805 	.word	0x08009805
 8009620:	08009805 	.word	0x08009805
 8009624:	08009805 	.word	0x08009805
 8009628:	08009805 	.word	0x08009805
 800962c:	08009805 	.word	0x08009805
 8009630:	08009805 	.word	0x08009805
 8009634:	08009805 	.word	0x08009805
 8009638:	08009805 	.word	0x08009805
 800963c:	08009805 	.word	0x08009805
 8009640:	08009805 	.word	0x08009805
 8009644:	08009805 	.word	0x08009805
 8009648:	08009805 	.word	0x08009805
 800964c:	08009805 	.word	0x08009805
 8009650:	08009805 	.word	0x08009805
 8009654:	08009805 	.word	0x08009805
 8009658:	08009805 	.word	0x08009805
 800965c:	08009805 	.word	0x08009805
 8009660:	08009805 	.word	0x08009805
 8009664:	08009805 	.word	0x08009805
 8009668:	08009805 	.word	0x08009805
 800966c:	08009805 	.word	0x08009805
 8009670:	08009805 	.word	0x08009805
 8009674:	08009805 	.word	0x08009805
 8009678:	08009805 	.word	0x08009805
 800967c:	08009805 	.word	0x08009805
 8009680:	08009805 	.word	0x08009805
 8009684:	08009805 	.word	0x08009805
 8009688:	08009805 	.word	0x08009805
 800968c:	08009805 	.word	0x08009805
 8009690:	08009805 	.word	0x08009805
 8009694:	08009805 	.word	0x08009805
 8009698:	08009805 	.word	0x08009805
 800969c:	08009805 	.word	0x08009805
 80096a0:	08009805 	.word	0x08009805
 80096a4:	08009805 	.word	0x08009805
 80096a8:	08009805 	.word	0x08009805
 80096ac:	08009805 	.word	0x08009805
 80096b0:	08009805 	.word	0x08009805
 80096b4:	08009805 	.word	0x08009805
 80096b8:	08009805 	.word	0x08009805
 80096bc:	08009805 	.word	0x08009805
 80096c0:	08009805 	.word	0x08009805
 80096c4:	08009805 	.word	0x08009805
 80096c8:	08009805 	.word	0x08009805
 80096cc:	08009805 	.word	0x08009805
 80096d0:	08009805 	.word	0x08009805
 80096d4:	08009805 	.word	0x08009805
 80096d8:	08009805 	.word	0x08009805
 80096dc:	08009805 	.word	0x08009805
 80096e0:	08009805 	.word	0x08009805
 80096e4:	08009805 	.word	0x08009805
 80096e8:	08009805 	.word	0x08009805
 80096ec:	08009805 	.word	0x08009805
 80096f0:	08009805 	.word	0x08009805
 80096f4:	08009805 	.word	0x08009805
 80096f8:	08009805 	.word	0x08009805
 80096fc:	08009805 	.word	0x08009805
 8009700:	08009805 	.word	0x08009805
 8009704:	08009801 	.word	0x08009801
    case 100: return "Continue";
 8009708:	4b42      	ldr	r3, [pc, #264]	@ (8009814 <mg_http_status_code_str+0x8f8>)
 800970a:	e07c      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 800970c:	4b42      	ldr	r3, [pc, #264]	@ (8009818 <mg_http_status_code_str+0x8fc>)
 800970e:	e07a      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 8009710:	4b42      	ldr	r3, [pc, #264]	@ (800981c <mg_http_status_code_str+0x900>)
 8009712:	e078      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 8009714:	4b42      	ldr	r3, [pc, #264]	@ (8009820 <mg_http_status_code_str+0x904>)
 8009716:	e076      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8009718:	4b42      	ldr	r3, [pc, #264]	@ (8009824 <mg_http_status_code_str+0x908>)
 800971a:	e074      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 800971c:	4b42      	ldr	r3, [pc, #264]	@ (8009828 <mg_http_status_code_str+0x90c>)
 800971e:	e072      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8009720:	4b42      	ldr	r3, [pc, #264]	@ (800982c <mg_http_status_code_str+0x910>)
 8009722:	e070      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 8009724:	4b42      	ldr	r3, [pc, #264]	@ (8009830 <mg_http_status_code_str+0x914>)
 8009726:	e06e      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8009728:	4b42      	ldr	r3, [pc, #264]	@ (8009834 <mg_http_status_code_str+0x918>)
 800972a:	e06c      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 800972c:	4b42      	ldr	r3, [pc, #264]	@ (8009838 <mg_http_status_code_str+0x91c>)
 800972e:	e06a      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8009730:	4b42      	ldr	r3, [pc, #264]	@ (800983c <mg_http_status_code_str+0x920>)
 8009732:	e068      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 8009734:	4b42      	ldr	r3, [pc, #264]	@ (8009840 <mg_http_status_code_str+0x924>)
 8009736:	e066      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8009738:	4b42      	ldr	r3, [pc, #264]	@ (8009844 <mg_http_status_code_str+0x928>)
 800973a:	e064      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 800973c:	4b42      	ldr	r3, [pc, #264]	@ (8009848 <mg_http_status_code_str+0x92c>)
 800973e:	e062      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8009740:	4b42      	ldr	r3, [pc, #264]	@ (800984c <mg_http_status_code_str+0x930>)
 8009742:	e060      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 8009744:	4b42      	ldr	r3, [pc, #264]	@ (8009850 <mg_http_status_code_str+0x934>)
 8009746:	e05e      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8009748:	4b42      	ldr	r3, [pc, #264]	@ (8009854 <mg_http_status_code_str+0x938>)
 800974a:	e05c      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 800974c:	4b42      	ldr	r3, [pc, #264]	@ (8009858 <mg_http_status_code_str+0x93c>)
 800974e:	e05a      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8009750:	4b42      	ldr	r3, [pc, #264]	@ (800985c <mg_http_status_code_str+0x940>)
 8009752:	e058      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8009754:	4b42      	ldr	r3, [pc, #264]	@ (8009860 <mg_http_status_code_str+0x944>)
 8009756:	e056      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8009758:	4b42      	ldr	r3, [pc, #264]	@ (8009864 <mg_http_status_code_str+0x948>)
 800975a:	e054      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 800975c:	4b42      	ldr	r3, [pc, #264]	@ (8009868 <mg_http_status_code_str+0x94c>)
 800975e:	e052      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8009760:	4b42      	ldr	r3, [pc, #264]	@ (800986c <mg_http_status_code_str+0x950>)
 8009762:	e050      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8009764:	4b42      	ldr	r3, [pc, #264]	@ (8009870 <mg_http_status_code_str+0x954>)
 8009766:	e04e      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8009768:	4b42      	ldr	r3, [pc, #264]	@ (8009874 <mg_http_status_code_str+0x958>)
 800976a:	e04c      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 800976c:	4b42      	ldr	r3, [pc, #264]	@ (8009878 <mg_http_status_code_str+0x95c>)
 800976e:	e04a      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8009770:	4b42      	ldr	r3, [pc, #264]	@ (800987c <mg_http_status_code_str+0x960>)
 8009772:	e048      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8009774:	4b42      	ldr	r3, [pc, #264]	@ (8009880 <mg_http_status_code_str+0x964>)
 8009776:	e046      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8009778:	4b42      	ldr	r3, [pc, #264]	@ (8009884 <mg_http_status_code_str+0x968>)
 800977a:	e044      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 800977c:	4b42      	ldr	r3, [pc, #264]	@ (8009888 <mg_http_status_code_str+0x96c>)
 800977e:	e042      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8009780:	4b42      	ldr	r3, [pc, #264]	@ (800988c <mg_http_status_code_str+0x970>)
 8009782:	e040      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8009784:	4b42      	ldr	r3, [pc, #264]	@ (8009890 <mg_http_status_code_str+0x974>)
 8009786:	e03e      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8009788:	4b42      	ldr	r3, [pc, #264]	@ (8009894 <mg_http_status_code_str+0x978>)
 800978a:	e03c      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 800978c:	4b42      	ldr	r3, [pc, #264]	@ (8009898 <mg_http_status_code_str+0x97c>)
 800978e:	e03a      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8009790:	4b42      	ldr	r3, [pc, #264]	@ (800989c <mg_http_status_code_str+0x980>)
 8009792:	e038      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8009794:	4b42      	ldr	r3, [pc, #264]	@ (80098a0 <mg_http_status_code_str+0x984>)
 8009796:	e036      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8009798:	4b42      	ldr	r3, [pc, #264]	@ (80098a4 <mg_http_status_code_str+0x988>)
 800979a:	e034      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 800979c:	4b42      	ldr	r3, [pc, #264]	@ (80098a8 <mg_http_status_code_str+0x98c>)
 800979e:	e032      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 80097a0:	4b42      	ldr	r3, [pc, #264]	@ (80098ac <mg_http_status_code_str+0x990>)
 80097a2:	e030      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 80097a4:	4b42      	ldr	r3, [pc, #264]	@ (80098b0 <mg_http_status_code_str+0x994>)
 80097a6:	e02e      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 80097a8:	4b42      	ldr	r3, [pc, #264]	@ (80098b4 <mg_http_status_code_str+0x998>)
 80097aa:	e02c      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 80097ac:	4b42      	ldr	r3, [pc, #264]	@ (80098b8 <mg_http_status_code_str+0x99c>)
 80097ae:	e02a      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 80097b0:	4b42      	ldr	r3, [pc, #264]	@ (80098bc <mg_http_status_code_str+0x9a0>)
 80097b2:	e028      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 80097b4:	4b42      	ldr	r3, [pc, #264]	@ (80098c0 <mg_http_status_code_str+0x9a4>)
 80097b6:	e026      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 80097b8:	4b42      	ldr	r3, [pc, #264]	@ (80098c4 <mg_http_status_code_str+0x9a8>)
 80097ba:	e024      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 80097bc:	4b42      	ldr	r3, [pc, #264]	@ (80098c8 <mg_http_status_code_str+0x9ac>)
 80097be:	e022      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 80097c0:	4b42      	ldr	r3, [pc, #264]	@ (80098cc <mg_http_status_code_str+0x9b0>)
 80097c2:	e020      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 80097c4:	4b42      	ldr	r3, [pc, #264]	@ (80098d0 <mg_http_status_code_str+0x9b4>)
 80097c6:	e01e      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80097c8:	4b42      	ldr	r3, [pc, #264]	@ (80098d4 <mg_http_status_code_str+0x9b8>)
 80097ca:	e01c      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80097cc:	4b42      	ldr	r3, [pc, #264]	@ (80098d8 <mg_http_status_code_str+0x9bc>)
 80097ce:	e01a      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80097d0:	4b42      	ldr	r3, [pc, #264]	@ (80098dc <mg_http_status_code_str+0x9c0>)
 80097d2:	e018      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80097d4:	4b42      	ldr	r3, [pc, #264]	@ (80098e0 <mg_http_status_code_str+0x9c4>)
 80097d6:	e016      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 80097d8:	4b42      	ldr	r3, [pc, #264]	@ (80098e4 <mg_http_status_code_str+0x9c8>)
 80097da:	e014      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 80097dc:	4b42      	ldr	r3, [pc, #264]	@ (80098e8 <mg_http_status_code_str+0x9cc>)
 80097de:	e012      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 80097e0:	4b42      	ldr	r3, [pc, #264]	@ (80098ec <mg_http_status_code_str+0x9d0>)
 80097e2:	e010      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 80097e4:	4b42      	ldr	r3, [pc, #264]	@ (80098f0 <mg_http_status_code_str+0x9d4>)
 80097e6:	e00e      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 80097e8:	4b42      	ldr	r3, [pc, #264]	@ (80098f4 <mg_http_status_code_str+0x9d8>)
 80097ea:	e00c      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 80097ec:	4b42      	ldr	r3, [pc, #264]	@ (80098f8 <mg_http_status_code_str+0x9dc>)
 80097ee:	e00a      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 80097f0:	4b42      	ldr	r3, [pc, #264]	@ (80098fc <mg_http_status_code_str+0x9e0>)
 80097f2:	e008      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 80097f4:	4b42      	ldr	r3, [pc, #264]	@ (8009900 <mg_http_status_code_str+0x9e4>)
 80097f6:	e006      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 80097f8:	4b42      	ldr	r3, [pc, #264]	@ (8009904 <mg_http_status_code_str+0x9e8>)
 80097fa:	e004      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 80097fc:	4b42      	ldr	r3, [pc, #264]	@ (8009908 <mg_http_status_code_str+0x9ec>)
 80097fe:	e002      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 8009800:	4b42      	ldr	r3, [pc, #264]	@ (800990c <mg_http_status_code_str+0x9f0>)
 8009802:	e000      	b.n	8009806 <mg_http_status_code_str+0x8ea>
    default: return "";
 8009804:	4b42      	ldr	r3, [pc, #264]	@ (8009910 <mg_http_status_code_str+0x9f4>)
  }
}
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	08024818 	.word	0x08024818
 8009818:	08024824 	.word	0x08024824
 800981c:	08024838 	.word	0x08024838
 8009820:	08024844 	.word	0x08024844
 8009824:	08024848 	.word	0x08024848
 8009828:	08024850 	.word	0x08024850
 800982c:	0802485c 	.word	0x0802485c
 8009830:	0802487c 	.word	0x0802487c
 8009834:	08024888 	.word	0x08024888
 8009838:	08024898 	.word	0x08024898
 800983c:	080248a8 	.word	0x080248a8
 8009840:	080248b8 	.word	0x080248b8
 8009844:	080248cc 	.word	0x080248cc
 8009848:	080248d4 	.word	0x080248d4
 800984c:	080248e8 	.word	0x080248e8
 8009850:	080248fc 	.word	0x080248fc
 8009854:	08024904 	.word	0x08024904
 8009858:	08024910 	.word	0x08024910
 800985c:	08024920 	.word	0x08024920
 8009860:	0802492c 	.word	0x0802492c
 8009864:	08024940 	.word	0x08024940
 8009868:	08024954 	.word	0x08024954
 800986c:	08024960 	.word	0x08024960
 8009870:	08024970 	.word	0x08024970
 8009874:	08024984 	.word	0x08024984
 8009878:	08024990 	.word	0x08024990
 800987c:	0802499c 	.word	0x0802499c
 8009880:	080249b0 	.word	0x080249b0
 8009884:	080249c0 	.word	0x080249c0
 8009888:	080249e0 	.word	0x080249e0
 800988c:	080249f0 	.word	0x080249f0
 8009890:	080249fc 	.word	0x080249fc
 8009894:	08024a04 	.word	0x08024a04
 8009898:	08024a14 	.word	0x08024a14
 800989c:	08024a28 	.word	0x08024a28
 80098a0:	08024a3c 	.word	0x08024a3c
 80098a4:	08024a54 	.word	0x08024a54
 80098a8:	08024a6c 	.word	0x08024a6c
 80098ac:	08024a8c 	.word	0x08024a8c
 80098b0:	08024aa0 	.word	0x08024aa0
 80098b4:	08024ab0 	.word	0x08024ab0
 80098b8:	08024ac4 	.word	0x08024ac4
 80098bc:	08024adc 	.word	0x08024adc
 80098c0:	08024ae4 	.word	0x08024ae4
 80098c4:	08024af8 	.word	0x08024af8
 80098c8:	08024b0c 	.word	0x08024b0c
 80098cc:	08024b24 	.word	0x08024b24
 80098d0:	08024b38 	.word	0x08024b38
 80098d4:	08024b58 	.word	0x08024b58
 80098d8:	08024b7c 	.word	0x08024b7c
 80098dc:	08024b9c 	.word	0x08024b9c
 80098e0:	08024bb4 	.word	0x08024bb4
 80098e4:	08024bcc 	.word	0x08024bcc
 80098e8:	08024bdc 	.word	0x08024bdc
 80098ec:	08024be8 	.word	0x08024be8
 80098f0:	08024bfc 	.word	0x08024bfc
 80098f4:	08024c0c 	.word	0x08024c0c
 80098f8:	08024c28 	.word	0x08024c28
 80098fc:	08024c40 	.word	0x08024c40
 8009900:	08024c58 	.word	0x08024c58
 8009904:	08024c68 	.word	0x08024c68
 8009908:	08024c78 	.word	0x08024c78
 800990c:	08024c98 	.word	0x08024c98
 8009910:	08024cb8 	.word	0x08024cb8

08009914 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 8009914:	b408      	push	{r3}
 8009916:	b580      	push	{r7, lr}
 8009918:	b08b      	sub	sp, #44	@ 0x2c
 800991a:	af02      	add	r7, sp, #8
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 8009922:	68b8      	ldr	r0, [r7, #8]
 8009924:	f7ff fafa 	bl	8008f1c <mg_http_status_code_str>
 8009928:	4602      	mov	r2, r0
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <mg_http_reply+0x20>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	e000      	b.n	8009936 <mg_http_reply+0x22>
 8009934:	4b1f      	ldr	r3, [pc, #124]	@ (80099b4 <mg_http_reply+0xa0>)
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	4613      	mov	r3, r2
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	491e      	ldr	r1, [pc, #120]	@ (80099b8 <mg_http_reply+0xa4>)
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f002 fed4 	bl	800c6ec <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009948:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 800994a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800994e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8009956:	f107 0314 	add.w	r3, r7, #20
 800995a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800995c:	4817      	ldr	r0, [pc, #92]	@ (80099bc <mg_http_reply+0xa8>)
 800995e:	f7fd feeb 	bl	8007738 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009966:	2b10      	cmp	r3, #16
 8009968:	d916      	bls.n	8009998 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	3b0f      	subs	r3, #15
 8009972:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 800997c:	4a10      	ldr	r2, [pc, #64]	@ (80099c0 <mg_http_reply+0xac>)
 800997e:	210b      	movs	r1, #11
 8009980:	f006 ffde 	bl	8010940 <mg_snprintf>
 8009984:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800998a:	69f9      	ldr	r1, [r7, #28]
 800998c:	69bb      	ldr	r3, [r7, #24]
 800998e:	440b      	add	r3, r1
 8009990:	3b0f      	subs	r3, #15
 8009992:	4413      	add	r3, r2
 8009994:	2220      	movs	r2, #32
 8009996:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800999e:	f023 0301 	bic.w	r3, r3, #1
 80099a2:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 80099a6:	bf00      	nop
 80099a8:	3724      	adds	r7, #36	@ 0x24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099b0:	b001      	add	sp, #4
 80099b2:	4770      	bx	lr
 80099b4:	08024cb8 	.word	0x08024cb8
 80099b8:	08024cbc 	.word	0x08024cbc
 80099bc:	080108d1 	.word	0x080108d1
 80099c0:	08024cf0 	.word	0x08024cf0

080099c4 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *);
static void restore_http_cb(struct mg_connection *c) {
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099d2:	4618      	mov	r0, r3
 80099d4:	f7fe fa7c 	bl	8007ed0 <mg_fs_close>
  c->pfn_data = NULL;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->pfn = http_cb;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a07      	ldr	r2, [pc, #28]	@ (8009a00 <restore_http_cb+0x3c>)
 80099e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->is_resp = 0;
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 80099ee:	f023 0301 	bic.w	r3, r3, #1
 80099f2:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	0800ad35 	.word	0x0800ad35

08009a04 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8009a04:	b5b0      	push	{r4, r5, r7, lr}
 8009a06:	b088      	sub	sp, #32
 8009a08:	af04      	add	r7, sp, #16
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	461c      	mov	r4, r3
 8009a16:	4615      	mov	r5, r2
 8009a18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009a1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a20:	e9cd 2300 	strd	r2, r3, [sp]
 8009a24:	4a04      	ldr	r2, [pc, #16]	@ (8009a38 <mg_http_etag+0x34>)
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	f006 ff89 	bl	8010940 <mg_snprintf>
  return buf;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bdb0      	pop	{r4, r5, r7, pc}
 8009a38:	08024cf8 	.word	0x08024cf8

08009a3c <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data) {
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08a      	sub	sp, #40	@ 0x28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	2b08      	cmp	r3, #8
 8009a4c:	d002      	beq.n	8009a54 <static_cb+0x18>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d148      	bne.n	8009ae6 <static_cb+0xaa>
    struct mg_fd *fd = (struct mg_fd *) c->pfn_data;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a5a:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8009a5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a60:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	33a4      	adds	r3, #164	@ 0xa4
 8009a66:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a6c:	69fa      	ldr	r2, [r7, #28]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d905      	bls.n	8009a7e <static_cb+0x42>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3348      	adds	r3, #72	@ 0x48
 8009a76:	69f9      	ldr	r1, [r7, #28]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f001 fd31 	bl	800b4e0 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d234      	bcs.n	8009af4 <static_cb+0xb8>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d902      	bls.n	8009aa6 <static_cb+0x6a>
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	6a3a      	ldr	r2, [r7, #32]
 8009aae:	6810      	ldr	r0, [r2, #0]
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009ab8:	4411      	add	r1, r2
 8009aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009abc:	4798      	blx	r3
 8009abe:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	441a      	add	r2, r3
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	651a      	str	r2, [r3, #80]	@ 0x50
    *cl -= n;
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	1ad2      	subs	r2, r2, r3
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d10c      	bne.n	8009af8 <static_cb+0xbc>
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f7ff ff70 	bl	80099c4 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8009ae4:	e008      	b.n	8009af8 <static_cb+0xbc>
  } else if (ev == MG_EV_CLOSE) {
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	2b09      	cmp	r3, #9
 8009aea:	d106      	bne.n	8009afa <static_cb+0xbe>
    restore_http_cb(c);
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f7ff ff69 	bl	80099c4 <restore_http_cb>
 8009af2:	e002      	b.n	8009afa <static_cb+0xbe>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8009af4:	bf00      	nop
 8009af6:	e000      	b.n	8009afa <static_cb+0xbe>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8009af8:	bf00      	nop
  }
  (void) ev_data;
}
 8009afa:	3728      	adds	r7, #40	@ 0x28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8009b00:	b590      	push	{r4, r7, lr}
 8009b02:	b093      	sub	sp, #76	@ 0x4c
 8009b04:	af02      	add	r7, sp, #8
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	1d38      	adds	r0, r7, #4
 8009b0a:	e880 0006 	stmia.w	r0, {r1, r2}
 8009b0e:	603b      	str	r3, [r7, #0]
  struct mg_str entry, k, v, s = mg_str(extra), asterisk = mg_str_n("*", 1);
 8009b10:	f107 031c 	add.w	r3, r7, #28
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	4618      	mov	r0, r3
 8009b18:	f00a fad8 	bl	80140cc <mg_str_s>
 8009b1c:	f107 0314 	add.w	r3, r7, #20
 8009b20:	2201      	movs	r2, #1
 8009b22:	4943      	ldr	r1, [pc, #268]	@ (8009c30 <guess_content_type+0x130>)
 8009b24:	4618      	mov	r0, r3
 8009b26:	f00a faee 	bl	8014106 <mg_str_n>
  size_t i = 0;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // Shrink path to its extension only
  while (i < path.len && path.buf[path.len - i - 1] != '.') i++;
 8009b2e:	e002      	b.n	8009b36 <guess_content_type+0x36>
 8009b30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b32:	3301      	adds	r3, #1
 8009b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d208      	bcs.n	8009b50 <guess_content_type+0x50>
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	68b9      	ldr	r1, [r7, #8]
 8009b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b44:	1acb      	subs	r3, r1, r3
 8009b46:	3b01      	subs	r3, #1
 8009b48:	4413      	add	r3, r2
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b4e:	d1ef      	bne.n	8009b30 <guess_content_type+0x30>
  path.buf += path.len - i;
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b56:	1acb      	subs	r3, r1, r3
 8009b58:	4413      	add	r3, r2
 8009b5a:	607b      	str	r3, [r7, #4]
  path.len = i;
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b5e:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_span(s, &entry, &s, ',')) {
 8009b60:	e02b      	b.n	8009bba <guess_content_type+0xba>
    if (mg_span(entry, &k, &v, '=') &&
 8009b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b66:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8009b6a:	213d      	movs	r1, #61	@ 0x3d
 8009b6c:	9100      	str	r1, [sp, #0]
 8009b6e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8009b72:	c903      	ldmia	r1, {r0, r1}
 8009b74:	f00a fca8 	bl	80144c8 <mg_span>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d01d      	beq.n	8009bba <guess_content_type+0xba>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 8009b7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009b82:	cb0c      	ldmia	r3, {r2, r3}
 8009b84:	f107 0114 	add.w	r1, r7, #20
 8009b88:	c903      	ldmia	r1, {r0, r1}
 8009b8a:	f00a fb20 	bl	80141ce <mg_strcmp>
 8009b8e:	4603      	mov	r3, r0
    if (mg_span(entry, &k, &v, '=') &&
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d009      	beq.n	8009ba8 <guess_content_type+0xa8>
        (mg_strcmp(asterisk, k) == 0 || mg_strcmp(path, k) == 0))
 8009b94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009b98:	cb0c      	ldmia	r3, {r2, r3}
 8009b9a:	1d39      	adds	r1, r7, #4
 8009b9c:	c903      	ldmia	r1, {r0, r1}
 8009b9e:	f00a fb16 	bl	80141ce <mg_strcmp>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d108      	bne.n	8009bba <guess_content_type+0xba>
      return v;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	461a      	mov	r2, r3
 8009bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bb0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009bb4:	e882 0003 	stmia.w	r2, {r0, r1}
 8009bb8:	e036      	b.n	8009c28 <guess_content_type+0x128>
  while (mg_span(s, &entry, &s, ',')) {
 8009bba:	f107 031c 	add.w	r3, r7, #28
 8009bbe:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8009bc2:	212c      	movs	r1, #44	@ 0x2c
 8009bc4:	9100      	str	r1, [sp, #0]
 8009bc6:	f107 011c 	add.w	r1, r7, #28
 8009bca:	c903      	ldmia	r1, {r0, r1}
 8009bcc:	f00a fc7c 	bl	80144c8 <mg_span>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1c5      	bne.n	8009b62 <guess_content_type+0x62>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bda:	e01a      	b.n	8009c12 <guess_content_type+0x112>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8009bdc:	4a15      	ldr	r2, [pc, #84]	@ (8009c34 <guess_content_type+0x134>)
 8009bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	4413      	add	r3, r2
 8009be4:	cb0c      	ldmia	r3, {r2, r3}
 8009be6:	1d39      	adds	r1, r7, #4
 8009be8:	c903      	ldmia	r1, {r0, r1}
 8009bea:	f00a faf0 	bl	80141ce <mg_strcmp>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d10b      	bne.n	8009c0c <guess_content_type+0x10c>
 8009bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	68f9      	ldr	r1, [r7, #12]
 8009bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8009c34 <guess_content_type+0x134>)
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	00db      	lsls	r3, r3, #3
 8009c00:	4413      	add	r3, r2
 8009c02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c06:	e884 0003 	stmia.w	r4, {r0, r1}
 8009c0a:	e00d      	b.n	8009c28 <guess_content_type+0x128>
  for (i = 0; s_known_types[i].buf != NULL; i += 2) {
 8009c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c0e:	3302      	adds	r3, #2
 8009c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c12:	4a08      	ldr	r2, [pc, #32]	@ (8009c34 <guess_content_type+0x134>)
 8009c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c16:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1de      	bne.n	8009bdc <guess_content_type+0xdc>
  }

  return mg_str("text/plain; charset=utf-8");
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	4905      	ldr	r1, [pc, #20]	@ (8009c38 <guess_content_type+0x138>)
 8009c22:	4618      	mov	r0, r3
 8009c24:	f00a fa52 	bl	80140cc <mg_str_s>
}
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	3744      	adds	r7, #68	@ 0x44
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd90      	pop	{r4, r7, pc}
 8009c30:	08024f68 	.word	0x08024f68
 8009c34:	24000060 	.word	0x24000060
 8009c38:	08024de4 	.word	0x08024de4

08009c3c <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08c      	sub	sp, #48	@ 0x30
 8009c40:	af02      	add	r7, sp, #8
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	623b      	str	r3, [r7, #32]
  for (i = 0; i + 6 < s->len; i++) {
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c50:	e058      	b.n	8009d04 <getrange+0xc8>
    struct mg_str k, v = mg_str_n(s->buf + i + 6, s->len - i - 6);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	3306      	adds	r3, #6
 8009c5a:	18d1      	adds	r1, r2, r3
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	1f9a      	subs	r2, r3, #6
 8009c66:	f107 0310 	add.w	r3, r7, #16
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f00a fa4b 	bl	8014106 <mg_str_n>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c76:	4413      	add	r3, r2
 8009c78:	2206      	movs	r2, #6
 8009c7a:	4929      	ldr	r1, [pc, #164]	@ (8009d20 <getrange+0xe4>)
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f019 fd64 	bl	802374a <memcmp>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d139      	bne.n	8009cfc <getrange+0xc0>
    if (mg_span(v, &k, &v, '-')) {
 8009c88:	f107 0310 	add.w	r3, r7, #16
 8009c8c:	f107 0218 	add.w	r2, r7, #24
 8009c90:	212d      	movs	r1, #45	@ 0x2d
 8009c92:	9100      	str	r1, [sp, #0]
 8009c94:	f107 0110 	add.w	r1, r7, #16
 8009c98:	c903      	ldmia	r1, {r0, r1}
 8009c9a:	f00a fc15 	bl	80144c8 <mg_span>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d01d      	beq.n	8009ce0 <getrange+0xa4>
      if (mg_to_size_t(k, a)) numparsed++;
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	f107 0318 	add.w	r3, r7, #24
 8009caa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009cae:	f7fe fb6d 	bl	800838c <mg_to_size_t>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d002      	beq.n	8009cbe <getrange+0x82>
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	623b      	str	r3, [r7, #32]
      if (v.len > 0 && mg_to_size_t(v, b)) numparsed++;
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d026      	beq.n	8009d12 <getrange+0xd6>
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	f107 0310 	add.w	r3, r7, #16
 8009cca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009cce:	f7fe fb5d 	bl	800838c <mg_to_size_t>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d01c      	beq.n	8009d12 <getrange+0xd6>
 8009cd8:	6a3b      	ldr	r3, [r7, #32]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	623b      	str	r3, [r7, #32]
    } else {
      if (mg_to_size_t(v, a)) numparsed++;
    }
    break;
 8009cde:	e018      	b.n	8009d12 <getrange+0xd6>
      if (mg_to_size_t(v, a)) numparsed++;
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	f107 0310 	add.w	r3, r7, #16
 8009ce6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009cea:	f7fe fb4f 	bl	800838c <mg_to_size_t>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00e      	beq.n	8009d12 <getrange+0xd6>
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	623b      	str	r3, [r7, #32]
 8009cfa:	e00b      	b.n	8009d14 <getrange+0xd8>
    if (memcmp(&s->buf[i], "bytes=", 6) != 0) continue;
 8009cfc:	bf00      	nop
  for (i = 0; i + 6 < s->len; i++) {
 8009cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d00:	3301      	adds	r3, #1
 8009d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d06:	1d9a      	adds	r2, r3, #6
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d3a0      	bcc.n	8009c52 <getrange+0x16>
 8009d10:	e000      	b.n	8009d14 <getrange+0xd8>
    break;
 8009d12:	bf00      	nop
  }
  return (int) numparsed;
 8009d14:	6a3b      	ldr	r3, [r7, #32]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3728      	adds	r7, #40	@ 0x28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	08024f6c 	.word	0x08024f6c

08009d24 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8009d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d28:	b0f3      	sub	sp, #460	@ 0x1cc
 8009d2a:	af0a      	add	r7, sp, #40	@ 0x28
 8009d2c:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8009d30:	f5a4 74be 	sub.w	r4, r4, #380	@ 0x17c
 8009d34:	6020      	str	r0, [r4, #0]
 8009d36:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8009d3a:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 8009d3e:	6001      	str	r1, [r0, #0]
 8009d40:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8009d44:	f5a1 71c2 	sub.w	r1, r1, #388	@ 0x184
 8009d48:	600a      	str	r2, [r1, #0]
 8009d4a:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8009d4e:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8009d52:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8009d54:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009d58:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <mg_http_serve_file+0x4e>
 8009d64:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009d68:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	e000      	b.n	8009d74 <mg_http_serve_file+0x50>
 8009d72:	4ba4      	ldr	r3, [pc, #656]	@ (800a004 <mg_http_serve_file+0x2e0>)
 8009d74:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  struct mg_fd *fd = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
  size_t size = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  time_t mtime = 0;
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
  struct mg_str *inm = NULL;
 8009d90:	2300      	movs	r3, #0
 8009d92:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8009d96:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8009d9a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009d9e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009da2:	6819      	ldr	r1, [r3, #0]
 8009da4:	4610      	mov	r0, r2
 8009da6:	f00a f991 	bl	80140cc <mg_str_s>
 8009daa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009dae:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8009dba:	f5a2 7084 	sub.w	r0, r2, #264	@ 0x108
 8009dbe:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8009dc2:	ca06      	ldmia	r2, {r1, r2}
 8009dc4:	f7ff fe9c 	bl	8009b00 <guess_content_type>
  bool gzip = false;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b

  if (path != NULL) {
 8009dce:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009dd2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d05c      	beq.n	8009e96 <mg_http_serve_file+0x172>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8009ddc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009de0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8009de4:	4988      	ldr	r1, [pc, #544]	@ (800a008 <mg_http_serve_file+0x2e4>)
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	f7fe fd1e 	bl	8008828 <mg_http_get_header>
 8009dec:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
    if (ae != NULL) {
 8009df0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d03e      	beq.n	8009e76 <mg_http_serve_file+0x152>
      char *ae_ = mg_mprintf("%.*s", ae->len, ae->buf);
 8009df8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8009dfc:	6859      	ldr	r1, [r3, #4]
 8009dfe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	461a      	mov	r2, r3
 8009e06:	4881      	ldr	r0, [pc, #516]	@ (800a00c <mg_http_serve_file+0x2e8>)
 8009e08:	f006 fdd0 	bl	80109ac <mg_mprintf>
 8009e0c:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180
      if (ae_ != NULL && strstr(ae_, "gzip") != NULL) {
 8009e10:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d02a      	beq.n	8009e6e <mg_http_serve_file+0x14a>
 8009e18:	497d      	ldr	r1, [pc, #500]	@ (800a010 <mg_http_serve_file+0x2ec>)
 8009e1a:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8009e1e:	f019 fd0e 	bl	802383e <strstr>
 8009e22:	4603      	mov	r3, r0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d022      	beq.n	8009e6e <mg_http_serve_file+0x14a>
        mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8009e28:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009e2c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009e30:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a77      	ldr	r2, [pc, #476]	@ (800a014 <mg_http_serve_file+0x2f0>)
 8009e38:	2164      	movs	r1, #100	@ 0x64
 8009e3a:	f006 fd81 	bl	8010940 <mg_snprintf>
        fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8009e3e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8009e42:	2201      	movs	r2, #1
 8009e44:	4619      	mov	r1, r3
 8009e46:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8009e4a:	f7fe f819 	bl	8007e80 <mg_fs_open>
 8009e4e:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
        if (fd != NULL) gzip = true, path = tmp;
 8009e52:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d009      	beq.n	8009e6e <mg_http_serve_file+0x14a>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	f887 319b 	strb.w	r3, [r7, #411]	@ 0x19b
 8009e60:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009e64:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009e68:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8009e6c:	601a      	str	r2, [r3, #0]
      }
      free(ae_);
 8009e6e:	f8d7 0180 	ldr.w	r0, [r7, #384]	@ 0x180
 8009e72:	f019 f9e3 	bl	802323c <free>
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8009e76:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10b      	bne.n	8009e96 <mg_http_serve_file+0x172>
 8009e7e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009e82:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009e86:	2201      	movs	r2, #1
 8009e88:	6819      	ldr	r1, [r3, #0]
 8009e8a:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8009e8e:	f7fd fff7 	bl	8007e80 <mg_fs_open>
 8009e92:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8009e96:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d144      	bne.n	8009f28 <mg_http_serve_file+0x204>
 8009e9e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009ea2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	691b      	ldr	r3, [r3, #16]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d03c      	beq.n	8009f28 <mg_http_serve_file+0x204>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8009eae:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009eb2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	f8d7 018c 	ldr.w	r0, [r7, #396]	@ 0x18c
 8009ec2:	f7fd ffdd 	bl	8007e80 <mg_fs_open>
 8009ec6:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c
    path = opts->page404;
 8009eca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009ece:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009ed2:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8009ed6:	f5a2 72c4 	sub.w	r2, r2, #392	@ 0x188
 8009eda:	6812      	ldr	r2, [r2, #0]
 8009edc:	6912      	ldr	r2, [r2, #16]
 8009ede:	601a      	str	r2, [r3, #0]
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8009ee0:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8009ee4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009ee8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009eec:	6819      	ldr	r1, [r3, #0]
 8009eee:	4610      	mov	r0, r2
 8009ef0:	f00a f8ec 	bl	80140cc <mg_str_s>
 8009ef4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009ef8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8009f04:	f5a2 7484 	sub.w	r4, r2, #264	@ 0x108
 8009f08:	f107 0010 	add.w	r0, r7, #16
 8009f0c:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8009f10:	ca06      	ldmia	r2, {r1, r2}
 8009f12:	f7ff fdf5 	bl	8009b00 <guess_content_type>
 8009f16:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009f1a:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8009f1e:	4623      	mov	r3, r4
 8009f20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f24:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8009f28:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00f      	beq.n	8009f50 <mg_http_serve_file+0x22c>
 8009f30:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8009f34:	681c      	ldr	r4, [r3, #0]
 8009f36:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8009f3a:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 8009f3e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009f42:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009f46:	6818      	ldr	r0, [r3, #0]
 8009f48:	47a0      	blx	r4
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d114      	bne.n	8009f7a <mg_http_serve_file+0x256>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8009f50:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009f54:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009f60:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8009f64:	4b2c      	ldr	r3, [pc, #176]	@ (800a018 <mg_http_serve_file+0x2f4>)
 8009f66:	f44f 71ca 	mov.w	r1, #404	@ 0x194
 8009f6a:	6800      	ldr	r0, [r0, #0]
 8009f6c:	f7ff fcd2 	bl	8009914 <mg_http_reply>
    mg_fs_close(fd);
 8009f70:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8009f74:	f7fd ffac 	bl	8007ed0 <mg_fs_close>
 8009f78:	e190      	b.n	800a29c <mg_http_serve_file+0x578>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8009f7a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8009f7e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8009f82:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8009f86:	e9cd 2300 	strd	r2, r3, [sp]
 8009f8a:	460a      	mov	r2, r1
 8009f8c:	2140      	movs	r1, #64	@ 0x40
 8009f8e:	f7ff fd39 	bl	8009a04 <mg_http_etag>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d045      	beq.n	800a024 <mg_http_serve_file+0x300>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8009f98:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009f9c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8009fa0:	491e      	ldr	r1, [pc, #120]	@ (800a01c <mg_http_serve_file+0x2f8>)
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	f7fe fc40 	bl	8008828 <mg_http_get_header>
 8009fa8:	f8c7 0188 	str.w	r0, [r7, #392]	@ 0x188
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8009fac:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d037      	beq.n	800a024 <mg_http_serve_file+0x300>
             mg_strcasecmp(*inm, mg_str(etag)) == 0) {
 8009fb4:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8009fb8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f00a f884 	bl	80140cc <mg_str_s>
 8009fc4:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8009fc8:	f507 73b2 	add.w	r3, r7, #356	@ 0x164
 8009fcc:	cb0c      	ldmia	r3, {r2, r3}
 8009fce:	c903      	ldmia	r1, {r0, r1}
 8009fd0:	f00a f93f 	bl	8014252 <mg_strcasecmp>
 8009fd4:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d124      	bne.n	800a024 <mg_http_serve_file+0x300>
    mg_fs_close(fd);
 8009fda:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 8009fde:	f7fd ff77 	bl	8007ed0 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8009fe2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009fe6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8009ff2:	f5a3 70be 	sub.w	r0, r3, #380	@ 0x17c
 8009ff6:	4b0a      	ldr	r3, [pc, #40]	@ (800a020 <mg_http_serve_file+0x2fc>)
 8009ff8:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8009ffc:	6800      	ldr	r0, [r0, #0]
 8009ffe:	f7ff fc89 	bl	8009914 <mg_http_reply>
 800a002:	e14b      	b.n	800a29c <mg_http_serve_file+0x578>
 800a004:	24000038 	.word	0x24000038
 800a008:	08024f74 	.word	0x08024f74
 800a00c:	08024758 	.word	0x08024758
 800a010:	08024f84 	.word	0x08024f84
 800a014:	08024f8c 	.word	0x08024f8c
 800a018:	08024f94 	.word	0x08024f94
 800a01c:	08024fa0 	.word	0x08024fa0
 800a020:	08024cb8 	.word	0x08024cb8
  } else {
    int n, status = 200;
 800a024:	23c8      	movs	r3, #200	@ 0xc8
 800a026:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 800a02a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a02e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a03a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]
 800a042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a046:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 800a04a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a04e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800a052:	4995      	ldr	r1, [pc, #596]	@ (800a2a8 <mg_http_serve_file+0x584>)
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	f7fe fbe7 	bl	8008828 <mg_http_get_header>
 800a05a:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c
    range[0] = '\0';
 800a05e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a062:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800a066:	2200      	movs	r2, #0
 800a068:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 800a06a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800a06e:	2b00      	cmp	r3, #0
 800a070:	f000 808e 	beq.w	800a190 <mg_http_serve_file+0x46c>
 800a074:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800a078:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800a07c:	4619      	mov	r1, r3
 800a07e:	f8d7 017c 	ldr.w	r0, [r7, #380]	@ 0x17c
 800a082:	f7ff fddb 	bl	8009c3c <getrange>
 800a086:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
 800a08a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800a08e:	2b00      	cmp	r3, #0
 800a090:	dd7e      	ble.n	800a190 <mg_http_serve_file+0x46c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 800a092:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800a096:	2b01      	cmp	r3, #1
 800a098:	d107      	bne.n	800a0aa <mg_http_serve_file+0x386>
 800a09a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a09e:	1e5a      	subs	r2, r3, #1
 800a0a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a0a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0a8:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 800a0aa:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a0ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a0b8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d808      	bhi.n	800a0d4 <mg_http_serve_file+0x3b0>
 800a0c2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a0c6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d817      	bhi.n	800a104 <mg_http_serve_file+0x3e0>
        status = 416;
 800a0d4:	f44f 73d0 	mov.w	r3, #416	@ 0x1a0
 800a0d8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = 0;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 800a0e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	60bb      	str	r3, [r7, #8]
 800a0ea:	60fa      	str	r2, [r7, #12]
 800a0ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a0f4:	e9cd 1200 	strd	r1, r2, [sp]
 800a0f8:	4a6c      	ldr	r2, [pc, #432]	@ (800a2ac <mg_http_serve_file+0x588>)
 800a0fa:	2164      	movs	r1, #100	@ 0x64
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f006 fc1f 	bl	8010940 <mg_snprintf>
 800a102:	e045      	b.n	800a190 <mg_http_serve_file+0x46c>
                    (int64_t) size);
      } else {
        status = 206;
 800a104:	23ce      	movs	r3, #206	@ 0xce
 800a106:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        cl = r2 - r1 + 1;
 800a10a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a10e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800a112:	681a      	ldr	r2, [r3, #0]
 800a114:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a118:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	1ad3      	subs	r3, r2, r3
 800a120:	3301      	adds	r3, #1
 800a122:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
        mg_snprintf(range, sizeof(range),
 800a126:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a12a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2200      	movs	r2, #0
 800a132:	469a      	mov	sl, r3
 800a134:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800a136:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a13a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a144:	4413      	add	r3, r2
 800a146:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 800a148:	2200      	movs	r2, #0
 800a14a:	461d      	mov	r5, r3
 800a14c:	4616      	mov	r6, r2
 800a14e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a152:	2200      	movs	r2, #0
 800a154:	603b      	str	r3, [r7, #0]
 800a156:	607a      	str	r2, [r7, #4]
 800a158:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a15c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a160:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800a164:	e9cd 5602 	strd	r5, r6, [sp, #8]
 800a168:	e9cd ab00 	strd	sl, fp, [sp]
 800a16c:	4a50      	ldr	r2, [pc, #320]	@ (800a2b0 <mg_http_serve_file+0x58c>)
 800a16e:	2164      	movs	r1, #100	@ 0x64
 800a170:	4618      	mov	r0, r3
 800a172:	f006 fbe5 	bl	8010940 <mg_snprintf>
        fs->sk(fd->fd, r1);
 800a176:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800a180:	6810      	ldr	r0, [r2, #0]
 800a182:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 800a186:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800a18a:	6812      	ldr	r2, [r2, #0]
 800a18c:	4611      	mov	r1, r2
 800a18e:	4798      	blx	r3
      }
    }
    mg_printf(c,
 800a190:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800a194:	f7fe fec2 	bl	8008f1c <mg_http_status_code_str>
 800a198:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.buf,
 800a19a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a19e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1a2:	685b      	ldr	r3, [r3, #4]
    mg_printf(c,
 800a1a4:	461d      	mov	r5, r3
 800a1a6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	4698      	mov	r8, r3
 800a1b8:	4689      	mov	r9, r1
 800a1ba:	f897 319b 	ldrb.w	r3, [r7, #411]	@ 0x19b
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d001      	beq.n	800a1c6 <mg_http_serve_file+0x4a2>
 800a1c2:	493c      	ldr	r1, [pc, #240]	@ (800a2b4 <mg_http_serve_file+0x590>)
 800a1c4:	e000      	b.n	800a1c8 <mg_http_serve_file+0x4a4>
 800a1c6:	493c      	ldr	r1, [pc, #240]	@ (800a2b8 <mg_http_serve_file+0x594>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 800a1c8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a1cc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d006      	beq.n	800a1e6 <mg_http_serve_file+0x4c2>
 800a1d8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a1dc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	e000      	b.n	800a1e8 <mg_http_serve_file+0x4c4>
 800a1e6:	4b34      	ldr	r3, [pc, #208]	@ (800a2b8 <mg_http_serve_file+0x594>)
 800a1e8:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 800a1ec:	f5a0 70be 	sub.w	r0, r0, #380	@ 0x17c
 800a1f0:	9308      	str	r3, [sp, #32]
 800a1f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a1f6:	9307      	str	r3, [sp, #28]
 800a1f8:	9106      	str	r1, [sp, #24]
 800a1fa:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800a1fe:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800a202:	9302      	str	r3, [sp, #8]
 800a204:	9201      	str	r2, [sp, #4]
 800a206:	9500      	str	r5, [sp, #0]
 800a208:	4623      	mov	r3, r4
 800a20a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800a20e:	492b      	ldr	r1, [pc, #172]	@ (800a2bc <mg_http_serve_file+0x598>)
 800a210:	6800      	ldr	r0, [r0, #0]
 800a212:	f002 fa6b 	bl	800c6ec <mg_printf>
    if (mg_strcasecmp(hm->method, mg_str("HEAD")) == 0) {
 800a216:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a21a:	4929      	ldr	r1, [pc, #164]	@ (800a2c0 <mg_http_serve_file+0x59c>)
 800a21c:	4618      	mov	r0, r3
 800a21e:	f009 ff55 	bl	80140cc <mg_str_s>
 800a222:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a226:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800a22a:	6819      	ldr	r1, [r3, #0]
 800a22c:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 800a230:	cb0c      	ldmia	r3, {r2, r3}
 800a232:	c903      	ldmia	r1, {r0, r1}
 800a234:	f00a f80d 	bl	8014252 <mg_strcasecmp>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d10f      	bne.n	800a25e <mg_http_serve_file+0x53a>
      c->is_resp = 0;
 800a23e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a242:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800a24c:	f023 0301 	bic.w	r3, r3, #1
 800a250:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_fs_close(fd);
 800a254:	f8d7 019c 	ldr.w	r0, [r7, #412]	@ 0x19c
 800a258:	f7fd fe3a 	bl	8007ed0 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 800a25c:	e01e      	b.n	800a29c <mg_http_serve_file+0x578>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 800a25e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a262:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	33a4      	adds	r3, #164	@ 0xa4
 800a26a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
      c->pfn = static_cb;
 800a26e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a272:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a12      	ldr	r2, [pc, #72]	@ (800a2c4 <mg_http_serve_file+0x5a0>)
 800a27a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      c->pfn_data = fd;
 800a27e:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800a282:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800a28c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      *clp = cl;
 800a290:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800a294:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800a298:	601a      	str	r2, [r3, #0]
}
 800a29a:	e7ff      	b.n	800a29c <mg_http_serve_file+0x578>
 800a29c:	bf00      	nop
 800a29e:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a8:	08024fb0 	.word	0x08024fb0
 800a2ac:	08024fb8 	.word	0x08024fb8
 800a2b0:	08024fd8 	.word	0x08024fd8
 800a2b4:	08025000 	.word	0x08025000
 800a2b8:	08024cb8 	.word	0x08024cb8
 800a2bc:	0802501c 	.word	0x0802501c
 800a2c0:	0802506c 	.word	0x0802506c
 800a2c4:	08009a3d 	.word	0x08009a3d

0800a2c8 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	b590      	push	{r4, r7, lr}
 800a2cc:	b08f      	sub	sp, #60	@ 0x3c
 800a2ce:	af02      	add	r7, sp, #8
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	607a      	str	r2, [r7, #4]
 800a2d6:	647b      	str	r3, [r7, #68]	@ 0x44
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.buf);
 800a2d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2da:	461a      	mov	r2, r3
 800a2dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	4a9c      	ldr	r2, [pc, #624]	@ (800a554 <uri_to_path2+0x28c>)
 800a2e4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a2e6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a2e8:	f006 fb2a 	bl	8010940 <mg_snprintf>
 800a2ec:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n + 2 >= path_size) {
 800a2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f0:	3302      	adds	r3, #2
 800a2f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d809      	bhi.n	800a30c <uri_to_path2+0x44>
    mg_http_reply(c, 400, "", "Exceeded path size");
 800a2f8:	4b97      	ldr	r3, [pc, #604]	@ (800a558 <uri_to_path2+0x290>)
 800a2fa:	4a98      	ldr	r2, [pc, #608]	@ (800a55c <uri_to_path2+0x294>)
 800a2fc:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f7ff fb07 	bl	8009914 <mg_http_reply>
    return -1;
 800a306:	f04f 33ff 	mov.w	r3, #4294967295
 800a30a:	e143      	b.n	800a594 <uri_to_path2+0x2cc>
  }
  path[path_size - 1] = '\0';
 800a30c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a30e:	3b01      	subs	r3, #1
 800a310:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a312:	4413      	add	r3, r2
 800a314:	2200      	movs	r2, #0
 800a316:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with slash
  if (n > 0 && path[n - 1] != '/') path[n++] = '/', path[n] = '\0';
 800a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d012      	beq.n	800a344 <uri_to_path2+0x7c>
 800a31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a320:	3b01      	subs	r3, #1
 800a322:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a324:	4413      	add	r3, r2
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b2f      	cmp	r3, #47	@ 0x2f
 800a32a:	d00b      	beq.n	800a344 <uri_to_path2+0x7c>
 800a32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	627a      	str	r2, [r7, #36]	@ 0x24
 800a332:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a334:	4413      	add	r3, r2
 800a336:	222f      	movs	r2, #47	@ 0x2f
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33e:	4413      	add	r3, r2
 800a340:	2200      	movs	r2, #0
 800a342:	701a      	strb	r2, [r3, #0]
  if (url.len < hm->uri.len) {
 800a344:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d212      	bcs.n	800a374 <uri_to_path2+0xac>
    mg_url_decode(hm->uri.buf + url.len, hm->uri.len - url.len, path + n,
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	689a      	ldr	r2, [r3, #8]
 800a352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a354:	18d0      	adds	r0, r2, r3
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	68da      	ldr	r2, [r3, #12]
 800a35a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a35c:	1ad1      	subs	r1, r2, r3
 800a35e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a362:	18d4      	adds	r4, r2, r3
 800a364:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	2200      	movs	r2, #0
 800a36c:	9200      	str	r2, [sp, #0]
 800a36e:	4622      	mov	r2, r4
 800a370:	f7fe f967 	bl	8008642 <mg_url_decode>
                  path_size - n, 0);
  }
  path[path_size - 1] = '\0';  // Double-check
 800a374:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a376:	3b01      	subs	r3, #1
 800a378:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a37a:	4413      	add	r3, r2
 800a37c:	2200      	movs	r2, #0
 800a37e:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(mg_str_n(path, path_size))) {
 800a380:	f107 0314 	add.w	r3, r7, #20
 800a384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a388:	4618      	mov	r0, r3
 800a38a:	f009 febc 	bl	8014106 <mg_str_n>
 800a38e:	f107 0314 	add.w	r3, r7, #20
 800a392:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a396:	f015 f8ed 	bl	801f574 <mg_path_is_sane>
 800a39a:	4603      	mov	r3, r0
 800a39c:	f083 0301 	eor.w	r3, r3, #1
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d009      	beq.n	800a3ba <uri_to_path2+0xf2>
    mg_http_reply(c, 400, "", "Invalid path");
 800a3a6:	4b6e      	ldr	r3, [pc, #440]	@ (800a560 <uri_to_path2+0x298>)
 800a3a8:	4a6c      	ldr	r2, [pc, #432]	@ (800a55c <uri_to_path2+0x294>)
 800a3aa:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f7ff fab0 	bl	8009914 <mg_http_reply>
    return -1;
 800a3b4:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b8:	e0ec      	b.n	800a594 <uri_to_path2+0x2cc>
  }
  n = strlen(path);
 800a3ba:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a3bc:	f7f6 f808 	bl	80003d0 <strlen>
 800a3c0:	6278      	str	r0, [r7, #36]	@ 0x24
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 800a3c2:	e007      	b.n	800a3d4 <uri_to_path2+0x10c>
 800a3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ce:	4413      	add	r3, r2
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	701a      	strb	r2, [r3, #0]
 800a3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d906      	bls.n	800a3e8 <uri_to_path2+0x120>
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a3e0:	4413      	add	r3, r2
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800a3e6:	d0ed      	beq.n	800a3c4 <uri_to_path2+0xfc>
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800a3e8:	f107 031c 	add.w	r3, r7, #28
 800a3ec:	495d      	ldr	r1, [pc, #372]	@ (800a564 <uri_to_path2+0x29c>)
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f009 fe6c 	bl	80140cc <mg_str_s>
 800a3f4:	68b9      	ldr	r1, [r7, #8]
 800a3f6:	f107 031c 	add.w	r3, r7, #28
 800a3fa:	cb0c      	ldmia	r3, {r2, r3}
 800a3fc:	3108      	adds	r1, #8
 800a3fe:	c903      	ldmia	r1, {r0, r1}
 800a400:	f009 fee5 	bl	80141ce <mg_strcmp>
 800a404:	4603      	mov	r3, r0
                                               : fs->st(path, NULL, NULL);
 800a406:	2b00      	cmp	r3, #0
 800a408:	d007      	beq.n	800a41a <uri_to_path2+0x152>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2200      	movs	r2, #0
 800a410:	2100      	movs	r1, #0
 800a412:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a414:	4798      	blx	r3
 800a416:	4603      	mov	r3, r0
 800a418:	e000      	b.n	800a41c <uri_to_path2+0x154>
 800a41a:	2304      	movs	r3, #4
  flags = mg_strcmp(hm->uri, mg_str("/")) == 0 ? MG_FS_DIR
 800a41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.buf, path,
 800a41e:	4b52      	ldr	r3, [pc, #328]	@ (800a568 <uri_to_path2+0x2a0>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2b03      	cmp	r3, #3
 800a424:	dd16      	ble.n	800a454 <uri_to_path2+0x18c>
 800a426:	4b51      	ldr	r3, [pc, #324]	@ (800a56c <uri_to_path2+0x2a4>)
 800a428:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 800a42c:	4950      	ldr	r1, [pc, #320]	@ (800a570 <uri_to_path2+0x2a8>)
 800a42e:	2004      	movs	r0, #4
 800a430:	f002 f800 	bl	800c434 <mg_log_prefix>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	4618      	mov	r0, r3
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	689a      	ldr	r2, [r3, #8]
 800a442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a444:	9301      	str	r3, [sp, #4]
 800a446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	4613      	mov	r3, r2
 800a44c:	4602      	mov	r2, r0
 800a44e:	4849      	ldr	r0, [pc, #292]	@ (800a574 <uri_to_path2+0x2ac>)
 800a450:	f002 f840 	bl	800c4d4 <mg_log>
              flags));
  if (flags == 0) {
 800a454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 809b 	beq.w	800a592 <uri_to_path2+0x2ca>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800a45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a45e:	f003 0304 	and.w	r3, r3, #4
 800a462:	2b00      	cmp	r3, #0
 800a464:	d020      	beq.n	800a4a8 <uri_to_path2+0x1e0>
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	68db      	ldr	r3, [r3, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d01c      	beq.n	800a4a8 <uri_to_path2+0x1e0>
             hm->uri.buf[hm->uri.len - 1] != '/') {
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	689a      	ldr	r2, [r3, #8]
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	3b01      	subs	r3, #1
 800a478:	4413      	add	r3, r2
 800a47a:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800a47c:	2b2f      	cmp	r3, #47	@ 0x2f
 800a47e:	d013      	beq.n	800a4a8 <uri_to_path2+0x1e0>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.buf);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 800a484:	461a      	mov	r2, r3
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	493b      	ldr	r1, [pc, #236]	@ (800a578 <uri_to_path2+0x2b0>)
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f002 f92d 	bl	800c6ec <mg_printf>
    c->is_resp = 0;
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800a498:	f023 0301 	bic.w	r3, r3, #1
 800a49c:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    flags = -1;
 800a4a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4a6:	e074      	b.n	800a592 <uri_to_path2+0x2ca>
  } else if (flags & MG_FS_DIR) {
 800a4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4aa:	f003 0304 	and.w	r3, r3, #4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d06f      	beq.n	800a592 <uri_to_path2+0x2ca>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800a4b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	18d0      	adds	r0, r2, r3
 800a4b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	4a2f      	ldr	r2, [pc, #188]	@ (800a57c <uri_to_path2+0x2b4>)
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	f006 fa3d 	bl	8010940 <mg_snprintf>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d009      	beq.n	800a4e0 <uri_to_path2+0x218>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a4d6:	4798      	blx	r3
 800a4d8:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 800a4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d116      	bne.n	800a50e <uri_to_path2+0x246>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800a4e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e4:	18d0      	adds	r0, r2, r3
 800a4e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ea:	1ad3      	subs	r3, r2, r3
 800a4ec:	4a24      	ldr	r2, [pc, #144]	@ (800a580 <uri_to_path2+0x2b8>)
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	f006 fa26 	bl	8010940 <mg_snprintf>
 800a4f4:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00c      	beq.n	800a514 <uri_to_path2+0x24c>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2200      	movs	r2, #0
 800a500:	2100      	movs	r1, #0
 800a502:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a504:	4798      	blx	r3
 800a506:	62b8      	str	r0, [r7, #40]	@ 0x28
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <uri_to_path2+0x24c>
      flags = tmp;
 800a50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a512:	e03e      	b.n	800a592 <uri_to_path2+0x2ca>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800a514:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a518:	18d0      	adds	r0, r2, r3
 800a51a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51e:	1ad3      	subs	r3, r2, r3
 800a520:	4a18      	ldr	r2, [pc, #96]	@ (800a584 <uri_to_path2+0x2bc>)
 800a522:	4619      	mov	r1, r3
 800a524:	f006 fa0c 	bl	8010940 <mg_snprintf>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d02c      	beq.n	800a588 <uri_to_path2+0x2c0>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2200      	movs	r2, #0
 800a534:	2100      	movs	r1, #0
 800a536:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a538:	4798      	blx	r3
 800a53a:	62b8      	str	r0, [r7, #40]	@ 0x28
                    0 &&
 800a53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d022      	beq.n	800a588 <uri_to_path2+0x2c0>
                    0)) {  // check for gzipped index
      flags = tmp;
 800a542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a544:	62fb      	str	r3, [r7, #44]	@ 0x2c
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800a546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a548:	330b      	adds	r3, #11
 800a54a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a54c:	4413      	add	r3, r2
 800a54e:	2200      	movs	r2, #0
 800a550:	701a      	strb	r2, [r3, #0]
 800a552:	e01e      	b.n	800a592 <uri_to_path2+0x2ca>
 800a554:	08024758 	.word	0x08024758
 800a558:	08025074 	.word	0x08025074
 800a55c:	08024cb8 	.word	0x08024cb8
 800a560:	08025088 	.word	0x08025088
 800a564:	08025098 	.word	0x08025098
 800a568:	24000258 	.word	0x24000258
 800a56c:	08028038 	.word	0x08028038
 800a570:	08024478 	.word	0x08024478
 800a574:	0802509c 	.word	0x0802509c
 800a578:	080250b0 	.word	0x080250b0
 800a57c:	080250ec 	.word	0x080250ec
 800a580:	080250f8 	.word	0x080250f8
 800a584:	08025108 	.word	0x08025108
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800a588:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58c:	4413      	add	r3, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800a592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a594:	4618      	mov	r0, r3
 800a596:	3734      	adds	r7, #52	@ 0x34
 800a598:	46bd      	mov	sp, r7
 800a59a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a59e:	b002      	add	sp, #8
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop

0800a5a4 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b09c      	sub	sp, #112	@ 0x70
 800a5a8:	af06      	add	r7, sp, #24
 800a5aa:	6178      	str	r0, [r7, #20]
 800a5ac:	6139      	str	r1, [r7, #16]
 800a5ae:	60fa      	str	r2, [r7, #12]
 800a5b0:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d002      	beq.n	800a5c0 <uri_to_path+0x1c>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	e000      	b.n	800a5c2 <uri_to_path+0x1e>
 800a5c0:	4b5b      	ldr	r3, [pc, #364]	@ (800a730 <uri_to_path+0x18c>)
 800a5c2:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_str k, v, part, s = mg_str(opts->root_dir), u = {NULL, 0}, p = u;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f009 fd7c 	bl	80140cc <mg_str_s>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a5d8:	2300      	movs	r3, #0
 800a5da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5dc:	f107 031c 	add.w	r3, r7, #28
 800a5e0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800a5e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a5e8:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_span(s, &part, &s, ',')) {
 800a5ec:	e078      	b.n	800a6e0 <uri_to_path+0x13c>
    if (!mg_span(part, &k, &v, '=')) k = part, v = mg_str_n(NULL, 0);
 800a5ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a5f2:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a5f6:	213d      	movs	r1, #61	@ 0x3d
 800a5f8:	9100      	str	r1, [sp, #0]
 800a5fa:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800a5fe:	c903      	ldmia	r1, {r0, r1}
 800a600:	f009 ff62 	bl	80144c8 <mg_span>
 800a604:	4603      	mov	r3, r0
 800a606:	f083 0301 	eor.w	r3, r3, #1
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d014      	beq.n	800a63a <uri_to_path+0x96>
 800a610:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a614:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800a618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a61c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a620:	463b      	mov	r3, r7
 800a622:	2200      	movs	r2, #0
 800a624:	2100      	movs	r1, #0
 800a626:	4618      	mov	r0, r3
 800a628:	f009 fd6d 	bl	8014106 <mg_str_n>
 800a62c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a630:	463a      	mov	r2, r7
 800a632:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a636:	e883 0003 	stmia.w	r3, {r0, r1}
    if (v.len == 0) v = k, k = mg_str("/"), u = k, p = v;
 800a63a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d123      	bne.n	800a688 <uri_to_path+0xe4>
 800a640:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a644:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a648:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a64c:	e883 0003 	stmia.w	r3, {r0, r1}
 800a650:	463b      	mov	r3, r7
 800a652:	4938      	ldr	r1, [pc, #224]	@ (800a734 <uri_to_path+0x190>)
 800a654:	4618      	mov	r0, r3
 800a656:	f009 fd39 	bl	80140cc <mg_str_s>
 800a65a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800a65e:	463a      	mov	r2, r7
 800a660:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a664:	e883 0003 	stmia.w	r3, {r0, r1}
 800a668:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a66c:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a670:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a674:	e883 0003 	stmia.w	r3, {r0, r1}
 800a678:	f107 031c 	add.w	r3, r7, #28
 800a67c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a680:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a684:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	68da      	ldr	r2, [r3, #12]
 800a68c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a68e:	429a      	cmp	r2, r3
 800a690:	d323      	bcc.n	800a6da <uri_to_path+0x136>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	6899      	ldr	r1, [r3, #8]
 800a696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a698:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a69c:	4618      	mov	r0, r3
 800a69e:	f009 fd32 	bl	8014106 <mg_str_n>
 800a6a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800a6a6:	cb0c      	ldmia	r3, {r2, r3}
 800a6a8:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 800a6ac:	c903      	ldmia	r1, {r0, r1}
 800a6ae:	f009 fd8e 	bl	80141ce <mg_strcmp>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d112      	bne.n	800a6de <uri_to_path+0x13a>
    u = k, p = v;
 800a6b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6bc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800a6c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6c4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a6c8:	f107 031c 	add.w	r3, r7, #28
 800a6cc:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800a6d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a6d8:	e002      	b.n	800a6e0 <uri_to_path+0x13c>
    if (hm->uri.len < k.len) continue;
 800a6da:	bf00      	nop
 800a6dc:	e000      	b.n	800a6e0 <uri_to_path+0x13c>
    if (mg_strcmp(k, mg_str_n(hm->uri.buf, k.len)) != 0) continue;
 800a6de:	bf00      	nop
  while (mg_span(s, &part, &s, ',')) {
 800a6e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a6e4:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800a6e8:	212c      	movs	r1, #44	@ 0x2c
 800a6ea:	9100      	str	r1, [sp, #0]
 800a6ec:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800a6f0:	c903      	ldmia	r1, {r0, r1}
 800a6f2:	f009 fee9 	bl	80144c8 <mg_span>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f47f af78 	bne.w	800a5ee <uri_to_path+0x4a>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 800a6fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a700:	9304      	str	r3, [sp, #16]
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	9303      	str	r3, [sp, #12]
 800a706:	aa01      	add	r2, sp, #4
 800a708:	f107 031c 	add.w	r3, r7, #28
 800a70c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a710:	e882 0003 	stmia.w	r2, {r0, r1}
 800a714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a71c:	6939      	ldr	r1, [r7, #16]
 800a71e:	6978      	ldr	r0, [r7, #20]
 800a720:	f7ff fdd2 	bl	800a2c8 <uri_to_path2>
 800a724:	4603      	mov	r3, r0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3758      	adds	r7, #88	@ 0x58
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	24000038 	.word	0x24000038
 800a734:	08025098 	.word	0x08025098

0800a738 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b0a6      	sub	sp, #152	@ 0x98
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800a74c:	f107 0314 	add.w	r3, r7, #20
 800a750:	2264      	movs	r2, #100	@ 0x64
 800a752:	9200      	str	r2, [sp, #0]
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	68b9      	ldr	r1, [r7, #8]
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f7ff ff23 	bl	800a5a4 <uri_to_path>
 800a75e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  if (flags < 0) {
 800a762:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a766:	2b00      	cmp	r3, #0
 800a768:	db41      	blt.n	800a7ee <mg_http_serve_dir+0xb6>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 800a76a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a76e:	f003 0304 	and.w	r3, r3, #4
 800a772:	2b00      	cmp	r3, #0
 800a774:	d007      	beq.n	800a786 <mg_http_serve_dir+0x4e>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800a776:	4b20      	ldr	r3, [pc, #128]	@ (800a7f8 <mg_http_serve_dir+0xc0>)
 800a778:	4a20      	ldr	r2, [pc, #128]	@ (800a7fc <mg_http_serve_dir+0xc4>)
 800a77a:	f240 1193 	movw	r1, #403	@ 0x193
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f7ff f8c8 	bl	8009914 <mg_http_reply>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800a784:	e033      	b.n	800a7ee <mg_http_serve_dir+0xb6>
  } else if (flags && sp != NULL && mg_match(mg_str(path), mg_str(sp), NULL)) {
 800a786:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d028      	beq.n	800a7e0 <mg_http_serve_dir+0xa8>
 800a78e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a792:	2b00      	cmp	r3, #0
 800a794:	d024      	beq.n	800a7e0 <mg_http_serve_dir+0xa8>
 800a796:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800a79a:	f107 0214 	add.w	r2, r7, #20
 800a79e:	4611      	mov	r1, r2
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f009 fc93 	bl	80140cc <mg_str_s>
 800a7a6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a7aa:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f009 fc8c 	bl	80140cc <mg_str_s>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	9300      	str	r3, [sp, #0]
 800a7b8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800a7bc:	cb0c      	ldmia	r3, {r2, r3}
 800a7be:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 800a7c2:	c903      	ldmia	r1, {r0, r1}
 800a7c4:	f009 fd8c 	bl	80142e0 <mg_match>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d008      	beq.n	800a7e0 <mg_http_serve_dir+0xa8>
    mg_http_serve_ssi(c, opts->root_dir, path);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f107 0214 	add.w	r2, r7, #20
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f009 fc63 	bl	80140a4 <mg_http_serve_ssi>
}
 800a7de:	e006      	b.n	800a7ee <mg_http_serve_dir+0xb6>
    mg_http_serve_file(c, hm, path, opts);
 800a7e0:	f107 0214 	add.w	r2, r7, #20
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7ff fa9b 	bl	8009d24 <mg_http_serve_file>
}
 800a7ee:	bf00      	nop
 800a7f0:	3790      	adds	r7, #144	@ 0x90
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	08025118 	.word	0x08025118
 800a7fc:	08024cb8 	.word	0x08024cb8

0800a800 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 800a800:	b590      	push	{r4, r7, lr}
 800a802:	b0cf      	sub	sp, #316	@ 0x13c
 800a804:	af02      	add	r7, sp, #8
 800a806:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800a80a:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800a80e:	6020      	str	r0, [r4, #0]
 800a810:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800a814:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800a818:	6001      	str	r1, [r0, #0]
 800a81a:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800a81e:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800a822:	600a      	str	r2, [r1, #0]
 800a824:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a828:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800a82c:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 800a82e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a832:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800a836:	497a      	ldr	r1, [pc, #488]	@ (800aa20 <mg_http_creds+0x220>)
 800a838:	6818      	ldr	r0, [r3, #0]
 800a83a:	f7fd fff5 	bl	8008828 <mg_http_get_header>
 800a83e:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
  user[0] = pass[0] = '\0';
 800a842:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a846:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2200      	movs	r2, #0
 800a84e:	701a      	strb	r2, [r3, #0]
 800a850:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a854:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	781a      	ldrb	r2, [r3, #0]
 800a85c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a860:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800a868:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d05e      	beq.n	800a92e <mg_http_creds+0x12e>
 800a870:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a874:	685b      	ldr	r3, [r3, #4]
 800a876:	2b06      	cmp	r3, #6
 800a878:	d959      	bls.n	800a92e <mg_http_creds+0x12e>
 800a87a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2206      	movs	r2, #6
 800a882:	4968      	ldr	r1, [pc, #416]	@ (800aa24 <mg_http_creds+0x224>)
 800a884:	4618      	mov	r0, r3
 800a886:	f018 ff60 	bl	802374a <memcmp>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d14e      	bne.n	800a92e <mg_http_creds+0x12e>
    char buf[256];
    size_t n = mg_base64_decode(v->buf + 6, v->len - 6, buf, sizeof(buf));
 800a890:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	1d98      	adds	r0, r3, #6
 800a898:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	1f99      	subs	r1, r3, #6
 800a8a0:	f107 0214 	add.w	r2, r7, #20
 800a8a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8a8:	f7fb ffb4 	bl	8006814 <mg_base64_decode>
 800a8ac:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? n : 0);
 800a8b0:	f107 0314 	add.w	r3, r7, #20
 800a8b4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800a8b8:	213a      	movs	r1, #58	@ 0x3a
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7f5 fd38 	bl	8000330 <memchr>
 800a8c0:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
    if (p != NULL) {
 800a8c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	f000 80a2 	beq.w	800aa12 <mg_http_creds+0x212>
      mg_snprintf(user, userlen, "%.*s", p - buf, buf);
 800a8ce:	f107 0314 	add.w	r3, r7, #20
 800a8d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8dc:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 800a8e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a8e4:	f5a3 7094 	sub.w	r0, r3, #296	@ 0x128
 800a8e8:	f107 0314 	add.w	r3, r7, #20
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	4613      	mov	r3, r2
 800a8f0:	4a4d      	ldr	r2, [pc, #308]	@ (800aa28 <mg_http_creds+0x228>)
 800a8f2:	6809      	ldr	r1, [r1, #0]
 800a8f4:	6800      	ldr	r0, [r0, #0]
 800a8f6:	f006 f823 	bl	8010940 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (size_t) (p - buf) - 1, p + 1);
 800a8fa:	f107 0314 	add.w	r3, r7, #20
 800a8fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	461a      	mov	r2, r3
 800a906:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	1e5a      	subs	r2, r3, #1
 800a90e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800a912:	3301      	adds	r3, #1
 800a914:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800a918:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	4613      	mov	r3, r2
 800a920:	4a41      	ldr	r2, [pc, #260]	@ (800aa28 <mg_http_creds+0x228>)
 800a922:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a926:	6800      	ldr	r0, [r0, #0]
 800a928:	f006 f80a 	bl	8010940 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800a92c:	e071      	b.n	800aa12 <mg_http_creds+0x212>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->buf, "Bearer ", 7) == 0) {
 800a92e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a932:	2b00      	cmp	r3, #0
 800a934:	d024      	beq.n	800a980 <mg_http_creds+0x180>
 800a936:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	2b07      	cmp	r3, #7
 800a93e:	d91f      	bls.n	800a980 <mg_http_creds+0x180>
 800a940:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2207      	movs	r2, #7
 800a948:	4938      	ldr	r1, [pc, #224]	@ (800aa2c <mg_http_creds+0x22c>)
 800a94a:	4618      	mov	r0, r3
 800a94c:	f018 fefd 	bl	802374a <memcmp>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d114      	bne.n	800a980 <mg_http_creds+0x180>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->buf + 7);
 800a956:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	1fda      	subs	r2, r3, #7
 800a95e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3307      	adds	r3, #7
 800a966:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800a96a:	f5a1 7098 	sub.w	r0, r1, #304	@ 0x130
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	4613      	mov	r3, r2
 800a972:	4a2d      	ldr	r2, [pc, #180]	@ (800aa28 <mg_http_creds+0x228>)
 800a974:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a978:	6800      	ldr	r0, [r0, #0]
 800a97a:	f005 ffe1 	bl	8010940 <mg_snprintf>
 800a97e:	e049      	b.n	800aa14 <mg_http_creds+0x214>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 800a980:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a984:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800a988:	4929      	ldr	r1, [pc, #164]	@ (800aa30 <mg_http_creds+0x230>)
 800a98a:	6818      	ldr	r0, [r3, #0]
 800a98c:	f7fd ff4c 	bl	8008828 <mg_http_get_header>
 800a990:	f8c7 012c 	str.w	r0, [r7, #300]	@ 0x12c
 800a994:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d028      	beq.n	800a9ee <mg_http_creds+0x1ee>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 800a99c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800a9a0:	220c      	movs	r2, #12
 800a9a2:	4924      	ldr	r1, [pc, #144]	@ (800aa34 <mg_http_creds+0x234>)
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f009 fbae 	bl	8014106 <mg_str_n>
 800a9aa:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 800a9ae:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800a9b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800a9b6:	9300      	str	r3, [sp, #0]
 800a9b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800a9bc:	ca06      	ldmia	r2, {r1, r2}
 800a9be:	f000 f864 	bl	800aa8a <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.buf);
 800a9c2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d024      	beq.n	800aa14 <mg_http_creds+0x214>
 800a9ca:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a9d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800a9d8:	f5a2 7098 	sub.w	r0, r2, #304	@ 0x130
 800a9dc:	9300      	str	r3, [sp, #0]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	4a11      	ldr	r2, [pc, #68]	@ (800aa28 <mg_http_creds+0x228>)
 800a9e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800a9e6:	6800      	ldr	r0, [r0, #0]
 800a9e8:	f005 ffaa 	bl	8010940 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 800a9ec:	e012      	b.n	800aa14 <mg_http_creds+0x214>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 800a9ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800a9f2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f103 0010 	add.w	r0, r3, #16
 800a9fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800aa00:	f5a3 7298 	sub.w	r2, r3, #304	@ 0x130
 800aa04:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	490a      	ldr	r1, [pc, #40]	@ (800aa34 <mg_http_creds+0x234>)
 800aa0c:	f7fd fda4 	bl	8008558 <mg_http_get_var>
}
 800aa10:	e000      	b.n	800aa14 <mg_http_creds+0x214>
  if (v != NULL && v->len > 6 && memcmp(v->buf, "Basic ", 6) == 0) {
 800aa12:	bf00      	nop
}
 800aa14:	bf00      	nop
 800aa16:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd90      	pop	{r4, r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	0802512c 	.word	0x0802512c
 800aa24:	0802513c 	.word	0x0802513c
 800aa28:	08024758 	.word	0x08024758
 800aa2c:	08025144 	.word	0x08025144
 800aa30:	0802514c 	.word	0x0802514c
 800aa34:	08025154 	.word	0x08025154

0800aa38 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	1d3b      	adds	r3, r7, #4
 800aa42:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800aa46:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.buf + 1, s.len - 2)
             : s;
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d913      	bls.n	800aa74 <stripquotes+0x3c>
  return s.len > 1 && s.buf[0] == '"' && s.buf[s.len - 1] == '"'
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	2b22      	cmp	r3, #34	@ 0x22
 800aa52:	d10f      	bne.n	800aa74 <stripquotes+0x3c>
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	4413      	add	r3, r2
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b22      	cmp	r3, #34	@ 0x22
 800aa60:	d108      	bne.n	800aa74 <stripquotes+0x3c>
             ? mg_str_n(s.buf + 1, s.len - 2)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	1c59      	adds	r1, r3, #1
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	1e9a      	subs	r2, r3, #2
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f009 fb4a 	bl	8014106 <mg_str_n>
             : s;
 800aa72:	e006      	b.n	800aa82 <stripquotes+0x4a>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	461a      	mov	r2, r3
 800aa78:	1d3b      	adds	r3, r7, #4
 800aa7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800aa7e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800aa8a:	b082      	sub	sp, #8
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b08c      	sub	sp, #48	@ 0x30
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	1d38      	adds	r0, r7, #4
 800aa96:	e880 0006 	stmia.w	r0, {r1, r2}
 800aa9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaa0:	e072      	b.n	800ab88 <mg_http_get_header_var+0xfe>
    if (s.buf[i + v.len] == '=' && memcmp(&s.buf[i], v.buf, v.len) == 0) {
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aaa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa8:	440b      	add	r3, r1
 800aaaa:	4413      	add	r3, r2
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	2b3d      	cmp	r3, #61	@ 0x3d
 800aab0:	d167      	bne.n	800ab82 <mg_http_get_header_var+0xf8>
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab6:	4413      	add	r3, r2
 800aab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aaba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aabc:	4618      	mov	r0, r3
 800aabe:	f018 fe44 	bl	802374a <memcmp>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d15c      	bne.n	800ab82 <mg_http_get_header_var+0xf8>
      const char *p = &s.buf[i + v.len + 1], *b = p, *x = &s.buf[s.len];
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aace:	440b      	add	r3, r1
 800aad0:	3301      	adds	r3, #1
 800aad2:	4413      	add	r3, r2
 800aad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	4413      	add	r3, r2
 800aae0:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 800aae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d205      	bcs.n	800aaf6 <mg_http_get_header_var+0x6c>
 800aaea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	2b22      	cmp	r3, #34	@ 0x22
 800aaf0:	d101      	bne.n	800aaf6 <mg_http_get_header_var+0x6c>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e000      	b.n	800aaf8 <mg_http_get_header_var+0x6e>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 800aafa:	e002      	b.n	800ab02 <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 800aafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aafe:	3301      	adds	r3, #1
 800ab00:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (p < x &&
 800ab02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab04:	6a3b      	ldr	r3, [r7, #32]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d227      	bcs.n	800ab5a <mg_http_get_header_var+0xd0>
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d010      	beq.n	800ab32 <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800ab10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d003      	beq.n	800ab20 <mg_http_get_header_var+0x96>
 800ab18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	2b22      	cmp	r3, #34	@ 0x22
 800ab1e:	d001      	beq.n	800ab24 <mg_http_get_header_var+0x9a>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e000      	b.n	800ab26 <mg_http_get_header_var+0x9c>
 800ab24:	2300      	movs	r3, #0
      while (p < x &&
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d1e5      	bne.n	800aafc <mg_http_get_header_var+0x72>
 800ab30:	e013      	b.n	800ab5a <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 800ab32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	2b3b      	cmp	r3, #59	@ 0x3b
 800ab38:	d009      	beq.n	800ab4e <mg_http_get_header_var+0xc4>
 800ab3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	d005      	beq.n	800ab4e <mg_http_get_header_var+0xc4>
 800ab42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b2c      	cmp	r3, #44	@ 0x2c
 800ab48:	d001      	beq.n	800ab4e <mg_http_get_header_var+0xc4>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e000      	b.n	800ab50 <mg_http_get_header_var+0xc6>
 800ab4e:	2300      	movs	r3, #0
      while (p < x &&
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d1d0      	bne.n	800aafc <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.buf, (int) v.len,
      // v.buf, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 800ab5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab5e:	1ad2      	subs	r2, r2, r3
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	4413      	add	r3, r2
 800ab64:	461a      	mov	r2, r3
 800ab66:	f107 0314 	add.w	r3, r7, #20
 800ab6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f009 faca 	bl	8014106 <mg_str_n>
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f107 0314 	add.w	r3, r7, #20
 800ab78:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ab7c:	f7ff ff5c 	bl	800aa38 <stripquotes>
 800ab80:	e012      	b.n	800aba8 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800ab82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab84:	3301      	adds	r3, #1
 800ab86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d006      	beq.n	800ab9c <mg_http_get_header_var+0x112>
 800ab8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ab90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab92:	4413      	add	r3, r2
 800ab94:	1c9a      	adds	r2, r3, #2
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d382      	bcc.n	800aaa2 <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	2100      	movs	r1, #0
 800aba2:	4618      	mov	r0, r3
 800aba4:	f009 faaf 	bl	8014106 <mg_str_n>
}
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	3730      	adds	r7, #48	@ 0x30
 800abac:	46bd      	mov	sp, r7
 800abae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abb2:	b002      	add	sp, #8
 800abb4:	4770      	bx	lr

0800abb6 <mg_http_status>:
    }
  }
  return res;
}

int mg_http_status(const struct mg_http_message *hm) {
 800abb6:	b580      	push	{r7, lr}
 800abb8:	b082      	sub	sp, #8
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
  return atoi(hm->uri.buf);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f018 fb12 	bl	80231ec <atoi>
 800abc8:	4603      	mov	r3, r0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3708      	adds	r7, #8
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <is_hex_digit>:

static bool is_hex_digit(int c) {
 800abd2:	b480      	push	{r7}
 800abd4:	b083      	sub	sp, #12
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2b2f      	cmp	r3, #47	@ 0x2f
 800abde:	dd02      	ble.n	800abe6 <is_hex_digit+0x14>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2b39      	cmp	r3, #57	@ 0x39
 800abe4:	dd0b      	ble.n	800abfe <is_hex_digit+0x2c>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2b60      	cmp	r3, #96	@ 0x60
 800abea:	dd02      	ble.n	800abf2 <is_hex_digit+0x20>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b66      	cmp	r3, #102	@ 0x66
 800abf0:	dd05      	ble.n	800abfe <is_hex_digit+0x2c>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2b40      	cmp	r3, #64	@ 0x40
 800abf6:	dd04      	ble.n	800ac02 <is_hex_digit+0x30>
         (c >= 'A' && c <= 'F');
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2b46      	cmp	r3, #70	@ 0x46
 800abfc:	dc01      	bgt.n	800ac02 <is_hex_digit+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 800abfe:	2301      	movs	r3, #1
 800ac00:	e000      	b.n	800ac04 <is_hex_digit+0x32>
 800ac02:	2300      	movs	r3, #0
 800ac04:	f003 0301 	and.w	r3, r3, #1
 800ac08:	b2db      	uxtb	r3, r3
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	370c      	adds	r7, #12
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <skip_chunk>:

static int skip_chunk(const char *buf, int len, int *pl, int *dl) {
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b08a      	sub	sp, #40	@ 0x28
 800ac1a:	af02      	add	r7, sp, #8
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607a      	str	r2, [r7, #4]
 800ac22:	603b      	str	r3, [r7, #0]
  int i = 0, n = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	61fb      	str	r3, [r7, #28]
 800ac28:	2300      	movs	r3, #0
 800ac2a:	613b      	str	r3, [r7, #16]
  if (len < 3) return 0;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	dc04      	bgt.n	800ac3c <skip_chunk+0x26>
 800ac32:	2300      	movs	r3, #0
 800ac34:	e07a      	b.n	800ad2c <skip_chunk+0x116>
  while (i < len && is_hex_digit(buf[i])) i++;
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	61fb      	str	r3, [r7, #28]
 800ac3c:	69fa      	ldr	r2, [r7, #28]
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	da09      	bge.n	800ac58 <skip_chunk+0x42>
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	4413      	add	r3, r2
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff ffc0 	bl	800abd2 <is_hex_digit>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1ee      	bne.n	800ac36 <skip_chunk+0x20>
  if (i == 0) return -1;                     // Error, no length specified
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d102      	bne.n	800ac64 <skip_chunk+0x4e>
 800ac5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac62:	e063      	b.n	800ad2c <skip_chunk+0x116>
  if (i > (int) sizeof(int) * 2) return -1;  // Chunk length is too big
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	2b08      	cmp	r3, #8
 800ac68:	dd02      	ble.n	800ac70 <skip_chunk+0x5a>
 800ac6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6e:	e05d      	b.n	800ad2c <skip_chunk+0x116>
  if (len < i + 1 || buf[i] != '\r' || buf[i + 1] != '\n') return -1;  // Error
 800ac70:	69fa      	ldr	r2, [r7, #28]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	da0c      	bge.n	800ac92 <skip_chunk+0x7c>
 800ac78:	69fb      	ldr	r3, [r7, #28]
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	2b0d      	cmp	r3, #13
 800ac82:	d106      	bne.n	800ac92 <skip_chunk+0x7c>
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	3301      	adds	r3, #1
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	2b0a      	cmp	r3, #10
 800ac90:	d002      	beq.n	800ac98 <skip_chunk+0x82>
 800ac92:	f04f 33ff 	mov.w	r3, #4294967295
 800ac96:	e049      	b.n	800ad2c <skip_chunk+0x116>
  if (mg_str_to_num(mg_str_n(buf, (size_t) i), 16, &n, sizeof(int)) == false)
 800ac98:	69fa      	ldr	r2, [r7, #28]
 800ac9a:	f107 0314 	add.w	r3, r7, #20
 800ac9e:	68f9      	ldr	r1, [r7, #12]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f009 fa30 	bl	8014106 <mg_str_n>
 800aca6:	f107 0310 	add.w	r3, r7, #16
 800acaa:	2204      	movs	r2, #4
 800acac:	9200      	str	r2, [sp, #0]
 800acae:	2210      	movs	r2, #16
 800acb0:	f107 0114 	add.w	r1, r7, #20
 800acb4:	c903      	ldmia	r1, {r0, r1}
 800acb6:	f009 fc64 	bl	8014582 <mg_str_to_num>
 800acba:	4603      	mov	r3, r0
 800acbc:	f083 0301 	eor.w	r3, r3, #1
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d002      	beq.n	800accc <skip_chunk+0xb6>
    return -1;                    // Decode chunk length, overflow
 800acc6:	f04f 33ff 	mov.w	r3, #4294967295
 800acca:	e02f      	b.n	800ad2c <skip_chunk+0x116>
  if (n < 0) return -1;           // Error. TODO(): some checks now redundant
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	da02      	bge.n	800acd8 <skip_chunk+0xc2>
 800acd2:	f04f 33ff 	mov.w	r3, #4294967295
 800acd6:	e029      	b.n	800ad2c <skip_chunk+0x116>
  if (n > len - i - 4) return 0;  // Chunk not yet fully buffered
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	69fb      	ldr	r3, [r7, #28]
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	1eda      	subs	r2, r3, #3
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	dc01      	bgt.n	800acea <skip_chunk+0xd4>
 800ace6:	2300      	movs	r3, #0
 800ace8:	e020      	b.n	800ad2c <skip_chunk+0x116>
  if (buf[i + n + 2] != '\r' || buf[i + n + 3] != '\n') return -1;  // Error
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	4413      	add	r3, r2
 800acf0:	3302      	adds	r3, #2
 800acf2:	68fa      	ldr	r2, [r7, #12]
 800acf4:	4413      	add	r3, r2
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b0d      	cmp	r3, #13
 800acfa:	d108      	bne.n	800ad0e <skip_chunk+0xf8>
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	4413      	add	r3, r2
 800ad02:	3303      	adds	r3, #3
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	4413      	add	r3, r2
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	2b0a      	cmp	r3, #10
 800ad0c:	d002      	beq.n	800ad14 <skip_chunk+0xfe>
 800ad0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad12:	e00b      	b.n	800ad2c <skip_chunk+0x116>
  *pl = i + 2, *dl = n;
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	1c9a      	adds	r2, r3, #2
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	693a      	ldr	r2, [r7, #16]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	601a      	str	r2, [r3, #0]
  return i + 2 + n + 2;
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	1c9a      	adds	r2, r3, #2
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	4413      	add	r3, r2
 800ad2a:	3302      	adds	r3, #2
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3720      	adds	r7, #32
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *ev_data) {
 800ad34:	b580      	push	{r7, lr}
 800ad36:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad40:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ad44:	6018      	str	r0, [r3, #0]
 800ad46:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad4a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ad4e:	6019      	str	r1, [r3, #0]
 800ad50:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad54:	f5a3 7321 	sub.w	r3, r3, #644	@ 0x284
 800ad58:	601a      	str	r2, [r3, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE ||
 800ad5a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad5e:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b07      	cmp	r3, #7
 800ad66:	d031      	beq.n	800adcc <http_cb+0x98>
 800ad68:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad6c:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b09      	cmp	r3, #9
 800ad74:	d02a      	beq.n	800adcc <http_cb+0x98>
 800ad76:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad7a:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b02      	cmp	r3, #2
 800ad82:	f040 8368 	bne.w	800b456 <http_cb+0x722>
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800ad86:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ad8a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ad94:	f003 0304 	and.w	r3, r3, #4
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f000 835b 	beq.w	800b456 <http_cb+0x722>
 800ada0:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ada4:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800adae:	f003 0310 	and.w	r3, r3, #16
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f040 834e 	bne.w	800b456 <http_cb+0x722>
       c->recv.len > 0)) {  // see #2796
 800adba:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800adbe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      (ev == MG_EV_POLL && c->is_accepted && !c->is_draining &&
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 8345 	beq.w	800b456 <http_cb+0x722>
    struct mg_http_message hm;
    size_t ofs = 0;  // Parsing offset
 800adcc:	2300      	movs	r3, #0
 800adce:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800add2:	e313      	b.n	800b3fc <http_cb+0x6c8>
      const char *buf = (char *) c->recv.buf + ofs;
 800add4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800add8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ade0:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800ade4:	4413      	add	r3, r2
 800ade6:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
      int n = mg_http_parse(buf, c->recv.len - ofs, &hm);
 800adea:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800adee:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800adf6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	f107 0210 	add.w	r2, r7, #16
 800ae00:	4619      	mov	r1, r3
 800ae02:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800ae06:	f7fd fecb 	bl	8008ba0 <mg_http_parse>
 800ae0a:	f8c7 0274 	str.w	r0, [r7, #628]	@ 0x274
      struct mg_str *te;  // Transfer - encoding header
      bool is_chunked = false;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
      size_t old_len = c->recv.len;
 800ae14:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae18:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae20:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
      if (n < 0) {
 800ae24:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	da38      	bge.n	800ae9e <http_cb+0x16a>
        // We don't use mg_error() here, to avoid closing pipelined requests
        // prematurely, see #2592
        MG_ERROR(("HTTP parse, %lu bytes", c->recv.len));
 800ae2c:	4bb7      	ldr	r3, [pc, #732]	@ (800b10c <http_cb+0x3d8>)
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	dd10      	ble.n	800ae56 <http_cb+0x122>
 800ae34:	4bb6      	ldr	r3, [pc, #728]	@ (800b110 <http_cb+0x3dc>)
 800ae36:	f640 12a6 	movw	r2, #2470	@ 0x9a6
 800ae3a:	49b6      	ldr	r1, [pc, #728]	@ (800b114 <http_cb+0x3e0>)
 800ae3c:	2001      	movs	r0, #1
 800ae3e:	f001 faf9 	bl	800c434 <mg_log_prefix>
 800ae42:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae46:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4e:	4619      	mov	r1, r3
 800ae50:	48b1      	ldr	r0, [pc, #708]	@ (800b118 <http_cb+0x3e4>)
 800ae52:	f001 fb3f 	bl	800c4d4 <mg_log>
        c->is_draining = 1;
 800ae56:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae5a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ae64:	f043 0310 	orr.w	r3, r3, #16
 800ae68:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_hexdump(buf, c->recv.len - ofs > 16 ? 16 : c->recv.len - ofs);
 800ae6c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae70:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ae78:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	2b10      	cmp	r3, #16
 800ae80:	bf28      	it	cs
 800ae82:	2310      	movcs	r3, #16
 800ae84:	4619      	mov	r1, r3
 800ae86:	f8d7 0278 	ldr.w	r0, [r7, #632]	@ 0x278
 800ae8a:	f001 fb59 	bl	800c540 <mg_hexdump>
        c->recv.len = 0;
 800ae8e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800ae92:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	641a      	str	r2, [r3, #64]	@ 0x40
        return;
 800ae9c:	e2db      	b.n	800b456 <http_cb+0x722>
      }
      if (n == 0) break;                 // Request is not buffered yet
 800ae9e:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 82c2 	beq.w	800b42c <http_cb+0x6f8>
      mg_call(c, MG_EV_HTTP_HDRS, &hm);  // Got all HTTP headers
 800aea8:	f107 0210 	add.w	r2, r7, #16
 800aeac:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800aeb0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800aeb4:	210a      	movs	r1, #10
 800aeb6:	6818      	ldr	r0, [r3, #0]
 800aeb8:	f7fb fd8b 	bl	80069d2 <mg_call>
      if (c->recv.len != old_len) {
 800aebc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800aec0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec8:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 800aecc:	429a      	cmp	r2, r3
 800aece:	d01d      	beq.n	800af0c <http_cb+0x1d8>
        // User manipulated received data. Wash our hands
        MG_DEBUG(("%lu detaching HTTP handler", c->id));
 800aed0:	4b8e      	ldr	r3, [pc, #568]	@ (800b10c <http_cb+0x3d8>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	dd10      	ble.n	800aefa <http_cb+0x1c6>
 800aed8:	4b8d      	ldr	r3, [pc, #564]	@ (800b110 <http_cb+0x3dc>)
 800aeda:	f44f 621b 	mov.w	r2, #2480	@ 0x9b0
 800aede:	498d      	ldr	r1, [pc, #564]	@ (800b114 <http_cb+0x3e0>)
 800aee0:	2003      	movs	r0, #3
 800aee2:	f001 faa7 	bl	800c434 <mg_log_prefix>
 800aee6:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800aeea:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aef2:	4619      	mov	r1, r3
 800aef4:	4889      	ldr	r0, [pc, #548]	@ (800b11c <http_cb+0x3e8>)
 800aef6:	f001 faed 	bl	800c4d4 <mg_log>
        c->pfn = NULL;
 800aefa:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800aefe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2200      	movs	r2, #0
 800af06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        return;
 800af0a:	e2a4      	b.n	800b456 <http_cb+0x722>
      }
      if (ev == MG_EV_CLOSE) {           // If client did not set Content-Length
 800af0c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800af10:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b09      	cmp	r3, #9
 800af18:	d128      	bne.n	800af6c <http_cb+0x238>
        hm.message.len = c->recv.len - ofs;  // and closes now, deliver MSG
 800af1a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800af1e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af26:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800af2a:	1ad2      	subs	r2, r2, r3
 800af2c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800af30:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800af34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        hm.body.len = hm.message.len - (size_t) (hm.body.buf - hm.message.buf);
 800af38:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800af3c:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800af40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800af44:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800af48:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800af4c:	f8d2 1200 	ldr.w	r1, [r2, #512]	@ 0x200
 800af50:	f507 7222 	add.w	r2, r7, #648	@ 0x288
 800af54:	f5a2 721e 	sub.w	r2, r2, #632	@ 0x278
 800af58:	f8d2 2210 	ldr.w	r2, [r2, #528]	@ 0x210
 800af5c:	1a8a      	subs	r2, r1, r2
 800af5e:	1a9a      	subs	r2, r3, r2
 800af60:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800af64:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800af68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      if ((te = mg_http_get_header(&hm, "Transfer-Encoding")) != NULL) {
 800af6c:	f107 0310 	add.w	r3, r7, #16
 800af70:	496b      	ldr	r1, [pc, #428]	@ (800b120 <http_cb+0x3ec>)
 800af72:	4618      	mov	r0, r3
 800af74:	f7fd fc58 	bl	8008828 <mg_http_get_header>
 800af78:	f8c7 026c 	str.w	r0, [r7, #620]	@ 0x26c
 800af7c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d01d      	beq.n	800afc0 <http_cb+0x28c>
        if (mg_strcasecmp(*te, mg_str("chunked")) == 0) {
 800af84:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800af88:	4966      	ldr	r1, [pc, #408]	@ (800b124 <http_cb+0x3f0>)
 800af8a:	4618      	mov	r0, r3
 800af8c:	f009 f89e 	bl	80140cc <mg_str_s>
 800af90:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 800af94:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 800af98:	cb0c      	ldmia	r3, {r2, r3}
 800af9a:	c903      	ldmia	r1, {r0, r1}
 800af9c:	f009 f959 	bl	8014252 <mg_strcasecmp>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d103      	bne.n	800afae <http_cb+0x27a>
          is_chunked = true;
 800afa6:	2301      	movs	r3, #1
 800afa8:	f887 3283 	strb.w	r3, [r7, #643]	@ 0x283
 800afac:	e0cf      	b.n	800b14e <http_cb+0x41a>
        } else {
          mg_error(c, "Invalid Transfer-Encoding");  // See #2460
 800afae:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800afb2:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800afb6:	495c      	ldr	r1, [pc, #368]	@ (800b128 <http_cb+0x3f4>)
 800afb8:	6818      	ldr	r0, [r3, #0]
 800afba:	f7fb fd2b 	bl	8006a14 <mg_error>
          return;
 800afbe:	e24a      	b.n	800b456 <http_cb+0x722>
        }
      } else if (mg_http_get_header(&hm, "Content-length") == NULL) {
 800afc0:	f107 0310 	add.w	r3, r7, #16
 800afc4:	4959      	ldr	r1, [pc, #356]	@ (800b12c <http_cb+0x3f8>)
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fd fc2e 	bl	8008828 <mg_http_get_header>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f040 80bd 	bne.w	800b14e <http_cb+0x41a>
        // #2593: HTTP packets must contain either Transfer-Encoding or
        // Content-length
        bool is_response = mg_ncasecmp(hm.method.buf, "HTTP/", 5) == 0;
 800afd4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800afd8:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2205      	movs	r2, #5
 800afe0:	4953      	ldr	r1, [pc, #332]	@ (800b130 <http_cb+0x3fc>)
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fd f991 	bl	800830a <mg_ncasecmp>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	bf0c      	ite	eq
 800afee:	2301      	moveq	r3, #1
 800aff0:	2300      	movne	r3, #0
 800aff2:	f887 326b 	strb.w	r3, [r7, #619]	@ 0x26b
        bool require_content_len = false;
 800aff6:	2300      	movs	r3, #0
 800aff8:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800affc:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800b000:	f083 0301 	eor.w	r3, r3, #1
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d030      	beq.n	800b06c <http_cb+0x338>
 800b00a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800b00e:	4949      	ldr	r1, [pc, #292]	@ (800b134 <http_cb+0x400>)
 800b010:	4618      	mov	r0, r3
 800b012:	f009 f85b 	bl	80140cc <mg_str_s>
 800b016:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b01a:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800b01e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800b022:	cb0c      	ldmia	r3, {r2, r3}
 800b024:	c903      	ldmia	r1, {r0, r1}
 800b026:	f009 f914 	bl	8014252 <mg_strcasecmp>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d012      	beq.n	800b056 <http_cb+0x322>
                             mg_strcasecmp(hm.method, mg_str("PUT")) == 0)) {
 800b030:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800b034:	4940      	ldr	r1, [pc, #256]	@ (800b138 <http_cb+0x404>)
 800b036:	4618      	mov	r0, r3
 800b038:	f009 f848 	bl	80140cc <mg_str_s>
 800b03c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b040:	f5a3 711e 	sub.w	r1, r3, #632	@ 0x278
 800b044:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800b048:	cb0c      	ldmia	r3, {r2, r3}
 800b04a:	c903      	ldmia	r1, {r0, r1}
 800b04c:	f009 f901 	bl	8014252 <mg_strcasecmp>
 800b050:	4603      	mov	r3, r0
        if (!is_response && (mg_strcasecmp(hm.method, mg_str("POST")) == 0 ||
 800b052:	2b00      	cmp	r3, #0
 800b054:	d10a      	bne.n	800b06c <http_cb+0x338>
          // POST and PUT should include an entity body. Therefore, they should
          // contain a Content-length header. Other requests can also contain a
          // body, but their content has no defined semantics (RFC 7231)
          require_content_len = true;
 800b056:	2301      	movs	r3, #1
 800b058:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
          ofs += (size_t) n;  // this request has been processed
 800b05c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800b060:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800b064:	4413      	add	r3, r2
 800b066:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800b06a:	e022      	b.n	800b0b2 <http_cb+0x37e>
        } else if (is_response) {
 800b06c:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800b070:	2b00      	cmp	r3, #0
 800b072:	d01e      	beq.n	800b0b2 <http_cb+0x37e>
          // HTTP spec 7.2 Entity body: All other responses must include a body
          // or Content-Length header field defined with a value of 0.
          int status = mg_http_status(&hm);
 800b074:	f107 0310 	add.w	r3, r7, #16
 800b078:	4618      	mov	r0, r3
 800b07a:	f7ff fd9c 	bl	800abb6 <mg_http_status>
 800b07e:	f8c7 0264 	str.w	r0, [r7, #612]	@ 0x264
          require_content_len = status >= 200 && status != 204 && status != 304;
 800b082:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800b086:	2bc7      	cmp	r3, #199	@ 0xc7
 800b088:	dd0a      	ble.n	800b0a0 <http_cb+0x36c>
 800b08a:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800b08e:	2bcc      	cmp	r3, #204	@ 0xcc
 800b090:	d006      	beq.n	800b0a0 <http_cb+0x36c>
 800b092:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 800b096:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 800b09a:	d001      	beq.n	800b0a0 <http_cb+0x36c>
 800b09c:	2301      	movs	r3, #1
 800b09e:	e000      	b.n	800b0a2 <http_cb+0x36e>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
 800b0a6:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	f887 3282 	strb.w	r3, [r7, #642]	@ 0x282
        }
        if (require_content_len) {
 800b0b2:	f897 3282 	ldrb.w	r3, [r7, #642]	@ 0x282
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d049      	beq.n	800b14e <http_cb+0x41a>
          if (!c->is_client) mg_http_reply(c, 411, "", "");
 800b0ba:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b0be:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b0c8:	f003 0302 	and.w	r3, r3, #2
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d10a      	bne.n	800b0e8 <http_cb+0x3b4>
 800b0d2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b0d6:	f5a3 701f 	sub.w	r0, r3, #636	@ 0x27c
 800b0da:	4b18      	ldr	r3, [pc, #96]	@ (800b13c <http_cb+0x408>)
 800b0dc:	4a17      	ldr	r2, [pc, #92]	@ (800b13c <http_cb+0x408>)
 800b0de:	f240 119b 	movw	r1, #411	@ 0x19b
 800b0e2:	6800      	ldr	r0, [r0, #0]
 800b0e4:	f7fe fc16 	bl	8009914 <mg_http_reply>
          MG_ERROR(("Content length missing from %s", is_response ? "response" : "request"));
 800b0e8:	4b08      	ldr	r3, [pc, #32]	@ (800b10c <http_cb+0x3d8>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	dd2e      	ble.n	800b14e <http_cb+0x41a>
 800b0f0:	4b07      	ldr	r3, [pc, #28]	@ (800b110 <http_cb+0x3dc>)
 800b0f2:	f640 12d3 	movw	r2, #2515	@ 0x9d3
 800b0f6:	4907      	ldr	r1, [pc, #28]	@ (800b114 <http_cb+0x3e0>)
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	f001 f99b 	bl	800c434 <mg_log_prefix>
 800b0fe:	f897 326b 	ldrb.w	r3, [r7, #619]	@ 0x26b
 800b102:	2b00      	cmp	r3, #0
 800b104:	d01e      	beq.n	800b144 <http_cb+0x410>
 800b106:	4b0e      	ldr	r3, [pc, #56]	@ (800b140 <http_cb+0x40c>)
 800b108:	e01d      	b.n	800b146 <http_cb+0x412>
 800b10a:	bf00      	nop
 800b10c:	24000258 	.word	0x24000258
 800b110:	08028048 	.word	0x08028048
 800b114:	08024478 	.word	0x08024478
 800b118:	0802520c 	.word	0x0802520c
 800b11c:	08025224 	.word	0x08025224
 800b120:	08025240 	.word	0x08025240
 800b124:	08025254 	.word	0x08025254
 800b128:	0802525c 	.word	0x0802525c
 800b12c:	08025278 	.word	0x08025278
 800b130:	080247d4 	.word	0x080247d4
 800b134:	080247f0 	.word	0x080247f0
 800b138:	080247ec 	.word	0x080247ec
 800b13c:	08024cb8 	.word	0x08024cb8
 800b140:	08025288 	.word	0x08025288
 800b144:	4bc6      	ldr	r3, [pc, #792]	@ (800b460 <http_cb+0x72c>)
 800b146:	4619      	mov	r1, r3
 800b148:	48c6      	ldr	r0, [pc, #792]	@ (800b464 <http_cb+0x730>)
 800b14a:	f001 f9c3 	bl	800c4d4 <mg_log>
        }
      }

      if (is_chunked) {
 800b14e:	f897 3283 	ldrb.w	r3, [r7, #643]	@ 0x283
 800b152:	2b00      	cmp	r3, #0
 800b154:	f000 80c9 	beq.w	800b2ea <http_cb+0x5b6>
        // For chunked data, strip off prefixes and suffixes from chunks
        // and relocate them right after the headers, then report a message
        char *s = (char *) c->recv.buf + ofs + n;
 800b158:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b15c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b164:	f8d7 1274 	ldr.w	r1, [r7, #628]	@ 0x274
 800b168:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b16c:	440b      	add	r3, r1
 800b16e:	4413      	add	r3, r2
 800b170:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
        int o = 0, pl, dl, cl, len = (int) (c->recv.len - ofs - (size_t) n);
 800b174:	2300      	movs	r3, #0
 800b176:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800b17a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b17e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b186:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b18a:	1ad2      	subs	r2, r2, r3
 800b18c:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800b190:	1ad3      	subs	r3, r2, r3
 800b192:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258

        // Find zero-length chunk (the end of the body)
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0 && dl) o += cl;
 800b196:	e006      	b.n	800b1a6 <http_cb+0x472>
 800b198:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800b19c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800b1a6:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b1aa:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800b1ae:	18d0      	adds	r0, r2, r3
 800b1b0:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800b1b4:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b1b8:	1ad1      	subs	r1, r2, r3
 800b1ba:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800b1be:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800b1c2:	f7ff fd28 	bl	800ac16 <skip_chunk>
 800b1c6:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800b1ca:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	dd03      	ble.n	800b1da <http_cb+0x4a6>
 800b1d2:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d1de      	bne.n	800b198 <http_cb+0x464>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800b1da:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 8126 	beq.w	800b430 <http_cb+0x6fc>
        if (cl < 0) {
 800b1e4:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	da08      	bge.n	800b1fe <http_cb+0x4ca>
          mg_error(c, "Invalid chunk");
 800b1ec:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b1f0:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b1f4:	499c      	ldr	r1, [pc, #624]	@ (800b468 <http_cb+0x734>)
 800b1f6:	6818      	ldr	r0, [r3, #0]
 800b1f8:	f7fb fc0c 	bl	8006a14 <mg_error>
          break;
 800b1fc:	e11b      	b.n	800b436 <http_cb+0x702>
        }

        // Zero chunk found. Second pass: strip + relocate
        o = 0, hm.body.len = 0, hm.message.len = (size_t) n;
 800b1fe:	2300      	movs	r3, #0
 800b200:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800b204:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b208:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800b212:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800b216:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b21a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b21e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800b222:	e03e      	b.n	800b2a2 <http_cb+0x56e>
          memmove(s + hm.body.len, s + o + pl, (size_t) dl);
 800b224:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b228:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b22c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b230:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800b234:	18d0      	adds	r0, r2, r3
 800b236:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b23a:	f8d7 222c 	ldr.w	r2, [r7, #556]	@ 0x22c
 800b23e:	4413      	add	r3, r2
 800b240:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800b244:	4413      	add	r3, r2
 800b246:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800b24a:	4619      	mov	r1, r3
 800b24c:	f018 fa8d 	bl	802376a <memmove>
          o += cl, hm.body.len += (size_t) dl, hm.message.len += (size_t) dl;
 800b250:	f8d7 227c 	ldr.w	r2, [r7, #636]	@ 0x27c
 800b254:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b258:	4413      	add	r3, r2
 800b25a:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800b25e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b262:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b266:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b26a:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800b26e:	441a      	add	r2, r3
 800b270:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b274:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b278:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800b27c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b280:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b284:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b288:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 800b28c:	441a      	add	r2, r3
 800b28e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b292:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b296:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
          if (dl == 0) break;
 800b29a:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d016      	beq.n	800b2d0 <http_cb+0x59c>
        while ((cl = skip_chunk(s + o, len - o, &pl, &dl)) > 0) {
 800b2a2:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b2a6:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800b2aa:	18d0      	adds	r0, r2, r3
 800b2ac:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 800b2b0:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b2b4:	1ad1      	subs	r1, r2, r3
 800b2b6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 800b2ba:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 800b2be:	f7ff fcaa 	bl	800ac16 <skip_chunk>
 800b2c2:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
 800b2c6:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	dcaa      	bgt.n	800b224 <http_cb+0x4f0>
 800b2ce:	e000      	b.n	800b2d2 <http_cb+0x59e>
          if (dl == 0) break;
 800b2d0:	bf00      	nop
        }
        ofs += (size_t) (n + o);
 800b2d2:	f8d7 2274 	ldr.w	r2, [r7, #628]	@ 0x274
 800b2d6:	f8d7 327c 	ldr.w	r3, [r7, #636]	@ 0x27c
 800b2da:	4413      	add	r3, r2
 800b2dc:	461a      	mov	r2, r3
 800b2de:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 800b2e8:	e026      	b.n	800b338 <http_cb+0x604>
      } else {  // Normal, non-chunked data
        size_t len = c->recv.len - ofs - (size_t) n;
 800b2ea:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b2ee:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b2f6:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b2fa:	1ad2      	subs	r2, r2, r3
 800b2fc:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
        if (hm.body.len > len) break;  // Buffer more data
 800b306:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b30a:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b30e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b312:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800b316:	429a      	cmp	r2, r3
 800b318:	f0c0 808c 	bcc.w	800b434 <http_cb+0x700>
        ofs += (size_t) n + hm.body.len;
 800b31c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b320:	f5a3 731e 	sub.w	r3, r3, #632	@ 0x278
 800b324:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b328:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 800b32c:	4413      	add	r3, r2
 800b32e:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800b332:	4413      	add	r3, r2
 800b334:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
      }

      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 800b338:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b33c:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b346:	f003 0304 	and.w	r3, r3, #4
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00a      	beq.n	800b366 <http_cb+0x632>
 800b350:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b354:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 800b35e:	f043 0301 	orr.w	r3, r3, #1
 800b362:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 800b366:	f107 0210 	add.w	r2, r7, #16
 800b36a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b36e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b372:	210b      	movs	r1, #11
 800b374:	6818      	ldr	r0, [r3, #0]
 800b376:	f7fb fb2c 	bl	80069d2 <mg_call>
      if (c->is_accepted && !c->is_resp) {
 800b37a:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b37e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800b388:	f003 0304 	and.w	r3, r3, #4
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d034      	beq.n	800b3fc <http_cb+0x6c8>
 800b392:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b396:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d128      	bne.n	800b3fc <http_cb+0x6c8>
        struct mg_str *cc = mg_http_get_header(&hm, "Connection");
 800b3aa:	f107 0310 	add.w	r3, r7, #16
 800b3ae:	492f      	ldr	r1, [pc, #188]	@ (800b46c <http_cb+0x738>)
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f7fd fa39 	bl	8008828 <mg_http_get_header>
 800b3b6:	f8c7 0250 	str.w	r0, [r7, #592]	@ 0x250
        if (cc != NULL && mg_strcasecmp(*cc, mg_str("close")) == 0) {
 800b3ba:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d01c      	beq.n	800b3fc <http_cb+0x6c8>
 800b3c2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800b3c6:	492a      	ldr	r1, [pc, #168]	@ (800b470 <http_cb+0x73c>)
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f008 fe7f 	bl	80140cc <mg_str_s>
 800b3ce:	f8d7 1250 	ldr.w	r1, [r7, #592]	@ 0x250
 800b3d2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800b3d6:	cb0c      	ldmia	r3, {r2, r3}
 800b3d8:	c903      	ldmia	r1, {r0, r1}
 800b3da:	f008 ff3a 	bl	8014252 <mg_strcasecmp>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10b      	bne.n	800b3fc <http_cb+0x6c8>
          c->is_draining = 1;  // honor "Connection: close"
 800b3e4:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b3e8:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800b3f2:	f043 0310 	orr.w	r3, r3, #16
 800b3f6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 800b3fa:	e01c      	b.n	800b436 <http_cb+0x702>
    while (c->is_resp == 0 && ofs < c->recv.len) {
 800b3fc:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b400:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f893 30ae 	ldrb.w	r3, [r3, #174]	@ 0xae
 800b40a:	f003 0301 	and.w	r3, r3, #1
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b00      	cmp	r3, #0
 800b412:	d110      	bne.n	800b436 <http_cb+0x702>
 800b414:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b418:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b420:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800b424:	429a      	cmp	r2, r3
 800b426:	f4ff acd5 	bcc.w	800add4 <http_cb+0xa0>
 800b42a:	e004      	b.n	800b436 <http_cb+0x702>
      if (n == 0) break;                 // Request is not buffered yet
 800b42c:	bf00      	nop
 800b42e:	e002      	b.n	800b436 <http_cb+0x702>
        if (cl == 0) break;  // No zero-len chunk, buffer more data
 800b430:	bf00      	nop
 800b432:	e000      	b.n	800b436 <http_cb+0x702>
        if (hm.body.len > len) break;  // Buffer more data
 800b434:	bf00      	nop
        }
      }
    }
    if (ofs > 0) mg_iobuf_del(&c->recv, 0, ofs);  // Delete processed data
 800b436:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00b      	beq.n	800b456 <http_cb+0x722>
 800b43e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 800b442:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	3338      	adds	r3, #56	@ 0x38
 800b44a:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 800b44e:	2100      	movs	r1, #0
 800b450:	4618      	mov	r0, r3
 800b452:	f000 f923 	bl	800b69c <mg_iobuf_del>
  }
  (void) ev_data;
}
 800b456:	f507 7722 	add.w	r7, r7, #648	@ 0x288
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	08025294 	.word	0x08025294
 800b464:	0802529c 	.word	0x0802529c
 800b468:	080252bc 	.word	0x080252bc
 800b46c:	080252cc 	.word	0x080252cc
 800b470:	080252d8 	.word	0x080252d8

0800b474 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
 800b480:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	68b9      	ldr	r1, [r7, #8]
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f001 fc51 	bl	800cd30 <mg_listen>
 800b48e:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <mg_http_listen+0x2a>
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	4a03      	ldr	r2, [pc, #12]	@ (800b4a8 <mg_http_listen+0x34>)
 800b49a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  return c;
 800b49e:	697b      	ldr	r3, [r7, #20]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	0800ad35 	.word	0x0800ad35

0800b4ac <roundup>:





static size_t roundup(size_t size, size_t align) {
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00a      	beq.n	800b4d2 <roundup+0x26>
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	1e5a      	subs	r2, r3, #1
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4ca:	683a      	ldr	r2, [r7, #0]
 800b4cc:	fb02 f303 	mul.w	r3, r2, r3
 800b4d0:	e000      	b.n	800b4d4 <roundup+0x28>
 800b4d2:	687b      	ldr	r3, [r7, #4]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 800b4e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b4e4:	b088      	sub	sp, #32
 800b4e6:	af02      	add	r7, sp, #8
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	6039      	str	r1, [r7, #0]
  int ok = 1;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	68db      	ldr	r3, [r3, #12]
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6838      	ldr	r0, [r7, #0]
 800b4f8:	f7ff ffd8 	bl	800b4ac <roundup>
 800b4fc:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d117      	bne.n	800b534 <mg_iobuf_resize+0x54>
    mg_bzero(io->buf, io->size);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	4619      	mov	r1, r3
 800b50e:	4610      	mov	r0, r2
 800b510:	f013 ff96 	bl	801f440 <mg_bzero>
    free(io->buf);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4618      	mov	r0, r3
 800b51a:	f017 fe8f 	bl	802323c <free>
    io->buf = NULL;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2200      	movs	r2, #0
 800b528:	605a      	str	r2, [r3, #4]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685a      	ldr	r2, [r3, #4]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	609a      	str	r2, [r3, #8]
 800b532:	e053      	b.n	800b5dc <mg_iobuf_resize+0xfc>
  } else if (new_size != io->size) {
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	685b      	ldr	r3, [r3, #4]
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d04e      	beq.n	800b5dc <mg_iobuf_resize+0xfc>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	2001      	movs	r0, #1
 800b542:	f017 fe57 	bl	80231f4 <calloc>
 800b546:	4603      	mov	r3, r0
 800b548:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d028      	beq.n	800b5a2 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	4293      	cmp	r3, r2
 800b558:	bf28      	it	cs
 800b55a:	4613      	movcs	r3, r2
 800b55c:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00a      	beq.n	800b57a <mg_iobuf_resize+0x9a>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d006      	beq.n	800b57a <mg_iobuf_resize+0x9a>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	4619      	mov	r1, r3
 800b574:	6938      	ldr	r0, [r7, #16]
 800b576:	f018 f8f8 	bl	802376a <memmove>
      mg_bzero(io->buf, io->size);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681a      	ldr	r2, [r3, #0]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	4619      	mov	r1, r3
 800b584:	4610      	mov	r0, r2
 800b586:	f013 ff5b 	bl	801f440 <mg_bzero>
      free(io->buf);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4618      	mov	r0, r3
 800b590:	f017 fe54 	bl	802323c <free>
      io->buf = (unsigned char *) p;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	693a      	ldr	r2, [r7, #16]
 800b598:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	683a      	ldr	r2, [r7, #0]
 800b59e:	605a      	str	r2, [r3, #4]
 800b5a0:	e01c      	b.n	800b5dc <mg_iobuf_resize+0xfc>
    } else {
      ok = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 800b5a6:	4b10      	ldr	r3, [pc, #64]	@ (800b5e8 <mg_iobuf_resize+0x108>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dd16      	ble.n	800b5dc <mg_iobuf_resize+0xfc>
 800b5ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b5ec <mg_iobuf_resize+0x10c>)
 800b5b0:	f640 224d 	movw	r2, #2637	@ 0xa4d
 800b5b4:	490e      	ldr	r1, [pc, #56]	@ (800b5f0 <mg_iobuf_resize+0x110>)
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	f000 ff3c 	bl	800c434 <mg_log_prefix>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	685b      	ldr	r3, [r3, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	4698      	mov	r8, r3
 800b5c4:	4691      	mov	r9, r2
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	461c      	mov	r4, r3
 800b5cc:	4615      	mov	r5, r2
 800b5ce:	e9cd 4500 	strd	r4, r5, [sp]
 800b5d2:	4642      	mov	r2, r8
 800b5d4:	464b      	mov	r3, r9
 800b5d6:	4807      	ldr	r0, [pc, #28]	@ (800b5f4 <mg_iobuf_resize+0x114>)
 800b5d8:	f000 ff7c 	bl	800c4d4 <mg_log>
    }
  }
  return ok;
 800b5dc:	697b      	ldr	r3, [r7, #20]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b5e8:	24000258 	.word	0x24000258
 800b5ec:	08028050 	.word	0x08028050
 800b5f0:	08024478 	.word	0x08024478
 800b5f4:	08025318 	.word	0x08025318

0800b5f8 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b086      	sub	sp, #24
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	607a      	str	r2, [r7, #4]
 800b604:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	689a      	ldr	r2, [r3, #8]
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	441a      	add	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	4619      	mov	r1, r3
 800b614:	4610      	mov	r0, r2
 800b616:	f7ff ff49 	bl	800b4ac <roundup>
 800b61a:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800b61c:	6979      	ldr	r1, [r7, #20]
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7ff ff5e 	bl	800b4e0 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d001      	beq.n	800b632 <mg_iobuf_add+0x3a>
 800b62e:	2300      	movs	r3, #0
 800b630:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d210      	bcs.n	800b65e <mg_iobuf_add+0x66>
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	68b9      	ldr	r1, [r7, #8]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	440b      	add	r3, r1
 800b646:	18d0      	adds	r0, r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	18d1      	adds	r1, r2, r3
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	689a      	ldr	r2, [r3, #8]
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	461a      	mov	r2, r3
 800b65a:	f018 f886 	bl	802376a <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d008      	beq.n	800b676 <mg_iobuf_add+0x7e>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	4413      	add	r3, r2
 800b66c:	683a      	ldr	r2, [r7, #0]
 800b66e:	6879      	ldr	r1, [r7, #4]
 800b670:	4618      	mov	r0, r3
 800b672:	f018 f87a 	bl	802376a <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d902      	bls.n	800b686 <mg_iobuf_add+0x8e>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	68ba      	ldr	r2, [r7, #8]
 800b684:	609a      	str	r2, [r3, #8]
  io->len += len;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	689a      	ldr	r2, [r3, #8]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	441a      	add	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	609a      	str	r2, [r3, #8]
  return len;
 800b692:	683b      	ldr	r3, [r7, #0]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3718      	adds	r7, #24
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d902      	bls.n	800b6b8 <mg_iobuf_del+0x1c>
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	689b      	ldr	r3, [r3, #8]
 800b6b6:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 800b6b8:	68ba      	ldr	r2, [r7, #8]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	441a      	add	r2, r3
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d904      	bls.n	800b6d0 <mg_iobuf_del+0x34>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	689a      	ldr	r2, [r3, #8]
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d012      	beq.n	800b6fe <mg_iobuf_del+0x62>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	18d0      	adds	r0, r2, r3
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68b9      	ldr	r1, [r7, #8]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	440b      	add	r3, r1
 800b6ea:	18d1      	adds	r1, r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	689a      	ldr	r2, [r3, #8]
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	1ad2      	subs	r2, r2, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	f018 f836 	bl	802376a <memmove>
  if (io->buf) mg_bzero(io->buf + io->len - len, len);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00a      	beq.n	800b71c <mg_iobuf_del+0x80>
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6899      	ldr	r1, [r3, #8]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	1acb      	subs	r3, r1, r3
 800b712:	4413      	add	r3, r2
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	4618      	mov	r0, r3
 800b718:	f013 fe92 	bl	801f440 <mg_bzero>
  io->len -= len;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	689a      	ldr	r2, [r3, #8]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	1ad2      	subs	r2, r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	609a      	str	r2, [r3, #8]
  return len;
 800b728:	687b      	ldr	r3, [r7, #4]
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}

0800b732 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800b732:	b580      	push	{r7, lr}
 800b734:	b082      	sub	sp, #8
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800b73a:	2100      	movs	r1, #0
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f7ff fecf 	bl	800b4e0 <mg_iobuf_resize>
}
 800b742:	bf00      	nop
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 800b74c:	b480      	push	{r7}
 800b74e:	b083      	sub	sp, #12
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <escapeseq+0x12>
 800b75a:	4b04      	ldr	r3, [pc, #16]	@ (800b76c <escapeseq+0x20>)
 800b75c:	e000      	b.n	800b760 <escapeseq+0x14>
 800b75e:	4b04      	ldr	r3, [pc, #16]	@ (800b770 <escapeseq+0x24>)
}
 800b760:	4618      	mov	r0, r3
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr
 800b76c:	08025324 	.word	0x08025324
 800b770:	0802532c 	.word	0x0802532c

0800b774 <json_esc>:

static char json_esc(int c, int esc) {
 800b774:	b580      	push	{r7, lr}
 800b776:	b086      	sub	sp, #24
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 800b77e:	6838      	ldr	r0, [r7, #0]
 800b780:	f7ff ffe4 	bl	800b74c <escapeseq>
 800b784:	6138      	str	r0, [r7, #16]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	bf0c      	ite	eq
 800b78c:	2301      	moveq	r3, #1
 800b78e:	2300      	movne	r3, #0
 800b790:	b2db      	uxtb	r3, r3
 800b792:	4618      	mov	r0, r3
 800b794:	f7ff ffda 	bl	800b74c <escapeseq>
 800b798:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	617b      	str	r3, [r7, #20]
 800b79e:	e010      	b.n	800b7c2 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d107      	bne.n	800b7bc <json_esc+0x48>
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	e007      	b.n	800b7cc <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	617b      	str	r3, [r7, #20]
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1ea      	bne.n	800b7a0 <json_esc+0x2c>
  }
  return 0;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
 800b7dc:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800b7de:	2300      	movs	r3, #0
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	e02e      	b.n	800b842 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800b7ee:	d114      	bne.n	800b81a <mg_pass_string+0x46>
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	dd0f      	ble.n	800b81a <mg_pass_string+0x46>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	2101      	movs	r1, #1
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff ffb4 	bl	800b774 <json_esc>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d003      	beq.n	800b81a <mg_pass_string+0x46>
      i++;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	3301      	adds	r3, #1
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	e010      	b.n	800b83c <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	4413      	add	r3, r2
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d102      	bne.n	800b82c <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800b826:	f06f 0301 	mvn.w	r3, #1
 800b82a:	e010      	b.n	800b84e <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	4413      	add	r3, r2
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b22      	cmp	r3, #34	@ 0x22
 800b836:	d101      	bne.n	800b83c <mg_pass_string+0x68>
      return i;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	e008      	b.n	800b84e <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	429a      	cmp	r2, r3
 800b848:	dbcc      	blt.n	800b7e4 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800b84a:	f06f 0301 	mvn.w	r3, #1
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
	...

0800b858 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 800b858:	b480      	push	{r7}
 800b85a:	b091      	sub	sp, #68	@ 0x44
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800b864:	f04f 0200 	mov.w	r2, #0
 800b868:	f04f 0300 	mov.w	r3, #0
 800b86c:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  int i = 0, sign = 1;
 800b870:	2300      	movs	r3, #0
 800b872:	637b      	str	r3, [r7, #52]	@ 0x34
 800b874:	2301      	movs	r3, #1
 800b876:	633b      	str	r3, [r7, #48]	@ 0x30

  // Sign
  if (i < len && *p == '-') {
 800b878:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	da0a      	bge.n	800b896 <mg_atod+0x3e>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b2d      	cmp	r3, #45	@ 0x2d
 800b886:	d106      	bne.n	800b896 <mg_atod+0x3e>
    sign = -1, i++;
 800b888:	f04f 33ff 	mov.w	r3, #4294967295
 800b88c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b88e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b890:	3301      	adds	r3, #1
 800b892:	637b      	str	r3, [r7, #52]	@ 0x34
 800b894:	e00a      	b.n	800b8ac <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 800b896:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	da21      	bge.n	800b8e2 <mg_atod+0x8a>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b8a4:	d11d      	bne.n	800b8e2 <mg_atod+0x8a>
    i++;
 800b8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b8ac:	e019      	b.n	800b8e2 <mg_atod+0x8a>
    d *= 10.0;
 800b8ae:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800b8b2:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800b8b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8ba:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
    d += p[i] - '0';
 800b8be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	3b30      	subs	r3, #48	@ 0x30
 800b8c8:	ee07 3a90 	vmov	s15, r3
 800b8cc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b8d0:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b8d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b8d8:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8de:	3301      	adds	r3, #1
 800b8e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	da0b      	bge.n	800b902 <mg_atod+0xaa>
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ec:	68fa      	ldr	r2, [r7, #12]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	2b2f      	cmp	r3, #47	@ 0x2f
 800b8f4:	d905      	bls.n	800b902 <mg_atod+0xaa>
 800b8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	4413      	add	r3, r2
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2b39      	cmp	r3, #57	@ 0x39
 800b900:	d9d5      	bls.n	800b8ae <mg_atod+0x56>
  }
  d *= sign;
 800b902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b904:	ee07 3a90 	vmov	s15, r3
 800b908:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b90c:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b910:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b914:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 800b918:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	da51      	bge.n	800b9c4 <mg_atod+0x16c>
 800b920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	4413      	add	r3, r2
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	2b2e      	cmp	r3, #46	@ 0x2e
 800b92a:	d14b      	bne.n	800b9c4 <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 800b92c:	f04f 0200 	mov.w	r2, #0
 800b930:	f04f 0300 	mov.w	r3, #0
 800b934:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800b938:	a36d      	add	r3, pc, #436	@ (adr r3, 800baf0 <mg_atod+0x298>)
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800b942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b944:	3301      	adds	r3, #1
 800b946:	637b      	str	r3, [r7, #52]	@ 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b948:	e01d      	b.n	800b986 <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 800b94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b94c:	68fa      	ldr	r2, [r7, #12]
 800b94e:	4413      	add	r3, r2
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	3b30      	subs	r3, #48	@ 0x30
 800b954:	ee07 3a90 	vmov	s15, r3
 800b958:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b95c:	ed97 7b08 	vldr	d7, [r7, #32]
 800b960:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b964:	ed97 6b0a 	vldr	d6, [r7, #40]	@ 0x28
 800b968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b96c:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28
      base /= 10.0;
 800b970:	ed97 6b08 	vldr	d6, [r7, #32]
 800b974:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800b978:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b97c:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800b980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b982:	3301      	adds	r3, #1
 800b984:	637b      	str	r3, [r7, #52]	@ 0x34
 800b986:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	da0b      	bge.n	800b9a6 <mg_atod+0x14e>
 800b98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	2b2f      	cmp	r3, #47	@ 0x2f
 800b998:	d905      	bls.n	800b9a6 <mg_atod+0x14e>
 800b99a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	2b39      	cmp	r3, #57	@ 0x39
 800b9a4:	d9d1      	bls.n	800b94a <mg_atod+0xf2>
    }
    d += frac * sign;
 800b9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9a8:	ee07 3a90 	vmov	s15, r3
 800b9ac:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800b9b0:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 800b9b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b9b8:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800b9bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b9c0:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 800b9c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	da7e      	bge.n	800baca <mg_atod+0x272>
 800b9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	781b      	ldrb	r3, [r3, #0]
 800b9d4:	2b65      	cmp	r3, #101	@ 0x65
 800b9d6:	d005      	beq.n	800b9e4 <mg_atod+0x18c>
 800b9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	4413      	add	r3, r2
 800b9de:	781b      	ldrb	r3, [r3, #0]
 800b9e0:	2b45      	cmp	r3, #69	@ 0x45
 800b9e2:	d172      	bne.n	800baca <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	61bb      	str	r3, [r7, #24]
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	617b      	str	r3, [r7, #20]
    i++;
 800b9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800b9f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	da0a      	bge.n	800ba10 <mg_atod+0x1b8>
 800b9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	4413      	add	r3, r2
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	2b2d      	cmp	r3, #45	@ 0x2d
 800ba04:	d104      	bne.n	800ba10 <mg_atod+0x1b8>
 800ba06:	2301      	movs	r3, #1
 800ba08:	617b      	str	r3, [r7, #20]
 800ba0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (i < len && p[i] == '+') i++;
 800ba10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	da19      	bge.n	800ba4c <mg_atod+0x1f4>
 800ba18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	2b2b      	cmp	r3, #43	@ 0x2b
 800ba22:	d113      	bne.n	800ba4c <mg_atod+0x1f4>
 800ba24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba26:	3301      	adds	r3, #1
 800ba28:	637b      	str	r3, [r7, #52]	@ 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800ba2a:	e00f      	b.n	800ba4c <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 800ba2c:	69ba      	ldr	r2, [r7, #24]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	4413      	add	r3, r2
 800ba34:	005b      	lsls	r3, r3, #1
 800ba36:	4619      	mov	r1, r3
 800ba38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	637a      	str	r2, [r7, #52]	@ 0x34
 800ba3e:	461a      	mov	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	4413      	add	r3, r2
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	3b30      	subs	r3, #48	@ 0x30
 800ba48:	440b      	add	r3, r1
 800ba4a:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800ba4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	da0f      	bge.n	800ba74 <mg_atod+0x21c>
 800ba54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	4413      	add	r3, r2
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ba5e:	d909      	bls.n	800ba74 <mg_atod+0x21c>
 800ba60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	4413      	add	r3, r2
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	2b39      	cmp	r3, #57	@ 0x39
 800ba6a:	d803      	bhi.n	800ba74 <mg_atod+0x21c>
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800ba72:	dbdb      	blt.n	800ba2c <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d002      	beq.n	800ba80 <mg_atod+0x228>
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	425b      	negs	r3, r3
 800ba7e:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 800ba80:	2300      	movs	r3, #0
 800ba82:	61fb      	str	r3, [r7, #28]
 800ba84:	e00a      	b.n	800ba9c <mg_atod+0x244>
 800ba86:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 800ba8a:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ba8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba92:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	61fb      	str	r3, [r7, #28]
 800ba9c:	69fa      	ldr	r2, [r7, #28]
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	dbf0      	blt.n	800ba86 <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 800baa4:	2300      	movs	r3, #0
 800baa6:	61fb      	str	r3, [r7, #28]
 800baa8:	e00a      	b.n	800bac0 <mg_atod+0x268>
 800baaa:	ed97 6b0e 	vldr	d6, [r7, #56]	@ 0x38
 800baae:	eeb2 5b04 	vmov.f64	d5, #36	@ 0x41200000  10.0
 800bab2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bab6:	ed87 7b0e 	vstr	d7, [r7, #56]	@ 0x38
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	3301      	adds	r3, #1
 800babe:	61fb      	str	r3, [r7, #28]
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	425b      	negs	r3, r3
 800bac4:	69fa      	ldr	r2, [r7, #28]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	dbef      	blt.n	800baaa <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <mg_atod+0x27e>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bad4:	601a      	str	r2, [r3, #0]
  return d;
 800bad6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bada:	ec43 2b17 	vmov	d7, r2, r3
}
 800bade:	eeb0 0b47 	vmov.f64	d0, d7
 800bae2:	3744      	adds	r7, #68	@ 0x44
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	f3af 8000 	nop.w
 800baf0:	9999999a 	.word	0x9999999a
 800baf4:	3fb99999 	.word	0x3fb99999

0800baf8 <mg_json_get>:
    if (ofs > obj.len) ofs = 0;
  }
  return ofs;
}

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 800baf8:	b590      	push	{r4, r7, lr}
 800bafa:	b09b      	sub	sp, #108	@ 0x6c
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	f107 0408 	add.w	r4, r7, #8
 800bb02:	e884 0003 	stmia.w	r4, {r0, r1}
 800bb06:	607a      	str	r2, [r7, #4]
 800bb08:	603b      	str	r3, [r7, #0]
  const char *s = json.buf;
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	647b      	str	r3, [r7, #68]	@ 0x44
  int len = (int) json.len;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	643b      	str	r3, [r7, #64]	@ 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800bb12:	2300      	movs	r3, #0
 800bb14:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 800bb18:	2300      	movs	r3, #0
 800bb1a:	663b      	str	r3, [r7, #96]	@ 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int depth = 0;         // Current depth (nesting level)
 800bb20:	2300      	movs	r3, #0
 800bb22:	65bb      	str	r3, [r7, #88]	@ 0x58
  int ed = 0;            // Expected depth
 800bb24:	2300      	movs	r3, #0
 800bb26:	657b      	str	r3, [r7, #84]	@ 0x54
  int pos = 1;           // Current position in `path`
 800bb28:	2301      	movs	r3, #1
 800bb2a:	653b      	str	r3, [r7, #80]	@ 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 800bb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb32:	f04f 33ff 	mov.w	r3, #4294967295
 800bb36:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (toklen) *toklen = 0;
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <mg_json_get+0x4c>
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	2200      	movs	r2, #0
 800bb42:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	2b24      	cmp	r3, #36	@ 0x24
 800bb4a:	d002      	beq.n	800bb52 <mg_json_get+0x5a>
 800bb4c:	f06f 0301 	mvn.w	r3, #1
 800bb50:	e308      	b.n	800c164 <mg_json_get+0x66c>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800bb52:	2300      	movs	r3, #0
 800bb54:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb56:	e2fe      	b.n	800c156 <mg_json_get+0x65e>
    unsigned char c = ((unsigned char *) s)[i];
 800bb58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bb5c:	4413      	add	r3, r2
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800bb64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb68:	2b20      	cmp	r3, #32
 800bb6a:	f000 82ee 	beq.w	800c14a <mg_json_get+0x652>
 800bb6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb72:	2b09      	cmp	r3, #9
 800bb74:	f000 82e9 	beq.w	800c14a <mg_json_get+0x652>
 800bb78:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb7c:	2b0a      	cmp	r3, #10
 800bb7e:	f000 82e4 	beq.w	800c14a <mg_json_get+0x652>
 800bb82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bb86:	2b0d      	cmp	r3, #13
 800bb88:	f000 82df 	beq.w	800c14a <mg_json_get+0x652>
    switch (expecting) {
 800bb8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800bb90:	2b03      	cmp	r3, #3
 800bb92:	f200 82dd 	bhi.w	800c150 <mg_json_get+0x658>
 800bb96:	a201      	add	r2, pc, #4	@ (adr r2, 800bb9c <mg_json_get+0xa4>)
 800bb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9c:	0800bbad 	.word	0x0800bbad
 800bba0:	0800be95 	.word	0x0800be95
 800bba4:	0800c023 	.word	0x0800c023
 800bba8:	0800c039 	.word	0x0800c039
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 800bbac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d101      	bne.n	800bbb8 <mg_json_get+0xc0>
 800bbb4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bbb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (c == '{') {
 800bbb8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bbbc:	2b7b      	cmp	r3, #123	@ 0x7b
 800bbbe:	d12b      	bne.n	800bc18 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800bbc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bbc2:	2b1d      	cmp	r3, #29
 800bbc4:	dd02      	ble.n	800bbcc <mg_json_get+0xd4>
 800bbc6:	f04f 33ff 	mov.w	r3, #4294967295
 800bbca:	e2cb      	b.n	800c164 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800bbcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bbce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbd0:	429a      	cmp	r2, r3
 800bbd2:	d114      	bne.n	800bbfe <mg_json_get+0x106>
 800bbd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	4413      	add	r3, r2
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbde:	d10e      	bne.n	800bbfe <mg_json_get+0x106>
 800bbe0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bbe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d10a      	bne.n	800bbfe <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 800bbe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbea:	3301      	adds	r3, #1
 800bbec:	657b      	str	r3, [r7, #84]	@ 0x54
 800bbee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bbf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bbfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
          }
          nesting[depth++] = c;
 800bbfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc00:	1c5a      	adds	r2, r3, #1
 800bc02:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bc04:	3368      	adds	r3, #104	@ 0x68
 800bc06:	443b      	add	r3, r7
 800bc08:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bc0c:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 800bc10:	2301      	movs	r3, #1
 800bc12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          break;
 800bc16:	e29b      	b.n	800c150 <mg_json_get+0x658>
        } else if (c == '[') {
 800bc18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bc1c:	2b5b      	cmp	r3, #91	@ 0x5b
 800bc1e:	d14e      	bne.n	800bcbe <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 800bc20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bc22:	2b1d      	cmp	r3, #29
 800bc24:	dd02      	ble.n	800bc2c <mg_json_get+0x134>
 800bc26:	f04f 33ff 	mov.w	r3, #4294967295
 800bc2a:	e29b      	b.n	800c164 <mg_json_get+0x66c>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 800bc2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bc2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d13a      	bne.n	800bcaa <mg_json_get+0x1b2>
 800bc34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	4413      	add	r3, r2
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	2b5b      	cmp	r3, #91	@ 0x5b
 800bc3e:	d134      	bne.n	800bcaa <mg_json_get+0x1b2>
 800bc40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d130      	bne.n	800bcaa <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 800bc48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc4a:	3301      	adds	r3, #1
 800bc4c:	657b      	str	r3, [r7, #84]	@ 0x54
 800bc4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc50:	3301      	adds	r3, #1
 800bc52:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc54:	2300      	movs	r3, #0
 800bc56:	64fb      	str	r3, [r7, #76]	@ 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800bc58:	2300      	movs	r3, #0
 800bc5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc5c:	e010      	b.n	800bc80 <mg_json_get+0x188>
              ei *= 10;
 800bc5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc60:	4613      	mov	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	005b      	lsls	r3, r3, #1
 800bc68:	64bb      	str	r3, [r7, #72]	@ 0x48
              ei += path[pos] - '0';
 800bc6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	4413      	add	r3, r2
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	3b30      	subs	r3, #48	@ 0x30
 800bc74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc76:	4413      	add	r3, r2
 800bc78:	64bb      	str	r3, [r7, #72]	@ 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 800bc7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	653b      	str	r3, [r7, #80]	@ 0x50
 800bc80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	4413      	add	r3, r2
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	2b5d      	cmp	r3, #93	@ 0x5d
 800bc8a:	d005      	beq.n	800bc98 <mg_json_get+0x1a0>
 800bc8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	4413      	add	r3, r2
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d1e2      	bne.n	800bc5e <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 800bc98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <mg_json_get+0x1b2>
 800bca4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bca6:	3301      	adds	r3, #1
 800bca8:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          nesting[depth++] = c;
 800bcaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcac:	1c5a      	adds	r2, r3, #1
 800bcae:	65ba      	str	r2, [r7, #88]	@ 0x58
 800bcb0:	3368      	adds	r3, #104	@ 0x68
 800bcb2:	443b      	add	r3, r7
 800bcb4:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bcb8:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800bcbc:	e248      	b.n	800c150 <mg_json_get+0x658>
        } else if (c == ']' && depth > 0) {  // Empty array
 800bcbe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bcc2:	2b5d      	cmp	r3, #93	@ 0x5d
 800bcc4:	d13a      	bne.n	800bd3c <mg_json_get+0x244>
 800bcc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	dd37      	ble.n	800bd3c <mg_json_get+0x244>
          MG_EOO(']');
 800bccc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d106      	bne.n	800bce2 <mg_json_get+0x1ea>
 800bcd4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bcd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d002      	beq.n	800bce2 <mg_json_get+0x1ea>
 800bcdc:	f06f 0302 	mvn.w	r3, #2
 800bce0:	e240      	b.n	800c164 <mg_json_get+0x66c>
 800bce2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bce6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bce8:	3b01      	subs	r3, #1
 800bcea:	3368      	adds	r3, #104	@ 0x68
 800bcec:	443b      	add	r3, r7
 800bcee:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800bcf2:	3302      	adds	r3, #2
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d002      	beq.n	800bcfe <mg_json_get+0x206>
 800bcf8:	f06f 0301 	mvn.w	r3, #1
 800bcfc:	e232      	b.n	800c164 <mg_json_get+0x66c>
 800bcfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd00:	3b01      	subs	r3, #1
 800bd02:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bd06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	f040 809c 	bne.w	800be46 <mg_json_get+0x34e>
 800bd0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd10:	687a      	ldr	r2, [r7, #4]
 800bd12:	4413      	add	r3, r2
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f040 8095 	bne.w	800be46 <mg_json_get+0x34e>
 800bd1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bd20:	429a      	cmp	r2, r3
 800bd22:	f040 8090 	bne.w	800be46 <mg_json_get+0x34e>
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d005      	beq.n	800bd38 <mg_json_get+0x240>
 800bd2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bd2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	601a      	str	r2, [r3, #0]
 800bd38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd3a:	e213      	b.n	800c164 <mg_json_get+0x66c>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800bd3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bd40:	2b74      	cmp	r3, #116	@ 0x74
 800bd42:	d113      	bne.n	800bd6c <mg_json_get+0x274>
 800bd44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd46:	3303      	adds	r3, #3
 800bd48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	dd0e      	ble.n	800bd6c <mg_json_get+0x274>
 800bd4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd52:	4413      	add	r3, r2
 800bd54:	2204      	movs	r2, #4
 800bd56:	4998      	ldr	r1, [pc, #608]	@ (800bfb8 <mg_json_get+0x4c0>)
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f017 fcf6 	bl	802374a <memcmp>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d103      	bne.n	800bd6c <mg_json_get+0x274>
          i += 3;
 800bd64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd66:	3303      	adds	r3, #3
 800bd68:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd6a:	e06c      	b.n	800be46 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 800bd6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bd70:	2b6e      	cmp	r3, #110	@ 0x6e
 800bd72:	d113      	bne.n	800bd9c <mg_json_get+0x2a4>
 800bd74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd76:	3303      	adds	r3, #3
 800bd78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	dd0e      	ble.n	800bd9c <mg_json_get+0x2a4>
 800bd7e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd82:	4413      	add	r3, r2
 800bd84:	2204      	movs	r2, #4
 800bd86:	498d      	ldr	r1, [pc, #564]	@ (800bfbc <mg_json_get+0x4c4>)
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f017 fcde 	bl	802374a <memcmp>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d103      	bne.n	800bd9c <mg_json_get+0x2a4>
          i += 3;
 800bd94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bd96:	3303      	adds	r3, #3
 800bd98:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd9a:	e054      	b.n	800be46 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 800bd9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bda0:	2b66      	cmp	r3, #102	@ 0x66
 800bda2:	d113      	bne.n	800bdcc <mg_json_get+0x2d4>
 800bda4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bda6:	3304      	adds	r3, #4
 800bda8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	dd0e      	ble.n	800bdcc <mg_json_get+0x2d4>
 800bdae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdb2:	4413      	add	r3, r2
 800bdb4:	2205      	movs	r2, #5
 800bdb6:	4982      	ldr	r1, [pc, #520]	@ (800bfc0 <mg_json_get+0x4c8>)
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f017 fcc6 	bl	802374a <memcmp>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d103      	bne.n	800bdcc <mg_json_get+0x2d4>
          i += 4;
 800bdc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdc6:	3304      	adds	r3, #4
 800bdc8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bdca:	e03c      	b.n	800be46 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800bdcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bdd0:	2b2d      	cmp	r3, #45	@ 0x2d
 800bdd2:	d007      	beq.n	800bde4 <mg_json_get+0x2ec>
 800bdd4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bdd8:	2b2f      	cmp	r3, #47	@ 0x2f
 800bdda:	d916      	bls.n	800be0a <mg_json_get+0x312>
 800bddc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bde0:	2b39      	cmp	r3, #57	@ 0x39
 800bde2:	d812      	bhi.n	800be0a <mg_json_get+0x312>
          int numlen = 0;
 800bde4:	2300      	movs	r3, #0
 800bde6:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 800bde8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bdec:	18d0      	adds	r0, r2, r3
 800bdee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bdf0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	f107 0210 	add.w	r2, r7, #16
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	f7ff fd2d 	bl	800b858 <mg_atod>
          i += numlen - 1;
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	3b01      	subs	r3, #1
 800be02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be04:	4413      	add	r3, r2
 800be06:	663b      	str	r3, [r7, #96]	@ 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800be08:	e01d      	b.n	800be46 <mg_json_get+0x34e>
        } else if (c == '"') {
 800be0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be0e:	2b22      	cmp	r3, #34	@ 0x22
 800be10:	d116      	bne.n	800be40 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800be12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be14:	3301      	adds	r3, #1
 800be16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800be18:	18d0      	adds	r0, r2, r3
 800be1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	3b01      	subs	r3, #1
 800be22:	4619      	mov	r1, r3
 800be24:	f7ff fcd6 	bl	800b7d4 <mg_pass_string>
 800be28:	6378      	str	r0, [r7, #52]	@ 0x34
          if (n < 0) return n;
 800be2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	da01      	bge.n	800be34 <mg_json_get+0x33c>
 800be30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be32:	e197      	b.n	800c164 <mg_json_get+0x66c>
          i += n + 1;
 800be34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be36:	3301      	adds	r3, #1
 800be38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be3a:	4413      	add	r3, r2
 800be3c:	663b      	str	r3, [r7, #96]	@ 0x60
 800be3e:	e002      	b.n	800be46 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 800be40:	f06f 0301 	mvn.w	r3, #1
 800be44:	e18e      	b.n	800c164 <mg_json_get+0x66c>
        }
        MG_CHECKRET('V');
 800be46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d114      	bne.n	800be78 <mg_json_get+0x380>
 800be4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	4413      	add	r3, r2
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d10e      	bne.n	800be78 <mg_json_get+0x380>
 800be5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be5e:	429a      	cmp	r2, r3
 800be60:	d10a      	bne.n	800be78 <mg_json_get+0x380>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d005      	beq.n	800be74 <mg_json_get+0x37c>
 800be68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800be6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	1c5a      	adds	r2, r3, #1
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be76:	e175      	b.n	800c164 <mg_json_get+0x66c>
        if (depth == ed && ei >= 0) ci++;
 800be78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800be7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d105      	bne.n	800be8c <mg_json_get+0x394>
 800be80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be82:	2b00      	cmp	r3, #0
 800be84:	db02      	blt.n	800be8c <mg_json_get+0x394>
 800be86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be88:	3301      	adds	r3, #1
 800be8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        expecting = S_COMMA_OR_EOO;
 800be8c:	2303      	movs	r3, #3
 800be8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        break;
 800be92:	e15d      	b.n	800c150 <mg_json_get+0x658>

      case S_KEY:
        if (c == '"') {
 800be94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800be98:	2b22      	cmp	r3, #34	@ 0x22
 800be9a:	d170      	bne.n	800bf7e <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 800be9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be9e:	3301      	adds	r3, #1
 800bea0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bea2:	18d0      	adds	r0, r2, r3
 800bea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bea6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bea8:	1ad3      	subs	r3, r2, r3
 800beaa:	3b01      	subs	r3, #1
 800beac:	4619      	mov	r1, r3
 800beae:	f7ff fc91 	bl	800b7d4 <mg_pass_string>
 800beb2:	63b8      	str	r0, [r7, #56]	@ 0x38
          if (n < 0) return n;
 800beb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	da01      	bge.n	800bebe <mg_json_get+0x3c6>
 800beba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bebc:	e152      	b.n	800c164 <mg_json_get+0x66c>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 800bebe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bec0:	1c5a      	adds	r2, r3, #1
 800bec2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec4:	4413      	add	r3, r2
 800bec6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bec8:	429a      	cmp	r2, r3
 800beca:	dc02      	bgt.n	800bed2 <mg_json_get+0x3da>
 800becc:	f06f 0302 	mvn.w	r3, #2
 800bed0:	e148      	b.n	800c164 <mg_json_get+0x66c>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 800bed2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bed6:	429a      	cmp	r2, r3
 800bed8:	da02      	bge.n	800bee0 <mg_json_get+0x3e8>
 800beda:	f06f 0302 	mvn.w	r3, #2
 800bede:	e141      	b.n	800c164 <mg_json_get+0x66c>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 800bee0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d109      	bne.n	800befc <mg_json_get+0x404>
 800bee8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800beea:	3b01      	subs	r3, #1
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	4413      	add	r3, r2
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bef4:	d002      	beq.n	800befc <mg_json_get+0x404>
 800bef6:	f06f 0302 	mvn.w	r3, #2
 800befa:	e133      	b.n	800c164 <mg_json_get+0x66c>
          // printf("K %s [%.*s] [%.*s] %d %d %d %d %d\n", path, pos, path, n,
          //        &s[i + 1], n, depth, ed, ci, ei);
          //  NOTE(cpq): in the check sequence below is important.
          //  strncmp() must go first: it fails fast if the remaining length
          //  of the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 800befc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800befe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d133      	bne.n	800bf6c <mg_json_get+0x474>
 800bf04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf06:	3b01      	subs	r3, #1
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	4413      	add	r3, r2
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf10:	d12c      	bne.n	800bf6c <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800bf12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bf14:	3301      	adds	r3, #1
 800bf16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf18:	18d0      	adds	r0, r2, r3
 800bf1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	4413      	add	r3, r2
 800bf20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf22:	4619      	mov	r1, r3
 800bf24:	f017 fc50 	bl	80237c8 <strncmp>
 800bf28:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d11e      	bne.n	800bf6c <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800bf2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf32:	4413      	add	r3, r2
 800bf34:	461a      	mov	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4413      	add	r3, r2
 800bf3a:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d011      	beq.n	800bf64 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800bf40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf44:	4413      	add	r3, r2
 800bf46:	461a      	mov	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf50:	d008      	beq.n	800bf64 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 800bf52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf56:	4413      	add	r3, r2
 800bf58:	461a      	mov	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 800bf60:	2b5b      	cmp	r3, #91	@ 0x5b
 800bf62:	d103      	bne.n	800bf6c <mg_json_get+0x474>
            pos += n;
 800bf64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf68:	4413      	add	r3, r2
 800bf6a:	653b      	str	r3, [r7, #80]	@ 0x50
          }
          i += n + 1;
 800bf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6e:	3301      	adds	r3, #1
 800bf70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf72:	4413      	add	r3, r2
 800bf74:	663b      	str	r3, [r7, #96]	@ 0x60
          expecting = S_COLON;
 800bf76:	2302      	movs	r3, #2
 800bf78:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800bf7c:	e0e7      	b.n	800c14e <mg_json_get+0x656>
        } else if (c == '}') {  // Empty object
 800bf7e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bf82:	2b7d      	cmp	r3, #125	@ 0x7d
 800bf84:	d14a      	bne.n	800c01c <mg_json_get+0x524>
          MG_EOO('}');
 800bf86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d106      	bne.n	800bf9c <mg_json_get+0x4a4>
 800bf8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bf90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d002      	beq.n	800bf9c <mg_json_get+0x4a4>
 800bf96:	f06f 0302 	mvn.w	r3, #2
 800bf9a:	e0e3      	b.n	800c164 <mg_json_get+0x66c>
 800bf9c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800bfa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfa2:	3b01      	subs	r3, #1
 800bfa4:	3368      	adds	r3, #104	@ 0x68
 800bfa6:	443b      	add	r3, r7
 800bfa8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800bfac:	3302      	adds	r3, #2
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d008      	beq.n	800bfc4 <mg_json_get+0x4cc>
 800bfb2:	f06f 0301 	mvn.w	r3, #1
 800bfb6:	e0d5      	b.n	800c164 <mg_json_get+0x66c>
 800bfb8:	08025338 	.word	0x08025338
 800bfbc:	08025340 	.word	0x08025340
 800bfc0:	08025348 	.word	0x08025348
 800bfc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bfcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d114      	bne.n	800bffc <mg_json_get+0x504>
 800bfd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	4413      	add	r3, r2
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10e      	bne.n	800bffc <mg_json_get+0x504>
 800bfde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bfe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d10a      	bne.n	800bffc <mg_json_get+0x504>
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d005      	beq.n	800bff8 <mg_json_get+0x500>
 800bfec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bfee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	1c5a      	adds	r2, r3, #1
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	601a      	str	r2, [r3, #0]
 800bff8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bffa:	e0b3      	b.n	800c164 <mg_json_get+0x66c>
          expecting = S_COMMA_OR_EOO;
 800bffc:	2303      	movs	r3, #3
 800bffe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          if (depth == ed && ei >= 0) ci++;
 800c002:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c006:	429a      	cmp	r2, r3
 800c008:	f040 80a1 	bne.w	800c14e <mg_json_get+0x656>
 800c00c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c00e:	2b00      	cmp	r3, #0
 800c010:	f2c0 809d 	blt.w	800c14e <mg_json_get+0x656>
 800c014:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c016:	3301      	adds	r3, #1
 800c018:	64fb      	str	r3, [r7, #76]	@ 0x4c
        break;
 800c01a:	e098      	b.n	800c14e <mg_json_get+0x656>
          return MG_JSON_INVALID;
 800c01c:	f06f 0301 	mvn.w	r3, #1
 800c020:	e0a0      	b.n	800c164 <mg_json_get+0x66c>

      case S_COLON:
        if (c == ':') {
 800c022:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c026:	2b3a      	cmp	r3, #58	@ 0x3a
 800c028:	d103      	bne.n	800c032 <mg_json_get+0x53a>
          expecting = S_VALUE;
 800c02a:	2300      	movs	r3, #0
 800c02c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800c030:	e08e      	b.n	800c150 <mg_json_get+0x658>
          return MG_JSON_INVALID;
 800c032:	f06f 0301 	mvn.w	r3, #1
 800c036:	e095      	b.n	800c164 <mg_json_get+0x66c>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 800c038:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	dc02      	bgt.n	800c044 <mg_json_get+0x54c>
          return MG_JSON_INVALID;
 800c03e:	f06f 0301 	mvn.w	r3, #1
 800c042:	e08f      	b.n	800c164 <mg_json_get+0x66c>
        } else if (c == ',') {
 800c044:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c048:	2b2c      	cmp	r3, #44	@ 0x2c
 800c04a:	d10d      	bne.n	800c068 <mg_json_get+0x570>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 800c04c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c04e:	3b01      	subs	r3, #1
 800c050:	3368      	adds	r3, #104	@ 0x68
 800c052:	443b      	add	r3, r7
 800c054:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800c058:	2b7b      	cmp	r3, #123	@ 0x7b
 800c05a:	bf0c      	ite	eq
 800c05c:	2301      	moveq	r3, #1
 800c05e:	2300      	movne	r3, #0
 800c060:	b2db      	uxtb	r3, r3
 800c062:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 800c066:	e073      	b.n	800c150 <mg_json_get+0x658>
        } else if (c == ']' || c == '}') {
 800c068:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c06c:	2b5d      	cmp	r3, #93	@ 0x5d
 800c06e:	d003      	beq.n	800c078 <mg_json_get+0x580>
 800c070:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c074:	2b7d      	cmp	r3, #125	@ 0x7d
 800c076:	d163      	bne.n	800c140 <mg_json_get+0x648>
          if (depth == ed && c == '}' && path[pos - 1] == '.')
 800c078:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c07a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d10d      	bne.n	800c09c <mg_json_get+0x5a4>
 800c080:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c084:	2b7d      	cmp	r3, #125	@ 0x7d
 800c086:	d109      	bne.n	800c09c <mg_json_get+0x5a4>
 800c088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c08a:	3b01      	subs	r3, #1
 800c08c:	687a      	ldr	r2, [r7, #4]
 800c08e:	4413      	add	r3, r2
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	2b2e      	cmp	r3, #46	@ 0x2e
 800c094:	d102      	bne.n	800c09c <mg_json_get+0x5a4>
            return MG_JSON_NOT_FOUND;
 800c096:	f06f 0302 	mvn.w	r3, #2
 800c09a:	e063      	b.n	800c164 <mg_json_get+0x66c>
          if (depth == ed && c == ']' && path[pos - 1] == ',')
 800c09c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c09e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d10d      	bne.n	800c0c0 <mg_json_get+0x5c8>
 800c0a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c0a8:	2b5d      	cmp	r3, #93	@ 0x5d
 800c0aa:	d109      	bne.n	800c0c0 <mg_json_get+0x5c8>
 800c0ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ae:	3b01      	subs	r3, #1
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	2b2c      	cmp	r3, #44	@ 0x2c
 800c0b8:	d102      	bne.n	800c0c0 <mg_json_get+0x5c8>
            return MG_JSON_NOT_FOUND;
 800c0ba:	f06f 0302 	mvn.w	r3, #2
 800c0be:	e051      	b.n	800c164 <mg_json_get+0x66c>
          MG_EOO('O');
 800c0c0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d106      	bne.n	800c0d6 <mg_json_get+0x5de>
 800c0c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d002      	beq.n	800c0d6 <mg_json_get+0x5de>
 800c0d0:	f06f 0302 	mvn.w	r3, #2
 800c0d4:	e046      	b.n	800c164 <mg_json_get+0x66c>
 800c0d6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c0da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	3368      	adds	r3, #104	@ 0x68
 800c0e0:	443b      	add	r3, r7
 800c0e2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 800c0e6:	3302      	adds	r3, #2
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d002      	beq.n	800c0f2 <mg_json_get+0x5fa>
 800c0ec:	f06f 0301 	mvn.w	r3, #1
 800c0f0:	e038      	b.n	800c164 <mg_json_get+0x66c>
 800c0f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c0f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c0fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d114      	bne.n	800c12a <mg_json_get+0x632>
 800c100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	4413      	add	r3, r2
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d10e      	bne.n	800c12a <mg_json_get+0x632>
 800c10c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c10e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c110:	429a      	cmp	r2, r3
 800c112:	d10a      	bne.n	800c12a <mg_json_get+0x632>
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d005      	beq.n	800c126 <mg_json_get+0x62e>
 800c11a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c11c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	1c5a      	adds	r2, r3, #1
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c128:	e01c      	b.n	800c164 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800c12a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c12c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c12e:	429a      	cmp	r2, r3
 800c130:	d109      	bne.n	800c146 <mg_json_get+0x64e>
 800c132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c134:	2b00      	cmp	r3, #0
 800c136:	db06      	blt.n	800c146 <mg_json_get+0x64e>
 800c138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c13a:	3301      	adds	r3, #1
 800c13c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c13e:	e002      	b.n	800c146 <mg_json_get+0x64e>
          return MG_JSON_INVALID;
 800c140:	f06f 0301 	mvn.w	r3, #1
 800c144:	e00e      	b.n	800c164 <mg_json_get+0x66c>
          if (depth == ed && ei >= 0) ci++;
 800c146:	bf00      	nop
        break;
 800c148:	e002      	b.n	800c150 <mg_json_get+0x658>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800c14a:	bf00      	nop
 800c14c:	e000      	b.n	800c150 <mg_json_get+0x658>
        break;
 800c14e:	bf00      	nop
  for (i = 0; i < len; i++) {
 800c150:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c152:	3301      	adds	r3, #1
 800c154:	663b      	str	r3, [r7, #96]	@ 0x60
 800c156:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c15a:	429a      	cmp	r2, r3
 800c15c:	f6ff acfc 	blt.w	800bb58 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 800c160:	f06f 0302 	mvn.w	r3, #2
}
 800c164:	4618      	mov	r0, r3
 800c166:	376c      	adds	r7, #108	@ 0x6c
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd90      	pop	{r4, r7, pc}

0800c16c <mg_json_get_tok>:

struct mg_str mg_json_get_tok(struct mg_str json, const char *path) {
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	1d38      	adds	r0, r7, #4
 800c176:	e880 0006 	stmia.w	r0, {r1, r2}
 800c17a:	603b      	str	r3, [r7, #0]
  int len = 0, ofs = mg_json_get(json, path, &len);
 800c17c:	2300      	movs	r3, #0
 800c17e:	613b      	str	r3, [r7, #16]
 800c180:	f107 0310 	add.w	r3, r7, #16
 800c184:	683a      	ldr	r2, [r7, #0]
 800c186:	1d39      	adds	r1, r7, #4
 800c188:	c903      	ldmia	r1, {r0, r1}
 800c18a:	f7ff fcb5 	bl	800baf8 <mg_json_get>
 800c18e:	6178      	str	r0, [r7, #20]
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	2b00      	cmp	r3, #0
 800c194:	db03      	blt.n	800c19e <mg_json_get_tok+0x32>
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	4413      	add	r3, r2
 800c19c:	e000      	b.n	800c1a0 <mg_json_get_tok+0x34>
 800c19e:	2300      	movs	r3, #0
                  (size_t) (len < 0 ? 0 : len));
 800c1a0:	693a      	ldr	r2, [r7, #16]
 800c1a2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return mg_str_n(ofs < 0 ? NULL : json.buf + ofs,
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	f007 ffac 	bl	8014106 <mg_str_n>
}
 800c1ae:	68f8      	ldr	r0, [r7, #12]
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 800c1b6:	b590      	push	{r4, r7, lr}
 800c1b8:	b089      	sub	sp, #36	@ 0x24
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	f107 0408 	add.w	r4, r7, #8
 800c1c0:	e884 0003 	stmia.w	r4, {r0, r1}
 800c1c4:	607a      	str	r2, [r7, #4]
 800c1c6:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	f107 0108 	add.w	r1, r7, #8
 800c1d6:	c903      	ldmia	r1, {r0, r1}
 800c1d8:	f7ff fc8e 	bl	800baf8 <mg_json_get>
 800c1dc:	61b8      	str	r0, [r7, #24]
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	db23      	blt.n	800c22c <mg_json_get_num+0x76>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 800c1ec:	2b2d      	cmp	r3, #45	@ 0x2d
 800c1ee:	d00b      	beq.n	800c208 <mg_json_get_num+0x52>
      (json.buf[n] == '-' || (json.buf[n] >= '0' && json.buf[n] <= '9'))) {
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	69bb      	ldr	r3, [r7, #24]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1fa:	d917      	bls.n	800c22c <mg_json_get_num+0x76>
 800c1fc:	68ba      	ldr	r2, [r7, #8]
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	4413      	add	r3, r2
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	2b39      	cmp	r3, #57	@ 0x39
 800c206:	d811      	bhi.n	800c22c <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.buf + n, toklen, NULL);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d00c      	beq.n	800c228 <mg_json_get_num+0x72>
 800c20e:	68ba      	ldr	r2, [r7, #8]
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	4413      	add	r3, r2
 800c214:	6979      	ldr	r1, [r7, #20]
 800c216:	2200      	movs	r2, #0
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff fb1d 	bl	800b858 <mg_atod>
 800c21e:	eeb0 7b40 	vmov.f64	d7, d0
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 800c228:	2301      	movs	r3, #1
 800c22a:	61fb      	str	r3, [r7, #28]
  }
  return found;
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	bf14      	ite	ne
 800c232:	2301      	movne	r3, #1
 800c234:	2300      	moveq	r3, #0
 800c236:	b2db      	uxtb	r3, r3
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3724      	adds	r7, #36	@ 0x24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd90      	pop	{r4, r7, pc}

0800c240 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 800c240:	b590      	push	{r4, r7, lr}
 800c242:	b087      	sub	sp, #28
 800c244:	af00      	add	r7, sp, #0
 800c246:	f107 0408 	add.w	r4, r7, #8
 800c24a:	e884 0003 	stmia.w	r4, {r0, r1}
 800c24e:	607a      	str	r2, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 800c252:	2300      	movs	r3, #0
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	2300      	movs	r3, #0
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	f107 0108 	add.w	r1, r7, #8
 800c25e:	c903      	ldmia	r1, {r0, r1}
 800c260:	f7ff fc4a 	bl	800baf8 <mg_json_get>
 800c264:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.buf[off] == 't' || json.buf[off] == 'f')) {
 800c266:	693b      	ldr	r3, [r7, #16]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	db1b      	blt.n	800c2a4 <mg_json_get_bool+0x64>
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	4413      	add	r3, r2
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b74      	cmp	r3, #116	@ 0x74
 800c276:	d005      	beq.n	800c284 <mg_json_get_bool+0x44>
 800c278:	68ba      	ldr	r2, [r7, #8]
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	4413      	add	r3, r2
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	2b66      	cmp	r3, #102	@ 0x66
 800c282:	d10f      	bne.n	800c2a4 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.buf[off] == 't';
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00a      	beq.n	800c2a0 <mg_json_get_bool+0x60>
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	4413      	add	r3, r2
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b74      	cmp	r3, #116	@ 0x74
 800c294:	bf0c      	ite	eq
 800c296:	2301      	moveq	r3, #1
 800c298:	2300      	movne	r3, #0
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	701a      	strb	r2, [r3, #0]
    found = 1;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	617b      	str	r3, [r7, #20]
  }
  return found;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	bf14      	ite	ne
 800c2aa:	2301      	movne	r3, #1
 800c2ac:	2300      	moveq	r3, #0
 800c2ae:	b2db      	uxtb	r3, r3
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	371c      	adds	r7, #28
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd90      	pop	{r4, r7, pc}

0800c2b8 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 800c2b8:	b590      	push	{r4, r7, lr}
 800c2ba:	b08d      	sub	sp, #52	@ 0x34
 800c2bc:	af02      	add	r7, sp, #8
 800c2be:	f107 0408 	add.w	r4, r7, #8
 800c2c2:	e884 0003 	stmia.w	r4, {r0, r1}
 800c2c6:	607a      	str	r2, [r7, #4]
 800c2c8:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	623b      	str	r3, [r7, #32]
 800c2d2:	e064      	b.n	800c39e <mg_json_unescape+0xe6>
    if (s.buf[i] == '\\' && i + 5 < s.len && s.buf[i + 1] == 'u') {
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d8:	4413      	add	r3, r2
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2de:	d12c      	bne.n	800c33a <mg_json_unescape+0x82>
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e2:	1d5a      	adds	r2, r3, #5
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d227      	bcs.n	800c33a <mg_json_unescape+0x82>
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	4413      	add	r3, r2
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b75      	cmp	r3, #117	@ 0x75
 800c2f6:	d120      	bne.n	800c33a <mg_json_unescape+0x82>
      //  \uXXXX escape. We process simple one-byte chars \u00xx within ASCII
      //  range. More complex chars would require dragging in a UTF8 library,
      //  which is too much for us
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800c2f8:	68ba      	ldr	r2, [r7, #8]
 800c2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fc:	3302      	adds	r3, #2
 800c2fe:	18d1      	adds	r1, r2, r3
 800c300:	f107 0314 	add.w	r3, r7, #20
 800c304:	2204      	movs	r2, #4
 800c306:	4618      	mov	r0, r3
 800c308:	f007 fefd 	bl	8014106 <mg_str_n>
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	6a3b      	ldr	r3, [r7, #32]
 800c310:	4413      	add	r3, r2
 800c312:	2201      	movs	r2, #1
 800c314:	9200      	str	r2, [sp, #0]
 800c316:	2210      	movs	r2, #16
 800c318:	f107 0114 	add.w	r1, r7, #20
 800c31c:	c903      	ldmia	r1, {r0, r1}
 800c31e:	f008 f930 	bl	8014582 <mg_str_to_num>
 800c322:	4603      	mov	r3, r0
                        sizeof(uint8_t)) == false)
 800c324:	f083 0301 	eor.w	r3, r3, #1
 800c328:	b2db      	uxtb	r3, r3
      if (mg_str_to_num(mg_str_n(s.buf + i + 2, 4), 16, &to[j],
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <mg_json_unescape+0x7a>
        return false;
 800c32e:	2300      	movs	r3, #0
 800c330:	e04c      	b.n	800c3cc <mg_json_unescape+0x114>
      i += 5;
 800c332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c334:	3305      	adds	r3, #5
 800c336:	627b      	str	r3, [r7, #36]	@ 0x24
 800c338:	e02b      	b.n	800c392 <mg_json_unescape+0xda>
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33e:	4413      	add	r3, r2
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	2b5c      	cmp	r3, #92	@ 0x5c
 800c344:	d11d      	bne.n	800c382 <mg_json_unescape+0xca>
 800c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c348:	1c5a      	adds	r2, r3, #1
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d218      	bcs.n	800c382 <mg_json_unescape+0xca>
      char c = json_esc(s.buf[i + 1], 0);
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c354:	3301      	adds	r3, #1
 800c356:	4413      	add	r3, r2
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	2100      	movs	r1, #0
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7ff fa09 	bl	800b774 <json_esc>
 800c362:	4603      	mov	r3, r0
 800c364:	77fb      	strb	r3, [r7, #31]
      if (c == 0) return false;
 800c366:	7ffb      	ldrb	r3, [r7, #31]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <mg_json_unescape+0xb8>
 800c36c:	2300      	movs	r3, #0
 800c36e:	e02d      	b.n	800c3cc <mg_json_unescape+0x114>
      to[j] = c;
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	4413      	add	r3, r2
 800c376:	7ffa      	ldrb	r2, [r7, #31]
 800c378:	701a      	strb	r2, [r3, #0]
      i++;
 800c37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c37c:	3301      	adds	r3, #1
 800c37e:	627b      	str	r3, [r7, #36]	@ 0x24
    } else if (s.buf[i] == '\\' && i + 1 < s.len) {
 800c380:	e007      	b.n	800c392 <mg_json_unescape+0xda>
    } else {
      to[j] = s.buf[i];
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c386:	441a      	add	r2, r3
 800c388:	6879      	ldr	r1, [r7, #4]
 800c38a:	6a3b      	ldr	r3, [r7, #32]
 800c38c:	440b      	add	r3, r1
 800c38e:	7812      	ldrb	r2, [r2, #0]
 800c390:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 800c392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c394:	3301      	adds	r3, #1
 800c396:	627b      	str	r3, [r7, #36]	@ 0x24
 800c398:	6a3b      	ldr	r3, [r7, #32]
 800c39a:	3301      	adds	r3, #1
 800c39c:	623b      	str	r3, [r7, #32]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d203      	bcs.n	800c3ae <mg_json_unescape+0xf6>
 800c3a6:	6a3a      	ldr	r2, [r7, #32]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d392      	bcc.n	800c2d4 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 800c3ae:	6a3a      	ldr	r2, [r7, #32]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d301      	bcc.n	800c3ba <mg_json_unescape+0x102>
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	e008      	b.n	800c3cc <mg_json_unescape+0x114>
  if (n > 0) to[j] = '\0';
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d004      	beq.n	800c3ca <mg_json_unescape+0x112>
 800c3c0:	687a      	ldr	r2, [r7, #4]
 800c3c2:	6a3b      	ldr	r3, [r7, #32]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	701a      	strb	r2, [r3, #0]
  return true;
 800c3ca:	2301      	movs	r3, #1
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	372c      	adds	r7, #44	@ 0x2c
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd90      	pop	{r4, r7, pc}

0800c3d4 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b082      	sub	sp, #8
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 800c3de:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <logc+0x20>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a05      	ldr	r2, [pc, #20]	@ (800c3f8 <logc+0x24>)
 800c3e4:	6811      	ldr	r1, [r2, #0]
 800c3e6:	79fa      	ldrb	r2, [r7, #7]
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
}
 800c3ec:	bf00      	nop
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	2400025c 	.word	0x2400025c
 800c3f8:	24001090 	.word	0x24001090

0800c3fc <logs>:

static void logs(const char *buf, size_t len) {
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800c406:	2300      	movs	r3, #0
 800c408:	60fb      	str	r3, [r7, #12]
 800c40a:	e009      	b.n	800c420 <logs+0x24>
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	4413      	add	r3, r2
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff ffdd 	bl	800c3d4 <logc>
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	3301      	adds	r3, #1
 800c41e:	60fb      	str	r3, [r7, #12]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d3f1      	bcc.n	800c40c <logs+0x10>
}
 800c428:	bf00      	nop
 800c42a:	bf00      	nop
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
	...

0800c434 <mg_log_prefix>:

#if MG_ENABLE_CUSTOM_LOG
// Let user define their own mg_log_prefix() and mg_log()
#else
void mg_log_prefix(int level, const char *file, int line, const char *fname) {
 800c434:	b590      	push	{r4, r7, lr}
 800c436:	b099      	sub	sp, #100	@ 0x64
 800c438:	af06      	add	r7, sp, #24
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
  const char *p = strrchr(file, '/');
 800c442:	212f      	movs	r1, #47	@ 0x2f
 800c444:	68b8      	ldr	r0, [r7, #8]
 800c446:	f017 f9e4 	bl	8023812 <strrchr>
 800c44a:	6478      	str	r0, [r7, #68]	@ 0x44
  char buf[41];
  size_t n;
  if (p == NULL) p = strrchr(file, '\\');
 800c44c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d104      	bne.n	800c45c <mg_log_prefix+0x28>
 800c452:	215c      	movs	r1, #92	@ 0x5c
 800c454:	68b8      	ldr	r0, [r7, #8]
 800c456:	f017 f9dc 	bl	8023812 <strrchr>
 800c45a:	6478      	str	r0, [r7, #68]	@ 0x44
  n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800c45c:	f7f4 f984 	bl	8000768 <mg_millis>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c466:	2900      	cmp	r1, #0
 800c468:	d002      	beq.n	800c470 <mg_log_prefix+0x3c>
 800c46a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c46c:	3101      	adds	r1, #1
 800c46e:	e000      	b.n	800c472 <mg_log_prefix+0x3e>
 800c470:	68b9      	ldr	r1, [r7, #8]
 800c472:	f107 0414 	add.w	r4, r7, #20
 800c476:	6838      	ldr	r0, [r7, #0]
 800c478:	9005      	str	r0, [sp, #20]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	9004      	str	r0, [sp, #16]
 800c47e:	9103      	str	r1, [sp, #12]
 800c480:	68f9      	ldr	r1, [r7, #12]
 800c482:	9102      	str	r1, [sp, #8]
 800c484:	e9cd 2300 	strd	r2, r3, [sp]
 800c488:	4a11      	ldr	r2, [pc, #68]	@ (800c4d0 <mg_log_prefix+0x9c>)
 800c48a:	2129      	movs	r1, #41	@ 0x29
 800c48c:	4620      	mov	r0, r4
 800c48e:	f004 fa57 	bl	8010940 <mg_snprintf>
 800c492:	6438      	str	r0, [r7, #64]	@ 0x40
                  p == NULL ? file : p + 1, line, fname);
  if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800c494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c496:	2b27      	cmp	r3, #39	@ 0x27
 800c498:	d90a      	bls.n	800c4b0 <mg_log_prefix+0x7c>
 800c49a:	2327      	movs	r3, #39	@ 0x27
 800c49c:	643b      	str	r3, [r7, #64]	@ 0x40
  while (n < sizeof(buf)) buf[n++] = ' ';
 800c49e:	e007      	b.n	800c4b0 <mg_log_prefix+0x7c>
 800c4a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4a2:	1c5a      	adds	r2, r3, #1
 800c4a4:	643a      	str	r2, [r7, #64]	@ 0x40
 800c4a6:	3348      	adds	r3, #72	@ 0x48
 800c4a8:	443b      	add	r3, r7
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	f803 2c34 	strb.w	r2, [r3, #-52]
 800c4b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4b2:	2b28      	cmp	r3, #40	@ 0x28
 800c4b4:	d9f4      	bls.n	800c4a0 <mg_log_prefix+0x6c>
  logs(buf, n - 1);
 800c4b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4b8:	1e5a      	subs	r2, r3, #1
 800c4ba:	f107 0314 	add.w	r3, r7, #20
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7ff ff9b 	bl	800c3fc <logs>
}
 800c4c6:	bf00      	nop
 800c4c8:	374c      	adds	r7, #76	@ 0x4c
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd90      	pop	{r4, r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	08025350 	.word	0x08025350

0800c4d4 <mg_log>:

void mg_log(const char *fmt, ...) {
 800c4d4:	b40f      	push	{r0, r1, r2, r3}
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 800c4dc:	f107 0314 	add.w	r3, r7, #20
 800c4e0:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800c4e2:	4b09      	ldr	r3, [pc, #36]	@ (800c508 <mg_log+0x34>)
 800c4e4:	6818      	ldr	r0, [r3, #0]
 800c4e6:	4b09      	ldr	r3, [pc, #36]	@ (800c50c <mg_log+0x38>)
 800c4e8:	6819      	ldr	r1, [r3, #0]
 800c4ea:	1d3b      	adds	r3, r7, #4
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	f7fb f923 	bl	8007738 <mg_vxprintf>
  va_end(ap);
  logs("\r\n", 2);
 800c4f2:	2102      	movs	r1, #2
 800c4f4:	4806      	ldr	r0, [pc, #24]	@ (800c510 <mg_log+0x3c>)
 800c4f6:	f7ff ff81 	bl	800c3fc <logs>
}
 800c4fa:	bf00      	nop
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c504:	b004      	add	sp, #16
 800c506:	4770      	bx	lr
 800c508:	2400025c 	.word	0x2400025c
 800c50c:	24001090 	.word	0x24001090
 800c510:	080247c0 	.word	0x080247c0

0800c514 <nibble>:
#endif

static unsigned char nibble(unsigned c) {
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b09      	cmp	r3, #9
 800c520:	d804      	bhi.n	800c52c <nibble+0x18>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	b2db      	uxtb	r3, r3
 800c526:	3330      	adds	r3, #48	@ 0x30
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	e003      	b.n	800c534 <nibble+0x20>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	3357      	adds	r3, #87	@ 0x57
 800c532:	b2db      	uxtb	r3, r3
}
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 800c540:	b580      	push	{r7, lr}
 800c542:	b08a      	sub	sp, #40	@ 0x28
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800c54e:	2300      	movs	r3, #0
 800c550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800c554:	2300      	movs	r3, #0
 800c556:	623b      	str	r3, [r7, #32]
 800c558:	e07b      	b.n	800c652 <mg_hexdump+0x112>
    if ((i % 16) == 0) {
 800c55a:	6a3b      	ldr	r3, [r7, #32]
 800c55c:	f003 030f 	and.w	r3, r3, #15
 800c560:	2b00      	cmp	r3, #0
 800c562:	d13b      	bne.n	800c5dc <mg_hexdump+0x9c>
      // Print buffered ascii chars
      if (i > 0)
 800c564:	6a3b      	ldr	r3, [r7, #32]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d010      	beq.n	800c58c <mg_hexdump+0x4c>
        logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2), alen = 0;
 800c56a:	2102      	movs	r1, #2
 800c56c:	484e      	ldr	r0, [pc, #312]	@ (800c6a8 <mg_hexdump+0x168>)
 800c56e:	f7ff ff45 	bl	800c3fc <logs>
 800c572:	f107 030c 	add.w	r3, r7, #12
 800c576:	2110      	movs	r1, #16
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff ff3f 	bl	800c3fc <logs>
 800c57e:	2102      	movs	r1, #2
 800c580:	484a      	ldr	r0, [pc, #296]	@ (800c6ac <mg_hexdump+0x16c>)
 800c582:	f7ff ff3b 	bl	800c3fc <logs>
 800c586:	2300      	movs	r3, #0
 800c588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800c58c:	6a3b      	ldr	r3, [r7, #32]
 800c58e:	0b1b      	lsrs	r3, r3, #12
 800c590:	f003 030f 	and.w	r3, r3, #15
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff ffbd 	bl	800c514 <nibble>
 800c59a:	4603      	mov	r3, r0
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7ff ff19 	bl	800c3d4 <logc>
 800c5a2:	6a3b      	ldr	r3, [r7, #32]
 800c5a4:	0a1b      	lsrs	r3, r3, #8
 800c5a6:	f003 030f 	and.w	r3, r3, #15
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7ff ffb2 	bl	800c514 <nibble>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	f7ff ff0e 	bl	800c3d4 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800c5b8:	6a3b      	ldr	r3, [r7, #32]
 800c5ba:	091b      	lsrs	r3, r3, #4
 800c5bc:	f003 030f 	and.w	r3, r3, #15
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7ff ffa7 	bl	800c514 <nibble>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7ff ff03 	bl	800c3d4 <logc>
 800c5ce:	2030      	movs	r0, #48	@ 0x30
 800c5d0:	f7ff ff00 	bl	800c3d4 <logc>
 800c5d4:	2103      	movs	r1, #3
 800c5d6:	4836      	ldr	r0, [pc, #216]	@ (800c6b0 <mg_hexdump+0x170>)
 800c5d8:	f7ff ff10 	bl	800c3fc <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 800c5dc:	69fa      	ldr	r2, [r7, #28]
 800c5de:	6a3b      	ldr	r3, [r7, #32]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	091b      	lsrs	r3, r3, #4
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7ff ff93 	bl	800c514 <nibble>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7ff feef 	bl	800c3d4 <logc>
 800c5f6:	69fa      	ldr	r2, [r7, #28]
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	4413      	add	r3, r2
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	f003 030f 	and.w	r3, r3, #15
 800c602:	4618      	mov	r0, r3
 800c604:	f7ff ff86 	bl	800c514 <nibble>
 800c608:	4603      	mov	r3, r0
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7ff fee2 	bl	800c3d4 <logc>
    logc(' ');                                         // Space after hex number
 800c610:	2020      	movs	r0, #32
 800c612:	f7ff fedf 	bl	800c3d4 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 800c616:	69fa      	ldr	r2, [r7, #28]
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	4413      	add	r3, r2
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	2b1f      	cmp	r3, #31
 800c620:	d90a      	bls.n	800c638 <mg_hexdump+0xf8>
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	6a3b      	ldr	r3, [r7, #32]
 800c626:	4413      	add	r3, r2
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	2b7e      	cmp	r3, #126	@ 0x7e
 800c62c:	d804      	bhi.n	800c638 <mg_hexdump+0xf8>
 800c62e:	69fa      	ldr	r2, [r7, #28]
 800c630:	6a3b      	ldr	r3, [r7, #32]
 800c632:	4413      	add	r3, r2
 800c634:	781a      	ldrb	r2, [r3, #0]
 800c636:	e000      	b.n	800c63a <mg_hexdump+0xfa>
 800c638:	222e      	movs	r2, #46	@ 0x2e
 800c63a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c63e:	1c59      	adds	r1, r3, #1
 800c640:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 800c644:	3328      	adds	r3, #40	@ 0x28
 800c646:	443b      	add	r3, r7
 800c648:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800c64c:	6a3b      	ldr	r3, [r7, #32]
 800c64e:	3301      	adds	r3, #1
 800c650:	623b      	str	r3, [r7, #32]
 800c652:	6a3a      	ldr	r2, [r7, #32]
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	429a      	cmp	r2, r3
 800c658:	f4ff af7f 	bcc.w	800c55a <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 800c65c:	e00d      	b.n	800c67a <mg_hexdump+0x13a>
 800c65e:	2103      	movs	r1, #3
 800c660:	4813      	ldr	r0, [pc, #76]	@ (800c6b0 <mg_hexdump+0x170>)
 800c662:	f7ff fecb 	bl	800c3fc <logs>
 800c666:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c66a:	1c5a      	adds	r2, r3, #1
 800c66c:	f887 2027 	strb.w	r2, [r7, #39]	@ 0x27
 800c670:	3328      	adds	r3, #40	@ 0x28
 800c672:	443b      	add	r3, r7
 800c674:	2220      	movs	r2, #32
 800c676:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800c67a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c67e:	2b0f      	cmp	r3, #15
 800c680:	d9ed      	bls.n	800c65e <mg_hexdump+0x11e>
  logs("  ", 2), logs((char *) ascii, 16), logs("\r\n", 2);
 800c682:	2102      	movs	r1, #2
 800c684:	4808      	ldr	r0, [pc, #32]	@ (800c6a8 <mg_hexdump+0x168>)
 800c686:	f7ff feb9 	bl	800c3fc <logs>
 800c68a:	f107 030c 	add.w	r3, r7, #12
 800c68e:	2110      	movs	r1, #16
 800c690:	4618      	mov	r0, r3
 800c692:	f7ff feb3 	bl	800c3fc <logs>
 800c696:	2102      	movs	r1, #2
 800c698:	4804      	ldr	r0, [pc, #16]	@ (800c6ac <mg_hexdump+0x16c>)
 800c69a:	f7ff feaf 	bl	800c3fc <logs>
}
 800c69e:	bf00      	nop
 800c6a0:	3728      	adds	r7, #40	@ 0x28
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	08025364 	.word	0x08025364
 800c6ac:	080247c0 	.word	0x080247c0
 800c6b0:	08025368 	.word	0x08025368

0800c6b4 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6c4:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	68ba      	ldr	r2, [r7, #8]
 800c6d0:	4805      	ldr	r0, [pc, #20]	@ (800c6e8 <mg_vprintf+0x34>)
 800c6d2:	f7fb f831 	bl	8007738 <mg_vxprintf>
  return c->send.len - old;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	1ad3      	subs	r3, r2, r3
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	080108d1 	.word	0x080108d1

0800c6ec <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 800c6ec:	b40e      	push	{r1, r2, r3}
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b085      	sub	sp, #20
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800c6fa:	f107 0320 	add.w	r3, r7, #32
 800c6fe:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 800c700:	f107 0308 	add.w	r3, r7, #8
 800c704:	461a      	mov	r2, r3
 800c706:	69f9      	ldr	r1, [r7, #28]
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f7ff ffd3 	bl	800c6b4 <mg_vprintf>
 800c70e:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 800c710:	68fb      	ldr	r3, [r7, #12]
}
 800c712:	4618      	mov	r0, r3
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c71c:	b003      	add	sp, #12
 800c71e:	4770      	bx	lr

0800c720 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 800c720:	b580      	push	{r7, lr}
 800c722:	b088      	sub	sp, #32
 800c724:	af00      	add	r7, sp, #0
 800c726:	f107 0308 	add.w	r3, r7, #8
 800c72a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c72e:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 800c730:	4811      	ldr	r0, [pc, #68]	@ (800c778 <mg_atonl+0x58>)
 800c732:	f012 ff7c 	bl	801f62e <mg_ntohl>
 800c736:	4603      	mov	r3, r0
 800c738:	617b      	str	r3, [r7, #20]
  if (mg_strcasecmp(str, mg_str("localhost")) != 0) return false;
 800c73a:	f107 0318 	add.w	r3, r7, #24
 800c73e:	490f      	ldr	r1, [pc, #60]	@ (800c77c <mg_atonl+0x5c>)
 800c740:	4618      	mov	r0, r3
 800c742:	f007 fcc3 	bl	80140cc <mg_str_s>
 800c746:	f107 0318 	add.w	r3, r7, #24
 800c74a:	cb0c      	ldmia	r3, {r2, r3}
 800c74c:	f107 0108 	add.w	r1, r7, #8
 800c750:	c903      	ldmia	r1, {r0, r1}
 800c752:	f007 fd7e 	bl	8014252 <mg_strcasecmp>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d001      	beq.n	800c760 <mg_atonl+0x40>
 800c75c:	2300      	movs	r3, #0
 800c75e:	e006      	b.n	800c76e <mg_atonl+0x4e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	74da      	strb	r2, [r3, #19]
  return true;
 800c76c:	2301      	movs	r3, #1
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3720      	adds	r7, #32
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	7f000001 	.word	0x7f000001
 800c77c:	0802540c 	.word	0x0802540c

0800c780 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	f107 0308 	add.w	r3, r7, #8
 800c78a:	e883 0003 	stmia.w	r3, {r0, r1}
 800c78e:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d001      	beq.n	800c79a <mg_atone+0x1a>
 800c796:	2300      	movs	r3, #0
 800c798:	e009      	b.n	800c7ae <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2210      	movs	r2, #16
 800c79e:	2100      	movs	r1, #0
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f016 fffc 	bl	802379e <memset>
  addr->is_ip6 = false;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	74da      	strb	r2, [r3, #19]
  return true;
 800c7ac:	2301      	movs	r3, #1
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800c7b6:	b480      	push	{r7}
 800c7b8:	b089      	sub	sp, #36	@ 0x24
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	f107 0308 	add.w	r3, r7, #8
 800c7c0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c7c4:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	61fb      	str	r3, [r7, #28]
 800c7d2:	e049      	b.n	800c868 <mg_aton4+0xb2>
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	4413      	add	r3, r2
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c7de:	d925      	bls.n	800c82c <mg_aton4+0x76>
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	2b39      	cmp	r3, #57	@ 0x39
 800c7ea:	d81f      	bhi.n	800c82c <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.buf[i] - '0');
 800c7ec:	f107 0210 	add.w	r2, r7, #16
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	4413      	add	r3, r2
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	4613      	mov	r3, r2
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	4413      	add	r3, r2
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	4619      	mov	r1, r3
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	4413      	add	r3, r2
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	3b30      	subs	r3, #48	@ 0x30
 800c80c:	440b      	add	r3, r1
 800c80e:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2bff      	cmp	r3, #255	@ 0xff
 800c814:	dd01      	ble.n	800c81a <mg_aton4+0x64>
 800c816:	2300      	movs	r3, #0
 800c818:	e03d      	b.n	800c896 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	b2d9      	uxtb	r1, r3
 800c81e:	f107 0210 	add.w	r2, r7, #16
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	4413      	add	r3, r2
 800c826:	460a      	mov	r2, r1
 800c828:	701a      	strb	r2, [r3, #0]
    if (str.buf[i] >= '0' && str.buf[i] <= '9') {
 800c82a:	e01a      	b.n	800c862 <mg_aton4+0xac>
    } else if (str.buf[i] == '.') {
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	69fb      	ldr	r3, [r7, #28]
 800c830:	4413      	add	r3, r2
 800c832:	781b      	ldrb	r3, [r3, #0]
 800c834:	2b2e      	cmp	r3, #46	@ 0x2e
 800c836:	d112      	bne.n	800c85e <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.buf[i - 1] == '.') return false;
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	2b02      	cmp	r3, #2
 800c83c:	d809      	bhi.n	800c852 <mg_aton4+0x9c>
 800c83e:	69fb      	ldr	r3, [r7, #28]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d006      	beq.n	800c852 <mg_aton4+0x9c>
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	3b01      	subs	r3, #1
 800c84a:	4413      	add	r3, r2
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c850:	d101      	bne.n	800c856 <mg_aton4+0xa0>
 800c852:	2300      	movs	r3, #0
 800c854:	e01f      	b.n	800c896 <mg_aton4+0xe0>
      num_dots++;
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	3301      	adds	r3, #1
 800c85a:	61bb      	str	r3, [r7, #24]
 800c85c:	e001      	b.n	800c862 <mg_aton4+0xac>
    } else {
      return false;
 800c85e:	2300      	movs	r3, #0
 800c860:	e019      	b.n	800c896 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	3301      	adds	r3, #1
 800c866:	61fb      	str	r3, [r7, #28]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	69fa      	ldr	r2, [r7, #28]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d3b1      	bcc.n	800c7d4 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.buf[i - 1] == '.') return false;
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	2b03      	cmp	r3, #3
 800c874:	d106      	bne.n	800c884 <mg_aton4+0xce>
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	4413      	add	r3, r2
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	2b2e      	cmp	r3, #46	@ 0x2e
 800c882:	d101      	bne.n	800c888 <mg_aton4+0xd2>
 800c884:	2300      	movs	r3, #0
 800c886:	e006      	b.n	800c896 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	693a      	ldr	r2, [r7, #16]
 800c88c:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	74da      	strb	r2, [r3, #19]
  return true;
 800c894:	2301      	movs	r3, #1
}
 800c896:	4618      	mov	r0, r3
 800c898:	3724      	adds	r7, #36	@ 0x24
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b088      	sub	sp, #32
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	f107 0308 	add.w	r3, r7, #8
 800c8ac:	e883 0003 	stmia.w	r3, {r0, r1}
 800c8b0:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b0d      	cmp	r3, #13
 800c8b6:	d801      	bhi.n	800c8bc <mg_v4mapped+0x1a>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e056      	b.n	800c96a <mg_v4mapped+0xc8>
  if (str.buf[0] != ':' || str.buf[1] != ':' || str.buf[6] != ':') return false;
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b3a      	cmp	r3, #58	@ 0x3a
 800c8c2:	d109      	bne.n	800c8d8 <mg_v4mapped+0x36>
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	2b3a      	cmp	r3, #58	@ 0x3a
 800c8cc:	d104      	bne.n	800c8d8 <mg_v4mapped+0x36>
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	3306      	adds	r3, #6
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	2b3a      	cmp	r3, #58	@ 0x3a
 800c8d6:	d001      	beq.n	800c8dc <mg_v4mapped+0x3a>
 800c8d8:	2300      	movs	r3, #0
 800c8da:	e046      	b.n	800c96a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800c8dc:	2302      	movs	r3, #2
 800c8de:	61fb      	str	r3, [r7, #28]
 800c8e0:	e010      	b.n	800c904 <mg_v4mapped+0x62>
    if (str.buf[i] != 'f' && str.buf[i] != 'F') return false;
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	2b66      	cmp	r3, #102	@ 0x66
 800c8ec:	d007      	beq.n	800c8fe <mg_v4mapped+0x5c>
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	2b46      	cmp	r3, #70	@ 0x46
 800c8f8:	d001      	beq.n	800c8fe <mg_v4mapped+0x5c>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	e035      	b.n	800c96a <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	3301      	adds	r3, #1
 800c902:	61fb      	str	r3, [r7, #28]
 800c904:	69fb      	ldr	r3, [r7, #28]
 800c906:	2b05      	cmp	r3, #5
 800c908:	ddeb      	ble.n	800c8e2 <mg_v4mapped+0x40>
  }
  // struct mg_str s = mg_str_n(&str.buf[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.buf[7], str.len - 7), addr)) return false;
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	1dd9      	adds	r1, r3, #7
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	1fda      	subs	r2, r3, #7
 800c912:	f107 0314 	add.w	r3, r7, #20
 800c916:	4618      	mov	r0, r3
 800c918:	f007 fbf5 	bl	8014106 <mg_str_n>
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	f107 0314 	add.w	r3, r7, #20
 800c922:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c926:	f7ff ff46 	bl	800c7b6 <mg_aton4>
 800c92a:	4603      	mov	r3, r0
 800c92c:	f083 0301 	eor.w	r3, r3, #1
 800c930:	b2db      	uxtb	r3, r3
 800c932:	2b00      	cmp	r3, #0
 800c934:	d001      	beq.n	800c93a <mg_v4mapped+0x98>
 800c936:	2300      	movs	r3, #0
 800c938:	e017      	b.n	800c96a <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2210      	movs	r2, #16
 800c944:	2100      	movs	r1, #0
 800c946:	4618      	mov	r0, r3
 800c948:	f016 ff29 	bl	802379e <memset>
  addr->ip[10] = addr->ip[11] = 255;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	22ff      	movs	r2, #255	@ 0xff
 800c950:	72da      	strb	r2, [r3, #11]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7ada      	ldrb	r2, [r3, #11]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	330c      	adds	r3, #12
 800c95e:	693a      	ldr	r2, [r7, #16]
 800c960:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	74da      	strb	r2, [r3, #19]
  return true;
 800c968:	2301      	movs	r3, #1
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3720      	adds	r7, #32
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}

0800c972 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800c972:	b580      	push	{r7, lr}
 800c974:	b090      	sub	sp, #64	@ 0x40
 800c976:	af02      	add	r7, sp, #8
 800c978:	f107 0308 	add.w	r3, r7, #8
 800c97c:	e883 0003 	stmia.w	r3, {r0, r1}
 800c980:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800c982:	2300      	movs	r3, #0
 800c984:	633b      	str	r3, [r7, #48]	@ 0x30
 800c986:	2300      	movs	r3, #0
 800c988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c98a:	232a      	movs	r3, #42	@ 0x2a
 800c98c:	62bb      	str	r3, [r7, #40]	@ 0x28
  addr->scope_id = 0;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	749a      	strb	r2, [r3, #18]
  if (str.len > 2 && str.buf[0] == '[') str.buf++, str.len -= 2;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2b02      	cmp	r3, #2
 800c998:	d909      	bls.n	800c9ae <mg_aton6+0x3c>
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	2b5b      	cmp	r3, #91	@ 0x5b
 800c9a0:	d105      	bne.n	800c9ae <mg_aton6+0x3c>
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	60bb      	str	r3, [r7, #8]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	3b02      	subs	r3, #2
 800c9ac:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	f107 0308 	add.w	r3, r7, #8
 800c9b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c9b8:	f7ff ff73 	bl	800c8a2 <mg_v4mapped>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d001      	beq.n	800c9c6 <mg_aton6+0x54>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e0e1      	b.n	800cb8a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9ca:	e0b0      	b.n	800cb2e <mg_aton6+0x1bc>
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9d0:	4413      	add	r3, r2
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c9d6:	d905      	bls.n	800c9e4 <mg_aton6+0x72>
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9dc:	4413      	add	r3, r2
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	2b39      	cmp	r3, #57	@ 0x39
 800c9e2:	d917      	bls.n	800ca14 <mg_aton6+0xa2>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800c9e4:	68ba      	ldr	r2, [r7, #8]
 800c9e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9e8:	4413      	add	r3, r2
 800c9ea:	781b      	ldrb	r3, [r3, #0]
    if ((str.buf[i] >= '0' && str.buf[i] <= '9') ||
 800c9ec:	2b60      	cmp	r3, #96	@ 0x60
 800c9ee:	d905      	bls.n	800c9fc <mg_aton6+0x8a>
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f4:	4413      	add	r3, r2
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	2b66      	cmp	r3, #102	@ 0x66
 800c9fa:	d90b      	bls.n	800ca14 <mg_aton6+0xa2>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800c9fc:	68ba      	ldr	r2, [r7, #8]
 800c9fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca00:	4413      	add	r3, r2
 800ca02:	781b      	ldrb	r3, [r3, #0]
        (str.buf[i] >= 'a' && str.buf[i] <= 'f') ||
 800ca04:	2b40      	cmp	r3, #64	@ 0x40
 800ca06:	d933      	bls.n	800ca70 <mg_aton6+0xfe>
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca0c:	4413      	add	r3, r2
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b46      	cmp	r3, #70	@ 0x46
 800ca12:	d82d      	bhi.n	800ca70 <mg_aton6+0xfe>
      unsigned long val = 0;  // TODO(): This loops on chars, refactor
 800ca14:	2300      	movs	r3, #0
 800ca16:	617b      	str	r3, [r7, #20]
      if (i > j + 3) return false;
 800ca18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1a:	3303      	adds	r3, #3
 800ca1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d901      	bls.n	800ca26 <mg_aton6+0xb4>
 800ca22:	2300      	movs	r3, #0
 800ca24:	e0b1      	b.n	800cb8a <mg_aton6+0x218>
      // MG_DEBUG(("%lu %lu [%.*s]", i, j, (int) (i - j + 1), &str.buf[j]));
      mg_str_to_num(mg_str_n(&str.buf[j], i - j + 1), 16, &val, sizeof(val));
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2a:	18d1      	adds	r1, r2, r3
 800ca2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	f107 0318 	add.w	r3, r7, #24
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f007 fb64 	bl	8014106 <mg_str_n>
 800ca3e:	f107 0314 	add.w	r3, r7, #20
 800ca42:	2204      	movs	r2, #4
 800ca44:	9200      	str	r2, [sp, #0]
 800ca46:	2210      	movs	r2, #16
 800ca48:	f107 0118 	add.w	r1, r7, #24
 800ca4c:	c903      	ldmia	r1, {r0, r1}
 800ca4e:	f007 fd98 	bl	8014582 <mg_str_to_num>
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	0a1b      	lsrs	r3, r3, #8
 800ca56:	b2d9      	uxtb	r1, r3
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca5c:	4413      	add	r3, r2
 800ca5e:	460a      	mov	r2, r1
 800ca60:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 800ca62:	697a      	ldr	r2, [r7, #20]
 800ca64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca66:	3301      	adds	r3, #1
 800ca68:	b2d1      	uxtb	r1, r2
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	54d1      	strb	r1, [r2, r3]
        (str.buf[i] >= 'A' && str.buf[i] <= 'F')) {
 800ca6e:	e05b      	b.n	800cb28 <mg_aton6+0x1b6>
    } else if (str.buf[i] == ':') {
 800ca70:	68ba      	ldr	r2, [r7, #8]
 800ca72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca74:	4413      	add	r3, r2
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b3a      	cmp	r3, #58	@ 0x3a
 800ca7a:	d134      	bne.n	800cae6 <mg_aton6+0x174>
      j = i + 1;
 800ca7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca7e:	3301      	adds	r3, #1
 800ca80:	633b      	str	r3, [r7, #48]	@ 0x30
      if (i > 0 && str.buf[i - 1] == ':') {
 800ca82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d014      	beq.n	800cab2 <mg_aton6+0x140>
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	4413      	add	r3, r2
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b3a      	cmp	r3, #58	@ 0x3a
 800ca94:	d10d      	bne.n	800cab2 <mg_aton6+0x140>
        dc = n;  // Double colon
 800ca96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca98:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800ca9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d90f      	bls.n	800cac0 <mg_aton6+0x14e>
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa4:	3b02      	subs	r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	2b3a      	cmp	r3, #58	@ 0x3a
 800caac:	d108      	bne.n	800cac0 <mg_aton6+0x14e>
 800caae:	2300      	movs	r3, #0
 800cab0:	e06b      	b.n	800cb8a <mg_aton6+0x218>
      } else if (i > 0) {
 800cab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d004      	beq.n	800cac2 <mg_aton6+0x150>
        n += 2;
 800cab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caba:	3302      	adds	r3, #2
 800cabc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cabe:	e000      	b.n	800cac2 <mg_aton6+0x150>
        if (i > 1 && str.buf[i - 2] == ':') return false;
 800cac0:	bf00      	nop
      }
      if (n > 14) return false;
 800cac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac4:	2b0e      	cmp	r3, #14
 800cac6:	d901      	bls.n	800cacc <mg_aton6+0x15a>
 800cac8:	2300      	movs	r3, #0
 800caca:	e05e      	b.n	800cb8a <mg_aton6+0x218>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 800cacc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cace:	3301      	adds	r3, #1
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	2100      	movs	r1, #0
 800cad4:	54d1      	strb	r1, [r2, r3]
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	5cd1      	ldrb	r1, [r2, r3]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cade:	4413      	add	r3, r2
 800cae0:	460a      	mov	r2, r1
 800cae2:	701a      	strb	r2, [r3, #0]
 800cae4:	e020      	b.n	800cb28 <mg_aton6+0x1b6>
    } else if (str.buf[i] == '%') {       // Scope ID, last in string
 800cae6:	68ba      	ldr	r2, [r7, #8]
 800cae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caea:	4413      	add	r3, r2
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2b25      	cmp	r3, #37	@ 0x25
 800caf0:	d118      	bne.n	800cb24 <mg_aton6+0x1b2>
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caf6:	3301      	adds	r3, #1
 800caf8:	18d1      	adds	r1, r2, r3
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	1e5a      	subs	r2, r3, #1
 800cb02:	f107 0320 	add.w	r3, r7, #32
 800cb06:	4618      	mov	r0, r3
 800cb08:	f007 fafd 	bl	8014106 <mg_str_n>
                           &addr->scope_id, sizeof(uint8_t));
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	3312      	adds	r3, #18
      return mg_str_to_num(mg_str_n(&str.buf[i + 1], str.len - i - 1), 10,
 800cb10:	2201      	movs	r2, #1
 800cb12:	9200      	str	r2, [sp, #0]
 800cb14:	220a      	movs	r2, #10
 800cb16:	f107 0120 	add.w	r1, r7, #32
 800cb1a:	c903      	ldmia	r1, {r0, r1}
 800cb1c:	f007 fd31 	bl	8014582 <mg_str_to_num>
 800cb20:	4603      	mov	r3, r0
 800cb22:	e032      	b.n	800cb8a <mg_aton6+0x218>
    } else {
      return false;
 800cb24:	2300      	movs	r3, #0
 800cb26:	e030      	b.n	800cb8a <mg_aton6+0x218>
  for (i = 0; i < str.len; i++) {
 800cb28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb32:	429a      	cmp	r2, r3
 800cb34:	f4ff af4a 	bcc.w	800c9cc <mg_aton6+0x5a>
    }
  }
  if (n < 14 && dc == 42) return false;
 800cb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3a:	2b0d      	cmp	r3, #13
 800cb3c:	d804      	bhi.n	800cb48 <mg_aton6+0x1d6>
 800cb3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb40:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb42:	d101      	bne.n	800cb48 <mg_aton6+0x1d6>
 800cb44:	2300      	movs	r3, #0
 800cb46:	e020      	b.n	800cb8a <mg_aton6+0x218>
  if (n < 14) {
 800cb48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb4a:	2b0d      	cmp	r3, #13
 800cb4c:	d819      	bhi.n	800cb82 <mg_aton6+0x210>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800cb4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb52:	1ad3      	subs	r3, r2, r3
 800cb54:	330e      	adds	r3, #14
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	18d0      	adds	r0, r2, r3
 800cb5a:	687a      	ldr	r2, [r7, #4]
 800cb5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5e:	18d1      	adds	r1, r2, r3
 800cb60:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb64:	1ad3      	subs	r3, r2, r3
 800cb66:	3302      	adds	r3, #2
 800cb68:	461a      	mov	r2, r3
 800cb6a:	f016 fdfe 	bl	802376a <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb72:	18d0      	adds	r0, r2, r3
 800cb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb76:	f1c3 030e 	rsb	r3, r3, #14
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	2100      	movs	r1, #0
 800cb7e:	f016 fe0e 	bl	802379e <memset>
  }

  addr->is_ip6 = true;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2201      	movs	r2, #1
 800cb86:	74da      	strb	r2, [r3, #19]
  return true;
 800cb88:	2301      	movs	r3, #1
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3738      	adds	r7, #56	@ 0x38
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b084      	sub	sp, #16
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	f107 0308 	add.w	r3, r7, #8
 800cb9c:	e883 0003 	stmia.w	r3, {r0, r1}
 800cba0:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.buf));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	f107 0308 	add.w	r3, r7, #8
 800cba8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbac:	f7ff fde8 	bl	800c780 <mg_atone>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d11d      	bne.n	800cbf2 <mg_aton+0x60>
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	f107 0308 	add.w	r3, r7, #8
 800cbbc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbc0:	f7ff fdae 	bl	800c720 <mg_atonl>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d113      	bne.n	800cbf2 <mg_aton+0x60>
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	f107 0308 	add.w	r3, r7, #8
 800cbd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbd4:	f7ff fdef 	bl	800c7b6 <mg_aton4>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d109      	bne.n	800cbf2 <mg_aton+0x60>
         mg_aton6(str, addr);
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	f107 0308 	add.w	r3, r7, #8
 800cbe4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbe8:	f7ff fec3 	bl	800c972 <mg_aton6>
 800cbec:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <mg_aton+0x64>
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e000      	b.n	800cbf8 <mg_aton+0x66>
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	b2db      	uxtb	r3, r3
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b084      	sub	sp, #16
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc12:	33b0      	adds	r3, #176	@ 0xb0
 800cc14:	4619      	mov	r1, r3
 800cc16:	2001      	movs	r0, #1
 800cc18:	f016 faec 	bl	80231f4 <calloc>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d017      	beq.n	800cc56 <mg_alloc_conn+0x50>
    c->mgr = mgr;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = c->rtls.align = MG_IO_SIZE;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc32:	675a      	str	r2, [r3, #116]	@ 0x74
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	645a      	str	r2, [r3, #68]	@ 0x44
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	655a      	str	r2, [r3, #84]	@ 0x54
    c->id = ++mgr->nextid;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	69db      	ldr	r3, [r3, #28]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	61da      	str	r2, [r3, #28]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	69da      	ldr	r2, [r3, #28]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	635a      	str	r2, [r3, #52]	@ 0x34
    MG_PROF_INIT(c);
  }
  return c;
 800cc56:	68fb      	ldr	r3, [r7, #12]
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3710      	adds	r7, #16
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f7f9 fe90 	bl	800698e <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	60fb      	str	r3, [r7, #12]
 800cc74:	e002      	b.n	800cc7c <mg_close_conn+0x1c>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d1f7      	bne.n	800cc76 <mg_close_conn+0x16>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	685b      	ldr	r3, [r3, #4]
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d103      	bne.n	800cca2 <mg_close_conn+0x42>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	687a      	ldr	r2, [r7, #4]
 800ccaa:	429a      	cmp	r2, r3
 800ccac:	d103      	bne.n	800ccb6 <mg_close_conn+0x56>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	685b      	ldr	r3, [r3, #4]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	2109      	movs	r1, #9
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7f9 fe89 	bl	80069d2 <mg_call>
  MG_DEBUG(("%lu %ld closed", c->id, c->fd));
 800ccc0:	4b17      	ldr	r3, [pc, #92]	@ (800cd20 <mg_close_conn+0xc0>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b02      	cmp	r3, #2
 800ccc6:	dd0e      	ble.n	800cce6 <mg_close_conn+0x86>
 800ccc8:	4b16      	ldr	r3, [pc, #88]	@ (800cd24 <mg_close_conn+0xc4>)
 800ccca:	f640 72bb 	movw	r2, #4027	@ 0xfbb
 800ccce:	4916      	ldr	r1, [pc, #88]	@ (800cd28 <mg_close_conn+0xc8>)
 800ccd0:	2003      	movs	r0, #3
 800ccd2:	f7ff fbaf 	bl	800c434 <mg_log_prefix>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccde:	461a      	mov	r2, r3
 800cce0:	4812      	ldr	r0, [pc, #72]	@ (800cd2c <mg_close_conn+0xcc>)
 800cce2:	f7ff fbf7 	bl	800c4d4 <mg_log>
  MG_PROF_DUMP(c);
  MG_PROF_FREE(c);

  mg_tls_free(c);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f00b ff0c 	bl	8018b04 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3338      	adds	r3, #56	@ 0x38
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f7fe fd1e 	bl	800b732 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	3348      	adds	r3, #72	@ 0x48
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f7fe fd19 	bl	800b732 <mg_iobuf_free>
  mg_iobuf_free(&c->rtls);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3368      	adds	r3, #104	@ 0x68
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7fe fd14 	bl	800b732 <mg_iobuf_free>
  mg_bzero((unsigned char *) c, sizeof(*c));
 800cd0a:	21b0      	movs	r1, #176	@ 0xb0
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f012 fb97 	bl	801f440 <mg_bzero>
  free(c);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f016 fa92 	bl	802323c <free>
}
 800cd18:	bf00      	nop
 800cd1a:	3710      	adds	r7, #16
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	24000258 	.word	0x24000258
 800cd24:	08028060 	.word	0x08028060
 800cd28:	08024478 	.word	0x08024478
 800cd2c:	08025418 	.word	0x08025418

0800cd30 <mg_listen>:
  }
  return c;
}

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f7ff ff5f 	bl	800cc06 <mg_alloc_conn>
 800cd48:	6178      	str	r0, [r7, #20]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10f      	bne.n	800cd70 <mg_listen+0x40>
    MG_ERROR(("OOM %s", url));
 800cd50:	4b43      	ldr	r3, [pc, #268]	@ (800ce60 <mg_listen+0x130>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	dd7d      	ble.n	800ce54 <mg_listen+0x124>
 800cd58:	4b42      	ldr	r3, [pc, #264]	@ (800ce64 <mg_listen+0x134>)
 800cd5a:	f640 72e1 	movw	r2, #4065	@ 0xfe1
 800cd5e:	4942      	ldr	r1, [pc, #264]	@ (800ce68 <mg_listen+0x138>)
 800cd60:	2001      	movs	r0, #1
 800cd62:	f7ff fb67 	bl	800c434 <mg_log_prefix>
 800cd66:	68b9      	ldr	r1, [r7, #8]
 800cd68:	4840      	ldr	r0, [pc, #256]	@ (800ce6c <mg_listen+0x13c>)
 800cd6a:	f7ff fbb3 	bl	800c4d4 <mg_log>
 800cd6e:	e071      	b.n	800ce54 <mg_listen+0x124>
  } else if (!mg_open_listener(c, url)) {
 800cd70:	68b9      	ldr	r1, [r7, #8]
 800cd72:	6978      	ldr	r0, [r7, #20]
 800cd74:	f003 f9ee 	bl	8010154 <mg_open_listener>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	f083 0301 	eor.w	r3, r3, #1
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d019      	beq.n	800cdb8 <mg_listen+0x88>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800cd84:	4b36      	ldr	r3, [pc, #216]	@ (800ce60 <mg_listen+0x130>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	dd0f      	ble.n	800cdac <mg_listen+0x7c>
 800cd8c:	4b35      	ldr	r3, [pc, #212]	@ (800ce64 <mg_listen+0x134>)
 800cd8e:	f640 72e3 	movw	r2, #4067	@ 0xfe3
 800cd92:	4935      	ldr	r1, [pc, #212]	@ (800ce68 <mg_listen+0x138>)
 800cd94:	2001      	movs	r0, #1
 800cd96:	f7ff fb4d 	bl	800c434 <mg_log_prefix>
 800cd9a:	f016 fe01 	bl	80239a0 <__errno>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	461a      	mov	r2, r3
 800cda4:	68b9      	ldr	r1, [r7, #8]
 800cda6:	4832      	ldr	r0, [pc, #200]	@ (800ce70 <mg_listen+0x140>)
 800cda8:	f7ff fb94 	bl	800c4d4 <mg_log>
    MG_PROF_FREE(c);
    free(c);
 800cdac:	6978      	ldr	r0, [r7, #20]
 800cdae:	f016 fa45 	bl	802323c <free>
    c = NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	617b      	str	r3, [r7, #20]
 800cdb6:	e04d      	b.n	800ce54 <mg_listen+0x124>
  } else {
    c->is_listening = 1;
 800cdb8:	697a      	ldr	r2, [r7, #20]
 800cdba:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800cdbe:	f043 0301 	orr.w	r3, r3, #1
 800cdc2:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 800cdc6:	2204      	movs	r2, #4
 800cdc8:	492a      	ldr	r1, [pc, #168]	@ (800ce74 <mg_listen+0x144>)
 800cdca:	68b8      	ldr	r0, [r7, #8]
 800cdcc:	f016 fcfc 	bl	80237c8 <strncmp>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	bf0c      	ite	eq
 800cdd6:	2301      	moveq	r3, #1
 800cdd8:	2300      	movne	r3, #0
 800cdda:	b2d9      	uxtb	r1, r3
 800cddc:	697a      	ldr	r2, [r7, #20]
 800cdde:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800cde2:	f361 0300 	bfi	r3, r1, #0, #1
 800cde6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	601a      	str	r2, [r3, #0]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	697a      	ldr	r2, [r7, #20]
 800cdf6:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	687a      	ldr	r2, [r7, #4]
 800cdfc:	679a      	str	r2, [r3, #120]	@ 0x78
    c->fn_data = fn_data;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	67da      	str	r2, [r3, #124]	@ 0x7c
    c->is_tls = (mg_url_is_ssl(url) != 0);
 800ce04:	68b8      	ldr	r0, [r7, #8]
 800ce06:	f012 f9bb 	bl	801f180 <mg_url_is_ssl>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	bf14      	ite	ne
 800ce10:	2301      	movne	r3, #1
 800ce12:	2300      	moveq	r3, #0
 800ce14:	b2d9      	uxtb	r1, r3
 800ce16:	697a      	ldr	r2, [r7, #20]
 800ce18:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800ce1c:	f361 1386 	bfi	r3, r1, #6, #1
 800ce20:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_OPEN, NULL);
 800ce24:	2200      	movs	r2, #0
 800ce26:	2101      	movs	r1, #1
 800ce28:	6978      	ldr	r0, [r7, #20]
 800ce2a:	f7f9 fdd2 	bl	80069d2 <mg_call>
    MG_DEBUG(("%lu %ld %s", c->id, c->fd, url));
 800ce2e:	4b0c      	ldr	r3, [pc, #48]	@ (800ce60 <mg_listen+0x130>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b02      	cmp	r3, #2
 800ce34:	dd0e      	ble.n	800ce54 <mg_listen+0x124>
 800ce36:	4b0b      	ldr	r3, [pc, #44]	@ (800ce64 <mg_listen+0x134>)
 800ce38:	f640 72ef 	movw	r2, #4079	@ 0xfef
 800ce3c:	490a      	ldr	r1, [pc, #40]	@ (800ce68 <mg_listen+0x138>)
 800ce3e:	2003      	movs	r0, #3
 800ce40:	f7ff faf8 	bl	800c434 <mg_log_prefix>
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	480a      	ldr	r0, [pc, #40]	@ (800ce78 <mg_listen+0x148>)
 800ce50:	f7ff fb40 	bl	800c4d4 <mg_log>
  }
  return c;
 800ce54:	697b      	ldr	r3, [r7, #20]
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3718      	adds	r7, #24
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
 800ce5e:	bf00      	nop
 800ce60:	24000258 	.word	0x24000258
 800ce64:	08028070 	.word	0x08028070
 800ce68:	08024478 	.word	0x08024478
 800ce6c:	08025440 	.word	0x08025440
 800ce70:	08025448 	.word	0x08025448
 800ce74:	08025438 	.word	0x08025438
 800ce78:	08024628 	.word	0x08024628

0800ce7c <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b08a      	sub	sp, #40	@ 0x28
 800ce80:	af04      	add	r7, sp, #16
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 800ce88:	2120      	movs	r1, #32
 800ce8a:	2001      	movs	r0, #1
 800ce8c:	f016 f9b2 	bl	80231f4 <calloc>
 800ce90:	4603      	mov	r3, r0
 800ce92:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d011      	beq.n	800cebe <mg_timer_add+0x42>
    flags |= MG_TIMER_AUTODELETE;  // We have calloc-ed it, so autodelete
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	f043 0308 	orr.w	r3, r3, #8
 800cea0:	623b      	str	r3, [r7, #32]
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800cea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceaa:	9302      	str	r3, [sp, #8]
 800ceac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceae:	9301      	str	r3, [sp, #4]
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ceb8:	6979      	ldr	r1, [r7, #20]
 800ceba:	f007 fd95 	bl	80149e8 <mg_timer_init>
  }
  return t;
 800cebe:	697b      	ldr	r3, [r7, #20]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3718      	adds	r7, #24
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <mg_mgr_init>:
#if MG_ENABLE_TCPIP
  if (mgr->ifp) mg_tcpip_free(mgr->ifp);
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 800ced0:	2244      	movs	r2, #68	@ 0x44
 800ced2:	2100      	movs	r1, #0
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f016 fc62 	bl	802379e <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(EPOLL_CLOEXEC)) < 0)
    MG_ERROR(("epoll_create1 errno %d", errno));
#else
  mgr->epoll_fd = -1;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f04f 32ff 	mov.w	r2, #4294967295
 800cee0:	635a      	str	r2, [r3, #52]	@ 0x34
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#elif MG_ENABLE_TCPIP_DRIVER_INIT && defined(MG_TCPIP_DRIVER_INIT)
  MG_TCPIP_DRIVER_INIT(mgr);
 800cee2:	4b34      	ldr	r3, [pc, #208]	@ (800cfb4 <mg_mgr_init+0xec>)
 800cee4:	2204      	movs	r2, #4
 800cee6:	601a      	str	r2, [r3, #0]
 800cee8:	4b32      	ldr	r3, [pc, #200]	@ (800cfb4 <mg_mgr_init+0xec>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	711a      	strb	r2, [r3, #4]
 800ceee:	4b31      	ldr	r3, [pc, #196]	@ (800cfb4 <mg_mgr_init+0xec>)
 800cef0:	2202      	movs	r2, #2
 800cef2:	715a      	strb	r2, [r3, #5]
 800cef4:	4830      	ldr	r0, [pc, #192]	@ (800cfb8 <mg_mgr_init+0xf0>)
 800cef6:	f012 fb9a 	bl	801f62e <mg_ntohl>
 800cefa:	4603      	mov	r3, r0
 800cefc:	4a2f      	ldr	r2, [pc, #188]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cefe:	6093      	str	r3, [r2, #8]
 800cf00:	482f      	ldr	r0, [pc, #188]	@ (800cfc0 <mg_mgr_init+0xf8>)
 800cf02:	f012 fb94 	bl	801f62e <mg_ntohl>
 800cf06:	4603      	mov	r3, r0
 800cf08:	4a2c      	ldr	r2, [pc, #176]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf0a:	60d3      	str	r3, [r2, #12]
 800cf0c:	482a      	ldr	r0, [pc, #168]	@ (800cfb8 <mg_mgr_init+0xf0>)
 800cf0e:	f012 fb8e 	bl	801f62e <mg_ntohl>
 800cf12:	4603      	mov	r3, r0
 800cf14:	4a29      	ldr	r2, [pc, #164]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf16:	6113      	str	r3, [r2, #16]
 800cf18:	4b28      	ldr	r3, [pc, #160]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf1a:	4a2a      	ldr	r2, [pc, #168]	@ (800cfc4 <mg_mgr_init+0xfc>)
 800cf1c:	625a      	str	r2, [r3, #36]	@ 0x24
 800cf1e:	4b27      	ldr	r3, [pc, #156]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf20:	4a24      	ldr	r2, [pc, #144]	@ (800cfb4 <mg_mgr_init+0xec>)
 800cf22:	629a      	str	r2, [r3, #40]	@ 0x28
 800cf24:	4b25      	ldr	r3, [pc, #148]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf26:	2202      	movs	r2, #2
 800cf28:	701a      	strb	r2, [r3, #0]
 800cf2a:	4b27      	ldr	r3, [pc, #156]	@ (800cfc8 <mg_mgr_init+0x100>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	b2da      	uxtb	r2, r3
 800cf30:	4b22      	ldr	r3, [pc, #136]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf32:	705a      	strb	r2, [r3, #1]
 800cf34:	4b24      	ldr	r3, [pc, #144]	@ (800cfc8 <mg_mgr_init+0x100>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	0a9b      	lsrs	r3, r3, #10
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	4b1f      	ldr	r3, [pc, #124]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf3e:	709a      	strb	r2, [r3, #2]
 800cf40:	4b21      	ldr	r3, [pc, #132]	@ (800cfc8 <mg_mgr_init+0x100>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	0cdb      	lsrs	r3, r3, #19
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	4b1c      	ldr	r3, [pc, #112]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf4a:	70da      	strb	r2, [r3, #3]
 800cf4c:	4b1f      	ldr	r3, [pc, #124]	@ (800cfcc <mg_mgr_init+0x104>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	4b1a      	ldr	r3, [pc, #104]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf54:	711a      	strb	r2, [r3, #4]
 800cf56:	4b1e      	ldr	r3, [pc, #120]	@ (800cfd0 <mg_mgr_init+0x108>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	4b17      	ldr	r3, [pc, #92]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf5e:	715a      	strb	r2, [r3, #5]
 800cf60:	4916      	ldr	r1, [pc, #88]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f002 ffb2 	bl	800fecc <mg_tcpip_init>
 800cf68:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd4 <mg_mgr_init+0x10c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	dd0b      	ble.n	800cf88 <mg_mgr_init+0xc0>
 800cf70:	4b19      	ldr	r3, [pc, #100]	@ (800cfd8 <mg_mgr_init+0x110>)
 800cf72:	f241 023b 	movw	r2, #4155	@ 0x103b
 800cf76:	4919      	ldr	r1, [pc, #100]	@ (800cfdc <mg_mgr_init+0x114>)
 800cf78:	2002      	movs	r0, #2
 800cf7a:	f7ff fa5b 	bl	800c434 <mg_log_prefix>
 800cf7e:	4a0f      	ldr	r2, [pc, #60]	@ (800cfbc <mg_mgr_init+0xf4>)
 800cf80:	4917      	ldr	r1, [pc, #92]	@ (800cfe0 <mg_mgr_init+0x118>)
 800cf82:	4818      	ldr	r0, [pc, #96]	@ (800cfe4 <mg_mgr_init+0x11c>)
 800cf84:	f7ff faa6 	bl	800c4d4 <mg_log>
#endif
  mgr->pipe = MG_INVALID_SOCKET;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf8e:	641a      	str	r2, [r3, #64]	@ 0x40
  mgr->dnstimeout = 3000;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800cf96:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4a13      	ldr	r2, [pc, #76]	@ (800cfe8 <mg_mgr_init+0x120>)
 800cf9c:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4a12      	ldr	r2, [pc, #72]	@ (800cfec <mg_mgr_init+0x124>)
 800cfa2:	60da      	str	r2, [r3, #12]
  mg_tls_ctx_init(mgr);
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f00b ff08 	bl	8018dba <mg_tls_ctx_init>
}
 800cfaa:	bf00      	nop
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	24004180 	.word	0x24004180
 800cfb8:	c0a8010b 	.word	0xc0a8010b
 800cfbc:	24004188 	.word	0x24004188
 800cfc0:	ffff0000 	.word	0xffff0000
 800cfc4:	240002a0 	.word	0x240002a0
 800cfc8:	1ff1e800 	.word	0x1ff1e800
 800cfcc:	1ff1e804 	.word	0x1ff1e804
 800cfd0:	1ff1e808 	.word	0x1ff1e808
 800cfd4:	24000258 	.word	0x24000258
 800cfd8:	0802807c 	.word	0x0802807c
 800cfdc:	08024478 	.word	0x08024478
 800cfe0:	08010bbd 	.word	0x08010bbd
 800cfe4:	08025478 	.word	0x08025478
 800cfe8:	08025490 	.word	0x08025490
 800cfec:	080254a4 	.word	0x080254a4

0800cff0 <mg_tcpip_call>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mg_tcpip_call(struct mg_tcpip_if *ifp, int ev, void *ev_data) {
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	60f8      	str	r0, [r7, #12]
 800cff8:	60b9      	str	r1, [r7, #8]
 800cffa:	607a      	str	r2, [r7, #4]
  if (ifp->fn != NULL) ifp->fn(ifp, ev, ev_data);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d000:	2b00      	cmp	r3, #0
 800d002:	d005      	beq.n	800d010 <mg_tcpip_call+0x20>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	68b9      	ldr	r1, [r7, #8]
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	4798      	blx	r3
}
 800d010:	bf00      	nop
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <mkpay>:

static void send_syn(struct mg_connection *c);

static void mkpay(struct pkt *pkt, void *p) {
 800d018:	b590      	push	{r4, r7, lr}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.buf[pkt->raw.len] - (char *) p));
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	441a      	add	r2, r3
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	461a      	mov	r2, r3
 800d032:	68fc      	ldr	r4, [r7, #12]
 800d034:	463b      	mov	r3, r7
 800d036:	68b9      	ldr	r1, [r7, #8]
 800d038:	4618      	mov	r0, r3
 800d03a:	f007 f864 	bl	8014106 <mg_str_n>
 800d03e:	f104 0308 	add.w	r3, r4, #8
 800d042:	463a      	mov	r2, r7
 800d044:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d048:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800d04c:	bf00      	nop
 800d04e:	3714      	adds	r7, #20
 800d050:	46bd      	mov	sp, r7
 800d052:	bd90      	pop	{r4, r7, pc}

0800d054 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800d054:	b480      	push	{r7}
 800d056:	b087      	sub	sp, #28
 800d058:	af00      	add	r7, sp, #0
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	607a      	str	r2, [r7, #4]
  size_t i;
  const uint8_t *p = (const uint8_t *) buf;
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	613b      	str	r3, [r7, #16]
  for (i = 0; i < len; i++) sum += i & 1 ? p[i] : ((uint32_t) p[i]) << 8;
 800d064:	2300      	movs	r3, #0
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	e014      	b.n	800d094 <csumup+0x40>
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	f003 0301 	and.w	r3, r3, #1
 800d070:	2b00      	cmp	r3, #0
 800d072:	d004      	beq.n	800d07e <csumup+0x2a>
 800d074:	693a      	ldr	r2, [r7, #16]
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	4413      	add	r3, r2
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	e004      	b.n	800d088 <csumup+0x34>
 800d07e:	693a      	ldr	r2, [r7, #16]
 800d080:	697b      	ldr	r3, [r7, #20]
 800d082:	4413      	add	r3, r2
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	021b      	lsls	r3, r3, #8
 800d088:	68fa      	ldr	r2, [r7, #12]
 800d08a:	4413      	add	r3, r2
 800d08c:	60fb      	str	r3, [r7, #12]
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	3301      	adds	r3, #1
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	429a      	cmp	r2, r3
 800d09a:	d3e6      	bcc.n	800d06a <csumup+0x16>
  return sum;
 800d09c:	68fb      	ldr	r3, [r7, #12]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	371c      	adds	r7, #28
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800d0aa:	b580      	push	{r7, lr}
 800d0ac:	b082      	sub	sp, #8
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800d0b2:	e005      	b.n	800d0c0 <csumfin+0x16>
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	b29a      	uxth	r2, r3
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	0c1b      	lsrs	r3, r3, #16
 800d0bc:	4413      	add	r3, r2
 800d0be:	607b      	str	r3, [r7, #4]
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	0c1b      	lsrs	r3, r3, #16
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d1f5      	bne.n	800d0b4 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	43db      	mvns	r3, r3
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f012 fa95 	bl	801f600 <mg_ntohs>
 800d0d6:	4603      	mov	r3, r0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800d0ea:	683a      	ldr	r2, [r7, #0]
 800d0ec:	6879      	ldr	r1, [r7, #4]
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	f7ff ffb0 	bl	800d054 <csumup>
 800d0f4:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f7ff ffd7 	bl	800d0aa <csumfin>
 800d0fc:	4603      	mov	r3, r0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
	...

0800d108 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800d108:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d10c:	b088      	sub	sp, #32
 800d10e:	af02      	add	r7, sp, #8
 800d110:	6078      	str	r0, [r7, #4]
 800d112:	460b      	mov	r3, r1
 800d114:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d11c:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	33b0      	adds	r3, #176	@ 0xb0
 800d122:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
               : type == MIP_TTYPE_ARP ? MIP_ARP_RESP_MS
 800d124:	78fb      	ldrb	r3, [r7, #3]
 800d126:	2b01      	cmp	r3, #1
 800d128:	d013      	beq.n	800d152 <settmout+0x4a>
 800d12a:	78fb      	ldrb	r3, [r7, #3]
 800d12c:	2b02      	cmp	r3, #2
 800d12e:	d00e      	beq.n	800d14e <settmout+0x46>
 800d130:	78fb      	ldrb	r3, [r7, #3]
 800d132:	2b03      	cmp	r3, #3
 800d134:	d008      	beq.n	800d148 <settmout+0x40>
 800d136:	78fb      	ldrb	r3, [r7, #3]
 800d138:	2b04      	cmp	r3, #4
 800d13a:	d102      	bne.n	800d142 <settmout+0x3a>
 800d13c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d140:	e008      	b.n	800d154 <settmout+0x4c>
 800d142:	f64a 73c8 	movw	r3, #45000	@ 0xafc8
 800d146:	e005      	b.n	800d154 <settmout+0x4c>
 800d148:	f643 2398 	movw	r3, #15000	@ 0x3a98
 800d14c:	e002      	b.n	800d154 <settmout+0x4c>
 800d14e:	2364      	movs	r3, #100	@ 0x64
 800d150:	e000      	b.n	800d154 <settmout+0x4c>
 800d152:	2396      	movs	r3, #150	@ 0x96
  unsigned n = type == MIP_TTYPE_ACK   ? MIP_TCP_ACK_MS
 800d154:	60fb      	str	r3, [r7, #12]
               : type == MIP_TTYPE_SYN ? MIP_TCP_SYN_MS
               : type == MIP_TTYPE_FIN ? MIP_TCP_FIN_MS
                                       : MIP_TCP_KEEPALIVE_MS;
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d15c:	2b04      	cmp	r3, #4
 800d15e:	d029      	beq.n	800d1b4 <settmout+0xac>
  s->timer = ifp->now + n;
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800d166:	68f9      	ldr	r1, [r7, #12]
 800d168:	2000      	movs	r0, #0
 800d16a:	460c      	mov	r4, r1
 800d16c:	4605      	mov	r5, r0
 800d16e:	eb12 0804 	adds.w	r8, r2, r4
 800d172:	eb43 0905 	adc.w	r9, r3, r5
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	78fa      	ldrb	r2, [r7, #3]
 800d180:	f883 2020 	strb.w	r2, [r3, #32]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800d184:	4b0e      	ldr	r3, [pc, #56]	@ (800d1c0 <settmout+0xb8>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b03      	cmp	r3, #3
 800d18a:	dd14      	ble.n	800d1b6 <settmout+0xae>
 800d18c:	4b0d      	ldr	r3, [pc, #52]	@ (800d1c4 <settmout+0xbc>)
 800d18e:	f241 02fd 	movw	r2, #4349	@ 0x10fd
 800d192:	490d      	ldr	r1, [pc, #52]	@ (800d1c8 <settmout+0xc0>)
 800d194:	2004      	movs	r0, #4
 800d196:	f7ff f94d 	bl	800c434 <mg_log_prefix>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d19e:	78f8      	ldrb	r0, [r7, #3]
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d1a6:	e9cd 2300 	strd	r2, r3, [sp]
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	4807      	ldr	r0, [pc, #28]	@ (800d1cc <settmout+0xc4>)
 800d1ae:	f7ff f991 	bl	800c4d4 <mg_log>
 800d1b2:	e000      	b.n	800d1b6 <settmout+0xae>
  if (s->ttype == MIP_TTYPE_FIN) return;  // skip if 3-way closing
 800d1b4:	bf00      	nop
}
 800d1b6:	3718      	adds	r7, #24
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d1be:	bf00      	nop
 800d1c0:	24000258 	.word	0x24000258
 800d1c4:	08028088 	.word	0x08028088
 800d1c8:	08024478 	.word	0x08024478
 800d1cc:	080254c4 	.word	0x080254c4

0800d1d0 <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  size_t n = ifp->driver->tx(ifp->tx.buf, len, ifp);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	6950      	ldr	r0, [r2, #20]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	4798      	blx	r3
 800d1ea:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800d1ec:	68fa      	ldr	r2, [r7, #12]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d104      	bne.n	800d1fe <ether_output+0x2e>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d1f8:	1c5a      	adds	r2, r3, #1
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  return n;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <mg_tcpip_arp_request>:

void mg_tcpip_arp_request(struct mg_tcpip_if *ifp, uint32_t ip, uint8_t *mac) {
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	695b      	ldr	r3, [r3, #20]
 800d218:	617b      	str	r3, [r7, #20]
  struct arp *arp = (struct arp *) (eth + 1);
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	330e      	adds	r3, #14
 800d21e:	613b      	str	r3, [r7, #16]
  memset(eth->dst, 255, sizeof(eth->dst));
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	2206      	movs	r2, #6
 800d224:	21ff      	movs	r1, #255	@ 0xff
 800d226:	4618      	mov	r0, r3
 800d228:	f016 fab9 	bl	802379e <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	3306      	adds	r3, #6
 800d230:	68f9      	ldr	r1, [r7, #12]
 800d232:	2206      	movs	r2, #6
 800d234:	4618      	mov	r0, r3
 800d236:	f016 fbe8 	bl	8023a0a <memcpy>
  eth->type = mg_htons(0x806);
 800d23a:	f640 0006 	movw	r0, #2054	@ 0x806
 800d23e:	f012 f9df 	bl	801f600 <mg_ntohs>
 800d242:	4603      	mov	r3, r0
 800d244:	461a      	mov	r2, r3
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800d24a:	221c      	movs	r2, #28
 800d24c:	2100      	movs	r1, #0
 800d24e:	6938      	ldr	r0, [r7, #16]
 800d250:	f016 faa5 	bl	802379e <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800d254:	2001      	movs	r0, #1
 800d256:	f012 f9d3 	bl	801f600 <mg_ntohs>
 800d25a:	4603      	mov	r3, r0
 800d25c:	461a      	mov	r2, r3
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	801a      	strh	r2, [r3, #0]
 800d262:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d266:	f012 f9cb 	bl	801f600 <mg_ntohs>
 800d26a:	4603      	mov	r3, r0
 800d26c:	461a      	mov	r2, r3
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	805a      	strh	r2, [r3, #2]
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	2206      	movs	r2, #6
 800d276:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800d278:	693b      	ldr	r3, [r7, #16]
 800d27a:	2204      	movs	r2, #4
 800d27c:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800d27e:	2001      	movs	r0, #1
 800d280:	f012 f9be 	bl	801f600 <mg_ntohs>
 800d284:	4603      	mov	r3, r0
 800d286:	461a      	mov	r2, r3
 800d288:	693b      	ldr	r3, [r7, #16]
 800d28a:	80da      	strh	r2, [r3, #6]
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	68ba      	ldr	r2, [r7, #8]
 800d290:	619a      	str	r2, [r3, #24]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	689a      	ldr	r2, [r3, #8]
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	3308      	adds	r3, #8
 800d2a0:	68f9      	ldr	r1, [r7, #12]
 800d2a2:	2206      	movs	r2, #6
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f016 fbb0 	bl	8023a0a <memcpy>
  if (mac != NULL) memcpy(arp->tha, mac, sizeof(arp->tha));
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d006      	beq.n	800d2be <mg_tcpip_arp_request+0xb6>
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	3312      	adds	r3, #18
 800d2b4:	2206      	movs	r2, #6
 800d2b6:	6879      	ldr	r1, [r7, #4]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f016 fba6 	bl	8023a0a <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	f103 021c 	add.w	r2, r3, #28
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	1ad3      	subs	r3, r2, r3
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7ff ff80 	bl	800d1d0 <ether_output>
}
 800d2d0:	bf00      	nop
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d2e6:	2b04      	cmp	r3, #4
 800d2e8:	d135      	bne.n	800d356 <onstatechange+0x7e>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800d2ea:	4b45      	ldr	r3, [pc, #276]	@ (800d400 <onstatechange+0x128>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	dd0d      	ble.n	800d30e <onstatechange+0x36>
 800d2f2:	4b44      	ldr	r3, [pc, #272]	@ (800d404 <onstatechange+0x12c>)
 800d2f4:	f241 1217 	movw	r2, #4375	@ 0x1117
 800d2f8:	4943      	ldr	r1, [pc, #268]	@ (800d408 <onstatechange+0x130>)
 800d2fa:	2002      	movs	r0, #2
 800d2fc:	f7ff f89a 	bl	800c434 <mg_log_prefix>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	3308      	adds	r3, #8
 800d304:	461a      	mov	r2, r3
 800d306:	4941      	ldr	r1, [pc, #260]	@ (800d40c <onstatechange+0x134>)
 800d308:	4841      	ldr	r0, [pc, #260]	@ (800d410 <onstatechange+0x138>)
 800d30a:	f7ff f8e3 	bl	800c4d4 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800d30e:	4b3c      	ldr	r3, [pc, #240]	@ (800d400 <onstatechange+0x128>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b01      	cmp	r3, #1
 800d314:	dd0d      	ble.n	800d332 <onstatechange+0x5a>
 800d316:	4b3b      	ldr	r3, [pc, #236]	@ (800d404 <onstatechange+0x12c>)
 800d318:	f241 1218 	movw	r2, #4376	@ 0x1118
 800d31c:	493a      	ldr	r1, [pc, #232]	@ (800d408 <onstatechange+0x130>)
 800d31e:	2002      	movs	r0, #2
 800d320:	f7ff f888 	bl	800c434 <mg_log_prefix>
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	3310      	adds	r3, #16
 800d328:	461a      	mov	r2, r3
 800d32a:	4938      	ldr	r1, [pc, #224]	@ (800d40c <onstatechange+0x134>)
 800d32c:	4839      	ldr	r0, [pc, #228]	@ (800d414 <onstatechange+0x13c>)
 800d32e:	f7ff f8d1 	bl	800c4d4 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800d332:	4b33      	ldr	r3, [pc, #204]	@ (800d400 <onstatechange+0x128>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	2b01      	cmp	r3, #1
 800d338:	dd57      	ble.n	800d3ea <onstatechange+0x112>
 800d33a:	4b32      	ldr	r3, [pc, #200]	@ (800d404 <onstatechange+0x12c>)
 800d33c:	f241 1219 	movw	r2, #4377	@ 0x1119
 800d340:	4931      	ldr	r1, [pc, #196]	@ (800d408 <onstatechange+0x130>)
 800d342:	2002      	movs	r0, #2
 800d344:	f7ff f876 	bl	800c434 <mg_log_prefix>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	461a      	mov	r2, r3
 800d34c:	4932      	ldr	r1, [pc, #200]	@ (800d418 <onstatechange+0x140>)
 800d34e:	4833      	ldr	r0, [pc, #204]	@ (800d41c <onstatechange+0x144>)
 800d350:	f7ff f8c0 	bl	800c4d4 <mg_log>
 800d354:	e049      	b.n	800d3ea <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_IP) {
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	d115      	bne.n	800d38c <onstatechange+0xb4>
    MG_ERROR(("Got IP"));
 800d360:	4b27      	ldr	r3, [pc, #156]	@ (800d400 <onstatechange+0x128>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	dd09      	ble.n	800d37c <onstatechange+0xa4>
 800d368:	4b26      	ldr	r3, [pc, #152]	@ (800d404 <onstatechange+0x12c>)
 800d36a:	f241 121b 	movw	r2, #4379	@ 0x111b
 800d36e:	4926      	ldr	r1, [pc, #152]	@ (800d408 <onstatechange+0x130>)
 800d370:	2001      	movs	r0, #1
 800d372:	f7ff f85f 	bl	800c434 <mg_log_prefix>
 800d376:	482a      	ldr	r0, [pc, #168]	@ (800d420 <onstatechange+0x148>)
 800d378:	f7ff f8ac 	bl	800c4d4 <mg_log>
    mg_tcpip_arp_request(ifp, ifp->gw, NULL);  // unsolicited GW ARP request
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	691b      	ldr	r3, [r3, #16]
 800d380:	2200      	movs	r2, #0
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f7ff ff3f 	bl	800d208 <mg_tcpip_arp_request>
 800d38a:	e02e      	b.n	800d3ea <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d392:	2b01      	cmp	r3, #1
 800d394:	d116      	bne.n	800d3c4 <onstatechange+0xec>
    MG_ERROR(("Link up"));
 800d396:	4b1a      	ldr	r3, [pc, #104]	@ (800d400 <onstatechange+0x128>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	dd09      	ble.n	800d3b2 <onstatechange+0xda>
 800d39e:	4b19      	ldr	r3, [pc, #100]	@ (800d404 <onstatechange+0x12c>)
 800d3a0:	f241 121e 	movw	r2, #4382	@ 0x111e
 800d3a4:	4918      	ldr	r1, [pc, #96]	@ (800d408 <onstatechange+0x130>)
 800d3a6:	2001      	movs	r0, #1
 800d3a8:	f7ff f844 	bl	800c434 <mg_log_prefix>
 800d3ac:	481d      	ldr	r0, [pc, #116]	@ (800d424 <onstatechange+0x14c>)
 800d3ae:	f7ff f891 	bl	800c4d4 <mg_log>
    srand((unsigned int) mg_millis());
 800d3b2:	f7f3 f9d9 	bl	8000768 <mg_millis>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f015 fff3 	bl	80233a8 <srand>
 800d3c2:	e012      	b.n	800d3ea <onstatechange+0x112>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d10d      	bne.n	800d3ea <onstatechange+0x112>
    MG_ERROR(("Link down"));
 800d3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800d400 <onstatechange+0x128>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	dd09      	ble.n	800d3ea <onstatechange+0x112>
 800d3d6:	4b0b      	ldr	r3, [pc, #44]	@ (800d404 <onstatechange+0x12c>)
 800d3d8:	f241 1221 	movw	r2, #4385	@ 0x1121
 800d3dc:	490a      	ldr	r1, [pc, #40]	@ (800d408 <onstatechange+0x130>)
 800d3de:	2001      	movs	r0, #1
 800d3e0:	f7ff f828 	bl	800c434 <mg_log_prefix>
 800d3e4:	4810      	ldr	r0, [pc, #64]	@ (800d428 <onstatechange+0x150>)
 800d3e6:	f7ff f875 	bl	800c4d4 <mg_log>
  }
  mg_tcpip_call(ifp, MG_TCPIP_EV_ST_CHG, &ifp->state);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	3384      	adds	r3, #132	@ 0x84
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f7ff fdfc 	bl	800cff0 <mg_tcpip_call>
}
 800d3f8:	bf00      	nop
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	24000258 	.word	0x24000258
 800d404:	08028094 	.word	0x08028094
 800d408:	08024478 	.word	0x08024478
 800d40c:	08010af9 	.word	0x08010af9
 800d410:	080254d4 	.word	0x080254d4
 800d414:	080254e4 	.word	0x080254e4
 800d418:	08010bbd 	.word	0x08010bbd
 800d41c:	080254f4 	.word	0x080254f4
 800d420:	08025504 	.word	0x08025504
 800d424:	0802550c 	.word	0x0802550c
 800d428:	08025514 	.word	0x08025514

0800d42c <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	603b      	str	r3, [r7, #0]
 800d438:	4613      	mov	r3, r2
 800d43a:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.buf;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	695b      	ldr	r3, [r3, #20]
 800d440:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	330e      	adds	r3, #14
 800d446:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	2206      	movs	r2, #6
 800d44c:	68b9      	ldr	r1, [r7, #8]
 800d44e:	4618      	mov	r0, r3
 800d450:	f016 fadb 	bl	8023a0a <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	3306      	adds	r3, #6
 800d458:	68f9      	ldr	r1, [r7, #12]
 800d45a:	2206      	movs	r2, #6
 800d45c:	4618      	mov	r0, r3
 800d45e:	f016 fad4 	bl	8023a0a <memcpy>
  eth->type = mg_htons(0x800);
 800d462:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d466:	f012 f8cb 	bl	801f600 <mg_ntohs>
 800d46a:	4603      	mov	r3, r0
 800d46c:	461a      	mov	r2, r3
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800d472:	2214      	movs	r2, #20
 800d474:	2100      	movs	r1, #0
 800d476:	6938      	ldr	r0, [r7, #16]
 800d478:	f016 f991 	bl	802379e <memset>
  ip->ver = 0x45;               // Version 4, header length 5 words
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	2245      	movs	r2, #69	@ 0x45
 800d480:	701a      	strb	r2, [r3, #0]
  ip->frag = mg_htons(0x4000);  // Don't fragment
 800d482:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800d486:	f012 f8bb 	bl	801f600 <mg_ntohs>
 800d48a:	4603      	mov	r3, r0
 800d48c:	461a      	mov	r2, r3
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	80da      	strh	r2, [r3, #6]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800d492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d494:	b29b      	uxth	r3, r3
 800d496:	3314      	adds	r3, #20
 800d498:	b29b      	uxth	r3, r3
 800d49a:	4618      	mov	r0, r3
 800d49c:	f012 f8b0 	bl	801f600 <mg_ntohs>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	461a      	mov	r2, r3
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2240      	movs	r2, #64	@ 0x40
 800d4ac:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	79fa      	ldrb	r2, [r7, #7]
 800d4b2:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	683a      	ldr	r2, [r7, #0]
 800d4b8:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	6a3a      	ldr	r2, [r7, #32]
 800d4be:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800d4c0:	2114      	movs	r1, #20
 800d4c2:	6938      	ldr	r0, [r7, #16]
 800d4c4:	f7ff fe0c 	bl	800d0e0 <ipcsum>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	693b      	ldr	r3, [r7, #16]
 800d4ce:	815a      	strh	r2, [r3, #10]
  return ip;
 800d4d0:	693b      	ldr	r3, [r7, #16]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3718      	adds	r7, #24
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b08a      	sub	sp, #40	@ 0x28
 800d4de:	af02      	add	r7, sp, #8
 800d4e0:	60f8      	str	r0, [r7, #12]
 800d4e2:	60b9      	str	r1, [r7, #8]
 800d4e4:	607a      	str	r2, [r7, #4]
 800d4e6:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800d4e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	9301      	str	r3, [sp, #4]
 800d4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2211      	movs	r2, #17
 800d4f6:	68b9      	ldr	r1, [r7, #8]
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f7ff ff97 	bl	800d42c <tx_ip>
 800d4fe:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	3314      	adds	r3, #20
 800d504:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	887a      	ldrh	r2, [r7, #2]
 800d50a:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800d510:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800d512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d514:	b29b      	uxth	r3, r3
 800d516:	3308      	adds	r3, #8
 800d518:	b29b      	uxth	r3, r3
 800d51a:	4618      	mov	r0, r3
 800d51c:	f012 f870 	bl	801f600 <mg_ntohs>
 800d520:	4603      	mov	r3, r0
 800d522:	461a      	mov	r2, r3
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	2200      	movs	r2, #0
 800d52c:	719a      	strb	r2, [r3, #6]
 800d52e:	2200      	movs	r2, #0
 800d530:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800d532:	2208      	movs	r2, #8
 800d534:	69b9      	ldr	r1, [r7, #24]
 800d536:	2000      	movs	r0, #0
 800d538:	f7ff fd8c 	bl	800d054 <csumup>
 800d53c:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800d53e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d540:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d542:	6978      	ldr	r0, [r7, #20]
 800d544:	f7ff fd86 	bl	800d054 <csumup>
 800d548:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	330c      	adds	r3, #12
 800d54e:	2204      	movs	r2, #4
 800d550:	4619      	mov	r1, r3
 800d552:	6978      	ldr	r0, [r7, #20]
 800d554:	f7ff fd7e 	bl	800d054 <csumup>
 800d558:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	3310      	adds	r3, #16
 800d55e:	2204      	movs	r2, #4
 800d560:	4619      	mov	r1, r3
 800d562:	6978      	ldr	r0, [r7, #20]
 800d564:	f7ff fd76 	bl	800d054 <csumup>
 800d568:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	7a5b      	ldrb	r3, [r3, #9]
 800d56e:	461a      	mov	r2, r3
 800d570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d572:	441a      	add	r2, r3
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	4413      	add	r3, r2
 800d578:	3308      	adds	r3, #8
 800d57a:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800d57c:	6978      	ldr	r0, [r7, #20]
 800d57e:	f7ff fd94 	bl	800d0aa <csumfin>
 800d582:	4603      	mov	r3, r0
 800d584:	461a      	mov	r2, r3
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	3308      	adds	r3, #8
 800d58e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d590:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d592:	4618      	mov	r0, r3
 800d594:	f016 f8e9 	bl	802376a <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800d598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d59a:	332a      	adds	r3, #42	@ 0x2a
 800d59c:	4619      	mov	r1, r3
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f7ff fe16 	bl	800d1d0 <ether_output>
}
 800d5a4:	bf00      	nop
 800d5a6:	3720      	adds	r7, #32
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800d5ac:	b5b0      	push	{r4, r5, r7, lr}
 800d5ae:	b0d0      	sub	sp, #320	@ 0x140
 800d5b0:	af04      	add	r7, sp, #16
 800d5b2:	f507 7498 	add.w	r4, r7, #304	@ 0x130
 800d5b6:	f5a4 7492 	sub.w	r4, r4, #292	@ 0x124
 800d5ba:	6020      	str	r0, [r4, #0]
 800d5bc:	f507 7098 	add.w	r0, r7, #304	@ 0x130
 800d5c0:	f5a0 7094 	sub.w	r0, r0, #296	@ 0x128
 800d5c4:	6001      	str	r1, [r0, #0]
 800d5c6:	f507 7198 	add.w	r1, r7, #304	@ 0x130
 800d5ca:	f5a1 7196 	sub.w	r1, r1, #300	@ 0x12c
 800d5ce:	600a      	str	r2, [r1, #0]
 800d5d0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d5d4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d5d8:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800d5da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5de:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d5e2:	4a38      	ldr	r2, [pc, #224]	@ (800d6c4 <tx_dhcp+0x118>)
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	4611      	mov	r1, r2
 800d5e8:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800d5ec:	461a      	mov	r2, r3
 800d5ee:	f016 fa0c 	bl	8023a0a <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800d5f2:	4835      	ldr	r0, [pc, #212]	@ (800d6c8 <tx_dhcp+0x11c>)
 800d5f4:	f012 f81b 	bl	801f62e <mg_ntohl>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d5fe:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d602:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800d606:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d60a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d60e:	6819      	ldr	r1, [r3, #0]
 800d610:	f107 0314 	add.w	r3, r7, #20
 800d614:	331c      	adds	r3, #28
 800d616:	2206      	movs	r2, #6
 800d618:	4618      	mov	r0, r3
 800d61a:	f016 f9f6 	bl	8023a0a <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800d61e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d622:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	3302      	adds	r3, #2
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	461a      	mov	r2, r3
 800d62e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d632:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d636:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800d638:	f107 0314 	add.w	r3, r7, #20
 800d63c:	33f0      	adds	r3, #240	@ 0xf0
 800d63e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800d642:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d646:	4618      	mov	r0, r3
 800d648:	f016 f9df 	bl	8023a0a <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800d64c:	f897 3148 	ldrb.w	r3, [r7, #328]	@ 0x148
 800d650:	2b00      	cmp	r3, #0
 800d652:	d009      	beq.n	800d668 <tx_dhcp+0xbc>
 800d654:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d658:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800d65c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d660:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d664:	6812      	ldr	r2, [r2, #0]
 800d666:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800d668:	2044      	movs	r0, #68	@ 0x44
 800d66a:	f011 ffc9 	bl	801f600 <mg_ntohs>
 800d66e:	4603      	mov	r3, r0
 800d670:	461d      	mov	r5, r3
 800d672:	2043      	movs	r0, #67	@ 0x43
 800d674:	f011 ffc4 	bl	801f600 <mg_ntohs>
 800d678:	4603      	mov	r3, r0
 800d67a:	461c      	mov	r4, r3
 800d67c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d680:	f5a3 7296 	sub.w	r2, r3, #300	@ 0x12c
 800d684:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d688:	f5a3 7194 	sub.w	r1, r3, #296	@ 0x128
 800d68c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d690:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 800d694:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800d698:	9303      	str	r3, [sp, #12]
 800d69a:	f107 0314 	add.w	r3, r7, #20
 800d69e:	9302      	str	r3, [sp, #8]
 800d6a0:	9401      	str	r4, [sp, #4]
 800d6a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d6a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	9300      	str	r3, [sp, #0]
 800d6ae:	462b      	mov	r3, r5
 800d6b0:	6812      	ldr	r2, [r2, #0]
 800d6b2:	6809      	ldr	r1, [r1, #0]
 800d6b4:	6800      	ldr	r0, [r0, #0]
 800d6b6:	f7ff ff10 	bl	800d4da <tx_udp>
         sizeof(dhcp));
}
 800d6ba:	bf00      	nop
 800d6bc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	bdb0      	pop	{r4, r5, r7, pc}
 800d6c4:	08025520 	.word	0x08025520
 800d6c8:	63825363 	.word	0x63825363

0800d6cc <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1; RFC-2132 #9.8
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b096      	sub	sp, #88	@ 0x58
 800d6d0:	af04      	add	r7, sp, #16
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	7fdb      	ldrb	r3, [r3, #31]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <tx_dhcp_request_sel+0x18>
 800d6e0:	2201      	movs	r2, #1
 800d6e2:	e000      	b.n	800d6e6 <tx_dhcp_request_sel+0x1a>
 800d6e4:	2200      	movs	r2, #0
                             (ifp->enable_req_sntp ? 1 : 0));
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f893 3020 	ldrb.w	r3, [r3, #32]
  uint8_t extra = (uint8_t) ((ifp->enable_req_dns ? 1 : 0) +
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d001      	beq.n	800d6f4 <tx_dhcp_request_sel+0x28>
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	e000      	b.n	800d6f6 <tx_dhcp_request_sel+0x2a>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	4413      	add	r3, r2
 800d6f8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  size_t len = strlen(ifp->dhcp_name);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	3344      	adds	r3, #68	@ 0x44
 800d700:	4618      	mov	r0, r3
 800d702:	f7f2 fe65 	bl	80003d0 <strlen>
 800d706:	63f8      	str	r0, [r7, #60]	@ 0x3c
  size_t olen = 21 + len + extra + 2 + 1;  // Total length of options
 800d708:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800d70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d70e:	4413      	add	r3, r2
 800d710:	3318      	adds	r3, #24
 800d712:	63bb      	str	r3, [r7, #56]	@ 0x38
#define OPTS_MAXLEN (21 + sizeof(ifp->dhcp_name) + 2 + 2 + 1)
  uint8_t opts[OPTS_MAXLEN];  // Allocate options (max size possible)
  uint8_t *p = opts;
 800d714:	f107 0310 	add.w	r3, r7, #16
 800d718:	647b      	str	r3, [r7, #68]	@ 0x44
  assert(olen <= sizeof(opts));
 800d71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71c:	2b26      	cmp	r3, #38	@ 0x26
 800d71e:	d906      	bls.n	800d72e <tx_dhcp_request_sel+0x62>
 800d720:	4b50      	ldr	r3, [pc, #320]	@ (800d864 <tx_dhcp_request_sel+0x198>)
 800d722:	4a51      	ldr	r2, [pc, #324]	@ (800d868 <tx_dhcp_request_sel+0x19c>)
 800d724:	f241 116a 	movw	r1, #4458	@ 0x116a
 800d728:	4850      	ldr	r0, [pc, #320]	@ (800d86c <tx_dhcp_request_sel+0x1a0>)
 800d72a:	f015 fd41 	bl	80231b0 <__assert_func>
  memset(opts, 0, sizeof(opts));
 800d72e:	f107 0310 	add.w	r3, r7, #16
 800d732:	2226      	movs	r2, #38	@ 0x26
 800d734:	2100      	movs	r1, #0
 800d736:	4618      	mov	r0, r3
 800d738:	f016 f831 	bl	802379e <memset>
  *p++ = 53, *p++ = 1, *p++ = 3;                       // Type: DHCP request
 800d73c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d73e:	1c5a      	adds	r2, r3, #1
 800d740:	647a      	str	r2, [r7, #68]	@ 0x44
 800d742:	2235      	movs	r2, #53	@ 0x35
 800d744:	701a      	strb	r2, [r3, #0]
 800d746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d748:	1c5a      	adds	r2, r3, #1
 800d74a:	647a      	str	r2, [r7, #68]	@ 0x44
 800d74c:	2201      	movs	r2, #1
 800d74e:	701a      	strb	r2, [r3, #0]
 800d750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d752:	1c5a      	adds	r2, r3, #1
 800d754:	647a      	str	r2, [r7, #68]	@ 0x44
 800d756:	2203      	movs	r2, #3
 800d758:	701a      	strb	r2, [r3, #0]
  *p++ = 54, *p++ = 4, memcpy(p, &ip_srv, 4), p += 4;  // DHCP server ID
 800d75a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d760:	2236      	movs	r2, #54	@ 0x36
 800d762:	701a      	strb	r2, [r3, #0]
 800d764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d766:	1c5a      	adds	r2, r3, #1
 800d768:	647a      	str	r2, [r7, #68]	@ 0x44
 800d76a:	2204      	movs	r2, #4
 800d76c:	701a      	strb	r2, [r3, #0]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d772:	601a      	str	r2, [r3, #0]
 800d774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d776:	3304      	adds	r3, #4
 800d778:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 50, *p++ = 4, memcpy(p, &ip_req, 4), p += 4;  // Requested IP
 800d77a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d77c:	1c5a      	adds	r2, r3, #1
 800d77e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d780:	2232      	movs	r2, #50	@ 0x32
 800d782:	701a      	strb	r2, [r3, #0]
 800d784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	647a      	str	r2, [r7, #68]	@ 0x44
 800d78a:	2204      	movs	r2, #4
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	68ba      	ldr	r2, [r7, #8]
 800d790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d796:	3304      	adds	r3, #4
 800d798:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 12, *p++ = (uint8_t) (len & 255);             // DHCP host
 800d79a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d79c:	1c5a      	adds	r2, r3, #1
 800d79e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d7a0:	220c      	movs	r2, #12
 800d7a2:	701a      	strb	r2, [r3, #0]
 800d7a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7a6:	1c5a      	adds	r2, r3, #1
 800d7a8:	647a      	str	r2, [r7, #68]	@ 0x44
 800d7aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d7ac:	b2d2      	uxtb	r2, r2
 800d7ae:	701a      	strb	r2, [r3, #0]
  memcpy(p, ifp->dhcp_name, len), p += len;            // name
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	3344      	adds	r3, #68	@ 0x44
 800d7b4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d7ba:	f016 f926 	bl	8023a0a <memcpy>
 800d7be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7c2:	4413      	add	r3, r2
 800d7c4:	647b      	str	r3, [r7, #68]	@ 0x44
  *p++ = 55, *p++ = 2 + extra, *p++ = 1, *p++ = 3;     // GW, MASK
 800d7c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	647a      	str	r2, [r7, #68]	@ 0x44
 800d7cc:	2237      	movs	r2, #55	@ 0x37
 800d7ce:	701a      	strb	r2, [r3, #0]
 800d7d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7d2:	1c5a      	adds	r2, r3, #1
 800d7d4:	647a      	str	r2, [r7, #68]	@ 0x44
 800d7d6:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800d7da:	3202      	adds	r2, #2
 800d7dc:	b2d2      	uxtb	r2, r2
 800d7de:	701a      	strb	r2, [r3, #0]
 800d7e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7e2:	1c5a      	adds	r2, r3, #1
 800d7e4:	647a      	str	r2, [r7, #68]	@ 0x44
 800d7e6:	2201      	movs	r2, #1
 800d7e8:	701a      	strb	r2, [r3, #0]
 800d7ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ec:	1c5a      	adds	r2, r3, #1
 800d7ee:	647a      	str	r2, [r7, #68]	@ 0x44
 800d7f0:	2203      	movs	r2, #3
 800d7f2:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_dns) *p++ = 6;                   // DNS
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	7fdb      	ldrb	r3, [r3, #31]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d004      	beq.n	800d806 <tx_dhcp_request_sel+0x13a>
 800d7fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7fe:	1c5a      	adds	r2, r3, #1
 800d800:	647a      	str	r2, [r7, #68]	@ 0x44
 800d802:	2206      	movs	r2, #6
 800d804:	701a      	strb	r2, [r3, #0]
  if (ifp->enable_req_sntp) *p++ = 42;                 // SNTP
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d004      	beq.n	800d81a <tx_dhcp_request_sel+0x14e>
 800d810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	647a      	str	r2, [r7, #68]	@ 0x44
 800d816:	222a      	movs	r2, #42	@ 0x2a
 800d818:	701a      	strb	r2, [r3, #0]
  *p++ = 255;                                          // End of options
 800d81a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d81c:	1c5a      	adds	r2, r3, #1
 800d81e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d820:	22ff      	movs	r2, #255	@ 0xff
 800d822:	701a      	strb	r2, [r3, #0]
  // assert((size_t) (p - opts) < olen);
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, olen, 0);
 800d824:	2300      	movs	r3, #0
 800d826:	9302      	str	r3, [sp, #8]
 800d828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82a:	9301      	str	r3, [sp, #4]
 800d82c:	f107 0310 	add.w	r3, r7, #16
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	f04f 33ff 	mov.w	r3, #4294967295
 800d836:	2200      	movs	r2, #0
 800d838:	490d      	ldr	r1, [pc, #52]	@ (800d870 <tx_dhcp_request_sel+0x1a4>)
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f7ff feb6 	bl	800d5ac <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800d840:	4b0c      	ldr	r3, [pc, #48]	@ (800d874 <tx_dhcp_request_sel+0x1a8>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b02      	cmp	r3, #2
 800d846:	dd09      	ble.n	800d85c <tx_dhcp_request_sel+0x190>
 800d848:	4b07      	ldr	r3, [pc, #28]	@ (800d868 <tx_dhcp_request_sel+0x19c>)
 800d84a:	f241 1277 	movw	r2, #4471	@ 0x1177
 800d84e:	4907      	ldr	r1, [pc, #28]	@ (800d86c <tx_dhcp_request_sel+0x1a0>)
 800d850:	2003      	movs	r0, #3
 800d852:	f7fe fdef 	bl	800c434 <mg_log_prefix>
 800d856:	4808      	ldr	r0, [pc, #32]	@ (800d878 <tx_dhcp_request_sel+0x1ac>)
 800d858:	f7fe fe3c 	bl	800c4d4 <mg_log>
}
 800d85c:	bf00      	nop
 800d85e:	3748      	adds	r7, #72	@ 0x48
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	0802563c 	.word	0x0802563c
 800d868:	080280a4 	.word	0x080280a4
 800d86c:	08024478 	.word	0x08024478
 800d870:	08027b8c 	.word	0x08027b8c
 800d874:	24000258 	.word	0x24000258
 800d878:	08025654 	.word	0x08025654

0800d87c <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b08a      	sub	sp, #40	@ 0x28
 800d880:	af04      	add	r7, sp, #16
 800d882:	60f8      	str	r0, [r7, #12]
 800d884:	60b9      	str	r1, [r7, #8]
 800d886:	607a      	str	r2, [r7, #4]
 800d888:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800d88a:	4b10      	ldr	r3, [pc, #64]	@ (800d8cc <tx_dhcp_request_re+0x50>)
 800d88c:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800d88e:	2301      	movs	r3, #1
 800d890:	9302      	str	r3, [sp, #8]
 800d892:	2304      	movs	r3, #4
 800d894:	9301      	str	r3, [sp, #4]
 800d896:	f107 0314 	add.w	r3, r7, #20
 800d89a:	9300      	str	r3, [sp, #0]
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	687a      	ldr	r2, [r7, #4]
 800d8a0:	68b9      	ldr	r1, [r7, #8]
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f7ff fe82 	bl	800d5ac <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800d8a8:	4b09      	ldr	r3, [pc, #36]	@ (800d8d0 <tx_dhcp_request_re+0x54>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b02      	cmp	r3, #2
 800d8ae:	dd09      	ble.n	800d8c4 <tx_dhcp_request_re+0x48>
 800d8b0:	4b08      	ldr	r3, [pc, #32]	@ (800d8d4 <tx_dhcp_request_re+0x58>)
 800d8b2:	f241 1282 	movw	r2, #4482	@ 0x1182
 800d8b6:	4908      	ldr	r1, [pc, #32]	@ (800d8d8 <tx_dhcp_request_re+0x5c>)
 800d8b8:	2003      	movs	r0, #3
 800d8ba:	f7fe fdbb 	bl	800c434 <mg_log_prefix>
 800d8be:	4807      	ldr	r0, [pc, #28]	@ (800d8dc <tx_dhcp_request_re+0x60>)
 800d8c0:	f7fe fe08 	bl	800c4d4 <mg_log>
}
 800d8c4:	bf00      	nop
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	ff030135 	.word	0xff030135
 800d8d0:	24000258 	.word	0x24000258
 800d8d4:	080280b8 	.word	0x080280b8
 800d8d8:	08024478 	.word	0x08024478
 800d8dc:	08025654 	.word	0x08025654

0800d8e0 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b088      	sub	sp, #32
 800d8e4:	af04      	add	r7, sp, #16
 800d8e6:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800d8e8:	4a14      	ldr	r2, [pc, #80]	@ (800d93c <tx_dhcp_discover+0x5c>)
 800d8ea:	f107 0308 	add.w	r3, r7, #8
 800d8ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d8f2:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	9302      	str	r3, [sp, #8]
 800d8fa:	2308      	movs	r3, #8
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	f107 0308 	add.w	r3, r7, #8
 800d902:	9300      	str	r3, [sp, #0]
 800d904:	f04f 33ff 	mov.w	r3, #4294967295
 800d908:	2200      	movs	r2, #0
 800d90a:	490d      	ldr	r1, [pc, #52]	@ (800d940 <tx_dhcp_discover+0x60>)
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7ff fe4d 	bl	800d5ac <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800d912:	4b0c      	ldr	r3, [pc, #48]	@ (800d944 <tx_dhcp_discover+0x64>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b02      	cmp	r3, #2
 800d918:	dd0c      	ble.n	800d934 <tx_dhcp_discover+0x54>
 800d91a:	4b0b      	ldr	r3, [pc, #44]	@ (800d948 <tx_dhcp_discover+0x68>)
 800d91c:	f241 128c 	movw	r2, #4492	@ 0x118c
 800d920:	490a      	ldr	r1, [pc, #40]	@ (800d94c <tx_dhcp_discover+0x6c>)
 800d922:	2003      	movs	r0, #3
 800d924:	f7fe fd86 	bl	800c434 <mg_log_prefix>
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	461a      	mov	r2, r3
 800d92c:	4908      	ldr	r1, [pc, #32]	@ (800d950 <tx_dhcp_discover+0x70>)
 800d92e:	4809      	ldr	r0, [pc, #36]	@ (800d954 <tx_dhcp_discover+0x74>)
 800d930:	f7fe fdd0 	bl	800c4d4 <mg_log>
}
 800d934:	bf00      	nop
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	08025684 	.word	0x08025684
 800d940:	08027b8c 	.word	0x08027b8c
 800d944:	24000258 	.word	0x24000258
 800d948:	080280cc 	.word	0x080280cc
 800d94c:	08024478 	.word	0x08024478
 800d950:	08010bbd 	.word	0x08010bbd
 800d954:	08025664 	.word	0x08025664

0800d958 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800d958:	b580      	push	{r7, lr}
 800d95a:	b086      	sub	sp, #24
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	4613      	mov	r3, r2
 800d964:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800d966:	2300      	movs	r3, #0
 800d968:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	617b      	str	r3, [r7, #20]
 800d970:	e057      	b.n	800da22 <getpeer+0xca>
    if (c->is_arplooking && pkt->arp &&
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d978:	f003 0310 	and.w	r3, r3, #16
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d010      	beq.n	800d9a4 <getpeer+0x4c>
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	699b      	ldr	r3, [r3, #24]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d00c      	beq.n	800d9a4 <getpeer+0x4c>
        memcmp(&pkt->arp->spa, c->rem.ip, sizeof(pkt->arp->spa)) == 0)
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	699b      	ldr	r3, [r3, #24]
 800d98e:	f103 000e 	add.w	r0, r3, #14
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	331c      	adds	r3, #28
 800d996:	2204      	movs	r2, #4
 800d998:	4619      	mov	r1, r3
 800d99a:	f015 fed6 	bl	802374a <memcmp>
 800d99e:	4603      	mov	r3, r0
    if (c->is_arplooking && pkt->arp &&
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d042      	beq.n	800da2a <getpeer+0xd2>
      break;
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d9aa:	f003 0301 	and.w	r3, r3, #1
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00b      	beq.n	800d9cc <getpeer+0x74>
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d007      	beq.n	800d9cc <getpeer+0x74>
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	8b1a      	ldrh	r2, [r3, #24]
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9c4:	885b      	ldrh	r3, [r3, #2]
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d030      	beq.n	800da2e <getpeer+0xd6>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d11f      	bne.n	800da1c <getpeer+0xc4>
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d01b      	beq.n	800da1c <getpeer+0xc4>
 800d9e4:	697b      	ldr	r3, [r7, #20]
 800d9e6:	8b1a      	ldrh	r2, [r3, #24]
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d113      	bne.n	800da1c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d9fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d9fe:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800da00:	79fa      	ldrb	r2, [r7, #7]
 800da02:	429a      	cmp	r2, r3
 800da04:	d10a      	bne.n	800da1c <getpeer+0xc4>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800da06:	79fb      	ldrb	r3, [r7, #7]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d111      	bne.n	800da30 <getpeer+0xd8>
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da14:	881b      	ldrh	r3, [r3, #0]
 800da16:	b29b      	uxth	r3, r3
 800da18:	429a      	cmp	r2, r3
 800da1a:	d009      	beq.n	800da30 <getpeer+0xd8>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	617b      	str	r3, [r7, #20]
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d1a4      	bne.n	800d972 <getpeer+0x1a>
 800da28:	e002      	b.n	800da30 <getpeer+0xd8>
      break;
 800da2a:	bf00      	nop
 800da2c:	e000      	b.n	800da30 <getpeer+0xd8>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800da2e:	bf00      	nop
      break;
  }
  return c;
 800da30:	697b      	ldr	r3, [r7, #20]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3718      	adds	r7, #24
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
	...

0800da3c <rx_arp>:

static void mac_resolved(struct mg_connection *c);

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800da3c:	b5b0      	push	{r4, r5, r7, lr}
 800da3e:	b088      	sub	sp, #32
 800da40:	af02      	add	r7, sp, #8
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	699b      	ldr	r3, [r3, #24]
 800da4a:	88db      	ldrh	r3, [r3, #6]
 800da4c:	b29c      	uxth	r4, r3
 800da4e:	2001      	movs	r0, #1
 800da50:	f011 fdd6 	bl	801f600 <mg_ntohs>
 800da54:	4603      	mov	r3, r0
 800da56:	429c      	cmp	r4, r3
 800da58:	d176      	bne.n	800db48 <rx_arp+0x10c>
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	699b      	ldr	r3, [r3, #24]
 800da5e:	699a      	ldr	r2, [r3, #24]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	429a      	cmp	r2, r3
 800da66:	d16f      	bne.n	800db48 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.buf;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	695b      	ldr	r3, [r3, #20]
 800da6c:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	330e      	adds	r3, #14
 800da72:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800da74:	6978      	ldr	r0, [r7, #20]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	691b      	ldr	r3, [r3, #16]
 800da7a:	3306      	adds	r3, #6
 800da7c:	2206      	movs	r2, #6
 800da7e:	4619      	mov	r1, r3
 800da80:	f015 ffc3 	bl	8023a0a <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	3306      	adds	r3, #6
 800da88:	6879      	ldr	r1, [r7, #4]
 800da8a:	2206      	movs	r2, #6
 800da8c:	4618      	mov	r0, r3
 800da8e:	f015 ffbc 	bl	8023a0a <memcpy>
    eth->type = mg_htons(0x806);
 800da92:	f640 0006 	movw	r0, #2054	@ 0x806
 800da96:	f011 fdb3 	bl	801f600 <mg_ntohs>
 800da9a:	4603      	mov	r3, r0
 800da9c:	461a      	mov	r2, r3
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	699a      	ldr	r2, [r3, #24]
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	6814      	ldr	r4, [r2, #0]
 800daaa:	6850      	ldr	r0, [r2, #4]
 800daac:	6891      	ldr	r1, [r2, #8]
 800daae:	68d5      	ldr	r5, [r2, #12]
 800dab0:	601c      	str	r4, [r3, #0]
 800dab2:	6058      	str	r0, [r3, #4]
 800dab4:	6099      	str	r1, [r3, #8]
 800dab6:	60dd      	str	r5, [r3, #12]
 800dab8:	6914      	ldr	r4, [r2, #16]
 800daba:	6950      	ldr	r0, [r2, #20]
 800dabc:	6991      	ldr	r1, [r2, #24]
 800dabe:	611c      	str	r4, [r3, #16]
 800dac0:	6158      	str	r0, [r3, #20]
 800dac2:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800dac4:	2002      	movs	r0, #2
 800dac6:	f011 fd9b 	bl	801f600 <mg_ntohs>
 800daca:	4603      	mov	r3, r0
 800dacc:	461a      	mov	r2, r3
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	f103 0012 	add.w	r0, r3, #18
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	3308      	adds	r3, #8
 800dade:	2206      	movs	r2, #6
 800dae0:	4619      	mov	r1, r3
 800dae2:	f015 ff92 	bl	8023a0a <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	3308      	adds	r3, #8
 800daea:	6879      	ldr	r1, [r7, #4]
 800daec:	2206      	movs	r2, #6
 800daee:	4618      	mov	r0, r3
 800daf0:	f015 ff8b 	bl	8023a0a <memcpy>
    arp->tpa = pkt->arp->spa;
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	699b      	ldr	r3, [r3, #24]
 800daf8:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	689a      	ldr	r2, [r3, #8]
 800db04:	693b      	ldr	r3, [r7, #16]
 800db06:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_mac,
 800db0a:	4b4e      	ldr	r3, [pc, #312]	@ (800dc44 <rx_arp+0x208>)
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2b02      	cmp	r3, #2
 800db10:	dd10      	ble.n	800db34 <rx_arp+0xf8>
 800db12:	4b4d      	ldr	r3, [pc, #308]	@ (800dc48 <rx_arp+0x20c>)
 800db14:	f241 12b0 	movw	r2, #4528	@ 0x11b0
 800db18:	494c      	ldr	r1, [pc, #304]	@ (800dc4c <rx_arp+0x210>)
 800db1a:	2003      	movs	r0, #3
 800db1c:	f7fe fc8a 	bl	800c434 <mg_log_prefix>
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	f103 0218 	add.w	r2, r3, #24
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	9300      	str	r3, [sp, #0]
 800db2a:	4b49      	ldr	r3, [pc, #292]	@ (800dc50 <rx_arp+0x214>)
 800db2c:	4949      	ldr	r1, [pc, #292]	@ (800dc54 <rx_arp+0x218>)
 800db2e:	484a      	ldr	r0, [pc, #296]	@ (800dc58 <rx_arp+0x21c>)
 800db30:	f7fe fcd0 	bl	800c4d4 <mg_log>
              &ifp->mac));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	f103 021c 	add.w	r2, r3, #28
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	4619      	mov	r1, r3
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7ff fb45 	bl	800d1d0 <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800db46:	e079      	b.n	800dc3c <rx_arp+0x200>
  } else if (pkt->arp->op == mg_htons(2)) {
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	88db      	ldrh	r3, [r3, #6]
 800db4e:	b29c      	uxth	r4, r3
 800db50:	2002      	movs	r0, #2
 800db52:	f011 fd55 	bl	801f600 <mg_ntohs>
 800db56:	4603      	mov	r3, r0
 800db58:	429c      	cmp	r4, r3
 800db5a:	d16f      	bne.n	800dc3c <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	699b      	ldr	r3, [r3, #24]
 800db60:	3312      	adds	r3, #18
 800db62:	6879      	ldr	r1, [r7, #4]
 800db64:	2206      	movs	r2, #6
 800db66:	4618      	mov	r0, r3
 800db68:	f015 fdef 	bl	802374a <memcmp>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d163      	bne.n	800dc3a <rx_arp+0x1fe>
    if (pkt->arp->spa == ifp->gw) {
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	699b      	ldr	r3, [r3, #24]
 800db76:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	691b      	ldr	r3, [r3, #16]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d116      	bne.n	800dbb0 <rx_arp+0x174>
      // Got response for the GW ARP request. Set ifp->gwmac and IP -> READY
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	3308      	adds	r3, #8
 800db8e:	2206      	movs	r2, #6
 800db90:	4619      	mov	r1, r3
 800db92:	f015 ff3a 	bl	8023a0a <memcpy>
      if (ifp->state == MG_TCPIP_STATE_IP) {
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db9c:	2b03      	cmp	r3, #3
 800db9e:	d14d      	bne.n	800dc3c <rx_arp+0x200>
        ifp->state = MG_TCPIP_STATE_READY;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2204      	movs	r2, #4
 800dba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7ff fb95 	bl	800d2d8 <onstatechange>
 800dbae:	e045      	b.n	800dc3c <rx_arp+0x200>
      }
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	6839      	ldr	r1, [r7, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff fecd 	bl	800d958 <getpeer>
 800dbbe:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d03a      	beq.n	800dc3c <rx_arp+0x200>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800dbcc:	f003 0310 	and.w	r3, r3, #16
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d032      	beq.n	800dc3c <rx_arp+0x200>
        struct connstate *s = (struct connstate *) (c + 1);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	33b0      	adds	r3, #176	@ 0xb0
 800dbda:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f103 001a 	add.w	r0, r3, #26
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	699b      	ldr	r3, [r3, #24]
 800dbe6:	3308      	adds	r3, #8
 800dbe8:	2206      	movs	r2, #6
 800dbea:	4619      	mov	r1, r3
 800dbec:	f015 ff0d 	bl	8023a0a <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800dbf0:	4b14      	ldr	r3, [pc, #80]	@ (800dc44 <rx_arp+0x208>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	dd15      	ble.n	800dc24 <rx_arp+0x1e8>
 800dbf8:	4b13      	ldr	r3, [pc, #76]	@ (800dc48 <rx_arp+0x20c>)
 800dbfa:	f241 12c1 	movw	r2, #4545	@ 0x11c1
 800dbfe:	4913      	ldr	r1, [pc, #76]	@ (800dc4c <rx_arp+0x210>)
 800dc00:	2003      	movs	r0, #3
 800dc02:	f7fe fc17 	bl	800c434 <mg_log_prefix>
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	f103 021c 	add.w	r2, r3, #28
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	331a      	adds	r3, #26
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	4b0e      	ldr	r3, [pc, #56]	@ (800dc50 <rx_arp+0x214>)
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	4a0d      	ldr	r2, [pc, #52]	@ (800dc54 <rx_arp+0x218>)
 800dc1e:	480f      	ldr	r0, [pc, #60]	@ (800dc5c <rx_arp+0x220>)
 800dc20:	f7fe fc58 	bl	800c4d4 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800dc2a:	f023 0310 	bic.w	r3, r3, #16
 800dc2e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
        mac_resolved(c);
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f002 fa69 	bl	801010a <mac_resolved>
 800dc38:	e000      	b.n	800dc3c <rx_arp+0x200>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800dc3a:	bf00      	nop
      }
    }
  }
}
 800dc3c:	3718      	adds	r7, #24
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bdb0      	pop	{r4, r5, r7, pc}
 800dc42:	bf00      	nop
 800dc44:	24000258 	.word	0x24000258
 800dc48:	080280e0 	.word	0x080280e0
 800dc4c:	08024478 	.word	0x08024478
 800dc50:	08010bbd 	.word	0x08010bbd
 800dc54:	08010af9 	.word	0x08010af9
 800dc58:	0802568c 	.word	0x0802568c
 800dc5c:	080256a4 	.word	0x080256a4

0800dc60 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b08a      	sub	sp, #40	@ 0x28
 800dc64:	af02      	add	r7, sp, #8
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	2b08      	cmp	r3, #8
 800dc72:	d14d      	bne.n	800dd10 <rx_icmp+0xb0>
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	69db      	ldr	r3, [r3, #28]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d049      	beq.n	800dd10 <rx_icmp+0xb0>
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	69db      	ldr	r3, [r3, #28]
 800dc80:	691a      	ldr	r2, [r3, #16]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	429a      	cmp	r2, r3
 800dc88:	d142      	bne.n	800dd10 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800dc8a:	2326      	movs	r3, #38	@ 0x26
 800dc8c:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	699a      	ldr	r2, [r3, #24]
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	617b      	str	r3, [r7, #20]
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800dc9e:	69fa      	ldr	r2, [r7, #28]
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d901      	bls.n	800dcaa <rx_icmp+0x4a>
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	1d99      	adds	r1, r3, #6
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6898      	ldr	r0, [r3, #8]
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	69db      	ldr	r3, [r3, #28]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	69fa      	ldr	r2, [r7, #28]
 800dcbc:	3204      	adds	r2, #4
 800dcbe:	9201      	str	r2, [sp, #4]
 800dcc0:	9300      	str	r3, [sp, #0]
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7ff fbb0 	bl	800d42c <tx_ip>
 800dccc:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	3314      	adds	r3, #20
 800dcd2:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f015 fd60 	bl	802379e <memset>
    memcpy(icmp + 1, pkt->pay.buf, plen);  // Copy RX payload to TX
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	1d18      	adds	r0, r3, #4
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	689b      	ldr	r3, [r3, #8]
 800dce6:	69fa      	ldr	r2, [r7, #28]
 800dce8:	4619      	mov	r1, r3
 800dcea:	f015 fe8e 	bl	8023a0a <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	68f8      	ldr	r0, [r7, #12]
 800dcf6:	f7ff f9f3 	bl	800d0e0 <ipcsum>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800dd02:	69ba      	ldr	r2, [r7, #24]
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	4413      	add	r3, r2
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7ff fa60 	bl	800d1d0 <ether_output>
  }
}
 800dd10:	bf00      	nop
 800dd12:	3720      	adds	r7, #32
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800dd18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd1c:	b090      	sub	sp, #64	@ 0x40
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	60f8      	str	r0, [r7, #12]
 800dd22:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0, dns = 0, sntp = 0;
 800dd24:	2300      	movs	r3, #0
 800dd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd28:	2300      	movs	r3, #0
 800dd2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd30:	2300      	movs	r3, #0
 800dd32:	623b      	str	r3, [r7, #32]
 800dd34:	2300      	movs	r3, #0
 800dd36:	61fb      	str	r3, [r7, #28]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd50:	33f0      	adds	r3, #240	@ 0xf0
 800dd52:	637b      	str	r3, [r7, #52]	@ 0x34
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800dd54:	68bb      	ldr	r3, [r7, #8]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	4413      	add	r3, r2
 800dd5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd64:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800dd68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	f0c0 81ac 	bcc.w	800e0c8 <rx_dhcp_client+0x3b0>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd74:	1d18      	adds	r0, r3, #4
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	3302      	adds	r3, #2
 800dd7a:	2204      	movs	r2, #4
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	f015 fce4 	bl	802374a <memcmp>
 800dd82:	4603      	mov	r3, r0
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	f040 81a1 	bne.w	800e0cc <rx_dhcp_client+0x3b4>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800dd8a:	e08a      	b.n	800dea2 <rx_dhcp_client+0x18a>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800dd8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d10e      	bne.n	800ddb2 <rx_dhcp_client+0x9a>
 800dd94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd96:	3301      	adds	r3, #1
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	2b04      	cmp	r3, #4
 800dd9c:	d109      	bne.n	800ddb2 <rx_dhcp_client+0x9a>
 800dd9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dda0:	3306      	adds	r3, #6
 800dda2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d904      	bls.n	800ddb2 <rx_dhcp_client+0x9a>
      memcpy(&mask, p + 2, sizeof(mask));
 800dda8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddaa:	3302      	adds	r3, #2
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddb0:	e070      	b.n	800de94 <rx_dhcp_client+0x17c>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800ddb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b03      	cmp	r3, #3
 800ddb8:	d112      	bne.n	800dde0 <rx_dhcp_client+0xc8>
 800ddba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	2b04      	cmp	r3, #4
 800ddc2:	d10d      	bne.n	800dde0 <rx_dhcp_client+0xc8>
 800ddc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddc6:	3306      	adds	r3, #6
 800ddc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d908      	bls.n	800dde0 <rx_dhcp_client+0xc8>
      memcpy(&gw, p + 2, sizeof(gw));
 800ddce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddd0:	3302      	adds	r3, #2
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      ip = pkt->dhcp->yiaddr;
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddda:	691b      	ldr	r3, [r3, #16]
 800dddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddde:	e059      	b.n	800de94 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	7fdb      	ldrb	r3, [r3, #31]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d012      	beq.n	800de0e <rx_dhcp_client+0xf6>
 800dde8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	2b06      	cmp	r3, #6
 800ddee:	d10e      	bne.n	800de0e <rx_dhcp_client+0xf6>
 800ddf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	2b04      	cmp	r3, #4
 800ddf8:	d109      	bne.n	800de0e <rx_dhcp_client+0xf6>
               p + 6 < end) {  // DNS
 800ddfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddfc:	3306      	adds	r3, #6
    } else if (ifp->enable_req_dns && p[0] == 6 && p[1] == sizeof(dns) &&
 800ddfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de00:	429a      	cmp	r2, r3
 800de02:	d904      	bls.n	800de0e <rx_dhcp_client+0xf6>
      memcpy(&dns, p + 2, sizeof(dns));
 800de04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de06:	3302      	adds	r3, #2
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	61fb      	str	r3, [r7, #28]
 800de0c:	e042      	b.n	800de94 <rx_dhcp_client+0x17c>
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f893 3020 	ldrb.w	r3, [r3, #32]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d012      	beq.n	800de3e <rx_dhcp_client+0x126>
 800de18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800de1e:	d10e      	bne.n	800de3e <rx_dhcp_client+0x126>
 800de20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de22:	3301      	adds	r3, #1
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	2b04      	cmp	r3, #4
 800de28:	d109      	bne.n	800de3e <rx_dhcp_client+0x126>
               p + 6 < end) {  // SNTP
 800de2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de2c:	3306      	adds	r3, #6
    } else if (ifp->enable_req_sntp && p[0] == 42 && p[1] == sizeof(sntp) &&
 800de2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de30:	429a      	cmp	r2, r3
 800de32:	d904      	bls.n	800de3e <rx_dhcp_client+0x126>
      memcpy(&sntp, p + 2, sizeof(sntp));
 800de34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de36:	3302      	adds	r3, #2
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	61bb      	str	r3, [r7, #24]
 800de3c:	e02a      	b.n	800de94 <rx_dhcp_client+0x17c>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800de3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2b33      	cmp	r3, #51	@ 0x33
 800de44:	d114      	bne.n	800de70 <rx_dhcp_client+0x158>
 800de46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de48:	3301      	adds	r3, #1
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	2b04      	cmp	r3, #4
 800de4e:	d10f      	bne.n	800de70 <rx_dhcp_client+0x158>
 800de50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de52:	3306      	adds	r3, #6
 800de54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de56:	429a      	cmp	r2, r3
 800de58:	d90a      	bls.n	800de70 <rx_dhcp_client+0x158>
      memcpy(&lease, p + 2, sizeof(lease));
 800de5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de5c:	3302      	adds	r3, #2
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	623b      	str	r3, [r7, #32]
      lease = mg_ntohl(lease);
 800de62:	6a3b      	ldr	r3, [r7, #32]
 800de64:	4618      	mov	r0, r3
 800de66:	f011 fbe2 	bl	801f62e <mg_ntohl>
 800de6a:	4603      	mov	r3, r0
 800de6c:	623b      	str	r3, [r7, #32]
 800de6e:	e011      	b.n	800de94 <rx_dhcp_client+0x17c>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800de70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	2b35      	cmp	r3, #53	@ 0x35
 800de76:	d10d      	bne.n	800de94 <rx_dhcp_client+0x17c>
 800de78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de7a:	3301      	adds	r3, #1
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d108      	bne.n	800de94 <rx_dhcp_client+0x17c>
 800de82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de84:	3306      	adds	r3, #6
 800de86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800de88:	429a      	cmp	r2, r3
 800de8a:	d903      	bls.n	800de94 <rx_dhcp_client+0x17c>
      msgtype = p[2];
 800de8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de8e:	789b      	ldrb	r3, [r3, #2]
 800de90:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }
    p += p[1] + 2;
 800de94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de96:	3301      	adds	r3, #1
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	3302      	adds	r3, #2
 800de9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800de9e:	4413      	add	r3, r2
 800dea0:	637b      	str	r3, [r7, #52]	@ 0x34
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800dea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dea4:	3301      	adds	r3, #1
 800dea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d904      	bls.n	800deb6 <rx_dhcp_client+0x19e>
 800deac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	2bff      	cmp	r3, #255	@ 0xff
 800deb2:	f47f af6b 	bne.w	800dd8c <rx_dhcp_client+0x74>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800deb6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800deba:	2b06      	cmp	r3, #6
 800debc:	d10c      	bne.n	800ded8 <rx_dhcp_client+0x1c0>
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	689b      	ldr	r3, [r3, #8]
 800dec2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d107      	bne.n	800ded8 <rx_dhcp_client+0x1c0>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2200      	movs	r2, #0
 800ded4:	609a      	str	r2, [r3, #8]
 800ded6:	e0ec      	b.n	800e0b2 <rx_dhcp_client+0x39a>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800ded8:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800dedc:	2b02      	cmp	r3, #2
 800dede:	d123      	bne.n	800df28 <rx_dhcp_client+0x210>
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d11e      	bne.n	800df28 <rx_dhcp_client+0x210>
 800deea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deec:	2b00      	cmp	r3, #0
 800deee:	d01b      	beq.n	800df28 <rx_dhcp_client+0x210>
 800def0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800def2:	2b00      	cmp	r3, #0
 800def4:	d018      	beq.n	800df28 <rx_dhcp_client+0x210>
 800def6:	6a3b      	ldr	r3, [r7, #32]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d015      	beq.n	800df28 <rx_dhcp_client+0x210>
             lease) {  // DHCPOFFER
    // select IP, (4.4.1) (fallback to IP source addr on foul play)
    tx_dhcp_request_sel(ifp, ip,
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df00:	695b      	ldr	r3, [r3, #20]
    tx_dhcp_request_sel(ifp, ip,
 800df02:	2b00      	cmp	r3, #0
 800df04:	d003      	beq.n	800df0e <rx_dhcp_client+0x1f6>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tx_dhcp_request_sel(ifp, ip,
 800df0a:	695b      	ldr	r3, [r3, #20]
 800df0c:	e002      	b.n	800df14 <rx_dhcp_client+0x1fc>
                        pkt->dhcp->siaddr ? pkt->dhcp->siaddr : pkt->ip->src);
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	69db      	ldr	r3, [r3, #28]
    tx_dhcp_request_sel(ifp, ip,
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	461a      	mov	r2, r3
 800df16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f7ff fbd7 	bl	800d6cc <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;  // REQUESTING state
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2202      	movs	r2, #2
 800df22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800df26:	e0c4      	b.n	800e0b2 <rx_dhcp_client+0x39a>
  } else if (msgtype == 5) {          // DHCPACK
 800df28:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800df2c:	2b05      	cmp	r3, #5
 800df2e:	f040 80c0 	bne.w	800e0b2 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800df38:	2b02      	cmp	r3, #2
 800df3a:	f040 8081 	bne.w	800e040 <rx_dhcp_client+0x328>
 800df3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df40:	2b00      	cmp	r3, #0
 800df42:	d07d      	beq.n	800e040 <rx_dhcp_client+0x328>
 800df44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df46:	2b00      	cmp	r3, #0
 800df48:	d07a      	beq.n	800e040 <rx_dhcp_client+0x328>
 800df4a:	6a3b      	ldr	r3, [r7, #32]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d077      	beq.n	800e040 <rx_dhcp_client+0x328>
      ifp->lease_expire = ifp->now + lease * 1000;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800df56:	6a39      	ldr	r1, [r7, #32]
 800df58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800df5c:	fb00 f101 	mul.w	r1, r0, r1
 800df60:	2000      	movs	r0, #0
 800df62:	4688      	mov	r8, r1
 800df64:	4681      	mov	r9, r0
 800df66:	eb12 0108 	adds.w	r1, r2, r8
 800df6a:	6039      	str	r1, [r7, #0]
 800df6c:	eb43 0309 	adc.w	r3, r3, r9
 800df70:	607b      	str	r3, [r7, #4]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	e9d7 1200 	ldrd	r1, r2, [r7]
 800df78:	e9c3 121a 	strd	r1, r2, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800df7c:	4b56      	ldr	r3, [pc, #344]	@ (800e0d8 <rx_dhcp_client+0x3c0>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	2b01      	cmp	r3, #1
 800df82:	dd16      	ble.n	800dfb2 <rx_dhcp_client+0x29a>
 800df84:	4b55      	ldr	r3, [pc, #340]	@ (800e0dc <rx_dhcp_client+0x3c4>)
 800df86:	f241 2202 	movw	r2, #4610	@ 0x1202
 800df8a:	4955      	ldr	r1, [pc, #340]	@ (800e0e0 <rx_dhcp_client+0x3c8>)
 800df8c:	2002      	movs	r0, #2
 800df8e:	f7fe fa51 	bl	800c434 <mg_log_prefix>
 800df92:	6a3c      	ldr	r4, [r7, #32]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800df9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800df9e:	f04f 0300 	mov.w	r3, #0
 800dfa2:	f7f2 fa1d 	bl	80003e0 <__aeabi_uldivmod>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	4621      	mov	r1, r4
 800dfac:	484d      	ldr	r0, [pc, #308]	@ (800e0e4 <rx_dhcp_client+0x3cc>)
 800dfae:	f7fe fa91 	bl	800c4d4 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	691b      	ldr	r3, [r3, #16]
 800dfbc:	3306      	adds	r3, #6
 800dfbe:	2206      	movs	r2, #6
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	f015 fd22 	bl	8023a0a <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dfca:	609a      	str	r2, [r3, #8]
 800dfcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	611a      	str	r2, [r3, #16]
 800dfd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_IP;  // BOUND state
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2203      	movs	r2, #3
 800dfdc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800dfe0:	f107 0310 	add.w	r3, r7, #16
 800dfe4:	2108      	movs	r1, #8
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	f7f2 fb90 	bl	800070c <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800dfec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dff0:	4614      	mov	r4, r2
 800dff2:	f7f2 fbb9 	bl	8000768 <mg_millis>
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	4613      	mov	r3, r2
 800dffc:	4423      	add	r3, r4
 800dffe:	4618      	mov	r0, r3
 800e000:	f015 f9d2 	bl	80233a8 <srand>
      if (ifp->enable_req_dns && dns != 0)
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	7fdb      	ldrb	r3, [r3, #31]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d009      	beq.n	800e020 <rx_dhcp_client+0x308>
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d006      	beq.n	800e020 <rx_dhcp_client+0x308>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_DNS, &dns);
 800e012:	f107 031c 	add.w	r3, r7, #28
 800e016:	461a      	mov	r2, r3
 800e018:	2101      	movs	r1, #1
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7fe ffe8 	bl	800cff0 <mg_tcpip_call>
      if (ifp->enable_req_sntp && sntp != 0)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d042      	beq.n	800e0b0 <rx_dhcp_client+0x398>
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d03f      	beq.n	800e0b0 <rx_dhcp_client+0x398>
        mg_tcpip_call(ifp, MG_TCPIP_EV_DHCP_SNTP, &sntp);
 800e030:	f107 0318 	add.w	r3, r7, #24
 800e034:	461a      	mov	r2, r3
 800e036:	2102      	movs	r1, #2
 800e038:	68f8      	ldr	r0, [r7, #12]
 800e03a:	f7fe ffd9 	bl	800cff0 <mg_tcpip_call>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800e03e:	e037      	b.n	800e0b0 <rx_dhcp_client+0x398>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e046:	2b04      	cmp	r3, #4
 800e048:	d133      	bne.n	800e0b2 <rx_dhcp_client+0x39a>
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e050:	429a      	cmp	r2, r3
 800e052:	d12e      	bne.n	800e0b2 <rx_dhcp_client+0x39a>
      ifp->lease_expire = ifp->now + lease * 1000;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800e05a:	6a39      	ldr	r1, [r7, #32]
 800e05c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e060:	fb00 f101 	mul.w	r1, r0, r1
 800e064:	2000      	movs	r0, #0
 800e066:	460c      	mov	r4, r1
 800e068:	4605      	mov	r5, r0
 800e06a:	eb12 0a04 	adds.w	sl, r2, r4
 800e06e:	eb43 0b05 	adc.w	fp, r3, r5
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	e9c3 ab1a 	strd	sl, fp, [r3, #104]	@ 0x68
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800e078:	4b17      	ldr	r3, [pc, #92]	@ (800e0d8 <rx_dhcp_client+0x3c0>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b01      	cmp	r3, #1
 800e07e:	dd18      	ble.n	800e0b2 <rx_dhcp_client+0x39a>
 800e080:	4b16      	ldr	r3, [pc, #88]	@ (800e0dc <rx_dhcp_client+0x3c4>)
 800e082:	f241 2210 	movw	r2, #4624	@ 0x1210
 800e086:	4916      	ldr	r1, [pc, #88]	@ (800e0e0 <rx_dhcp_client+0x3c8>)
 800e088:	2002      	movs	r0, #2
 800e08a:	f7fe f9d3 	bl	800c434 <mg_log_prefix>
 800e08e:	6a3c      	ldr	r4, [r7, #32]
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800e096:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e09a:	f04f 0300 	mov.w	r3, #0
 800e09e:	f7f2 f99f 	bl	80003e0 <__aeabi_uldivmod>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	480e      	ldr	r0, [pc, #56]	@ (800e0e4 <rx_dhcp_client+0x3cc>)
 800e0aa:	f7fe fa13 	bl	800c4d4 <mg_log>
 800e0ae:	e000      	b.n	800e0b2 <rx_dhcp_client+0x39a>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800e0b0:	bf00      	nop
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e0b8:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d006      	beq.n	800e0ce <rx_dhcp_client+0x3b6>
 800e0c0:	68f8      	ldr	r0, [r7, #12]
 800e0c2:	f7ff f909 	bl	800d2d8 <onstatechange>
 800e0c6:	e002      	b.n	800e0ce <rx_dhcp_client+0x3b6>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800e0c8:	bf00      	nop
 800e0ca:	e000      	b.n	800e0ce <rx_dhcp_client+0x3b6>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800e0cc:	bf00      	nop
}
 800e0ce:	3740      	adds	r7, #64	@ 0x40
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0d6:	bf00      	nop
 800e0d8:	24000258 	.word	0x24000258
 800e0dc:	080280e8 	.word	0x080280e8
 800e0e0:	08024478 	.word	0x08024478
 800e0e4:	080256c0 	.word	0x080256c0

0800e0e8 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800e0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ec:	b0d8      	sub	sp, #352	@ 0x160
 800e0ee:	af04      	add	r7, sp, #16
 800e0f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e0f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e0f8:	6018      	str	r0, [r3, #0]
 800e0fa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e0fe:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e102:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800e104:	2300      	movs	r3, #0
 800e106:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
 800e10a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e10e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e116:	33f0      	adds	r3, #240	@ 0xf0
 800e118:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
          *end = (uint8_t *) &pkt->raw.buf[pkt->raw.len];
 800e11c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e120:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e12c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	4413      	add	r3, r2
 800e136:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800e13a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e13e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e146:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800e14a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800e14e:	429a      	cmp	r2, r3
 800e150:	f0c0 81b0 	bcc.w	800e4b4 <rx_dhcp_server+0x3cc>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800e154:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e158:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e15c:	4ad8      	ldr	r2, [pc, #864]	@ (800e4c0 <rx_dhcp_server+0x3d8>)
 800e15e:	4618      	mov	r0, r3
 800e160:	4611      	mov	r1, r2
 800e162:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800e166:	461a      	mov	r2, r3
 800e168:	f015 fc4f 	bl	8023a0a <memcpy>
  res.yiaddr = ifp->ip;
 800e16c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e170:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	689a      	ldr	r2, [r3, #8]
 800e178:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e17c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e180:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800e182:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e186:	3310      	adds	r3, #16
 800e188:	3303      	adds	r3, #3
 800e18a:	781a      	ldrb	r2, [r3, #0]
 800e18c:	3201      	adds	r2, #1
 800e18e:	b2d2      	uxtb	r2, r2
 800e190:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800e192:	e020      	b.n	800e1d6 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800e194:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e198:	781b      	ldrb	r3, [r3, #0]
 800e19a:	2b35      	cmp	r3, #53	@ 0x35
 800e19c:	d111      	bne.n	800e1c2 <rx_dhcp_server+0xda>
 800e19e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d10b      	bne.n	800e1c2 <rx_dhcp_server+0xda>
 800e1aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e1ae:	3302      	adds	r3, #2
 800e1b0:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d904      	bls.n	800e1c2 <rx_dhcp_server+0xda>
      op = p[2];
 800e1b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e1bc:	789b      	ldrb	r3, [r3, #2]
 800e1be:	f887 314f 	strb.w	r3, [r7, #335]	@ 0x14f
    }
    p += p[1] + 2;
 800e1c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	3302      	adds	r3, #2
 800e1cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800e1d0:	4413      	add	r3, r2
 800e1d2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800e1d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e1da:	3301      	adds	r3, #1
 800e1dc:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d904      	bls.n	800e1ee <rx_dhcp_server+0x106>
 800e1e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2bff      	cmp	r3, #255	@ 0xff
 800e1ec:	d1d2      	bne.n	800e194 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800e1ee:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d004      	beq.n	800e200 <rx_dhcp_server+0x118>
 800e1f6:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800e1fa:	2b03      	cmp	r3, #3
 800e1fc:	f040 815b 	bne.w	800e4b6 <rx_dhcp_server+0x3ce>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800e200:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800e204:	2b01      	cmp	r3, #1
 800e206:	d101      	bne.n	800e20c <rx_dhcp_server+0x124>
 800e208:	2302      	movs	r3, #2
 800e20a:	e000      	b.n	800e20e <rx_dhcp_server+0x126>
 800e20c:	2305      	movs	r3, #5
 800e20e:	f887 3143 	strb.w	r3, [r7, #323]	@ 0x143
    uint8_t opts[] = {
 800e212:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e216:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e21a:	2235      	movs	r2, #53	@ 0x35
 800e21c:	701a      	strb	r2, [r3, #0]
 800e21e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e222:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e226:	2201      	movs	r2, #1
 800e228:	705a      	strb	r2, [r3, #1]
 800e22a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e22e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e232:	f897 2143 	ldrb.w	r2, [r7, #323]	@ 0x143
 800e236:	709a      	strb	r2, [r3, #2]
 800e238:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e23c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e240:	2201      	movs	r2, #1
 800e242:	70da      	strb	r2, [r3, #3]
 800e244:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e248:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e24c:	2204      	movs	r2, #4
 800e24e:	711a      	strb	r2, [r3, #4]
 800e250:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e254:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e258:	2200      	movs	r2, #0
 800e25a:	715a      	strb	r2, [r3, #5]
 800e25c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e260:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e264:	2200      	movs	r2, #0
 800e266:	719a      	strb	r2, [r3, #6]
 800e268:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e26c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e270:	2200      	movs	r2, #0
 800e272:	71da      	strb	r2, [r3, #7]
 800e274:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e278:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e27c:	2200      	movs	r2, #0
 800e27e:	721a      	strb	r2, [r3, #8]
 800e280:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e284:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e288:	2236      	movs	r2, #54	@ 0x36
 800e28a:	725a      	strb	r2, [r3, #9]
 800e28c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e290:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e294:	2204      	movs	r2, #4
 800e296:	729a      	strb	r2, [r3, #10]
 800e298:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e29c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	72da      	strb	r2, [r3, #11]
 800e2a4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2a8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	731a      	strb	r2, [r3, #12]
 800e2b0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2b4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	735a      	strb	r2, [r3, #13]
 800e2bc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2c0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	739a      	strb	r2, [r3, #14]
 800e2c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2cc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2d0:	220c      	movs	r2, #12
 800e2d2:	73da      	strb	r2, [r3, #15]
 800e2d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2d8:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2dc:	2203      	movs	r2, #3
 800e2de:	741a      	strb	r2, [r3, #16]
 800e2e0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2e4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2e8:	226d      	movs	r2, #109	@ 0x6d
 800e2ea:	745a      	strb	r2, [r3, #17]
 800e2ec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2f0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e2f4:	2269      	movs	r2, #105	@ 0x69
 800e2f6:	749a      	strb	r2, [r3, #18]
 800e2f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e2fc:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e300:	2270      	movs	r2, #112	@ 0x70
 800e302:	74da      	strb	r2, [r3, #19]
 800e304:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e308:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e30c:	2233      	movs	r2, #51	@ 0x33
 800e30e:	751a      	strb	r2, [r3, #20]
 800e310:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e314:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e318:	2204      	movs	r2, #4
 800e31a:	755a      	strb	r2, [r3, #21]
 800e31c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e320:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e324:	22ff      	movs	r2, #255	@ 0xff
 800e326:	759a      	strb	r2, [r3, #22]
 800e328:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e32c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e330:	22ff      	movs	r2, #255	@ 0xff
 800e332:	75da      	strb	r2, [r3, #23]
 800e334:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e338:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e33c:	22ff      	movs	r2, #255	@ 0xff
 800e33e:	761a      	strb	r2, [r3, #24]
 800e340:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e344:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e348:	22ff      	movs	r2, #255	@ 0xff
 800e34a:	765a      	strb	r2, [r3, #25]
 800e34c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e350:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800e354:	22ff      	movs	r2, #255	@ 0xff
 800e356:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800e358:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e35c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e364:	f103 011c 	add.w	r1, r3, #28
 800e368:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e36c:	331c      	adds	r3, #28
 800e36e:	2206      	movs	r2, #6
 800e370:	4618      	mov	r0, r3
 800e372:	f015 fb4a 	bl	8023a0a <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800e376:	f107 030c 	add.w	r3, r7, #12
 800e37a:	3305      	adds	r3, #5
 800e37c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800e380:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800e384:	6812      	ldr	r2, [r2, #0]
 800e386:	320c      	adds	r2, #12
 800e388:	6812      	ldr	r2, [r2, #0]
 800e38a:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800e38c:	f107 030c 	add.w	r3, r7, #12
 800e390:	330b      	adds	r3, #11
 800e392:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800e396:	f5a2 72a6 	sub.w	r2, r2, #332	@ 0x14c
 800e39a:	6812      	ldr	r2, [r2, #0]
 800e39c:	3208      	adds	r2, #8
 800e39e:	6812      	ldr	r2, [r2, #0]
 800e3a0:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800e3a2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e3a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e3aa:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800e3ae:	f5a2 72a2 	sub.w	r2, r2, #324	@ 0x144
 800e3b2:	f103 04f0 	add.w	r4, r3, #240	@ 0xf0
 800e3b6:	4615      	mov	r5, r2
 800e3b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e3c0:	c403      	stmia	r4!, {r0, r1}
 800e3c2:	8022      	strh	r2, [r4, #0]
 800e3c4:	3402      	adds	r4, #2
 800e3c6:	0c13      	lsrs	r3, r2, #16
 800e3c8:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800e3ca:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e3ce:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3d6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
 800e3da:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e3de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e3e2:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
    res.xid = pkt->dhcp->xid;
 800e3e6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e3ea:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3f2:	685a      	ldr	r2, [r3, #4]
 800e3f4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e3f8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e3fc:	605a      	str	r2, [r3, #4]
    if (ifp->enable_get_gateway) {
 800e3fe:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e402:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	7f9b      	ldrb	r3, [r3, #30]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d01c      	beq.n	800e448 <rx_dhcp_server+0x360>
      ifp->gw = res.yiaddr;  // set gw IP, best-effort gwmac as DHCP server's
 800e40e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e412:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e416:	691a      	ldr	r2, [r3, #16]
 800e418:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e41c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	611a      	str	r2, [r3, #16]
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800e424:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e428:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f103 0052 	add.w	r0, r3, #82	@ 0x52
 800e432:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e436:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	691b      	ldr	r3, [r3, #16]
 800e43e:	3306      	adds	r3, #6
 800e440:	2206      	movs	r2, #6
 800e442:	4619      	mov	r1, r3
 800e444:	f015 fae1 	bl	8023a0a <memcpy>
    }
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800e448:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e44c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	691b      	ldr	r3, [r3, #16]
 800e454:	1d9d      	adds	r5, r3, #6
 800e456:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e45a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	689e      	ldr	r6, [r3, #8]
 800e462:	2043      	movs	r0, #67	@ 0x43
 800e464:	f011 f8cc 	bl	801f600 <mg_ntohs>
 800e468:	4603      	mov	r3, r0
 800e46a:	4698      	mov	r8, r3
 800e46c:	f897 314f 	ldrb.w	r3, [r7, #335]	@ 0x14f
 800e470:	2b01      	cmp	r3, #1
 800e472:	d005      	beq.n	800e480 <rx_dhcp_server+0x398>
 800e474:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e478:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e47c:	691c      	ldr	r4, [r3, #16]
 800e47e:	e001      	b.n	800e484 <rx_dhcp_server+0x39c>
 800e480:	f04f 34ff 	mov.w	r4, #4294967295
 800e484:	2044      	movs	r0, #68	@ 0x44
 800e486:	f011 f8bb 	bl	801f600 <mg_ntohs>
 800e48a:	4603      	mov	r3, r0
 800e48c:	461a      	mov	r2, r3
 800e48e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800e492:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 800e496:	f44f 738d 	mov.w	r3, #282	@ 0x11a
 800e49a:	9303      	str	r3, [sp, #12]
 800e49c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4a0:	9302      	str	r3, [sp, #8]
 800e4a2:	9201      	str	r2, [sp, #4]
 800e4a4:	9400      	str	r4, [sp, #0]
 800e4a6:	4643      	mov	r3, r8
 800e4a8:	4632      	mov	r2, r6
 800e4aa:	4629      	mov	r1, r5
 800e4ac:	6800      	ldr	r0, [r0, #0]
 800e4ae:	f7ff f814 	bl	800d4da <tx_udp>
 800e4b2:	e000      	b.n	800e4b6 <rx_dhcp_server+0x3ce>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800e4b4:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800e4b6:	f507 77a8 	add.w	r7, r7, #336	@ 0x150
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4c0:	080256d8 	.word	0x080256d8

0800e4c4 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
 800e4cc:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4d2:	2201      	movs	r2, #1
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7ff fa3e 	bl	800d958 <getpeer>
 800e4dc:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d059      	beq.n	800e598 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	859a      	strh	r2, [r3, #44]	@ 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	331c      	adds	r3, #28
 800e4f4:	683a      	ldr	r2, [r7, #0]
 800e4f6:	69d2      	ldr	r2, [r2, #28]
 800e4f8:	320c      	adds	r2, #12
 800e4fa:	6812      	ldr	r2, [r2, #0]
 800e4fc:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	33b0      	adds	r3, #176	@ 0xb0
 800e502:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	f103 001a 	add.w	r0, r3, #26
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	691b      	ldr	r3, [r3, #16]
 800e50e:	3306      	adds	r3, #6
 800e510:	2206      	movs	r2, #6
 800e512:	4619      	mov	r1, r3
 800e514:	f015 fa79 	bl	8023a0a <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e51c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800e520:	d304      	bcc.n	800e52c <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800e522:	491f      	ldr	r1, [pc, #124]	@ (800e5a0 <rx_udp+0xdc>)
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f7f8 fa75 	bl	8006a14 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800e52a:	e035      	b.n	800e598 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e534:	1ad2      	subs	r2, r2, r3
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	68db      	ldr	r3, [r3, #12]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d212      	bcs.n	800e564 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	4413      	add	r3, r2
 800e54e:	4619      	mov	r1, r3
 800e550:	f7fc ffc6 	bl	800b4e0 <mg_iobuf_resize>
 800e554:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800e556:	2b00      	cmp	r3, #0
 800e558:	d104      	bne.n	800e564 <rx_udp+0xa0>
      mg_error(c, "oom");
 800e55a:	4912      	ldr	r1, [pc, #72]	@ (800e5a4 <rx_udp+0xe0>)
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f7f8 fa59 	bl	8006a14 <mg_error>
}
 800e562:	e019      	b.n	800e598 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.buf, pkt->pay.len);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e56c:	18d0      	adds	r0, r2, r3
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	6899      	ldr	r1, [r3, #8]
 800e572:	683b      	ldr	r3, [r7, #0]
 800e574:	68db      	ldr	r3, [r3, #12]
 800e576:	461a      	mov	r2, r3
 800e578:	f015 fa47 	bl	8023a0a <memcpy>
      c->recv.len += pkt->pay.len;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	68db      	ldr	r3, [r3, #12]
 800e584:	441a      	add	r2, r3
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	641a      	str	r2, [r3, #64]	@ 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	330c      	adds	r3, #12
 800e58e:	461a      	mov	r2, r3
 800e590:	2107      	movs	r1, #7
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f7f8 fa1d 	bl	80069d2 <mg_call>
}
 800e598:	bf00      	nop
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}
 800e5a0:	080257f4 	.word	0x080257f4
 800e5a4:	08025810 	.word	0x08025810

0800e5a8 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800e5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5aa:	b091      	sub	sp, #68	@ 0x44
 800e5ac:	af06      	add	r7, sp, #24
 800e5ae:	60f8      	str	r0, [r7, #12]
 800e5b0:	60b9      	str	r1, [r7, #8]
 800e5b2:	607a      	str	r2, [r7, #4]
 800e5b4:	70fb      	strb	r3, [r7, #3]
  struct ip *ip;
  struct tcp *tcp;
  uint16_t opts[4 / 2];
  if (flags & TH_SYN) {                 // Send MSS, RFC-9293 3.7.1
 800e5b6:	78fb      	ldrb	r3, [r7, #3]
 800e5b8:	f003 0302 	and.w	r3, r3, #2
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d014      	beq.n	800e5ea <tx_tcp+0x42>
    opts[0] = mg_htons(0x0204);         // RFC-9293 3.2
 800e5c0:	f44f 7001 	mov.w	r0, #516	@ 0x204
 800e5c4:	f011 f81c 	bl	801f600 <mg_ntohs>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	82bb      	strh	r3, [r7, #20]
    opts[1] = mg_htons(ifp->mtu - 40);  // RFC-6691
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e5d2:	3b28      	subs	r3, #40	@ 0x28
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f011 f812 	bl	801f600 <mg_ntohs>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	82fb      	strh	r3, [r7, #22]
    buf = opts;
 800e5e0:	f107 0314 	add.w	r3, r7, #20
 800e5e4:	653b      	str	r3, [r7, #80]	@ 0x50
    len = sizeof(opts);
 800e5e6:	2304      	movs	r3, #4
 800e5e8:	657b      	str	r3, [r7, #84]	@ 0x54
  }
  ip = tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	689a      	ldr	r2, [r3, #8]
 800e5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5f0:	3314      	adds	r3, #20
 800e5f2:	9301      	str	r3, [sp, #4]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	2206      	movs	r2, #6
 800e5fc:	68b9      	ldr	r1, [r7, #8]
 800e5fe:	68f8      	ldr	r0, [r7, #12]
 800e600:	f7fe ff14 	bl	800d42c <tx_ip>
 800e604:	6278      	str	r0, [r7, #36]	@ 0x24
  tcp = (struct tcp *) (ip + 1);
 800e606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e608:	3314      	adds	r3, #20
 800e60a:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800e60c:	2214      	movs	r2, #20
 800e60e:	2100      	movs	r1, #0
 800e610:	6a38      	ldr	r0, [r7, #32]
 800e612:	f015 f8c4 	bl	802379e <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800e616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d009      	beq.n	800e630 <tx_tcp+0x88>
 800e61c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d006      	beq.n	800e630 <tx_tcp+0x88>
 800e622:	6a3b      	ldr	r3, [r7, #32]
 800e624:	3314      	adds	r3, #20
 800e626:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e628:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e62a:	4618      	mov	r0, r3
 800e62c:	f015 f89d 	bl	802376a <memmove>
  tcp->sport = sport;
 800e630:	6a3b      	ldr	r3, [r7, #32]
 800e632:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800e636:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800e638:	6a3b      	ldr	r3, [r7, #32]
 800e63a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800e63e:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800e640:	6a3b      	ldr	r3, [r7, #32]
 800e642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e644:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800e646:	6a3b      	ldr	r3, [r7, #32]
 800e648:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e64a:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	78fa      	ldrb	r2, [r7, #3]
 800e650:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(MIP_TCP_WIN);
 800e652:	f241 7070 	movw	r0, #6000	@ 0x1770
 800e656:	f010 ffd3 	bl	801f600 <mg_ntohs>
 800e65a:	4603      	mov	r3, r0
 800e65c:	461a      	mov	r2, r3
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800e662:	6a3b      	ldr	r3, [r7, #32]
 800e664:	2250      	movs	r2, #80	@ 0x50
 800e666:	731a      	strb	r2, [r3, #12]
  if (flags & TH_SYN) tcp->off += (uint8_t) (sizeof(opts) / 4 << 4);
 800e668:	78fb      	ldrb	r3, [r7, #3]
 800e66a:	f003 0302 	and.w	r3, r3, #2
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d005      	beq.n	800e67e <tx_tcp+0xd6>
 800e672:	6a3b      	ldr	r3, [r7, #32]
 800e674:	7b1b      	ldrb	r3, [r3, #12]
 800e676:	3310      	adds	r3, #16
 800e678:	b2da      	uxtb	r2, r3
 800e67a:	6a3b      	ldr	r3, [r7, #32]
 800e67c:	731a      	strb	r2, [r3, #12]

  uint32_t cs = 0;
 800e67e:	2300      	movs	r3, #0
 800e680:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800e682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e684:	b29b      	uxth	r3, r3
 800e686:	3314      	adds	r3, #20
 800e688:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800e68a:	2300      	movs	r3, #0
 800e68c:	743b      	strb	r3, [r7, #16]
 800e68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e690:	7a5b      	ldrb	r3, [r3, #9]
 800e692:	747b      	strb	r3, [r7, #17]
 800e694:	8b7b      	ldrh	r3, [r7, #26]
 800e696:	0a1b      	lsrs	r3, r3, #8
 800e698:	b29b      	uxth	r3, r3
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	74bb      	strb	r3, [r7, #18]
 800e69e:	8b7b      	ldrh	r3, [r7, #26]
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	74fb      	strb	r3, [r7, #19]
  cs = csumup(cs, tcp, n);
 800e6a4:	8b7b      	ldrh	r3, [r7, #26]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	6a39      	ldr	r1, [r7, #32]
 800e6aa:	69f8      	ldr	r0, [r7, #28]
 800e6ac:	f7fe fcd2 	bl	800d054 <csumup>
 800e6b0:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b4:	330c      	adds	r3, #12
 800e6b6:	2204      	movs	r2, #4
 800e6b8:	4619      	mov	r1, r3
 800e6ba:	69f8      	ldr	r0, [r7, #28]
 800e6bc:	f7fe fcca 	bl	800d054 <csumup>
 800e6c0:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c4:	3310      	adds	r3, #16
 800e6c6:	2204      	movs	r2, #4
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	69f8      	ldr	r0, [r7, #28]
 800e6cc:	f7fe fcc2 	bl	800d054 <csumup>
 800e6d0:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800e6d2:	f107 0310 	add.w	r3, r7, #16
 800e6d6:	2204      	movs	r2, #4
 800e6d8:	4619      	mov	r1, r3
 800e6da:	69f8      	ldr	r0, [r7, #28]
 800e6dc:	f7fe fcba 	bl	800d054 <csumup>
 800e6e0:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800e6e2:	69f8      	ldr	r0, [r7, #28]
 800e6e4:	f7fe fce1 	bl	800d0aa <csumfin>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	6a3b      	ldr	r3, [r7, #32]
 800e6ee:	821a      	strh	r2, [r3, #16]
  MG_VERBOSE(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800e6f0:	4b21      	ldr	r3, [pc, #132]	@ (800e778 <tx_tcp+0x1d0>)
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	2b03      	cmp	r3, #3
 800e6f6:	dd2c      	ble.n	800e752 <tx_tcp+0x1aa>
 800e6f8:	4b20      	ldr	r3, [pc, #128]	@ (800e77c <tx_tcp+0x1d4>)
 800e6fa:	f241 2275 	movw	r2, #4725	@ 0x1275
 800e6fe:	4920      	ldr	r1, [pc, #128]	@ (800e780 <tx_tcp+0x1d8>)
 800e700:	2004      	movs	r0, #4
 800e702:	f7fd fe97 	bl	800c434 <mg_log_prefix>
 800e706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e708:	f103 050c 	add.w	r5, r3, #12
 800e70c:	6a3b      	ldr	r3, [r7, #32]
 800e70e:	881b      	ldrh	r3, [r3, #0]
 800e710:	b29b      	uxth	r3, r3
 800e712:	4618      	mov	r0, r3
 800e714:	f010 ff74 	bl	801f600 <mg_ntohs>
 800e718:	4603      	mov	r3, r0
 800e71a:	461e      	mov	r6, r3
 800e71c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e71e:	f103 0410 	add.w	r4, r3, #16
 800e722:	6a3b      	ldr	r3, [r7, #32]
 800e724:	885b      	ldrh	r3, [r3, #2]
 800e726:	b29b      	uxth	r3, r3
 800e728:	4618      	mov	r0, r3
 800e72a:	f010 ff69 	bl	801f600 <mg_ntohs>
 800e72e:	4603      	mov	r3, r0
 800e730:	461a      	mov	r2, r3
 800e732:	6a3b      	ldr	r3, [r7, #32]
 800e734:	7b5b      	ldrb	r3, [r3, #13]
 800e736:	4619      	mov	r1, r3
 800e738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e73a:	9304      	str	r3, [sp, #16]
 800e73c:	9103      	str	r1, [sp, #12]
 800e73e:	9202      	str	r2, [sp, #8]
 800e740:	9401      	str	r4, [sp, #4]
 800e742:	4b10      	ldr	r3, [pc, #64]	@ (800e784 <tx_tcp+0x1dc>)
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	4633      	mov	r3, r6
 800e748:	462a      	mov	r2, r5
 800e74a:	490e      	ldr	r1, [pc, #56]	@ (800e784 <tx_tcp+0x1dc>)
 800e74c:	480e      	ldr	r0, [pc, #56]	@ (800e788 <tx_tcp+0x1e0>)
 800e74e:	f7fd fec1 	bl	800c4d4 <mg_log>
              mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst,
              mg_ntohs(tcp->dport), tcp->flags, len));
  // mg_hexdump(ifp->tx.buf, PDIFF(ifp->tx.buf, tcp + 1) + len);
  return ether_output(ifp, PDIFF(ifp->tx.buf, tcp + 1) + len);
 800e752:	6a3b      	ldr	r3, [r7, #32]
 800e754:	f103 0214 	add.w	r2, r3, #20
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	695b      	ldr	r3, [r3, #20]
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	461a      	mov	r2, r3
 800e760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e762:	4413      	add	r3, r2
 800e764:	4619      	mov	r1, r3
 800e766:	68f8      	ldr	r0, [r7, #12]
 800e768:	f7fe fd32 	bl	800d1d0 <ether_output>
 800e76c:	4603      	mov	r3, r0
}
 800e76e:	4618      	mov	r0, r3
 800e770:	372c      	adds	r7, #44	@ 0x2c
 800e772:	46bd      	mov	sp, r7
 800e774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e776:	bf00      	nop
 800e778:	24000258 	.word	0x24000258
 800e77c:	080280f8 	.word	0x080280f8
 800e780:	08024478 	.word	0x08024478
 800e784:	08010af9 	.word	0x08010af9
 800e788:	08025814 	.word	0x08025814

0800e78c <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800e78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e790:	b08c      	sub	sp, #48	@ 0x30
 800e792:	af06      	add	r7, sp, #24
 800e794:	60f8      	str	r0, [r7, #12]
 800e796:	60b9      	str	r1, [r7, #8]
 800e798:	603b      	str	r3, [r7, #0]
 800e79a:	4613      	mov	r3, r2
 800e79c:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7a2:	7b5b      	ldrb	r3, [r3, #13]
 800e7a4:	f003 0303 	and.w	r3, r3, #3
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	bf14      	ite	ne
 800e7ac:	2301      	movne	r3, #1
 800e7ae:	2300      	moveq	r3, #0
 800e7b0:	b2db      	uxtb	r3, r3
 800e7b2:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	1d9e      	adds	r6, r3, #6
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	69db      	ldr	r3, [r3, #28]
 800e7be:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7c6:	885b      	ldrh	r3, [r3, #2]
 800e7c8:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800e7ce:	881b      	ldrh	r3, [r3, #0]
 800e7d0:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f010 ff28 	bl	801f62e <mg_ntohl>
 800e7de:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f010 ff22 	bl	801f62e <mg_ntohl>
 800e7ea:	4601      	mov	r1, r0
 800e7ec:	79fa      	ldrb	r2, [r7, #7]
 800e7ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7f0:	9305      	str	r3, [sp, #20]
 800e7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f4:	9304      	str	r3, [sp, #16]
 800e7f6:	9103      	str	r1, [sp, #12]
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	9302      	str	r3, [sp, #8]
 800e7fc:	9501      	str	r5, [sp, #4]
 800e7fe:	9400      	str	r4, [sp, #0]
 800e800:	4613      	mov	r3, r2
 800e802:	4642      	mov	r2, r8
 800e804:	4631      	mov	r1, r6
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f7ff fece 	bl	800e5a8 <tx_tcp>
 800e80c:	4603      	mov	r3, r0
                buf, len);
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e818 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800e818:	b5b0      	push	{r4, r5, r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	4618      	mov	r0, r3
 800e828:	f7fe f9ed 	bl	800cc06 <mg_alloc_conn>
 800e82c:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d10f      	bne.n	800e854 <accept_conn+0x3c>
    MG_ERROR(("OOM"));
 800e834:	4b5e      	ldr	r3, [pc, #376]	@ (800e9b0 <accept_conn+0x198>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	dd09      	ble.n	800e850 <accept_conn+0x38>
 800e83c:	4b5d      	ldr	r3, [pc, #372]	@ (800e9b4 <accept_conn+0x19c>)
 800e83e:	f241 2289 	movw	r2, #4745	@ 0x1289
 800e842:	495d      	ldr	r1, [pc, #372]	@ (800e9b8 <accept_conn+0x1a0>)
 800e844:	2001      	movs	r0, #1
 800e846:	f7fd fdf5 	bl	800c434 <mg_log_prefix>
 800e84a:	485c      	ldr	r0, [pc, #368]	@ (800e9bc <accept_conn+0x1a4>)
 800e84c:	f7fd fe42 	bl	800c4d4 <mg_log>
    return NULL;
 800e850:	2300      	movs	r3, #0
 800e852:	e0a8      	b.n	800e9a6 <accept_conn+0x18e>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	33b0      	adds	r3, #176	@ 0xb0
 800e858:	60bb      	str	r3, [r7, #8]
  s->dmss = 536;  // assume default, RFC-9293 3.7.1
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e860:	831a      	strh	r2, [r3, #24]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e866:	689b      	ldr	r3, [r3, #8]
 800e868:	4618      	mov	r0, r3
 800e86a:	f010 fee0 	bl	801f62e <mg_ntohl>
 800e86e:	4602      	mov	r2, r0
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	601a      	str	r2, [r3, #0]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f010 fed7 	bl	801f62e <mg_ntohl>
 800e880:	4602      	mov	r2, r0
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	f103 001a 	add.w	r0, r3, #26
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	691b      	ldr	r3, [r3, #16]
 800e890:	3306      	adds	r3, #6
 800e892:	2206      	movs	r2, #6
 800e894:	4619      	mov	r1, r3
 800e896:	f015 f8b8 	bl	8023a0a <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800e89a:	2100      	movs	r1, #0
 800e89c:	68f8      	ldr	r0, [r7, #12]
 800e89e:	f7fe fc33 	bl	800d108 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	331c      	adds	r3, #28
 800e8a6:	683a      	ldr	r2, [r7, #0]
 800e8a8:	69d2      	ldr	r2, [r2, #28]
 800e8aa:	320c      	adds	r2, #12
 800e8ac:	6812      	ldr	r2, [r2, #0]
 800e8ae:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8b4:	881b      	ldrh	r3, [r3, #0]
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800e8bc:	4b3c      	ldr	r3, [pc, #240]	@ (800e9b0 <accept_conn+0x198>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b02      	cmp	r3, #2
 800e8c2:	dd0e      	ble.n	800e8e2 <accept_conn+0xca>
 800e8c4:	4b3b      	ldr	r3, [pc, #236]	@ (800e9b4 <accept_conn+0x19c>)
 800e8c6:	f241 2293 	movw	r2, #4755	@ 0x1293
 800e8ca:	493b      	ldr	r1, [pc, #236]	@ (800e9b8 <accept_conn+0x1a0>)
 800e8cc:	2003      	movs	r0, #3
 800e8ce:	f7fd fdb1 	bl	800c434 <mg_log_prefix>
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	331c      	adds	r3, #28
 800e8da:	4a39      	ldr	r2, [pc, #228]	@ (800e9c0 <accept_conn+0x1a8>)
 800e8dc:	4839      	ldr	r0, [pc, #228]	@ (800e9c4 <accept_conn+0x1ac>)
 800e8de:	f7fd fdf9 	bl	800c4d4 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	601a      	str	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	68fa      	ldr	r2, [r7, #12]
 800e8f2:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800e8f4:	68fa      	ldr	r2, [r7, #12]
 800e8f6:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e8fa:	f043 0304 	orr.w	r3, r3, #4
 800e8fe:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  c->is_hexdumping = lsn->is_hexdumping;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e908:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800e90c:	b2d9      	uxtb	r1, r3
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800e914:	f361 03c3 	bfi	r3, r1, #3, #1
 800e918:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  c->pfn = lsn->pfn;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->loc = lsn->loc;
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f102 0408 	add.w	r4, r2, #8
 800e930:	f103 0508 	add.w	r5, r3, #8
 800e934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e938:	682b      	ldr	r3, [r5, #0]
 800e93a:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  c->fn = lsn->fn;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	679a      	str	r2, [r3, #120]	@ 0x78
  c->fn_data = lsn->fn_data;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	67da      	str	r2, [r3, #124]	@ 0x7c
  c->is_tls = lsn->is_tls;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e95e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800e962:	b2d9      	uxtb	r1, r3
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e96a:	f361 1386 	bfi	r3, r1, #6, #1
 800e96e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_call(c, MG_EV_OPEN, NULL);
 800e972:	2200      	movs	r2, #0
 800e974:	2101      	movs	r1, #1
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f7f8 f82b 	bl	80069d2 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800e97c:	2200      	movs	r2, #0
 800e97e:	2105      	movs	r1, #5
 800e980:	68f8      	ldr	r0, [r7, #12]
 800e982:	f7f8 f826 	bl	80069d2 <mg_call>
  if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800e98c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	d106      	bne.n	800e9a4 <accept_conn+0x18c>
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800e99c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9a0:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  return c;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bdb0      	pop	{r4, r5, r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	24000258 	.word	0x24000258
 800e9b4:	08028100 	.word	0x08028100
 800e9b8:	08024478 	.word	0x08024478
 800e9bc:	08025434 	.word	0x08025434
 800e9c0:	08010b71 	.word	0x08010b71
 800e9c4:	08025838 	.word	0x08025838

0800e9c8 <trim_len>:

static size_t trim_len(struct mg_connection *c, size_t len) {
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08a      	sub	sp, #40	@ 0x28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9d8:	627b      	str	r3, [r7, #36]	@ 0x24
  size_t eth_h_len = 14, ip_max_h_len = 24, tcp_max_h_len = 60, udp_h_len = 8;
 800e9da:	230e      	movs	r3, #14
 800e9dc:	623b      	str	r3, [r7, #32]
 800e9de:	2318      	movs	r3, #24
 800e9e0:	61fb      	str	r3, [r7, #28]
 800e9e2:	233c      	movs	r3, #60	@ 0x3c
 800e9e4:	61bb      	str	r3, [r7, #24]
 800e9e6:	2308      	movs	r3, #8
 800e9e8:	617b      	str	r3, [r7, #20]
  size_t max_headers_len =
      eth_h_len + ip_max_h_len + (c->is_udp ? udp_h_len : tcp_max_h_len);
 800e9ea:	6a3a      	ldr	r2, [r7, #32]
 800e9ec:	69fb      	ldr	r3, [r7, #28]
 800e9ee:	441a      	add	r2, r3
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800e9f6:	f003 0301 	and.w	r3, r3, #1
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d001      	beq.n	800ea04 <trim_len+0x3c>
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	e000      	b.n	800ea06 <trim_len+0x3e>
 800ea04:	69bb      	ldr	r3, [r7, #24]
  size_t max_headers_len =
 800ea06:	4413      	add	r3, r2
 800ea08:	613b      	str	r3, [r7, #16]
  size_t min_mtu = c->is_udp ? 68 /* RFC-791 */ : max_headers_len - eth_h_len;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ea10:	f003 0301 	and.w	r3, r3, #1
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d103      	bne.n	800ea22 <trim_len+0x5a>
 800ea1a:	693a      	ldr	r2, [r7, #16]
 800ea1c:	6a3b      	ldr	r3, [r7, #32]
 800ea1e:	1ad3      	subs	r3, r2, r3
 800ea20:	e000      	b.n	800ea24 <trim_len+0x5c>
 800ea22:	2344      	movs	r3, #68	@ 0x44
 800ea24:	60fb      	str	r3, [r7, #12]

  // If the frame exceeds the available buffer, trim the length
  if (len + max_headers_len > ifp->tx.len) {
 800ea26:	683a      	ldr	r2, [r7, #0]
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	441a      	add	r2, r3
 800ea2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea2e:	699b      	ldr	r3, [r3, #24]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d904      	bls.n	800ea3e <trim_len+0x76>
    len = ifp->tx.len - max_headers_len;
 800ea34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea36:	699a      	ldr	r2, [r3, #24]
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	603b      	str	r3, [r7, #0]
  }
  // Ensure the MTU isn't lower than the minimum allowed value
  if (ifp->mtu < min_mtu) {
 800ea3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ea44:	461a      	mov	r2, r3
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d913      	bls.n	800ea74 <trim_len+0xac>
    MG_ERROR(("MTU is lower than minimum, capping to %lu", min_mtu));
 800ea4c:	4b20      	ldr	r3, [pc, #128]	@ (800ead0 <trim_len+0x108>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	dd0a      	ble.n	800ea6a <trim_len+0xa2>
 800ea54:	4b1f      	ldr	r3, [pc, #124]	@ (800ead4 <trim_len+0x10c>)
 800ea56:	f241 22b0 	movw	r2, #4784	@ 0x12b0
 800ea5a:	491f      	ldr	r1, [pc, #124]	@ (800ead8 <trim_len+0x110>)
 800ea5c:	2001      	movs	r0, #1
 800ea5e:	f7fd fce9 	bl	800c434 <mg_log_prefix>
 800ea62:	68f9      	ldr	r1, [r7, #12]
 800ea64:	481d      	ldr	r0, [pc, #116]	@ (800eadc <trim_len+0x114>)
 800ea66:	f7fd fd35 	bl	800c4d4 <mg_log>
    ifp->mtu = (uint16_t) min_mtu;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea70:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }
  // If the total packet size exceeds the MTU, trim the length
  if (len + max_headers_len - eth_h_len > ifp->mtu) {
 800ea74:	683a      	ldr	r2, [r7, #0]
 800ea76:	693b      	ldr	r3, [r7, #16]
 800ea78:	441a      	add	r2, r3
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	1ad3      	subs	r3, r2, r3
 800ea7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea80:	f8b2 2050 	ldrh.w	r2, [r2, #80]	@ 0x50
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d91e      	bls.n	800eac6 <trim_len+0xfe>
    len = ifp->mtu - max_headers_len + eth_h_len;
 800ea88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ea8e:	461a      	mov	r2, r3
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	1ad3      	subs	r3, r2, r3
 800ea94:	6a3a      	ldr	r2, [r7, #32]
 800ea96:	4413      	add	r3, r2
 800ea98:	603b      	str	r3, [r7, #0]
    if (c->is_udp) {
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800eaa0:	f003 0301 	and.w	r3, r3, #1
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00d      	beq.n	800eac6 <trim_len+0xfe>
      MG_ERROR(("UDP datagram exceeds MTU. Truncating it."));
 800eaaa:	4b09      	ldr	r3, [pc, #36]	@ (800ead0 <trim_len+0x108>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	dd09      	ble.n	800eac6 <trim_len+0xfe>
 800eab2:	4b08      	ldr	r3, [pc, #32]	@ (800ead4 <trim_len+0x10c>)
 800eab4:	f241 22b7 	movw	r2, #4791	@ 0x12b7
 800eab8:	4907      	ldr	r1, [pc, #28]	@ (800ead8 <trim_len+0x110>)
 800eaba:	2001      	movs	r0, #1
 800eabc:	f7fd fcba 	bl	800c434 <mg_log_prefix>
 800eac0:	4807      	ldr	r0, [pc, #28]	@ (800eae0 <trim_len+0x118>)
 800eac2:	f7fd fd07 	bl	800c4d4 <mg_log>
    }
  }

  return len;
 800eac6:	683b      	ldr	r3, [r7, #0]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3728      	adds	r7, #40	@ 0x28
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	24000258 	.word	0x24000258
 800ead4:	0802810c 	.word	0x0802810c
 800ead8:	08024478 	.word	0x08024478
 800eadc:	08025848 	.word	0x08025848
 800eae0:	08025874 	.word	0x08025874

0800eae4 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800eae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eae6:	b08f      	sub	sp, #60	@ 0x3c
 800eae8:	af06      	add	r7, sp, #24
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaf6:	61fb      	str	r3, [r7, #28]
  struct connstate *s = (struct connstate *) (c + 1);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	33b0      	adds	r3, #176	@ 0xb0
 800eafc:	61bb      	str	r3, [r7, #24]
  uint32_t dst_ip = *(uint32_t *) c->rem.ip;
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	331c      	adds	r3, #28
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	617b      	str	r3, [r7, #20]
  len = trim_len(c, len);
 800eb06:	6879      	ldr	r1, [r7, #4]
 800eb08:	68f8      	ldr	r0, [r7, #12]
 800eb0a:	f7ff ff5d 	bl	800e9c8 <trim_len>
 800eb0e:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800eb16:	f003 0301 	and.w	r3, r3, #1
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d015      	beq.n	800eb4c <mg_io_send+0x68>
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, dst_ip, c->rem.port, buf, len);
 800eb20:	69bb      	ldr	r3, [r7, #24]
 800eb22:	f103 011a 	add.w	r1, r3, #26
 800eb26:	69fb      	ldr	r3, [r7, #28]
 800eb28:	6898      	ldr	r0, [r3, #8]
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	8b1c      	ldrh	r4, [r3, #24]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	9203      	str	r2, [sp, #12]
 800eb36:	68ba      	ldr	r2, [r7, #8]
 800eb38:	9202      	str	r2, [sp, #8]
 800eb3a:	9301      	str	r3, [sp, #4]
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	4623      	mov	r3, r4
 800eb42:	4602      	mov	r2, r0
 800eb44:	69f8      	ldr	r0, [r7, #28]
 800eb46:	f7fe fcc8 	bl	800d4da <tx_udp>
 800eb4a:	e047      	b.n	800ebdc <mg_io_send+0xf8>
  } else {  // TCP, cap to peer's MSS
    size_t sent;
    if (len > s->dmss) len = s->dmss;  // RFC-6691: reduce if sending opts
 800eb4c:	69bb      	ldr	r3, [r7, #24]
 800eb4e:	8b1b      	ldrh	r3, [r3, #24]
 800eb50:	461a      	mov	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d902      	bls.n	800eb5e <mg_io_send+0x7a>
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	8b1b      	ldrh	r3, [r3, #24]
 800eb5c:	607b      	str	r3, [r7, #4]
    sent = tx_tcp(ifp, s->mac, dst_ip, TH_PUSH | TH_ACK, c->loc.port,
 800eb5e:	69bb      	ldr	r3, [r7, #24]
 800eb60:	f103 061a 	add.w	r6, r3, #26
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	8b1c      	ldrh	r4, [r3, #24]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	4618      	mov	r0, r3
 800eb72:	f010 fd5c 	bl	801f62e <mg_ntohl>
 800eb76:	6038      	str	r0, [r7, #0]
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	f010 fd56 	bl	801f62e <mg_ntohl>
 800eb82:	4602      	mov	r2, r0
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	9305      	str	r3, [sp, #20]
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	9304      	str	r3, [sp, #16]
 800eb8c:	9203      	str	r2, [sp, #12]
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	9302      	str	r3, [sp, #8]
 800eb92:	9501      	str	r5, [sp, #4]
 800eb94:	9400      	str	r4, [sp, #0]
 800eb96:	2318      	movs	r3, #24
 800eb98:	697a      	ldr	r2, [r7, #20]
 800eb9a:	4631      	mov	r1, r6
 800eb9c:	69f8      	ldr	r0, [r7, #28]
 800eb9e:	f7ff fd03 	bl	800e5a8 <tx_tcp>
 800eba2:	6138      	str	r0, [r7, #16]
                  c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), buf, len);
    if (sent == 0) {
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d102      	bne.n	800ebb0 <mg_io_send+0xcc>
      return MG_IO_WAIT;
 800ebaa:	f06f 0301 	mvn.w	r3, #1
 800ebae:	e016      	b.n	800ebde <mg_io_send+0xfa>
    } else if (sent == (size_t) -1) {
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb6:	d102      	bne.n	800ebbe <mg_io_send+0xda>
      return MG_IO_ERR;
 800ebb8:	f04f 33ff 	mov.w	r3, #4294967295
 800ebbc:	e00f      	b.n	800ebde <mg_io_send+0xfa>
    } else {
      s->seq += (uint32_t) len;
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	441a      	add	r2, r3
 800ebc6:	69bb      	ldr	r3, [r7, #24]
 800ebc8:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d103      	bne.n	800ebdc <mg_io_send+0xf8>
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f7fe fa96 	bl	800d108 <settmout>
    }
  }
  return (long) len;
 800ebdc:	687b      	ldr	r3, [r7, #4]
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3724      	adds	r7, #36	@ 0x24
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ebe8 <handle_tls_recv>:

static void handle_tls_recv(struct mg_connection *c) {
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b086      	sub	sp, #24
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  size_t avail = mg_tls_pending(c);
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f00a f8a9 	bl	8018d48 <mg_tls_pending>
 800ebf6:	6178      	str	r0, [r7, #20]
  size_t min = avail > MG_MAX_RECV_SIZE ? MG_MAX_RECV_SIZE : avail;
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ebfe:	bf28      	it	cs
 800ec00:	f44f 1340 	movcs.w	r3, #3145728	@ 0x300000
 800ec04:	613b      	str	r3, [r7, #16]
  struct mg_iobuf *io = &c->recv;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	3338      	adds	r3, #56	@ 0x38
 800ec0a:	60fb      	str	r3, [r7, #12]
  if (io->size - io->len < min && !mg_iobuf_resize(io, io->len + min)) {
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	685a      	ldr	r2, [r3, #4]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	689b      	ldr	r3, [r3, #8]
 800ec14:	1ad3      	subs	r3, r2, r3
 800ec16:	693a      	ldr	r2, [r7, #16]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d90f      	bls.n	800ec3c <handle_tls_recv+0x54>
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	689a      	ldr	r2, [r3, #8]
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	4413      	add	r3, r2
 800ec24:	4619      	mov	r1, r3
 800ec26:	68f8      	ldr	r0, [r7, #12]
 800ec28:	f7fc fc5a 	bl	800b4e0 <mg_iobuf_resize>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d104      	bne.n	800ec3c <handle_tls_recv+0x54>
    mg_error(c, "oom");
 800ec32:	491c      	ldr	r1, [pc, #112]	@ (800eca4 <handle_tls_recv+0xbc>)
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f7f7 feed 	bl	8006a14 <mg_error>
      // Decrypted successfully - trigger MG_EV_READ
      io->len += (size_t) n;
      mg_call(c, MG_EV_READ, &n);
    }  // else n < 0: outstanding data to be moved to c->recv
  }
}
 800ec3a:	e02f      	b.n	800ec9c <handle_tls_recv+0xb4>
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d005      	beq.n	800ec50 <handle_tls_recv+0x68>
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681a      	ldr	r2, [r3, #0]
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	4413      	add	r3, r2
 800ec4e:	e001      	b.n	800ec54 <handle_tls_recv+0x6c>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
                         io->size - io->len);
 800ec54:	68fa      	ldr	r2, [r7, #12]
 800ec56:	6851      	ldr	r1, [r2, #4]
 800ec58:	68fa      	ldr	r2, [r7, #12]
 800ec5a:	6892      	ldr	r2, [r2, #8]
    long n = mg_tls_recv(c, io->buf != NULL ? &io->buf[io->len] : io->buf,
 800ec5c:	1a8a      	subs	r2, r1, r2
 800ec5e:	4619      	mov	r1, r3
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f00a f81d 	bl	8018ca0 <mg_tls_recv>
 800ec66:	4603      	mov	r3, r0
 800ec68:	60bb      	str	r3, [r7, #8]
    if (n == MG_IO_ERR) {
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec70:	d104      	bne.n	800ec7c <handle_tls_recv+0x94>
      mg_error(c, "TLS recv error");
 800ec72:	490d      	ldr	r1, [pc, #52]	@ (800eca8 <handle_tls_recv+0xc0>)
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7f7 fecd 	bl	8006a14 <mg_error>
}
 800ec7a:	e00f      	b.n	800ec9c <handle_tls_recv+0xb4>
    } else if (n > 0) {
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	dd0c      	ble.n	800ec9c <handle_tls_recv+0xb4>
      io->len += (size_t) n;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	441a      	add	r2, r3
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	609a      	str	r2, [r3, #8]
      mg_call(c, MG_EV_READ, &n);
 800ec8e:	f107 0308 	add.w	r3, r7, #8
 800ec92:	461a      	mov	r2, r3
 800ec94:	2107      	movs	r1, #7
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7f7 fe9b 	bl	80069d2 <mg_call>
}
 800ec9c:	bf00      	nop
 800ec9e:	3718      	adds	r7, #24
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	08025810 	.word	0x08025810
 800eca8:	080258a0 	.word	0x080258a0

0800ecac <read_conn>:

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800ecac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecb0:	b090      	sub	sp, #64	@ 0x40
 800ecb2:	af06      	add	r7, sp, #24
 800ecb4:	60f8      	str	r0, [r7, #12]
 800ecb6:	60b9      	str	r1, [r7, #8]
  struct connstate *s = (struct connstate *) (c + 1);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	33b0      	adds	r3, #176	@ 0xb0
 800ecbc:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *io = c->is_tls ? &c->rtls : &c->recv;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800ecc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d002      	beq.n	800ecd4 <read_conn+0x28>
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	3368      	adds	r3, #104	@ 0x68
 800ecd2:	e001      	b.n	800ecd8 <read_conn+0x2c>
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	3338      	adds	r3, #56	@ 0x38
 800ecd8:	61fb      	str	r3, [r7, #28]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f010 fca4 	bl	801f62e <mg_ntohl>
 800ece6:	61b8      	str	r0, [r7, #24]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	331c      	adds	r3, #28
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	613b      	str	r3, [r7, #16]
  if (pkt->tcp->flags & TH_FIN) {
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ecf4:	7b5b      	ldrb	r3, [r3, #13]
 800ecf6:	f003 0301 	and.w	r3, r3, #1
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d07e      	beq.n	800edfc <read_conn+0x150>
    // If we initiated the closure, we reply with ACK upon receiving FIN
    // If we didn't initiate it, we reply with FIN as part of the normal TCP
    // closure process
    uint8_t flags = TH_ACK;
 800ecfe:	2310      	movs	r3, #16
 800ed00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len + 1);
 800ed04:	68bb      	ldr	r3, [r7, #8]
 800ed06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f010 fc8f 	bl	801f62e <mg_ntohl>
 800ed10:	4602      	mov	r2, r0
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	68db      	ldr	r3, [r3, #12]
 800ed16:	4413      	add	r3, r2
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	6a3b      	ldr	r3, [r7, #32]
 800ed1c:	605a      	str	r2, [r3, #4]
    s->fin_rcvd = true;
 800ed1e:	6a3b      	ldr	r3, [r7, #32]
 800ed20:	2201      	movs	r2, #1
 800ed22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if (c->is_draining && s->ttype == MIP_TTYPE_FIN) {
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800ed2c:	f003 0310 	and.w	r3, r3, #16
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d023      	beq.n	800ed7e <read_conn+0xd2>
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ed3c:	2b04      	cmp	r3, #4
 800ed3e:	d11e      	bne.n	800ed7e <read_conn+0xd2>
      if (s->seq == mg_htonl(pkt->tcp->ack)) {  // Simultaneous closure ?
 800ed40:	6a3b      	ldr	r3, [r7, #32]
 800ed42:	681c      	ldr	r4, [r3, #0]
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	f010 fc6f 	bl	801f62e <mg_ntohl>
 800ed50:	4603      	mov	r3, r0
 800ed52:	429c      	cmp	r4, r3
 800ed54:	d105      	bne.n	800ed62 <read_conn+0xb6>
        s->seq++;                               // Yes. Increment our SEQ
 800ed56:	6a3b      	ldr	r3, [r7, #32]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	1c5a      	adds	r2, r3, #1
 800ed5c:	6a3b      	ldr	r3, [r7, #32]
 800ed5e:	601a      	str	r2, [r3, #0]
 800ed60:	e008      	b.n	800ed74 <read_conn+0xc8>
      } else {                                  // Otherwise,
        s->seq = mg_htonl(pkt->tcp->ack);       // Set to peer's ACK
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f010 fc60 	bl	801f62e <mg_ntohl>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	6a3b      	ldr	r3, [r7, #32]
 800ed72:	601a      	str	r2, [r3, #0]
      }
      s->twclosure = true;
 800ed74:	6a3b      	ldr	r3, [r7, #32]
 800ed76:	2201      	movs	r2, #1
 800ed78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800ed7c:	e010      	b.n	800eda0 <read_conn+0xf4>
    } else {
      flags |= TH_FIN;
 800ed7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed82:	f043 0301 	orr.w	r3, r3, #1
 800ed86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      c->is_draining = 1;
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800ed90:	f043 0310 	orr.w	r3, r3, #16
 800ed94:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
      settmout(c, MIP_TTYPE_FIN);
 800ed98:	2104      	movs	r1, #4
 800ed9a:	68f8      	ldr	r0, [r7, #12]
 800ed9c:	f7fe f9b4 	bl	800d108 <settmout>
    }
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, flags, c->loc.port, c->rem.port,
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800eda6:	6a3b      	ldr	r3, [r7, #32]
 800eda8:	f103 081a 	add.w	r8, r3, #26
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	607b      	str	r3, [r7, #4]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	8b1c      	ldrh	r4, [r3, #24]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800edb8:	6a3b      	ldr	r3, [r7, #32]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4618      	mov	r0, r3
 800edbe:	f010 fc36 	bl	801f62e <mg_ntohl>
 800edc2:	6038      	str	r0, [r7, #0]
 800edc4:	6a3b      	ldr	r3, [r7, #32]
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	4618      	mov	r0, r3
 800edca:	f010 fc30 	bl	801f62e <mg_ntohl>
 800edce:	4602      	mov	r2, r0
 800edd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800edd4:	2100      	movs	r1, #0
 800edd6:	9105      	str	r1, [sp, #20]
 800edd8:	499b      	ldr	r1, [pc, #620]	@ (800f048 <read_conn+0x39c>)
 800edda:	9104      	str	r1, [sp, #16]
 800eddc:	9203      	str	r2, [sp, #12]
 800edde:	6839      	ldr	r1, [r7, #0]
 800ede0:	9102      	str	r1, [sp, #8]
 800ede2:	9501      	str	r5, [sp, #4]
 800ede4:	9400      	str	r4, [sp, #0]
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	4641      	mov	r1, r8
 800edea:	4630      	mov	r0, r6
 800edec:	f7ff fbdc 	bl	800e5a8 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    if (pkt->pay.len == 0) return;  // if no data, we're done
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f040 808f 	bne.w	800ef18 <read_conn+0x26c>
 800edfa:	e16b      	b.n	800f0d4 <read_conn+0x428>
  } else if (pkt->pay.len == 0) {   // this is an ACK
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d110      	bne.n	800ee26 <read_conn+0x17a>
    if (s->fin_rcvd && s->ttype == MIP_TTYPE_FIN) s->twclosure = true;
 800ee04:	6a3b      	ldr	r3, [r7, #32]
 800ee06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f000 815f 	beq.w	800f0ce <read_conn+0x422>
 800ee10:	6a3b      	ldr	r3, [r7, #32]
 800ee12:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ee16:	2b04      	cmp	r3, #4
 800ee18:	f040 8159 	bne.w	800f0ce <read_conn+0x422>
 800ee1c:	6a3b      	ldr	r3, [r7, #32]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    return;  // no data to process
 800ee24:	e153      	b.n	800f0ce <read_conn+0x422>
  } else if (seq != s->ack) {
 800ee26:	6a3b      	ldr	r3, [r7, #32]
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	69ba      	ldr	r2, [r7, #24]
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d059      	beq.n	800eee4 <read_conn+0x238>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee34:	685b      	ldr	r3, [r3, #4]
 800ee36:	4618      	mov	r0, r3
 800ee38:	f010 fbf9 	bl	801f62e <mg_ntohl>
 800ee3c:	4602      	mov	r2, r0
 800ee3e:	68bb      	ldr	r3, [r7, #8]
 800ee40:	68db      	ldr	r3, [r3, #12]
 800ee42:	4413      	add	r3, r2
 800ee44:	617b      	str	r3, [r7, #20]
    if (s->ack == ack) {
 800ee46:	6a3b      	ldr	r3, [r7, #32]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	697a      	ldr	r2, [r7, #20]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d10f      	bne.n	800ee70 <read_conn+0x1c4>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800ee50:	4b7e      	ldr	r3, [pc, #504]	@ (800f04c <read_conn+0x3a0>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	2b03      	cmp	r3, #3
 800ee56:	f340 813c 	ble.w	800f0d2 <read_conn+0x426>
 800ee5a:	4b7d      	ldr	r3, [pc, #500]	@ (800f050 <read_conn+0x3a4>)
 800ee5c:	f241 320c 	movw	r2, #4876	@ 0x130c
 800ee60:	497c      	ldr	r1, [pc, #496]	@ (800f054 <read_conn+0x3a8>)
 800ee62:	2004      	movs	r0, #4
 800ee64:	f7fd fae6 	bl	800c434 <mg_log_prefix>
 800ee68:	487b      	ldr	r0, [pc, #492]	@ (800f058 <read_conn+0x3ac>)
 800ee6a:	f7fd fb33 	bl	800c4d4 <mg_log>
    } else {
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
             mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
    }
    return;  // drop it
 800ee6e:	e130      	b.n	800f0d2 <read_conn+0x426>
      MG_VERBOSE(("SEQ != ACK: %x %x %x", seq, s->ack, ack));
 800ee70:	4b76      	ldr	r3, [pc, #472]	@ (800f04c <read_conn+0x3a0>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	dd0d      	ble.n	800ee94 <read_conn+0x1e8>
 800ee78:	4b75      	ldr	r3, [pc, #468]	@ (800f050 <read_conn+0x3a4>)
 800ee7a:	f241 320e 	movw	r2, #4878	@ 0x130e
 800ee7e:	4975      	ldr	r1, [pc, #468]	@ (800f054 <read_conn+0x3a8>)
 800ee80:	2004      	movs	r0, #4
 800ee82:	f7fd fad7 	bl	800c434 <mg_log_prefix>
 800ee86:	6a3b      	ldr	r3, [r7, #32]
 800ee88:	685a      	ldr	r2, [r3, #4]
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	69b9      	ldr	r1, [r7, #24]
 800ee8e:	4873      	ldr	r0, [pc, #460]	@ (800f05c <read_conn+0x3b0>)
 800ee90:	f7fd fb20 	bl	800c4d4 <mg_log>
      tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	685b      	ldr	r3, [r3, #4]
 800ee98:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800ee9a:	6a3b      	ldr	r3, [r7, #32]
 800ee9c:	f103 081a 	add.w	r8, r3, #26
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	607b      	str	r3, [r7, #4]
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	8b1c      	ldrh	r4, [r3, #24]
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800eeac:	6a3b      	ldr	r3, [r7, #32]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f010 fbbc 	bl	801f62e <mg_ntohl>
 800eeb6:	6038      	str	r0, [r7, #0]
 800eeb8:	6a3b      	ldr	r3, [r7, #32]
 800eeba:	685b      	ldr	r3, [r3, #4]
 800eebc:	4618      	mov	r0, r3
 800eebe:	f010 fbb6 	bl	801f62e <mg_ntohl>
 800eec2:	4603      	mov	r3, r0
 800eec4:	2200      	movs	r2, #0
 800eec6:	9205      	str	r2, [sp, #20]
 800eec8:	4a5f      	ldr	r2, [pc, #380]	@ (800f048 <read_conn+0x39c>)
 800eeca:	9204      	str	r2, [sp, #16]
 800eecc:	9303      	str	r3, [sp, #12]
 800eece:	6839      	ldr	r1, [r7, #0]
 800eed0:	9102      	str	r1, [sp, #8]
 800eed2:	9501      	str	r5, [sp, #4]
 800eed4:	9400      	str	r4, [sp, #0]
 800eed6:	2310      	movs	r3, #16
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	4641      	mov	r1, r8
 800eedc:	4630      	mov	r0, r6
 800eede:	f7ff fb63 	bl	800e5a8 <tx_tcp>
    return;  // drop it
 800eee2:	e0f6      	b.n	800f0d2 <read_conn+0x426>
  } else if (io->size - io->len < pkt->pay.len &&
 800eee4:	69fb      	ldr	r3, [r7, #28]
 800eee6:	685a      	ldr	r2, [r3, #4]
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	1ad2      	subs	r2, r2, r3
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d210      	bcs.n	800ef18 <read_conn+0x26c>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800eef6:	69fb      	ldr	r3, [r7, #28]
 800eef8:	689a      	ldr	r2, [r3, #8]
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	4413      	add	r3, r2
 800ef00:	4619      	mov	r1, r3
 800ef02:	69f8      	ldr	r0, [r7, #28]
 800ef04:	f7fc faec 	bl	800b4e0 <mg_iobuf_resize>
 800ef08:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d104      	bne.n	800ef18 <read_conn+0x26c>
    mg_error(c, "oom");
 800ef0e:	4954      	ldr	r1, [pc, #336]	@ (800f060 <read_conn+0x3b4>)
 800ef10:	68f8      	ldr	r0, [r7, #12]
 800ef12:	f7f7 fd7f 	bl	8006a14 <mg_error>
    return;  // drop it
 800ef16:	e0dd      	b.n	800f0d4 <read_conn+0x428>
  // Copy TCP payload into the IO buffer. If the connection is plain text,
  // we copy to c->recv. If the connection is TLS, this data is encrypted,
  // therefore we copy that encrypted data to the c->rtls iobuffer instead,
  // and then call mg_tls_recv() to decrypt it. NOTE: mg_tls_recv() will
  // call back mg_io_recv() which grabs raw data from c->rtls
  memcpy(&io->buf[io->len], pkt->pay.buf, pkt->pay.len);
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	681a      	ldr	r2, [r3, #0]
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	18d0      	adds	r0, r2, r3
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	6899      	ldr	r1, [r3, #8]
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	f014 fd6d 	bl	8023a0a <memcpy>
  io->len += pkt->pay.len;
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	689a      	ldr	r2, [r3, #8]
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	68db      	ldr	r3, [r3, #12]
 800ef38:	441a      	add	r2, r3
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	609a      	str	r2, [r3, #8]
  MG_VERBOSE(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800ef3e:	4b43      	ldr	r3, [pc, #268]	@ (800f04c <read_conn+0x3a0>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b03      	cmp	r3, #3
 800ef44:	dd15      	ble.n	800ef72 <read_conn+0x2c6>
 800ef46:	4b42      	ldr	r3, [pc, #264]	@ (800f050 <read_conn+0x3a4>)
 800ef48:	f241 321f 	movw	r2, #4895	@ 0x131f
 800ef4c:	4941      	ldr	r1, [pc, #260]	@ (800f054 <read_conn+0x3a8>)
 800ef4e:	2004      	movs	r0, #4
 800ef50:	f7fd fa70 	bl	800c434 <mg_log_prefix>
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef5c:	685b      	ldr	r3, [r3, #4]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f010 fb65 	bl	801f62e <mg_ntohl>
 800ef64:	4602      	mov	r2, r0
 800ef66:	6a3b      	ldr	r3, [r7, #32]
 800ef68:	685b      	ldr	r3, [r3, #4]
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	483d      	ldr	r0, [pc, #244]	@ (800f064 <read_conn+0x3b8>)
 800ef6e:	f7fd fab1 	bl	800c4d4 <mg_log>
  // Advance ACK counter
  s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f010 fb58 	bl	801f62e <mg_ntohl>
 800ef7e:	4602      	mov	r2, r0
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	68db      	ldr	r3, [r3, #12]
 800ef84:	441a      	add	r2, r3
 800ef86:	6a3b      	ldr	r3, [r7, #32]
 800ef88:	605a      	str	r2, [r3, #4]
  s->unacked += pkt->pay.len;
 800ef8a:	6a3b      	ldr	r3, [r7, #32]
 800ef8c:	695a      	ldr	r2, [r3, #20]
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	441a      	add	r2, r3
 800ef94:	6a3b      	ldr	r3, [r7, #32]
 800ef96:	615a      	str	r2, [r3, #20]
  // size_t diff = s->acked <= s->ack ? s->ack - s->acked : s->ack;
  if (s->unacked > MIP_TCP_WIN / 2 && s->acked != s->ack) {
 800ef98:	6a3b      	ldr	r3, [r7, #32]
 800ef9a:	695b      	ldr	r3, [r3, #20]
 800ef9c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d963      	bls.n	800f06c <read_conn+0x3c0>
 800efa4:	6a3b      	ldr	r3, [r7, #32]
 800efa6:	691a      	ldr	r2, [r3, #16]
 800efa8:	6a3b      	ldr	r3, [r7, #32]
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	429a      	cmp	r2, r3
 800efae:	d05d      	beq.n	800f06c <read_conn+0x3c0>
    // Send ACK immediately
    MG_VERBOSE(("%lu imm ACK %lu", c->id, s->acked));
 800efb0:	4b26      	ldr	r3, [pc, #152]	@ (800f04c <read_conn+0x3a0>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	2b03      	cmp	r3, #3
 800efb6:	dd0e      	ble.n	800efd6 <read_conn+0x32a>
 800efb8:	4b25      	ldr	r3, [pc, #148]	@ (800f050 <read_conn+0x3a4>)
 800efba:	f241 3226 	movw	r2, #4902	@ 0x1326
 800efbe:	4925      	ldr	r1, [pc, #148]	@ (800f054 <read_conn+0x3a8>)
 800efc0:	2004      	movs	r0, #4
 800efc2:	f7fd fa37 	bl	800c434 <mg_log_prefix>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800efca:	6a3b      	ldr	r3, [r7, #32]
 800efcc:	691b      	ldr	r3, [r3, #16]
 800efce:	461a      	mov	r2, r3
 800efd0:	4825      	ldr	r0, [pc, #148]	@ (800f068 <read_conn+0x3bc>)
 800efd2:	f7fd fa7f 	bl	800c4d4 <mg_log>
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 800efdc:	6a3b      	ldr	r3, [r7, #32]
 800efde:	f103 081a 	add.w	r8, r3, #26
 800efe2:	693b      	ldr	r3, [r7, #16]
 800efe4:	607b      	str	r3, [r7, #4]
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	8b1c      	ldrh	r4, [r3, #24]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800efee:	6a3b      	ldr	r3, [r7, #32]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	4618      	mov	r0, r3
 800eff4:	f010 fb1b 	bl	801f62e <mg_ntohl>
 800eff8:	6038      	str	r0, [r7, #0]
 800effa:	6a3b      	ldr	r3, [r7, #32]
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	4618      	mov	r0, r3
 800f000:	f010 fb15 	bl	801f62e <mg_ntohl>
 800f004:	4603      	mov	r3, r0
 800f006:	2200      	movs	r2, #0
 800f008:	9205      	str	r2, [sp, #20]
 800f00a:	2200      	movs	r2, #0
 800f00c:	9204      	str	r2, [sp, #16]
 800f00e:	9303      	str	r3, [sp, #12]
 800f010:	6839      	ldr	r1, [r7, #0]
 800f012:	9102      	str	r1, [sp, #8]
 800f014:	9501      	str	r5, [sp, #4]
 800f016:	9400      	str	r4, [sp, #0]
 800f018:	2310      	movs	r3, #16
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	4641      	mov	r1, r8
 800f01e:	4630      	mov	r0, r6
 800f020:	f7ff fac2 	bl	800e5a8 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    s->unacked = 0;
 800f024:	6a3b      	ldr	r3, [r7, #32]
 800f026:	2200      	movs	r2, #0
 800f028:	615a      	str	r2, [r3, #20]
    s->acked = s->ack;
 800f02a:	6a3b      	ldr	r3, [r7, #32]
 800f02c:	685a      	ldr	r2, [r3, #4]
 800f02e:	6a3b      	ldr	r3, [r7, #32]
 800f030:	611a      	str	r2, [r3, #16]
    if (s->ttype != MIP_TTYPE_KEEPALIVE) settmout(c, MIP_TTYPE_KEEPALIVE);
 800f032:	6a3b      	ldr	r3, [r7, #32]
 800f034:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d020      	beq.n	800f07e <read_conn+0x3d2>
 800f03c:	2100      	movs	r1, #0
 800f03e:	68f8      	ldr	r0, [r7, #12]
 800f040:	f7fe f862 	bl	800d108 <settmout>
 800f044:	e01b      	b.n	800f07e <read_conn+0x3d2>
 800f046:	bf00      	nop
 800f048:	08024cb8 	.word	0x08024cb8
 800f04c:	24000258 	.word	0x24000258
 800f050:	08028118 	.word	0x08028118
 800f054:	08024478 	.word	0x08024478
 800f058:	080258b0 	.word	0x080258b0
 800f05c:	080258c8 	.word	0x080258c8
 800f060:	08025810 	.word	0x08025810
 800f064:	080258e0 	.word	0x080258e0
 800f068:	080258f4 	.word	0x080258f4
  } else {
    // if not already running, setup a timer to send an ACK later
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800f06c:	6a3b      	ldr	r3, [r7, #32]
 800f06e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f072:	2b01      	cmp	r3, #1
 800f074:	d003      	beq.n	800f07e <read_conn+0x3d2>
 800f076:	2101      	movs	r1, #1
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f7fe f845 	bl	800d108 <settmout>
  }
  if (c->is_tls && c->is_tls_hs) {
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d00b      	beq.n	800f0a6 <read_conn+0x3fa>
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f094:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d003      	beq.n	800f0a6 <read_conn+0x3fa>
    mg_tls_handshake(c);
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f009 fae0 	bl	8018664 <mg_tls_handshake>
 800f0a4:	e016      	b.n	800f0d4 <read_conn+0x428>
  } else if (c->is_tls) {
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f0ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d003      	beq.n	800f0be <read_conn+0x412>
    handle_tls_recv(c);
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f7ff fd96 	bl	800ebe8 <handle_tls_recv>
 800f0bc:	e00a      	b.n	800f0d4 <read_conn+0x428>
  } else {
    // Plain text connection, data is already in c->recv, trigger MG_EV_READ
    mg_call(c, MG_EV_READ, &pkt->pay.len);
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	330c      	adds	r3, #12
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	2107      	movs	r1, #7
 800f0c6:	68f8      	ldr	r0, [r7, #12]
 800f0c8:	f7f7 fc83 	bl	80069d2 <mg_call>
 800f0cc:	e002      	b.n	800f0d4 <read_conn+0x428>
    return;  // no data to process
 800f0ce:	bf00      	nop
 800f0d0:	e000      	b.n	800f0d4 <read_conn+0x428>
    return;  // drop it
 800f0d2:	bf00      	nop
  }
}
 800f0d4:	3728      	adds	r7, #40	@ 0x28
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f0dc <handle_opt>:

// process options (MSS)
static void handle_opt(struct connstate *s, struct tcp *tcp) {
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b086      	sub	sp, #24
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  uint8_t *opts = (uint8_t *) (tcp + 1);
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	3314      	adds	r3, #20
 800f0ea:	617b      	str	r3, [r7, #20]
  int len = 4 * ((int) (tcp->off >> 4) - ((int) sizeof(*tcp) / 4));
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	7b1b      	ldrb	r3, [r3, #12]
 800f0f0:	091b      	lsrs	r3, r3, #4
 800f0f2:	b2db      	uxtb	r3, r3
 800f0f4:	3b05      	subs	r3, #5
 800f0f6:	009b      	lsls	r3, r3, #2
 800f0f8:	613b      	str	r3, [r7, #16]
  s->dmss = 536;     // assume default, RFC-9293 3.7.1
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f100:	831a      	strh	r2, [r3, #24]
  while (len > 0) {  // RFC-9293 3.1 3.2
 800f102:	e038      	b.n	800f176 <handle_opt+0x9a>
    uint8_t kind = opts[0], optlen = 1;
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	73bb      	strb	r3, [r7, #14]
 800f10a:	2301      	movs	r3, #1
 800f10c:	73fb      	strb	r3, [r7, #15]
    if (kind != 1) {         // No-Operation
 800f10e:	7bbb      	ldrb	r3, [r7, #14]
 800f110:	2b01      	cmp	r3, #1
 800f112:	d017      	beq.n	800f144 <handle_opt+0x68>
      if (kind == 0) break;  // End of Option List
 800f114:	7bbb      	ldrb	r3, [r7, #14]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d031      	beq.n	800f17e <handle_opt+0xa2>
      optlen = opts[1];
 800f11a:	697b      	ldr	r3, [r7, #20]
 800f11c:	785b      	ldrb	r3, [r3, #1]
 800f11e:	73fb      	strb	r3, [r7, #15]
      if (kind == 2 && optlen == 4)  // set received MSS
 800f120:	7bbb      	ldrb	r3, [r7, #14]
 800f122:	2b02      	cmp	r3, #2
 800f124:	d10e      	bne.n	800f144 <handle_opt+0x68>
 800f126:	7bfb      	ldrb	r3, [r7, #15]
 800f128:	2b04      	cmp	r3, #4
 800f12a:	d10b      	bne.n	800f144 <handle_opt+0x68>
        s->dmss = (uint16_t) (((uint16_t) opts[2] << 8) + opts[3]);
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	3302      	adds	r3, #2
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	021b      	lsls	r3, r3, #8
 800f134:	b29b      	uxth	r3, r3
 800f136:	697a      	ldr	r2, [r7, #20]
 800f138:	3203      	adds	r2, #3
 800f13a:	7812      	ldrb	r2, [r2, #0]
 800f13c:	4413      	add	r3, r2
 800f13e:	b29a      	uxth	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	831a      	strh	r2, [r3, #24]
    }
    MG_VERBOSE(("kind: %u, optlen: %u, len: %d\n", kind, optlen, len));
 800f144:	4b10      	ldr	r3, [pc, #64]	@ (800f188 <handle_opt+0xac>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b03      	cmp	r3, #3
 800f14a:	dd0c      	ble.n	800f166 <handle_opt+0x8a>
 800f14c:	4b0f      	ldr	r3, [pc, #60]	@ (800f18c <handle_opt+0xb0>)
 800f14e:	f241 3247 	movw	r2, #4935	@ 0x1347
 800f152:	490f      	ldr	r1, [pc, #60]	@ (800f190 <handle_opt+0xb4>)
 800f154:	2004      	movs	r0, #4
 800f156:	f7fd f96d 	bl	800c434 <mg_log_prefix>
 800f15a:	7bb9      	ldrb	r1, [r7, #14]
 800f15c:	7bfa      	ldrb	r2, [r7, #15]
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	480c      	ldr	r0, [pc, #48]	@ (800f194 <handle_opt+0xb8>)
 800f162:	f7fd f9b7 	bl	800c4d4 <mg_log>
    opts += optlen;
 800f166:	7bfb      	ldrb	r3, [r7, #15]
 800f168:	697a      	ldr	r2, [r7, #20]
 800f16a:	4413      	add	r3, r2
 800f16c:	617b      	str	r3, [r7, #20]
    len -= optlen;
 800f16e:	7bfb      	ldrb	r3, [r7, #15]
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	613b      	str	r3, [r7, #16]
  while (len > 0) {  // RFC-9293 3.1 3.2
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	dcc3      	bgt.n	800f104 <handle_opt+0x28>
  }
}
 800f17c:	e000      	b.n	800f180 <handle_opt+0xa4>
      if (kind == 0) break;  // End of Option List
 800f17e:	bf00      	nop
}
 800f180:	bf00      	nop
 800f182:	3718      	adds	r7, #24
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	24000258 	.word	0x24000258
 800f18c:	08028124 	.word	0x08028124
 800f190:	08024478 	.word	0x08024478
 800f194:	08025904 	.word	0x08025904

0800f198 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f198:	b590      	push	{r4, r7, lr}
 800f19a:	b089      	sub	sp, #36	@ 0x24
 800f19c:	af02      	add	r7, sp, #8
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	6839      	ldr	r1, [r7, #0]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7fe fbd4 	bl	800d958 <getpeer>
 800f1b0:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d002      	beq.n	800f1be <rx_tcp+0x26>
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	33b0      	adds	r3, #176	@ 0xb0
 800f1bc:	e000      	b.n	800f1c0 <rx_tcp+0x28>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags == (TH_SYN | TH_ACK)) {
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d05d      	beq.n	800f284 <rx_tcp+0xec>
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f1ce:	f003 0320 	and.w	r3, r3, #32
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d055      	beq.n	800f284 <rx_tcp+0xec>
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1dc:	7b5b      	ldrb	r3, [r3, #13]
 800f1de:	2b12      	cmp	r3, #18
 800f1e0:	d150      	bne.n	800f284 <rx_tcp+0xec>
    handle_opt(s, pkt->tcp);  // process options (MSS)
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	6938      	ldr	r0, [r7, #16]
 800f1ea:	f7ff ff77 	bl	800f0dc <handle_opt>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f010 fa1a 	bl	801f62e <mg_ntohl>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	601a      	str	r2, [r3, #0]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	4618      	mov	r0, r3
 800f208:	f010 fa11 	bl	801f62e <mg_ntohl>
 800f20c:	4603      	mov	r3, r0
 800f20e:	1c5a      	adds	r2, r3, #1
 800f210:	693b      	ldr	r3, [r7, #16]
 800f212:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	2200      	movs	r2, #0
 800f21c:	9201      	str	r2, [sp, #4]
 800f21e:	2200      	movs	r2, #0
 800f220:	9200      	str	r2, [sp, #0]
 800f222:	2210      	movs	r2, #16
 800f224:	6839      	ldr	r1, [r7, #0]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f7ff fab0 	bl	800e78c <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800f22c:	697a      	ldr	r2, [r7, #20]
 800f22e:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f232:	f023 0320 	bic.w	r3, r3, #32
 800f236:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800f23a:	2100      	movs	r1, #0
 800f23c:	6978      	ldr	r0, [r7, #20]
 800f23e:	f7fd ff63 	bl	800d108 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800f242:	2200      	movs	r2, #0
 800f244:	2104      	movs	r1, #4
 800f246:	6978      	ldr	r0, [r7, #20]
 800f248:	f7f7 fbc3 	bl	80069d2 <mg_call>
    if (c->is_tls_hs) mg_tls_handshake(c);
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f252:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f256:	b2db      	uxtb	r3, r3
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d002      	beq.n	800f262 <rx_tcp+0xca>
 800f25c:	6978      	ldr	r0, [r7, #20]
 800f25e:	f009 fa01 	bl	8018664 <mg_tls_handshake>
    if (!c->is_tls_hs) c->is_tls = 0;  // user did not call mg_tls_init()
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f268:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	2b00      	cmp	r3, #0
 800f270:	f040 80d3 	bne.w	800f41a <rx_tcp+0x282>
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 800f27a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f27e:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 800f282:	e0ca      	b.n	800f41a <rx_tcp+0x282>
  } else if (c != NULL && c->is_connecting && pkt->tcp->flags != TH_ACK) {
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d019      	beq.n	800f2be <rx_tcp+0x126>
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f290:	f003 0320 	and.w	r3, r3, #32
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d011      	beq.n	800f2be <rx_tcp+0x126>
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f29e:	7b5b      	ldrb	r3, [r3, #13]
 800f2a0:	2b10      	cmp	r3, #16
 800f2a2:	d00c      	beq.n	800f2be <rx_tcp+0x126>
    // mg_hexdump(pkt->raw.buf, pkt->raw.len);
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2a8:	689b      	ldr	r3, [r3, #8]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	9201      	str	r2, [sp, #4]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	9200      	str	r2, [sp, #0]
 800f2b2:	2214      	movs	r2, #20
 800f2b4:	6839      	ldr	r1, [r7, #0]
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f7ff fa68 	bl	800e78c <tx_tcp_pkt>
 800f2bc:	e0ad      	b.n	800f41a <rx_tcp+0x282>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d00b      	beq.n	800f2dc <rx_tcp+0x144>
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2c8:	7b5b      	ldrb	r3, [r3, #13]
 800f2ca:	f003 0304 	and.w	r3, r3, #4
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d004      	beq.n	800f2dc <rx_tcp+0x144>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800f2d2:	4954      	ldr	r1, [pc, #336]	@ (800f424 <rx_tcp+0x28c>)
 800f2d4:	6978      	ldr	r0, [r7, #20]
 800f2d6:	f7f7 fb9d 	bl	8006a14 <mg_error>
 800f2da:	e09e      	b.n	800f41a <rx_tcp+0x282>
  } else if (c != NULL) {
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d011      	beq.n	800f306 <rx_tcp+0x16e>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800f2e2:	693b      	ldr	r3, [r7, #16]
 800f2e4:	2200      	movs	r2, #0
 800f2e6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d103      	bne.n	800f2fc <rx_tcp+0x164>
      settmout(c,
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	6978      	ldr	r0, [r7, #20]
 800f2f8:	f7fd ff06 	bl	800d108 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800f2fc:	6839      	ldr	r1, [r7, #0]
 800f2fe:	6978      	ldr	r0, [r7, #20]
 800f300:	f7ff fcd4 	bl	800ecac <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_VERBOSE(("dropped silently.."));
  }
}
 800f304:	e089      	b.n	800f41a <rx_tcp+0x282>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f30a:	2201      	movs	r2, #1
 800f30c:	6839      	ldr	r1, [r7, #0]
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fe fb22 	bl	800d958 <getpeer>
 800f314:	6178      	str	r0, [r7, #20]
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d10c      	bne.n	800f336 <rx_tcp+0x19e>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	2200      	movs	r2, #0
 800f324:	9201      	str	r2, [sp, #4]
 800f326:	2200      	movs	r2, #0
 800f328:	9200      	str	r2, [sp, #0]
 800f32a:	2214      	movs	r2, #20
 800f32c:	6839      	ldr	r1, [r7, #0]
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f7ff fa2c 	bl	800e78c <tx_tcp_pkt>
}
 800f334:	e071      	b.n	800f41a <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_RST) {
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f33a:	7b5b      	ldrb	r3, [r3, #13]
 800f33c:	f003 0304 	and.w	r3, r3, #4
 800f340:	2b00      	cmp	r3, #0
 800f342:	d00c      	beq.n	800f35e <rx_tcp+0x1c6>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f34a:	f003 0304 	and.w	r3, r3, #4
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	2b00      	cmp	r3, #0
 800f352:	d062      	beq.n	800f41a <rx_tcp+0x282>
 800f354:	4933      	ldr	r1, [pc, #204]	@ (800f424 <rx_tcp+0x28c>)
 800f356:	6978      	ldr	r0, [r7, #20]
 800f358:	f7f7 fb5c 	bl	8006a14 <mg_error>
}
 800f35c:	e05d      	b.n	800f41a <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_SYN) {
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f362:	7b5b      	ldrb	r3, [r3, #13]
 800f364:	f003 0302 	and.w	r3, r3, #2
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d016      	beq.n	800f39a <rx_tcp+0x202>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	b29b      	uxth	r3, r3
 800f374:	4618      	mov	r0, r3
 800f376:	f010 f943 	bl	801f600 <mg_ntohs>
 800f37a:	4603      	mov	r3, r0
 800f37c:	4618      	mov	r0, r3
 800f37e:	f010 f956 	bl	801f62e <mg_ntohl>
 800f382:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800f384:	2300      	movs	r3, #0
 800f386:	9301      	str	r3, [sp, #4]
 800f388:	2300      	movs	r3, #0
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2212      	movs	r2, #18
 800f390:	6839      	ldr	r1, [r7, #0]
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f7ff f9fa 	bl	800e78c <tx_tcp_pkt>
}
 800f398:	e03f      	b.n	800f41a <rx_tcp+0x282>
  } else if (pkt->tcp->flags & TH_FIN) {
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f39e:	7b5b      	ldrb	r3, [r3, #13]
 800f3a0:	f003 0301 	and.w	r3, r3, #1
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d00c      	beq.n	800f3c2 <rx_tcp+0x22a>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	9201      	str	r2, [sp, #4]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	9200      	str	r2, [sp, #0]
 800f3b6:	2211      	movs	r2, #17
 800f3b8:	6839      	ldr	r1, [r7, #0]
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7ff f9e6 	bl	800e78c <tx_tcp_pkt>
}
 800f3c0:	e02b      	b.n	800f41a <rx_tcp+0x282>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3c6:	689b      	ldr	r3, [r3, #8]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f010 f930 	bl	801f62e <mg_ntohl>
 800f3ce:	4604      	mov	r4, r0
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3d4:	881b      	ldrh	r3, [r3, #0]
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f010 f911 	bl	801f600 <mg_ntohs>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	429c      	cmp	r4, r3
 800f3e4:	d104      	bne.n	800f3f0 <rx_tcp+0x258>
    accept_conn(c, pkt);
 800f3e6:	6839      	ldr	r1, [r7, #0]
 800f3e8:	6978      	ldr	r0, [r7, #20]
 800f3ea:	f7ff fa15 	bl	800e818 <accept_conn>
}
 800f3ee:	e014      	b.n	800f41a <rx_tcp+0x282>
  } else if (!c->is_accepted) {  // no peer
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800f3f6:	f003 0304 	and.w	r3, r3, #4
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d10c      	bne.n	800f41a <rx_tcp+0x282>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	2200      	movs	r2, #0
 800f408:	9201      	str	r2, [sp, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	9200      	str	r2, [sp, #0]
 800f40e:	2214      	movs	r2, #20
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7ff f9ba 	bl	800e78c <tx_tcp_pkt>
}
 800f418:	e7ff      	b.n	800f41a <rx_tcp+0x282>
 800f41a:	bf00      	nop
 800f41c:	371c      	adds	r7, #28
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd90      	pop	{r4, r7, pc}
 800f422:	bf00      	nop
 800f424:	08025924 	.word	0x08025924

0800f428 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f42a:	b08b      	sub	sp, #44	@ 0x2c
 800f42c:	af04      	add	r7, sp, #16
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  uint16_t frag = mg_ntohs(pkt->ip->frag);
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	69db      	ldr	r3, [r3, #28]
 800f436:	88db      	ldrh	r3, [r3, #6]
 800f438:	b29b      	uxth	r3, r3
 800f43a:	4618      	mov	r0, r3
 800f43c:	f010 f8e0 	bl	801f600 <mg_ntohs>
 800f440:	4603      	mov	r3, r0
 800f442:	82fb      	strh	r3, [r7, #22]
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800f444:	8afb      	ldrh	r3, [r7, #22]
 800f446:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d104      	bne.n	800f458 <rx_ip+0x30>
 800f44e:	8afb      	ldrh	r3, [r7, #22]
 800f450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f454:	2b00      	cmp	r3, #0
 800f456:	d026      	beq.n	800f4a6 <rx_ip+0x7e>
    if (pkt->ip->proto == 17) pkt->udp = (struct udp *) (pkt->ip + 1);
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	69db      	ldr	r3, [r3, #28]
 800f45c:	7a5b      	ldrb	r3, [r3, #9]
 800f45e:	2b11      	cmp	r3, #17
 800f460:	d105      	bne.n	800f46e <rx_ip+0x46>
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	69db      	ldr	r3, [r3, #28]
 800f466:	f103 0214 	add.w	r2, r3, #20
 800f46a:	683b      	ldr	r3, [r7, #0]
 800f46c:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->ip->proto == 6) pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	69db      	ldr	r3, [r3, #28]
 800f472:	7a5b      	ldrb	r3, [r3, #9]
 800f474:	2b06      	cmp	r3, #6
 800f476:	d105      	bne.n	800f484 <rx_ip+0x5c>
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	69db      	ldr	r3, [r3, #28]
 800f47c:	f103 0214 	add.w	r2, r3, #20
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	629a      	str	r2, [r3, #40]	@ 0x28
    struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f488:	2200      	movs	r2, #0
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7fe fa63 	bl	800d958 <getpeer>
 800f492:	60f8      	str	r0, [r7, #12]
    if (c) mg_error(c, "Received fragmented packet");
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2b00      	cmp	r3, #0
 800f498:	f000 811b 	beq.w	800f6d2 <rx_ip+0x2aa>
 800f49c:	4992      	ldr	r1, [pc, #584]	@ (800f6e8 <rx_ip+0x2c0>)
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f7f7 fab8 	bl	8006a14 <mg_error>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800f4a4:	e115      	b.n	800f6d2 <rx_ip+0x2aa>
  } else if (pkt->ip->proto == 1) {
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	69db      	ldr	r3, [r3, #28]
 800f4aa:	7a5b      	ldrb	r3, [r3, #9]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d116      	bne.n	800f4de <rx_ip+0xb6>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	69db      	ldr	r3, [r3, #28]
 800f4b4:	f103 0214 	add.w	r2, r3, #20
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	2b03      	cmp	r3, #3
 800f4c2:	f240 8108 	bls.w	800f6d6 <rx_ip+0x2ae>
    mkpay(pkt, pkt->icmp + 1);
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4ca:	3304      	adds	r3, #4
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	6838      	ldr	r0, [r7, #0]
 800f4d0:	f7fd fda2 	bl	800d018 <mkpay>
    rx_icmp(ifp, pkt);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f7fe fbc2 	bl	800dc60 <rx_icmp>
 800f4dc:	e100      	b.n	800f6e0 <rx_ip+0x2b8>
  } else if (pkt->ip->proto == 17) {
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	69db      	ldr	r3, [r3, #28]
 800f4e2:	7a5b      	ldrb	r3, [r3, #9]
 800f4e4:	2b11      	cmp	r3, #17
 800f4e6:	f040 808b 	bne.w	800f600 <rx_ip+0x1d8>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	69db      	ldr	r3, [r3, #28]
 800f4ee:	f103 0214 	add.w	r2, r3, #20
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800f4f6:	683b      	ldr	r3, [r7, #0]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	2b07      	cmp	r3, #7
 800f4fc:	f240 80ed 	bls.w	800f6da <rx_ip+0x2b2>
    mkpay(pkt, pkt->udp + 1);
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f504:	3308      	adds	r3, #8
 800f506:	4619      	mov	r1, r3
 800f508:	6838      	ldr	r0, [r7, #0]
 800f50a:	f7fd fd85 	bl	800d018 <mkpay>
    MG_VERBOSE(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800f50e:	4b77      	ldr	r3, [pc, #476]	@ (800f6ec <rx_ip+0x2c4>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2b03      	cmp	r3, #3
 800f514:	dd2d      	ble.n	800f572 <rx_ip+0x14a>
 800f516:	4b76      	ldr	r3, [pc, #472]	@ (800f6f0 <rx_ip+0x2c8>)
 800f518:	f241 3293 	movw	r2, #5011	@ 0x1393
 800f51c:	4975      	ldr	r1, [pc, #468]	@ (800f6f4 <rx_ip+0x2cc>)
 800f51e:	2004      	movs	r0, #4
 800f520:	f7fc ff88 	bl	800c434 <mg_log_prefix>
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	69db      	ldr	r3, [r3, #28]
 800f528:	f103 050c 	add.w	r5, r3, #12
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f530:	881b      	ldrh	r3, [r3, #0]
 800f532:	b29b      	uxth	r3, r3
 800f534:	4618      	mov	r0, r3
 800f536:	f010 f863 	bl	801f600 <mg_ntohs>
 800f53a:	4603      	mov	r3, r0
 800f53c:	461e      	mov	r6, r3
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	69db      	ldr	r3, [r3, #28]
 800f542:	f103 0410 	add.w	r4, r3, #16
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f54a:	885b      	ldrh	r3, [r3, #2]
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	4618      	mov	r0, r3
 800f550:	f010 f856 	bl	801f600 <mg_ntohs>
 800f554:	4603      	mov	r3, r0
 800f556:	461a      	mov	r2, r3
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	9303      	str	r3, [sp, #12]
 800f55e:	9202      	str	r2, [sp, #8]
 800f560:	9401      	str	r4, [sp, #4]
 800f562:	4b65      	ldr	r3, [pc, #404]	@ (800f6f8 <rx_ip+0x2d0>)
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	4633      	mov	r3, r6
 800f568:	462a      	mov	r2, r5
 800f56a:	4963      	ldr	r1, [pc, #396]	@ (800f6f8 <rx_ip+0x2d0>)
 800f56c:	4863      	ldr	r0, [pc, #396]	@ (800f6fc <rx_ip+0x2d4>)
 800f56e:	f7fc ffb1 	bl	800c4d4 <mg_log>
                mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (ifp->enable_dhcp_client && pkt->udp->dport == mg_htons(68)) {
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	7f1b      	ldrb	r3, [r3, #28]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d01c      	beq.n	800f5b4 <rx_ip+0x18c>
 800f57a:	683b      	ldr	r3, [r7, #0]
 800f57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f57e:	885b      	ldrh	r3, [r3, #2]
 800f580:	b29c      	uxth	r4, r3
 800f582:	2044      	movs	r0, #68	@ 0x44
 800f584:	f010 f83c 	bl	801f600 <mg_ntohs>
 800f588:	4603      	mov	r3, r0
 800f58a:	429c      	cmp	r4, r3
 800f58c:	d112      	bne.n	800f5b4 <rx_ip+0x18c>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f592:	f103 0208 	add.w	r2, r3, #8
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f59e:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800f5a2:	4619      	mov	r1, r3
 800f5a4:	6838      	ldr	r0, [r7, #0]
 800f5a6:	f7fd fd37 	bl	800d018 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800f5aa:	6839      	ldr	r1, [r7, #0]
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f7fe fbb3 	bl	800dd18 <rx_dhcp_client>
 800f5b2:	e095      	b.n	800f6e0 <rx_ip+0x2b8>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	7f5b      	ldrb	r3, [r3, #29]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d01c      	beq.n	800f5f6 <rx_ip+0x1ce>
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5c0:	885b      	ldrh	r3, [r3, #2]
 800f5c2:	b29c      	uxth	r4, r3
 800f5c4:	2043      	movs	r0, #67	@ 0x43
 800f5c6:	f010 f81b 	bl	801f600 <mg_ntohs>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	429c      	cmp	r4, r3
 800f5ce:	d112      	bne.n	800f5f6 <rx_ip+0x1ce>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5d4:	f103 0208 	add.w	r2, r3, #8
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	631a      	str	r2, [r3, #48]	@ 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5e0:	f503 738d 	add.w	r3, r3, #282	@ 0x11a
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	6838      	ldr	r0, [r7, #0]
 800f5e8:	f7fd fd16 	bl	800d018 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800f5ec:	6839      	ldr	r1, [r7, #0]
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f7fe fd7a 	bl	800e0e8 <rx_dhcp_server>
 800f5f4:	e074      	b.n	800f6e0 <rx_ip+0x2b8>
    } else {
      rx_udp(ifp, pkt);
 800f5f6:	6839      	ldr	r1, [r7, #0]
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f7fe ff63 	bl	800e4c4 <rx_udp>
 800f5fe:	e06f      	b.n	800f6e0 <rx_ip+0x2b8>
    }
  } else if (pkt->ip->proto == 6) {
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	69db      	ldr	r3, [r3, #28]
 800f604:	7a5b      	ldrb	r3, [r3, #9]
 800f606:	2b06      	cmp	r3, #6
 800f608:	d16a      	bne.n	800f6e0 <rx_ip+0x2b8>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	69db      	ldr	r3, [r3, #28]
 800f60e:	f103 0214 	add.w	r2, r3, #20
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	629a      	str	r2, [r3, #40]	@ 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	2b13      	cmp	r3, #19
 800f61c:	d95f      	bls.n	800f6de <rx_ip+0x2b6>
    mkpay(pkt, pkt->tcp + 1);
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f622:	3314      	adds	r3, #20
 800f624:	4619      	mov	r1, r3
 800f626:	6838      	ldr	r0, [r7, #0]
 800f628:	f7fd fcf6 	bl	800d018 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	69db      	ldr	r3, [r3, #28]
 800f630:	885b      	ldrh	r3, [r3, #2]
 800f632:	b29b      	uxth	r3, r3
 800f634:	4618      	mov	r0, r3
 800f636:	f00f ffe3 	bl	801f600 <mg_ntohs>
 800f63a:	4603      	mov	r3, r0
 800f63c:	82bb      	strh	r3, [r7, #20]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f642:	7b1b      	ldrb	r3, [r3, #12]
 800f644:	091b      	lsrs	r3, r3, #4
 800f646:	b2db      	uxtb	r3, r3
 800f648:	3305      	adds	r3, #5
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	009b      	lsls	r3, r3, #2
 800f64e:	827b      	strh	r3, [r7, #18]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800f650:	8aba      	ldrh	r2, [r7, #20]
 800f652:	8a7b      	ldrh	r3, [r7, #18]
 800f654:	429a      	cmp	r2, r3
 800f656:	d305      	bcc.n	800f664 <rx_ip+0x23c>
 800f658:	8aba      	ldrh	r2, [r7, #20]
 800f65a:	8a7b      	ldrh	r3, [r7, #18]
 800f65c:	1ad3      	subs	r3, r2, r3
 800f65e:	461a      	mov	r2, r3
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	60da      	str	r2, [r3, #12]
    MG_VERBOSE(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800f664:	4b21      	ldr	r3, [pc, #132]	@ (800f6ec <rx_ip+0x2c4>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2b03      	cmp	r3, #3
 800f66a:	dd2d      	ble.n	800f6c8 <rx_ip+0x2a0>
 800f66c:	4b20      	ldr	r3, [pc, #128]	@ (800f6f0 <rx_ip+0x2c8>)
 800f66e:	f241 32a8 	movw	r2, #5032	@ 0x13a8
 800f672:	4920      	ldr	r1, [pc, #128]	@ (800f6f4 <rx_ip+0x2cc>)
 800f674:	2004      	movs	r0, #4
 800f676:	f7fc fedd 	bl	800c434 <mg_log_prefix>
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	69db      	ldr	r3, [r3, #28]
 800f67e:	f103 050c 	add.w	r5, r3, #12
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f686:	881b      	ldrh	r3, [r3, #0]
 800f688:	b29b      	uxth	r3, r3
 800f68a:	4618      	mov	r0, r3
 800f68c:	f00f ffb8 	bl	801f600 <mg_ntohs>
 800f690:	4603      	mov	r3, r0
 800f692:	461e      	mov	r6, r3
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	69db      	ldr	r3, [r3, #28]
 800f698:	f103 0410 	add.w	r4, r3, #16
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f6a0:	885b      	ldrh	r3, [r3, #2]
 800f6a2:	b29b      	uxth	r3, r3
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	f00f ffab 	bl	801f600 <mg_ntohs>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	9303      	str	r3, [sp, #12]
 800f6b4:	9202      	str	r2, [sp, #8]
 800f6b6:	9401      	str	r4, [sp, #4]
 800f6b8:	4b0f      	ldr	r3, [pc, #60]	@ (800f6f8 <rx_ip+0x2d0>)
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	4633      	mov	r3, r6
 800f6be:	462a      	mov	r2, r5
 800f6c0:	490d      	ldr	r1, [pc, #52]	@ (800f6f8 <rx_ip+0x2d0>)
 800f6c2:	480f      	ldr	r0, [pc, #60]	@ (800f700 <rx_ip+0x2d8>)
 800f6c4:	f7fc ff06 	bl	800c4d4 <mg_log>
                mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
                mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800f6c8:	6839      	ldr	r1, [r7, #0]
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	f7ff fd64 	bl	800f198 <rx_tcp>
 800f6d0:	e006      	b.n	800f6e0 <rx_ip+0x2b8>
  if (frag & IP_MORE_FRAGS_MSK || frag & IP_FRAG_OFFSET_MSK) {
 800f6d2:	bf00      	nop
 800f6d4:	e004      	b.n	800f6e0 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800f6d6:	bf00      	nop
 800f6d8:	e002      	b.n	800f6e0 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800f6da:	bf00      	nop
 800f6dc:	e000      	b.n	800f6e0 <rx_ip+0x2b8>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800f6de:	bf00      	nop
  }
}
 800f6e0:	371c      	adds	r7, #28
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	08025930 	.word	0x08025930
 800f6ec:	24000258 	.word	0x24000258
 800f6f0:	08028130 	.word	0x08028130
 800f6f4:	08024478 	.word	0x08024478
 800f6f8:	08010af9 	.word	0x08010af9
 800f6fc:	0802594c 	.word	0x0802594c
 800f700:	08025968 	.word	0x08025968

0800f704 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800f704:	b580      	push	{r7, lr}
 800f706:	b082      	sub	sp, #8
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	799b      	ldrb	r3, [r3, #6]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d004      	beq.n	800f722 <rx_ip6+0x1e>
 800f718:	683b      	ldr	r3, [r7, #0]
 800f71a:	6a1b      	ldr	r3, [r3, #32]
 800f71c:	799b      	ldrb	r3, [r3, #6]
 800f71e:	2b3a      	cmp	r3, #58	@ 0x3a
 800f720:	d115      	bne.n	800f74e <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	6a1b      	ldr	r3, [r3, #32]
 800f726:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	68db      	ldr	r3, [r3, #12]
 800f732:	2b03      	cmp	r3, #3
 800f734:	d922      	bls.n	800f77c <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f73a:	3304      	adds	r3, #4
 800f73c:	4619      	mov	r1, r3
 800f73e:	6838      	ldr	r0, [r7, #0]
 800f740:	f7fd fc6a 	bl	800d018 <mkpay>
    rx_icmp(ifp, pkt);
 800f744:	6839      	ldr	r1, [r7, #0]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f7fe fa8a 	bl	800dc60 <rx_icmp>
 800f74c:	e019      	b.n	800f782 <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	6a1b      	ldr	r3, [r3, #32]
 800f752:	799b      	ldrb	r3, [r3, #6]
 800f754:	2b11      	cmp	r3, #17
 800f756:	d114      	bne.n	800f782 <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	6a1b      	ldr	r3, [r3, #32]
 800f75c:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	2b07      	cmp	r3, #7
 800f76a:	d909      	bls.n	800f780 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f770:	3308      	adds	r3, #8
 800f772:	4619      	mov	r1, r3
 800f774:	6838      	ldr	r0, [r7, #0]
 800f776:	f7fd fc4f 	bl	800d018 <mkpay>
 800f77a:	e002      	b.n	800f782 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800f77c:	bf00      	nop
 800f77e:	e000      	b.n	800f782 <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800f780:	bf00      	nop
  }
}
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800f788:	b590      	push	{r4, r7, lr}
 800f78a:	b093      	sub	sp, #76	@ 0x4c
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	60f8      	str	r0, [r7, #12]
 800f790:	60b9      	str	r1, [r7, #8]
 800f792:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800f794:	f107 0314 	add.w	r3, r7, #20
 800f798:	2234      	movs	r2, #52	@ 0x34
 800f79a:	2100      	movs	r1, #0
 800f79c:	4618      	mov	r0, r3
 800f79e:	f013 fffe 	bl	802379e <memset>
  pkt.raw.buf = (char *) buf;
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	627b      	str	r3, [r7, #36]	@ 0x24
  // mg_hexdump(buf, len > 16 ? 16: len);
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	2b0d      	cmp	r3, #13
 800f7b2:	f240 80df 	bls.w	800f974 <mg_tcpip_rx+0x1ec>
  if (ifp->enable_mac_check &&
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d013      	beq.n	800f7e8 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800f7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	2206      	movs	r2, #6
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	f013 ffbe 	bl	802374a <memcmp>
 800f7ce:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d009      	beq.n	800f7e8 <mg_tcpip_rx+0x60>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800f7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7d6:	2206      	movs	r2, #6
 800f7d8:	4970      	ldr	r1, [pc, #448]	@ (800f99c <mg_tcpip_rx+0x214>)
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f013 ffb5 	bl	802374a <memcmp>
 800f7e0:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f040 80c8 	bne.w	800f978 <mg_tcpip_rx+0x1f0>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d01a      	beq.n	800f828 <mg_tcpip_rx+0xa0>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b04      	cmp	r3, #4
 800f7f6:	d917      	bls.n	800f828 <mg_tcpip_rx+0xa0>
    len -= 4;  // TODO(scaprile): check on bigendian
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	3b04      	subs	r3, #4
 800f7fc:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	68b9      	ldr	r1, [r7, #8]
 800f802:	2000      	movs	r0, #0
 800f804:	f00f fe7c 	bl	801f500 <mg_crc32>
 800f808:	4603      	mov	r3, r0
 800f80a:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800f80c:	68ba      	ldr	r2, [r7, #8]
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4413      	add	r3, r2
 800f812:	4618      	mov	r0, r3
 800f814:	f107 0310 	add.w	r3, r7, #16
 800f818:	2204      	movs	r2, #4
 800f81a:	4619      	mov	r1, r3
 800f81c:	f013 ff95 	bl	802374a <memcmp>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	f040 80aa 	bne.w	800f97c <mg_tcpip_rx+0x1f4>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800f828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f82a:	899b      	ldrh	r3, [r3, #12]
 800f82c:	b29c      	uxth	r4, r3
 800f82e:	f640 0006 	movw	r0, #2054	@ 0x806
 800f832:	f00f fee5 	bl	801f600 <mg_ntohs>
 800f836:	4603      	mov	r3, r0
 800f838:	429c      	cmp	r4, r3
 800f83a:	d114      	bne.n	800f866 <mg_tcpip_rx+0xde>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800f83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f83e:	330e      	adds	r3, #14
 800f840:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	2b29      	cmp	r3, #41	@ 0x29
 800f846:	f240 809b 	bls.w	800f980 <mg_tcpip_rx+0x1f8>
    mg_tcpip_call(ifp, MG_TCPIP_EV_ARP, &pkt.raw);
 800f84a:	f107 0314 	add.w	r3, r7, #20
 800f84e:	461a      	mov	r2, r3
 800f850:	2103      	movs	r1, #3
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	f7fd fbcc 	bl	800cff0 <mg_tcpip_call>
    rx_arp(ifp, &pkt);
 800f858:	f107 0314 	add.w	r3, r7, #20
 800f85c:	4619      	mov	r1, r3
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7fe f8ec 	bl	800da3c <rx_arp>
 800f864:	e097      	b.n	800f996 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800f866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f868:	899b      	ldrh	r3, [r3, #12]
 800f86a:	b29c      	uxth	r4, r3
 800f86c:	f248 60dd 	movw	r0, #34525	@ 0x86dd
 800f870:	f00f fec6 	bl	801f600 <mg_ntohs>
 800f874:	4603      	mov	r3, r0
 800f876:	429c      	cmp	r4, r3
 800f878:	d11b      	bne.n	800f8b2 <mg_tcpip_rx+0x12a>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800f87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f87c:	330e      	adds	r3, #14
 800f87e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	2b35      	cmp	r3, #53	@ 0x35
 800f884:	d97e      	bls.n	800f984 <mg_tcpip_rx+0x1fc>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800f886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f888:	781b      	ldrb	r3, [r3, #0]
 800f88a:	091b      	lsrs	r3, r3, #4
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	2b06      	cmp	r3, #6
 800f890:	d17a      	bne.n	800f988 <mg_tcpip_rx+0x200>
    mkpay(&pkt, pkt.ip6 + 1);
 800f892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f894:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800f898:	f107 0314 	add.w	r3, r7, #20
 800f89c:	4611      	mov	r1, r2
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fd fbba 	bl	800d018 <mkpay>
    rx_ip6(ifp, &pkt);
 800f8a4:	f107 0314 	add.w	r3, r7, #20
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f7ff ff2a 	bl	800f704 <rx_ip6>
 800f8b0:	e071      	b.n	800f996 <mg_tcpip_rx+0x20e>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800f8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b4:	899b      	ldrh	r3, [r3, #12]
 800f8b6:	b29c      	uxth	r4, r3
 800f8b8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800f8bc:	f00f fea0 	bl	801f600 <mg_ntohs>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	429c      	cmp	r4, r3
 800f8c4:	d133      	bne.n	800f92e <mg_tcpip_rx+0x1a6>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800f8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c8:	330e      	adds	r3, #14
 800f8ca:	633b      	str	r3, [r7, #48]	@ 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800f8cc:	69bb      	ldr	r3, [r7, #24]
 800f8ce:	2b21      	cmp	r3, #33	@ 0x21
 800f8d0:	d95c      	bls.n	800f98c <mg_tcpip_rx+0x204>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800f8d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8d4:	885b      	ldrh	r3, [r3, #2]
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f00f fe91 	bl	801f600 <mg_ntohs>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	f103 020e 	add.w	r2, r3, #14
 800f8e4:	69bb      	ldr	r3, [r7, #24]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d208      	bcs.n	800f8fc <mg_tcpip_rx+0x174>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800f8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ec:	885b      	ldrh	r3, [r3, #2]
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f00f fe85 	bl	801f600 <mg_ntohs>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	330e      	adds	r3, #14
 800f8fa:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800f8fc:	69bb      	ldr	r3, [r7, #24]
 800f8fe:	2b21      	cmp	r3, #33	@ 0x21
 800f900:	d946      	bls.n	800f990 <mg_tcpip_rx+0x208>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800f902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f904:	781b      	ldrb	r3, [r3, #0]
 800f906:	091b      	lsrs	r3, r3, #4
 800f908:	b2db      	uxtb	r3, r3
 800f90a:	2b04      	cmp	r3, #4
 800f90c:	d142      	bne.n	800f994 <mg_tcpip_rx+0x20c>
    mkpay(&pkt, pkt.ip + 1);
 800f90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f910:	f103 0214 	add.w	r2, r3, #20
 800f914:	f107 0314 	add.w	r3, r7, #20
 800f918:	4611      	mov	r1, r2
 800f91a:	4618      	mov	r0, r3
 800f91c:	f7fd fb7c 	bl	800d018 <mkpay>
    rx_ip(ifp, &pkt);
 800f920:	f107 0314 	add.w	r3, r7, #20
 800f924:	4619      	mov	r1, r3
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	f7ff fd7e 	bl	800f428 <rx_ip>
 800f92c:	e033      	b.n	800f996 <mg_tcpip_rx+0x20e>
  } else {
    MG_DEBUG(("Unknown eth type %x", mg_htons(pkt.eth->type)));
 800f92e:	4b1c      	ldr	r3, [pc, #112]	@ (800f9a0 <mg_tcpip_rx+0x218>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b02      	cmp	r3, #2
 800f934:	dd11      	ble.n	800f95a <mg_tcpip_rx+0x1d2>
 800f936:	4b1b      	ldr	r3, [pc, #108]	@ (800f9a4 <mg_tcpip_rx+0x21c>)
 800f938:	f241 32e7 	movw	r2, #5095	@ 0x13e7
 800f93c:	491a      	ldr	r1, [pc, #104]	@ (800f9a8 <mg_tcpip_rx+0x220>)
 800f93e:	2003      	movs	r0, #3
 800f940:	f7fc fd78 	bl	800c434 <mg_log_prefix>
 800f944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f946:	899b      	ldrh	r3, [r3, #12]
 800f948:	b29b      	uxth	r3, r3
 800f94a:	4618      	mov	r0, r3
 800f94c:	f00f fe58 	bl	801f600 <mg_ntohs>
 800f950:	4603      	mov	r3, r0
 800f952:	4619      	mov	r1, r3
 800f954:	4815      	ldr	r0, [pc, #84]	@ (800f9ac <mg_tcpip_rx+0x224>)
 800f956:	f7fc fdbd 	bl	800c4d4 <mg_log>
    if (mg_log_level >= MG_LL_VERBOSE) mg_hexdump(buf, len >= 32 ? 32 : len);
 800f95a:	4b11      	ldr	r3, [pc, #68]	@ (800f9a0 <mg_tcpip_rx+0x218>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2b03      	cmp	r3, #3
 800f960:	dd19      	ble.n	800f996 <mg_tcpip_rx+0x20e>
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2b20      	cmp	r3, #32
 800f966:	bf28      	it	cs
 800f968:	2320      	movcs	r3, #32
 800f96a:	4619      	mov	r1, r3
 800f96c:	68b8      	ldr	r0, [r7, #8]
 800f96e:	f7fc fde7 	bl	800c540 <mg_hexdump>
 800f972:	e010      	b.n	800f996 <mg_tcpip_rx+0x20e>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800f974:	bf00      	nop
 800f976:	e00e      	b.n	800f996 <mg_tcpip_rx+0x20e>
    return;
 800f978:	bf00      	nop
 800f97a:	e00c      	b.n	800f996 <mg_tcpip_rx+0x20e>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800f97c:	bf00      	nop
 800f97e:	e00a      	b.n	800f996 <mg_tcpip_rx+0x20e>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800f980:	bf00      	nop
 800f982:	e008      	b.n	800f996 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800f984:	bf00      	nop
 800f986:	e006      	b.n	800f996 <mg_tcpip_rx+0x20e>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800f988:	bf00      	nop
 800f98a:	e004      	b.n	800f996 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800f98c:	bf00      	nop
 800f98e:	e002      	b.n	800f996 <mg_tcpip_rx+0x20e>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800f990:	bf00      	nop
 800f992:	e000      	b.n	800f996 <mg_tcpip_rx+0x20e>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800f994:	bf00      	nop
  }
}
 800f996:	374c      	adds	r7, #76	@ 0x4c
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd90      	pop	{r4, r7, pc}
 800f99c:	08027b8c 	.word	0x08027b8c
 800f9a0:	24000258 	.word	0x24000258
 800f9a4:	08028138 	.word	0x08028138
 800f9a8:	08024478 	.word	0x08024478
 800f9ac:	08025984 	.word	0x08025984

0800f9b0 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t now) {
 800f9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9b2:	b095      	sub	sp, #84	@ 0x54
 800f9b4:	af06      	add	r7, sp, #24
 800f9b6:	6178      	str	r0, [r7, #20]
 800f9b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  struct mg_connection *c;
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, now);
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 800f9c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f9c6:	e9cd 2300 	strd	r2, r3, [sp]
 800f9ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f9ce:	f04f 0300 	mov.w	r3, #0
 800f9d2:	4608      	mov	r0, r1
 800f9d4:	f005 f852 	bl	8014a7c <mg_timer_expired>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  ifp->now = now;
 800f9de:	6979      	ldr	r1, [r7, #20]
 800f9e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f9e4:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
             names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
             ifp->ndrop, ifp->nerr));
#endif
  }
  // Handle gw ARP request timeout, order is important
  if (expired_1000ms && ifp->state == MG_TCPIP_STATE_IP) {
 800f9e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d00b      	beq.n	800fa08 <mg_tcpip_poll+0x58>
 800f9f0:	697b      	ldr	r3, [r7, #20]
 800f9f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9f6:	2b03      	cmp	r3, #3
 800f9f8:	d106      	bne.n	800fa08 <mg_tcpip_poll+0x58>
    ifp->state = MG_TCPIP_STATE_READY;  // keep best-effort MAC
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	2204      	movs	r2, #4
 800f9fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    onstatechange(ifp);
 800fa02:	6978      	ldr	r0, [r7, #20]
 800fa04:	f7fd fc68 	bl	800d2d8 <onstatechange>
  }
  // poll driver
  if (ifp->driver->poll) {
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa0c:	68db      	ldr	r3, [r3, #12]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d075      	beq.n	800fafe <mg_tcpip_poll+0x14e>
    bool up = ifp->driver->poll(ifp, expired_1000ms);
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800fa1c:	4611      	mov	r1, r2
 800fa1e:	6978      	ldr	r0, [r7, #20]
 800fa20:	4798      	blx	r3
 800fa22:	4603      	mov	r3, r0
 800fa24:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    // Handle physical interface up/down status
    if (expired_1000ms) {
 800fa28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d066      	beq.n	800fafe <mg_tcpip_poll+0x14e>
      bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	bf14      	ite	ne
 800fa3a:	2301      	movne	r3, #1
 800fa3c:	2300      	moveq	r3, #0
 800fa3e:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800fa42:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800fa46:	f083 0301 	eor.w	r3, r3, #1
 800fa4a:	b2db      	uxtb	r3, r3
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d006      	beq.n	800fa5e <mg_tcpip_poll+0xae>
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	7f1b      	ldrb	r3, [r3, #28]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d002      	beq.n	800fa5e <mg_tcpip_poll+0xae>
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	609a      	str	r2, [r3, #8]
      if (up != current) {  // link state has changed
 800fa5e:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800fa62:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d01a      	beq.n	800faa0 <mg_tcpip_poll+0xf0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800fa6a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800fa6e:	f083 0301 	eor.w	r3, r3, #1
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d001      	beq.n	800fa7c <mg_tcpip_poll+0xcc>
 800fa78:	2300      	movs	r3, #0
 800fa7a:	e00a      	b.n	800fa92 <mg_tcpip_poll+0xe2>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	7f1b      	ldrb	r3, [r3, #28]
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d103      	bne.n	800fa8c <mg_tcpip_poll+0xdc>
                     : ifp->enable_dhcp_client || ifp->ip == 0
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	689b      	ldr	r3, [r3, #8]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d101      	bne.n	800fa90 <mg_tcpip_poll+0xe0>
        ifp->state = up == false ? MG_TCPIP_STATE_DOWN
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	e000      	b.n	800fa92 <mg_tcpip_poll+0xe2>
 800fa90:	2303      	movs	r3, #3
 800fa92:	697a      	ldr	r2, [r7, #20]
 800fa94:	f882 3084 	strb.w	r3, [r2, #132]	@ 0x84
                         ? MG_TCPIP_STATE_UP
                         : MG_TCPIP_STATE_IP;
        onstatechange(ifp);
 800fa98:	6978      	ldr	r0, [r7, #20]
 800fa9a:	f7fd fc1d 	bl	800d2d8 <onstatechange>
 800fa9e:	e016      	b.n	800face <mg_tcpip_poll+0x11e>
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	7f1b      	ldrb	r3, [r3, #28]
 800faa4:	f083 0301 	eor.w	r3, r3, #1
 800faa8:	b2db      	uxtb	r3, r3
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d00f      	beq.n	800face <mg_tcpip_poll+0x11e>
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d10a      	bne.n	800face <mg_tcpip_poll+0x11e>
                 ifp->ip) {
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	689b      	ldr	r3, [r3, #8]
      } else if (!ifp->enable_dhcp_client && ifp->state == MG_TCPIP_STATE_UP &&
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d006      	beq.n	800face <mg_tcpip_poll+0x11e>
        ifp->state = MG_TCPIP_STATE_IP;  // ifp->fn has set an IP
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	2203      	movs	r2, #3
 800fac4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
        onstatechange(ifp);
 800fac8:	6978      	ldr	r0, [r7, #20]
 800faca:	f7fd fc05 	bl	800d2d8 <onstatechange>
      }
      if (ifp->state == MG_TCPIP_STATE_DOWN) MG_ERROR(("Network is down"));
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d10d      	bne.n	800faf4 <mg_tcpip_poll+0x144>
 800fad8:	4ba4      	ldr	r3, [pc, #656]	@ (800fd6c <mg_tcpip_poll+0x3bc>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	dd09      	ble.n	800faf4 <mg_tcpip_poll+0x144>
 800fae0:	4ba3      	ldr	r3, [pc, #652]	@ (800fd70 <mg_tcpip_poll+0x3c0>)
 800fae2:	f241 4210 	movw	r2, #5136	@ 0x1410
 800fae6:	49a3      	ldr	r1, [pc, #652]	@ (800fd74 <mg_tcpip_poll+0x3c4>)
 800fae8:	2001      	movs	r0, #1
 800faea:	f7fc fca3 	bl	800c434 <mg_log_prefix>
 800faee:	48a2      	ldr	r0, [pc, #648]	@ (800fd78 <mg_tcpip_poll+0x3c8>)
 800faf0:	f7fc fcf0 	bl	800c4d4 <mg_log>
      mg_tcpip_call(ifp, MG_TCPIP_EV_TIMER_1S, NULL);
 800faf4:	2200      	movs	r2, #0
 800faf6:	2104      	movs	r1, #4
 800faf8:	6978      	ldr	r0, [r7, #20]
 800fafa:	f7fd fa79 	bl	800cff0 <mg_tcpip_call>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f000 81a5 	beq.w	800fe54 <mg_tcpip_poll+0x4a4>

  // DHCP RFC-2131 (4.4)
  if (ifp->enable_dhcp_client && expired_1000ms) {
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	7f1b      	ldrb	r3, [r3, #28]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d055      	beq.n	800fbbe <mg_tcpip_poll+0x20e>
 800fb12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d051      	beq.n	800fbbe <mg_tcpip_poll+0x20e>
    if (ifp->state == MG_TCPIP_STATE_UP) {
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d103      	bne.n	800fb2c <mg_tcpip_poll+0x17c>
      tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800fb24:	6978      	ldr	r0, [r7, #20]
 800fb26:	f7fd fedb 	bl	800d8e0 <tx_dhcp_discover>
 800fb2a:	e048      	b.n	800fbbe <mg_tcpip_poll+0x20e>
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fb32:	2b04      	cmp	r3, #4
 800fb34:	d143      	bne.n	800fbbe <mg_tcpip_poll+0x20e>
               ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800fb36:	697b      	ldr	r3, [r7, #20]
 800fb38:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
    } else if (ifp->state == MG_TCPIP_STATE_READY &&
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	d03e      	beq.n	800fbbe <mg_tcpip_poll+0x20e>
      if (ifp->now >= ifp->lease_expire) {
 800fb40:	697b      	ldr	r3, [r7, #20]
 800fb42:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800fb4c:	4290      	cmp	r0, r2
 800fb4e:	eb71 0303 	sbcs.w	r3, r1, r3
 800fb52:	d30a      	bcc.n	800fb6a <mg_tcpip_poll+0x1ba>
        ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	2201      	movs	r2, #1
 800fb58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	609a      	str	r2, [r3, #8]
        onstatechange(ifp);
 800fb62:	6978      	ldr	r0, [r7, #20]
 800fb64:	f7fd fbb8 	bl	800d2d8 <onstatechange>
 800fb68:	e029      	b.n	800fbbe <mg_tcpip_poll+0x20e>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800fb70:	4982      	ldr	r1, [pc, #520]	@ (800fd7c <mg_tcpip_poll+0x3cc>)
 800fb72:	1854      	adds	r4, r2, r1
 800fb74:	f143 0500 	adc.w	r5, r3, #0
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800fb7e:	42a2      	cmp	r2, r4
 800fb80:	41ab      	sbcs	r3, r5
 800fb82:	d21c      	bcs.n	800fbbe <mg_tcpip_poll+0x20e>
                 ((ifp->now / 1000) % 60) == 0) {
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800fb8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800fb8e:	f04f 0300 	mov.w	r3, #0
 800fb92:	f7f0 fc25 	bl	80003e0 <__aeabi_uldivmod>
 800fb96:	4602      	mov	r2, r0
 800fb98:	460b      	mov	r3, r1
 800fb9a:	4610      	mov	r0, r2
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	f04f 023c 	mov.w	r2, #60	@ 0x3c
 800fba2:	f04f 0300 	mov.w	r3, #0
 800fba6:	f7f0 fc1b 	bl	80003e0 <__aeabi_uldivmod>
      } else if (ifp->now + 30UL * 60UL * 1000UL > ifp->lease_expire &&
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	d107      	bne.n	800fbbe <mg_tcpip_poll+0x20e>
        // hack: 30 min before deadline, try to rebind (4.3.6) every min
        tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800fbae:	697b      	ldr	r3, [r7, #20]
 800fbb0:	689a      	ldr	r2, [r3, #8]
 800fbb2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbb6:	4972      	ldr	r1, [pc, #456]	@ (800fd80 <mg_tcpip_poll+0x3d0>)
 800fbb8:	6978      	ldr	r0, [r7, #20]
 800fbba:	f7fd fe5f 	bl	800d87c <tx_dhcp_request_re>
      }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
    }
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Simple polling driver, returns one frame
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d019      	beq.n	800fbfc <mg_tcpip_poll+0x24c>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	697a      	ldr	r2, [r7, #20]
 800fbd0:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	4798      	blx	r3
 800fbda:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (len > 0) {
 800fbdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d024      	beq.n	800fc2c <mg_tcpip_poll+0x27c>
      ifp->nrecv++;
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fbe6:	1c5a      	adds	r2, r3, #1
 800fbe8:	697b      	ldr	r3, [r7, #20]
 800fbea:	679a      	str	r2, [r3, #120]	@ 0x78
      mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800fbec:	697b      	ldr	r3, [r7, #20]
 800fbee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbf2:	4619      	mov	r1, r3
 800fbf4:	6978      	ldr	r0, [r7, #20]
 800fbf6:	f7ff fdc7 	bl	800f788 <mg_tcpip_rx>
 800fbfa:	e017      	b.n	800fc2c <mg_tcpip_poll+0x27c>
    }
  } else {  // Complex poll / Interrupt-based driver. Queues recvd frames
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	3334      	adds	r3, #52	@ 0x34
 800fc00:	f107 0220 	add.w	r2, r7, #32
 800fc04:	4611      	mov	r1, r2
 800fc06:	4618      	mov	r0, r3
 800fc08:	f001 f9a4 	bl	8010f54 <mg_queue_next>
 800fc0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (len > 0) {
 800fc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00b      	beq.n	800fc2c <mg_tcpip_poll+0x27c>
      mg_tcpip_rx(ifp, buf, len);
 800fc14:	6a3b      	ldr	r3, [r7, #32]
 800fc16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc18:	4619      	mov	r1, r3
 800fc1a:	6978      	ldr	r0, [r7, #20]
 800fc1c:	f7ff fdb4 	bl	800f788 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	3334      	adds	r3, #52	@ 0x34
 800fc24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc26:	4618      	mov	r0, r3
 800fc28:	f001 fa12 	bl	8011050 <mg_queue_del>
    }
  }

  // Process timeouts
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800fc2c:	697b      	ldr	r3, [r7, #20]
 800fc2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc34:	e109      	b.n	800fe4a <mg_tcpip_poll+0x49a>
    if ((c->is_udp && !c->is_arplooking) || c->is_listening || c->is_resolving)
 800fc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc38:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800fc3c:	f003 0301 	and.w	r3, r3, #1
 800fc40:	b2db      	uxtb	r3, r3
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d008      	beq.n	800fc58 <mg_tcpip_poll+0x2a8>
 800fc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc48:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fc4c:	f003 0310 	and.w	r3, r3, #16
 800fc50:	b2db      	uxtb	r3, r3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 80f3 	beq.w	800fe3e <mg_tcpip_poll+0x48e>
 800fc58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc5a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fc5e:	f003 0301 	and.w	r3, r3, #1
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f040 80ea 	bne.w	800fe3e <mg_tcpip_poll+0x48e>
 800fc6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc6c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800fc70:	f003 0308 	and.w	r3, r3, #8
 800fc74:	b2db      	uxtb	r3, r3
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f040 80e1 	bne.w	800fe3e <mg_tcpip_poll+0x48e>
      continue;
    struct connstate *s = (struct connstate *) (c + 1);
 800fc7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc7e:	33b0      	adds	r3, #176	@ 0xb0
 800fc80:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800fc82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc84:	331c      	adds	r3, #28
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	61fb      	str	r3, [r7, #28]
    if (ifp->now > s->timer) {
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 800fc90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fc92:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800fc96:	4290      	cmp	r0, r2
 800fc98:	eb71 0303 	sbcs.w	r3, r1, r3
 800fc9c:	f080 80d2 	bcs.w	800fe44 <mg_tcpip_poll+0x494>
      if (s->ttype == MIP_TTYPE_ARP) {
 800fca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fca6:	2b02      	cmp	r3, #2
 800fca8:	d104      	bne.n	800fcb4 <mg_tcpip_poll+0x304>
        mg_error(c, "ARP timeout");
 800fcaa:	4936      	ldr	r1, [pc, #216]	@ (800fd84 <mg_tcpip_poll+0x3d4>)
 800fcac:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fcae:	f7f6 feb1 	bl	8006a14 <mg_error>
 800fcb2:	e0bf      	b.n	800fe34 <mg_tcpip_poll+0x484>
      } else if (c->is_udp) {
 800fcb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcb6:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800fcba:	f003 0301 	and.w	r3, r3, #1
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	f040 80be 	bne.w	800fe42 <mg_tcpip_poll+0x492>
        continue;
      } else if (s->ttype == MIP_TTYPE_ACK && s->acked != s->ack) {
 800fcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d142      	bne.n	800fd56 <mg_tcpip_poll+0x3a6>
 800fcd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd2:	691a      	ldr	r2, [r3, #16]
 800fcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d03c      	beq.n	800fd56 <mg_tcpip_poll+0x3a6>
        MG_VERBOSE(("%lu ack %x %x", c->id, s->seq, s->ack));
 800fcdc:	4b23      	ldr	r3, [pc, #140]	@ (800fd6c <mg_tcpip_poll+0x3bc>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	2b03      	cmp	r3, #3
 800fce2:	dd0f      	ble.n	800fd04 <mg_tcpip_poll+0x354>
 800fce4:	4b22      	ldr	r3, [pc, #136]	@ (800fd70 <mg_tcpip_poll+0x3c0>)
 800fce6:	f241 4245 	movw	r2, #5189	@ 0x1445
 800fcea:	4922      	ldr	r1, [pc, #136]	@ (800fd74 <mg_tcpip_poll+0x3c4>)
 800fcec:	2004      	movs	r0, #4
 800fcee:	f7fc fba1 	bl	800c434 <mg_log_prefix>
 800fcf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcf4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800fcf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	4822      	ldr	r0, [pc, #136]	@ (800fd88 <mg_tcpip_poll+0x3d8>)
 800fd00:	f7fc fbe8 	bl	800c4d4 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800fd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd06:	f103 061a 	add.w	r6, r3, #26
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	613b      	str	r3, [r7, #16]
 800fd0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd10:	8b1c      	ldrh	r4, [r3, #24]
 800fd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd14:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 800fd16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f00f fc87 	bl	801f62e <mg_ntohl>
 800fd20:	6078      	str	r0, [r7, #4]
 800fd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd24:	685b      	ldr	r3, [r3, #4]
 800fd26:	4618      	mov	r0, r3
 800fd28:	f00f fc81 	bl	801f62e <mg_ntohl>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2200      	movs	r2, #0
 800fd30:	9205      	str	r2, [sp, #20]
 800fd32:	2200      	movs	r2, #0
 800fd34:	9204      	str	r2, [sp, #16]
 800fd36:	9303      	str	r3, [sp, #12]
 800fd38:	6879      	ldr	r1, [r7, #4]
 800fd3a:	9102      	str	r1, [sp, #8]
 800fd3c:	9501      	str	r5, [sp, #4]
 800fd3e:	9400      	str	r4, [sp, #0]
 800fd40:	2310      	movs	r3, #16
 800fd42:	693a      	ldr	r2, [r7, #16]
 800fd44:	4631      	mov	r1, r6
 800fd46:	6978      	ldr	r0, [r7, #20]
 800fd48:	f7fe fc2e 	bl	800e5a8 <tx_tcp>
               mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
        s->acked = s->ack;
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd52:	611a      	str	r2, [r3, #16]
 800fd54:	e06e      	b.n	800fe34 <mg_tcpip_poll+0x484>
      } else if (s->ttype == MIP_TTYPE_SYN) {
 800fd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd58:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fd5c:	2b03      	cmp	r3, #3
 800fd5e:	d117      	bne.n	800fd90 <mg_tcpip_poll+0x3e0>
        mg_error(c, "Connection timeout");
 800fd60:	490a      	ldr	r1, [pc, #40]	@ (800fd8c <mg_tcpip_poll+0x3dc>)
 800fd62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fd64:	f7f6 fe56 	bl	8006a14 <mg_error>
 800fd68:	e064      	b.n	800fe34 <mg_tcpip_poll+0x484>
 800fd6a:	bf00      	nop
 800fd6c:	24000258 	.word	0x24000258
 800fd70:	08028144 	.word	0x08028144
 800fd74:	08024478 	.word	0x08024478
 800fd78:	08025998 	.word	0x08025998
 800fd7c:	001b7740 	.word	0x001b7740
 800fd80:	08027b8c 	.word	0x08027b8c
 800fd84:	080259a8 	.word	0x080259a8
 800fd88:	080259b4 	.word	0x080259b4
 800fd8c:	080259c4 	.word	0x080259c4
      } else if (s->ttype == MIP_TTYPE_FIN) {
 800fd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd92:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fd96:	2b04      	cmp	r3, #4
 800fd98:	d107      	bne.n	800fdaa <mg_tcpip_poll+0x3fa>
        c->is_closing = 1;
 800fd9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fd9c:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 800fda0:	f043 0320 	orr.w	r3, r3, #32
 800fda4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        continue;
 800fda8:	e04c      	b.n	800fe44 <mg_tcpip_poll+0x494>
      } else {
        if (s->tmiss++ > 2) {
 800fdaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800fdb0:	1c5a      	adds	r2, r3, #1
 800fdb2:	b2d1      	uxtb	r1, r2
 800fdb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdb6:	f882 1021 	strb.w	r1, [r2, #33]	@ 0x21
 800fdba:	2b02      	cmp	r3, #2
 800fdbc:	d904      	bls.n	800fdc8 <mg_tcpip_poll+0x418>
          mg_error(c, "keepalive");
 800fdbe:	4927      	ldr	r1, [pc, #156]	@ (800fe5c <mg_tcpip_poll+0x4ac>)
 800fdc0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fdc2:	f7f6 fe27 	bl	8006a14 <mg_error>
 800fdc6:	e035      	b.n	800fe34 <mg_tcpip_poll+0x484>
        } else {
          MG_VERBOSE(("%lu keepalive", c->id));
 800fdc8:	4b25      	ldr	r3, [pc, #148]	@ (800fe60 <mg_tcpip_poll+0x4b0>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	2b03      	cmp	r3, #3
 800fdce:	dd0c      	ble.n	800fdea <mg_tcpip_poll+0x43a>
 800fdd0:	4b24      	ldr	r3, [pc, #144]	@ (800fe64 <mg_tcpip_poll+0x4b4>)
 800fdd2:	f241 4252 	movw	r2, #5202	@ 0x1452
 800fdd6:	4924      	ldr	r1, [pc, #144]	@ (800fe68 <mg_tcpip_poll+0x4b8>)
 800fdd8:	2004      	movs	r0, #4
 800fdda:	f7fc fb2b 	bl	800c434 <mg_log_prefix>
 800fdde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fde0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fde2:	4619      	mov	r1, r3
 800fde4:	4821      	ldr	r0, [pc, #132]	@ (800fe6c <mg_tcpip_poll+0x4bc>)
 800fde6:	f7fc fb75 	bl	800c4d4 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800fdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdec:	f103 061a 	add.w	r6, r3, #26
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	613b      	str	r3, [r7, #16]
 800fdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdf6:	8b1c      	ldrh	r4, [r3, #24]
 800fdf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdfa:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), NULL, 0);
 800fdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdfe:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800fe00:	3b01      	subs	r3, #1
 800fe02:	4618      	mov	r0, r3
 800fe04:	f00f fc13 	bl	801f62e <mg_ntohl>
 800fe08:	6078      	str	r0, [r7, #4]
 800fe0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe0c:	685b      	ldr	r3, [r3, #4]
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f00f fc0d 	bl	801f62e <mg_ntohl>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2200      	movs	r2, #0
 800fe18:	9205      	str	r2, [sp, #20]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	9204      	str	r2, [sp, #16]
 800fe1e:	9303      	str	r3, [sp, #12]
 800fe20:	6879      	ldr	r1, [r7, #4]
 800fe22:	9102      	str	r1, [sp, #8]
 800fe24:	9501      	str	r5, [sp, #4]
 800fe26:	9400      	str	r4, [sp, #0]
 800fe28:	2310      	movs	r3, #16
 800fe2a:	693a      	ldr	r2, [r7, #16]
 800fe2c:	4631      	mov	r1, r6
 800fe2e:	6978      	ldr	r0, [r7, #20]
 800fe30:	f7fe fbba 	bl	800e5a8 <tx_tcp>
        }
      }

      settmout(c, MIP_TTYPE_KEEPALIVE);
 800fe34:	2100      	movs	r1, #0
 800fe36:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800fe38:	f7fd f966 	bl	800d108 <settmout>
 800fe3c:	e002      	b.n	800fe44 <mg_tcpip_poll+0x494>
      continue;
 800fe3e:	bf00      	nop
 800fe40:	e000      	b.n	800fe44 <mg_tcpip_poll+0x494>
        continue;
 800fe42:	bf00      	nop
  for (c = ifp->mgr->conns; c != NULL; c = c->next) {
 800fe44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	637b      	str	r3, [r7, #52]	@ 0x34
 800fe4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f47f aef2 	bne.w	800fc36 <mg_tcpip_poll+0x286>
 800fe52:	e000      	b.n	800fe56 <mg_tcpip_poll+0x4a6>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800fe54:	bf00      	nop
    }
  }
}
 800fe56:	373c      	adds	r7, #60	@ 0x3c
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe5c:	080259d8 	.word	0x080259d8
 800fe60:	24000258 	.word	0x24000258
 800fe64:	08028144 	.word	0x08028144
 800fe68:	08024478 	.word	0x08024478
 800fe6c:	080259e4 	.word	0x080259e4

0800fe70 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b086      	sub	sp, #24
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	60f8      	str	r0, [r7, #12]
 800fe78:	60b9      	str	r1, [r7, #8]
 800fe7a:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	3334      	adds	r3, #52	@ 0x34
 800fe80:	f107 0114 	add.w	r1, r7, #20
 800fe84:	68ba      	ldr	r2, [r7, #8]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f001 f80c 	bl	8010ea4 <mg_queue_book>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d811      	bhi.n	800feb8 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	68ba      	ldr	r2, [r7, #8]
 800fe98:	68f9      	ldr	r1, [r7, #12]
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f013 fdb5 	bl	8023a0a <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	3334      	adds	r3, #52	@ 0x34
 800fea4:	68b9      	ldr	r1, [r7, #8]
 800fea6:	4618      	mov	r0, r3
 800fea8:	f001 f89a 	bl	8010fe0 <mg_queue_add>
    ifp->nrecv++;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800feb0:	1c5a      	adds	r2, r3, #1
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	679a      	str	r2, [r3, #120]	@ 0x78
  } else {
    ifp->ndrop++;
  }
}
 800feb6:	e004      	b.n	800fec2 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fec2:	bf00      	nop
 800fec4:	3718      	adds	r7, #24
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
	...

0800fecc <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800fecc:	b580      	push	{r7, lr}
 800fece:	b084      	sub	sp, #16
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d12d      	bne.n	800ff3a <mg_tcpip_init+0x6e>
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	785b      	ldrb	r3, [r3, #1]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d129      	bne.n	800ff3a <mg_tcpip_init+0x6e>
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	789b      	ldrb	r3, [r3, #2]
 800feea:	2b00      	cmp	r3, #0
 800feec:	d125      	bne.n	800ff3a <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d121      	bne.n	800ff3a <mg_tcpip_init+0x6e>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	791b      	ldrb	r3, [r3, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d11d      	bne.n	800ff3a <mg_tcpip_init+0x6e>
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	795b      	ldrb	r3, [r3, #5]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d119      	bne.n	800ff3a <mg_tcpip_init+0x6e>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	2202      	movs	r2, #2
 800ff0a:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800ff0c:	683b      	ldr	r3, [r7, #0]
 800ff0e:	3301      	adds	r3, #1
 800ff10:	2105      	movs	r1, #5
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7f0 fbfa 	bl	800070c <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800ff18:	4b59      	ldr	r3, [pc, #356]	@ (8010080 <mg_tcpip_init+0x1b4>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	dd0c      	ble.n	800ff3a <mg_tcpip_init+0x6e>
 800ff20:	4b58      	ldr	r3, [pc, #352]	@ (8010084 <mg_tcpip_init+0x1b8>)
 800ff22:	f241 4271 	movw	r2, #5233	@ 0x1471
 800ff26:	4958      	ldr	r1, [pc, #352]	@ (8010088 <mg_tcpip_init+0x1bc>)
 800ff28:	2002      	movs	r0, #2
 800ff2a:	f7fc fa83 	bl	800c434 <mg_log_prefix>
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	461a      	mov	r2, r3
 800ff32:	4956      	ldr	r1, [pc, #344]	@ (801008c <mg_tcpip_init+0x1c0>)
 800ff34:	4856      	ldr	r0, [pc, #344]	@ (8010090 <mg_tcpip_init+0x1c4>)
 800ff36:	f7fc facd 	bl	800c4d4 <mg_log>
  }

  // If DHCP name is not set, use "mip"
  if (ifp->dhcp_name[0] == '\0') {
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d106      	bne.n	800ff52 <mg_tcpip_init+0x86>
    memcpy(ifp->dhcp_name, "mip", 4);
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	3344      	adds	r3, #68	@ 0x44
 800ff48:	2204      	movs	r2, #4
 800ff4a:	4952      	ldr	r1, [pc, #328]	@ (8010094 <mg_tcpip_init+0x1c8>)
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f013 fd5c 	bl	8023a0a <memcpy>
  }
  ifp->dhcp_name[sizeof(ifp->dhcp_name) - 1] = '\0';  // Just in case
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d019      	beq.n	800ff98 <mg_tcpip_init+0xcc>
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	6838      	ldr	r0, [r7, #0]
 800ff6c:	4798      	blx	r3
 800ff6e:	4603      	mov	r3, r0
 800ff70:	f083 0301 	eor.w	r3, r3, #1
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00e      	beq.n	800ff98 <mg_tcpip_init+0xcc>
    MG_ERROR(("driver init failed"));
 800ff7a:	4b41      	ldr	r3, [pc, #260]	@ (8010080 <mg_tcpip_init+0x1b4>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	dd7a      	ble.n	8010078 <mg_tcpip_init+0x1ac>
 800ff82:	4b40      	ldr	r3, [pc, #256]	@ (8010084 <mg_tcpip_init+0x1b8>)
 800ff84:	f241 427b 	movw	r2, #5243	@ 0x147b
 800ff88:	493f      	ldr	r1, [pc, #252]	@ (8010088 <mg_tcpip_init+0x1bc>)
 800ff8a:	2001      	movs	r0, #1
 800ff8c:	f7fc fa52 	bl	800c434 <mg_log_prefix>
 800ff90:	4841      	ldr	r0, [pc, #260]	@ (8010098 <mg_tcpip_init+0x1cc>)
 800ff92:	f7fc fa9f 	bl	800c4d4 <mg_log>
 800ff96:	e06f      	b.n	8010078 <mg_tcpip_init+0x1ac>
  } else {
    size_t framesize = 1540;
 800ff98:	f240 6304 	movw	r3, #1540	@ 0x604
 800ff9c:	60fb      	str	r3, [r7, #12]
    ifp->tx.buf = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800ff9e:	68f9      	ldr	r1, [r7, #12]
 800ffa0:	2001      	movs	r0, #1
 800ffa2:	f013 f927 	bl	80231f4 <calloc>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	683b      	ldr	r3, [r7, #0]
 800ffac:	615a      	str	r2, [r3, #20]
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d10a      	bne.n	800ffd2 <mg_tcpip_init+0x106>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffc0:	689b      	ldr	r3, [r3, #8]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d001      	beq.n	800ffca <mg_tcpip_init+0xfe>
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	e001      	b.n	800ffce <mg_tcpip_init+0x102>
 800ffca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ffce:	683a      	ldr	r2, [r7, #0]
 800ffd0:	6393      	str	r3, [r2, #56]	@ 0x38
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffd6:	4619      	mov	r1, r3
 800ffd8:	2001      	movs	r0, #1
 800ffda:	f013 f90b 	bl	80231f4 <calloc>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	635a      	str	r2, [r3, #52]	@ 0x34
    ifp->timer_1000ms = mg_millis();
 800ffe6:	f7f0 fbbf 	bl	8000768 <mg_millis>
 800ffea:	4602      	mov	r2, r0
 800ffec:	460b      	mov	r3, r1
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    mgr->ifp = ifp;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	683a      	ldr	r2, [r7, #0]
 800fff8:	639a      	str	r2, [r3, #56]	@ 0x38
    ifp->mgr = mgr;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	687a      	ldr	r2, [r7, #4]
 800fffe:	631a      	str	r2, [r3, #48]	@ 0x30
    ifp->mtu = MG_TCPIP_MTU_DEFAULT;
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8010006:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    mgr->extraconnsize = sizeof(struct connstate);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2238      	movs	r2, #56	@ 0x38
 801000e:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	689b      	ldr	r3, [r3, #8]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d102      	bne.n	801001e <mg_tcpip_init+0x152>
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	2201      	movs	r2, #1
 801001c:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set best-effort to bcast
 801001e:	683b      	ldr	r3, [r7, #0]
 8010020:	3352      	adds	r3, #82	@ 0x52
 8010022:	2206      	movs	r2, #6
 8010024:	21ff      	movs	r1, #255	@ 0xff
 8010026:	4618      	mov	r0, r3
 8010028:	f013 fbb9 	bl	802379e <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	3370      	adds	r3, #112	@ 0x70
 8010030:	2102      	movs	r1, #2
 8010032:	4618      	mov	r0, r3
 8010034:	f7f0 fb6a 	bl	800070c <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 8010038:	683b      	ldr	r3, [r7, #0]
 801003a:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 801003e:	4b17      	ldr	r3, [pc, #92]	@ (801009c <mg_tcpip_init+0x1d0>)
 8010040:	4313      	orrs	r3, r2
 8010042:	b29a      	uxth	r2, r3
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.buf == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	695b      	ldr	r3, [r3, #20]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d003      	beq.n	801005a <mg_tcpip_init+0x18e>
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010056:	2b00      	cmp	r3, #0
 8010058:	d10e      	bne.n	8010078 <mg_tcpip_init+0x1ac>
 801005a:	4b09      	ldr	r3, [pc, #36]	@ (8010080 <mg_tcpip_init+0x1b4>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	dd0a      	ble.n	8010078 <mg_tcpip_init+0x1ac>
 8010062:	4b08      	ldr	r3, [pc, #32]	@ (8010084 <mg_tcpip_init+0x1b8>)
 8010064:	f241 428c 	movw	r2, #5260	@ 0x148c
 8010068:	4907      	ldr	r1, [pc, #28]	@ (8010088 <mg_tcpip_init+0x1bc>)
 801006a:	2001      	movs	r0, #1
 801006c:	f7fc f9e2 	bl	800c434 <mg_log_prefix>
 8010070:	480b      	ldr	r0, [pc, #44]	@ (80100a0 <mg_tcpip_init+0x1d4>)
 8010072:	f7fc fa2f 	bl	800c4d4 <mg_log>
  }
}
 8010076:	e7ff      	b.n	8010078 <mg_tcpip_init+0x1ac>
 8010078:	bf00      	nop
 801007a:	3710      	adds	r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	24000258 	.word	0x24000258
 8010084:	08028154 	.word	0x08028154
 8010088:	08024478 	.word	0x08024478
 801008c:	08010bbd 	.word	0x08010bbd
 8010090:	080259f4 	.word	0x080259f4
 8010094:	08025a18 	.word	0x08025a18
 8010098:	08025a1c 	.word	0x08025a1c
 801009c:	ffff8000 	.word	0xffff8000
 80100a0:	08025434 	.word	0x08025434

080100a4 <send_syn>:
void mg_tcpip_free(struct mg_tcpip_if *ifp) {
  free(ifp->recv_queue.buf);
  free(ifp->tx.buf);
}

static void send_syn(struct mg_connection *c) {
 80100a4:	b5b0      	push	{r4, r5, r7, lr}
 80100a6:	b08c      	sub	sp, #48	@ 0x30
 80100a8:	af06      	add	r7, sp, #24
 80100aa:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	33b0      	adds	r3, #176	@ 0xb0
 80100b0:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	8b1b      	ldrh	r3, [r3, #24]
 80100b6:	4618      	mov	r0, r3
 80100b8:	f00f faa2 	bl	801f600 <mg_ntohs>
 80100bc:	4603      	mov	r3, r0
 80100be:	4618      	mov	r0, r3
 80100c0:	f00f fab5 	bl	801f62e <mg_ntohl>
 80100c4:	6138      	str	r0, [r7, #16]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	331c      	adds	r3, #28
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	60fb      	str	r3, [r7, #12]
  tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0,
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80100d4:	697b      	ldr	r3, [r7, #20]
 80100d6:	f103 041a 	add.w	r4, r3, #26
 80100da:	68fd      	ldr	r5, [r7, #12]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	8b1b      	ldrh	r3, [r3, #24]
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80100e4:	2100      	movs	r1, #0
 80100e6:	9105      	str	r1, [sp, #20]
 80100e8:	2100      	movs	r1, #0
 80100ea:	9104      	str	r1, [sp, #16]
 80100ec:	2100      	movs	r1, #0
 80100ee:	9103      	str	r1, [sp, #12]
 80100f0:	6939      	ldr	r1, [r7, #16]
 80100f2:	9102      	str	r1, [sp, #8]
 80100f4:	9201      	str	r2, [sp, #4]
 80100f6:	9300      	str	r3, [sp, #0]
 80100f8:	2302      	movs	r3, #2
 80100fa:	462a      	mov	r2, r5
 80100fc:	4621      	mov	r1, r4
 80100fe:	f7fe fa53 	bl	800e5a8 <tx_tcp>
         NULL, 0);
}
 8010102:	bf00      	nop
 8010104:	3718      	adds	r7, #24
 8010106:	46bd      	mov	sp, r7
 8010108:	bdb0      	pop	{r4, r5, r7, pc}

0801010a <mac_resolved>:

static void mac_resolved(struct mg_connection *c) {
 801010a:	b580      	push	{r7, lr}
 801010c:	b082      	sub	sp, #8
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
  if (c->is_udp) {
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010118:	f003 0301 	and.w	r3, r3, #1
 801011c:	b2db      	uxtb	r3, r3
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00c      	beq.n	801013c <mac_resolved+0x32>
    c->is_connecting = 0;
 8010122:	687a      	ldr	r2, [r7, #4]
 8010124:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8010128:	f023 0320 	bic.w	r3, r3, #32
 801012c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
    mg_call(c, MG_EV_CONNECT, NULL);
 8010130:	2200      	movs	r2, #0
 8010132:	2104      	movs	r1, #4
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7f6 fc4c 	bl	80069d2 <mg_call>
  } else {
    send_syn(c);
    settmout(c, MIP_TTYPE_SYN);
  }
}
 801013a:	e006      	b.n	801014a <mac_resolved+0x40>
    send_syn(c);
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7ff ffb1 	bl	80100a4 <send_syn>
    settmout(c, MIP_TTYPE_SYN);
 8010142:	2103      	movs	r1, #3
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7fc ffdf 	bl	800d108 <settmout>
}
 801014a:	bf00      	nop
 801014c:	3708      	adds	r7, #8
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
	...

08010154 <mg_open_listener>:
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
    mac_resolved(c);
  }
}

bool mg_open_listener(struct mg_connection *c, const char *url) {
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 801015e:	6838      	ldr	r0, [r7, #0]
 8010160:	f00f f90a 	bl	801f378 <mg_url_port>
 8010164:	4603      	mov	r3, r0
 8010166:	4618      	mov	r0, r3
 8010168:	f00f fa4a 	bl	801f600 <mg_ntohs>
 801016c:	4603      	mov	r3, r0
 801016e:	461a      	mov	r2, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	831a      	strh	r2, [r3, #24]
  if (!mg_aton(mg_url_host(url), &c->loc)) {
 8010174:	f107 0308 	add.w	r3, r7, #8
 8010178:	6839      	ldr	r1, [r7, #0]
 801017a:	4618      	mov	r0, r3
 801017c:	f00f f8c9 	bl	801f312 <mg_url_host>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	3308      	adds	r3, #8
 8010184:	461a      	mov	r2, r3
 8010186:	f107 0308 	add.w	r3, r7, #8
 801018a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801018e:	f7fc fd00 	bl	800cb92 <mg_aton>
 8010192:	4603      	mov	r3, r0
 8010194:	f083 0301 	eor.w	r3, r3, #1
 8010198:	b2db      	uxtb	r3, r3
 801019a:	2b00      	cmp	r3, #0
 801019c:	d010      	beq.n	80101c0 <mg_open_listener+0x6c>
    MG_ERROR(("invalid listening URL: %s", url));
 801019e:	4b0b      	ldr	r3, [pc, #44]	@ (80101cc <mg_open_listener+0x78>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	dd0a      	ble.n	80101bc <mg_open_listener+0x68>
 80101a6:	4b0a      	ldr	r3, [pc, #40]	@ (80101d0 <mg_open_listener+0x7c>)
 80101a8:	f241 42d4 	movw	r2, #5332	@ 0x14d4
 80101ac:	4909      	ldr	r1, [pc, #36]	@ (80101d4 <mg_open_listener+0x80>)
 80101ae:	2001      	movs	r0, #1
 80101b0:	f7fc f940 	bl	800c434 <mg_log_prefix>
 80101b4:	6839      	ldr	r1, [r7, #0]
 80101b6:	4808      	ldr	r0, [pc, #32]	@ (80101d8 <mg_open_listener+0x84>)
 80101b8:	f7fc f98c 	bl	800c4d4 <mg_log>
    return false;
 80101bc:	2300      	movs	r3, #0
 80101be:	e000      	b.n	80101c2 <mg_open_listener+0x6e>
  }
  return true;
 80101c0:	2301      	movs	r3, #1
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	24000258 	.word	0x24000258
 80101d0:	08028164 	.word	0x08028164
 80101d4:	08024478 	.word	0x08024478
 80101d8:	08025a58 	.word	0x08025a58

080101dc <write_conn>:

static void write_conn(struct mg_connection *c) {
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80101ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101ee:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d009      	beq.n	8010208 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101fc:	461a      	mov	r2, r3
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f008 fcaa 	bl	8018b58 <mg_tls_send>
 8010204:	4603      	mov	r3, r0
 8010206:	e008      	b.n	801021a <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010210:	461a      	mov	r2, r3
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7fe fc66 	bl	800eae4 <mg_io_send>
 8010218:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 801021a:	60fb      	str	r3, [r7, #12]
  if (len == MG_IO_ERR) {
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010222:	d104      	bne.n	801022e <write_conn+0x52>
    mg_error(c, "tx err");
 8010224:	490c      	ldr	r1, [pc, #48]	@ (8010258 <write_conn+0x7c>)
 8010226:	6878      	ldr	r0, [r7, #4]
 8010228:	f7f6 fbf4 	bl	8006a14 <mg_error>
  } else if (len > 0) {
    mg_iobuf_del(&c->send, 0, (size_t) len);
    mg_call(c, MG_EV_WRITE, &len);
  }
}
 801022c:	e010      	b.n	8010250 <write_conn+0x74>
  } else if (len > 0) {
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	dd0d      	ble.n	8010250 <write_conn+0x74>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	3348      	adds	r3, #72	@ 0x48
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	2100      	movs	r1, #0
 801023c:	4618      	mov	r0, r3
 801023e:	f7fb fa2d 	bl	800b69c <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 8010242:	f107 030c 	add.w	r3, r7, #12
 8010246:	461a      	mov	r2, r3
 8010248:	2108      	movs	r1, #8
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f7f6 fbc1 	bl	80069d2 <mg_call>
}
 8010250:	bf00      	nop
 8010252:	3710      	adds	r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	08025a74 	.word	0x08025a74

0801025c <init_closure>:

static void init_closure(struct mg_connection *c) {
 801025c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010260:	b08c      	sub	sp, #48	@ 0x30
 8010262:	af06      	add	r7, sp, #24
 8010264:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	33b0      	adds	r3, #176	@ 0xb0
 801026a:	617b      	str	r3, [r7, #20]
  if (c->is_udp == false && c->is_listening == false &&
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010272:	f003 0301 	and.w	r3, r3, #1
 8010276:	b2db      	uxtb	r3, r3
 8010278:	2b00      	cmp	r3, #0
 801027a:	d13e      	bne.n	80102fa <init_closure+0x9e>
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010282:	f003 0301 	and.w	r3, r3, #1
 8010286:	b2db      	uxtb	r3, r3
 8010288:	2b00      	cmp	r3, #0
 801028a:	d136      	bne.n	80102fa <init_closure+0x9e>
      c->is_connecting == false) {  // For TCP conns,
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010292:	f003 0320 	and.w	r3, r3, #32
 8010296:	b2db      	uxtb	r3, r3
  if (c->is_udp == false && c->is_listening == false &&
 8010298:	2b00      	cmp	r3, #0
 801029a:	d12e      	bne.n	80102fa <init_closure+0x9e>
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	331c      	adds	r3, #28
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	613b      	str	r3, [r7, #16]
    tx_tcp(c->mgr->ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port,
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	f103 081a 	add.w	r8, r3, #26
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	60bb      	str	r3, [r7, #8]
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	8b1c      	ldrh	r4, [r3, #24]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f00f f9b4 	bl	801f62e <mg_ntohl>
 80102c6:	6078      	str	r0, [r7, #4]
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	4618      	mov	r0, r3
 80102ce:	f00f f9ae 	bl	801f62e <mg_ntohl>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2200      	movs	r2, #0
 80102d6:	9205      	str	r2, [sp, #20]
 80102d8:	2200      	movs	r2, #0
 80102da:	9204      	str	r2, [sp, #16]
 80102dc:	9303      	str	r3, [sp, #12]
 80102de:	6879      	ldr	r1, [r7, #4]
 80102e0:	9102      	str	r1, [sp, #8]
 80102e2:	9501      	str	r5, [sp, #4]
 80102e4:	9400      	str	r4, [sp, #0]
 80102e6:	2311      	movs	r3, #17
 80102e8:	68ba      	ldr	r2, [r7, #8]
 80102ea:	4641      	mov	r1, r8
 80102ec:	4630      	mov	r0, r6
 80102ee:	f7fe f95b 	bl	800e5a8 <tx_tcp>
           c->rem.port, mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
    settmout(c, MIP_TTYPE_FIN);
 80102f2:	2104      	movs	r1, #4
 80102f4:	68f8      	ldr	r0, [r7, #12]
 80102f6:	f7fc ff07 	bl	800d108 <settmout>
  }
}
 80102fa:	bf00      	nop
 80102fc:	3718      	adds	r7, #24
 80102fe:	46bd      	mov	sp, r7
 8010300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010304 <close_conn>:

static void close_conn(struct mg_connection *c) {
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	33b0      	adds	r3, #176	@ 0xb0
 8010310:	60fb      	str	r3, [r7, #12]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	3324      	adds	r3, #36	@ 0x24
 8010316:	4618      	mov	r0, r3
 8010318:	f7fb fa0b 	bl	800b732 <mg_iobuf_free>
  mg_close_conn(c);
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7fc fc9f 	bl	800cc60 <mg_close_conn>
}
 8010322:	bf00      	nop
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <can_write>:

static bool can_write(struct mg_connection *c) {
 801032a:	b480      	push	{r7}
 801032c:	b083      	sub	sp, #12
 801032e:	af00      	add	r7, sp, #0
 8010330:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010338:	f003 0320 	and.w	r3, r3, #32
 801033c:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801033e:	2b00      	cmp	r3, #0
 8010340:	d11d      	bne.n	801037e <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010348:	f003 0308 	and.w	r3, r3, #8
 801034c:	b2db      	uxtb	r3, r3
 801034e:	2b00      	cmp	r3, #0
 8010350:	d115      	bne.n	801037e <can_write+0x54>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010356:	2b00      	cmp	r3, #0
 8010358:	d011      	beq.n	801037e <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010360:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010364:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 8010366:	2b00      	cmp	r3, #0
 8010368:	d109      	bne.n	801037e <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010370:	f003 0310 	and.w	r3, r3, #16
 8010374:	b2db      	uxtb	r3, r3
 8010376:	2b00      	cmp	r3, #0
 8010378:	d101      	bne.n	801037e <can_write+0x54>
 801037a:	2301      	movs	r3, #1
 801037c:	e000      	b.n	8010380 <can_write+0x56>
 801037e:	2300      	movs	r3, #0
 8010380:	f003 0301 	and.w	r3, r3, #1
 8010384:	b2db      	uxtb	r3, r3
}
 8010386:	4618      	mov	r0, r3
 8010388:	370c      	adds	r7, #12
 801038a:	46bd      	mov	sp, r7
 801038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010390:	4770      	bx	lr
	...

08010394 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 8010394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010398:	b091      	sub	sp, #68	@ 0x44
 801039a:	af06      	add	r7, sp, #24
 801039c:	60f8      	str	r0, [r7, #12]
 801039e:	60b9      	str	r1, [r7, #8]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 80103a0:	f7f0 f9e2 	bl	8000768 <mg_millis>
 80103a4:	4602      	mov	r2, r0
 80103a6:	460b      	mov	r3, r1
 80103a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_timer_poll(&mgr->timers, now);
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80103b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80103b6:	4608      	mov	r0, r1
 80103b8:	f004 fbc4 	bl	8014b44 <mg_timer_poll>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	f000 810c 	beq.w	80105de <mg_mgr_poll+0x24a>
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	f000 8106 	beq.w	80105de <mg_mgr_poll+0x24a>
  mg_tcpip_poll(mgr->ifp, now);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80103d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80103da:	4608      	mov	r0, r1
 80103dc:	f7ff fae8 	bl	800f9b0 <mg_tcpip_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80103e6:	e0f5      	b.n	80105d4 <mg_mgr_poll+0x240>
    tmp = c->next;
 80103e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	623b      	str	r3, [r7, #32]
    struct connstate *s = (struct connstate *) (c + 1);
 80103ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f0:	33b0      	adds	r3, #176	@ 0xb0
 80103f2:	61fb      	str	r3, [r7, #28]
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 80103f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103f6:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80103fa:	f003 0308 	and.w	r3, r3, #8
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	2b00      	cmp	r3, #0
 8010402:	d119      	bne.n	8010438 <mg_mgr_poll+0xa4>
 8010404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010406:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801040a:	f003 0310 	and.w	r3, r3, #16
 801040e:	b2db      	uxtb	r3, r3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d111      	bne.n	8010438 <mg_mgr_poll+0xa4>
 8010414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010416:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801041a:	f003 0301 	and.w	r3, r3, #1
 801041e:	b2db      	uxtb	r3, r3
 8010420:	2b00      	cmp	r3, #0
 8010422:	d109      	bne.n	8010438 <mg_mgr_poll+0xa4>
                  !c->is_connecting;
 8010424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010426:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801042a:	f003 0320 	and.w	r3, r3, #32
 801042e:	b2db      	uxtb	r3, r3
    bool is_tls = !c->is_resolving && !c->is_arplooking && !c->is_listening &&
 8010430:	2b00      	cmp	r3, #0
 8010432:	d101      	bne.n	8010438 <mg_mgr_poll+0xa4>
 8010434:	2301      	movs	r3, #1
 8010436:	e000      	b.n	801043a <mg_mgr_poll+0xa6>
 8010438:	2300      	movs	r3, #0
 801043a:	76fb      	strb	r3, [r7, #27]
 801043c:	7efb      	ldrb	r3, [r7, #27]
 801043e:	f003 0301 	and.w	r3, r3, #1
 8010442:	76fb      	strb	r3, [r7, #27]
    mg_call(c, MG_EV_POLL, &now);
 8010444:	f107 0310 	add.w	r3, r7, #16
 8010448:	461a      	mov	r2, r3
 801044a:	2102      	movs	r1, #2
 801044c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801044e:	f7f6 fac0 	bl	80069d2 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c %lu %lu", c->id, c->is_tls ? 'T' : 't',
 8010452:	4b65      	ldr	r3, [pc, #404]	@ (80105e8 <mg_mgr_poll+0x254>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	2b03      	cmp	r3, #3
 8010458:	dd55      	ble.n	8010506 <mg_mgr_poll+0x172>
 801045a:	4b64      	ldr	r3, [pc, #400]	@ (80105ec <mg_mgr_poll+0x258>)
 801045c:	f241 5208 	movw	r2, #5384	@ 0x1508
 8010460:	4963      	ldr	r1, [pc, #396]	@ (80105f0 <mg_mgr_poll+0x25c>)
 8010462:	2004      	movs	r0, #4
 8010464:	f7fb ffe6 	bl	800c434 <mg_log_prefix>
 8010468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801046a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801046c:	607b      	str	r3, [r7, #4]
 801046e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010470:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8010474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010478:	b2db      	uxtb	r3, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d002      	beq.n	8010484 <mg_mgr_poll+0xf0>
 801047e:	f04f 0854 	mov.w	r8, #84	@ 0x54
 8010482:	e001      	b.n	8010488 <mg_mgr_poll+0xf4>
 8010484:	f04f 0874 	mov.w	r8, #116	@ 0x74
 8010488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801048a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801048e:	f003 0320 	and.w	r3, r3, #32
 8010492:	b2db      	uxtb	r3, r3
 8010494:	2b00      	cmp	r3, #0
 8010496:	d002      	beq.n	801049e <mg_mgr_poll+0x10a>
 8010498:	f04f 0943 	mov.w	r9, #67	@ 0x43
 801049c:	e001      	b.n	80104a2 <mg_mgr_poll+0x10e>
 801049e:	f04f 0963 	mov.w	r9, #99	@ 0x63
 80104a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a4:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80104a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d001      	beq.n	80104b6 <mg_mgr_poll+0x122>
 80104b2:	2448      	movs	r4, #72	@ 0x48
 80104b4:	e000      	b.n	80104b8 <mg_mgr_poll+0x124>
 80104b6:	2468      	movs	r4, #104	@ 0x68
 80104b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ba:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80104be:	f003 0308 	and.w	r3, r3, #8
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d001      	beq.n	80104cc <mg_mgr_poll+0x138>
 80104c8:	2552      	movs	r5, #82	@ 0x52
 80104ca:	e000      	b.n	80104ce <mg_mgr_poll+0x13a>
 80104cc:	2572      	movs	r5, #114	@ 0x72
 80104ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104d0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80104d4:	f003 0320 	and.w	r3, r3, #32
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d001      	beq.n	80104e2 <mg_mgr_poll+0x14e>
 80104de:	2643      	movs	r6, #67	@ 0x43
 80104e0:	e000      	b.n	80104e4 <mg_mgr_poll+0x150>
 80104e2:	2663      	movs	r6, #99	@ 0x63
 80104e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80104e6:	f008 fc2f 	bl	8018d48 <mg_tls_pending>
 80104ea:	4602      	mov	r2, r0
 80104ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104f0:	9304      	str	r3, [sp, #16]
 80104f2:	9203      	str	r2, [sp, #12]
 80104f4:	9602      	str	r6, [sp, #8]
 80104f6:	9501      	str	r5, [sp, #4]
 80104f8:	9400      	str	r4, [sp, #0]
 80104fa:	464b      	mov	r3, r9
 80104fc:	4642      	mov	r2, r8
 80104fe:	6879      	ldr	r1, [r7, #4]
 8010500:	483c      	ldr	r0, [pc, #240]	@ (80105f4 <mg_mgr_poll+0x260>)
 8010502:	f7fb ffe7 	bl	800c4d4 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c',
                mg_tls_pending(c), c->rtls.len));
    // order is important, TLS conn close with > 1 record in buffer (below)
    if (is_tls && (c->rtls.len > 0 || mg_tls_pending(c) > 0))
 8010506:	7efb      	ldrb	r3, [r7, #27]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00c      	beq.n	8010526 <mg_mgr_poll+0x192>
 801050c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801050e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010510:	2b00      	cmp	r3, #0
 8010512:	d105      	bne.n	8010520 <mg_mgr_poll+0x18c>
 8010514:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010516:	f008 fc17 	bl	8018d48 <mg_tls_pending>
 801051a:	4603      	mov	r3, r0
 801051c:	2b00      	cmp	r3, #0
 801051e:	d002      	beq.n	8010526 <mg_mgr_poll+0x192>
      handle_tls_recv(c);
 8010520:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010522:	f7fe fb61 	bl	800ebe8 <handle_tls_recv>
    if (can_write(c)) write_conn(c);
 8010526:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010528:	f7ff feff 	bl	801032a <can_write>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d002      	beq.n	8010538 <mg_mgr_poll+0x1a4>
 8010532:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010534:	f7ff fe52 	bl	80101dc <write_conn>
    if (is_tls && c->tls && c->send.len == 0) mg_tls_flush(c);
 8010538:	7efb      	ldrb	r3, [r7, #27]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d00b      	beq.n	8010556 <mg_mgr_poll+0x1c2>
 801053e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010540:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8010544:	2b00      	cmp	r3, #0
 8010546:	d006      	beq.n	8010556 <mg_mgr_poll+0x1c2>
 8010548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801054a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801054c:	2b00      	cmp	r3, #0
 801054e:	d102      	bne.n	8010556 <mg_mgr_poll+0x1c2>
 8010550:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010552:	f008 fc0e 	bl	8018d72 <mg_tls_flush>
    if (c->is_draining && c->send.len == 0 && s->ttype != MIP_TTYPE_FIN)
 8010556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010558:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801055c:	f003 0310 	and.w	r3, r3, #16
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b00      	cmp	r3, #0
 8010564:	d00b      	beq.n	801057e <mg_mgr_poll+0x1ea>
 8010566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801056a:	2b00      	cmp	r3, #0
 801056c:	d107      	bne.n	801057e <mg_mgr_poll+0x1ea>
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010574:	2b04      	cmp	r3, #4
 8010576:	d002      	beq.n	801057e <mg_mgr_poll+0x1ea>
      init_closure(c);
 8010578:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801057a:	f7ff fe6f 	bl	801025c <init_closure>
    // For non-TLS, close immediately upon completing the 3-way closure
    // For TLS, handle any pending data (above) until MIP_TTYPE_FIN expires
    if (s->twclosure &&
 801057e:	69fb      	ldr	r3, [r7, #28]
 8010580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010584:	2b00      	cmp	r3, #0
 8010586:	d018      	beq.n	80105ba <mg_mgr_poll+0x226>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8010588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801058a:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801058e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010592:	b2db      	uxtb	r3, r3
    if (s->twclosure &&
 8010594:	2b00      	cmp	r3, #0
 8010596:	d009      	beq.n	80105ac <mg_mgr_poll+0x218>
        (!c->is_tls || (c->rtls.len == 0 && mg_tls_pending(c) == 0)))
 8010598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801059a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801059c:	2b00      	cmp	r3, #0
 801059e:	d10c      	bne.n	80105ba <mg_mgr_poll+0x226>
 80105a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80105a2:	f008 fbd1 	bl	8018d48 <mg_tls_pending>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d106      	bne.n	80105ba <mg_mgr_poll+0x226>
      c->is_closing = 1;
 80105ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105ae:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 80105b2:	f043 0320 	orr.w	r3, r3, #32
 80105b6:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    if (c->is_closing) close_conn(c);
 80105ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105bc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80105c0:	f003 0320 	and.w	r3, r3, #32
 80105c4:	b2db      	uxtb	r3, r3
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d002      	beq.n	80105d0 <mg_mgr_poll+0x23c>
 80105ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80105cc:	f7ff fe9a 	bl	8010304 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 80105d0:	6a3b      	ldr	r3, [r7, #32]
 80105d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80105d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	f47f af06 	bne.w	80103e8 <mg_mgr_poll+0x54>
 80105dc:	e000      	b.n	80105e0 <mg_mgr_poll+0x24c>
  if (mgr->ifp == NULL || mgr->ifp->driver == NULL) return;
 80105de:	bf00      	nop
  }
  (void) ms;
}
 80105e0:	372c      	adds	r7, #44	@ 0x2c
 80105e2:	46bd      	mov	sp, r7
 80105e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105e8:	24000258 	.word	0x24000258
 80105ec:	08028178 	.word	0x08028178
 80105f0:	08024478 	.word	0x08024478
 80105f4:	08025a7c 	.word	0x08025a7c

080105f8 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 80105f8:	b5b0      	push	{r4, r5, r7, lr}
 80105fa:	b08c      	sub	sp, #48	@ 0x30
 80105fc:	af04      	add	r7, sp, #16
 80105fe:	60f8      	str	r0, [r7, #12]
 8010600:	60b9      	str	r1, [r7, #8]
 8010602:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = c->mgr->ifp;
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801060a:	61bb      	str	r3, [r7, #24]
  bool res = false;
 801060c:	2300      	movs	r3, #0
 801060e:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	331c      	adds	r3, #28
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d004      	beq.n	801062a <mg_send+0x32>
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010626:	2b04      	cmp	r3, #4
 8010628:	d004      	beq.n	8010634 <mg_send+0x3c>
    mg_error(c, "net down");
 801062a:	4934      	ldr	r1, [pc, #208]	@ (80106fc <mg_send+0x104>)
 801062c:	68f8      	ldr	r0, [r7, #12]
 801062e:	f7f6 f9f1 	bl	8006a14 <mg_error>
 8010632:	e05e      	b.n	80106f2 <mg_send+0xfa>
  } else if (c->is_udp && (c->is_arplooking || c->is_resolving)) {
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801063a:	f003 0301 	and.w	r3, r3, #1
 801063e:	b2db      	uxtb	r3, r3
 8010640:	2b00      	cmp	r3, #0
 8010642:	d01e      	beq.n	8010682 <mg_send+0x8a>
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801064a:	f003 0310 	and.w	r3, r3, #16
 801064e:	b2db      	uxtb	r3, r3
 8010650:	2b00      	cmp	r3, #0
 8010652:	d107      	bne.n	8010664 <mg_send+0x6c>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801065a:	f003 0308 	and.w	r3, r3, #8
 801065e:	b2db      	uxtb	r3, r3
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00e      	beq.n	8010682 <mg_send+0x8a>
    // Fail to send, no target MAC or IP
    MG_VERBOSE(("still resolving..."));
 8010664:	4b26      	ldr	r3, [pc, #152]	@ (8010700 <mg_send+0x108>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b03      	cmp	r3, #3
 801066a:	dd42      	ble.n	80106f2 <mg_send+0xfa>
 801066c:	4b25      	ldr	r3, [pc, #148]	@ (8010704 <mg_send+0x10c>)
 801066e:	f241 5226 	movw	r2, #5414	@ 0x1526
 8010672:	4925      	ldr	r1, [pc, #148]	@ (8010708 <mg_send+0x110>)
 8010674:	2004      	movs	r0, #4
 8010676:	f7fb fedd 	bl	800c434 <mg_log_prefix>
 801067a:	4824      	ldr	r0, [pc, #144]	@ (801070c <mg_send+0x114>)
 801067c:	f7fb ff2a 	bl	800c4d4 <mg_log>
 8010680:	e037      	b.n	80106f2 <mg_send+0xfa>
  } else if (c->is_udp) {
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8010688:	f003 0301 	and.w	r3, r3, #1
 801068c:	b2db      	uxtb	r3, r3
 801068e:	2b00      	cmp	r3, #0
 8010690:	d020      	beq.n	80106d4 <mg_send+0xdc>
    struct connstate *s = (struct connstate *) (c + 1);
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	33b0      	adds	r3, #176	@ 0xb0
 8010696:	617b      	str	r3, [r7, #20]
    len = trim_len(c, len);  // Trimming length if necessary
 8010698:	6879      	ldr	r1, [r7, #4]
 801069a:	68f8      	ldr	r0, [r7, #12]
 801069c:	f7fe f994 	bl	800e9c8 <trim_len>
 80106a0:	6078      	str	r0, [r7, #4]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	f103 001a 	add.w	r0, r3, #26
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	689c      	ldr	r4, [r3, #8]
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	8b1d      	ldrh	r5, [r3, #24]
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	68fa      	ldr	r2, [r7, #12]
 80106b4:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 80106b6:	6879      	ldr	r1, [r7, #4]
 80106b8:	9103      	str	r1, [sp, #12]
 80106ba:	68b9      	ldr	r1, [r7, #8]
 80106bc:	9102      	str	r1, [sp, #8]
 80106be:	9201      	str	r2, [sp, #4]
 80106c0:	9300      	str	r3, [sp, #0]
 80106c2:	462b      	mov	r3, r5
 80106c4:	4622      	mov	r2, r4
 80106c6:	4601      	mov	r1, r0
 80106c8:	69b8      	ldr	r0, [r7, #24]
 80106ca:	f7fc ff06 	bl	800d4da <tx_udp>
    res = true;
 80106ce:	2301      	movs	r3, #1
 80106d0:	77fb      	strb	r3, [r7, #31]
 80106d2:	e00e      	b.n	80106f2 <mg_send+0xfa>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f103 0048 	add.w	r0, r3, #72	@ 0x48
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	f7fa ff89 	bl	800b5f8 <mg_iobuf_add>
 80106e6:	4603      	mov	r3, r0
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	bf14      	ite	ne
 80106ec:	2301      	movne	r3, #1
 80106ee:	2300      	moveq	r3, #0
 80106f0:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 80106f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3720      	adds	r7, #32
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bdb0      	pop	{r4, r5, r7, pc}
 80106fc:	08025a98 	.word	0x08025a98
 8010700:	24000258 	.word	0x24000258
 8010704:	08028184 	.word	0x08028184
 8010708:	08024478 	.word	0x08024478
 801070c:	08025aa4 	.word	0x08025aa4

08010710 <mg_ota_begin>:
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
  }
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
}

bool mg_ota_begin(size_t new_firmware_size) {
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  s_mg_flash_stm32h7.size = MG_REG(FLASH_SIZE_REG) * 1024;
 8010718:	4b06      	ldr	r3, [pc, #24]	@ (8010734 <mg_ota_begin+0x24>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	029b      	lsls	r3, r3, #10
 801071e:	4a06      	ldr	r2, [pc, #24]	@ (8010738 <mg_ota_begin+0x28>)
 8010720:	6053      	str	r3, [r2, #4]
  if (IS_DUALCORE()) {
    // Using only the 1st bank (mapped to CM7)
    s_mg_flash_stm32h7.size /= 2;
  }
  return mg_ota_flash_begin(new_firmware_size, &s_mg_flash_stm32h7);
 8010722:	4905      	ldr	r1, [pc, #20]	@ (8010738 <mg_ota_begin+0x28>)
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f7f6 f9b7 	bl	8006a98 <mg_ota_flash_begin>
 801072a:	4603      	mov	r3, r0
}
 801072c:	4618      	mov	r0, r3
 801072e:	3708      	adds	r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	1ff1e880 	.word	0x1ff1e880
 8010738:	24000268 	.word	0x24000268

0801073c <mg_ota_write>:

bool mg_ota_write(const void *buf, size_t len) {
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
  return mg_ota_flash_write(buf, len, &s_mg_flash_stm32h7);
 8010746:	4a05      	ldr	r2, [pc, #20]	@ (801075c <mg_ota_write+0x20>)
 8010748:	6839      	ldr	r1, [r7, #0]
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f7f6 fa20 	bl	8006b90 <mg_ota_flash_write>
 8010750:	4603      	mov	r3, r0
}
 8010752:	4618      	mov	r0, r3
 8010754:	3708      	adds	r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	24000268 	.word	0x24000268

08010760 <mg_ota_end>:

bool mg_ota_end(void) {
 8010760:	b580      	push	{r7, lr}
 8010762:	af00      	add	r7, sp, #0
  if (mg_ota_flash_end(&s_mg_flash_stm32h7)) {
 8010764:	4825      	ldr	r0, [pc, #148]	@ (80107fc <mg_ota_end+0x9c>)
 8010766:	f7f6 fad7 	bl	8006d18 <mg_ota_flash_end>
 801076a:	4603      	mov	r3, r0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d042      	beq.n	80107f6 <mg_ota_end+0x96>
    if (is_dualbank()) {
 8010770:	f013 fe7a 	bl	8024468 <__is_dualbank_veneer>
 8010774:	4603      	mov	r3, r0
 8010776:	2b00      	cmp	r3, #0
 8010778:	d003      	beq.n	8010782 <mg_ota_end+0x22>
      // Bank swap is deferred until reset, been executing in flash, reset
      *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
 801077a:	4b21      	ldr	r3, [pc, #132]	@ (8010800 <mg_ota_end+0xa0>)
 801077c:	4a21      	ldr	r2, [pc, #132]	@ (8010804 <mg_ota_end+0xa4>)
 801077e:	601a      	str	r2, [r3, #0]
 8010780:	e039      	b.n	80107f6 <mg_ota_end+0x96>
    } else {
      // Swap partitions. Pray power does not go away
      MG_INFO(("Swapping partitions, size %u (%u sectors)",
 8010782:	4b21      	ldr	r3, [pc, #132]	@ (8010808 <mg_ota_end+0xa8>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	2b01      	cmp	r3, #1
 8010788:	dd12      	ble.n	80107b0 <mg_ota_end+0x50>
 801078a:	4b20      	ldr	r3, [pc, #128]	@ (801080c <mg_ota_end+0xac>)
 801078c:	f641 528d 	movw	r2, #7565	@ 0x1d8d
 8010790:	491f      	ldr	r1, [pc, #124]	@ (8010810 <mg_ota_end+0xb0>)
 8010792:	2002      	movs	r0, #2
 8010794:	f7fb fe4e 	bl	800c434 <mg_log_prefix>
 8010798:	4b18      	ldr	r3, [pc, #96]	@ (80107fc <mg_ota_end+0x9c>)
 801079a:	6859      	ldr	r1, [r3, #4]
 801079c:	4b17      	ldr	r3, [pc, #92]	@ (80107fc <mg_ota_end+0x9c>)
 801079e:	685a      	ldr	r2, [r3, #4]
 80107a0:	4b16      	ldr	r3, [pc, #88]	@ (80107fc <mg_ota_end+0x9c>)
 80107a2:	689b      	ldr	r3, [r3, #8]
 80107a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80107a8:	461a      	mov	r2, r3
 80107aa:	481a      	ldr	r0, [pc, #104]	@ (8010814 <mg_ota_end+0xb4>)
 80107ac:	f7fb fe92 	bl	800c4d4 <mg_log>
               s_mg_flash_stm32h7.size,
               s_mg_flash_stm32h7.size / s_mg_flash_stm32h7.secsz));
      MG_INFO(("Do NOT power off..."));
 80107b0:	4b15      	ldr	r3, [pc, #84]	@ (8010808 <mg_ota_end+0xa8>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	dd09      	ble.n	80107cc <mg_ota_end+0x6c>
 80107b8:	4b14      	ldr	r3, [pc, #80]	@ (801080c <mg_ota_end+0xac>)
 80107ba:	f641 5290 	movw	r2, #7568	@ 0x1d90
 80107be:	4914      	ldr	r1, [pc, #80]	@ (8010810 <mg_ota_end+0xb0>)
 80107c0:	2002      	movs	r0, #2
 80107c2:	f7fb fe37 	bl	800c434 <mg_log_prefix>
 80107c6:	4814      	ldr	r0, [pc, #80]	@ (8010818 <mg_ota_end+0xb8>)
 80107c8:	f7fb fe84 	bl	800c4d4 <mg_log>
      mg_log_level = MG_LL_NONE;
 80107cc:	4b0e      	ldr	r3, [pc, #56]	@ (8010808 <mg_ota_end+0xa8>)
 80107ce:	2200      	movs	r2, #0
 80107d0:	601a      	str	r2, [r3, #0]
      s_flash_irq_disabled = true;
 80107d2:	4b12      	ldr	r3, [pc, #72]	@ (801081c <mg_ota_end+0xbc>)
 80107d4:	2201      	movs	r2, #1
 80107d6:	701a      	strb	r2, [r3, #0]
      // Runs in RAM, will reset when finished
      single_bank_swap(
          (char *) s_mg_flash_stm32h7.start,
 80107d8:	4b08      	ldr	r3, [pc, #32]	@ (80107fc <mg_ota_end+0x9c>)
 80107da:	6818      	ldr	r0, [r3, #0]
          (char *) s_mg_flash_stm32h7.start + s_mg_flash_stm32h7.size / 2,
 80107dc:	4b07      	ldr	r3, [pc, #28]	@ (80107fc <mg_ota_end+0x9c>)
 80107de:	681a      	ldr	r2, [r3, #0]
 80107e0:	4b06      	ldr	r3, [pc, #24]	@ (80107fc <mg_ota_end+0x9c>)
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	085b      	lsrs	r3, r3, #1
      single_bank_swap(
 80107e6:	18d1      	adds	r1, r2, r3
          s_mg_flash_stm32h7.size / 2, s_mg_flash_stm32h7.secsz);
 80107e8:	4b04      	ldr	r3, [pc, #16]	@ (80107fc <mg_ota_end+0x9c>)
 80107ea:	685b      	ldr	r3, [r3, #4]
      single_bank_swap(
 80107ec:	085a      	lsrs	r2, r3, #1
 80107ee:	4b03      	ldr	r3, [pc, #12]	@ (80107fc <mg_ota_end+0x9c>)
 80107f0:	689b      	ldr	r3, [r3, #8]
 80107f2:	f013 fe35 	bl	8024460 <__single_bank_swap_veneer>
    }
  }
  return false;
 80107f6:	2300      	movs	r3, #0
}
 80107f8:	4618      	mov	r0, r3
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	24000268 	.word	0x24000268
 8010800:	e000ed0c 	.word	0xe000ed0c
 8010804:	05fa0004 	.word	0x05fa0004
 8010808:	24000258 	.word	0x24000258
 801080c:	080281b4 	.word	0x080281b4
 8010810:	08024478 	.word	0x08024478
 8010814:	08025b50 	.word	0x08025b50
 8010818:	08025b7c 	.word	0x08025b7c
 801081c:	24001094 	.word	0x24001094

08010820 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8010820:	b580      	push	{r7, lr}
 8010822:	b084      	sub	sp, #16
 8010824:	af00      	add	r7, sp, #0
 8010826:	4603      	mov	r3, r0
 8010828:	6039      	str	r1, [r7, #0]
 801082a:	71fb      	strb	r3, [r7, #7]
 801082c:	4613      	mov	r3, r2
 801082e:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8010834:	79bb      	ldrb	r3, [r7, #6]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00d      	beq.n	8010856 <mg_pfn_iobuf_private+0x36>
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	689b      	ldr	r3, [r3, #8]
 801083e:	1c9a      	adds	r2, r3, #2
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	429a      	cmp	r2, r3
 8010846:	d906      	bls.n	8010856 <mg_pfn_iobuf_private+0x36>
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	689b      	ldr	r3, [r3, #8]
 801084c:	3302      	adds	r3, #2
 801084e:	4619      	mov	r1, r3
 8010850:	68f8      	ldr	r0, [r7, #12]
 8010852:	f7fa fe45 	bl	800b4e0 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	689b      	ldr	r3, [r3, #8]
 801085a:	1c9a      	adds	r2, r3, #2
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	429a      	cmp	r2, r3
 8010862:	d811      	bhi.n	8010888 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681a      	ldr	r2, [r3, #0]
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	689b      	ldr	r3, [r3, #8]
 801086c:	1c58      	adds	r0, r3, #1
 801086e:	68f9      	ldr	r1, [r7, #12]
 8010870:	6088      	str	r0, [r1, #8]
 8010872:	4413      	add	r3, r2
 8010874:	79fa      	ldrb	r2, [r7, #7]
 8010876:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	681a      	ldr	r2, [r3, #0]
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	689b      	ldr	r3, [r3, #8]
 8010880:	4413      	add	r3, r2
 8010882:	2200      	movs	r2, #0
 8010884:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8010886:	e00f      	b.n	80108a8 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	689a      	ldr	r2, [r3, #8]
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	429a      	cmp	r2, r3
 8010892:	d209      	bcs.n	80108a8 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	681a      	ldr	r2, [r3, #0]
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	1c58      	adds	r0, r3, #1
 801089e:	68f9      	ldr	r1, [r7, #12]
 80108a0:	6088      	str	r0, [r1, #8]
 80108a2:	4413      	add	r3, r2
 80108a4:	2200      	movs	r2, #0
 80108a6:	701a      	strb	r2, [r3, #0]
}
 80108a8:	bf00      	nop
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	4603      	mov	r3, r0
 80108b8:	6039      	str	r1, [r7, #0]
 80108ba:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 80108bc:	79fb      	ldrb	r3, [r7, #7]
 80108be:	2200      	movs	r2, #0
 80108c0:	6839      	ldr	r1, [r7, #0]
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7ff ffac 	bl	8010820 <mg_pfn_iobuf_private>
}
 80108c8:	bf00      	nop
 80108ca:	3708      	adds	r7, #8
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b082      	sub	sp, #8
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	4603      	mov	r3, r0
 80108d8:	6039      	str	r1, [r7, #0]
 80108da:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 80108dc:	79fb      	ldrb	r3, [r7, #7]
 80108de:	2201      	movs	r2, #1
 80108e0:	6839      	ldr	r1, [r7, #0]
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7ff ff9c 	bl	8010820 <mg_pfn_iobuf_private>
}
 80108e8:	bf00      	nop
 80108ea:	3708      	adds	r7, #8
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b08a      	sub	sp, #40	@ 0x28
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	607a      	str	r2, [r7, #4]
 80108fc:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	617b      	str	r3, [r7, #20]
 8010902:	68bb      	ldr	r3, [r7, #8]
 8010904:	61bb      	str	r3, [r7, #24]
 8010906:	2300      	movs	r3, #0
 8010908:	61fb      	str	r3, [r7, #28]
 801090a:	2300      	movs	r3, #0
 801090c:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 801090e:	f107 0114 	add.w	r1, r7, #20
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	687a      	ldr	r2, [r7, #4]
 8010916:	4809      	ldr	r0, [pc, #36]	@ (801093c <mg_vsnprintf+0x4c>)
 8010918:	f7f6 ff0e 	bl	8007738 <mg_vxprintf>
 801091c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (n < len) buf[n] = '\0';
 801091e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	429a      	cmp	r2, r3
 8010924:	d204      	bcs.n	8010930 <mg_vsnprintf+0x40>
 8010926:	68fa      	ldr	r2, [r7, #12]
 8010928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092a:	4413      	add	r3, r2
 801092c:	2200      	movs	r2, #0
 801092e:	701a      	strb	r2, [r3, #0]
  return n;
 8010930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010932:	4618      	mov	r0, r3
 8010934:	3728      	adds	r7, #40	@ 0x28
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	080108b1 	.word	0x080108b1

08010940 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8010940:	b40c      	push	{r2, r3}
 8010942:	b580      	push	{r7, lr}
 8010944:	b084      	sub	sp, #16
 8010946:	af00      	add	r7, sp, #0
 8010948:	6078      	str	r0, [r7, #4]
 801094a:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 801094c:	f107 031c 	add.w	r3, r7, #28
 8010950:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8010952:	f107 0308 	add.w	r3, r7, #8
 8010956:	69ba      	ldr	r2, [r7, #24]
 8010958:	6839      	ldr	r1, [r7, #0]
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	f7ff ffc8 	bl	80108f0 <mg_vsnprintf>
 8010960:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8010962:	68fb      	ldr	r3, [r7, #12]
}
 8010964:	4618      	mov	r0, r3
 8010966:	3710      	adds	r7, #16
 8010968:	46bd      	mov	sp, r7
 801096a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801096e:	b002      	add	sp, #8
 8010970:	4770      	bx	lr
	...

08010974 <mg_vmprintf>:

char *mg_vmprintf(const char *fmt, va_list *ap) {
 8010974:	b580      	push	{r7, lr}
 8010976:	b086      	sub	sp, #24
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
  struct mg_iobuf io = {0, 0, 0, 256};
 801097e:	2300      	movs	r3, #0
 8010980:	60bb      	str	r3, [r7, #8]
 8010982:	2300      	movs	r3, #0
 8010984:	60fb      	str	r3, [r7, #12]
 8010986:	2300      	movs	r3, #0
 8010988:	613b      	str	r3, [r7, #16]
 801098a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801098e:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &io, fmt, ap);
 8010990:	f107 0108 	add.w	r1, r7, #8
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	687a      	ldr	r2, [r7, #4]
 8010998:	4803      	ldr	r0, [pc, #12]	@ (80109a8 <mg_vmprintf+0x34>)
 801099a:	f7f6 fecd 	bl	8007738 <mg_vxprintf>
  return (char *) io.buf;
 801099e:	68bb      	ldr	r3, [r7, #8]
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3718      	adds	r7, #24
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	080108d1 	.word	0x080108d1

080109ac <mg_mprintf>:

char *mg_mprintf(const char *fmt, ...) {
 80109ac:	b40f      	push	{r0, r1, r2, r3}
 80109ae:	b580      	push	{r7, lr}
 80109b0:	b082      	sub	sp, #8
 80109b2:	af00      	add	r7, sp, #0
  char *s;
  va_list ap;
  va_start(ap, fmt);
 80109b4:	f107 0314 	add.w	r3, r7, #20
 80109b8:	603b      	str	r3, [r7, #0]
  s = mg_vmprintf(fmt, &ap);
 80109ba:	463b      	mov	r3, r7
 80109bc:	4619      	mov	r1, r3
 80109be:	6938      	ldr	r0, [r7, #16]
 80109c0:	f7ff ffd8 	bl	8010974 <mg_vmprintf>
 80109c4:	6078      	str	r0, [r7, #4]
  va_end(ap);
  return s;
 80109c6:	687b      	ldr	r3, [r7, #4]
}
 80109c8:	4618      	mov	r0, r3
 80109ca:	3708      	adds	r7, #8
 80109cc:	46bd      	mov	sp, r7
 80109ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80109d2:	b004      	add	sp, #16
 80109d4:	4770      	bx	lr

080109d6 <mg_pfn_stdout>:

void mg_pfn_stdout(char c, void *param) {
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b082      	sub	sp, #8
 80109da:	af00      	add	r7, sp, #0
 80109dc:	4603      	mov	r3, r0
 80109de:	6039      	str	r1, [r7, #0]
 80109e0:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 80109e2:	79fb      	ldrb	r3, [r7, #7]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f012 fe65 	bl	80236b4 <putchar>
  (void) param;
}
 80109ea:	bf00      	nop
 80109ec:	3708      	adds	r7, #8
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
	...

080109f4 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b088      	sub	sp, #32
 80109f8:	af04      	add	r7, sp, #16
 80109fa:	60f8      	str	r0, [r7, #12]
 80109fc:	60b9      	str	r1, [r7, #8]
 80109fe:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	781b      	ldrb	r3, [r3, #0]
 8010a04:	4618      	mov	r0, r3
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	3301      	adds	r3, #1
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	3302      	adds	r3, #2
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	4619      	mov	r1, r3
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	3303      	adds	r3, #3
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	9302      	str	r3, [sp, #8]
 8010a1e:	9101      	str	r1, [sp, #4]
 8010a20:	9200      	str	r2, [sp, #0]
 8010a22:	4603      	mov	r3, r0
 8010a24:	4a04      	ldr	r2, [pc, #16]	@ (8010a38 <print_ip4+0x44>)
 8010a26:	68b9      	ldr	r1, [r7, #8]
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	f7f6 fe6a 	bl	8007702 <mg_xprintf>
 8010a2e:	4603      	mov	r3, r0
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3710      	adds	r7, #16
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	08025b90 	.word	0x08025b90

08010a3c <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8010a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a40:	b08e      	sub	sp, #56	@ 0x38
 8010a42:	af08      	add	r7, sp, #32
 8010a44:	6178      	str	r0, [r7, #20]
 8010a46:	6139      	str	r1, [r7, #16]
 8010a48:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f00e fdd6 	bl	801f600 <mg_ntohs>
 8010a54:	4603      	mov	r3, r0
 8010a56:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	3302      	adds	r3, #2
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f00e fdce 	bl	801f600 <mg_ntohs>
 8010a64:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8010a66:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	3304      	adds	r3, #4
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f00e fdc6 	bl	801f600 <mg_ntohs>
 8010a74:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8010a76:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	3306      	adds	r3, #6
 8010a7c:	881b      	ldrh	r3, [r3, #0]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f00e fdbe 	bl	801f600 <mg_ntohs>
 8010a84:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8010a86:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	3308      	adds	r3, #8
 8010a8c:	881b      	ldrh	r3, [r3, #0]
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f00e fdb6 	bl	801f600 <mg_ntohs>
 8010a94:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8010a96:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	330a      	adds	r3, #10
 8010a9c:	881b      	ldrh	r3, [r3, #0]
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f00e fdae 	bl	801f600 <mg_ntohs>
 8010aa4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8010aa6:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	330c      	adds	r3, #12
 8010aac:	881b      	ldrh	r3, [r3, #0]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f00e fda6 	bl	801f600 <mg_ntohs>
 8010ab4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8010ab6:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	330e      	adds	r3, #14
 8010abc:	881b      	ldrh	r3, [r3, #0]
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f00e fd9e 	bl	801f600 <mg_ntohs>
 8010ac4:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8010ac6:	9306      	str	r3, [sp, #24]
 8010ac8:	683a      	ldr	r2, [r7, #0]
 8010aca:	9205      	str	r2, [sp, #20]
 8010acc:	687a      	ldr	r2, [r7, #4]
 8010ace:	9204      	str	r2, [sp, #16]
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	9303      	str	r3, [sp, #12]
 8010ad4:	9602      	str	r6, [sp, #8]
 8010ad6:	9501      	str	r5, [sp, #4]
 8010ad8:	9400      	str	r4, [sp, #0]
 8010ada:	4643      	mov	r3, r8
 8010adc:	4a05      	ldr	r2, [pc, #20]	@ (8010af4 <print_ip6+0xb8>)
 8010ade:	6939      	ldr	r1, [r7, #16]
 8010ae0:	6978      	ldr	r0, [r7, #20]
 8010ae2:	f7f6 fe0e 	bl	8007702 <mg_xprintf>
 8010ae6:	4603      	mov	r3, r0
}
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010af2:	bf00      	nop
 8010af4:	08025b9c 	.word	0x08025b9c

08010af8 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b086      	sub	sp, #24
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	1d19      	adds	r1, r3, #4
 8010b0a:	687a      	ldr	r2, [r7, #4]
 8010b0c:	6011      	str	r1, [r2, #0]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8010b12:	697a      	ldr	r2, [r7, #20]
 8010b14:	68b9      	ldr	r1, [r7, #8]
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f7ff ff6c 	bl	80109f4 <print_ip4>
 8010b1c:	4603      	mov	r3, r0
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3718      	adds	r7, #24
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}

08010b26 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8010b26:	b580      	push	{r7, lr}
 8010b28:	b086      	sub	sp, #24
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	60f8      	str	r0, [r7, #12]
 8010b2e:	60b9      	str	r1, [r7, #8]
 8010b30:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	1d19      	adds	r1, r3, #4
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	6011      	str	r1, [r2, #0]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	7cdb      	ldrb	r3, [r3, #19]
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d007      	beq.n	8010b58 <mg_print_ip+0x32>
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	68b9      	ldr	r1, [r7, #8]
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f7ff ff74 	bl	8010a3c <print_ip6>
 8010b54:	4603      	mov	r3, r0
 8010b56:	e006      	b.n	8010b66 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	68b9      	ldr	r1, [r7, #8]
 8010b5e:	68f8      	ldr	r0, [r7, #12]
 8010b60:	f7ff ff48 	bl	80109f4 <print_ip4>
 8010b64:	4603      	mov	r3, r0
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3718      	adds	r7, #24
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
	...

08010b70 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b088      	sub	sp, #32
 8010b74:	af02      	add	r7, sp, #8
 8010b76:	60f8      	str	r0, [r7, #12]
 8010b78:	60b9      	str	r1, [r7, #8]
 8010b7a:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	1d19      	adds	r1, r3, #4
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	6011      	str	r1, [r2, #0]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	8a1b      	ldrh	r3, [r3, #16]
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f00e fd36 	bl	801f600 <mg_ntohs>
 8010b94:	4603      	mov	r3, r0
 8010b96:	9301      	str	r3, [sp, #4]
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	4b05      	ldr	r3, [pc, #20]	@ (8010bb4 <mg_print_ip_port+0x44>)
 8010b9e:	4a06      	ldr	r2, [pc, #24]	@ (8010bb8 <mg_print_ip_port+0x48>)
 8010ba0:	68b9      	ldr	r1, [r7, #8]
 8010ba2:	68f8      	ldr	r0, [r7, #12]
 8010ba4:	f7f6 fdad 	bl	8007702 <mg_xprintf>
 8010ba8:	4603      	mov	r3, r0
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3718      	adds	r7, #24
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	08010b27 	.word	0x08010b27
 8010bb8:	08025bb8 	.word	0x08025bb8

08010bbc <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8010bbc:	b5b0      	push	{r4, r5, r7, lr}
 8010bbe:	b08c      	sub	sp, #48	@ 0x30
 8010bc0:	af06      	add	r7, sp, #24
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	1d19      	adds	r1, r3, #4
 8010bce:	687a      	ldr	r2, [r7, #4]
 8010bd0:	6011      	str	r1, [r2, #0]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	781b      	ldrb	r3, [r3, #0]
 8010bda:	461d      	mov	r5, r3
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	3301      	adds	r3, #1
 8010be0:	781b      	ldrb	r3, [r3, #0]
 8010be2:	461a      	mov	r2, r3
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	3302      	adds	r3, #2
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	3303      	adds	r3, #3
 8010bf0:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8010bf2:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8010bf4:	697b      	ldr	r3, [r7, #20]
 8010bf6:	3304      	adds	r3, #4
 8010bf8:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8010bfa:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	3305      	adds	r3, #5
 8010c00:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8010c02:	9304      	str	r3, [sp, #16]
 8010c04:	9403      	str	r4, [sp, #12]
 8010c06:	9002      	str	r0, [sp, #8]
 8010c08:	9101      	str	r1, [sp, #4]
 8010c0a:	9200      	str	r2, [sp, #0]
 8010c0c:	462b      	mov	r3, r5
 8010c0e:	4a05      	ldr	r2, [pc, #20]	@ (8010c24 <mg_print_mac+0x68>)
 8010c10:	68b9      	ldr	r1, [r7, #8]
 8010c12:	68f8      	ldr	r0, [r7, #12]
 8010c14:	f7f6 fd75 	bl	8007702 <mg_xprintf>
 8010c18:	4603      	mov	r3, r0
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	3718      	adds	r7, #24
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bdb0      	pop	{r4, r5, r7, pc}
 8010c22:	bf00      	nop
 8010c24:	08025bc0 	.word	0x08025bc0

08010c28 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8010c28:	b480      	push	{r7}
 8010c2a:	b087      	sub	sp, #28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	460b      	mov	r3, r1
 8010c32:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8010c34:	4b19      	ldr	r3, [pc, #100]	@ (8010c9c <mg_esc+0x74>)
 8010c36:	613b      	str	r3, [r7, #16]
 8010c38:	4b19      	ldr	r3, [pc, #100]	@ (8010ca0 <mg_esc+0x78>)
 8010c3a:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8010c3c:	78fb      	ldrb	r3, [r7, #3]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d001      	beq.n	8010c46 <mg_esc+0x1e>
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	e000      	b.n	8010c48 <mg_esc+0x20>
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	617b      	str	r3, [r7, #20]
 8010c4a:	e01b      	b.n	8010c84 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	781b      	ldrb	r3, [r3, #0]
 8010c50:	461a      	mov	r2, r3
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d112      	bne.n	8010c7e <mg_esc+0x56>
 8010c58:	78fb      	ldrb	r3, [r7, #3]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d007      	beq.n	8010c6e <mg_esc+0x46>
 8010c5e:	697a      	ldr	r2, [r7, #20]
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	461a      	mov	r2, r3
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	4413      	add	r3, r2
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	e00f      	b.n	8010c8e <mg_esc+0x66>
 8010c6e:	697a      	ldr	r2, [r7, #20]
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	461a      	mov	r2, r3
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	4413      	add	r3, r2
 8010c7a:	781b      	ldrb	r3, [r3, #0]
 8010c7c:	e007      	b.n	8010c8e <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	3301      	adds	r3, #1
 8010c82:	617b      	str	r3, [r7, #20]
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d1df      	bne.n	8010c4c <mg_esc+0x24>
  }
  return 0;
 8010c8c:	2300      	movs	r3, #0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	371c      	adds	r7, #28
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr
 8010c9a:	bf00      	nop
 8010c9c:	08025324 	.word	0x08025324
 8010ca0:	0802532c 	.word	0x0802532c

08010ca4 <mg_escape>:

static char mg_escape(int c) {
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8010cac:	2101      	movs	r1, #1
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f7ff ffba 	bl	8010c28 <mg_esc>
 8010cb4:	4603      	mov	r3, r0
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3708      	adds	r7, #8
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}

08010cbe <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8010cbe:	b580      	push	{r7, lr}
 8010cc0:	b088      	sub	sp, #32
 8010cc2:	af00      	add	r7, sp, #0
 8010cc4:	60f8      	str	r0, [r7, #12]
 8010cc6:	60b9      	str	r1, [r7, #8]
 8010cc8:	607a      	str	r2, [r7, #4]
 8010cca:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	61fb      	str	r3, [r7, #28]
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	61fb      	str	r3, [r7, #28]
 8010cd8:	e023      	b.n	8010d22 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8010cda:	687a      	ldr	r2, [r7, #4]
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	4413      	add	r3, r2
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7ff ffde 	bl	8010ca4 <mg_escape>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8010cec:	7dfb      	ldrb	r3, [r7, #23]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d00c      	beq.n	8010d0c <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	68b9      	ldr	r1, [r7, #8]
 8010cf6:	205c      	movs	r0, #92	@ 0x5c
 8010cf8:	4798      	blx	r3
 8010cfa:	7dfa      	ldrb	r2, [r7, #23]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	68b9      	ldr	r1, [r7, #8]
 8010d00:	4610      	mov	r0, r2
 8010d02:	4798      	blx	r3
 8010d04:	69bb      	ldr	r3, [r7, #24]
 8010d06:	3301      	adds	r3, #1
 8010d08:	61bb      	str	r3, [r7, #24]
 8010d0a:	e007      	b.n	8010d1c <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8010d0c:	687a      	ldr	r2, [r7, #4]
 8010d0e:	69fb      	ldr	r3, [r7, #28]
 8010d10:	4413      	add	r3, r2
 8010d12:	781a      	ldrb	r2, [r3, #0]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	68b9      	ldr	r1, [r7, #8]
 8010d18:	4610      	mov	r0, r2
 8010d1a:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	61fb      	str	r3, [r7, #28]
 8010d22:	69fa      	ldr	r2, [r7, #28]
 8010d24:	683b      	ldr	r3, [r7, #0]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d205      	bcs.n	8010d36 <qcpy+0x78>
 8010d2a:	687a      	ldr	r2, [r7, #4]
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	4413      	add	r3, r2
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d1d1      	bne.n	8010cda <qcpy+0x1c>
    }
  }
  return i + extra;
 8010d36:	69fa      	ldr	r2, [r7, #28]
 8010d38:	69bb      	ldr	r3, [r7, #24]
 8010d3a:	4413      	add	r3, r2
}
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3720      	adds	r7, #32
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <mg_print_hex>:
    n += j;
  }
  return n;
}

size_t mg_print_hex(void (*out)(char, void *), void *arg, va_list *ap) {
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b088      	sub	sp, #32
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60f8      	str	r0, [r7, #12]
 8010d4c:	60b9      	str	r1, [r7, #8]
 8010d4e:	607a      	str	r2, [r7, #4]
  size_t bl = (size_t) va_arg(*ap, int);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	1d19      	adds	r1, r3, #4
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	6011      	str	r1, [r2, #0]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	61bb      	str	r3, [r7, #24]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	1d19      	adds	r1, r3, #4
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	6011      	str	r1, [r2, #0]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	617b      	str	r3, [r7, #20]
  const char *hex = "0123456789abcdef";
 8010d6c:	4b16      	ldr	r3, [pc, #88]	@ (8010dc8 <mg_print_hex+0x84>)
 8010d6e:	613b      	str	r3, [r7, #16]
  size_t j;
  for (j = 0; j < bl; j++) {
 8010d70:	2300      	movs	r3, #0
 8010d72:	61fb      	str	r3, [r7, #28]
 8010d74:	e01e      	b.n	8010db4 <mg_print_hex+0x70>
    out(hex[(p[j] >> 4) & 0x0F], arg);
 8010d76:	697a      	ldr	r2, [r7, #20]
 8010d78:	69fb      	ldr	r3, [r7, #28]
 8010d7a:	4413      	add	r3, r2
 8010d7c:	781b      	ldrb	r3, [r3, #0]
 8010d7e:	091b      	lsrs	r3, r3, #4
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	f003 030f 	and.w	r3, r3, #15
 8010d86:	693a      	ldr	r2, [r7, #16]
 8010d88:	4413      	add	r3, r2
 8010d8a:	781a      	ldrb	r2, [r3, #0]
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	68b9      	ldr	r1, [r7, #8]
 8010d90:	4610      	mov	r0, r2
 8010d92:	4798      	blx	r3
    out(hex[p[j] & 0x0F], arg);
 8010d94:	697a      	ldr	r2, [r7, #20]
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	4413      	add	r3, r2
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	f003 030f 	and.w	r3, r3, #15
 8010da0:	693a      	ldr	r2, [r7, #16]
 8010da2:	4413      	add	r3, r2
 8010da4:	781a      	ldrb	r2, [r3, #0]
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	68b9      	ldr	r1, [r7, #8]
 8010daa:	4610      	mov	r0, r2
 8010dac:	4798      	blx	r3
  for (j = 0; j < bl; j++) {
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	3301      	adds	r3, #1
 8010db2:	61fb      	str	r3, [r7, #28]
 8010db4:	69fa      	ldr	r2, [r7, #28]
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d3dc      	bcc.n	8010d76 <mg_print_hex+0x32>
  }
  return 2 * bl;
 8010dbc:	69bb      	ldr	r3, [r7, #24]
 8010dbe:	005b      	lsls	r3, r3, #1
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3720      	adds	r7, #32
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	08024760 	.word	0x08024760

08010dcc <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b086      	sub	sp, #24
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	1d19      	adds	r1, r3, #4
 8010dde:	687a      	ldr	r2, [r7, #4]
 8010de0:	6011      	str	r1, [r2, #0]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	1d19      	adds	r1, r3, #4
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	6011      	str	r1, [r2, #0]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d109      	bne.n	8010e0e <mg_print_esc+0x42>
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d004      	beq.n	8010e0a <mg_print_esc+0x3e>
 8010e00:	6938      	ldr	r0, [r7, #16]
 8010e02:	f7ef fae5 	bl	80003d0 <strlen>
 8010e06:	4603      	mov	r3, r0
 8010e08:	e000      	b.n	8010e0c <mg_print_esc+0x40>
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	693a      	ldr	r2, [r7, #16]
 8010e12:	68b9      	ldr	r1, [r7, #8]
 8010e14:	68f8      	ldr	r0, [r7, #12]
 8010e16:	f7ff ff52 	bl	8010cbe <qcpy>
 8010e1a:	4603      	mov	r3, r0
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3718      	adds	r7, #24
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}

08010e24 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8010e30:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	689b      	ldr	r3, [r3, #8]
 8010e3c:	4413      	add	r3, r2
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	689a      	ldr	r2, [r3, #8]
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	4413      	add	r3, r2
 8010e4a:	1d1a      	adds	r2, r3, #4
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d906      	bls.n	8010e62 <mg_queue_read_len+0x3e>
 8010e54:	4b05      	ldr	r3, [pc, #20]	@ (8010e6c <mg_queue_read_len+0x48>)
 8010e56:	4a06      	ldr	r2, [pc, #24]	@ (8010e70 <mg_queue_read_len+0x4c>)
 8010e58:	f641 6181 	movw	r1, #7809	@ 0x1e81
 8010e5c:	4805      	ldr	r0, [pc, #20]	@ (8010e74 <mg_queue_read_len+0x50>)
 8010e5e:	f012 f9a7 	bl	80231b0 <__assert_func>
  return n;
 8010e62:	68fb      	ldr	r3, [r7, #12]
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3710      	adds	r7, #16
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	08025c24 	.word	0x08025c24
 8010e70:	080281c0 	.word	0x080281c0
 8010e74:	08024478 	.word	0x08024478

08010e78 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	68db      	ldr	r3, [r3, #12]
 8010e8e:	4413      	add	r3, r2
 8010e90:	68fa      	ldr	r2, [r7, #12]
 8010e92:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8010e94:	f3bf 8f5b 	dmb	ish
}
 8010e98:	bf00      	nop
 8010e9a:	3714      	adds	r7, #20
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b086      	sub	sp, #24
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	60f8      	str	r0, [r7, #12]
 8010eac:	60b9      	str	r1, [r7, #8]
 8010eae:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	617b      	str	r3, [r7, #20]
 8010eb4:	2308      	movs	r3, #8
 8010eb6:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	68da      	ldr	r2, [r3, #12]
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	689b      	ldr	r3, [r3, #8]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d312      	bcc.n	8010eea <mg_queue_book+0x46>
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	68da      	ldr	r2, [r3, #12]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	441a      	add	r2, r3
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	441a      	add	r2, r3
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d808      	bhi.n	8010eea <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	685a      	ldr	r2, [r3, #4]
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	68db      	ldr	r3, [r3, #12]
 8010ee0:	1ad2      	subs	r2, r2, r3
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	1ad3      	subs	r3, r2, r3
 8010ee6:	617b      	str	r3, [r7, #20]
 8010ee8:	e011      	b.n	8010f0e <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	68da      	ldr	r2, [r3, #12]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	689b      	ldr	r3, [r3, #8]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d30b      	bcc.n	8010f0e <mg_queue_book+0x6a>
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	689b      	ldr	r3, [r3, #8]
 8010efa:	693a      	ldr	r2, [r7, #16]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d206      	bcs.n	8010f0e <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8010f00:	2100      	movs	r1, #0
 8010f02:	68f8      	ldr	r0, [r7, #12]
 8010f04:	f7ff ffb8 	bl	8010e78 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	68da      	ldr	r2, [r3, #12]
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	441a      	add	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	441a      	add	r2, r3
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	689b      	ldr	r3, [r3, #8]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d207      	bcs.n	8010f32 <mg_queue_book+0x8e>
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	689a      	ldr	r2, [r3, #8]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	68db      	ldr	r3, [r3, #12]
 8010f2a:	1ad2      	subs	r2, r2, r3
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d007      	beq.n	8010f48 <mg_queue_book+0xa4>
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	681a      	ldr	r2, [r3, #0]
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	3304      	adds	r3, #4
 8010f42:	441a      	add	r2, r3
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	601a      	str	r2, [r3, #0]
  return space;
 8010f48:	697b      	ldr	r3, [r7, #20]
}
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	3718      	adds	r7, #24
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
	...

08010f54 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
 8010f5c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	689a      	ldr	r2, [r3, #8]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	429a      	cmp	r2, r3
 8010f6c:	d013      	beq.n	8010f96 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f7ff ff58 	bl	8010e24 <mg_queue_read_len>
 8010f74:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d10c      	bne.n	8010f96 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68da      	ldr	r2, [r3, #12]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	689b      	ldr	r3, [r3, #8]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d903      	bls.n	8010f96 <mg_queue_next+0x42>
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ff ff48 	bl	8010e24 <mg_queue_read_len>
 8010f94:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d007      	beq.n	8010fac <mg_queue_next+0x58>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	689b      	ldr	r3, [r3, #8]
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	441a      	add	r2, r3
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	689a      	ldr	r2, [r3, #8]
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	441a      	add	r2, r3
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d906      	bls.n	8010fca <mg_queue_next+0x76>
 8010fbc:	4b05      	ldr	r3, [pc, #20]	@ (8010fd4 <mg_queue_next+0x80>)
 8010fbe:	4a06      	ldr	r2, [pc, #24]	@ (8010fd8 <mg_queue_next+0x84>)
 8010fc0:	f641 61a2 	movw	r1, #7842	@ 0x1ea2
 8010fc4:	4805      	ldr	r0, [pc, #20]	@ (8010fdc <mg_queue_next+0x88>)
 8010fc6:	f012 f8f3 	bl	80231b0 <__assert_func>
  return len;
 8010fca:	68fb      	ldr	r3, [r7, #12]
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3710      	adds	r7, #16
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}
 8010fd4:	08025c48 	.word	0x08025c48
 8010fd8:	080281d4 	.word	0x080281d4
 8010fdc:	08024478 	.word	0x08024478

08010fe0 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
 8010fe8:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d106      	bne.n	8010ffe <mg_queue_add+0x1e>
 8010ff0:	4b13      	ldr	r3, [pc, #76]	@ (8011040 <mg_queue_add+0x60>)
 8010ff2:	4a14      	ldr	r2, [pc, #80]	@ (8011044 <mg_queue_add+0x64>)
 8010ff4:	f641 61a7 	movw	r1, #7847	@ 0x1ea7
 8010ff8:	4813      	ldr	r0, [pc, #76]	@ (8011048 <mg_queue_add+0x68>)
 8010ffa:	f012 f8d9 	bl	80231b0 <__assert_func>
  mg_queue_write_len(q, len);
 8010ffe:	6839      	ldr	r1, [r7, #0]
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7ff ff39 	bl	8010e78 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	68da      	ldr	r2, [r3, #12]
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	4413      	add	r3, r2
 801100e:	f103 0208 	add.w	r2, r3, #8
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	685b      	ldr	r3, [r3, #4]
 8011016:	429a      	cmp	r2, r3
 8011018:	d906      	bls.n	8011028 <mg_queue_add+0x48>
 801101a:	4b0c      	ldr	r3, [pc, #48]	@ (801104c <mg_queue_add+0x6c>)
 801101c:	4a09      	ldr	r2, [pc, #36]	@ (8011044 <mg_queue_add+0x64>)
 801101e:	f641 61a9 	movw	r1, #7849	@ 0x1ea9
 8011022:	4809      	ldr	r0, [pc, #36]	@ (8011048 <mg_queue_add+0x68>)
 8011024:	f012 f8c4 	bl	80231b0 <__assert_func>
  q->head += len + sizeof(uint32_t);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	68da      	ldr	r2, [r3, #12]
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	4413      	add	r3, r2
 8011030:	1d1a      	adds	r2, r3, #4
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	60da      	str	r2, [r3, #12]
}
 8011036:	bf00      	nop
 8011038:	3708      	adds	r7, #8
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	08025c64 	.word	0x08025c64
 8011044:	080281e4 	.word	0x080281e4
 8011048:	08024478 	.word	0x08024478
 801104c:	08025c6c 	.word	0x08025c6c

08011050 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	689a      	ldr	r2, [r3, #8]
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	4413      	add	r3, r2
 8011062:	1d1a      	adds	r2, r3, #4
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	1d1a      	adds	r2, r3, #4
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	429a      	cmp	r2, r3
 8011074:	d906      	bls.n	8011084 <mg_queue_del+0x34>
 8011076:	4b05      	ldr	r3, [pc, #20]	@ (801108c <mg_queue_del+0x3c>)
 8011078:	4a05      	ldr	r2, [pc, #20]	@ (8011090 <mg_queue_del+0x40>)
 801107a:	f641 61af 	movw	r1, #7855	@ 0x1eaf
 801107e:	4805      	ldr	r0, [pc, #20]	@ (8011094 <mg_queue_del+0x44>)
 8011080:	f012 f896 	bl	80231b0 <__assert_func>
}
 8011084:	bf00      	nop
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	08025c9c 	.word	0x08025c9c
 8011090:	080281f4 	.word	0x080281f4
 8011094:	08024478 	.word	0x08024478

08011098 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 80110a2:	4b12      	ldr	r3, [pc, #72]	@ (80110ec <blk0+0x54>)
 80110a4:	881b      	ldrh	r3, [r3, #0]
 80110a6:	2bff      	cmp	r3, #255	@ 0xff
 80110a8:	d915      	bls.n	80110d6 <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	683a      	ldr	r2, [r7, #0]
 80110ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110b2:	ea4f 2333 	mov.w	r3, r3, ror #8
 80110b6:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6839      	ldr	r1, [r7, #0]
 80110be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110c2:	ea4f 6333 	mov.w	r3, r3, ror #24
 80110c6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80110ca:	ea42 0103 	orr.w	r1, r2, r3
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	683a      	ldr	r2, [r7, #0]
 80110d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	683a      	ldr	r2, [r7, #0]
 80110da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80110de:	4618      	mov	r0, r3
 80110e0:	370c      	adds	r7, #12
 80110e2:	46bd      	mov	sp, r7
 80110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e8:	4770      	bx	lr
 80110ea:	bf00      	nop
 80110ec:	0802536c 	.word	0x0802536c

080110f0 <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char *buffer) {
 80110f0:	b590      	push	{r4, r7, lr}
 80110f2:	b099      	sub	sp, #100	@ 0x64
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 80110fa:	f107 030c 	add.w	r3, r7, #12
 80110fe:	2240      	movs	r2, #64	@ 0x40
 8011100:	6839      	ldr	r1, [r7, #0]
 8011102:	4618      	mov	r0, r3
 8011104:	f012 fc81 	bl	8023a0a <memcpy>
  a = state[0];
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  b = state[1];
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	65bb      	str	r3, [r7, #88]	@ 0x58
  c = state[2];
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	689b      	ldr	r3, [r3, #8]
 8011118:	657b      	str	r3, [r7, #84]	@ 0x54
  d = state[3];
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	68db      	ldr	r3, [r3, #12]
 801111e:	653b      	str	r3, [r7, #80]	@ 0x50
  e = state[4];
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	691b      	ldr	r3, [r3, #16]
 8011124:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(a, b, c, d, e, 0);
 8011126:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801112a:	405a      	eors	r2, r3
 801112c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801112e:	401a      	ands	r2, r3
 8011130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011132:	ea82 0403 	eor.w	r4, r2, r3
 8011136:	f107 030c 	add.w	r3, r7, #12
 801113a:	2100      	movs	r1, #0
 801113c:	4618      	mov	r0, r3
 801113e:	f7ff ffab 	bl	8011098 <blk0>
 8011142:	4603      	mov	r3, r0
 8011144:	18e2      	adds	r2, r4, r3
 8011146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011148:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801114c:	441a      	add	r2, r3
 801114e:	4bbd      	ldr	r3, [pc, #756]	@ (8011444 <mg_sha1_transform+0x354>)
 8011150:	4413      	add	r3, r2
 8011152:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011154:	4413      	add	r3, r2
 8011156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011158:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801115a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801115e:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 1);
 8011160:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011164:	405a      	eors	r2, r3
 8011166:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011168:	401a      	ands	r2, r3
 801116a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801116c:	ea82 0403 	eor.w	r4, r2, r3
 8011170:	f107 030c 	add.w	r3, r7, #12
 8011174:	2101      	movs	r1, #1
 8011176:	4618      	mov	r0, r3
 8011178:	f7ff ff8e 	bl	8011098 <blk0>
 801117c:	4603      	mov	r3, r0
 801117e:	18e2      	adds	r2, r4, r3
 8011180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011182:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011186:	441a      	add	r2, r3
 8011188:	4bae      	ldr	r3, [pc, #696]	@ (8011444 <mg_sha1_transform+0x354>)
 801118a:	4413      	add	r3, r2
 801118c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801118e:	4413      	add	r3, r2
 8011190:	653b      	str	r3, [r7, #80]	@ 0x50
 8011192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011194:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011198:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 2);
 801119a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801119c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801119e:	405a      	eors	r2, r3
 80111a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111a2:	401a      	ands	r2, r3
 80111a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80111a6:	ea82 0403 	eor.w	r4, r2, r3
 80111aa:	f107 030c 	add.w	r3, r7, #12
 80111ae:	2102      	movs	r1, #2
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7ff ff71 	bl	8011098 <blk0>
 80111b6:	4603      	mov	r3, r0
 80111b8:	18e2      	adds	r2, r4, r3
 80111ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111bc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80111c0:	441a      	add	r2, r3
 80111c2:	4ba0      	ldr	r3, [pc, #640]	@ (8011444 <mg_sha1_transform+0x354>)
 80111c4:	4413      	add	r3, r2
 80111c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80111c8:	4413      	add	r3, r2
 80111ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80111cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80111d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 3);
 80111d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80111d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111d8:	405a      	eors	r2, r3
 80111da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111dc:	401a      	ands	r2, r3
 80111de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111e0:	ea82 0403 	eor.w	r4, r2, r3
 80111e4:	f107 030c 	add.w	r3, r7, #12
 80111e8:	2103      	movs	r1, #3
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7ff ff54 	bl	8011098 <blk0>
 80111f0:	4603      	mov	r3, r0
 80111f2:	18e2      	adds	r2, r4, r3
 80111f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80111fa:	441a      	add	r2, r3
 80111fc:	4b91      	ldr	r3, [pc, #580]	@ (8011444 <mg_sha1_transform+0x354>)
 80111fe:	4413      	add	r3, r2
 8011200:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011202:	4413      	add	r3, r2
 8011204:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011206:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011208:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801120c:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 4);
 801120e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011212:	405a      	eors	r2, r3
 8011214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011216:	401a      	ands	r2, r3
 8011218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801121a:	ea82 0403 	eor.w	r4, r2, r3
 801121e:	f107 030c 	add.w	r3, r7, #12
 8011222:	2104      	movs	r1, #4
 8011224:	4618      	mov	r0, r3
 8011226:	f7ff ff37 	bl	8011098 <blk0>
 801122a:	4603      	mov	r3, r0
 801122c:	18e2      	adds	r2, r4, r3
 801122e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011230:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011234:	441a      	add	r2, r3
 8011236:	4b83      	ldr	r3, [pc, #524]	@ (8011444 <mg_sha1_transform+0x354>)
 8011238:	4413      	add	r3, r2
 801123a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801123c:	4413      	add	r3, r2
 801123e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011240:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011242:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011246:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 5);
 8011248:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801124a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801124c:	405a      	eors	r2, r3
 801124e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011250:	401a      	ands	r2, r3
 8011252:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011254:	ea82 0403 	eor.w	r4, r2, r3
 8011258:	f107 030c 	add.w	r3, r7, #12
 801125c:	2105      	movs	r1, #5
 801125e:	4618      	mov	r0, r3
 8011260:	f7ff ff1a 	bl	8011098 <blk0>
 8011264:	4603      	mov	r3, r0
 8011266:	18e2      	adds	r2, r4, r3
 8011268:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801126a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801126e:	441a      	add	r2, r3
 8011270:	4b74      	ldr	r3, [pc, #464]	@ (8011444 <mg_sha1_transform+0x354>)
 8011272:	4413      	add	r3, r2
 8011274:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011276:	4413      	add	r3, r2
 8011278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801127a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801127c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011280:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 6);
 8011282:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011286:	405a      	eors	r2, r3
 8011288:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801128a:	401a      	ands	r2, r3
 801128c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801128e:	ea82 0403 	eor.w	r4, r2, r3
 8011292:	f107 030c 	add.w	r3, r7, #12
 8011296:	2106      	movs	r1, #6
 8011298:	4618      	mov	r0, r3
 801129a:	f7ff fefd 	bl	8011098 <blk0>
 801129e:	4603      	mov	r3, r0
 80112a0:	18e2      	adds	r2, r4, r3
 80112a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112a4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80112a8:	441a      	add	r2, r3
 80112aa:	4b66      	ldr	r3, [pc, #408]	@ (8011444 <mg_sha1_transform+0x354>)
 80112ac:	4413      	add	r3, r2
 80112ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80112b0:	4413      	add	r3, r2
 80112b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80112b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112b6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80112ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 7);
 80112bc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80112be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112c0:	405a      	eors	r2, r3
 80112c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112c4:	401a      	ands	r2, r3
 80112c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80112c8:	ea82 0403 	eor.w	r4, r2, r3
 80112cc:	f107 030c 	add.w	r3, r7, #12
 80112d0:	2107      	movs	r1, #7
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7ff fee0 	bl	8011098 <blk0>
 80112d8:	4603      	mov	r3, r0
 80112da:	18e2      	adds	r2, r4, r3
 80112dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112de:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80112e2:	441a      	add	r2, r3
 80112e4:	4b57      	ldr	r3, [pc, #348]	@ (8011444 <mg_sha1_transform+0x354>)
 80112e6:	4413      	add	r3, r2
 80112e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80112ea:	4413      	add	r3, r2
 80112ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80112ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80112f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 8);
 80112f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80112f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80112fa:	405a      	eors	r2, r3
 80112fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112fe:	401a      	ands	r2, r3
 8011300:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011302:	ea82 0403 	eor.w	r4, r2, r3
 8011306:	f107 030c 	add.w	r3, r7, #12
 801130a:	2108      	movs	r1, #8
 801130c:	4618      	mov	r0, r3
 801130e:	f7ff fec3 	bl	8011098 <blk0>
 8011312:	4603      	mov	r3, r0
 8011314:	18e2      	adds	r2, r4, r3
 8011316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011318:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801131c:	441a      	add	r2, r3
 801131e:	4b49      	ldr	r3, [pc, #292]	@ (8011444 <mg_sha1_transform+0x354>)
 8011320:	4413      	add	r3, r2
 8011322:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011324:	4413      	add	r3, r2
 8011326:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801132a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801132e:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 9);
 8011330:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011334:	405a      	eors	r2, r3
 8011336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011338:	401a      	ands	r2, r3
 801133a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801133c:	ea82 0403 	eor.w	r4, r2, r3
 8011340:	f107 030c 	add.w	r3, r7, #12
 8011344:	2109      	movs	r1, #9
 8011346:	4618      	mov	r0, r3
 8011348:	f7ff fea6 	bl	8011098 <blk0>
 801134c:	4603      	mov	r3, r0
 801134e:	18e2      	adds	r2, r4, r3
 8011350:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011352:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011356:	441a      	add	r2, r3
 8011358:	4b3a      	ldr	r3, [pc, #232]	@ (8011444 <mg_sha1_transform+0x354>)
 801135a:	4413      	add	r3, r2
 801135c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801135e:	4413      	add	r3, r2
 8011360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011364:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011368:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 10);
 801136a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801136c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801136e:	405a      	eors	r2, r3
 8011370:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011372:	401a      	ands	r2, r3
 8011374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011376:	ea82 0403 	eor.w	r4, r2, r3
 801137a:	f107 030c 	add.w	r3, r7, #12
 801137e:	210a      	movs	r1, #10
 8011380:	4618      	mov	r0, r3
 8011382:	f7ff fe89 	bl	8011098 <blk0>
 8011386:	4603      	mov	r3, r0
 8011388:	18e2      	adds	r2, r4, r3
 801138a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801138c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011390:	441a      	add	r2, r3
 8011392:	4b2c      	ldr	r3, [pc, #176]	@ (8011444 <mg_sha1_transform+0x354>)
 8011394:	4413      	add	r3, r2
 8011396:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011398:	4413      	add	r3, r2
 801139a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801139c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801139e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80113a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  R0(e, a, b, c, d, 11);
 80113a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80113a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113a8:	405a      	eors	r2, r3
 80113aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113ac:	401a      	ands	r2, r3
 80113ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80113b0:	ea82 0403 	eor.w	r4, r2, r3
 80113b4:	f107 030c 	add.w	r3, r7, #12
 80113b8:	210b      	movs	r1, #11
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7ff fe6c 	bl	8011098 <blk0>
 80113c0:	4603      	mov	r3, r0
 80113c2:	18e2      	adds	r2, r4, r3
 80113c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113c6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80113ca:	441a      	add	r2, r3
 80113cc:	4b1d      	ldr	r3, [pc, #116]	@ (8011444 <mg_sha1_transform+0x354>)
 80113ce:	4413      	add	r3, r2
 80113d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80113d2:	4413      	add	r3, r2
 80113d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80113d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113d8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80113dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R0(d, e, a, b, c, 12);
 80113de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80113e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113e2:	405a      	eors	r2, r3
 80113e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113e6:	401a      	ands	r2, r3
 80113e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113ea:	ea82 0403 	eor.w	r4, r2, r3
 80113ee:	f107 030c 	add.w	r3, r7, #12
 80113f2:	210c      	movs	r1, #12
 80113f4:	4618      	mov	r0, r3
 80113f6:	f7ff fe4f 	bl	8011098 <blk0>
 80113fa:	4603      	mov	r3, r0
 80113fc:	18e2      	adds	r2, r4, r3
 80113fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011400:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011404:	441a      	add	r2, r3
 8011406:	4b0f      	ldr	r3, [pc, #60]	@ (8011444 <mg_sha1_transform+0x354>)
 8011408:	4413      	add	r3, r2
 801140a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801140c:	4413      	add	r3, r2
 801140e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011412:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R0(c, d, e, a, b, 13);
 8011418:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801141a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801141c:	405a      	eors	r2, r3
 801141e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011420:	401a      	ands	r2, r3
 8011422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011424:	ea82 0403 	eor.w	r4, r2, r3
 8011428:	f107 030c 	add.w	r3, r7, #12
 801142c:	210d      	movs	r1, #13
 801142e:	4618      	mov	r0, r3
 8011430:	f7ff fe32 	bl	8011098 <blk0>
 8011434:	4603      	mov	r3, r0
 8011436:	18e2      	adds	r2, r4, r3
 8011438:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801143a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801143e:	441a      	add	r2, r3
 8011440:	e002      	b.n	8011448 <mg_sha1_transform+0x358>
 8011442:	bf00      	nop
 8011444:	5a827999 	.word	0x5a827999
 8011448:	4bac      	ldr	r3, [pc, #688]	@ (80116fc <mg_sha1_transform+0x60c>)
 801144a:	4413      	add	r3, r2
 801144c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801144e:	4413      	add	r3, r2
 8011450:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011452:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011454:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011458:	653b      	str	r3, [r7, #80]	@ 0x50
  R0(b, c, d, e, a, 14);
 801145a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801145c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801145e:	405a      	eors	r2, r3
 8011460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011462:	401a      	ands	r2, r3
 8011464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011466:	ea82 0403 	eor.w	r4, r2, r3
 801146a:	f107 030c 	add.w	r3, r7, #12
 801146e:	210e      	movs	r1, #14
 8011470:	4618      	mov	r0, r3
 8011472:	f7ff fe11 	bl	8011098 <blk0>
 8011476:	4603      	mov	r3, r0
 8011478:	18e2      	adds	r2, r4, r3
 801147a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801147c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011480:	441a      	add	r2, r3
 8011482:	4b9e      	ldr	r3, [pc, #632]	@ (80116fc <mg_sha1_transform+0x60c>)
 8011484:	4413      	add	r3, r2
 8011486:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011488:	4413      	add	r3, r2
 801148a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801148c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801148e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011492:	657b      	str	r3, [r7, #84]	@ 0x54
  R0(a, b, c, d, e, 15);
 8011494:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011498:	405a      	eors	r2, r3
 801149a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801149c:	401a      	ands	r2, r3
 801149e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114a0:	ea82 0403 	eor.w	r4, r2, r3
 80114a4:	f107 030c 	add.w	r3, r7, #12
 80114a8:	210f      	movs	r1, #15
 80114aa:	4618      	mov	r0, r3
 80114ac:	f7ff fdf4 	bl	8011098 <blk0>
 80114b0:	4603      	mov	r3, r0
 80114b2:	18e2      	adds	r2, r4, r3
 80114b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114b6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80114ba:	441a      	add	r2, r3
 80114bc:	4b8f      	ldr	r3, [pc, #572]	@ (80116fc <mg_sha1_transform+0x60c>)
 80114be:	4413      	add	r3, r2
 80114c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114c2:	4413      	add	r3, r2
 80114c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80114c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80114c8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80114cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  R1(e, a, b, c, d, 16);
 80114ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80114d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114d2:	405a      	eors	r2, r3
 80114d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80114d6:	401a      	ands	r2, r3
 80114d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114da:	405a      	eors	r2, r3
 80114dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80114de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80114e0:	4059      	eors	r1, r3
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	4059      	eors	r1, r3
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	404b      	eors	r3, r1
 80114ea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80114ee:	60fb      	str	r3, [r7, #12]
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	441a      	add	r2, r3
 80114f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80114fa:	441a      	add	r2, r3
 80114fc:	4b7f      	ldr	r3, [pc, #508]	@ (80116fc <mg_sha1_transform+0x60c>)
 80114fe:	4413      	add	r3, r2
 8011500:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011502:	4413      	add	r3, r2
 8011504:	653b      	str	r3, [r7, #80]	@ 0x50
 8011506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011508:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801150c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R1(d, e, a, b, c, 17);
 801150e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011512:	405a      	eors	r2, r3
 8011514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011516:	401a      	ands	r2, r3
 8011518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801151a:	405a      	eors	r2, r3
 801151c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801151e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011520:	4059      	eors	r1, r3
 8011522:	69bb      	ldr	r3, [r7, #24]
 8011524:	4059      	eors	r1, r3
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	404b      	eors	r3, r1
 801152a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801152e:	613b      	str	r3, [r7, #16]
 8011530:	693b      	ldr	r3, [r7, #16]
 8011532:	441a      	add	r2, r3
 8011534:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011536:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801153a:	441a      	add	r2, r3
 801153c:	4b6f      	ldr	r3, [pc, #444]	@ (80116fc <mg_sha1_transform+0x60c>)
 801153e:	4413      	add	r3, r2
 8011540:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011542:	4413      	add	r3, r2
 8011544:	657b      	str	r3, [r7, #84]	@ 0x54
 8011546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011548:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801154c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R1(c, d, e, a, b, 18);
 801154e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011550:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011552:	405a      	eors	r2, r3
 8011554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011556:	401a      	ands	r2, r3
 8011558:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801155a:	405a      	eors	r2, r3
 801155c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801155e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011560:	4059      	eors	r1, r3
 8011562:	69fb      	ldr	r3, [r7, #28]
 8011564:	4059      	eors	r1, r3
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	404b      	eors	r3, r1
 801156a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801156e:	617b      	str	r3, [r7, #20]
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	441a      	add	r2, r3
 8011574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011576:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801157a:	441a      	add	r2, r3
 801157c:	4b5f      	ldr	r3, [pc, #380]	@ (80116fc <mg_sha1_transform+0x60c>)
 801157e:	4413      	add	r3, r2
 8011580:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011582:	4413      	add	r3, r2
 8011584:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011586:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011588:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801158c:	653b      	str	r3, [r7, #80]	@ 0x50
  R1(b, c, d, e, a, 19);
 801158e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011592:	405a      	eors	r2, r3
 8011594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011596:	401a      	ands	r2, r3
 8011598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801159a:	405a      	eors	r2, r3
 801159c:	68f9      	ldr	r1, [r7, #12]
 801159e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115a0:	4059      	eors	r1, r3
 80115a2:	6a3b      	ldr	r3, [r7, #32]
 80115a4:	4059      	eors	r1, r3
 80115a6:	69bb      	ldr	r3, [r7, #24]
 80115a8:	404b      	eors	r3, r1
 80115aa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80115ae:	61bb      	str	r3, [r7, #24]
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	441a      	add	r2, r3
 80115b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80115b6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80115ba:	441a      	add	r2, r3
 80115bc:	4b4f      	ldr	r3, [pc, #316]	@ (80116fc <mg_sha1_transform+0x60c>)
 80115be:	4413      	add	r3, r2
 80115c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80115c2:	4413      	add	r3, r2
 80115c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80115c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115c8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80115cc:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 20);
 80115ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80115d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115d2:	405a      	eors	r2, r3
 80115d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115d6:	405a      	eors	r2, r3
 80115d8:	6939      	ldr	r1, [r7, #16]
 80115da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80115dc:	4059      	eors	r1, r3
 80115de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e0:	4059      	eors	r1, r3
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	404b      	eors	r3, r1
 80115e6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80115ea:	61fb      	str	r3, [r7, #28]
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	441a      	add	r2, r3
 80115f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80115f2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80115f6:	441a      	add	r2, r3
 80115f8:	4b41      	ldr	r3, [pc, #260]	@ (8011700 <mg_sha1_transform+0x610>)
 80115fa:	4413      	add	r3, r2
 80115fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80115fe:	4413      	add	r3, r2
 8011600:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011602:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011604:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011608:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 21);
 801160a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801160c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801160e:	405a      	eors	r2, r3
 8011610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011612:	405a      	eors	r2, r3
 8011614:	6979      	ldr	r1, [r7, #20]
 8011616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011618:	4059      	eors	r1, r3
 801161a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801161c:	4059      	eors	r1, r3
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	404b      	eors	r3, r1
 8011622:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011626:	623b      	str	r3, [r7, #32]
 8011628:	6a3b      	ldr	r3, [r7, #32]
 801162a:	441a      	add	r2, r3
 801162c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801162e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011632:	441a      	add	r2, r3
 8011634:	4b32      	ldr	r3, [pc, #200]	@ (8011700 <mg_sha1_transform+0x610>)
 8011636:	4413      	add	r3, r2
 8011638:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801163a:	4413      	add	r3, r2
 801163c:	653b      	str	r3, [r7, #80]	@ 0x50
 801163e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011640:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011644:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 22);
 8011646:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011648:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801164a:	405a      	eors	r2, r3
 801164c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801164e:	405a      	eors	r2, r3
 8011650:	69b9      	ldr	r1, [r7, #24]
 8011652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011654:	4059      	eors	r1, r3
 8011656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011658:	4059      	eors	r1, r3
 801165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801165c:	404b      	eors	r3, r1
 801165e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011662:	627b      	str	r3, [r7, #36]	@ 0x24
 8011664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011666:	441a      	add	r2, r3
 8011668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801166a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801166e:	441a      	add	r2, r3
 8011670:	4b23      	ldr	r3, [pc, #140]	@ (8011700 <mg_sha1_transform+0x610>)
 8011672:	4413      	add	r3, r2
 8011674:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011676:	4413      	add	r3, r2
 8011678:	657b      	str	r3, [r7, #84]	@ 0x54
 801167a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801167c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011680:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 23);
 8011682:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011686:	405a      	eors	r2, r3
 8011688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801168a:	405a      	eors	r2, r3
 801168c:	69f9      	ldr	r1, [r7, #28]
 801168e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011690:	4059      	eors	r1, r3
 8011692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011694:	4059      	eors	r1, r3
 8011696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011698:	404b      	eors	r3, r1
 801169a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801169e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80116a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116a2:	441a      	add	r2, r3
 80116a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116a6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80116aa:	441a      	add	r2, r3
 80116ac:	4b14      	ldr	r3, [pc, #80]	@ (8011700 <mg_sha1_transform+0x610>)
 80116ae:	4413      	add	r3, r2
 80116b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80116b2:	4413      	add	r3, r2
 80116b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80116b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116b8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80116bc:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 24);
 80116be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80116c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116c2:	405a      	eors	r2, r3
 80116c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116c6:	405a      	eors	r2, r3
 80116c8:	6a39      	ldr	r1, [r7, #32]
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	4059      	eors	r1, r3
 80116ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116d0:	4059      	eors	r1, r3
 80116d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116d4:	404b      	eors	r3, r1
 80116d6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80116da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80116dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116de:	441a      	add	r2, r3
 80116e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80116e2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80116e6:	441a      	add	r2, r3
 80116e8:	4b05      	ldr	r3, [pc, #20]	@ (8011700 <mg_sha1_transform+0x610>)
 80116ea:	4413      	add	r3, r2
 80116ec:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80116ee:	4413      	add	r3, r2
 80116f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80116f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116f4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80116f8:	e004      	b.n	8011704 <mg_sha1_transform+0x614>
 80116fa:	bf00      	nop
 80116fc:	5a827999 	.word	0x5a827999
 8011700:	6ed9eba1 	.word	0x6ed9eba1
 8011704:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 25);
 8011706:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801170a:	405a      	eors	r2, r3
 801170c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801170e:	405a      	eors	r2, r3
 8011710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011712:	693b      	ldr	r3, [r7, #16]
 8011714:	4059      	eors	r1, r3
 8011716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011718:	4059      	eors	r1, r3
 801171a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801171c:	404b      	eors	r3, r1
 801171e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011722:	633b      	str	r3, [r7, #48]	@ 0x30
 8011724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011726:	441a      	add	r2, r3
 8011728:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801172a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801172e:	441a      	add	r2, r3
 8011730:	4ba9      	ldr	r3, [pc, #676]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 8011732:	4413      	add	r3, r2
 8011734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011736:	4413      	add	r3, r2
 8011738:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801173a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801173c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011740:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 26);
 8011742:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011744:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011746:	405a      	eors	r2, r3
 8011748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801174a:	405a      	eors	r2, r3
 801174c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	4059      	eors	r1, r3
 8011752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011754:	4059      	eors	r1, r3
 8011756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011758:	404b      	eors	r3, r1
 801175a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801175e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011762:	441a      	add	r2, r3
 8011764:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011766:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801176a:	441a      	add	r2, r3
 801176c:	4b9a      	ldr	r3, [pc, #616]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 801176e:	4413      	add	r3, r2
 8011770:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011772:	4413      	add	r3, r2
 8011774:	653b      	str	r3, [r7, #80]	@ 0x50
 8011776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011778:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801177c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 27);
 801177e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011782:	405a      	eors	r2, r3
 8011784:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011786:	405a      	eors	r2, r3
 8011788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801178a:	69bb      	ldr	r3, [r7, #24]
 801178c:	4059      	eors	r1, r3
 801178e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011790:	4059      	eors	r1, r3
 8011792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011794:	404b      	eors	r3, r1
 8011796:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801179a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801179c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801179e:	441a      	add	r2, r3
 80117a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117a2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80117a6:	441a      	add	r2, r3
 80117a8:	4b8b      	ldr	r3, [pc, #556]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 80117aa:	4413      	add	r3, r2
 80117ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80117ae:	4413      	add	r3, r2
 80117b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80117b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117b4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80117b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 28);
 80117ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80117bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117be:	405a      	eors	r2, r3
 80117c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117c2:	405a      	eors	r2, r3
 80117c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	4059      	eors	r1, r3
 80117ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117cc:	4059      	eors	r1, r3
 80117ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117d0:	404b      	eors	r3, r1
 80117d2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80117d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80117d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117da:	441a      	add	r2, r3
 80117dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80117de:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80117e2:	441a      	add	r2, r3
 80117e4:	4b7c      	ldr	r3, [pc, #496]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 80117e6:	4413      	add	r3, r2
 80117e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80117ea:	4413      	add	r3, r2
 80117ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80117ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80117f4:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 29);
 80117f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80117f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117fa:	405a      	eors	r2, r3
 80117fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117fe:	405a      	eors	r2, r3
 8011800:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011802:	6a3b      	ldr	r3, [r7, #32]
 8011804:	4059      	eors	r1, r3
 8011806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011808:	4059      	eors	r1, r3
 801180a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801180c:	404b      	eors	r3, r1
 801180e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011812:	643b      	str	r3, [r7, #64]	@ 0x40
 8011814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011816:	441a      	add	r2, r3
 8011818:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801181a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801181e:	441a      	add	r2, r3
 8011820:	4b6d      	ldr	r3, [pc, #436]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 8011822:	4413      	add	r3, r2
 8011824:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011826:	4413      	add	r3, r2
 8011828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801182a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801182c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011830:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 30);
 8011832:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011836:	405a      	eors	r2, r3
 8011838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801183a:	405a      	eors	r2, r3
 801183c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011840:	4059      	eors	r1, r3
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	4059      	eors	r1, r3
 8011846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011848:	404b      	eors	r3, r1
 801184a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801184e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011852:	441a      	add	r2, r3
 8011854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011856:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801185a:	441a      	add	r2, r3
 801185c:	4b5e      	ldr	r3, [pc, #376]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 801185e:	4413      	add	r3, r2
 8011860:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011862:	4413      	add	r3, r2
 8011864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011866:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011868:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801186c:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 31);
 801186e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011870:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011872:	405a      	eors	r2, r3
 8011874:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011876:	405a      	eors	r2, r3
 8011878:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801187a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801187c:	4059      	eors	r1, r3
 801187e:	693b      	ldr	r3, [r7, #16]
 8011880:	4059      	eors	r1, r3
 8011882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011884:	404b      	eors	r3, r1
 8011886:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801188a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801188c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801188e:	441a      	add	r2, r3
 8011890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011892:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011896:	441a      	add	r2, r3
 8011898:	4b4f      	ldr	r3, [pc, #316]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 801189a:	4413      	add	r3, r2
 801189c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801189e:	4413      	add	r3, r2
 80118a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80118a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118a4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80118a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 32);
 80118aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80118ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118ae:	405a      	eors	r2, r3
 80118b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118b2:	405a      	eors	r2, r3
 80118b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80118b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118b8:	4059      	eors	r1, r3
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	4059      	eors	r1, r3
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	404b      	eors	r3, r1
 80118c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80118c6:	60fb      	str	r3, [r7, #12]
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	441a      	add	r2, r3
 80118cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80118d2:	441a      	add	r2, r3
 80118d4:	4b40      	ldr	r3, [pc, #256]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 80118d6:	4413      	add	r3, r2
 80118d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80118da:	4413      	add	r3, r2
 80118dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80118de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80118e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 33);
 80118e6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80118e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118ea:	405a      	eors	r2, r3
 80118ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118ee:	405a      	eors	r2, r3
 80118f0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80118f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118f4:	4059      	eors	r1, r3
 80118f6:	69bb      	ldr	r3, [r7, #24]
 80118f8:	4059      	eors	r1, r3
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	404b      	eors	r3, r1
 80118fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011902:	613b      	str	r3, [r7, #16]
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	441a      	add	r2, r3
 8011908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801190a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801190e:	441a      	add	r2, r3
 8011910:	4b31      	ldr	r3, [pc, #196]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 8011912:	4413      	add	r3, r2
 8011914:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011916:	4413      	add	r3, r2
 8011918:	65bb      	str	r3, [r7, #88]	@ 0x58
 801191a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801191c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011920:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 34);
 8011922:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011926:	405a      	eors	r2, r3
 8011928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801192a:	405a      	eors	r2, r3
 801192c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801192e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011930:	4059      	eors	r1, r3
 8011932:	69fb      	ldr	r3, [r7, #28]
 8011934:	4059      	eors	r1, r3
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	404b      	eors	r3, r1
 801193a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801193e:	617b      	str	r3, [r7, #20]
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	441a      	add	r2, r3
 8011944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011946:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801194a:	441a      	add	r2, r3
 801194c:	4b22      	ldr	r3, [pc, #136]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 801194e:	4413      	add	r3, r2
 8011950:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011952:	4413      	add	r3, r2
 8011954:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011958:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801195c:	657b      	str	r3, [r7, #84]	@ 0x54
  R2(a, b, c, d, e, 35);
 801195e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011962:	405a      	eors	r2, r3
 8011964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011966:	405a      	eors	r2, r3
 8011968:	68f9      	ldr	r1, [r7, #12]
 801196a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801196c:	4059      	eors	r1, r3
 801196e:	6a3b      	ldr	r3, [r7, #32]
 8011970:	4059      	eors	r1, r3
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	404b      	eors	r3, r1
 8011976:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801197a:	61bb      	str	r3, [r7, #24]
 801197c:	69bb      	ldr	r3, [r7, #24]
 801197e:	441a      	add	r2, r3
 8011980:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011982:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011986:	441a      	add	r2, r3
 8011988:	4b13      	ldr	r3, [pc, #76]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 801198a:	4413      	add	r3, r2
 801198c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801198e:	4413      	add	r3, r2
 8011990:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011992:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011994:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011998:	65bb      	str	r3, [r7, #88]	@ 0x58
  R2(e, a, b, c, d, 36);
 801199a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801199c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801199e:	405a      	eors	r2, r3
 80119a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119a2:	405a      	eors	r2, r3
 80119a4:	6939      	ldr	r1, [r7, #16]
 80119a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119a8:	4059      	eors	r1, r3
 80119aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119ac:	4059      	eors	r1, r3
 80119ae:	69fb      	ldr	r3, [r7, #28]
 80119b0:	404b      	eors	r3, r1
 80119b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80119b6:	61fb      	str	r3, [r7, #28]
 80119b8:	69fb      	ldr	r3, [r7, #28]
 80119ba:	441a      	add	r2, r3
 80119bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119be:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80119c2:	441a      	add	r2, r3
 80119c4:	4b04      	ldr	r3, [pc, #16]	@ (80119d8 <mg_sha1_transform+0x8e8>)
 80119c6:	4413      	add	r3, r2
 80119c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80119ca:	4413      	add	r3, r2
 80119cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80119ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80119d4:	e002      	b.n	80119dc <mg_sha1_transform+0x8ec>
 80119d6:	bf00      	nop
 80119d8:	6ed9eba1 	.word	0x6ed9eba1
 80119dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R2(d, e, a, b, c, 37);
 80119de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80119e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80119e2:	405a      	eors	r2, r3
 80119e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119e6:	405a      	eors	r2, r3
 80119e8:	6979      	ldr	r1, [r7, #20]
 80119ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119ec:	4059      	eors	r1, r3
 80119ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119f0:	4059      	eors	r1, r3
 80119f2:	6a3b      	ldr	r3, [r7, #32]
 80119f4:	404b      	eors	r3, r1
 80119f6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80119fa:	623b      	str	r3, [r7, #32]
 80119fc:	6a3b      	ldr	r3, [r7, #32]
 80119fe:	441a      	add	r2, r3
 8011a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a02:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011a06:	441a      	add	r2, r3
 8011a08:	4ba9      	ldr	r3, [pc, #676]	@ (8011cb0 <mg_sha1_transform+0xbc0>)
 8011a0a:	4413      	add	r3, r2
 8011a0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a0e:	4413      	add	r3, r2
 8011a10:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a14:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R2(c, d, e, a, b, 38);
 8011a1a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011a1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a1e:	405a      	eors	r2, r3
 8011a20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011a22:	405a      	eors	r2, r3
 8011a24:	69b9      	ldr	r1, [r7, #24]
 8011a26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a28:	4059      	eors	r1, r3
 8011a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a2c:	4059      	eors	r1, r3
 8011a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a30:	404b      	eors	r3, r1
 8011a32:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8011a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a3a:	441a      	add	r2, r3
 8011a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a3e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011a42:	441a      	add	r2, r3
 8011a44:	4b9a      	ldr	r3, [pc, #616]	@ (8011cb0 <mg_sha1_transform+0xbc0>)
 8011a46:	4413      	add	r3, r2
 8011a48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011a4a:	4413      	add	r3, r2
 8011a4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a50:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011a54:	653b      	str	r3, [r7, #80]	@ 0x50
  R2(b, c, d, e, a, 39);
 8011a56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a5a:	405a      	eors	r2, r3
 8011a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a5e:	405a      	eors	r2, r3
 8011a60:	69f9      	ldr	r1, [r7, #28]
 8011a62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a64:	4059      	eors	r1, r3
 8011a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a68:	4059      	eors	r1, r3
 8011a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a6c:	404b      	eors	r3, r1
 8011a6e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a76:	441a      	add	r2, r3
 8011a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011a7a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011a7e:	441a      	add	r2, r3
 8011a80:	4b8b      	ldr	r3, [pc, #556]	@ (8011cb0 <mg_sha1_transform+0xbc0>)
 8011a82:	4413      	add	r3, r2
 8011a84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011a86:	4413      	add	r3, r2
 8011a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a8c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011a90:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 40);
 8011a92:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011a94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011a96:	431a      	orrs	r2, r3
 8011a98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a9a:	401a      	ands	r2, r3
 8011a9c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011a9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011aa0:	400b      	ands	r3, r1
 8011aa2:	431a      	orrs	r2, r3
 8011aa4:	6a39      	ldr	r1, [r7, #32]
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	4059      	eors	r1, r3
 8011aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aac:	4059      	eors	r1, r3
 8011aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ab0:	404b      	eors	r3, r1
 8011ab2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aba:	441a      	add	r2, r3
 8011abc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011abe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011ac2:	441a      	add	r2, r3
 8011ac4:	4b7b      	ldr	r3, [pc, #492]	@ (8011cb4 <mg_sha1_transform+0xbc4>)
 8011ac6:	4413      	add	r3, r2
 8011ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011aca:	4413      	add	r3, r2
 8011acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ace:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ad0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 41);
 8011ad6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011ad8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ada:	431a      	orrs	r2, r3
 8011adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ade:	401a      	ands	r2, r3
 8011ae0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8011ae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ae4:	400b      	ands	r3, r1
 8011ae6:	431a      	orrs	r2, r3
 8011ae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	4059      	eors	r1, r3
 8011aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011af0:	4059      	eors	r1, r3
 8011af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af4:	404b      	eors	r3, r1
 8011af6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8011afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011afe:	441a      	add	r2, r3
 8011b00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b02:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011b06:	441a      	add	r2, r3
 8011b08:	4b6a      	ldr	r3, [pc, #424]	@ (8011cb4 <mg_sha1_transform+0xbc4>)
 8011b0a:	4413      	add	r3, r2
 8011b0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011b0e:	4413      	add	r3, r2
 8011b10:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b14:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 42);
 8011b1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011b1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b1e:	431a      	orrs	r2, r3
 8011b20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b22:	401a      	ands	r2, r3
 8011b24:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011b26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b28:	400b      	ands	r3, r1
 8011b2a:	431a      	orrs	r2, r3
 8011b2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	4059      	eors	r1, r3
 8011b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b34:	4059      	eors	r1, r3
 8011b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b38:	404b      	eors	r3, r1
 8011b3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b42:	441a      	add	r2, r3
 8011b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011b4a:	441a      	add	r2, r3
 8011b4c:	4b59      	ldr	r3, [pc, #356]	@ (8011cb4 <mg_sha1_transform+0xbc4>)
 8011b4e:	4413      	add	r3, r2
 8011b50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011b52:	4413      	add	r3, r2
 8011b54:	657b      	str	r3, [r7, #84]	@ 0x54
 8011b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 43);
 8011b5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b62:	431a      	orrs	r2, r3
 8011b64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b66:	401a      	ands	r2, r3
 8011b68:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b6c:	400b      	ands	r3, r1
 8011b6e:	431a      	orrs	r2, r3
 8011b70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	4059      	eors	r1, r3
 8011b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011b78:	4059      	eors	r1, r3
 8011b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b7c:	404b      	eors	r3, r1
 8011b7e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b86:	441a      	add	r2, r3
 8011b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b8a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011b8e:	441a      	add	r2, r3
 8011b90:	4b48      	ldr	r3, [pc, #288]	@ (8011cb4 <mg_sha1_transform+0xbc4>)
 8011b92:	4413      	add	r3, r2
 8011b94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011b96:	4413      	add	r3, r2
 8011b98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b9c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011ba0:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 44);
 8011ba2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ba6:	431a      	orrs	r2, r3
 8011ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011baa:	401a      	ands	r2, r3
 8011bac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011bae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bb0:	400b      	ands	r3, r1
 8011bb2:	431a      	orrs	r2, r3
 8011bb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	4059      	eors	r1, r3
 8011bba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bbc:	4059      	eors	r1, r3
 8011bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bc0:	404b      	eors	r3, r1
 8011bc2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bca:	441a      	add	r2, r3
 8011bcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011bce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011bd2:	441a      	add	r2, r3
 8011bd4:	4b37      	ldr	r3, [pc, #220]	@ (8011cb4 <mg_sha1_transform+0xbc4>)
 8011bd6:	4413      	add	r3, r2
 8011bd8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011bda:	4413      	add	r3, r2
 8011bdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011be0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011be4:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 45);
 8011be6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bea:	431a      	orrs	r2, r3
 8011bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bee:	401a      	ands	r2, r3
 8011bf0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011bf4:	400b      	ands	r3, r1
 8011bf6:	431a      	orrs	r2, r3
 8011bf8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011bfa:	6a3b      	ldr	r3, [r7, #32]
 8011bfc:	4059      	eors	r1, r3
 8011bfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c00:	4059      	eors	r1, r3
 8011c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c04:	404b      	eors	r3, r1
 8011c06:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c0e:	441a      	add	r2, r3
 8011c10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c12:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011c16:	441a      	add	r2, r3
 8011c18:	4b26      	ldr	r3, [pc, #152]	@ (8011cb4 <mg_sha1_transform+0xbc4>)
 8011c1a:	4413      	add	r3, r2
 8011c1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011c1e:	4413      	add	r3, r2
 8011c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011c22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c24:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011c28:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 46);
 8011c2a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011c2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c2e:	431a      	orrs	r2, r3
 8011c30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011c32:	401a      	ands	r2, r3
 8011c34:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8011c36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c38:	400b      	ands	r3, r1
 8011c3a:	431a      	orrs	r2, r3
 8011c3c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c40:	4059      	eors	r1, r3
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	4059      	eors	r1, r3
 8011c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c48:	404b      	eors	r3, r1
 8011c4a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c52:	441a      	add	r2, r3
 8011c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c56:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011c5a:	441a      	add	r2, r3
 8011c5c:	4b15      	ldr	r3, [pc, #84]	@ (8011cb4 <mg_sha1_transform+0xbc4>)
 8011c5e:	4413      	add	r3, r2
 8011c60:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011c62:	4413      	add	r3, r2
 8011c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8011c66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c68:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 47);
 8011c6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011c70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c72:	431a      	orrs	r2, r3
 8011c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011c76:	401a      	ands	r2, r3
 8011c78:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011c7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c7c:	400b      	ands	r3, r1
 8011c7e:	431a      	orrs	r2, r3
 8011c80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c84:	4059      	eors	r1, r3
 8011c86:	693b      	ldr	r3, [r7, #16]
 8011c88:	4059      	eors	r1, r3
 8011c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c8c:	404b      	eors	r3, r1
 8011c8e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c96:	441a      	add	r2, r3
 8011c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c9a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011c9e:	441a      	add	r2, r3
 8011ca0:	4b04      	ldr	r3, [pc, #16]	@ (8011cb4 <mg_sha1_transform+0xbc4>)
 8011ca2:	4413      	add	r3, r2
 8011ca4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011ca6:	4413      	add	r3, r2
 8011ca8:	657b      	str	r3, [r7, #84]	@ 0x54
 8011caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cac:	e004      	b.n	8011cb8 <mg_sha1_transform+0xbc8>
 8011cae:	bf00      	nop
 8011cb0:	6ed9eba1 	.word	0x6ed9eba1
 8011cb4:	8f1bbcdc 	.word	0x8f1bbcdc
 8011cb8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 48);
 8011cbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011cc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011cc2:	431a      	orrs	r2, r3
 8011cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011cc6:	401a      	ands	r2, r3
 8011cc8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ccc:	400b      	ands	r3, r1
 8011cce:	431a      	orrs	r2, r3
 8011cd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd4:	4059      	eors	r1, r3
 8011cd6:	697b      	ldr	r3, [r7, #20]
 8011cd8:	4059      	eors	r1, r3
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	404b      	eors	r3, r1
 8011cde:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011ce2:	60fb      	str	r3, [r7, #12]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	441a      	add	r2, r3
 8011ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011cea:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011cee:	441a      	add	r2, r3
 8011cf0:	4ba8      	ldr	r3, [pc, #672]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011cf2:	4413      	add	r3, r2
 8011cf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011cf6:	4413      	add	r3, r2
 8011cf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cfc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011d00:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 49);
 8011d02:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d06:	431a      	orrs	r2, r3
 8011d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d0a:	401a      	ands	r2, r3
 8011d0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d10:	400b      	ands	r3, r1
 8011d12:	431a      	orrs	r2, r3
 8011d14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d18:	4059      	eors	r1, r3
 8011d1a:	69bb      	ldr	r3, [r7, #24]
 8011d1c:	4059      	eors	r1, r3
 8011d1e:	693b      	ldr	r3, [r7, #16]
 8011d20:	404b      	eors	r3, r1
 8011d22:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011d26:	613b      	str	r3, [r7, #16]
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	441a      	add	r2, r3
 8011d2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d2e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011d32:	441a      	add	r2, r3
 8011d34:	4b97      	ldr	r3, [pc, #604]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011d36:	4413      	add	r3, r2
 8011d38:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011d3a:	4413      	add	r3, r2
 8011d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d40:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011d44:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 50);
 8011d46:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d4a:	431a      	orrs	r2, r3
 8011d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d4e:	401a      	ands	r2, r3
 8011d50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d54:	400b      	ands	r3, r1
 8011d56:	431a      	orrs	r2, r3
 8011d58:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d5c:	4059      	eors	r1, r3
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	4059      	eors	r1, r3
 8011d62:	697b      	ldr	r3, [r7, #20]
 8011d64:	404b      	eors	r3, r1
 8011d66:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011d6a:	617b      	str	r3, [r7, #20]
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	441a      	add	r2, r3
 8011d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d72:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011d76:	441a      	add	r2, r3
 8011d78:	4b86      	ldr	r3, [pc, #536]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011d7a:	4413      	add	r3, r2
 8011d7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011d7e:	4413      	add	r3, r2
 8011d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011d82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d84:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011d88:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 51);
 8011d8a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011d8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d8e:	431a      	orrs	r2, r3
 8011d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d92:	401a      	ands	r2, r3
 8011d94:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8011d96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011d98:	400b      	ands	r3, r1
 8011d9a:	431a      	orrs	r2, r3
 8011d9c:	68f9      	ldr	r1, [r7, #12]
 8011d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011da0:	4059      	eors	r1, r3
 8011da2:	6a3b      	ldr	r3, [r7, #32]
 8011da4:	4059      	eors	r1, r3
 8011da6:	69bb      	ldr	r3, [r7, #24]
 8011da8:	404b      	eors	r3, r1
 8011daa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011dae:	61bb      	str	r3, [r7, #24]
 8011db0:	69bb      	ldr	r3, [r7, #24]
 8011db2:	441a      	add	r2, r3
 8011db4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011db6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011dba:	441a      	add	r2, r3
 8011dbc:	4b75      	ldr	r3, [pc, #468]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011dbe:	4413      	add	r3, r2
 8011dc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011dc2:	4413      	add	r3, r2
 8011dc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8011dc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011dc8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011dcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 52);
 8011dce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011dd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011dd2:	431a      	orrs	r2, r3
 8011dd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011dd6:	401a      	ands	r2, r3
 8011dd8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011dda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ddc:	400b      	ands	r3, r1
 8011dde:	431a      	orrs	r2, r3
 8011de0:	6939      	ldr	r1, [r7, #16]
 8011de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011de4:	4059      	eors	r1, r3
 8011de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de8:	4059      	eors	r1, r3
 8011dea:	69fb      	ldr	r3, [r7, #28]
 8011dec:	404b      	eors	r3, r1
 8011dee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011df2:	61fb      	str	r3, [r7, #28]
 8011df4:	69fb      	ldr	r3, [r7, #28]
 8011df6:	441a      	add	r2, r3
 8011df8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dfa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011dfe:	441a      	add	r2, r3
 8011e00:	4b64      	ldr	r3, [pc, #400]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011e02:	4413      	add	r3, r2
 8011e04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011e06:	4413      	add	r3, r2
 8011e08:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e0c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 53);
 8011e12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e16:	431a      	orrs	r2, r3
 8011e18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011e1a:	401a      	ands	r2, r3
 8011e1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011e1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e20:	400b      	ands	r3, r1
 8011e22:	431a      	orrs	r2, r3
 8011e24:	6979      	ldr	r1, [r7, #20]
 8011e26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e28:	4059      	eors	r1, r3
 8011e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e2c:	4059      	eors	r1, r3
 8011e2e:	6a3b      	ldr	r3, [r7, #32]
 8011e30:	404b      	eors	r3, r1
 8011e32:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011e36:	623b      	str	r3, [r7, #32]
 8011e38:	6a3b      	ldr	r3, [r7, #32]
 8011e3a:	441a      	add	r2, r3
 8011e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e3e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011e42:	441a      	add	r2, r3
 8011e44:	4b53      	ldr	r3, [pc, #332]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011e46:	4413      	add	r3, r2
 8011e48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011e4a:	4413      	add	r3, r2
 8011e4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011e4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e50:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011e54:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 54);
 8011e56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e5a:	431a      	orrs	r2, r3
 8011e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e5e:	401a      	ands	r2, r3
 8011e60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011e62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e64:	400b      	ands	r3, r1
 8011e66:	431a      	orrs	r2, r3
 8011e68:	69b9      	ldr	r1, [r7, #24]
 8011e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011e6c:	4059      	eors	r1, r3
 8011e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e70:	4059      	eors	r1, r3
 8011e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e74:	404b      	eors	r3, r1
 8011e76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e7e:	441a      	add	r2, r3
 8011e80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011e82:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011e86:	441a      	add	r2, r3
 8011e88:	4b42      	ldr	r3, [pc, #264]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011e8a:	4413      	add	r3, r2
 8011e8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011e8e:	4413      	add	r3, r2
 8011e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e94:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011e98:	657b      	str	r3, [r7, #84]	@ 0x54
  R3(a, b, c, d, e, 55);
 8011e9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011e9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e9e:	431a      	orrs	r2, r3
 8011ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ea2:	401a      	ands	r2, r3
 8011ea4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8011ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ea8:	400b      	ands	r3, r1
 8011eaa:	431a      	orrs	r2, r3
 8011eac:	69f9      	ldr	r1, [r7, #28]
 8011eae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011eb0:	4059      	eors	r1, r3
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011eb4:	4059      	eors	r1, r3
 8011eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eb8:	404b      	eors	r3, r1
 8011eba:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec2:	441a      	add	r2, r3
 8011ec4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ec6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011eca:	441a      	add	r2, r3
 8011ecc:	4b31      	ldr	r3, [pc, #196]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011ece:	4413      	add	r3, r2
 8011ed0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011ed2:	4413      	add	r3, r2
 8011ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ed6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ed8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011edc:	65bb      	str	r3, [r7, #88]	@ 0x58
  R3(e, a, b, c, d, 56);
 8011ede:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011ee0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011ee2:	431a      	orrs	r2, r3
 8011ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ee6:	401a      	ands	r2, r3
 8011ee8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8011eea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011eec:	400b      	ands	r3, r1
 8011eee:	431a      	orrs	r2, r3
 8011ef0:	6a39      	ldr	r1, [r7, #32]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	4059      	eors	r1, r3
 8011ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ef8:	4059      	eors	r1, r3
 8011efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011efc:	404b      	eors	r3, r1
 8011efe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f06:	441a      	add	r2, r3
 8011f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f0a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011f0e:	441a      	add	r2, r3
 8011f10:	4b20      	ldr	r3, [pc, #128]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011f12:	4413      	add	r3, r2
 8011f14:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011f16:	4413      	add	r3, r2
 8011f18:	653b      	str	r3, [r7, #80]	@ 0x50
 8011f1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f1c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R3(d, e, a, b, c, 57);
 8011f22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011f24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f26:	431a      	orrs	r2, r3
 8011f28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011f2a:	401a      	ands	r2, r3
 8011f2c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f30:	400b      	ands	r3, r1
 8011f32:	431a      	orrs	r2, r3
 8011f34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	4059      	eors	r1, r3
 8011f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f3c:	4059      	eors	r1, r3
 8011f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f40:	404b      	eors	r3, r1
 8011f42:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011f46:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f4a:	441a      	add	r2, r3
 8011f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f4e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011f52:	441a      	add	r2, r3
 8011f54:	4b0f      	ldr	r3, [pc, #60]	@ (8011f94 <mg_sha1_transform+0xea4>)
 8011f56:	4413      	add	r3, r2
 8011f58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011f5a:	4413      	add	r3, r2
 8011f5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f60:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011f64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R3(c, d, e, a, b, 58);
 8011f66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f6a:	431a      	orrs	r2, r3
 8011f6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011f6e:	401a      	ands	r2, r3
 8011f70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f74:	400b      	ands	r3, r1
 8011f76:	431a      	orrs	r2, r3
 8011f78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	4059      	eors	r1, r3
 8011f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f80:	4059      	eors	r1, r3
 8011f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f84:	404b      	eors	r3, r1
 8011f86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8011f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f8e:	441a      	add	r2, r3
 8011f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f92:	e001      	b.n	8011f98 <mg_sha1_transform+0xea8>
 8011f94:	8f1bbcdc 	.word	0x8f1bbcdc
 8011f98:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011f9c:	441a      	add	r2, r3
 8011f9e:	4ba9      	ldr	r3, [pc, #676]	@ (8012244 <mg_sha1_transform+0x1154>)
 8011fa0:	4413      	add	r3, r2
 8011fa2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011fa4:	4413      	add	r3, r2
 8011fa6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011faa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011fae:	653b      	str	r3, [r7, #80]	@ 0x50
  R3(b, c, d, e, a, 59);
 8011fb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fb4:	431a      	orrs	r2, r3
 8011fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fb8:	401a      	ands	r2, r3
 8011fba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011fbe:	400b      	ands	r3, r1
 8011fc0:	431a      	orrs	r2, r3
 8011fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011fc4:	69bb      	ldr	r3, [r7, #24]
 8011fc6:	4059      	eors	r1, r3
 8011fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fca:	4059      	eors	r1, r3
 8011fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fce:	404b      	eors	r3, r1
 8011fd0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8011fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011fd8:	441a      	add	r2, r3
 8011fda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011fdc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8011fe0:	441a      	add	r2, r3
 8011fe2:	4b98      	ldr	r3, [pc, #608]	@ (8012244 <mg_sha1_transform+0x1154>)
 8011fe4:	4413      	add	r3, r2
 8011fe6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011fe8:	4413      	add	r3, r2
 8011fea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011fee:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8011ff2:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 60);
 8011ff4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ff8:	405a      	eors	r2, r3
 8011ffa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ffc:	405a      	eors	r2, r3
 8011ffe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	4059      	eors	r1, r3
 8012004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012006:	4059      	eors	r1, r3
 8012008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801200a:	404b      	eors	r3, r1
 801200c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012014:	441a      	add	r2, r3
 8012016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012018:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801201c:	441a      	add	r2, r3
 801201e:	4b8a      	ldr	r3, [pc, #552]	@ (8012248 <mg_sha1_transform+0x1158>)
 8012020:	4413      	add	r3, r2
 8012022:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012024:	4413      	add	r3, r2
 8012026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801202a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801202e:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 61);
 8012030:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012032:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012034:	405a      	eors	r2, r3
 8012036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012038:	405a      	eors	r2, r3
 801203a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801203c:	6a3b      	ldr	r3, [r7, #32]
 801203e:	4059      	eors	r1, r3
 8012040:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012042:	4059      	eors	r1, r3
 8012044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012046:	404b      	eors	r3, r1
 8012048:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801204c:	643b      	str	r3, [r7, #64]	@ 0x40
 801204e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012050:	441a      	add	r2, r3
 8012052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012054:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012058:	441a      	add	r2, r3
 801205a:	4b7b      	ldr	r3, [pc, #492]	@ (8012248 <mg_sha1_transform+0x1158>)
 801205c:	4413      	add	r3, r2
 801205e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012060:	4413      	add	r3, r2
 8012062:	653b      	str	r3, [r7, #80]	@ 0x50
 8012064:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012066:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801206a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 62);
 801206c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801206e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012070:	405a      	eors	r2, r3
 8012072:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012074:	405a      	eors	r2, r3
 8012076:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801207a:	4059      	eors	r1, r3
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	4059      	eors	r1, r3
 8012080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012082:	404b      	eors	r3, r1
 8012084:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012088:	647b      	str	r3, [r7, #68]	@ 0x44
 801208a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801208c:	441a      	add	r2, r3
 801208e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012090:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012094:	441a      	add	r2, r3
 8012096:	4b6c      	ldr	r3, [pc, #432]	@ (8012248 <mg_sha1_transform+0x1158>)
 8012098:	4413      	add	r3, r2
 801209a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801209c:	4413      	add	r3, r2
 801209e:	657b      	str	r3, [r7, #84]	@ 0x54
 80120a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120a2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80120a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 63);
 80120a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80120aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120ac:	405a      	eors	r2, r3
 80120ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80120b0:	405a      	eors	r2, r3
 80120b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80120b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120b6:	4059      	eors	r1, r3
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	4059      	eors	r1, r3
 80120bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80120be:	404b      	eors	r3, r1
 80120c0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80120c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80120c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80120c8:	441a      	add	r2, r3
 80120ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80120cc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80120d0:	441a      	add	r2, r3
 80120d2:	4b5d      	ldr	r3, [pc, #372]	@ (8012248 <mg_sha1_transform+0x1158>)
 80120d4:	4413      	add	r3, r2
 80120d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80120d8:	4413      	add	r3, r2
 80120da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80120dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120de:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80120e2:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 64);
 80120e4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80120e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120e8:	405a      	eors	r2, r3
 80120ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120ec:	405a      	eors	r2, r3
 80120ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80120f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f2:	4059      	eors	r1, r3
 80120f4:	697b      	ldr	r3, [r7, #20]
 80120f6:	4059      	eors	r1, r3
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	404b      	eors	r3, r1
 80120fc:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012100:	60fb      	str	r3, [r7, #12]
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	441a      	add	r2, r3
 8012106:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012108:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801210c:	441a      	add	r2, r3
 801210e:	4b4e      	ldr	r3, [pc, #312]	@ (8012248 <mg_sha1_transform+0x1158>)
 8012110:	4413      	add	r3, r2
 8012112:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012114:	4413      	add	r3, r2
 8012116:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801211a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801211e:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 65);
 8012120:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012124:	405a      	eors	r2, r3
 8012126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012128:	405a      	eors	r2, r3
 801212a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801212c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801212e:	4059      	eors	r1, r3
 8012130:	69bb      	ldr	r3, [r7, #24]
 8012132:	4059      	eors	r1, r3
 8012134:	693b      	ldr	r3, [r7, #16]
 8012136:	404b      	eors	r3, r1
 8012138:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801213c:	613b      	str	r3, [r7, #16]
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	441a      	add	r2, r3
 8012142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012144:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012148:	441a      	add	r2, r3
 801214a:	4b3f      	ldr	r3, [pc, #252]	@ (8012248 <mg_sha1_transform+0x1158>)
 801214c:	4413      	add	r3, r2
 801214e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012150:	4413      	add	r3, r2
 8012152:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012156:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801215a:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 66);
 801215c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801215e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012160:	405a      	eors	r2, r3
 8012162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012164:	405a      	eors	r2, r3
 8012166:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801216a:	4059      	eors	r1, r3
 801216c:	69fb      	ldr	r3, [r7, #28]
 801216e:	4059      	eors	r1, r3
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	404b      	eors	r3, r1
 8012174:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012178:	617b      	str	r3, [r7, #20]
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	441a      	add	r2, r3
 801217e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012180:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012184:	441a      	add	r2, r3
 8012186:	4b30      	ldr	r3, [pc, #192]	@ (8012248 <mg_sha1_transform+0x1158>)
 8012188:	4413      	add	r3, r2
 801218a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801218c:	4413      	add	r3, r2
 801218e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012192:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012196:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 67);
 8012198:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801219a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801219c:	405a      	eors	r2, r3
 801219e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80121a0:	405a      	eors	r2, r3
 80121a2:	68f9      	ldr	r1, [r7, #12]
 80121a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121a6:	4059      	eors	r1, r3
 80121a8:	6a3b      	ldr	r3, [r7, #32]
 80121aa:	4059      	eors	r1, r3
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	404b      	eors	r3, r1
 80121b0:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80121b4:	61bb      	str	r3, [r7, #24]
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	441a      	add	r2, r3
 80121ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80121bc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80121c0:	441a      	add	r2, r3
 80121c2:	4b21      	ldr	r3, [pc, #132]	@ (8012248 <mg_sha1_transform+0x1158>)
 80121c4:	4413      	add	r3, r2
 80121c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80121c8:	4413      	add	r3, r2
 80121ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80121cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80121d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 68);
 80121d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80121d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80121d8:	405a      	eors	r2, r3
 80121da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121dc:	405a      	eors	r2, r3
 80121de:	6939      	ldr	r1, [r7, #16]
 80121e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80121e2:	4059      	eors	r1, r3
 80121e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121e6:	4059      	eors	r1, r3
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	404b      	eors	r3, r1
 80121ec:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80121f0:	61fb      	str	r3, [r7, #28]
 80121f2:	69fb      	ldr	r3, [r7, #28]
 80121f4:	441a      	add	r2, r3
 80121f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80121f8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80121fc:	441a      	add	r2, r3
 80121fe:	4b12      	ldr	r3, [pc, #72]	@ (8012248 <mg_sha1_transform+0x1158>)
 8012200:	4413      	add	r3, r2
 8012202:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012204:	4413      	add	r3, r2
 8012206:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012208:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801220a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 801220e:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 69);
 8012210:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012214:	405a      	eors	r2, r3
 8012216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012218:	405a      	eors	r2, r3
 801221a:	6979      	ldr	r1, [r7, #20]
 801221c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801221e:	4059      	eors	r1, r3
 8012220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012222:	4059      	eors	r1, r3
 8012224:	6a3b      	ldr	r3, [r7, #32]
 8012226:	404b      	eors	r3, r1
 8012228:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801222c:	623b      	str	r3, [r7, #32]
 801222e:	6a3b      	ldr	r3, [r7, #32]
 8012230:	441a      	add	r2, r3
 8012232:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012234:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012238:	441a      	add	r2, r3
 801223a:	4b03      	ldr	r3, [pc, #12]	@ (8012248 <mg_sha1_transform+0x1158>)
 801223c:	4413      	add	r3, r2
 801223e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012240:	4413      	add	r3, r2
 8012242:	e003      	b.n	801224c <mg_sha1_transform+0x115c>
 8012244:	8f1bbcdc 	.word	0x8f1bbcdc
 8012248:	ca62c1d6 	.word	0xca62c1d6
 801224c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801224e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012250:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012254:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 70);
 8012256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801225a:	405a      	eors	r2, r3
 801225c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801225e:	405a      	eors	r2, r3
 8012260:	69b9      	ldr	r1, [r7, #24]
 8012262:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012264:	4059      	eors	r1, r3
 8012266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012268:	4059      	eors	r1, r3
 801226a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801226c:	404b      	eors	r3, r1
 801226e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012272:	627b      	str	r3, [r7, #36]	@ 0x24
 8012274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012276:	441a      	add	r2, r3
 8012278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801227a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801227e:	441a      	add	r2, r3
 8012280:	4ba7      	ldr	r3, [pc, #668]	@ (8012520 <mg_sha1_transform+0x1430>)
 8012282:	4413      	add	r3, r2
 8012284:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012286:	4413      	add	r3, r2
 8012288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801228a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801228c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012290:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 71);
 8012292:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012294:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012296:	405a      	eors	r2, r3
 8012298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801229a:	405a      	eors	r2, r3
 801229c:	69f9      	ldr	r1, [r7, #28]
 801229e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80122a0:	4059      	eors	r1, r3
 80122a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122a4:	4059      	eors	r1, r3
 80122a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122a8:	404b      	eors	r3, r1
 80122aa:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80122ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80122b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122b2:	441a      	add	r2, r3
 80122b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122b6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80122ba:	441a      	add	r2, r3
 80122bc:	4b98      	ldr	r3, [pc, #608]	@ (8012520 <mg_sha1_transform+0x1430>)
 80122be:	4413      	add	r3, r2
 80122c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80122c2:	4413      	add	r3, r2
 80122c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80122c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122c8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80122cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 72);
 80122ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80122d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80122d2:	405a      	eors	r2, r3
 80122d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80122d6:	405a      	eors	r2, r3
 80122d8:	6a39      	ldr	r1, [r7, #32]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	4059      	eors	r1, r3
 80122de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122e0:	4059      	eors	r1, r3
 80122e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122e4:	404b      	eors	r3, r1
 80122e6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80122ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80122ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122ee:	441a      	add	r2, r3
 80122f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80122f2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80122f6:	441a      	add	r2, r3
 80122f8:	4b89      	ldr	r3, [pc, #548]	@ (8012520 <mg_sha1_transform+0x1430>)
 80122fa:	4413      	add	r3, r2
 80122fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80122fe:	4413      	add	r3, r2
 8012300:	657b      	str	r3, [r7, #84]	@ 0x54
 8012302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012304:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012308:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 73);
 801230a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801230c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801230e:	405a      	eors	r2, r3
 8012310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012312:	405a      	eors	r2, r3
 8012314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012316:	693b      	ldr	r3, [r7, #16]
 8012318:	4059      	eors	r1, r3
 801231a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801231c:	4059      	eors	r1, r3
 801231e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012320:	404b      	eors	r3, r1
 8012322:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012326:	633b      	str	r3, [r7, #48]	@ 0x30
 8012328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801232a:	441a      	add	r2, r3
 801232c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801232e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012332:	441a      	add	r2, r3
 8012334:	4b7a      	ldr	r3, [pc, #488]	@ (8012520 <mg_sha1_transform+0x1430>)
 8012336:	4413      	add	r3, r2
 8012338:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801233a:	4413      	add	r3, r2
 801233c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801233e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012340:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012344:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 74);
 8012346:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801234a:	405a      	eors	r2, r3
 801234c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801234e:	405a      	eors	r2, r3
 8012350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	4059      	eors	r1, r3
 8012356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012358:	4059      	eors	r1, r3
 801235a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801235c:	404b      	eors	r3, r1
 801235e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012362:	637b      	str	r3, [r7, #52]	@ 0x34
 8012364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012366:	441a      	add	r2, r3
 8012368:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801236a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801236e:	441a      	add	r2, r3
 8012370:	4b6b      	ldr	r3, [pc, #428]	@ (8012520 <mg_sha1_transform+0x1430>)
 8012372:	4413      	add	r3, r2
 8012374:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012376:	4413      	add	r3, r2
 8012378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801237a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801237c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012380:	657b      	str	r3, [r7, #84]	@ 0x54
  R4(a, b, c, d, e, 75);
 8012382:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012386:	405a      	eors	r2, r3
 8012388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801238a:	405a      	eors	r2, r3
 801238c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801238e:	69bb      	ldr	r3, [r7, #24]
 8012390:	4059      	eors	r1, r3
 8012392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012394:	4059      	eors	r1, r3
 8012396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012398:	404b      	eors	r3, r1
 801239a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801239e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123a2:	441a      	add	r2, r3
 80123a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123a6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80123aa:	441a      	add	r2, r3
 80123ac:	4b5c      	ldr	r3, [pc, #368]	@ (8012520 <mg_sha1_transform+0x1430>)
 80123ae:	4413      	add	r3, r2
 80123b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80123b2:	4413      	add	r3, r2
 80123b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80123b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80123b8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80123bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  R4(e, a, b, c, d, 76);
 80123be:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80123c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80123c2:	405a      	eors	r2, r3
 80123c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80123c6:	405a      	eors	r2, r3
 80123c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80123ca:	69fb      	ldr	r3, [r7, #28]
 80123cc:	4059      	eors	r1, r3
 80123ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123d0:	4059      	eors	r1, r3
 80123d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123d4:	404b      	eors	r3, r1
 80123d6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80123da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80123dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80123de:	441a      	add	r2, r3
 80123e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123e2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80123e6:	441a      	add	r2, r3
 80123e8:	4b4d      	ldr	r3, [pc, #308]	@ (8012520 <mg_sha1_transform+0x1430>)
 80123ea:	4413      	add	r3, r2
 80123ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80123ee:	4413      	add	r3, r2
 80123f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80123f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123f4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80123f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  R4(d, e, a, b, c, 77);
 80123fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80123fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80123fe:	405a      	eors	r2, r3
 8012400:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012402:	405a      	eors	r2, r3
 8012404:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012406:	6a3b      	ldr	r3, [r7, #32]
 8012408:	4059      	eors	r1, r3
 801240a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801240c:	4059      	eors	r1, r3
 801240e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012410:	404b      	eors	r3, r1
 8012412:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012416:	643b      	str	r3, [r7, #64]	@ 0x40
 8012418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801241a:	441a      	add	r2, r3
 801241c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801241e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8012422:	441a      	add	r2, r3
 8012424:	4b3e      	ldr	r3, [pc, #248]	@ (8012520 <mg_sha1_transform+0x1430>)
 8012426:	4413      	add	r3, r2
 8012428:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801242a:	4413      	add	r3, r2
 801242c:	657b      	str	r3, [r7, #84]	@ 0x54
 801242e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012430:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012434:	64fb      	str	r3, [r7, #76]	@ 0x4c
  R4(c, d, e, a, b, 78);
 8012436:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801243a:	405a      	eors	r2, r3
 801243c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801243e:	405a      	eors	r2, r3
 8012440:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012444:	4059      	eors	r1, r3
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	4059      	eors	r1, r3
 801244a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801244c:	404b      	eors	r3, r1
 801244e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8012452:	647b      	str	r3, [r7, #68]	@ 0x44
 8012454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012456:	441a      	add	r2, r3
 8012458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801245a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801245e:	441a      	add	r2, r3
 8012460:	4b2f      	ldr	r3, [pc, #188]	@ (8012520 <mg_sha1_transform+0x1430>)
 8012462:	4413      	add	r3, r2
 8012464:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012466:	4413      	add	r3, r2
 8012468:	65bb      	str	r3, [r7, #88]	@ 0x58
 801246a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801246c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8012470:	653b      	str	r3, [r7, #80]	@ 0x50
  R4(b, c, d, e, a, 79);
 8012472:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012474:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012476:	405a      	eors	r2, r3
 8012478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801247a:	405a      	eors	r2, r3
 801247c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801247e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012480:	4059      	eors	r1, r3
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	4059      	eors	r1, r3
 8012486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012488:	404b      	eors	r3, r1
 801248a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 801248e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012492:	441a      	add	r2, r3
 8012494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012496:	ea4f 63f3 	mov.w	r3, r3, ror #27
 801249a:	441a      	add	r2, r3
 801249c:	4b20      	ldr	r3, [pc, #128]	@ (8012520 <mg_sha1_transform+0x1430>)
 801249e:	4413      	add	r3, r2
 80124a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80124a2:	4413      	add	r3, r2
 80124a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80124a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124a8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80124ac:	657b      	str	r3, [r7, #84]	@ 0x54
  state[0] += a;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80124b4:	441a      	add	r2, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	601a      	str	r2, [r3, #0]
  state[1] += b;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	3304      	adds	r3, #4
 80124be:	6819      	ldr	r1, [r3, #0]
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	3304      	adds	r3, #4
 80124c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80124c6:	440a      	add	r2, r1
 80124c8:	601a      	str	r2, [r3, #0]
  state[2] += c;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	3308      	adds	r3, #8
 80124ce:	6819      	ldr	r1, [r3, #0]
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	3308      	adds	r3, #8
 80124d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80124d6:	440a      	add	r2, r1
 80124d8:	601a      	str	r2, [r3, #0]
  state[3] += d;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	330c      	adds	r3, #12
 80124de:	6819      	ldr	r1, [r3, #0]
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	330c      	adds	r3, #12
 80124e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80124e6:	440a      	add	r2, r1
 80124e8:	601a      	str	r2, [r3, #0]
  state[4] += e;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	3310      	adds	r3, #16
 80124ee:	6819      	ldr	r1, [r3, #0]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	3310      	adds	r3, #16
 80124f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80124f6:	440a      	add	r2, r1
 80124f8:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 80124fa:	f107 030c 	add.w	r3, r7, #12
 80124fe:	2240      	movs	r2, #64	@ 0x40
 8012500:	2100      	movs	r1, #0
 8012502:	4618      	mov	r0, r3
 8012504:	f011 f94b 	bl	802379e <memset>
  a = b = c = d = e = 0;
 8012508:	2300      	movs	r3, #0
 801250a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801250c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801250e:	653b      	str	r3, [r7, #80]	@ 0x50
 8012510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012512:	657b      	str	r3, [r7, #84]	@ 0x54
 8012514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012516:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801251a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801251c:	e002      	b.n	8012524 <mg_sha1_transform+0x1434>
 801251e:	bf00      	nop
 8012520:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 8012524:	bf00      	nop
 8012526:	3764      	adds	r7, #100	@ 0x64
 8012528:	46bd      	mov	sp, r7
 801252a:	bd90      	pop	{r4, r7, pc}

0801252c <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 801252c:	b480      	push	{r7}
 801252e:	b083      	sub	sp, #12
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	4a0d      	ldr	r2, [pc, #52]	@ (801256c <mg_sha1_init+0x40>)
 8012538:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	4a0c      	ldr	r2, [pc, #48]	@ (8012570 <mg_sha1_init+0x44>)
 801253e:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4a0c      	ldr	r2, [pc, #48]	@ (8012574 <mg_sha1_init+0x48>)
 8012544:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	4a0b      	ldr	r2, [pc, #44]	@ (8012578 <mg_sha1_init+0x4c>)
 801254a:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	4a0b      	ldr	r2, [pc, #44]	@ (801257c <mg_sha1_init+0x50>)
 8012550:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	2200      	movs	r2, #0
 8012556:	619a      	str	r2, [r3, #24]
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	699a      	ldr	r2, [r3, #24]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	615a      	str	r2, [r3, #20]
}
 8012560:	bf00      	nop
 8012562:	370c      	adds	r7, #12
 8012564:	46bd      	mov	sp, r7
 8012566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256a:	4770      	bx	lr
 801256c:	67452301 	.word	0x67452301
 8012570:	efcdab89 	.word	0xefcdab89
 8012574:	98badcfe 	.word	0x98badcfe
 8012578:	10325476 	.word	0x10325476
 801257c:	c3d2e1f0 	.word	0xc3d2e1f0

08012580 <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 8012580:	b580      	push	{r7, lr}
 8012582:	b086      	sub	sp, #24
 8012584:	af00      	add	r7, sp, #0
 8012586:	60f8      	str	r0, [r7, #12]
 8012588:	60b9      	str	r1, [r7, #8]
 801258a:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	695b      	ldr	r3, [r3, #20]
 8012590:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	695a      	ldr	r2, [r3, #20]
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	00db      	lsls	r3, r3, #3
 801259a:	441a      	add	r2, r3
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	615a      	str	r2, [r3, #20]
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	695b      	ldr	r3, [r3, #20]
 80125a4:	693a      	ldr	r2, [r7, #16]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d904      	bls.n	80125b4 <mg_sha1_update+0x34>
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	699b      	ldr	r3, [r3, #24]
 80125ae:	1c5a      	adds	r2, r3, #1
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	699a      	ldr	r2, [r3, #24]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	0f5b      	lsrs	r3, r3, #29
 80125bc:	441a      	add	r2, r3
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	08db      	lsrs	r3, r3, #3
 80125c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80125ca:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 80125cc:	693a      	ldr	r2, [r7, #16]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4413      	add	r3, r2
 80125d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80125d4:	d926      	bls.n	8012624 <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	3318      	adds	r3, #24
 80125da:	68fa      	ldr	r2, [r7, #12]
 80125dc:	4413      	add	r3, r2
 80125de:	1d18      	adds	r0, r3, #4
 80125e0:	693b      	ldr	r3, [r7, #16]
 80125e2:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80125e6:	617b      	str	r3, [r7, #20]
 80125e8:	697a      	ldr	r2, [r7, #20]
 80125ea:	68b9      	ldr	r1, [r7, #8]
 80125ec:	f011 fa0d 	bl	8023a0a <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 80125f0:	68fa      	ldr	r2, [r7, #12]
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	331c      	adds	r3, #28
 80125f6:	4619      	mov	r1, r3
 80125f8:	4610      	mov	r0, r2
 80125fa:	f7fe fd79 	bl	80110f0 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 80125fe:	e009      	b.n	8012614 <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 8012600:	68f8      	ldr	r0, [r7, #12]
 8012602:	68ba      	ldr	r2, [r7, #8]
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	4413      	add	r3, r2
 8012608:	4619      	mov	r1, r3
 801260a:	f7fe fd71 	bl	80110f0 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	3340      	adds	r3, #64	@ 0x40
 8012612:	617b      	str	r3, [r7, #20]
 8012614:	697b      	ldr	r3, [r7, #20]
 8012616:	333f      	adds	r3, #63	@ 0x3f
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	429a      	cmp	r2, r3
 801261c:	d8f0      	bhi.n	8012600 <mg_sha1_update+0x80>
    }
    j = 0;
 801261e:	2300      	movs	r3, #0
 8012620:	613b      	str	r3, [r7, #16]
 8012622:	e001      	b.n	8012628 <mg_sha1_update+0xa8>
  } else
    i = 0;
 8012624:	2300      	movs	r3, #0
 8012626:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	3318      	adds	r3, #24
 801262c:	68fa      	ldr	r2, [r7, #12]
 801262e:	4413      	add	r3, r2
 8012630:	1d18      	adds	r0, r3, #4
 8012632:	68ba      	ldr	r2, [r7, #8]
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	18d1      	adds	r1, r2, r3
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	1ad3      	subs	r3, r2, r3
 801263e:	461a      	mov	r2, r3
 8012640:	f011 f9e3 	bl	8023a0a <memcpy>
}
 8012644:	bf00      	nop
 8012646:	3718      	adds	r7, #24
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}

0801264c <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 801264c:	b580      	push	{r7, lr}
 801264e:	b086      	sub	sp, #24
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 8012656:	2300      	movs	r3, #0
 8012658:	617b      	str	r3, [r7, #20]
 801265a:	e01b      	b.n	8012694 <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	2b03      	cmp	r3, #3
 8012660:	bf94      	ite	ls
 8012662:	2301      	movls	r3, #1
 8012664:	2300      	movhi	r3, #0
 8012666:	b2db      	uxtb	r3, r3
 8012668:	683a      	ldr	r2, [r7, #0]
 801266a:	3304      	adds	r3, #4
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	4413      	add	r3, r2
 8012670:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	43db      	mvns	r3, r3
 8012676:	f003 0303 	and.w	r3, r3, #3
 801267a:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 801267c:	fa22 f303 	lsr.w	r3, r2, r3
 8012680:	b2d9      	uxtb	r1, r3
 8012682:	f107 020c 	add.w	r2, r7, #12
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	4413      	add	r3, r2
 801268a:	460a      	mov	r2, r1
 801268c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	3301      	adds	r3, #1
 8012692:	617b      	str	r3, [r7, #20]
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	2b07      	cmp	r3, #7
 8012698:	d9e0      	bls.n	801265c <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 801269a:	2380      	movs	r3, #128	@ 0x80
 801269c:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 801269e:	f107 030b 	add.w	r3, r7, #11
 80126a2:	2201      	movs	r2, #1
 80126a4:	4619      	mov	r1, r3
 80126a6:	6838      	ldr	r0, [r7, #0]
 80126a8:	f7ff ff6a 	bl	8012580 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 80126ac:	e008      	b.n	80126c0 <mg_sha1_final+0x74>
    c = 0000;
 80126ae:	2300      	movs	r3, #0
 80126b0:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 80126b2:	f107 030b 	add.w	r3, r7, #11
 80126b6:	2201      	movs	r2, #1
 80126b8:	4619      	mov	r1, r3
 80126ba:	6838      	ldr	r0, [r7, #0]
 80126bc:	f7ff ff60 	bl	8012580 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	695b      	ldr	r3, [r3, #20]
 80126c4:	f403 73fc 	and.w	r3, r3, #504	@ 0x1f8
 80126c8:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80126cc:	d1ef      	bne.n	80126ae <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 80126ce:	f107 030c 	add.w	r3, r7, #12
 80126d2:	2208      	movs	r2, #8
 80126d4:	4619      	mov	r1, r3
 80126d6:	6838      	ldr	r0, [r7, #0]
 80126d8:	f7ff ff52 	bl	8012580 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 80126dc:	2300      	movs	r3, #0
 80126de:	617b      	str	r3, [r7, #20]
 80126e0:	e013      	b.n	801270a <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	089a      	lsrs	r2, r3, #2
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	43db      	mvns	r3, r3
 80126f0:	f003 0303 	and.w	r3, r3, #3
 80126f4:	00db      	lsls	r3, r3, #3
 80126f6:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8012700:	b2ca      	uxtb	r2, r1
    digest[i] =
 8012702:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	3301      	adds	r3, #1
 8012708:	617b      	str	r3, [r7, #20]
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	2b13      	cmp	r3, #19
 801270e:	d9e8      	bls.n	80126e2 <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 8012710:	225c      	movs	r2, #92	@ 0x5c
 8012712:	2100      	movs	r1, #0
 8012714:	6838      	ldr	r0, [r7, #0]
 8012716:	f011 f842 	bl	802379e <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 801271a:	f107 030c 	add.w	r3, r7, #12
 801271e:	2208      	movs	r2, #8
 8012720:	2100      	movs	r1, #0
 8012722:	4618      	mov	r0, r3
 8012724:	f011 f83b 	bl	802379e <memset>
}
 8012728:	bf00      	nop
 801272a:	3718      	adds	r7, #24
 801272c:	46bd      	mov	sp, r7
 801272e:	bd80      	pop	{r7, pc}

08012730 <mg_sha256_init>:
    0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
    0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2};

void mg_sha256_init(mg_sha256_ctx *ctx) {
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
  ctx->len = 0;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2200      	movs	r2, #0
 801273c:	629a      	str	r2, [r3, #40]	@ 0x28
  ctx->bits = 0;
 801273e:	6879      	ldr	r1, [r7, #4]
 8012740:	f04f 0200 	mov.w	r2, #0
 8012744:	f04f 0300 	mov.w	r3, #0
 8012748:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[0] = 0x6a09e667;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	4a0e      	ldr	r2, [pc, #56]	@ (8012788 <mg_sha256_init+0x58>)
 8012750:	601a      	str	r2, [r3, #0]
  ctx->state[1] = 0xbb67ae85;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	4a0d      	ldr	r2, [pc, #52]	@ (801278c <mg_sha256_init+0x5c>)
 8012756:	605a      	str	r2, [r3, #4]
  ctx->state[2] = 0x3c6ef372;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	4a0d      	ldr	r2, [pc, #52]	@ (8012790 <mg_sha256_init+0x60>)
 801275c:	609a      	str	r2, [r3, #8]
  ctx->state[3] = 0xa54ff53a;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	4a0c      	ldr	r2, [pc, #48]	@ (8012794 <mg_sha256_init+0x64>)
 8012762:	60da      	str	r2, [r3, #12]
  ctx->state[4] = 0x510e527f;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	4a0c      	ldr	r2, [pc, #48]	@ (8012798 <mg_sha256_init+0x68>)
 8012768:	611a      	str	r2, [r3, #16]
  ctx->state[5] = 0x9b05688c;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	4a0b      	ldr	r2, [pc, #44]	@ (801279c <mg_sha256_init+0x6c>)
 801276e:	615a      	str	r2, [r3, #20]
  ctx->state[6] = 0x1f83d9ab;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	4a0b      	ldr	r2, [pc, #44]	@ (80127a0 <mg_sha256_init+0x70>)
 8012774:	619a      	str	r2, [r3, #24]
  ctx->state[7] = 0x5be0cd19;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4a0a      	ldr	r2, [pc, #40]	@ (80127a4 <mg_sha256_init+0x74>)
 801277a:	61da      	str	r2, [r3, #28]
}
 801277c:	bf00      	nop
 801277e:	370c      	adds	r7, #12
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr
 8012788:	6a09e667 	.word	0x6a09e667
 801278c:	bb67ae85 	.word	0xbb67ae85
 8012790:	3c6ef372 	.word	0x3c6ef372
 8012794:	a54ff53a 	.word	0xa54ff53a
 8012798:	510e527f 	.word	0x510e527f
 801279c:	9b05688c 	.word	0x9b05688c
 80127a0:	1f83d9ab 	.word	0x1f83d9ab
 80127a4:	5be0cd19 	.word	0x5be0cd19

080127a8 <mg_sha256_chunk>:

static void mg_sha256_chunk(mg_sha256_ctx *ctx) {
 80127a8:	b480      	push	{r7}
 80127aa:	b0cf      	sub	sp, #316	@ 0x13c
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80127b2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80127b6:	6018      	str	r0, [r3, #0]
  int i, j;
  uint32_t a, b, c, d, e, f, g, h;
  uint32_t m[64];
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 80127b8:	2300      	movs	r3, #0
 80127ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80127be:	2300      	movs	r3, #0
 80127c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80127c4:	e043      	b.n	801284e <mg_sha256_chunk+0xa6>
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 80127c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80127ca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80127ce:	681a      	ldr	r2, [r3, #0]
 80127d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80127d4:	4413      	add	r3, r2
 80127d6:	332c      	adds	r3, #44	@ 0x2c
 80127d8:	781b      	ldrb	r3, [r3, #0]
 80127da:	061a      	lsls	r2, r3, #24
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 80127dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80127e0:	3301      	adds	r3, #1
 80127e2:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 80127e6:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 80127ea:	6809      	ldr	r1, [r1, #0]
 80127ec:	440b      	add	r3, r1
 80127ee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80127f2:	041b      	lsls	r3, r3, #16
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 80127f4:	431a      	orrs	r2, r3
                       ((uint32_t) ctx->buffer[j + 2] << 8) |
 80127f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80127fa:	3302      	adds	r3, #2
 80127fc:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8012800:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8012804:	6809      	ldr	r1, [r1, #0]
 8012806:	440b      	add	r3, r1
 8012808:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801280c:	021b      	lsls	r3, r3, #8
                       ((uint32_t) ctx->buffer[j + 1] << 16) |
 801280e:	4313      	orrs	r3, r2
                       ((uint32_t) ctx->buffer[j + 3]));
 8012810:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8012814:	3203      	adds	r2, #3
 8012816:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801281a:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 801281e:	6809      	ldr	r1, [r1, #0]
 8012820:	440a      	add	r2, r1
 8012822:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
    m[i] = (uint32_t) (((uint32_t) ctx->buffer[j] << 24) |
 8012826:	ea43 0102 	orr.w	r1, r3, r2
 801282a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801282e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012832:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8012836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0, j = 0; i < 16; ++i, j += 4)
 801283a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801283e:	3301      	adds	r3, #1
 8012840:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8012844:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012848:	3304      	adds	r3, #4
 801284a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801284e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012852:	2b0f      	cmp	r3, #15
 8012854:	ddb7      	ble.n	80127c6 <mg_sha256_chunk+0x1e>
  for (; i < 64; ++i)
 8012856:	e069      	b.n	801292c <mg_sha256_chunk+0x184>
    m[i] = sig1(m[i - 2]) + m[i - 7] + sig0(m[i - 15]) + m[i - 16];
 8012858:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801285c:	1e9a      	subs	r2, r3, #2
 801285e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012862:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801286a:	ea4f 4273 	mov.w	r2, r3, ror #17
 801286e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012872:	1e99      	subs	r1, r3, #2
 8012874:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012878:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801287c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012880:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8012884:	405a      	eors	r2, r3
 8012886:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801288a:	1e99      	subs	r1, r3, #2
 801288c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012890:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012894:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012898:	0a9b      	lsrs	r3, r3, #10
 801289a:	405a      	eors	r2, r3
 801289c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80128a0:	1fd9      	subs	r1, r3, #7
 80128a2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80128a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80128aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128ae:	441a      	add	r2, r3
 80128b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80128b4:	f1a3 010f 	sub.w	r1, r3, #15
 80128b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80128bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80128c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80128c4:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80128c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80128cc:	f1a3 000f 	sub.w	r0, r3, #15
 80128d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80128d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80128d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80128dc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80128e0:	4059      	eors	r1, r3
 80128e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80128e6:	f1a3 000f 	sub.w	r0, r3, #15
 80128ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80128ee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80128f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80128f6:	08db      	lsrs	r3, r3, #3
 80128f8:	404b      	eors	r3, r1
 80128fa:	441a      	add	r2, r3
 80128fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012900:	f1a3 0110 	sub.w	r1, r3, #16
 8012904:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012908:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801290c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012910:	18d1      	adds	r1, r2, r3
 8012912:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012916:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801291a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 801291e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (; i < 64; ++i)
 8012922:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012926:	3301      	adds	r3, #1
 8012928:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 801292c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012930:	2b3f      	cmp	r3, #63	@ 0x3f
 8012932:	dd91      	ble.n	8012858 <mg_sha256_chunk+0xb0>

  a = ctx->state[0];
 8012934:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012938:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  b = ctx->state[1];
 8012944:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012948:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  c = ctx->state[2];
 8012954:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012958:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	689b      	ldr	r3, [r3, #8]
 8012960:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  d = ctx->state[3];
 8012964:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012968:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  e = ctx->state[4];
 8012974:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012978:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	691b      	ldr	r3, [r3, #16]
 8012980:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  f = ctx->state[5];
 8012984:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012988:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	695b      	ldr	r3, [r3, #20]
 8012990:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  g = ctx->state[6];
 8012994:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012998:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	699b      	ldr	r3, [r3, #24]
 80129a0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  h = ctx->state[7];
 80129a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80129a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	69db      	ldr	r3, [r3, #28]
 80129b0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  for (i = 0; i < 64; ++i) {
 80129b4:	2300      	movs	r3, #0
 80129b6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80129ba:	e078      	b.n	8012aae <mg_sha256_chunk+0x306>
    uint32_t t1 = h + ep1(e) + ch(e, f, g) + mg_sha256_k[i] + m[i];
 80129bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80129c0:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80129c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80129c8:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80129cc:	405a      	eors	r2, r3
 80129ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80129d2:	ea4f 6373 	mov.w	r3, r3, ror #25
 80129d6:	405a      	eors	r2, r3
 80129d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80129dc:	441a      	add	r2, r3
 80129de:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80129e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80129e6:	4019      	ands	r1, r3
 80129e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80129ec:	43d8      	mvns	r0, r3
 80129ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80129f2:	4003      	ands	r3, r0
 80129f4:	404b      	eors	r3, r1
 80129f6:	441a      	add	r2, r3
 80129f8:	496e      	ldr	r1, [pc, #440]	@ (8012bb4 <mg_sha256_chunk+0x40c>)
 80129fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80129fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8012a02:	441a      	add	r2, r3
 8012a04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012a08:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8012a0c:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8012a10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012a14:	4413      	add	r3, r2
 8012a16:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t t2 = ep0(a) + maj(a, b, c);
 8012a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012a1e:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8012a22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012a26:	ea4f 3373 	mov.w	r3, r3, ror #13
 8012a2a:	405a      	eors	r2, r3
 8012a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012a30:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8012a34:	405a      	eors	r2, r3
 8012a36:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 8012a3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8012a3e:	4059      	eors	r1, r3
 8012a40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012a44:	4019      	ands	r1, r3
 8012a46:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8012a4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8012a4e:	4003      	ands	r3, r0
 8012a50:	404b      	eors	r3, r1
 8012a52:	4413      	add	r3, r2
 8012a54:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    h = g;
 8012a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a5c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
    g = f;
 8012a60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012a64:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    f = e;
 8012a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012a6c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
    e = d + t1;
 8012a70:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8012a74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8012a78:	4413      	add	r3, r2
 8012a7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    d = c;
 8012a7e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8012a82:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    c = b;
 8012a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012a8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    b = a;
 8012a8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012a92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    a = t1 + t2;
 8012a96:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8012a9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8012a9e:	4413      	add	r3, r2
 8012aa0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  for (i = 0; i < 64; ++i) {
 8012aa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8012aae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8012ab2:	2b3f      	cmp	r3, #63	@ 0x3f
 8012ab4:	dd82      	ble.n	80129bc <mg_sha256_chunk+0x214>
  }

  ctx->state[0] += a;
 8012ab6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012aba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8012ac6:	441a      	add	r2, r3
 8012ac8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012acc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	601a      	str	r2, [r3, #0]
  ctx->state[1] += b;
 8012ad4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012ad8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	685a      	ldr	r2, [r3, #4]
 8012ae0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8012ae4:	441a      	add	r2, r3
 8012ae6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012aea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	605a      	str	r2, [r3, #4]
  ctx->state[2] += c;
 8012af2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012af6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	689a      	ldr	r2, [r3, #8]
 8012afe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8012b02:	441a      	add	r2, r3
 8012b04:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	609a      	str	r2, [r3, #8]
  ctx->state[3] += d;
 8012b10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b14:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	68da      	ldr	r2, [r3, #12]
 8012b1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8012b20:	441a      	add	r2, r3
 8012b22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b26:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	60da      	str	r2, [r3, #12]
  ctx->state[4] += e;
 8012b2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	691a      	ldr	r2, [r3, #16]
 8012b3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8012b3e:	441a      	add	r2, r3
 8012b40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b44:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	611a      	str	r2, [r3, #16]
  ctx->state[5] += f;
 8012b4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b50:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	695a      	ldr	r2, [r3, #20]
 8012b58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012b5c:	441a      	add	r2, r3
 8012b5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b62:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	615a      	str	r2, [r3, #20]
  ctx->state[6] += g;
 8012b6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b6e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	699a      	ldr	r2, [r3, #24]
 8012b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012b7a:	441a      	add	r2, r3
 8012b7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b80:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	619a      	str	r2, [r3, #24]
  ctx->state[7] += h;
 8012b88:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	69da      	ldr	r2, [r3, #28]
 8012b94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012b98:	441a      	add	r2, r3
 8012b9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8012b9e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	61da      	str	r2, [r3, #28]
}
 8012ba6:	bf00      	nop
 8012ba8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8012bac:	46bd      	mov	sp, r7
 8012bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb2:	4770      	bx	lr
 8012bb4:	08027b94 	.word	0x08027b94

08012bb8 <mg_sha256_update>:

void mg_sha256_update(mg_sha256_ctx *ctx, const unsigned char *data,
                      size_t len) {
 8012bb8:	b5b0      	push	{r4, r5, r7, lr}
 8012bba:	b086      	sub	sp, #24
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i++) {
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	617b      	str	r3, [r7, #20]
 8012bc8:	e026      	b.n	8012c18 <mg_sha256_update+0x60>
    ctx->buffer[ctx->len] = data[i];
 8012bca:	68ba      	ldr	r2, [r7, #8]
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	441a      	add	r2, r3
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bd4:	7811      	ldrb	r1, [r2, #0]
 8012bd6:	68fa      	ldr	r2, [r7, #12]
 8012bd8:	4413      	add	r3, r2
 8012bda:	460a      	mov	r2, r1
 8012bdc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if ((++ctx->len) == 64) {
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012be4:	1c5a      	adds	r2, r3, #1
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	629a      	str	r2, [r3, #40]	@ 0x28
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bee:	2b40      	cmp	r3, #64	@ 0x40
 8012bf0:	d10f      	bne.n	8012c12 <mg_sha256_update+0x5a>
      mg_sha256_chunk(ctx);
 8012bf2:	68f8      	ldr	r0, [r7, #12]
 8012bf4:	f7ff fdd8 	bl	80127a8 <mg_sha256_chunk>
      ctx->bits += 512;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012bfe:	f512 7400 	adds.w	r4, r2, #512	@ 0x200
 8012c02:	f143 0500 	adc.w	r5, r3, #0
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	e9c3 4508 	strd	r4, r5, [r3, #32]
      ctx->len = 0;
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	629a      	str	r2, [r3, #40]	@ 0x28
  for (i = 0; i < len; i++) {
 8012c12:	697b      	ldr	r3, [r7, #20]
 8012c14:	3301      	adds	r3, #1
 8012c16:	617b      	str	r3, [r7, #20]
 8012c18:	697a      	ldr	r2, [r7, #20]
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d3d4      	bcc.n	8012bca <mg_sha256_update+0x12>
    }
  }
}
 8012c20:	bf00      	nop
 8012c22:	bf00      	nop
 8012c24:	3718      	adds	r7, #24
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bdb0      	pop	{r4, r5, r7, pc}

08012c2a <mg_sha256_final>:

// TODO: make final reusable (remove side effects)
void mg_sha256_final(unsigned char digest[32], mg_sha256_ctx *ctx) {
 8012c2a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8012c2e:	b084      	sub	sp, #16
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	6039      	str	r1, [r7, #0]
  uint32_t i = ctx->len;
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c3a:	60fb      	str	r3, [r7, #12]
  if (i < 56) {
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2b37      	cmp	r3, #55	@ 0x37
 8012c40:	d814      	bhi.n	8012c6c <mg_sha256_final+0x42>
    ctx->buffer[i++] = 0x80;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	1c5a      	adds	r2, r3, #1
 8012c46:	60fa      	str	r2, [r7, #12]
 8012c48:	683a      	ldr	r2, [r7, #0]
 8012c4a:	4413      	add	r3, r2
 8012c4c:	2280      	movs	r2, #128	@ 0x80
 8012c4e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 8012c52:	e007      	b.n	8012c64 <mg_sha256_final+0x3a>
      ctx->buffer[i++] = 0x00;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	1c5a      	adds	r2, r3, #1
 8012c58:	60fa      	str	r2, [r7, #12]
 8012c5a:	683a      	ldr	r2, [r7, #0]
 8012c5c:	4413      	add	r3, r2
 8012c5e:	2200      	movs	r2, #0
 8012c60:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 56) {
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	2b37      	cmp	r3, #55	@ 0x37
 8012c68:	d9f4      	bls.n	8012c54 <mg_sha256_final+0x2a>
 8012c6a:	e01d      	b.n	8012ca8 <mg_sha256_final+0x7e>
    }
  } else {
    ctx->buffer[i++] = 0x80;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	1c5a      	adds	r2, r3, #1
 8012c70:	60fa      	str	r2, [r7, #12]
 8012c72:	683a      	ldr	r2, [r7, #0]
 8012c74:	4413      	add	r3, r2
 8012c76:	2280      	movs	r2, #128	@ 0x80
 8012c78:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8012c7c:	e007      	b.n	8012c8e <mg_sha256_final+0x64>
      ctx->buffer[i++] = 0x00;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	1c5a      	adds	r2, r3, #1
 8012c82:	60fa      	str	r2, [r7, #12]
 8012c84:	683a      	ldr	r2, [r7, #0]
 8012c86:	4413      	add	r3, r2
 8012c88:	2200      	movs	r2, #0
 8012c8a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    while (i < 64) {
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	2b3f      	cmp	r3, #63	@ 0x3f
 8012c92:	d9f4      	bls.n	8012c7e <mg_sha256_final+0x54>
    }
    mg_sha256_chunk(ctx);
 8012c94:	6838      	ldr	r0, [r7, #0]
 8012c96:	f7ff fd87 	bl	80127a8 <mg_sha256_chunk>
    memset(ctx->buffer, 0, 56);
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	332c      	adds	r3, #44	@ 0x2c
 8012c9e:	2238      	movs	r2, #56	@ 0x38
 8012ca0:	2100      	movs	r1, #0
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f010 fd7b 	bl	802379e <memset>
  }

  ctx->bits += ctx->len * 8;
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012cae:	6839      	ldr	r1, [r7, #0]
 8012cb0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8012cb2:	00c9      	lsls	r1, r1, #3
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	460c      	mov	r4, r1
 8012cb8:	4605      	mov	r5, r0
 8012cba:	eb12 0804 	adds.w	r8, r2, r4
 8012cbe:	eb43 0905 	adc.w	r9, r3, r5
 8012cc2:	683b      	ldr	r3, [r7, #0]
 8012cc4:	e9c3 8908 	strd	r8, r9, [r3, #32]
  ctx->buffer[63] = (uint8_t) ((ctx->bits) & 0xff);
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012cce:	b2d2      	uxtb	r2, r2
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
  ctx->buffer[62] = (uint8_t) ((ctx->bits >> 8) & 0xff);
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012cdc:	f04f 0200 	mov.w	r2, #0
 8012ce0:	f04f 0300 	mov.w	r3, #0
 8012ce4:	0a02      	lsrs	r2, r0, #8
 8012ce6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8012cea:	0a0b      	lsrs	r3, r1, #8
 8012cec:	b2d2      	uxtb	r2, r2
 8012cee:	683b      	ldr	r3, [r7, #0]
 8012cf0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
  ctx->buffer[61] = (uint8_t) ((ctx->bits >> 16) & 0xff);
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012cfa:	f04f 0200 	mov.w	r2, #0
 8012cfe:	f04f 0300 	mov.w	r3, #0
 8012d02:	0c02      	lsrs	r2, r0, #16
 8012d04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8012d08:	0c0b      	lsrs	r3, r1, #16
 8012d0a:	b2d2      	uxtb	r2, r2
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
  ctx->buffer[60] = (uint8_t) ((ctx->bits >> 24) & 0xff);
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012d18:	f04f 0200 	mov.w	r2, #0
 8012d1c:	f04f 0300 	mov.w	r3, #0
 8012d20:	0e02      	lsrs	r2, r0, #24
 8012d22:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8012d26:	0e0b      	lsrs	r3, r1, #24
 8012d28:	b2d2      	uxtb	r2, r2
 8012d2a:	683b      	ldr	r3, [r7, #0]
 8012d2c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
  ctx->buffer[59] = (uint8_t) ((ctx->bits >> 32) & 0xff);
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012d36:	f04f 0200 	mov.w	r2, #0
 8012d3a:	f04f 0300 	mov.w	r3, #0
 8012d3e:	000a      	movs	r2, r1
 8012d40:	2300      	movs	r3, #0
 8012d42:	b2d2      	uxtb	r2, r2
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
  ctx->buffer[58] = (uint8_t) ((ctx->bits >> 40) & 0xff);
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012d50:	f04f 0200 	mov.w	r2, #0
 8012d54:	f04f 0300 	mov.w	r3, #0
 8012d58:	0a0a      	lsrs	r2, r1, #8
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	b2d2      	uxtb	r2, r2
 8012d5e:	683b      	ldr	r3, [r7, #0]
 8012d60:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
  ctx->buffer[57] = (uint8_t) ((ctx->bits >> 48) & 0xff);
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012d6a:	f04f 0200 	mov.w	r2, #0
 8012d6e:	f04f 0300 	mov.w	r3, #0
 8012d72:	0c0a      	lsrs	r2, r1, #16
 8012d74:	2300      	movs	r3, #0
 8012d76:	b2d2      	uxtb	r2, r2
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
  ctx->buffer[56] = (uint8_t) ((ctx->bits >> 56) & 0xff);
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8012d84:	f04f 0200 	mov.w	r2, #0
 8012d88:	f04f 0300 	mov.w	r3, #0
 8012d8c:	0e0a      	lsrs	r2, r1, #24
 8012d8e:	2300      	movs	r3, #0
 8012d90:	b2d2      	uxtb	r2, r2
 8012d92:	683b      	ldr	r3, [r7, #0]
 8012d94:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
  mg_sha256_chunk(ctx);
 8012d98:	6838      	ldr	r0, [r7, #0]
 8012d9a:	f7ff fd05 	bl	80127a8 <mg_sha256_chunk>

  for (i = 0; i < 4; ++i) {
 8012d9e:	2300      	movs	r3, #0
 8012da0:	60fb      	str	r3, [r7, #12]
 8012da2:	e071      	b.n	8012e88 <mg_sha256_final+0x25e>
    digest[i] = (uint8_t) ((ctx->state[0] >> (24 - i * 8)) & 0xff);
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	681a      	ldr	r2, [r3, #0]
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	f1c3 0303 	rsb	r3, r3, #3
 8012dae:	00db      	lsls	r3, r3, #3
 8012db0:	fa22 f103 	lsr.w	r1, r2, r3
 8012db4:	687a      	ldr	r2, [r7, #4]
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	4413      	add	r3, r2
 8012dba:	b2ca      	uxtb	r2, r1
 8012dbc:	701a      	strb	r2, [r3, #0]
    digest[i + 4] = (uint8_t) ((ctx->state[1] >> (24 - i * 8)) & 0xff);
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	685a      	ldr	r2, [r3, #4]
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	f1c3 0303 	rsb	r3, r3, #3
 8012dc8:	00db      	lsls	r3, r3, #3
 8012dca:	fa22 f103 	lsr.w	r1, r2, r3
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	3304      	adds	r3, #4
 8012dd2:	687a      	ldr	r2, [r7, #4]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	b2ca      	uxtb	r2, r1
 8012dd8:	701a      	strb	r2, [r3, #0]
    digest[i + 8] = (uint8_t) ((ctx->state[2] >> (24 - i * 8)) & 0xff);
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	689a      	ldr	r2, [r3, #8]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	f1c3 0303 	rsb	r3, r3, #3
 8012de4:	00db      	lsls	r3, r3, #3
 8012de6:	fa22 f103 	lsr.w	r1, r2, r3
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	3308      	adds	r3, #8
 8012dee:	687a      	ldr	r2, [r7, #4]
 8012df0:	4413      	add	r3, r2
 8012df2:	b2ca      	uxtb	r2, r1
 8012df4:	701a      	strb	r2, [r3, #0]
    digest[i + 12] = (uint8_t) ((ctx->state[3] >> (24 - i * 8)) & 0xff);
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	68da      	ldr	r2, [r3, #12]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	f1c3 0303 	rsb	r3, r3, #3
 8012e00:	00db      	lsls	r3, r3, #3
 8012e02:	fa22 f103 	lsr.w	r1, r2, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	330c      	adds	r3, #12
 8012e0a:	687a      	ldr	r2, [r7, #4]
 8012e0c:	4413      	add	r3, r2
 8012e0e:	b2ca      	uxtb	r2, r1
 8012e10:	701a      	strb	r2, [r3, #0]
    digest[i + 16] = (uint8_t) ((ctx->state[4] >> (24 - i * 8)) & 0xff);
 8012e12:	683b      	ldr	r3, [r7, #0]
 8012e14:	691a      	ldr	r2, [r3, #16]
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	f1c3 0303 	rsb	r3, r3, #3
 8012e1c:	00db      	lsls	r3, r3, #3
 8012e1e:	fa22 f103 	lsr.w	r1, r2, r3
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	3310      	adds	r3, #16
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	4413      	add	r3, r2
 8012e2a:	b2ca      	uxtb	r2, r1
 8012e2c:	701a      	strb	r2, [r3, #0]
    digest[i + 20] = (uint8_t) ((ctx->state[5] >> (24 - i * 8)) & 0xff);
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	695a      	ldr	r2, [r3, #20]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	f1c3 0303 	rsb	r3, r3, #3
 8012e38:	00db      	lsls	r3, r3, #3
 8012e3a:	fa22 f103 	lsr.w	r1, r2, r3
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	3314      	adds	r3, #20
 8012e42:	687a      	ldr	r2, [r7, #4]
 8012e44:	4413      	add	r3, r2
 8012e46:	b2ca      	uxtb	r2, r1
 8012e48:	701a      	strb	r2, [r3, #0]
    digest[i + 24] = (uint8_t) ((ctx->state[6] >> (24 - i * 8)) & 0xff);
 8012e4a:	683b      	ldr	r3, [r7, #0]
 8012e4c:	699a      	ldr	r2, [r3, #24]
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	f1c3 0303 	rsb	r3, r3, #3
 8012e54:	00db      	lsls	r3, r3, #3
 8012e56:	fa22 f103 	lsr.w	r1, r2, r3
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	3318      	adds	r3, #24
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	4413      	add	r3, r2
 8012e62:	b2ca      	uxtb	r2, r1
 8012e64:	701a      	strb	r2, [r3, #0]
    digest[i + 28] = (uint8_t) ((ctx->state[7] >> (24 - i * 8)) & 0xff);
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	69da      	ldr	r2, [r3, #28]
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	f1c3 0303 	rsb	r3, r3, #3
 8012e70:	00db      	lsls	r3, r3, #3
 8012e72:	fa22 f103 	lsr.w	r1, r2, r3
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	331c      	adds	r3, #28
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	b2ca      	uxtb	r2, r1
 8012e80:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 4; ++i) {
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	3301      	adds	r3, #1
 8012e86:	60fb      	str	r3, [r7, #12]
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2b03      	cmp	r3, #3
 8012e8c:	d98a      	bls.n	8012da4 <mg_sha256_final+0x17a>
  }
}
 8012e8e:	bf00      	nop
 8012e90:	bf00      	nop
 8012e92:	3710      	adds	r7, #16
 8012e94:	46bd      	mov	sp, r7
 8012e96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08012e9a <mg_sha256>:

void mg_sha256(uint8_t dst[32], uint8_t *data, size_t datasz) {
 8012e9a:	b580      	push	{r7, lr}
 8012e9c:	b0a0      	sub	sp, #128	@ 0x80
 8012e9e:	af00      	add	r7, sp, #0
 8012ea0:	60f8      	str	r0, [r7, #12]
 8012ea2:	60b9      	str	r1, [r7, #8]
 8012ea4:	607a      	str	r2, [r7, #4]
  mg_sha256_ctx ctx;
  mg_sha256_init(&ctx);
 8012ea6:	f107 0310 	add.w	r3, r7, #16
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7ff fc40 	bl	8012730 <mg_sha256_init>
  mg_sha256_update(&ctx, data, datasz);
 8012eb0:	f107 0310 	add.w	r3, r7, #16
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	68b9      	ldr	r1, [r7, #8]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff fe7d 	bl	8012bb8 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8012ebe:	f107 0310 	add.w	r3, r7, #16
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	f7ff feb0 	bl	8012c2a <mg_sha256_final>
}
 8012eca:	bf00      	nop
 8012ecc:	3780      	adds	r7, #128	@ 0x80
 8012ece:	46bd      	mov	sp, r7
 8012ed0:	bd80      	pop	{r7, pc}

08012ed2 <mg_hmac_sha256>:

void mg_hmac_sha256(uint8_t dst[32], uint8_t *key, size_t keysz, uint8_t *data,
                    size_t datasz) {
 8012ed2:	b590      	push	{r4, r7, lr}
 8012ed4:	b0d3      	sub	sp, #332	@ 0x14c
 8012ed6:	af00      	add	r7, sp, #0
 8012ed8:	f507 74a4 	add.w	r4, r7, #328	@ 0x148
 8012edc:	f5a4 749e 	sub.w	r4, r4, #316	@ 0x13c
 8012ee0:	6020      	str	r0, [r4, #0]
 8012ee2:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8012ee6:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 8012eea:	6001      	str	r1, [r0, #0]
 8012eec:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8012ef0:	f5a1 71a2 	sub.w	r1, r1, #324	@ 0x144
 8012ef4:	600a      	str	r2, [r1, #0]
 8012ef6:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8012efa:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8012efe:	6013      	str	r3, [r2, #0]
  mg_sha256_ctx ctx;
  uint8_t k[64] = {0};
 8012f00:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8012f04:	2240      	movs	r2, #64	@ 0x40
 8012f06:	2100      	movs	r1, #0
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f010 fc48 	bl	802379e <memset>
  uint8_t o_pad[64], i_pad[64];
  unsigned int i;
  memset(i_pad, 0x36, sizeof(i_pad));
 8012f0e:	f107 0310 	add.w	r3, r7, #16
 8012f12:	2240      	movs	r2, #64	@ 0x40
 8012f14:	2136      	movs	r1, #54	@ 0x36
 8012f16:	4618      	mov	r0, r3
 8012f18:	f010 fc41 	bl	802379e <memset>
  memset(o_pad, 0x5c, sizeof(o_pad));
 8012f1c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8012f20:	2240      	movs	r2, #64	@ 0x40
 8012f22:	215c      	movs	r1, #92	@ 0x5c
 8012f24:	4618      	mov	r0, r3
 8012f26:	f010 fc3a 	bl	802379e <memset>
  if (keysz < 64) {
 8012f2a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f2e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2b3f      	cmp	r3, #63	@ 0x3f
 8012f36:	d815      	bhi.n	8012f64 <mg_hmac_sha256+0x92>
    if (keysz > 0) memmove(k, key, keysz);
 8012f38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f3c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d029      	beq.n	8012f9a <mg_hmac_sha256+0xc8>
 8012f46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f4a:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8012f4e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f52:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8012f56:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8012f5a:	6812      	ldr	r2, [r2, #0]
 8012f5c:	6819      	ldr	r1, [r3, #0]
 8012f5e:	f010 fc04 	bl	802376a <memmove>
 8012f62:	e01a      	b.n	8012f9a <mg_hmac_sha256+0xc8>
  } else {
    mg_sha256_init(&ctx);
 8012f64:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f7ff fbe1 	bl	8012730 <mg_sha256_init>
    mg_sha256_update(&ctx, key, keysz);
 8012f6e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f72:	f5a3 72a2 	sub.w	r2, r3, #324	@ 0x144
 8012f76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012f7a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8012f7e:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8012f82:	6812      	ldr	r2, [r2, #0]
 8012f84:	6819      	ldr	r1, [r3, #0]
 8012f86:	f7ff fe17 	bl	8012bb8 <mg_sha256_update>
    mg_sha256_final(k, &ctx);
 8012f8a:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8012f8e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8012f92:	4611      	mov	r1, r2
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7ff fe48 	bl	8012c2a <mg_sha256_final>
  }
  for (i = 0; i < sizeof(k); i++) {
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8012fa0:	e032      	b.n	8013008 <mg_hmac_sha256+0x136>
    i_pad[i] ^= k[i];
 8012fa2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012fa6:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8012faa:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012fae:	4413      	add	r3, r2
 8012fb0:	781a      	ldrb	r2, [r3, #0]
 8012fb2:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8012fb6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012fba:	440b      	add	r3, r1
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	4053      	eors	r3, r2
 8012fc0:	b2d9      	uxtb	r1, r3
 8012fc2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8012fc6:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8012fca:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012fce:	4413      	add	r3, r2
 8012fd0:	460a      	mov	r2, r1
 8012fd2:	701a      	strb	r2, [r3, #0]
    o_pad[i] ^= k[i];
 8012fd4:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012fd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012fdc:	4413      	add	r3, r2
 8012fde:	781a      	ldrb	r2, [r3, #0]
 8012fe0:	f107 0190 	add.w	r1, r7, #144	@ 0x90
 8012fe4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012fe8:	440b      	add	r3, r1
 8012fea:	781b      	ldrb	r3, [r3, #0]
 8012fec:	4053      	eors	r3, r2
 8012fee:	b2d9      	uxtb	r1, r3
 8012ff0:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8012ff4:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8012ff8:	4413      	add	r3, r2
 8012ffa:	460a      	mov	r2, r1
 8012ffc:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(k); i++) {
 8012ffe:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8013002:	3301      	adds	r3, #1
 8013004:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8013008:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 801300c:	2b3f      	cmp	r3, #63	@ 0x3f
 801300e:	d9c8      	bls.n	8012fa2 <mg_hmac_sha256+0xd0>
  }
  mg_sha256_init(&ctx);
 8013010:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8013014:	4618      	mov	r0, r3
 8013016:	f7ff fb8b 	bl	8012730 <mg_sha256_init>
  mg_sha256_update(&ctx, i_pad, sizeof(i_pad));
 801301a:	f107 0110 	add.w	r1, r7, #16
 801301e:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8013022:	2240      	movs	r2, #64	@ 0x40
 8013024:	4618      	mov	r0, r3
 8013026:	f7ff fdc7 	bl	8012bb8 <mg_sha256_update>
  mg_sha256_update(&ctx, data, datasz);
 801302a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801302e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8013032:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 8013036:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801303a:	6819      	ldr	r1, [r3, #0]
 801303c:	f7ff fdbc 	bl	8012bb8 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8013040:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8013044:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8013048:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801304c:	4611      	mov	r1, r2
 801304e:	6818      	ldr	r0, [r3, #0]
 8013050:	f7ff fdeb 	bl	8012c2a <mg_sha256_final>
  mg_sha256_init(&ctx);
 8013054:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8013058:	4618      	mov	r0, r3
 801305a:	f7ff fb69 	bl	8012730 <mg_sha256_init>
  mg_sha256_update(&ctx, o_pad, sizeof(o_pad));
 801305e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8013062:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8013066:	2240      	movs	r2, #64	@ 0x40
 8013068:	4618      	mov	r0, r3
 801306a:	f7ff fda5 	bl	8012bb8 <mg_sha256_update>
  mg_sha256_update(&ctx, dst, 32);
 801306e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8013072:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8013076:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 801307a:	2220      	movs	r2, #32
 801307c:	6819      	ldr	r1, [r3, #0]
 801307e:	f7ff fd9b 	bl	8012bb8 <mg_sha256_update>
  mg_sha256_final(dst, &ctx);
 8013082:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 8013086:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 801308a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801308e:	4611      	mov	r1, r2
 8013090:	6818      	ldr	r0, [r3, #0]
 8013092:	f7ff fdca 	bl	8012c2a <mg_sha256_final>
}
 8013096:	bf00      	nop
 8013098:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 801309c:	46bd      	mov	sp, r7
 801309e:	bd90      	pop	{r4, r7, pc}

080130a0 <mg_sha384_transform>:
    0x0a637dc5a2c898a6, 0x113f9804bef90dae, 0x1b710b35131c471b,
    0x28db77f523047d84, 0x32caab7b40c72493, 0x3c9ebe0a15c9bebc,
    0x431d67c49c100d4c, 0x4cc5d4becb3e42b6, 0x597f299cfc657e2a,
    0x5fcb6fab3ad6faec, 0x6c44198c4a475817};

static void mg_sha384_transform(mg_sha384_ctx *ctx, const uint8_t data[]) {
 80130a0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80130a4:	f5ad 6d95 	sub.w	sp, sp, #1192	@ 0x4a8
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80130ae:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80130b2:	6018      	str	r0, [r3, #0]
 80130b4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80130b8:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80130bc:	6019      	str	r1, [r3, #0]
  uint64_t m[80];
  uint64_t a, b, c, d, e, f, g, h;
  int i, j;

  for (i = 0, j = 0; i < 16; ++i, j += 8)
 80130be:	2300      	movs	r3, #0
 80130c0:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80130c4:	2300      	movs	r3, #0
 80130c6:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 80130ca:	e113      	b.n	80132f4 <mg_sha384_transform+0x254>
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 80130cc:	f8d7 2460 	ldr.w	r2, [r7, #1120]	@ 0x460
 80130d0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80130d4:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	4413      	add	r3, r2
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	b2db      	uxtb	r3, r3
 80130e0:	2200      	movs	r2, #0
 80130e2:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80130e6:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80130ea:	f04f 0000 	mov.w	r0, #0
 80130ee:	f04f 0100 	mov.w	r1, #0
 80130f2:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80130f6:	0619      	lsls	r1, r3, #24
 80130f8:	2000      	movs	r0, #0
 80130fa:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80130fe:	1c5a      	adds	r2, r3, #1
 8013100:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013104:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	4413      	add	r3, r2
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	b2db      	uxtb	r3, r3
 8013110:	2200      	movs	r2, #0
 8013112:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8013116:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 801311a:	f04f 0200 	mov.w	r2, #0
 801311e:	f04f 0300 	mov.w	r3, #0
 8013122:	f8d7 6190 	ldr.w	r6, [r7, #400]	@ 0x190
 8013126:	0433      	lsls	r3, r6, #16
 8013128:	2200      	movs	r2, #0
 801312a:	ea40 0602 	orr.w	r6, r0, r2
 801312e:	f8c7 61b0 	str.w	r6, [r7, #432]	@ 0x1b0
 8013132:	430b      	orrs	r3, r1
 8013134:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 8013138:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 801313c:	1c9a      	adds	r2, r3, #2
 801313e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013142:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	4413      	add	r3, r2
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	b2db      	uxtb	r3, r3
 801314e:	2200      	movs	r2, #0
 8013150:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8013154:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8013158:	f04f 0200 	mov.w	r2, #0
 801315c:	f04f 0300 	mov.w	r3, #0
 8013160:	f8d7 1188 	ldr.w	r1, [r7, #392]	@ 0x188
 8013164:	020b      	lsls	r3, r1, #8
 8013166:	2200      	movs	r2, #0
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 8013168:	f8d7 11b0 	ldr.w	r1, [r7, #432]	@ 0x1b0
 801316c:	4311      	orrs	r1, r2
 801316e:	f8c7 11a8 	str.w	r1, [r7, #424]	@ 0x1a8
 8013172:	f8d7 11b4 	ldr.w	r1, [r7, #436]	@ 0x1b4
 8013176:	430b      	orrs	r3, r1
 8013178:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 801317c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8013180:	1cda      	adds	r2, r3, #3
 8013182:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013186:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4413      	add	r3, r2
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	b2db      	uxtb	r3, r3
 8013192:	2200      	movs	r2, #0
 8013194:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8013198:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 801319c:	f04f 0200 	mov.w	r2, #0
 80131a0:	f04f 0300 	mov.w	r3, #0
 80131a4:	f8d7 1180 	ldr.w	r1, [r7, #384]	@ 0x180
 80131a8:	000b      	movs	r3, r1
 80131aa:	2200      	movs	r2, #0
 80131ac:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 80131b0:	4311      	orrs	r1, r2
 80131b2:	f8c7 11a0 	str.w	r1, [r7, #416]	@ 0x1a0
 80131b6:	f8d7 11ac 	ldr.w	r1, [r7, #428]	@ 0x1ac
 80131ba:	430b      	orrs	r3, r1
 80131bc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 80131c0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80131c4:	1d1a      	adds	r2, r3, #4
 80131c6:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80131ca:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	4413      	add	r3, r2
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	b2db      	uxtb	r3, r3
 80131d6:	2200      	movs	r2, #0
 80131d8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80131dc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80131e0:	e9d7 125e 	ldrd	r1, r2, [r7, #376]	@ 0x178
 80131e4:	460b      	mov	r3, r1
 80131e6:	0a1b      	lsrs	r3, r3, #8
 80131e8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80131ec:	460b      	mov	r3, r1
 80131ee:	061b      	lsls	r3, r3, #24
 80131f0:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
           ((uint64_t) data[j + 2] << 40) | ((uint64_t) data[j + 3] << 32) |
 80131f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80131f8:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 80131fc:	4602      	mov	r2, r0
 80131fe:	ea43 0a02 	orr.w	sl, r3, r2
 8013202:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8013206:	460a      	mov	r2, r1
 8013208:	ea43 0b02 	orr.w	fp, r3, r2
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 801320c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8013210:	1d5a      	adds	r2, r3, #5
 8013212:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013216:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	4413      	add	r3, r2
 801321e:	781b      	ldrb	r3, [r3, #0]
 8013220:	b2db      	uxtb	r3, r3
 8013222:	2200      	movs	r2, #0
 8013224:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8013228:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 801322c:	f04f 0200 	mov.w	r2, #0
 8013230:	f04f 0300 	mov.w	r3, #0
 8013234:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 8013238:	040b      	lsls	r3, r1, #16
 801323a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 801323e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8013242:	f8d7 11c0 	ldr.w	r1, [r7, #448]	@ 0x1c0
 8013246:	040a      	lsls	r2, r1, #16
 8013248:	ea4a 0802 	orr.w	r8, sl, r2
 801324c:	ea4b 0903 	orr.w	r9, fp, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8013250:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8013254:	1d9a      	adds	r2, r3, #6
 8013256:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801325a:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4413      	add	r3, r2
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	b2db      	uxtb	r3, r3
 8013266:	2200      	movs	r2, #0
 8013268:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 801326c:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8013270:	f04f 0200 	mov.w	r2, #0
 8013274:	f04f 0300 	mov.w	r3, #0
 8013278:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 801327c:	020b      	lsls	r3, r1, #8
 801327e:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8013282:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8013286:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 801328a:	020a      	lsls	r2, r1, #8
           ((uint64_t) data[j + 4] << 24) | ((uint64_t) data[j + 5] << 16) |
 801328c:	ea48 0402 	orr.w	r4, r8, r2
 8013290:	ea49 0503 	orr.w	r5, r9, r3
           ((uint64_t) data[j + 6] << 8) | ((uint64_t) data[j + 7]);
 8013294:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 8013298:	1dda      	adds	r2, r3, #7
 801329a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801329e:	f5a3 7338 	sub.w	r3, r3, #736	@ 0x2e0
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	4413      	add	r3, r2
 80132a6:	781b      	ldrb	r3, [r3, #0]
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	2200      	movs	r2, #0
 80132ac:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80132b0:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 80132b4:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 80132b8:	460b      	mov	r3, r1
 80132ba:	4323      	orrs	r3, r4
 80132bc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80132c0:	4613      	mov	r3, r2
 80132c2:	432b      	orrs	r3, r5
 80132c4:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
    m[i] = ((uint64_t) data[j] << 56) | ((uint64_t) data[j + 1] << 48) |
 80132c8:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80132cc:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80132d0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80132d4:	00db      	lsls	r3, r3, #3
 80132d6:	4413      	add	r3, r2
 80132d8:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 80132dc:	e9c3 1200 	strd	r1, r2, [r3]
  for (i = 0, j = 0; i < 16; ++i, j += 8)
 80132e0:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80132e4:	3301      	adds	r3, #1
 80132e6:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80132ea:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80132ee:	3308      	adds	r3, #8
 80132f0:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460
 80132f4:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80132f8:	2b0f      	cmp	r3, #15
 80132fa:	f77f aee7 	ble.w	80130cc <mg_sha384_transform+0x2c>
  for (; i < 80; ++i)
 80132fe:	e0f8      	b.n	80134f2 <mg_sha384_transform+0x452>
    m[i] = sig164(m[i - 2]) + m[i - 7] + sig064(m[i - 15]) + m[i - 16];
 8013300:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013304:	1e99      	subs	r1, r3, #2
 8013306:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801330a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 801330e:	00cb      	lsls	r3, r1, #3
 8013310:	4413      	add	r3, r2
 8013312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013316:	0358      	lsls	r0, r3, #13
 8013318:	0cd1      	lsrs	r1, r2, #19
 801331a:	4301      	orrs	r1, r0
 801331c:	f8c7 1158 	str.w	r1, [r7, #344]	@ 0x158
 8013320:	0351      	lsls	r1, r2, #13
 8013322:	0cdb      	lsrs	r3, r3, #19
 8013324:	430b      	orrs	r3, r1
 8013326:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 801332a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801332e:	1e99      	subs	r1, r3, #2
 8013330:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013334:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013338:	00cb      	lsls	r3, r1, #3
 801333a:	4413      	add	r3, r2
 801333c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013340:	0f50      	lsrs	r0, r2, #29
 8013342:	00d9      	lsls	r1, r3, #3
 8013344:	4301      	orrs	r1, r0
 8013346:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 801334a:	0f59      	lsrs	r1, r3, #29
 801334c:	00d3      	lsls	r3, r2, #3
 801334e:	430b      	orrs	r3, r1
 8013350:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8013354:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 8013358:	4623      	mov	r3, r4
 801335a:	e9d7 0154 	ldrd	r0, r1, [r7, #336]	@ 0x150
 801335e:	4602      	mov	r2, r0
 8013360:	4053      	eors	r3, r2
 8013362:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8013366:	462b      	mov	r3, r5
 8013368:	460a      	mov	r2, r1
 801336a:	4053      	eors	r3, r2
 801336c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8013370:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013374:	1e99      	subs	r1, r3, #2
 8013376:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801337a:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 801337e:	00cb      	lsls	r3, r1, #3
 8013380:	4413      	add	r3, r2
 8013382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013386:	f04f 0000 	mov.w	r0, #0
 801338a:	f04f 0100 	mov.w	r1, #0
 801338e:	0990      	lsrs	r0, r2, #6
 8013390:	ea40 6083 	orr.w	r0, r0, r3, lsl #26
 8013394:	0999      	lsrs	r1, r3, #6
 8013396:	e9d7 4552 	ldrd	r4, r5, [r7, #328]	@ 0x148
 801339a:	4623      	mov	r3, r4
 801339c:	4043      	eors	r3, r0
 801339e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80133a2:	462b      	mov	r3, r5
 80133a4:	404b      	eors	r3, r1
 80133a6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80133aa:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80133ae:	1fd9      	subs	r1, r3, #7
 80133b0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80133b4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80133b8:	00cb      	lsls	r3, r1, #3
 80133ba:	4413      	add	r3, r2
 80133bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133c0:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	@ 0x140
 80133c4:	4621      	mov	r1, r4
 80133c6:	1889      	adds	r1, r1, r2
 80133c8:	f8c7 1138 	str.w	r1, [r7, #312]	@ 0x138
 80133cc:	4629      	mov	r1, r5
 80133ce:	eb41 0303 	adc.w	r3, r1, r3
 80133d2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80133d6:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80133da:	f1a3 010f 	sub.w	r1, r3, #15
 80133de:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80133e2:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80133e6:	00cb      	lsls	r3, r1, #3
 80133e8:	4413      	add	r3, r2
 80133ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ee:	07d8      	lsls	r0, r3, #31
 80133f0:	0851      	lsrs	r1, r2, #1
 80133f2:	4301      	orrs	r1, r0
 80133f4:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80133f8:	07d1      	lsls	r1, r2, #31
 80133fa:	085b      	lsrs	r3, r3, #1
 80133fc:	430b      	orrs	r3, r1
 80133fe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8013402:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013406:	f1a3 010f 	sub.w	r1, r3, #15
 801340a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801340e:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013412:	00cb      	lsls	r3, r1, #3
 8013414:	4413      	add	r3, r2
 8013416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801341a:	0618      	lsls	r0, r3, #24
 801341c:	0a11      	lsrs	r1, r2, #8
 801341e:	4301      	orrs	r1, r0
 8013420:	f8c7 1128 	str.w	r1, [r7, #296]	@ 0x128
 8013424:	0611      	lsls	r1, r2, #24
 8013426:	0a1b      	lsrs	r3, r3, #8
 8013428:	430b      	orrs	r3, r1
 801342a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 801342e:	e9d7 454c 	ldrd	r4, r5, [r7, #304]	@ 0x130
 8013432:	4623      	mov	r3, r4
 8013434:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	@ 0x128
 8013438:	4602      	mov	r2, r0
 801343a:	4053      	eors	r3, r2
 801343c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8013440:	462b      	mov	r3, r5
 8013442:	460a      	mov	r2, r1
 8013444:	4053      	eors	r3, r2
 8013446:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801344a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801344e:	f1a3 010f 	sub.w	r1, r3, #15
 8013452:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013456:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 801345a:	00cb      	lsls	r3, r1, #3
 801345c:	4413      	add	r3, r2
 801345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013462:	f04f 0000 	mov.w	r0, #0
 8013466:	f04f 0100 	mov.w	r1, #0
 801346a:	09d0      	lsrs	r0, r2, #7
 801346c:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8013470:	09d9      	lsrs	r1, r3, #7
 8013472:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	@ 0x120
 8013476:	4623      	mov	r3, r4
 8013478:	4043      	eors	r3, r0
 801347a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801347e:	462b      	mov	r3, r5
 8013480:	404b      	eors	r3, r1
 8013482:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8013486:	e9d7 454e 	ldrd	r4, r5, [r7, #312]	@ 0x138
 801348a:	4623      	mov	r3, r4
 801348c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8013490:	4602      	mov	r2, r0
 8013492:	189b      	adds	r3, r3, r2
 8013494:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8013498:	462b      	mov	r3, r5
 801349a:	460a      	mov	r2, r1
 801349c:	4153      	adcs	r3, r2
 801349e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80134a2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80134a6:	f1a3 0110 	sub.w	r1, r3, #16
 80134aa:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80134ae:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80134b2:	00cb      	lsls	r3, r1, #3
 80134b4:	4413      	add	r3, r2
 80134b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ba:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	@ 0x110
 80134be:	4621      	mov	r1, r4
 80134c0:	1889      	adds	r1, r1, r2
 80134c2:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 80134c6:	4629      	mov	r1, r5
 80134c8:	eb41 0303 	adc.w	r3, r1, r3
 80134cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80134d0:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80134d4:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 80134d8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80134dc:	00db      	lsls	r3, r3, #3
 80134de:	4413      	add	r3, r2
 80134e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80134e4:	e9c3 1200 	strd	r1, r2, [r3]
  for (; i < 80; ++i)
 80134e8:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80134ec:	3301      	adds	r3, #1
 80134ee:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80134f2:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 80134f6:	2b4f      	cmp	r3, #79	@ 0x4f
 80134f8:	f77f af02 	ble.w	8013300 <mg_sha384_transform+0x260>

  a = ctx->state[0];
 80134fc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013500:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350a:	f507 6194 	add.w	r1, r7, #1184	@ 0x4a0
 801350e:	e9c1 2300 	strd	r2, r3, [r1]
  b = ctx->state[1];
 8013512:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013516:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8013520:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 8013524:	e9c1 2300 	strd	r2, r3, [r1]
  c = ctx->state[2];
 8013528:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801352c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8013536:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 801353a:	e9c1 2300 	strd	r2, r3, [r1]
  d = ctx->state[3];
 801353e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013542:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801354c:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 8013550:	e9c1 2300 	strd	r2, r3, [r1]
  e = ctx->state[4];
 8013554:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013558:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013562:	f507 6190 	add.w	r1, r7, #1152	@ 0x480
 8013566:	e9c1 2300 	strd	r2, r3, [r1]
  f = ctx->state[5];
 801356a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801356e:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8013578:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 801357c:	e9c1 2300 	strd	r2, r3, [r1]
  g = ctx->state[6];
 8013580:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013584:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 801358e:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8013592:	e9c1 2300 	strd	r2, r3, [r1]
  h = ctx->state[7];
 8013596:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801359a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80135a4:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 80135a8:	e9c1 2300 	strd	r2, r3, [r1]

  for (i = 0; i < 80; ++i) {
 80135ac:	2300      	movs	r3, #0
 80135ae:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80135b2:	e1c3      	b.n	801393c <mg_sha384_transform+0x89c>
    uint64_t t1 = h + ep164(e) + ch(e, f, g) + mg_sha256_k2[i] + m[i];
 80135b4:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80135b8:	049a      	lsls	r2, r3, #18
 80135ba:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80135be:	0b9b      	lsrs	r3, r3, #14
 80135c0:	4313      	orrs	r3, r2
 80135c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80135c6:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80135ca:	049a      	lsls	r2, r3, #18
 80135cc:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80135d0:	0b9b      	lsrs	r3, r3, #14
 80135d2:	4313      	orrs	r3, r2
 80135d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80135d8:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80135dc:	039a      	lsls	r2, r3, #14
 80135de:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80135e2:	0c9b      	lsrs	r3, r3, #18
 80135e4:	4313      	orrs	r3, r2
 80135e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80135ea:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 80135ee:	039a      	lsls	r2, r3, #14
 80135f0:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 80135f4:	0c9b      	lsrs	r3, r3, #18
 80135f6:	4313      	orrs	r3, r2
 80135f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80135fc:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8013600:	4623      	mov	r3, r4
 8013602:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8013606:	4602      	mov	r2, r0
 8013608:	4053      	eors	r3, r2
 801360a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801360e:	462b      	mov	r3, r5
 8013610:	460a      	mov	r2, r1
 8013612:	4053      	eors	r3, r2
 8013614:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8013618:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 801361c:	0a5a      	lsrs	r2, r3, #9
 801361e:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 8013622:	05db      	lsls	r3, r3, #23
 8013624:	4313      	orrs	r3, r2
 8013626:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801362a:	f8d7 3484 	ldr.w	r3, [r7, #1156]	@ 0x484
 801362e:	0a5a      	lsrs	r2, r3, #9
 8013630:	f8d7 3480 	ldr.w	r3, [r7, #1152]	@ 0x480
 8013634:	05db      	lsls	r3, r3, #23
 8013636:	4313      	orrs	r3, r2
 8013638:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801363c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8013640:	4623      	mov	r3, r4
 8013642:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8013646:	4602      	mov	r2, r0
 8013648:	4053      	eors	r3, r2
 801364a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801364e:	462b      	mov	r3, r5
 8013650:	460a      	mov	r2, r1
 8013652:	4053      	eors	r3, r2
 8013654:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8013658:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 801365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013660:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8013664:	4621      	mov	r1, r4
 8013666:	1889      	adds	r1, r1, r2
 8013668:	f8c7 10d8 	str.w	r1, [r7, #216]	@ 0xd8
 801366c:	4629      	mov	r1, r5
 801366e:	eb41 0303 	adc.w	r3, r1, r3
 8013672:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8013676:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 801367a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801367e:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8013682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013686:	ea00 0402 	and.w	r4, r0, r2
 801368a:	f8c7 40d0 	str.w	r4, [r7, #208]	@ 0xd0
 801368e:	400b      	ands	r3, r1
 8013690:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8013694:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8013698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801369c:	43d1      	mvns	r1, r2
 801369e:	f8c7 10c8 	str.w	r1, [r7, #200]	@ 0xc8
 80136a2:	43db      	mvns	r3, r3
 80136a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80136a8:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 80136ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136b0:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80136b4:	4621      	mov	r1, r4
 80136b6:	4011      	ands	r1, r2
 80136b8:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80136bc:	4629      	mov	r1, r5
 80136be:	400b      	ands	r3, r1
 80136c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80136c4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80136c8:	4623      	mov	r3, r4
 80136ca:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80136ce:	4602      	mov	r2, r0
 80136d0:	4053      	eors	r3, r2
 80136d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80136d6:	462b      	mov	r3, r5
 80136d8:	460a      	mov	r2, r1
 80136da:	4053      	eors	r3, r2
 80136dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80136e0:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80136e4:	4623      	mov	r3, r4
 80136e6:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80136ea:	4602      	mov	r2, r0
 80136ec:	189b      	adds	r3, r3, r2
 80136ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80136f2:	462b      	mov	r3, r5
 80136f4:	460a      	mov	r2, r1
 80136f6:	4153      	adcs	r3, r2
 80136f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80136fc:	4a8e      	ldr	r2, [pc, #568]	@ (8013938 <mg_sha384_transform+0x898>)
 80136fe:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013702:	00db      	lsls	r3, r3, #3
 8013704:	4413      	add	r3, r2
 8013706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801370a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 801370e:	4621      	mov	r1, r4
 8013710:	1889      	adds	r1, r1, r2
 8013712:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8013716:	4629      	mov	r1, r5
 8013718:	eb41 0303 	adc.w	r3, r1, r3
 801371c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013720:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013724:	f5a3 7236 	sub.w	r2, r3, #728	@ 0x2d8
 8013728:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801372c:	00db      	lsls	r3, r3, #3
 801372e:	4413      	add	r3, r2
 8013730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013734:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	@ 0xa8
 8013738:	4621      	mov	r1, r4
 801373a:	1889      	adds	r1, r1, r2
 801373c:	61b9      	str	r1, [r7, #24]
 801373e:	4629      	mov	r1, r5
 8013740:	eb41 0303 	adc.w	r3, r1, r3
 8013744:	61fb      	str	r3, [r7, #28]
 8013746:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801374a:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 801374e:	e9c2 3400 	strd	r3, r4, [r2]
    uint64_t t2 = ep064(a) + maj(a, b, c);
 8013752:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8013756:	011a      	lsls	r2, r3, #4
 8013758:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 801375c:	0f1b      	lsrs	r3, r3, #28
 801375e:	4313      	orrs	r3, r2
 8013760:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8013764:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8013768:	011a      	lsls	r2, r3, #4
 801376a:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 801376e:	0f1b      	lsrs	r3, r3, #28
 8013770:	4313      	orrs	r3, r2
 8013772:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013776:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 801377a:	089a      	lsrs	r2, r3, #2
 801377c:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 8013780:	079b      	lsls	r3, r3, #30
 8013782:	4313      	orrs	r3, r2
 8013784:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013788:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 801378c:	089a      	lsrs	r2, r3, #2
 801378e:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 8013792:	079b      	lsls	r3, r3, #30
 8013794:	4313      	orrs	r3, r2
 8013796:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801379a:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 801379e:	4623      	mov	r3, r4
 80137a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80137a4:	4602      	mov	r2, r0
 80137a6:	4053      	eors	r3, r2
 80137a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80137ac:	462b      	mov	r3, r5
 80137ae:	460a      	mov	r2, r1
 80137b0:	4053      	eors	r3, r2
 80137b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80137b6:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 80137ba:	09da      	lsrs	r2, r3, #7
 80137bc:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80137c0:	065b      	lsls	r3, r3, #25
 80137c2:	4313      	orrs	r3, r2
 80137c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80137c8:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 80137cc:	09da      	lsrs	r2, r3, #7
 80137ce:	f8d7 34a0 	ldr.w	r3, [r7, #1184]	@ 0x4a0
 80137d2:	065b      	lsls	r3, r3, #25
 80137d4:	4313      	orrs	r3, r2
 80137d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80137da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80137de:	4623      	mov	r3, r4
 80137e0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80137e4:	4602      	mov	r2, r0
 80137e6:	4053      	eors	r3, r2
 80137e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80137ec:	462b      	mov	r3, r5
 80137ee:	460a      	mov	r2, r1
 80137f0:	4053      	eors	r3, r2
 80137f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80137f6:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80137fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80137fe:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8013802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013806:	ea80 0402 	eor.w	r4, r0, r2
 801380a:	67bc      	str	r4, [r7, #120]	@ 0x78
 801380c:	404b      	eors	r3, r1
 801380e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013810:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8013814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013818:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 801381c:	4621      	mov	r1, r4
 801381e:	4011      	ands	r1, r2
 8013820:	6739      	str	r1, [r7, #112]	@ 0x70
 8013822:	4629      	mov	r1, r5
 8013824:	400b      	ands	r3, r1
 8013826:	677b      	str	r3, [r7, #116]	@ 0x74
 8013828:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 801382c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013830:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8013834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013838:	ea00 0402 	and.w	r4, r0, r2
 801383c:	66bc      	str	r4, [r7, #104]	@ 0x68
 801383e:	400b      	ands	r3, r1
 8013840:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013842:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8013846:	4623      	mov	r3, r4
 8013848:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801384c:	4602      	mov	r2, r0
 801384e:	4053      	eors	r3, r2
 8013850:	663b      	str	r3, [r7, #96]	@ 0x60
 8013852:	462b      	mov	r3, r5
 8013854:	460a      	mov	r2, r1
 8013856:	4053      	eors	r3, r2
 8013858:	667b      	str	r3, [r7, #100]	@ 0x64
 801385a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801385e:	4623      	mov	r3, r4
 8013860:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8013864:	4602      	mov	r2, r0
 8013866:	189b      	adds	r3, r3, r2
 8013868:	613b      	str	r3, [r7, #16]
 801386a:	462b      	mov	r3, r5
 801386c:	460a      	mov	r2, r1
 801386e:	4153      	adcs	r3, r2
 8013870:	617b      	str	r3, [r7, #20]
 8013872:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013876:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 801387a:	e9c2 3400 	strd	r3, r4, [r2]
    h = g;
 801387e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8013882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013886:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 801388a:	e9c1 2300 	strd	r2, r3, [r1]
    g = f;
 801388e:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8013892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013896:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 801389a:	e9c1 2300 	strd	r2, r3, [r1]
    f = e;
 801389e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80138a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a6:	f507 618f 	add.w	r1, r7, #1144	@ 0x478
 80138aa:	e9c1 2300 	strd	r2, r3, [r1]
    e = d + t1;
 80138ae:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80138b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80138b6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80138ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138be:	1884      	adds	r4, r0, r2
 80138c0:	60bc      	str	r4, [r7, #8]
 80138c2:	eb41 0303 	adc.w	r3, r1, r3
 80138c6:	60fb      	str	r3, [r7, #12]
 80138c8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80138cc:	f507 6290 	add.w	r2, r7, #1152	@ 0x480
 80138d0:	e9c2 3400 	strd	r3, r4, [r2]
    d = c;
 80138d4:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80138d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138dc:	f507 6191 	add.w	r1, r7, #1160	@ 0x488
 80138e0:	e9c1 2300 	strd	r2, r3, [r1]
    c = b;
 80138e4:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80138e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ec:	f507 6192 	add.w	r1, r7, #1168	@ 0x490
 80138f0:	e9c1 2300 	strd	r2, r3, [r1]
    b = a;
 80138f4:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 80138f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138fc:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 8013900:	e9c1 2300 	strd	r2, r3, [r1]
    a = t1 + t2;
 8013904:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8013908:	e9d3 0100 	ldrd	r0, r1, [r3]
 801390c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8013910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013914:	1884      	adds	r4, r0, r2
 8013916:	603c      	str	r4, [r7, #0]
 8013918:	eb41 0303 	adc.w	r3, r1, r3
 801391c:	607b      	str	r3, [r7, #4]
 801391e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8013922:	f507 6294 	add.w	r2, r7, #1184	@ 0x4a0
 8013926:	e9c2 3400 	strd	r3, r4, [r2]
  for (i = 0; i < 80; ++i) {
 801392a:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 801392e:	3301      	adds	r3, #1
 8013930:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8013934:	e002      	b.n	801393c <mg_sha384_transform+0x89c>
 8013936:	bf00      	nop
 8013938:	08027c98 	.word	0x08027c98
 801393c:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8013940:	2b4f      	cmp	r3, #79	@ 0x4f
 8013942:	f77f ae37 	ble.w	80135b4 <mg_sha384_transform+0x514>
  }

  ctx->state[0] += a;
 8013946:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801394a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013954:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8013958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801395c:	1884      	adds	r4, r0, r2
 801395e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8013960:	eb41 0303 	adc.w	r3, r1, r3
 8013964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013966:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801396a:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8013974:	e9c3 1200 	strd	r1, r2, [r3]
  ctx->state[1] += b;
 8013978:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801397c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8013986:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 801398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801398e:	1884      	adds	r4, r0, r2
 8013990:	653c      	str	r4, [r7, #80]	@ 0x50
 8013992:	eb41 0303 	adc.w	r3, r1, r3
 8013996:	657b      	str	r3, [r7, #84]	@ 0x54
 8013998:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 801399c:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80139a6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  ctx->state[2] += c;
 80139aa:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80139ae:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80139b8:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 80139bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c0:	1884      	adds	r4, r0, r2
 80139c2:	64bc      	str	r4, [r7, #72]	@ 0x48
 80139c4:	eb41 0303 	adc.w	r3, r1, r3
 80139c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80139ca:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80139ce:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80139d8:	e9c3 1204 	strd	r1, r2, [r3, #16]
  ctx->state[3] += d;
 80139dc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 80139e0:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80139ea:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 80139ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f2:	1884      	adds	r4, r0, r2
 80139f4:	643c      	str	r4, [r7, #64]	@ 0x40
 80139f6:	eb41 0303 	adc.w	r3, r1, r3
 80139fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80139fc:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013a00:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8013a0a:	e9c3 1206 	strd	r1, r2, [r3, #24]
  ctx->state[4] += e;
 8013a0e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013a12:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8013a1c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8013a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a24:	1884      	adds	r4, r0, r2
 8013a26:	63bc      	str	r4, [r7, #56]	@ 0x38
 8013a28:	eb41 0303 	adc.w	r3, r1, r3
 8013a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013a2e:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013a32:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8013a3c:	e9c3 1208 	strd	r1, r2, [r3, #32]
  ctx->state[5] += f;
 8013a40:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013a44:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8013a4e:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8013a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a56:	1884      	adds	r4, r0, r2
 8013a58:	633c      	str	r4, [r7, #48]	@ 0x30
 8013a5a:	eb41 0303 	adc.w	r3, r1, r3
 8013a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013a60:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013a64:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8013a6e:	e9c3 120a 	strd	r1, r2, [r3, #40]	@ 0x28
  ctx->state[6] += g;
 8013a72:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013a76:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8013a80:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8013a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a88:	1884      	adds	r4, r0, r2
 8013a8a:	62bc      	str	r4, [r7, #40]	@ 0x28
 8013a8c:	eb41 0303 	adc.w	r3, r1, r3
 8013a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013a92:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013a96:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8013aa0:	e9c3 120c 	strd	r1, r2, [r3, #48]	@ 0x30
  ctx->state[7] += h;
 8013aa4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013aa8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8013ab2:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8013ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aba:	1884      	adds	r4, r0, r2
 8013abc:	623c      	str	r4, [r7, #32]
 8013abe:	eb41 0303 	adc.w	r3, r1, r3
 8013ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8013ac4:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8013ac8:	f5a3 7337 	sub.w	r3, r3, #732	@ 0x2dc
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013ad2:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
}
 8013ad6:	bf00      	nop
 8013ad8:	f507 6795 	add.w	r7, r7, #1192	@ 0x4a8
 8013adc:	46bd      	mov	sp, r7
 8013ade:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013ae2:	4770      	bx	lr
 8013ae4:	0000      	movs	r0, r0
	...

08013ae8 <mg_sha384_init>:

void mg_sha384_init(mg_sha384_ctx *ctx) {
 8013ae8:	b480      	push	{r7}
 8013aea:	b083      	sub	sp, #12
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
  ctx->datalen = 0;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2200      	movs	r2, #0
 8013af4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  ctx->bitlen[0] = 0;
 8013af8:	6879      	ldr	r1, [r7, #4]
 8013afa:	f04f 0200 	mov.w	r2, #0
 8013afe:	f04f 0300 	mov.w	r3, #0
 8013b02:	e9c1 2330 	strd	r2, r3, [r1, #192]	@ 0xc0
  ctx->bitlen[1] = 0;
 8013b06:	6879      	ldr	r1, [r7, #4]
 8013b08:	f04f 0200 	mov.w	r2, #0
 8013b0c:	f04f 0300 	mov.w	r3, #0
 8013b10:	e9c1 2332 	strd	r2, r3, [r1, #200]	@ 0xc8
  ctx->state[0] = 0xcbbb9d5dc1059ed8;
 8013b14:	6879      	ldr	r1, [r7, #4]
 8013b16:	a31a      	add	r3, pc, #104	@ (adr r3, 8013b80 <mg_sha384_init+0x98>)
 8013b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1c:	e9c1 2300 	strd	r2, r3, [r1]
  ctx->state[1] = 0x629a292a367cd507;
 8013b20:	6879      	ldr	r1, [r7, #4]
 8013b22:	a319      	add	r3, pc, #100	@ (adr r3, 8013b88 <mg_sha384_init+0xa0>)
 8013b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b28:	e9c1 2302 	strd	r2, r3, [r1, #8]
  ctx->state[2] = 0x9159015a3070dd17;
 8013b2c:	6879      	ldr	r1, [r7, #4]
 8013b2e:	a318      	add	r3, pc, #96	@ (adr r3, 8013b90 <mg_sha384_init+0xa8>)
 8013b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b34:	e9c1 2304 	strd	r2, r3, [r1, #16]
  ctx->state[3] = 0x152fecd8f70e5939;
 8013b38:	6879      	ldr	r1, [r7, #4]
 8013b3a:	a317      	add	r3, pc, #92	@ (adr r3, 8013b98 <mg_sha384_init+0xb0>)
 8013b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b40:	e9c1 2306 	strd	r2, r3, [r1, #24]
  ctx->state[4] = 0x67332667ffc00b31;
 8013b44:	6879      	ldr	r1, [r7, #4]
 8013b46:	a316      	add	r3, pc, #88	@ (adr r3, 8013ba0 <mg_sha384_init+0xb8>)
 8013b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b4c:	e9c1 2308 	strd	r2, r3, [r1, #32]
  ctx->state[5] = 0x8eb44a8768581511;
 8013b50:	6879      	ldr	r1, [r7, #4]
 8013b52:	a315      	add	r3, pc, #84	@ (adr r3, 8013ba8 <mg_sha384_init+0xc0>)
 8013b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b58:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
  ctx->state[6] = 0xdb0c2e0d64f98fa7;
 8013b5c:	6879      	ldr	r1, [r7, #4]
 8013b5e:	a314      	add	r3, pc, #80	@ (adr r3, 8013bb0 <mg_sha384_init+0xc8>)
 8013b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b64:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
  ctx->state[7] = 0x47b5481dbefa4fa4;
 8013b68:	6879      	ldr	r1, [r7, #4]
 8013b6a:	a313      	add	r3, pc, #76	@ (adr r3, 8013bb8 <mg_sha384_init+0xd0>)
 8013b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b70:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 8013b74:	bf00      	nop
 8013b76:	370c      	adds	r7, #12
 8013b78:	46bd      	mov	sp, r7
 8013b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7e:	4770      	bx	lr
 8013b80:	c1059ed8 	.word	0xc1059ed8
 8013b84:	cbbb9d5d 	.word	0xcbbb9d5d
 8013b88:	367cd507 	.word	0x367cd507
 8013b8c:	629a292a 	.word	0x629a292a
 8013b90:	3070dd17 	.word	0x3070dd17
 8013b94:	9159015a 	.word	0x9159015a
 8013b98:	f70e5939 	.word	0xf70e5939
 8013b9c:	152fecd8 	.word	0x152fecd8
 8013ba0:	ffc00b31 	.word	0xffc00b31
 8013ba4:	67332667 	.word	0x67332667
 8013ba8:	68581511 	.word	0x68581511
 8013bac:	8eb44a87 	.word	0x8eb44a87
 8013bb0:	64f98fa7 	.word	0x64f98fa7
 8013bb4:	db0c2e0d 	.word	0xdb0c2e0d
 8013bb8:	befa4fa4 	.word	0xbefa4fa4
 8013bbc:	47b5481d 	.word	0x47b5481d

08013bc0 <mg_sha384_update>:

void mg_sha384_update(mg_sha384_ctx *ctx, const uint8_t *data, size_t len) {
 8013bc0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013bc4:	b086      	sub	sp, #24
 8013bc6:	af00      	add	r7, sp, #0
 8013bc8:	60f8      	str	r0, [r7, #12]
 8013bca:	60b9      	str	r1, [r7, #8]
 8013bcc:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; ++i) {
 8013bce:	2300      	movs	r3, #0
 8013bd0:	617b      	str	r3, [r7, #20]
 8013bd2:	e040      	b.n	8013c56 <mg_sha384_update+0x96>
    ctx->buffer[ctx->datalen] = data[i];
 8013bd4:	68ba      	ldr	r2, [r7, #8]
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	441a      	add	r2, r3
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013be0:	7811      	ldrb	r1, [r2, #0]
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	4413      	add	r3, r2
 8013be6:	460a      	mov	r2, r1
 8013be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    ctx->datalen++;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013bf2:	1c5a      	adds	r2, r3, #1
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
    if (ctx->datalen == 128) {
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013c00:	2b80      	cmp	r3, #128	@ 0x80
 8013c02:	d125      	bne.n	8013c50 <mg_sha384_update+0x90>
      mg_sha384_transform(ctx, ctx->buffer);
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	3340      	adds	r3, #64	@ 0x40
 8013c08:	4619      	mov	r1, r3
 8013c0a:	68f8      	ldr	r0, [r7, #12]
 8013c0c:	f7ff fa48 	bl	80130a0 <mg_sha384_transform>
      ctx->bitlen[1] += 1024;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013c16:	f512 6480 	adds.w	r4, r2, #1024	@ 0x400
 8013c1a:	f143 0500 	adc.w	r5, r3, #0
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	e9c3 4532 	strd	r4, r5, [r3, #200]	@ 0xc8
      if (ctx->bitlen[1] < 1024) ctx->bitlen[0]++;
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013c2a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8013c2e:	f173 0300 	sbcs.w	r3, r3, #0
 8013c32:	d209      	bcs.n	8013c48 <mg_sha384_update+0x88>
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8013c3a:	f112 0801 	adds.w	r8, r2, #1
 8013c3e:	f143 0900 	adc.w	r9, r3, #0
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	e9c3 8930 	strd	r8, r9, [r3, #192]	@ 0xc0
      ctx->datalen = 0;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
  for (i = 0; i < len; ++i) {
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	3301      	adds	r3, #1
 8013c54:	617b      	str	r3, [r7, #20]
 8013c56:	697a      	ldr	r2, [r7, #20]
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	429a      	cmp	r2, r3
 8013c5c:	d3ba      	bcc.n	8013bd4 <mg_sha384_update+0x14>
    }
  }
}
 8013c5e:	bf00      	nop
 8013c60:	bf00      	nop
 8013c62:	3718      	adds	r7, #24
 8013c64:	46bd      	mov	sp, r7
 8013c66:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08013c6a <mg_sha384_final>:

void mg_sha384_final(uint8_t hash[48], mg_sha384_ctx *ctx) {
 8013c6a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013c6e:	b086      	sub	sp, #24
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	60f8      	str	r0, [r7, #12]
 8013c74:	60b9      	str	r1, [r7, #8]
  size_t i = ctx->datalen;
 8013c76:	68bb      	ldr	r3, [r7, #8]
 8013c78:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013c7c:	617b      	str	r3, [r7, #20]

  if (ctx->datalen < 112) {
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8013c84:	2b6f      	cmp	r3, #111	@ 0x6f
 8013c86:	d814      	bhi.n	8013cb2 <mg_sha384_final+0x48>
    ctx->buffer[i++] = 0x80;
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	1c5a      	adds	r2, r3, #1
 8013c8c:	617a      	str	r2, [r7, #20]
 8013c8e:	68ba      	ldr	r2, [r7, #8]
 8013c90:	4413      	add	r3, r2
 8013c92:	2280      	movs	r2, #128	@ 0x80
 8013c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 112) ctx->buffer[i++] = 0x00;
 8013c98:	e007      	b.n	8013caa <mg_sha384_final+0x40>
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	1c5a      	adds	r2, r3, #1
 8013c9e:	617a      	str	r2, [r7, #20]
 8013ca0:	68ba      	ldr	r2, [r7, #8]
 8013ca2:	4413      	add	r3, r2
 8013ca4:	2200      	movs	r2, #0
 8013ca6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013caa:	697b      	ldr	r3, [r7, #20]
 8013cac:	2b6f      	cmp	r3, #111	@ 0x6f
 8013cae:	d9f4      	bls.n	8013c9a <mg_sha384_final+0x30>
 8013cb0:	e020      	b.n	8013cf4 <mg_sha384_final+0x8a>
  } else {
    ctx->buffer[i++] = 0x80;
 8013cb2:	697b      	ldr	r3, [r7, #20]
 8013cb4:	1c5a      	adds	r2, r3, #1
 8013cb6:	617a      	str	r2, [r7, #20]
 8013cb8:	68ba      	ldr	r2, [r7, #8]
 8013cba:	4413      	add	r3, r2
 8013cbc:	2280      	movs	r2, #128	@ 0x80
 8013cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    while (i < 128) ctx->buffer[i++] = 0x00;
 8013cc2:	e007      	b.n	8013cd4 <mg_sha384_final+0x6a>
 8013cc4:	697b      	ldr	r3, [r7, #20]
 8013cc6:	1c5a      	adds	r2, r3, #1
 8013cc8:	617a      	str	r2, [r7, #20]
 8013cca:	68ba      	ldr	r2, [r7, #8]
 8013ccc:	4413      	add	r3, r2
 8013cce:	2200      	movs	r2, #0
 8013cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8013cd4:	697b      	ldr	r3, [r7, #20]
 8013cd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8013cd8:	d9f4      	bls.n	8013cc4 <mg_sha384_final+0x5a>
    mg_sha384_transform(ctx, ctx->buffer);
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	3340      	adds	r3, #64	@ 0x40
 8013cde:	4619      	mov	r1, r3
 8013ce0:	68b8      	ldr	r0, [r7, #8]
 8013ce2:	f7ff f9dd 	bl	80130a0 <mg_sha384_transform>
    memset(ctx->buffer, 0, 112);
 8013ce6:	68bb      	ldr	r3, [r7, #8]
 8013ce8:	3340      	adds	r3, #64	@ 0x40
 8013cea:	2270      	movs	r2, #112	@ 0x70
 8013cec:	2100      	movs	r1, #0
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f00f fd55 	bl	802379e <memset>
  }

  ctx->bitlen[1] += ctx->datalen * 8;
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013cfa:	68b9      	ldr	r1, [r7, #8]
 8013cfc:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 8013d00:	00c9      	lsls	r1, r1, #3
 8013d02:	2000      	movs	r0, #0
 8013d04:	4688      	mov	r8, r1
 8013d06:	4681      	mov	r9, r0
 8013d08:	eb12 0108 	adds.w	r1, r2, r8
 8013d0c:	6039      	str	r1, [r7, #0]
 8013d0e:	eb43 0309 	adc.w	r3, r3, r9
 8013d12:	607b      	str	r3, [r7, #4]
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	e9d7 1200 	ldrd	r1, r2, [r7]
 8013d1a:	e9c3 1232 	strd	r1, r2, [r3, #200]	@ 0xc8
  if (ctx->bitlen[1] < ctx->datalen * 8) ctx->bitlen[0]++;
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013d24:	68b9      	ldr	r1, [r7, #8]
 8013d26:	f8d1 10d0 	ldr.w	r1, [r1, #208]	@ 0xd0
 8013d2a:	00c9      	lsls	r1, r1, #3
 8013d2c:	2000      	movs	r0, #0
 8013d2e:	460c      	mov	r4, r1
 8013d30:	4605      	mov	r5, r0
 8013d32:	42a2      	cmp	r2, r4
 8013d34:	41ab      	sbcs	r3, r5
 8013d36:	d209      	bcs.n	8013d4c <mg_sha384_final+0xe2>
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8013d3e:	f112 0a01 	adds.w	sl, r2, #1
 8013d42:	f143 0b00 	adc.w	fp, r3, #0
 8013d46:	68bb      	ldr	r3, [r7, #8]
 8013d48:	e9c3 ab30 	strd	sl, fp, [r3, #192]	@ 0xc0
  ctx->buffer[127] = (uint8_t) (ctx->bitlen[1]);
 8013d4c:	68bb      	ldr	r3, [r7, #8]
 8013d4e:	e9d3 2332 	ldrd	r2, r3, [r3, #200]	@ 0xc8
 8013d52:	b2d2      	uxtb	r2, r2
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	f883 20bf 	strb.w	r2, [r3, #191]	@ 0xbf
  ctx->buffer[126] = (uint8_t) (ctx->bitlen[1] >> 8);
 8013d5a:	68bb      	ldr	r3, [r7, #8]
 8013d5c:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013d60:	f04f 0200 	mov.w	r2, #0
 8013d64:	f04f 0300 	mov.w	r3, #0
 8013d68:	0a02      	lsrs	r2, r0, #8
 8013d6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013d6e:	0a0b      	lsrs	r3, r1, #8
 8013d70:	b2d2      	uxtb	r2, r2
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	f883 20be 	strb.w	r2, [r3, #190]	@ 0xbe
  ctx->buffer[125] = (uint8_t) (ctx->bitlen[1] >> 16);
 8013d78:	68bb      	ldr	r3, [r7, #8]
 8013d7a:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013d7e:	f04f 0200 	mov.w	r2, #0
 8013d82:	f04f 0300 	mov.w	r3, #0
 8013d86:	0c02      	lsrs	r2, r0, #16
 8013d88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013d8c:	0c0b      	lsrs	r3, r1, #16
 8013d8e:	b2d2      	uxtb	r2, r2
 8013d90:	68bb      	ldr	r3, [r7, #8]
 8013d92:	f883 20bd 	strb.w	r2, [r3, #189]	@ 0xbd
  ctx->buffer[124] = (uint8_t) (ctx->bitlen[1] >> 24);
 8013d96:	68bb      	ldr	r3, [r7, #8]
 8013d98:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013d9c:	f04f 0200 	mov.w	r2, #0
 8013da0:	f04f 0300 	mov.w	r3, #0
 8013da4:	0e02      	lsrs	r2, r0, #24
 8013da6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8013daa:	0e0b      	lsrs	r3, r1, #24
 8013dac:	b2d2      	uxtb	r2, r2
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	f883 20bc 	strb.w	r2, [r3, #188]	@ 0xbc
  ctx->buffer[123] = (uint8_t) (ctx->bitlen[1] >> 32);
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013dba:	f04f 0200 	mov.w	r2, #0
 8013dbe:	f04f 0300 	mov.w	r3, #0
 8013dc2:	000a      	movs	r2, r1
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	b2d2      	uxtb	r2, r2
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
  ctx->buffer[122] = (uint8_t) (ctx->bitlen[1] >> 40);
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013dd4:	f04f 0200 	mov.w	r2, #0
 8013dd8:	f04f 0300 	mov.w	r3, #0
 8013ddc:	0a0a      	lsrs	r2, r1, #8
 8013dde:	2300      	movs	r3, #0
 8013de0:	b2d2      	uxtb	r2, r2
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	f883 20ba 	strb.w	r2, [r3, #186]	@ 0xba
  ctx->buffer[121] = (uint8_t) (ctx->bitlen[1] >> 48);
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013dee:	f04f 0200 	mov.w	r2, #0
 8013df2:	f04f 0300 	mov.w	r3, #0
 8013df6:	0c0a      	lsrs	r2, r1, #16
 8013df8:	2300      	movs	r3, #0
 8013dfa:	b2d2      	uxtb	r2, r2
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9
  ctx->buffer[120] = (uint8_t) (ctx->bitlen[1] >> 56);
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	@ 0xc8
 8013e08:	f04f 0200 	mov.w	r2, #0
 8013e0c:	f04f 0300 	mov.w	r3, #0
 8013e10:	0e0a      	lsrs	r2, r1, #24
 8013e12:	2300      	movs	r3, #0
 8013e14:	b2d2      	uxtb	r2, r2
 8013e16:	68bb      	ldr	r3, [r7, #8]
 8013e18:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
  ctx->buffer[119] = (uint8_t) (ctx->bitlen[0]);
 8013e1c:	68bb      	ldr	r3, [r7, #8]
 8013e1e:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8013e22:	b2d2      	uxtb	r2, r2
 8013e24:	68bb      	ldr	r3, [r7, #8]
 8013e26:	f883 20b7 	strb.w	r2, [r3, #183]	@ 0xb7
  ctx->buffer[118] = (uint8_t) (ctx->bitlen[0] >> 8);
 8013e2a:	68bb      	ldr	r3, [r7, #8]
 8013e2c:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013e30:	f04f 0200 	mov.w	r2, #0
 8013e34:	f04f 0300 	mov.w	r3, #0
 8013e38:	0a02      	lsrs	r2, r0, #8
 8013e3a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8013e3e:	0a0b      	lsrs	r3, r1, #8
 8013e40:	b2d2      	uxtb	r2, r2
 8013e42:	68bb      	ldr	r3, [r7, #8]
 8013e44:	f883 20b6 	strb.w	r2, [r3, #182]	@ 0xb6
  ctx->buffer[117] = (uint8_t) (ctx->bitlen[0] >> 16);
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013e4e:	f04f 0200 	mov.w	r2, #0
 8013e52:	f04f 0300 	mov.w	r3, #0
 8013e56:	0c02      	lsrs	r2, r0, #16
 8013e58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013e5c:	0c0b      	lsrs	r3, r1, #16
 8013e5e:	b2d2      	uxtb	r2, r2
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	f883 20b5 	strb.w	r2, [r3, #181]	@ 0xb5
  ctx->buffer[116] = (uint8_t) (ctx->bitlen[0] >> 24);
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013e6c:	f04f 0200 	mov.w	r2, #0
 8013e70:	f04f 0300 	mov.w	r3, #0
 8013e74:	0e02      	lsrs	r2, r0, #24
 8013e76:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8013e7a:	0e0b      	lsrs	r3, r1, #24
 8013e7c:	b2d2      	uxtb	r2, r2
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4
  ctx->buffer[115] = (uint8_t) (ctx->bitlen[0] >> 32);
 8013e84:	68bb      	ldr	r3, [r7, #8]
 8013e86:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013e8a:	f04f 0200 	mov.w	r2, #0
 8013e8e:	f04f 0300 	mov.w	r3, #0
 8013e92:	000a      	movs	r2, r1
 8013e94:	2300      	movs	r3, #0
 8013e96:	b2d2      	uxtb	r2, r2
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	f883 20b3 	strb.w	r2, [r3, #179]	@ 0xb3
  ctx->buffer[114] = (uint8_t) (ctx->bitlen[0] >> 40);
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013ea4:	f04f 0200 	mov.w	r2, #0
 8013ea8:	f04f 0300 	mov.w	r3, #0
 8013eac:	0a0a      	lsrs	r2, r1, #8
 8013eae:	2300      	movs	r3, #0
 8013eb0:	b2d2      	uxtb	r2, r2
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
  ctx->buffer[113] = (uint8_t) (ctx->bitlen[0] >> 48);
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013ebe:	f04f 0200 	mov.w	r2, #0
 8013ec2:	f04f 0300 	mov.w	r3, #0
 8013ec6:	0c0a      	lsrs	r2, r1, #16
 8013ec8:	2300      	movs	r3, #0
 8013eca:	b2d2      	uxtb	r2, r2
 8013ecc:	68bb      	ldr	r3, [r7, #8]
 8013ece:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
  ctx->buffer[112] = (uint8_t) (ctx->bitlen[0] >> 56);
 8013ed2:	68bb      	ldr	r3, [r7, #8]
 8013ed4:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	@ 0xc0
 8013ed8:	f04f 0200 	mov.w	r2, #0
 8013edc:	f04f 0300 	mov.w	r3, #0
 8013ee0:	0e0a      	lsrs	r2, r1, #24
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	b2d2      	uxtb	r2, r2
 8013ee6:	68bb      	ldr	r3, [r7, #8]
 8013ee8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
  mg_sha384_transform(ctx, ctx->buffer);
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	3340      	adds	r3, #64	@ 0x40
 8013ef0:	4619      	mov	r1, r3
 8013ef2:	68b8      	ldr	r0, [r7, #8]
 8013ef4:	f7ff f8d4 	bl	80130a0 <mg_sha384_transform>

  for (i = 0; i < 6; ++i) {
 8013ef8:	2300      	movs	r3, #0
 8013efa:	617b      	str	r3, [r7, #20]
 8013efc:	e099      	b.n	8014032 <mg_sha384_final+0x3c8>
    hash[i * 8] = (uint8_t) ((ctx->state[i] >> 56) & 0xff);
 8013efe:	68ba      	ldr	r2, [r7, #8]
 8013f00:	697b      	ldr	r3, [r7, #20]
 8013f02:	00db      	lsls	r3, r3, #3
 8013f04:	4413      	add	r3, r2
 8013f06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f0a:	f04f 0200 	mov.w	r2, #0
 8013f0e:	f04f 0300 	mov.w	r3, #0
 8013f12:	0e0a      	lsrs	r2, r1, #24
 8013f14:	2300      	movs	r3, #0
 8013f16:	6979      	ldr	r1, [r7, #20]
 8013f18:	00c9      	lsls	r1, r1, #3
 8013f1a:	68f8      	ldr	r0, [r7, #12]
 8013f1c:	4401      	add	r1, r0
 8013f1e:	b2d3      	uxtb	r3, r2
 8013f20:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 1] = (uint8_t) ((ctx->state[i] >> 48) & 0xff);
 8013f22:	68ba      	ldr	r2, [r7, #8]
 8013f24:	697b      	ldr	r3, [r7, #20]
 8013f26:	00db      	lsls	r3, r3, #3
 8013f28:	4413      	add	r3, r2
 8013f2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f2e:	f04f 0200 	mov.w	r2, #0
 8013f32:	f04f 0300 	mov.w	r3, #0
 8013f36:	0c0a      	lsrs	r2, r1, #16
 8013f38:	2300      	movs	r3, #0
 8013f3a:	6979      	ldr	r1, [r7, #20]
 8013f3c:	00c9      	lsls	r1, r1, #3
 8013f3e:	3101      	adds	r1, #1
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	4401      	add	r1, r0
 8013f44:	b2d3      	uxtb	r3, r2
 8013f46:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 2] = (uint8_t) ((ctx->state[i] >> 40) & 0xff);
 8013f48:	68ba      	ldr	r2, [r7, #8]
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	00db      	lsls	r3, r3, #3
 8013f4e:	4413      	add	r3, r2
 8013f50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f54:	f04f 0200 	mov.w	r2, #0
 8013f58:	f04f 0300 	mov.w	r3, #0
 8013f5c:	0a0a      	lsrs	r2, r1, #8
 8013f5e:	2300      	movs	r3, #0
 8013f60:	6979      	ldr	r1, [r7, #20]
 8013f62:	00c9      	lsls	r1, r1, #3
 8013f64:	3102      	adds	r1, #2
 8013f66:	68f8      	ldr	r0, [r7, #12]
 8013f68:	4401      	add	r1, r0
 8013f6a:	b2d3      	uxtb	r3, r2
 8013f6c:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 3] = (uint8_t) ((ctx->state[i] >> 32) & 0xff);
 8013f6e:	68ba      	ldr	r2, [r7, #8]
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	00db      	lsls	r3, r3, #3
 8013f74:	4413      	add	r3, r2
 8013f76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013f7a:	f04f 0200 	mov.w	r2, #0
 8013f7e:	f04f 0300 	mov.w	r3, #0
 8013f82:	000a      	movs	r2, r1
 8013f84:	2300      	movs	r3, #0
 8013f86:	6979      	ldr	r1, [r7, #20]
 8013f88:	00c9      	lsls	r1, r1, #3
 8013f8a:	3103      	adds	r1, #3
 8013f8c:	68f8      	ldr	r0, [r7, #12]
 8013f8e:	4401      	add	r1, r0
 8013f90:	b2d3      	uxtb	r3, r2
 8013f92:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 4] = (uint8_t) ((ctx->state[i] >> 24) & 0xff);
 8013f94:	68ba      	ldr	r2, [r7, #8]
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	00db      	lsls	r3, r3, #3
 8013f9a:	4413      	add	r3, r2
 8013f9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013fa0:	f04f 0200 	mov.w	r2, #0
 8013fa4:	f04f 0300 	mov.w	r3, #0
 8013fa8:	0e02      	lsrs	r2, r0, #24
 8013faa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8013fae:	0e0b      	lsrs	r3, r1, #24
 8013fb0:	6979      	ldr	r1, [r7, #20]
 8013fb2:	00c9      	lsls	r1, r1, #3
 8013fb4:	3104      	adds	r1, #4
 8013fb6:	68f8      	ldr	r0, [r7, #12]
 8013fb8:	4401      	add	r1, r0
 8013fba:	b2d3      	uxtb	r3, r2
 8013fbc:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 5] = (uint8_t) ((ctx->state[i] >> 16) & 0xff);
 8013fbe:	68ba      	ldr	r2, [r7, #8]
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	00db      	lsls	r3, r3, #3
 8013fc4:	4413      	add	r3, r2
 8013fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013fca:	f04f 0200 	mov.w	r2, #0
 8013fce:	f04f 0300 	mov.w	r3, #0
 8013fd2:	0c02      	lsrs	r2, r0, #16
 8013fd4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8013fd8:	0c0b      	lsrs	r3, r1, #16
 8013fda:	6979      	ldr	r1, [r7, #20]
 8013fdc:	00c9      	lsls	r1, r1, #3
 8013fde:	3105      	adds	r1, #5
 8013fe0:	68f8      	ldr	r0, [r7, #12]
 8013fe2:	4401      	add	r1, r0
 8013fe4:	b2d3      	uxtb	r3, r2
 8013fe6:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 6] = (uint8_t) ((ctx->state[i] >> 8) & 0xff);
 8013fe8:	68ba      	ldr	r2, [r7, #8]
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	00db      	lsls	r3, r3, #3
 8013fee:	4413      	add	r3, r2
 8013ff0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8013ff4:	f04f 0200 	mov.w	r2, #0
 8013ff8:	f04f 0300 	mov.w	r3, #0
 8013ffc:	0a02      	lsrs	r2, r0, #8
 8013ffe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8014002:	0a0b      	lsrs	r3, r1, #8
 8014004:	6979      	ldr	r1, [r7, #20]
 8014006:	00c9      	lsls	r1, r1, #3
 8014008:	3106      	adds	r1, #6
 801400a:	68f8      	ldr	r0, [r7, #12]
 801400c:	4401      	add	r1, r0
 801400e:	b2d3      	uxtb	r3, r2
 8014010:	700b      	strb	r3, [r1, #0]
    hash[i * 8 + 7] = (uint8_t) (ctx->state[i] & 0xff);
 8014012:	68ba      	ldr	r2, [r7, #8]
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	00db      	lsls	r3, r3, #3
 8014018:	4413      	add	r3, r2
 801401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801401e:	6979      	ldr	r1, [r7, #20]
 8014020:	00c9      	lsls	r1, r1, #3
 8014022:	3107      	adds	r1, #7
 8014024:	68f8      	ldr	r0, [r7, #12]
 8014026:	4401      	add	r1, r0
 8014028:	b2d3      	uxtb	r3, r2
 801402a:	700b      	strb	r3, [r1, #0]
  for (i = 0; i < 6; ++i) {
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	3301      	adds	r3, #1
 8014030:	617b      	str	r3, [r7, #20]
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	2b05      	cmp	r3, #5
 8014036:	f67f af62 	bls.w	8013efe <mg_sha384_final+0x294>
  }
}
 801403a:	bf00      	nop
 801403c:	bf00      	nop
 801403e:	3718      	adds	r7, #24
 8014040:	46bd      	mov	sp, r7
 8014042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08014046 <mg_sha384>:

void mg_sha384(uint8_t dst[48], uint8_t *data, size_t datasz) {
 8014046:	b580      	push	{r7, lr}
 8014048:	b0ba      	sub	sp, #232	@ 0xe8
 801404a:	af00      	add	r7, sp, #0
 801404c:	60f8      	str	r0, [r7, #12]
 801404e:	60b9      	str	r1, [r7, #8]
 8014050:	607a      	str	r2, [r7, #4]
  mg_sha384_ctx ctx;
  mg_sha384_init(&ctx);
 8014052:	f107 0310 	add.w	r3, r7, #16
 8014056:	4618      	mov	r0, r3
 8014058:	f7ff fd46 	bl	8013ae8 <mg_sha384_init>
  mg_sha384_update(&ctx, data, datasz);
 801405c:	f107 0310 	add.w	r3, r7, #16
 8014060:	687a      	ldr	r2, [r7, #4]
 8014062:	68b9      	ldr	r1, [r7, #8]
 8014064:	4618      	mov	r0, r3
 8014066:	f7ff fdab 	bl	8013bc0 <mg_sha384_update>
  mg_sha384_final(dst, &ctx);
 801406a:	f107 0310 	add.w	r3, r7, #16
 801406e:	4619      	mov	r1, r3
 8014070:	68f8      	ldr	r0, [r7, #12]
 8014072:	f7ff fdfa 	bl	8013c6a <mg_sha384_final>
}
 8014076:	bf00      	nop
 8014078:	37e8      	adds	r7, #232	@ 0xe8
 801407a:	46bd      	mov	sp, r7
 801407c:	bd80      	pop	{r7, pc}
	...

08014080 <mg_now>:
#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static uint64_t s_boot_timestamp = 0;  // Updated by SNTP

uint64_t mg_now(void) {
 8014080:	b5b0      	push	{r4, r5, r7, lr}
 8014082:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 8014084:	f7ec fb70 	bl	8000768 <mg_millis>
 8014088:	4b05      	ldr	r3, [pc, #20]	@ (80140a0 <mg_now+0x20>)
 801408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801408e:	1884      	adds	r4, r0, r2
 8014090:	eb41 0503 	adc.w	r5, r1, r3
 8014094:	4622      	mov	r2, r4
 8014096:	462b      	mov	r3, r5
}
 8014098:	4610      	mov	r0, r2
 801409a:	4619      	mov	r1, r3
 801409c:	bdb0      	pop	{r4, r5, r7, pc}
 801409e:	bf00      	nop
 80140a0:	24001098 	.word	0x24001098

080140a4 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b084      	sub	sp, #16
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	60f8      	str	r0, [r7, #12]
 80140ac:	60b9      	str	r1, [r7, #8]
 80140ae:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 80140b0:	4b05      	ldr	r3, [pc, #20]	@ (80140c8 <mg_http_serve_ssi+0x24>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	f240 11f5 	movw	r1, #501	@ 0x1f5
 80140b8:	68f8      	ldr	r0, [r7, #12]
 80140ba:	f7f5 fc2b 	bl	8009914 <mg_http_reply>
  (void) root, (void) fullpath;
}
 80140be:	bf00      	nop
 80140c0:	3710      	adds	r7, #16
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	08025e24 	.word	0x08025e24

080140cc <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 80140cc:	b580      	push	{r7, lr}
 80140ce:	b084      	sub	sp, #16
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	6039      	str	r1, [r7, #0]
  struct mg_str str = {(char *) s, s == NULL ? 0 : strlen(s)};
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	60bb      	str	r3, [r7, #8]
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d004      	beq.n	80140ea <mg_str_s+0x1e>
 80140e0:	6838      	ldr	r0, [r7, #0]
 80140e2:	f7ec f975 	bl	80003d0 <strlen>
 80140e6:	4603      	mov	r3, r0
 80140e8:	e000      	b.n	80140ec <mg_str_s+0x20>
 80140ea:	2300      	movs	r3, #0
 80140ec:	60fb      	str	r3, [r7, #12]
  return str;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	461a      	mov	r2, r3
 80140f2:	f107 0308 	add.w	r3, r7, #8
 80140f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80140fa:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	3710      	adds	r7, #16
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}

08014106 <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 8014106:	b480      	push	{r7}
 8014108:	b087      	sub	sp, #28
 801410a:	af00      	add	r7, sp, #0
 801410c:	60f8      	str	r0, [r7, #12]
 801410e:	60b9      	str	r1, [r7, #8]
 8014110:	607a      	str	r2, [r7, #4]
  struct mg_str str = {(char *) s, n};
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	613b      	str	r3, [r7, #16]
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	617b      	str	r3, [r7, #20]
  return str;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	461a      	mov	r2, r3
 801411e:	f107 0310 	add.w	r3, r7, #16
 8014122:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014126:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801412a:	68f8      	ldr	r0, [r7, #12]
 801412c:	371c      	adds	r7, #28
 801412e:	46bd      	mov	sp, r7
 8014130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014134:	4770      	bx	lr

08014136 <mg_tolc>:

static int mg_tolc(char c) {
 8014136:	b480      	push	{r7}
 8014138:	b083      	sub	sp, #12
 801413a:	af00      	add	r7, sp, #0
 801413c:	4603      	mov	r3, r0
 801413e:	71fb      	strb	r3, [r7, #7]
  return (c >= 'A' && c <= 'Z') ? c + 'a' - 'A' : c;
 8014140:	79fb      	ldrb	r3, [r7, #7]
 8014142:	2b40      	cmp	r3, #64	@ 0x40
 8014144:	d905      	bls.n	8014152 <mg_tolc+0x1c>
 8014146:	79fb      	ldrb	r3, [r7, #7]
 8014148:	2b5a      	cmp	r3, #90	@ 0x5a
 801414a:	d802      	bhi.n	8014152 <mg_tolc+0x1c>
 801414c:	79fb      	ldrb	r3, [r7, #7]
 801414e:	3320      	adds	r3, #32
 8014150:	e000      	b.n	8014154 <mg_tolc+0x1e>
 8014152:	79fb      	ldrb	r3, [r7, #7]
}
 8014154:	4618      	mov	r0, r3
 8014156:	370c      	adds	r7, #12
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr

08014160 <mg_strdup>:
    diff = c - d;
  } while (diff == 0 && s1[-1] != '\0');
  return diff;
}

struct mg_str mg_strdup(const struct mg_str s) {
 8014160:	b580      	push	{r7, lr}
 8014162:	b088      	sub	sp, #32
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	1d3b      	adds	r3, r7, #4
 801416a:	e883 0006 	stmia.w	r3, {r1, r2}
  struct mg_str r = {NULL, 0};
 801416e:	2300      	movs	r3, #0
 8014170:	617b      	str	r3, [r7, #20]
 8014172:	2300      	movs	r3, #0
 8014174:	61bb      	str	r3, [r7, #24]
  if (s.len > 0 && s.buf != NULL) {
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d01c      	beq.n	80141b6 <mg_strdup+0x56>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d019      	beq.n	80141b6 <mg_strdup+0x56>
    char *sc = (char *) calloc(1, s.len + 1);
 8014182:	68bb      	ldr	r3, [r7, #8]
 8014184:	3301      	adds	r3, #1
 8014186:	4619      	mov	r1, r3
 8014188:	2001      	movs	r0, #1
 801418a:	f00f f833 	bl	80231f4 <calloc>
 801418e:	4603      	mov	r3, r0
 8014190:	61fb      	str	r3, [r7, #28]
    if (sc != NULL) {
 8014192:	69fb      	ldr	r3, [r7, #28]
 8014194:	2b00      	cmp	r3, #0
 8014196:	d00e      	beq.n	80141b6 <mg_strdup+0x56>
      memcpy(sc, s.buf, s.len);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	68ba      	ldr	r2, [r7, #8]
 801419c:	4619      	mov	r1, r3
 801419e:	69f8      	ldr	r0, [r7, #28]
 80141a0:	f00f fc33 	bl	8023a0a <memcpy>
      sc[s.len] = '\0';
 80141a4:	68bb      	ldr	r3, [r7, #8]
 80141a6:	69fa      	ldr	r2, [r7, #28]
 80141a8:	4413      	add	r3, r2
 80141aa:	2200      	movs	r2, #0
 80141ac:	701a      	strb	r2, [r3, #0]
      r.buf = sc;
 80141ae:	69fb      	ldr	r3, [r7, #28]
 80141b0:	617b      	str	r3, [r7, #20]
      r.len = s.len;
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	61bb      	str	r3, [r7, #24]
    }
  }
  return r;
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	461a      	mov	r2, r3
 80141ba:	f107 0314 	add.w	r3, r7, #20
 80141be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141c2:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80141c6:	68f8      	ldr	r0, [r7, #12]
 80141c8:	3720      	adds	r7, #32
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}

080141ce <mg_strcmp>:

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 80141ce:	b490      	push	{r4, r7}
 80141d0:	b088      	sub	sp, #32
 80141d2:	af00      	add	r7, sp, #0
 80141d4:	f107 0408 	add.w	r4, r7, #8
 80141d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80141dc:	4639      	mov	r1, r7
 80141de:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 80141e2:	2300      	movs	r3, #0
 80141e4:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80141e6:	e019      	b.n	801421c <mg_strcmp+0x4e>
    int c1 = str1.buf[i];
 80141e8:	68ba      	ldr	r2, [r7, #8]
 80141ea:	69fb      	ldr	r3, [r7, #28]
 80141ec:	4413      	add	r3, r2
 80141ee:	781b      	ldrb	r3, [r3, #0]
 80141f0:	61bb      	str	r3, [r7, #24]
    int c2 = str2.buf[i];
 80141f2:	683a      	ldr	r2, [r7, #0]
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	4413      	add	r3, r2
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 80141fc:	69ba      	ldr	r2, [r7, #24]
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	429a      	cmp	r2, r3
 8014202:	da02      	bge.n	801420a <mg_strcmp+0x3c>
 8014204:	f04f 33ff 	mov.w	r3, #4294967295
 8014208:	e01e      	b.n	8014248 <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 801420a:	69ba      	ldr	r2, [r7, #24]
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	429a      	cmp	r2, r3
 8014210:	dd01      	ble.n	8014216 <mg_strcmp+0x48>
 8014212:	2301      	movs	r3, #1
 8014214:	e018      	b.n	8014248 <mg_strcmp+0x7a>
    i++;
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	3301      	adds	r3, #1
 801421a:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	69fa      	ldr	r2, [r7, #28]
 8014220:	429a      	cmp	r2, r3
 8014222:	d203      	bcs.n	801422c <mg_strcmp+0x5e>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	69fa      	ldr	r2, [r7, #28]
 8014228:	429a      	cmp	r2, r3
 801422a:	d3dd      	bcc.n	80141e8 <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	69fa      	ldr	r2, [r7, #28]
 8014230:	429a      	cmp	r2, r3
 8014232:	d201      	bcs.n	8014238 <mg_strcmp+0x6a>
 8014234:	2301      	movs	r3, #1
 8014236:	e007      	b.n	8014248 <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	69fa      	ldr	r2, [r7, #28]
 801423c:	429a      	cmp	r2, r3
 801423e:	d202      	bcs.n	8014246 <mg_strcmp+0x78>
 8014240:	f04f 33ff 	mov.w	r3, #4294967295
 8014244:	e000      	b.n	8014248 <mg_strcmp+0x7a>
  return 0;
 8014246:	2300      	movs	r3, #0
}
 8014248:	4618      	mov	r0, r3
 801424a:	3720      	adds	r7, #32
 801424c:	46bd      	mov	sp, r7
 801424e:	bc90      	pop	{r4, r7}
 8014250:	4770      	bx	lr

08014252 <mg_strcasecmp>:

int mg_strcasecmp(const struct mg_str str1, const struct mg_str str2) {
 8014252:	b590      	push	{r4, r7, lr}
 8014254:	b089      	sub	sp, #36	@ 0x24
 8014256:	af00      	add	r7, sp, #0
 8014258:	f107 0408 	add.w	r4, r7, #8
 801425c:	e884 0003 	stmia.w	r4, {r0, r1}
 8014260:	4639      	mov	r1, r7
 8014262:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8014266:	2300      	movs	r3, #0
 8014268:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 801426a:	e01f      	b.n	80142ac <mg_strcasecmp+0x5a>
    int c1 = mg_tolc(str1.buf[i]);
 801426c:	68ba      	ldr	r2, [r7, #8]
 801426e:	69fb      	ldr	r3, [r7, #28]
 8014270:	4413      	add	r3, r2
 8014272:	781b      	ldrb	r3, [r3, #0]
 8014274:	4618      	mov	r0, r3
 8014276:	f7ff ff5e 	bl	8014136 <mg_tolc>
 801427a:	61b8      	str	r0, [r7, #24]
    int c2 = mg_tolc(str2.buf[i]);
 801427c:	683a      	ldr	r2, [r7, #0]
 801427e:	69fb      	ldr	r3, [r7, #28]
 8014280:	4413      	add	r3, r2
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	4618      	mov	r0, r3
 8014286:	f7ff ff56 	bl	8014136 <mg_tolc>
 801428a:	6178      	str	r0, [r7, #20]
    if (c1 < c2) return -1;
 801428c:	69ba      	ldr	r2, [r7, #24]
 801428e:	697b      	ldr	r3, [r7, #20]
 8014290:	429a      	cmp	r2, r3
 8014292:	da02      	bge.n	801429a <mg_strcasecmp+0x48>
 8014294:	f04f 33ff 	mov.w	r3, #4294967295
 8014298:	e01e      	b.n	80142d8 <mg_strcasecmp+0x86>
    if (c1 > c2) return 1;
 801429a:	69ba      	ldr	r2, [r7, #24]
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	429a      	cmp	r2, r3
 80142a0:	dd01      	ble.n	80142a6 <mg_strcasecmp+0x54>
 80142a2:	2301      	movs	r3, #1
 80142a4:	e018      	b.n	80142d8 <mg_strcasecmp+0x86>
    i++;
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	3301      	adds	r3, #1
 80142aa:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	69fa      	ldr	r2, [r7, #28]
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d203      	bcs.n	80142bc <mg_strcasecmp+0x6a>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	69fa      	ldr	r2, [r7, #28]
 80142b8:	429a      	cmp	r2, r3
 80142ba:	d3d7      	bcc.n	801426c <mg_strcasecmp+0x1a>
  }
  if (i < str1.len) return 1;
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	69fa      	ldr	r2, [r7, #28]
 80142c0:	429a      	cmp	r2, r3
 80142c2:	d201      	bcs.n	80142c8 <mg_strcasecmp+0x76>
 80142c4:	2301      	movs	r3, #1
 80142c6:	e007      	b.n	80142d8 <mg_strcasecmp+0x86>
  if (i < str2.len) return -1;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	69fa      	ldr	r2, [r7, #28]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d202      	bcs.n	80142d6 <mg_strcasecmp+0x84>
 80142d0:	f04f 33ff 	mov.w	r3, #4294967295
 80142d4:	e000      	b.n	80142d8 <mg_strcasecmp+0x86>
  return 0;
 80142d6:	2300      	movs	r3, #0
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3724      	adds	r7, #36	@ 0x24
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd90      	pop	{r4, r7, pc}

080142e0 <mg_match>:

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 80142e0:	b490      	push	{r4, r7}
 80142e2:	b088      	sub	sp, #32
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	f107 0408 	add.w	r4, r7, #8
 80142ea:	e884 0003 	stmia.w	r4, {r0, r1}
 80142ee:	4639      	mov	r1, r7
 80142f0:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 80142f4:	2300      	movs	r3, #0
 80142f6:	61fb      	str	r3, [r7, #28]
 80142f8:	2300      	movs	r3, #0
 80142fa:	61bb      	str	r3, [r7, #24]
 80142fc:	2300      	movs	r3, #0
 80142fe:	617b      	str	r3, [r7, #20]
 8014300:	2300      	movs	r3, #0
 8014302:	613b      	str	r3, [r7, #16]
  if (caps) caps->buf = NULL, caps->len = 0;
 8014304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014306:	2b00      	cmp	r3, #0
 8014308:	f000 80ba 	beq.w	8014480 <mg_match+0x1a0>
 801430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801430e:	2200      	movs	r2, #0
 8014310:	601a      	str	r2, [r3, #0]
 8014312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014314:	2200      	movs	r2, #0
 8014316:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8014318:	e0b2      	b.n	8014480 <mg_match+0x1a0>
    if (i < p.len && j < s.len &&
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	69fa      	ldr	r2, [r7, #28]
 801431e:	429a      	cmp	r2, r3
 8014320:	d25b      	bcs.n	80143da <mg_match+0xfa>
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	69ba      	ldr	r2, [r7, #24]
 8014326:	429a      	cmp	r2, r3
 8014328:	d257      	bcs.n	80143da <mg_match+0xfa>
        (p.buf[i] == '?' ||
 801432a:	683a      	ldr	r2, [r7, #0]
 801432c:	69fb      	ldr	r3, [r7, #28]
 801432e:	4413      	add	r3, r2
 8014330:	781b      	ldrb	r3, [r3, #0]
    if (i < p.len && j < s.len &&
 8014332:	2b3f      	cmp	r3, #63	@ 0x3f
 8014334:	d015      	beq.n	8014362 <mg_match+0x82>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8014336:	683a      	ldr	r2, [r7, #0]
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	4413      	add	r3, r2
 801433c:	781b      	ldrb	r3, [r3, #0]
        (p.buf[i] == '?' ||
 801433e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014340:	d04b      	beq.n	80143da <mg_match+0xfa>
         (p.buf[i] != '*' && p.buf[i] != '#' && s.buf[j] == p.buf[i]))) {
 8014342:	683a      	ldr	r2, [r7, #0]
 8014344:	69fb      	ldr	r3, [r7, #28]
 8014346:	4413      	add	r3, r2
 8014348:	781b      	ldrb	r3, [r3, #0]
 801434a:	2b23      	cmp	r3, #35	@ 0x23
 801434c:	d045      	beq.n	80143da <mg_match+0xfa>
 801434e:	68ba      	ldr	r2, [r7, #8]
 8014350:	69bb      	ldr	r3, [r7, #24]
 8014352:	4413      	add	r3, r2
 8014354:	781a      	ldrb	r2, [r3, #0]
 8014356:	6839      	ldr	r1, [r7, #0]
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	440b      	add	r3, r1
 801435c:	781b      	ldrb	r3, [r3, #0]
 801435e:	429a      	cmp	r2, r3
 8014360:	d13b      	bne.n	80143da <mg_match+0xfa>
      if (caps == NULL) {
 8014362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014364:	2b00      	cmp	r3, #0
 8014366:	d031      	beq.n	80143cc <mg_match+0xec>
      } else if (p.buf[i] == '?') {
 8014368:	683a      	ldr	r2, [r7, #0]
 801436a:	69fb      	ldr	r3, [r7, #28]
 801436c:	4413      	add	r3, r2
 801436e:	781b      	ldrb	r3, [r3, #0]
 8014370:	2b3f      	cmp	r3, #63	@ 0x3f
 8014372:	d111      	bne.n	8014398 <mg_match+0xb8>
        caps->buf = &s.buf[j], caps->len = 1;     // Finalize `?` cap
 8014374:	68ba      	ldr	r2, [r7, #8]
 8014376:	69bb      	ldr	r3, [r7, #24]
 8014378:	441a      	add	r2, r3
 801437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801437c:	601a      	str	r2, [r3, #0]
 801437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014380:	2201      	movs	r2, #1
 8014382:	605a      	str	r2, [r3, #4]
        caps++, caps->buf = NULL, caps->len = 0;  // Init next cap
 8014384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014386:	3308      	adds	r3, #8
 8014388:	62bb      	str	r3, [r7, #40]	@ 0x28
 801438a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801438c:	2200      	movs	r2, #0
 801438e:	601a      	str	r2, [r3, #0]
 8014390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014392:	2200      	movs	r2, #0
 8014394:	605a      	str	r2, [r3, #4]
 8014396:	e019      	b.n	80143cc <mg_match+0xec>
      } else if (caps->buf != NULL && caps->len == 0) {
 8014398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d015      	beq.n	80143cc <mg_match+0xec>
 80143a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143a2:	685b      	ldr	r3, [r3, #4]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d111      	bne.n	80143cc <mg_match+0xec>
        caps->len = (size_t) (&s.buf[j] - caps->buf);  // Finalize current cap
 80143a8:	68ba      	ldr	r2, [r7, #8]
 80143aa:	69bb      	ldr	r3, [r7, #24]
 80143ac:	441a      	add	r2, r3
 80143ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	1ad3      	subs	r3, r2, r3
 80143b4:	461a      	mov	r2, r3
 80143b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143b8:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->buf = NULL;       // Init next cap
 80143ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143bc:	3308      	adds	r3, #8
 80143be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80143c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143c2:	2200      	movs	r2, #0
 80143c4:	605a      	str	r2, [r3, #4]
 80143c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143c8:	2200      	movs	r2, #0
 80143ca:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 80143cc:	69fb      	ldr	r3, [r7, #28]
 80143ce:	3301      	adds	r3, #1
 80143d0:	61fb      	str	r3, [r7, #28]
 80143d2:	69bb      	ldr	r3, [r7, #24]
 80143d4:	3301      	adds	r3, #1
 80143d6:	61bb      	str	r3, [r7, #24]
 80143d8:	e052      	b.n	8014480 <mg_match+0x1a0>
    } else if (i < p.len && (p.buf[i] == '*' || p.buf[i] == '#')) {
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	69fa      	ldr	r2, [r7, #28]
 80143de:	429a      	cmp	r2, r3
 80143e0:	d222      	bcs.n	8014428 <mg_match+0x148>
 80143e2:	683a      	ldr	r2, [r7, #0]
 80143e4:	69fb      	ldr	r3, [r7, #28]
 80143e6:	4413      	add	r3, r2
 80143e8:	781b      	ldrb	r3, [r3, #0]
 80143ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80143ec:	d005      	beq.n	80143fa <mg_match+0x11a>
 80143ee:	683a      	ldr	r2, [r7, #0]
 80143f0:	69fb      	ldr	r3, [r7, #28]
 80143f2:	4413      	add	r3, r2
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	2b23      	cmp	r3, #35	@ 0x23
 80143f8:	d116      	bne.n	8014428 <mg_match+0x148>
      if (caps && !caps->buf) caps->len = 0, caps->buf = &s.buf[j];  // Init cap
 80143fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d00b      	beq.n	8014418 <mg_match+0x138>
 8014400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d107      	bne.n	8014418 <mg_match+0x138>
 8014408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801440a:	2200      	movs	r2, #0
 801440c:	605a      	str	r2, [r3, #4]
 801440e:	68ba      	ldr	r2, [r7, #8]
 8014410:	69bb      	ldr	r3, [r7, #24]
 8014412:	441a      	add	r2, r3
 8014414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014416:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8014418:	69fb      	ldr	r3, [r7, #28]
 801441a:	1c5a      	adds	r2, r3, #1
 801441c:	61fa      	str	r2, [r7, #28]
 801441e:	617b      	str	r3, [r7, #20]
 8014420:	69bb      	ldr	r3, [r7, #24]
 8014422:	3301      	adds	r3, #1
 8014424:	613b      	str	r3, [r7, #16]
 8014426:	e02b      	b.n	8014480 <mg_match+0x1a0>
    } else if (nj > 0 && nj <= s.len && (p.buf[ni] == '#' || s.buf[j] != '/')) {
 8014428:	693b      	ldr	r3, [r7, #16]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d025      	beq.n	801447a <mg_match+0x19a>
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	693a      	ldr	r2, [r7, #16]
 8014432:	429a      	cmp	r2, r3
 8014434:	d821      	bhi.n	801447a <mg_match+0x19a>
 8014436:	683a      	ldr	r2, [r7, #0]
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	4413      	add	r3, r2
 801443c:	781b      	ldrb	r3, [r3, #0]
 801443e:	2b23      	cmp	r3, #35	@ 0x23
 8014440:	d005      	beq.n	801444e <mg_match+0x16e>
 8014442:	68ba      	ldr	r2, [r7, #8]
 8014444:	69bb      	ldr	r3, [r7, #24]
 8014446:	4413      	add	r3, r2
 8014448:	781b      	ldrb	r3, [r3, #0]
 801444a:	2b2f      	cmp	r3, #47	@ 0x2f
 801444c:	d015      	beq.n	801447a <mg_match+0x19a>
      i = ni, j = nj;
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	61fb      	str	r3, [r7, #28]
 8014452:	693b      	ldr	r3, [r7, #16]
 8014454:	61bb      	str	r3, [r7, #24]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8014456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014458:	2b00      	cmp	r3, #0
 801445a:	d010      	beq.n	801447e <mg_match+0x19e>
 801445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d10c      	bne.n	801447e <mg_match+0x19e>
 8014464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d108      	bne.n	801447e <mg_match+0x19e>
        caps--, caps->len = 0;  // Restart previous cap
 801446c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801446e:	3b08      	subs	r3, #8
 8014470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014474:	2200      	movs	r2, #0
 8014476:	605a      	str	r2, [r3, #4]
      if (caps && caps->buf == NULL && caps->len == 0) {
 8014478:	e001      	b.n	801447e <mg_match+0x19e>
      }
    } else {
      return false;
 801447a:	2300      	movs	r3, #0
 801447c:	e01f      	b.n	80144be <mg_match+0x1de>
      if (caps && caps->buf == NULL && caps->len == 0) {
 801447e:	bf00      	nop
  while (i < p.len || j < s.len) {
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	69fa      	ldr	r2, [r7, #28]
 8014484:	429a      	cmp	r2, r3
 8014486:	f4ff af48 	bcc.w	801431a <mg_match+0x3a>
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	69ba      	ldr	r2, [r7, #24]
 801448e:	429a      	cmp	r2, r3
 8014490:	f4ff af43 	bcc.w	801431a <mg_match+0x3a>
    }
  }
  if (caps && caps->buf && caps->len == 0) {
 8014494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014496:	2b00      	cmp	r3, #0
 8014498:	d010      	beq.n	80144bc <mg_match+0x1dc>
 801449a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d00c      	beq.n	80144bc <mg_match+0x1dc>
 80144a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d108      	bne.n	80144bc <mg_match+0x1dc>
    caps->len = (size_t) (&s.buf[j] - caps->buf);
 80144aa:	68ba      	ldr	r2, [r7, #8]
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	441a      	add	r2, r3
 80144b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	1ad3      	subs	r3, r2, r3
 80144b6:	461a      	mov	r2, r3
 80144b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ba:	605a      	str	r2, [r3, #4]
  }
  return true;
 80144bc:	2301      	movs	r3, #1
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3720      	adds	r7, #32
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bc90      	pop	{r4, r7}
 80144c6:	4770      	bx	lr

080144c8 <mg_span>:

bool mg_span(struct mg_str s, struct mg_str *a, struct mg_str *b, char sep) {
 80144c8:	b590      	push	{r4, r7, lr}
 80144ca:	b089      	sub	sp, #36	@ 0x24
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	f107 0410 	add.w	r4, r7, #16
 80144d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80144d6:	60fa      	str	r2, [r7, #12]
 80144d8:	60bb      	str	r3, [r7, #8]
  if (s.len == 0 || s.buf == NULL) {
 80144da:	697b      	ldr	r3, [r7, #20]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d002      	beq.n	80144e6 <mg_span+0x1e>
 80144e0:	693b      	ldr	r3, [r7, #16]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d101      	bne.n	80144ea <mg_span+0x22>
    return false;  // Empty string, nothing to span - fail
 80144e6:	2300      	movs	r3, #0
 80144e8:	e047      	b.n	801457a <mg_span+0xb2>
  } else {
    size_t len = 0;
 80144ea:	2300      	movs	r3, #0
 80144ec:	61fb      	str	r3, [r7, #28]
    while (len < s.len && s.buf[len] != sep) len++;  // Find separator
 80144ee:	e002      	b.n	80144f6 <mg_span+0x2e>
 80144f0:	69fb      	ldr	r3, [r7, #28]
 80144f2:	3301      	adds	r3, #1
 80144f4:	61fb      	str	r3, [r7, #28]
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	69fa      	ldr	r2, [r7, #28]
 80144fa:	429a      	cmp	r2, r3
 80144fc:	d207      	bcs.n	801450e <mg_span+0x46>
 80144fe:	693a      	ldr	r2, [r7, #16]
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	4413      	add	r3, r2
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801450a:	429a      	cmp	r2, r3
 801450c:	d1f0      	bne.n	80144f0 <mg_span+0x28>
    if (a) *a = mg_str_n(s.buf, len);                // Init a
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d00c      	beq.n	801452e <mg_span+0x66>
 8014514:	6939      	ldr	r1, [r7, #16]
 8014516:	68fc      	ldr	r4, [r7, #12]
 8014518:	463b      	mov	r3, r7
 801451a:	69fa      	ldr	r2, [r7, #28]
 801451c:	4618      	mov	r0, r3
 801451e:	f7ff fdf2 	bl	8014106 <mg_str_n>
 8014522:	4622      	mov	r2, r4
 8014524:	463b      	mov	r3, r7
 8014526:	e893 0003 	ldmia.w	r3, {r0, r1}
 801452a:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b) *b = mg_str_n(s.buf + len, s.len - len);  // Init b
 801452e:	68bb      	ldr	r3, [r7, #8]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d010      	beq.n	8014556 <mg_span+0x8e>
 8014534:	693a      	ldr	r2, [r7, #16]
 8014536:	69fb      	ldr	r3, [r7, #28]
 8014538:	18d1      	adds	r1, r2, r3
 801453a:	697a      	ldr	r2, [r7, #20]
 801453c:	69fb      	ldr	r3, [r7, #28]
 801453e:	1ad2      	subs	r2, r2, r3
 8014540:	68bc      	ldr	r4, [r7, #8]
 8014542:	463b      	mov	r3, r7
 8014544:	4618      	mov	r0, r3
 8014546:	f7ff fdde 	bl	8014106 <mg_str_n>
 801454a:	4622      	mov	r2, r4
 801454c:	463b      	mov	r3, r7
 801454e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014552:	e882 0003 	stmia.w	r2, {r0, r1}
    if (b && len < s.len) b->buf++, b->len--;        // Skip separator
 8014556:	68bb      	ldr	r3, [r7, #8]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d00d      	beq.n	8014578 <mg_span+0xb0>
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	69fa      	ldr	r2, [r7, #28]
 8014560:	429a      	cmp	r2, r3
 8014562:	d209      	bcs.n	8014578 <mg_span+0xb0>
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	681b      	ldr	r3, [r3, #0]
 8014568:	1c5a      	adds	r2, r3, #1
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	601a      	str	r2, [r3, #0]
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	685b      	ldr	r3, [r3, #4]
 8014572:	1e5a      	subs	r2, r3, #1
 8014574:	68bb      	ldr	r3, [r7, #8]
 8014576:	605a      	str	r2, [r3, #4]
    return true;
 8014578:	2301      	movs	r3, #1
  }
}
 801457a:	4618      	mov	r0, r3
 801457c:	3724      	adds	r7, #36	@ 0x24
 801457e:	46bd      	mov	sp, r7
 8014580:	bd90      	pop	{r4, r7, pc}

08014582 <mg_str_to_num>:

bool mg_str_to_num(struct mg_str str, int base, void *val, size_t val_len) {
 8014582:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014586:	b0a5      	sub	sp, #148	@ 0x94
 8014588:	af00      	add	r7, sp, #0
 801458a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 801458e:	e884 0003 	stmia.w	r4, {r0, r1}
 8014592:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8014594:	64bb      	str	r3, [r7, #72]	@ 0x48
  size_t i = 0, ndigits = 0;
 8014596:	2300      	movs	r3, #0
 8014598:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801459c:	2300      	movs	r3, #0
 801459e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 80145a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d016      	beq.n	80145d8 <mg_str_to_num+0x56>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 80145aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80145ae:	2b02      	cmp	r3, #2
 80145b0:	d00d      	beq.n	80145ce <mg_str_to_num+0x4c>
                                               : (uint64_t) ~0;
 80145b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80145b6:	2b04      	cmp	r3, #4
 80145b8:	d104      	bne.n	80145c4 <mg_str_to_num+0x42>
 80145ba:	f04f 32ff 	mov.w	r2, #4294967295
 80145be:	f04f 0300 	mov.w	r3, #0
 80145c2:	e00d      	b.n	80145e0 <mg_str_to_num+0x5e>
 80145c4:	f04f 32ff 	mov.w	r2, #4294967295
 80145c8:	f04f 33ff 	mov.w	r3, #4294967295
 80145cc:	e008      	b.n	80145e0 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint32_t) ? 0xFFFFFFFF
 80145ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80145d2:	f04f 0300 	mov.w	r3, #0
 80145d6:	e003      	b.n	80145e0 <mg_str_to_num+0x5e>
                 : val_len == sizeof(uint16_t) ? 0xFFFF
 80145d8:	f04f 02ff 	mov.w	r2, #255	@ 0xff
 80145dc:	f04f 0300 	mov.w	r3, #0
  uint64_t max = val_len == sizeof(uint8_t)    ? 0xFF
 80145e0:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  uint64_t result = 0;
 80145e4:	f04f 0200 	mov.w	r2, #0
 80145e8:	f04f 0300 	mov.w	r3, #0
 80145ec:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  if (max == (uint64_t) ~0 && val_len != sizeof(uint64_t)) return false;
 80145f0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80145f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f8:	bf08      	it	eq
 80145fa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80145fe:	d105      	bne.n	801460c <mg_str_to_num+0x8a>
 8014600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8014604:	2b08      	cmp	r3, #8
 8014606:	d001      	beq.n	801460c <mg_str_to_num+0x8a>
 8014608:	2300      	movs	r3, #0
 801460a:	e1e8      	b.n	80149de <mg_str_to_num+0x45c>
  if (base == 0 && str.len >= 2) {
 801460c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801460e:	2b00      	cmp	r3, #0
 8014610:	d12d      	bne.n	801466e <mg_str_to_num+0xec>
 8014612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014614:	2b01      	cmp	r3, #1
 8014616:	d92a      	bls.n	801466e <mg_str_to_num+0xec>
    if (str.buf[i] == '0') {
 8014618:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801461a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801461e:	4413      	add	r3, r2
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	2b30      	cmp	r3, #48	@ 0x30
 8014624:	d121      	bne.n	801466a <mg_str_to_num+0xe8>
      i++;
 8014626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801462a:	3301      	adds	r3, #1
 801462c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      base = str.buf[i] == 'b' ? 2 : str.buf[i] == 'x' ? 16 : 10;
 8014630:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014636:	4413      	add	r3, r2
 8014638:	781b      	ldrb	r3, [r3, #0]
 801463a:	2b62      	cmp	r3, #98	@ 0x62
 801463c:	d00a      	beq.n	8014654 <mg_str_to_num+0xd2>
 801463e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014640:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014644:	4413      	add	r3, r2
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	2b78      	cmp	r3, #120	@ 0x78
 801464a:	d101      	bne.n	8014650 <mg_str_to_num+0xce>
 801464c:	2310      	movs	r3, #16
 801464e:	e002      	b.n	8014656 <mg_str_to_num+0xd4>
 8014650:	230a      	movs	r3, #10
 8014652:	e000      	b.n	8014656 <mg_str_to_num+0xd4>
 8014654:	2302      	movs	r3, #2
 8014656:	64fb      	str	r3, [r7, #76]	@ 0x4c
      if (base != 10) ++i;
 8014658:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801465a:	2b0a      	cmp	r3, #10
 801465c:	d007      	beq.n	801466e <mg_str_to_num+0xec>
 801465e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014662:	3301      	adds	r3, #1
 8014664:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014668:	e001      	b.n	801466e <mg_str_to_num+0xec>
    } else {
      base = 10;
 801466a:	230a      	movs	r3, #10
 801466c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  switch (base) {
 801466e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014670:	2b10      	cmp	r3, #16
 8014672:	f000 8178 	beq.w	8014966 <mg_str_to_num+0x3e4>
 8014676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014678:	2b10      	cmp	r3, #16
 801467a:	f300 817d 	bgt.w	8014978 <mg_str_to_num+0x3f6>
 801467e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014680:	2b02      	cmp	r3, #2
 8014682:	d052      	beq.n	801472a <mg_str_to_num+0x1a8>
 8014684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014686:	2b0a      	cmp	r3, #10
 8014688:	f000 80cd 	beq.w	8014826 <mg_str_to_num+0x2a4>
 801468c:	e174      	b.n	8014978 <mg_str_to_num+0x3f6>
    case 2:
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 801468e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014690:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014694:	4413      	add	r3, r2
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	3b30      	subs	r3, #48	@ 0x30
 801469a:	17da      	asrs	r2, r3, #31
 801469c:	633b      	str	r3, [r7, #48]	@ 0x30
 801469e:	637a      	str	r2, [r7, #52]	@ 0x34
 80146a0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80146a4:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
        if (result > max / 2) return false;  // Overflow
 80146a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80146ac:	f04f 0200 	mov.w	r2, #0
 80146b0:	f04f 0300 	mov.w	r3, #0
 80146b4:	0842      	lsrs	r2, r0, #1
 80146b6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 80146ba:	084b      	lsrs	r3, r1, #1
 80146bc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80146c0:	4282      	cmp	r2, r0
 80146c2:	418b      	sbcs	r3, r1
 80146c4:	d201      	bcs.n	80146ca <mg_str_to_num+0x148>
 80146c6:	2300      	movs	r3, #0
 80146c8:	e189      	b.n	80149de <mg_str_to_num+0x45c>
        result *= 2;
 80146ca:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80146ce:	1891      	adds	r1, r2, r2
 80146d0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80146d2:	415b      	adcs	r3, r3
 80146d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80146d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80146da:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80146de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80146e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80146e6:	1a85      	subs	r5, r0, r2
 80146e8:	eb61 0603 	sbc.w	r6, r1, r3
 80146ec:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80146f0:	4295      	cmp	r5, r2
 80146f2:	eb76 0303 	sbcs.w	r3, r6, r3
 80146f6:	d201      	bcs.n	80146fc <mg_str_to_num+0x17a>
 80146f8:	2300      	movs	r3, #0
 80146fa:	e170      	b.n	80149de <mg_str_to_num+0x45c>
        result += digit;
 80146fc:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014700:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8014704:	1884      	adds	r4, r0, r2
 8014706:	623c      	str	r4, [r7, #32]
 8014708:	eb41 0303 	adc.w	r3, r1, r3
 801470c:	627b      	str	r3, [r7, #36]	@ 0x24
 801470e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8014712:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8014716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801471a:	3301      	adds	r3, #1
 801471c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8014720:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014724:	3301      	adds	r3, #1
 8014726:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && (str.buf[i] == '0' || str.buf[i] == '1')) {
 801472a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801472c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8014730:	429a      	cmp	r2, r3
 8014732:	f080 8123 	bcs.w	801497c <mg_str_to_num+0x3fa>
 8014736:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014738:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801473c:	4413      	add	r3, r2
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	2b30      	cmp	r3, #48	@ 0x30
 8014742:	d0a4      	beq.n	801468e <mg_str_to_num+0x10c>
 8014744:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801474a:	4413      	add	r3, r2
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	2b31      	cmp	r3, #49	@ 0x31
 8014750:	d09d      	beq.n	801468e <mg_str_to_num+0x10c>
      }
      break;
 8014752:	e113      	b.n	801497c <mg_str_to_num+0x3fa>
    case 10:
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
        uint64_t digit = (uint64_t) (str.buf[i] - '0');
 8014754:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801475a:	4413      	add	r3, r2
 801475c:	781b      	ldrb	r3, [r3, #0]
 801475e:	3b30      	subs	r3, #48	@ 0x30
 8014760:	17da      	asrs	r2, r3, #31
 8014762:	61bb      	str	r3, [r7, #24]
 8014764:	61fa      	str	r2, [r7, #28]
 8014766:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 801476a:	e9c7 3418 	strd	r3, r4, [r7, #96]	@ 0x60
        if (result > max / 10) return false;  // Overflow
 801476e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8014772:	f04f 020a 	mov.w	r2, #10
 8014776:	f04f 0300 	mov.w	r3, #0
 801477a:	f7eb fe31 	bl	80003e0 <__aeabi_uldivmod>
 801477e:	4602      	mov	r2, r0
 8014780:	460b      	mov	r3, r1
 8014782:	4610      	mov	r0, r2
 8014784:	4619      	mov	r1, r3
 8014786:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801478a:	4290      	cmp	r0, r2
 801478c:	eb71 0303 	sbcs.w	r3, r1, r3
 8014790:	d201      	bcs.n	8014796 <mg_str_to_num+0x214>
 8014792:	2300      	movs	r3, #0
 8014794:	e123      	b.n	80149de <mg_str_to_num+0x45c>
        result *= 10;
 8014796:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 801479a:	4622      	mov	r2, r4
 801479c:	462b      	mov	r3, r5
 801479e:	f04f 0000 	mov.w	r0, #0
 80147a2:	f04f 0100 	mov.w	r1, #0
 80147a6:	0099      	lsls	r1, r3, #2
 80147a8:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80147ac:	0090      	lsls	r0, r2, #2
 80147ae:	4602      	mov	r2, r0
 80147b0:	460b      	mov	r3, r1
 80147b2:	eb12 0804 	adds.w	r8, r2, r4
 80147b6:	eb43 0905 	adc.w	r9, r3, r5
 80147ba:	eb18 0308 	adds.w	r3, r8, r8
 80147be:	613b      	str	r3, [r7, #16]
 80147c0:	eb49 0309 	adc.w	r3, r9, r9
 80147c4:	617b      	str	r3, [r7, #20]
 80147c6:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80147ca:	e9c7 8920 	strd	r8, r9, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 80147ce:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80147d2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80147d6:	1a84      	subs	r4, r0, r2
 80147d8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80147da:	eb61 0303 	sbc.w	r3, r1, r3
 80147de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80147e0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80147e4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80147e8:	4621      	mov	r1, r4
 80147ea:	4291      	cmp	r1, r2
 80147ec:	4629      	mov	r1, r5
 80147ee:	eb71 0303 	sbcs.w	r3, r1, r3
 80147f2:	d201      	bcs.n	80147f8 <mg_str_to_num+0x276>
 80147f4:	2300      	movs	r3, #0
 80147f6:	e0f2      	b.n	80149de <mg_str_to_num+0x45c>
        result += digit;
 80147f8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80147fc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8014800:	1884      	adds	r4, r0, r2
 8014802:	60bc      	str	r4, [r7, #8]
 8014804:	eb41 0303 	adc.w	r3, r1, r3
 8014808:	60fb      	str	r3, [r7, #12]
 801480a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801480e:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8014812:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014816:	3301      	adds	r3, #1
 8014818:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801481c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014820:	3301      	adds	r3, #1
 8014822:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len && str.buf[i] >= '0' && str.buf[i] <= '9') {
 8014826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014828:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801482c:	429a      	cmp	r2, r3
 801482e:	f080 80a7 	bcs.w	8014980 <mg_str_to_num+0x3fe>
 8014832:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014838:	4413      	add	r3, r2
 801483a:	781b      	ldrb	r3, [r3, #0]
 801483c:	2b2f      	cmp	r3, #47	@ 0x2f
 801483e:	f240 809f 	bls.w	8014980 <mg_str_to_num+0x3fe>
 8014842:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014844:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014848:	4413      	add	r3, r2
 801484a:	781b      	ldrb	r3, [r3, #0]
 801484c:	2b39      	cmp	r3, #57	@ 0x39
 801484e:	d981      	bls.n	8014754 <mg_str_to_num+0x1d2>
      }
      break;
 8014850:	e096      	b.n	8014980 <mg_str_to_num+0x3fe>
    case 16:
      while (i < str.len) {
        char c = str.buf[i];
 8014852:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8014854:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014858:	4413      	add	r3, r2
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8014860:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014864:	2b2f      	cmp	r3, #47	@ 0x2f
 8014866:	d90a      	bls.n	801487e <mg_str_to_num+0x2fc>
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 8014868:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801486c:	2b39      	cmp	r3, #57	@ 0x39
 801486e:	d806      	bhi.n	801487e <mg_str_to_num+0x2fc>
 8014870:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014874:	3b30      	subs	r3, #48	@ 0x30
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8014876:	17da      	asrs	r2, r3, #31
 8014878:	643b      	str	r3, [r7, #64]	@ 0x40
 801487a:	647a      	str	r2, [r7, #68]	@ 0x44
 801487c:	e023      	b.n	80148c6 <mg_str_to_num+0x344>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 801487e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014882:	2b40      	cmp	r3, #64	@ 0x40
 8014884:	d90a      	bls.n	801489c <mg_str_to_num+0x31a>
                         : (c >= 'A' && c <= 'F') ? (uint64_t) (c - '7')
 8014886:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 801488a:	2b46      	cmp	r3, #70	@ 0x46
 801488c:	d806      	bhi.n	801489c <mg_str_to_num+0x31a>
 801488e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8014892:	3b37      	subs	r3, #55	@ 0x37
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 8014894:	17da      	asrs	r2, r3, #31
 8014896:	643b      	str	r3, [r7, #64]	@ 0x40
 8014898:	647a      	str	r2, [r7, #68]	@ 0x44
 801489a:	e014      	b.n	80148c6 <mg_str_to_num+0x344>
                                                  : (uint64_t) ~0;
 801489c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80148a0:	2b60      	cmp	r3, #96	@ 0x60
 80148a2:	d90a      	bls.n	80148ba <mg_str_to_num+0x338>
                         : (c >= 'a' && c <= 'f') ? (uint64_t) (c - 'W')
 80148a4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80148a8:	2b66      	cmp	r3, #102	@ 0x66
 80148aa:	d806      	bhi.n	80148ba <mg_str_to_num+0x338>
 80148ac:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80148b0:	3b57      	subs	r3, #87	@ 0x57
                                                  : (uint64_t) ~0;
 80148b2:	17da      	asrs	r2, r3, #31
 80148b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80148b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80148b8:	e005      	b.n	80148c6 <mg_str_to_num+0x344>
 80148ba:	f04f 33ff 	mov.w	r3, #4294967295
 80148be:	f04f 34ff 	mov.w	r4, #4294967295
 80148c2:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
        uint64_t digit = (c >= '0' && c <= '9')   ? (uint64_t) (c - '0')
 80148c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80148ca:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
        if (digit == (uint64_t) ~0) break;
 80148ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80148d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148d6:	bf08      	it	eq
 80148d8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80148dc:	d04a      	beq.n	8014974 <mg_str_to_num+0x3f2>
        if (result > max / 16) return false;  // Overflow
 80148de:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80148e2:	f04f 0200 	mov.w	r2, #0
 80148e6:	f04f 0300 	mov.w	r3, #0
 80148ea:	0902      	lsrs	r2, r0, #4
 80148ec:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 80148f0:	090b      	lsrs	r3, r1, #4
 80148f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80148f6:	4282      	cmp	r2, r0
 80148f8:	418b      	sbcs	r3, r1
 80148fa:	d201      	bcs.n	8014900 <mg_str_to_num+0x37e>
 80148fc:	2300      	movs	r3, #0
 80148fe:	e06e      	b.n	80149de <mg_str_to_num+0x45c>
        result *= 16;
 8014900:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014904:	f04f 0200 	mov.w	r2, #0
 8014908:	f04f 0300 	mov.w	r3, #0
 801490c:	010b      	lsls	r3, r1, #4
 801490e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8014912:	0102      	lsls	r2, r0, #4
 8014914:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
        if (result > max - digit) return false;  // Overflow
 8014918:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 801491c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8014920:	ebb0 0a02 	subs.w	sl, r0, r2
 8014924:	eb61 0b03 	sbc.w	fp, r1, r3
 8014928:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 801492c:	4592      	cmp	sl, r2
 801492e:	eb7b 0303 	sbcs.w	r3, fp, r3
 8014932:	d201      	bcs.n	8014938 <mg_str_to_num+0x3b6>
 8014934:	2300      	movs	r3, #0
 8014936:	e052      	b.n	80149de <mg_str_to_num+0x45c>
        result += digit;
 8014938:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801493c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8014940:	1884      	adds	r4, r0, r2
 8014942:	603c      	str	r4, [r7, #0]
 8014944:	eb41 0303 	adc.w	r3, r1, r3
 8014948:	607b      	str	r3, [r7, #4]
 801494a:	e9d7 3400 	ldrd	r3, r4, [r7]
 801494e:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
        i++, ndigits++;
 8014952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014956:	3301      	adds	r3, #1
 8014958:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801495c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014960:	3301      	adds	r3, #1
 8014962:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      while (i < str.len) {
 8014966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014968:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801496c:	429a      	cmp	r2, r3
 801496e:	f4ff af70 	bcc.w	8014852 <mg_str_to_num+0x2d0>
      }
      break;
 8014972:	e006      	b.n	8014982 <mg_str_to_num+0x400>
        if (digit == (uint64_t) ~0) break;
 8014974:	bf00      	nop
      break;
 8014976:	e004      	b.n	8014982 <mg_str_to_num+0x400>
    default:
      return false;
 8014978:	2300      	movs	r3, #0
 801497a:	e030      	b.n	80149de <mg_str_to_num+0x45c>
      break;
 801497c:	bf00      	nop
 801497e:	e000      	b.n	8014982 <mg_str_to_num+0x400>
      break;
 8014980:	bf00      	nop
  }
  if (ndigits == 0) return false;
 8014982:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014986:	2b00      	cmp	r3, #0
 8014988:	d101      	bne.n	801498e <mg_str_to_num+0x40c>
 801498a:	2300      	movs	r3, #0
 801498c:	e027      	b.n	80149de <mg_str_to_num+0x45c>
  if (i != str.len) return false;
 801498e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014990:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8014994:	429a      	cmp	r2, r3
 8014996:	d001      	beq.n	801499c <mg_str_to_num+0x41a>
 8014998:	2300      	movs	r3, #0
 801499a:	e020      	b.n	80149de <mg_str_to_num+0x45c>
  if (val_len == 1) {
 801499c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80149a0:	2b01      	cmp	r3, #1
 80149a2:	d104      	bne.n	80149ae <mg_str_to_num+0x42c>
    *((uint8_t *) val) = (uint8_t) result;
 80149a4:	f897 2080 	ldrb.w	r2, [r7, #128]	@ 0x80
 80149a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80149aa:	701a      	strb	r2, [r3, #0]
 80149ac:	e016      	b.n	80149dc <mg_str_to_num+0x45a>
  } else if (val_len == 2) {
 80149ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80149b2:	2b02      	cmp	r3, #2
 80149b4:	d104      	bne.n	80149c0 <mg_str_to_num+0x43e>
    *((uint16_t *) val) = (uint16_t) result;
 80149b6:	f8b7 2080 	ldrh.w	r2, [r7, #128]	@ 0x80
 80149ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80149bc:	801a      	strh	r2, [r3, #0]
 80149be:	e00d      	b.n	80149dc <mg_str_to_num+0x45a>
  } else if (val_len == 4) {
 80149c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80149c4:	2b04      	cmp	r3, #4
 80149c6:	d104      	bne.n	80149d2 <mg_str_to_num+0x450>
    *((uint32_t *) val) = (uint32_t) result;
 80149c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80149cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80149ce:	601a      	str	r2, [r3, #0]
 80149d0:	e004      	b.n	80149dc <mg_str_to_num+0x45a>
  } else {
    *((uint64_t *) val) = (uint64_t) result;
 80149d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80149d4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80149d8:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return true;
 80149dc:	2301      	movs	r3, #1
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3794      	adds	r7, #148	@ 0x94
 80149e2:	46bd      	mov	sp, r7
 80149e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080149e8 <mg_timer_init>:
#endif



void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 80149e8:	b480      	push	{r7}
 80149ea:	b085      	sub	sp, #20
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	60f8      	str	r0, [r7, #12]
 80149f0:	60b9      	str	r1, [r7, #8]
 80149f2:	e9c7 2300 	strd	r2, r3, [r7]
  t->period_ms = ms, t->expire = 0;
 80149f6:	68b9      	ldr	r1, [r7, #8]
 80149f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149fc:	e9c1 2300 	strd	r2, r3, [r1]
 8014a00:	68b9      	ldr	r1, [r7, #8]
 8014a02:	f04f 0200 	mov.w	r2, #0
 8014a06:	f04f 0300 	mov.w	r3, #0
 8014a0a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8014a0e:	68bb      	ldr	r3, [r7, #8]
 8014a10:	69ba      	ldr	r2, [r7, #24]
 8014a12:	611a      	str	r2, [r3, #16]
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	69fa      	ldr	r2, [r7, #28]
 8014a18:	615a      	str	r2, [r3, #20]
 8014a1a:	68bb      	ldr	r3, [r7, #8]
 8014a1c:	6a3a      	ldr	r2, [r7, #32]
 8014a1e:	619a      	str	r2, [r3, #24]
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	61da      	str	r2, [r3, #28]
  *head = t;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	68ba      	ldr	r2, [r7, #8]
 8014a2c:	601a      	str	r2, [r3, #0]
}
 8014a2e:	bf00      	nop
 8014a30:	3714      	adds	r7, #20
 8014a32:	46bd      	mov	sp, r7
 8014a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a38:	4770      	bx	lr

08014a3a <mg_timer_free>:

void mg_timer_free(struct mg_timer **head, struct mg_timer *t) {
 8014a3a:	b480      	push	{r7}
 8014a3c:	b083      	sub	sp, #12
 8014a3e:	af00      	add	r7, sp, #0
 8014a40:	6078      	str	r0, [r7, #4]
 8014a42:	6039      	str	r1, [r7, #0]
  while (*head && *head != t) head = &(*head)->next;
 8014a44:	e003      	b.n	8014a4e <mg_timer_free+0x14>
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	331c      	adds	r3, #28
 8014a4c:	607b      	str	r3, [r7, #4]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d004      	beq.n	8014a60 <mg_timer_free+0x26>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	683a      	ldr	r2, [r7, #0]
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d1f2      	bne.n	8014a46 <mg_timer_free+0xc>
  if (*head) *head = t->next;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d003      	beq.n	8014a70 <mg_timer_free+0x36>
 8014a68:	683b      	ldr	r3, [r7, #0]
 8014a6a:	69da      	ldr	r2, [r3, #28]
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	601a      	str	r2, [r3, #0]
}
 8014a70:	bf00      	nop
 8014a72:	370c      	adds	r7, #12
 8014a74:	46bd      	mov	sp, r7
 8014a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7a:	4770      	bx	lr

08014a7c <mg_timer_expired>:

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 8014a7c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014a80:	b086      	sub	sp, #24
 8014a82:	af00      	add	r7, sp, #0
 8014a84:	6178      	str	r0, [r7, #20]
 8014a86:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 8014a8a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8014a8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014a92:	eb10 0a02 	adds.w	sl, r0, r2
 8014a96:	eb41 0b03 	adc.w	fp, r1, r3
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa0:	4592      	cmp	sl, r2
 8014aa2:	eb7b 0303 	sbcs.w	r3, fp, r3
 8014aa6:	d206      	bcs.n	8014ab6 <mg_timer_expired+0x3a>
 8014aa8:	6979      	ldr	r1, [r7, #20]
 8014aaa:	f04f 0200 	mov.w	r2, #0
 8014aae:	f04f 0300 	mov.w	r3, #0
 8014ab2:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 8014ab6:	697b      	ldr	r3, [r7, #20]
 8014ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014abc:	4313      	orrs	r3, r2
 8014abe:	d10d      	bne.n	8014adc <mg_timer_expired+0x60>
 8014ac0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8014ac4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014ac8:	1886      	adds	r6, r0, r2
 8014aca:	603e      	str	r6, [r7, #0]
 8014acc:	eb41 0303 	adc.w	r3, r1, r3
 8014ad0:	607b      	str	r3, [r7, #4]
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8014ad8:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 8014adc:	697b      	ldr	r3, [r7, #20]
 8014ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8014ae6:	4290      	cmp	r0, r2
 8014ae8:	eb71 0303 	sbcs.w	r3, r1, r3
 8014aec:	d201      	bcs.n	8014af2 <mg_timer_expired+0x76>
 8014aee:	2300      	movs	r3, #0
 8014af0:	e022      	b.n	8014b38 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 8014af2:	697b      	ldr	r3, [r7, #20]
 8014af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8014afc:	ebb0 0802 	subs.w	r8, r0, r2
 8014b00:	eb61 0903 	sbc.w	r9, r1, r3
 8014b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014b08:	4542      	cmp	r2, r8
 8014b0a:	eb73 0309 	sbcs.w	r3, r3, r9
 8014b0e:	d207      	bcs.n	8014b20 <mg_timer_expired+0xa4>
 8014b10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8014b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014b18:	1884      	adds	r4, r0, r2
 8014b1a:	eb41 0503 	adc.w	r5, r1, r3
 8014b1e:	e007      	b.n	8014b30 <mg_timer_expired+0xb4>
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014b26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014b2a:	1884      	adds	r4, r0, r2
 8014b2c:	eb41 0503 	adc.w	r5, r1, r3
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 8014b36:	2301      	movs	r3, #1
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3718      	adds	r7, #24
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8014b42:	4770      	bx	lr

08014b44 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 8014b44:	b590      	push	{r4, r7, lr}
 8014b46:	b08b      	sub	sp, #44	@ 0x2c
 8014b48:	af02      	add	r7, sp, #8
 8014b4a:	60f8      	str	r0, [r7, #12]
 8014b4c:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	61fb      	str	r3, [r7, #28]
 8014b56:	e067      	b.n	8014c28 <mg_timer_poll+0xe4>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8014b58:	69fb      	ldr	r3, [r7, #28]
 8014b5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8014b5e:	4313      	orrs	r3, r2
 8014b60:	d10d      	bne.n	8014b7e <mg_timer_poll+0x3a>
 8014b62:	69fb      	ldr	r3, [r7, #28]
 8014b64:	691b      	ldr	r3, [r3, #16]
 8014b66:	f003 0302 	and.w	r3, r3, #2
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d007      	beq.n	8014b7e <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	691b      	ldr	r3, [r3, #16]
 8014b72:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d101      	bne.n	8014b7e <mg_timer_poll+0x3a>
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	e000      	b.n	8014b80 <mg_timer_poll+0x3c>
 8014b7e:	2300      	movs	r3, #0
 8014b80:	76fb      	strb	r3, [r7, #27]
 8014b82:	7efb      	ldrb	r3, [r7, #27]
 8014b84:	f003 0301 	and.w	r3, r3, #1
 8014b88:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 8014b8a:	69fb      	ldr	r3, [r7, #28]
 8014b8c:	f103 0408 	add.w	r4, r3, #8
 8014b90:	69fb      	ldr	r3, [r7, #28]
 8014b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b9a:	e9cd 2300 	strd	r2, r3, [sp]
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	460b      	mov	r3, r1
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	f7ff ff6a 	bl	8014a7c <mg_timer_expired>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 8014bac:	69fb      	ldr	r3, [r7, #28]
 8014bae:	69db      	ldr	r3, [r3, #28]
 8014bb0:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 8014bb2:	7efb      	ldrb	r3, [r7, #27]
 8014bb4:	f083 0301 	eor.w	r3, r3, #1
 8014bb8:	b2db      	uxtb	r3, r3
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d005      	beq.n	8014bca <mg_timer_poll+0x86>
 8014bbe:	7ebb      	ldrb	r3, [r7, #26]
 8014bc0:	f083 0301 	eor.w	r3, r3, #1
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d12b      	bne.n	8014c22 <mg_timer_poll+0xde>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 8014bca:	69fb      	ldr	r3, [r7, #28]
 8014bcc:	691b      	ldr	r3, [r3, #16]
 8014bce:	f003 0301 	and.w	r3, r3, #1
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d105      	bne.n	8014be2 <mg_timer_poll+0x9e>
 8014bd6:	69fb      	ldr	r3, [r7, #28]
 8014bd8:	691b      	ldr	r3, [r3, #16]
 8014bda:	f003 0304 	and.w	r3, r3, #4
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d105      	bne.n	8014bee <mg_timer_poll+0xaa>
      t->fn(t->arg);
 8014be2:	69fb      	ldr	r3, [r7, #28]
 8014be4:	695b      	ldr	r3, [r3, #20]
 8014be6:	69fa      	ldr	r2, [r7, #28]
 8014be8:	6992      	ldr	r2, [r2, #24]
 8014bea:	4610      	mov	r0, r2
 8014bec:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 8014bee:	69fb      	ldr	r3, [r7, #28]
 8014bf0:	691b      	ldr	r3, [r3, #16]
 8014bf2:	f043 0204 	orr.w	r2, r3, #4
 8014bf6:	69fb      	ldr	r3, [r7, #28]
 8014bf8:	611a      	str	r2, [r3, #16]

    // If this timer is not repeating and marked AUTODELETE, remove it
    if (!(t->flags & MG_TIMER_REPEAT) && (t->flags & MG_TIMER_AUTODELETE)) {
 8014bfa:	69fb      	ldr	r3, [r7, #28]
 8014bfc:	691b      	ldr	r3, [r3, #16]
 8014bfe:	f003 0301 	and.w	r3, r3, #1
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d10e      	bne.n	8014c24 <mg_timer_poll+0xe0>
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	691b      	ldr	r3, [r3, #16]
 8014c0a:	f003 0308 	and.w	r3, r3, #8
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d008      	beq.n	8014c24 <mg_timer_poll+0xe0>
      mg_timer_free(head, t);
 8014c12:	69f9      	ldr	r1, [r7, #28]
 8014c14:	68f8      	ldr	r0, [r7, #12]
 8014c16:	f7ff ff10 	bl	8014a3a <mg_timer_free>
      free(t);
 8014c1a:	69f8      	ldr	r0, [r7, #28]
 8014c1c:	f00e fb0e 	bl	802323c <free>
 8014c20:	e000      	b.n	8014c24 <mg_timer_poll+0xe0>
    if (!once && !expired) continue;
 8014c22:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	61fb      	str	r3, [r7, #28]
 8014c28:	69fb      	ldr	r3, [r7, #28]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d194      	bne.n	8014b58 <mg_timer_poll+0x14>
    }
  }
}
 8014c2e:	bf00      	nop
 8014c30:	bf00      	nop
 8014c32:	3724      	adds	r7, #36	@ 0x24
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd90      	pop	{r4, r7, pc}

08014c38 <mg_tls_hexdump>:
    0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
    0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
    0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

// helper to hexdump buffers inline
static void mg_tls_hexdump(const char *msg, uint8_t *buf, size_t bufsz) {
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b086      	sub	sp, #24
 8014c3c:	af02      	add	r7, sp, #8
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	607a      	str	r2, [r7, #4]
  MG_VERBOSE(("%s: %M", msg, mg_print_hex, bufsz, buf));
 8014c44:	4b0b      	ldr	r3, [pc, #44]	@ (8014c74 <mg_tls_hexdump+0x3c>)
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	2b03      	cmp	r3, #3
 8014c4a:	dd0e      	ble.n	8014c6a <mg_tls_hexdump+0x32>
 8014c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8014c78 <mg_tls_hexdump+0x40>)
 8014c4e:	f642 22dc 	movw	r2, #10972	@ 0x2adc
 8014c52:	490a      	ldr	r1, [pc, #40]	@ (8014c7c <mg_tls_hexdump+0x44>)
 8014c54:	2004      	movs	r0, #4
 8014c56:	f7f7 fbed 	bl	800c434 <mg_log_prefix>
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	9300      	str	r3, [sp, #0]
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	4a07      	ldr	r2, [pc, #28]	@ (8014c80 <mg_tls_hexdump+0x48>)
 8014c62:	68f9      	ldr	r1, [r7, #12]
 8014c64:	4807      	ldr	r0, [pc, #28]	@ (8014c84 <mg_tls_hexdump+0x4c>)
 8014c66:	f7f7 fc35 	bl	800c4d4 <mg_log>
}
 8014c6a:	bf00      	nop
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}
 8014c72:	bf00      	nop
 8014c74:	24000258 	.word	0x24000258
 8014c78:	08028204 	.word	0x08028204
 8014c7c:	08024478 	.word	0x08024478
 8014c80:	08010d45 	.word	0x08010d45
 8014c84:	08025e34 	.word	0x08025e34

08014c88 <mg_der_parse>:
  uint8_t type;
  uint32_t len;
  uint8_t *value;
};

static int mg_der_parse(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8014c88:	b480      	push	{r7}
 8014c8a:	b089      	sub	sp, #36	@ 0x24
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	60b9      	str	r1, [r7, #8]
 8014c92:	607a      	str	r2, [r7, #4]
  size_t header_len = 2;
 8014c94:	2302      	movs	r3, #2
 8014c96:	61fb      	str	r3, [r7, #28]
  uint32_t len = dersz < 2 ? 0 : der[1];
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d903      	bls.n	8014ca6 <mg_der_parse+0x1e>
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	3301      	adds	r3, #1
 8014ca2:	781b      	ldrb	r3, [r3, #0]
 8014ca4:	e000      	b.n	8014ca8 <mg_der_parse+0x20>
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	61bb      	str	r3, [r7, #24]
  if (dersz < 2) return -1;  // Invalid DER
 8014caa:	68bb      	ldr	r3, [r7, #8]
 8014cac:	2b01      	cmp	r3, #1
 8014cae:	d802      	bhi.n	8014cb6 <mg_der_parse+0x2e>
 8014cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb4:	e042      	b.n	8014d3c <mg_der_parse+0xb4>
  tlv->type = der[0];
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	781a      	ldrb	r2, [r3, #0]
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	701a      	strb	r2, [r3, #0]
  if (len > 0x7F) {  // long-form length
 8014cbe:	69bb      	ldr	r3, [r7, #24]
 8014cc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8014cc2:	d927      	bls.n	8014d14 <mg_der_parse+0x8c>
    uint8_t len_bytes = len & 0x7F;
 8014cc4:	69bb      	ldr	r3, [r7, #24]
 8014cc6:	b2db      	uxtb	r3, r3
 8014cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014ccc:	75bb      	strb	r3, [r7, #22]
    if (dersz < (size_t) (2 + len_bytes)) return -1;
 8014cce:	7dbb      	ldrb	r3, [r7, #22]
 8014cd0:	3302      	adds	r3, #2
 8014cd2:	461a      	mov	r2, r3
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	4293      	cmp	r3, r2
 8014cd8:	d202      	bcs.n	8014ce0 <mg_der_parse+0x58>
 8014cda:	f04f 33ff 	mov.w	r3, #4294967295
 8014cde:	e02d      	b.n	8014d3c <mg_der_parse+0xb4>
    len = 0;
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	75fb      	strb	r3, [r7, #23]
 8014ce8:	e00c      	b.n	8014d04 <mg_der_parse+0x7c>
      len = (len << 8) | der[2 + i];
 8014cea:	69bb      	ldr	r3, [r7, #24]
 8014cec:	021b      	lsls	r3, r3, #8
 8014cee:	7dfa      	ldrb	r2, [r7, #23]
 8014cf0:	3202      	adds	r2, #2
 8014cf2:	4611      	mov	r1, r2
 8014cf4:	68fa      	ldr	r2, [r7, #12]
 8014cf6:	440a      	add	r2, r1
 8014cf8:	7812      	ldrb	r2, [r2, #0]
 8014cfa:	4313      	orrs	r3, r2
 8014cfc:	61bb      	str	r3, [r7, #24]
    for (uint8_t i = 0; i < len_bytes; i++) {
 8014cfe:	7dfb      	ldrb	r3, [r7, #23]
 8014d00:	3301      	adds	r3, #1
 8014d02:	75fb      	strb	r3, [r7, #23]
 8014d04:	7dfa      	ldrb	r2, [r7, #23]
 8014d06:	7dbb      	ldrb	r3, [r7, #22]
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d3ee      	bcc.n	8014cea <mg_der_parse+0x62>
    }
    header_len += len_bytes;
 8014d0c:	7dbb      	ldrb	r3, [r7, #22]
 8014d0e:	69fa      	ldr	r2, [r7, #28]
 8014d10:	4413      	add	r3, r2
 8014d12:	61fb      	str	r3, [r7, #28]
  }
  if (dersz < header_len + len) return -1;
 8014d14:	69fa      	ldr	r2, [r7, #28]
 8014d16:	69bb      	ldr	r3, [r7, #24]
 8014d18:	4413      	add	r3, r2
 8014d1a:	68ba      	ldr	r2, [r7, #8]
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d202      	bcs.n	8014d26 <mg_der_parse+0x9e>
 8014d20:	f04f 33ff 	mov.w	r3, #4294967295
 8014d24:	e00a      	b.n	8014d3c <mg_der_parse+0xb4>
  tlv->len = len;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	69ba      	ldr	r2, [r7, #24]
 8014d2a:	605a      	str	r2, [r3, #4]
  tlv->value = der + header_len;
 8014d2c:	68fa      	ldr	r2, [r7, #12]
 8014d2e:	69fb      	ldr	r3, [r7, #28]
 8014d30:	441a      	add	r2, r3
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	609a      	str	r2, [r3, #8]
  return (int) (header_len + len);
 8014d36:	69fa      	ldr	r2, [r7, #28]
 8014d38:	69bb      	ldr	r3, [r7, #24]
 8014d3a:	4413      	add	r3, r2
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	3724      	adds	r7, #36	@ 0x24
 8014d40:	46bd      	mov	sp, r7
 8014d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d46:	4770      	bx	lr

08014d48 <mg_der_next>:

static int mg_der_next(struct mg_der_tlv *parent, struct mg_der_tlv *child) {
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b084      	sub	sp, #16
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
  if (parent->len == 0) return 0;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	685b      	ldr	r3, [r3, #4]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d101      	bne.n	8014d5e <mg_der_next+0x16>
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	e01b      	b.n	8014d96 <mg_der_next+0x4e>
  int consumed = mg_der_parse(parent->value, parent->len, child);
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	6898      	ldr	r0, [r3, #8]
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	685b      	ldr	r3, [r3, #4]
 8014d66:	683a      	ldr	r2, [r7, #0]
 8014d68:	4619      	mov	r1, r3
 8014d6a:	f7ff ff8d 	bl	8014c88 <mg_der_parse>
 8014d6e:	60f8      	str	r0, [r7, #12]
  if (consumed < 0) return -1;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	da02      	bge.n	8014d7c <mg_der_next+0x34>
 8014d76:	f04f 33ff 	mov.w	r3, #4294967295
 8014d7a:	e00c      	b.n	8014d96 <mg_der_next+0x4e>
  parent->value += consumed;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	689a      	ldr	r2, [r3, #8]
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	441a      	add	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	609a      	str	r2, [r3, #8]
  parent->len -= (uint32_t) consumed;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	685a      	ldr	r2, [r3, #4]
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	1ad2      	subs	r2, r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	605a      	str	r2, [r3, #4]
  return 1;
 8014d94:	2301      	movs	r3, #1
}
 8014d96:	4618      	mov	r0, r3
 8014d98:	3710      	adds	r7, #16
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}

08014d9e <mg_der_find_oid>:

static int mg_der_find_oid(struct mg_der_tlv *tlv, const uint8_t *oid,
                           size_t oid_len, struct mg_der_tlv *found) {
 8014d9e:	b580      	push	{r7, lr}
 8014da0:	b08e      	sub	sp, #56	@ 0x38
 8014da2:	af00      	add	r7, sp, #0
 8014da4:	60f8      	str	r0, [r7, #12]
 8014da6:	60b9      	str	r1, [r7, #8]
 8014da8:	607a      	str	r2, [r7, #4]
 8014daa:	603b      	str	r3, [r7, #0]
  struct mg_der_tlv parent, child;
  parent = *tlv;
 8014dac:	68fa      	ldr	r2, [r7, #12]
 8014dae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014db2:	ca07      	ldmia	r2, {r0, r1, r2}
 8014db4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  while (mg_der_next(&parent, &child) > 0) {
 8014db8:	e031      	b.n	8014e1e <mg_der_find_oid+0x80>
    if (child.type == 0x06 && child.len == oid_len &&
 8014dba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014dbe:	2b06      	cmp	r3, #6
 8014dc0:	d114      	bne.n	8014dec <mg_der_find_oid+0x4e>
 8014dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dc4:	687a      	ldr	r2, [r7, #4]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d110      	bne.n	8014dec <mg_der_find_oid+0x4e>
        memcmp(child.value, oid, oid_len) == 0) {
 8014dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014dcc:	687a      	ldr	r2, [r7, #4]
 8014dce:	68b9      	ldr	r1, [r7, #8]
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f00e fcba 	bl	802374a <memcmp>
 8014dd6:	4603      	mov	r3, r0
    if (child.type == 0x06 && child.len == oid_len &&
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d107      	bne.n	8014dec <mg_der_find_oid+0x4e>
      return mg_der_next(&parent, found);
 8014ddc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014de0:	6839      	ldr	r1, [r7, #0]
 8014de2:	4618      	mov	r0, r3
 8014de4:	f7ff ffb0 	bl	8014d48 <mg_der_next>
 8014de8:	4603      	mov	r3, r0
 8014dea:	e024      	b.n	8014e36 <mg_der_find_oid+0x98>
    } else if (child.type & 0x20) {
 8014dec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014df0:	f003 0320 	and.w	r3, r3, #32
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d012      	beq.n	8014e1e <mg_der_find_oid+0x80>
      struct mg_der_tlv sub_parent = child;
 8014df8:	f107 0314 	add.w	r3, r7, #20
 8014dfc:	f107 0220 	add.w	r2, r7, #32
 8014e00:	ca07      	ldmia	r2, {r0, r1, r2}
 8014e02:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      if (mg_der_find_oid(&sub_parent, oid, oid_len, found)) return 1;
 8014e06:	f107 0014 	add.w	r0, r7, #20
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	687a      	ldr	r2, [r7, #4]
 8014e0e:	68b9      	ldr	r1, [r7, #8]
 8014e10:	f7ff ffc5 	bl	8014d9e <mg_der_find_oid>
 8014e14:	4603      	mov	r3, r0
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d001      	beq.n	8014e1e <mg_der_find_oid+0x80>
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	e00b      	b.n	8014e36 <mg_der_find_oid+0x98>
  while (mg_der_next(&parent, &child) > 0) {
 8014e1e:	f107 0220 	add.w	r2, r7, #32
 8014e22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014e26:	4611      	mov	r1, r2
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f7ff ff8d 	bl	8014d48 <mg_der_next>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	dcc2      	bgt.n	8014dba <mg_der_find_oid+0x1c>
    }
  }
  return 0;
 8014e34:	2300      	movs	r3, #0
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3738      	adds	r7, #56	@ 0x38
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}

08014e3e <mg_der_to_tlv>:
  }
}
#endif

// parse DER into a TLV record
static int mg_der_to_tlv(uint8_t *der, size_t dersz, struct mg_der_tlv *tlv) {
 8014e3e:	b480      	push	{r7}
 8014e40:	b087      	sub	sp, #28
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	60f8      	str	r0, [r7, #12]
 8014e46:	60b9      	str	r1, [r7, #8]
 8014e48:	607a      	str	r2, [r7, #4]
  if (dersz < 2) {
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	2b01      	cmp	r3, #1
 8014e4e:	d802      	bhi.n	8014e56 <mg_der_to_tlv+0x18>
    return -1;
 8014e50:	f04f 33ff 	mov.w	r3, #4294967295
 8014e54:	e041      	b.n	8014eda <mg_der_to_tlv+0x9c>
  }
  tlv->type = der[0];
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	781a      	ldrb	r2, [r3, #0]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	701a      	strb	r2, [r3, #0]
  tlv->len = der[1];
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	3301      	adds	r3, #1
 8014e62:	781b      	ldrb	r3, [r3, #0]
 8014e64:	461a      	mov	r2, r3
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	605a      	str	r2, [r3, #4]
  tlv->value = der + 2;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	1c9a      	adds	r2, r3, #2
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	609a      	str	r2, [r3, #8]
  if (tlv->len > 0x7f) {
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	685b      	ldr	r3, [r3, #4]
 8014e76:	2b7f      	cmp	r3, #127	@ 0x7f
 8014e78:	d921      	bls.n	8014ebe <mg_der_to_tlv+0x80>
    uint32_t i, n = tlv->len - 0x80;
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	685b      	ldr	r3, [r3, #4]
 8014e7e:	3b80      	subs	r3, #128	@ 0x80
 8014e80:	613b      	str	r3, [r7, #16]
    tlv->len = 0;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2200      	movs	r2, #0
 8014e86:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8014e88:	2300      	movs	r3, #0
 8014e8a:	617b      	str	r3, [r7, #20]
 8014e8c:	e00d      	b.n	8014eaa <mg_der_to_tlv+0x6c>
      tlv->len = (tlv->len << 8) | (der[2 + i]);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	021b      	lsls	r3, r3, #8
 8014e94:	697a      	ldr	r2, [r7, #20]
 8014e96:	3202      	adds	r2, #2
 8014e98:	68f9      	ldr	r1, [r7, #12]
 8014e9a:	440a      	add	r2, r1
 8014e9c:	7812      	ldrb	r2, [r2, #0]
 8014e9e:	431a      	orrs	r2, r3
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	605a      	str	r2, [r3, #4]
    for (i = 0; i < n; i++) {
 8014ea4:	697b      	ldr	r3, [r7, #20]
 8014ea6:	3301      	adds	r3, #1
 8014ea8:	617b      	str	r3, [r7, #20]
 8014eaa:	697a      	ldr	r2, [r7, #20]
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d3ed      	bcc.n	8014e8e <mg_der_to_tlv+0x50>
    }
    tlv->value = der + 2 + n;
 8014eb2:	693b      	ldr	r3, [r7, #16]
 8014eb4:	3302      	adds	r3, #2
 8014eb6:	68fa      	ldr	r2, [r7, #12]
 8014eb8:	441a      	add	r2, r3
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	609a      	str	r2, [r3, #8]
  }
  if (der + dersz < tlv->value + tlv->len) {
 8014ebe:	68fa      	ldr	r2, [r7, #12]
 8014ec0:	68bb      	ldr	r3, [r7, #8]
 8014ec2:	441a      	add	r2, r3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6899      	ldr	r1, [r3, #8]
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	685b      	ldr	r3, [r3, #4]
 8014ecc:	440b      	add	r3, r1
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d202      	bcs.n	8014ed8 <mg_der_to_tlv+0x9a>
    return -1;
 8014ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ed6:	e000      	b.n	8014eda <mg_der_to_tlv+0x9c>
  }
  return 0;
 8014ed8:	2300      	movs	r3, #0
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	371c      	adds	r7, #28
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee4:	4770      	bx	lr

08014ee6 <mg_tls_got_record>:

// Did we receive a full TLS record in the c->rtls buffer?
static bool mg_tls_got_record(struct mg_connection *c) {
 8014ee6:	b480      	push	{r7}
 8014ee8:	b083      	sub	sp, #12
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014ef2:	2b04      	cmp	r3, #4
 8014ef4:	d915      	bls.n	8014f22 <mg_tls_got_record+0x3c>
         c->rtls.len >=
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
             (size_t) (TLS_RECHDR_SIZE + MG_LOAD_BE16(c->rtls.buf + 3));
 8014efa:	687a      	ldr	r2, [r7, #4]
 8014efc:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014efe:	3203      	adds	r2, #3
 8014f00:	7812      	ldrb	r2, [r2, #0]
 8014f02:	b212      	sxth	r2, r2
 8014f04:	0212      	lsls	r2, r2, #8
 8014f06:	b211      	sxth	r1, r2
 8014f08:	687a      	ldr	r2, [r7, #4]
 8014f0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014f0c:	3204      	adds	r2, #4
 8014f0e:	7812      	ldrb	r2, [r2, #0]
 8014f10:	b212      	sxth	r2, r2
 8014f12:	430a      	orrs	r2, r1
 8014f14:	b212      	sxth	r2, r2
 8014f16:	b292      	uxth	r2, r2
 8014f18:	3205      	adds	r2, #5
  return c->rtls.len >= (size_t) TLS_RECHDR_SIZE &&
 8014f1a:	4293      	cmp	r3, r2
 8014f1c:	d301      	bcc.n	8014f22 <mg_tls_got_record+0x3c>
 8014f1e:	2301      	movs	r3, #1
 8014f20:	e000      	b.n	8014f24 <mg_tls_got_record+0x3e>
 8014f22:	2300      	movs	r3, #0
 8014f24:	f003 0301 	and.w	r3, r3, #1
 8014f28:	b2db      	uxtb	r3, r3
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	370c      	adds	r7, #12
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f34:	4770      	bx	lr

08014f36 <mg_tls_drop_record>:

// Remove a single TLS record from the recv buffer
static void mg_tls_drop_record(struct mg_connection *c) {
 8014f36:	b580      	push	{r7, lr}
 8014f38:	b084      	sub	sp, #16
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	6078      	str	r0, [r7, #4]
  struct mg_iobuf *rio = &c->rtls;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	3368      	adds	r3, #104	@ 0x68
 8014f42:	60fb      	str	r3, [r7, #12]
  uint16_t n = MG_LOAD_BE16(rio->buf + 3) + TLS_RECHDR_SIZE;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	3303      	adds	r3, #3
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	b21b      	sxth	r3, r3
 8014f4e:	021b      	lsls	r3, r3, #8
 8014f50:	b21a      	sxth	r2, r3
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	3304      	adds	r3, #4
 8014f58:	781b      	ldrb	r3, [r3, #0]
 8014f5a:	b21b      	sxth	r3, r3
 8014f5c:	4313      	orrs	r3, r2
 8014f5e:	b21b      	sxth	r3, r3
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	3305      	adds	r3, #5
 8014f64:	817b      	strh	r3, [r7, #10]
  mg_iobuf_del(rio, 0, n);
 8014f66:	897b      	ldrh	r3, [r7, #10]
 8014f68:	461a      	mov	r2, r3
 8014f6a:	2100      	movs	r1, #0
 8014f6c:	68f8      	ldr	r0, [r7, #12]
 8014f6e:	f7f6 fb95 	bl	800b69c <mg_iobuf_del>
}
 8014f72:	bf00      	nop
 8014f74:	3710      	adds	r7, #16
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}
	...

08014f7c <mg_tls_drop_message>:

// Remove a single TLS message from decrypted buffer, remove the wrapping
// record if it was the last message within a record
static void mg_tls_drop_message(struct mg_connection *c) {
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b086      	sub	sp, #24
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
  uint32_t len;
  struct tls_data *tls = (struct tls_data *) c->tls;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8014f8a:	617b      	str	r3, [r7, #20]
  unsigned char *recv_buf = &c->rtls.buf[tls->recv_offset];
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8014f90:	697b      	ldr	r3, [r7, #20]
 8014f92:	695b      	ldr	r3, [r3, #20]
 8014f94:	4413      	add	r3, r2
 8014f96:	613b      	str	r3, [r7, #16]
  if (tls->recv_len == 0) return;
 8014f98:	697b      	ldr	r3, [r7, #20]
 8014f9a:	699b      	ldr	r3, [r3, #24]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d033      	beq.n	8015008 <mg_tls_drop_message+0x8c>
  len = MG_LOAD_BE24(recv_buf + 1) + TLS_MSGHDR_SIZE;
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	041a      	lsls	r2, r3, #16
 8014fa8:	693b      	ldr	r3, [r7, #16]
 8014faa:	3302      	adds	r3, #2
 8014fac:	781b      	ldrb	r3, [r3, #0]
 8014fae:	021b      	lsls	r3, r3, #8
 8014fb0:	4313      	orrs	r3, r2
 8014fb2:	693a      	ldr	r2, [r7, #16]
 8014fb4:	3203      	adds	r2, #3
 8014fb6:	7812      	ldrb	r2, [r2, #0]
 8014fb8:	4313      	orrs	r3, r2
 8014fba:	3304      	adds	r3, #4
 8014fbc:	60fb      	str	r3, [r7, #12]
  if (tls->recv_len < len) {
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	699b      	ldr	r3, [r3, #24]
 8014fc2:	68fa      	ldr	r2, [r7, #12]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d904      	bls.n	8014fd2 <mg_tls_drop_message+0x56>
    mg_error(c, "wrong size");
 8014fc8:	4911      	ldr	r1, [pc, #68]	@ (8015010 <mg_tls_drop_message+0x94>)
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7f1 fd22 	bl	8006a14 <mg_error>
    return;
 8014fd0:	e01b      	b.n	801500a <mg_tls_drop_message+0x8e>
  }
  mg_sha256_update(&tls->sha256, recv_buf, len);
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	3320      	adds	r3, #32
 8014fd6:	68fa      	ldr	r2, [r7, #12]
 8014fd8:	6939      	ldr	r1, [r7, #16]
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7fd fdec 	bl	8012bb8 <mg_sha256_update>
  tls->recv_offset += len;
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	695a      	ldr	r2, [r3, #20]
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	441a      	add	r2, r3
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	615a      	str	r2, [r3, #20]
  tls->recv_len -= len;
 8014fec:	697b      	ldr	r3, [r7, #20]
 8014fee:	699a      	ldr	r2, [r3, #24]
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	1ad2      	subs	r2, r2, r3
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8014ff8:	697b      	ldr	r3, [r7, #20]
 8014ffa:	699b      	ldr	r3, [r3, #24]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d104      	bne.n	801500a <mg_tls_drop_message+0x8e>
    mg_tls_drop_record(c);
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f7ff ff98 	bl	8014f36 <mg_tls_drop_record>
 8015006:	e000      	b.n	801500a <mg_tls_drop_message+0x8e>
  if (tls->recv_len == 0) return;
 8015008:	bf00      	nop
  }
}
 801500a:	3718      	adds	r7, #24
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	08025e3c 	.word	0x08025e3c

08015014 <mg_tls_derive_secret>:

// TLS1.3 secret derivation based on the key label
static void mg_tls_derive_secret(const char *label, uint8_t *key, size_t keysz,
                                 uint8_t *data, size_t datasz, uint8_t *hash,
                                 size_t hashsz) {
 8015014:	b590      	push	{r4, r7, lr}
 8015016:	b0d1      	sub	sp, #324	@ 0x144
 8015018:	af02      	add	r7, sp, #8
 801501a:	f507 749c 	add.w	r4, r7, #312	@ 0x138
 801501e:	f5a4 7496 	sub.w	r4, r4, #300	@ 0x12c
 8015022:	6020      	str	r0, [r4, #0]
 8015024:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8015028:	f5a0 7098 	sub.w	r0, r0, #304	@ 0x130
 801502c:	6001      	str	r1, [r0, #0]
 801502e:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8015032:	f5a1 719a 	sub.w	r1, r1, #308	@ 0x134
 8015036:	600a      	str	r2, [r1, #0]
 8015038:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801503c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8015040:	6013      	str	r3, [r2, #0]
  size_t labelsz = strlen(label);
 8015042:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015046:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801504a:	6818      	ldr	r0, [r3, #0]
 801504c:	f7eb f9c0 	bl	80003d0 <strlen>
 8015050:	f8c7 0134 	str.w	r0, [r7, #308]	@ 0x134
  uint8_t secret[32];
  uint8_t packed[256] = {0, (uint8_t) hashsz, (uint8_t) labelsz};
 8015054:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015058:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801505c:	4618      	mov	r0, r3
 801505e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015062:	461a      	mov	r2, r3
 8015064:	2100      	movs	r1, #0
 8015066:	f00e fb9a 	bl	802379e <memset>
 801506a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801506e:	b2da      	uxtb	r2, r3
 8015070:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015074:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8015078:	705a      	strb	r2, [r3, #1]
 801507a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801507e:	b2da      	uxtb	r2, r3
 8015080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015084:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8015088:	709a      	strb	r2, [r3, #2]
  // TODO: assert lengths of label, key, data and hash
  if (labelsz > 0) memmove(packed + 3, label, labelsz);
 801508a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801508e:	2b00      	cmp	r3, #0
 8015090:	d00c      	beq.n	80150ac <mg_tls_derive_secret+0x98>
 8015092:	f107 0314 	add.w	r3, r7, #20
 8015096:	3303      	adds	r3, #3
 8015098:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801509c:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 80150a0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80150a4:	6809      	ldr	r1, [r1, #0]
 80150a6:	4618      	mov	r0, r3
 80150a8:	f00e fb5f 	bl	802376a <memmove>
  packed[3 + labelsz] = (uint8_t) datasz;
 80150ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150b0:	3303      	adds	r3, #3
 80150b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80150b6:	b2d1      	uxtb	r1, r2
 80150b8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80150bc:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80150c0:	54d1      	strb	r1, [r2, r3]
  if (datasz > 0) memmove(packed + labelsz + 4, data, datasz);
 80150c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d00e      	beq.n	80150e8 <mg_tls_derive_secret+0xd4>
 80150ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80150ce:	3304      	adds	r3, #4
 80150d0:	f107 0214 	add.w	r2, r7, #20
 80150d4:	18d0      	adds	r0, r2, r3
 80150d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80150da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80150de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80150e2:	6819      	ldr	r1, [r3, #0]
 80150e4:	f00e fb41 	bl	802376a <memmove>
  packed[4 + labelsz + datasz] = 1;
 80150e8:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80150ec:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80150f0:	4413      	add	r3, r2
 80150f2:	3304      	adds	r3, #4
 80150f4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80150f8:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 80150fc:	2101      	movs	r1, #1
 80150fe:	54d1      	strb	r1, [r2, r3]

  mg_hmac_sha256(secret, key, keysz, packed, 5 + labelsz + datasz);
 8015100:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8015104:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8015108:	4413      	add	r3, r2
 801510a:	3305      	adds	r3, #5
 801510c:	f107 0414 	add.w	r4, r7, #20
 8015110:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015114:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8015118:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 801511c:	f5a1 7198 	sub.w	r1, r1, #304	@ 0x130
 8015120:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 8015124:	9300      	str	r3, [sp, #0]
 8015126:	4623      	mov	r3, r4
 8015128:	6812      	ldr	r2, [r2, #0]
 801512a:	6809      	ldr	r1, [r1, #0]
 801512c:	f7fd fed1 	bl	8012ed2 <mg_hmac_sha256>
  memmove(hash, secret, hashsz);
 8015130:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8015134:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8015138:	4619      	mov	r1, r3
 801513a:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 801513e:	f00e fb14 	bl	802376a <memmove>
}
 8015142:	bf00      	nop
 8015144:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8015148:	46bd      	mov	sp, r7
 801514a:	bd90      	pop	{r4, r7, pc}

0801514c <mg_tls_generate_handshake_keys>:

// at this point we have x25519 shared secret, we can generate a set of derived
// handshake encryption keys
static void mg_tls_generate_handshake_keys(struct mg_connection *c) {
 801514c:	b580      	push	{r7, lr}
 801514e:	b0cc      	sub	sp, #304	@ 0x130
 8015150:	af04      	add	r7, sp, #16
 8015152:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015156:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801515a:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801515c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015160:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801516a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t pre_extract_secret[32];
  uint8_t hello_hash[32];
  uint8_t server_hs_secret[32];
  uint8_t client_hs_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 801516e:	2320      	movs	r3, #32
 8015170:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_hmac_sha256(early_secret, NULL, 0, zeros, sizeof(zeros));
 8015174:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8015178:	2320      	movs	r3, #32
 801517a:	9300      	str	r3, [sp, #0]
 801517c:	4b89      	ldr	r3, [pc, #548]	@ (80153a4 <mg_tls_generate_handshake_keys+0x258>)
 801517e:	2200      	movs	r2, #0
 8015180:	2100      	movs	r1, #0
 8015182:	f7fd fea6 	bl	8012ed2 <mg_hmac_sha256>
  mg_tls_derive_secret("tls13 derived", early_secret, 32, zeros_sha256_digest,
 8015186:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 801518a:	2320      	movs	r3, #32
 801518c:	9302      	str	r3, [sp, #8]
 801518e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8015192:	9301      	str	r3, [sp, #4]
 8015194:	2320      	movs	r3, #32
 8015196:	9300      	str	r3, [sp, #0]
 8015198:	4b83      	ldr	r3, [pc, #524]	@ (80153a8 <mg_tls_generate_handshake_keys+0x25c>)
 801519a:	2220      	movs	r2, #32
 801519c:	4883      	ldr	r0, [pc, #524]	@ (80153ac <mg_tls_generate_handshake_keys+0x260>)
 801519e:	f7ff ff39 	bl	8015014 <mg_tls_derive_secret>
                       32, pre_extract_secret, 32);
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 80151a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151a6:	f503 6091 	add.w	r0, r3, #1160	@ 0x488
                 sizeof(pre_extract_secret), tls->x25519_sec,
 80151aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151ae:	33f0      	adds	r3, #240	@ 0xf0
  mg_hmac_sha256(tls->enc.handshake_secret, pre_extract_secret,
 80151b0:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80151b4:	2220      	movs	r2, #32
 80151b6:	9200      	str	r2, [sp, #0]
 80151b8:	2220      	movs	r2, #32
 80151ba:	f7fd fe8a 	bl	8012ed2 <mg_hmac_sha256>
                 sizeof(tls->x25519_sec));
  mg_tls_hexdump("hs secret", tls->enc.handshake_secret, 32);
 80151be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151c2:	f503 6391 	add.w	r3, r3, #1160	@ 0x488
 80151c6:	2220      	movs	r2, #32
 80151c8:	4619      	mov	r1, r3
 80151ca:	4879      	ldr	r0, [pc, #484]	@ (80153b0 <mg_tls_generate_handshake_keys+0x264>)
 80151cc:	f7ff fd34 	bl	8014c38 <mg_tls_hexdump>

  // mg_sha256_final is not idempotent, need to copy sha256 context to calculate
  // the digest
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 80151d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80151d4:	f103 0120 	add.w	r1, r3, #32
 80151d8:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80151dc:	2270      	movs	r2, #112	@ 0x70
 80151de:	4618      	mov	r0, r3
 80151e0:	f00e fac3 	bl	802376a <memmove>
  mg_sha256_final(hello_hash, &sha256);
 80151e4:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80151e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80151ec:	4611      	mov	r1, r2
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fd fd1b 	bl	8012c2a <mg_sha256_final>

  mg_tls_hexdump("hello hash", hello_hash, 32);
 80151f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80151f8:	2220      	movs	r2, #32
 80151fa:	4619      	mov	r1, r3
 80151fc:	486d      	ldr	r0, [pc, #436]	@ (80153b4 <mg_tls_generate_handshake_keys+0x268>)
 80151fe:	f7ff fd1b 	bl	8014c38 <mg_tls_hexdump>
  // derive keys needed for the rest of the handshake
  mg_tls_derive_secret("tls13 s hs traffic", tls->enc.handshake_secret, 32,
 8015202:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015206:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 801520a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801520e:	2320      	movs	r3, #32
 8015210:	9302      	str	r3, [sp, #8]
 8015212:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015216:	9301      	str	r3, [sp, #4]
 8015218:	2320      	movs	r3, #32
 801521a:	9300      	str	r3, [sp, #0]
 801521c:	4613      	mov	r3, r2
 801521e:	2220      	movs	r2, #32
 8015220:	4865      	ldr	r0, [pc, #404]	@ (80153b8 <mg_tls_generate_handshake_keys+0x26c>)
 8015222:	f7ff fef7 	bl	8015014 <mg_tls_derive_secret>
                       hello_hash, 32, server_hs_secret, 32);
  mg_tls_derive_secret("tls13 c hs traffic", tls->enc.handshake_secret, 32,
 8015226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801522a:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 801522e:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8015232:	2320      	movs	r3, #32
 8015234:	9302      	str	r3, [sp, #8]
 8015236:	f107 0308 	add.w	r3, r7, #8
 801523a:	9301      	str	r3, [sp, #4]
 801523c:	2320      	movs	r3, #32
 801523e:	9300      	str	r3, [sp, #0]
 8015240:	4613      	mov	r3, r2
 8015242:	2220      	movs	r2, #32
 8015244:	485d      	ldr	r0, [pc, #372]	@ (80153bc <mg_tls_generate_handshake_keys+0x270>)
 8015246:	f7ff fee5 	bl	8015014 <mg_tls_derive_secret>
                       hello_hash, 32, client_hs_secret, 32);

  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 801524a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801524e:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_hs_secret, 32, NULL, 0,
 8015252:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8015256:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801525a:	9202      	str	r2, [sp, #8]
 801525c:	9301      	str	r3, [sp, #4]
 801525e:	2300      	movs	r3, #0
 8015260:	9300      	str	r3, [sp, #0]
 8015262:	2300      	movs	r3, #0
 8015264:	2220      	movs	r2, #32
 8015266:	4856      	ldr	r0, [pc, #344]	@ (80153c0 <mg_tls_generate_handshake_keys+0x274>)
 8015268:	f7ff fed4 	bl	8015014 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 801526c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015270:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_hs_secret, 32, NULL, 0,
 8015274:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8015278:	220c      	movs	r2, #12
 801527a:	9202      	str	r2, [sp, #8]
 801527c:	9301      	str	r3, [sp, #4]
 801527e:	2300      	movs	r3, #0
 8015280:	9300      	str	r3, [sp, #0]
 8015282:	2300      	movs	r3, #0
 8015284:	2220      	movs	r2, #32
 8015286:	484f      	ldr	r0, [pc, #316]	@ (80153c4 <mg_tls_generate_handshake_keys+0x278>)
 8015288:	f7ff fec4 	bl	8015014 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
                       tls->enc.server_finished_key, 32);
 801528c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015290:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
  mg_tls_derive_secret("tls13 finished", server_hs_secret, 32, NULL, 0,
 8015294:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8015298:	2220      	movs	r2, #32
 801529a:	9202      	str	r2, [sp, #8]
 801529c:	9301      	str	r3, [sp, #4]
 801529e:	2300      	movs	r3, #0
 80152a0:	9300      	str	r3, [sp, #0]
 80152a2:	2300      	movs	r3, #0
 80152a4:	2220      	movs	r2, #32
 80152a6:	4848      	ldr	r0, [pc, #288]	@ (80153c8 <mg_tls_generate_handshake_keys+0x27c>)
 80152a8:	f7ff feb4 	bl	8015014 <mg_tls_derive_secret>

  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 80152ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80152b0:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_hs_secret, 32, NULL, 0,
 80152b4:	f107 0108 	add.w	r1, r7, #8
 80152b8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80152bc:	9202      	str	r2, [sp, #8]
 80152be:	9301      	str	r3, [sp, #4]
 80152c0:	2300      	movs	r3, #0
 80152c2:	9300      	str	r3, [sp, #0]
 80152c4:	2300      	movs	r3, #0
 80152c6:	2220      	movs	r2, #32
 80152c8:	483d      	ldr	r0, [pc, #244]	@ (80153c0 <mg_tls_generate_handshake_keys+0x274>)
 80152ca:	f7ff fea3 	bl	8015014 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 80152ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80152d2:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_hs_secret, 32, NULL, 0,
 80152d6:	f107 0108 	add.w	r1, r7, #8
 80152da:	220c      	movs	r2, #12
 80152dc:	9202      	str	r2, [sp, #8]
 80152de:	9301      	str	r3, [sp, #4]
 80152e0:	2300      	movs	r3, #0
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	2300      	movs	r3, #0
 80152e6:	2220      	movs	r2, #32
 80152e8:	4836      	ldr	r0, [pc, #216]	@ (80153c4 <mg_tls_generate_handshake_keys+0x278>)
 80152ea:	f7ff fe93 	bl	8015014 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
                       tls->enc.client_finished_key, 32);
 80152ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80152f2:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
  mg_tls_derive_secret("tls13 finished", client_hs_secret, 32, NULL, 0,
 80152f6:	f107 0108 	add.w	r1, r7, #8
 80152fa:	2220      	movs	r2, #32
 80152fc:	9202      	str	r2, [sp, #8]
 80152fe:	9301      	str	r3, [sp, #4]
 8015300:	2300      	movs	r3, #0
 8015302:	9300      	str	r3, [sp, #0]
 8015304:	2300      	movs	r3, #0
 8015306:	2220      	movs	r2, #32
 8015308:	482f      	ldr	r0, [pc, #188]	@ (80153c8 <mg_tls_generate_handshake_keys+0x27c>)
 801530a:	f7ff fe83 	bl	8015014 <mg_tls_derive_secret>

  mg_tls_hexdump("s hs traffic", server_hs_secret, 32);
 801530e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8015312:	2220      	movs	r2, #32
 8015314:	4619      	mov	r1, r3
 8015316:	482d      	ldr	r0, [pc, #180]	@ (80153cc <mg_tls_generate_handshake_keys+0x280>)
 8015318:	f7ff fc8e 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 801531c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015320:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8015324:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8015328:	4619      	mov	r1, r3
 801532a:	4829      	ldr	r0, [pc, #164]	@ (80153d0 <mg_tls_generate_handshake_keys+0x284>)
 801532c:	f7ff fc84 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8015330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015334:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8015338:	220c      	movs	r2, #12
 801533a:	4619      	mov	r1, r3
 801533c:	4825      	ldr	r0, [pc, #148]	@ (80153d4 <mg_tls_generate_handshake_keys+0x288>)
 801533e:	f7ff fc7b 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8015342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015346:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 801534a:	2220      	movs	r2, #32
 801534c:	4619      	mov	r1, r3
 801534e:	4822      	ldr	r0, [pc, #136]	@ (80153d8 <mg_tls_generate_handshake_keys+0x28c>)
 8015350:	f7ff fc72 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("c hs traffic", client_hs_secret, 32);
 8015354:	f107 0308 	add.w	r3, r7, #8
 8015358:	2220      	movs	r2, #32
 801535a:	4619      	mov	r1, r3
 801535c:	481f      	ldr	r0, [pc, #124]	@ (80153dc <mg_tls_generate_handshake_keys+0x290>)
 801535e:	f7ff fc6b 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8015362:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015366:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 801536a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801536e:	4619      	mov	r1, r3
 8015370:	481b      	ldr	r0, [pc, #108]	@ (80153e0 <mg_tls_generate_handshake_keys+0x294>)
 8015372:	f7ff fc61 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8015376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801537a:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 801537e:	220c      	movs	r2, #12
 8015380:	4619      	mov	r1, r3
 8015382:	4818      	ldr	r0, [pc, #96]	@ (80153e4 <mg_tls_generate_handshake_keys+0x298>)
 8015384:	f7ff fc58 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 8015388:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801538c:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 8015390:	2220      	movs	r2, #32
 8015392:	4619      	mov	r1, r3
 8015394:	4814      	ldr	r0, [pc, #80]	@ (80153e8 <mg_tls_generate_handshake_keys+0x29c>)
 8015396:	f7ff fc4f 	bl	8014c38 <mg_tls_hexdump>
  mg_ssl_key_log("SERVER_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 server_hs_secret, 32);
  mg_ssl_key_log("CLIENT_HANDSHAKE_TRAFFIC_SECRET", tls->random,
                 client_hs_secret, 32);
#endif
}
 801539a:	bf00      	nop
 801539c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	240010a0 	.word	0x240010a0
 80153a8:	24000280 	.word	0x24000280
 80153ac:	08025e48 	.word	0x08025e48
 80153b0:	08025e58 	.word	0x08025e58
 80153b4:	08025e64 	.word	0x08025e64
 80153b8:	08025e70 	.word	0x08025e70
 80153bc:	08025e84 	.word	0x08025e84
 80153c0:	08025e98 	.word	0x08025e98
 80153c4:	08025ea4 	.word	0x08025ea4
 80153c8:	08025eb0 	.word	0x08025eb0
 80153cc:	08025ec0 	.word	0x08025ec0
 80153d0:	08025ed0 	.word	0x08025ed0
 80153d4:	08025ed8 	.word	0x08025ed8
 80153d8:	08025ee0 	.word	0x08025ee0
 80153dc:	08025eec 	.word	0x08025eec
 80153e0:	08025efc 	.word	0x08025efc
 80153e4:	08025f04 	.word	0x08025f04
 80153e8:	08025f0c 	.word	0x08025f0c

080153ec <mg_tls_generate_application_keys>:

static void mg_tls_generate_application_keys(struct mg_connection *c) {
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b0cc      	sub	sp, #304	@ 0x130
 80153f0:	af04      	add	r7, sp, #16
 80153f2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80153f6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80153fa:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80153fc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015400:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015404:	681b      	ldr	r3, [r3, #0]
 8015406:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801540a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  uint8_t premaster_secret[32];
  uint8_t master_secret[32];
  uint8_t server_secret[32];
  uint8_t client_secret[32];
#if CHACHA20
  const size_t keysz = 32;
 801540e:	2320      	movs	r3, #32
 8015410:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
#else
  const size_t keysz = 16;
#endif

  mg_sha256_ctx sha256;
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8015414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015418:	f103 0120 	add.w	r1, r3, #32
 801541c:	f107 0308 	add.w	r3, r7, #8
 8015420:	2270      	movs	r2, #112	@ 0x70
 8015422:	4618      	mov	r0, r3
 8015424:	f00e f9a1 	bl	802376a <memmove>
  mg_sha256_final(hash, &sha256);
 8015428:	f107 0208 	add.w	r2, r7, #8
 801542c:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8015430:	4611      	mov	r1, r2
 8015432:	4618      	mov	r0, r3
 8015434:	f7fd fbf9 	bl	8012c2a <mg_sha256_final>

  mg_tls_derive_secret("tls13 derived", tls->enc.handshake_secret, 32,
 8015438:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801543c:	f503 6191 	add.w	r1, r3, #1160	@ 0x488
 8015440:	2320      	movs	r3, #32
 8015442:	9302      	str	r3, [sp, #8]
 8015444:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8015448:	9301      	str	r3, [sp, #4]
 801544a:	2320      	movs	r3, #32
 801544c:	9300      	str	r3, [sp, #0]
 801544e:	4b64      	ldr	r3, [pc, #400]	@ (80155e0 <mg_tls_generate_application_keys+0x1f4>)
 8015450:	2220      	movs	r2, #32
 8015452:	4864      	ldr	r0, [pc, #400]	@ (80155e4 <mg_tls_generate_application_keys+0x1f8>)
 8015454:	f7ff fdde 	bl	8015014 <mg_tls_derive_secret>
                       zeros_sha256_digest, 32, premaster_secret, 32);
  mg_hmac_sha256(master_secret, premaster_secret, 32, zeros, 32);
 8015458:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 801545c:	f107 00b8 	add.w	r0, r7, #184	@ 0xb8
 8015460:	2320      	movs	r3, #32
 8015462:	9300      	str	r3, [sp, #0]
 8015464:	4b60      	ldr	r3, [pc, #384]	@ (80155e8 <mg_tls_generate_application_keys+0x1fc>)
 8015466:	2220      	movs	r2, #32
 8015468:	f7fd fd33 	bl	8012ed2 <mg_hmac_sha256>

  mg_tls_derive_secret("tls13 s ap traffic", master_secret, 32, hash, 32,
 801546c:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 8015470:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8015474:	2320      	movs	r3, #32
 8015476:	9302      	str	r3, [sp, #8]
 8015478:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 801547c:	9301      	str	r3, [sp, #4]
 801547e:	2320      	movs	r3, #32
 8015480:	9300      	str	r3, [sp, #0]
 8015482:	4613      	mov	r3, r2
 8015484:	2220      	movs	r2, #32
 8015486:	4859      	ldr	r0, [pc, #356]	@ (80155ec <mg_tls_generate_application_keys+0x200>)
 8015488:	f7ff fdc4 	bl	8015014 <mg_tls_derive_secret>
                       server_secret, 32);
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
                       tls->enc.server_write_key, keysz);
 801548c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015490:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  mg_tls_derive_secret("tls13 key", server_secret, 32, NULL, 0,
 8015494:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 8015498:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801549c:	9202      	str	r2, [sp, #8]
 801549e:	9301      	str	r3, [sp, #4]
 80154a0:	2300      	movs	r3, #0
 80154a2:	9300      	str	r3, [sp, #0]
 80154a4:	2300      	movs	r3, #0
 80154a6:	2220      	movs	r2, #32
 80154a8:	4851      	ldr	r0, [pc, #324]	@ (80155f0 <mg_tls_generate_application_keys+0x204>)
 80154aa:	f7ff fdb3 	bl	8015014 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
                       tls->enc.server_write_iv, 12);
 80154ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80154b2:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  mg_tls_derive_secret("tls13 iv", server_secret, 32, NULL, 0,
 80154b6:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80154ba:	220c      	movs	r2, #12
 80154bc:	9202      	str	r2, [sp, #8]
 80154be:	9301      	str	r3, [sp, #4]
 80154c0:	2300      	movs	r3, #0
 80154c2:	9300      	str	r3, [sp, #0]
 80154c4:	2300      	movs	r3, #0
 80154c6:	2220      	movs	r2, #32
 80154c8:	484a      	ldr	r0, [pc, #296]	@ (80155f4 <mg_tls_generate_application_keys+0x208>)
 80154ca:	f7ff fda3 	bl	8015014 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 c ap traffic", master_secret, 32, hash, 32,
 80154ce:	f107 02f8 	add.w	r2, r7, #248	@ 0xf8
 80154d2:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 80154d6:	2320      	movs	r3, #32
 80154d8:	9302      	str	r3, [sp, #8]
 80154da:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80154de:	9301      	str	r3, [sp, #4]
 80154e0:	2320      	movs	r3, #32
 80154e2:	9300      	str	r3, [sp, #0]
 80154e4:	4613      	mov	r3, r2
 80154e6:	2220      	movs	r2, #32
 80154e8:	4843      	ldr	r0, [pc, #268]	@ (80155f8 <mg_tls_generate_application_keys+0x20c>)
 80154ea:	f7ff fd93 	bl	8015014 <mg_tls_derive_secret>
                       client_secret, 32);
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
                       tls->enc.client_write_key, keysz);
 80154ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80154f2:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  mg_tls_derive_secret("tls13 key", client_secret, 32, NULL, 0,
 80154f6:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80154fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80154fe:	9202      	str	r2, [sp, #8]
 8015500:	9301      	str	r3, [sp, #4]
 8015502:	2300      	movs	r3, #0
 8015504:	9300      	str	r3, [sp, #0]
 8015506:	2300      	movs	r3, #0
 8015508:	2220      	movs	r2, #32
 801550a:	4839      	ldr	r0, [pc, #228]	@ (80155f0 <mg_tls_generate_application_keys+0x204>)
 801550c:	f7ff fd82 	bl	8015014 <mg_tls_derive_secret>
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
                       tls->enc.client_write_iv, 12);
 8015510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015514:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  mg_tls_derive_secret("tls13 iv", client_secret, 32, NULL, 0,
 8015518:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 801551c:	220c      	movs	r2, #12
 801551e:	9202      	str	r2, [sp, #8]
 8015520:	9301      	str	r3, [sp, #4]
 8015522:	2300      	movs	r3, #0
 8015524:	9300      	str	r3, [sp, #0]
 8015526:	2300      	movs	r3, #0
 8015528:	2220      	movs	r2, #32
 801552a:	4832      	ldr	r0, [pc, #200]	@ (80155f4 <mg_tls_generate_application_keys+0x208>)
 801552c:	f7ff fd72 	bl	8015014 <mg_tls_derive_secret>

  mg_tls_hexdump("s ap traffic", server_secret, 32);
 8015530:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8015534:	2220      	movs	r2, #32
 8015536:	4619      	mov	r1, r3
 8015538:	4830      	ldr	r0, [pc, #192]	@ (80155fc <mg_tls_generate_application_keys+0x210>)
 801553a:	f7ff fb7d 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("s key", tls->enc.server_write_key, keysz);
 801553e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015542:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8015546:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801554a:	4619      	mov	r1, r3
 801554c:	482c      	ldr	r0, [pc, #176]	@ (8015600 <mg_tls_generate_application_keys+0x214>)
 801554e:	f7ff fb73 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("s iv", tls->enc.server_write_iv, 12);
 8015552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015556:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 801555a:	220c      	movs	r2, #12
 801555c:	4619      	mov	r1, r3
 801555e:	4829      	ldr	r0, [pc, #164]	@ (8015604 <mg_tls_generate_application_keys+0x218>)
 8015560:	f7ff fb6a 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("s finished", tls->enc.server_finished_key, 32);
 8015564:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015568:	f203 43d4 	addw	r3, r3, #1236	@ 0x4d4
 801556c:	2220      	movs	r2, #32
 801556e:	4619      	mov	r1, r3
 8015570:	4825      	ldr	r0, [pc, #148]	@ (8015608 <mg_tls_generate_application_keys+0x21c>)
 8015572:	f7ff fb61 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("c ap traffic", client_secret, 32);
 8015576:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801557a:	2220      	movs	r2, #32
 801557c:	4619      	mov	r1, r3
 801557e:	4823      	ldr	r0, [pc, #140]	@ (801560c <mg_tls_generate_application_keys+0x220>)
 8015580:	f7ff fb5a 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("c key", tls->enc.client_write_key, keysz);
 8015584:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8015588:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 801558c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8015590:	4619      	mov	r1, r3
 8015592:	481f      	ldr	r0, [pc, #124]	@ (8015610 <mg_tls_generate_application_keys+0x224>)
 8015594:	f7ff fb50 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("c iv", tls->enc.client_write_iv, 12);
 8015598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801559c:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 80155a0:	220c      	movs	r2, #12
 80155a2:	4619      	mov	r1, r3
 80155a4:	481b      	ldr	r0, [pc, #108]	@ (8015614 <mg_tls_generate_application_keys+0x228>)
 80155a6:	f7ff fb47 	bl	8014c38 <mg_tls_hexdump>
  mg_tls_hexdump("c finished", tls->enc.client_finished_key, 32);
 80155aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80155ae:	f503 63a4 	add.w	r3, r3, #1312	@ 0x520
 80155b2:	2220      	movs	r2, #32
 80155b4:	4619      	mov	r1, r3
 80155b6:	4818      	ldr	r0, [pc, #96]	@ (8015618 <mg_tls_generate_application_keys+0x22c>)
 80155b8:	f7ff fb3e 	bl	8014c38 <mg_tls_hexdump>
  tls->enc.sseq = tls->enc.cseq = 0;
 80155bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80155c0:	2200      	movs	r2, #0
 80155c2:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 80155c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80155ca:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 80155ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80155d2:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

#ifdef MG_TLS_SSLKEYLOGFILE
  mg_ssl_key_log("SERVER_TRAFFIC_SECRET_0", tls->random, server_secret, 32);
  mg_ssl_key_log("CLIENT_TRAFFIC_SECRET_0", tls->random, client_secret, 32);
#endif
}
 80155d6:	bf00      	nop
 80155d8:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 80155dc:	46bd      	mov	sp, r7
 80155de:	bd80      	pop	{r7, pc}
 80155e0:	24000280 	.word	0x24000280
 80155e4:	08025e48 	.word	0x08025e48
 80155e8:	240010a0 	.word	0x240010a0
 80155ec:	08025f18 	.word	0x08025f18
 80155f0:	08025e98 	.word	0x08025e98
 80155f4:	08025ea4 	.word	0x08025ea4
 80155f8:	08025f2c 	.word	0x08025f2c
 80155fc:	08025f40 	.word	0x08025f40
 8015600:	08025ed0 	.word	0x08025ed0
 8015604:	08025ed8 	.word	0x08025ed8
 8015608:	08025ee0 	.word	0x08025ee0
 801560c:	08025f50 	.word	0x08025f50
 8015610:	08025efc 	.word	0x08025efc
 8015614:	08025f04 	.word	0x08025f04
 8015618:	08025f0c 	.word	0x08025f0c

0801561c <mg_tls_encrypt>:

// AES GCM encryption of the message + put encoded data into the write buffer
static void mg_tls_encrypt(struct mg_connection *c, const uint8_t *msg,
                           size_t msgsz, uint8_t msgtype) {
 801561c:	b580      	push	{r7, lr}
 801561e:	b09a      	sub	sp, #104	@ 0x68
 8015620:	af04      	add	r7, sp, #16
 8015622:	60f8      	str	r0, [r7, #12]
 8015624:	60b9      	str	r1, [r7, #8]
 8015626:	607a      	str	r2, [r7, #4]
 8015628:	70fb      	strb	r3, [r7, #3]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015630:	657b      	str	r3, [r7, #84]	@ 0x54
  struct mg_iobuf *wio = &tls->send;
 8015632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015634:	3304      	adds	r3, #4
 8015636:	653b      	str	r3, [r7, #80]	@ 0x50
  uint8_t *outmsg;
  uint8_t *tag;
  size_t encsz = msgsz + 16 + 1;
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	3311      	adds	r3, #17
 801563c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801563e:	2317      	movs	r3, #23
 8015640:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8015644:	2303      	movs	r3, #3
 8015646:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801564a:	2303      	movs	r3, #3
 801564c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 8015650:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015652:	0a1b      	lsrs	r3, r3, #8
 8015654:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8015656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    (uint8_t) ((encsz >> 8) & 0xff), (uint8_t) (encsz & 0xff)};
 801565a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801565c:	b2db      	uxtb	r3, r3
  uint8_t hdr[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801565e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8015662:	2317      	movs	r3, #23
 8015664:	773b      	strb	r3, [r7, #28]
 8015666:	2303      	movs	r3, #3
 8015668:	777b      	strb	r3, [r7, #29]
 801566a:	2303      	movs	r3, #3
 801566c:	77bb      	strb	r3, [r7, #30]
                                (uint8_t) ((encsz >> 8) & 0xff),
 801566e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015670:	0a1b      	lsrs	r3, r3, #8
 8015672:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 8015674:	77fb      	strb	r3, [r7, #31]
                                (uint8_t) (encsz & 0xff)};
 8015676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015678:	b2db      	uxtb	r3, r3
  uint8_t associated_data[5] = {MG_TLS_APP_DATA, 0x03, 0x03,
 801567a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t nonce[12];

  uint32_t seq = c->is_client ? tls->enc.cseq : tls->enc.sseq;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015684:	f003 0302 	and.w	r3, r3, #2
 8015688:	b2db      	uxtb	r3, r3
 801568a:	2b00      	cmp	r3, #0
 801568c:	d003      	beq.n	8015696 <mg_tls_encrypt+0x7a>
 801568e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015690:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8015694:	e002      	b.n	801569c <mg_tls_encrypt+0x80>
 8015696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015698:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 801569c:	64bb      	str	r3, [r7, #72]	@ 0x48
  uint8_t *key =
      c->is_client ? tls->enc.client_write_key : tls->enc.server_write_key;
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80156a4:	f003 0302 	and.w	r3, r3, #2
 80156a8:	b2db      	uxtb	r3, r3
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d003      	beq.n	80156b6 <mg_tls_encrypt+0x9a>
 80156ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156b0:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
 80156b4:	e002      	b.n	80156bc <mg_tls_encrypt+0xa0>
 80156b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156b8:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
  uint8_t *key =
 80156bc:	647b      	str	r3, [r7, #68]	@ 0x44
  uint8_t *iv =
      c->is_client ? tls->enc.client_write_iv : tls->enc.server_write_iv;
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80156c4:	f003 0302 	and.w	r3, r3, #2
 80156c8:	b2db      	uxtb	r3, r3
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d003      	beq.n	80156d6 <mg_tls_encrypt+0xba>
 80156ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156d0:	f203 5314 	addw	r3, r3, #1300	@ 0x514
 80156d4:	e002      	b.n	80156dc <mg_tls_encrypt+0xc0>
 80156d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80156d8:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
  uint8_t *iv =
 80156dc:	643b      	str	r3, [r7, #64]	@ 0x40

#if !CHACHA20
  mg_gcm_initialize();
#endif

  memmove(nonce, iv, sizeof(nonce));
 80156de:	f107 0310 	add.w	r3, r7, #16
 80156e2:	220c      	movs	r2, #12
 80156e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80156e6:	4618      	mov	r0, r3
 80156e8:	f00e f83f 	bl	802376a <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 80156ec:	7e3a      	ldrb	r2, [r7, #24]
 80156ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80156f0:	0e1b      	lsrs	r3, r3, #24
 80156f2:	b2db      	uxtb	r3, r3
 80156f4:	4053      	eors	r3, r2
 80156f6:	b2db      	uxtb	r3, r3
 80156f8:	763b      	strb	r3, [r7, #24]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 80156fa:	7e7a      	ldrb	r2, [r7, #25]
 80156fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80156fe:	0c1b      	lsrs	r3, r3, #16
 8015700:	b2db      	uxtb	r3, r3
 8015702:	4053      	eors	r3, r2
 8015704:	b2db      	uxtb	r3, r3
 8015706:	767b      	strb	r3, [r7, #25]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 8015708:	7eba      	ldrb	r2, [r7, #26]
 801570a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801570c:	0a1b      	lsrs	r3, r3, #8
 801570e:	b2db      	uxtb	r3, r3
 8015710:	4053      	eors	r3, r2
 8015712:	b2db      	uxtb	r3, r3
 8015714:	76bb      	strb	r3, [r7, #26]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 8015716:	7efa      	ldrb	r2, [r7, #27]
 8015718:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801571a:	b2db      	uxtb	r3, r3
 801571c:	4053      	eors	r3, r2
 801571e:	b2db      	uxtb	r3, r3
 8015720:	76fb      	strb	r3, [r7, #27]

  mg_iobuf_add(wio, wio->len, hdr, sizeof(hdr));
 8015722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015724:	6899      	ldr	r1, [r3, #8]
 8015726:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801572a:	2305      	movs	r3, #5
 801572c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801572e:	f7f5 ff63 	bl	800b5f8 <mg_iobuf_add>
  mg_iobuf_resize(wio, wio->len + encsz);
 8015732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015734:	689a      	ldr	r2, [r3, #8]
 8015736:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015738:	4413      	add	r3, r2
 801573a:	4619      	mov	r1, r3
 801573c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801573e:	f7f5 fecf 	bl	800b4e0 <mg_iobuf_resize>
  outmsg = wio->buf + wio->len;
 8015742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015744:	681a      	ldr	r2, [r3, #0]
 8015746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015748:	689b      	ldr	r3, [r3, #8]
 801574a:	4413      	add	r3, r2
 801574c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tag = wio->buf + wio->len + msgsz + 1;
 801574e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015750:	681a      	ldr	r2, [r3, #0]
 8015752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015754:	6899      	ldr	r1, [r3, #8]
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	440b      	add	r3, r1
 801575a:	3301      	adds	r3, #1
 801575c:	4413      	add	r3, r2
 801575e:	63bb      	str	r3, [r7, #56]	@ 0x38
  memmove(outmsg, msg, msgsz);
 8015760:	687a      	ldr	r2, [r7, #4]
 8015762:	68b9      	ldr	r1, [r7, #8]
 8015764:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8015766:	f00e f800 	bl	802376a <memmove>
  outmsg[msgsz] = msgtype;
 801576a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	4413      	add	r3, r2
 8015770:	78fa      	ldrb	r2, [r7, #3]
 8015772:	701a      	strb	r2, [r3, #0]
#if CHACHA20
  (void) tag;  // tag is only used in aes gcm
  {
    size_t maxlen = MG_IO_SIZE > 16384 ? 16384 : MG_IO_SIZE;
 8015774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8015778:	637b      	str	r3, [r7, #52]	@ 0x34
    uint8_t *enc = (uint8_t *) calloc(1, maxlen + 256 + 1);
 801577a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801577c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015780:	4619      	mov	r1, r3
 8015782:	2001      	movs	r0, #1
 8015784:	f00d fd36 	bl	80231f4 <calloc>
 8015788:	4603      	mov	r3, r0
 801578a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (enc == NULL) {
 801578c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801578e:	2b00      	cmp	r3, #0
 8015790:	d104      	bne.n	801579c <mg_tls_encrypt+0x180>
      mg_error(c, "TLS OOM");
 8015792:	491f      	ldr	r1, [pc, #124]	@ (8015810 <mg_tls_encrypt+0x1f4>)
 8015794:	68f8      	ldr	r0, [r7, #12]
 8015796:	f7f1 f93d 	bl	8006a14 <mg_error>
 801579a:	e035      	b.n	8015808 <mg_tls_encrypt+0x1ec>
      return;
    } else {
      size_t n = mg_chacha20_poly1305_encrypt(enc, key, nonce, associated_data,
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	3301      	adds	r3, #1
 80157a0:	f107 011c 	add.w	r1, r7, #28
 80157a4:	f107 0210 	add.w	r2, r7, #16
 80157a8:	9302      	str	r3, [sp, #8]
 80157aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80157ac:	9301      	str	r3, [sp, #4]
 80157ae:	2305      	movs	r3, #5
 80157b0:	9300      	str	r3, [sp, #0]
 80157b2:	460b      	mov	r3, r1
 80157b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80157b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80157b8:	f005 fa61 	bl	801ac7e <mg_chacha20_poly1305_encrypt>
 80157bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                              sizeof(associated_data), outmsg,
                                              msgsz + 1);
      memmove(outmsg, enc, n);
 80157be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80157c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80157c2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80157c4:	f00d ffd1 	bl	802376a <memmove>
      free(enc);
 80157c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80157ca:	f00d fd37 	bl	802323c <free>
  }
#else
  mg_aes_gcm_encrypt(outmsg, outmsg, msgsz + 1, key, 16, nonce, sizeof(nonce),
                     associated_data, sizeof(associated_data), tag, 16);
#endif
  c->is_client ? tls->enc.cseq++ : tls->enc.sseq++;
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80157d4:	f003 0302 	and.w	r3, r3, #2
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d007      	beq.n	80157ee <mg_tls_encrypt+0x1d2>
 80157de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80157e0:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 80157e4:	1c5a      	adds	r2, r3, #1
 80157e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80157e8:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
 80157ec:	e006      	b.n	80157fc <mg_tls_encrypt+0x1e0>
 80157ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80157f0:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 80157f4:	1c5a      	adds	r2, r3, #1
 80157f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80157f8:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
  wio->len += encsz;
 80157fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80157fe:	689a      	ldr	r2, [r3, #8]
 8015800:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015802:	441a      	add	r2, r3
 8015804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015806:	609a      	str	r2, [r3, #8]
}
 8015808:	3758      	adds	r7, #88	@ 0x58
 801580a:	46bd      	mov	sp, r7
 801580c:	bd80      	pop	{r7, pc}
 801580e:	bf00      	nop
 8015810:	08025f60 	.word	0x08025f60

08015814 <mg_tls_recv_record>:

// read an encrypted record, decrypt it in place
static int mg_tls_recv_record(struct mg_connection *c) {
 8015814:	b580      	push	{r7, lr}
 8015816:	b092      	sub	sp, #72	@ 0x48
 8015818:	af02      	add	r7, sp, #8
 801581a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct mg_iobuf *rio = &c->rtls;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	3368      	adds	r3, #104	@ 0x68
 8015828:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint16_t msgsz;
  uint8_t *msg;
  uint8_t nonce[12];
  int r;

  uint32_t seq = c->is_client ? tls->enc.sseq : tls->enc.cseq;
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015830:	f003 0302 	and.w	r3, r3, #2
 8015834:	b2db      	uxtb	r3, r3
 8015836:	2b00      	cmp	r3, #0
 8015838:	d003      	beq.n	8015842 <mg_tls_recv_record+0x2e>
 801583a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801583c:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8015840:	e002      	b.n	8015848 <mg_tls_recv_record+0x34>
 8015842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015844:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8015848:	637b      	str	r3, [r7, #52]	@ 0x34
  uint8_t *key =
      c->is_client ? tls->enc.server_write_key : tls->enc.client_write_key;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015850:	f003 0302 	and.w	r3, r3, #2
 8015854:	b2db      	uxtb	r3, r3
 8015856:	2b00      	cmp	r3, #0
 8015858:	d003      	beq.n	8015862 <mg_tls_recv_record+0x4e>
 801585a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801585c:	f503 6395 	add.w	r3, r3, #1192	@ 0x4a8
 8015860:	e002      	b.n	8015868 <mg_tls_recv_record+0x54>
 8015862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015864:	f203 43f4 	addw	r3, r3, #1268	@ 0x4f4
  uint8_t *key =
 8015868:	633b      	str	r3, [r7, #48]	@ 0x30
  uint8_t *iv =
      c->is_client ? tls->enc.server_write_iv : tls->enc.client_write_iv;
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8015870:	f003 0302 	and.w	r3, r3, #2
 8015874:	b2db      	uxtb	r3, r3
 8015876:	2b00      	cmp	r3, #0
 8015878:	d003      	beq.n	8015882 <mg_tls_recv_record+0x6e>
 801587a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801587c:	f503 6399 	add.w	r3, r3, #1224	@ 0x4c8
 8015880:	e002      	b.n	8015888 <mg_tls_recv_record+0x74>
 8015882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015884:	f203 5314 	addw	r3, r3, #1300	@ 0x514
  uint8_t *iv =
 8015888:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (tls->recv_len > 0) {
 801588a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801588c:	699b      	ldr	r3, [r3, #24]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d001      	beq.n	8015896 <mg_tls_recv_record+0x82>
    return 0; /* some data from previous record is still present */
 8015892:	2300      	movs	r3, #0
 8015894:	e0c7      	b.n	8015a26 <mg_tls_recv_record+0x212>
  }
  for (;;) {
    if (!mg_tls_got_record(c)) {
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f7ff fb25 	bl	8014ee6 <mg_tls_got_record>
 801589c:	4603      	mov	r3, r0
 801589e:	f083 0301 	eor.w	r3, r3, #1
 80158a2:	b2db      	uxtb	r3, r3
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d002      	beq.n	80158ae <mg_tls_recv_record+0x9a>
      return MG_IO_WAIT;
 80158a8:	f06f 0301 	mvn.w	r3, #1
 80158ac:	e0bb      	b.n	8015a26 <mg_tls_recv_record+0x212>
    }
    if (rio->buf[0] == MG_TLS_APP_DATA) {
 80158ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	781b      	ldrb	r3, [r3, #0]
 80158b4:	2b17      	cmp	r3, #23
 80158b6:	d026      	beq.n	8015906 <mg_tls_recv_record+0xf2>
      break;
    } else if (rio->buf[0] ==
 80158b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	781b      	ldrb	r3, [r3, #0]
 80158be:	2b14      	cmp	r3, #20
 80158c0:	d103      	bne.n	80158ca <mg_tls_recv_record+0xb6>
               MG_TLS_CHANGE_CIPHER) {  // Skip ChangeCipher messages
      mg_tls_drop_record(c);
 80158c2:	6878      	ldr	r0, [r7, #4]
 80158c4:	f7ff fb37 	bl	8014f36 <mg_tls_drop_record>
 80158c8:	e7e5      	b.n	8015896 <mg_tls_recv_record+0x82>
    } else if (rio->buf[0] == MG_TLS_ALERT) {  // Skip Alerts
 80158ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	2b15      	cmp	r3, #21
 80158d2:	d111      	bne.n	80158f8 <mg_tls_recv_record+0xe4>
      MG_INFO(("TLS ALERT packet received"));
 80158d4:	4b56      	ldr	r3, [pc, #344]	@ (8015a30 <mg_tls_recv_record+0x21c>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	2b01      	cmp	r3, #1
 80158da:	dd09      	ble.n	80158f0 <mg_tls_recv_record+0xdc>
 80158dc:	4b55      	ldr	r3, [pc, #340]	@ (8015a34 <mg_tls_recv_record+0x220>)
 80158de:	f642 423a 	movw	r2, #11322	@ 0x2c3a
 80158e2:	4955      	ldr	r1, [pc, #340]	@ (8015a38 <mg_tls_recv_record+0x224>)
 80158e4:	2002      	movs	r0, #2
 80158e6:	f7f6 fda5 	bl	800c434 <mg_log_prefix>
 80158ea:	4854      	ldr	r0, [pc, #336]	@ (8015a3c <mg_tls_recv_record+0x228>)
 80158ec:	f7f6 fdf2 	bl	800c4d4 <mg_log>
      mg_tls_drop_record(c);
 80158f0:	6878      	ldr	r0, [r7, #4]
 80158f2:	f7ff fb20 	bl	8014f36 <mg_tls_drop_record>
 80158f6:	e7ce      	b.n	8015896 <mg_tls_recv_record+0x82>
    } else {
      mg_error(c, "unexpected packet");
 80158f8:	4951      	ldr	r1, [pc, #324]	@ (8015a40 <mg_tls_recv_record+0x22c>)
 80158fa:	6878      	ldr	r0, [r7, #4]
 80158fc:	f7f1 f88a 	bl	8006a14 <mg_error>
      return -1;
 8015900:	f04f 33ff 	mov.w	r3, #4294967295
 8015904:	e08f      	b.n	8015a26 <mg_tls_recv_record+0x212>
      break;
 8015906:	bf00      	nop
    }
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8015908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801590a:	681b      	ldr	r3, [r3, #0]
 801590c:	3303      	adds	r3, #3
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	b21b      	sxth	r3, r3
 8015912:	021b      	lsls	r3, r3, #8
 8015914:	b21a      	sxth	r2, r3
 8015916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	3304      	adds	r3, #4
 801591c:	781b      	ldrb	r3, [r3, #0]
 801591e:	b21b      	sxth	r3, r3
 8015920:	4313      	orrs	r3, r2
 8015922:	b21b      	sxth	r3, r3
 8015924:	857b      	strh	r3, [r7, #42]	@ 0x2a
  msg = rio->buf + 5;
 8015926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	3305      	adds	r3, #5
 801592c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (msgsz < 16) {
 801592e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015930:	2b0f      	cmp	r3, #15
 8015932:	d806      	bhi.n	8015942 <mg_tls_recv_record+0x12e>
    mg_error(c, "wrong size");
 8015934:	4943      	ldr	r1, [pc, #268]	@ (8015a44 <mg_tls_recv_record+0x230>)
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f7f1 f86c 	bl	8006a14 <mg_error>
    return -1;
 801593c:	f04f 33ff 	mov.w	r3, #4294967295
 8015940:	e071      	b.n	8015a26 <mg_tls_recv_record+0x212>
  }

  memmove(nonce, iv, sizeof(nonce));
 8015942:	f107 030c 	add.w	r3, r7, #12
 8015946:	220c      	movs	r2, #12
 8015948:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801594a:	4618      	mov	r0, r3
 801594c:	f00d ff0d 	bl	802376a <memmove>
  nonce[8] ^= (uint8_t) ((seq >> 24) & 255U);
 8015950:	7d3a      	ldrb	r2, [r7, #20]
 8015952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015954:	0e1b      	lsrs	r3, r3, #24
 8015956:	b2db      	uxtb	r3, r3
 8015958:	4053      	eors	r3, r2
 801595a:	b2db      	uxtb	r3, r3
 801595c:	753b      	strb	r3, [r7, #20]
  nonce[9] ^= (uint8_t) ((seq >> 16) & 255U);
 801595e:	7d7a      	ldrb	r2, [r7, #21]
 8015960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015962:	0c1b      	lsrs	r3, r3, #16
 8015964:	b2db      	uxtb	r3, r3
 8015966:	4053      	eors	r3, r2
 8015968:	b2db      	uxtb	r3, r3
 801596a:	757b      	strb	r3, [r7, #21]
  nonce[10] ^= (uint8_t) ((seq >> 8) & 255U);
 801596c:	7dba      	ldrb	r2, [r7, #22]
 801596e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015970:	0a1b      	lsrs	r3, r3, #8
 8015972:	b2db      	uxtb	r3, r3
 8015974:	4053      	eors	r3, r2
 8015976:	b2db      	uxtb	r3, r3
 8015978:	75bb      	strb	r3, [r7, #22]
  nonce[11] ^= (uint8_t) ((seq) &255U);
 801597a:	7dfa      	ldrb	r2, [r7, #23]
 801597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801597e:	b2db      	uxtb	r3, r3
 8015980:	4053      	eors	r3, r2
 8015982:	b2db      	uxtb	r3, r3
 8015984:	75fb      	strb	r3, [r7, #23]
#if CHACHA20
  {
    uint8_t *dec = (uint8_t *) calloc(1, msgsz);
 8015986:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015988:	4619      	mov	r1, r3
 801598a:	2001      	movs	r0, #1
 801598c:	f00d fc32 	bl	80231f4 <calloc>
 8015990:	4603      	mov	r3, r0
 8015992:	623b      	str	r3, [r7, #32]
    size_t n;
    if (dec == NULL) {
 8015994:	6a3b      	ldr	r3, [r7, #32]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d106      	bne.n	80159a8 <mg_tls_recv_record+0x194>
      mg_error(c, "TLS OOM");
 801599a:	492b      	ldr	r1, [pc, #172]	@ (8015a48 <mg_tls_recv_record+0x234>)
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f7f1 f839 	bl	8006a14 <mg_error>
      return -1;
 80159a2:	f04f 33ff 	mov.w	r3, #4294967295
 80159a6:	e03e      	b.n	8015a26 <mg_tls_recv_record+0x212>
    }
    n = mg_chacha20_poly1305_decrypt(dec, key, nonce, msg, msgsz);
 80159a8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159aa:	f107 020c 	add.w	r2, r7, #12
 80159ae:	9300      	str	r3, [sp, #0]
 80159b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80159b4:	6a38      	ldr	r0, [r7, #32]
 80159b6:	f005 f99a 	bl	801acee <mg_chacha20_poly1305_decrypt>
 80159ba:	61f8      	str	r0, [r7, #28]
    memmove(msg, dec, n);
 80159bc:	69fa      	ldr	r2, [r7, #28]
 80159be:	6a39      	ldr	r1, [r7, #32]
 80159c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80159c2:	f00d fed2 	bl	802376a <memmove>
    free(dec);
 80159c6:	6a38      	ldr	r0, [r7, #32]
 80159c8:	f00d fc38 	bl	802323c <free>
#else
  mg_gcm_initialize();
  mg_aes_gcm_decrypt(msg, msg, msgsz - 16, key, 16, nonce, sizeof(nonce));
#endif

  r = msgsz - 16 - 1;
 80159cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159ce:	3b11      	subs	r3, #17
 80159d0:	61bb      	str	r3, [r7, #24]
  tls->content_type = msg[msgsz - 16 - 1];
 80159d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159d4:	3b11      	subs	r3, #17
 80159d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159d8:	4413      	add	r3, r2
 80159da:	781a      	ldrb	r2, [r3, #0]
 80159dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159de:	771a      	strb	r2, [r3, #28]
  tls->recv_offset = (size_t) msg - (size_t) rio->buf;
 80159e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80159e4:	6812      	ldr	r2, [r2, #0]
 80159e6:	1a9a      	subs	r2, r3, r2
 80159e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159ea:	615a      	str	r2, [r3, #20]
  tls->recv_len = (size_t) msgsz - 16 - 1;
 80159ec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80159ee:	f1a3 0211 	sub.w	r2, r3, #17
 80159f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159f4:	619a      	str	r2, [r3, #24]
  c->is_client ? tls->enc.sseq++ : tls->enc.cseq++;
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 80159fc:	f003 0302 	and.w	r3, r3, #2
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d007      	beq.n	8015a16 <mg_tls_recv_record+0x202>
 8015a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a08:	f8d3 3480 	ldr.w	r3, [r3, #1152]	@ 0x480
 8015a0c:	1c5a      	adds	r2, r3, #1
 8015a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a10:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
 8015a14:	e006      	b.n	8015a24 <mg_tls_recv_record+0x210>
 8015a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a18:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 8015a1c:	1c5a      	adds	r2, r3, #1
 8015a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015a20:	f8c3 2484 	str.w	r2, [r3, #1156]	@ 0x484
  return r;
 8015a24:	69bb      	ldr	r3, [r7, #24]
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3740      	adds	r7, #64	@ 0x40
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}
 8015a2e:	bf00      	nop
 8015a30:	24000258 	.word	0x24000258
 8015a34:	08028214 	.word	0x08028214
 8015a38:	08024478 	.word	0x08024478
 8015a3c:	08025f68 	.word	0x08025f68
 8015a40:	08025f84 	.word	0x08025f84
 8015a44:	08025e3c 	.word	0x08025e3c
 8015a48:	08025f60 	.word	0x08025f60

08015a4c <mg_tls_calc_cert_verify_hash>:

static void mg_tls_calc_cert_verify_hash(struct mg_connection *c,
                                         uint8_t hash[32], int is_client) {
 8015a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a4e:	b0d5      	sub	sp, #340	@ 0x154
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8015a56:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8015a5a:	6018      	str	r0, [r3, #0]
 8015a5c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8015a60:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8015a64:	6019      	str	r1, [r3, #0]
 8015a66:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8015a6a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015a6e:	601a      	str	r2, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015a70:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8015a74:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015a7e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
  uint8_t server_context[34] = "TLS 1.3, server CertificateVerify";
 8015a82:	4b41      	ldr	r3, [pc, #260]	@ (8015b88 <mg_tls_calc_cert_verify_hash+0x13c>)
 8015a84:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8015a88:	461d      	mov	r5, r3
 8015a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015a92:	682b      	ldr	r3, [r5, #0]
 8015a94:	8023      	strh	r3, [r4, #0]
  uint8_t client_context[34] = "TLS 1.3, client CertificateVerify";
 8015a96:	4b3d      	ldr	r3, [pc, #244]	@ (8015b8c <mg_tls_calc_cert_verify_hash+0x140>)
 8015a98:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8015a9c:	461d      	mov	r5, r3
 8015a9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015aa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015aa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015aa6:	682b      	ldr	r3, [r5, #0]
 8015aa8:	8023      	strh	r3, [r4, #0]
  uint8_t sig_content[130];
  mg_sha256_ctx sha256;

  memset(sig_content, 0x20, 64);
 8015aaa:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8015aae:	2240      	movs	r2, #64	@ 0x40
 8015ab0:	2120      	movs	r1, #32
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f00d fe73 	bl	802379e <memset>
  if (is_client) {
 8015ab8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8015abc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d018      	beq.n	8015af8 <mg_tls_calc_cert_verify_hash+0xac>
    memmove(sig_content + 64, client_context, sizeof(client_context));
 8015ac6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8015aca:	3340      	adds	r3, #64	@ 0x40
 8015acc:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 8015ad0:	469c      	mov	ip, r3
 8015ad2:	f104 0e20 	add.w	lr, r4, #32
 8015ad6:	4665      	mov	r5, ip
 8015ad8:	4626      	mov	r6, r4
 8015ada:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015adc:	6028      	str	r0, [r5, #0]
 8015ade:	6069      	str	r1, [r5, #4]
 8015ae0:	60aa      	str	r2, [r5, #8]
 8015ae2:	60eb      	str	r3, [r5, #12]
 8015ae4:	3410      	adds	r4, #16
 8015ae6:	f10c 0c10 	add.w	ip, ip, #16
 8015aea:	4574      	cmp	r4, lr
 8015aec:	d1f3      	bne.n	8015ad6 <mg_tls_calc_cert_verify_hash+0x8a>
 8015aee:	4662      	mov	r2, ip
 8015af0:	4623      	mov	r3, r4
 8015af2:	881b      	ldrh	r3, [r3, #0]
 8015af4:	8013      	strh	r3, [r2, #0]
 8015af6:	e017      	b.n	8015b28 <mg_tls_calc_cert_verify_hash+0xdc>
  } else {
    memmove(sig_content + 64, server_context, sizeof(server_context));
 8015af8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8015afc:	3340      	adds	r3, #64	@ 0x40
 8015afe:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8015b02:	469c      	mov	ip, r3
 8015b04:	f104 0e20 	add.w	lr, r4, #32
 8015b08:	4665      	mov	r5, ip
 8015b0a:	4626      	mov	r6, r4
 8015b0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015b0e:	6028      	str	r0, [r5, #0]
 8015b10:	6069      	str	r1, [r5, #4]
 8015b12:	60aa      	str	r2, [r5, #8]
 8015b14:	60eb      	str	r3, [r5, #12]
 8015b16:	3410      	adds	r4, #16
 8015b18:	f10c 0c10 	add.w	ip, ip, #16
 8015b1c:	4574      	cmp	r4, lr
 8015b1e:	d1f3      	bne.n	8015b08 <mg_tls_calc_cert_verify_hash+0xbc>
 8015b20:	4662      	mov	r2, ip
 8015b22:	4623      	mov	r3, r4
 8015b24:	881b      	ldrh	r3, [r3, #0]
 8015b26:	8013      	strh	r3, [r2, #0]
  }

  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 8015b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8015b2c:	f103 0120 	add.w	r1, r3, #32
 8015b30:	f107 0310 	add.w	r3, r7, #16
 8015b34:	2270      	movs	r2, #112	@ 0x70
 8015b36:	4618      	mov	r0, r3
 8015b38:	f00d fe17 	bl	802376a <memmove>
  mg_sha256_final(sig_content + 98, &sha256);
 8015b3c:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8015b40:	3362      	adds	r3, #98	@ 0x62
 8015b42:	f107 0210 	add.w	r2, r7, #16
 8015b46:	4611      	mov	r1, r2
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7fd f86e 	bl	8012c2a <mg_sha256_final>

  mg_sha256_init(&sha256);
 8015b4e:	f107 0310 	add.w	r3, r7, #16
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7fc fdec 	bl	8012730 <mg_sha256_init>
  mg_sha256_update(&sha256, sig_content, sizeof(sig_content));
 8015b58:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8015b5c:	f107 0310 	add.w	r3, r7, #16
 8015b60:	2282      	movs	r2, #130	@ 0x82
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7fd f828 	bl	8012bb8 <mg_sha256_update>
  mg_sha256_final(hash, &sha256);
 8015b68:	f107 0210 	add.w	r2, r7, #16
 8015b6c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8015b70:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8015b74:	4611      	mov	r1, r2
 8015b76:	6818      	ldr	r0, [r3, #0]
 8015b78:	f7fd f857 	bl	8012c2a <mg_sha256_final>
}
 8015b7c:	bf00      	nop
 8015b7e:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b86:	bf00      	nop
 8015b88:	08025f98 	.word	0x08025f98
 8015b8c:	08025fbc 	.word	0x08025fbc

08015b90 <mg_tls_server_recv_hello>:

// read and parse ClientHello record
static int mg_tls_server_recv_hello(struct mg_connection *c) {
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b08c      	sub	sp, #48	@ 0x30
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct mg_iobuf *rio = &c->rtls;
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	3368      	adds	r3, #104	@ 0x68
 8015ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint16_t cipher_suites_len;
  uint16_t ext_len;
  uint8_t *ext;
  uint16_t msgsz;

  if (!mg_tls_got_record(c)) {
 8015ba6:	6878      	ldr	r0, [r7, #4]
 8015ba8:	f7ff f99d 	bl	8014ee6 <mg_tls_got_record>
 8015bac:	4603      	mov	r3, r0
 8015bae:	f083 0301 	eor.w	r3, r3, #1
 8015bb2:	b2db      	uxtb	r3, r3
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d002      	beq.n	8015bbe <mg_tls_server_recv_hello+0x2e>
    return MG_IO_WAIT;
 8015bb8:	f06f 0301 	mvn.w	r3, #1
 8015bbc:	e16d      	b.n	8015e9a <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_CLIENT_HELLO) {
 8015bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	781b      	ldrb	r3, [r3, #0]
 8015bc4:	2b16      	cmp	r3, #22
 8015bc6:	d105      	bne.n	8015bd4 <mg_tls_server_recv_hello+0x44>
 8015bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	3305      	adds	r3, #5
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	2b01      	cmp	r3, #1
 8015bd2:	d006      	beq.n	8015be2 <mg_tls_server_recv_hello+0x52>
    mg_error(c, "not a client hello packet");
 8015bd4:	4998      	ldr	r1, [pc, #608]	@ (8015e38 <mg_tls_server_recv_hello+0x2a8>)
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f7f0 ff1c 	bl	8006a14 <mg_error>
    return -1;
 8015bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8015be0:	e15b      	b.n	8015e9a <mg_tls_server_recv_hello+0x30a>
  }
  if (rio->len < 50) goto fail;
 8015be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015be4:	689b      	ldr	r3, [r3, #8]
 8015be6:	2b31      	cmp	r3, #49	@ 0x31
 8015be8:	f240 8146 	bls.w	8015e78 <mg_tls_server_recv_hello+0x2e8>
  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8015bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	3303      	adds	r3, #3
 8015bf2:	781b      	ldrb	r3, [r3, #0]
 8015bf4:	b21b      	sxth	r3, r3
 8015bf6:	021b      	lsls	r3, r3, #8
 8015bf8:	b21a      	sxth	r2, r3
 8015bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	3304      	adds	r3, #4
 8015c00:	781b      	ldrb	r3, [r3, #0]
 8015c02:	b21b      	sxth	r3, r3
 8015c04:	4313      	orrs	r3, r2
 8015c06:	b21b      	sxth	r3, r3
 8015c08:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 8015c0a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8015c0c:	1d1a      	adds	r2, r3, #4
 8015c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c10:	689b      	ldr	r3, [r3, #8]
 8015c12:	429a      	cmp	r2, r3
 8015c14:	f200 8132 	bhi.w	8015e7c <mg_tls_server_recv_hello+0x2ec>
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8015c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c1a:	f103 0020 	add.w	r0, r3, #32
 8015c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	3305      	adds	r3, #5
 8015c24:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015c26:	4619      	mov	r1, r3
 8015c28:	f7fc ffc6 	bl	8012bb8 <mg_sha256_update>
  // store client random
  memmove(tls->random, rio->buf + 11, sizeof(tls->random));
 8015c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c2e:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 8015c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	330b      	adds	r3, #11
 8015c38:	2220      	movs	r2, #32
 8015c3a:	4619      	mov	r1, r3
 8015c3c:	f00d fd95 	bl	802376a <memmove>
  // store session_id
  session_id_len = rio->buf[43];
 8015c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8015c48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (session_id_len == sizeof(tls->session_id)) {
 8015c4c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015c50:	2b20      	cmp	r3, #32
 8015c52:	d10b      	bne.n	8015c6c <mg_tls_server_recv_hello+0xdc>
    memmove(tls->session_id, rio->buf + 44, session_id_len);
 8015c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015c56:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8015c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	332c      	adds	r3, #44	@ 0x2c
 8015c60:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8015c64:	4619      	mov	r1, r3
 8015c66:	f00d fd80 	bl	802376a <memmove>
 8015c6a:	e011      	b.n	8015c90 <mg_tls_server_recv_hello+0x100>
  } else if (session_id_len != 0) {
 8015c6c:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d00d      	beq.n	8015c90 <mg_tls_server_recv_hello+0x100>
    MG_INFO(("bad session id len"));
 8015c74:	4b71      	ldr	r3, [pc, #452]	@ (8015e3c <mg_tls_server_recv_hello+0x2ac>)
 8015c76:	681b      	ldr	r3, [r3, #0]
 8015c78:	2b01      	cmp	r3, #1
 8015c7a:	dd09      	ble.n	8015c90 <mg_tls_server_recv_hello+0x100>
 8015c7c:	4b70      	ldr	r3, [pc, #448]	@ (8015e40 <mg_tls_server_recv_hello+0x2b0>)
 8015c7e:	f642 429b 	movw	r2, #11419	@ 0x2c9b
 8015c82:	4970      	ldr	r1, [pc, #448]	@ (8015e44 <mg_tls_server_recv_hello+0x2b4>)
 8015c84:	2002      	movs	r0, #2
 8015c86:	f7f6 fbd5 	bl	800c434 <mg_log_prefix>
 8015c8a:	486f      	ldr	r0, [pc, #444]	@ (8015e48 <mg_tls_server_recv_hello+0x2b8>)
 8015c8c:	f7f6 fc22 	bl	800c4d4 <mg_log>
  }
  cipher_suites_len = MG_LOAD_BE16(rio->buf + 44 + session_id_len);
 8015c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c92:	681a      	ldr	r2, [r3, #0]
 8015c94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015c98:	332c      	adds	r3, #44	@ 0x2c
 8015c9a:	4413      	add	r3, r2
 8015c9c:	781b      	ldrb	r3, [r3, #0]
 8015c9e:	b21b      	sxth	r3, r3
 8015ca0:	021b      	lsls	r3, r3, #8
 8015ca2:	b21a      	sxth	r2, r3
 8015ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ca6:	6819      	ldr	r1, [r3, #0]
 8015ca8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015cac:	332d      	adds	r3, #45	@ 0x2d
 8015cae:	440b      	add	r3, r1
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	b21b      	sxth	r3, r3
 8015cb4:	4313      	orrs	r3, r2
 8015cb6:	b21b      	sxth	r3, r3
 8015cb8:	83fb      	strh	r3, [r7, #30]
  if (((uint32_t) cipher_suites_len + 46 + session_id_len) > rio->len)
 8015cba:	8bfa      	ldrh	r2, [r7, #30]
 8015cbc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8015cc0:	4413      	add	r3, r2
 8015cc2:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8015cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cc8:	689b      	ldr	r3, [r3, #8]
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	f200 80d8 	bhi.w	8015e80 <mg_tls_server_recv_hello+0x2f0>
    goto fail;
  ext_len = MG_LOAD_BE16(rio->buf + 48 + session_id_len + cipher_suites_len);
 8015cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cd2:	681a      	ldr	r2, [r3, #0]
 8015cd4:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8015cd8:	8bfb      	ldrh	r3, [r7, #30]
 8015cda:	440b      	add	r3, r1
 8015cdc:	3330      	adds	r3, #48	@ 0x30
 8015cde:	4413      	add	r3, r2
 8015ce0:	781b      	ldrb	r3, [r3, #0]
 8015ce2:	b21b      	sxth	r3, r3
 8015ce4:	021b      	lsls	r3, r3, #8
 8015ce6:	b21a      	sxth	r2, r3
 8015ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015cea:	6819      	ldr	r1, [r3, #0]
 8015cec:	f897 0021 	ldrb.w	r0, [r7, #33]	@ 0x21
 8015cf0:	8bfb      	ldrh	r3, [r7, #30]
 8015cf2:	4403      	add	r3, r0
 8015cf4:	3331      	adds	r3, #49	@ 0x31
 8015cf6:	440b      	add	r3, r1
 8015cf8:	781b      	ldrb	r3, [r3, #0]
 8015cfa:	b21b      	sxth	r3, r3
 8015cfc:	4313      	orrs	r3, r2
 8015cfe:	b21b      	sxth	r3, r3
 8015d00:	83bb      	strh	r3, [r7, #28]
  ext = rio->buf + 50 + session_id_len + cipher_suites_len;
 8015d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d04:	681a      	ldr	r2, [r3, #0]
 8015d06:	f897 1021 	ldrb.w	r1, [r7, #33]	@ 0x21
 8015d0a:	8bfb      	ldrh	r3, [r7, #30]
 8015d0c:	440b      	add	r3, r1
 8015d0e:	3332      	adds	r3, #50	@ 0x32
 8015d10:	4413      	add	r3, r2
 8015d12:	61bb      	str	r3, [r7, #24]
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 8015d14:	8bbb      	ldrh	r3, [r7, #28]
 8015d16:	69ba      	ldr	r2, [r7, #24]
 8015d18:	441a      	add	r2, r3
 8015d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d1c:	6819      	ldr	r1, [r3, #0]
 8015d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d20:	689b      	ldr	r3, [r3, #8]
 8015d22:	440b      	add	r3, r1
 8015d24:	429a      	cmp	r2, r3
 8015d26:	f200 80ad 	bhi.w	8015e84 <mg_tls_server_recv_hello+0x2f4>
  for (j = 0; j < ext_len;) {
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8015d2e:	e09d      	b.n	8015e6c <mg_tls_server_recv_hello+0x2dc>
    uint16_t k;
    uint16_t key_exchange_len;
    uint8_t *key_exchange;
    uint16_t n = MG_LOAD_BE16(ext + j + 2);
 8015d30:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d32:	3302      	adds	r3, #2
 8015d34:	69ba      	ldr	r2, [r7, #24]
 8015d36:	4413      	add	r3, r2
 8015d38:	781b      	ldrb	r3, [r3, #0]
 8015d3a:	b21b      	sxth	r3, r3
 8015d3c:	021b      	lsls	r3, r3, #8
 8015d3e:	b21a      	sxth	r2, r3
 8015d40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d42:	3303      	adds	r3, #3
 8015d44:	69b9      	ldr	r1, [r7, #24]
 8015d46:	440b      	add	r3, r1
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	b21b      	sxth	r3, r3
 8015d4c:	4313      	orrs	r3, r2
 8015d4e:	b21b      	sxth	r3, r3
 8015d50:	82fb      	strh	r3, [r7, #22]
    if (MG_LOAD_BE16(ext + j) != 0x0033) {  // not a key share extension, ignore
 8015d52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d54:	69ba      	ldr	r2, [r7, #24]
 8015d56:	4413      	add	r3, r2
 8015d58:	781b      	ldrb	r3, [r3, #0]
 8015d5a:	b21b      	sxth	r3, r3
 8015d5c:	021b      	lsls	r3, r3, #8
 8015d5e:	b21a      	sxth	r2, r3
 8015d60:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d62:	3301      	adds	r3, #1
 8015d64:	69b9      	ldr	r1, [r7, #24]
 8015d66:	440b      	add	r3, r1
 8015d68:	781b      	ldrb	r3, [r3, #0]
 8015d6a:	b21b      	sxth	r3, r3
 8015d6c:	4313      	orrs	r3, r2
 8015d6e:	b21b      	sxth	r3, r3
 8015d70:	2b33      	cmp	r3, #51	@ 0x33
 8015d72:	d006      	beq.n	8015d82 <mg_tls_server_recv_hello+0x1f2>
      j += (uint16_t) (n + 4);
 8015d74:	8afa      	ldrh	r2, [r7, #22]
 8015d76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d78:	4413      	add	r3, r2
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	3304      	adds	r3, #4
 8015d7e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      continue;
 8015d80:	e074      	b.n	8015e6c <mg_tls_server_recv_hello+0x2dc>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 4);
 8015d82:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d84:	3304      	adds	r3, #4
 8015d86:	69ba      	ldr	r2, [r7, #24]
 8015d88:	4413      	add	r3, r2
 8015d8a:	781b      	ldrb	r3, [r3, #0]
 8015d8c:	b21b      	sxth	r3, r3
 8015d8e:	021b      	lsls	r3, r3, #8
 8015d90:	b21a      	sxth	r2, r3
 8015d92:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015d94:	3305      	adds	r3, #5
 8015d96:	69b9      	ldr	r1, [r7, #24]
 8015d98:	440b      	add	r3, r1
 8015d9a:	781b      	ldrb	r3, [r3, #0]
 8015d9c:	b21b      	sxth	r3, r3
 8015d9e:	4313      	orrs	r3, r2
 8015da0:	b21b      	sxth	r3, r3
 8015da2:	82bb      	strh	r3, [r7, #20]
    key_exchange = ext + j + 6;
 8015da4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015da6:	3306      	adds	r3, #6
 8015da8:	69ba      	ldr	r2, [r7, #24]
 8015daa:	4413      	add	r3, r2
 8015dac:	613b      	str	r3, [r7, #16]
    if (((size_t) key_exchange_len +
 8015dae:	8aba      	ldrh	r2, [r7, #20]
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8015db0:	693b      	ldr	r3, [r7, #16]
 8015db2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015db4:	6809      	ldr	r1, [r1, #0]
 8015db6:	1a5b      	subs	r3, r3, r1
    if (((size_t) key_exchange_len +
 8015db8:	441a      	add	r2, r3
         ((size_t) key_exchange - (size_t) rio->buf)) > rio->len)
 8015dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dbc:	689b      	ldr	r3, [r3, #8]
    if (((size_t) key_exchange_len +
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d862      	bhi.n	8015e88 <mg_tls_server_recv_hello+0x2f8>
      goto fail;
    for (k = 0; k < key_exchange_len;) {
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8015dc6:	e047      	b.n	8015e58 <mg_tls_server_recv_hello+0x2c8>
      uint16_t m = MG_LOAD_BE16(key_exchange + k + 2);
 8015dc8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015dca:	3302      	adds	r3, #2
 8015dcc:	693a      	ldr	r2, [r7, #16]
 8015dce:	4413      	add	r3, r2
 8015dd0:	781b      	ldrb	r3, [r3, #0]
 8015dd2:	b21b      	sxth	r3, r3
 8015dd4:	021b      	lsls	r3, r3, #8
 8015dd6:	b21a      	sxth	r2, r3
 8015dd8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015dda:	3303      	adds	r3, #3
 8015ddc:	6939      	ldr	r1, [r7, #16]
 8015dde:	440b      	add	r3, r1
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	b21b      	sxth	r3, r3
 8015de4:	4313      	orrs	r3, r2
 8015de6:	b21b      	sxth	r3, r3
 8015de8:	81fb      	strh	r3, [r7, #14]
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8015dea:	89fa      	ldrh	r2, [r7, #14]
 8015dec:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015dee:	4413      	add	r3, r2
 8015df0:	1d1a      	adds	r2, r3, #4
 8015df2:	8abb      	ldrh	r3, [r7, #20]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d849      	bhi.n	8015e8c <mg_tls_server_recv_hello+0x2fc>
      if (m == 32 && key_exchange[k] == 0x00 && key_exchange[k + 1] == 0x1d) {
 8015df8:	89fb      	ldrh	r3, [r7, #14]
 8015dfa:	2b20      	cmp	r3, #32
 8015dfc:	d126      	bne.n	8015e4c <mg_tls_server_recv_hello+0x2bc>
 8015dfe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015e00:	693a      	ldr	r2, [r7, #16]
 8015e02:	4413      	add	r3, r2
 8015e04:	781b      	ldrb	r3, [r3, #0]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d120      	bne.n	8015e4c <mg_tls_server_recv_hello+0x2bc>
 8015e0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	693a      	ldr	r2, [r7, #16]
 8015e10:	4413      	add	r3, r2
 8015e12:	781b      	ldrb	r3, [r3, #0]
 8015e14:	2b1d      	cmp	r3, #29
 8015e16:	d119      	bne.n	8015e4c <mg_tls_server_recv_hello+0x2bc>
        memmove(tls->x25519_cli, key_exchange + k + 4, m);
 8015e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e1a:	f103 00d0 	add.w	r0, r3, #208	@ 0xd0
 8015e1e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015e20:	3304      	adds	r3, #4
 8015e22:	693a      	ldr	r2, [r7, #16]
 8015e24:	4413      	add	r3, r2
 8015e26:	89fa      	ldrh	r2, [r7, #14]
 8015e28:	4619      	mov	r1, r3
 8015e2a:	f00d fc9e 	bl	802376a <memmove>
        mg_tls_drop_record(c);
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f7ff f881 	bl	8014f36 <mg_tls_drop_record>
        return 0;
 8015e34:	2300      	movs	r3, #0
 8015e36:	e030      	b.n	8015e9a <mg_tls_server_recv_hello+0x30a>
 8015e38:	08025fe0 	.word	0x08025fe0
 8015e3c:	24000258 	.word	0x24000258
 8015e40:	08028228 	.word	0x08028228
 8015e44:	08024478 	.word	0x08024478
 8015e48:	08025ffc 	.word	0x08025ffc
      }
      k += (uint16_t) (m + 4);
 8015e4c:	89fa      	ldrh	r2, [r7, #14]
 8015e4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8015e50:	4413      	add	r3, r2
 8015e52:	b29b      	uxth	r3, r3
 8015e54:	3304      	adds	r3, #4
 8015e56:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    for (k = 0; k < key_exchange_len;) {
 8015e58:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8015e5a:	8abb      	ldrh	r3, [r7, #20]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d3b3      	bcc.n	8015dc8 <mg_tls_server_recv_hello+0x238>
    }
    j += (uint16_t) (n + 4);
 8015e60:	8afa      	ldrh	r2, [r7, #22]
 8015e62:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015e64:	4413      	add	r3, r2
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	3304      	adds	r3, #4
 8015e6a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  for (j = 0; j < ext_len;) {
 8015e6c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015e6e:	8bbb      	ldrh	r3, [r7, #28]
 8015e70:	429a      	cmp	r2, r3
 8015e72:	f4ff af5d 	bcc.w	8015d30 <mg_tls_server_recv_hello+0x1a0>
  }
fail:
 8015e76:	e00a      	b.n	8015e8e <mg_tls_server_recv_hello+0x2fe>
  if (rio->len < 50) goto fail;
 8015e78:	bf00      	nop
 8015e7a:	e008      	b.n	8015e8e <mg_tls_server_recv_hello+0x2fe>
  if (((uint32_t) msgsz + 4) > rio->len) goto fail;
 8015e7c:	bf00      	nop
 8015e7e:	e006      	b.n	8015e8e <mg_tls_server_recv_hello+0x2fe>
    goto fail;
 8015e80:	bf00      	nop
 8015e82:	e004      	b.n	8015e8e <mg_tls_server_recv_hello+0x2fe>
  if (((unsigned char *) ext + ext_len) > (rio->buf + rio->len)) goto fail;
 8015e84:	bf00      	nop
 8015e86:	e002      	b.n	8015e8e <mg_tls_server_recv_hello+0x2fe>
      goto fail;
 8015e88:	bf00      	nop
 8015e8a:	e000      	b.n	8015e8e <mg_tls_server_recv_hello+0x2fe>
      if (((uint32_t) m + k + 4) > key_exchange_len) goto fail;
 8015e8c:	bf00      	nop
  mg_error(c, "bad client hello");
 8015e8e:	4905      	ldr	r1, [pc, #20]	@ (8015ea4 <mg_tls_server_recv_hello+0x314>)
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f7f0 fdbf 	bl	8006a14 <mg_error>
  return -1;
 8015e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3730      	adds	r7, #48	@ 0x30
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}
 8015ea2:	bf00      	nop
 8015ea4:	08026010 	.word	0x08026010

08015ea8 <mg_tls_server_send_hello>:
#define PLACEHOLDER_8B 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'
#define PLACEHOLDER_16B PLACEHOLDER_8B, PLACEHOLDER_8B
#define PLACEHOLDER_32B PLACEHOLDER_16B, PLACEHOLDER_16B

// put ServerHello record into wio buffer
static void mg_tls_server_send_hello(struct mg_connection *c) {
 8015ea8:	b5b0      	push	{r4, r5, r7, lr}
 8015eaa:	b0b4      	sub	sp, #208	@ 0xd0
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8015eb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  struct mg_iobuf *wio = &tls->send;
 8015eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015ebe:	3304      	adds	r3, #4
 8015ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

  // clang-format off
  uint8_t msg_server_hello[122] = {
 8015ec4:	4a4c      	ldr	r2, [pc, #304]	@ (8015ff8 <mg_tls_server_send_hello+0x150>)
 8015ec6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015eca:	4611      	mov	r1, r2
 8015ecc:	227a      	movs	r2, #122	@ 0x7a
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f00d fd9b 	bl	8023a0a <memcpy>
  // clang-format on

  // calculate keyshare
  uint8_t x25519_pub[X25519_BYTES];
  uint8_t x25519_prv[X25519_BYTES];
  if (!mg_random(x25519_prv, sizeof(x25519_prv))) mg_error(c, "RNG");
 8015ed4:	f107 030c 	add.w	r3, r7, #12
 8015ed8:	2120      	movs	r1, #32
 8015eda:	4618      	mov	r0, r3
 8015edc:	f7ea fc16 	bl	800070c <mg_random>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	f083 0301 	eor.w	r3, r3, #1
 8015ee6:	b2db      	uxtb	r3, r3
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d003      	beq.n	8015ef4 <mg_tls_server_send_hello+0x4c>
 8015eec:	4943      	ldr	r1, [pc, #268]	@ (8015ffc <mg_tls_server_send_hello+0x154>)
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	f7f0 fd90 	bl	8006a14 <mg_error>
  mg_tls_x25519(x25519_pub, x25519_prv, X25519_BASE_POINT, 1);
 8015ef4:	f107 010c 	add.w	r1, r7, #12
 8015ef8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015efc:	2301      	movs	r3, #1
 8015efe:	4a40      	ldr	r2, [pc, #256]	@ (8016000 <mg_tls_server_send_hello+0x158>)
 8015f00:	f009 f872 	bl	801efe8 <mg_tls_x25519>
  mg_tls_x25519(tls->x25519_sec, x25519_prv, tls->x25519_cli, 1);
 8015f04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015f08:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8015f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015f10:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8015f14:	f107 010c 	add.w	r1, r7, #12
 8015f18:	2301      	movs	r3, #1
 8015f1a:	f009 f865 	bl	801efe8 <mg_tls_x25519>
  mg_tls_hexdump("s x25519 sec", tls->x25519_sec, sizeof(tls->x25519_sec));
 8015f1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015f22:	33f0      	adds	r3, #240	@ 0xf0
 8015f24:	2220      	movs	r2, #32
 8015f26:	4619      	mov	r1, r3
 8015f28:	4836      	ldr	r0, [pc, #216]	@ (8016004 <mg_tls_server_send_hello+0x15c>)
 8015f2a:	f7fe fe85 	bl	8014c38 <mg_tls_hexdump>

  // fill in the gaps: random + session ID + keyshare
  memmove(msg_server_hello + 6, tls->random, sizeof(tls->random));
 8015f2e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015f32:	3306      	adds	r3, #6
 8015f34:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8015f38:	3290      	adds	r2, #144	@ 0x90
 8015f3a:	6815      	ldr	r5, [r2, #0]
 8015f3c:	6854      	ldr	r4, [r2, #4]
 8015f3e:	6890      	ldr	r0, [r2, #8]
 8015f40:	68d1      	ldr	r1, [r2, #12]
 8015f42:	601d      	str	r5, [r3, #0]
 8015f44:	605c      	str	r4, [r3, #4]
 8015f46:	6098      	str	r0, [r3, #8]
 8015f48:	60d9      	str	r1, [r3, #12]
 8015f4a:	6915      	ldr	r5, [r2, #16]
 8015f4c:	6954      	ldr	r4, [r2, #20]
 8015f4e:	6990      	ldr	r0, [r2, #24]
 8015f50:	69d1      	ldr	r1, [r2, #28]
 8015f52:	611d      	str	r5, [r3, #16]
 8015f54:	615c      	str	r4, [r3, #20]
 8015f56:	6198      	str	r0, [r3, #24]
 8015f58:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 39, tls->session_id, sizeof(tls->session_id));
 8015f5a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015f5e:	3327      	adds	r3, #39	@ 0x27
 8015f60:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8015f64:	32b0      	adds	r2, #176	@ 0xb0
 8015f66:	6815      	ldr	r5, [r2, #0]
 8015f68:	6854      	ldr	r4, [r2, #4]
 8015f6a:	6890      	ldr	r0, [r2, #8]
 8015f6c:	68d1      	ldr	r1, [r2, #12]
 8015f6e:	601d      	str	r5, [r3, #0]
 8015f70:	605c      	str	r4, [r3, #4]
 8015f72:	6098      	str	r0, [r3, #8]
 8015f74:	60d9      	str	r1, [r3, #12]
 8015f76:	6915      	ldr	r5, [r2, #16]
 8015f78:	6954      	ldr	r4, [r2, #20]
 8015f7a:	6990      	ldr	r0, [r2, #24]
 8015f7c:	69d1      	ldr	r1, [r2, #28]
 8015f7e:	611d      	str	r5, [r3, #16]
 8015f80:	615c      	str	r4, [r3, #20]
 8015f82:	6198      	str	r0, [r3, #24]
 8015f84:	61d9      	str	r1, [r3, #28]
  memmove(msg_server_hello + 84, x25519_pub, sizeof(x25519_pub));
 8015f86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015f8a:	3354      	adds	r3, #84	@ 0x54
 8015f8c:	461d      	mov	r5, r3
 8015f8e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8015f92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f94:	6028      	str	r0, [r5, #0]
 8015f96:	6069      	str	r1, [r5, #4]
 8015f98:	60aa      	str	r2, [r5, #8]
 8015f9a:	60eb      	str	r3, [r5, #12]
 8015f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015f9e:	6128      	str	r0, [r5, #16]
 8015fa0:	6169      	str	r1, [r5, #20]
 8015fa2:	61aa      	str	r2, [r5, #24]
 8015fa4:	61eb      	str	r3, [r5, #28]

  // server hello message
  mg_iobuf_add(wio, wio->len, "\x16\x03\x03\x00\x7a", 5);
 8015fa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015faa:	6899      	ldr	r1, [r3, #8]
 8015fac:	2305      	movs	r3, #5
 8015fae:	4a16      	ldr	r2, [pc, #88]	@ (8016008 <mg_tls_server_send_hello+0x160>)
 8015fb0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8015fb4:	f7f5 fb20 	bl	800b5f8 <mg_iobuf_add>
  mg_iobuf_add(wio, wio->len, msg_server_hello, sizeof(msg_server_hello));
 8015fb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015fbc:	6899      	ldr	r1, [r3, #8]
 8015fbe:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015fc2:	237a      	movs	r3, #122	@ 0x7a
 8015fc4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8015fc8:	f7f5 fb16 	bl	800b5f8 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_server_hello, sizeof(msg_server_hello));
 8015fcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8015fd0:	3320      	adds	r3, #32
 8015fd2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8015fd6:	227a      	movs	r2, #122	@ 0x7a
 8015fd8:	4618      	mov	r0, r3
 8015fda:	f7fc fded 	bl	8012bb8 <mg_sha256_update>

  // change cipher message
  mg_iobuf_add(wio, wio->len, "\x14\x03\x03\x00\x01\x01", 6);
 8015fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015fe2:	6899      	ldr	r1, [r3, #8]
 8015fe4:	2306      	movs	r3, #6
 8015fe6:	4a09      	ldr	r2, [pc, #36]	@ (801600c <mg_tls_server_send_hello+0x164>)
 8015fe8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 8015fec:	f7f5 fb04 	bl	800b5f8 <mg_iobuf_add>
}
 8015ff0:	bf00      	nop
 8015ff2:	37d0      	adds	r7, #208	@ 0xd0
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8015ff8:	08026048 	.word	0x08026048
 8015ffc:	08026024 	.word	0x08026024
 8016000:	08027fcc 	.word	0x08027fcc
 8016004:	08026028 	.word	0x08026028
 8016008:	08026038 	.word	0x08026038
 801600c:	08026040 	.word	0x08026040

08016010 <mg_tls_server_send_ext>:

static void mg_tls_server_send_ext(struct mg_connection *c) {
 8016010:	b580      	push	{r7, lr}
 8016012:	b086      	sub	sp, #24
 8016014:	af00      	add	r7, sp, #0
 8016016:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801601e:	617b      	str	r3, [r7, #20]
  // server extensions
  uint8_t ext[6] = {0x08, 0, 0, 2, 0, 0};
 8016020:	4b0b      	ldr	r3, [pc, #44]	@ (8016050 <mg_tls_server_send_ext+0x40>)
 8016022:	60fb      	str	r3, [r7, #12]
 8016024:	2300      	movs	r3, #0
 8016026:	823b      	strh	r3, [r7, #16]
  mg_sha256_update(&tls->sha256, ext, sizeof(ext));
 8016028:	697b      	ldr	r3, [r7, #20]
 801602a:	3320      	adds	r3, #32
 801602c:	f107 010c 	add.w	r1, r7, #12
 8016030:	2206      	movs	r2, #6
 8016032:	4618      	mov	r0, r3
 8016034:	f7fc fdc0 	bl	8012bb8 <mg_sha256_update>
  mg_tls_encrypt(c, ext, sizeof(ext), MG_TLS_HANDSHAKE);
 8016038:	f107 010c 	add.w	r1, r7, #12
 801603c:	2316      	movs	r3, #22
 801603e:	2206      	movs	r2, #6
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f7ff faeb 	bl	801561c <mg_tls_encrypt>
}
 8016046:	bf00      	nop
 8016048:	3718      	adds	r7, #24
 801604a:	46bd      	mov	sp, r7
 801604c:	bd80      	pop	{r7, pc}
 801604e:	bf00      	nop
 8016050:	02000008 	.word	0x02000008

08016054 <mg_tls_server_send_cert>:

static void mg_tls_server_send_cert(struct mg_connection *c) {
 8016054:	b580      	push	{r7, lr}
 8016056:	b088      	sub	sp, #32
 8016058:	af00      	add	r7, sp, #0
 801605a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016062:	61fb      	str	r3, [r7, #28]
  int send_ca = !c->is_client && tls->ca_der.len > 0;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801606a:	f003 0302 	and.w	r3, r3, #2
 801606e:	b2db      	uxtb	r3, r3
 8016070:	2b00      	cmp	r3, #0
 8016072:	d106      	bne.n	8016082 <mg_tls_server_send_cert+0x2e>
 8016074:	69fb      	ldr	r3, [r7, #28]
 8016076:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 801607a:	2b00      	cmp	r3, #0
 801607c:	d001      	beq.n	8016082 <mg_tls_server_send_cert+0x2e>
 801607e:	2301      	movs	r3, #1
 8016080:	e000      	b.n	8016084 <mg_tls_server_send_cert+0x30>
 8016082:	2300      	movs	r3, #0
 8016084:	61bb      	str	r3, [r7, #24]
  // server DER certificate + CA (optional)
  size_t n = tls->cert_der.len + (send_ca ? tls->ca_der.len + 5 : 0);
 8016086:	69fb      	ldr	r3, [r7, #28]
 8016088:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 801608c:	69bb      	ldr	r3, [r7, #24]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d004      	beq.n	801609c <mg_tls_server_send_cert+0x48>
 8016092:	69fb      	ldr	r3, [r7, #28]
 8016094:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8016098:	3305      	adds	r3, #5
 801609a:	e000      	b.n	801609e <mg_tls_server_send_cert+0x4a>
 801609c:	2300      	movs	r3, #0
 801609e:	4413      	add	r3, r2
 80160a0:	617b      	str	r3, [r7, #20]
  uint8_t *cert = (uint8_t *) calloc(1, 13 + n);
 80160a2:	697b      	ldr	r3, [r7, #20]
 80160a4:	330d      	adds	r3, #13
 80160a6:	4619      	mov	r1, r3
 80160a8:	2001      	movs	r0, #1
 80160aa:	f00d f8a3 	bl	80231f4 <calloc>
 80160ae:	4603      	mov	r3, r0
 80160b0:	613b      	str	r3, [r7, #16]
  if (cert == NULL) {
 80160b2:	693b      	ldr	r3, [r7, #16]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d104      	bne.n	80160c2 <mg_tls_server_send_cert+0x6e>
    mg_error(c, "tls cert oom");
 80160b8:	495e      	ldr	r1, [pc, #376]	@ (8016234 <mg_tls_server_send_cert+0x1e0>)
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f7f0 fcaa 	bl	8006a14 <mg_error>
    return;
 80160c0:	e0b4      	b.n	801622c <mg_tls_server_send_cert+0x1d8>
  }
  cert[0] = 0x0b;  // handshake header
 80160c2:	693b      	ldr	r3, [r7, #16]
 80160c4:	220b      	movs	r2, #11
 80160c6:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 1, n + 9);
 80160c8:	697b      	ldr	r3, [r7, #20]
 80160ca:	3309      	adds	r3, #9
 80160cc:	0c1a      	lsrs	r2, r3, #16
 80160ce:	693b      	ldr	r3, [r7, #16]
 80160d0:	3301      	adds	r3, #1
 80160d2:	b2d2      	uxtb	r2, r2
 80160d4:	701a      	strb	r2, [r3, #0]
 80160d6:	697b      	ldr	r3, [r7, #20]
 80160d8:	3309      	adds	r3, #9
 80160da:	0a1a      	lsrs	r2, r3, #8
 80160dc:	693b      	ldr	r3, [r7, #16]
 80160de:	3302      	adds	r3, #2
 80160e0:	b2d2      	uxtb	r2, r2
 80160e2:	701a      	strb	r2, [r3, #0]
 80160e4:	697b      	ldr	r3, [r7, #20]
 80160e6:	b2da      	uxtb	r2, r3
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	3303      	adds	r3, #3
 80160ec:	3209      	adds	r2, #9
 80160ee:	b2d2      	uxtb	r2, r2
 80160f0:	701a      	strb	r2, [r3, #0]
  cert[4] = 0;                                 // request context
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	3304      	adds	r3, #4
 80160f6:	2200      	movs	r2, #0
 80160f8:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 5, n + 5);              // 3 bytes: cert (s) length
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	3305      	adds	r3, #5
 80160fe:	0c1a      	lsrs	r2, r3, #16
 8016100:	693b      	ldr	r3, [r7, #16]
 8016102:	3305      	adds	r3, #5
 8016104:	b2d2      	uxtb	r2, r2
 8016106:	701a      	strb	r2, [r3, #0]
 8016108:	697b      	ldr	r3, [r7, #20]
 801610a:	3305      	adds	r3, #5
 801610c:	0a1a      	lsrs	r2, r3, #8
 801610e:	693b      	ldr	r3, [r7, #16]
 8016110:	3306      	adds	r3, #6
 8016112:	b2d2      	uxtb	r2, r2
 8016114:	701a      	strb	r2, [r3, #0]
 8016116:	697b      	ldr	r3, [r7, #20]
 8016118:	b2da      	uxtb	r2, r3
 801611a:	693b      	ldr	r3, [r7, #16]
 801611c:	3307      	adds	r3, #7
 801611e:	3205      	adds	r2, #5
 8016120:	b2d2      	uxtb	r2, r2
 8016122:	701a      	strb	r2, [r3, #0]
  MG_STORE_BE24(cert + 8, tls->cert_der.len);  // 3 bytes: first cert len
 8016124:	69fb      	ldr	r3, [r7, #28]
 8016126:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801612a:	0c1a      	lsrs	r2, r3, #16
 801612c:	693b      	ldr	r3, [r7, #16]
 801612e:	3308      	adds	r3, #8
 8016130:	b2d2      	uxtb	r2, r2
 8016132:	701a      	strb	r2, [r3, #0]
 8016134:	69fb      	ldr	r3, [r7, #28]
 8016136:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801613a:	0a1a      	lsrs	r2, r3, #8
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	3309      	adds	r3, #9
 8016140:	b2d2      	uxtb	r2, r2
 8016142:	701a      	strb	r2, [r3, #0]
 8016144:	69fb      	ldr	r3, [r7, #28]
 8016146:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	330a      	adds	r3, #10
 801614e:	b2d2      	uxtb	r2, r2
 8016150:	701a      	strb	r2, [r3, #0]
  // bytes 11+ are certificate in DER format
  memmove(cert + 11, tls->cert_der.buf, tls->cert_der.len);
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	f103 000b 	add.w	r0, r3, #11
 8016158:	69fb      	ldr	r3, [r7, #28]
 801615a:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 801615e:	69fb      	ldr	r3, [r7, #28]
 8016160:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016164:	461a      	mov	r2, r3
 8016166:	f00d fb00 	bl	802376a <memmove>
  MG_STORE_BE16(cert + 11 + tls->cert_der.len,
 801616a:	69fb      	ldr	r3, [r7, #28]
 801616c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016170:	330b      	adds	r3, #11
 8016172:	693a      	ldr	r2, [r7, #16]
 8016174:	4413      	add	r3, r2
 8016176:	2200      	movs	r2, #0
 8016178:	701a      	strb	r2, [r3, #0]
 801617a:	69fb      	ldr	r3, [r7, #28]
 801617c:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016180:	330c      	adds	r3, #12
 8016182:	693a      	ldr	r2, [r7, #16]
 8016184:	4413      	add	r3, r2
 8016186:	2200      	movs	r2, #0
 8016188:	701a      	strb	r2, [r3, #0]
                0);  // certificate extensions (none)
  if (send_ca) {
 801618a:	69bb      	ldr	r3, [r7, #24]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d039      	beq.n	8016204 <mg_tls_server_send_cert+0x1b0>
    size_t offset = 13 + tls->cert_der.len;
 8016190:	69fb      	ldr	r3, [r7, #28]
 8016192:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8016196:	330d      	adds	r3, #13
 8016198:	60fb      	str	r3, [r7, #12]
    MG_STORE_BE24(cert + offset, tls->ca_der.len);  // 3 bytes: CA cert length
 801619a:	69fb      	ldr	r3, [r7, #28]
 801619c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80161a0:	0c19      	lsrs	r1, r3, #16
 80161a2:	693a      	ldr	r2, [r7, #16]
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	4413      	add	r3, r2
 80161a8:	b2ca      	uxtb	r2, r1
 80161aa:	701a      	strb	r2, [r3, #0]
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80161b2:	0a19      	lsrs	r1, r3, #8
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	3301      	adds	r3, #1
 80161b8:	693a      	ldr	r2, [r7, #16]
 80161ba:	4413      	add	r3, r2
 80161bc:	b2ca      	uxtb	r2, r1
 80161be:	701a      	strb	r2, [r3, #0]
 80161c0:	69fb      	ldr	r3, [r7, #28]
 80161c2:	f8d3 1124 	ldr.w	r1, [r3, #292]	@ 0x124
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	3302      	adds	r3, #2
 80161ca:	693a      	ldr	r2, [r7, #16]
 80161cc:	4413      	add	r3, r2
 80161ce:	b2ca      	uxtb	r2, r1
 80161d0:	701a      	strb	r2, [r3, #0]
    memmove(cert + offset + 3, tls->ca_der.buf,
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	3303      	adds	r3, #3
 80161d6:	693a      	ldr	r2, [r7, #16]
 80161d8:	18d0      	adds	r0, r2, r3
 80161da:	69fb      	ldr	r3, [r7, #28]
 80161dc:	f8d3 1120 	ldr.w	r1, [r3, #288]	@ 0x120
 80161e0:	69fb      	ldr	r3, [r7, #28]
 80161e2:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80161e6:	461a      	mov	r2, r3
 80161e8:	f00d fabf 	bl	802376a <memmove>
            tls->ca_der.len);         // CA cert data
    MG_STORE_BE16(cert + 11 + n, 0);  // certificate extensions (none)
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	330b      	adds	r3, #11
 80161f0:	693a      	ldr	r2, [r7, #16]
 80161f2:	4413      	add	r3, r2
 80161f4:	2200      	movs	r2, #0
 80161f6:	701a      	strb	r2, [r3, #0]
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	330c      	adds	r3, #12
 80161fc:	693a      	ldr	r2, [r7, #16]
 80161fe:	4413      	add	r3, r2
 8016200:	2200      	movs	r2, #0
 8016202:	701a      	strb	r2, [r3, #0]
  }
  mg_sha256_update(&tls->sha256, cert, 13 + n);
 8016204:	69fb      	ldr	r3, [r7, #28]
 8016206:	f103 0020 	add.w	r0, r3, #32
 801620a:	697b      	ldr	r3, [r7, #20]
 801620c:	330d      	adds	r3, #13
 801620e:	461a      	mov	r2, r3
 8016210:	6939      	ldr	r1, [r7, #16]
 8016212:	f7fc fcd1 	bl	8012bb8 <mg_sha256_update>
  mg_tls_encrypt(c, cert, 13 + n, MG_TLS_HANDSHAKE);
 8016216:	697b      	ldr	r3, [r7, #20]
 8016218:	f103 020d 	add.w	r2, r3, #13
 801621c:	2316      	movs	r3, #22
 801621e:	6939      	ldr	r1, [r7, #16]
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f7ff f9fb 	bl	801561c <mg_tls_encrypt>
  free(cert);
 8016226:	6938      	ldr	r0, [r7, #16]
 8016228:	f00d f808 	bl	802323c <free>
}
 801622c:	3720      	adds	r7, #32
 801622e:	46bd      	mov	sp, r7
 8016230:	bd80      	pop	{r7, pc}
 8016232:	bf00      	nop
 8016234:	080260c4 	.word	0x080260c4

08016238 <init_SHA256>:
typedef struct SHA256_HashContext {
  MG_UECC_HashContext uECC;
  mg_sha256_ctx ctx;
} SHA256_HashContext;

static void init_SHA256(const MG_UECC_HashContext *base) {
 8016238:	b580      	push	{r7, lr}
 801623a:	b084      	sub	sp, #16
 801623c:	af00      	add	r7, sp, #0
 801623e:	6078      	str	r0, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	60fb      	str	r3, [r7, #12]
  mg_sha256_init(&c->ctx);
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	3318      	adds	r3, #24
 8016248:	4618      	mov	r0, r3
 801624a:	f7fc fa71 	bl	8012730 <mg_sha256_init>
}
 801624e:	bf00      	nop
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}

08016256 <update_SHA256>:

static void update_SHA256(const MG_UECC_HashContext *base,
                          const uint8_t *message, unsigned message_size) {
 8016256:	b580      	push	{r7, lr}
 8016258:	b086      	sub	sp, #24
 801625a:	af00      	add	r7, sp, #0
 801625c:	60f8      	str	r0, [r7, #12]
 801625e:	60b9      	str	r1, [r7, #8]
 8016260:	607a      	str	r2, [r7, #4]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	617b      	str	r3, [r7, #20]
  mg_sha256_update(&c->ctx, message, message_size);
 8016266:	697b      	ldr	r3, [r7, #20]
 8016268:	3318      	adds	r3, #24
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	68b9      	ldr	r1, [r7, #8]
 801626e:	4618      	mov	r0, r3
 8016270:	f7fc fca2 	bl	8012bb8 <mg_sha256_update>
}
 8016274:	bf00      	nop
 8016276:	3718      	adds	r7, #24
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}

0801627c <finish_SHA256>:
static void finish_SHA256(const MG_UECC_HashContext *base,
                          uint8_t *hash_result) {
 801627c:	b580      	push	{r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	6039      	str	r1, [r7, #0]
  SHA256_HashContext *c = (SHA256_HashContext *) base;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	60fb      	str	r3, [r7, #12]
  mg_sha256_final(hash_result, &c->ctx);
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	3318      	adds	r3, #24
 801628e:	4619      	mov	r1, r3
 8016290:	6838      	ldr	r0, [r7, #0]
 8016292:	f7fc fcca 	bl	8012c2a <mg_sha256_final>
}
 8016296:	bf00      	nop
 8016298:	3710      	adds	r7, #16
 801629a:	46bd      	mov	sp, r7
 801629c:	bd80      	pop	{r7, pc}
	...

080162a0 <mg_tls_send_cert_verify>:

static void mg_tls_send_cert_verify(struct mg_connection *c, int is_client) {
 80162a0:	b590      	push	{r4, r7, lr}
 80162a2:	b0f9      	sub	sp, #484	@ 0x1e4
 80162a4:	af02      	add	r7, sp, #8
 80162a6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80162aa:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80162ae:	6018      	str	r0, [r3, #0]
 80162b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80162b4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80162b8:	6019      	str	r1, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80162ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80162be:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80162c8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
  // server certificate verify packet
  uint8_t verify[82] = {0x0f, 0x00, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00};
 80162cc:	4a8a      	ldr	r2, [pc, #552]	@ (80164f8 <mg_tls_send_cert_verify+0x258>)
 80162ce:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80162d2:	6810      	ldr	r0, [r2, #0]
 80162d4:	6851      	ldr	r1, [r2, #4]
 80162d6:	c303      	stmia	r3!, {r0, r1}
 80162d8:	7a12      	ldrb	r2, [r2, #8]
 80162da:	701a      	strb	r2, [r3, #0]
 80162dc:	f207 1379 	addw	r3, r7, #377	@ 0x179
 80162e0:	2249      	movs	r2, #73	@ 0x49
 80162e2:	2100      	movs	r1, #0
 80162e4:	4618      	mov	r0, r3
 80162e6:	f00d fa5a 	bl	802379e <memset>
  size_t sigsz, verifysz = 0;
 80162ea:	2300      	movs	r3, #0
 80162ec:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  uint8_t hash[32] = {0}, tmp[2 * 32 + 64] = {0};
 80162f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80162f4:	2220      	movs	r2, #32
 80162f6:	2100      	movs	r1, #0
 80162f8:	4618      	mov	r0, r3
 80162fa:	f00d fa50 	bl	802379e <memset>
 80162fe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8016306:	4618      	mov	r0, r3
 8016308:	2380      	movs	r3, #128	@ 0x80
 801630a:	461a      	mov	r2, r3
 801630c:	2100      	movs	r1, #0
 801630e:	f00d fa46 	bl	802379e <memset>
  struct SHA256_HashContext ctx = {
 8016312:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016316:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801631a:	4618      	mov	r0, r3
 801631c:	2388      	movs	r3, #136	@ 0x88
 801631e:	461a      	mov	r2, r3
 8016320:	2100      	movs	r1, #0
 8016322:	f00d fa3c 	bl	802379e <memset>
 8016326:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801632a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801632e:	4a73      	ldr	r2, [pc, #460]	@ (80164fc <mg_tls_send_cert_verify+0x25c>)
 8016330:	601a      	str	r2, [r3, #0]
 8016332:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016336:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801633a:	4a71      	ldr	r2, [pc, #452]	@ (8016500 <mg_tls_send_cert_verify+0x260>)
 801633c:	605a      	str	r2, [r3, #4]
 801633e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016342:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8016346:	4a6f      	ldr	r2, [pc, #444]	@ (8016504 <mg_tls_send_cert_verify+0x264>)
 8016348:	609a      	str	r2, [r3, #8]
 801634a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801634e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8016352:	2240      	movs	r2, #64	@ 0x40
 8016354:	60da      	str	r2, [r3, #12]
 8016356:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 801635a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801635e:	2220      	movs	r2, #32
 8016360:	611a      	str	r2, [r3, #16]
 8016362:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016366:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 801636a:	f107 02d0 	add.w	r2, r7, #208	@ 0xd0
 801636e:	615a      	str	r2, [r3, #20]
      {&init_SHA256, &update_SHA256, &finish_SHA256, 64, 32, tmp},
      {{0}, 0, 0, {0}}};
  int neg1, neg2;
  uint8_t sig[64] = {0};
 8016370:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016374:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8016378:	4618      	mov	r0, r3
 801637a:	2340      	movs	r3, #64	@ 0x40
 801637c:	461a      	mov	r2, r3
 801637e:	2100      	movs	r1, #0
 8016380:	f00d fa0d 	bl	802379e <memset>

  mg_tls_calc_cert_verify_hash(c, (uint8_t *) hash, is_client);
 8016384:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016388:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 801638c:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8016390:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8016394:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8016398:	6812      	ldr	r2, [r2, #0]
 801639a:	6818      	ldr	r0, [r3, #0]
 801639c:	f7ff fb56 	bl	8015a4c <mg_tls_calc_cert_verify_hash>

  mg_uecc_sign_deterministic(tls->ec_key, hash, sizeof(hash), &ctx.uECC, sig,
 80163a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80163a4:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 80163a8:	f006 fdca 	bl	801cf40 <mg_uecc_secp256r1>
 80163ac:	4603      	mov	r3, r0
 80163ae:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80163b2:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 80163b6:	9301      	str	r3, [sp, #4]
 80163b8:	f107 0308 	add.w	r3, r7, #8
 80163bc:	9300      	str	r3, [sp, #0]
 80163be:	4613      	mov	r3, r2
 80163c0:	2220      	movs	r2, #32
 80163c2:	4620      	mov	r0, r4
 80163c4:	f007 fe2c 	bl	801e020 <mg_uecc_sign_deterministic>
                             mg_uecc_secp256r1());

  neg1 = !!(sig[0] & 0x80);
 80163c8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80163cc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80163d0:	781b      	ldrb	r3, [r3, #0]
 80163d2:	b25b      	sxtb	r3, r3
 80163d4:	b2db      	uxtb	r3, r3
 80163d6:	09db      	lsrs	r3, r3, #7
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  neg2 = !!(sig[32] & 0x80);
 80163de:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80163e2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80163e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80163ea:	b25b      	sxtb	r3, r3
 80163ec:	b2db      	uxtb	r3, r3
 80163ee:	09db      	lsrs	r3, r3, #7
 80163f0:	b2db      	uxtb	r3, r3
 80163f2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
  verify[8] = 0x30;  // ASN.1 SEQUENCE
 80163f6:	2330      	movs	r3, #48	@ 0x30
 80163f8:	f887 3178 	strb.w	r3, [r7, #376]	@ 0x178
  verify[9] = (uint8_t) (68 + neg1 + neg2);
 80163fc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8016400:	b2da      	uxtb	r2, r3
 8016402:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8016406:	b2db      	uxtb	r3, r3
 8016408:	4413      	add	r3, r2
 801640a:	b2db      	uxtb	r3, r3
 801640c:	3344      	adds	r3, #68	@ 0x44
 801640e:	b2db      	uxtb	r3, r3
 8016410:	f887 3179 	strb.w	r3, [r7, #377]	@ 0x179
  verify[10] = 0x02;  // ASN.1 INTEGER
 8016414:	2302      	movs	r3, #2
 8016416:	f887 317a 	strb.w	r3, [r7, #378]	@ 0x17a
  verify[11] = (uint8_t) (32 + neg1);
 801641a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 801641e:	b2db      	uxtb	r3, r3
 8016420:	3320      	adds	r3, #32
 8016422:	b2db      	uxtb	r3, r3
 8016424:	f887 317b 	strb.w	r3, [r7, #379]	@ 0x17b
  memmove(verify + 12 + neg1, sig, 32);
 8016428:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 801642c:	330c      	adds	r3, #12
 801642e:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 8016432:	4413      	add	r3, r2
 8016434:	f107 0108 	add.w	r1, r7, #8
 8016438:	2220      	movs	r2, #32
 801643a:	4618      	mov	r0, r3
 801643c:	f00d f995 	bl	802376a <memmove>
  verify[12 + 32 + neg1] = 0x02;  // ASN.1 INTEGER
 8016440:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8016444:	332c      	adds	r3, #44	@ 0x2c
 8016446:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 801644a:	443b      	add	r3, r7
 801644c:	2202      	movs	r2, #2
 801644e:	f803 2c68 	strb.w	r2, [r3, #-104]
  verify[13 + 32 + neg1] = (uint8_t) (32 + neg2);
 8016452:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8016456:	b2da      	uxtb	r2, r3
 8016458:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 801645c:	332d      	adds	r3, #45	@ 0x2d
 801645e:	3220      	adds	r2, #32
 8016460:	b2d2      	uxtb	r2, r2
 8016462:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8016466:	443b      	add	r3, r7
 8016468:	f803 2c68 	strb.w	r2, [r3, #-104]
  memmove(verify + 14 + 32 + neg1 + neg2, sig + 32, 32);
 801646c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8016470:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8016474:	4413      	add	r3, r2
 8016476:	332e      	adds	r3, #46	@ 0x2e
 8016478:	f507 72b8 	add.w	r2, r7, #368	@ 0x170
 801647c:	18d0      	adds	r0, r2, r3
 801647e:	f107 0308 	add.w	r3, r7, #8
 8016482:	3320      	adds	r3, #32
 8016484:	2220      	movs	r2, #32
 8016486:	4619      	mov	r1, r3
 8016488:	f00d f96f 	bl	802376a <memmove>

  sigsz = (size_t) (70 + neg1 + neg2);
 801648c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8016490:	f103 0246 	add.w	r2, r3, #70	@ 0x46
 8016494:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8016498:	4413      	add	r3, r2
 801649a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
  verifysz = 8U + sigsz;
 801649e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80164a2:	3308      	adds	r3, #8
 80164a4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  verify[3] = (uint8_t) (sigsz + 4);
 80164a8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80164ac:	b2db      	uxtb	r3, r3
 80164ae:	3304      	adds	r3, #4
 80164b0:	b2db      	uxtb	r3, r3
 80164b2:	f887 3173 	strb.w	r3, [r7, #371]	@ 0x173
  verify[7] = (uint8_t) sigsz;
 80164b6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80164ba:	b2db      	uxtb	r3, r3
 80164bc:	f887 3177 	strb.w	r3, [r7, #375]	@ 0x177

  mg_sha256_update(&tls->sha256, verify, verifysz);
 80164c0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80164c4:	3320      	adds	r3, #32
 80164c6:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80164ca:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7fc fb72 	bl	8012bb8 <mg_sha256_update>
  mg_tls_encrypt(c, verify, verifysz, MG_TLS_HANDSHAKE);
 80164d4:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 80164d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80164dc:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 80164e0:	2316      	movs	r3, #22
 80164e2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80164e6:	6800      	ldr	r0, [r0, #0]
 80164e8:	f7ff f898 	bl	801561c <mg_tls_encrypt>
}
 80164ec:	bf00      	nop
 80164ee:	f507 77ee 	add.w	r7, r7, #476	@ 0x1dc
 80164f2:	46bd      	mov	sp, r7
 80164f4:	bd90      	pop	{r4, r7, pc}
 80164f6:	bf00      	nop
 80164f8:	080260d4 	.word	0x080260d4
 80164fc:	08016239 	.word	0x08016239
 8016500:	08016257 	.word	0x08016257
 8016504:	0801627d 	.word	0x0801627d

08016508 <mg_tls_server_send_finish>:

static void mg_tls_server_send_finish(struct mg_connection *c) {
 8016508:	b580      	push	{r7, lr}
 801650a:	b0b4      	sub	sp, #208	@ 0xd0
 801650c:	af02      	add	r7, sp, #8
 801650e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016516:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 801651a:	4b1e      	ldr	r3, [pc, #120]	@ (8016594 <mg_tls_server_send_finish+0x8c>)
 801651c:	60fb      	str	r3, [r7, #12]
 801651e:	f107 0310 	add.w	r3, r7, #16
 8016522:	2220      	movs	r2, #32
 8016524:	2100      	movs	r1, #0
 8016526:	4618      	mov	r0, r3
 8016528:	f00d f939 	bl	802379e <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 801652c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8016530:	f103 0120 	add.w	r1, r3, #32
 8016534:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8016538:	2270      	movs	r2, #112	@ 0x70
 801653a:	4618      	mov	r0, r3
 801653c:	f00d f915 	bl	802376a <memmove>
  mg_sha256_final(hash, &sha256);
 8016540:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8016544:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016548:	4611      	mov	r1, r2
 801654a:	4618      	mov	r0, r3
 801654c:	f7fc fb6d 	bl	8012c2a <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.server_finished_key, 32, hash, 32);
 8016550:	f107 000c 	add.w	r0, r7, #12
 8016554:	3004      	adds	r0, #4
 8016556:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801655a:	f203 41d4 	addw	r1, r3, #1236	@ 0x4d4
 801655e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8016562:	2220      	movs	r2, #32
 8016564:	9200      	str	r2, [sp, #0]
 8016566:	2220      	movs	r2, #32
 8016568:	f7fc fcb3 	bl	8012ed2 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 801656c:	f107 010c 	add.w	r1, r7, #12
 8016570:	2316      	movs	r3, #22
 8016572:	2224      	movs	r2, #36	@ 0x24
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	f7ff f851 	bl	801561c <mg_tls_encrypt>
  mg_sha256_update(&tls->sha256, finish, sizeof(finish));
 801657a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801657e:	3320      	adds	r3, #32
 8016580:	f107 010c 	add.w	r1, r7, #12
 8016584:	2224      	movs	r2, #36	@ 0x24
 8016586:	4618      	mov	r0, r3
 8016588:	f7fc fb16 	bl	8012bb8 <mg_sha256_update>
}
 801658c:	bf00      	nop
 801658e:	37c8      	adds	r7, #200	@ 0xc8
 8016590:	46bd      	mov	sp, r7
 8016592:	bd80      	pop	{r7, pc}
 8016594:	20000014 	.word	0x20000014

08016598 <mg_tls_server_recv_finish>:

static int mg_tls_server_recv_finish(struct mg_connection *c) {
 8016598:	b580      	push	{r7, lr}
 801659a:	b0a0      	sub	sp, #128	@ 0x80
 801659c:	af00      	add	r7, sp, #0
 801659e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80165a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  unsigned char *recv_buf;
  // we have to backup sha256 value to restore it later, since Finished record
  // is exceptional and is not supposed to be added to the rolling hash
  // calculation.
  mg_sha256_ctx sha256 = tls->sha256;
 80165a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80165aa:	f107 0008 	add.w	r0, r7, #8
 80165ae:	3320      	adds	r3, #32
 80165b0:	2270      	movs	r2, #112	@ 0x70
 80165b2:	4619      	mov	r1, r3
 80165b4:	f00d fa29 	bl	8023a0a <memcpy>
  if (mg_tls_recv_record(c) < 0) {
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f7ff f92b 	bl	8015814 <mg_tls_recv_record>
 80165be:	4603      	mov	r3, r0
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	da02      	bge.n	80165ca <mg_tls_server_recv_finish+0x32>
    return -1;
 80165c4:	f04f 33ff 	mov.w	r3, #4294967295
 80165c8:	e01f      	b.n	801660a <mg_tls_server_recv_finish+0x72>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80165ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80165d0:	695b      	ldr	r3, [r3, #20]
 80165d2:	4413      	add	r3, r2
 80165d4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (recv_buf[0] != MG_TLS_FINISHED) {
 80165d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	2b14      	cmp	r3, #20
 80165dc:	d009      	beq.n	80165f2 <mg_tls_server_recv_finish+0x5a>
    mg_error(c, "expected Finish but got msg 0x%02x", recv_buf[0]);
 80165de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	461a      	mov	r2, r3
 80165e4:	490b      	ldr	r1, [pc, #44]	@ (8016614 <mg_tls_server_recv_finish+0x7c>)
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	f7f0 fa14 	bl	8006a14 <mg_error>
    return -1;
 80165ec:	f04f 33ff 	mov.w	r3, #4294967295
 80165f0:	e00b      	b.n	801660a <mg_tls_server_recv_finish+0x72>
  }
  mg_tls_drop_message(c);
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f7fe fcc2 	bl	8014f7c <mg_tls_drop_message>

  // restore hash
  tls->sha256 = sha256;
 80165f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80165fa:	3320      	adds	r3, #32
 80165fc:	f107 0108 	add.w	r1, r7, #8
 8016600:	2270      	movs	r2, #112	@ 0x70
 8016602:	4618      	mov	r0, r3
 8016604:	f00d fa01 	bl	8023a0a <memcpy>
  return 0;
 8016608:	2300      	movs	r3, #0
}
 801660a:	4618      	mov	r0, r3
 801660c:	3780      	adds	r7, #128	@ 0x80
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}
 8016612:	bf00      	nop
 8016614:	080260e0 	.word	0x080260e0

08016618 <mg_tls_client_send_hello>:

static void mg_tls_client_send_hello(struct mg_connection *c) {
 8016618:	b5b0      	push	{r4, r5, r7, lr}
 801661a:	b0c6      	sub	sp, #280	@ 0x118
 801661c:	af00      	add	r7, sp, #0
 801661e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016622:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016626:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016628:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801662c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016636:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  struct mg_iobuf *wio = &tls->send;
 801663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801663e:	3304      	adds	r3, #4
 8016640:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

  uint8_t x25519_pub[X25519_BYTES];

  // signature algorithms we actually support:
  // rsa_pkcs1_sha256, rsa_pss_rsae_sha256 and ecdsa_secp256r1_sha256
  uint8_t secp256r1_sig_algs[12] = {
 8016644:	4a27      	ldr	r2, [pc, #156]	@ (80166e4 <mg_tls_client_send_hello+0xcc>)
 8016646:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 801664a:	ca07      	ldmia	r2, {r0, r1, r2}
 801664c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      0x00, 0x0d, 0x00, 0x08, 0x00, 0x06, 0x04, 0x03, 0x08, 0x04, 0x04, 0x01,
  };
  // all popular signature algorithms (if we don't care about verification)
  uint8_t all_sig_algs[34] = {
 8016650:	4b25      	ldr	r3, [pc, #148]	@ (80166e8 <mg_tls_client_send_hello+0xd0>)
 8016652:	f107 04ac 	add.w	r4, r7, #172	@ 0xac
 8016656:	461d      	mov	r5, r3
 8016658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801665a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801665c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801665e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016660:	682b      	ldr	r3, [r5, #0]
 8016662:	8023      	strh	r3, [r4, #0]
      0x00, 0x0d, 0x00, 0x1e, 0x00, 0x1c, 0x04, 0x03, 0x05, 0x03, 0x06, 0x03,
      0x08, 0x07, 0x08, 0x08, 0x08, 0x09, 0x08, 0x0a, 0x08, 0x0b, 0x08, 0x04,
      0x08, 0x05, 0x08, 0x06, 0x04, 0x01, 0x05, 0x01, 0x06, 0x01};
  uint8_t server_name_ext[9] = {0x00, 0x00, 0x00, 0xfe, 0x00,
 8016664:	4a21      	ldr	r2, [pc, #132]	@ (80166ec <mg_tls_client_send_hello+0xd4>)
 8016666:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801666a:	ca07      	ldmia	r2, {r0, r1, r2}
 801666c:	c303      	stmia	r3!, {r0, r1}
 801666e:	701a      	strb	r2, [r3, #0]
                                0xfe, 0x00, 0x00, 0xfe};

  // clang-format off
  uint8_t msg_client_hello[145] = {
 8016670:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016674:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016678:	4a1d      	ldr	r2, [pc, #116]	@ (80166f0 <mg_tls_client_send_hello+0xd8>)
 801667a:	4618      	mov	r0, r3
 801667c:	4611      	mov	r1, r2
 801667e:	2391      	movs	r3, #145	@ 0x91
 8016680:	461a      	mov	r2, r3
 8016682:	f00d f9c2 	bl	8023a0a <memcpy>
      0x00, 0x2b, 0x00, 0x03, 0x02, 0x03, 0x04,
      // session ticket (none)
      0x00, 0x23, 0x00, 0x00, // 144 bytes till here
	};
  // clang-format on
  const char *hostname = tls->hostname;
 8016686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801668a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 801668e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  size_t hostnamesz = strlen(tls->hostname);
 8016692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016696:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 801669a:	4618      	mov	r0, r3
 801669c:	f7e9 fe98 	bl	80003d0 <strlen>
 80166a0:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
  size_t hostname_extsz = hostnamesz ? hostnamesz + 9 : 0;
 80166a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d003      	beq.n	80166b4 <mg_tls_client_send_hello+0x9c>
 80166ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80166b0:	3309      	adds	r3, #9
 80166b2:	e000      	b.n	80166b6 <mg_tls_client_send_hello+0x9e>
 80166b4:	2300      	movs	r3, #0
 80166b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *sig_alg = tls->skip_verification ? all_sig_algs : secp256r1_sig_algs;
 80166ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166be:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d002      	beq.n	80166cc <mg_tls_client_send_hello+0xb4>
 80166c6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80166ca:	e001      	b.n	80166d0 <mg_tls_client_send_hello+0xb8>
 80166cc:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80166d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 80166d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80166d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
                                             : sizeof(secp256r1_sig_algs);
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d009      	beq.n	80166f4 <mg_tls_client_send_hello+0xdc>
 80166e0:	2322      	movs	r3, #34	@ 0x22
 80166e2:	e008      	b.n	80166f6 <mg_tls_client_send_hello+0xde>
 80166e4:	08026104 	.word	0x08026104
 80166e8:	08026110 	.word	0x08026110
 80166ec:	08026134 	.word	0x08026134
 80166f0:	08026140 	.word	0x08026140
 80166f4:	230c      	movs	r3, #12
  size_t sig_alg_sz = tls->skip_verification ? sizeof(all_sig_algs)
 80166f6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

  // patch ClientHello with correct hostname ext length (if any)
  MG_STORE_BE16(msg_client_hello + 3,
 80166fa:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 80166fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016702:	4413      	add	r3, r2
 8016704:	338c      	adds	r3, #140	@ 0x8c
 8016706:	0a1b      	lsrs	r3, r3, #8
 8016708:	b2da      	uxtb	r2, r3
 801670a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801670e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016712:	70da      	strb	r2, [r3, #3]
 8016714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8016718:	b2da      	uxtb	r2, r3
 801671a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801671e:	b2db      	uxtb	r3, r3
 8016720:	4413      	add	r3, r2
 8016722:	b2db      	uxtb	r3, r3
 8016724:	3b74      	subs	r3, #116	@ 0x74
 8016726:	b2da      	uxtb	r2, r3
 8016728:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801672c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016730:	711a      	strb	r2, [r3, #4]
                hostname_extsz + 183 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 7,
 8016732:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8016736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801673a:	4413      	add	r3, r2
 801673c:	3388      	adds	r3, #136	@ 0x88
 801673e:	0a1b      	lsrs	r3, r3, #8
 8016740:	b2da      	uxtb	r2, r3
 8016742:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016746:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 801674a:	71da      	strb	r2, [r3, #7]
 801674c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8016750:	b2da      	uxtb	r2, r3
 8016752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016756:	b2db      	uxtb	r3, r3
 8016758:	4413      	add	r3, r2
 801675a:	b2db      	uxtb	r3, r3
 801675c:	3b78      	subs	r3, #120	@ 0x78
 801675e:	b2da      	uxtb	r2, r3
 8016760:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016764:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016768:	721a      	strb	r2, [r3, #8]
                hostname_extsz + 179 - 9 - 34 + sig_alg_sz);
  MG_STORE_BE16(msg_client_hello + 82,
 801676a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 801676e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016772:	4413      	add	r3, r2
 8016774:	333d      	adds	r3, #61	@ 0x3d
 8016776:	0a1b      	lsrs	r3, r3, #8
 8016778:	b2da      	uxtb	r2, r3
 801677a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801677e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8016782:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
 8016786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801678a:	b2da      	uxtb	r2, r3
 801678c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8016790:	b2db      	uxtb	r3, r3
 8016792:	4413      	add	r3, r2
 8016794:	b2db      	uxtb	r3, r3
 8016796:	333d      	adds	r3, #61	@ 0x3d
 8016798:	b2da      	uxtb	r2, r3
 801679a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801679e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80167a2:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
                hostname_extsz + 104 - 9 - 34 + sig_alg_sz);

  if (hostnamesz > 0) {
 80167a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d026      	beq.n	80167fc <mg_tls_client_send_hello+0x1e4>
    MG_STORE_BE16(server_name_ext + 2, hostnamesz + 5);
 80167ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80167b2:	3305      	adds	r3, #5
 80167b4:	0a1b      	lsrs	r3, r3, #8
 80167b6:	b2db      	uxtb	r3, r3
 80167b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 80167bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80167c0:	b2db      	uxtb	r3, r3
 80167c2:	3305      	adds	r3, #5
 80167c4:	b2db      	uxtb	r3, r3
 80167c6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
    MG_STORE_BE16(server_name_ext + 4, hostnamesz + 3);
 80167ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80167ce:	3303      	adds	r3, #3
 80167d0:	0a1b      	lsrs	r3, r3, #8
 80167d2:	b2db      	uxtb	r3, r3
 80167d4:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
 80167d8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80167dc:	b2db      	uxtb	r3, r3
 80167de:	3303      	adds	r3, #3
 80167e0:	b2db      	uxtb	r3, r3
 80167e2:	f887 30a5 	strb.w	r3, [r7, #165]	@ 0xa5
    MG_STORE_BE16(server_name_ext + 7, hostnamesz);
 80167e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80167ea:	0a1b      	lsrs	r3, r3, #8
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80167f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80167f6:	b2db      	uxtb	r3, r3
 80167f8:	f887 30a8 	strb.w	r3, [r7, #168]	@ 0xa8
  }

  // calculate keyshare
  if (!mg_random(tls->x25519_cli, sizeof(tls->x25519_cli))) mg_error(c, "RNG");
 80167fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016800:	33d0      	adds	r3, #208	@ 0xd0
 8016802:	2120      	movs	r1, #32
 8016804:	4618      	mov	r0, r3
 8016806:	f7e9 ff81 	bl	800070c <mg_random>
 801680a:	4603      	mov	r3, r0
 801680c:	f083 0301 	eor.w	r3, r3, #1
 8016810:	b2db      	uxtb	r3, r3
 8016812:	2b00      	cmp	r3, #0
 8016814:	d007      	beq.n	8016826 <mg_tls_client_send_hello+0x20e>
 8016816:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801681a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801681e:	496c      	ldr	r1, [pc, #432]	@ (80169d0 <mg_tls_client_send_hello+0x3b8>)
 8016820:	6818      	ldr	r0, [r3, #0]
 8016822:	f7f0 f8f7 	bl	8006a14 <mg_error>
  mg_tls_x25519(x25519_pub, tls->x25519_cli, X25519_BASE_POINT, 1);
 8016826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801682a:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 801682e:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8016832:	2301      	movs	r3, #1
 8016834:	4a67      	ldr	r2, [pc, #412]	@ (80169d4 <mg_tls_client_send_hello+0x3bc>)
 8016836:	f008 fbd7 	bl	801efe8 <mg_tls_x25519>

  // fill in the gaps: random + session ID + keyshare
  if (!mg_random(tls->session_id, sizeof(tls->session_id))) mg_error(c, "RNG");
 801683a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801683e:	33b0      	adds	r3, #176	@ 0xb0
 8016840:	2120      	movs	r1, #32
 8016842:	4618      	mov	r0, r3
 8016844:	f7e9 ff62 	bl	800070c <mg_random>
 8016848:	4603      	mov	r3, r0
 801684a:	f083 0301 	eor.w	r3, r3, #1
 801684e:	b2db      	uxtb	r3, r3
 8016850:	2b00      	cmp	r3, #0
 8016852:	d007      	beq.n	8016864 <mg_tls_client_send_hello+0x24c>
 8016854:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016858:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801685c:	495c      	ldr	r1, [pc, #368]	@ (80169d0 <mg_tls_client_send_hello+0x3b8>)
 801685e:	6818      	ldr	r0, [r3, #0]
 8016860:	f7f0 f8d8 	bl	8006a14 <mg_error>
  if (!mg_random(tls->random, sizeof(tls->random))) mg_error(c, "RNG");
 8016864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016868:	3390      	adds	r3, #144	@ 0x90
 801686a:	2120      	movs	r1, #32
 801686c:	4618      	mov	r0, r3
 801686e:	f7e9 ff4d 	bl	800070c <mg_random>
 8016872:	4603      	mov	r3, r0
 8016874:	f083 0301 	eor.w	r3, r3, #1
 8016878:	b2db      	uxtb	r3, r3
 801687a:	2b00      	cmp	r3, #0
 801687c:	d007      	beq.n	801688e <mg_tls_client_send_hello+0x276>
 801687e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8016882:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8016886:	4952      	ldr	r1, [pc, #328]	@ (80169d0 <mg_tls_client_send_hello+0x3b8>)
 8016888:	6818      	ldr	r0, [r3, #0]
 801688a:	f7f0 f8c3 	bl	8006a14 <mg_error>
  memmove(msg_client_hello + 11, tls->random, sizeof(tls->random));
 801688e:	f107 030c 	add.w	r3, r7, #12
 8016892:	330b      	adds	r3, #11
 8016894:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8016898:	3290      	adds	r2, #144	@ 0x90
 801689a:	6815      	ldr	r5, [r2, #0]
 801689c:	6854      	ldr	r4, [r2, #4]
 801689e:	6890      	ldr	r0, [r2, #8]
 80168a0:	68d1      	ldr	r1, [r2, #12]
 80168a2:	601d      	str	r5, [r3, #0]
 80168a4:	605c      	str	r4, [r3, #4]
 80168a6:	6098      	str	r0, [r3, #8]
 80168a8:	60d9      	str	r1, [r3, #12]
 80168aa:	6915      	ldr	r5, [r2, #16]
 80168ac:	6954      	ldr	r4, [r2, #20]
 80168ae:	6990      	ldr	r0, [r2, #24]
 80168b0:	69d1      	ldr	r1, [r2, #28]
 80168b2:	611d      	str	r5, [r3, #16]
 80168b4:	615c      	str	r4, [r3, #20]
 80168b6:	6198      	str	r0, [r3, #24]
 80168b8:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 44, tls->session_id, sizeof(tls->session_id));
 80168ba:	f107 030c 	add.w	r3, r7, #12
 80168be:	332c      	adds	r3, #44	@ 0x2c
 80168c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80168c4:	32b0      	adds	r2, #176	@ 0xb0
 80168c6:	6815      	ldr	r5, [r2, #0]
 80168c8:	6854      	ldr	r4, [r2, #4]
 80168ca:	6890      	ldr	r0, [r2, #8]
 80168cc:	68d1      	ldr	r1, [r2, #12]
 80168ce:	601d      	str	r5, [r3, #0]
 80168d0:	605c      	str	r4, [r3, #4]
 80168d2:	6098      	str	r0, [r3, #8]
 80168d4:	60d9      	str	r1, [r3, #12]
 80168d6:	6915      	ldr	r5, [r2, #16]
 80168d8:	6954      	ldr	r4, [r2, #20]
 80168da:	6990      	ldr	r0, [r2, #24]
 80168dc:	69d1      	ldr	r1, [r2, #28]
 80168de:	611d      	str	r5, [r3, #16]
 80168e0:	615c      	str	r4, [r3, #20]
 80168e2:	6198      	str	r0, [r3, #24]
 80168e4:	61d9      	str	r1, [r3, #28]
  memmove(msg_client_hello + 94, x25519_pub, sizeof(x25519_pub));
 80168e6:	f107 030c 	add.w	r3, r7, #12
 80168ea:	335e      	adds	r3, #94	@ 0x5e
 80168ec:	461d      	mov	r5, r3
 80168ee:	f107 04dc 	add.w	r4, r7, #220	@ 0xdc
 80168f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80168f4:	6028      	str	r0, [r5, #0]
 80168f6:	6069      	str	r1, [r5, #4]
 80168f8:	60aa      	str	r2, [r5, #8]
 80168fa:	60eb      	str	r3, [r5, #12]
 80168fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80168fe:	6128      	str	r0, [r5, #16]
 8016900:	6169      	str	r1, [r5, #20]
 8016902:	61aa      	str	r2, [r5, #24]
 8016904:	61eb      	str	r3, [r5, #28]

  // client hello message
  mg_iobuf_add(wio, wio->len, msg_client_hello, sizeof(msg_client_hello));
 8016906:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801690a:	6899      	ldr	r1, [r3, #8]
 801690c:	f107 020c 	add.w	r2, r7, #12
 8016910:	2391      	movs	r3, #145	@ 0x91
 8016912:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8016916:	f7f4 fe6f 	bl	800b5f8 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, msg_client_hello + 5,
 801691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801691e:	f103 0020 	add.w	r0, r3, #32
 8016922:	f107 030c 	add.w	r3, r7, #12
 8016926:	3305      	adds	r3, #5
 8016928:	228c      	movs	r2, #140	@ 0x8c
 801692a:	4619      	mov	r1, r3
 801692c:	f7fc f944 	bl	8012bb8 <mg_sha256_update>
                   sizeof(msg_client_hello) - 5);
  mg_iobuf_add(wio, wio->len, sig_alg, sig_alg_sz);
 8016930:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8016934:	6899      	ldr	r1, [r3, #8]
 8016936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801693a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801693e:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8016942:	f7f4 fe59 	bl	800b5f8 <mg_iobuf_add>
  mg_sha256_update(&tls->sha256, sig_alg, sig_alg_sz);
 8016946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801694a:	3320      	adds	r3, #32
 801694c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8016950:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8016954:	4618      	mov	r0, r3
 8016956:	f7fc f92f 	bl	8012bb8 <mg_sha256_update>
  if (hostnamesz > 0) {
 801695a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 801695e:	2b00      	cmp	r3, #0
 8016960:	d027      	beq.n	80169b2 <mg_tls_client_send_hello+0x39a>
    mg_iobuf_add(wio, wio->len, server_name_ext, sizeof(server_name_ext));
 8016962:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8016966:	6899      	ldr	r1, [r3, #8]
 8016968:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801696c:	2309      	movs	r3, #9
 801696e:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8016972:	f7f4 fe41 	bl	800b5f8 <mg_iobuf_add>
    mg_iobuf_add(wio, wio->len, hostname, hostnamesz);
 8016976:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 801697a:	6899      	ldr	r1, [r3, #8]
 801697c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8016980:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8016984:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8016988:	f7f4 fe36 	bl	800b5f8 <mg_iobuf_add>
    mg_sha256_update(&tls->sha256, server_name_ext, sizeof(server_name_ext));
 801698c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8016990:	3320      	adds	r3, #32
 8016992:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 8016996:	2209      	movs	r2, #9
 8016998:	4618      	mov	r0, r3
 801699a:	f7fc f90d 	bl	8012bb8 <mg_sha256_update>
    mg_sha256_update(&tls->sha256, (uint8_t *) hostname, hostnamesz);
 801699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80169a2:	3320      	adds	r3, #32
 80169a4:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80169a8:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 80169ac:	4618      	mov	r0, r3
 80169ae:	f7fc f903 	bl	8012bb8 <mg_sha256_update>
  }

  // change cipher message
  mg_iobuf_add(wio, wio->len, (const char *) "\x14\x03\x03\x00\x01\x01", 6);
 80169b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80169b6:	6899      	ldr	r1, [r3, #8]
 80169b8:	2306      	movs	r3, #6
 80169ba:	4a07      	ldr	r2, [pc, #28]	@ (80169d8 <mg_tls_client_send_hello+0x3c0>)
 80169bc:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 80169c0:	f7f4 fe1a 	bl	800b5f8 <mg_iobuf_add>
}
 80169c4:	bf00      	nop
 80169c6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bdb0      	pop	{r4, r5, r7, pc}
 80169ce:	bf00      	nop
 80169d0:	08026024 	.word	0x08026024
 80169d4:	08027fcc 	.word	0x08027fcc
 80169d8:	08026040 	.word	0x08026040

080169dc <mg_tls_client_recv_hello>:

static int mg_tls_client_recv_hello(struct mg_connection *c) {
 80169dc:	b580      	push	{r7, lr}
 80169de:	b08a      	sub	sp, #40	@ 0x28
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80169ea:	623b      	str	r3, [r7, #32]
  struct mg_iobuf *rio = &c->rtls;
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	3368      	adds	r3, #104	@ 0x68
 80169f0:	61fb      	str	r3, [r7, #28]
  uint16_t msgsz;
  uint8_t *ext;
  uint16_t ext_len;
  int j;

  if (!mg_tls_got_record(c)) {
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f7fe fa77 	bl	8014ee6 <mg_tls_got_record>
 80169f8:	4603      	mov	r3, r0
 80169fa:	f083 0301 	eor.w	r3, r3, #1
 80169fe:	b2db      	uxtb	r3, r3
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d002      	beq.n	8016a0a <mg_tls_client_recv_hello+0x2e>
    return MG_IO_WAIT;
 8016a04:	f06f 0301 	mvn.w	r3, #1
 8016a08:	e109      	b.n	8016c1e <mg_tls_client_recv_hello+0x242>
  }
  if (rio->buf[0] != MG_TLS_HANDSHAKE || rio->buf[5] != MG_TLS_SERVER_HELLO) {
 8016a0a:	69fb      	ldr	r3, [r7, #28]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	781b      	ldrb	r3, [r3, #0]
 8016a10:	2b16      	cmp	r3, #22
 8016a12:	d105      	bne.n	8016a20 <mg_tls_client_recv_hello+0x44>
 8016a14:	69fb      	ldr	r3, [r7, #28]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	3305      	adds	r3, #5
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	2b02      	cmp	r3, #2
 8016a1e:	d032      	beq.n	8016a86 <mg_tls_client_recv_hello+0xaa>
    if (rio->buf[0] == MG_TLS_ALERT && rio->len >= 7) {
 8016a20:	69fb      	ldr	r3, [r7, #28]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	2b15      	cmp	r3, #21
 8016a28:	d10f      	bne.n	8016a4a <mg_tls_client_recv_hello+0x6e>
 8016a2a:	69fb      	ldr	r3, [r7, #28]
 8016a2c:	689b      	ldr	r3, [r3, #8]
 8016a2e:	2b06      	cmp	r3, #6
 8016a30:	d90b      	bls.n	8016a4a <mg_tls_client_recv_hello+0x6e>
      mg_error(c, "tls alert %d", rio->buf[6]);
 8016a32:	69fb      	ldr	r3, [r7, #28]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	3306      	adds	r3, #6
 8016a38:	781b      	ldrb	r3, [r3, #0]
 8016a3a:	461a      	mov	r2, r3
 8016a3c:	497a      	ldr	r1, [pc, #488]	@ (8016c28 <mg_tls_client_recv_hello+0x24c>)
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	f7ef ffe8 	bl	8006a14 <mg_error>
      return -1;
 8016a44:	f04f 33ff 	mov.w	r3, #4294967295
 8016a48:	e0e9      	b.n	8016c1e <mg_tls_client_recv_hello+0x242>
    }
    MG_INFO(("got packet type 0x%02x/0x%02x", rio->buf[0], rio->buf[5]));
 8016a4a:	4b78      	ldr	r3, [pc, #480]	@ (8016c2c <mg_tls_client_recv_hello+0x250>)
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	2b01      	cmp	r3, #1
 8016a50:	dd12      	ble.n	8016a78 <mg_tls_client_recv_hello+0x9c>
 8016a52:	4b77      	ldr	r3, [pc, #476]	@ (8016c30 <mg_tls_client_recv_hello+0x254>)
 8016a54:	f642 52f1 	movw	r2, #11761	@ 0x2df1
 8016a58:	4976      	ldr	r1, [pc, #472]	@ (8016c34 <mg_tls_client_recv_hello+0x258>)
 8016a5a:	2002      	movs	r0, #2
 8016a5c:	f7f5 fcea 	bl	800c434 <mg_log_prefix>
 8016a60:	69fb      	ldr	r3, [r7, #28]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	781b      	ldrb	r3, [r3, #0]
 8016a66:	4619      	mov	r1, r3
 8016a68:	69fb      	ldr	r3, [r7, #28]
 8016a6a:	681b      	ldr	r3, [r3, #0]
 8016a6c:	3305      	adds	r3, #5
 8016a6e:	781b      	ldrb	r3, [r3, #0]
 8016a70:	461a      	mov	r2, r3
 8016a72:	4871      	ldr	r0, [pc, #452]	@ (8016c38 <mg_tls_client_recv_hello+0x25c>)
 8016a74:	f7f5 fd2e 	bl	800c4d4 <mg_log>
    mg_error(c, "not a server hello packet");
 8016a78:	4970      	ldr	r1, [pc, #448]	@ (8016c3c <mg_tls_client_recv_hello+0x260>)
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f7ef ffca 	bl	8006a14 <mg_error>
    return -1;
 8016a80:	f04f 33ff 	mov.w	r3, #4294967295
 8016a84:	e0cb      	b.n	8016c1e <mg_tls_client_recv_hello+0x242>
  }

  msgsz = MG_LOAD_BE16(rio->buf + 3);
 8016a86:	69fb      	ldr	r3, [r7, #28]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	3303      	adds	r3, #3
 8016a8c:	781b      	ldrb	r3, [r3, #0]
 8016a8e:	b21b      	sxth	r3, r3
 8016a90:	021b      	lsls	r3, r3, #8
 8016a92:	b21a      	sxth	r2, r3
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	3304      	adds	r3, #4
 8016a9a:	781b      	ldrb	r3, [r3, #0]
 8016a9c:	b21b      	sxth	r3, r3
 8016a9e:	4313      	orrs	r3, r2
 8016aa0:	b21b      	sxth	r3, r3
 8016aa2:	837b      	strh	r3, [r7, #26]
  mg_sha256_update(&tls->sha256, rio->buf + 5, msgsz);
 8016aa4:	6a3b      	ldr	r3, [r7, #32]
 8016aa6:	f103 0020 	add.w	r0, r3, #32
 8016aaa:	69fb      	ldr	r3, [r7, #28]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	3305      	adds	r3, #5
 8016ab0:	8b7a      	ldrh	r2, [r7, #26]
 8016ab2:	4619      	mov	r1, r3
 8016ab4:	f7fc f880 	bl	8012bb8 <mg_sha256_update>

  ext_len = MG_LOAD_BE16(rio->buf + 5 + 39 + 32 + 3);
 8016ab8:	69fb      	ldr	r3, [r7, #28]
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	334f      	adds	r3, #79	@ 0x4f
 8016abe:	781b      	ldrb	r3, [r3, #0]
 8016ac0:	b21b      	sxth	r3, r3
 8016ac2:	021b      	lsls	r3, r3, #8
 8016ac4:	b21a      	sxth	r2, r3
 8016ac6:	69fb      	ldr	r3, [r7, #28]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	3350      	adds	r3, #80	@ 0x50
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	b21b      	sxth	r3, r3
 8016ad0:	4313      	orrs	r3, r2
 8016ad2:	b21b      	sxth	r3, r3
 8016ad4:	833b      	strh	r3, [r7, #24]
  ext = rio->buf + 5 + 39 + 32 + 3 + 2;
 8016ad6:	69fb      	ldr	r3, [r7, #28]
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	3351      	adds	r3, #81	@ 0x51
 8016adc:	617b      	str	r3, [r7, #20]
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8016ade:	8b3a      	ldrh	r2, [r7, #24]
 8016ae0:	69fb      	ldr	r3, [r7, #28]
 8016ae2:	689b      	ldr	r3, [r3, #8]
 8016ae4:	3b51      	subs	r3, #81	@ 0x51
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	f200 8090 	bhi.w	8016c0c <mg_tls_client_recv_hello+0x230>

  for (j = 0; j < ext_len;) {
 8016aec:	2300      	movs	r3, #0
 8016aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8016af0:	e086      	b.n	8016c00 <mg_tls_client_recv_hello+0x224>
    uint16_t ext_type = MG_LOAD_BE16(ext + j);
 8016af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af4:	697a      	ldr	r2, [r7, #20]
 8016af6:	4413      	add	r3, r2
 8016af8:	781b      	ldrb	r3, [r3, #0]
 8016afa:	b21b      	sxth	r3, r3
 8016afc:	021b      	lsls	r3, r3, #8
 8016afe:	b21a      	sxth	r2, r3
 8016b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b02:	3301      	adds	r3, #1
 8016b04:	6979      	ldr	r1, [r7, #20]
 8016b06:	440b      	add	r3, r1
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	b21b      	sxth	r3, r3
 8016b0c:	4313      	orrs	r3, r2
 8016b0e:	b21b      	sxth	r3, r3
 8016b10:	827b      	strh	r3, [r7, #18]
    uint16_t ext_len2 = MG_LOAD_BE16(ext + j + 2);
 8016b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b14:	3302      	adds	r3, #2
 8016b16:	697a      	ldr	r2, [r7, #20]
 8016b18:	4413      	add	r3, r2
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	b21b      	sxth	r3, r3
 8016b1e:	021b      	lsls	r3, r3, #8
 8016b20:	b21a      	sxth	r2, r3
 8016b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b24:	3303      	adds	r3, #3
 8016b26:	6979      	ldr	r1, [r7, #20]
 8016b28:	440b      	add	r3, r1
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	b21b      	sxth	r3, r3
 8016b2e:	4313      	orrs	r3, r2
 8016b30:	b21b      	sxth	r3, r3
 8016b32:	823b      	strh	r3, [r7, #16]
    uint16_t group;
    uint8_t *key_exchange;
    uint16_t key_exchange_len;
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8016b34:	8b3a      	ldrh	r2, [r7, #24]
 8016b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b38:	1ad3      	subs	r3, r2, r3
 8016b3a:	1eda      	subs	r2, r3, #3
 8016b3c:	8a3b      	ldrh	r3, [r7, #16]
 8016b3e:	429a      	cmp	r2, r3
 8016b40:	dd66      	ble.n	8016c10 <mg_tls_client_recv_hello+0x234>
    if (ext_type != 0x0033) {  // not a key share extension, ignore
 8016b42:	8a7b      	ldrh	r3, [r7, #18]
 8016b44:	2b33      	cmp	r3, #51	@ 0x33
 8016b46:	d007      	beq.n	8016b58 <mg_tls_client_recv_hello+0x17c>
      j += (uint16_t) (ext_len2 + 4);
 8016b48:	8a3b      	ldrh	r3, [r7, #16]
 8016b4a:	3304      	adds	r3, #4
 8016b4c:	b29b      	uxth	r3, r3
 8016b4e:	461a      	mov	r2, r3
 8016b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b52:	4413      	add	r3, r2
 8016b54:	627b      	str	r3, [r7, #36]	@ 0x24
      continue;
 8016b56:	e053      	b.n	8016c00 <mg_tls_client_recv_hello+0x224>
    }
    group = MG_LOAD_BE16(ext + j + 4);
 8016b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b5a:	3304      	adds	r3, #4
 8016b5c:	697a      	ldr	r2, [r7, #20]
 8016b5e:	4413      	add	r3, r2
 8016b60:	781b      	ldrb	r3, [r3, #0]
 8016b62:	b21b      	sxth	r3, r3
 8016b64:	021b      	lsls	r3, r3, #8
 8016b66:	b21a      	sxth	r2, r3
 8016b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b6a:	3305      	adds	r3, #5
 8016b6c:	6979      	ldr	r1, [r7, #20]
 8016b6e:	440b      	add	r3, r1
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	b21b      	sxth	r3, r3
 8016b74:	4313      	orrs	r3, r2
 8016b76:	b21b      	sxth	r3, r3
 8016b78:	81fb      	strh	r3, [r7, #14]
    if (group != 0x001d) {
 8016b7a:	89fb      	ldrh	r3, [r7, #14]
 8016b7c:	2b1d      	cmp	r3, #29
 8016b7e:	d006      	beq.n	8016b8e <mg_tls_client_recv_hello+0x1b2>
      mg_error(c, "bad key exchange group");
 8016b80:	492f      	ldr	r1, [pc, #188]	@ (8016c40 <mg_tls_client_recv_hello+0x264>)
 8016b82:	6878      	ldr	r0, [r7, #4]
 8016b84:	f7ef ff46 	bl	8006a14 <mg_error>
      return -1;
 8016b88:	f04f 33ff 	mov.w	r3, #4294967295
 8016b8c:	e047      	b.n	8016c1e <mg_tls_client_recv_hello+0x242>
    }
    key_exchange_len = MG_LOAD_BE16(ext + j + 6);
 8016b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b90:	3306      	adds	r3, #6
 8016b92:	697a      	ldr	r2, [r7, #20]
 8016b94:	4413      	add	r3, r2
 8016b96:	781b      	ldrb	r3, [r3, #0]
 8016b98:	b21b      	sxth	r3, r3
 8016b9a:	021b      	lsls	r3, r3, #8
 8016b9c:	b21a      	sxth	r2, r3
 8016b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ba0:	3307      	adds	r3, #7
 8016ba2:	6979      	ldr	r1, [r7, #20]
 8016ba4:	440b      	add	r3, r1
 8016ba6:	781b      	ldrb	r3, [r3, #0]
 8016ba8:	b21b      	sxth	r3, r3
 8016baa:	4313      	orrs	r3, r2
 8016bac:	b21b      	sxth	r3, r3
 8016bae:	81bb      	strh	r3, [r7, #12]
    key_exchange = ext + j + 8;
 8016bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bb2:	3308      	adds	r3, #8
 8016bb4:	697a      	ldr	r2, [r7, #20]
 8016bb6:	4413      	add	r3, r2
 8016bb8:	60bb      	str	r3, [r7, #8]
    if (key_exchange_len != 32) {
 8016bba:	89bb      	ldrh	r3, [r7, #12]
 8016bbc:	2b20      	cmp	r3, #32
 8016bbe:	d006      	beq.n	8016bce <mg_tls_client_recv_hello+0x1f2>
      mg_error(c, "bad key exchange length");
 8016bc0:	4920      	ldr	r1, [pc, #128]	@ (8016c44 <mg_tls_client_recv_hello+0x268>)
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f7ef ff26 	bl	8006a14 <mg_error>
      return -1;
 8016bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bcc:	e027      	b.n	8016c1e <mg_tls_client_recv_hello+0x242>
    }
    mg_tls_x25519(tls->x25519_sec, tls->x25519_cli, key_exchange, 1);
 8016bce:	6a3b      	ldr	r3, [r7, #32]
 8016bd0:	f103 00f0 	add.w	r0, r3, #240	@ 0xf0
 8016bd4:	6a3b      	ldr	r3, [r7, #32]
 8016bd6:	f103 01d0 	add.w	r1, r3, #208	@ 0xd0
 8016bda:	2301      	movs	r3, #1
 8016bdc:	68ba      	ldr	r2, [r7, #8]
 8016bde:	f008 fa03 	bl	801efe8 <mg_tls_x25519>
    mg_tls_hexdump("c x25519 sec", tls->x25519_sec, 32);
 8016be2:	6a3b      	ldr	r3, [r7, #32]
 8016be4:	33f0      	adds	r3, #240	@ 0xf0
 8016be6:	2220      	movs	r2, #32
 8016be8:	4619      	mov	r1, r3
 8016bea:	4817      	ldr	r0, [pc, #92]	@ (8016c48 <mg_tls_client_recv_hello+0x26c>)
 8016bec:	f7fe f824 	bl	8014c38 <mg_tls_hexdump>
    mg_tls_drop_record(c);
 8016bf0:	6878      	ldr	r0, [r7, #4]
 8016bf2:	f7fe f9a0 	bl	8014f36 <mg_tls_drop_record>
    /* generate handshake keys */
    mg_tls_generate_handshake_keys(c);
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7fe faa8 	bl	801514c <mg_tls_generate_handshake_keys>
    return 0;
 8016bfc:	2300      	movs	r3, #0
 8016bfe:	e00e      	b.n	8016c1e <mg_tls_client_recv_hello+0x242>
  for (j = 0; j < ext_len;) {
 8016c00:	8b3b      	ldrh	r3, [r7, #24]
 8016c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c04:	429a      	cmp	r2, r3
 8016c06:	f6ff af74 	blt.w	8016af2 <mg_tls_client_recv_hello+0x116>
  }
fail:
 8016c0a:	e002      	b.n	8016c12 <mg_tls_client_recv_hello+0x236>
  if (ext_len > (rio->len - (5 + 39 + 32 + 3 + 2))) goto fail;
 8016c0c:	bf00      	nop
 8016c0e:	e000      	b.n	8016c12 <mg_tls_client_recv_hello+0x236>
    if (ext_len2 > (ext_len - j - 4)) goto fail;
 8016c10:	bf00      	nop
  mg_error(c, "bad server hello");
 8016c12:	490e      	ldr	r1, [pc, #56]	@ (8016c4c <mg_tls_client_recv_hello+0x270>)
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f7ef fefd 	bl	8006a14 <mg_error>
  return -1;
 8016c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016c1e:	4618      	mov	r0, r3
 8016c20:	3728      	adds	r7, #40	@ 0x28
 8016c22:	46bd      	mov	sp, r7
 8016c24:	bd80      	pop	{r7, pc}
 8016c26:	bf00      	nop
 8016c28:	080261d4 	.word	0x080261d4
 8016c2c:	24000258 	.word	0x24000258
 8016c30:	08028244 	.word	0x08028244
 8016c34:	08024478 	.word	0x08024478
 8016c38:	080261e4 	.word	0x080261e4
 8016c3c:	08026204 	.word	0x08026204
 8016c40:	08026220 	.word	0x08026220
 8016c44:	08026238 	.word	0x08026238
 8016c48:	08026250 	.word	0x08026250
 8016c4c:	08026260 	.word	0x08026260

08016c50 <mg_tls_client_recv_ext>:

static int mg_tls_client_recv_ext(struct mg_connection *c) {
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b084      	sub	sp, #16
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8016c5e:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8016c60:	6878      	ldr	r0, [r7, #4]
 8016c62:	f7fe fdd7 	bl	8015814 <mg_tls_recv_record>
 8016c66:	4603      	mov	r3, r0
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	da02      	bge.n	8016c72 <mg_tls_client_recv_ext+0x22>
    return -1;
 8016c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016c70:	e017      	b.n	8016ca2 <mg_tls_client_recv_ext+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	695b      	ldr	r3, [r3, #20]
 8016c7a:	4413      	add	r3, r2
 8016c7c:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_ENCRYPTED_EXTENSIONS) {
 8016c7e:	68bb      	ldr	r3, [r7, #8]
 8016c80:	781b      	ldrb	r3, [r3, #0]
 8016c82:	2b08      	cmp	r3, #8
 8016c84:	d009      	beq.n	8016c9a <mg_tls_client_recv_ext+0x4a>
    mg_error(c, "expected server extensions but got msg 0x%02x", recv_buf[0]);
 8016c86:	68bb      	ldr	r3, [r7, #8]
 8016c88:	781b      	ldrb	r3, [r3, #0]
 8016c8a:	461a      	mov	r2, r3
 8016c8c:	4907      	ldr	r1, [pc, #28]	@ (8016cac <mg_tls_client_recv_ext+0x5c>)
 8016c8e:	6878      	ldr	r0, [r7, #4]
 8016c90:	f7ef fec0 	bl	8006a14 <mg_error>
    return -1;
 8016c94:	f04f 33ff 	mov.w	r3, #4294967295
 8016c98:	e003      	b.n	8016ca2 <mg_tls_client_recv_ext+0x52>
  }
  mg_tls_drop_message(c);
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	f7fe f96e 	bl	8014f7c <mg_tls_drop_message>
  return 0;
 8016ca0:	2300      	movs	r3, #0
}
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	3710      	adds	r7, #16
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	bd80      	pop	{r7, pc}
 8016caa:	bf00      	nop
 8016cac:	08026274 	.word	0x08026274

08016cb0 <mg_der_debug_cert_name>:
  struct mg_str sig;    // signature
  uint8_t tbshash[48];  // 32b for sha256/secp256, 48b for sha384/secp384
  size_t tbshashsz;     // actual TBS hash size
};

static void mg_der_debug_cert_name(const char *name, struct mg_der_tlv *tlv) {
 8016cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cb2:	b099      	sub	sp, #100	@ 0x64
 8016cb4:	af06      	add	r7, sp, #24
 8016cb6:	6178      	str	r0, [r7, #20]
 8016cb8:	6139      	str	r1, [r7, #16]
  struct mg_der_tlv v;
  struct mg_str cn, c, o, ou;
  cn = c = o = ou = mg_str("");
 8016cba:	f107 031c 	add.w	r3, r7, #28
 8016cbe:	4946      	ldr	r1, [pc, #280]	@ (8016dd8 <mg_der_debug_cert_name+0x128>)
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7fd fa03 	bl	80140cc <mg_str_s>
 8016cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016cca:	f107 021c 	add.w	r2, r7, #28
 8016cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016cd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8016cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016cda:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016cde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016ce2:	e883 0003 	stmia.w	r3, {r0, r1}
 8016ce6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016cea:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016cf2:	e883 0003 	stmia.w	r3, {r0, r1}
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x03", 3, &v))
 8016cf6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016cfa:	2203      	movs	r2, #3
 8016cfc:	4937      	ldr	r1, [pc, #220]	@ (8016ddc <mg_der_debug_cert_name+0x12c>)
 8016cfe:	6938      	ldr	r0, [r7, #16]
 8016d00:	f7fe f84d 	bl	8014d9e <mg_der_find_oid>
 8016d04:	4603      	mov	r3, r0
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d006      	beq.n	8016d18 <mg_der_debug_cert_name+0x68>
    cn = mg_str_n((const char *) v.value, v.len);
 8016d0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016d0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016d0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016d12:	4618      	mov	r0, r3
 8016d14:	f7fd f9f7 	bl	8014106 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x06", 3, &v))
 8016d18:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016d1c:	2203      	movs	r2, #3
 8016d1e:	4930      	ldr	r1, [pc, #192]	@ (8016de0 <mg_der_debug_cert_name+0x130>)
 8016d20:	6938      	ldr	r0, [r7, #16]
 8016d22:	f7fe f83c 	bl	8014d9e <mg_der_find_oid>
 8016d26:	4603      	mov	r3, r0
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d006      	beq.n	8016d3a <mg_der_debug_cert_name+0x8a>
    c = mg_str_n((const char *) v.value, v.len);
 8016d2c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016d2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8016d34:	4618      	mov	r0, r3
 8016d36:	f7fd f9e6 	bl	8014106 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0a", 3, &v))
 8016d3a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016d3e:	2203      	movs	r2, #3
 8016d40:	4928      	ldr	r1, [pc, #160]	@ (8016de4 <mg_der_debug_cert_name+0x134>)
 8016d42:	6938      	ldr	r0, [r7, #16]
 8016d44:	f7fe f82b 	bl	8014d9e <mg_der_find_oid>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d006      	beq.n	8016d5c <mg_der_debug_cert_name+0xac>
    o = mg_str_n((const char *) v.value, v.len);
 8016d4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016d50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016d56:	4618      	mov	r0, r3
 8016d58:	f7fd f9d5 	bl	8014106 <mg_str_n>
  if (mg_der_find_oid(tlv, (uint8_t *) "\x55\x04\x0b", 3, &v))
 8016d5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016d60:	2203      	movs	r2, #3
 8016d62:	4921      	ldr	r1, [pc, #132]	@ (8016de8 <mg_der_debug_cert_name+0x138>)
 8016d64:	6938      	ldr	r0, [r7, #16]
 8016d66:	f7fe f81a 	bl	8014d9e <mg_der_find_oid>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d00e      	beq.n	8016d8e <mg_der_debug_cert_name+0xde>
    ou = mg_str_n((const char *) v.value, v.len);
 8016d70:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016d72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016d74:	f107 0308 	add.w	r3, r7, #8
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7fd f9c4 	bl	8014106 <mg_str_n>
 8016d7e:	f107 031c 	add.w	r3, r7, #28
 8016d82:	f107 0208 	add.w	r2, r7, #8
 8016d86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d8a:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("%s: CN=%.*s, C=%.*s, O=%.*s, OU=%.*s", name, cn.len, cn.buf,
 8016d8e:	4b17      	ldr	r3, [pc, #92]	@ (8016dec <mg_der_debug_cert_name+0x13c>)
 8016d90:	681b      	ldr	r3, [r3, #0]
 8016d92:	2b03      	cmp	r3, #3
 8016d94:	dd1b      	ble.n	8016dce <mg_der_debug_cert_name+0x11e>
 8016d96:	4b16      	ldr	r3, [pc, #88]	@ (8016df0 <mg_der_debug_cert_name+0x140>)
 8016d98:	f642 6243 	movw	r2, #11843	@ 0x2e43
 8016d9c:	4915      	ldr	r1, [pc, #84]	@ (8016df4 <mg_der_debug_cert_name+0x144>)
 8016d9e:	2004      	movs	r0, #4
 8016da0:	f7f5 fb48 	bl	800c434 <mg_log_prefix>
 8016da4:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8016da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016da8:	607b      	str	r3, [r7, #4]
 8016daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016dae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016db0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016db2:	6a3c      	ldr	r4, [r7, #32]
 8016db4:	69fd      	ldr	r5, [r7, #28]
 8016db6:	9505      	str	r5, [sp, #20]
 8016db8:	9404      	str	r4, [sp, #16]
 8016dba:	9003      	str	r0, [sp, #12]
 8016dbc:	9102      	str	r1, [sp, #8]
 8016dbe:	9201      	str	r2, [sp, #4]
 8016dc0:	9300      	str	r3, [sp, #0]
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	4632      	mov	r2, r6
 8016dc6:	6979      	ldr	r1, [r7, #20]
 8016dc8:	480b      	ldr	r0, [pc, #44]	@ (8016df8 <mg_der_debug_cert_name+0x148>)
 8016dca:	f7f5 fb83 	bl	800c4d4 <mg_log>
              c.len, c.buf, o.len, o.buf, ou.len, ou.buf));
}
 8016dce:	bf00      	nop
 8016dd0:	374c      	adds	r7, #76	@ 0x4c
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	08024cb8 	.word	0x08024cb8
 8016ddc:	080262a4 	.word	0x080262a4
 8016de0:	080262a8 	.word	0x080262a8
 8016de4:	080262ac 	.word	0x080262ac
 8016de8:	080262b0 	.word	0x080262b0
 8016dec:	24000258 	.word	0x24000258
 8016df0:	08028260 	.word	0x08028260
 8016df4:	08024478 	.word	0x08024478
 8016df8:	080262b4 	.word	0x080262b4

08016dfc <mg_tls_parse_cert_der>:

static int mg_tls_parse_cert_der(void *buf, size_t dersz,
                                 struct mg_tls_cert *cert) {
 8016dfc:	b590      	push	{r4, r7, lr}
 8016dfe:	b0af      	sub	sp, #188	@ 0xbc
 8016e00:	af04      	add	r7, sp, #16
 8016e02:	6178      	str	r0, [r7, #20]
 8016e04:	6139      	str	r1, [r7, #16]
 8016e06:	60fa      	str	r2, [r7, #12]
  uint8_t *tbs, *der = (uint8_t *) buf;
 8016e08:	697b      	ldr	r3, [r7, #20]
 8016e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  size_t tbssz;
  struct mg_der_tlv root, tbs_cert, field, algo;  // pubkey, signature;
  struct mg_der_tlv pki, pki_algo, pki_key, pki_curve, raw_sig;

  // Parse outermost SEQUENCE
  if (mg_der_parse(der, dersz, &root) <= 0 || root.type != 0x30) return -1;
 8016e0e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8016e12:	461a      	mov	r2, r3
 8016e14:	6939      	ldr	r1, [r7, #16]
 8016e16:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 8016e1a:	f7fd ff35 	bl	8014c88 <mg_der_parse>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	dd03      	ble.n	8016e2c <mg_tls_parse_cert_der+0x30>
 8016e24:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8016e28:	2b30      	cmp	r3, #48	@ 0x30
 8016e2a:	d002      	beq.n	8016e32 <mg_tls_parse_cert_der+0x36>
 8016e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8016e30:	e38a      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>

  // Parse TBSCertificate SEQUENCE
  tbs = root.value;
 8016e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8016e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (mg_der_next(&root, &tbs_cert) <= 0 || tbs_cert.type != 0x30) return -1;
 8016e3a:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8016e3e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8016e42:	4611      	mov	r1, r2
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7fd ff7f 	bl	8014d48 <mg_der_next>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	dd03      	ble.n	8016e58 <mg_tls_parse_cert_der+0x5c>
 8016e50:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 8016e54:	2b30      	cmp	r3, #48	@ 0x30
 8016e56:	d002      	beq.n	8016e5e <mg_tls_parse_cert_der+0x62>
 8016e58:	f04f 33ff 	mov.w	r3, #4294967295
 8016e5c:	e374      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  tbssz = (size_t) (tbs_cert.value + tbs_cert.len - tbs);
 8016e5e:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8016e62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8016e66:	441a      	add	r2, r3
 8016e68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016e6c:	1ad3      	subs	r3, r2, r3
 8016e6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  // Parse Version (optional field)
  if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 8016e72:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8016e76:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8016e7a:	4611      	mov	r1, r2
 8016e7c:	4618      	mov	r0, r3
 8016e7e:	f7fd ff63 	bl	8014d48 <mg_der_next>
 8016e82:	4603      	mov	r3, r0
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	dc02      	bgt.n	8016e8e <mg_tls_parse_cert_der+0x92>
 8016e88:	f04f 33ff 	mov.w	r3, #4294967295
 8016e8c:	e35c      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  if (field.type == 0xa0) {  // v3
 8016e8e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8016e92:	2ba0      	cmp	r3, #160	@ 0xa0
 8016e94:	d123      	bne.n	8016ede <mg_tls_parse_cert_der+0xe2>
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8016e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016e9a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8016e9c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8016ea0:	4618      	mov	r0, r3
 8016ea2:	f7fd fef1 	bl	8014c88 <mg_der_parse>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	dd07      	ble.n	8016ebc <mg_tls_parse_cert_der+0xc0>
 8016eac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	d104      	bne.n	8016ebc <mg_tls_parse_cert_der+0xc0>
        field.value[0] != 2)
 8016eb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8016eb6:	781b      	ldrb	r3, [r3, #0]
    if (mg_der_parse(field.value, field.len, &field) <= 0 || field.len != 1 ||
 8016eb8:	2b02      	cmp	r3, #2
 8016eba:	d002      	beq.n	8016ec2 <mg_tls_parse_cert_der+0xc6>
      return -1;
 8016ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8016ec0:	e342      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
    if (mg_der_next(&tbs_cert, &field) <= 0) return -1;
 8016ec2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8016ec6:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8016eca:	4611      	mov	r1, r2
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7fd ff3b 	bl	8014d48 <mg_der_next>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	dc02      	bgt.n	8016ede <mg_tls_parse_cert_der+0xe2>
 8016ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8016edc:	e334      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse Serial Number
  if (field.type != 2) return -1;
 8016ede:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8016ee2:	2b02      	cmp	r3, #2
 8016ee4:	d002      	beq.n	8016eec <mg_tls_parse_cert_der+0xf0>
 8016ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8016eea:	e32d      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  cert->sn = mg_str_n((char *) field.value, field.len);
 8016eec:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8016ef0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8016ef2:	68fc      	ldr	r4, [r7, #12]
 8016ef4:	463b      	mov	r3, r7
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7fd f905 	bl	8014106 <mg_str_n>
 8016efc:	1d23      	adds	r3, r4, #4
 8016efe:	463a      	mov	r2, r7
 8016f00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f04:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("cert s/n: %M", mg_print_hex, cert->sn.len, cert->sn.buf));
 8016f08:	4bae      	ldr	r3, [pc, #696]	@ (80171c4 <mg_tls_parse_cert_der+0x3c8>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	2b03      	cmp	r3, #3
 8016f0e:	dd0e      	ble.n	8016f2e <mg_tls_parse_cert_der+0x132>
 8016f10:	4bad      	ldr	r3, [pc, #692]	@ (80171c8 <mg_tls_parse_cert_der+0x3cc>)
 8016f12:	f642 6262 	movw	r2, #11874	@ 0x2e62
 8016f16:	49ad      	ldr	r1, [pc, #692]	@ (80171cc <mg_tls_parse_cert_der+0x3d0>)
 8016f18:	2004      	movs	r0, #4
 8016f1a:	f7f5 fa8b 	bl	800c434 <mg_log_prefix>
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	689a      	ldr	r2, [r3, #8]
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	49aa      	ldr	r1, [pc, #680]	@ (80171d0 <mg_tls_parse_cert_der+0x3d4>)
 8016f28:	48aa      	ldr	r0, [pc, #680]	@ (80171d4 <mg_tls_parse_cert_der+0x3d8>)
 8016f2a:	f7f5 fad3 	bl	800c4d4 <mg_log>

  // Parse signature algorithm (first occurrence)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8016f2e:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8016f32:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8016f36:	4611      	mov	r1, r2
 8016f38:	4618      	mov	r0, r3
 8016f3a:	f7fd ff05 	bl	8014d48 <mg_der_next>
 8016f3e:	4603      	mov	r3, r0
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	dd03      	ble.n	8016f4c <mg_tls_parse_cert_der+0x150>
 8016f44:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8016f48:	2b30      	cmp	r3, #48	@ 0x30
 8016f4a:	d002      	beq.n	8016f52 <mg_tls_parse_cert_der+0x156>
 8016f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8016f50:	e2fa      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&field, &algo) <= 0 || algo.type != 0x06) return -1;
 8016f52:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8016f56:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8016f5a:	4611      	mov	r1, r2
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7fd fef3 	bl	8014d48 <mg_der_next>
 8016f62:	4603      	mov	r3, r0
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	dd03      	ble.n	8016f70 <mg_tls_parse_cert_der+0x174>
 8016f68:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8016f6c:	2b06      	cmp	r3, #6
 8016f6e:	d002      	beq.n	8016f76 <mg_tls_parse_cert_der+0x17a>
 8016f70:	f04f 33ff 	mov.w	r3, #4294967295
 8016f74:	e2e8      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>

  MG_VERBOSE(("sig algo (oid): %M", mg_print_hex, algo.len, algo.value));
 8016f76:	4b93      	ldr	r3, [pc, #588]	@ (80171c4 <mg_tls_parse_cert_der+0x3c8>)
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	2b03      	cmp	r3, #3
 8016f7c:	dd0c      	ble.n	8016f98 <mg_tls_parse_cert_der+0x19c>
 8016f7e:	4b92      	ldr	r3, [pc, #584]	@ (80171c8 <mg_tls_parse_cert_der+0x3cc>)
 8016f80:	f642 6268 	movw	r2, #11880	@ 0x2e68
 8016f84:	4991      	ldr	r1, [pc, #580]	@ (80171cc <mg_tls_parse_cert_der+0x3d0>)
 8016f86:	2004      	movs	r0, #4
 8016f88:	f7f5 fa54 	bl	800c434 <mg_log_prefix>
 8016f8c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016f8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016f90:	498f      	ldr	r1, [pc, #572]	@ (80171d0 <mg_tls_parse_cert_der+0x3d4>)
 8016f92:	4891      	ldr	r0, [pc, #580]	@ (80171d8 <mg_tls_parse_cert_der+0x3dc>)
 8016f94:	f7f5 fa9e 	bl	800c4d4 <mg_log>
  // Signature algorithm OID mapping
  if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x02", algo.len) == 0) {
 8016f98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8016f9a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8016f9c:	498f      	ldr	r1, [pc, #572]	@ (80171dc <mg_tls_parse_cert_der+0x3e0>)
 8016f9e:	4618      	mov	r0, r3
 8016fa0:	f00c fbd3 	bl	802374a <memcmp>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d11a      	bne.n	8016fe0 <mg_tls_parse_cert_der+0x1e4>
    MG_VERBOSE(("sig algo: ECDSA with SHA256"));
 8016faa:	4b86      	ldr	r3, [pc, #536]	@ (80171c4 <mg_tls_parse_cert_der+0x3c8>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	2b03      	cmp	r3, #3
 8016fb0:	dd09      	ble.n	8016fc6 <mg_tls_parse_cert_der+0x1ca>
 8016fb2:	4b85      	ldr	r3, [pc, #532]	@ (80171c8 <mg_tls_parse_cert_der+0x3cc>)
 8016fb4:	f642 626b 	movw	r2, #11883	@ 0x2e6b
 8016fb8:	4984      	ldr	r1, [pc, #528]	@ (80171cc <mg_tls_parse_cert_der+0x3d0>)
 8016fba:	2004      	movs	r0, #4
 8016fbc:	f7f5 fa3a 	bl	800c434 <mg_log_prefix>
 8016fc0:	4887      	ldr	r0, [pc, #540]	@ (80171e0 <mg_tls_parse_cert_der+0x3e4>)
 8016fc2:	f7f5 fa87 	bl	800c4d4 <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	331c      	adds	r3, #28
 8016fca:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8016fce:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7fb ff61 	bl	8012e9a <mg_sha256>
    cert->tbshashsz = 32;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	2220      	movs	r2, #32
 8016fdc:	64da      	str	r2, [r3, #76]	@ 0x4c
 8016fde:	e07f      	b.n	80170e0 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 8016fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 8016fe2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0B",
 8016fe4:	497f      	ldr	r1, [pc, #508]	@ (80171e4 <mg_tls_parse_cert_der+0x3e8>)
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f00c fbaf 	bl	802374a <memcmp>
 8016fec:	4603      	mov	r3, r0
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d11a      	bne.n	8017028 <mg_tls_parse_cert_der+0x22c>
    MG_VERBOSE(("sig algo: RSA with SHA256"));
 8016ff2:	4b74      	ldr	r3, [pc, #464]	@ (80171c4 <mg_tls_parse_cert_der+0x3c8>)
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	2b03      	cmp	r3, #3
 8016ff8:	dd09      	ble.n	801700e <mg_tls_parse_cert_der+0x212>
 8016ffa:	4b73      	ldr	r3, [pc, #460]	@ (80171c8 <mg_tls_parse_cert_der+0x3cc>)
 8016ffc:	f642 6270 	movw	r2, #11888	@ 0x2e70
 8017000:	4972      	ldr	r1, [pc, #456]	@ (80171cc <mg_tls_parse_cert_der+0x3d0>)
 8017002:	2004      	movs	r0, #4
 8017004:	f7f5 fa16 	bl	800c434 <mg_log_prefix>
 8017008:	4877      	ldr	r0, [pc, #476]	@ (80171e8 <mg_tls_parse_cert_der+0x3ec>)
 801700a:	f7f5 fa63 	bl	800c4d4 <mg_log>
    mg_sha256(cert->tbshash, tbs, tbssz);
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	331c      	adds	r3, #28
 8017012:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8017016:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 801701a:	4618      	mov	r0, r3
 801701c:	f7fb ff3d 	bl	8012e9a <mg_sha256>
    cert->tbshashsz = 32;
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	2220      	movs	r2, #32
 8017024:	64da      	str	r2, [r3, #76]	@ 0x4c
 8017026:	e05b      	b.n	80170e0 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\xCE\x3D\x04\x03\x03", algo.len) ==
 8017028:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801702a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801702c:	496f      	ldr	r1, [pc, #444]	@ (80171ec <mg_tls_parse_cert_der+0x3f0>)
 801702e:	4618      	mov	r0, r3
 8017030:	f00c fb8b 	bl	802374a <memcmp>
 8017034:	4603      	mov	r3, r0
 8017036:	2b00      	cmp	r3, #0
 8017038:	d11a      	bne.n	8017070 <mg_tls_parse_cert_der+0x274>
             0) {
    MG_VERBOSE(("sig algo: ECDSA with SHA384"));
 801703a:	4b62      	ldr	r3, [pc, #392]	@ (80171c4 <mg_tls_parse_cert_der+0x3c8>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	2b03      	cmp	r3, #3
 8017040:	dd09      	ble.n	8017056 <mg_tls_parse_cert_der+0x25a>
 8017042:	4b61      	ldr	r3, [pc, #388]	@ (80171c8 <mg_tls_parse_cert_der+0x3cc>)
 8017044:	f642 6275 	movw	r2, #11893	@ 0x2e75
 8017048:	4960      	ldr	r1, [pc, #384]	@ (80171cc <mg_tls_parse_cert_der+0x3d0>)
 801704a:	2004      	movs	r0, #4
 801704c:	f7f5 f9f2 	bl	800c434 <mg_log_prefix>
 8017050:	4867      	ldr	r0, [pc, #412]	@ (80171f0 <mg_tls_parse_cert_der+0x3f4>)
 8017052:	f7f5 fa3f 	bl	800c4d4 <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	331c      	adds	r3, #28
 801705a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801705e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8017062:	4618      	mov	r0, r3
 8017064:	f7fc ffef 	bl	8014046 <mg_sha384>
    cert->tbshashsz = 48;
 8017068:	68fb      	ldr	r3, [r7, #12]
 801706a:	2230      	movs	r2, #48	@ 0x30
 801706c:	64da      	str	r2, [r3, #76]	@ 0x4c
 801706e:	e037      	b.n	80170e0 <mg_tls_parse_cert_der+0x2e4>
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 8017070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
                    algo.len) == 0) {
 8017072:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
  } else if (memcmp(algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x0C",
 8017074:	495f      	ldr	r1, [pc, #380]	@ (80171f4 <mg_tls_parse_cert_der+0x3f8>)
 8017076:	4618      	mov	r0, r3
 8017078:	f00c fb67 	bl	802374a <memcmp>
 801707c:	4603      	mov	r3, r0
 801707e:	2b00      	cmp	r3, #0
 8017080:	d11a      	bne.n	80170b8 <mg_tls_parse_cert_der+0x2bc>
    MG_VERBOSE(("sig algo: RSA with SHA384"));
 8017082:	4b50      	ldr	r3, [pc, #320]	@ (80171c4 <mg_tls_parse_cert_der+0x3c8>)
 8017084:	681b      	ldr	r3, [r3, #0]
 8017086:	2b03      	cmp	r3, #3
 8017088:	dd09      	ble.n	801709e <mg_tls_parse_cert_der+0x2a2>
 801708a:	4b4f      	ldr	r3, [pc, #316]	@ (80171c8 <mg_tls_parse_cert_der+0x3cc>)
 801708c:	f642 627a 	movw	r2, #11898	@ 0x2e7a
 8017090:	494e      	ldr	r1, [pc, #312]	@ (80171cc <mg_tls_parse_cert_der+0x3d0>)
 8017092:	2004      	movs	r0, #4
 8017094:	f7f5 f9ce 	bl	800c434 <mg_log_prefix>
 8017098:	4857      	ldr	r0, [pc, #348]	@ (80171f8 <mg_tls_parse_cert_der+0x3fc>)
 801709a:	f7f5 fa1b 	bl	800c4d4 <mg_log>
    mg_sha384(cert->tbshash, tbs, tbssz);
 801709e:	68fb      	ldr	r3, [r7, #12]
 80170a0:	331c      	adds	r3, #28
 80170a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80170a6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7fc ffcb 	bl	8014046 <mg_sha384>
    cert->tbshashsz = 48;
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	2230      	movs	r2, #48	@ 0x30
 80170b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80170b6:	e013      	b.n	80170e0 <mg_tls_parse_cert_der+0x2e4>
  } else {
    MG_ERROR(
 80170b8:	4b42      	ldr	r3, [pc, #264]	@ (80171c4 <mg_tls_parse_cert_der+0x3c8>)
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	dd0c      	ble.n	80170da <mg_tls_parse_cert_der+0x2de>
 80170c0:	4b41      	ldr	r3, [pc, #260]	@ (80171c8 <mg_tls_parse_cert_der+0x3cc>)
 80170c2:	f642 627e 	movw	r2, #11902	@ 0x2e7e
 80170c6:	4941      	ldr	r1, [pc, #260]	@ (80171cc <mg_tls_parse_cert_der+0x3d0>)
 80170c8:	2001      	movs	r0, #1
 80170ca:	f7f5 f9b3 	bl	800c434 <mg_log_prefix>
 80170ce:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80170d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80170d2:	493f      	ldr	r1, [pc, #252]	@ (80171d0 <mg_tls_parse_cert_der+0x3d4>)
 80170d4:	4849      	ldr	r0, [pc, #292]	@ (80171fc <mg_tls_parse_cert_der+0x400>)
 80170d6:	f7f5 f9fd 	bl	800c4d4 <mg_log>
        ("sig algo: unsupported OID: %M", mg_print_hex, algo.len, algo.value));
    return -1;
 80170da:	f04f 33ff 	mov.w	r3, #4294967295
 80170de:	e233      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  }
  MG_VERBOSE(("tbs hash: %M", mg_print_hex, cert->tbshashsz, cert->tbshash));
 80170e0:	4b38      	ldr	r3, [pc, #224]	@ (80171c4 <mg_tls_parse_cert_der+0x3c8>)
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	2b03      	cmp	r3, #3
 80170e6:	dd0e      	ble.n	8017106 <mg_tls_parse_cert_der+0x30a>
 80170e8:	4b37      	ldr	r3, [pc, #220]	@ (80171c8 <mg_tls_parse_cert_der+0x3cc>)
 80170ea:	f642 6282 	movw	r2, #11906	@ 0x2e82
 80170ee:	4937      	ldr	r1, [pc, #220]	@ (80171cc <mg_tls_parse_cert_der+0x3d0>)
 80170f0:	2004      	movs	r0, #4
 80170f2:	f7f5 f99f 	bl	800c434 <mg_log_prefix>
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	331c      	adds	r3, #28
 80170fe:	4934      	ldr	r1, [pc, #208]	@ (80171d0 <mg_tls_parse_cert_der+0x3d4>)
 8017100:	483f      	ldr	r0, [pc, #252]	@ (8017200 <mg_tls_parse_cert_der+0x404>)
 8017102:	f7f5 f9e7 	bl	800c4d4 <mg_log>

  // issuer
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8017106:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801710a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801710e:	4611      	mov	r1, r2
 8017110:	4618      	mov	r0, r3
 8017112:	f7fd fe19 	bl	8014d48 <mg_der_next>
 8017116:	4603      	mov	r3, r0
 8017118:	2b00      	cmp	r3, #0
 801711a:	dd03      	ble.n	8017124 <mg_tls_parse_cert_der+0x328>
 801711c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8017120:	2b30      	cmp	r3, #48	@ 0x30
 8017122:	d002      	beq.n	801712a <mg_tls_parse_cert_der+0x32e>
 8017124:	f04f 33ff 	mov.w	r3, #4294967295
 8017128:	e20e      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("issuer", &field);
 801712a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801712e:	4619      	mov	r1, r3
 8017130:	4834      	ldr	r0, [pc, #208]	@ (8017204 <mg_tls_parse_cert_der+0x408>)
 8017132:	f7ff fdbd 	bl	8016cb0 <mg_der_debug_cert_name>

  // validity dates (before/after)
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8017136:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801713a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801713e:	4611      	mov	r1, r2
 8017140:	4618      	mov	r0, r3
 8017142:	f7fd fe01 	bl	8014d48 <mg_der_next>
 8017146:	4603      	mov	r3, r0
 8017148:	2b00      	cmp	r3, #0
 801714a:	dd03      	ble.n	8017154 <mg_tls_parse_cert_der+0x358>
 801714c:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8017150:	2b30      	cmp	r3, #48	@ 0x30
 8017152:	d002      	beq.n	801715a <mg_tls_parse_cert_der+0x35e>
 8017154:	f04f 33ff 	mov.w	r3, #4294967295
 8017158:	e1f6      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  if (1) {
    struct mg_der_tlv before, after;
    mg_der_next(&field, &before);
 801715a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801715e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017162:	4611      	mov	r1, r2
 8017164:	4618      	mov	r0, r3
 8017166:	f7fd fdef 	bl	8014d48 <mg_der_next>
    mg_der_next(&field, &after);
 801716a:	f107 0218 	add.w	r2, r7, #24
 801716e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017172:	4611      	mov	r1, r2
 8017174:	4618      	mov	r0, r3
 8017176:	f7fd fde7 	bl	8014d48 <mg_der_next>
    if (memcmp(after.value, "250101000000Z", after.len) < 0) {
 801717a:	6a3b      	ldr	r3, [r7, #32]
 801717c:	69fa      	ldr	r2, [r7, #28]
 801717e:	4922      	ldr	r1, [pc, #136]	@ (8017208 <mg_tls_parse_cert_der+0x40c>)
 8017180:	4618      	mov	r0, r3
 8017182:	f00c fae2 	bl	802374a <memcmp>
 8017186:	4603      	mov	r3, r0
 8017188:	2b00      	cmp	r3, #0
 801718a:	da41      	bge.n	8017210 <mg_tls_parse_cert_der+0x414>
      MG_ERROR(("invalid validity dates: before=%M after=%M", mg_print_hex,
 801718c:	4b0d      	ldr	r3, [pc, #52]	@ (80171c4 <mg_tls_parse_cert_der+0x3c8>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	2b00      	cmp	r3, #0
 8017192:	dd14      	ble.n	80171be <mg_tls_parse_cert_der+0x3c2>
 8017194:	4b0c      	ldr	r3, [pc, #48]	@ (80171c8 <mg_tls_parse_cert_der+0x3cc>)
 8017196:	f642 628f 	movw	r2, #11919	@ 0x2e8f
 801719a:	490c      	ldr	r1, [pc, #48]	@ (80171cc <mg_tls_parse_cert_der+0x3d0>)
 801719c:	2001      	movs	r0, #1
 801719e:	f7f5 f949 	bl	800c434 <mg_log_prefix>
 80171a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80171a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80171a6:	69fb      	ldr	r3, [r7, #28]
 80171a8:	6a3a      	ldr	r2, [r7, #32]
 80171aa:	9202      	str	r2, [sp, #8]
 80171ac:	9301      	str	r3, [sp, #4]
 80171ae:	4b08      	ldr	r3, [pc, #32]	@ (80171d0 <mg_tls_parse_cert_der+0x3d4>)
 80171b0:	9300      	str	r3, [sp, #0]
 80171b2:	4603      	mov	r3, r0
 80171b4:	460a      	mov	r2, r1
 80171b6:	4906      	ldr	r1, [pc, #24]	@ (80171d0 <mg_tls_parse_cert_der+0x3d4>)
 80171b8:	4814      	ldr	r0, [pc, #80]	@ (801720c <mg_tls_parse_cert_der+0x410>)
 80171ba:	f7f5 f98b 	bl	800c4d4 <mg_log>
                before.len, before.value, mg_print_hex, after.len,
                after.value));
      return -1;
 80171be:	f04f 33ff 	mov.w	r3, #4294967295
 80171c2:	e1c1      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
 80171c4:	24000258 	.word	0x24000258
 80171c8:	08028278 	.word	0x08028278
 80171cc:	08024478 	.word	0x08024478
 80171d0:	08010d45 	.word	0x08010d45
 80171d4:	080262dc 	.word	0x080262dc
 80171d8:	080262ec 	.word	0x080262ec
 80171dc:	08026300 	.word	0x08026300
 80171e0:	0802630c 	.word	0x0802630c
 80171e4:	08026328 	.word	0x08026328
 80171e8:	08026334 	.word	0x08026334
 80171ec:	08026350 	.word	0x08026350
 80171f0:	0802635c 	.word	0x0802635c
 80171f4:	08026378 	.word	0x08026378
 80171f8:	08026384 	.word	0x08026384
 80171fc:	080263a0 	.word	0x080263a0
 8017200:	080263c0 	.word	0x080263c0
 8017204:	080263d0 	.word	0x080263d0
 8017208:	080263d8 	.word	0x080263d8
 801720c:	080263e8 	.word	0x080263e8
    }
  }

  // subject
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8017210:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8017214:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017218:	4611      	mov	r1, r2
 801721a:	4618      	mov	r0, r3
 801721c:	f7fd fd94 	bl	8014d48 <mg_der_next>
 8017220:	4603      	mov	r3, r0
 8017222:	2b00      	cmp	r3, #0
 8017224:	dd03      	ble.n	801722e <mg_tls_parse_cert_der+0x432>
 8017226:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801722a:	2b30      	cmp	r3, #48	@ 0x30
 801722c:	d002      	beq.n	8017234 <mg_tls_parse_cert_der+0x438>
 801722e:	f04f 33ff 	mov.w	r3, #4294967295
 8017232:	e189      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  mg_der_debug_cert_name("subject", &field);
 8017234:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017238:	4619      	mov	r1, r3
 801723a:	48a2      	ldr	r0, [pc, #648]	@ (80174c4 <mg_tls_parse_cert_der+0x6c8>)
 801723c:	f7ff fd38 	bl	8016cb0 <mg_der_debug_cert_name>

  // subject public key info
  if (mg_der_next(&tbs_cert, &field) <= 0 || field.type != 0x30) return -1;
 8017240:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8017244:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8017248:	4611      	mov	r1, r2
 801724a:	4618      	mov	r0, r3
 801724c:	f7fd fd7c 	bl	8014d48 <mg_der_next>
 8017250:	4603      	mov	r3, r0
 8017252:	2b00      	cmp	r3, #0
 8017254:	dd03      	ble.n	801725e <mg_tls_parse_cert_der+0x462>
 8017256:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 801725a:	2b30      	cmp	r3, #48	@ 0x30
 801725c:	d002      	beq.n	8017264 <mg_tls_parse_cert_der+0x468>
 801725e:	f04f 33ff 	mov.w	r3, #4294967295
 8017262:	e171      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>

  if (mg_der_next(&field, &pki) <= 0 || pki.type != 0x30) return -1;
 8017264:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8017268:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 801726c:	4611      	mov	r1, r2
 801726e:	4618      	mov	r0, r3
 8017270:	f7fd fd6a 	bl	8014d48 <mg_der_next>
 8017274:	4603      	mov	r3, r0
 8017276:	2b00      	cmp	r3, #0
 8017278:	dd03      	ble.n	8017282 <mg_tls_parse_cert_der+0x486>
 801727a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 801727e:	2b30      	cmp	r3, #48	@ 0x30
 8017280:	d002      	beq.n	8017288 <mg_tls_parse_cert_der+0x48c>
 8017282:	f04f 33ff 	mov.w	r3, #4294967295
 8017286:	e15f      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&pki, &pki_algo) <= 0 || pki_algo.type != 0x06) return -1;
 8017288:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801728c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8017290:	4611      	mov	r1, r2
 8017292:	4618      	mov	r0, r3
 8017294:	f7fd fd58 	bl	8014d48 <mg_der_next>
 8017298:	4603      	mov	r3, r0
 801729a:	2b00      	cmp	r3, #0
 801729c:	dd03      	ble.n	80172a6 <mg_tls_parse_cert_der+0x4aa>
 801729e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80172a2:	2b06      	cmp	r3, #6
 80172a4:	d002      	beq.n	80172ac <mg_tls_parse_cert_der+0x4b0>
 80172a6:	f04f 33ff 	mov.w	r3, #4294967295
 80172aa:	e14d      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>

  // public key algorithm
  MG_VERBOSE(("pk algo (oid): %M", mg_print_hex, pki_algo.len, pki_algo.value));
 80172ac:	4b86      	ldr	r3, [pc, #536]	@ (80174c8 <mg_tls_parse_cert_der+0x6cc>)
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	2b03      	cmp	r3, #3
 80172b2:	dd0c      	ble.n	80172ce <mg_tls_parse_cert_der+0x4d2>
 80172b4:	4b85      	ldr	r3, [pc, #532]	@ (80174cc <mg_tls_parse_cert_der+0x6d0>)
 80172b6:	f642 62a1 	movw	r2, #11937	@ 0x2ea1
 80172ba:	4985      	ldr	r1, [pc, #532]	@ (80174d0 <mg_tls_parse_cert_der+0x6d4>)
 80172bc:	2004      	movs	r0, #4
 80172be:	f7f5 f8b9 	bl	800c434 <mg_log_prefix>
 80172c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80172c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80172c6:	4983      	ldr	r1, [pc, #524]	@ (80174d4 <mg_tls_parse_cert_der+0x6d8>)
 80172c8:	4883      	ldr	r0, [pc, #524]	@ (80174d8 <mg_tls_parse_cert_der+0x6dc>)
 80172ca:	f7f5 f903 	bl	800c4d4 <mg_log>
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 80172ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
             pki_algo.len) == 0) {
 80172d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x07",
 80172d2:	4982      	ldr	r1, [pc, #520]	@ (80174dc <mg_tls_parse_cert_der+0x6e0>)
 80172d4:	4618      	mov	r0, r3
 80172d6:	f00c fa38 	bl	802374a <memcmp>
 80172da:	4603      	mov	r3, r0
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d111      	bne.n	8017304 <mg_tls_parse_cert_der+0x508>
    cert->is_ec_pubkey = 1;
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	2201      	movs	r2, #1
 80172e4:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp256r1"));
 80172e6:	4b78      	ldr	r3, [pc, #480]	@ (80174c8 <mg_tls_parse_cert_der+0x6cc>)
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	2b03      	cmp	r3, #3
 80172ec:	dd6f      	ble.n	80173ce <mg_tls_parse_cert_der+0x5d2>
 80172ee:	4b77      	ldr	r3, [pc, #476]	@ (80174cc <mg_tls_parse_cert_der+0x6d0>)
 80172f0:	f642 62a5 	movw	r2, #11941	@ 0x2ea5
 80172f4:	4976      	ldr	r1, [pc, #472]	@ (80174d0 <mg_tls_parse_cert_der+0x6d4>)
 80172f6:	2004      	movs	r0, #4
 80172f8:	f7f5 f89c 	bl	800c434 <mg_log_prefix>
 80172fc:	4878      	ldr	r0, [pc, #480]	@ (80174e0 <mg_tls_parse_cert_der+0x6e4>)
 80172fe:	f7f5 f8e9 	bl	800c4d4 <mg_log>
 8017302:	e064      	b.n	80173ce <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8017304:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8017306:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x03\x01\x08",
 8017308:	4976      	ldr	r1, [pc, #472]	@ (80174e4 <mg_tls_parse_cert_der+0x6e8>)
 801730a:	4618      	mov	r0, r3
 801730c:	f00c fa1d 	bl	802374a <memcmp>
 8017310:	4603      	mov	r3, r0
 8017312:	2b00      	cmp	r3, #0
 8017314:	d111      	bne.n	801733a <mg_tls_parse_cert_der+0x53e>
    cert->is_ec_pubkey = 1;
 8017316:	68fb      	ldr	r3, [r7, #12]
 8017318:	2201      	movs	r2, #1
 801731a:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: ECDSA secp384r1"));
 801731c:	4b6a      	ldr	r3, [pc, #424]	@ (80174c8 <mg_tls_parse_cert_der+0x6cc>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	2b03      	cmp	r3, #3
 8017322:	dd54      	ble.n	80173ce <mg_tls_parse_cert_der+0x5d2>
 8017324:	4b69      	ldr	r3, [pc, #420]	@ (80174cc <mg_tls_parse_cert_der+0x6d0>)
 8017326:	f642 62a9 	movw	r2, #11945	@ 0x2ea9
 801732a:	4969      	ldr	r1, [pc, #420]	@ (80174d0 <mg_tls_parse_cert_der+0x6d4>)
 801732c:	2004      	movs	r0, #4
 801732e:	f7f5 f881 	bl	800c434 <mg_log_prefix>
 8017332:	486d      	ldr	r0, [pc, #436]	@ (80174e8 <mg_tls_parse_cert_der+0x6ec>)
 8017334:	f7f5 f8ce 	bl	800c4d4 <mg_log>
 8017338:	e049      	b.n	80173ce <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 801733a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 801733c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\xCE\x3D\x02\x01",
 801733e:	496b      	ldr	r1, [pc, #428]	@ (80174ec <mg_tls_parse_cert_der+0x6f0>)
 8017340:	4618      	mov	r0, r3
 8017342:	f00c fa02 	bl	802374a <memcmp>
 8017346:	4603      	mov	r3, r0
 8017348:	2b00      	cmp	r3, #0
 801734a:	d111      	bne.n	8017370 <mg_tls_parse_cert_der+0x574>
    cert->is_ec_pubkey = 1;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	2201      	movs	r2, #1
 8017350:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: EC public key"));
 8017352:	4b5d      	ldr	r3, [pc, #372]	@ (80174c8 <mg_tls_parse_cert_der+0x6cc>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	2b03      	cmp	r3, #3
 8017358:	dd39      	ble.n	80173ce <mg_tls_parse_cert_der+0x5d2>
 801735a:	4b5c      	ldr	r3, [pc, #368]	@ (80174cc <mg_tls_parse_cert_der+0x6d0>)
 801735c:	f642 62ad 	movw	r2, #11949	@ 0x2ead
 8017360:	495b      	ldr	r1, [pc, #364]	@ (80174d0 <mg_tls_parse_cert_der+0x6d4>)
 8017362:	2004      	movs	r0, #4
 8017364:	f7f5 f866 	bl	800c434 <mg_log_prefix>
 8017368:	4861      	ldr	r0, [pc, #388]	@ (80174f0 <mg_tls_parse_cert_der+0x6f4>)
 801736a:	f7f5 f8b3 	bl	800c4d4 <mg_log>
 801736e:	e02e      	b.n	80173ce <mg_tls_parse_cert_der+0x5d2>
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8017370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
                    pki_algo.len) == 0) {
 8017372:	6dba      	ldr	r2, [r7, #88]	@ 0x58
  } else if (memcmp(pki_algo.value, "\x2A\x86\x48\x86\xF7\x0D\x01\x01\x01",
 8017374:	495f      	ldr	r1, [pc, #380]	@ (80174f4 <mg_tls_parse_cert_der+0x6f8>)
 8017376:	4618      	mov	r0, r3
 8017378:	f00c f9e7 	bl	802374a <memcmp>
 801737c:	4603      	mov	r3, r0
 801737e:	2b00      	cmp	r3, #0
 8017380:	d111      	bne.n	80173a6 <mg_tls_parse_cert_der+0x5aa>
    cert->is_ec_pubkey = 0;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	2200      	movs	r2, #0
 8017386:	601a      	str	r2, [r3, #0]
    MG_VERBOSE(("pk algo: RSA"));
 8017388:	4b4f      	ldr	r3, [pc, #316]	@ (80174c8 <mg_tls_parse_cert_der+0x6cc>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	2b03      	cmp	r3, #3
 801738e:	dd1e      	ble.n	80173ce <mg_tls_parse_cert_der+0x5d2>
 8017390:	4b4e      	ldr	r3, [pc, #312]	@ (80174cc <mg_tls_parse_cert_der+0x6d0>)
 8017392:	f642 62b1 	movw	r2, #11953	@ 0x2eb1
 8017396:	494e      	ldr	r1, [pc, #312]	@ (80174d0 <mg_tls_parse_cert_der+0x6d4>)
 8017398:	2004      	movs	r0, #4
 801739a:	f7f5 f84b 	bl	800c434 <mg_log_prefix>
 801739e:	4856      	ldr	r0, [pc, #344]	@ (80174f8 <mg_tls_parse_cert_der+0x6fc>)
 80173a0:	f7f5 f898 	bl	800c4d4 <mg_log>
 80173a4:	e013      	b.n	80173ce <mg_tls_parse_cert_der+0x5d2>
  } else {
    MG_ERROR(("unsupported pk algo: %M", mg_print_hex, pki_algo.len,
 80173a6:	4b48      	ldr	r3, [pc, #288]	@ (80174c8 <mg_tls_parse_cert_der+0x6cc>)
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	dd0c      	ble.n	80173c8 <mg_tls_parse_cert_der+0x5cc>
 80173ae:	4b47      	ldr	r3, [pc, #284]	@ (80174cc <mg_tls_parse_cert_der+0x6d0>)
 80173b0:	f642 62b3 	movw	r2, #11955	@ 0x2eb3
 80173b4:	4946      	ldr	r1, [pc, #280]	@ (80174d0 <mg_tls_parse_cert_der+0x6d4>)
 80173b6:	2001      	movs	r0, #1
 80173b8:	f7f5 f83c 	bl	800c434 <mg_log_prefix>
 80173bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80173be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80173c0:	4944      	ldr	r1, [pc, #272]	@ (80174d4 <mg_tls_parse_cert_der+0x6d8>)
 80173c2:	484e      	ldr	r0, [pc, #312]	@ (80174fc <mg_tls_parse_cert_der+0x700>)
 80173c4:	f7f5 f886 	bl	800c4d4 <mg_log>
              pki_algo.value));
    return -1;
 80173c8:	f04f 33ff 	mov.w	r3, #4294967295
 80173cc:	e0bc      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  }

  // Parse public key
  if (cert->is_ec_pubkey) {
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d011      	beq.n	80173fa <mg_tls_parse_cert_der+0x5fe>
    if (mg_der_next(&pki, &pki_curve) <= 0 || pki_curve.type != 0x06) return -1;
 80173d6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80173da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80173de:	4611      	mov	r1, r2
 80173e0:	4618      	mov	r0, r3
 80173e2:	f7fd fcb1 	bl	8014d48 <mg_der_next>
 80173e6:	4603      	mov	r3, r0
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	dd03      	ble.n	80173f4 <mg_tls_parse_cert_der+0x5f8>
 80173ec:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80173f0:	2b06      	cmp	r3, #6
 80173f2:	d002      	beq.n	80173fa <mg_tls_parse_cert_der+0x5fe>
 80173f4:	f04f 33ff 	mov.w	r3, #4294967295
 80173f8:	e0a6      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  }
  if (mg_der_next(&field, &pki_key) <= 0 || pki_key.type != 0x03) return -1;
 80173fa:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80173fe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017402:	4611      	mov	r1, r2
 8017404:	4618      	mov	r0, r3
 8017406:	f7fd fc9f 	bl	8014d48 <mg_der_next>
 801740a:	4603      	mov	r3, r0
 801740c:	2b00      	cmp	r3, #0
 801740e:	dd03      	ble.n	8017418 <mg_tls_parse_cert_der+0x61c>
 8017410:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8017414:	2b03      	cmp	r3, #3
 8017416:	d002      	beq.n	801741e <mg_tls_parse_cert_der+0x622>
 8017418:	f04f 33ff 	mov.w	r3, #4294967295
 801741c:	e094      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>

  if (cert->is_ec_pubkey) {  // Skip leading 0x00 and 0x04 (=uncompressed)
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d010      	beq.n	8017448 <mg_tls_parse_cert_der+0x64c>
    cert->pubkey = mg_str_n((char *) pki_key.value + 2, pki_key.len - 2);
 8017426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017428:	1c99      	adds	r1, r3, #2
 801742a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801742c:	1e9a      	subs	r2, r3, #2
 801742e:	68fc      	ldr	r4, [r7, #12]
 8017430:	463b      	mov	r3, r7
 8017432:	4618      	mov	r0, r3
 8017434:	f7fc fe67 	bl	8014106 <mg_str_n>
 8017438:	f104 030c 	add.w	r3, r4, #12
 801743c:	463a      	mov	r2, r7
 801743e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017442:	e883 0003 	stmia.w	r3, {r0, r1}
 8017446:	e00f      	b.n	8017468 <mg_tls_parse_cert_der+0x66c>
  } else {  // Skip leading 0x00 byte
    cert->pubkey = mg_str_n((char *) pki_key.value + 1, pki_key.len - 1);
 8017448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801744a:	1c59      	adds	r1, r3, #1
 801744c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801744e:	1e5a      	subs	r2, r3, #1
 8017450:	68fc      	ldr	r4, [r7, #12]
 8017452:	463b      	mov	r3, r7
 8017454:	4618      	mov	r0, r3
 8017456:	f7fc fe56 	bl	8014106 <mg_str_n>
 801745a:	f104 030c 	add.w	r3, r4, #12
 801745e:	463a      	mov	r2, r7
 8017460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017464:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  // Parse signature
  if (mg_der_next(&root, &field) <= 0 || field.type != 0x30) return -1;
 8017468:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 801746c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8017470:	4611      	mov	r1, r2
 8017472:	4618      	mov	r0, r3
 8017474:	f7fd fc68 	bl	8014d48 <mg_der_next>
 8017478:	4603      	mov	r3, r0
 801747a:	2b00      	cmp	r3, #0
 801747c:	dd03      	ble.n	8017486 <mg_tls_parse_cert_der+0x68a>
 801747e:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 8017482:	2b30      	cmp	r3, #48	@ 0x30
 8017484:	d002      	beq.n	801748c <mg_tls_parse_cert_der+0x690>
 8017486:	f04f 33ff 	mov.w	r3, #4294967295
 801748a:	e05d      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  if (mg_der_next(&root, &raw_sig) <= 0 || raw_sig.type != 0x03) return -1;
 801748c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8017490:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8017494:	4611      	mov	r1, r2
 8017496:	4618      	mov	r0, r3
 8017498:	f7fd fc56 	bl	8014d48 <mg_der_next>
 801749c:	4603      	mov	r3, r0
 801749e:	2b00      	cmp	r3, #0
 80174a0:	dd03      	ble.n	80174aa <mg_tls_parse_cert_der+0x6ae>
 80174a2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80174a6:	2b03      	cmp	r3, #3
 80174a8:	d002      	beq.n	80174b0 <mg_tls_parse_cert_der+0x6b4>
 80174aa:	f04f 33ff 	mov.w	r3, #4294967295
 80174ae:	e04b      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
  if (raw_sig.len < 1 || raw_sig.value[0] != 0x00) return -1;
 80174b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d003      	beq.n	80174be <mg_tls_parse_cert_der+0x6c2>
 80174b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d020      	beq.n	8017500 <mg_tls_parse_cert_der+0x704>
 80174be:	f04f 33ff 	mov.w	r3, #4294967295
 80174c2:	e041      	b.n	8017548 <mg_tls_parse_cert_der+0x74c>
 80174c4:	08026414 	.word	0x08026414
 80174c8:	24000258 	.word	0x24000258
 80174cc:	08028278 	.word	0x08028278
 80174d0:	08024478 	.word	0x08024478
 80174d4:	08010d45 	.word	0x08010d45
 80174d8:	0802641c 	.word	0x0802641c
 80174dc:	08026430 	.word	0x08026430
 80174e0:	0802643c 	.word	0x0802643c
 80174e4:	08026458 	.word	0x08026458
 80174e8:	08026464 	.word	0x08026464
 80174ec:	08026480 	.word	0x08026480
 80174f0:	08026488 	.word	0x08026488
 80174f4:	080264a0 	.word	0x080264a0
 80174f8:	080264ac 	.word	0x080264ac
 80174fc:	080264bc 	.word	0x080264bc

  cert->sig = mg_str_n((char *) raw_sig.value + 1, raw_sig.len - 1);
 8017500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017502:	1c59      	adds	r1, r3, #1
 8017504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017506:	1e5a      	subs	r2, r3, #1
 8017508:	68fc      	ldr	r4, [r7, #12]
 801750a:	463b      	mov	r3, r7
 801750c:	4618      	mov	r0, r3
 801750e:	f7fc fdfa 	bl	8014106 <mg_str_n>
 8017512:	f104 0314 	add.w	r3, r4, #20
 8017516:	463a      	mov	r2, r7
 8017518:	e892 0003 	ldmia.w	r2, {r0, r1}
 801751c:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_VERBOSE(("sig: %M", mg_print_hex, cert->sig.len, cert->sig.buf));
 8017520:	4b0b      	ldr	r3, [pc, #44]	@ (8017550 <mg_tls_parse_cert_der+0x754>)
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	2b03      	cmp	r3, #3
 8017526:	dd0e      	ble.n	8017546 <mg_tls_parse_cert_der+0x74a>
 8017528:	4b0a      	ldr	r3, [pc, #40]	@ (8017554 <mg_tls_parse_cert_der+0x758>)
 801752a:	f642 62ca 	movw	r2, #11978	@ 0x2eca
 801752e:	490a      	ldr	r1, [pc, #40]	@ (8017558 <mg_tls_parse_cert_der+0x75c>)
 8017530:	2004      	movs	r0, #4
 8017532:	f7f4 ff7f 	bl	800c434 <mg_log_prefix>
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	699a      	ldr	r2, [r3, #24]
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	695b      	ldr	r3, [r3, #20]
 801753e:	4907      	ldr	r1, [pc, #28]	@ (801755c <mg_tls_parse_cert_der+0x760>)
 8017540:	4807      	ldr	r0, [pc, #28]	@ (8017560 <mg_tls_parse_cert_der+0x764>)
 8017542:	f7f4 ffc7 	bl	800c4d4 <mg_log>

  return 0;
 8017546:	2300      	movs	r3, #0
}
 8017548:	4618      	mov	r0, r3
 801754a:	37ac      	adds	r7, #172	@ 0xac
 801754c:	46bd      	mov	sp, r7
 801754e:	bd90      	pop	{r4, r7, pc}
 8017550:	24000258 	.word	0x24000258
 8017554:	08028278 	.word	0x08028278
 8017558:	08024478 	.word	0x08024478
 801755c:	08010d45 	.word	0x08010d45
 8017560:	080264d4 	.word	0x080264d4

08017564 <mg_tls_verify_cert_san>:

static int mg_tls_verify_cert_san(const uint8_t *der, size_t dersz,
                                  const char *server_name) {
 8017564:	b580      	push	{r7, lr}
 8017566:	b094      	sub	sp, #80	@ 0x50
 8017568:	af02      	add	r7, sp, #8
 801756a:	60f8      	str	r0, [r7, #12]
 801756c:	60b9      	str	r1, [r7, #8]
 801756e:	607a      	str	r2, [r7, #4]
  struct mg_der_tlv root, field, name;
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 8017570:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8017574:	461a      	mov	r2, r3
 8017576:	68b9      	ldr	r1, [r7, #8]
 8017578:	68f8      	ldr	r0, [r7, #12]
 801757a:	f7fd fb85 	bl	8014c88 <mg_der_parse>
 801757e:	4603      	mov	r3, r0
 8017580:	2b00      	cmp	r3, #0
 8017582:	db0a      	blt.n	801759a <mg_tls_verify_cert_san+0x36>
      mg_der_find_oid(&root, (uint8_t *) "\x55\x1d\x11", 3, &field) < 0) {
 8017584:	f107 0320 	add.w	r3, r7, #32
 8017588:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801758c:	2203      	movs	r2, #3
 801758e:	492f      	ldr	r1, [pc, #188]	@ (801764c <mg_tls_verify_cert_san+0xe8>)
 8017590:	f7fd fc05 	bl	8014d9e <mg_der_find_oid>
 8017594:	4603      	mov	r3, r0
  if (mg_der_parse((uint8_t *) der, dersz, &root) < 0 ||
 8017596:	2b00      	cmp	r3, #0
 8017598:	da10      	bge.n	80175bc <mg_tls_verify_cert_san+0x58>
    MG_ERROR(("failed to parse certificate to extract SAN"));
 801759a:	4b2d      	ldr	r3, [pc, #180]	@ (8017650 <mg_tls_verify_cert_san+0xec>)
 801759c:	681b      	ldr	r3, [r3, #0]
 801759e:	2b00      	cmp	r3, #0
 80175a0:	dd09      	ble.n	80175b6 <mg_tls_verify_cert_san+0x52>
 80175a2:	4b2c      	ldr	r3, [pc, #176]	@ (8017654 <mg_tls_verify_cert_san+0xf0>)
 80175a4:	f642 62d4 	movw	r2, #11988	@ 0x2ed4
 80175a8:	492b      	ldr	r1, [pc, #172]	@ (8017658 <mg_tls_verify_cert_san+0xf4>)
 80175aa:	2001      	movs	r0, #1
 80175ac:	f7f4 ff42 	bl	800c434 <mg_log_prefix>
 80175b0:	482a      	ldr	r0, [pc, #168]	@ (801765c <mg_tls_verify_cert_san+0xf8>)
 80175b2:	f7f4 ff8f 	bl	800c4d4 <mg_log>
    return -1;
 80175b6:	f04f 33ff 	mov.w	r3, #4294967295
 80175ba:	e043      	b.n	8017644 <mg_tls_verify_cert_san+0xe0>
  }
  if (mg_der_parse(field.value, field.len, &field) < 0) {
 80175bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80175c0:	f107 0220 	add.w	r2, r7, #32
 80175c4:	4618      	mov	r0, r3
 80175c6:	f7fd fb5f 	bl	8014c88 <mg_der_parse>
 80175ca:	4603      	mov	r3, r0
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	da2c      	bge.n	801762a <mg_tls_verify_cert_san+0xc6>
    MG_ERROR(
 80175d0:	4b1f      	ldr	r3, [pc, #124]	@ (8017650 <mg_tls_verify_cert_san+0xec>)
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	dd09      	ble.n	80175ec <mg_tls_verify_cert_san+0x88>
 80175d8:	4b1e      	ldr	r3, [pc, #120]	@ (8017654 <mg_tls_verify_cert_san+0xf0>)
 80175da:	f642 62d8 	movw	r2, #11992	@ 0x2ed8
 80175de:	491e      	ldr	r1, [pc, #120]	@ (8017658 <mg_tls_verify_cert_san+0xf4>)
 80175e0:	2001      	movs	r0, #1
 80175e2:	f7f4 ff27 	bl	800c434 <mg_log_prefix>
 80175e6:	481e      	ldr	r0, [pc, #120]	@ (8017660 <mg_tls_verify_cert_san+0xfc>)
 80175e8:	f7f4 ff74 	bl	800c4d4 <mg_log>
        ("certificate subject alternative names is not a constructed object"));
    return -1;
 80175ec:	f04f 33ff 	mov.w	r3, #4294967295
 80175f0:	e028      	b.n	8017644 <mg_tls_verify_cert_san+0xe0>
  }
  while (mg_der_next(&field, &name) > 0) {
    if (mg_match(mg_str(server_name),
 80175f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80175f6:	6879      	ldr	r1, [r7, #4]
 80175f8:	4618      	mov	r0, r3
 80175fa:	f7fc fd67 	bl	80140cc <mg_str_s>
                 mg_str_n((const char *) name.value, name.len), NULL)) {
 80175fe:	69f9      	ldr	r1, [r7, #28]
 8017600:	69ba      	ldr	r2, [r7, #24]
    if (mg_match(mg_str(server_name),
 8017602:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8017606:	4618      	mov	r0, r3
 8017608:	f7fc fd7d 	bl	8014106 <mg_str_n>
 801760c:	2300      	movs	r3, #0
 801760e:	9300      	str	r3, [sp, #0]
 8017610:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8017614:	cb0c      	ldmia	r3, {r2, r3}
 8017616:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 801761a:	c903      	ldmia	r1, {r0, r1}
 801761c:	f7fc fe60 	bl	80142e0 <mg_match>
 8017620:	4603      	mov	r3, r0
 8017622:	2b00      	cmp	r3, #0
 8017624:	d001      	beq.n	801762a <mg_tls_verify_cert_san+0xc6>
      // Found SAN that matches the host name
      return 1;
 8017626:	2301      	movs	r3, #1
 8017628:	e00c      	b.n	8017644 <mg_tls_verify_cert_san+0xe0>
  while (mg_der_next(&field, &name) > 0) {
 801762a:	f107 0214 	add.w	r2, r7, #20
 801762e:	f107 0320 	add.w	r3, r7, #32
 8017632:	4611      	mov	r1, r2
 8017634:	4618      	mov	r0, r3
 8017636:	f7fd fb87 	bl	8014d48 <mg_der_next>
 801763a:	4603      	mov	r3, r0
 801763c:	2b00      	cmp	r3, #0
 801763e:	dcd8      	bgt.n	80175f2 <mg_tls_verify_cert_san+0x8e>
    }
  }
  return -1;
 8017640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017644:	4618      	mov	r0, r3
 8017646:	3748      	adds	r7, #72	@ 0x48
 8017648:	46bd      	mov	sp, r7
 801764a:	bd80      	pop	{r7, pc}
 801764c:	080264dc 	.word	0x080264dc
 8017650:	24000258 	.word	0x24000258
 8017654:	08028290 	.word	0x08028290
 8017658:	08024478 	.word	0x08024478
 801765c:	080264e0 	.word	0x080264e0
 8017660:	0802650c 	.word	0x0802650c

08017664 <mg_tls_verify_cert_signature>:

static int mg_tls_verify_cert_signature(const struct mg_tls_cert *cert,
                                        const struct mg_tls_cert *issuer) {
 8017664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017666:	b0db      	sub	sp, #364	@ 0x16c
 8017668:	af04      	add	r7, sp, #16
 801766a:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801766e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8017672:	6018      	str	r0, [r3, #0]
 8017674:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017678:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801767c:	6019      	str	r1, [r3, #0]
  if (issuer->is_ec_pubkey) {
 801767e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017682:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	2b00      	cmp	r3, #0
 801768c:	f000 80eb 	beq.w	8017866 <mg_tls_verify_cert_signature+0x202>
    uint8_t sig[128];
    struct mg_der_tlv seq = {0, 0, 0}, a = {0, 0, 0}, b = {0, 0, 0};
 8017690:	2300      	movs	r3, #0
 8017692:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
 8017696:	2300      	movs	r3, #0
 8017698:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 801769c:	2300      	movs	r3, #0
 801769e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80176a2:	2300      	movs	r3, #0
 80176a4:	f887 3138 	strb.w	r3, [r7, #312]	@ 0x138
 80176a8:	2300      	movs	r3, #0
 80176aa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80176ae:	2300      	movs	r3, #0
 80176b0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80176b4:	2300      	movs	r3, #0
 80176b6:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 80176ba:	2300      	movs	r3, #0
 80176bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80176c0:	2300      	movs	r3, #0
 80176c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    mg_der_parse((uint8_t *) cert->sig.buf, cert->sig.len, &seq);
 80176c6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80176ca:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	6958      	ldr	r0, [r3, #20]
 80176d2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80176d6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	699b      	ldr	r3, [r3, #24]
 80176de:	f507 72a2 	add.w	r2, r7, #324	@ 0x144
 80176e2:	4619      	mov	r1, r3
 80176e4:	f7fd fad0 	bl	8014c88 <mg_der_parse>
    mg_der_next(&seq, &a);
 80176e8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80176ec:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80176f0:	4611      	mov	r1, r2
 80176f2:	4618      	mov	r0, r3
 80176f4:	f7fd fb28 	bl	8014d48 <mg_der_next>
    mg_der_next(&seq, &b);
 80176f8:	f507 7296 	add.w	r2, r7, #300	@ 0x12c
 80176fc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8017700:	4611      	mov	r1, r2
 8017702:	4618      	mov	r0, r3
 8017704:	f7fd fb20 	bl	8014d48 <mg_der_next>
    if (a.len == 0 || b.len == 0) {
 8017708:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801770c:	2b00      	cmp	r3, #0
 801770e:	d003      	beq.n	8017718 <mg_tls_verify_cert_signature+0xb4>
 8017710:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017714:	2b00      	cmp	r3, #0
 8017716:	d10f      	bne.n	8017738 <mg_tls_verify_cert_signature+0xd4>
      MG_ERROR(("cert verification error"));
 8017718:	4b92      	ldr	r3, [pc, #584]	@ (8017964 <mg_tls_verify_cert_signature+0x300>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	2b00      	cmp	r3, #0
 801771e:	dd09      	ble.n	8017734 <mg_tls_verify_cert_signature+0xd0>
 8017720:	4b91      	ldr	r3, [pc, #580]	@ (8017968 <mg_tls_verify_cert_signature+0x304>)
 8017722:	f642 62ef 	movw	r2, #12015	@ 0x2eef
 8017726:	4991      	ldr	r1, [pc, #580]	@ (801796c <mg_tls_verify_cert_signature+0x308>)
 8017728:	2001      	movs	r0, #1
 801772a:	f7f4 fe83 	bl	800c434 <mg_log_prefix>
 801772e:	4890      	ldr	r0, [pc, #576]	@ (8017970 <mg_tls_verify_cert_signature+0x30c>)
 8017730:	f7f4 fed0 	bl	800c4d4 <mg_log>
      return 0;
 8017734:	2300      	movs	r3, #0
 8017736:	e110      	b.n	801795a <mg_tls_verify_cert_signature+0x2f6>
    }
    if (issuer->pubkey.len == 64) {
 8017738:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801773c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	691b      	ldr	r3, [r3, #16]
 8017744:	2b40      	cmp	r3, #64	@ 0x40
 8017746:	d15f      	bne.n	8017808 <mg_tls_verify_cert_signature+0x1a4>
      const uint32_t N = 32;
 8017748:	2320      	movs	r3, #32
 801774a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
      if (a.len > N) a.value += (a.len - N), a.len = N;
 801774e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8017752:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8017756:	429a      	cmp	r2, r3
 8017758:	d20d      	bcs.n	8017776 <mg_tls_verify_cert_signature+0x112>
 801775a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801775e:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8017762:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8017766:	1acb      	subs	r3, r1, r3
 8017768:	4413      	add	r3, r2
 801776a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801776e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8017772:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
      if (b.len > N) b.value += (b.len - N), b.len = N;
 8017776:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801777a:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801777e:	429a      	cmp	r2, r3
 8017780:	d20d      	bcs.n	801779e <mg_tls_verify_cert_signature+0x13a>
 8017782:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8017786:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 801778a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801778e:	1acb      	subs	r3, r1, r3
 8017790:	4413      	add	r3, r2
 8017792:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8017796:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801779a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
      memmove(sig, a.value, N);
 801779e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80177a2:	f107 0308 	add.w	r3, r7, #8
 80177a6:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80177aa:	4618      	mov	r0, r3
 80177ac:	f00b ffdd 	bl	802376a <memmove>
      memmove(sig + N, b.value, N);
 80177b0:	f107 0208 	add.w	r2, r7, #8
 80177b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80177b8:	4413      	add	r3, r2
 80177ba:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 80177be:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80177c2:	4618      	mov	r0, r3
 80177c4:	f00b ffd1 	bl	802376a <memmove>
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 80177c8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80177cc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	68dc      	ldr	r4, [r3, #12]
 80177d4:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80177d8:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	f103 051c 	add.w	r5, r3, #28
                            (unsigned) cert->tbshashsz, sig,
 80177e2:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80177e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
      return mg_uecc_verify((uint8_t *) issuer->pubkey.buf, cert->tbshash,
 80177ee:	f005 fba7 	bl	801cf40 <mg_uecc_secp256r1>
 80177f2:	4602      	mov	r2, r0
 80177f4:	f107 0308 	add.w	r3, r7, #8
 80177f8:	9200      	str	r2, [sp, #0]
 80177fa:	4632      	mov	r2, r6
 80177fc:	4629      	mov	r1, r5
 80177fe:	4620      	mov	r0, r4
 8017800:	f006 fd3a 	bl	801e278 <mg_uecc_verify>
 8017804:	4603      	mov	r3, r0
 8017806:	e0a8      	b.n	801795a <mg_tls_verify_cert_signature+0x2f6>
                            mg_uecc_secp256r1());
    } else if (issuer->pubkey.len == 96) {
 8017808:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801780c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	691b      	ldr	r3, [r3, #16]
 8017814:	2b60      	cmp	r3, #96	@ 0x60
 8017816:	d10f      	bne.n	8017838 <mg_tls_verify_cert_signature+0x1d4>
      MG_DEBUG(("ignore secp386 for now"));
 8017818:	4b52      	ldr	r3, [pc, #328]	@ (8017964 <mg_tls_verify_cert_signature+0x300>)
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	2b02      	cmp	r3, #2
 801781e:	dd09      	ble.n	8017834 <mg_tls_verify_cert_signature+0x1d0>
 8017820:	4b51      	ldr	r3, [pc, #324]	@ (8017968 <mg_tls_verify_cert_signature+0x304>)
 8017822:	f642 62fc 	movw	r2, #12028	@ 0x2efc
 8017826:	4951      	ldr	r1, [pc, #324]	@ (801796c <mg_tls_verify_cert_signature+0x308>)
 8017828:	2003      	movs	r0, #3
 801782a:	f7f4 fe03 	bl	800c434 <mg_log_prefix>
 801782e:	4851      	ldr	r0, [pc, #324]	@ (8017974 <mg_tls_verify_cert_signature+0x310>)
 8017830:	f7f4 fe50 	bl	800c4d4 <mg_log>
      return 1;
 8017834:	2301      	movs	r3, #1
 8017836:	e090      	b.n	801795a <mg_tls_verify_cert_signature+0x2f6>
    } else {
      MG_ERROR(("unsupported public key length: %d", issuer->pubkey.len));
 8017838:	4b4a      	ldr	r3, [pc, #296]	@ (8017964 <mg_tls_verify_cert_signature+0x300>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	2b00      	cmp	r3, #0
 801783e:	dd10      	ble.n	8017862 <mg_tls_verify_cert_signature+0x1fe>
 8017840:	4b49      	ldr	r3, [pc, #292]	@ (8017968 <mg_tls_verify_cert_signature+0x304>)
 8017842:	f642 62ff 	movw	r2, #12031	@ 0x2eff
 8017846:	4949      	ldr	r1, [pc, #292]	@ (801796c <mg_tls_verify_cert_signature+0x308>)
 8017848:	2001      	movs	r0, #1
 801784a:	f7f4 fdf3 	bl	800c434 <mg_log_prefix>
 801784e:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017852:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8017856:	681b      	ldr	r3, [r3, #0]
 8017858:	691b      	ldr	r3, [r3, #16]
 801785a:	4619      	mov	r1, r3
 801785c:	4846      	ldr	r0, [pc, #280]	@ (8017978 <mg_tls_verify_cert_signature+0x314>)
 801785e:	f7f4 fe39 	bl	800c4d4 <mg_log>
      return 0;
 8017862:	2300      	movs	r3, #0
 8017864:	e079      	b.n	801795a <mg_tls_verify_cert_signature+0x2f6>
    }
  } else {
    int r;
    uint8_t sig2[256];  // 2048 bits
    struct mg_der_tlv seq, modulus, exponent;
    if (mg_der_parse((uint8_t *) issuer->pubkey.buf, issuer->pubkey.len,
 8017866:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801786a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	68d8      	ldr	r0, [r3, #12]
 8017872:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017876:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	691b      	ldr	r3, [r3, #16]
 801787e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8017882:	4619      	mov	r1, r3
 8017884:	f7fd fa00 	bl	8014c88 <mg_der_parse>
 8017888:	4603      	mov	r3, r0
 801788a:	2b00      	cmp	r3, #0
 801788c:	dd1d      	ble.n	80178ca <mg_tls_verify_cert_signature+0x266>
                     &seq) <= 0 ||
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801788e:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8017892:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017896:	4611      	mov	r1, r2
 8017898:	4618      	mov	r0, r3
 801789a:	f7fd fa55 	bl	8014d48 <mg_der_next>
 801789e:	4603      	mov	r3, r0
                     &seq) <= 0 ||
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	dd12      	ble.n	80178ca <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 80178a4:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 80178a8:	2b02      	cmp	r3, #2
 80178aa:	d10e      	bne.n	80178ca <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 80178ac:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80178b0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80178b4:	4611      	mov	r1, r2
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7fd fa46 	bl	8014d48 <mg_der_next>
 80178bc:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 80178be:	2b00      	cmp	r3, #0
 80178c0:	dd03      	ble.n	80178ca <mg_tls_verify_cert_signature+0x266>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 80178c2:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 80178c6:	2b02      	cmp	r3, #2
 80178c8:	d002      	beq.n	80178d0 <mg_tls_verify_cert_signature+0x26c>
      return -1;
 80178ca:	f04f 33ff 	mov.w	r3, #4294967295
 80178ce:	e044      	b.n	801795a <mg_tls_verify_cert_signature+0x2f6>
    }
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 80178d0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 80178d4:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80178d8:	f8d7 5110 	ldr.w	r5, [r7, #272]	@ 0x110
 80178dc:	f8d7 610c 	ldr.w	r6, [r7, #268]	@ 0x10c
                   (uint8_t *) cert->sig.buf, cert->sig.len, sig2,
 80178e0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80178e4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	695b      	ldr	r3, [r3, #20]
 80178ec:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80178f0:	f5a2 72aa 	sub.w	r2, r2, #340	@ 0x154
 80178f4:	6812      	ldr	r2, [r2, #0]
 80178f6:	6992      	ldr	r2, [r2, #24]
    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 80178f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80178fc:	9103      	str	r1, [sp, #12]
 80178fe:	f107 0108 	add.w	r1, r7, #8
 8017902:	9102      	str	r1, [sp, #8]
 8017904:	9201      	str	r2, [sp, #4]
 8017906:	9300      	str	r3, [sp, #0]
 8017908:	4633      	mov	r3, r6
 801790a:	462a      	mov	r2, r5
 801790c:	4621      	mov	r1, r4
 801790e:	f004 fae8 	bl	801bee2 <mg_rsa_mod_pow>
                   sizeof(sig2));

    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 8017912:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8017916:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801791e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017922:	f107 0208 	add.w	r2, r7, #8
 8017926:	18d0      	adds	r0, r2, r3
 8017928:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801792c:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	f103 011c 	add.w	r1, r3, #28
               cert->tbshashsz);
 8017936:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 801793a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    r = memcmp(sig2 + sizeof(sig2) - cert->tbshashsz, cert->tbshash,
 8017942:	461a      	mov	r2, r3
 8017944:	f00b ff01 	bl	802374a <memcmp>
 8017948:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154
    return r == 0;
 801794c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8017950:	2b00      	cmp	r3, #0
 8017952:	bf0c      	ite	eq
 8017954:	2301      	moveq	r3, #1
 8017956:	2300      	movne	r3, #0
 8017958:	b2db      	uxtb	r3, r3
  }
}
 801795a:	4618      	mov	r0, r3
 801795c:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8017960:	46bd      	mov	sp, r7
 8017962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017964:	24000258 	.word	0x24000258
 8017968:	080282a8 	.word	0x080282a8
 801796c:	08024478 	.word	0x08024478
 8017970:	08026550 	.word	0x08026550
 8017974:	08026568 	.word	0x08026568
 8017978:	08026580 	.word	0x08026580

0801797c <mg_tls_client_recv_cert>:

static int mg_tls_client_recv_cert(struct mg_connection *c) {
 801797c:	b580      	push	{r7, lr}
 801797e:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 8017982:	af00      	add	r7, sp, #0
 8017984:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017988:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801798c:	6018      	str	r0, [r3, #0]
  int subj_match = 0;
 801798e:	2300      	movs	r3, #0
 8017990:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017994:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017998:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80179a2:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
  unsigned char *recv_buf;
  (void) subj_match;

  if (mg_tls_recv_record(c) < 0) {
 80179a6:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80179aa:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80179ae:	6818      	ldr	r0, [r3, #0]
 80179b0:	f7fd ff30 	bl	8015814 <mg_tls_recv_record>
 80179b4:	4603      	mov	r3, r0
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	da02      	bge.n	80179c0 <mg_tls_client_recv_cert+0x44>
    return -1;
 80179ba:	f04f 33ff 	mov.w	r3, #4294967295
 80179be:	e24a      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
  }

  recv_buf = &c->rtls.buf[tls->recv_offset];
 80179c0:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 80179c4:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80179cc:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 80179d0:	695b      	ldr	r3, [r3, #20]
 80179d2:	4413      	add	r3, r2
 80179d4:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8

  if (recv_buf[0] == MG_TLS_CERTIFICATE_REQUEST) {
 80179d8:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 80179dc:	781b      	ldrb	r3, [r3, #0]
 80179de:	2b0d      	cmp	r3, #13
 80179e0:	d11c      	bne.n	8017a1c <mg_tls_client_recv_cert+0xa0>
    MG_VERBOSE(("got certificate request"));
 80179e2:	4bcb      	ldr	r3, [pc, #812]	@ (8017d10 <mg_tls_client_recv_cert+0x394>)
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	2b03      	cmp	r3, #3
 80179e8:	dd09      	ble.n	80179fe <mg_tls_client_recv_cert+0x82>
 80179ea:	4bca      	ldr	r3, [pc, #808]	@ (8017d14 <mg_tls_client_recv_cert+0x398>)
 80179ec:	f642 7223 	movw	r2, #12067	@ 0x2f23
 80179f0:	49c9      	ldr	r1, [pc, #804]	@ (8017d18 <mg_tls_client_recv_cert+0x39c>)
 80179f2:	2004      	movs	r0, #4
 80179f4:	f7f4 fd1e 	bl	800c434 <mg_log_prefix>
 80179f8:	48c8      	ldr	r0, [pc, #800]	@ (8017d1c <mg_tls_client_recv_cert+0x3a0>)
 80179fa:	f7f4 fd6b 	bl	800c4d4 <mg_log>
    mg_tls_drop_message(c);
 80179fe:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017a02:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017a06:	6818      	ldr	r0, [r3, #0]
 8017a08:	f7fd fab8 	bl	8014f7c <mg_tls_drop_message>
    tls->cert_requested = 1;
 8017a0c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017a10:	2201      	movs	r2, #1
 8017a12:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    return -1;
 8017a16:	f04f 33ff 	mov.w	r3, #4294967295
 8017a1a:	e21c      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
  }

  if (recv_buf[0] != MG_TLS_CERTIFICATE) {
 8017a1c:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017a20:	781b      	ldrb	r3, [r3, #0]
 8017a22:	2b0b      	cmp	r3, #11
 8017a24:	d00e      	beq.n	8017a44 <mg_tls_client_recv_cert+0xc8>
    mg_error(c, "expected server certificate but got msg 0x%02x", recv_buf[0]);
 8017a26:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017a2a:	781b      	ldrb	r3, [r3, #0]
 8017a2c:	461a      	mov	r2, r3
 8017a2e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017a32:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017a36:	49ba      	ldr	r1, [pc, #744]	@ (8017d20 <mg_tls_client_recv_cert+0x3a4>)
 8017a38:	6818      	ldr	r0, [r3, #0]
 8017a3a:	f7ee ffeb 	bl	8006a14 <mg_error>
    return -1;
 8017a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a42:	e208      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
  }

  if (tls->recv_len < 11) {
 8017a44:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017a48:	699b      	ldr	r3, [r3, #24]
 8017a4a:	2b0a      	cmp	r3, #10
 8017a4c:	d80a      	bhi.n	8017a64 <mg_tls_client_recv_cert+0xe8>
    mg_error(c, "certificate list too short");
 8017a4e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017a52:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017a56:	49b3      	ldr	r1, [pc, #716]	@ (8017d24 <mg_tls_client_recv_cert+0x3a8>)
 8017a58:	6818      	ldr	r0, [r3, #0]
 8017a5a:	f7ee ffdb 	bl	8006a14 <mg_error>
    return -1;
 8017a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8017a62:	e1f8      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
  }

  uint32_t full_cert_chain_len = MG_LOAD_BE24(recv_buf + 1);
 8017a64:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017a68:	3301      	adds	r3, #1
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	041a      	lsls	r2, r3, #16
 8017a6e:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017a72:	3302      	adds	r3, #2
 8017a74:	781b      	ldrb	r3, [r3, #0]
 8017a76:	021b      	lsls	r3, r3, #8
 8017a78:	4313      	orrs	r3, r2
 8017a7a:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8017a7e:	3203      	adds	r2, #3
 8017a80:	7812      	ldrb	r2, [r2, #0]
 8017a82:	4313      	orrs	r3, r2
 8017a84:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
  uint32_t cert_chain_len = MG_LOAD_BE24(recv_buf + 5);
 8017a88:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017a8c:	3305      	adds	r3, #5
 8017a8e:	781b      	ldrb	r3, [r3, #0]
 8017a90:	041a      	lsls	r2, r3, #16
 8017a92:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017a96:	3306      	adds	r3, #6
 8017a98:	781b      	ldrb	r3, [r3, #0]
 8017a9a:	021b      	lsls	r3, r3, #8
 8017a9c:	4313      	orrs	r3, r2
 8017a9e:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8017aa2:	3207      	adds	r2, #7
 8017aa4:	7812      	ldrb	r2, [r2, #0]
 8017aa6:	4313      	orrs	r3, r2
 8017aa8:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
  if (cert_chain_len != full_cert_chain_len - 4) {
 8017aac:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8017ab0:	3b04      	subs	r3, #4
 8017ab2:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d01c      	beq.n	8017af4 <mg_tls_client_recv_cert+0x178>
    MG_ERROR(("full chain length: %d, chain length: %d", full_cert_chain_len,
 8017aba:	4b95      	ldr	r3, [pc, #596]	@ (8017d10 <mg_tls_client_recv_cert+0x394>)
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	dd0d      	ble.n	8017ade <mg_tls_client_recv_cert+0x162>
 8017ac2:	4b94      	ldr	r3, [pc, #592]	@ (8017d14 <mg_tls_client_recv_cert+0x398>)
 8017ac4:	f642 7236 	movw	r2, #12086	@ 0x2f36
 8017ac8:	4993      	ldr	r1, [pc, #588]	@ (8017d18 <mg_tls_client_recv_cert+0x39c>)
 8017aca:	2001      	movs	r0, #1
 8017acc:	f7f4 fcb2 	bl	800c434 <mg_log_prefix>
 8017ad0:	f8d7 22f0 	ldr.w	r2, [r7, #752]	@ 0x2f0
 8017ad4:	f8d7 12f4 	ldr.w	r1, [r7, #756]	@ 0x2f4
 8017ad8:	4893      	ldr	r0, [pc, #588]	@ (8017d28 <mg_tls_client_recv_cert+0x3ac>)
 8017ada:	f7f4 fcfb 	bl	800c4d4 <mg_log>
              cert_chain_len));
    mg_error(c, "certificate chain length mismatch");
 8017ade:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017ae2:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017ae6:	4991      	ldr	r1, [pc, #580]	@ (8017d2c <mg_tls_client_recv_cert+0x3b0>)
 8017ae8:	6818      	ldr	r0, [r3, #0]
 8017aea:	f7ee ff93 	bl	8006a14 <mg_error>
    return -1;
 8017aee:	f04f 33ff 	mov.w	r3, #4294967295
 8017af2:	e1b0      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
  }

  // Normally, there are 2-3 certs in a chain
  struct mg_tls_cert certs[8];
  int certnum = 0;
 8017af4:	2300      	movs	r3, #0
 8017af6:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
  uint8_t *p = recv_buf + 8;
 8017afa:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8017afe:	3308      	adds	r3, #8
 8017b00:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
  // uint8_t *endp = recv_buf + tls->recv_len;
  uint8_t *endp = recv_buf + cert_chain_len;
 8017b04:	f8d7 22f8 	ldr.w	r2, [r7, #760]	@ 0x2f8
 8017b08:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8017b0c:	4413      	add	r3, r2
 8017b0e:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec

  int found_ca = 0;
 8017b12:	2300      	movs	r3, #0
 8017b14:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
  struct mg_tls_cert ca;

  memset(certs, 0, sizeof(certs));
 8017b18:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017b1c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017b20:	2100      	movs	r1, #0
 8017b22:	4618      	mov	r0, r3
 8017b24:	f00b fe3b 	bl	802379e <memset>
  memset(&ca, 0, sizeof(ca));
 8017b28:	f107 030c 	add.w	r3, r7, #12
 8017b2c:	2250      	movs	r2, #80	@ 0x50
 8017b2e:	2100      	movs	r1, #0
 8017b30:	4618      	mov	r0, r3
 8017b32:	f00b fe34 	bl	802379e <memset>

  if (tls->ca_der.len > 0) {
 8017b36:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017b3a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	f000 8134 	beq.w	8017dac <mg_tls_client_recv_cert+0x430>
    if (mg_tls_parse_cert_der(tls->ca_der.buf, tls->ca_der.len, &ca) < 0) {
 8017b44:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017b48:	f8d3 0120 	ldr.w	r0, [r3, #288]	@ 0x120
 8017b4c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017b50:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017b54:	f107 020c 	add.w	r2, r7, #12
 8017b58:	4619      	mov	r1, r3
 8017b5a:	f7ff f94f 	bl	8016dfc <mg_tls_parse_cert_der>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	da0a      	bge.n	8017b7a <mg_tls_client_recv_cert+0x1fe>
      mg_error(c, "failed to parse CA certificate");
 8017b64:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017b68:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017b6c:	4970      	ldr	r1, [pc, #448]	@ (8017d30 <mg_tls_client_recv_cert+0x3b4>)
 8017b6e:	6818      	ldr	r0, [r3, #0]
 8017b70:	f7ee ff50 	bl	8006a14 <mg_error>
      return -1;
 8017b74:	f04f 33ff 	mov.w	r3, #4294967295
 8017b78:	e16d      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
    }
    MG_VERBOSE(("CA serial: %M", mg_print_hex, ca.sn.len, ca.sn.buf));
 8017b7a:	4b65      	ldr	r3, [pc, #404]	@ (8017d10 <mg_tls_client_recv_cert+0x394>)
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	2b03      	cmp	r3, #3
 8017b80:	f340 8114 	ble.w	8017dac <mg_tls_client_recv_cert+0x430>
 8017b84:	4b63      	ldr	r3, [pc, #396]	@ (8017d14 <mg_tls_client_recv_cert+0x398>)
 8017b86:	f642 724e 	movw	r2, #12110	@ 0x2f4e
 8017b8a:	4963      	ldr	r1, [pc, #396]	@ (8017d18 <mg_tls_client_recv_cert+0x39c>)
 8017b8c:	2004      	movs	r0, #4
 8017b8e:	f7f4 fc51 	bl	800c434 <mg_log_prefix>
 8017b92:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017b96:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017b9a:	689a      	ldr	r2, [r3, #8]
 8017b9c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017ba0:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017ba4:	685b      	ldr	r3, [r3, #4]
 8017ba6:	4963      	ldr	r1, [pc, #396]	@ (8017d34 <mg_tls_client_recv_cert+0x3b8>)
 8017ba8:	4863      	ldr	r0, [pc, #396]	@ (8017d38 <mg_tls_client_recv_cert+0x3bc>)
 8017baa:	f7f4 fc93 	bl	800c4d4 <mg_log>
  }

  while (p < endp) {
 8017bae:	e0fd      	b.n	8017dac <mg_tls_client_recv_cert+0x430>
    struct mg_tls_cert *ci = &certs[certnum++];
 8017bb0:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8017bb4:	1c53      	adds	r3, r2, #1
 8017bb6:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8017bba:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8017bbe:	4613      	mov	r3, r2
 8017bc0:	009b      	lsls	r3, r3, #2
 8017bc2:	4413      	add	r3, r2
 8017bc4:	011b      	lsls	r3, r3, #4
 8017bc6:	440b      	add	r3, r1
 8017bc8:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
    uint32_t certsz = MG_LOAD_BE24(p);
 8017bcc:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8017bd0:	781b      	ldrb	r3, [r3, #0]
 8017bd2:	041a      	lsls	r2, r3, #16
 8017bd4:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8017bd8:	3301      	adds	r3, #1
 8017bda:	781b      	ldrb	r3, [r3, #0]
 8017bdc:	021b      	lsls	r3, r3, #8
 8017bde:	4313      	orrs	r3, r2
 8017be0:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8017be4:	3202      	adds	r2, #2
 8017be6:	7812      	ldrb	r2, [r2, #0]
 8017be8:	4313      	orrs	r3, r2
 8017bea:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
    uint8_t *cert = p + 3;
 8017bee:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8017bf2:	3303      	adds	r3, #3
 8017bf4:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
    uint16_t certext = MG_LOAD_BE16(cert + certsz);
 8017bf8:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8017bfc:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8017c00:	4413      	add	r3, r2
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	b21b      	sxth	r3, r3
 8017c06:	021b      	lsls	r3, r3, #8
 8017c08:	b21a      	sxth	r2, r3
 8017c0a:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8017c0e:	3301      	adds	r3, #1
 8017c10:	f8d7 12e0 	ldr.w	r1, [r7, #736]	@ 0x2e0
 8017c14:	440b      	add	r3, r1
 8017c16:	781b      	ldrb	r3, [r3, #0]
 8017c18:	b21b      	sxth	r3, r3
 8017c1a:	4313      	orrs	r3, r2
 8017c1c:	b21b      	sxth	r3, r3
 8017c1e:	f8a7 32de 	strh.w	r3, [r7, #734]	@ 0x2de
    if (certext != 0) {
 8017c22:	f8b7 32de 	ldrh.w	r3, [r7, #734]	@ 0x2de
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d00a      	beq.n	8017c40 <mg_tls_client_recv_cert+0x2c4>
      mg_error(c, "certificate extensions are not supported");
 8017c2a:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017c2e:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017c32:	4942      	ldr	r1, [pc, #264]	@ (8017d3c <mg_tls_client_recv_cert+0x3c0>)
 8017c34:	6818      	ldr	r0, [r3, #0]
 8017c36:	f7ee feed 	bl	8006a14 <mg_error>
      return -1;
 8017c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8017c3e:	e10a      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
    }
    p = cert + certsz + 2;
 8017c40:	f8d7 32e4 	ldr.w	r3, [r7, #740]	@ 0x2e4
 8017c44:	3302      	adds	r3, #2
 8017c46:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 8017c4a:	4413      	add	r3, r2
 8017c4c:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308

    if (mg_tls_parse_cert_der(cert, certsz, ci) < 0) {
 8017c50:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 8017c54:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 8017c58:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 8017c5c:	f7ff f8ce 	bl	8016dfc <mg_tls_parse_cert_der>
 8017c60:	4603      	mov	r3, r0
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	da0a      	bge.n	8017c7c <mg_tls_client_recv_cert+0x300>
      mg_error(c, "failed to parse certificate");
 8017c66:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017c6a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017c6e:	4934      	ldr	r1, [pc, #208]	@ (8017d40 <mg_tls_client_recv_cert+0x3c4>)
 8017c70:	6818      	ldr	r0, [r3, #0]
 8017c72:	f7ee fecf 	bl	8006a14 <mg_error>
      return -1;
 8017c76:	f04f 33ff 	mov.w	r3, #4294967295
 8017c7a:	e0ec      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
    }

    if (ci == certs) {
 8017c7c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8017c80:	f8d7 22e8 	ldr.w	r2, [r7, #744]	@ 0x2e8
 8017c84:	429a      	cmp	r2, r3
 8017c86:	d12d      	bne.n	8017ce4 <mg_tls_client_recv_cert+0x368>
      // First certificate in the chain is peer cert, check SAN and store
      // public key for further CertVerify step
      if (mg_tls_verify_cert_san(cert, certsz, tls->hostname) <= 0) {
 8017c88:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017c8c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8017c90:	461a      	mov	r2, r3
 8017c92:	f8d7 12e4 	ldr.w	r1, [r7, #740]	@ 0x2e4
 8017c96:	f8d7 02e0 	ldr.w	r0, [r7, #736]	@ 0x2e0
 8017c9a:	f7ff fc63 	bl	8017564 <mg_tls_verify_cert_san>
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	dc0a      	bgt.n	8017cba <mg_tls_client_recv_cert+0x33e>
        mg_error(c, "failed to verify hostname");
 8017ca4:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017ca8:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017cac:	4925      	ldr	r1, [pc, #148]	@ (8017d44 <mg_tls_client_recv_cert+0x3c8>)
 8017cae:	6818      	ldr	r0, [r3, #0]
 8017cb0:	f7ee feb0 	bl	8006a14 <mg_error>
        return -1;
 8017cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8017cb8:	e0cd      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
      }
      memmove(tls->pubkey, ci->pubkey.buf, ci->pubkey.len);
 8017cba:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017cbe:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8017cc2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017cc6:	68d9      	ldr	r1, [r3, #12]
 8017cc8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017ccc:	691b      	ldr	r3, [r3, #16]
 8017cce:	461a      	mov	r2, r3
 8017cd0:	f00b fd4b 	bl	802376a <memmove>
      tls->pubkeysz = ci->pubkey.len;
 8017cd4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017cd8:	691a      	ldr	r2, [r3, #16]
 8017cda:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017cde:	f8c3 245c 	str.w	r2, [r3, #1116]	@ 0x45c
 8017ce2:	e033      	b.n	8017d4c <mg_tls_client_recv_cert+0x3d0>
    } else {
      if (!mg_tls_verify_cert_signature(ci - 1, ci)) {
 8017ce4:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017ce8:	3b50      	subs	r3, #80	@ 0x50
 8017cea:	f8d7 12e8 	ldr.w	r1, [r7, #744]	@ 0x2e8
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f7ff fcb8 	bl	8017664 <mg_tls_verify_cert_signature>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d128      	bne.n	8017d4c <mg_tls_client_recv_cert+0x3d0>
        mg_error(c, "failed to verify certificate chain");
 8017cfa:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017cfe:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017d02:	4911      	ldr	r1, [pc, #68]	@ (8017d48 <mg_tls_client_recv_cert+0x3cc>)
 8017d04:	6818      	ldr	r0, [r3, #0]
 8017d06:	f7ee fe85 	bl	8006a14 <mg_error>
        return -1;
 8017d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d0e:	e0a2      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
 8017d10:	24000258 	.word	0x24000258
 8017d14:	080282c8 	.word	0x080282c8
 8017d18:	08024478 	.word	0x08024478
 8017d1c:	080265a4 	.word	0x080265a4
 8017d20:	080265bc 	.word	0x080265bc
 8017d24:	080265ec 	.word	0x080265ec
 8017d28:	08026608 	.word	0x08026608
 8017d2c:	08026630 	.word	0x08026630
 8017d30:	08026654 	.word	0x08026654
 8017d34:	08010d45 	.word	0x08010d45
 8017d38:	08026674 	.word	0x08026674
 8017d3c:	08026684 	.word	0x08026684
 8017d40:	080266b0 	.word	0x080266b0
 8017d44:	080266cc 	.word	0x080266cc
 8017d48:	080266e8 	.word	0x080266e8
      }
    }

    if (ca.pubkey.len == ci->pubkey.len &&
 8017d4c:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017d50:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017d54:	691a      	ldr	r2, [r3, #16]
 8017d56:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017d5a:	691b      	ldr	r3, [r3, #16]
 8017d5c:	429a      	cmp	r2, r3
 8017d5e:	d116      	bne.n	8017d8e <mg_tls_client_recv_cert+0x412>
        memcmp(ca.pubkey.buf, ci->pubkey.buf, ca.pubkey.len) == 0) {
 8017d60:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017d64:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017d68:	68d8      	ldr	r0, [r3, #12]
 8017d6a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8017d6e:	68d9      	ldr	r1, [r3, #12]
 8017d70:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017d74:	f5a3 7341 	sub.w	r3, r3, #772	@ 0x304
 8017d78:	691b      	ldr	r3, [r3, #16]
 8017d7a:	461a      	mov	r2, r3
 8017d7c:	f00b fce5 	bl	802374a <memcmp>
 8017d80:	4603      	mov	r3, r0
    if (ca.pubkey.len == ci->pubkey.len &&
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d103      	bne.n	8017d8e <mg_tls_client_recv_cert+0x412>
      found_ca = 1;
 8017d86:	2301      	movs	r3, #1
 8017d88:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
      break;
 8017d8c:	e015      	b.n	8017dba <mg_tls_client_recv_cert+0x43e>
    }

    if (certnum == sizeof(certs) / sizeof(certs[0]) - 1) {
 8017d8e:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8017d92:	2b07      	cmp	r3, #7
 8017d94:	d10a      	bne.n	8017dac <mg_tls_client_recv_cert+0x430>
      mg_error(c, "too many certificates in the chain");
 8017d96:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017d9a:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017d9e:	4930      	ldr	r1, [pc, #192]	@ (8017e60 <mg_tls_client_recv_cert+0x4e4>)
 8017da0:	6818      	ldr	r0, [r3, #0]
 8017da2:	f7ee fe37 	bl	8006a14 <mg_error>
      return -1;
 8017da6:	f04f 33ff 	mov.w	r3, #4294967295
 8017daa:	e054      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
  while (p < endp) {
 8017dac:	f8d7 2308 	ldr.w	r2, [r7, #776]	@ 0x308
 8017db0:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8017db4:	429a      	cmp	r2, r3
 8017db6:	f4ff aefb 	bcc.w	8017bb0 <mg_tls_client_recv_cert+0x234>
    }
  }

  if (!found_ca && tls->ca_der.len > 0) {
 8017dba:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d135      	bne.n	8017e2e <mg_tls_client_recv_cert+0x4b2>
 8017dc2:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017dc6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d02f      	beq.n	8017e2e <mg_tls_client_recv_cert+0x4b2>
    if (certnum < 1 ||
 8017dce:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	dd12      	ble.n	8017dfc <mg_tls_client_recv_cert+0x480>
        !mg_tls_verify_cert_signature(&certs[certnum - 1], &ca)) {
 8017dd6:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8017dda:	1e5a      	subs	r2, r3, #1
 8017ddc:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8017de0:	4613      	mov	r3, r2
 8017de2:	009b      	lsls	r3, r3, #2
 8017de4:	4413      	add	r3, r2
 8017de6:	011b      	lsls	r3, r3, #4
 8017de8:	440b      	add	r3, r1
 8017dea:	f107 020c 	add.w	r2, r7, #12
 8017dee:	4611      	mov	r1, r2
 8017df0:	4618      	mov	r0, r3
 8017df2:	f7ff fc37 	bl	8017664 <mg_tls_verify_cert_signature>
 8017df6:	4603      	mov	r3, r0
    if (certnum < 1 ||
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d10a      	bne.n	8017e12 <mg_tls_client_recv_cert+0x496>
      mg_error(c, "failed to verify CA");
 8017dfc:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017e00:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017e04:	4917      	ldr	r1, [pc, #92]	@ (8017e64 <mg_tls_client_recv_cert+0x4e8>)
 8017e06:	6818      	ldr	r0, [r3, #0]
 8017e08:	f7ee fe04 	bl	8006a14 <mg_error>
      return -1;
 8017e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017e10:	e021      	b.n	8017e56 <mg_tls_client_recv_cert+0x4da>
    } else {
      MG_VERBOSE(
 8017e12:	4b15      	ldr	r3, [pc, #84]	@ (8017e68 <mg_tls_client_recv_cert+0x4ec>)
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	2b03      	cmp	r3, #3
 8017e18:	dd09      	ble.n	8017e2e <mg_tls_client_recv_cert+0x4b2>
 8017e1a:	4b14      	ldr	r3, [pc, #80]	@ (8017e6c <mg_tls_client_recv_cert+0x4f0>)
 8017e1c:	f642 7283 	movw	r2, #12163	@ 0x2f83
 8017e20:	4913      	ldr	r1, [pc, #76]	@ (8017e70 <mg_tls_client_recv_cert+0x4f4>)
 8017e22:	2004      	movs	r0, #4
 8017e24:	f7f4 fb06 	bl	800c434 <mg_log_prefix>
 8017e28:	4812      	ldr	r0, [pc, #72]	@ (8017e74 <mg_tls_client_recv_cert+0x4f8>)
 8017e2a:	f7f4 fb53 	bl	800c4d4 <mg_log>
          ("CA was not in the chain, but verification with builtin CA passed"));
    }
  }

  mg_tls_drop_message(c);
 8017e2e:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017e32:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017e36:	6818      	ldr	r0, [r3, #0]
 8017e38:	f7fd f8a0 	bl	8014f7c <mg_tls_drop_message>
  mg_tls_calc_cert_verify_hash(c, tls->sighash, 0);
 8017e3c:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8017e40:	f503 618c 	add.w	r1, r3, #1120	@ 0x460
 8017e44:	f507 7344 	add.w	r3, r7, #784	@ 0x310
 8017e48:	f5a3 7343 	sub.w	r3, r3, #780	@ 0x30c
 8017e4c:	2200      	movs	r2, #0
 8017e4e:	6818      	ldr	r0, [r3, #0]
 8017e50:	f7fd fdfc 	bl	8015a4c <mg_tls_calc_cert_verify_hash>
  return 0;
 8017e54:	2300      	movs	r3, #0
}
 8017e56:	4618      	mov	r0, r3
 8017e58:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}
 8017e60:	0802670c 	.word	0x0802670c
 8017e64:	08026730 	.word	0x08026730
 8017e68:	24000258 	.word	0x24000258
 8017e6c:	080282c8 	.word	0x080282c8
 8017e70:	08024478 	.word	0x08024478
 8017e74:	08026744 	.word	0x08026744

08017e78 <mg_tls_client_recv_cert_verify>:

static int mg_tls_client_recv_cert_verify(struct mg_connection *c) {
 8017e78:	b5b0      	push	{r4, r5, r7, lr}
 8017e7a:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8017e7e:	af04      	add	r7, sp, #16
 8017e80:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017e84:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017e88:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8017e8a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017e8e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8017e98:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 8017e9c:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017ea0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017ea4:	6818      	ldr	r0, [r3, #0]
 8017ea6:	f7fd fcb5 	bl	8015814 <mg_tls_recv_record>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	da02      	bge.n	8017eb6 <mg_tls_client_recv_cert_verify+0x3e>
    return -1;
 8017eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8017eb4:	e1f9      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8017eb6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017eba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017ec2:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017ec6:	695b      	ldr	r3, [r3, #20]
 8017ec8:	4413      	add	r3, r2
 8017eca:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
  if (recv_buf[0] != MG_TLS_CERTIFICATE_VERIFY) {
 8017ece:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017ed2:	781b      	ldrb	r3, [r3, #0]
 8017ed4:	2b0f      	cmp	r3, #15
 8017ed6:	d00e      	beq.n	8017ef6 <mg_tls_client_recv_cert_verify+0x7e>
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
             recv_buf[0]);
 8017ed8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017edc:	781b      	ldrb	r3, [r3, #0]
    mg_error(c, "expected server certificate verify but got msg 0x%02x",
 8017ede:	461a      	mov	r2, r3
 8017ee0:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017ee4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017ee8:	49cb      	ldr	r1, [pc, #812]	@ (8018218 <mg_tls_client_recv_cert_verify+0x3a0>)
 8017eea:	6818      	ldr	r0, [r3, #0]
 8017eec:	f7ee fd92 	bl	8006a14 <mg_error>
    return -1;
 8017ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8017ef4:	e1d9      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
  }
  if (tls->recv_len < 8) {
 8017ef6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017efa:	699b      	ldr	r3, [r3, #24]
 8017efc:	2b07      	cmp	r3, #7
 8017efe:	d80d      	bhi.n	8017f1c <mg_tls_client_recv_cert_verify+0xa4>
    mg_error(c, "server certificate verify is too short: %d bytes",
 8017f00:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017f04:	699a      	ldr	r2, [r3, #24]
 8017f06:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017f0a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017f0e:	49c3      	ldr	r1, [pc, #780]	@ (801821c <mg_tls_client_recv_cert_verify+0x3a4>)
 8017f10:	6818      	ldr	r0, [r3, #0]
 8017f12:	f7ee fd7f 	bl	8006a14 <mg_error>
             tls->recv_len);
    return -1;
 8017f16:	f04f 33ff 	mov.w	r3, #4294967295
 8017f1a:	e1c6      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
  }

  // Ignore CertificateVerify is strict checks are not required
  if (tls->skip_verification) {
 8017f1c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017f20:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d008      	beq.n	8017f3a <mg_tls_client_recv_cert_verify+0xc2>
    mg_tls_drop_message(c);
 8017f28:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8017f2c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8017f30:	6818      	ldr	r0, [r3, #0]
 8017f32:	f7fd f823 	bl	8014f7c <mg_tls_drop_message>
    return 0;
 8017f36:	2300      	movs	r3, #0
 8017f38:	e1b7      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
  }

  uint16_t sigalg = MG_LOAD_BE16(recv_buf + 4);
 8017f3a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017f3e:	3304      	adds	r3, #4
 8017f40:	781b      	ldrb	r3, [r3, #0]
 8017f42:	b21b      	sxth	r3, r3
 8017f44:	021b      	lsls	r3, r3, #8
 8017f46:	b21a      	sxth	r2, r3
 8017f48:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017f4c:	3305      	adds	r3, #5
 8017f4e:	781b      	ldrb	r3, [r3, #0]
 8017f50:	b21b      	sxth	r3, r3
 8017f52:	4313      	orrs	r3, r2
 8017f54:	b21b      	sxth	r3, r3
 8017f56:	f8a7 3256 	strh.w	r3, [r7, #598]	@ 0x256
  uint16_t siglen = MG_LOAD_BE16(recv_buf + 6);
 8017f5a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017f5e:	3306      	adds	r3, #6
 8017f60:	781b      	ldrb	r3, [r3, #0]
 8017f62:	b21b      	sxth	r3, r3
 8017f64:	021b      	lsls	r3, r3, #8
 8017f66:	b21a      	sxth	r2, r3
 8017f68:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017f6c:	3307      	adds	r3, #7
 8017f6e:	781b      	ldrb	r3, [r3, #0]
 8017f70:	b21b      	sxth	r3, r3
 8017f72:	4313      	orrs	r3, r2
 8017f74:	b21b      	sxth	r3, r3
 8017f76:	f8a7 3254 	strh.w	r3, [r7, #596]	@ 0x254
  uint8_t *sigbuf = recv_buf + 8;
 8017f7a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8017f7e:	3308      	adds	r3, #8
 8017f80:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
  if (siglen > tls->recv_len - 8) {
 8017f84:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8017f88:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017f8c:	699b      	ldr	r3, [r3, #24]
 8017f8e:	3b08      	subs	r3, #8
 8017f90:	429a      	cmp	r2, r3
 8017f92:	d910      	bls.n	8017fb6 <mg_tls_client_recv_cert_verify+0x13e>
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 8017f94:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
             tls->recv_len - 8);
 8017f98:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017f9c:	699b      	ldr	r3, [r3, #24]
    mg_error(c, "invalid certverify signature length: %d, expected %d", siglen,
 8017f9e:	3b08      	subs	r3, #8
 8017fa0:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8017fa4:	f5a1 7017 	sub.w	r0, r1, #604	@ 0x25c
 8017fa8:	499d      	ldr	r1, [pc, #628]	@ (8018220 <mg_tls_client_recv_cert_verify+0x3a8>)
 8017faa:	6800      	ldr	r0, [r0, #0]
 8017fac:	f7ee fd32 	bl	8006a14 <mg_error>
    return -1;
 8017fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8017fb4:	e179      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
  }
  MG_VERBOSE(
 8017fb6:	4b9b      	ldr	r3, [pc, #620]	@ (8018224 <mg_tls_client_recv_cert_verify+0x3ac>)
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	2b03      	cmp	r3, #3
 8017fbc:	dd0e      	ble.n	8017fdc <mg_tls_client_recv_cert_verify+0x164>
 8017fbe:	4b9a      	ldr	r3, [pc, #616]	@ (8018228 <mg_tls_client_recv_cert_verify+0x3b0>)
 8017fc0:	f642 72ad 	movw	r2, #12205	@ 0x2fad
 8017fc4:	4999      	ldr	r1, [pc, #612]	@ (801822c <mg_tls_client_recv_cert_verify+0x3b4>)
 8017fc6:	2004      	movs	r0, #4
 8017fc8:	f7f4 fa34 	bl	800c434 <mg_log_prefix>
 8017fcc:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8017fd0:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 8017fd4:	4619      	mov	r1, r3
 8017fd6:	4896      	ldr	r0, [pc, #600]	@ (8018230 <mg_tls_client_recv_cert_verify+0x3b8>)
 8017fd8:	f7f4 fa7c 	bl	800c4d4 <mg_log>
      ("certificate verification, algo=%04x, siglen=%d", sigalg, siglen));

  if (sigalg == 0x0804) {  // rsa_pss_rsae_sha256
 8017fdc:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8017fe0:	f640 0204 	movw	r2, #2052	@ 0x804
 8017fe4:	4293      	cmp	r3, r2
 8017fe6:	d173      	bne.n	80180d0 <mg_tls_client_recv_cert_verify+0x258>
    uint8_t sig2[512];     // 2048 or 4096 bits
    struct mg_der_tlv seq, modulus, exponent;

    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 8017fe8:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017fec:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8017ff0:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8017ff4:	f8d3 345c 	ldr.w	r3, [r3, #1116]	@ 0x45c
 8017ff8:	f507 7211 	add.w	r2, r7, #580	@ 0x244
 8017ffc:	4619      	mov	r1, r3
 8017ffe:	f7fc fe43 	bl	8014c88 <mg_der_parse>
 8018002:	4603      	mov	r3, r0
 8018004:	2b00      	cmp	r3, #0
 8018006:	dd1d      	ble.n	8018044 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8018008:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 801800c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8018010:	4611      	mov	r1, r2
 8018012:	4618      	mov	r0, r3
 8018014:	f7fc fe98 	bl	8014d48 <mg_der_next>
 8018018:	4603      	mov	r3, r0
    if (mg_der_parse(tls->pubkey, tls->pubkeysz, &seq) <= 0 ||
 801801a:	2b00      	cmp	r3, #0
 801801c:	dd12      	ble.n	8018044 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 801801e:	f897 3238 	ldrb.w	r3, [r7, #568]	@ 0x238
 8018022:	2b02      	cmp	r3, #2
 8018024:	d10e      	bne.n	8018044 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 8018026:	f507 720b 	add.w	r2, r7, #556	@ 0x22c
 801802a:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 801802e:	4611      	mov	r1, r2
 8018030:	4618      	mov	r0, r3
 8018032:	f7fc fe89 	bl	8014d48 <mg_der_next>
 8018036:	4603      	mov	r3, r0
        mg_der_next(&seq, &modulus) <= 0 || modulus.type != 2 ||
 8018038:	2b00      	cmp	r3, #0
 801803a:	dd03      	ble.n	8018044 <mg_tls_client_recv_cert_verify+0x1cc>
        mg_der_next(&seq, &exponent) <= 0 || exponent.type != 2) {
 801803c:	f897 322c 	ldrb.w	r3, [r7, #556]	@ 0x22c
 8018040:	2b02      	cmp	r3, #2
 8018042:	d00a      	beq.n	801805a <mg_tls_client_recv_cert_verify+0x1e2>
      mg_error(c, "invalid public key");
 8018044:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8018048:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801804c:	4979      	ldr	r1, [pc, #484]	@ (8018234 <mg_tls_client_recv_cert_verify+0x3bc>)
 801804e:	6818      	ldr	r0, [r3, #0]
 8018050:	f7ee fce0 	bl	8006a14 <mg_error>
      return -1;
 8018054:	f04f 33ff 	mov.w	r3, #4294967295
 8018058:	e127      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
    }

    mg_rsa_mod_pow(modulus.value, modulus.len, exponent.value, exponent.len,
 801805a:	f8d7 0240 	ldr.w	r0, [r7, #576]	@ 0x240
 801805e:	f8d7 123c 	ldr.w	r1, [r7, #572]	@ 0x23c
 8018062:	f8d7 4234 	ldr.w	r4, [r7, #564]	@ 0x234
 8018066:	f8d7 5230 	ldr.w	r5, [r7, #560]	@ 0x230
 801806a:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 801806e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018072:	9203      	str	r2, [sp, #12]
 8018074:	f107 0208 	add.w	r2, r7, #8
 8018078:	9202      	str	r2, [sp, #8]
 801807a:	9301      	str	r3, [sp, #4]
 801807c:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8018080:	9300      	str	r3, [sp, #0]
 8018082:	462b      	mov	r3, r5
 8018084:	4622      	mov	r2, r4
 8018086:	f003 ff2c 	bl	801bee2 <mg_rsa_mod_pow>
                   sigbuf, siglen, sig2, sizeof(sig2));

    if (sig2[sizeof(sig2) - 1] != 0xbc) {
 801808a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801808e:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8018092:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 8018096:	2bbc      	cmp	r3, #188	@ 0xbc
 8018098:	d00a      	beq.n	80180b0 <mg_tls_client_recv_cert_verify+0x238>
      mg_error(c, "failed to verify RSA certificate (certverify)");
 801809a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801809e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80180a2:	4965      	ldr	r1, [pc, #404]	@ (8018238 <mg_tls_client_recv_cert_verify+0x3c0>)
 80180a4:	6818      	ldr	r0, [r3, #0]
 80180a6:	f7ee fcb5 	bl	8006a14 <mg_error>
      return -1;
 80180aa:	f04f 33ff 	mov.w	r3, #4294967295
 80180ae:	e0fc      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
    }
    MG_DEBUG(("certificate verification successful (RSA)"));
 80180b0:	4b5c      	ldr	r3, [pc, #368]	@ (8018224 <mg_tls_client_recv_cert_verify+0x3ac>)
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	2b02      	cmp	r3, #2
 80180b6:	f340 80f0 	ble.w	801829a <mg_tls_client_recv_cert_verify+0x422>
 80180ba:	4b5b      	ldr	r3, [pc, #364]	@ (8018228 <mg_tls_client_recv_cert_verify+0x3b0>)
 80180bc:	f642 72c2 	movw	r2, #12226	@ 0x2fc2
 80180c0:	495a      	ldr	r1, [pc, #360]	@ (801822c <mg_tls_client_recv_cert_verify+0x3b4>)
 80180c2:	2003      	movs	r0, #3
 80180c4:	f7f4 f9b6 	bl	800c434 <mg_log_prefix>
 80180c8:	485c      	ldr	r0, [pc, #368]	@ (801823c <mg_tls_client_recv_cert_verify+0x3c4>)
 80180ca:	f7f4 fa03 	bl	800c4d4 <mg_log>
 80180ce:	e0e4      	b.n	801829a <mg_tls_client_recv_cert_verify+0x422>
  } else if (sigalg == 0x0403) {  // ecdsa_secp256r1_sha256
 80180d0:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 80180d4:	f240 4203 	movw	r2, #1027	@ 0x403
 80180d8:	4293      	cmp	r3, r2
 80180da:	f040 80c8 	bne.w	801826e <mg_tls_client_recv_cert_verify+0x3f6>
    // Extract certificate signature and verify it using pubkey and sighash
    uint8_t sig[64];
    struct mg_der_tlv seq, r, s;
    if (mg_der_to_tlv(sigbuf, siglen, &seq) < 0) {
 80180de:	f8b7 3254 	ldrh.w	r3, [r7, #596]	@ 0x254
 80180e2:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 80180e6:	4619      	mov	r1, r3
 80180e8:	f8d7 0250 	ldr.w	r0, [r7, #592]	@ 0x250
 80180ec:	f7fc fea7 	bl	8014e3e <mg_der_to_tlv>
 80180f0:	4603      	mov	r3, r0
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	da0a      	bge.n	801810c <mg_tls_client_recv_cert_verify+0x294>
      mg_error(c, "verification message is not an ASN.1 DER sequence");
 80180f6:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80180fa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80180fe:	4950      	ldr	r1, [pc, #320]	@ (8018240 <mg_tls_client_recv_cert_verify+0x3c8>)
 8018100:	6818      	ldr	r0, [r3, #0]
 8018102:	f7ee fc87 	bl	8006a14 <mg_error>
      return -1;
 8018106:	f04f 33ff 	mov.w	r3, #4294967295
 801810a:	e0ce      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(seq.value, seq.len, &r) < 0) {
 801810c:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8018110:	f8d7 1224 	ldr.w	r1, [r7, #548]	@ 0x224
 8018114:	f507 7205 	add.w	r2, r7, #532	@ 0x214
 8018118:	4618      	mov	r0, r3
 801811a:	f7fc fe90 	bl	8014e3e <mg_der_to_tlv>
 801811e:	4603      	mov	r3, r0
 8018120:	2b00      	cmp	r3, #0
 8018122:	da0a      	bge.n	801813a <mg_tls_client_recv_cert_verify+0x2c2>
      mg_error(c, "missing first part of the signature");
 8018124:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8018128:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801812c:	4945      	ldr	r1, [pc, #276]	@ (8018244 <mg_tls_client_recv_cert_verify+0x3cc>)
 801812e:	6818      	ldr	r0, [r3, #0]
 8018130:	f7ee fc70 	bl	8006a14 <mg_error>
      return -1;
 8018134:	f04f 33ff 	mov.w	r3, #4294967295
 8018138:	e0b7      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
    }
    if (mg_der_to_tlv(r.value + r.len, seq.len - r.len, &s) < 0) {
 801813a:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 801813e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8018142:	18d0      	adds	r0, r2, r3
 8018144:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 8018148:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 801814c:	1ad3      	subs	r3, r2, r3
 801814e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8018152:	4619      	mov	r1, r3
 8018154:	f7fc fe73 	bl	8014e3e <mg_der_to_tlv>
 8018158:	4603      	mov	r3, r0
 801815a:	2b00      	cmp	r3, #0
 801815c:	da0a      	bge.n	8018174 <mg_tls_client_recv_cert_verify+0x2fc>
      mg_error(c, "missing second part of the signature");
 801815e:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8018162:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8018166:	4938      	ldr	r1, [pc, #224]	@ (8018248 <mg_tls_client_recv_cert_verify+0x3d0>)
 8018168:	6818      	ldr	r0, [r3, #0]
 801816a:	f7ee fc53 	bl	8006a14 <mg_error>
      return -1;
 801816e:	f04f 33ff 	mov.w	r3, #4294967295
 8018172:	e09a      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
    }
    // Integers may be padded with zeroes
    if (r.len > 32) r.value = r.value + (r.len - 32), r.len = 32;
 8018174:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8018178:	2b20      	cmp	r3, #32
 801817a:	d90a      	bls.n	8018192 <mg_tls_client_recv_cert_verify+0x31a>
 801817c:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8018180:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8018184:	3b20      	subs	r3, #32
 8018186:	4413      	add	r3, r2
 8018188:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 801818c:	2320      	movs	r3, #32
 801818e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
    if (s.len > 32) s.value = s.value + (s.len - 32), s.len = 32;
 8018192:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8018196:	2b20      	cmp	r3, #32
 8018198:	d90a      	bls.n	80181b0 <mg_tls_client_recv_cert_verify+0x338>
 801819a:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 801819e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 80181a2:	3b20      	subs	r3, #32
 80181a4:	4413      	add	r3, r2
 80181a6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80181aa:	2320      	movs	r3, #32
 80181ac:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

    memmove(sig, r.value, r.len);
 80181b0:	f8d7 121c 	ldr.w	r1, [r7, #540]	@ 0x21c
 80181b4:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 80181b8:	f107 0308 	add.w	r3, r7, #8
 80181bc:	4618      	mov	r0, r3
 80181be:	f00b fad4 	bl	802376a <memmove>
    memmove(sig + 32, s.value, s.len);
 80181c2:	f107 0308 	add.w	r3, r7, #8
 80181c6:	3320      	adds	r3, #32
 80181c8:	f8d7 1210 	ldr.w	r1, [r7, #528]	@ 0x210
 80181cc:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 80181d0:	4618      	mov	r0, r3
 80181d2:	f00b faca 	bl	802376a <memmove>

    if (mg_uecc_verify(tls->pubkey, tls->sighash, sizeof(tls->sighash), sig,
 80181d6:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80181da:	f503 7413 	add.w	r4, r3, #588	@ 0x24c
 80181de:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80181e2:	f503 658c 	add.w	r5, r3, #1120	@ 0x460
 80181e6:	f004 feab 	bl	801cf40 <mg_uecc_secp256r1>
 80181ea:	4602      	mov	r2, r0
 80181ec:	f107 0308 	add.w	r3, r7, #8
 80181f0:	9200      	str	r2, [sp, #0]
 80181f2:	2220      	movs	r2, #32
 80181f4:	4629      	mov	r1, r5
 80181f6:	4620      	mov	r0, r4
 80181f8:	f006 f83e 	bl	801e278 <mg_uecc_verify>
 80181fc:	4603      	mov	r3, r0
 80181fe:	2b01      	cmp	r3, #1
 8018200:	d026      	beq.n	8018250 <mg_tls_client_recv_cert_verify+0x3d8>
                       mg_uecc_secp256r1()) != 1) {
      mg_error(c, "failed to verify EC certificate (certverify)");
 8018202:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8018206:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801820a:	4910      	ldr	r1, [pc, #64]	@ (801824c <mg_tls_client_recv_cert_verify+0x3d4>)
 801820c:	6818      	ldr	r0, [r3, #0]
 801820e:	f7ee fc01 	bl	8006a14 <mg_error>
      return -1;
 8018212:	f04f 33ff 	mov.w	r3, #4294967295
 8018216:	e048      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
 8018218:	08026788 	.word	0x08026788
 801821c:	080267c0 	.word	0x080267c0
 8018220:	080267f4 	.word	0x080267f4
 8018224:	24000258 	.word	0x24000258
 8018228:	080282e0 	.word	0x080282e0
 801822c:	08024478 	.word	0x08024478
 8018230:	0802682c 	.word	0x0802682c
 8018234:	0802685c 	.word	0x0802685c
 8018238:	08026870 	.word	0x08026870
 801823c:	080268a0 	.word	0x080268a0
 8018240:	080268cc 	.word	0x080268cc
 8018244:	08026900 	.word	0x08026900
 8018248:	08026924 	.word	0x08026924
 801824c:	0802694c 	.word	0x0802694c
    }
    MG_DEBUG(("certificate verification successful (EC)"));
 8018250:	4b18      	ldr	r3, [pc, #96]	@ (80182b4 <mg_tls_client_recv_cert_verify+0x43c>)
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	2b02      	cmp	r3, #2
 8018256:	dd20      	ble.n	801829a <mg_tls_client_recv_cert_verify+0x422>
 8018258:	4b17      	ldr	r3, [pc, #92]	@ (80182b8 <mg_tls_client_recv_cert_verify+0x440>)
 801825a:	f642 72df 	movw	r2, #12255	@ 0x2fdf
 801825e:	4917      	ldr	r1, [pc, #92]	@ (80182bc <mg_tls_client_recv_cert_verify+0x444>)
 8018260:	2003      	movs	r0, #3
 8018262:	f7f4 f8e7 	bl	800c434 <mg_log_prefix>
 8018266:	4816      	ldr	r0, [pc, #88]	@ (80182c0 <mg_tls_client_recv_cert_verify+0x448>)
 8018268:	f7f4 f934 	bl	800c4d4 <mg_log>
 801826c:	e015      	b.n	801829a <mg_tls_client_recv_cert_verify+0x422>
    //   0807 = ed25519
    //   0808 = ed448
    //   0809 = rsa_pss_pss_sha256
    //   080A = rsa_pss_pss_sha384
    //   080B = rsa_pss_pss_sha512
    MG_ERROR(("unsupported certverify signature scheme: %x of %d bytes", sigalg,
 801826e:	4b11      	ldr	r3, [pc, #68]	@ (80182b4 <mg_tls_client_recv_cert_verify+0x43c>)
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	2b00      	cmp	r3, #0
 8018274:	dd0e      	ble.n	8018294 <mg_tls_client_recv_cert_verify+0x41c>
 8018276:	4b10      	ldr	r3, [pc, #64]	@ (80182b8 <mg_tls_client_recv_cert_verify+0x440>)
 8018278:	f642 72ea 	movw	r2, #12266	@ 0x2fea
 801827c:	490f      	ldr	r1, [pc, #60]	@ (80182bc <mg_tls_client_recv_cert_verify+0x444>)
 801827e:	2001      	movs	r0, #1
 8018280:	f7f4 f8d8 	bl	800c434 <mg_log_prefix>
 8018284:	f8b7 3256 	ldrh.w	r3, [r7, #598]	@ 0x256
 8018288:	f8b7 2254 	ldrh.w	r2, [r7, #596]	@ 0x254
 801828c:	4619      	mov	r1, r3
 801828e:	480d      	ldr	r0, [pc, #52]	@ (80182c4 <mg_tls_client_recv_cert_verify+0x44c>)
 8018290:	f7f4 f920 	bl	800c4d4 <mg_log>
              siglen));
    return -1;
 8018294:	f04f 33ff 	mov.w	r3, #4294967295
 8018298:	e007      	b.n	80182aa <mg_tls_client_recv_cert_verify+0x432>
  }
  mg_tls_drop_message(c);
 801829a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 801829e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80182a2:	6818      	ldr	r0, [r3, #0]
 80182a4:	f7fc fe6a 	bl	8014f7c <mg_tls_drop_message>
  return 0;
 80182a8:	2300      	movs	r3, #0
}
 80182aa:	4618      	mov	r0, r3
 80182ac:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bdb0      	pop	{r4, r5, r7, pc}
 80182b4:	24000258 	.word	0x24000258
 80182b8:	080282e0 	.word	0x080282e0
 80182bc:	08024478 	.word	0x08024478
 80182c0:	0802697c 	.word	0x0802697c
 80182c4:	080269a8 	.word	0x080269a8

080182c8 <mg_tls_client_recv_finish>:

static int mg_tls_client_recv_finish(struct mg_connection *c) {
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b084      	sub	sp, #16
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80182d6:	60fb      	str	r3, [r7, #12]
  unsigned char *recv_buf;
  if (mg_tls_recv_record(c) < 0) {
 80182d8:	6878      	ldr	r0, [r7, #4]
 80182da:	f7fd fa9b 	bl	8015814 <mg_tls_recv_record>
 80182de:	4603      	mov	r3, r0
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	da02      	bge.n	80182ea <mg_tls_client_recv_finish+0x22>
    return -1;
 80182e4:	f04f 33ff 	mov.w	r3, #4294967295
 80182e8:	e017      	b.n	801831a <mg_tls_client_recv_finish+0x52>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	695b      	ldr	r3, [r3, #20]
 80182f2:	4413      	add	r3, r2
 80182f4:	60bb      	str	r3, [r7, #8]
  if (recv_buf[0] != MG_TLS_FINISHED) {
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	781b      	ldrb	r3, [r3, #0]
 80182fa:	2b14      	cmp	r3, #20
 80182fc:	d009      	beq.n	8018312 <mg_tls_client_recv_finish+0x4a>
    mg_error(c, "expected server finished but got msg 0x%02x", recv_buf[0]);
 80182fe:	68bb      	ldr	r3, [r7, #8]
 8018300:	781b      	ldrb	r3, [r3, #0]
 8018302:	461a      	mov	r2, r3
 8018304:	4907      	ldr	r1, [pc, #28]	@ (8018324 <mg_tls_client_recv_finish+0x5c>)
 8018306:	6878      	ldr	r0, [r7, #4]
 8018308:	f7ee fb84 	bl	8006a14 <mg_error>
    return -1;
 801830c:	f04f 33ff 	mov.w	r3, #4294967295
 8018310:	e003      	b.n	801831a <mg_tls_client_recv_finish+0x52>
  }
  mg_tls_drop_message(c);
 8018312:	6878      	ldr	r0, [r7, #4]
 8018314:	f7fc fe32 	bl	8014f7c <mg_tls_drop_message>
  return 0;
 8018318:	2300      	movs	r3, #0
}
 801831a:	4618      	mov	r0, r3
 801831c:	3710      	adds	r7, #16
 801831e:	46bd      	mov	sp, r7
 8018320:	bd80      	pop	{r7, pc}
 8018322:	bf00      	nop
 8018324:	080269e0 	.word	0x080269e0

08018328 <mg_tls_client_send_finish>:

static void mg_tls_client_send_finish(struct mg_connection *c) {
 8018328:	b580      	push	{r7, lr}
 801832a:	b0b4      	sub	sp, #208	@ 0xd0
 801832c:	af02      	add	r7, sp, #8
 801832e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018336:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  mg_sha256_ctx sha256;
  uint8_t hash[32];
  uint8_t finish[36] = {0x14, 0, 0, 32};
 801833a:	4b1a      	ldr	r3, [pc, #104]	@ (80183a4 <mg_tls_client_send_finish+0x7c>)
 801833c:	60fb      	str	r3, [r7, #12]
 801833e:	f107 0310 	add.w	r3, r7, #16
 8018342:	2220      	movs	r2, #32
 8018344:	2100      	movs	r1, #0
 8018346:	4618      	mov	r0, r3
 8018348:	f00b fa29 	bl	802379e <memset>
  memmove(&sha256, &tls->sha256, sizeof(mg_sha256_ctx));
 801834c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8018350:	f103 0120 	add.w	r1, r3, #32
 8018354:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8018358:	2270      	movs	r2, #112	@ 0x70
 801835a:	4618      	mov	r0, r3
 801835c:	f00b fa05 	bl	802376a <memmove>
  mg_sha256_final(hash, &sha256);
 8018360:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8018364:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018368:	4611      	mov	r1, r2
 801836a:	4618      	mov	r0, r3
 801836c:	f7fa fc5d 	bl	8012c2a <mg_sha256_final>
  mg_hmac_sha256(finish + 4, tls->enc.client_finished_key, 32, hash, 32);
 8018370:	f107 000c 	add.w	r0, r7, #12
 8018374:	3004      	adds	r0, #4
 8018376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801837a:	f503 61a4 	add.w	r1, r3, #1312	@ 0x520
 801837e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018382:	2220      	movs	r2, #32
 8018384:	9200      	str	r2, [sp, #0]
 8018386:	2220      	movs	r2, #32
 8018388:	f7fa fda3 	bl	8012ed2 <mg_hmac_sha256>
  mg_tls_encrypt(c, finish, sizeof(finish), MG_TLS_HANDSHAKE);
 801838c:	f107 010c 	add.w	r1, r7, #12
 8018390:	2316      	movs	r3, #22
 8018392:	2224      	movs	r2, #36	@ 0x24
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	f7fd f941 	bl	801561c <mg_tls_encrypt>
}
 801839a:	bf00      	nop
 801839c:	37c8      	adds	r7, #200	@ 0xc8
 801839e:	46bd      	mov	sp, r7
 80183a0:	bd80      	pop	{r7, pc}
 80183a2:	bf00      	nop
 80183a4:	20000014 	.word	0x20000014

080183a8 <mg_tls_client_handshake>:

static void mg_tls_client_handshake(struct mg_connection *c) {
 80183a8:	b580      	push	{r7, lr}
 80183aa:	b0e4      	sub	sp, #400	@ 0x190
 80183ac:	af00      	add	r7, sp, #0
 80183ae:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80183b2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80183b6:	6018      	str	r0, [r3, #0]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80183b8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80183bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80183c6:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  switch (tls->state) {
 80183ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80183ce:	781b      	ldrb	r3, [r3, #0]
 80183d0:	2b05      	cmp	r3, #5
 80183d2:	f200 80da 	bhi.w	801858a <mg_tls_client_handshake+0x1e2>
 80183d6:	a201      	add	r2, pc, #4	@ (adr r2, 80183dc <mg_tls_client_handshake+0x34>)
 80183d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183dc:	080183f5 	.word	0x080183f5
 80183e0:	0801840b 	.word	0x0801840b
 80183e4:	08018429 	.word	0x08018429
 80183e8:	08018447 	.word	0x08018447
 80183ec:	08018465 	.word	0x08018465
 80183f0:	08018483 	.word	0x08018483
    case MG_TLS_STATE_CLIENT_START:
      mg_tls_client_send_hello(c);
 80183f4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80183f8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80183fc:	6818      	ldr	r0, [r3, #0]
 80183fe:	f7fe f90b 	bl	8016618 <mg_tls_client_send_hello>
      tls->state = MG_TLS_STATE_CLIENT_WAIT_SH;
 8018402:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018406:	2201      	movs	r2, #1
 8018408:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_SH:
      if (mg_tls_client_recv_hello(c) < 0) {
 801840a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801840e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018412:	6818      	ldr	r0, [r3, #0]
 8018414:	f7fe fae2 	bl	80169dc <mg_tls_client_recv_hello>
 8018418:	4603      	mov	r3, r0
 801841a:	2b00      	cmp	r3, #0
 801841c:	f2c0 80c2 	blt.w	80185a4 <mg_tls_client_handshake+0x1fc>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_EE;
 8018420:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018424:	2202      	movs	r2, #2
 8018426:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_EE:
      if (mg_tls_client_recv_ext(c) < 0) {
 8018428:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801842c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018430:	6818      	ldr	r0, [r3, #0]
 8018432:	f7fe fc0d 	bl	8016c50 <mg_tls_client_recv_ext>
 8018436:	4603      	mov	r3, r0
 8018438:	2b00      	cmp	r3, #0
 801843a:	f2c0 80b5 	blt.w	80185a8 <mg_tls_client_handshake+0x200>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CERT;
 801843e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018442:	2203      	movs	r2, #3
 8018444:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CERT:
      if (mg_tls_client_recv_cert(c) < 0) {
 8018446:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801844a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801844e:	6818      	ldr	r0, [r3, #0]
 8018450:	f7ff fa94 	bl	801797c <mg_tls_client_recv_cert>
 8018454:	4603      	mov	r3, r0
 8018456:	2b00      	cmp	r3, #0
 8018458:	f2c0 80a8 	blt.w	80185ac <mg_tls_client_handshake+0x204>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_CV;
 801845c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018460:	2204      	movs	r2, #4
 8018462:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_CV:
      if (mg_tls_client_recv_cert_verify(c) < 0) {
 8018464:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018468:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801846c:	6818      	ldr	r0, [r3, #0]
 801846e:	f7ff fd03 	bl	8017e78 <mg_tls_client_recv_cert_verify>
 8018472:	4603      	mov	r3, r0
 8018474:	2b00      	cmp	r3, #0
 8018476:	f2c0 809b 	blt.w	80185b0 <mg_tls_client_handshake+0x208>
        break;
      }
      tls->state = MG_TLS_STATE_CLIENT_WAIT_FINISH;
 801847a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801847e:	2205      	movs	r2, #5
 8018480:	701a      	strb	r2, [r3, #0]
      // Fallthrough
    case MG_TLS_STATE_CLIENT_WAIT_FINISH:
      if (mg_tls_client_recv_finish(c) < 0) {
 8018482:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018486:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801848a:	6818      	ldr	r0, [r3, #0]
 801848c:	f7ff ff1c 	bl	80182c8 <mg_tls_client_recv_finish>
 8018490:	4603      	mov	r3, r0
 8018492:	2b00      	cmp	r3, #0
 8018494:	f2c0 808e 	blt.w	80185b4 <mg_tls_client_handshake+0x20c>
        break;
      }
      if (tls->cert_requested) {
 8018498:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801849c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d04b      	beq.n	801853c <mg_tls_client_handshake+0x194>
        /* for mTLS we should generate application keys at this point
         * but then restore handshake keys and continue with
         * the rest of the handshake */
        struct tls_enc app_keys;
        struct tls_enc hs_keys = tls->enc;
 80184a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80184a8:	f107 00cc 	add.w	r0, r7, #204	@ 0xcc
 80184ac:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80184b0:	22c0      	movs	r2, #192	@ 0xc0
 80184b2:	4619      	mov	r1, r3
 80184b4:	f00b faa9 	bl	8023a0a <memcpy>
        mg_tls_generate_application_keys(c);
 80184b8:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80184bc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80184c0:	6818      	ldr	r0, [r3, #0]
 80184c2:	f7fc ff93 	bl	80153ec <mg_tls_generate_application_keys>
        app_keys = tls->enc;
 80184c6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80184ca:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 80184ce:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80184d2:	4610      	mov	r0, r2
 80184d4:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80184d8:	22c0      	movs	r2, #192	@ 0xc0
 80184da:	4619      	mov	r1, r3
 80184dc:	f00b fa95 	bl	8023a0a <memcpy>
        tls->enc = hs_keys;
 80184e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80184e4:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80184e8:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80184ec:	22c0      	movs	r2, #192	@ 0xc0
 80184ee:	4618      	mov	r0, r3
 80184f0:	f00b fa8b 	bl	8023a0a <memcpy>
        mg_tls_server_send_cert(c);
 80184f4:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 80184f8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80184fc:	6818      	ldr	r0, [r3, #0]
 80184fe:	f7fd fda9 	bl	8016054 <mg_tls_server_send_cert>
        mg_tls_send_cert_verify(c, 1);
 8018502:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018506:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801850a:	2101      	movs	r1, #1
 801850c:	6818      	ldr	r0, [r3, #0]
 801850e:	f7fd fec7 	bl	80162a0 <mg_tls_send_cert_verify>
        mg_tls_client_send_finish(c);
 8018512:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018516:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801851a:	6818      	ldr	r0, [r3, #0]
 801851c:	f7ff ff04 	bl	8018328 <mg_tls_client_send_finish>
        tls->enc = app_keys;
 8018520:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8018524:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8018528:	f5a2 72c2 	sub.w	r2, r2, #388	@ 0x184
 801852c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8018530:	4611      	mov	r1, r2
 8018532:	22c0      	movs	r2, #192	@ 0xc0
 8018534:	4618      	mov	r0, r3
 8018536:	f00b fa68 	bl	8023a0a <memcpy>
 801853a:	e00d      	b.n	8018558 <mg_tls_client_handshake+0x1b0>
      } else {
        mg_tls_client_send_finish(c);
 801853c:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018540:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018544:	6818      	ldr	r0, [r3, #0]
 8018546:	f7ff feef 	bl	8018328 <mg_tls_client_send_finish>
        mg_tls_generate_application_keys(c);
 801854a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801854e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018552:	6818      	ldr	r0, [r3, #0]
 8018554:	f7fc ff4a 	bl	80153ec <mg_tls_generate_application_keys>
      }
      tls->state = MG_TLS_STATE_CLIENT_CONNECTED;
 8018558:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801855c:	2206      	movs	r2, #6
 801855e:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8018560:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018564:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8018568:	681a      	ldr	r2, [r3, #0]
 801856a:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 801856e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8018572:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      mg_call(c, MG_EV_TLS_HS, NULL);
 8018576:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 801857a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801857e:	2200      	movs	r2, #0
 8018580:	2106      	movs	r1, #6
 8018582:	6818      	ldr	r0, [r3, #0]
 8018584:	f7ee fa25 	bl	80069d2 <mg_call>
      break;
 8018588:	e015      	b.n	80185b6 <mg_tls_client_handshake+0x20e>
    default:
      mg_error(c, "unexpected client state: %d", tls->state);
 801858a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 801858e:	781b      	ldrb	r3, [r3, #0]
 8018590:	461a      	mov	r2, r3
 8018592:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8018596:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 801859a:	4909      	ldr	r1, [pc, #36]	@ (80185c0 <mg_tls_client_handshake+0x218>)
 801859c:	6818      	ldr	r0, [r3, #0]
 801859e:	f7ee fa39 	bl	8006a14 <mg_error>
      break;
 80185a2:	e008      	b.n	80185b6 <mg_tls_client_handshake+0x20e>
        break;
 80185a4:	bf00      	nop
 80185a6:	e006      	b.n	80185b6 <mg_tls_client_handshake+0x20e>
        break;
 80185a8:	bf00      	nop
 80185aa:	e004      	b.n	80185b6 <mg_tls_client_handshake+0x20e>
        break;
 80185ac:	bf00      	nop
 80185ae:	e002      	b.n	80185b6 <mg_tls_client_handshake+0x20e>
        break;
 80185b0:	bf00      	nop
 80185b2:	e000      	b.n	80185b6 <mg_tls_client_handshake+0x20e>
        break;
 80185b4:	bf00      	nop
  }
}
 80185b6:	bf00      	nop
 80185b8:	f507 77c8 	add.w	r7, r7, #400	@ 0x190
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd80      	pop	{r7, pc}
 80185c0:	08026a0c 	.word	0x08026a0c

080185c4 <mg_tls_server_handshake>:

static void mg_tls_server_handshake(struct mg_connection *c) {
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b084      	sub	sp, #16
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80185d2:	60fb      	str	r3, [r7, #12]
  switch (tls->state) {
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	781b      	ldrb	r3, [r3, #0]
 80185d8:	2b07      	cmp	r3, #7
 80185da:	d002      	beq.n	80185e2 <mg_tls_server_handshake+0x1e>
 80185dc:	2b08      	cmp	r3, #8
 80185de:	d01c      	beq.n	801861a <mg_tls_server_handshake+0x56>
 80185e0:	e02f      	b.n	8018642 <mg_tls_server_handshake+0x7e>
    case MG_TLS_STATE_SERVER_START:
      if (mg_tls_server_recv_hello(c) < 0) {
 80185e2:	6878      	ldr	r0, [r7, #4]
 80185e4:	f7fd fad4 	bl	8015b90 <mg_tls_server_recv_hello>
 80185e8:	4603      	mov	r3, r0
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	db31      	blt.n	8018652 <mg_tls_server_handshake+0x8e>
        return;
      }
      mg_tls_server_send_hello(c);
 80185ee:	6878      	ldr	r0, [r7, #4]
 80185f0:	f7fd fc5a 	bl	8015ea8 <mg_tls_server_send_hello>
      mg_tls_generate_handshake_keys(c);
 80185f4:	6878      	ldr	r0, [r7, #4]
 80185f6:	f7fc fda9 	bl	801514c <mg_tls_generate_handshake_keys>
      mg_tls_server_send_ext(c);
 80185fa:	6878      	ldr	r0, [r7, #4]
 80185fc:	f7fd fd08 	bl	8016010 <mg_tls_server_send_ext>
      mg_tls_server_send_cert(c);
 8018600:	6878      	ldr	r0, [r7, #4]
 8018602:	f7fd fd27 	bl	8016054 <mg_tls_server_send_cert>
      mg_tls_send_cert_verify(c, 0);
 8018606:	2100      	movs	r1, #0
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f7fd fe49 	bl	80162a0 <mg_tls_send_cert_verify>
      mg_tls_server_send_finish(c);
 801860e:	6878      	ldr	r0, [r7, #4]
 8018610:	f7fd ff7a 	bl	8016508 <mg_tls_server_send_finish>
      tls->state = MG_TLS_STATE_SERVER_NEGOTIATED;
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	2208      	movs	r2, #8
 8018618:	701a      	strb	r2, [r3, #0]
      // fallthrough
    case MG_TLS_STATE_SERVER_NEGOTIATED:
      if (mg_tls_server_recv_finish(c) < 0) {
 801861a:	6878      	ldr	r0, [r7, #4]
 801861c:	f7fd ffbc 	bl	8016598 <mg_tls_server_recv_finish>
 8018620:	4603      	mov	r3, r0
 8018622:	2b00      	cmp	r3, #0
 8018624:	db17      	blt.n	8018656 <mg_tls_server_handshake+0x92>
        return;
      }
      mg_tls_generate_application_keys(c);
 8018626:	6878      	ldr	r0, [r7, #4]
 8018628:	f7fc fee0 	bl	80153ec <mg_tls_generate_application_keys>
      tls->state = MG_TLS_STATE_SERVER_CONNECTED;
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	2209      	movs	r2, #9
 8018630:	701a      	strb	r2, [r3, #0]
      c->is_tls_hs = 0;
 8018632:	687a      	ldr	r2, [r7, #4]
 8018634:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8018638:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801863c:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
      return;
 8018640:	e00a      	b.n	8018658 <mg_tls_server_handshake+0x94>
    default:
      mg_error(c, "unexpected server state: %d", tls->state);
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	781b      	ldrb	r3, [r3, #0]
 8018646:	461a      	mov	r2, r3
 8018648:	4905      	ldr	r1, [pc, #20]	@ (8018660 <mg_tls_server_handshake+0x9c>)
 801864a:	6878      	ldr	r0, [r7, #4]
 801864c:	f7ee f9e2 	bl	8006a14 <mg_error>
      break;
 8018650:	e002      	b.n	8018658 <mg_tls_server_handshake+0x94>
        return;
 8018652:	bf00      	nop
 8018654:	e000      	b.n	8018658 <mg_tls_server_handshake+0x94>
        return;
 8018656:	bf00      	nop
  }
}
 8018658:	3710      	adds	r7, #16
 801865a:	46bd      	mov	sp, r7
 801865c:	bd80      	pop	{r7, pc}
 801865e:	bf00      	nop
 8018660:	08026a28 	.word	0x08026a28

08018664 <mg_tls_handshake>:

void mg_tls_handshake(struct mg_connection *c) {
 8018664:	b580      	push	{r7, lr}
 8018666:	b084      	sub	sp, #16
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018672:	60fb      	str	r3, [r7, #12]
  long n;
  if (c->is_client) {
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801867a:	f003 0302 	and.w	r3, r3, #2
 801867e:	b2db      	uxtb	r3, r3
 8018680:	2b00      	cmp	r3, #0
 8018682:	d003      	beq.n	801868c <mg_tls_handshake+0x28>
    // will clear is_hs when sending last chunk
    mg_tls_client_handshake(c);
 8018684:	6878      	ldr	r0, [r7, #4]
 8018686:	f7ff fe8f 	bl	80183a8 <mg_tls_client_handshake>
 801868a:	e00a      	b.n	80186a2 <mg_tls_handshake+0x3e>
  } else {
    mg_tls_server_handshake(c);
 801868c:	6878      	ldr	r0, [r7, #4]
 801868e:	f7ff ff99 	bl	80185c4 <mg_tls_server_handshake>
  }
  while (tls->send.len > 0 &&
 8018692:	e006      	b.n	80186a2 <mg_tls_handshake+0x3e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	3304      	adds	r3, #4
 8018698:	68ba      	ldr	r2, [r7, #8]
 801869a:	2100      	movs	r1, #0
 801869c:	4618      	mov	r0, r3
 801869e:	f7f2 fffd 	bl	800b69c <mg_iobuf_del>
  while (tls->send.len > 0 &&
 80186a2:	68fb      	ldr	r3, [r7, #12]
 80186a4:	68db      	ldr	r3, [r3, #12]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d00b      	beq.n	80186c2 <mg_tls_handshake+0x5e>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	6859      	ldr	r1, [r3, #4]
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	68db      	ldr	r3, [r3, #12]
 80186b2:	461a      	mov	r2, r3
 80186b4:	6878      	ldr	r0, [r7, #4]
 80186b6:	f7f6 fa15 	bl	800eae4 <mg_io_send>
 80186ba:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	dce8      	bgt.n	8018694 <mg_tls_handshake+0x30>
  } // if last chunk fails to be sent, it will be sent with first app data,
    // otherwise, it needs to be flushed
}
 80186c2:	bf00      	nop
 80186c4:	3710      	adds	r7, #16
 80186c6:	46bd      	mov	sp, r7
 80186c8:	bd80      	pop	{r7, pc}
	...

080186cc <mg_parse_pem>:

static int mg_parse_pem(const struct mg_str pem, const struct mg_str label,
                        struct mg_str *der) {
 80186cc:	b590      	push	{r4, r7, lr}
 80186ce:	b09b      	sub	sp, #108	@ 0x6c
 80186d0:	af02      	add	r7, sp, #8
 80186d2:	f107 0410 	add.w	r4, r7, #16
 80186d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80186da:	f107 0108 	add.w	r1, r7, #8
 80186de:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t n = 0, m = 0;
 80186e2:	2300      	movs	r3, #0
 80186e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80186e6:	2300      	movs	r3, #0
 80186e8:	657b      	str	r3, [r7, #84]	@ 0x54
  char *s;
  const char *c;
  struct mg_str caps[6];  // number of wildcards + 1
  if (!mg_match(pem, mg_str("#-----BEGIN #-----#-----END #-----#"), caps)) {
 80186ea:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80186ee:	4946      	ldr	r1, [pc, #280]	@ (8018808 <mg_parse_pem+0x13c>)
 80186f0:	4618      	mov	r0, r3
 80186f2:	f7fb fceb 	bl	80140cc <mg_str_s>
 80186f6:	f107 0318 	add.w	r3, r7, #24
 80186fa:	9300      	str	r3, [sp, #0]
 80186fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8018700:	cb0c      	ldmia	r3, {r2, r3}
 8018702:	f107 0110 	add.w	r1, r7, #16
 8018706:	c903      	ldmia	r1, {r0, r1}
 8018708:	f7fb fdea 	bl	80142e0 <mg_match>
 801870c:	4603      	mov	r3, r0
 801870e:	f083 0301 	eor.w	r3, r3, #1
 8018712:	b2db      	uxtb	r3, r3
 8018714:	2b00      	cmp	r3, #0
 8018716:	d00f      	beq.n	8018738 <mg_parse_pem+0x6c>
    *der = mg_strdup(pem);
 8018718:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 801871a:	4638      	mov	r0, r7
 801871c:	f107 0310 	add.w	r3, r7, #16
 8018720:	e893 0006 	ldmia.w	r3, {r1, r2}
 8018724:	f7fb fd1c 	bl	8014160 <mg_strdup>
 8018728:	4622      	mov	r2, r4
 801872a:	463b      	mov	r3, r7
 801872c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018730:	e882 0003 	stmia.w	r2, {r0, r1}
    return 0;
 8018734:	2300      	movs	r3, #0
 8018736:	e062      	b.n	80187fe <mg_parse_pem+0x132>
  }
  if (mg_strcmp(caps[1], label) != 0 || mg_strcmp(caps[3], label) != 0) {
 8018738:	f107 0308 	add.w	r3, r7, #8
 801873c:	cb0c      	ldmia	r3, {r2, r3}
 801873e:	f107 0120 	add.w	r1, r7, #32
 8018742:	c903      	ldmia	r1, {r0, r1}
 8018744:	f7fb fd43 	bl	80141ce <mg_strcmp>
 8018748:	4603      	mov	r3, r0
 801874a:	2b00      	cmp	r3, #0
 801874c:	d10a      	bne.n	8018764 <mg_parse_pem+0x98>
 801874e:	f107 0308 	add.w	r3, r7, #8
 8018752:	cb0c      	ldmia	r3, {r2, r3}
 8018754:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8018758:	c903      	ldmia	r1, {r0, r1}
 801875a:	f7fb fd38 	bl	80141ce <mg_strcmp>
 801875e:	4603      	mov	r3, r0
 8018760:	2b00      	cmp	r3, #0
 8018762:	d002      	beq.n	801876a <mg_parse_pem+0x9e>
    return -1;  // bad label
 8018764:	f04f 33ff 	mov.w	r3, #4294967295
 8018768:	e049      	b.n	80187fe <mg_parse_pem+0x132>
  }
  if ((s = (char *) calloc(1, caps[2].len)) == NULL) {
 801876a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801876c:	4619      	mov	r1, r3
 801876e:	2001      	movs	r0, #1
 8018770:	f00a fd40 	bl	80231f4 <calloc>
 8018774:	4603      	mov	r3, r0
 8018776:	653b      	str	r3, [r7, #80]	@ 0x50
 8018778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801877a:	2b00      	cmp	r3, #0
 801877c:	d102      	bne.n	8018784 <mg_parse_pem+0xb8>
    return -1;
 801877e:	f04f 33ff 	mov.w	r3, #4294967295
 8018782:	e03c      	b.n	80187fe <mg_parse_pem+0x132>
  }

  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 8018784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018786:	65bb      	str	r3, [r7, #88]	@ 0x58
 8018788:	e01c      	b.n	80187c4 <mg_parse_pem+0xf8>
    if (*c == ' ' || *c == '\n' || *c == '\r' || *c == '\t') {
 801878a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801878c:	781b      	ldrb	r3, [r3, #0]
 801878e:	2b20      	cmp	r3, #32
 8018790:	d014      	beq.n	80187bc <mg_parse_pem+0xf0>
 8018792:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8018794:	781b      	ldrb	r3, [r3, #0]
 8018796:	2b0a      	cmp	r3, #10
 8018798:	d010      	beq.n	80187bc <mg_parse_pem+0xf0>
 801879a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	2b0d      	cmp	r3, #13
 80187a0:	d00c      	beq.n	80187bc <mg_parse_pem+0xf0>
 80187a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80187a4:	781b      	ldrb	r3, [r3, #0]
 80187a6:	2b09      	cmp	r3, #9
 80187a8:	d008      	beq.n	80187bc <mg_parse_pem+0xf0>
      continue;
    }
    s[n++] = *c;
 80187aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80187ac:	1c5a      	adds	r2, r3, #1
 80187ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80187b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80187b2:	4413      	add	r3, r2
 80187b4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80187b6:	7812      	ldrb	r2, [r2, #0]
 80187b8:	701a      	strb	r2, [r3, #0]
 80187ba:	e000      	b.n	80187be <mg_parse_pem+0xf2>
      continue;
 80187bc:	bf00      	nop
  for (c = caps[2].buf; c < caps[2].buf + caps[2].len; c++) {
 80187be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80187c0:	3301      	adds	r3, #1
 80187c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80187c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80187c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80187c8:	4413      	add	r3, r2
 80187ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80187cc:	429a      	cmp	r2, r3
 80187ce:	d3dc      	bcc.n	801878a <mg_parse_pem+0xbe>
  }
  m = mg_base64_decode(s, n, s, n);
 80187d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80187d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80187d4:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80187d6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80187d8:	f7ee f81c 	bl	8006814 <mg_base64_decode>
 80187dc:	6578      	str	r0, [r7, #84]	@ 0x54
  if (m == 0) {
 80187de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d105      	bne.n	80187f0 <mg_parse_pem+0x124>
    free(s);
 80187e4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80187e6:	f00a fd29 	bl	802323c <free>
    return -1;
 80187ea:	f04f 33ff 	mov.w	r3, #4294967295
 80187ee:	e006      	b.n	80187fe <mg_parse_pem+0x132>
  }
  der->buf = s;
 80187f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80187f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80187f4:	601a      	str	r2, [r3, #0]
  der->len = m;
 80187f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80187f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80187fa:	605a      	str	r2, [r3, #4]
  return 0;
 80187fc:	2300      	movs	r3, #0
}
 80187fe:	4618      	mov	r0, r3
 8018800:	3764      	adds	r7, #100	@ 0x64
 8018802:	46bd      	mov	sp, r7
 8018804:	bd90      	pop	{r4, r7, pc}
 8018806:	bf00      	nop
 8018808:	08026a44 	.word	0x08026a44

0801880c <mg_tls_init>:

void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 801880c:	b580      	push	{r7, lr}
 801880e:	b090      	sub	sp, #64	@ 0x40
 8018810:	af02      	add	r7, sp, #8
 8018812:	6078      	str	r0, [r7, #4]
 8018814:	6039      	str	r1, [r7, #0]
  struct mg_str key;
  struct tls_data *tls = (struct tls_data *) calloc(1, sizeof(struct tls_data));
 8018816:	f44f 61a8 	mov.w	r1, #1344	@ 0x540
 801881a:	2001      	movs	r0, #1
 801881c:	f00a fcea 	bl	80231f4 <calloc>
 8018820:	4603      	mov	r3, r0
 8018822:	637b      	str	r3, [r7, #52]	@ 0x34
  if (tls == NULL) {
 8018824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018826:	2b00      	cmp	r3, #0
 8018828:	d104      	bne.n	8018834 <mg_tls_init+0x28>
    mg_error(c, "tls oom");
 801882a:	49a5      	ldr	r1, [pc, #660]	@ (8018ac0 <mg_tls_init+0x2b4>)
 801882c:	6878      	ldr	r0, [r7, #4]
 801882e:	f7ee f8f1 	bl	8006a14 <mg_error>
    return;
 8018832:	e141      	b.n	8018ab8 <mg_tls_init+0x2ac>
  }

  tls->state =
      c->is_client ? MG_TLS_STATE_CLIENT_START : MG_TLS_STATE_SERVER_START;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801883a:	f003 0302 	and.w	r3, r3, #2
 801883e:	b2db      	uxtb	r3, r3
 8018840:	2b00      	cmp	r3, #0
 8018842:	d001      	beq.n	8018848 <mg_tls_init+0x3c>
 8018844:	2200      	movs	r2, #0
 8018846:	e000      	b.n	801884a <mg_tls_init+0x3e>
 8018848:	2207      	movs	r2, #7
  tls->state =
 801884a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801884c:	701a      	strb	r2, [r3, #0]

  tls->skip_verification = opts->skip_verification;
 801884e:	683b      	ldr	r3, [r7, #0]
 8018850:	6a1a      	ldr	r2, [r3, #32]
 8018852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018854:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
  // tls->send.align = MG_IO_SIZE;

  c->tls = tls;
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801885c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  c->is_tls = c->is_tls_hs = 1;
 8018860:	687a      	ldr	r2, [r7, #4]
 8018862:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8018866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801886a:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8018874:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8018878:	b2d9      	uxtb	r1, r3
 801887a:	687a      	ldr	r2, [r7, #4]
 801887c:	f892 30ac 	ldrb.w	r3, [r2, #172]	@ 0xac
 8018880:	f361 1386 	bfi	r3, r1, #6, #1
 8018884:	f882 30ac 	strb.w	r3, [r2, #172]	@ 0xac
  mg_sha256_init(&tls->sha256);
 8018888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801888a:	3320      	adds	r3, #32
 801888c:	4618      	mov	r0, r3
 801888e:	f7f9 ff4f 	bl	8012730 <mg_sha256_init>

  // save hostname (client extension)
  if (opts->name.len > 0) {
 8018892:	683b      	ldr	r3, [r7, #0]
 8018894:	69db      	ldr	r3, [r3, #28]
 8018896:	2b00      	cmp	r3, #0
 8018898:	d018      	beq.n	80188cc <mg_tls_init+0xc0>
    if (opts->name.len >= sizeof(tls->hostname) - 1) {
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	69db      	ldr	r3, [r3, #28]
 801889e:	2bfc      	cmp	r3, #252	@ 0xfc
 80188a0:	d904      	bls.n	80188ac <mg_tls_init+0xa0>
      mg_error(c, "hostname too long");
 80188a2:	4988      	ldr	r1, [pc, #544]	@ (8018ac4 <mg_tls_init+0x2b8>)
 80188a4:	6878      	ldr	r0, [r7, #4]
 80188a6:	f7ee f8b5 	bl	8006a14 <mg_error>
      return;
 80188aa:	e105      	b.n	8018ab8 <mg_tls_init+0x2ac>
    }
    strncpy((char *) tls->hostname, opts->name.buf, sizeof(tls->hostname) - 1);
 80188ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188ae:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	699b      	ldr	r3, [r3, #24]
 80188b6:	22fd      	movs	r2, #253	@ 0xfd
 80188b8:	4619      	mov	r1, r3
 80188ba:	f00a ff97 	bl	80237ec <strncpy>
    tls->hostname[opts->name.len] = 0;
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	69db      	ldr	r3, [r3, #28]
 80188c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80188c4:	4413      	add	r3, r2
 80188c6:	2200      	movs	r2, #0
 80188c8:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
  }
  // server CA certificate, store serial number
  if (opts->ca.len > 0) {
 80188cc:	683b      	ldr	r3, [r7, #0]
 80188ce:	685b      	ldr	r3, [r3, #4]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d023      	beq.n	801891c <mg_tls_init+0x110>
    if (mg_parse_pem(opts->ca, mg_str_s("CERTIFICATE"), &tls->ca_der) < 0) {
 80188d4:	f107 0314 	add.w	r3, r7, #20
 80188d8:	497b      	ldr	r1, [pc, #492]	@ (8018ac8 <mg_tls_init+0x2bc>)
 80188da:	4618      	mov	r0, r3
 80188dc:	f7fb fbf6 	bl	80140cc <mg_str_s>
 80188e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80188e2:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80188e6:	6839      	ldr	r1, [r7, #0]
 80188e8:	9300      	str	r3, [sp, #0]
 80188ea:	f107 0314 	add.w	r3, r7, #20
 80188ee:	cb0c      	ldmia	r3, {r2, r3}
 80188f0:	c903      	ldmia	r1, {r0, r1}
 80188f2:	f7ff feeb 	bl	80186cc <mg_parse_pem>
 80188f6:	4603      	mov	r3, r0
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	da0f      	bge.n	801891c <mg_tls_init+0x110>
      MG_ERROR(("Failed to load certificate"));
 80188fc:	4b73      	ldr	r3, [pc, #460]	@ (8018acc <mg_tls_init+0x2c0>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	2b00      	cmp	r3, #0
 8018902:	f340 80d0 	ble.w	8018aa6 <mg_tls_init+0x29a>
 8018906:	4b72      	ldr	r3, [pc, #456]	@ (8018ad0 <mg_tls_init+0x2c4>)
 8018908:	f243 02b6 	movw	r2, #12470	@ 0x30b6
 801890c:	4971      	ldr	r1, [pc, #452]	@ (8018ad4 <mg_tls_init+0x2c8>)
 801890e:	2001      	movs	r0, #1
 8018910:	f7f3 fd90 	bl	800c434 <mg_log_prefix>
 8018914:	4870      	ldr	r0, [pc, #448]	@ (8018ad8 <mg_tls_init+0x2cc>)
 8018916:	f7f3 fddd 	bl	800c4d4 <mg_log>
      return;
 801891a:	e0c4      	b.n	8018aa6 <mg_tls_init+0x29a>
    }
  }

  if (opts->cert.buf == NULL) {
 801891c:	683b      	ldr	r3, [r7, #0]
 801891e:	689b      	ldr	r3, [r3, #8]
 8018920:	2b00      	cmp	r3, #0
 8018922:	d10f      	bne.n	8018944 <mg_tls_init+0x138>
    MG_VERBOSE(("No certificate provided"));
 8018924:	4b69      	ldr	r3, [pc, #420]	@ (8018acc <mg_tls_init+0x2c0>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	2b03      	cmp	r3, #3
 801892a:	f340 80be 	ble.w	8018aaa <mg_tls_init+0x29e>
 801892e:	4b68      	ldr	r3, [pc, #416]	@ (8018ad0 <mg_tls_init+0x2c4>)
 8018930:	f243 02bc 	movw	r2, #12476	@ 0x30bc
 8018934:	4967      	ldr	r1, [pc, #412]	@ (8018ad4 <mg_tls_init+0x2c8>)
 8018936:	2004      	movs	r0, #4
 8018938:	f7f3 fd7c 	bl	800c434 <mg_log_prefix>
 801893c:	4867      	ldr	r0, [pc, #412]	@ (8018adc <mg_tls_init+0x2d0>)
 801893e:	f7f3 fdc9 	bl	800c4d4 <mg_log>
    return;
 8018942:	e0b2      	b.n	8018aaa <mg_tls_init+0x29e>
  }

  // parse PEM or DER certificate
  if (mg_parse_pem(opts->cert, mg_str_s("CERTIFICATE"), &tls->cert_der) < 0) {
 8018944:	f107 031c 	add.w	r3, r7, #28
 8018948:	495f      	ldr	r1, [pc, #380]	@ (8018ac8 <mg_tls_init+0x2bc>)
 801894a:	4618      	mov	r0, r3
 801894c:	f7fb fbbe 	bl	80140cc <mg_str_s>
 8018950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018952:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8018956:	6839      	ldr	r1, [r7, #0]
 8018958:	9300      	str	r3, [sp, #0]
 801895a:	f107 031c 	add.w	r3, r7, #28
 801895e:	cb0c      	ldmia	r3, {r2, r3}
 8018960:	3108      	adds	r1, #8
 8018962:	c903      	ldmia	r1, {r0, r1}
 8018964:	f7ff feb2 	bl	80186cc <mg_parse_pem>
 8018968:	4603      	mov	r3, r0
 801896a:	2b00      	cmp	r3, #0
 801896c:	da0f      	bge.n	801898e <mg_tls_init+0x182>
    MG_ERROR(("Failed to load certificate"));
 801896e:	4b57      	ldr	r3, [pc, #348]	@ (8018acc <mg_tls_init+0x2c0>)
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	2b00      	cmp	r3, #0
 8018974:	f340 809b 	ble.w	8018aae <mg_tls_init+0x2a2>
 8018978:	4b55      	ldr	r3, [pc, #340]	@ (8018ad0 <mg_tls_init+0x2c4>)
 801897a:	f243 02c2 	movw	r2, #12482	@ 0x30c2
 801897e:	4955      	ldr	r1, [pc, #340]	@ (8018ad4 <mg_tls_init+0x2c8>)
 8018980:	2001      	movs	r0, #1
 8018982:	f7f3 fd57 	bl	800c434 <mg_log_prefix>
 8018986:	4854      	ldr	r0, [pc, #336]	@ (8018ad8 <mg_tls_init+0x2cc>)
 8018988:	f7f3 fda4 	bl	800c4d4 <mg_log>
    return;
 801898c:	e08f      	b.n	8018aae <mg_tls_init+0x2a2>
  }

  // parse PEM or DER EC key
  if (opts->key.buf == NULL) {
 801898e:	683b      	ldr	r3, [r7, #0]
 8018990:	691b      	ldr	r3, [r3, #16]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d104      	bne.n	80189a0 <mg_tls_init+0x194>
    mg_error(c, "Certificate provided without a private key");
 8018996:	4952      	ldr	r1, [pc, #328]	@ (8018ae0 <mg_tls_init+0x2d4>)
 8018998:	6878      	ldr	r0, [r7, #4]
 801899a:	f7ee f83b 	bl	8006a14 <mg_error>
    return;
 801899e:	e08b      	b.n	8018ab8 <mg_tls_init+0x2ac>
  }

  if (mg_parse_pem(opts->key, mg_str_s("EC PRIVATE KEY"), &key) == 0) {
 80189a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80189a4:	494f      	ldr	r1, [pc, #316]	@ (8018ae4 <mg_tls_init+0x2d8>)
 80189a6:	4618      	mov	r0, r3
 80189a8:	f7fb fb90 	bl	80140cc <mg_str_s>
 80189ac:	6839      	ldr	r1, [r7, #0]
 80189ae:	f107 030c 	add.w	r3, r7, #12
 80189b2:	9300      	str	r3, [sp, #0]
 80189b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80189b8:	cb0c      	ldmia	r3, {r2, r3}
 80189ba:	3110      	adds	r1, #16
 80189bc:	c903      	ldmia	r1, {r0, r1}
 80189be:	f7ff fe85 	bl	80186cc <mg_parse_pem>
 80189c2:	4603      	mov	r3, r0
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d150      	bne.n	8018a6a <mg_tls_init+0x25e>
    if (key.len < 39) {
 80189c8:	693b      	ldr	r3, [r7, #16]
 80189ca:	2b26      	cmp	r3, #38	@ 0x26
 80189cc:	d80e      	bhi.n	80189ec <mg_tls_init+0x1e0>
      MG_ERROR(("EC private key too short"));
 80189ce:	4b3f      	ldr	r3, [pc, #252]	@ (8018acc <mg_tls_init+0x2c0>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	2b00      	cmp	r3, #0
 80189d4:	dd6d      	ble.n	8018ab2 <mg_tls_init+0x2a6>
 80189d6:	4b3e      	ldr	r3, [pc, #248]	@ (8018ad0 <mg_tls_init+0x2c4>)
 80189d8:	f243 02ce 	movw	r2, #12494	@ 0x30ce
 80189dc:	493d      	ldr	r1, [pc, #244]	@ (8018ad4 <mg_tls_init+0x2c8>)
 80189de:	2001      	movs	r0, #1
 80189e0:	f7f3 fd28 	bl	800c434 <mg_log_prefix>
 80189e4:	4840      	ldr	r0, [pc, #256]	@ (8018ae8 <mg_tls_init+0x2dc>)
 80189e6:	f7f3 fd75 	bl	800c4d4 <mg_log>
      return;
 80189ea:	e062      	b.n	8018ab2 <mg_tls_init+0x2a6>
    }
    // expect ASN.1 SEQUENCE=[INTEGER=1, BITSTRING of 32 bytes, ...]
    // 30 nn 02 01 01 04 20 [key] ...
    if (key.buf[0] != 0x30 || (key.buf[1] & 0x80) != 0) {
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	781b      	ldrb	r3, [r3, #0]
 80189f0:	2b30      	cmp	r3, #48	@ 0x30
 80189f2:	d105      	bne.n	8018a00 <mg_tls_init+0x1f4>
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	3301      	adds	r3, #1
 80189f8:	781b      	ldrb	r3, [r3, #0]
 80189fa:	b25b      	sxtb	r3, r3
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	da0e      	bge.n	8018a1e <mg_tls_init+0x212>
      MG_ERROR(("EC private key: ASN.1 bad sequence"));
 8018a00:	4b32      	ldr	r3, [pc, #200]	@ (8018acc <mg_tls_init+0x2c0>)
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	dd56      	ble.n	8018ab6 <mg_tls_init+0x2aa>
 8018a08:	4b31      	ldr	r3, [pc, #196]	@ (8018ad0 <mg_tls_init+0x2c4>)
 8018a0a:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8018a0e:	4931      	ldr	r1, [pc, #196]	@ (8018ad4 <mg_tls_init+0x2c8>)
 8018a10:	2001      	movs	r0, #1
 8018a12:	f7f3 fd0f 	bl	800c434 <mg_log_prefix>
 8018a16:	4835      	ldr	r0, [pc, #212]	@ (8018aec <mg_tls_init+0x2e0>)
 8018a18:	f7f3 fd5c 	bl	800c4d4 <mg_log>
      return;
 8018a1c:	e04b      	b.n	8018ab6 <mg_tls_init+0x2aa>
    }
    if (memcmp(key.buf + 2, "\x02\x01\x01\x04\x20", 5) != 0) {
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	3302      	adds	r3, #2
 8018a22:	2205      	movs	r2, #5
 8018a24:	4932      	ldr	r1, [pc, #200]	@ (8018af0 <mg_tls_init+0x2e4>)
 8018a26:	4618      	mov	r0, r3
 8018a28:	f00a fe8f 	bl	802374a <memcmp>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d00d      	beq.n	8018a4e <mg_tls_init+0x242>
      MG_ERROR(("EC private key: ASN.1 bad data"));
 8018a32:	4b26      	ldr	r3, [pc, #152]	@ (8018acc <mg_tls_init+0x2c0>)
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	2b00      	cmp	r3, #0
 8018a38:	dd09      	ble.n	8018a4e <mg_tls_init+0x242>
 8018a3a:	4b25      	ldr	r3, [pc, #148]	@ (8018ad0 <mg_tls_init+0x2c4>)
 8018a3c:	f243 02d8 	movw	r2, #12504	@ 0x30d8
 8018a40:	4924      	ldr	r1, [pc, #144]	@ (8018ad4 <mg_tls_init+0x2c8>)
 8018a42:	2001      	movs	r0, #1
 8018a44:	f7f3 fcf6 	bl	800c434 <mg_log_prefix>
 8018a48:	482a      	ldr	r0, [pc, #168]	@ (8018af4 <mg_tls_init+0x2e8>)
 8018a4a:	f7f3 fd43 	bl	800c4d4 <mg_log>
    }
    memmove(tls->ec_key, key.buf + 7, 32);
 8018a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018a50:	f503 7094 	add.w	r0, r3, #296	@ 0x128
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	3307      	adds	r3, #7
 8018a58:	2220      	movs	r2, #32
 8018a5a:	4619      	mov	r1, r3
 8018a5c:	f00a fe85 	bl	802376a <memmove>
    free((void *) key.buf);
 8018a60:	68fb      	ldr	r3, [r7, #12]
 8018a62:	4618      	mov	r0, r3
 8018a64:	f00a fbea 	bl	802323c <free>
 8018a68:	e026      	b.n	8018ab8 <mg_tls_init+0x2ac>
  } else if (mg_parse_pem(opts->key, mg_str_s("PRIVATE KEY"), &key) == 0) {
 8018a6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018a6e:	4922      	ldr	r1, [pc, #136]	@ (8018af8 <mg_tls_init+0x2ec>)
 8018a70:	4618      	mov	r0, r3
 8018a72:	f7fb fb2b 	bl	80140cc <mg_str_s>
 8018a76:	6839      	ldr	r1, [r7, #0]
 8018a78:	f107 030c 	add.w	r3, r7, #12
 8018a7c:	9300      	str	r3, [sp, #0]
 8018a7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018a82:	cb0c      	ldmia	r3, {r2, r3}
 8018a84:	3110      	adds	r1, #16
 8018a86:	c903      	ldmia	r1, {r0, r1}
 8018a88:	f7ff fe20 	bl	80186cc <mg_parse_pem>
 8018a8c:	4603      	mov	r3, r0
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d104      	bne.n	8018a9c <mg_tls_init+0x290>
    mg_error(c, "PKCS8 private key format is not supported");
 8018a92:	491a      	ldr	r1, [pc, #104]	@ (8018afc <mg_tls_init+0x2f0>)
 8018a94:	6878      	ldr	r0, [r7, #4]
 8018a96:	f7ed ffbd 	bl	8006a14 <mg_error>
 8018a9a:	e00d      	b.n	8018ab8 <mg_tls_init+0x2ac>
  } else {
    mg_error(c, "Expected EC PRIVATE KEY or PRIVATE KEY");
 8018a9c:	4918      	ldr	r1, [pc, #96]	@ (8018b00 <mg_tls_init+0x2f4>)
 8018a9e:	6878      	ldr	r0, [r7, #4]
 8018aa0:	f7ed ffb8 	bl	8006a14 <mg_error>
 8018aa4:	e008      	b.n	8018ab8 <mg_tls_init+0x2ac>
      return;
 8018aa6:	bf00      	nop
 8018aa8:	e006      	b.n	8018ab8 <mg_tls_init+0x2ac>
    return;
 8018aaa:	bf00      	nop
 8018aac:	e004      	b.n	8018ab8 <mg_tls_init+0x2ac>
    return;
 8018aae:	bf00      	nop
 8018ab0:	e002      	b.n	8018ab8 <mg_tls_init+0x2ac>
      return;
 8018ab2:	bf00      	nop
 8018ab4:	e000      	b.n	8018ab8 <mg_tls_init+0x2ac>
      return;
 8018ab6:	bf00      	nop
  }
}
 8018ab8:	3738      	adds	r7, #56	@ 0x38
 8018aba:	46bd      	mov	sp, r7
 8018abc:	bd80      	pop	{r7, pc}
 8018abe:	bf00      	nop
 8018ac0:	08026a68 	.word	0x08026a68
 8018ac4:	08026a70 	.word	0x08026a70
 8018ac8:	08026a84 	.word	0x08026a84
 8018acc:	24000258 	.word	0x24000258
 8018ad0:	08028300 	.word	0x08028300
 8018ad4:	08024478 	.word	0x08024478
 8018ad8:	08026a90 	.word	0x08026a90
 8018adc:	08026aac 	.word	0x08026aac
 8018ae0:	08026ac4 	.word	0x08026ac4
 8018ae4:	08026af0 	.word	0x08026af0
 8018ae8:	08026b00 	.word	0x08026b00
 8018aec:	08026b1c 	.word	0x08026b1c
 8018af0:	08026b40 	.word	0x08026b40
 8018af4:	08026b48 	.word	0x08026b48
 8018af8:	08026b68 	.word	0x08026b68
 8018afc:	08026b74 	.word	0x08026b74
 8018b00:	08026ba0 	.word	0x08026ba0

08018b04 <mg_tls_free>:

void mg_tls_free(struct mg_connection *c) {
 8018b04:	b580      	push	{r7, lr}
 8018b06:	b084      	sub	sp, #16
 8018b08:	af00      	add	r7, sp, #0
 8018b0a:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018b12:	60fb      	str	r3, [r7, #12]
  if (tls != NULL) {
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d010      	beq.n	8018b3c <mg_tls_free+0x38>
    mg_iobuf_free(&tls->send);
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	3304      	adds	r3, #4
 8018b1e:	4618      	mov	r0, r3
 8018b20:	f7f2 fe07 	bl	800b732 <mg_iobuf_free>
    free((void *) tls->cert_der.buf);
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	f00a fb86 	bl	802323c <free>
    free((void *) tls->ca_der.buf);
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8018b36:	4618      	mov	r0, r3
 8018b38:	f00a fb80 	bl	802323c <free>
  }
  free(c->tls);
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018b42:	4618      	mov	r0, r3
 8018b44:	f00a fb7a 	bl	802323c <free>
  c->tls = NULL;
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 8018b50:	bf00      	nop
 8018b52:	3710      	adds	r7, #16
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}

08018b58 <mg_tls_send>:

long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 8018b58:	b590      	push	{r4, r7, lr}
 8018b5a:	b08d      	sub	sp, #52	@ 0x34
 8018b5c:	af04      	add	r7, sp, #16
 8018b5e:	60f8      	str	r0, [r7, #12]
 8018b60:	60b9      	str	r1, [r7, #8]
 8018b62:	607a      	str	r2, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018b6a:	61bb      	str	r3, [r7, #24]
  long n = MG_IO_WAIT;
 8018b6c:	f06f 0301 	mvn.w	r3, #1
 8018b70:	61fb      	str	r3, [r7, #28]
  bool was_throttled = c->is_tls_throttled;  // see #3074
 8018b72:	68fb      	ldr	r3, [r7, #12]
 8018b74:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8018b78:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8018b7c:	b2db      	uxtb	r3, r3
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	bf14      	ite	ne
 8018b82:	2301      	movne	r3, #1
 8018b84:	2300      	moveq	r3, #0
 8018b86:	75fb      	strb	r3, [r7, #23]
  if (!was_throttled) {                      // encrypt new data
 8018b88:	7dfb      	ldrb	r3, [r7, #23]
 8018b8a:	f083 0301 	eor.w	r3, r3, #1
 8018b8e:	b2db      	uxtb	r3, r3
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d01b      	beq.n	8018bcc <mg_tls_send+0x74>
    if (len > MG_IO_SIZE) len = MG_IO_SIZE;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018b9a:	d902      	bls.n	8018ba2 <mg_tls_send+0x4a>
 8018b9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8018ba0:	607b      	str	r3, [r7, #4]
    if (len > 16384) len = 16384;
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018ba8:	d902      	bls.n	8018bb0 <mg_tls_send+0x58>
 8018baa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018bae:	607b      	str	r3, [r7, #4]
    mg_tls_encrypt(c, (const uint8_t *) buf, len, MG_TLS_APP_DATA);
 8018bb0:	2317      	movs	r3, #23
 8018bb2:	687a      	ldr	r2, [r7, #4]
 8018bb4:	68b9      	ldr	r1, [r7, #8]
 8018bb6:	68f8      	ldr	r0, [r7, #12]
 8018bb8:	f7fc fd30 	bl	801561c <mg_tls_encrypt>
  }  // else, resend outstanding encrypted data in tls->send
  while (tls->send.len > 0 &&
 8018bbc:	e006      	b.n	8018bcc <mg_tls_send+0x74>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 8018bbe:	69bb      	ldr	r3, [r7, #24]
 8018bc0:	3304      	adds	r3, #4
 8018bc2:	69fa      	ldr	r2, [r7, #28]
 8018bc4:	2100      	movs	r1, #0
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f7f2 fd68 	bl	800b69c <mg_iobuf_del>
  while (tls->send.len > 0 &&
 8018bcc:	69bb      	ldr	r3, [r7, #24]
 8018bce:	68db      	ldr	r3, [r3, #12]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d00b      	beq.n	8018bec <mg_tls_send+0x94>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 8018bd4:	69bb      	ldr	r3, [r7, #24]
 8018bd6:	6859      	ldr	r1, [r3, #4]
 8018bd8:	69bb      	ldr	r3, [r7, #24]
 8018bda:	68db      	ldr	r3, [r3, #12]
 8018bdc:	461a      	mov	r2, r3
 8018bde:	68f8      	ldr	r0, [r7, #12]
 8018be0:	f7f5 ff80 	bl	800eae4 <mg_io_send>
 8018be4:	61f8      	str	r0, [r7, #28]
  while (tls->send.len > 0 &&
 8018be6:	69fb      	ldr	r3, [r7, #28]
 8018be8:	2b00      	cmp	r3, #0
 8018bea:	dce8      	bgt.n	8018bbe <mg_tls_send+0x66>
  } // if last chunk fails to be sent, it needs to be flushed
  c->is_tls_throttled = (tls->send.len > 0 && n == MG_IO_WAIT);
 8018bec:	69bb      	ldr	r3, [r7, #24]
 8018bee:	68db      	ldr	r3, [r3, #12]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d005      	beq.n	8018c00 <mg_tls_send+0xa8>
 8018bf4:	69fb      	ldr	r3, [r7, #28]
 8018bf6:	f113 0f02 	cmn.w	r3, #2
 8018bfa:	d101      	bne.n	8018c00 <mg_tls_send+0xa8>
 8018bfc:	2301      	movs	r3, #1
 8018bfe:	e000      	b.n	8018c02 <mg_tls_send+0xaa>
 8018c00:	2300      	movs	r3, #0
 8018c02:	f003 0301 	and.w	r3, r3, #1
 8018c06:	b2d9      	uxtb	r1, r3
 8018c08:	68fa      	ldr	r2, [r7, #12]
 8018c0a:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8018c0e:	f361 13c7 	bfi	r3, r1, #7, #1
 8018c12:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
  MG_VERBOSE(("%lu %ld %ld %ld %c %c", c->id, (long) len, (long) tls->send.len,
 8018c16:	4b1e      	ldr	r3, [pc, #120]	@ (8018c90 <mg_tls_send+0x138>)
 8018c18:	681b      	ldr	r3, [r3, #0]
 8018c1a:	2b03      	cmp	r3, #3
 8018c1c:	dd26      	ble.n	8018c6c <mg_tls_send+0x114>
 8018c1e:	4b1d      	ldr	r3, [pc, #116]	@ (8018c94 <mg_tls_send+0x13c>)
 8018c20:	f243 02fc 	movw	r2, #12540	@ 0x30fc
 8018c24:	491c      	ldr	r1, [pc, #112]	@ (8018c98 <mg_tls_send+0x140>)
 8018c26:	2004      	movs	r0, #4
 8018c28:	f7f3 fc04 	bl	800c434 <mg_log_prefix>
 8018c2c:	68fb      	ldr	r3, [r7, #12]
 8018c2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	69bb      	ldr	r3, [r7, #24]
 8018c34:	68db      	ldr	r3, [r3, #12]
 8018c36:	461c      	mov	r4, r3
 8018c38:	7dfb      	ldrb	r3, [r7, #23]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d001      	beq.n	8018c42 <mg_tls_send+0xea>
 8018c3e:	2354      	movs	r3, #84	@ 0x54
 8018c40:	e000      	b.n	8018c44 <mg_tls_send+0xec>
 8018c42:	2374      	movs	r3, #116	@ 0x74
 8018c44:	68fa      	ldr	r2, [r7, #12]
 8018c46:	f892 20ad 	ldrb.w	r2, [r2, #173]	@ 0xad
 8018c4a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8018c4e:	b2d2      	uxtb	r2, r2
 8018c50:	2a00      	cmp	r2, #0
 8018c52:	d001      	beq.n	8018c58 <mg_tls_send+0x100>
 8018c54:	2254      	movs	r2, #84	@ 0x54
 8018c56:	e000      	b.n	8018c5a <mg_tls_send+0x102>
 8018c58:	2274      	movs	r2, #116	@ 0x74
 8018c5a:	9202      	str	r2, [sp, #8]
 8018c5c:	9301      	str	r3, [sp, #4]
 8018c5e:	69fb      	ldr	r3, [r7, #28]
 8018c60:	9300      	str	r3, [sp, #0]
 8018c62:	4623      	mov	r3, r4
 8018c64:	4602      	mov	r2, r0
 8018c66:	480d      	ldr	r0, [pc, #52]	@ (8018c9c <mg_tls_send+0x144>)
 8018c68:	f7f3 fc34 	bl	800c4d4 <mg_log>
              n, was_throttled ? 'T' : 't', c->is_tls_throttled ? 'T' : 't'));
  if (n == MG_IO_ERR) return MG_IO_ERR;
 8018c6c:	69fb      	ldr	r3, [r7, #28]
 8018c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c72:	d102      	bne.n	8018c7a <mg_tls_send+0x122>
 8018c74:	f04f 33ff 	mov.w	r3, #4294967295
 8018c78:	e006      	b.n	8018c88 <mg_tls_send+0x130>
  if (was_throttled) return MG_IO_WAIT;  // sent throttled data instead
 8018c7a:	7dfb      	ldrb	r3, [r7, #23]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d002      	beq.n	8018c86 <mg_tls_send+0x12e>
 8018c80:	f06f 0301 	mvn.w	r3, #1
 8018c84:	e000      	b.n	8018c88 <mg_tls_send+0x130>
  return (long) len;  // return len even when throttled, already encripted that
 8018c86:	687b      	ldr	r3, [r7, #4]
}
 8018c88:	4618      	mov	r0, r3
 8018c8a:	3724      	adds	r7, #36	@ 0x24
 8018c8c:	46bd      	mov	sp, r7
 8018c8e:	bd90      	pop	{r4, r7, pc}
 8018c90:	24000258 	.word	0x24000258
 8018c94:	0802830c 	.word	0x0802830c
 8018c98:	08024478 	.word	0x08024478
 8018c9c:	08026bc8 	.word	0x08026bc8

08018ca0 <mg_tls_recv>:

long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b088      	sub	sp, #32
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	60f8      	str	r0, [r7, #12]
 8018ca8:	60b9      	str	r1, [r7, #8]
 8018caa:	607a      	str	r2, [r7, #4]
  int r = 0;
 8018cac:	2300      	movs	r3, #0
 8018cae:	61fb      	str	r3, [r7, #28]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018cb6:	61bb      	str	r3, [r7, #24]
  unsigned char *recv_buf;
  size_t minlen;

  r = mg_tls_recv_record(c);
 8018cb8:	68f8      	ldr	r0, [r7, #12]
 8018cba:	f7fc fdab 	bl	8015814 <mg_tls_recv_record>
 8018cbe:	61f8      	str	r0, [r7, #28]
  if (r < 0) {
 8018cc0:	69fb      	ldr	r3, [r7, #28]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	da01      	bge.n	8018cca <mg_tls_recv+0x2a>
    return r;
 8018cc6:	69fb      	ldr	r3, [r7, #28]
 8018cc8:	e03a      	b.n	8018d40 <mg_tls_recv+0xa0>
  }
  recv_buf = &c->rtls.buf[tls->recv_offset];
 8018cca:	68fb      	ldr	r3, [r7, #12]
 8018ccc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8018cce:	69bb      	ldr	r3, [r7, #24]
 8018cd0:	695b      	ldr	r3, [r3, #20]
 8018cd2:	4413      	add	r3, r2
 8018cd4:	617b      	str	r3, [r7, #20]

  if (tls->content_type != MG_TLS_APP_DATA) {
 8018cd6:	69bb      	ldr	r3, [r7, #24]
 8018cd8:	7f1b      	ldrb	r3, [r3, #28]
 8018cda:	2b17      	cmp	r3, #23
 8018cdc:	d008      	beq.n	8018cf0 <mg_tls_recv+0x50>
    tls->recv_len = 0;
 8018cde:	69bb      	ldr	r3, [r7, #24]
 8018ce0:	2200      	movs	r2, #0
 8018ce2:	619a      	str	r2, [r3, #24]
    mg_tls_drop_record(c);
 8018ce4:	68f8      	ldr	r0, [r7, #12]
 8018ce6:	f7fc f926 	bl	8014f36 <mg_tls_drop_record>
    return MG_IO_WAIT;
 8018cea:	f06f 0301 	mvn.w	r3, #1
 8018cee:	e027      	b.n	8018d40 <mg_tls_recv+0xa0>
  }
  if (buf == NULL || len == 0) return 0L;
 8018cf0:	68bb      	ldr	r3, [r7, #8]
 8018cf2:	2b00      	cmp	r3, #0
 8018cf4:	d002      	beq.n	8018cfc <mg_tls_recv+0x5c>
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	2b00      	cmp	r3, #0
 8018cfa:	d101      	bne.n	8018d00 <mg_tls_recv+0x60>
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	e01f      	b.n	8018d40 <mg_tls_recv+0xa0>
  minlen = len < tls->recv_len ? len : tls->recv_len;
 8018d00:	69bb      	ldr	r3, [r7, #24]
 8018d02:	699b      	ldr	r3, [r3, #24]
 8018d04:	687a      	ldr	r2, [r7, #4]
 8018d06:	4293      	cmp	r3, r2
 8018d08:	bf28      	it	cs
 8018d0a:	4613      	movcs	r3, r2
 8018d0c:	613b      	str	r3, [r7, #16]
  memmove(buf, recv_buf, minlen);
 8018d0e:	693a      	ldr	r2, [r7, #16]
 8018d10:	6979      	ldr	r1, [r7, #20]
 8018d12:	68b8      	ldr	r0, [r7, #8]
 8018d14:	f00a fd29 	bl	802376a <memmove>
  tls->recv_offset += minlen;
 8018d18:	69bb      	ldr	r3, [r7, #24]
 8018d1a:	695a      	ldr	r2, [r3, #20]
 8018d1c:	693b      	ldr	r3, [r7, #16]
 8018d1e:	441a      	add	r2, r3
 8018d20:	69bb      	ldr	r3, [r7, #24]
 8018d22:	615a      	str	r2, [r3, #20]
  tls->recv_len -= minlen;
 8018d24:	69bb      	ldr	r3, [r7, #24]
 8018d26:	699a      	ldr	r2, [r3, #24]
 8018d28:	693b      	ldr	r3, [r7, #16]
 8018d2a:	1ad2      	subs	r2, r2, r3
 8018d2c:	69bb      	ldr	r3, [r7, #24]
 8018d2e:	619a      	str	r2, [r3, #24]
  if (tls->recv_len == 0) {
 8018d30:	69bb      	ldr	r3, [r7, #24]
 8018d32:	699b      	ldr	r3, [r3, #24]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d102      	bne.n	8018d3e <mg_tls_recv+0x9e>
    mg_tls_drop_record(c);
 8018d38:	68f8      	ldr	r0, [r7, #12]
 8018d3a:	f7fc f8fc 	bl	8014f36 <mg_tls_drop_record>
  }
  return (long) minlen;
 8018d3e:	693b      	ldr	r3, [r7, #16]
}
 8018d40:	4618      	mov	r0, r3
 8018d42:	3720      	adds	r7, #32
 8018d44:	46bd      	mov	sp, r7
 8018d46:	bd80      	pop	{r7, pc}

08018d48 <mg_tls_pending>:

size_t mg_tls_pending(struct mg_connection *c) {
 8018d48:	b480      	push	{r7}
 8018d4a:	b085      	sub	sp, #20
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018d56:	60fb      	str	r3, [r7, #12]
  return tls != NULL ? tls->recv_len : 0;
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d002      	beq.n	8018d64 <mg_tls_pending+0x1c>
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	699b      	ldr	r3, [r3, #24]
 8018d62:	e000      	b.n	8018d66 <mg_tls_pending+0x1e>
 8018d64:	2300      	movs	r3, #0
}
 8018d66:	4618      	mov	r0, r3
 8018d68:	3714      	adds	r7, #20
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d70:	4770      	bx	lr

08018d72 <mg_tls_flush>:

void mg_tls_flush(struct mg_connection *c) {
 8018d72:	b580      	push	{r7, lr}
 8018d74:	b084      	sub	sp, #16
 8018d76:	af00      	add	r7, sp, #0
 8018d78:	6078      	str	r0, [r7, #4]
  struct tls_data *tls = (struct tls_data *) c->tls;
 8018d7a:	687b      	ldr	r3, [r7, #4]
 8018d7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8018d80:	60fb      	str	r3, [r7, #12]
  long n;
  while (tls->send.len > 0 &&
 8018d82:	e006      	b.n	8018d92 <mg_tls_flush+0x20>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
    mg_iobuf_del(&tls->send, 0, (size_t) n);
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	3304      	adds	r3, #4
 8018d88:	68ba      	ldr	r2, [r7, #8]
 8018d8a:	2100      	movs	r1, #0
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	f7f2 fc85 	bl	800b69c <mg_iobuf_del>
  while (tls->send.len > 0 &&
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	68db      	ldr	r3, [r3, #12]
 8018d96:	2b00      	cmp	r3, #0
 8018d98:	d00b      	beq.n	8018db2 <mg_tls_flush+0x40>
         (n = mg_io_send(c, tls->send.buf, tls->send.len)) > 0) {
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	6859      	ldr	r1, [r3, #4]
 8018d9e:	68fb      	ldr	r3, [r7, #12]
 8018da0:	68db      	ldr	r3, [r3, #12]
 8018da2:	461a      	mov	r2, r3
 8018da4:	6878      	ldr	r0, [r7, #4]
 8018da6:	f7f5 fe9d 	bl	800eae4 <mg_io_send>
 8018daa:	60b8      	str	r0, [r7, #8]
  while (tls->send.len > 0 &&
 8018dac:	68bb      	ldr	r3, [r7, #8]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	dce8      	bgt.n	8018d84 <mg_tls_flush+0x12>
  }
}
 8018db2:	bf00      	nop
 8018db4:	3710      	adds	r7, #16
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}

08018dba <mg_tls_ctx_init>:

void mg_tls_ctx_init(struct mg_mgr *mgr) {
 8018dba:	b480      	push	{r7}
 8018dbc:	b083      	sub	sp, #12
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	6078      	str	r0, [r7, #4]
  (void) mgr;
}
 8018dc2:	bf00      	nop
 8018dc4:	370c      	adds	r7, #12
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dcc:	4770      	bx	lr
	...

08018dd0 <initialize_state>:
#endif

static void initialize_state(uint32_t state[CHACHA20_STATE_WORDS],
                             const uint8_t key[CHACHA20_KEY_SIZE],
                             const uint8_t nonce[CHACHA20_NONCE_SIZE],
                             uint32_t counter) {
 8018dd0:	b480      	push	{r7}
 8018dd2:	b085      	sub	sp, #20
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	60f8      	str	r0, [r7, #12]
 8018dd8:	60b9      	str	r1, [r7, #8]
 8018dda:	607a      	str	r2, [r7, #4]
 8018ddc:	603b      	str	r3, [r7, #0]
  static_assert(sizeof(uint32_t) == 4,
                "We don't support systems that do not conform to standard of "
                "uint32_t being exact 32bit wide");
#endif
#endif
  state[0] = 0x61707865;
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	4a2b      	ldr	r2, [pc, #172]	@ (8018e90 <initialize_state+0xc0>)
 8018de2:	601a      	str	r2, [r3, #0]
  state[1] = 0x3320646e;
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	3304      	adds	r3, #4
 8018de8:	4a2a      	ldr	r2, [pc, #168]	@ (8018e94 <initialize_state+0xc4>)
 8018dea:	601a      	str	r2, [r3, #0]
  state[2] = 0x79622d32;
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	3308      	adds	r3, #8
 8018df0:	4a29      	ldr	r2, [pc, #164]	@ (8018e98 <initialize_state+0xc8>)
 8018df2:	601a      	str	r2, [r3, #0]
  state[3] = 0x6b206574;
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	330c      	adds	r3, #12
 8018df8:	4a28      	ldr	r2, [pc, #160]	@ (8018e9c <initialize_state+0xcc>)
 8018dfa:	601a      	str	r2, [r3, #0]
  store_32_le(state[4], key);
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	3310      	adds	r3, #16
 8018e00:	68ba      	ldr	r2, [r7, #8]
 8018e02:	6812      	ldr	r2, [r2, #0]
 8018e04:	601a      	str	r2, [r3, #0]
  store_32_le(state[5], key + 4);
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	3314      	adds	r3, #20
 8018e0a:	68ba      	ldr	r2, [r7, #8]
 8018e0c:	3204      	adds	r2, #4
 8018e0e:	6812      	ldr	r2, [r2, #0]
 8018e10:	601a      	str	r2, [r3, #0]
  store_32_le(state[6], key + 8);
 8018e12:	68fb      	ldr	r3, [r7, #12]
 8018e14:	3318      	adds	r3, #24
 8018e16:	68ba      	ldr	r2, [r7, #8]
 8018e18:	3208      	adds	r2, #8
 8018e1a:	6812      	ldr	r2, [r2, #0]
 8018e1c:	601a      	str	r2, [r3, #0]
  store_32_le(state[7], key + 12);
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	331c      	adds	r3, #28
 8018e22:	68ba      	ldr	r2, [r7, #8]
 8018e24:	320c      	adds	r2, #12
 8018e26:	6812      	ldr	r2, [r2, #0]
 8018e28:	601a      	str	r2, [r3, #0]
  store_32_le(state[8], key + 16);
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	3320      	adds	r3, #32
 8018e2e:	68ba      	ldr	r2, [r7, #8]
 8018e30:	3210      	adds	r2, #16
 8018e32:	6812      	ldr	r2, [r2, #0]
 8018e34:	601a      	str	r2, [r3, #0]
  store_32_le(state[9], key + 20);
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	3324      	adds	r3, #36	@ 0x24
 8018e3a:	68ba      	ldr	r2, [r7, #8]
 8018e3c:	3214      	adds	r2, #20
 8018e3e:	6812      	ldr	r2, [r2, #0]
 8018e40:	601a      	str	r2, [r3, #0]
  store_32_le(state[10], key + 24);
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	3328      	adds	r3, #40	@ 0x28
 8018e46:	68ba      	ldr	r2, [r7, #8]
 8018e48:	3218      	adds	r2, #24
 8018e4a:	6812      	ldr	r2, [r2, #0]
 8018e4c:	601a      	str	r2, [r3, #0]
  store_32_le(state[11], key + 28);
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	332c      	adds	r3, #44	@ 0x2c
 8018e52:	68ba      	ldr	r2, [r7, #8]
 8018e54:	321c      	adds	r2, #28
 8018e56:	6812      	ldr	r2, [r2, #0]
 8018e58:	601a      	str	r2, [r3, #0]
  state[12] = counter;
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	3330      	adds	r3, #48	@ 0x30
 8018e5e:	683a      	ldr	r2, [r7, #0]
 8018e60:	601a      	str	r2, [r3, #0]
  store_32_le(state[13], nonce);
 8018e62:	68fb      	ldr	r3, [r7, #12]
 8018e64:	3334      	adds	r3, #52	@ 0x34
 8018e66:	687a      	ldr	r2, [r7, #4]
 8018e68:	6812      	ldr	r2, [r2, #0]
 8018e6a:	601a      	str	r2, [r3, #0]
  store_32_le(state[14], nonce + 4);
 8018e6c:	68fb      	ldr	r3, [r7, #12]
 8018e6e:	3338      	adds	r3, #56	@ 0x38
 8018e70:	687a      	ldr	r2, [r7, #4]
 8018e72:	3204      	adds	r2, #4
 8018e74:	6812      	ldr	r2, [r2, #0]
 8018e76:	601a      	str	r2, [r3, #0]
  store_32_le(state[15], nonce + 8);
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	333c      	adds	r3, #60	@ 0x3c
 8018e7c:	687a      	ldr	r2, [r7, #4]
 8018e7e:	3208      	adds	r2, #8
 8018e80:	6812      	ldr	r2, [r2, #0]
 8018e82:	601a      	str	r2, [r3, #0]
}
 8018e84:	bf00      	nop
 8018e86:	3714      	adds	r7, #20
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8e:	4770      	bx	lr
 8018e90:	61707865 	.word	0x61707865
 8018e94:	3320646e 	.word	0x3320646e
 8018e98:	79622d32 	.word	0x79622d32
 8018e9c:	6b206574 	.word	0x6b206574

08018ea0 <core_block>:
#define TIMES16(x)                                                          \
  x(0) x(1) x(2) x(3) x(4) x(5) x(6) x(7) x(8) x(9) x(10) x(11) x(12) x(13) \
      x(14) x(15)

static void core_block(const uint32_t *restrict start,
                       uint32_t *restrict output) {
 8018ea0:	b480      	push	{r7}
 8018ea2:	b095      	sub	sp, #84	@ 0x54
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
 8018ea8:	6039      	str	r1, [r7, #0]
  int i;
// instead of working on the output array,
// we let the compiler allocate 16 local variables on the stack
#define __LV(i) uint32_t __t##i = start[i];
  TIMES16(__LV)
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	3304      	adds	r3, #4
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	3308      	adds	r3, #8
 8018ebc:	681b      	ldr	r3, [r3, #0]
 8018ebe:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	330c      	adds	r3, #12
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	3310      	adds	r3, #16
 8018ecc:	681b      	ldr	r3, [r3, #0]
 8018ece:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	3314      	adds	r3, #20
 8018ed4:	681b      	ldr	r3, [r3, #0]
 8018ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	3318      	adds	r3, #24
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	331c      	adds	r3, #28
 8018ee4:	681b      	ldr	r3, [r3, #0]
 8018ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	3320      	adds	r3, #32
 8018eec:	681b      	ldr	r3, [r3, #0]
 8018eee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	3324      	adds	r3, #36	@ 0x24
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	3328      	adds	r3, #40	@ 0x28
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	623b      	str	r3, [r7, #32]
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	332c      	adds	r3, #44	@ 0x2c
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	61fb      	str	r3, [r7, #28]
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	3330      	adds	r3, #48	@ 0x30
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	61bb      	str	r3, [r7, #24]
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	3334      	adds	r3, #52	@ 0x34
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	617b      	str	r3, [r7, #20]
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	3338      	adds	r3, #56	@ 0x38
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	613b      	str	r3, [r7, #16]
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	333c      	adds	r3, #60	@ 0x3c
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	60fb      	str	r3, [r7, #12]

#define __Q(a, b, c, d) Qround(__t##a, __t##b, __t##c, __t##d)

  for (i = 0; i < 10; i++) {
 8018f28:	2300      	movs	r3, #0
 8018f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8018f2c:	e182      	b.n	8019234 <core_block+0x394>
    __Q(0, 4, 8, 12);
 8018f2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f32:	4413      	add	r3, r2
 8018f34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018f36:	69ba      	ldr	r2, [r7, #24]
 8018f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018f3a:	4053      	eors	r3, r2
 8018f3c:	61bb      	str	r3, [r7, #24]
 8018f3e:	69bb      	ldr	r3, [r7, #24]
 8018f40:	ea4f 4333 	mov.w	r3, r3, ror #16
 8018f44:	61bb      	str	r3, [r7, #24]
 8018f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018f48:	69bb      	ldr	r3, [r7, #24]
 8018f4a:	4413      	add	r3, r2
 8018f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018f4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f52:	4053      	eors	r3, r2
 8018f54:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f58:	ea4f 5333 	mov.w	r3, r3, ror #20
 8018f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8018f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f62:	4413      	add	r3, r2
 8018f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8018f66:	69ba      	ldr	r2, [r7, #24]
 8018f68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018f6a:	4053      	eors	r3, r2
 8018f6c:	61bb      	str	r3, [r7, #24]
 8018f6e:	69bb      	ldr	r3, [r7, #24]
 8018f70:	ea4f 6333 	mov.w	r3, r3, ror #24
 8018f74:	61bb      	str	r3, [r7, #24]
 8018f76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018f78:	69bb      	ldr	r3, [r7, #24]
 8018f7a:	4413      	add	r3, r2
 8018f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018f7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8018f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018f82:	4053      	eors	r3, r2
 8018f84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8018f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018f88:	ea4f 6373 	mov.w	r3, r3, ror #25
 8018f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
    __Q(1, 5, 9, 13);
 8018f8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018f92:	4413      	add	r3, r2
 8018f94:	647b      	str	r3, [r7, #68]	@ 0x44
 8018f96:	697a      	ldr	r2, [r7, #20]
 8018f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018f9a:	4053      	eors	r3, r2
 8018f9c:	617b      	str	r3, [r7, #20]
 8018f9e:	697b      	ldr	r3, [r7, #20]
 8018fa0:	ea4f 4333 	mov.w	r3, r3, ror #16
 8018fa4:	617b      	str	r3, [r7, #20]
 8018fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018fa8:	697b      	ldr	r3, [r7, #20]
 8018faa:	4413      	add	r3, r2
 8018fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8018fae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fb2:	4053      	eors	r3, r2
 8018fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8018fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fb8:	ea4f 5333 	mov.w	r3, r3, ror #20
 8018fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8018fbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fc2:	4413      	add	r3, r2
 8018fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8018fc6:	697a      	ldr	r2, [r7, #20]
 8018fc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018fca:	4053      	eors	r3, r2
 8018fcc:	617b      	str	r3, [r7, #20]
 8018fce:	697b      	ldr	r3, [r7, #20]
 8018fd0:	ea4f 6333 	mov.w	r3, r3, ror #24
 8018fd4:	617b      	str	r3, [r7, #20]
 8018fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018fd8:	697b      	ldr	r3, [r7, #20]
 8018fda:	4413      	add	r3, r2
 8018fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8018fde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018fe2:	4053      	eors	r3, r2
 8018fe4:	637b      	str	r3, [r7, #52]	@ 0x34
 8018fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018fe8:	ea4f 6373 	mov.w	r3, r3, ror #25
 8018fec:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(2, 6, 10, 14);
 8018fee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018ff2:	4413      	add	r3, r2
 8018ff4:	643b      	str	r3, [r7, #64]	@ 0x40
 8018ff6:	693a      	ldr	r2, [r7, #16]
 8018ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018ffa:	4053      	eors	r3, r2
 8018ffc:	613b      	str	r3, [r7, #16]
 8018ffe:	693b      	ldr	r3, [r7, #16]
 8019000:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019004:	613b      	str	r3, [r7, #16]
 8019006:	6a3a      	ldr	r2, [r7, #32]
 8019008:	693b      	ldr	r3, [r7, #16]
 801900a:	4413      	add	r3, r2
 801900c:	623b      	str	r3, [r7, #32]
 801900e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019010:	6a3b      	ldr	r3, [r7, #32]
 8019012:	4053      	eors	r3, r2
 8019014:	633b      	str	r3, [r7, #48]	@ 0x30
 8019016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019018:	ea4f 5333 	mov.w	r3, r3, ror #20
 801901c:	633b      	str	r3, [r7, #48]	@ 0x30
 801901e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019022:	4413      	add	r3, r2
 8019024:	643b      	str	r3, [r7, #64]	@ 0x40
 8019026:	693a      	ldr	r2, [r7, #16]
 8019028:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801902a:	4053      	eors	r3, r2
 801902c:	613b      	str	r3, [r7, #16]
 801902e:	693b      	ldr	r3, [r7, #16]
 8019030:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019034:	613b      	str	r3, [r7, #16]
 8019036:	6a3a      	ldr	r2, [r7, #32]
 8019038:	693b      	ldr	r3, [r7, #16]
 801903a:	4413      	add	r3, r2
 801903c:	623b      	str	r3, [r7, #32]
 801903e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019040:	6a3b      	ldr	r3, [r7, #32]
 8019042:	4053      	eors	r3, r2
 8019044:	633b      	str	r3, [r7, #48]	@ 0x30
 8019046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019048:	ea4f 6373 	mov.w	r3, r3, ror #25
 801904c:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(3, 7, 11, 15);
 801904e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019052:	4413      	add	r3, r2
 8019054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019056:	68fa      	ldr	r2, [r7, #12]
 8019058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801905a:	4053      	eors	r3, r2
 801905c:	60fb      	str	r3, [r7, #12]
 801905e:	68fb      	ldr	r3, [r7, #12]
 8019060:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019064:	60fb      	str	r3, [r7, #12]
 8019066:	69fa      	ldr	r2, [r7, #28]
 8019068:	68fb      	ldr	r3, [r7, #12]
 801906a:	4413      	add	r3, r2
 801906c:	61fb      	str	r3, [r7, #28]
 801906e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019070:	69fb      	ldr	r3, [r7, #28]
 8019072:	4053      	eors	r3, r2
 8019074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019078:	ea4f 5333 	mov.w	r3, r3, ror #20
 801907c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801907e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019082:	4413      	add	r3, r2
 8019084:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019086:	68fa      	ldr	r2, [r7, #12]
 8019088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801908a:	4053      	eors	r3, r2
 801908c:	60fb      	str	r3, [r7, #12]
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019094:	60fb      	str	r3, [r7, #12]
 8019096:	69fa      	ldr	r2, [r7, #28]
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	4413      	add	r3, r2
 801909c:	61fb      	str	r3, [r7, #28]
 801909e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80190a0:	69fb      	ldr	r3, [r7, #28]
 80190a2:	4053      	eors	r3, r2
 80190a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80190a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80190a8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80190ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(0, 5, 10, 15);
 80190ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80190b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190b2:	4413      	add	r3, r2
 80190b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80190b6:	68fa      	ldr	r2, [r7, #12]
 80190b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80190ba:	4053      	eors	r3, r2
 80190bc:	60fb      	str	r3, [r7, #12]
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	ea4f 4333 	mov.w	r3, r3, ror #16
 80190c4:	60fb      	str	r3, [r7, #12]
 80190c6:	6a3a      	ldr	r2, [r7, #32]
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	4413      	add	r3, r2
 80190cc:	623b      	str	r3, [r7, #32]
 80190ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80190d0:	6a3b      	ldr	r3, [r7, #32]
 80190d2:	4053      	eors	r3, r2
 80190d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80190d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190d8:	ea4f 5333 	mov.w	r3, r3, ror #20
 80190dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80190de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80190e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190e2:	4413      	add	r3, r2
 80190e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80190e6:	68fa      	ldr	r2, [r7, #12]
 80190e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80190ea:	4053      	eors	r3, r2
 80190ec:	60fb      	str	r3, [r7, #12]
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	ea4f 6333 	mov.w	r3, r3, ror #24
 80190f4:	60fb      	str	r3, [r7, #12]
 80190f6:	6a3a      	ldr	r2, [r7, #32]
 80190f8:	68fb      	ldr	r3, [r7, #12]
 80190fa:	4413      	add	r3, r2
 80190fc:	623b      	str	r3, [r7, #32]
 80190fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019100:	6a3b      	ldr	r3, [r7, #32]
 8019102:	4053      	eors	r3, r2
 8019104:	637b      	str	r3, [r7, #52]	@ 0x34
 8019106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019108:	ea4f 6373 	mov.w	r3, r3, ror #25
 801910c:	637b      	str	r3, [r7, #52]	@ 0x34
    __Q(1, 6, 11, 12);
 801910e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019112:	4413      	add	r3, r2
 8019114:	647b      	str	r3, [r7, #68]	@ 0x44
 8019116:	69ba      	ldr	r2, [r7, #24]
 8019118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801911a:	4053      	eors	r3, r2
 801911c:	61bb      	str	r3, [r7, #24]
 801911e:	69bb      	ldr	r3, [r7, #24]
 8019120:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019124:	61bb      	str	r3, [r7, #24]
 8019126:	69fa      	ldr	r2, [r7, #28]
 8019128:	69bb      	ldr	r3, [r7, #24]
 801912a:	4413      	add	r3, r2
 801912c:	61fb      	str	r3, [r7, #28]
 801912e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019130:	69fb      	ldr	r3, [r7, #28]
 8019132:	4053      	eors	r3, r2
 8019134:	633b      	str	r3, [r7, #48]	@ 0x30
 8019136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019138:	ea4f 5333 	mov.w	r3, r3, ror #20
 801913c:	633b      	str	r3, [r7, #48]	@ 0x30
 801913e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019142:	4413      	add	r3, r2
 8019144:	647b      	str	r3, [r7, #68]	@ 0x44
 8019146:	69ba      	ldr	r2, [r7, #24]
 8019148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801914a:	4053      	eors	r3, r2
 801914c:	61bb      	str	r3, [r7, #24]
 801914e:	69bb      	ldr	r3, [r7, #24]
 8019150:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019154:	61bb      	str	r3, [r7, #24]
 8019156:	69fa      	ldr	r2, [r7, #28]
 8019158:	69bb      	ldr	r3, [r7, #24]
 801915a:	4413      	add	r3, r2
 801915c:	61fb      	str	r3, [r7, #28]
 801915e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019160:	69fb      	ldr	r3, [r7, #28]
 8019162:	4053      	eors	r3, r2
 8019164:	633b      	str	r3, [r7, #48]	@ 0x30
 8019166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019168:	ea4f 6373 	mov.w	r3, r3, ror #25
 801916c:	633b      	str	r3, [r7, #48]	@ 0x30
    __Q(2, 7, 8, 13);
 801916e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019172:	4413      	add	r3, r2
 8019174:	643b      	str	r3, [r7, #64]	@ 0x40
 8019176:	697a      	ldr	r2, [r7, #20]
 8019178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801917a:	4053      	eors	r3, r2
 801917c:	617b      	str	r3, [r7, #20]
 801917e:	697b      	ldr	r3, [r7, #20]
 8019180:	ea4f 4333 	mov.w	r3, r3, ror #16
 8019184:	617b      	str	r3, [r7, #20]
 8019186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019188:	697b      	ldr	r3, [r7, #20]
 801918a:	4413      	add	r3, r2
 801918c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801918e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019192:	4053      	eors	r3, r2
 8019194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019198:	ea4f 5333 	mov.w	r3, r3, ror #20
 801919c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801919e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80191a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80191a2:	4413      	add	r3, r2
 80191a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80191a6:	697a      	ldr	r2, [r7, #20]
 80191a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80191aa:	4053      	eors	r3, r2
 80191ac:	617b      	str	r3, [r7, #20]
 80191ae:	697b      	ldr	r3, [r7, #20]
 80191b0:	ea4f 6333 	mov.w	r3, r3, ror #24
 80191b4:	617b      	str	r3, [r7, #20]
 80191b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80191b8:	697b      	ldr	r3, [r7, #20]
 80191ba:	4413      	add	r3, r2
 80191bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80191be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80191c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80191c2:	4053      	eors	r3, r2
 80191c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80191c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80191c8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80191cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __Q(3, 4, 9, 14);
 80191ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80191d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191d2:	4413      	add	r3, r2
 80191d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80191d6:	693a      	ldr	r2, [r7, #16]
 80191d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191da:	4053      	eors	r3, r2
 80191dc:	613b      	str	r3, [r7, #16]
 80191de:	693b      	ldr	r3, [r7, #16]
 80191e0:	ea4f 4333 	mov.w	r3, r3, ror #16
 80191e4:	613b      	str	r3, [r7, #16]
 80191e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80191e8:	693b      	ldr	r3, [r7, #16]
 80191ea:	4413      	add	r3, r2
 80191ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80191ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80191f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191f2:	4053      	eors	r3, r2
 80191f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80191f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191f8:	ea4f 5333 	mov.w	r3, r3, ror #20
 80191fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80191fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019202:	4413      	add	r3, r2
 8019204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019206:	693a      	ldr	r2, [r7, #16]
 8019208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801920a:	4053      	eors	r3, r2
 801920c:	613b      	str	r3, [r7, #16]
 801920e:	693b      	ldr	r3, [r7, #16]
 8019210:	ea4f 6333 	mov.w	r3, r3, ror #24
 8019214:	613b      	str	r3, [r7, #16]
 8019216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019218:	693b      	ldr	r3, [r7, #16]
 801921a:	4413      	add	r3, r2
 801921c:	627b      	str	r3, [r7, #36]	@ 0x24
 801921e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019222:	4053      	eors	r3, r2
 8019224:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019228:	ea4f 6373 	mov.w	r3, r3, ror #25
 801922c:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < 10; i++) {
 801922e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019230:	3301      	adds	r3, #1
 8019232:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019236:	2b09      	cmp	r3, #9
 8019238:	f77f ae79 	ble.w	8018f2e <core_block+0x8e>
  }

#define __FIN(i) output[i] = start[i] + __t##i;
  TIMES16(__FIN)
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	681a      	ldr	r2, [r3, #0]
 8019240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019242:	441a      	add	r2, r3
 8019244:	683b      	ldr	r3, [r7, #0]
 8019246:	601a      	str	r2, [r3, #0]
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	3304      	adds	r3, #4
 801924c:	6819      	ldr	r1, [r3, #0]
 801924e:	683b      	ldr	r3, [r7, #0]
 8019250:	3304      	adds	r3, #4
 8019252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019254:	440a      	add	r2, r1
 8019256:	601a      	str	r2, [r3, #0]
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	3308      	adds	r3, #8
 801925c:	6819      	ldr	r1, [r3, #0]
 801925e:	683b      	ldr	r3, [r7, #0]
 8019260:	3308      	adds	r3, #8
 8019262:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8019264:	440a      	add	r2, r1
 8019266:	601a      	str	r2, [r3, #0]
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	330c      	adds	r3, #12
 801926c:	6819      	ldr	r1, [r3, #0]
 801926e:	683b      	ldr	r3, [r7, #0]
 8019270:	330c      	adds	r3, #12
 8019272:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019274:	440a      	add	r2, r1
 8019276:	601a      	str	r2, [r3, #0]
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	3310      	adds	r3, #16
 801927c:	6819      	ldr	r1, [r3, #0]
 801927e:	683b      	ldr	r3, [r7, #0]
 8019280:	3310      	adds	r3, #16
 8019282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019284:	440a      	add	r2, r1
 8019286:	601a      	str	r2, [r3, #0]
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	3314      	adds	r3, #20
 801928c:	6819      	ldr	r1, [r3, #0]
 801928e:	683b      	ldr	r3, [r7, #0]
 8019290:	3314      	adds	r3, #20
 8019292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019294:	440a      	add	r2, r1
 8019296:	601a      	str	r2, [r3, #0]
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	3318      	adds	r3, #24
 801929c:	6819      	ldr	r1, [r3, #0]
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	3318      	adds	r3, #24
 80192a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80192a4:	440a      	add	r2, r1
 80192a6:	601a      	str	r2, [r3, #0]
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	331c      	adds	r3, #28
 80192ac:	6819      	ldr	r1, [r3, #0]
 80192ae:	683b      	ldr	r3, [r7, #0]
 80192b0:	331c      	adds	r3, #28
 80192b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80192b4:	440a      	add	r2, r1
 80192b6:	601a      	str	r2, [r3, #0]
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	3320      	adds	r3, #32
 80192bc:	6819      	ldr	r1, [r3, #0]
 80192be:	683b      	ldr	r3, [r7, #0]
 80192c0:	3320      	adds	r3, #32
 80192c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80192c4:	440a      	add	r2, r1
 80192c6:	601a      	str	r2, [r3, #0]
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	3324      	adds	r3, #36	@ 0x24
 80192cc:	6819      	ldr	r1, [r3, #0]
 80192ce:	683b      	ldr	r3, [r7, #0]
 80192d0:	3324      	adds	r3, #36	@ 0x24
 80192d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80192d4:	440a      	add	r2, r1
 80192d6:	601a      	str	r2, [r3, #0]
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	3328      	adds	r3, #40	@ 0x28
 80192dc:	6819      	ldr	r1, [r3, #0]
 80192de:	683b      	ldr	r3, [r7, #0]
 80192e0:	3328      	adds	r3, #40	@ 0x28
 80192e2:	6a3a      	ldr	r2, [r7, #32]
 80192e4:	440a      	add	r2, r1
 80192e6:	601a      	str	r2, [r3, #0]
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	332c      	adds	r3, #44	@ 0x2c
 80192ec:	6819      	ldr	r1, [r3, #0]
 80192ee:	683b      	ldr	r3, [r7, #0]
 80192f0:	332c      	adds	r3, #44	@ 0x2c
 80192f2:	69fa      	ldr	r2, [r7, #28]
 80192f4:	440a      	add	r2, r1
 80192f6:	601a      	str	r2, [r3, #0]
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	3330      	adds	r3, #48	@ 0x30
 80192fc:	6819      	ldr	r1, [r3, #0]
 80192fe:	683b      	ldr	r3, [r7, #0]
 8019300:	3330      	adds	r3, #48	@ 0x30
 8019302:	69ba      	ldr	r2, [r7, #24]
 8019304:	440a      	add	r2, r1
 8019306:	601a      	str	r2, [r3, #0]
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	3334      	adds	r3, #52	@ 0x34
 801930c:	6819      	ldr	r1, [r3, #0]
 801930e:	683b      	ldr	r3, [r7, #0]
 8019310:	3334      	adds	r3, #52	@ 0x34
 8019312:	697a      	ldr	r2, [r7, #20]
 8019314:	440a      	add	r2, r1
 8019316:	601a      	str	r2, [r3, #0]
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	3338      	adds	r3, #56	@ 0x38
 801931c:	6819      	ldr	r1, [r3, #0]
 801931e:	683b      	ldr	r3, [r7, #0]
 8019320:	3338      	adds	r3, #56	@ 0x38
 8019322:	693a      	ldr	r2, [r7, #16]
 8019324:	440a      	add	r2, r1
 8019326:	601a      	str	r2, [r3, #0]
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	333c      	adds	r3, #60	@ 0x3c
 801932c:	6819      	ldr	r1, [r3, #0]
 801932e:	683b      	ldr	r3, [r7, #0]
 8019330:	333c      	adds	r3, #60	@ 0x3c
 8019332:	68fa      	ldr	r2, [r7, #12]
 8019334:	440a      	add	r2, r1
 8019336:	601a      	str	r2, [r3, #0]
}
 8019338:	bf00      	nop
 801933a:	3754      	adds	r7, #84	@ 0x54
 801933c:	46bd      	mov	sp, r7
 801933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019342:	4770      	bx	lr

08019344 <xor_block>:
  for (i = 0; i < words; i++) {                                   \
    xor32_le(index8_32(dest, i), index8_32(source, i), (pad) + i) \
  }

static void xor_block(uint8_t *restrict dest, const uint8_t *restrict source,
                      const uint32_t *restrict pad, unsigned int chunk_size) {
 8019344:	b480      	push	{r7}
 8019346:	b089      	sub	sp, #36	@ 0x24
 8019348:	af00      	add	r7, sp, #0
 801934a:	60f8      	str	r0, [r7, #12]
 801934c:	60b9      	str	r1, [r7, #8]
 801934e:	607a      	str	r2, [r7, #4]
 8019350:	603b      	str	r3, [r7, #0]
  unsigned int i, full_blocks = chunk_size / (unsigned int) sizeof(uint32_t);
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	089b      	lsrs	r3, r3, #2
 8019356:	61bb      	str	r3, [r7, #24]
  // have to be carefull, we are going back from uint32 to uint8, so endianness
  // matters again
  xor32_blocks(dest, source, pad, full_blocks)
 8019358:	2300      	movs	r3, #0
 801935a:	61fb      	str	r3, [r7, #28]
 801935c:	e016      	b.n	801938c <xor_block+0x48>
 801935e:	69fb      	ldr	r3, [r7, #28]
 8019360:	009b      	lsls	r3, r3, #2
 8019362:	68ba      	ldr	r2, [r7, #8]
 8019364:	4413      	add	r3, r2
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	617b      	str	r3, [r7, #20]
 801936a:	69fb      	ldr	r3, [r7, #28]
 801936c:	009b      	lsls	r3, r3, #2
 801936e:	687a      	ldr	r2, [r7, #4]
 8019370:	4413      	add	r3, r2
 8019372:	681a      	ldr	r2, [r3, #0]
 8019374:	697b      	ldr	r3, [r7, #20]
 8019376:	4053      	eors	r3, r2
 8019378:	617b      	str	r3, [r7, #20]
 801937a:	69fb      	ldr	r3, [r7, #28]
 801937c:	009b      	lsls	r3, r3, #2
 801937e:	68fa      	ldr	r2, [r7, #12]
 8019380:	4413      	add	r3, r2
 8019382:	697a      	ldr	r2, [r7, #20]
 8019384:	601a      	str	r2, [r3, #0]
 8019386:	69fb      	ldr	r3, [r7, #28]
 8019388:	3301      	adds	r3, #1
 801938a:	61fb      	str	r3, [r7, #28]
 801938c:	69fa      	ldr	r2, [r7, #28]
 801938e:	69bb      	ldr	r3, [r7, #24]
 8019390:	429a      	cmp	r2, r3
 8019392:	d3e4      	bcc.n	801935e <xor_block+0x1a>

      dest += full_blocks * sizeof(uint32_t);
 8019394:	69bb      	ldr	r3, [r7, #24]
 8019396:	009b      	lsls	r3, r3, #2
 8019398:	68fa      	ldr	r2, [r7, #12]
 801939a:	4413      	add	r3, r2
 801939c:	60fb      	str	r3, [r7, #12]
  source += full_blocks * sizeof(uint32_t);
 801939e:	69bb      	ldr	r3, [r7, #24]
 80193a0:	009b      	lsls	r3, r3, #2
 80193a2:	68ba      	ldr	r2, [r7, #8]
 80193a4:	4413      	add	r3, r2
 80193a6:	60bb      	str	r3, [r7, #8]
  pad += full_blocks;
 80193a8:	69bb      	ldr	r3, [r7, #24]
 80193aa:	009b      	lsls	r3, r3, #2
 80193ac:	687a      	ldr	r2, [r7, #4]
 80193ae:	4413      	add	r3, r2
 80193b0:	607b      	str	r3, [r7, #4]

  switch (chunk_size % sizeof(uint32_t)) {
 80193b2:	683b      	ldr	r3, [r7, #0]
 80193b4:	f003 0303 	and.w	r3, r3, #3
 80193b8:	2b03      	cmp	r3, #3
 80193ba:	d026      	beq.n	801940a <xor_block+0xc6>
 80193bc:	2b03      	cmp	r3, #3
 80193be:	d846      	bhi.n	801944e <xor_block+0x10a>
 80193c0:	2b01      	cmp	r3, #1
 80193c2:	d002      	beq.n	80193ca <xor_block+0x86>
 80193c4:	2b02      	cmp	r3, #2
 80193c6:	d00a      	beq.n	80193de <xor_block+0x9a>
      dest[0] = source[0] ^ U8(*pad);
      dest[1] = source[1] ^ U8(*pad >> 8);
      dest[2] = source[2] ^ U8(*pad >> 16);
      break;
  }
}
 80193c8:	e041      	b.n	801944e <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 80193ca:	68bb      	ldr	r3, [r7, #8]
 80193cc:	781a      	ldrb	r2, [r3, #0]
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	b2db      	uxtb	r3, r3
 80193d4:	4053      	eors	r3, r2
 80193d6:	b2da      	uxtb	r2, r3
 80193d8:	68fb      	ldr	r3, [r7, #12]
 80193da:	701a      	strb	r2, [r3, #0]
      break;
 80193dc:	e037      	b.n	801944e <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 80193de:	68bb      	ldr	r3, [r7, #8]
 80193e0:	781a      	ldrb	r2, [r3, #0]
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	b2db      	uxtb	r3, r3
 80193e8:	4053      	eors	r3, r2
 80193ea:	b2da      	uxtb	r2, r3
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 80193f0:	68bb      	ldr	r3, [r7, #8]
 80193f2:	3301      	adds	r3, #1
 80193f4:	7819      	ldrb	r1, [r3, #0]
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	0a1b      	lsrs	r3, r3, #8
 80193fc:	b2da      	uxtb	r2, r3
 80193fe:	68fb      	ldr	r3, [r7, #12]
 8019400:	3301      	adds	r3, #1
 8019402:	404a      	eors	r2, r1
 8019404:	b2d2      	uxtb	r2, r2
 8019406:	701a      	strb	r2, [r3, #0]
      break;
 8019408:	e021      	b.n	801944e <xor_block+0x10a>
      dest[0] = source[0] ^ U8(*pad);
 801940a:	68bb      	ldr	r3, [r7, #8]
 801940c:	781a      	ldrb	r2, [r3, #0]
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	681b      	ldr	r3, [r3, #0]
 8019412:	b2db      	uxtb	r3, r3
 8019414:	4053      	eors	r3, r2
 8019416:	b2da      	uxtb	r2, r3
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	701a      	strb	r2, [r3, #0]
      dest[1] = source[1] ^ U8(*pad >> 8);
 801941c:	68bb      	ldr	r3, [r7, #8]
 801941e:	3301      	adds	r3, #1
 8019420:	7819      	ldrb	r1, [r3, #0]
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	0a1b      	lsrs	r3, r3, #8
 8019428:	b2da      	uxtb	r2, r3
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	3301      	adds	r3, #1
 801942e:	404a      	eors	r2, r1
 8019430:	b2d2      	uxtb	r2, r2
 8019432:	701a      	strb	r2, [r3, #0]
      dest[2] = source[2] ^ U8(*pad >> 16);
 8019434:	68bb      	ldr	r3, [r7, #8]
 8019436:	3302      	adds	r3, #2
 8019438:	7819      	ldrb	r1, [r3, #0]
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	0c1b      	lsrs	r3, r3, #16
 8019440:	b2da      	uxtb	r2, r3
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	3302      	adds	r3, #2
 8019446:	404a      	eors	r2, r1
 8019448:	b2d2      	uxtb	r2, r2
 801944a:	701a      	strb	r2, [r3, #0]
      break;
 801944c:	bf00      	nop
}
 801944e:	bf00      	nop
 8019450:	3724      	adds	r7, #36	@ 0x24
 8019452:	46bd      	mov	sp, r7
 8019454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019458:	4770      	bx	lr

0801945a <chacha20_xor_stream>:

static void chacha20_xor_stream(uint8_t *restrict dest,
                                const uint8_t *restrict source, size_t length,
                                const uint8_t key[CHACHA20_KEY_SIZE],
                                const uint8_t nonce[CHACHA20_NONCE_SIZE],
                                uint32_t counter) {
 801945a:	b580      	push	{r7, lr}
 801945c:	b0aa      	sub	sp, #168	@ 0xa8
 801945e:	af00      	add	r7, sp, #0
 8019460:	60f8      	str	r0, [r7, #12]
 8019462:	60b9      	str	r1, [r7, #8]
 8019464:	607a      	str	r2, [r7, #4]
 8019466:	603b      	str	r3, [r7, #0]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t pad[CHACHA20_STATE_WORDS];
  size_t i, b, last_block, full_blocks = length / CHACHA20_BLOCK_SIZE;
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	099b      	lsrs	r3, r3, #6
 801946c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  initialize_state(state, key, nonce, counter);
 8019470:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8019474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019478:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801947c:	6839      	ldr	r1, [r7, #0]
 801947e:	f7ff fca7 	bl	8018dd0 <initialize_state>
  for (b = 0; b < full_blocks; b++) {
 8019482:	2300      	movs	r3, #0
 8019484:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8019488:	e03c      	b.n	8019504 <chacha20_xor_stream+0xaa>
    core_block(state, pad);
 801948a:	f107 0218 	add.w	r2, r7, #24
 801948e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8019492:	4611      	mov	r1, r2
 8019494:	4618      	mov	r0, r3
 8019496:	f7ff fd03 	bl	8018ea0 <core_block>
    increment_counter(state);
 801949a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801949e:	3301      	adds	r3, #1
 80194a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    xor32_blocks(dest, source, pad, CHACHA20_STATE_WORDS) dest +=
 80194a4:	2300      	movs	r3, #0
 80194a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80194aa:	e01c      	b.n	80194e6 <chacha20_xor_stream+0x8c>
 80194ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80194b0:	009b      	lsls	r3, r3, #2
 80194b2:	68ba      	ldr	r2, [r7, #8]
 80194b4:	4413      	add	r3, r2
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	617b      	str	r3, [r7, #20]
 80194ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80194be:	009b      	lsls	r3, r3, #2
 80194c0:	f107 0218 	add.w	r2, r7, #24
 80194c4:	4413      	add	r3, r2
 80194c6:	681a      	ldr	r2, [r3, #0]
 80194c8:	697b      	ldr	r3, [r7, #20]
 80194ca:	4053      	eors	r3, r2
 80194cc:	617b      	str	r3, [r7, #20]
 80194ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80194d2:	009b      	lsls	r3, r3, #2
 80194d4:	68fa      	ldr	r2, [r7, #12]
 80194d6:	4413      	add	r3, r2
 80194d8:	697a      	ldr	r2, [r7, #20]
 80194da:	601a      	str	r2, [r3, #0]
 80194dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80194e0:	3301      	adds	r3, #1
 80194e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80194e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80194ea:	2b0f      	cmp	r3, #15
 80194ec:	d9de      	bls.n	80194ac <chacha20_xor_stream+0x52>
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	3340      	adds	r3, #64	@ 0x40
 80194f2:	60fb      	str	r3, [r7, #12]
        CHACHA20_BLOCK_SIZE;
    source += CHACHA20_BLOCK_SIZE;
 80194f4:	68bb      	ldr	r3, [r7, #8]
 80194f6:	3340      	adds	r3, #64	@ 0x40
 80194f8:	60bb      	str	r3, [r7, #8]
  for (b = 0; b < full_blocks; b++) {
 80194fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80194fe:	3301      	adds	r3, #1
 8019500:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8019504:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8019508:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801950c:	429a      	cmp	r2, r3
 801950e:	d3bc      	bcc.n	801948a <chacha20_xor_stream+0x30>
  }
  last_block = length % CHACHA20_BLOCK_SIZE;
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019516:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (last_block > 0) {
 801951a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801951e:	2b00      	cmp	r3, #0
 8019520:	d00f      	beq.n	8019542 <chacha20_xor_stream+0xe8>
    core_block(state, pad);
 8019522:	f107 0218 	add.w	r2, r7, #24
 8019526:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801952a:	4611      	mov	r1, r2
 801952c:	4618      	mov	r0, r3
 801952e:	f7ff fcb7 	bl	8018ea0 <core_block>
    xor_block(dest, source, pad, (unsigned int) last_block);
 8019532:	f107 0218 	add.w	r2, r7, #24
 8019536:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801953a:	68b9      	ldr	r1, [r7, #8]
 801953c:	68f8      	ldr	r0, [r7, #12]
 801953e:	f7ff ff01 	bl	8019344 <xor_block>
  }
}
 8019542:	bf00      	nop
 8019544:	37a8      	adds	r7, #168	@ 0xa8
 8019546:	46bd      	mov	sp, r7
 8019548:	bd80      	pop	{r7, pc}

0801954a <rfc8439_keygen>:
  }
#endif

static void rfc8439_keygen(uint8_t poly_key[32],
                           const uint8_t key[CHACHA20_KEY_SIZE],
                           const uint8_t nonce[CHACHA20_NONCE_SIZE]) {
 801954a:	b580      	push	{r7, lr}
 801954c:	b0a4      	sub	sp, #144	@ 0x90
 801954e:	af00      	add	r7, sp, #0
 8019550:	60f8      	str	r0, [r7, #12]
 8019552:	60b9      	str	r1, [r7, #8]
 8019554:	607a      	str	r2, [r7, #4]
  uint32_t state[CHACHA20_STATE_WORDS];
  uint32_t result[CHACHA20_STATE_WORDS];
  size_t i;
  initialize_state(state, key, nonce, 0);
 8019556:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801955a:	2300      	movs	r3, #0
 801955c:	687a      	ldr	r2, [r7, #4]
 801955e:	68b9      	ldr	r1, [r7, #8]
 8019560:	f7ff fc36 	bl	8018dd0 <initialize_state>
  core_block(state, result);
 8019564:	f107 0210 	add.w	r2, r7, #16
 8019568:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801956c:	4611      	mov	r1, r2
 801956e:	4618      	mov	r0, r3
 8019570:	f7ff fc96 	bl	8018ea0 <core_block>
  serialize(poly_key, result);
 8019574:	f107 0310 	add.w	r3, r7, #16
 8019578:	2220      	movs	r2, #32
 801957a:	4619      	mov	r1, r3
 801957c:	68f8      	ldr	r0, [r7, #12]
 801957e:	f00a fa44 	bl	8023a0a <memcpy>
  (void) i;
}
 8019582:	bf00      	nop
 8019584:	3790      	adds	r7, #144	@ 0x90
 8019586:	46bd      	mov	sp, r7
 8019588:	bd80      	pop	{r7, pc}

0801958a <U8TO32>:
  unsigned char final;
} poly1305_state_internal_t;

/* interpret four 8 bit unsigned integers as a 32 bit unsigned integer in little
 * endian */
static unsigned long U8TO32(const unsigned char *p) {
 801958a:	b480      	push	{r7}
 801958c:	b083      	sub	sp, #12
 801958e:	af00      	add	r7, sp, #0
 8019590:	6078      	str	r0, [r7, #4]
  return (((unsigned long) (p[0] & 0xff)) |
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	781b      	ldrb	r3, [r3, #0]
 8019596:	461a      	mov	r2, r3
          ((unsigned long) (p[1] & 0xff) << 8) |
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	3301      	adds	r3, #1
 801959c:	781b      	ldrb	r3, [r3, #0]
 801959e:	021b      	lsls	r3, r3, #8
  return (((unsigned long) (p[0] & 0xff)) |
 80195a0:	431a      	orrs	r2, r3
          ((unsigned long) (p[2] & 0xff) << 16) |
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	3302      	adds	r3, #2
 80195a6:	781b      	ldrb	r3, [r3, #0]
 80195a8:	041b      	lsls	r3, r3, #16
          ((unsigned long) (p[1] & 0xff) << 8) |
 80195aa:	431a      	orrs	r2, r3
          ((unsigned long) (p[3] & 0xff) << 24));
 80195ac:	687b      	ldr	r3, [r7, #4]
 80195ae:	3303      	adds	r3, #3
 80195b0:	781b      	ldrb	r3, [r3, #0]
 80195b2:	061b      	lsls	r3, r3, #24
          ((unsigned long) (p[2] & 0xff) << 16) |
 80195b4:	4313      	orrs	r3, r2
}
 80195b6:	4618      	mov	r0, r3
 80195b8:	370c      	adds	r7, #12
 80195ba:	46bd      	mov	sp, r7
 80195bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c0:	4770      	bx	lr

080195c2 <U32TO8>:

/* store a 32 bit unsigned integer as four 8 bit unsigned integers in little
 * endian */
static void U32TO8(unsigned char *p, unsigned long v) {
 80195c2:	b480      	push	{r7}
 80195c4:	b083      	sub	sp, #12
 80195c6:	af00      	add	r7, sp, #0
 80195c8:	6078      	str	r0, [r7, #4]
 80195ca:	6039      	str	r1, [r7, #0]
  p[0] = (unsigned char) ((v) &0xff);
 80195cc:	683b      	ldr	r3, [r7, #0]
 80195ce:	b2da      	uxtb	r2, r3
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	701a      	strb	r2, [r3, #0]
  p[1] = (unsigned char) ((v >> 8) & 0xff);
 80195d4:	683b      	ldr	r3, [r7, #0]
 80195d6:	0a1a      	lsrs	r2, r3, #8
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	3301      	adds	r3, #1
 80195dc:	b2d2      	uxtb	r2, r2
 80195de:	701a      	strb	r2, [r3, #0]
  p[2] = (unsigned char) ((v >> 16) & 0xff);
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	0c1a      	lsrs	r2, r3, #16
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	3302      	adds	r3, #2
 80195e8:	b2d2      	uxtb	r2, r2
 80195ea:	701a      	strb	r2, [r3, #0]
  p[3] = (unsigned char) ((v >> 24) & 0xff);
 80195ec:	683b      	ldr	r3, [r7, #0]
 80195ee:	0e1a      	lsrs	r2, r3, #24
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	3303      	adds	r3, #3
 80195f4:	b2d2      	uxtb	r2, r2
 80195f6:	701a      	strb	r2, [r3, #0]
}
 80195f8:	bf00      	nop
 80195fa:	370c      	adds	r7, #12
 80195fc:	46bd      	mov	sp, r7
 80195fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019602:	4770      	bx	lr

08019604 <poly1305_init>:

static void poly1305_init(poly1305_context *ctx, const unsigned char key[32]) {
 8019604:	b580      	push	{r7, lr}
 8019606:	b084      	sub	sp, #16
 8019608:	af00      	add	r7, sp, #0
 801960a:	6078      	str	r0, [r7, #4]
 801960c:	6039      	str	r1, [r7, #0]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	60fb      	str	r3, [r7, #12]

  /* r &= 0xffffffc0ffffffc0ffffffc0fffffff */
  st->r[0] = (U8TO32(&key[0])) & 0x3ffffff;
 8019612:	6838      	ldr	r0, [r7, #0]
 8019614:	f7ff ffb9 	bl	801958a <U8TO32>
 8019618:	4603      	mov	r3, r0
 801961a:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	601a      	str	r2, [r3, #0]
  st->r[1] = (U8TO32(&key[3]) >> 2) & 0x3ffff03;
 8019622:	683b      	ldr	r3, [r7, #0]
 8019624:	3303      	adds	r3, #3
 8019626:	4618      	mov	r0, r3
 8019628:	f7ff ffaf 	bl	801958a <U8TO32>
 801962c:	4603      	mov	r3, r0
 801962e:	089a      	lsrs	r2, r3, #2
 8019630:	4b2f      	ldr	r3, [pc, #188]	@ (80196f0 <poly1305_init+0xec>)
 8019632:	4013      	ands	r3, r2
 8019634:	68fa      	ldr	r2, [r7, #12]
 8019636:	6053      	str	r3, [r2, #4]
  st->r[2] = (U8TO32(&key[6]) >> 4) & 0x3ffc0ff;
 8019638:	683b      	ldr	r3, [r7, #0]
 801963a:	3306      	adds	r3, #6
 801963c:	4618      	mov	r0, r3
 801963e:	f7ff ffa4 	bl	801958a <U8TO32>
 8019642:	4603      	mov	r3, r0
 8019644:	091a      	lsrs	r2, r3, #4
 8019646:	4b2b      	ldr	r3, [pc, #172]	@ (80196f4 <poly1305_init+0xf0>)
 8019648:	4013      	ands	r3, r2
 801964a:	68fa      	ldr	r2, [r7, #12]
 801964c:	6093      	str	r3, [r2, #8]
  st->r[3] = (U8TO32(&key[9]) >> 6) & 0x3f03fff;
 801964e:	683b      	ldr	r3, [r7, #0]
 8019650:	3309      	adds	r3, #9
 8019652:	4618      	mov	r0, r3
 8019654:	f7ff ff99 	bl	801958a <U8TO32>
 8019658:	4603      	mov	r3, r0
 801965a:	099a      	lsrs	r2, r3, #6
 801965c:	4b26      	ldr	r3, [pc, #152]	@ (80196f8 <poly1305_init+0xf4>)
 801965e:	4013      	ands	r3, r2
 8019660:	68fa      	ldr	r2, [r7, #12]
 8019662:	60d3      	str	r3, [r2, #12]
  st->r[4] = (U8TO32(&key[12]) >> 8) & 0x00fffff;
 8019664:	683b      	ldr	r3, [r7, #0]
 8019666:	330c      	adds	r3, #12
 8019668:	4618      	mov	r0, r3
 801966a:	f7ff ff8e 	bl	801958a <U8TO32>
 801966e:	4603      	mov	r3, r0
 8019670:	0a1b      	lsrs	r3, r3, #8
 8019672:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	611a      	str	r2, [r3, #16]

  /* h = 0 */
  st->h[0] = 0;
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	2200      	movs	r2, #0
 801967e:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	2200      	movs	r2, #0
 8019684:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	2200      	movs	r2, #0
 801968a:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	2200      	movs	r2, #0
 8019690:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	2200      	movs	r2, #0
 8019696:	625a      	str	r2, [r3, #36]	@ 0x24

  /* save pad for later */
  st->pad[0] = U8TO32(&key[16]);
 8019698:	683b      	ldr	r3, [r7, #0]
 801969a:	3310      	adds	r3, #16
 801969c:	4618      	mov	r0, r3
 801969e:	f7ff ff74 	bl	801958a <U8TO32>
 80196a2:	4602      	mov	r2, r0
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = U8TO32(&key[20]);
 80196a8:	683b      	ldr	r3, [r7, #0]
 80196aa:	3314      	adds	r3, #20
 80196ac:	4618      	mov	r0, r3
 80196ae:	f7ff ff6c 	bl	801958a <U8TO32>
 80196b2:	4602      	mov	r2, r0
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = U8TO32(&key[24]);
 80196b8:	683b      	ldr	r3, [r7, #0]
 80196ba:	3318      	adds	r3, #24
 80196bc:	4618      	mov	r0, r3
 80196be:	f7ff ff64 	bl	801958a <U8TO32>
 80196c2:	4602      	mov	r2, r0
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = U8TO32(&key[28]);
 80196c8:	683b      	ldr	r3, [r7, #0]
 80196ca:	331c      	adds	r3, #28
 80196cc:	4618      	mov	r0, r3
 80196ce:	f7ff ff5c 	bl	801958a <U8TO32>
 80196d2:	4602      	mov	r2, r0
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	635a      	str	r2, [r3, #52]	@ 0x34

  st->leftover = 0;
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	2200      	movs	r2, #0
 80196dc:	639a      	str	r2, [r3, #56]	@ 0x38
  st->final = 0;
 80196de:	68fb      	ldr	r3, [r7, #12]
 80196e0:	2200      	movs	r2, #0
 80196e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
}
 80196e6:	bf00      	nop
 80196e8:	3710      	adds	r7, #16
 80196ea:	46bd      	mov	sp, r7
 80196ec:	bd80      	pop	{r7, pc}
 80196ee:	bf00      	nop
 80196f0:	03ffff03 	.word	0x03ffff03
 80196f4:	03ffc0ff 	.word	0x03ffc0ff
 80196f8:	03f03fff 	.word	0x03f03fff

080196fc <poly1305_blocks>:

static void poly1305_blocks(poly1305_state_internal_t *st,
                            const unsigned char *m, size_t bytes) {
 80196fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019700:	f5ad 7d68 	sub.w	sp, sp, #928	@ 0x3a0
 8019704:	af00      	add	r7, sp, #0
 8019706:	f8c7 032c 	str.w	r0, [r7, #812]	@ 0x32c
 801970a:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 801970e:	f8c7 2324 	str.w	r2, [r7, #804]	@ 0x324
  const unsigned long hibit = (st->final) ? 0 : (1UL << 24); /* 1 << 128 */
 8019712:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8019716:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 801971a:	2b00      	cmp	r3, #0
 801971c:	d001      	beq.n	8019722 <poly1305_blocks+0x26>
 801971e:	2300      	movs	r3, #0
 8019720:	e001      	b.n	8019726 <poly1305_blocks+0x2a>
 8019722:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8019726:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
  unsigned long s1, s2, s3, s4;
  unsigned long h0, h1, h2, h3, h4;
  uint64_t d0, d1, d2, d3, d4;
  unsigned long c;

  r0 = st->r[0];
 801972a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
  r1 = st->r[1];
 8019734:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8019738:	685b      	ldr	r3, [r3, #4]
 801973a:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
  r2 = st->r[2];
 801973e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8019742:	689b      	ldr	r3, [r3, #8]
 8019744:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
  r3 = st->r[3];
 8019748:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801974c:	68db      	ldr	r3, [r3, #12]
 801974e:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
  r4 = st->r[4];
 8019752:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8019756:	691b      	ldr	r3, [r3, #16]
 8019758:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374

  s1 = r1 * 5;
 801975c:	f8d7 2380 	ldr.w	r2, [r7, #896]	@ 0x380
 8019760:	4613      	mov	r3, r2
 8019762:	009b      	lsls	r3, r3, #2
 8019764:	4413      	add	r3, r2
 8019766:	f8c7 3370 	str.w	r3, [r7, #880]	@ 0x370
  s2 = r2 * 5;
 801976a:	f8d7 237c 	ldr.w	r2, [r7, #892]	@ 0x37c
 801976e:	4613      	mov	r3, r2
 8019770:	009b      	lsls	r3, r3, #2
 8019772:	4413      	add	r3, r2
 8019774:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
  s3 = r3 * 5;
 8019778:	f8d7 2378 	ldr.w	r2, [r7, #888]	@ 0x378
 801977c:	4613      	mov	r3, r2
 801977e:	009b      	lsls	r3, r3, #2
 8019780:	4413      	add	r3, r2
 8019782:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
  s4 = r4 * 5;
 8019786:	f8d7 2374 	ldr.w	r2, [r7, #884]	@ 0x374
 801978a:	4613      	mov	r3, r2
 801978c:	009b      	lsls	r3, r3, #2
 801978e:	4413      	add	r3, r2
 8019790:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364

  h0 = st->h[0];
 8019794:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8019798:	695b      	ldr	r3, [r3, #20]
 801979a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
  h1 = st->h[1];
 801979e:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80197a2:	699b      	ldr	r3, [r3, #24]
 80197a4:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
  h2 = st->h[2];
 80197a8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80197ac:	69db      	ldr	r3, [r3, #28]
 80197ae:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
  h3 = st->h[3];
 80197b2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80197b6:	6a1b      	ldr	r3, [r3, #32]
 80197b8:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
  h4 = st->h[4];
 80197bc:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80197c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197c2:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

  while (bytes >= poly1305_block_size) {
 80197c6:	f000 be78 	b.w	801a4ba <poly1305_blocks+0xdbe>
    /* h += m[i] */
    h0 += (U8TO32(m + 0)) & 0x3ffffff;
 80197ca:	f8d7 0328 	ldr.w	r0, [r7, #808]	@ 0x328
 80197ce:	f7ff fedc 	bl	801958a <U8TO32>
 80197d2:	4603      	mov	r3, r0
 80197d4:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 80197d8:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 80197dc:	4413      	add	r3, r2
 80197de:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += (U8TO32(m + 3) >> 2) & 0x3ffffff;
 80197e2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80197e6:	3303      	adds	r3, #3
 80197e8:	4618      	mov	r0, r3
 80197ea:	f7ff fece 	bl	801958a <U8TO32>
 80197ee:	4603      	mov	r3, r0
 80197f0:	089b      	lsrs	r3, r3, #2
 80197f2:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 80197f6:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80197fa:	4413      	add	r3, r2
 80197fc:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    h2 += (U8TO32(m + 6) >> 4) & 0x3ffffff;
 8019800:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8019804:	3306      	adds	r3, #6
 8019806:	4618      	mov	r0, r3
 8019808:	f7ff febf 	bl	801958a <U8TO32>
 801980c:	4603      	mov	r3, r0
 801980e:	091b      	lsrs	r3, r3, #4
 8019810:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8019814:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8019818:	4413      	add	r3, r2
 801981a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    h3 += (U8TO32(m + 9) >> 6) & 0x3ffffff;
 801981e:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8019822:	3309      	adds	r3, #9
 8019824:	4618      	mov	r0, r3
 8019826:	f7ff feb0 	bl	801958a <U8TO32>
 801982a:	4603      	mov	r3, r0
 801982c:	099b      	lsrs	r3, r3, #6
 801982e:	f023 427c 	bic.w	r2, r3, #4227858432	@ 0xfc000000
 8019832:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019836:	4413      	add	r3, r2
 8019838:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    h4 += (U8TO32(m + 12) >> 8) | hibit;
 801983c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8019840:	330c      	adds	r3, #12
 8019842:	4618      	mov	r0, r3
 8019844:	f7ff fea1 	bl	801958a <U8TO32>
 8019848:	4603      	mov	r3, r0
 801984a:	0a1a      	lsrs	r2, r3, #8
 801984c:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8019850:	431a      	orrs	r2, r3
 8019852:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8019856:	4413      	add	r3, r2
 8019858:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c

    /* h *= r */
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 801985c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8019860:	2200      	movs	r2, #0
 8019862:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8019866:	f8c7 22e4 	str.w	r2, [r7, #740]	@ 0x2e4
 801986a:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801986e:	2200      	movs	r2, #0
 8019870:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8019874:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8019878:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 801987c:	460b      	mov	r3, r1
 801987e:	f8d7 22d8 	ldr.w	r2, [r7, #728]	@ 0x2d8
 8019882:	fb02 f203 	mul.w	r2, r2, r3
 8019886:	f8d7 32dc 	ldr.w	r3, [r7, #732]	@ 0x2dc
 801988a:	e9c7 01b8 	strd	r0, r1, [r7, #736]	@ 0x2e0
 801988e:	4601      	mov	r1, r0
 8019890:	fb01 f303 	mul.w	r3, r1, r3
 8019894:	4413      	add	r3, r2
 8019896:	f8d7 22e0 	ldr.w	r2, [r7, #736]	@ 0x2e0
 801989a:	f8d7 12d8 	ldr.w	r1, [r7, #728]	@ 0x2d8
 801989e:	fba2 1201 	umull	r1, r2, r2, r1
 80198a2:	f8c7 231c 	str.w	r2, [r7, #796]	@ 0x31c
 80198a6:	460a      	mov	r2, r1
 80198a8:	f8c7 2318 	str.w	r2, [r7, #792]	@ 0x318
 80198ac:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 80198b0:	4413      	add	r3, r2
 80198b2:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 80198b6:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 80198ba:	2200      	movs	r2, #0
 80198bc:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80198c0:	f8c7 22d4 	str.w	r2, [r7, #724]	@ 0x2d4
 80198c4:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80198c8:	2200      	movs	r2, #0
 80198ca:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 80198ce:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 80198d2:	e9d7 01b4 	ldrd	r0, r1, [r7, #720]	@ 0x2d0
 80198d6:	460b      	mov	r3, r1
 80198d8:	f8d7 22c8 	ldr.w	r2, [r7, #712]	@ 0x2c8
 80198dc:	fb02 f203 	mul.w	r2, r2, r3
 80198e0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	@ 0x2cc
 80198e4:	e9c7 01b4 	strd	r0, r1, [r7, #720]	@ 0x2d0
 80198e8:	4601      	mov	r1, r0
 80198ea:	fb01 f303 	mul.w	r3, r1, r3
 80198ee:	4413      	add	r3, r2
 80198f0:	f8d7 22d0 	ldr.w	r2, [r7, #720]	@ 0x2d0
 80198f4:	f8d7 12c8 	ldr.w	r1, [r7, #712]	@ 0x2c8
 80198f8:	fba2 1201 	umull	r1, r2, r2, r1
 80198fc:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8019900:	460a      	mov	r2, r1
 8019902:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 8019906:	f8d7 22c4 	ldr.w	r2, [r7, #708]	@ 0x2c4
 801990a:	4413      	add	r3, r2
 801990c:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8019910:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8019914:	e9d7 01b0 	ldrd	r0, r1, [r7, #704]	@ 0x2c0
 8019918:	4602      	mov	r2, r0
 801991a:	189b      	adds	r3, r3, r2
 801991c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8019920:	f8d7 331c 	ldr.w	r3, [r7, #796]	@ 0x31c
 8019924:	460a      	mov	r2, r1
 8019926:	4153      	adcs	r3, r2
 8019928:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 801992c:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019930:	2200      	movs	r2, #0
 8019932:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8019936:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 801993a:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 801993e:	2200      	movs	r2, #0
 8019940:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8019944:	f8c7 22b4 	str.w	r2, [r7, #692]	@ 0x2b4
 8019948:	e9d7 01ae 	ldrd	r0, r1, [r7, #696]	@ 0x2b8
 801994c:	460b      	mov	r3, r1
 801994e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8019952:	fb02 f203 	mul.w	r2, r2, r3
 8019956:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 801995a:	e9c7 01ae 	strd	r0, r1, [r7, #696]	@ 0x2b8
 801995e:	4601      	mov	r1, r0
 8019960:	fb01 f303 	mul.w	r3, r1, r3
 8019964:	4413      	add	r3, r2
 8019966:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 801996a:	f8d7 12b0 	ldr.w	r1, [r7, #688]	@ 0x2b0
 801996e:	fba2 1201 	umull	r1, r2, r2, r1
 8019972:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8019976:	460a      	mov	r2, r1
 8019978:	f8c7 2310 	str.w	r2, [r7, #784]	@ 0x310
 801997c:	f8d7 2314 	ldr.w	r2, [r7, #788]	@ 0x314
 8019980:	4413      	add	r3, r2
 8019982:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8019986:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801998a:	2200      	movs	r2, #0
 801998c:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8019990:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8019994:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019998:	2200      	movs	r2, #0
 801999a:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 801999e:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 80199a2:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 80199a6:	460b      	mov	r3, r1
 80199a8:	f8d7 22a0 	ldr.w	r2, [r7, #672]	@ 0x2a0
 80199ac:	fb02 f203 	mul.w	r2, r2, r3
 80199b0:	f8d7 32a4 	ldr.w	r3, [r7, #676]	@ 0x2a4
 80199b4:	e9c7 01aa 	strd	r0, r1, [r7, #680]	@ 0x2a8
 80199b8:	4601      	mov	r1, r0
 80199ba:	fb01 f303 	mul.w	r3, r1, r3
 80199be:	4413      	add	r3, r2
 80199c0:	f8d7 22a8 	ldr.w	r2, [r7, #680]	@ 0x2a8
 80199c4:	f8d7 12a0 	ldr.w	r1, [r7, #672]	@ 0x2a0
 80199c8:	fba2 1201 	umull	r1, r2, r2, r1
 80199cc:	f8c7 229c 	str.w	r2, [r7, #668]	@ 0x29c
 80199d0:	460a      	mov	r2, r1
 80199d2:	f8c7 2298 	str.w	r2, [r7, #664]	@ 0x298
 80199d6:	f8d7 229c 	ldr.w	r2, [r7, #668]	@ 0x29c
 80199da:	4413      	add	r3, r2
 80199dc:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80199e0:	f8d7 3310 	ldr.w	r3, [r7, #784]	@ 0x310
 80199e4:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 80199e8:	4602      	mov	r2, r0
 80199ea:	189b      	adds	r3, r3, r2
 80199ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80199ee:	f8d7 3314 	ldr.w	r3, [r7, #788]	@ 0x314
 80199f2:	460a      	mov	r2, r1
 80199f4:	4153      	adcs	r3, r2
 80199f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80199f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80199fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8019a00:	4602      	mov	r2, r0
 8019a02:	189b      	adds	r3, r3, r2
 8019a04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8019a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019a0c:	460a      	mov	r2, r1
 8019a0e:	4153      	adcs	r3, r2
 8019a10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         ((uint64_t) h3 * s2) + ((uint64_t) h4 * s1);
 8019a14:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8019a18:	2200      	movs	r2, #0
 8019a1a:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 8019a1e:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8019a22:	f8d7 3370 	ldr.w	r3, [r7, #880]	@ 0x370
 8019a26:	2200      	movs	r2, #0
 8019a28:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8019a2c:	f8c7 228c 	str.w	r2, [r7, #652]	@ 0x28c
 8019a30:	e9d7 01a4 	ldrd	r0, r1, [r7, #656]	@ 0x290
 8019a34:	460b      	mov	r3, r1
 8019a36:	f8d7 2288 	ldr.w	r2, [r7, #648]	@ 0x288
 8019a3a:	fb02 f203 	mul.w	r2, r2, r3
 8019a3e:	f8d7 328c 	ldr.w	r3, [r7, #652]	@ 0x28c
 8019a42:	e9c7 01a4 	strd	r0, r1, [r7, #656]	@ 0x290
 8019a46:	4601      	mov	r1, r0
 8019a48:	fb01 f303 	mul.w	r3, r1, r3
 8019a4c:	4413      	add	r3, r2
 8019a4e:	f8d7 2290 	ldr.w	r2, [r7, #656]	@ 0x290
 8019a52:	f8d7 1288 	ldr.w	r1, [r7, #648]	@ 0x288
 8019a56:	fba2 1201 	umull	r1, r2, r2, r1
 8019a5a:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8019a5e:	460a      	mov	r2, r1
 8019a60:	f8c7 2280 	str.w	r2, [r7, #640]	@ 0x280
 8019a64:	f8d7 2284 	ldr.w	r2, [r7, #644]	@ 0x284
 8019a68:	4413      	add	r3, r2
 8019a6a:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
    d0 = ((uint64_t) h0 * r0) + ((uint64_t) h1 * s4) + ((uint64_t) h2 * s3) +
 8019a6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8019a72:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8019a76:	4602      	mov	r2, r0
 8019a78:	189b      	adds	r3, r3, r2
 8019a7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8019a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8019a80:	460a      	mov	r2, r1
 8019a82:	4153      	adcs	r3, r2
 8019a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8019a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8019a8a:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8019a8e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8019a92:	2200      	movs	r2, #0
 8019a94:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
 8019a98:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 8019a9c:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8019aa0:	2200      	movs	r2, #0
 8019aa2:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8019aa6:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 8019aaa:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	@ 0x278
 8019aae:	460b      	mov	r3, r1
 8019ab0:	f8d7 2270 	ldr.w	r2, [r7, #624]	@ 0x270
 8019ab4:	fb02 f203 	mul.w	r2, r2, r3
 8019ab8:	f8d7 3274 	ldr.w	r3, [r7, #628]	@ 0x274
 8019abc:	e9c7 019e 	strd	r0, r1, [r7, #632]	@ 0x278
 8019ac0:	4601      	mov	r1, r0
 8019ac2:	fb01 f303 	mul.w	r3, r1, r3
 8019ac6:	4413      	add	r3, r2
 8019ac8:	f8d7 2278 	ldr.w	r2, [r7, #632]	@ 0x278
 8019acc:	f8d7 1270 	ldr.w	r1, [r7, #624]	@ 0x270
 8019ad0:	fba2 1201 	umull	r1, r2, r2, r1
 8019ad4:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8019ad8:	460a      	mov	r2, r1
 8019ada:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 8019ade:	f8d7 230c 	ldr.w	r2, [r7, #780]	@ 0x30c
 8019ae2:	4413      	add	r3, r2
 8019ae4:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8019ae8:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8019aec:	2200      	movs	r2, #0
 8019aee:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8019af2:	f8c7 226c 	str.w	r2, [r7, #620]	@ 0x26c
 8019af6:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8019afa:	2200      	movs	r2, #0
 8019afc:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8019b00:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8019b04:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8019b08:	460b      	mov	r3, r1
 8019b0a:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 8019b0e:	fb02 f203 	mul.w	r2, r2, r3
 8019b12:	f8d7 3264 	ldr.w	r3, [r7, #612]	@ 0x264
 8019b16:	e9c7 019a 	strd	r0, r1, [r7, #616]	@ 0x268
 8019b1a:	4601      	mov	r1, r0
 8019b1c:	fb01 f303 	mul.w	r3, r1, r3
 8019b20:	4413      	add	r3, r2
 8019b22:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8019b26:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 8019b2a:	fba2 1201 	umull	r1, r2, r2, r1
 8019b2e:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 8019b32:	460a      	mov	r2, r1
 8019b34:	f8c7 2258 	str.w	r2, [r7, #600]	@ 0x258
 8019b38:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8019b3c:	4413      	add	r3, r2
 8019b3e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8019b42:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8019b46:	e9d7 0196 	ldrd	r0, r1, [r7, #600]	@ 0x258
 8019b4a:	4602      	mov	r2, r0
 8019b4c:	189b      	adds	r3, r3, r2
 8019b4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8019b52:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8019b56:	460a      	mov	r2, r1
 8019b58:	4153      	adcs	r3, r2
 8019b5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8019b5e:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019b62:	2200      	movs	r2, #0
 8019b64:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8019b68:	f8c7 2254 	str.w	r2, [r7, #596]	@ 0x254
 8019b6c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019b70:	2200      	movs	r2, #0
 8019b72:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8019b76:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8019b7a:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8019b7e:	460b      	mov	r3, r1
 8019b80:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8019b84:	fb02 f203 	mul.w	r2, r2, r3
 8019b88:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8019b8c:	e9c7 0194 	strd	r0, r1, [r7, #592]	@ 0x250
 8019b90:	4601      	mov	r1, r0
 8019b92:	fb01 f303 	mul.w	r3, r1, r3
 8019b96:	4413      	add	r3, r2
 8019b98:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8019b9c:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 8019ba0:	fba2 1201 	umull	r1, r2, r2, r1
 8019ba4:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 8019ba8:	460a      	mov	r2, r1
 8019baa:	f8c7 2300 	str.w	r2, [r7, #768]	@ 0x300
 8019bae:	f8d7 2304 	ldr.w	r2, [r7, #772]	@ 0x304
 8019bb2:	4413      	add	r3, r2
 8019bb4:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8019bb8:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8019bbc:	2200      	movs	r2, #0
 8019bbe:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8019bc2:	f8c7 2244 	str.w	r2, [r7, #580]	@ 0x244
 8019bc6:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8019bca:	2200      	movs	r2, #0
 8019bcc:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8019bd0:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8019bd4:	e9d7 0190 	ldrd	r0, r1, [r7, #576]	@ 0x240
 8019bd8:	460b      	mov	r3, r1
 8019bda:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 8019bde:	fb02 f203 	mul.w	r2, r2, r3
 8019be2:	f8d7 323c 	ldr.w	r3, [r7, #572]	@ 0x23c
 8019be6:	e9c7 0190 	strd	r0, r1, [r7, #576]	@ 0x240
 8019bea:	4601      	mov	r1, r0
 8019bec:	fb01 f303 	mul.w	r3, r1, r3
 8019bf0:	4413      	add	r3, r2
 8019bf2:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 8019bf6:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 8019bfa:	fba2 1201 	umull	r1, r2, r2, r1
 8019bfe:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 8019c02:	460a      	mov	r2, r1
 8019c04:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 8019c08:	f8d7 2234 	ldr.w	r2, [r7, #564]	@ 0x234
 8019c0c:	4413      	add	r3, r2
 8019c0e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8019c12:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8019c16:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	@ 0x230
 8019c1a:	4602      	mov	r2, r0
 8019c1c:	189b      	adds	r3, r3, r2
 8019c1e:	663b      	str	r3, [r7, #96]	@ 0x60
 8019c20:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 8019c24:	460a      	mov	r2, r1
 8019c26:	4153      	adcs	r3, r2
 8019c28:	667b      	str	r3, [r7, #100]	@ 0x64
 8019c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8019c2e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	@ 0x60
 8019c32:	4602      	mov	r2, r0
 8019c34:	189b      	adds	r3, r3, r2
 8019c36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8019c3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8019c3e:	460a      	mov	r2, r1
 8019c40:	4153      	adcs	r3, r2
 8019c42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         ((uint64_t) h3 * s3) + ((uint64_t) h4 * s2);
 8019c46:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8019c50:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8019c54:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8019c58:	2200      	movs	r2, #0
 8019c5a:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8019c5e:	f8c7 2224 	str.w	r2, [r7, #548]	@ 0x224
 8019c62:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	@ 0x228
 8019c66:	460b      	mov	r3, r1
 8019c68:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8019c6c:	fb02 f203 	mul.w	r2, r2, r3
 8019c70:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 8019c74:	e9c7 018a 	strd	r0, r1, [r7, #552]	@ 0x228
 8019c78:	4601      	mov	r1, r0
 8019c7a:	fb01 f303 	mul.w	r3, r1, r3
 8019c7e:	4413      	add	r3, r2
 8019c80:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8019c84:	f8d7 1220 	ldr.w	r1, [r7, #544]	@ 0x220
 8019c88:	fba2 1201 	umull	r1, r2, r2, r1
 8019c8c:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8019c90:	460a      	mov	r2, r1
 8019c92:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8019c96:	f8d7 221c 	ldr.w	r2, [r7, #540]	@ 0x21c
 8019c9a:	4413      	add	r3, r2
 8019c9c:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
    d1 = ((uint64_t) h0 * r1) + ((uint64_t) h1 * r0) + ((uint64_t) h2 * s4) +
 8019ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8019ca4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	@ 0x218
 8019ca8:	4602      	mov	r2, r0
 8019caa:	189b      	adds	r3, r3, r2
 8019cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019cae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8019cb2:	460a      	mov	r2, r1
 8019cb4:	4153      	adcs	r3, r2
 8019cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8019cbc:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8019cc0:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8019cca:	f8c7 2214 	str.w	r2, [r7, #532]	@ 0x214
 8019cce:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8019cd8:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 8019cdc:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	@ 0x210
 8019ce0:	460b      	mov	r3, r1
 8019ce2:	f8d7 2208 	ldr.w	r2, [r7, #520]	@ 0x208
 8019ce6:	fb02 f203 	mul.w	r2, r2, r3
 8019cea:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8019cee:	e9c7 0184 	strd	r0, r1, [r7, #528]	@ 0x210
 8019cf2:	4601      	mov	r1, r0
 8019cf4:	fb01 f303 	mul.w	r3, r1, r3
 8019cf8:	4413      	add	r3, r2
 8019cfa:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8019cfe:	f8d7 1208 	ldr.w	r1, [r7, #520]	@ 0x208
 8019d02:	fba2 1201 	umull	r1, r2, r2, r1
 8019d06:	f8c7 22fc 	str.w	r2, [r7, #764]	@ 0x2fc
 8019d0a:	460a      	mov	r2, r1
 8019d0c:	f8c7 22f8 	str.w	r2, [r7, #760]	@ 0x2f8
 8019d10:	f8d7 22fc 	ldr.w	r2, [r7, #764]	@ 0x2fc
 8019d14:	4413      	add	r3, r2
 8019d16:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8019d1a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8019d1e:	2200      	movs	r2, #0
 8019d20:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
 8019d24:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8019d28:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8019d2c:	2200      	movs	r2, #0
 8019d2e:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 8019d32:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 8019d36:	e9d7 0180 	ldrd	r0, r1, [r7, #512]	@ 0x200
 8019d3a:	460b      	mov	r3, r1
 8019d3c:	f8d7 21f8 	ldr.w	r2, [r7, #504]	@ 0x1f8
 8019d40:	fb02 f203 	mul.w	r2, r2, r3
 8019d44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8019d48:	e9c7 0180 	strd	r0, r1, [r7, #512]	@ 0x200
 8019d4c:	4601      	mov	r1, r0
 8019d4e:	fb01 f303 	mul.w	r3, r1, r3
 8019d52:	4413      	add	r3, r2
 8019d54:	f8d7 2200 	ldr.w	r2, [r7, #512]	@ 0x200
 8019d58:	f8d7 11f8 	ldr.w	r1, [r7, #504]	@ 0x1f8
 8019d5c:	fba2 1201 	umull	r1, r2, r2, r1
 8019d60:	f8c7 21f4 	str.w	r2, [r7, #500]	@ 0x1f4
 8019d64:	460a      	mov	r2, r1
 8019d66:	f8c7 21f0 	str.w	r2, [r7, #496]	@ 0x1f0
 8019d6a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	@ 0x1f4
 8019d6e:	4413      	add	r3, r2
 8019d70:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8019d74:	f8d7 32f8 	ldr.w	r3, [r7, #760]	@ 0x2f8
 8019d78:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 8019d7c:	4602      	mov	r2, r0
 8019d7e:	189b      	adds	r3, r3, r2
 8019d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8019d84:	f8d7 32fc 	ldr.w	r3, [r7, #764]	@ 0x2fc
 8019d88:	460a      	mov	r2, r1
 8019d8a:	4153      	adcs	r3, r2
 8019d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 8019d90:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019d94:	2200      	movs	r2, #0
 8019d96:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8019d9a:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 8019d9e:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8019da2:	2200      	movs	r2, #0
 8019da4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8019da8:	f8c7 21e4 	str.w	r2, [r7, #484]	@ 0x1e4
 8019dac:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	@ 0x1e8
 8019db0:	460b      	mov	r3, r1
 8019db2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 8019db6:	fb02 f203 	mul.w	r2, r2, r3
 8019dba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8019dbe:	e9c7 017a 	strd	r0, r1, [r7, #488]	@ 0x1e8
 8019dc2:	4601      	mov	r1, r0
 8019dc4:	fb01 f303 	mul.w	r3, r1, r3
 8019dc8:	4413      	add	r3, r2
 8019dca:	f8d7 21e8 	ldr.w	r2, [r7, #488]	@ 0x1e8
 8019dce:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 8019dd2:	fba2 1201 	umull	r1, r2, r2, r1
 8019dd6:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 8019dda:	460a      	mov	r2, r1
 8019ddc:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 8019de0:	f8d7 22f4 	ldr.w	r2, [r7, #756]	@ 0x2f4
 8019de4:	4413      	add	r3, r2
 8019de6:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8019dea:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8019dee:	2200      	movs	r2, #0
 8019df0:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8019df4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8019df8:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8019dfc:	2200      	movs	r2, #0
 8019dfe:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8019e02:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8019e06:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 8019e0a:	460b      	mov	r3, r1
 8019e0c:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8019e10:	fb02 f203 	mul.w	r2, r2, r3
 8019e14:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8019e18:	e9c7 0176 	strd	r0, r1, [r7, #472]	@ 0x1d8
 8019e1c:	4601      	mov	r1, r0
 8019e1e:	fb01 f303 	mul.w	r3, r1, r3
 8019e22:	4413      	add	r3, r2
 8019e24:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8019e28:	f8d7 11d0 	ldr.w	r1, [r7, #464]	@ 0x1d0
 8019e2c:	fba2 1201 	umull	r1, r2, r2, r1
 8019e30:	f8c7 21cc 	str.w	r2, [r7, #460]	@ 0x1cc
 8019e34:	460a      	mov	r2, r1
 8019e36:	f8c7 21c8 	str.w	r2, [r7, #456]	@ 0x1c8
 8019e3a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8019e3e:	4413      	add	r3, r2
 8019e40:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8019e44:	f8d7 32f0 	ldr.w	r3, [r7, #752]	@ 0x2f0
 8019e48:	e9d7 0172 	ldrd	r0, r1, [r7, #456]	@ 0x1c8
 8019e4c:	4602      	mov	r2, r0
 8019e4e:	189b      	adds	r3, r3, r2
 8019e50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8019e52:	f8d7 32f4 	ldr.w	r3, [r7, #756]	@ 0x2f4
 8019e56:	460a      	mov	r2, r1
 8019e58:	4153      	adcs	r3, r2
 8019e5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8019e5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8019e60:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8019e64:	4602      	mov	r2, r0
 8019e66:	189b      	adds	r3, r3, r2
 8019e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8019e6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8019e70:	460a      	mov	r2, r1
 8019e72:	4153      	adcs	r3, r2
 8019e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
         ((uint64_t) h3 * s4) + ((uint64_t) h4 * s3);
 8019e78:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8019e7c:	2200      	movs	r2, #0
 8019e7e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8019e82:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 8019e86:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8019e8a:	2200      	movs	r2, #0
 8019e8c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8019e90:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8019e94:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8019e98:	460b      	mov	r3, r1
 8019e9a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8019e9e:	fb02 f203 	mul.w	r2, r2, r3
 8019ea2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8019ea6:	e9c7 0170 	strd	r0, r1, [r7, #448]	@ 0x1c0
 8019eaa:	4601      	mov	r1, r0
 8019eac:	fb01 f303 	mul.w	r3, r1, r3
 8019eb0:	4413      	add	r3, r2
 8019eb2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8019eb6:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 8019eba:	fba2 1201 	umull	r1, r2, r2, r1
 8019ebe:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 8019ec2:	460a      	mov	r2, r1
 8019ec4:	f8c7 21b0 	str.w	r2, [r7, #432]	@ 0x1b0
 8019ec8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8019ecc:	4413      	add	r3, r2
 8019ece:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
    d2 = ((uint64_t) h0 * r2) + ((uint64_t) h1 * r1) + ((uint64_t) h2 * r0) +
 8019ed2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8019ed6:	e9d7 016c 	ldrd	r0, r1, [r7, #432]	@ 0x1b0
 8019eda:	4602      	mov	r2, r0
 8019edc:	189b      	adds	r3, r3, r2
 8019ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8019ee0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8019ee4:	460a      	mov	r2, r1
 8019ee6:	4153      	adcs	r3, r2
 8019ee8:	637b      	str	r3, [r7, #52]	@ 0x34
 8019eea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8019eee:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 8019ef2:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8019ef6:	2200      	movs	r2, #0
 8019ef8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8019efc:	f8c7 21ac 	str.w	r2, [r7, #428]	@ 0x1ac
 8019f00:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8019f04:	2200      	movs	r2, #0
 8019f06:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8019f0a:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8019f0e:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 8019f12:	460b      	mov	r3, r1
 8019f14:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8019f18:	fb02 f203 	mul.w	r2, r2, r3
 8019f1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8019f20:	e9c7 016a 	strd	r0, r1, [r7, #424]	@ 0x1a8
 8019f24:	4601      	mov	r1, r0
 8019f26:	fb01 f303 	mul.w	r3, r1, r3
 8019f2a:	4413      	add	r3, r2
 8019f2c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8019f30:	f8d7 11a0 	ldr.w	r1, [r7, #416]	@ 0x1a0
 8019f34:	fba2 1201 	umull	r1, r2, r2, r1
 8019f38:	f8c7 22ec 	str.w	r2, [r7, #748]	@ 0x2ec
 8019f3c:	460a      	mov	r2, r1
 8019f3e:	f8c7 22e8 	str.w	r2, [r7, #744]	@ 0x2e8
 8019f42:	f8d7 22ec 	ldr.w	r2, [r7, #748]	@ 0x2ec
 8019f46:	4413      	add	r3, r2
 8019f48:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8019f4c:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8019f50:	2200      	movs	r2, #0
 8019f52:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8019f56:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8019f5a:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8019f5e:	2200      	movs	r2, #0
 8019f60:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8019f64:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8019f68:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8019f6c:	460b      	mov	r3, r1
 8019f6e:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8019f72:	fb02 f203 	mul.w	r2, r2, r3
 8019f76:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8019f7a:	e9c7 0166 	strd	r0, r1, [r7, #408]	@ 0x198
 8019f7e:	4601      	mov	r1, r0
 8019f80:	fb01 f303 	mul.w	r3, r1, r3
 8019f84:	4413      	add	r3, r2
 8019f86:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8019f8a:	f8d7 1190 	ldr.w	r1, [r7, #400]	@ 0x190
 8019f8e:	fba2 1201 	umull	r1, r2, r2, r1
 8019f92:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 8019f96:	460a      	mov	r2, r1
 8019f98:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 8019f9c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8019fa0:	4413      	add	r3, r2
 8019fa2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8019fa6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	@ 0x2e8
 8019faa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8019fae:	4602      	mov	r2, r0
 8019fb0:	189b      	adds	r3, r3, r2
 8019fb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8019fb6:	f8d7 32ec 	ldr.w	r3, [r7, #748]	@ 0x2ec
 8019fba:	460a      	mov	r2, r1
 8019fbc:	4153      	adcs	r3, r2
 8019fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 8019fc2:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8019fc6:	2200      	movs	r2, #0
 8019fc8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8019fcc:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 8019fd0:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8019fd4:	2200      	movs	r2, #0
 8019fd6:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8019fda:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8019fde:	e9d7 0160 	ldrd	r0, r1, [r7, #384]	@ 0x180
 8019fe2:	460b      	mov	r3, r1
 8019fe4:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8019fe8:	fb02 f203 	mul.w	r2, r2, r3
 8019fec:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8019ff0:	e9c7 0160 	strd	r0, r1, [r7, #384]	@ 0x180
 8019ff4:	4601      	mov	r1, r0
 8019ff6:	fb01 f303 	mul.w	r3, r1, r3
 8019ffa:	4413      	add	r3, r2
 8019ffc:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 801a000:	f8d7 1178 	ldr.w	r1, [r7, #376]	@ 0x178
 801a004:	fba2 ab01 	umull	sl, fp, r2, r1
 801a008:	445b      	add	r3, fp
 801a00a:	469b      	mov	fp, r3
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801a00c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801a010:	2200      	movs	r2, #0
 801a012:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 801a016:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 801a01a:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801a01e:	2200      	movs	r2, #0
 801a020:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 801a024:	f8c7 216c 	str.w	r2, [r7, #364]	@ 0x16c
 801a028:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	@ 0x170
 801a02c:	460b      	mov	r3, r1
 801a02e:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 801a032:	fb02 f203 	mul.w	r2, r2, r3
 801a036:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 801a03a:	e9c7 015c 	strd	r0, r1, [r7, #368]	@ 0x170
 801a03e:	4601      	mov	r1, r0
 801a040:	fb01 f303 	mul.w	r3, r1, r3
 801a044:	4413      	add	r3, r2
 801a046:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 801a04a:	f8d7 1168 	ldr.w	r1, [r7, #360]	@ 0x168
 801a04e:	fba2 1201 	umull	r1, r2, r2, r1
 801a052:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 801a056:	460a      	mov	r2, r1
 801a058:	f8c7 2160 	str.w	r2, [r7, #352]	@ 0x160
 801a05c:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 801a060:	4413      	add	r3, r2
 801a062:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 801a066:	e9d7 1258 	ldrd	r1, r2, [r7, #352]	@ 0x160
 801a06a:	460b      	mov	r3, r1
 801a06c:	eb1a 0303 	adds.w	r3, sl, r3
 801a070:	653b      	str	r3, [r7, #80]	@ 0x50
 801a072:	4613      	mov	r3, r2
 801a074:	eb4b 0303 	adc.w	r3, fp, r3
 801a078:	657b      	str	r3, [r7, #84]	@ 0x54
 801a07a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801a07e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 801a082:	4602      	mov	r2, r0
 801a084:	189b      	adds	r3, r3, r2
 801a086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801a08a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a08e:	460a      	mov	r2, r1
 801a090:	4153      	adcs	r3, r2
 801a092:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
         ((uint64_t) h3 * r0) + ((uint64_t) h4 * s4);
 801a096:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801a09a:	2200      	movs	r2, #0
 801a09c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 801a0a0:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 801a0a4:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 801a0ae:	f8c7 2154 	str.w	r2, [r7, #340]	@ 0x154
 801a0b2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 801a0b6:	460b      	mov	r3, r1
 801a0b8:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 801a0bc:	fb02 f203 	mul.w	r2, r2, r3
 801a0c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 801a0c4:	e9c7 0156 	strd	r0, r1, [r7, #344]	@ 0x158
 801a0c8:	4601      	mov	r1, r0
 801a0ca:	fb01 f303 	mul.w	r3, r1, r3
 801a0ce:	4413      	add	r3, r2
 801a0d0:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 801a0d4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 801a0d8:	fba2 1201 	umull	r1, r2, r2, r1
 801a0dc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 801a0e0:	460a      	mov	r2, r1
 801a0e2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 801a0e6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 801a0ea:	4413      	add	r3, r2
 801a0ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    d3 = ((uint64_t) h0 * r3) + ((uint64_t) h1 * r2) + ((uint64_t) h2 * r1) +
 801a0f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a0f4:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 801a0f8:	4602      	mov	r2, r0
 801a0fa:	189b      	adds	r3, r3, r2
 801a0fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a0fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a102:	460a      	mov	r2, r1
 801a104:	4153      	adcs	r3, r2
 801a106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a108:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801a10c:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801a110:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801a114:	2200      	movs	r2, #0
 801a116:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 801a11a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 801a11e:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 801a122:	2200      	movs	r2, #0
 801a124:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 801a128:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 801a12c:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 801a130:	460b      	mov	r3, r1
 801a132:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 801a136:	fb02 f203 	mul.w	r2, r2, r3
 801a13a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 801a13e:	e9c7 0150 	strd	r0, r1, [r7, #320]	@ 0x140
 801a142:	4601      	mov	r1, r0
 801a144:	fb01 f303 	mul.w	r3, r1, r3
 801a148:	4413      	add	r3, r2
 801a14a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 801a14e:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 801a152:	fba2 8901 	umull	r8, r9, r2, r1
 801a156:	444b      	add	r3, r9
 801a158:	4699      	mov	r9, r3
 801a15a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 801a15e:	2200      	movs	r2, #0
 801a160:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801a164:	f8c7 2134 	str.w	r2, [r7, #308]	@ 0x134
 801a168:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 801a16c:	2200      	movs	r2, #0
 801a16e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 801a172:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 801a176:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 801a17a:	460b      	mov	r3, r1
 801a17c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801a180:	fb02 f203 	mul.w	r2, r2, r3
 801a184:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801a188:	e9c7 014c 	strd	r0, r1, [r7, #304]	@ 0x130
 801a18c:	4601      	mov	r1, r0
 801a18e:	fb01 f303 	mul.w	r3, r1, r3
 801a192:	4413      	add	r3, r2
 801a194:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 801a198:	f8d7 1128 	ldr.w	r1, [r7, #296]	@ 0x128
 801a19c:	fba2 1201 	umull	r1, r2, r2, r1
 801a1a0:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 801a1a4:	460a      	mov	r2, r1
 801a1a6:	f8c7 2120 	str.w	r2, [r7, #288]	@ 0x120
 801a1aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 801a1ae:	4413      	add	r3, r2
 801a1b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 801a1b4:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 801a1b8:	460b      	mov	r3, r1
 801a1ba:	eb18 0303 	adds.w	r3, r8, r3
 801a1be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a1c2:	4613      	mov	r3, r2
 801a1c4:	eb49 0303 	adc.w	r3, r9, r3
 801a1c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801a1cc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 801a1d0:	2200      	movs	r2, #0
 801a1d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 801a1d6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 801a1da:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 801a1de:	2200      	movs	r2, #0
 801a1e0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801a1e4:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 801a1e8:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 801a1ec:	460b      	mov	r3, r1
 801a1ee:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 801a1f2:	fb02 f203 	mul.w	r2, r2, r3
 801a1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801a1fa:	e9c7 0146 	strd	r0, r1, [r7, #280]	@ 0x118
 801a1fe:	4601      	mov	r1, r0
 801a200:	fb01 f303 	mul.w	r3, r1, r3
 801a204:	4413      	add	r3, r2
 801a206:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801a20a:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 801a20e:	fba2 4501 	umull	r4, r5, r2, r1
 801a212:	442b      	add	r3, r5
 801a214:	461d      	mov	r5, r3
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801a216:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 801a21a:	2200      	movs	r2, #0
 801a21c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801a220:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 801a224:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 801a228:	2200      	movs	r2, #0
 801a22a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801a22e:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 801a232:	e9d7 0142 	ldrd	r0, r1, [r7, #264]	@ 0x108
 801a236:	460b      	mov	r3, r1
 801a238:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 801a23c:	fb02 f203 	mul.w	r2, r2, r3
 801a240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 801a244:	e9c7 0142 	strd	r0, r1, [r7, #264]	@ 0x108
 801a248:	4601      	mov	r1, r0
 801a24a:	fb01 f303 	mul.w	r3, r1, r3
 801a24e:	4413      	add	r3, r2
 801a250:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 801a254:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 801a258:	fba2 1201 	umull	r1, r2, r2, r1
 801a25c:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 801a260:	460a      	mov	r2, r1
 801a262:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 801a266:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 801a26a:	4413      	add	r3, r2
 801a26c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801a270:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801a274:	460b      	mov	r3, r1
 801a276:	18e3      	adds	r3, r4, r3
 801a278:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a27a:	4613      	mov	r3, r2
 801a27c:	eb45 0303 	adc.w	r3, r5, r3
 801a280:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a282:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a286:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801a28a:	4602      	mov	r2, r0
 801a28c:	189b      	adds	r3, r3, r2
 801a28e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801a292:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a296:	460a      	mov	r2, r1
 801a298:	4153      	adcs	r3, r2
 801a29a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
         ((uint64_t) h3 * r1) + ((uint64_t) h4 * r0);
 801a29e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801a2a8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 801a2ac:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 801a2b0:	2200      	movs	r2, #0
 801a2b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801a2b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801a2ba:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	@ 0xf0
 801a2be:	460b      	mov	r3, r1
 801a2c0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 801a2c4:	fb02 f203 	mul.w	r2, r2, r3
 801a2c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 801a2cc:	e9c7 013c 	strd	r0, r1, [r7, #240]	@ 0xf0
 801a2d0:	4601      	mov	r1, r0
 801a2d2:	fb01 f303 	mul.w	r3, r1, r3
 801a2d6:	4413      	add	r3, r2
 801a2d8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 801a2dc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 801a2e0:	fba2 1201 	umull	r1, r2, r2, r1
 801a2e4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801a2e8:	460a      	mov	r2, r1
 801a2ea:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 801a2ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801a2f2:	4413      	add	r3, r2
 801a2f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    d4 = ((uint64_t) h0 * r4) + ((uint64_t) h1 * r3) + ((uint64_t) h2 * r2) +
 801a2f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a2fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 801a300:	4602      	mov	r2, r0
 801a302:	189b      	adds	r3, r3, r2
 801a304:	623b      	str	r3, [r7, #32]
 801a306:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a30a:	460a      	mov	r2, r1
 801a30c:	4153      	adcs	r3, r2
 801a30e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a310:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a314:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338

    /* (partial) h %= p */
    c = (unsigned long) (d0 >> 26);
 801a318:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 801a31c:	f04f 0000 	mov.w	r0, #0
 801a320:	f04f 0100 	mov.w	r1, #0
 801a324:	0e90      	lsrs	r0, r2, #26
 801a326:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a32a:	0e99      	lsrs	r1, r3, #26
 801a32c:	4603      	mov	r3, r0
 801a32e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = (unsigned long) d0 & 0x3ffffff;
 801a332:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 801a336:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a33a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    d1 += c;
 801a33e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a342:	2200      	movs	r2, #0
 801a344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801a348:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 801a34c:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801a350:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 801a354:	1851      	adds	r1, r2, r1
 801a356:	61b9      	str	r1, [r7, #24]
 801a358:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 801a35c:	414b      	adcs	r3, r1
 801a35e:	61fb      	str	r3, [r7, #28]
 801a360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a364:	e9c7 23d4 	strd	r2, r3, [r7, #848]	@ 0x350
    c = (unsigned long) (d1 >> 26);
 801a368:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 801a36c:	f04f 0000 	mov.w	r0, #0
 801a370:	f04f 0100 	mov.w	r1, #0
 801a374:	0e90      	lsrs	r0, r2, #26
 801a376:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a37a:	0e99      	lsrs	r1, r3, #26
 801a37c:	4603      	mov	r3, r0
 801a37e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h1 = (unsigned long) d1 & 0x3ffffff;
 801a382:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 801a386:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a38a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
    d2 += c;
 801a38e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a392:	2200      	movs	r2, #0
 801a394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a398:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801a39c:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801a3a0:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 801a3a4:	1851      	adds	r1, r2, r1
 801a3a6:	6139      	str	r1, [r7, #16]
 801a3a8:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801a3ac:	414b      	adcs	r3, r1
 801a3ae:	617b      	str	r3, [r7, #20]
 801a3b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801a3b4:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
    c = (unsigned long) (d2 >> 26);
 801a3b8:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 801a3bc:	f04f 0000 	mov.w	r0, #0
 801a3c0:	f04f 0100 	mov.w	r1, #0
 801a3c4:	0e90      	lsrs	r0, r2, #26
 801a3c6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a3ca:	0e99      	lsrs	r1, r3, #26
 801a3cc:	4603      	mov	r3, r0
 801a3ce:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h2 = (unsigned long) d2 & 0x3ffffff;
 801a3d2:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 801a3d6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a3da:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
    d3 += c;
 801a3de:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a3e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 801a3e8:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801a3ec:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a3ee:	1851      	adds	r1, r2, r1
 801a3f0:	60b9      	str	r1, [r7, #8]
 801a3f2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801a3f4:	414b      	adcs	r3, r1
 801a3f6:	60fb      	str	r3, [r7, #12]
 801a3f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801a3fc:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
    c = (unsigned long) (d3 >> 26);
 801a400:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 801a404:	f04f 0000 	mov.w	r0, #0
 801a408:	f04f 0100 	mov.w	r1, #0
 801a40c:	0e90      	lsrs	r0, r2, #26
 801a40e:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a412:	0e99      	lsrs	r1, r3, #26
 801a414:	4603      	mov	r3, r0
 801a416:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h3 = (unsigned long) d3 & 0x3ffffff;
 801a41a:	f8d7 3340 	ldr.w	r3, [r7, #832]	@ 0x340
 801a41e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a422:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
    d4 += c;
 801a426:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a42a:	2200      	movs	r2, #0
 801a42c:	673b      	str	r3, [r7, #112]	@ 0x70
 801a42e:	677a      	str	r2, [r7, #116]	@ 0x74
 801a430:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801a434:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 801a436:	1851      	adds	r1, r2, r1
 801a438:	6039      	str	r1, [r7, #0]
 801a43a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 801a43c:	414b      	adcs	r3, r1
 801a43e:	607b      	str	r3, [r7, #4]
 801a440:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a444:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
    c = (unsigned long) (d4 >> 26);
 801a448:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 801a44c:	f04f 0000 	mov.w	r0, #0
 801a450:	f04f 0100 	mov.w	r1, #0
 801a454:	0e90      	lsrs	r0, r2, #26
 801a456:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
 801a45a:	0e99      	lsrs	r1, r3, #26
 801a45c:	4603      	mov	r3, r0
 801a45e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h4 = (unsigned long) d4 & 0x3ffffff;
 801a462:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 801a466:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a46a:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    h0 += c * 5;
 801a46e:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 801a472:	4613      	mov	r3, r2
 801a474:	009b      	lsls	r3, r3, #2
 801a476:	441a      	add	r2, r3
 801a478:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801a47c:	4413      	add	r3, r2
 801a47e:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    c = (h0 >> 26);
 801a482:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801a486:	0e9b      	lsrs	r3, r3, #26
 801a488:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
    h0 = h0 & 0x3ffffff;
 801a48c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 801a490:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a494:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
    h1 += c;
 801a498:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801a49c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 801a4a0:	4413      	add	r3, r2
 801a4a2:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398

    m += poly1305_block_size;
 801a4a6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 801a4aa:	3310      	adds	r3, #16
 801a4ac:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
    bytes -= poly1305_block_size;
 801a4b0:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801a4b4:	3b10      	subs	r3, #16
 801a4b6:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
  while (bytes >= poly1305_block_size) {
 801a4ba:	f8d7 3324 	ldr.w	r3, [r7, #804]	@ 0x324
 801a4be:	2b0f      	cmp	r3, #15
 801a4c0:	f63f a983 	bhi.w	80197ca <poly1305_blocks+0xce>
  }

  st->h[0] = h0;
 801a4c4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a4c8:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 801a4cc:	615a      	str	r2, [r3, #20]
  st->h[1] = h1;
 801a4ce:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a4d2:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 801a4d6:	619a      	str	r2, [r3, #24]
  st->h[2] = h2;
 801a4d8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a4dc:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 801a4e0:	61da      	str	r2, [r3, #28]
  st->h[3] = h3;
 801a4e2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a4e6:	f8d7 2390 	ldr.w	r2, [r7, #912]	@ 0x390
 801a4ea:	621a      	str	r2, [r3, #32]
  st->h[4] = h4;
 801a4ec:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 801a4f0:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 801a4f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 801a4f6:	bf00      	nop
 801a4f8:	f507 7768 	add.w	r7, r7, #928	@ 0x3a0
 801a4fc:	46bd      	mov	sp, r7
 801a4fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801a502 <poly1305_finish>:

static POLY1305_NOINLINE void poly1305_finish(poly1305_context *ctx,
                                              unsigned char mac[16]) {
 801a502:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801a506:	b0aa      	sub	sp, #168	@ 0xa8
 801a508:	af00      	add	r7, sp, #0
 801a50a:	6678      	str	r0, [r7, #100]	@ 0x64
 801a50c:	6639      	str	r1, [r7, #96]	@ 0x60
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801a50e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a510:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  unsigned long g0, g1, g2, g3, g4;
  uint64_t f;
  unsigned long mask;

  /* process the remaining block */
  if (st->leftover) {
 801a514:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d030      	beq.n	801a580 <poly1305_finish+0x7e>
    size_t i = st->leftover;
 801a51e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a524:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    st->buffer[i++] = 1;
 801a528:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801a52c:	1c53      	adds	r3, r2, #1
 801a52e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801a532:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a536:	441a      	add	r2, r3
 801a538:	2301      	movs	r3, #1
 801a53a:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
    for (; i < poly1305_block_size; i++) st->buffer[i] = 0;
 801a53e:	e00d      	b.n	801a55c <poly1305_finish+0x5a>
 801a540:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801a544:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a548:	4413      	add	r3, r2
 801a54a:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 801a54e:	2300      	movs	r3, #0
 801a550:	7013      	strb	r3, [r2, #0]
 801a552:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a556:	3301      	adds	r3, #1
 801a558:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801a55c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a560:	2b0f      	cmp	r3, #15
 801a562:	d9ed      	bls.n	801a540 <poly1305_finish+0x3e>
    st->final = 1;
 801a564:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801a568:	2301      	movs	r3, #1
 801a56a:	f882 304c 	strb.w	r3, [r2, #76]	@ 0x4c
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801a56e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a572:	333c      	adds	r3, #60	@ 0x3c
 801a574:	2210      	movs	r2, #16
 801a576:	4619      	mov	r1, r3
 801a578:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801a57c:	f7ff f8be 	bl	80196fc <poly1305_blocks>
  }

  /* fully carry h */
  h0 = st->h[0];
 801a580:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a584:	695b      	ldr	r3, [r3, #20]
 801a586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = st->h[1];
 801a58a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a58e:	699b      	ldr	r3, [r3, #24]
 801a590:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = st->h[2];
 801a594:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a598:	69db      	ldr	r3, [r3, #28]
 801a59a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = st->h[3];
 801a59e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a5a2:	6a1b      	ldr	r3, [r3, #32]
 801a5a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = st->h[4];
 801a5a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  c = h1 >> 26;
 801a5b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a5b6:	0e9b      	lsrs	r3, r3, #26
 801a5b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h1 = h1 & 0x3ffffff;
 801a5bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a5c0:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a5c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 += c;
 801a5c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a5cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a5d0:	4413      	add	r3, r2
 801a5d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  c = h2 >> 26;
 801a5d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a5da:	0e9b      	lsrs	r3, r3, #26
 801a5dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h2 = h2 & 0x3ffffff;
 801a5e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a5e4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a5e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 += c;
 801a5ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801a5f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a5f4:	4413      	add	r3, r2
 801a5f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  c = h3 >> 26;
 801a5fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a5fe:	0e9b      	lsrs	r3, r3, #26
 801a600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h3 = h3 & 0x3ffffff;
 801a604:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a608:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a60c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 += c;
 801a610:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a614:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a618:	4413      	add	r3, r2
 801a61a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  c = h4 >> 26;
 801a61e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a622:	0e9b      	lsrs	r3, r3, #26
 801a624:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h4 = h4 & 0x3ffffff;
 801a628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a62c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a630:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  h0 += c * 5;
 801a634:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801a638:	4613      	mov	r3, r2
 801a63a:	009b      	lsls	r3, r3, #2
 801a63c:	441a      	add	r2, r3
 801a63e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a642:	4413      	add	r3, r2
 801a644:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  c = h0 >> 26;
 801a648:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a64c:	0e9b      	lsrs	r3, r3, #26
 801a64e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h0 = h0 & 0x3ffffff;
 801a652:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a656:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a65a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 += c;
 801a65e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a662:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a666:	4413      	add	r3, r2
 801a668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

  /* compute h + -p */
  g0 = h0 + 5;
 801a66c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a670:	3305      	adds	r3, #5
 801a672:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  c = g0 >> 26;
 801a676:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a67a:	0e9b      	lsrs	r3, r3, #26
 801a67c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g0 &= 0x3ffffff;
 801a680:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a684:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 = h1 + c;
 801a68c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a690:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a694:	4413      	add	r3, r2
 801a696:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  c = g1 >> 26;
 801a69a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a69e:	0e9b      	lsrs	r3, r3, #26
 801a6a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g1 &= 0x3ffffff;
 801a6a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a6a8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a6ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 = h2 + c;
 801a6b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a6b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a6b8:	4413      	add	r3, r2
 801a6ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  c = g2 >> 26;
 801a6bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a6be:	0e9b      	lsrs	r3, r3, #26
 801a6c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g2 &= 0x3ffffff;
 801a6c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a6c6:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a6ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 = h3 + c;
 801a6cc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801a6d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a6d4:	4413      	add	r3, r2
 801a6d6:	67bb      	str	r3, [r7, #120]	@ 0x78
  c = g3 >> 26;
 801a6d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a6da:	0e9b      	lsrs	r3, r3, #26
 801a6dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  g3 &= 0x3ffffff;
 801a6e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a6e2:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 801a6e6:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 = h4 + c - (1UL << 26);
 801a6e8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a6ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801a6f0:	4413      	add	r3, r2
 801a6f2:	f103 437c 	add.w	r3, r3, #4227858432	@ 0xfc000000
 801a6f6:	677b      	str	r3, [r7, #116]	@ 0x74

  /* select h if h < p, or h + -p if h >= p */
  mask = (g4 >> ((sizeof(unsigned long) * 8) - 1)) - 1;
 801a6f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a6fa:	0fdb      	lsrs	r3, r3, #31
 801a6fc:	3b01      	subs	r3, #1
 801a6fe:	673b      	str	r3, [r7, #112]	@ 0x70
  g0 &= mask;
 801a700:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a704:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a706:	4013      	ands	r3, r2
 801a708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  g1 &= mask;
 801a70c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801a710:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a712:	4013      	ands	r3, r2
 801a714:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  g2 &= mask;
 801a718:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a71a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a71c:	4013      	ands	r3, r2
 801a71e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  g3 &= mask;
 801a720:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801a722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a724:	4013      	ands	r3, r2
 801a726:	67bb      	str	r3, [r7, #120]	@ 0x78
  g4 &= mask;
 801a728:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801a72a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a72c:	4013      	ands	r3, r2
 801a72e:	677b      	str	r3, [r7, #116]	@ 0x74
  mask = ~mask;
 801a730:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a732:	43db      	mvns	r3, r3
 801a734:	673b      	str	r3, [r7, #112]	@ 0x70
  h0 = (h0 & mask) | g0;
 801a736:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801a73a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a73c:	401a      	ands	r2, r3
 801a73e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801a742:	4313      	orrs	r3, r2
 801a744:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = (h1 & mask) | g1;
 801a748:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801a74c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a74e:	401a      	ands	r2, r3
 801a750:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a754:	4313      	orrs	r3, r2
 801a756:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = (h2 & mask) | g2;
 801a75a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a75e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a760:	401a      	ands	r2, r3
 801a762:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801a764:	4313      	orrs	r3, r2
 801a766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = (h3 & mask) | g3;
 801a76a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 801a76e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a770:	401a      	ands	r2, r3
 801a772:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a774:	4313      	orrs	r3, r2
 801a776:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  h4 = (h4 & mask) | g4;
 801a77a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801a77e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a780:	401a      	ands	r2, r3
 801a782:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a784:	4313      	orrs	r3, r2
 801a786:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  /* h = h % (2^128) */
  h0 = ((h0) | (h1 << 26)) & 0xffffffff;
 801a78a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a78e:	069a      	lsls	r2, r3, #26
 801a790:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a794:	4313      	orrs	r3, r2
 801a796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  h1 = ((h1 >> 6) | (h2 << 20)) & 0xffffffff;
 801a79a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a79e:	099a      	lsrs	r2, r3, #6
 801a7a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a7a4:	051b      	lsls	r3, r3, #20
 801a7a6:	4313      	orrs	r3, r2
 801a7a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  h2 = ((h2 >> 12) | (h3 << 14)) & 0xffffffff;
 801a7ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a7b0:	0b1a      	lsrs	r2, r3, #12
 801a7b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a7b6:	039b      	lsls	r3, r3, #14
 801a7b8:	4313      	orrs	r3, r2
 801a7ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  h3 = ((h3 >> 18) | (h4 << 8)) & 0xffffffff;
 801a7be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a7c2:	0c9a      	lsrs	r2, r3, #18
 801a7c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801a7c8:	021b      	lsls	r3, r3, #8
 801a7ca:	4313      	orrs	r3, r2
 801a7cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* mac = (h + pad) % (2^128) */
  f = (uint64_t) h0 + st->pad[0];
 801a7d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801a7d4:	2200      	movs	r2, #0
 801a7d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a7d8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 801a7da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a7de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a7e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 801a7e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a7e8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 801a7ec:	4602      	mov	r2, r0
 801a7ee:	189b      	adds	r3, r3, r2
 801a7f0:	61bb      	str	r3, [r7, #24]
 801a7f2:	460b      	mov	r3, r1
 801a7f4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a7f6:	eb42 0303 	adc.w	r3, r2, r3
 801a7fa:	61fb      	str	r3, [r7, #28]
 801a7fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801a800:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
  h0 = (unsigned long) f;
 801a804:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  f = (uint64_t) h1 + st->pad[1] + (f >> 32);
 801a80a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a80e:	2200      	movs	r2, #0
 801a810:	653b      	str	r3, [r7, #80]	@ 0x50
 801a812:	657a      	str	r2, [r7, #84]	@ 0x54
 801a814:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a81a:	2200      	movs	r2, #0
 801a81c:	643b      	str	r3, [r7, #64]	@ 0x40
 801a81e:	647a      	str	r2, [r7, #68]	@ 0x44
 801a820:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a822:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 801a826:	4602      	mov	r2, r0
 801a828:	189c      	adds	r4, r3, r2
 801a82a:	460b      	mov	r3, r1
 801a82c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a82e:	eb42 0303 	adc.w	r3, r2, r3
 801a832:	461d      	mov	r5, r3
 801a834:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 801a838:	f04f 0000 	mov.w	r0, #0
 801a83c:	f04f 0100 	mov.w	r1, #0
 801a840:	0018      	movs	r0, r3
 801a842:	2100      	movs	r1, #0
 801a844:	1823      	adds	r3, r4, r0
 801a846:	613b      	str	r3, [r7, #16]
 801a848:	eb45 0301 	adc.w	r3, r5, r1
 801a84c:	617b      	str	r3, [r7, #20]
 801a84e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 801a852:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h1 = (unsigned long) f;
 801a856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  f = (uint64_t) h2 + st->pad[2] + (f >> 32);
 801a85c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801a860:	2200      	movs	r2, #0
 801a862:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a864:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801a866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a86a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a86c:	2200      	movs	r2, #0
 801a86e:	633b      	str	r3, [r7, #48]	@ 0x30
 801a870:	637a      	str	r2, [r7, #52]	@ 0x34
 801a872:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801a876:	4623      	mov	r3, r4
 801a878:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801a87c:	4602      	mov	r2, r0
 801a87e:	eb13 0a02 	adds.w	sl, r3, r2
 801a882:	462b      	mov	r3, r5
 801a884:	460a      	mov	r2, r1
 801a886:	eb43 0b02 	adc.w	fp, r3, r2
 801a88a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801a88e:	f04f 0200 	mov.w	r2, #0
 801a892:	f04f 0300 	mov.w	r3, #0
 801a896:	000a      	movs	r2, r1
 801a898:	2300      	movs	r3, #0
 801a89a:	eb1a 0102 	adds.w	r1, sl, r2
 801a89e:	60b9      	str	r1, [r7, #8]
 801a8a0:	eb4b 0303 	adc.w	r3, fp, r3
 801a8a4:	60fb      	str	r3, [r7, #12]
 801a8a6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801a8aa:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h2 = (unsigned long) f;
 801a8ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a8b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  f = (uint64_t) h3 + st->pad[3] + (f >> 32);
 801a8b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a8bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a8be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a8c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a8c4:	2200      	movs	r2, #0
 801a8c6:	623b      	str	r3, [r7, #32]
 801a8c8:	627a      	str	r2, [r7, #36]	@ 0x24
 801a8ca:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801a8ce:	4623      	mov	r3, r4
 801a8d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a8d4:	4602      	mov	r2, r0
 801a8d6:	eb13 0802 	adds.w	r8, r3, r2
 801a8da:	462b      	mov	r3, r5
 801a8dc:	460a      	mov	r2, r1
 801a8de:	eb43 0902 	adc.w	r9, r3, r2
 801a8e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801a8e6:	f04f 0200 	mov.w	r2, #0
 801a8ea:	f04f 0300 	mov.w	r3, #0
 801a8ee:	000a      	movs	r2, r1
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	eb18 0102 	adds.w	r1, r8, r2
 801a8f6:	6039      	str	r1, [r7, #0]
 801a8f8:	eb49 0303 	adc.w	r3, r9, r3
 801a8fc:	607b      	str	r3, [r7, #4]
 801a8fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 801a902:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
  h3 = (unsigned long) f;
 801a906:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a908:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  U32TO8(mac + 0, h0);
 801a90c:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801a910:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801a912:	f7fe fe56 	bl	80195c2 <U32TO8>
  U32TO8(mac + 4, h1);
 801a916:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a918:	3304      	adds	r3, #4
 801a91a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 801a91e:	4618      	mov	r0, r3
 801a920:	f7fe fe4f 	bl	80195c2 <U32TO8>
  U32TO8(mac + 8, h2);
 801a924:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a926:	3308      	adds	r3, #8
 801a928:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 801a92c:	4618      	mov	r0, r3
 801a92e:	f7fe fe48 	bl	80195c2 <U32TO8>
  U32TO8(mac + 12, h3);
 801a932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a934:	330c      	adds	r3, #12
 801a936:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801a93a:	4618      	mov	r0, r3
 801a93c:	f7fe fe41 	bl	80195c2 <U32TO8>

  /* zero out the state */
  st->h[0] = 0;
 801a940:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a944:	2200      	movs	r2, #0
 801a946:	615a      	str	r2, [r3, #20]
  st->h[1] = 0;
 801a948:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a94c:	2200      	movs	r2, #0
 801a94e:	619a      	str	r2, [r3, #24]
  st->h[2] = 0;
 801a950:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a954:	2200      	movs	r2, #0
 801a956:	61da      	str	r2, [r3, #28]
  st->h[3] = 0;
 801a958:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a95c:	2200      	movs	r2, #0
 801a95e:	621a      	str	r2, [r3, #32]
  st->h[4] = 0;
 801a960:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a964:	2200      	movs	r2, #0
 801a966:	625a      	str	r2, [r3, #36]	@ 0x24
  st->r[0] = 0;
 801a968:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a96c:	2200      	movs	r2, #0
 801a96e:	601a      	str	r2, [r3, #0]
  st->r[1] = 0;
 801a970:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a974:	2200      	movs	r2, #0
 801a976:	605a      	str	r2, [r3, #4]
  st->r[2] = 0;
 801a978:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a97c:	2200      	movs	r2, #0
 801a97e:	609a      	str	r2, [r3, #8]
  st->r[3] = 0;
 801a980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a984:	2200      	movs	r2, #0
 801a986:	60da      	str	r2, [r3, #12]
  st->r[4] = 0;
 801a988:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a98c:	2200      	movs	r2, #0
 801a98e:	611a      	str	r2, [r3, #16]
  st->pad[0] = 0;
 801a990:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a994:	2200      	movs	r2, #0
 801a996:	629a      	str	r2, [r3, #40]	@ 0x28
  st->pad[1] = 0;
 801a998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a99c:	2200      	movs	r2, #0
 801a99e:	62da      	str	r2, [r3, #44]	@ 0x2c
  st->pad[2] = 0;
 801a9a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a9a4:	2200      	movs	r2, #0
 801a9a6:	631a      	str	r2, [r3, #48]	@ 0x30
  st->pad[3] = 0;
 801a9a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	635a      	str	r2, [r3, #52]	@ 0x34
}
 801a9b0:	bf00      	nop
 801a9b2:	37a8      	adds	r7, #168	@ 0xa8
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801a9ba <poly1305_update>:
}

#endif

static void poly1305_update(poly1305_context *ctx, const unsigned char *m,
                            size_t bytes) {
 801a9ba:	b580      	push	{r7, lr}
 801a9bc:	b088      	sub	sp, #32
 801a9be:	af00      	add	r7, sp, #0
 801a9c0:	60f8      	str	r0, [r7, #12]
 801a9c2:	60b9      	str	r1, [r7, #8]
 801a9c4:	607a      	str	r2, [r7, #4]
  poly1305_state_internal_t *st = (poly1305_state_internal_t *) ctx;
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	617b      	str	r3, [r7, #20]
  size_t i;

  /* handle leftover */
  if (st->leftover) {
 801a9ca:	697b      	ldr	r3, [r7, #20]
 801a9cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d03d      	beq.n	801aa4e <poly1305_update+0x94>
    size_t want = (poly1305_block_size - st->leftover);
 801a9d2:	697b      	ldr	r3, [r7, #20]
 801a9d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a9d6:	f1c3 0310 	rsb	r3, r3, #16
 801a9da:	61bb      	str	r3, [r7, #24]
    if (want > bytes) want = bytes;
 801a9dc:	69ba      	ldr	r2, [r7, #24]
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	429a      	cmp	r2, r3
 801a9e2:	d901      	bls.n	801a9e8 <poly1305_update+0x2e>
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < want; i++) st->buffer[st->leftover + i] = m[i];
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	61fb      	str	r3, [r7, #28]
 801a9ec:	e00f      	b.n	801aa0e <poly1305_update+0x54>
 801a9ee:	68ba      	ldr	r2, [r7, #8]
 801a9f0:	69fb      	ldr	r3, [r7, #28]
 801a9f2:	441a      	add	r2, r3
 801a9f4:	697b      	ldr	r3, [r7, #20]
 801a9f6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801a9f8:	69fb      	ldr	r3, [r7, #28]
 801a9fa:	440b      	add	r3, r1
 801a9fc:	7811      	ldrb	r1, [r2, #0]
 801a9fe:	697a      	ldr	r2, [r7, #20]
 801aa00:	4413      	add	r3, r2
 801aa02:	460a      	mov	r2, r1
 801aa04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801aa08:	69fb      	ldr	r3, [r7, #28]
 801aa0a:	3301      	adds	r3, #1
 801aa0c:	61fb      	str	r3, [r7, #28]
 801aa0e:	69fa      	ldr	r2, [r7, #28]
 801aa10:	69bb      	ldr	r3, [r7, #24]
 801aa12:	429a      	cmp	r2, r3
 801aa14:	d3eb      	bcc.n	801a9ee <poly1305_update+0x34>
    bytes -= want;
 801aa16:	687a      	ldr	r2, [r7, #4]
 801aa18:	69bb      	ldr	r3, [r7, #24]
 801aa1a:	1ad3      	subs	r3, r2, r3
 801aa1c:	607b      	str	r3, [r7, #4]
    m += want;
 801aa1e:	68ba      	ldr	r2, [r7, #8]
 801aa20:	69bb      	ldr	r3, [r7, #24]
 801aa22:	4413      	add	r3, r2
 801aa24:	60bb      	str	r3, [r7, #8]
    st->leftover += want;
 801aa26:	697b      	ldr	r3, [r7, #20]
 801aa28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801aa2a:	69bb      	ldr	r3, [r7, #24]
 801aa2c:	441a      	add	r2, r3
 801aa2e:	697b      	ldr	r3, [r7, #20]
 801aa30:	639a      	str	r2, [r3, #56]	@ 0x38
    if (st->leftover < poly1305_block_size) return;
 801aa32:	697b      	ldr	r3, [r7, #20]
 801aa34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801aa36:	2b0f      	cmp	r3, #15
 801aa38:	d93e      	bls.n	801aab8 <poly1305_update+0xfe>
    poly1305_blocks(st, st->buffer, poly1305_block_size);
 801aa3a:	697b      	ldr	r3, [r7, #20]
 801aa3c:	333c      	adds	r3, #60	@ 0x3c
 801aa3e:	2210      	movs	r2, #16
 801aa40:	4619      	mov	r1, r3
 801aa42:	6978      	ldr	r0, [r7, #20]
 801aa44:	f7fe fe5a 	bl	80196fc <poly1305_blocks>
    st->leftover = 0;
 801aa48:	697b      	ldr	r3, [r7, #20]
 801aa4a:	2200      	movs	r2, #0
 801aa4c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* process full blocks */
  if (bytes >= poly1305_block_size) {
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	2b0f      	cmp	r3, #15
 801aa52:	d910      	bls.n	801aa76 <poly1305_update+0xbc>
    size_t want = (bytes & (size_t) ~(poly1305_block_size - 1));
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	f023 030f 	bic.w	r3, r3, #15
 801aa5a:	613b      	str	r3, [r7, #16]
    poly1305_blocks(st, m, want);
 801aa5c:	693a      	ldr	r2, [r7, #16]
 801aa5e:	68b9      	ldr	r1, [r7, #8]
 801aa60:	6978      	ldr	r0, [r7, #20]
 801aa62:	f7fe fe4b 	bl	80196fc <poly1305_blocks>
    m += want;
 801aa66:	68ba      	ldr	r2, [r7, #8]
 801aa68:	693b      	ldr	r3, [r7, #16]
 801aa6a:	4413      	add	r3, r2
 801aa6c:	60bb      	str	r3, [r7, #8]
    bytes -= want;
 801aa6e:	687a      	ldr	r2, [r7, #4]
 801aa70:	693b      	ldr	r3, [r7, #16]
 801aa72:	1ad3      	subs	r3, r2, r3
 801aa74:	607b      	str	r3, [r7, #4]
  }

  /* store leftover */
  if (bytes) {
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d01e      	beq.n	801aaba <poly1305_update+0x100>
    for (i = 0; i < bytes; i++) st->buffer[st->leftover + i] = m[i];
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	61fb      	str	r3, [r7, #28]
 801aa80:	e00f      	b.n	801aaa2 <poly1305_update+0xe8>
 801aa82:	68ba      	ldr	r2, [r7, #8]
 801aa84:	69fb      	ldr	r3, [r7, #28]
 801aa86:	441a      	add	r2, r3
 801aa88:	697b      	ldr	r3, [r7, #20]
 801aa8a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801aa8c:	69fb      	ldr	r3, [r7, #28]
 801aa8e:	440b      	add	r3, r1
 801aa90:	7811      	ldrb	r1, [r2, #0]
 801aa92:	697a      	ldr	r2, [r7, #20]
 801aa94:	4413      	add	r3, r2
 801aa96:	460a      	mov	r2, r1
 801aa98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801aa9c:	69fb      	ldr	r3, [r7, #28]
 801aa9e:	3301      	adds	r3, #1
 801aaa0:	61fb      	str	r3, [r7, #28]
 801aaa2:	69fa      	ldr	r2, [r7, #28]
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	429a      	cmp	r2, r3
 801aaa8:	d3eb      	bcc.n	801aa82 <poly1305_update+0xc8>
    st->leftover += bytes;
 801aaaa:	697b      	ldr	r3, [r7, #20]
 801aaac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	441a      	add	r2, r3
 801aab2:	697b      	ldr	r3, [r7, #20]
 801aab4:	639a      	str	r2, [r3, #56]	@ 0x38
 801aab6:	e000      	b.n	801aaba <poly1305_update+0x100>
    if (st->leftover < poly1305_block_size) return;
 801aab8:	bf00      	nop
  }
}
 801aaba:	3720      	adds	r7, #32
 801aabc:	46bd      	mov	sp, r7
 801aabe:	bd80      	pop	{r7, pc}

0801aac0 <pad_if_needed>:
#define __CHACHA20_BLOCK_SIZE (64)
#define __POLY1305_KEY_SIZE (32)

static PORTABLE_8439_DECL uint8_t __ZEROES[16] = {0};
static PORTABLE_8439_DECL void pad_if_needed(poly1305_context *ctx,
                                             size_t size) {
 801aac0:	b580      	push	{r7, lr}
 801aac2:	b084      	sub	sp, #16
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	6078      	str	r0, [r7, #4]
 801aac8:	6039      	str	r1, [r7, #0]
  size_t padding = size % 16;
 801aaca:	683b      	ldr	r3, [r7, #0]
 801aacc:	f003 030f 	and.w	r3, r3, #15
 801aad0:	60fb      	str	r3, [r7, #12]
  if (padding != 0) {
 801aad2:	68fb      	ldr	r3, [r7, #12]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d007      	beq.n	801aae8 <pad_if_needed+0x28>
    poly1305_update(ctx, __ZEROES, 16 - padding);
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	f1c3 0310 	rsb	r3, r3, #16
 801aade:	461a      	mov	r2, r3
 801aae0:	4903      	ldr	r1, [pc, #12]	@ (801aaf0 <pad_if_needed+0x30>)
 801aae2:	6878      	ldr	r0, [r7, #4]
 801aae4:	f7ff ff69 	bl	801a9ba <poly1305_update>
  }
}
 801aae8:	bf00      	nop
 801aaea:	3710      	adds	r7, #16
 801aaec:	46bd      	mov	sp, r7
 801aaee:	bd80      	pop	{r7, pc}
 801aaf0:	240010c0 	.word	0x240010c0

0801aaf4 <write_64bit_int>:

#define __u8(v) ((uint8_t) ((v) &0xFF))

// TODO: make this depending on the unaligned/native read size possible
static PORTABLE_8439_DECL void write_64bit_int(poly1305_context *ctx,
                                               uint64_t value) {
 801aaf4:	b580      	push	{r7, lr}
 801aaf6:	b086      	sub	sp, #24
 801aaf8:	af00      	add	r7, sp, #0
 801aafa:	60f8      	str	r0, [r7, #12]
 801aafc:	e9c7 2300 	strd	r2, r3, [r7]
  uint8_t result[8];
  result[0] = __u8(value);
 801ab00:	783b      	ldrb	r3, [r7, #0]
 801ab02:	743b      	strb	r3, [r7, #16]
  result[1] = __u8(value >> 8);
 801ab04:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab08:	f04f 0200 	mov.w	r2, #0
 801ab0c:	f04f 0300 	mov.w	r3, #0
 801ab10:	0a02      	lsrs	r2, r0, #8
 801ab12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 801ab16:	0a0b      	lsrs	r3, r1, #8
 801ab18:	b2d3      	uxtb	r3, r2
 801ab1a:	747b      	strb	r3, [r7, #17]
  result[2] = __u8(value >> 16);
 801ab1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab20:	f04f 0200 	mov.w	r2, #0
 801ab24:	f04f 0300 	mov.w	r3, #0
 801ab28:	0c02      	lsrs	r2, r0, #16
 801ab2a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801ab2e:	0c0b      	lsrs	r3, r1, #16
 801ab30:	b2d3      	uxtb	r3, r2
 801ab32:	74bb      	strb	r3, [r7, #18]
  result[3] = __u8(value >> 24);
 801ab34:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab38:	f04f 0200 	mov.w	r2, #0
 801ab3c:	f04f 0300 	mov.w	r3, #0
 801ab40:	0e02      	lsrs	r2, r0, #24
 801ab42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801ab46:	0e0b      	lsrs	r3, r1, #24
 801ab48:	b2d3      	uxtb	r3, r2
 801ab4a:	74fb      	strb	r3, [r7, #19]
  result[4] = __u8(value >> 32);
 801ab4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab50:	f04f 0200 	mov.w	r2, #0
 801ab54:	f04f 0300 	mov.w	r3, #0
 801ab58:	000a      	movs	r2, r1
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	b2d3      	uxtb	r3, r2
 801ab5e:	753b      	strb	r3, [r7, #20]
  result[5] = __u8(value >> 40);
 801ab60:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab64:	f04f 0200 	mov.w	r2, #0
 801ab68:	f04f 0300 	mov.w	r3, #0
 801ab6c:	0a0a      	lsrs	r2, r1, #8
 801ab6e:	2300      	movs	r3, #0
 801ab70:	b2d3      	uxtb	r3, r2
 801ab72:	757b      	strb	r3, [r7, #21]
  result[6] = __u8(value >> 48);
 801ab74:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab78:	f04f 0200 	mov.w	r2, #0
 801ab7c:	f04f 0300 	mov.w	r3, #0
 801ab80:	0c0a      	lsrs	r2, r1, #16
 801ab82:	2300      	movs	r3, #0
 801ab84:	b2d3      	uxtb	r3, r2
 801ab86:	75bb      	strb	r3, [r7, #22]
  result[7] = __u8(value >> 56);
 801ab88:	e9d7 0100 	ldrd	r0, r1, [r7]
 801ab8c:	f04f 0200 	mov.w	r2, #0
 801ab90:	f04f 0300 	mov.w	r3, #0
 801ab94:	0e0a      	lsrs	r2, r1, #24
 801ab96:	2300      	movs	r3, #0
 801ab98:	b2d3      	uxtb	r3, r2
 801ab9a:	75fb      	strb	r3, [r7, #23]
  poly1305_update(ctx, result, 8);
 801ab9c:	f107 0310 	add.w	r3, r7, #16
 801aba0:	2208      	movs	r2, #8
 801aba2:	4619      	mov	r1, r3
 801aba4:	68f8      	ldr	r0, [r7, #12]
 801aba6:	f7ff ff08 	bl	801a9ba <poly1305_update>
}
 801abaa:	bf00      	nop
 801abac:	3718      	adds	r7, #24
 801abae:	46bd      	mov	sp, r7
 801abb0:	bd80      	pop	{r7, pc}

0801abb2 <poly1305_calculate_mac>:

static PORTABLE_8439_DECL void poly1305_calculate_mac(
    uint8_t *mac, const uint8_t *cipher_text, size_t cipher_text_size,
    const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *ad,
    size_t ad_size) {
 801abb2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801abb6:	b0b0      	sub	sp, #192	@ 0xc0
 801abb8:	af00      	add	r7, sp, #0
 801abba:	60f8      	str	r0, [r7, #12]
 801abbc:	60b9      	str	r1, [r7, #8]
 801abbe:	607a      	str	r2, [r7, #4]
 801abc0:	603b      	str	r3, [r7, #0]
  // init poly key (section 2.6)
  uint8_t poly_key[__POLY1305_KEY_SIZE] = {0};
 801abc2:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801abc6:	2220      	movs	r2, #32
 801abc8:	2100      	movs	r1, #0
 801abca:	4618      	mov	r0, r3
 801abcc:	f008 fde7 	bl	802379e <memset>
  poly1305_context poly_ctx;
  rfc8439_keygen(poly_key, key, nonce);
 801abd0:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801abd4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801abd8:	6839      	ldr	r1, [r7, #0]
 801abda:	4618      	mov	r0, r3
 801abdc:	f7fe fcb5 	bl	801954a <rfc8439_keygen>
  // start poly1305 mac
  poly1305_init(&poly_ctx, poly_key);
 801abe0:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801abe4:	f107 0314 	add.w	r3, r7, #20
 801abe8:	4611      	mov	r1, r2
 801abea:	4618      	mov	r0, r3
 801abec:	f7fe fd0a 	bl	8019604 <poly1305_init>

  if (ad != NULL && ad_size > 0) {
 801abf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	d013      	beq.n	801ac20 <poly1305_calculate_mac+0x6e>
 801abf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d00f      	beq.n	801ac20 <poly1305_calculate_mac+0x6e>
    // write AD if present
    poly1305_update(&poly_ctx, ad, ad_size);
 801ac00:	f107 0314 	add.w	r3, r7, #20
 801ac04:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801ac08:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	f7ff fed4 	bl	801a9ba <poly1305_update>
    pad_if_needed(&poly_ctx, ad_size);
 801ac12:	f107 0314 	add.w	r3, r7, #20
 801ac16:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 801ac1a:	4618      	mov	r0, r3
 801ac1c:	f7ff ff50 	bl	801aac0 <pad_if_needed>
  }

  // now write the cipher text
  poly1305_update(&poly_ctx, cipher_text, cipher_text_size);
 801ac20:	f107 0314 	add.w	r3, r7, #20
 801ac24:	687a      	ldr	r2, [r7, #4]
 801ac26:	68b9      	ldr	r1, [r7, #8]
 801ac28:	4618      	mov	r0, r3
 801ac2a:	f7ff fec6 	bl	801a9ba <poly1305_update>
  pad_if_needed(&poly_ctx, cipher_text_size);
 801ac2e:	f107 0314 	add.w	r3, r7, #20
 801ac32:	6879      	ldr	r1, [r7, #4]
 801ac34:	4618      	mov	r0, r3
 801ac36:	f7ff ff43 	bl	801aac0 <pad_if_needed>

  // write sizes
  write_64bit_int(&poly_ctx, ad_size);
 801ac3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801ac3e:	2200      	movs	r2, #0
 801ac40:	4698      	mov	r8, r3
 801ac42:	4691      	mov	r9, r2
 801ac44:	f107 0114 	add.w	r1, r7, #20
 801ac48:	4642      	mov	r2, r8
 801ac4a:	464b      	mov	r3, r9
 801ac4c:	4608      	mov	r0, r1
 801ac4e:	f7ff ff51 	bl	801aaf4 <write_64bit_int>
  write_64bit_int(&poly_ctx, cipher_text_size);
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	2200      	movs	r2, #0
 801ac56:	461c      	mov	r4, r3
 801ac58:	4615      	mov	r5, r2
 801ac5a:	f107 0114 	add.w	r1, r7, #20
 801ac5e:	4622      	mov	r2, r4
 801ac60:	462b      	mov	r3, r5
 801ac62:	4608      	mov	r0, r1
 801ac64:	f7ff ff46 	bl	801aaf4 <write_64bit_int>

  // calculate MAC
  poly1305_finish(&poly_ctx, mac);
 801ac68:	f107 0314 	add.w	r3, r7, #20
 801ac6c:	68f9      	ldr	r1, [r7, #12]
 801ac6e:	4618      	mov	r0, r3
 801ac70:	f7ff fc47 	bl	801a502 <poly1305_finish>
}
 801ac74:	bf00      	nop
 801ac76:	37c0      	adds	r7, #192	@ 0xc0
 801ac78:	46bd      	mov	sp, r7
 801ac7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0801ac7e <mg_chacha20_poly1305_encrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_encrypt(
    uint8_t *restrict cipher_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE], const uint8_t *restrict ad,
    size_t ad_size, const uint8_t *restrict plain_text,
    size_t plain_text_size) {
 801ac7e:	b580      	push	{r7, lr}
 801ac80:	b08a      	sub	sp, #40	@ 0x28
 801ac82:	af04      	add	r7, sp, #16
 801ac84:	60f8      	str	r0, [r7, #12]
 801ac86:	60b9      	str	r1, [r7, #8]
 801ac88:	607a      	str	r2, [r7, #4]
 801ac8a:	603b      	str	r3, [r7, #0]
  size_t new_size = plain_text_size + RFC_8439_TAG_SIZE;
 801ac8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ac8e:	3310      	adds	r3, #16
 801ac90:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, plain_text_size, cipher_text, new_size)) {
 801ac92:	68fa      	ldr	r2, [r7, #12]
 801ac94:	697b      	ldr	r3, [r7, #20]
 801ac96:	4413      	add	r3, r2
 801ac98:	461a      	mov	r2, r3
 801ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac9c:	429a      	cmp	r2, r3
 801ac9e:	d909      	bls.n	801acb4 <mg_chacha20_poly1305_encrypt+0x36>
 801aca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801aca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aca4:	4413      	add	r3, r2
 801aca6:	461a      	mov	r2, r3
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	429a      	cmp	r2, r3
 801acac:	d902      	bls.n	801acb4 <mg_chacha20_poly1305_encrypt+0x36>
    return (size_t) -1;
 801acae:	f04f 33ff 	mov.w	r3, #4294967295
 801acb2:	e018      	b.n	801ace6 <mg_chacha20_poly1305_encrypt+0x68>
  }
  chacha20_xor_stream(cipher_text, plain_text, plain_text_size, key, nonce, 1);
 801acb4:	2301      	movs	r3, #1
 801acb6:	9301      	str	r3, [sp, #4]
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	9300      	str	r3, [sp, #0]
 801acbc:	68bb      	ldr	r3, [r7, #8]
 801acbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801acc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801acc2:	68f8      	ldr	r0, [r7, #12]
 801acc4:	f7fe fbc9 	bl	801945a <chacha20_xor_stream>
  poly1305_calculate_mac(cipher_text + plain_text_size, cipher_text,
 801acc8:	68fa      	ldr	r2, [r7, #12]
 801acca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801accc:	18d0      	adds	r0, r2, r3
 801acce:	6a3b      	ldr	r3, [r7, #32]
 801acd0:	9302      	str	r3, [sp, #8]
 801acd2:	683b      	ldr	r3, [r7, #0]
 801acd4:	9301      	str	r3, [sp, #4]
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	9300      	str	r3, [sp, #0]
 801acda:	68bb      	ldr	r3, [r7, #8]
 801acdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801acde:	68f9      	ldr	r1, [r7, #12]
 801ace0:	f7ff ff67 	bl	801abb2 <poly1305_calculate_mac>
                         plain_text_size, key, nonce, ad, ad_size);
  return new_size;
 801ace4:	697b      	ldr	r3, [r7, #20]
}
 801ace6:	4618      	mov	r0, r3
 801ace8:	3718      	adds	r7, #24
 801acea:	46bd      	mov	sp, r7
 801acec:	bd80      	pop	{r7, pc}

0801acee <mg_chacha20_poly1305_decrypt>:

PORTABLE_8439_DECL size_t mg_chacha20_poly1305_decrypt(
    uint8_t *restrict plain_text, const uint8_t key[RFC_8439_KEY_SIZE],
    const uint8_t nonce[RFC_8439_NONCE_SIZE],
    const uint8_t *restrict cipher_text, size_t cipher_text_size) {
 801acee:	b580      	push	{r7, lr}
 801acf0:	b088      	sub	sp, #32
 801acf2:	af02      	add	r7, sp, #8
 801acf4:	60f8      	str	r0, [r7, #12]
 801acf6:	60b9      	str	r1, [r7, #8]
 801acf8:	607a      	str	r2, [r7, #4]
 801acfa:	603b      	str	r3, [r7, #0]
  // first we calculate the mac and see if it lines up, only then do we decrypt
  size_t actual_size = cipher_text_size - RFC_8439_TAG_SIZE;
 801acfc:	6a3b      	ldr	r3, [r7, #32]
 801acfe:	3b10      	subs	r3, #16
 801ad00:	617b      	str	r3, [r7, #20]
  if (MG_OVERLAPPING(plain_text, actual_size, cipher_text, cipher_text_size)) {
 801ad02:	683a      	ldr	r2, [r7, #0]
 801ad04:	6a3b      	ldr	r3, [r7, #32]
 801ad06:	4413      	add	r3, r2
 801ad08:	461a      	mov	r2, r3
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	429a      	cmp	r2, r3
 801ad0e:	d909      	bls.n	801ad24 <mg_chacha20_poly1305_decrypt+0x36>
 801ad10:	68fa      	ldr	r2, [r7, #12]
 801ad12:	697b      	ldr	r3, [r7, #20]
 801ad14:	4413      	add	r3, r2
 801ad16:	461a      	mov	r2, r3
 801ad18:	683b      	ldr	r3, [r7, #0]
 801ad1a:	429a      	cmp	r2, r3
 801ad1c:	d902      	bls.n	801ad24 <mg_chacha20_poly1305_decrypt+0x36>
    return (size_t) -1;
 801ad1e:	f04f 33ff 	mov.w	r3, #4294967295
 801ad22:	e00a      	b.n	801ad3a <mg_chacha20_poly1305_decrypt+0x4c>
  }

  chacha20_xor_stream(plain_text, cipher_text, actual_size, key, nonce, 1);
 801ad24:	2301      	movs	r3, #1
 801ad26:	9301      	str	r3, [sp, #4]
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	9300      	str	r3, [sp, #0]
 801ad2c:	68bb      	ldr	r3, [r7, #8]
 801ad2e:	697a      	ldr	r2, [r7, #20]
 801ad30:	6839      	ldr	r1, [r7, #0]
 801ad32:	68f8      	ldr	r0, [r7, #12]
 801ad34:	f7fe fb91 	bl	801945a <chacha20_xor_stream>
  return actual_size;
 801ad38:	697b      	ldr	r3, [r7, #20]
}
 801ad3a:	4618      	mov	r0, r3
 801ad3c:	3718      	adds	r7, #24
 801ad3e:	46bd      	mov	sp, r7
 801ad40:	bd80      	pop	{r7, pc}

0801ad42 <bi_initialize>:

/**
 * @brief Start a new bigint context.
 * @return A bigint context.
 */
NS_INTERNAL BI_CTX *bi_initialize(void) {
 801ad42:	b580      	push	{r7, lr}
 801ad44:	b082      	sub	sp, #8
 801ad46:	af00      	add	r7, sp, #0
  /* calloc() sets everything to zero */
  BI_CTX *ctx = (BI_CTX *) calloc(1, sizeof(BI_CTX));
 801ad48:	2138      	movs	r1, #56	@ 0x38
 801ad4a:	2001      	movs	r0, #1
 801ad4c:	f008 fa52 	bl	80231f4 <calloc>
 801ad50:	4603      	mov	r3, r0
 801ad52:	607b      	str	r3, [r7, #4]

  /* the radix */
  ctx->bi_radix = alloc(ctx, 2);
 801ad54:	2102      	movs	r1, #2
 801ad56:	6878      	ldr	r0, [r7, #4]
 801ad58:	f000 fefe 	bl	801bb58 <alloc>
 801ad5c:	4602      	mov	r2, r0
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	609a      	str	r2, [r3, #8]
  ctx->bi_radix->comps[0] = 0;
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	689b      	ldr	r3, [r3, #8]
 801ad66:	68db      	ldr	r3, [r3, #12]
 801ad68:	2200      	movs	r2, #0
 801ad6a:	601a      	str	r2, [r3, #0]
  ctx->bi_radix->comps[1] = 1;
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	689b      	ldr	r3, [r3, #8]
 801ad70:	68db      	ldr	r3, [r3, #12]
 801ad72:	3304      	adds	r3, #4
 801ad74:	2201      	movs	r2, #1
 801ad76:	601a      	str	r2, [r3, #0]
  bi_permanent(ctx->bi_radix);
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	689b      	ldr	r3, [r3, #8]
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	f000 f81d 	bl	801adbc <bi_permanent>
  return ctx;
 801ad82:	687b      	ldr	r3, [r7, #4]
}
 801ad84:	4618      	mov	r0, r3
 801ad86:	3708      	adds	r7, #8
 801ad88:	46bd      	mov	sp, r7
 801ad8a:	bd80      	pop	{r7, pc}

0801ad8c <bi_copy>:
 * @brief Increment the number of references to this object.
 * It does not do a full copy.
 * @param bi [in]   The bigint to copy.
 * @return A reference to the same bigint.
 */
NS_INTERNAL bigint *bi_copy(bigint *bi) {
 801ad8c:	b480      	push	{r7}
 801ad8e:	b083      	sub	sp, #12
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) bi->refs++;
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	689b      	ldr	r3, [r3, #8]
 801ad98:	4a07      	ldr	r2, [pc, #28]	@ (801adb8 <bi_copy+0x2c>)
 801ad9a:	4293      	cmp	r3, r2
 801ad9c:	d004      	beq.n	801ada8 <bi_copy+0x1c>
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	689b      	ldr	r3, [r3, #8]
 801ada2:	1c5a      	adds	r2, r3, #1
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	609a      	str	r2, [r3, #8]
  return bi;
 801ada8:	687b      	ldr	r3, [r7, #4]
}
 801adaa:	4618      	mov	r0, r3
 801adac:	370c      	adds	r7, #12
 801adae:	46bd      	mov	sp, r7
 801adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb4:	4770      	bx	lr
 801adb6:	bf00      	nop
 801adb8:	7fff55aa 	.word	0x7fff55aa

0801adbc <bi_permanent>:
 * @brief Simply make a bigint object "unfreeable" if bi_free() is called on it.
 *
 * For this object to be freed, bi_depermanent() must be called.
 * @param bi [in]   The bigint to be made permanent.
 */
NS_INTERNAL void bi_permanent(bigint *bi) {
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b082      	sub	sp, #8
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != 1) {
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	689b      	ldr	r3, [r3, #8]
 801adc8:	2b01      	cmp	r3, #1
 801adca:	d001      	beq.n	801add0 <bi_permanent+0x14>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_permanent: refs was not 1\n");
#endif
    abort();
 801adcc:	f008 f9e8 	bl	80231a0 <abort>
  }

  bi->refs = PERMANENT;
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	4a03      	ldr	r2, [pc, #12]	@ (801ade0 <bi_permanent+0x24>)
 801add4:	609a      	str	r2, [r3, #8]
}
 801add6:	bf00      	nop
 801add8:	3708      	adds	r7, #8
 801adda:	46bd      	mov	sp, r7
 801addc:	bd80      	pop	{r7, pc}
 801adde:	bf00      	nop
 801ade0:	7fff55aa 	.word	0x7fff55aa

0801ade4 <bi_depermanent>:

/**
 * @brief Take a permanent object and make it eligible for freedom.
 * @param bi [in]   The bigint to be made back to temporary.
 */
NS_INTERNAL void bi_depermanent(bigint *bi) {
 801ade4:	b580      	push	{r7, lr}
 801ade6:	b082      	sub	sp, #8
 801ade8:	af00      	add	r7, sp, #0
 801adea:	6078      	str	r0, [r7, #4]
  check(bi);
  if (bi->refs != PERMANENT) {
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	689b      	ldr	r3, [r3, #8]
 801adf0:	4a05      	ldr	r2, [pc, #20]	@ (801ae08 <bi_depermanent+0x24>)
 801adf2:	4293      	cmp	r3, r2
 801adf4:	d001      	beq.n	801adfa <bi_depermanent+0x16>
#ifdef CONFIG_SSL_FULL_MODE
    printf("bi_depermanent: bigint was not permanent\n");
#endif
    abort();
 801adf6:	f008 f9d3 	bl	80231a0 <abort>
  }

  bi->refs = 1;
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	2201      	movs	r2, #1
 801adfe:	609a      	str	r2, [r3, #8]
}
 801ae00:	bf00      	nop
 801ae02:	3708      	adds	r7, #8
 801ae04:	46bd      	mov	sp, r7
 801ae06:	bd80      	pop	{r7, pc}
 801ae08:	7fff55aa 	.word	0x7fff55aa

0801ae0c <bi_free>:
 *
 * The memory itself it not actually freed, just tagged as being available
 * @param ctx [in]   The bigint session context.
 * @param bi [in]    The bigint to be freed.
 */
NS_INTERNAL void bi_free(BI_CTX *ctx, bigint *bi) {
 801ae0c:	b580      	push	{r7, lr}
 801ae0e:	b082      	sub	sp, #8
 801ae10:	af00      	add	r7, sp, #0
 801ae12:	6078      	str	r0, [r7, #4]
 801ae14:	6039      	str	r1, [r7, #0]
  check(bi);
  if (bi->refs == PERMANENT) {
 801ae16:	683b      	ldr	r3, [r7, #0]
 801ae18:	689b      	ldr	r3, [r3, #8]
 801ae1a:	4a14      	ldr	r2, [pc, #80]	@ (801ae6c <bi_free+0x60>)
 801ae1c:	4293      	cmp	r3, r2
 801ae1e:	d01f      	beq.n	801ae60 <bi_free+0x54>
    return;
  }

  if (--bi->refs > 0) {
 801ae20:	683b      	ldr	r3, [r7, #0]
 801ae22:	689b      	ldr	r3, [r3, #8]
 801ae24:	1e5a      	subs	r2, r3, #1
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	609a      	str	r2, [r3, #8]
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	689b      	ldr	r3, [r3, #8]
 801ae2e:	2b00      	cmp	r3, #0
 801ae30:	dc18      	bgt.n	801ae64 <bi_free+0x58>
    return;
  }

  bi->next = ctx->free_list;
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	685a      	ldr	r2, [r3, #4]
 801ae36:	683b      	ldr	r3, [r7, #0]
 801ae38:	601a      	str	r2, [r3, #0]
  ctx->free_list = bi;
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	683a      	ldr	r2, [r7, #0]
 801ae3e:	605a      	str	r2, [r3, #4]
  ctx->free_count++;
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ae44:	1c5a      	adds	r2, r3, #1
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	631a      	str	r2, [r3, #48]	@ 0x30

  if (--ctx->active_count < 0) {
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae4e:	1e5a      	subs	r2, r3, #1
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	62da      	str	r2, [r3, #44]	@ 0x2c
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	da04      	bge.n	801ae66 <bi_free+0x5a>
#ifdef CONFIG_SSL_FULL_MODE
    printf(
        "bi_free: active_count went negative "
        "- double-freed bigint?\n");
#endif
    abort();
 801ae5c:	f008 f9a0 	bl	80231a0 <abort>
    return;
 801ae60:	bf00      	nop
 801ae62:	e000      	b.n	801ae66 <bi_free+0x5a>
    return;
 801ae64:	bf00      	nop
  }
}
 801ae66:	3708      	adds	r7, #8
 801ae68:	46bd      	mov	sp, r7
 801ae6a:	bd80      	pop	{r7, pc}
 801ae6c:	7fff55aa 	.word	0x7fff55aa

0801ae70 <int_to_bi>:
 * @brief Convert an (unsigned) integer into a bigint.
 * @param ctx [in]   The bigint session context.
 * @param i [in]     The (unsigned) integer to be converted.
 *
 */
NS_INTERNAL bigint *int_to_bi(BI_CTX *ctx, comp i) {
 801ae70:	b580      	push	{r7, lr}
 801ae72:	b084      	sub	sp, #16
 801ae74:	af00      	add	r7, sp, #0
 801ae76:	6078      	str	r0, [r7, #4]
 801ae78:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, 1);
 801ae7a:	2101      	movs	r1, #1
 801ae7c:	6878      	ldr	r0, [r7, #4]
 801ae7e:	f000 fe6b 	bl	801bb58 <alloc>
 801ae82:	60f8      	str	r0, [r7, #12]
  biR->comps[0] = i;
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	68db      	ldr	r3, [r3, #12]
 801ae88:	683a      	ldr	r2, [r7, #0]
 801ae8a:	601a      	str	r2, [r3, #0]
  return biR;
 801ae8c:	68fb      	ldr	r3, [r7, #12]
}
 801ae8e:	4618      	mov	r0, r3
 801ae90:	3710      	adds	r7, #16
 801ae92:	46bd      	mov	sp, r7
 801ae94:	bd80      	pop	{r7, pc}

0801ae96 <bi_clone>:
/**
 * @brief Do a full copy of the bigint object.
 * @param ctx [in]   The bigint session context.
 * @param bi  [in]   The bigint object to be copied.
 */
NS_INTERNAL bigint *bi_clone(BI_CTX *ctx, const bigint *bi) {
 801ae96:	b580      	push	{r7, lr}
 801ae98:	b084      	sub	sp, #16
 801ae9a:	af00      	add	r7, sp, #0
 801ae9c:	6078      	str	r0, [r7, #4]
 801ae9e:	6039      	str	r1, [r7, #0]
  bigint *biR = alloc(ctx, bi->size);
 801aea0:	683b      	ldr	r3, [r7, #0]
 801aea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aea6:	4619      	mov	r1, r3
 801aea8:	6878      	ldr	r0, [r7, #4]
 801aeaa:	f000 fe55 	bl	801bb58 <alloc>
 801aeae:	60f8      	str	r0, [r7, #12]
  check(bi);
  memcpy(biR->comps, bi->comps, (size_t) bi->size * COMP_BYTE_SIZE);
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	68d8      	ldr	r0, [r3, #12]
 801aeb4:	683b      	ldr	r3, [r7, #0]
 801aeb6:	68d9      	ldr	r1, [r3, #12]
 801aeb8:	683b      	ldr	r3, [r7, #0]
 801aeba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aebe:	009b      	lsls	r3, r3, #2
 801aec0:	461a      	mov	r2, r3
 801aec2:	f008 fda2 	bl	8023a0a <memcpy>
  return biR;
 801aec6:	68fb      	ldr	r3, [r7, #12]
}
 801aec8:	4618      	mov	r0, r3
 801aeca:	3710      	adds	r7, #16
 801aecc:	46bd      	mov	sp, r7
 801aece:	bd80      	pop	{r7, pc}

0801aed0 <bi_add>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the addition.
 */
NS_INTERNAL bigint *bi_add(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b08c      	sub	sp, #48	@ 0x30
 801aed4:	af00      	add	r7, sp, #0
 801aed6:	60f8      	str	r0, [r7, #12]
 801aed8:	60b9      	str	r1, [r7, #8]
 801aeda:	607a      	str	r2, [r7, #4]
  int n;
  comp carry = 0;
 801aedc:	2300      	movs	r3, #0
 801aede:	62bb      	str	r3, [r7, #40]	@ 0x28
  comp *pa, *pb;

  check(bia);
  check(bib);

  n = MAX(bia->size, bib->size);
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801aee6:	68bb      	ldr	r3, [r7, #8]
 801aee8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801aeec:	4293      	cmp	r3, r2
 801aeee:	bfb8      	it	lt
 801aef0:	4613      	movlt	r3, r2
 801aef2:	b21b      	sxth	r3, r3
 801aef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  more_comps(bia, n + 1);
 801aef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aef8:	3301      	adds	r3, #1
 801aefa:	4619      	mov	r1, r3
 801aefc:	68b8      	ldr	r0, [r7, #8]
 801aefe:	f000 fdcf 	bl	801baa0 <more_comps>
  more_comps(bib, n);
 801af02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801af04:	6878      	ldr	r0, [r7, #4]
 801af06:	f000 fdcb 	bl	801baa0 <more_comps>
  pa = bia->comps;
 801af0a:	68bb      	ldr	r3, [r7, #8]
 801af0c:	68db      	ldr	r3, [r3, #12]
 801af0e:	627b      	str	r3, [r7, #36]	@ 0x24
  pb = bib->comps;
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	68db      	ldr	r3, [r3, #12]
 801af14:	623b      	str	r3, [r7, #32]

  do {
    comp sl, rl, cy1;
    sl = *pa + *pb++;
 801af16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af18:	681a      	ldr	r2, [r3, #0]
 801af1a:	6a3b      	ldr	r3, [r7, #32]
 801af1c:	1d19      	adds	r1, r3, #4
 801af1e:	6239      	str	r1, [r7, #32]
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	4413      	add	r3, r2
 801af24:	61fb      	str	r3, [r7, #28]
    rl = sl + carry;
 801af26:	69fa      	ldr	r2, [r7, #28]
 801af28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801af2a:	4413      	add	r3, r2
 801af2c:	61bb      	str	r3, [r7, #24]
    cy1 = sl < *pa;
 801af2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	69fa      	ldr	r2, [r7, #28]
 801af34:	429a      	cmp	r2, r3
 801af36:	bf34      	ite	cc
 801af38:	2301      	movcc	r3, #1
 801af3a:	2300      	movcs	r3, #0
 801af3c:	b2db      	uxtb	r3, r3
 801af3e:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl < sl);
 801af40:	69ba      	ldr	r2, [r7, #24]
 801af42:	69fb      	ldr	r3, [r7, #28]
 801af44:	429a      	cmp	r2, r3
 801af46:	bf34      	ite	cc
 801af48:	2301      	movcc	r3, #1
 801af4a:	2300      	movcs	r3, #0
 801af4c:	b2db      	uxtb	r3, r3
 801af4e:	461a      	mov	r2, r3
 801af50:	697b      	ldr	r3, [r7, #20]
 801af52:	4313      	orrs	r3, r2
 801af54:	62bb      	str	r3, [r7, #40]	@ 0x28
    *pa++ = rl;
 801af56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af58:	1d1a      	adds	r2, r3, #4
 801af5a:	627a      	str	r2, [r7, #36]	@ 0x24
 801af5c:	69ba      	ldr	r2, [r7, #24]
 801af5e:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801af60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af62:	3b01      	subs	r3, #1
 801af64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801af66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d1d4      	bne.n	801af16 <bi_add+0x46>

  *pa = carry; /* do overflow */
 801af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801af70:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bib);
 801af72:	6879      	ldr	r1, [r7, #4]
 801af74:	68f8      	ldr	r0, [r7, #12]
 801af76:	f7ff ff49 	bl	801ae0c <bi_free>
  return trim(bia);
 801af7a:	68b8      	ldr	r0, [r7, #8]
 801af7c:	f000 fe9d 	bl	801bcba <trim>
 801af80:	4603      	mov	r3, r0
}
 801af82:	4618      	mov	r0, r3
 801af84:	3730      	adds	r7, #48	@ 0x30
 801af86:	46bd      	mov	sp, r7
 801af88:	bd80      	pop	{r7, pc}

0801af8a <bi_subtract>:
 * @param is_negative [out] If defined, indicates that the result was negative.
 * is_negative may be null.
 * @return The result of the subtraction. The result is always positive.
 */
NS_INTERNAL bigint *bi_subtract(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int *is_negative) {
 801af8a:	b580      	push	{r7, lr}
 801af8c:	b08c      	sub	sp, #48	@ 0x30
 801af8e:	af00      	add	r7, sp, #0
 801af90:	60f8      	str	r0, [r7, #12]
 801af92:	60b9      	str	r1, [r7, #8]
 801af94:	607a      	str	r2, [r7, #4]
 801af96:	603b      	str	r3, [r7, #0]
  int n = bia->size;
 801af98:	68bb      	ldr	r3, [r7, #8]
 801af9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801af9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  comp *pa, *pb, carry = 0;
 801afa0:	2300      	movs	r3, #0
 801afa2:	623b      	str	r3, [r7, #32]

  check(bia);
  check(bib);

  more_comps(bib, n);
 801afa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801afa6:	6878      	ldr	r0, [r7, #4]
 801afa8:	f000 fd7a 	bl	801baa0 <more_comps>
  pa = bia->comps;
 801afac:	68bb      	ldr	r3, [r7, #8]
 801afae:	68db      	ldr	r3, [r3, #12]
 801afb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pb = bib->comps;
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	68db      	ldr	r3, [r3, #12]
 801afb6:	627b      	str	r3, [r7, #36]	@ 0x24

  do {
    comp sl, rl, cy1;
    sl = *pa - *pb++;
 801afb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801afba:	681a      	ldr	r2, [r3, #0]
 801afbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afbe:	1d19      	adds	r1, r3, #4
 801afc0:	6279      	str	r1, [r7, #36]	@ 0x24
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	1ad3      	subs	r3, r2, r3
 801afc6:	61fb      	str	r3, [r7, #28]
    rl = sl - carry;
 801afc8:	69fa      	ldr	r2, [r7, #28]
 801afca:	6a3b      	ldr	r3, [r7, #32]
 801afcc:	1ad3      	subs	r3, r2, r3
 801afce:	61bb      	str	r3, [r7, #24]
    cy1 = sl > *pa;
 801afd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	69fa      	ldr	r2, [r7, #28]
 801afd6:	429a      	cmp	r2, r3
 801afd8:	bf8c      	ite	hi
 801afda:	2301      	movhi	r3, #1
 801afdc:	2300      	movls	r3, #0
 801afde:	b2db      	uxtb	r3, r3
 801afe0:	617b      	str	r3, [r7, #20]
    carry = cy1 | (rl > sl);
 801afe2:	69ba      	ldr	r2, [r7, #24]
 801afe4:	69fb      	ldr	r3, [r7, #28]
 801afe6:	429a      	cmp	r2, r3
 801afe8:	bf8c      	ite	hi
 801afea:	2301      	movhi	r3, #1
 801afec:	2300      	movls	r3, #0
 801afee:	b2db      	uxtb	r3, r3
 801aff0:	461a      	mov	r2, r3
 801aff2:	697b      	ldr	r3, [r7, #20]
 801aff4:	4313      	orrs	r3, r2
 801aff6:	623b      	str	r3, [r7, #32]
    *pa++ = rl;
 801aff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801affa:	1d1a      	adds	r2, r3, #4
 801affc:	62ba      	str	r2, [r7, #40]	@ 0x28
 801affe:	69ba      	ldr	r2, [r7, #24]
 801b000:	601a      	str	r2, [r3, #0]
  } while (--n != 0);
 801b002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b004:	3b01      	subs	r3, #1
 801b006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d1d4      	bne.n	801afb8 <bi_subtract+0x2e>

  if (is_negative) /* indicate a negative result */
 801b00e:	683b      	ldr	r3, [r7, #0]
 801b010:	2b00      	cmp	r3, #0
 801b012:	d002      	beq.n	801b01a <bi_subtract+0x90>
  {
    *is_negative = (int) carry;
 801b014:	6a3a      	ldr	r2, [r7, #32]
 801b016:	683b      	ldr	r3, [r7, #0]
 801b018:	601a      	str	r2, [r3, #0]
  }

  bi_free(ctx, trim(bib)); /* put bib back to the way it was */
 801b01a:	6878      	ldr	r0, [r7, #4]
 801b01c:	f000 fe4d 	bl	801bcba <trim>
 801b020:	4603      	mov	r3, r0
 801b022:	4619      	mov	r1, r3
 801b024:	68f8      	ldr	r0, [r7, #12]
 801b026:	f7ff fef1 	bl	801ae0c <bi_free>
  return trim(bia);
 801b02a:	68b8      	ldr	r0, [r7, #8]
 801b02c:	f000 fe45 	bl	801bcba <trim>
 801b030:	4603      	mov	r3, r0
}
 801b032:	4618      	mov	r0, r3
 801b034:	3730      	adds	r7, #48	@ 0x30
 801b036:	46bd      	mov	sp, r7
 801b038:	bd80      	pop	{r7, pc}

0801b03a <bi_int_multiply>:

/**
 * Perform a multiply between a bigint an an (unsigned) integer
 */
static bigint *bi_int_multiply(BI_CTX *ctx, bigint *bia, comp b) {
 801b03a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b03e:	b094      	sub	sp, #80	@ 0x50
 801b040:	af00      	add	r7, sp, #0
 801b042:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b044:	62b9      	str	r1, [r7, #40]	@ 0x28
 801b046:	627a      	str	r2, [r7, #36]	@ 0x24
  int j = 0, n = bia->size;
 801b048:	2300      	movs	r3, #0
 801b04a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b04c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b04e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b052:	643b      	str	r3, [r7, #64]	@ 0x40
  bigint *biR = alloc(ctx, n + 1);
 801b054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b056:	3301      	adds	r3, #1
 801b058:	4619      	mov	r1, r3
 801b05a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b05c:	f000 fd7c 	bl	801bb58 <alloc>
 801b060:	63f8      	str	r0, [r7, #60]	@ 0x3c
  comp carry = 0;
 801b062:	2300      	movs	r3, #0
 801b064:	64bb      	str	r3, [r7, #72]	@ 0x48
  comp *r = biR->comps;
 801b066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b068:	68db      	ldr	r3, [r3, #12]
 801b06a:	647b      	str	r3, [r7, #68]	@ 0x44
  comp *a = bia->comps;
 801b06c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b06e:	68db      	ldr	r3, [r3, #12]
 801b070:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);

  /* clear things to start with */
  memset(r, 0, (size_t) ((n + 1) * COMP_BYTE_SIZE));
 801b072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b074:	3301      	adds	r3, #1
 801b076:	009b      	lsls	r3, r3, #2
 801b078:	461a      	mov	r2, r3
 801b07a:	2100      	movs	r1, #0
 801b07c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b07e:	f008 fb8e 	bl	802379e <memset>

  do {
    long_comp tmp = *r + (long_comp) a[j] * b + carry;
 801b082:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	2200      	movs	r2, #0
 801b088:	61bb      	str	r3, [r7, #24]
 801b08a:	61fa      	str	r2, [r7, #28]
 801b08c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b08e:	009a      	lsls	r2, r3, #2
 801b090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b092:	4413      	add	r3, r2
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	2200      	movs	r2, #0
 801b098:	613b      	str	r3, [r7, #16]
 801b09a:	617a      	str	r2, [r7, #20]
 801b09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b09e:	2200      	movs	r2, #0
 801b0a0:	469a      	mov	sl, r3
 801b0a2:	4693      	mov	fp, r2
 801b0a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b0a8:	460b      	mov	r3, r1
 801b0aa:	fb0a f203 	mul.w	r2, sl, r3
 801b0ae:	4603      	mov	r3, r0
 801b0b0:	fb03 f30b 	mul.w	r3, r3, fp
 801b0b4:	4413      	add	r3, r2
 801b0b6:	4602      	mov	r2, r0
 801b0b8:	fba2 450a 	umull	r4, r5, r2, sl
 801b0bc:	442b      	add	r3, r5
 801b0be:	461d      	mov	r5, r3
 801b0c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801b0c4:	460b      	mov	r3, r1
 801b0c6:	eb13 0804 	adds.w	r8, r3, r4
 801b0ca:	4613      	mov	r3, r2
 801b0cc:	eb43 0905 	adc.w	r9, r3, r5
 801b0d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b0d2:	2200      	movs	r2, #0
 801b0d4:	60bb      	str	r3, [r7, #8]
 801b0d6:	60fa      	str	r2, [r7, #12]
 801b0d8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801b0dc:	460b      	mov	r3, r1
 801b0de:	eb18 0303 	adds.w	r3, r8, r3
 801b0e2:	603b      	str	r3, [r7, #0]
 801b0e4:	4613      	mov	r3, r2
 801b0e6:	eb49 0303 	adc.w	r3, r9, r3
 801b0ea:	607b      	str	r3, [r7, #4]
 801b0ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b0f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    *r++ = (comp) tmp; /* downsize */
 801b0f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b0f6:	1d13      	adds	r3, r2, #4
 801b0f8:	647b      	str	r3, [r7, #68]	@ 0x44
 801b0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b0fc:	6013      	str	r3, [r2, #0]
    carry = (comp)(tmp >> COMP_BIT_SIZE);
 801b0fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801b102:	f04f 0000 	mov.w	r0, #0
 801b106:	f04f 0100 	mov.w	r1, #0
 801b10a:	0018      	movs	r0, r3
 801b10c:	2100      	movs	r1, #0
 801b10e:	4603      	mov	r3, r0
 801b110:	64bb      	str	r3, [r7, #72]	@ 0x48
  } while (++j < n);
 801b112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b114:	3301      	adds	r3, #1
 801b116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801b118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b11a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b11c:	429a      	cmp	r2, r3
 801b11e:	dbb0      	blt.n	801b082 <bi_int_multiply+0x48>

  *r = carry;
 801b120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b124:	601a      	str	r2, [r3, #0]
  bi_free(ctx, bia);
 801b126:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b128:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b12a:	f7ff fe6f 	bl	801ae0c <bi_free>
  return trim(biR);
 801b12e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801b130:	f000 fdc3 	bl	801bcba <trim>
 801b134:	4603      	mov	r3, r0
}
 801b136:	4618      	mov	r0, r3
 801b138:	3750      	adds	r7, #80	@ 0x50
 801b13a:	46bd      	mov	sp, r7
 801b13c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b140 <bi_divide>:
 * @param v [in]    Either the denominator or the modulus depending on the mode.
 * @param is_mod [n] Determines if this is a normal division (0) or a reduction
 * (1).
 * @return  The result of the division/reduction.
 */
NS_INTERNAL bigint *bi_divide(BI_CTX *ctx, bigint *u, bigint *v, int is_mod) {
 801b140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b144:	b0a0      	sub	sp, #128	@ 0x80
 801b146:	af00      	add	r7, sp, #0
 801b148:	64f8      	str	r0, [r7, #76]	@ 0x4c
 801b14a:	64b9      	str	r1, [r7, #72]	@ 0x48
 801b14c:	647a      	str	r2, [r7, #68]	@ 0x44
 801b14e:	643b      	str	r3, [r7, #64]	@ 0x40
  int n = v->size, m = u->size - n;
 801b150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b152:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b156:	673b      	str	r3, [r7, #112]	@ 0x70
 801b158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b15a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b15e:	461a      	mov	r2, r3
 801b160:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b162:	1ad3      	subs	r3, r2, r3
 801b164:	66fb      	str	r3, [r7, #108]	@ 0x6c
  int j = 0, orig_u_size = u->size;
 801b166:	2300      	movs	r3, #0
 801b168:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801b16a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b16c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b170:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint8_t mod_offset = ctx->mod_offset;
 801b172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b174:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801b178:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

  check(u);
  check(v);

  /* if doing reduction and we are < mod, then return mod */
  if (is_mod && bi_compare(v, u) > 0) {
 801b17c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b17e:	2b00      	cmp	r3, #0
 801b180:	d00c      	beq.n	801b19c <bi_divide+0x5c>
 801b182:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801b184:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b186:	f000 fc36 	bl	801b9f6 <bi_compare>
 801b18a:	4603      	mov	r3, r0
 801b18c:	2b00      	cmp	r3, #0
 801b18e:	dd05      	ble.n	801b19c <bi_divide+0x5c>
    bi_free(ctx, v);
 801b190:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b192:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b194:	f7ff fe3a 	bl	801ae0c <bi_free>
    return u;
 801b198:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b19a:	e1fe      	b.n	801b59a <bi_divide+0x45a>
  }

  quotient = alloc(ctx, m + 1);
 801b19c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b19e:	3301      	adds	r3, #1
 801b1a0:	4619      	mov	r1, r3
 801b1a2:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b1a4:	f000 fcd8 	bl	801bb58 <alloc>
 801b1a8:	6638      	str	r0, [r7, #96]	@ 0x60
  tmp_u = alloc(ctx, n + 1);
 801b1aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b1ac:	3301      	adds	r3, #1
 801b1ae:	4619      	mov	r1, r3
 801b1b0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b1b2:	f000 fcd1 	bl	801bb58 <alloc>
 801b1b6:	67b8      	str	r0, [r7, #120]	@ 0x78
  v = trim(v); /* make sure we have no leading 0's */
 801b1b8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b1ba:	f000 fd7e 	bl	801bcba <trim>
 801b1be:	6478      	str	r0, [r7, #68]	@ 0x44
  d = (comp)((long_comp) COMP_RADIX / (V1 + 1));
 801b1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b1c2:	68d9      	ldr	r1, [r3, #12]
 801b1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b1c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b1ca:	461a      	mov	r2, r3
 801b1cc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b1d0:	4413      	add	r3, r2
 801b1d2:	009b      	lsls	r3, r3, #2
 801b1d4:	440b      	add	r3, r1
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	3301      	adds	r3, #1
 801b1da:	2200      	movs	r2, #0
 801b1dc:	461c      	mov	r4, r3
 801b1de:	4615      	mov	r5, r2
 801b1e0:	4622      	mov	r2, r4
 801b1e2:	462b      	mov	r3, r5
 801b1e4:	f04f 0000 	mov.w	r0, #0
 801b1e8:	f04f 0101 	mov.w	r1, #1
 801b1ec:	f7e5 f8f8 	bl	80003e0 <__aeabi_uldivmod>
 801b1f0:	4602      	mov	r2, r0
 801b1f2:	460b      	mov	r3, r1
 801b1f4:	4613      	mov	r3, r2
 801b1f6:	65fb      	str	r3, [r7, #92]	@ 0x5c

  /* clear things to start with */
  memset(quotient->comps, 0, (size_t) ((quotient->size) * COMP_BYTE_SIZE));
 801b1f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b1fa:	68d8      	ldr	r0, [r3, #12]
 801b1fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b1fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b202:	009b      	lsls	r3, r3, #2
 801b204:	461a      	mov	r2, r3
 801b206:	2100      	movs	r1, #0
 801b208:	f008 fac9 	bl	802379e <memset>

  /* normalise */
  if (d > 1) {
 801b20c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b20e:	2b01      	cmp	r3, #1
 801b210:	d916      	bls.n	801b240 <bi_divide+0x100>
    u = bi_int_multiply(ctx, u, d);
 801b212:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b214:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801b216:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b218:	f7ff ff0f 	bl	801b03a <bi_int_multiply>
 801b21c:	64b8      	str	r0, [r7, #72]	@ 0x48

    if (is_mod) {
 801b21e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b220:	2b00      	cmp	r3, #0
 801b222:	d007      	beq.n	801b234 <bi_divide+0xf4>
      v = ctx->bi_normalised_mod[mod_offset];
 801b224:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 801b228:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b22a:	3306      	adds	r3, #6
 801b22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b230:	647b      	str	r3, [r7, #68]	@ 0x44
 801b232:	e005      	b.n	801b240 <bi_divide+0x100>
    } else {
      v = bi_int_multiply(ctx, v, d);
 801b234:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b236:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b238:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b23a:	f7ff fefe 	bl	801b03a <bi_int_multiply>
 801b23e:	6478      	str	r0, [r7, #68]	@ 0x44
    }
  }

  if (orig_u_size == u->size) /* new digit position u0 */
 801b240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b242:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b246:	461a      	mov	r2, r3
 801b248:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b24a:	4293      	cmp	r3, r2
 801b24c:	d105      	bne.n	801b25a <bi_divide+0x11a>
  {
    more_comps(u, orig_u_size + 1);
 801b24e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b250:	3301      	adds	r3, #1
 801b252:	4619      	mov	r1, r3
 801b254:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801b256:	f000 fc23 	bl	801baa0 <more_comps>
  }

  do {
    /* get a temporary short version of u */
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801b25a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b25c:	68d8      	ldr	r0, [r3, #12]
 801b25e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b260:	68d9      	ldr	r1, [r3, #12]
 801b262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b264:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b268:	461a      	mov	r2, r3
 801b26a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b26c:	1ad3      	subs	r3, r2, r3
 801b26e:	1e5a      	subs	r2, r3, #1
 801b270:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b272:	1ad3      	subs	r3, r2, r3
 801b274:	009b      	lsls	r3, r3, #2
 801b276:	4419      	add	r1, r3
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801b278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b27a:	3301      	adds	r3, #1
    memcpy(tmp_u->comps, &u->comps[u->size - n - 1 - j],
 801b27c:	009b      	lsls	r3, r3, #2
 801b27e:	461a      	mov	r2, r3
 801b280:	f008 fbc3 	bl	8023a0a <memcpy>

    /* calculate q' */
    if (U(0) == V1) {
 801b284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b286:	68d9      	ldr	r1, [r3, #12]
 801b288:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b28a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b28e:	461a      	mov	r2, r3
 801b290:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b294:	4413      	add	r3, r2
 801b296:	009b      	lsls	r3, r3, #2
 801b298:	440b      	add	r3, r1
 801b29a:	6818      	ldr	r0, [r3, #0]
 801b29c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b29e:	68d9      	ldr	r1, [r3, #12]
 801b2a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b2a2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b2a6:	461a      	mov	r2, r3
 801b2a8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b2ac:	4413      	add	r3, r2
 801b2ae:	009b      	lsls	r3, r3, #2
 801b2b0:	440b      	add	r3, r1
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	4298      	cmp	r0, r3
 801b2b6:	d103      	bne.n	801b2c0 <bi_divide+0x180>
      q_dash = COMP_RADIX - 1;
 801b2b8:	f04f 33ff 	mov.w	r3, #4294967295
 801b2bc:	677b      	str	r3, [r7, #116]	@ 0x74
 801b2be:	e0c2      	b.n	801b446 <bi_divide+0x306>
    } else {
      q_dash = (comp)(((long_comp) U(0) * COMP_RADIX + U(1)) / V1);
 801b2c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b2c2:	68d9      	ldr	r1, [r3, #12]
 801b2c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b2c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b2ca:	461a      	mov	r2, r3
 801b2cc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b2d0:	4413      	add	r3, r2
 801b2d2:	009b      	lsls	r3, r3, #2
 801b2d4:	440b      	add	r3, r1
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	2200      	movs	r2, #0
 801b2da:	633b      	str	r3, [r7, #48]	@ 0x30
 801b2dc:	637a      	str	r2, [r7, #52]	@ 0x34
 801b2de:	f04f 0000 	mov.w	r0, #0
 801b2e2:	f04f 0100 	mov.w	r1, #0
 801b2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b2e8:	0019      	movs	r1, r3
 801b2ea:	2000      	movs	r0, #0
 801b2ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b2ee:	68dc      	ldr	r4, [r3, #12]
 801b2f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b2f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b2f6:	461a      	mov	r2, r3
 801b2f8:	4baa      	ldr	r3, [pc, #680]	@ (801b5a4 <bi_divide+0x464>)
 801b2fa:	4413      	add	r3, r2
 801b2fc:	009b      	lsls	r3, r3, #2
 801b2fe:	4423      	add	r3, r4
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	2200      	movs	r2, #0
 801b304:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b308:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 801b30c:	4623      	mov	r3, r4
 801b30e:	18c3      	adds	r3, r0, r3
 801b310:	623b      	str	r3, [r7, #32]
 801b312:	462b      	mov	r3, r5
 801b314:	eb41 0303 	adc.w	r3, r1, r3
 801b318:	627b      	str	r3, [r7, #36]	@ 0x24
 801b31a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b31c:	68d9      	ldr	r1, [r3, #12]
 801b31e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b320:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b324:	461a      	mov	r2, r3
 801b326:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b32a:	4413      	add	r3, r2
 801b32c:	009b      	lsls	r3, r3, #2
 801b32e:	440b      	add	r3, r1
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	2200      	movs	r2, #0
 801b334:	61bb      	str	r3, [r7, #24]
 801b336:	61fa      	str	r2, [r7, #28]
 801b338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801b33c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801b340:	f7e5 f84e 	bl	80003e0 <__aeabi_uldivmod>
 801b344:	4602      	mov	r2, r0
 801b346:	460b      	mov	r3, r1
 801b348:	4613      	mov	r3, r2
 801b34a:	677b      	str	r3, [r7, #116]	@ 0x74

      if (v->size > 1 && V2) {
 801b34c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b34e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b352:	2b01      	cmp	r3, #1
 801b354:	dd77      	ble.n	801b446 <bi_divide+0x306>
 801b356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b358:	68d9      	ldr	r1, [r3, #12]
 801b35a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b35c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b360:	461a      	mov	r2, r3
 801b362:	4b90      	ldr	r3, [pc, #576]	@ (801b5a4 <bi_divide+0x464>)
 801b364:	4413      	add	r3, r2
 801b366:	009b      	lsls	r3, r3, #2
 801b368:	440b      	add	r3, r1
 801b36a:	681b      	ldr	r3, [r3, #0]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d06a      	beq.n	801b446 <bi_divide+0x306>
        /* we are implementing the following:
        if (V2*q_dash > (((U(0)*COMP_RADIX + U(1) -
                q_dash*V1)*COMP_RADIX) + U(2))) ... */
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801b370:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b372:	68d9      	ldr	r1, [r3, #12]
 801b374:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b376:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b37a:	461a      	mov	r2, r3
 801b37c:	4b89      	ldr	r3, [pc, #548]	@ (801b5a4 <bi_divide+0x464>)
 801b37e:	4413      	add	r3, r2
 801b380:	009b      	lsls	r3, r3, #2
 801b382:	440b      	add	r3, r1
 801b384:	6818      	ldr	r0, [r3, #0]
                            (long_comp) q_dash * V1);
 801b386:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b388:	68d9      	ldr	r1, [r3, #12]
 801b38a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b38c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b390:	461a      	mov	r2, r3
 801b392:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b396:	4413      	add	r3, r2
 801b398:	009b      	lsls	r3, r3, #2
 801b39a:	440b      	add	r3, r1
 801b39c:	681a      	ldr	r2, [r3, #0]
 801b39e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b3a0:	fb02 f303 	mul.w	r3, r2, r3
        comp inner = (comp)((long_comp) COMP_RADIX * U(0) + U(1) -
 801b3a4:	1ac3      	subs	r3, r0, r3
 801b3a6:	65bb      	str	r3, [r7, #88]	@ 0x58
        if ((long_comp) V2 * q_dash > (long_comp) inner * COMP_RADIX + U(2)) {
 801b3a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b3aa:	68d9      	ldr	r1, [r3, #12]
 801b3ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b3ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b3b2:	461a      	mov	r2, r3
 801b3b4:	4b7b      	ldr	r3, [pc, #492]	@ (801b5a4 <bi_divide+0x464>)
 801b3b6:	4413      	add	r3, r2
 801b3b8:	009b      	lsls	r3, r3, #2
 801b3ba:	440b      	add	r3, r1
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	2200      	movs	r2, #0
 801b3c0:	613b      	str	r3, [r7, #16]
 801b3c2:	617a      	str	r2, [r7, #20]
 801b3c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b3c6:	2200      	movs	r2, #0
 801b3c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 801b3ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
 801b3cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801b3d0:	462b      	mov	r3, r5
 801b3d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801b3d6:	4602      	mov	r2, r0
 801b3d8:	fb02 f203 	mul.w	r2, r2, r3
 801b3dc:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 801b3e0:	460b      	mov	r3, r1
 801b3e2:	4621      	mov	r1, r4
 801b3e4:	fb01 f303 	mul.w	r3, r1, r3
 801b3e8:	4413      	add	r3, r2
 801b3ea:	4622      	mov	r2, r4
 801b3ec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801b3ee:	fba2 8901 	umull	r8, r9, r2, r1
 801b3f2:	444b      	add	r3, r9
 801b3f4:	4699      	mov	r9, r3
 801b3f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	60bb      	str	r3, [r7, #8]
 801b3fc:	60fa      	str	r2, [r7, #12]
 801b3fe:	f04f 0000 	mov.w	r0, #0
 801b402:	f04f 0100 	mov.w	r1, #0
 801b406:	68bb      	ldr	r3, [r7, #8]
 801b408:	0019      	movs	r1, r3
 801b40a:	2000      	movs	r0, #0
 801b40c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b40e:	68dc      	ldr	r4, [r3, #12]
 801b410:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b412:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b416:	461a      	mov	r2, r3
 801b418:	4b63      	ldr	r3, [pc, #396]	@ (801b5a8 <bi_divide+0x468>)
 801b41a:	4413      	add	r3, r2
 801b41c:	009b      	lsls	r3, r3, #2
 801b41e:	4423      	add	r3, r4
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	2200      	movs	r2, #0
 801b424:	603b      	str	r3, [r7, #0]
 801b426:	607a      	str	r2, [r7, #4]
 801b428:	e9d7 4500 	ldrd	r4, r5, [r7]
 801b42c:	4623      	mov	r3, r4
 801b42e:	eb10 0a03 	adds.w	sl, r0, r3
 801b432:	462b      	mov	r3, r5
 801b434:	eb41 0b03 	adc.w	fp, r1, r3
 801b438:	45c2      	cmp	sl, r8
 801b43a:	eb7b 0309 	sbcs.w	r3, fp, r9
 801b43e:	d202      	bcs.n	801b446 <bi_divide+0x306>
          q_dash--;
 801b440:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b442:	3b01      	subs	r3, #1
 801b444:	677b      	str	r3, [r7, #116]	@ 0x74
        }
      }
    }

    /* multiply and subtract */
    if (q_dash) {
 801b446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d057      	beq.n	801b4fc <bi_divide+0x3bc>
      int is_negative;
      tmp_u = bi_subtract(ctx, tmp_u, bi_int_multiply(ctx, bi_copy(v), q_dash),
 801b44c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b44e:	f7ff fc9d 	bl	801ad8c <bi_copy>
 801b452:	4603      	mov	r3, r0
 801b454:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801b456:	4619      	mov	r1, r3
 801b458:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b45a:	f7ff fdee 	bl	801b03a <bi_int_multiply>
 801b45e:	4602      	mov	r2, r0
 801b460:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801b464:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801b466:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b468:	f7ff fd8f 	bl	801af8a <bi_subtract>
 801b46c:	67b8      	str	r0, [r7, #120]	@ 0x78
                          &is_negative);
      more_comps(tmp_u, n + 1);
 801b46e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b470:	3301      	adds	r3, #1
 801b472:	4619      	mov	r1, r3
 801b474:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 801b476:	f000 fb13 	bl	801baa0 <more_comps>

      Q(j) = q_dash;
 801b47a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b47c:	68d9      	ldr	r1, [r3, #12]
 801b47e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b480:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b484:	461a      	mov	r2, r3
 801b486:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b488:	1ad3      	subs	r3, r2, r3
 801b48a:	461a      	mov	r2, r3
 801b48c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b490:	4413      	add	r3, r2
 801b492:	009b      	lsls	r3, r3, #2
 801b494:	18ca      	adds	r2, r1, r3
 801b496:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b498:	6013      	str	r3, [r2, #0]

      /* add back */
      if (is_negative) {
 801b49a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d03d      	beq.n	801b51c <bi_divide+0x3dc>
        Q(j)--;
 801b4a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b4a2:	68d9      	ldr	r1, [r3, #12]
 801b4a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b4a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b4aa:	461a      	mov	r2, r3
 801b4ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b4ae:	1ad3      	subs	r3, r2, r3
 801b4b0:	461a      	mov	r2, r3
 801b4b2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b4b6:	4413      	add	r3, r2
 801b4b8:	009b      	lsls	r3, r3, #2
 801b4ba:	18ca      	adds	r2, r1, r3
 801b4bc:	6813      	ldr	r3, [r2, #0]
 801b4be:	3b01      	subs	r3, #1
 801b4c0:	6013      	str	r3, [r2, #0]
        tmp_u = bi_add(ctx, tmp_u, bi_copy(v));
 801b4c2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b4c4:	f7ff fc62 	bl	801ad8c <bi_copy>
 801b4c8:	4603      	mov	r3, r0
 801b4ca:	461a      	mov	r2, r3
 801b4cc:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801b4ce:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b4d0:	f7ff fcfe 	bl	801aed0 <bi_add>
 801b4d4:	67b8      	str	r0, [r7, #120]	@ 0x78

        /* lop off the carry */
        tmp_u->size--;
 801b4d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b4d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b4dc:	b29b      	uxth	r3, r3
 801b4de:	3b01      	subs	r3, #1
 801b4e0:	b29b      	uxth	r3, r3
 801b4e2:	b21b      	sxth	r3, r3
 801b4e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801b4e6:	8093      	strh	r3, [r2, #4]
        v->size--;
 801b4e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b4ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b4ee:	b29b      	uxth	r3, r3
 801b4f0:	3b01      	subs	r3, #1
 801b4f2:	b29b      	uxth	r3, r3
 801b4f4:	b21b      	sxth	r3, r3
 801b4f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b4f8:	8093      	strh	r3, [r2, #4]
 801b4fa:	e00f      	b.n	801b51c <bi_divide+0x3dc>
      }
    } else {
      Q(j) = 0;
 801b4fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b4fe:	68d9      	ldr	r1, [r3, #12]
 801b500:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b502:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b506:	461a      	mov	r2, r3
 801b508:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b50a:	1ad3      	subs	r3, r2, r3
 801b50c:	461a      	mov	r2, r3
 801b50e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b512:	4413      	add	r3, r2
 801b514:	009b      	lsls	r3, r3, #2
 801b516:	18ca      	adds	r2, r1, r3
 801b518:	2300      	movs	r3, #0
 801b51a:	6013      	str	r3, [r2, #0]
    }

    /* copy back to u */
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801b51c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b51e:	68d9      	ldr	r1, [r3, #12]
 801b520:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b522:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b526:	461a      	mov	r2, r3
 801b528:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b52a:	1ad3      	subs	r3, r2, r3
 801b52c:	1e5a      	subs	r2, r3, #1
 801b52e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b530:	1ad3      	subs	r3, r2, r3
 801b532:	009b      	lsls	r3, r3, #2
 801b534:	18c8      	adds	r0, r1, r3
 801b536:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b538:	68d9      	ldr	r1, [r3, #12]
           (size_t) (n + 1) * COMP_BYTE_SIZE);
 801b53a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b53c:	3301      	adds	r3, #1
    memcpy(&u->comps[u->size - n - 1 - j], tmp_u->comps,
 801b53e:	009b      	lsls	r3, r3, #2
 801b540:	461a      	mov	r2, r3
 801b542:	f008 fa62 	bl	8023a0a <memcpy>
  } while (++j <= m);
 801b546:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b548:	3301      	adds	r3, #1
 801b54a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801b54c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801b54e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b550:	429a      	cmp	r2, r3
 801b552:	f77f ae82 	ble.w	801b25a <bi_divide+0x11a>

  bi_free(ctx, tmp_u);
 801b556:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801b558:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b55a:	f7ff fc57 	bl	801ae0c <bi_free>
  bi_free(ctx, v);
 801b55e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801b560:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b562:	f7ff fc53 	bl	801ae0c <bi_free>

  if (is_mod) /* get the remainder */
 801b566:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d00e      	beq.n	801b58a <bi_divide+0x44a>
  {
    bi_free(ctx, quotient);
 801b56c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801b56e:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b570:	f7ff fc4c 	bl	801ae0c <bi_free>
    return bi_int_divide(ctx, trim(u), d);
 801b574:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 801b576:	f000 fba0 	bl	801bcba <trim>
 801b57a:	4603      	mov	r3, r0
 801b57c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b57e:	4619      	mov	r1, r3
 801b580:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b582:	f000 f813 	bl	801b5ac <bi_int_divide>
 801b586:	4603      	mov	r3, r0
 801b588:	e007      	b.n	801b59a <bi_divide+0x45a>
  } else /* get the quotient */
  {
    bi_free(ctx, u);
 801b58a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801b58c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801b58e:	f7ff fc3d 	bl	801ae0c <bi_free>
    return trim(quotient);
 801b592:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 801b594:	f000 fb91 	bl	801bcba <trim>
 801b598:	4603      	mov	r3, r0
  }
}
 801b59a:	4618      	mov	r0, r3
 801b59c:	3780      	adds	r7, #128	@ 0x80
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801b5a4:	3ffffffe 	.word	0x3ffffffe
 801b5a8:	3ffffffd 	.word	0x3ffffffd

0801b5ac <bi_int_divide>:

/*
 * Perform an integer divide on a bigint.
 */
static bigint *bi_int_divide(BI_CTX *ctx, bigint *biR, comp denom) {
 801b5ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b5b0:	b08a      	sub	sp, #40	@ 0x28
 801b5b2:	af00      	add	r7, sp, #0
 801b5b4:	6178      	str	r0, [r7, #20]
 801b5b6:	6139      	str	r1, [r7, #16]
 801b5b8:	60fa      	str	r2, [r7, #12]
  int i = biR->size - 1;
 801b5ba:	693b      	ldr	r3, [r7, #16]
 801b5bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b5c0:	3b01      	subs	r3, #1
 801b5c2:	627b      	str	r3, [r7, #36]	@ 0x24
  long_comp r = 0;
 801b5c4:	f04f 0200 	mov.w	r2, #0
 801b5c8:	f04f 0300 	mov.w	r3, #0
 801b5cc:	e9c7 2306 	strd	r2, r3, [r7, #24]

  (void) ctx;
  check(biR);

  do {
    r = (r << COMP_BIT_SIZE) + biR->comps[i];
 801b5d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b5d4:	f04f 0200 	mov.w	r2, #0
 801b5d8:	f04f 0300 	mov.w	r3, #0
 801b5dc:	0003      	movs	r3, r0
 801b5de:	2200      	movs	r2, #0
 801b5e0:	6939      	ldr	r1, [r7, #16]
 801b5e2:	68c8      	ldr	r0, [r1, #12]
 801b5e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b5e6:	0089      	lsls	r1, r1, #2
 801b5e8:	4401      	add	r1, r0
 801b5ea:	6809      	ldr	r1, [r1, #0]
 801b5ec:	2000      	movs	r0, #0
 801b5ee:	460c      	mov	r4, r1
 801b5f0:	4605      	mov	r5, r0
 801b5f2:	eb12 0804 	adds.w	r8, r2, r4
 801b5f6:	eb43 0905 	adc.w	r9, r3, r5
 801b5fa:	e9c7 8906 	strd	r8, r9, [r7, #24]
    biR->comps[i] = (comp)(r / denom);
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	2200      	movs	r2, #0
 801b602:	603b      	str	r3, [r7, #0]
 801b604:	607a      	str	r2, [r7, #4]
 801b606:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b60a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b60e:	f7e4 fee7 	bl	80003e0 <__aeabi_uldivmod>
 801b612:	4602      	mov	r2, r0
 801b614:	460b      	mov	r3, r1
 801b616:	4610      	mov	r0, r2
 801b618:	4619      	mov	r1, r3
 801b61a:	693b      	ldr	r3, [r7, #16]
 801b61c:	68da      	ldr	r2, [r3, #12]
 801b61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b620:	009b      	lsls	r3, r3, #2
 801b622:	4413      	add	r3, r2
 801b624:	4602      	mov	r2, r0
 801b626:	601a      	str	r2, [r3, #0]
    r %= denom;
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	2200      	movs	r2, #0
 801b62c:	469a      	mov	sl, r3
 801b62e:	4693      	mov	fp, r2
 801b630:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801b634:	4652      	mov	r2, sl
 801b636:	465b      	mov	r3, fp
 801b638:	f7e4 fed2 	bl	80003e0 <__aeabi_uldivmod>
 801b63c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  } while (--i >= 0);
 801b640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b642:	3b01      	subs	r3, #1
 801b644:	627b      	str	r3, [r7, #36]	@ 0x24
 801b646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b648:	2b00      	cmp	r3, #0
 801b64a:	dac1      	bge.n	801b5d0 <bi_int_divide+0x24>

  return trim(biR);
 801b64c:	6938      	ldr	r0, [r7, #16]
 801b64e:	f000 fb34 	bl	801bcba <trim>
 801b652:	4603      	mov	r3, r0
}
 801b654:	4618      	mov	r0, r3
 801b656:	3728      	adds	r7, #40	@ 0x28
 801b658:	46bd      	mov	sp, r7
 801b65a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b65e <bi_import>:
 * @param ctx [in]  The bigint session context.
 * @param data [in] The data to be converted.
 * @param size [in] The number of bytes of data.
 * @return A bigint representing this data.
 */
NS_INTERNAL bigint *bi_import(BI_CTX *ctx, const uint8_t *data, int size) {
 801b65e:	b580      	push	{r7, lr}
 801b660:	b088      	sub	sp, #32
 801b662:	af00      	add	r7, sp, #0
 801b664:	60f8      	str	r0, [r7, #12]
 801b666:	60b9      	str	r1, [r7, #8]
 801b668:	607a      	str	r2, [r7, #4]
  bigint *biR = alloc(ctx, (size + COMP_BYTE_SIZE - 1) / COMP_BYTE_SIZE);
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	3303      	adds	r3, #3
 801b66e:	2b00      	cmp	r3, #0
 801b670:	da00      	bge.n	801b674 <bi_import+0x16>
 801b672:	3303      	adds	r3, #3
 801b674:	109b      	asrs	r3, r3, #2
 801b676:	4619      	mov	r1, r3
 801b678:	68f8      	ldr	r0, [r7, #12]
 801b67a:	f000 fa6d 	bl	801bb58 <alloc>
 801b67e:	6138      	str	r0, [r7, #16]
  int i, j = 0, offset = 0;
 801b680:	2300      	movs	r3, #0
 801b682:	61bb      	str	r3, [r7, #24]
 801b684:	2300      	movs	r3, #0
 801b686:	617b      	str	r3, [r7, #20]

  memset(biR->comps, 0, (size_t) (biR->size * COMP_BYTE_SIZE));
 801b688:	693b      	ldr	r3, [r7, #16]
 801b68a:	68d8      	ldr	r0, [r3, #12]
 801b68c:	693b      	ldr	r3, [r7, #16]
 801b68e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b692:	009b      	lsls	r3, r3, #2
 801b694:	461a      	mov	r2, r3
 801b696:	2100      	movs	r1, #0
 801b698:	f008 f881 	bl	802379e <memset>

  for (i = size - 1; i >= 0; i--) {
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	3b01      	subs	r3, #1
 801b6a0:	61fb      	str	r3, [r7, #28]
 801b6a2:	e022      	b.n	801b6ea <bi_import+0x8c>
    biR->comps[offset] += (comp) data[i] << (j * 8);
 801b6a4:	693b      	ldr	r3, [r7, #16]
 801b6a6:	68da      	ldr	r2, [r3, #12]
 801b6a8:	697b      	ldr	r3, [r7, #20]
 801b6aa:	009b      	lsls	r3, r3, #2
 801b6ac:	4413      	add	r3, r2
 801b6ae:	6819      	ldr	r1, [r3, #0]
 801b6b0:	69fb      	ldr	r3, [r7, #28]
 801b6b2:	68ba      	ldr	r2, [r7, #8]
 801b6b4:	4413      	add	r3, r2
 801b6b6:	781b      	ldrb	r3, [r3, #0]
 801b6b8:	461a      	mov	r2, r3
 801b6ba:	69bb      	ldr	r3, [r7, #24]
 801b6bc:	00db      	lsls	r3, r3, #3
 801b6be:	409a      	lsls	r2, r3
 801b6c0:	693b      	ldr	r3, [r7, #16]
 801b6c2:	68d8      	ldr	r0, [r3, #12]
 801b6c4:	697b      	ldr	r3, [r7, #20]
 801b6c6:	009b      	lsls	r3, r3, #2
 801b6c8:	4403      	add	r3, r0
 801b6ca:	440a      	add	r2, r1
 801b6cc:	601a      	str	r2, [r3, #0]

    if (++j == COMP_BYTE_SIZE) {
 801b6ce:	69bb      	ldr	r3, [r7, #24]
 801b6d0:	3301      	adds	r3, #1
 801b6d2:	61bb      	str	r3, [r7, #24]
 801b6d4:	69bb      	ldr	r3, [r7, #24]
 801b6d6:	2b04      	cmp	r3, #4
 801b6d8:	d104      	bne.n	801b6e4 <bi_import+0x86>
      j = 0;
 801b6da:	2300      	movs	r3, #0
 801b6dc:	61bb      	str	r3, [r7, #24]
      offset++;
 801b6de:	697b      	ldr	r3, [r7, #20]
 801b6e0:	3301      	adds	r3, #1
 801b6e2:	617b      	str	r3, [r7, #20]
  for (i = size - 1; i >= 0; i--) {
 801b6e4:	69fb      	ldr	r3, [r7, #28]
 801b6e6:	3b01      	subs	r3, #1
 801b6e8:	61fb      	str	r3, [r7, #28]
 801b6ea:	69fb      	ldr	r3, [r7, #28]
 801b6ec:	2b00      	cmp	r3, #0
 801b6ee:	dad9      	bge.n	801b6a4 <bi_import+0x46>
    }
  }

  return trim(biR);
 801b6f0:	6938      	ldr	r0, [r7, #16]
 801b6f2:	f000 fae2 	bl	801bcba <trim>
 801b6f6:	4603      	mov	r3, r0
}
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	3720      	adds	r7, #32
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bd80      	pop	{r7, pc}

0801b700 <bi_export>:
 * @param x [in]  The bigint to be converted.
 * @param data [out] The converted data as a byte stream.
 * @param size [in] The maximum size of the byte stream. Unused bytes will be
 * zeroed.
 */
NS_INTERNAL void bi_export(BI_CTX *ctx, bigint *x, uint8_t *data, int size) {
 801b700:	b580      	push	{r7, lr}
 801b702:	b08a      	sub	sp, #40	@ 0x28
 801b704:	af00      	add	r7, sp, #0
 801b706:	60f8      	str	r0, [r7, #12]
 801b708:	60b9      	str	r1, [r7, #8]
 801b70a:	607a      	str	r2, [r7, #4]
 801b70c:	603b      	str	r3, [r7, #0]
  int i, j, k = size - 1;
 801b70e:	683b      	ldr	r3, [r7, #0]
 801b710:	3b01      	subs	r3, #1
 801b712:	61fb      	str	r3, [r7, #28]

  check(x);
  memset(data, 0, (size_t) size); /* ensure all leading 0's are cleared */
 801b714:	683b      	ldr	r3, [r7, #0]
 801b716:	461a      	mov	r2, r3
 801b718:	2100      	movs	r1, #0
 801b71a:	6878      	ldr	r0, [r7, #4]
 801b71c:	f008 f83f 	bl	802379e <memset>

  for (i = 0; i < x->size; i++) {
 801b720:	2300      	movs	r3, #0
 801b722:	627b      	str	r3, [r7, #36]	@ 0x24
 801b724:	e02b      	b.n	801b77e <bi_export+0x7e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801b726:	2300      	movs	r3, #0
 801b728:	623b      	str	r3, [r7, #32]
 801b72a:	e022      	b.n	801b772 <bi_export+0x72>
      comp mask = (comp) 0xff << (j * 8);
 801b72c:	6a3b      	ldr	r3, [r7, #32]
 801b72e:	00db      	lsls	r3, r3, #3
 801b730:	22ff      	movs	r2, #255	@ 0xff
 801b732:	fa02 f303 	lsl.w	r3, r2, r3
 801b736:	61bb      	str	r3, [r7, #24]
      int num = (int) (x->comps[i] & mask) >> (j * 8);
 801b738:	68bb      	ldr	r3, [r7, #8]
 801b73a:	68da      	ldr	r2, [r3, #12]
 801b73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b73e:	009b      	lsls	r3, r3, #2
 801b740:	4413      	add	r3, r2
 801b742:	681a      	ldr	r2, [r3, #0]
 801b744:	69bb      	ldr	r3, [r7, #24]
 801b746:	4013      	ands	r3, r2
 801b748:	461a      	mov	r2, r3
 801b74a:	6a3b      	ldr	r3, [r7, #32]
 801b74c:	00db      	lsls	r3, r3, #3
 801b74e:	fa42 f303 	asr.w	r3, r2, r3
 801b752:	617b      	str	r3, [r7, #20]
      data[k--] = (uint8_t) num;
 801b754:	69fb      	ldr	r3, [r7, #28]
 801b756:	1e5a      	subs	r2, r3, #1
 801b758:	61fa      	str	r2, [r7, #28]
 801b75a:	461a      	mov	r2, r3
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	4413      	add	r3, r2
 801b760:	697a      	ldr	r2, [r7, #20]
 801b762:	b2d2      	uxtb	r2, r2
 801b764:	701a      	strb	r2, [r3, #0]

      if (k < 0) {
 801b766:	69fb      	ldr	r3, [r7, #28]
 801b768:	2b00      	cmp	r3, #0
 801b76a:	db10      	blt.n	801b78e <bi_export+0x8e>
    for (j = 0; j < COMP_BYTE_SIZE; j++) {
 801b76c:	6a3b      	ldr	r3, [r7, #32]
 801b76e:	3301      	adds	r3, #1
 801b770:	623b      	str	r3, [r7, #32]
 801b772:	6a3b      	ldr	r3, [r7, #32]
 801b774:	2b03      	cmp	r3, #3
 801b776:	ddd9      	ble.n	801b72c <bi_export+0x2c>
  for (i = 0; i < x->size; i++) {
 801b778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b77a:	3301      	adds	r3, #1
 801b77c:	627b      	str	r3, [r7, #36]	@ 0x24
 801b77e:	68bb      	ldr	r3, [r7, #8]
 801b780:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b784:	461a      	mov	r2, r3
 801b786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b788:	4293      	cmp	r3, r2
 801b78a:	dbcc      	blt.n	801b726 <bi_export+0x26>
        goto buf_done;
      }
    }
  }
buf_done:
 801b78c:	e000      	b.n	801b790 <bi_export+0x90>
        goto buf_done;
 801b78e:	bf00      	nop

  bi_free(ctx, x);
 801b790:	68b9      	ldr	r1, [r7, #8]
 801b792:	68f8      	ldr	r0, [r7, #12]
 801b794:	f7ff fb3a 	bl	801ae0c <bi_free>
}
 801b798:	bf00      	nop
 801b79a:	3728      	adds	r7, #40	@ 0x28
 801b79c:	46bd      	mov	sp, r7
 801b79e:	bd80      	pop	{r7, pc}

0801b7a0 <bi_set_mod>:
 * @param mod_offset [in] There are three moduluii that can be stored - the
 * standard modulus, and its two primes p and q. This offset refers to which
 * modulus we are referring to.
 * @see bi_free_mod(), bi_mod_power().
 */
NS_INTERNAL void bi_set_mod(BI_CTX *ctx, bigint *bim, int mod_offset) {
 801b7a0:	b5b0      	push	{r4, r5, r7, lr}
 801b7a2:	b086      	sub	sp, #24
 801b7a4:	af00      	add	r7, sp, #0
 801b7a6:	60f8      	str	r0, [r7, #12]
 801b7a8:	60b9      	str	r1, [r7, #8]
 801b7aa:	607a      	str	r2, [r7, #4]
  int k = bim->size;
 801b7ac:	68bb      	ldr	r3, [r7, #8]
 801b7ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b7b2:	617b      	str	r3, [r7, #20]
  comp d = (comp)((long_comp) COMP_RADIX / (bim->comps[k - 1] + 1));
 801b7b4:	68bb      	ldr	r3, [r7, #8]
 801b7b6:	68da      	ldr	r2, [r3, #12]
 801b7b8:	6979      	ldr	r1, [r7, #20]
 801b7ba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801b7be:	440b      	add	r3, r1
 801b7c0:	009b      	lsls	r3, r3, #2
 801b7c2:	4413      	add	r3, r2
 801b7c4:	681b      	ldr	r3, [r3, #0]
 801b7c6:	3301      	adds	r3, #1
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	461c      	mov	r4, r3
 801b7cc:	4615      	mov	r5, r2
 801b7ce:	4622      	mov	r2, r4
 801b7d0:	462b      	mov	r3, r5
 801b7d2:	f04f 0000 	mov.w	r0, #0
 801b7d6:	f04f 0101 	mov.w	r1, #1
 801b7da:	f7e4 fe01 	bl	80003e0 <__aeabi_uldivmod>
 801b7de:	4602      	mov	r2, r0
 801b7e0:	460b      	mov	r3, r1
 801b7e2:	4613      	mov	r3, r2
 801b7e4:	613b      	str	r3, [r7, #16]
#ifdef CONFIG_BIGINT_MONTGOMERY
  bigint *R, *R2;
#endif

  ctx->bi_mod[mod_offset] = bim;
 801b7e6:	68fa      	ldr	r2, [r7, #12]
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	3302      	adds	r3, #2
 801b7ec:	009b      	lsls	r3, r3, #2
 801b7ee:	4413      	add	r3, r2
 801b7f0:	68ba      	ldr	r2, [r7, #8]
 801b7f2:	605a      	str	r2, [r3, #4]
  bi_permanent(ctx->bi_mod[mod_offset]);
 801b7f4:	68fa      	ldr	r2, [r7, #12]
 801b7f6:	687b      	ldr	r3, [r7, #4]
 801b7f8:	3302      	adds	r3, #2
 801b7fa:	009b      	lsls	r3, r3, #2
 801b7fc:	4413      	add	r3, r2
 801b7fe:	685b      	ldr	r3, [r3, #4]
 801b800:	4618      	mov	r0, r3
 801b802:	f7ff fadb 	bl	801adbc <bi_permanent>
  ctx->bi_normalised_mod[mod_offset] = bi_int_multiply(ctx, bim, d);
 801b806:	693a      	ldr	r2, [r7, #16]
 801b808:	68b9      	ldr	r1, [r7, #8]
 801b80a:	68f8      	ldr	r0, [r7, #12]
 801b80c:	f7ff fc15 	bl	801b03a <bi_int_multiply>
 801b810:	4601      	mov	r1, r0
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	687a      	ldr	r2, [r7, #4]
 801b816:	3206      	adds	r2, #6
 801b818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  bi_permanent(ctx->bi_normalised_mod[mod_offset]);
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	687a      	ldr	r2, [r7, #4]
 801b820:	3206      	adds	r2, #6
 801b822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b826:	4618      	mov	r0, r3
 801b828:	f7ff fac8 	bl	801adbc <bi_permanent>
  ctx->bi_mu[mod_offset] =
      bi_divide(ctx, comp_left_shift(bi_clone(ctx, ctx->bi_radix), k * 2 - 1),
                ctx->bi_mod[mod_offset], 0);
  bi_permanent(ctx->bi_mu[mod_offset]);
#endif
}
 801b82c:	bf00      	nop
 801b82e:	3718      	adds	r7, #24
 801b830:	46bd      	mov	sp, r7
 801b832:	bdb0      	pop	{r4, r5, r7, pc}

0801b834 <regular_multiply>:
 * Barrett reduction has no need for some parts of the product, so ignore bits
 * of the multiply. This routine gives Barrett its big performance
 * improvements over Classical/Montgomery reduction methods.
 */
static bigint *regular_multiply(BI_CTX *ctx, bigint *bia, bigint *bib,
                                int inner_partial, int outer_partial) {
 801b834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b838:	b098      	sub	sp, #96	@ 0x60
 801b83a:	af00      	add	r7, sp, #0
 801b83c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b83e:	62b9      	str	r1, [r7, #40]	@ 0x28
 801b840:	627a      	str	r2, [r7, #36]	@ 0x24
 801b842:	623b      	str	r3, [r7, #32]
  int i = 0, j;
 801b844:	2300      	movs	r3, #0
 801b846:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int n = bia->size;
 801b848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b84a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b84e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  int t = bib->size;
 801b850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b852:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801b856:	64bb      	str	r3, [r7, #72]	@ 0x48
  bigint *biR = alloc(ctx, n + t);
 801b858:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b85a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b85c:	4413      	add	r3, r2
 801b85e:	4619      	mov	r1, r3
 801b860:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b862:	f000 f979 	bl	801bb58 <alloc>
 801b866:	6478      	str	r0, [r7, #68]	@ 0x44
  comp *sr = biR->comps;
 801b868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b86a:	68db      	ldr	r3, [r3, #12]
 801b86c:	643b      	str	r3, [r7, #64]	@ 0x40
  comp *sa = bia->comps;
 801b86e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b870:	68db      	ldr	r3, [r3, #12]
 801b872:	63fb      	str	r3, [r7, #60]	@ 0x3c
  comp *sb = bib->comps;
 801b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b876:	68db      	ldr	r3, [r3, #12]
 801b878:	63bb      	str	r3, [r7, #56]	@ 0x38

  check(bia);
  check(bib);

  /* clear things to start with */
  memset(biR->comps, 0, (size_t) ((n + t) * COMP_BYTE_SIZE));
 801b87a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b87c:	68d8      	ldr	r0, [r3, #12]
 801b87e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b882:	4413      	add	r3, r2
 801b884:	009b      	lsls	r3, r3, #2
 801b886:	461a      	mov	r2, r3
 801b888:	2100      	movs	r1, #0
 801b88a:	f007 ff88 	bl	802379e <memset>

  do {
    long_comp tmp;
    comp carry = 0;
 801b88e:	2300      	movs	r3, #0
 801b890:	657b      	str	r3, [r7, #84]	@ 0x54
    int r_index = i;
 801b892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b894:	653b      	str	r3, [r7, #80]	@ 0x50
    j = 0;
 801b896:	2300      	movs	r3, #0
 801b898:	65bb      	str	r3, [r7, #88]	@ 0x58

    if (outer_partial && outer_partial - i > 0 && outer_partial < n) {
 801b89a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d014      	beq.n	801b8cc <regular_multiply+0x98>
 801b8a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b8a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8a8:	1ad3      	subs	r3, r2, r3
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	dd0e      	ble.n	801b8cc <regular_multiply+0x98>
 801b8ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b8b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b8b4:	429a      	cmp	r2, r3
 801b8b6:	da09      	bge.n	801b8cc <regular_multiply+0x98>
      r_index = outer_partial - 1;
 801b8b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801b8bc:	3b01      	subs	r3, #1
 801b8be:	653b      	str	r3, [r7, #80]	@ 0x50
      j = outer_partial - i - 1;
 801b8c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801b8c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8c6:	1ad3      	subs	r3, r2, r3
 801b8c8:	3b01      	subs	r3, #1
 801b8ca:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    do {
      if (inner_partial && r_index >= inner_partial) {
 801b8cc:	6a3b      	ldr	r3, [r7, #32]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d003      	beq.n	801b8da <regular_multiply+0xa6>
 801b8d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b8d4:	6a3b      	ldr	r3, [r7, #32]
 801b8d6:	429a      	cmp	r2, r3
 801b8d8:	da5a      	bge.n	801b990 <regular_multiply+0x15c>
        break;
      }

      tmp = sr[r_index] + ((long_comp) sa[j]) * sb[i] + carry;
 801b8da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b8dc:	009a      	lsls	r2, r3, #2
 801b8de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b8e0:	4413      	add	r3, r2
 801b8e2:	681b      	ldr	r3, [r3, #0]
 801b8e4:	2200      	movs	r2, #0
 801b8e6:	61bb      	str	r3, [r7, #24]
 801b8e8:	61fa      	str	r2, [r7, #28]
 801b8ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b8ec:	009a      	lsls	r2, r3, #2
 801b8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b8f0:	4413      	add	r3, r2
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	469a      	mov	sl, r3
 801b8f8:	4693      	mov	fp, r2
 801b8fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b8fc:	009a      	lsls	r2, r3, #2
 801b8fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801b900:	4413      	add	r3, r2
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	2200      	movs	r2, #0
 801b906:	613b      	str	r3, [r7, #16]
 801b908:	617a      	str	r2, [r7, #20]
 801b90a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801b90e:	4603      	mov	r3, r0
 801b910:	fb03 f20b 	mul.w	r2, r3, fp
 801b914:	460b      	mov	r3, r1
 801b916:	fb0a f303 	mul.w	r3, sl, r3
 801b91a:	4413      	add	r3, r2
 801b91c:	4602      	mov	r2, r0
 801b91e:	fbaa 4502 	umull	r4, r5, sl, r2
 801b922:	442b      	add	r3, r5
 801b924:	461d      	mov	r5, r3
 801b926:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801b92a:	460b      	mov	r3, r1
 801b92c:	eb13 0804 	adds.w	r8, r3, r4
 801b930:	4613      	mov	r3, r2
 801b932:	eb43 0905 	adc.w	r9, r3, r5
 801b936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b938:	2200      	movs	r2, #0
 801b93a:	60bb      	str	r3, [r7, #8]
 801b93c:	60fa      	str	r2, [r7, #12]
 801b93e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801b942:	460b      	mov	r3, r1
 801b944:	eb18 0303 	adds.w	r3, r8, r3
 801b948:	603b      	str	r3, [r7, #0]
 801b94a:	4613      	mov	r3, r2
 801b94c:	eb49 0303 	adc.w	r3, r9, r3
 801b950:	607b      	str	r3, [r7, #4]
 801b952:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b956:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      sr[r_index++] = (comp) tmp; /* downsize */
 801b95a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b95c:	1c53      	adds	r3, r2, #1
 801b95e:	653b      	str	r3, [r7, #80]	@ 0x50
 801b960:	4613      	mov	r3, r2
 801b962:	009a      	lsls	r2, r3, #2
 801b964:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b966:	441a      	add	r2, r3
 801b968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b96a:	6013      	str	r3, [r2, #0]
      carry = (comp) (tmp >> COMP_BIT_SIZE);
 801b96c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801b970:	f04f 0000 	mov.w	r0, #0
 801b974:	f04f 0100 	mov.w	r1, #0
 801b978:	0018      	movs	r0, r3
 801b97a:	2100      	movs	r1, #0
 801b97c:	4603      	mov	r3, r0
 801b97e:	657b      	str	r3, [r7, #84]	@ 0x54
    } while (++j < n);
 801b980:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b982:	3301      	adds	r3, #1
 801b984:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b986:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b98a:	429a      	cmp	r2, r3
 801b98c:	db9e      	blt.n	801b8cc <regular_multiply+0x98>
 801b98e:	e000      	b.n	801b992 <regular_multiply+0x15e>
        break;
 801b990:	bf00      	nop

    sr[r_index] = carry;
 801b992:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b994:	009a      	lsls	r2, r3, #2
 801b996:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b998:	441a      	add	r2, r3
 801b99a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b99c:	6013      	str	r3, [r2, #0]
  } while (++i < t);
 801b99e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b9a0:	3301      	adds	r3, #1
 801b9a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801b9a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801b9a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b9a8:	429a      	cmp	r2, r3
 801b9aa:	f6ff af70 	blt.w	801b88e <regular_multiply+0x5a>

  bi_free(ctx, bia);
 801b9ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801b9b0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b9b2:	f7ff fa2b 	bl	801ae0c <bi_free>
  bi_free(ctx, bib);
 801b9b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b9b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b9ba:	f7ff fa27 	bl	801ae0c <bi_free>
  return trim(biR);
 801b9be:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801b9c0:	f000 f97b 	bl	801bcba <trim>
 801b9c4:	4603      	mov	r3, r0
}
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	3760      	adds	r7, #96	@ 0x60
 801b9ca:	46bd      	mov	sp, r7
 801b9cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801b9d0 <bi_multiply>:
 * @param ctx [in]  The bigint session context.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return The result of the multiplication.
 */
NS_INTERNAL bigint *bi_multiply(BI_CTX *ctx, bigint *bia, bigint *bib) {
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b086      	sub	sp, #24
 801b9d4:	af02      	add	r7, sp, #8
 801b9d6:	60f8      	str	r0, [r7, #12]
 801b9d8:	60b9      	str	r1, [r7, #8]
 801b9da:	607a      	str	r2, [r7, #4]
    return regular_multiply(ctx, bia, bib, 0, 0);
  }

  return karatsuba(ctx, bia, bib, 0);
#else
  return regular_multiply(ctx, bia, bib, 0, 0);
 801b9dc:	2300      	movs	r3, #0
 801b9de:	9300      	str	r3, [sp, #0]
 801b9e0:	2300      	movs	r3, #0
 801b9e2:	687a      	ldr	r2, [r7, #4]
 801b9e4:	68b9      	ldr	r1, [r7, #8]
 801b9e6:	68f8      	ldr	r0, [r7, #12]
 801b9e8:	f7ff ff24 	bl	801b834 <regular_multiply>
 801b9ec:	4603      	mov	r3, r0
#endif
}
 801b9ee:	4618      	mov	r0, r3
 801b9f0:	3710      	adds	r7, #16
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	bd80      	pop	{r7, pc}

0801b9f6 <bi_compare>:
 * @brief Compare two bigints.
 * @param bia [in]  A bigint.
 * @param bib [in]  Another bigint.
 * @return -1 if smaller, 1 if larger and 0 if equal.
 */
NS_INTERNAL int bi_compare(bigint *bia, bigint *bib) {
 801b9f6:	b480      	push	{r7}
 801b9f8:	b087      	sub	sp, #28
 801b9fa:	af00      	add	r7, sp, #0
 801b9fc:	6078      	str	r0, [r7, #4]
 801b9fe:	6039      	str	r1, [r7, #0]
  int r, i;

  check(bia);
  check(bib);

  if (bia->size > bib->size)
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ba06:	683b      	ldr	r3, [r7, #0]
 801ba08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ba0c:	429a      	cmp	r2, r3
 801ba0e:	dd02      	ble.n	801ba16 <bi_compare+0x20>
    r = 1;
 801ba10:	2301      	movs	r3, #1
 801ba12:	617b      	str	r3, [r7, #20]
 801ba14:	e03d      	b.n	801ba92 <bi_compare+0x9c>
  else if (bia->size < bib->size)
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801ba1c:	683b      	ldr	r3, [r7, #0]
 801ba1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ba22:	429a      	cmp	r2, r3
 801ba24:	da03      	bge.n	801ba2e <bi_compare+0x38>
    r = -1;
 801ba26:	f04f 33ff 	mov.w	r3, #4294967295
 801ba2a:	617b      	str	r3, [r7, #20]
 801ba2c:	e031      	b.n	801ba92 <bi_compare+0x9c>
  else {
    comp *a = bia->comps;
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	68db      	ldr	r3, [r3, #12]
 801ba32:	60fb      	str	r3, [r7, #12]
    comp *b = bib->comps;
 801ba34:	683b      	ldr	r3, [r7, #0]
 801ba36:	68db      	ldr	r3, [r3, #12]
 801ba38:	60bb      	str	r3, [r7, #8]

    /* Same number of components.  Compare starting from the high end
     * and working down. */
    r = 0;
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	617b      	str	r3, [r7, #20]
    i = bia->size - 1;
 801ba3e:	687b      	ldr	r3, [r7, #4]
 801ba40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801ba44:	3b01      	subs	r3, #1
 801ba46:	613b      	str	r3, [r7, #16]

    do {
      if (a[i] > b[i]) {
 801ba48:	693b      	ldr	r3, [r7, #16]
 801ba4a:	009b      	lsls	r3, r3, #2
 801ba4c:	68fa      	ldr	r2, [r7, #12]
 801ba4e:	4413      	add	r3, r2
 801ba50:	681a      	ldr	r2, [r3, #0]
 801ba52:	693b      	ldr	r3, [r7, #16]
 801ba54:	009b      	lsls	r3, r3, #2
 801ba56:	68b9      	ldr	r1, [r7, #8]
 801ba58:	440b      	add	r3, r1
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	429a      	cmp	r2, r3
 801ba5e:	d902      	bls.n	801ba66 <bi_compare+0x70>
        r = 1;
 801ba60:	2301      	movs	r3, #1
 801ba62:	617b      	str	r3, [r7, #20]
        break;
 801ba64:	e015      	b.n	801ba92 <bi_compare+0x9c>
      } else if (a[i] < b[i]) {
 801ba66:	693b      	ldr	r3, [r7, #16]
 801ba68:	009b      	lsls	r3, r3, #2
 801ba6a:	68fa      	ldr	r2, [r7, #12]
 801ba6c:	4413      	add	r3, r2
 801ba6e:	681a      	ldr	r2, [r3, #0]
 801ba70:	693b      	ldr	r3, [r7, #16]
 801ba72:	009b      	lsls	r3, r3, #2
 801ba74:	68b9      	ldr	r1, [r7, #8]
 801ba76:	440b      	add	r3, r1
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	429a      	cmp	r2, r3
 801ba7c:	d203      	bcs.n	801ba86 <bi_compare+0x90>
        r = -1;
 801ba7e:	f04f 33ff 	mov.w	r3, #4294967295
 801ba82:	617b      	str	r3, [r7, #20]
        break;
 801ba84:	e005      	b.n	801ba92 <bi_compare+0x9c>
      }
    } while (--i >= 0);
 801ba86:	693b      	ldr	r3, [r7, #16]
 801ba88:	3b01      	subs	r3, #1
 801ba8a:	613b      	str	r3, [r7, #16]
 801ba8c:	693b      	ldr	r3, [r7, #16]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	dada      	bge.n	801ba48 <bi_compare+0x52>
  }

  return r;
 801ba92:	697b      	ldr	r3, [r7, #20]
}
 801ba94:	4618      	mov	r0, r3
 801ba96:	371c      	adds	r7, #28
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba9e:	4770      	bx	lr

0801baa0 <more_comps>:

/*
 * Allocate and zero more components.  Does not consume bi.
 */
static void more_comps(bigint *bi, int n) {
 801baa0:	b580      	push	{r7, lr}
 801baa2:	b084      	sub	sp, #16
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	6078      	str	r0, [r7, #4]
 801baa8:	6039      	str	r1, [r7, #0]
  if (n > bi->max_comps) {
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801bab0:	461a      	mov	r2, r3
 801bab2:	683b      	ldr	r3, [r7, #0]
 801bab4:	4293      	cmp	r3, r2
 801bab6:	dd2e      	ble.n	801bb16 <more_comps+0x76>
    int max = MAX(bi->max_comps * 2, n);
 801bab8:	687b      	ldr	r3, [r7, #4]
 801baba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801babe:	005b      	lsls	r3, r3, #1
 801bac0:	683a      	ldr	r2, [r7, #0]
 801bac2:	4293      	cmp	r3, r2
 801bac4:	bfb8      	it	lt
 801bac6:	4613      	movlt	r3, r2
 801bac8:	60fb      	str	r3, [r7, #12]
    void *p = calloc(1, (size_t) max * COMP_BYTE_SIZE);
 801baca:	68fb      	ldr	r3, [r7, #12]
 801bacc:	009b      	lsls	r3, r3, #2
 801bace:	4619      	mov	r1, r3
 801bad0:	2001      	movs	r0, #1
 801bad2:	f007 fb8f 	bl	80231f4 <calloc>
 801bad6:	4603      	mov	r3, r0
 801bad8:	60bb      	str	r3, [r7, #8]
    if (p != NULL && bi->size > 0) memcpy(p, bi->comps, (size_t) bi->max_comps * COMP_BYTE_SIZE);
 801bada:	68bb      	ldr	r3, [r7, #8]
 801badc:	2b00      	cmp	r3, #0
 801bade:	d00e      	beq.n	801bafe <more_comps+0x5e>
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bae6:	2b00      	cmp	r3, #0
 801bae8:	dd09      	ble.n	801bafe <more_comps+0x5e>
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	68d9      	ldr	r1, [r3, #12]
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801baf4:	009b      	lsls	r3, r3, #2
 801baf6:	461a      	mov	r2, r3
 801baf8:	68b8      	ldr	r0, [r7, #8]
 801bafa:	f007 ff86 	bl	8023a0a <memcpy>
    free(bi->comps);
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	68db      	ldr	r3, [r3, #12]
 801bb02:	4618      	mov	r0, r3
 801bb04:	f007 fb9a 	bl	802323c <free>
    bi->max_comps = (short) max;
 801bb08:	68fb      	ldr	r3, [r7, #12]
 801bb0a:	b21a      	sxth	r2, r3
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	80da      	strh	r2, [r3, #6]
    bi->comps = (comp *) p;
 801bb10:	687b      	ldr	r3, [r7, #4]
 801bb12:	68ba      	ldr	r2, [r7, #8]
 801bb14:	60da      	str	r2, [r3, #12]
  }

  if (n > bi->size) {
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bb1c:	461a      	mov	r2, r3
 801bb1e:	683b      	ldr	r3, [r7, #0]
 801bb20:	4293      	cmp	r3, r2
 801bb22:	dd11      	ble.n	801bb48 <more_comps+0xa8>
    memset(&bi->comps[bi->size], 0, (size_t) (n - bi->size) * COMP_BYTE_SIZE);
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	68da      	ldr	r2, [r3, #12]
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bb2e:	009b      	lsls	r3, r3, #2
 801bb30:	18d0      	adds	r0, r2, r3
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bb38:	461a      	mov	r2, r3
 801bb3a:	683b      	ldr	r3, [r7, #0]
 801bb3c:	1a9b      	subs	r3, r3, r2
 801bb3e:	009b      	lsls	r3, r3, #2
 801bb40:	461a      	mov	r2, r3
 801bb42:	2100      	movs	r1, #0
 801bb44:	f007 fe2b 	bl	802379e <memset>
  }

  bi->size = (short) n;
 801bb48:	683b      	ldr	r3, [r7, #0]
 801bb4a:	b21a      	sxth	r2, r3
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	809a      	strh	r2, [r3, #4]
}
 801bb50:	bf00      	nop
 801bb52:	3710      	adds	r7, #16
 801bb54:	46bd      	mov	sp, r7
 801bb56:	bd80      	pop	{r7, pc}

0801bb58 <alloc>:

/*
 * Make a new empty bigint. It may just use an old one if one is available.
 * Otherwise get one off the heap.
 */
static bigint *alloc(BI_CTX *ctx, int size) {
 801bb58:	b580      	push	{r7, lr}
 801bb5a:	b084      	sub	sp, #16
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	6078      	str	r0, [r7, #4]
 801bb60:	6039      	str	r1, [r7, #0]
  bigint *biR;

  /* Can we recycle an old bigint? */
  if (ctx->free_list != NULL) {
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	685b      	ldr	r3, [r3, #4]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d016      	beq.n	801bb98 <alloc+0x40>
    biR = ctx->free_list;
 801bb6a:	687b      	ldr	r3, [r7, #4]
 801bb6c:	685b      	ldr	r3, [r3, #4]
 801bb6e:	60fb      	str	r3, [r7, #12]
    ctx->free_list = biR->next;
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	681a      	ldr	r2, [r3, #0]
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	605a      	str	r2, [r3, #4]
    ctx->free_count--;
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bb7c:	1e5a      	subs	r2, r3, #1
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	631a      	str	r2, [r3, #48]	@ 0x30

    if (biR->refs != 0) {
 801bb82:	68fb      	ldr	r3, [r7, #12]
 801bb84:	689b      	ldr	r3, [r3, #8]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d001      	beq.n	801bb8e <alloc+0x36>
#ifdef CONFIG_SSL_FULL_MODE
      printf("alloc: refs was not 0\n");
#endif
      abort(); /* create a stack trace from a core dump */
 801bb8a:	f007 fb09 	bl	80231a0 <abort>
    }

    more_comps(biR, size);
 801bb8e:	6839      	ldr	r1, [r7, #0]
 801bb90:	68f8      	ldr	r0, [r7, #12]
 801bb92:	f7ff ff85 	bl	801baa0 <more_comps>
 801bb96:	e013      	b.n	801bbc0 <alloc+0x68>
  } else {
    /* No free bigints available - create a new one. */
    biR = (bigint *) calloc(1, sizeof(bigint));
 801bb98:	2110      	movs	r1, #16
 801bb9a:	2001      	movs	r0, #1
 801bb9c:	f007 fb2a 	bl	80231f4 <calloc>
 801bba0:	4603      	mov	r3, r0
 801bba2:	60fb      	str	r3, [r7, #12]
    biR->comps = (comp *) calloc(1, (size_t) size * COMP_BYTE_SIZE);
 801bba4:	683b      	ldr	r3, [r7, #0]
 801bba6:	009b      	lsls	r3, r3, #2
 801bba8:	4619      	mov	r1, r3
 801bbaa:	2001      	movs	r0, #1
 801bbac:	f007 fb22 	bl	80231f4 <calloc>
 801bbb0:	4603      	mov	r3, r0
 801bbb2:	461a      	mov	r2, r3
 801bbb4:	68fb      	ldr	r3, [r7, #12]
 801bbb6:	60da      	str	r2, [r3, #12]
    biR->max_comps = (short) size; /* give some space to spare */
 801bbb8:	683b      	ldr	r3, [r7, #0]
 801bbba:	b21a      	sxth	r2, r3
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	80da      	strh	r2, [r3, #6]
  }

  biR->size = (short) size;
 801bbc0:	683b      	ldr	r3, [r7, #0]
 801bbc2:	b21a      	sxth	r2, r3
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	809a      	strh	r2, [r3, #4]
  biR->refs = 1;
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	2201      	movs	r2, #1
 801bbcc:	609a      	str	r2, [r3, #8]
  biR->next = NULL;
 801bbce:	68fb      	ldr	r3, [r7, #12]
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	601a      	str	r2, [r3, #0]
  ctx->active_count++;
 801bbd4:	687b      	ldr	r3, [r7, #4]
 801bbd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bbd8:	1c5a      	adds	r2, r3, #1
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  return biR;
 801bbde:	68fb      	ldr	r3, [r7, #12]
}
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	3710      	adds	r7, #16
 801bbe4:	46bd      	mov	sp, r7
 801bbe6:	bd80      	pop	{r7, pc}

0801bbe8 <find_max_exp_index>:

/*
 * Work out the highest '1' bit in an exponent. Used when doing sliding-window
 * exponentiation.
 */
static int find_max_exp_index(bigint *biexp) {
 801bbe8:	b480      	push	{r7}
 801bbea:	b087      	sub	sp, #28
 801bbec:	af00      	add	r7, sp, #0
 801bbee:	6078      	str	r0, [r7, #4]
  int i = COMP_BIT_SIZE - 1;
 801bbf0:	231f      	movs	r3, #31
 801bbf2:	617b      	str	r3, [r7, #20]
  comp shift = COMP_RADIX / 2;
 801bbf4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801bbf8:	613b      	str	r3, [r7, #16]
  comp test = biexp->comps[biexp->size - 1]; /* assume no leading zeroes */
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	68da      	ldr	r2, [r3, #12]
 801bbfe:	687b      	ldr	r3, [r7, #4]
 801bc00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bc04:	4619      	mov	r1, r3
 801bc06:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801bc0a:	440b      	add	r3, r1
 801bc0c:	009b      	lsls	r3, r3, #2
 801bc0e:	4413      	add	r3, r2
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	60fb      	str	r3, [r7, #12]

  check(biexp);

  do {
    if (test & shift) {
 801bc14:	68fa      	ldr	r2, [r7, #12]
 801bc16:	693b      	ldr	r3, [r7, #16]
 801bc18:	4013      	ands	r3, r2
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d007      	beq.n	801bc2e <find_max_exp_index+0x46>
      return i + (biexp->size - 1) * COMP_BIT_SIZE;
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bc24:	3b01      	subs	r3, #1
 801bc26:	015a      	lsls	r2, r3, #5
 801bc28:	697b      	ldr	r3, [r7, #20]
 801bc2a:	4413      	add	r3, r2
 801bc2c:	e009      	b.n	801bc42 <find_max_exp_index+0x5a>
    }

    shift >>= 1;
 801bc2e:	693b      	ldr	r3, [r7, #16]
 801bc30:	085b      	lsrs	r3, r3, #1
 801bc32:	613b      	str	r3, [r7, #16]
  } while (i-- != 0);
 801bc34:	697b      	ldr	r3, [r7, #20]
 801bc36:	1e5a      	subs	r2, r3, #1
 801bc38:	617a      	str	r2, [r7, #20]
 801bc3a:	2b00      	cmp	r3, #0
 801bc3c:	d1ea      	bne.n	801bc14 <find_max_exp_index+0x2c>

  return -1; /* error - must have been a leading 0 */
 801bc3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bc42:	4618      	mov	r0, r3
 801bc44:	371c      	adds	r7, #28
 801bc46:	46bd      	mov	sp, r7
 801bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc4c:	4770      	bx	lr

0801bc4e <exp_bit_is_one>:

/*
 * Is a particular bit is an exponent 1 or 0? Used when doing sliding-window
 * exponentiation.
 */
static int exp_bit_is_one(bigint *biexp, int offset) {
 801bc4e:	b480      	push	{r7}
 801bc50:	b087      	sub	sp, #28
 801bc52:	af00      	add	r7, sp, #0
 801bc54:	6078      	str	r0, [r7, #4]
 801bc56:	6039      	str	r1, [r7, #0]
  comp test = biexp->comps[offset / COMP_BIT_SIZE];
 801bc58:	687b      	ldr	r3, [r7, #4]
 801bc5a:	68da      	ldr	r2, [r3, #12]
 801bc5c:	683b      	ldr	r3, [r7, #0]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	da00      	bge.n	801bc64 <exp_bit_is_one+0x16>
 801bc62:	331f      	adds	r3, #31
 801bc64:	115b      	asrs	r3, r3, #5
 801bc66:	009b      	lsls	r3, r3, #2
 801bc68:	4413      	add	r3, r2
 801bc6a:	681b      	ldr	r3, [r3, #0]
 801bc6c:	60fb      	str	r3, [r7, #12]
  int num_shifts = offset % COMP_BIT_SIZE;
 801bc6e:	683b      	ldr	r3, [r7, #0]
 801bc70:	425a      	negs	r2, r3
 801bc72:	f003 031f 	and.w	r3, r3, #31
 801bc76:	f002 021f 	and.w	r2, r2, #31
 801bc7a:	bf58      	it	pl
 801bc7c:	4253      	negpl	r3, r2
 801bc7e:	60bb      	str	r3, [r7, #8]
  comp shift = 1;
 801bc80:	2301      	movs	r3, #1
 801bc82:	617b      	str	r3, [r7, #20]
  int i;

  check(biexp);

  for (i = 0; i < num_shifts; i++) {
 801bc84:	2300      	movs	r3, #0
 801bc86:	613b      	str	r3, [r7, #16]
 801bc88:	e005      	b.n	801bc96 <exp_bit_is_one+0x48>
    shift <<= 1;
 801bc8a:	697b      	ldr	r3, [r7, #20]
 801bc8c:	005b      	lsls	r3, r3, #1
 801bc8e:	617b      	str	r3, [r7, #20]
  for (i = 0; i < num_shifts; i++) {
 801bc90:	693b      	ldr	r3, [r7, #16]
 801bc92:	3301      	adds	r3, #1
 801bc94:	613b      	str	r3, [r7, #16]
 801bc96:	693a      	ldr	r2, [r7, #16]
 801bc98:	68bb      	ldr	r3, [r7, #8]
 801bc9a:	429a      	cmp	r2, r3
 801bc9c:	dbf5      	blt.n	801bc8a <exp_bit_is_one+0x3c>
  }

  return (test & shift) != 0;
 801bc9e:	68fa      	ldr	r2, [r7, #12]
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	4013      	ands	r3, r2
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	bf14      	ite	ne
 801bca8:	2301      	movne	r3, #1
 801bcaa:	2300      	moveq	r3, #0
 801bcac:	b2db      	uxtb	r3, r3
}
 801bcae:	4618      	mov	r0, r3
 801bcb0:	371c      	adds	r7, #28
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb8:	4770      	bx	lr

0801bcba <trim>:
#endif

/*
 * Delete any leading 0's (and allow for 0).
 */
static bigint *trim(bigint *bi) {
 801bcba:	b480      	push	{r7}
 801bcbc:	b083      	sub	sp, #12
 801bcbe:	af00      	add	r7, sp, #0
 801bcc0:	6078      	str	r0, [r7, #4]
  check(bi);

  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801bcc2:	e008      	b.n	801bcd6 <trim+0x1c>
    bi->size--;
 801bcc4:	687b      	ldr	r3, [r7, #4]
 801bcc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bcca:	b29b      	uxth	r3, r3
 801bccc:	3b01      	subs	r3, #1
 801bcce:	b29b      	uxth	r3, r3
 801bcd0:	b21a      	sxth	r2, r3
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	809a      	strh	r2, [r3, #4]
  while (bi->comps[bi->size - 1] == 0 && bi->size > 1) {
 801bcd6:	687b      	ldr	r3, [r7, #4]
 801bcd8:	68da      	ldr	r2, [r3, #12]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bce0:	4619      	mov	r1, r3
 801bce2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801bce6:	440b      	add	r3, r1
 801bce8:	009b      	lsls	r3, r3, #2
 801bcea:	4413      	add	r3, r2
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	2b00      	cmp	r3, #0
 801bcf0:	d104      	bne.n	801bcfc <trim+0x42>
 801bcf2:	687b      	ldr	r3, [r7, #4]
 801bcf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801bcf8:	2b01      	cmp	r3, #1
 801bcfa:	dce3      	bgt.n	801bcc4 <trim+0xa>
  }

  return bi;
 801bcfc:	687b      	ldr	r3, [r7, #4]
}
 801bcfe:	4618      	mov	r0, r3
 801bd00:	370c      	adds	r7, #12
 801bd02:	46bd      	mov	sp, r7
 801bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd08:	4770      	bx	lr

0801bd0a <bi_mod_power>:
 * @param bi  [in]  The bigint on which to perform the mod power operation.
 * @param biexp [in] The bigint exponent.
 * @return The result of the mod exponentiation operation
 * @see bi_set_mod().
 */
NS_INTERNAL bigint *bi_mod_power(BI_CTX *ctx, bigint *bi, bigint *biexp) {
 801bd0a:	b590      	push	{r4, r7, lr}
 801bd0c:	b08b      	sub	sp, #44	@ 0x2c
 801bd0e:	af00      	add	r7, sp, #0
 801bd10:	60f8      	str	r0, [r7, #12]
 801bd12:	60b9      	str	r1, [r7, #8]
 801bd14:	607a      	str	r2, [r7, #4]
  int i = find_max_exp_index(biexp), j, window_size = 1;
 801bd16:	6878      	ldr	r0, [r7, #4]
 801bd18:	f7ff ff66 	bl	801bbe8 <find_max_exp_index>
 801bd1c:	6278      	str	r0, [r7, #36]	@ 0x24
 801bd1e:	2301      	movs	r3, #1
 801bd20:	613b      	str	r3, [r7, #16]
  bigint *biR = int_to_bi(ctx, 1);
 801bd22:	2101      	movs	r1, #1
 801bd24:	68f8      	ldr	r0, [r7, #12]
 801bd26:	f7ff f8a3 	bl	801ae70 <int_to_bi>
 801bd2a:	61f8      	str	r0, [r7, #28]
    window_size++;

  /* work out the slide constants */
  precompute_slide_window(ctx, window_size, bi);
#else /* just one constant */
  ctx->g = (bigint **) calloc(1, sizeof(bigint *));
 801bd2c:	2104      	movs	r1, #4
 801bd2e:	2001      	movs	r0, #1
 801bd30:	f007 fa60 	bl	80231f4 <calloc>
 801bd34:	4603      	mov	r3, r0
 801bd36:	461a      	mov	r2, r3
 801bd38:	68fb      	ldr	r3, [r7, #12]
 801bd3a:	625a      	str	r2, [r3, #36]	@ 0x24
  ctx->g[0] = bi_clone(ctx, bi);
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801bd40:	68b9      	ldr	r1, [r7, #8]
 801bd42:	68f8      	ldr	r0, [r7, #12]
 801bd44:	f7ff f8a7 	bl	801ae96 <bi_clone>
 801bd48:	4603      	mov	r3, r0
 801bd4a:	6023      	str	r3, [r4, #0]
  ctx->window = 1;
 801bd4c:	68fb      	ldr	r3, [r7, #12]
 801bd4e:	2201      	movs	r2, #1
 801bd50:	629a      	str	r2, [r3, #40]	@ 0x28
  bi_permanent(ctx->g[0]);
 801bd52:	68fb      	ldr	r3, [r7, #12]
 801bd54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	4618      	mov	r0, r3
 801bd5a:	f7ff f82f 	bl	801adbc <bi_permanent>
#endif

  /* if sliding-window is off, then only one bit will be done at a time and
   * will reduce to standard left-to-right exponentiation */
  do {
    if (exp_bit_is_one(biexp, i)) {
 801bd5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bd60:	6878      	ldr	r0, [r7, #4]
 801bd62:	f7ff ff74 	bl	801bc4e <exp_bit_is_one>
 801bd66:	4603      	mov	r3, r0
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d06c      	beq.n	801be46 <bi_mod_power+0x13c>
      int l = i - window_size + 1;
 801bd6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bd6e:	693b      	ldr	r3, [r7, #16]
 801bd70:	1ad3      	subs	r3, r2, r3
 801bd72:	3301      	adds	r3, #1
 801bd74:	61bb      	str	r3, [r7, #24]
      int part_exp = 0;
 801bd76:	2300      	movs	r3, #0
 801bd78:	617b      	str	r3, [r7, #20]

      if (l < 0) /* LSB of exponent will always be 1 */
 801bd7a:	69bb      	ldr	r3, [r7, #24]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	da05      	bge.n	801bd8c <bi_mod_power+0x82>
        l = 0;
 801bd80:	2300      	movs	r3, #0
 801bd82:	61bb      	str	r3, [r7, #24]
 801bd84:	e009      	b.n	801bd9a <bi_mod_power+0x90>
      else {
        while (exp_bit_is_one(biexp, l) == 0) l++; /* go back up */
 801bd86:	69bb      	ldr	r3, [r7, #24]
 801bd88:	3301      	adds	r3, #1
 801bd8a:	61bb      	str	r3, [r7, #24]
 801bd8c:	69b9      	ldr	r1, [r7, #24]
 801bd8e:	6878      	ldr	r0, [r7, #4]
 801bd90:	f7ff ff5d 	bl	801bc4e <exp_bit_is_one>
 801bd94:	4603      	mov	r3, r0
 801bd96:	2b00      	cmp	r3, #0
 801bd98:	d0f5      	beq.n	801bd86 <bi_mod_power+0x7c>
      }

      /* build up the section of the exponent */
      for (j = i; j >= l; j--) {
 801bd9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bd9c:	623b      	str	r3, [r7, #32]
 801bd9e:	e02a      	b.n	801bdf6 <bi_mod_power+0xec>
        biR = bi_residue(ctx, bi_square(ctx, biR));
 801bda0:	69f8      	ldr	r0, [r7, #28]
 801bda2:	f7fe fff3 	bl	801ad8c <bi_copy>
 801bda6:	4603      	mov	r3, r0
 801bda8:	69fa      	ldr	r2, [r7, #28]
 801bdaa:	4619      	mov	r1, r3
 801bdac:	68f8      	ldr	r0, [r7, #12]
 801bdae:	f7ff fe0f 	bl	801b9d0 <bi_multiply>
 801bdb2:	4601      	mov	r1, r0
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801bdba:	68fa      	ldr	r2, [r7, #12]
 801bdbc:	3302      	adds	r3, #2
 801bdbe:	009b      	lsls	r3, r3, #2
 801bdc0:	4413      	add	r3, r2
 801bdc2:	685a      	ldr	r2, [r3, #4]
 801bdc4:	2301      	movs	r3, #1
 801bdc6:	68f8      	ldr	r0, [r7, #12]
 801bdc8:	f7ff f9ba 	bl	801b140 <bi_divide>
 801bdcc:	61f8      	str	r0, [r7, #28]
        if (exp_bit_is_one(biexp, j)) part_exp++;
 801bdce:	6a39      	ldr	r1, [r7, #32]
 801bdd0:	6878      	ldr	r0, [r7, #4]
 801bdd2:	f7ff ff3c 	bl	801bc4e <exp_bit_is_one>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d002      	beq.n	801bde2 <bi_mod_power+0xd8>
 801bddc:	697b      	ldr	r3, [r7, #20]
 801bdde:	3301      	adds	r3, #1
 801bde0:	617b      	str	r3, [r7, #20]

        if (j != l) part_exp <<= 1;
 801bde2:	6a3a      	ldr	r2, [r7, #32]
 801bde4:	69bb      	ldr	r3, [r7, #24]
 801bde6:	429a      	cmp	r2, r3
 801bde8:	d002      	beq.n	801bdf0 <bi_mod_power+0xe6>
 801bdea:	697b      	ldr	r3, [r7, #20]
 801bdec:	005b      	lsls	r3, r3, #1
 801bdee:	617b      	str	r3, [r7, #20]
      for (j = i; j >= l; j--) {
 801bdf0:	6a3b      	ldr	r3, [r7, #32]
 801bdf2:	3b01      	subs	r3, #1
 801bdf4:	623b      	str	r3, [r7, #32]
 801bdf6:	6a3a      	ldr	r2, [r7, #32]
 801bdf8:	69bb      	ldr	r3, [r7, #24]
 801bdfa:	429a      	cmp	r2, r3
 801bdfc:	dad0      	bge.n	801bda0 <bi_mod_power+0x96>
      }

      part_exp = (part_exp - 1) / 2; /* adjust for array */
 801bdfe:	697b      	ldr	r3, [r7, #20]
 801be00:	3b01      	subs	r3, #1
 801be02:	2b00      	cmp	r3, #0
 801be04:	da00      	bge.n	801be08 <bi_mod_power+0xfe>
 801be06:	3301      	adds	r3, #1
 801be08:	105b      	asrs	r3, r3, #1
 801be0a:	617b      	str	r3, [r7, #20]
      biR = bi_residue(ctx, bi_multiply(ctx, biR, ctx->g[part_exp]));
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801be10:	697b      	ldr	r3, [r7, #20]
 801be12:	009b      	lsls	r3, r3, #2
 801be14:	4413      	add	r3, r2
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	461a      	mov	r2, r3
 801be1a:	69f9      	ldr	r1, [r7, #28]
 801be1c:	68f8      	ldr	r0, [r7, #12]
 801be1e:	f7ff fdd7 	bl	801b9d0 <bi_multiply>
 801be22:	4601      	mov	r1, r0
 801be24:	68fb      	ldr	r3, [r7, #12]
 801be26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801be2a:	68fa      	ldr	r2, [r7, #12]
 801be2c:	3302      	adds	r3, #2
 801be2e:	009b      	lsls	r3, r3, #2
 801be30:	4413      	add	r3, r2
 801be32:	685a      	ldr	r2, [r3, #4]
 801be34:	2301      	movs	r3, #1
 801be36:	68f8      	ldr	r0, [r7, #12]
 801be38:	f7ff f982 	bl	801b140 <bi_divide>
 801be3c:	61f8      	str	r0, [r7, #28]
      i = l - 1;
 801be3e:	69bb      	ldr	r3, [r7, #24]
 801be40:	3b01      	subs	r3, #1
 801be42:	627b      	str	r3, [r7, #36]	@ 0x24
 801be44:	e019      	b.n	801be7a <bi_mod_power+0x170>
    } else /* square it */
    {
      biR = bi_residue(ctx, bi_square(ctx, biR));
 801be46:	69f8      	ldr	r0, [r7, #28]
 801be48:	f7fe ffa0 	bl	801ad8c <bi_copy>
 801be4c:	4603      	mov	r3, r0
 801be4e:	69fa      	ldr	r2, [r7, #28]
 801be50:	4619      	mov	r1, r3
 801be52:	68f8      	ldr	r0, [r7, #12]
 801be54:	f7ff fdbc 	bl	801b9d0 <bi_multiply>
 801be58:	4601      	mov	r1, r0
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801be60:	68fa      	ldr	r2, [r7, #12]
 801be62:	3302      	adds	r3, #2
 801be64:	009b      	lsls	r3, r3, #2
 801be66:	4413      	add	r3, r2
 801be68:	685a      	ldr	r2, [r3, #4]
 801be6a:	2301      	movs	r3, #1
 801be6c:	68f8      	ldr	r0, [r7, #12]
 801be6e:	f7ff f967 	bl	801b140 <bi_divide>
 801be72:	61f8      	str	r0, [r7, #28]
      i--;
 801be74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be76:	3b01      	subs	r3, #1
 801be78:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  } while (i >= 0);
 801be7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be7c:	2b00      	cmp	r3, #0
 801be7e:	f6bf af6e 	bge.w	801bd5e <bi_mod_power+0x54>

  /* cleanup */
  for (i = 0; i < ctx->window; i++) {
 801be82:	2300      	movs	r3, #0
 801be84:	627b      	str	r3, [r7, #36]	@ 0x24
 801be86:	e015      	b.n	801beb4 <bi_mod_power+0x1aa>
    bi_depermanent(ctx->g[i]);
 801be88:	68fb      	ldr	r3, [r7, #12]
 801be8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801be8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be8e:	009b      	lsls	r3, r3, #2
 801be90:	4413      	add	r3, r2
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	4618      	mov	r0, r3
 801be96:	f7fe ffa5 	bl	801ade4 <bi_depermanent>
    bi_free(ctx, ctx->g[i]);
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801be9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bea0:	009b      	lsls	r3, r3, #2
 801bea2:	4413      	add	r3, r2
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	4619      	mov	r1, r3
 801bea8:	68f8      	ldr	r0, [r7, #12]
 801beaa:	f7fe ffaf 	bl	801ae0c <bi_free>
  for (i = 0; i < ctx->window; i++) {
 801beae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beb0:	3301      	adds	r3, #1
 801beb2:	627b      	str	r3, [r7, #36]	@ 0x24
 801beb4:	68fb      	ldr	r3, [r7, #12]
 801beb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801beb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801beba:	429a      	cmp	r2, r3
 801bebc:	dbe4      	blt.n	801be88 <bi_mod_power+0x17e>
  }

  free(ctx->g);
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bec2:	4618      	mov	r0, r3
 801bec4:	f007 f9ba 	bl	802323c <free>
  bi_free(ctx, bi);
 801bec8:	68b9      	ldr	r1, [r7, #8]
 801beca:	68f8      	ldr	r0, [r7, #12]
 801becc:	f7fe ff9e 	bl	801ae0c <bi_free>
  bi_free(ctx, biexp);
 801bed0:	6879      	ldr	r1, [r7, #4]
 801bed2:	68f8      	ldr	r0, [r7, #12]
 801bed4:	f7fe ff9a 	bl	801ae0c <bi_free>
#if defined CONFIG_BIGINT_MONTGOMERY
  return ctx->use_classical ? biR : bi_mont(ctx, biR); /* convert back */
#else /* CONFIG_BIGINT_CLASSICAL or CONFIG_BIGINT_BARRETT */
  return biR;
 801bed8:	69fb      	ldr	r3, [r7, #28]
#endif
}
 801beda:	4618      	mov	r0, r3
 801bedc:	372c      	adds	r7, #44	@ 0x2c
 801bede:	46bd      	mov	sp, r7
 801bee0:	bd90      	pop	{r4, r7, pc}

0801bee2 <mg_rsa_mod_pow>:
#endif
  return bi_add(ctx, m2, bi_multiply(ctx, q, h));
}
#endif

int mg_rsa_mod_pow(const uint8_t *mod, size_t modsz, const uint8_t *exp, size_t expsz, const uint8_t *msg, size_t msgsz, uint8_t *out, size_t outsz) {
 801bee2:	b580      	push	{r7, lr}
 801bee4:	b08a      	sub	sp, #40	@ 0x28
 801bee6:	af00      	add	r7, sp, #0
 801bee8:	60f8      	str	r0, [r7, #12]
 801beea:	60b9      	str	r1, [r7, #8]
 801beec:	607a      	str	r2, [r7, #4]
 801beee:	603b      	str	r3, [r7, #0]
	BI_CTX *bi_ctx = bi_initialize();
 801bef0:	f7fe ff27 	bl	801ad42 <bi_initialize>
 801bef4:	6278      	str	r0, [r7, #36]	@ 0x24
	bigint *n = bi_import(bi_ctx, mod, (int) modsz);
 801bef6:	68bb      	ldr	r3, [r7, #8]
 801bef8:	461a      	mov	r2, r3
 801befa:	68f9      	ldr	r1, [r7, #12]
 801befc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801befe:	f7ff fbae 	bl	801b65e <bi_import>
 801bf02:	6238      	str	r0, [r7, #32]
	bigint *e = bi_import(bi_ctx, exp, (int) expsz);
 801bf04:	683b      	ldr	r3, [r7, #0]
 801bf06:	461a      	mov	r2, r3
 801bf08:	6879      	ldr	r1, [r7, #4]
 801bf0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf0c:	f7ff fba7 	bl	801b65e <bi_import>
 801bf10:	61f8      	str	r0, [r7, #28]
	bigint *h = bi_import(bi_ctx, msg, (int) msgsz);
 801bf12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bf14:	461a      	mov	r2, r3
 801bf16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bf18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf1a:	f7ff fba0 	bl	801b65e <bi_import>
 801bf1e:	61b8      	str	r0, [r7, #24]
	bi_set_mod(bi_ctx, n, 0);
 801bf20:	2200      	movs	r2, #0
 801bf22:	6a39      	ldr	r1, [r7, #32]
 801bf24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf26:	f7ff fc3b 	bl	801b7a0 <bi_set_mod>
	bigint *m1 = bi_mod_power(bi_ctx, h, e);
 801bf2a:	69fa      	ldr	r2, [r7, #28]
 801bf2c:	69b9      	ldr	r1, [r7, #24]
 801bf2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf30:	f7ff feeb 	bl	801bd0a <bi_mod_power>
 801bf34:	6178      	str	r0, [r7, #20]
	bi_export(bi_ctx, m1, out, (int) outsz);
 801bf36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bf38:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bf3a:	6979      	ldr	r1, [r7, #20]
 801bf3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf3e:	f7ff fbdf 	bl	801b700 <bi_export>
	bi_free(bi_ctx, n);
 801bf42:	6a39      	ldr	r1, [r7, #32]
 801bf44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf46:	f7fe ff61 	bl	801ae0c <bi_free>
	bi_free(bi_ctx, e);
 801bf4a:	69f9      	ldr	r1, [r7, #28]
 801bf4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf4e:	f7fe ff5d 	bl	801ae0c <bi_free>
	bi_free(bi_ctx, h);
 801bf52:	69b9      	ldr	r1, [r7, #24]
 801bf54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf56:	f7fe ff59 	bl	801ae0c <bi_free>
	bi_free(bi_ctx, m1);
 801bf5a:	6979      	ldr	r1, [r7, #20]
 801bf5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bf5e:	f7fe ff55 	bl	801ae0c <bi_free>
	return 0;
 801bf62:	2300      	movs	r3, #0
}
 801bf64:	4618      	mov	r0, r3
 801bf66:	3728      	adds	r7, #40	@ 0x28
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	bd80      	pop	{r7, pc}

0801bf6c <mg_uecc_vli_clear>:
  return 2 * curve->num_bytes;
}

#if !asm_clear
MG_UECC_VLI_API void mg_uecc_vli_clear(mg_uecc_word_t *vli,
                                       wordcount_t num_words) {
 801bf6c:	b480      	push	{r7}
 801bf6e:	b085      	sub	sp, #20
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	6078      	str	r0, [r7, #4]
 801bf74:	460b      	mov	r3, r1
 801bf76:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801bf78:	2300      	movs	r3, #0
 801bf7a:	73fb      	strb	r3, [r7, #15]
 801bf7c:	e00a      	b.n	801bf94 <mg_uecc_vli_clear+0x28>
    vli[i] = 0;
 801bf7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf82:	009b      	lsls	r3, r3, #2
 801bf84:	687a      	ldr	r2, [r7, #4]
 801bf86:	4413      	add	r3, r2
 801bf88:	2200      	movs	r2, #0
 801bf8a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801bf8c:	7bfb      	ldrb	r3, [r7, #15]
 801bf8e:	3301      	adds	r3, #1
 801bf90:	b2db      	uxtb	r3, r3
 801bf92:	73fb      	strb	r3, [r7, #15]
 801bf94:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801bf98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bf9c:	429a      	cmp	r2, r3
 801bf9e:	dbee      	blt.n	801bf7e <mg_uecc_vli_clear+0x12>
  }
}
 801bfa0:	bf00      	nop
 801bfa2:	bf00      	nop
 801bfa4:	3714      	adds	r7, #20
 801bfa6:	46bd      	mov	sp, r7
 801bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfac:	4770      	bx	lr

0801bfae <mg_uecc_vli_isZero>:
#endif /* !asm_clear */

/* Constant-time comparison to zero - secure way to compare long integers */
/* Returns 1 if vli == 0, 0 otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_isZero(const mg_uecc_word_t *vli,
                                                  wordcount_t num_words) {
 801bfae:	b480      	push	{r7}
 801bfb0:	b085      	sub	sp, #20
 801bfb2:	af00      	add	r7, sp, #0
 801bfb4:	6078      	str	r0, [r7, #4]
 801bfb6:	460b      	mov	r3, r1
 801bfb8:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t bits = 0;
 801bfba:	2300      	movs	r3, #0
 801bfbc:	60fb      	str	r3, [r7, #12]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801bfbe:	2300      	movs	r3, #0
 801bfc0:	72fb      	strb	r3, [r7, #11]
 801bfc2:	e00c      	b.n	801bfde <mg_uecc_vli_isZero+0x30>
    bits |= vli[i];
 801bfc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801bfc8:	009b      	lsls	r3, r3, #2
 801bfca:	687a      	ldr	r2, [r7, #4]
 801bfcc:	4413      	add	r3, r2
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	68fa      	ldr	r2, [r7, #12]
 801bfd2:	4313      	orrs	r3, r2
 801bfd4:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < num_words; ++i) {
 801bfd6:	7afb      	ldrb	r3, [r7, #11]
 801bfd8:	3301      	adds	r3, #1
 801bfda:	b2db      	uxtb	r3, r3
 801bfdc:	72fb      	strb	r3, [r7, #11]
 801bfde:	f997 200b 	ldrsb.w	r2, [r7, #11]
 801bfe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801bfe6:	429a      	cmp	r2, r3
 801bfe8:	dbec      	blt.n	801bfc4 <mg_uecc_vli_isZero+0x16>
  }
  return (bits == 0);
 801bfea:	68fb      	ldr	r3, [r7, #12]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	bf0c      	ite	eq
 801bff0:	2301      	moveq	r3, #1
 801bff2:	2300      	movne	r3, #0
 801bff4:	b2db      	uxtb	r3, r3
}
 801bff6:	4618      	mov	r0, r3
 801bff8:	3714      	adds	r7, #20
 801bffa:	46bd      	mov	sp, r7
 801bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c000:	4770      	bx	lr

0801c002 <mg_uecc_vli_testBit>:

/* Returns nonzero if bit 'bit' of vli is set. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_testBit(const mg_uecc_word_t *vli,
                                                   bitcount_t bit) {
 801c002:	b480      	push	{r7}
 801c004:	b083      	sub	sp, #12
 801c006:	af00      	add	r7, sp, #0
 801c008:	6078      	str	r0, [r7, #4]
 801c00a:	460b      	mov	r3, r1
 801c00c:	807b      	strh	r3, [r7, #2]
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801c00e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c012:	115b      	asrs	r3, r3, #5
 801c014:	b21b      	sxth	r3, r3
 801c016:	009b      	lsls	r3, r3, #2
 801c018:	687a      	ldr	r2, [r7, #4]
 801c01a:	4413      	add	r3, r2
 801c01c:	681a      	ldr	r2, [r3, #0]
          ((mg_uecc_word_t) 1 << (bit & MG_UECC_WORD_BITS_MASK)));
 801c01e:	887b      	ldrh	r3, [r7, #2]
 801c020:	f003 031f 	and.w	r3, r3, #31
 801c024:	2101      	movs	r1, #1
 801c026:	fa01 f303 	lsl.w	r3, r1, r3
  return (vli[bit >> MG_UECC_WORD_BITS_SHIFT] &
 801c02a:	4013      	ands	r3, r2
}
 801c02c:	4618      	mov	r0, r3
 801c02e:	370c      	adds	r7, #12
 801c030:	46bd      	mov	sp, r7
 801c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c036:	4770      	bx	lr

0801c038 <vli_numDigits>:

/* Counts the number of words in vli. */
static wordcount_t vli_numDigits(const mg_uecc_word_t *vli,
                                 const wordcount_t max_words) {
 801c038:	b480      	push	{r7}
 801c03a:	b085      	sub	sp, #20
 801c03c:	af00      	add	r7, sp, #0
 801c03e:	6078      	str	r0, [r7, #4]
 801c040:	460b      	mov	r3, r1
 801c042:	70fb      	strb	r3, [r7, #3]
  wordcount_t i;
  /* Search from the end until we find a non-zero digit.
     We do it in reverse because we expect that most digits will be nonzero. */
  for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
 801c044:	78fb      	ldrb	r3, [r7, #3]
 801c046:	3b01      	subs	r3, #1
 801c048:	b2db      	uxtb	r3, r3
 801c04a:	73fb      	strb	r3, [r7, #15]
 801c04c:	e003      	b.n	801c056 <vli_numDigits+0x1e>
 801c04e:	7bfb      	ldrb	r3, [r7, #15]
 801c050:	3b01      	subs	r3, #1
 801c052:	b2db      	uxtb	r3, r3
 801c054:	73fb      	strb	r3, [r7, #15]
 801c056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	db07      	blt.n	801c06e <vli_numDigits+0x36>
 801c05e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c062:	009b      	lsls	r3, r3, #2
 801c064:	687a      	ldr	r2, [r7, #4]
 801c066:	4413      	add	r3, r2
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	d0ef      	beq.n	801c04e <vli_numDigits+0x16>
  }

  return (i + 1);
 801c06e:	7bfb      	ldrb	r3, [r7, #15]
 801c070:	3301      	adds	r3, #1
 801c072:	b2db      	uxtb	r3, r3
 801c074:	b25b      	sxtb	r3, r3
}
 801c076:	4618      	mov	r0, r3
 801c078:	3714      	adds	r7, #20
 801c07a:	46bd      	mov	sp, r7
 801c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c080:	4770      	bx	lr

0801c082 <mg_uecc_vli_numBits>:

/* Counts the number of bits required to represent vli. */
MG_UECC_VLI_API bitcount_t mg_uecc_vli_numBits(const mg_uecc_word_t *vli,
                                               const wordcount_t max_words) {
 801c082:	b580      	push	{r7, lr}
 801c084:	b086      	sub	sp, #24
 801c086:	af00      	add	r7, sp, #0
 801c088:	6078      	str	r0, [r7, #4]
 801c08a:	460b      	mov	r3, r1
 801c08c:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t i;
  mg_uecc_word_t digit;

  wordcount_t num_digits = vli_numDigits(vli, max_words);
 801c08e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c092:	4619      	mov	r1, r3
 801c094:	6878      	ldr	r0, [r7, #4]
 801c096:	f7ff ffcf 	bl	801c038 <vli_numDigits>
 801c09a:	4603      	mov	r3, r0
 801c09c:	73fb      	strb	r3, [r7, #15]
  if (num_digits == 0) {
 801c09e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c0a2:	2b00      	cmp	r3, #0
 801c0a4:	d101      	bne.n	801c0aa <mg_uecc_vli_numBits+0x28>
    return 0;
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	e020      	b.n	801c0ec <mg_uecc_vli_numBits+0x6a>
  }

  digit = vli[num_digits - 1];
 801c0aa:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801c0ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801c0b2:	4413      	add	r3, r2
 801c0b4:	009b      	lsls	r3, r3, #2
 801c0b6:	687a      	ldr	r2, [r7, #4]
 801c0b8:	4413      	add	r3, r2
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801c0be:	2300      	movs	r3, #0
 801c0c0:	617b      	str	r3, [r7, #20]
 801c0c2:	e005      	b.n	801c0d0 <mg_uecc_vli_numBits+0x4e>
    digit >>= 1;
 801c0c4:	693b      	ldr	r3, [r7, #16]
 801c0c6:	085b      	lsrs	r3, r3, #1
 801c0c8:	613b      	str	r3, [r7, #16]
  for (i = 0; digit; ++i) {
 801c0ca:	697b      	ldr	r3, [r7, #20]
 801c0cc:	3301      	adds	r3, #1
 801c0ce:	617b      	str	r3, [r7, #20]
 801c0d0:	693b      	ldr	r3, [r7, #16]
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d1f6      	bne.n	801c0c4 <mg_uecc_vli_numBits+0x42>
  }

  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801c0d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c0da:	3b01      	subs	r3, #1
 801c0dc:	b29b      	uxth	r3, r3
 801c0de:	015b      	lsls	r3, r3, #5
 801c0e0:	b29a      	uxth	r2, r3
          (bitcount_t) i);
 801c0e2:	697b      	ldr	r3, [r7, #20]
 801c0e4:	b29b      	uxth	r3, r3
  return (((bitcount_t) ((num_digits - 1) << MG_UECC_WORD_BITS_SHIFT)) +
 801c0e6:	4413      	add	r3, r2
 801c0e8:	b29b      	uxth	r3, r3
 801c0ea:	b21b      	sxth	r3, r3
}
 801c0ec:	4618      	mov	r0, r3
 801c0ee:	3718      	adds	r7, #24
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	bd80      	pop	{r7, pc}

0801c0f4 <mg_uecc_vli_set>:

/* Sets dest = src. */
#if !asm_set
MG_UECC_VLI_API void mg_uecc_vli_set(mg_uecc_word_t *dest,
                                     const mg_uecc_word_t *src,
                                     wordcount_t num_words) {
 801c0f4:	b480      	push	{r7}
 801c0f6:	b087      	sub	sp, #28
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	60f8      	str	r0, [r7, #12]
 801c0fc:	60b9      	str	r1, [r7, #8]
 801c0fe:	4613      	mov	r3, r2
 801c100:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801c102:	2300      	movs	r3, #0
 801c104:	75fb      	strb	r3, [r7, #23]
 801c106:	e00f      	b.n	801c128 <mg_uecc_vli_set+0x34>
    dest[i] = src[i];
 801c108:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c10c:	009b      	lsls	r3, r3, #2
 801c10e:	68ba      	ldr	r2, [r7, #8]
 801c110:	441a      	add	r2, r3
 801c112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c116:	009b      	lsls	r3, r3, #2
 801c118:	68f9      	ldr	r1, [r7, #12]
 801c11a:	440b      	add	r3, r1
 801c11c:	6812      	ldr	r2, [r2, #0]
 801c11e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801c120:	7dfb      	ldrb	r3, [r7, #23]
 801c122:	3301      	adds	r3, #1
 801c124:	b2db      	uxtb	r3, r3
 801c126:	75fb      	strb	r3, [r7, #23]
 801c128:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801c12c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c130:	429a      	cmp	r2, r3
 801c132:	dbe9      	blt.n	801c108 <mg_uecc_vli_set+0x14>
  }
}
 801c134:	bf00      	nop
 801c136:	bf00      	nop
 801c138:	371c      	adds	r7, #28
 801c13a:	46bd      	mov	sp, r7
 801c13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c140:	4770      	bx	lr

0801c142 <mg_uecc_vli_cmp_unsafe>:
#endif /* !asm_set */

/* Returns sign of left - right. */
static cmpresult_t mg_uecc_vli_cmp_unsafe(const mg_uecc_word_t *left,
                                          const mg_uecc_word_t *right,
                                          wordcount_t num_words) {
 801c142:	b480      	push	{r7}
 801c144:	b087      	sub	sp, #28
 801c146:	af00      	add	r7, sp, #0
 801c148:	60f8      	str	r0, [r7, #12]
 801c14a:	60b9      	str	r1, [r7, #8]
 801c14c:	4613      	mov	r3, r2
 801c14e:	71fb      	strb	r3, [r7, #7]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801c150:	79fb      	ldrb	r3, [r7, #7]
 801c152:	3b01      	subs	r3, #1
 801c154:	b2db      	uxtb	r3, r3
 801c156:	75fb      	strb	r3, [r7, #23]
 801c158:	e024      	b.n	801c1a4 <mg_uecc_vli_cmp_unsafe+0x62>
    if (left[i] > right[i]) {
 801c15a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c15e:	009b      	lsls	r3, r3, #2
 801c160:	68fa      	ldr	r2, [r7, #12]
 801c162:	4413      	add	r3, r2
 801c164:	681a      	ldr	r2, [r3, #0]
 801c166:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c16a:	009b      	lsls	r3, r3, #2
 801c16c:	68b9      	ldr	r1, [r7, #8]
 801c16e:	440b      	add	r3, r1
 801c170:	681b      	ldr	r3, [r3, #0]
 801c172:	429a      	cmp	r2, r3
 801c174:	d901      	bls.n	801c17a <mg_uecc_vli_cmp_unsafe+0x38>
      return 1;
 801c176:	2301      	movs	r3, #1
 801c178:	e019      	b.n	801c1ae <mg_uecc_vli_cmp_unsafe+0x6c>
    } else if (left[i] < right[i]) {
 801c17a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c17e:	009b      	lsls	r3, r3, #2
 801c180:	68fa      	ldr	r2, [r7, #12]
 801c182:	4413      	add	r3, r2
 801c184:	681a      	ldr	r2, [r3, #0]
 801c186:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c18a:	009b      	lsls	r3, r3, #2
 801c18c:	68b9      	ldr	r1, [r7, #8]
 801c18e:	440b      	add	r3, r1
 801c190:	681b      	ldr	r3, [r3, #0]
 801c192:	429a      	cmp	r2, r3
 801c194:	d202      	bcs.n	801c19c <mg_uecc_vli_cmp_unsafe+0x5a>
      return -1;
 801c196:	f04f 33ff 	mov.w	r3, #4294967295
 801c19a:	e008      	b.n	801c1ae <mg_uecc_vli_cmp_unsafe+0x6c>
  for (i = num_words - 1; i >= 0; --i) {
 801c19c:	7dfb      	ldrb	r3, [r7, #23]
 801c19e:	3b01      	subs	r3, #1
 801c1a0:	b2db      	uxtb	r3, r3
 801c1a2:	75fb      	strb	r3, [r7, #23]
 801c1a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	dad6      	bge.n	801c15a <mg_uecc_vli_cmp_unsafe+0x18>
    }
  }
  return 0;
 801c1ac:	2300      	movs	r3, #0
}
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	371c      	adds	r7, #28
 801c1b2:	46bd      	mov	sp, r7
 801c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b8:	4770      	bx	lr

0801c1ba <mg_uecc_vli_equal>:

/* Constant-time comparison function - secure way to compare long integers */
/* Returns one if left == right, zero otherwise. */
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_equal(const mg_uecc_word_t *left,
                                                 const mg_uecc_word_t *right,
                                                 wordcount_t num_words) {
 801c1ba:	b480      	push	{r7}
 801c1bc:	b087      	sub	sp, #28
 801c1be:	af00      	add	r7, sp, #0
 801c1c0:	60f8      	str	r0, [r7, #12]
 801c1c2:	60b9      	str	r1, [r7, #8]
 801c1c4:	4613      	mov	r3, r2
 801c1c6:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t diff = 0;
 801c1c8:	2300      	movs	r3, #0
 801c1ca:	617b      	str	r3, [r7, #20]
  wordcount_t i;
  for (i = num_words - 1; i >= 0; --i) {
 801c1cc:	79fb      	ldrb	r3, [r7, #7]
 801c1ce:	3b01      	subs	r3, #1
 801c1d0:	b2db      	uxtb	r3, r3
 801c1d2:	74fb      	strb	r3, [r7, #19]
 801c1d4:	e013      	b.n	801c1fe <mg_uecc_vli_equal+0x44>
    diff |= (left[i] ^ right[i]);
 801c1d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c1da:	009b      	lsls	r3, r3, #2
 801c1dc:	68fa      	ldr	r2, [r7, #12]
 801c1de:	4413      	add	r3, r2
 801c1e0:	681a      	ldr	r2, [r3, #0]
 801c1e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c1e6:	009b      	lsls	r3, r3, #2
 801c1e8:	68b9      	ldr	r1, [r7, #8]
 801c1ea:	440b      	add	r3, r1
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	4053      	eors	r3, r2
 801c1f0:	697a      	ldr	r2, [r7, #20]
 801c1f2:	4313      	orrs	r3, r2
 801c1f4:	617b      	str	r3, [r7, #20]
  for (i = num_words - 1; i >= 0; --i) {
 801c1f6:	7cfb      	ldrb	r3, [r7, #19]
 801c1f8:	3b01      	subs	r3, #1
 801c1fa:	b2db      	uxtb	r3, r3
 801c1fc:	74fb      	strb	r3, [r7, #19]
 801c1fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801c202:	2b00      	cmp	r3, #0
 801c204:	dae7      	bge.n	801c1d6 <mg_uecc_vli_equal+0x1c>
  }
  return (diff == 0);
 801c206:	697b      	ldr	r3, [r7, #20]
 801c208:	2b00      	cmp	r3, #0
 801c20a:	bf0c      	ite	eq
 801c20c:	2301      	moveq	r3, #1
 801c20e:	2300      	movne	r3, #0
 801c210:	b2db      	uxtb	r3, r3
}
 801c212:	4618      	mov	r0, r3
 801c214:	371c      	adds	r7, #28
 801c216:	46bd      	mov	sp, r7
 801c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c21c:	4770      	bx	lr

0801c21e <mg_uecc_vli_cmp>:
                                               wordcount_t num_words);

/* Returns sign of left - right, in constant time. */
MG_UECC_VLI_API cmpresult_t mg_uecc_vli_cmp(const mg_uecc_word_t *left,
                                            const mg_uecc_word_t *right,
                                            wordcount_t num_words) {
 801c21e:	b580      	push	{r7, lr}
 801c220:	b08e      	sub	sp, #56	@ 0x38
 801c222:	af00      	add	r7, sp, #0
 801c224:	60f8      	str	r0, [r7, #12]
 801c226:	60b9      	str	r1, [r7, #8]
 801c228:	4613      	mov	r3, r2
 801c22a:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t neg = !!mg_uecc_vli_sub(tmp, left, right, num_words);
 801c22c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c230:	f107 0010 	add.w	r0, r7, #16
 801c234:	68ba      	ldr	r2, [r7, #8]
 801c236:	68f9      	ldr	r1, [r7, #12]
 801c238:	f000 f896 	bl	801c368 <mg_uecc_vli_sub>
 801c23c:	4603      	mov	r3, r0
 801c23e:	2b00      	cmp	r3, #0
 801c240:	bf14      	ite	ne
 801c242:	2301      	movne	r3, #1
 801c244:	2300      	moveq	r3, #0
 801c246:	b2db      	uxtb	r3, r3
 801c248:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_word_t equal = mg_uecc_vli_isZero(tmp, num_words);
 801c24a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801c24e:	f107 0310 	add.w	r3, r7, #16
 801c252:	4611      	mov	r1, r2
 801c254:	4618      	mov	r0, r3
 801c256:	f7ff feaa 	bl	801bfae <mg_uecc_vli_isZero>
 801c25a:	6338      	str	r0, [r7, #48]	@ 0x30
  return (cmpresult_t) (!equal - 2 * neg);
 801c25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c25e:	2b00      	cmp	r3, #0
 801c260:	bf0c      	ite	eq
 801c262:	2301      	moveq	r3, #1
 801c264:	2300      	movne	r3, #0
 801c266:	b2db      	uxtb	r3, r3
 801c268:	461a      	mov	r2, r3
 801c26a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c26c:	b2db      	uxtb	r3, r3
 801c26e:	005b      	lsls	r3, r3, #1
 801c270:	b2db      	uxtb	r3, r3
 801c272:	1ad3      	subs	r3, r2, r3
 801c274:	b2db      	uxtb	r3, r3
 801c276:	b25b      	sxtb	r3, r3
}
 801c278:	4618      	mov	r0, r3
 801c27a:	3738      	adds	r7, #56	@ 0x38
 801c27c:	46bd      	mov	sp, r7
 801c27e:	bd80      	pop	{r7, pc}

0801c280 <mg_uecc_vli_rshift1>:

/* Computes vli = vli >> 1. */
#if !asm_rshift1
MG_UECC_VLI_API void mg_uecc_vli_rshift1(mg_uecc_word_t *vli,
                                         wordcount_t num_words) {
 801c280:	b480      	push	{r7}
 801c282:	b087      	sub	sp, #28
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
 801c288:	460b      	mov	r3, r1
 801c28a:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t *end = vli;
 801c28c:	687b      	ldr	r3, [r7, #4]
 801c28e:	613b      	str	r3, [r7, #16]
  mg_uecc_word_t carry = 0;
 801c290:	2300      	movs	r3, #0
 801c292:	617b      	str	r3, [r7, #20]

  vli += num_words;
 801c294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c298:	009b      	lsls	r3, r3, #2
 801c29a:	687a      	ldr	r2, [r7, #4]
 801c29c:	4413      	add	r3, r2
 801c29e:	607b      	str	r3, [r7, #4]
  while (vli-- > end) {
 801c2a0:	e00b      	b.n	801c2ba <mg_uecc_vli_rshift1+0x3a>
    mg_uecc_word_t temp = *vli;
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	60fb      	str	r3, [r7, #12]
    *vli = (temp >> 1) | carry;
 801c2a8:	68fb      	ldr	r3, [r7, #12]
 801c2aa:	085a      	lsrs	r2, r3, #1
 801c2ac:	697b      	ldr	r3, [r7, #20]
 801c2ae:	431a      	orrs	r2, r3
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - 1);
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	07db      	lsls	r3, r3, #31
 801c2b8:	617b      	str	r3, [r7, #20]
  while (vli-- > end) {
 801c2ba:	687b      	ldr	r3, [r7, #4]
 801c2bc:	1f1a      	subs	r2, r3, #4
 801c2be:	607a      	str	r2, [r7, #4]
 801c2c0:	693a      	ldr	r2, [r7, #16]
 801c2c2:	429a      	cmp	r2, r3
 801c2c4:	d3ed      	bcc.n	801c2a2 <mg_uecc_vli_rshift1+0x22>
  }
}
 801c2c6:	bf00      	nop
 801c2c8:	bf00      	nop
 801c2ca:	371c      	adds	r7, #28
 801c2cc:	46bd      	mov	sp, r7
 801c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2d2:	4770      	bx	lr

0801c2d4 <mg_uecc_vli_add>:
/* Computes result = left + right, returning carry. Can modify in place. */
#if !asm_add
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_add(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801c2d4:	b480      	push	{r7}
 801c2d6:	b089      	sub	sp, #36	@ 0x24
 801c2d8:	af00      	add	r7, sp, #0
 801c2da:	60f8      	str	r0, [r7, #12]
 801c2dc:	60b9      	str	r1, [r7, #8]
 801c2de:	607a      	str	r2, [r7, #4]
 801c2e0:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t carry = 0;
 801c2e2:	2300      	movs	r3, #0
 801c2e4:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801c2e6:	2300      	movs	r3, #0
 801c2e8:	76fb      	strb	r3, [r7, #27]
 801c2ea:	e030      	b.n	801c34e <mg_uecc_vli_add+0x7a>
    mg_uecc_word_t sum = left[i] + right[i] + carry;
 801c2ec:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c2f0:	009b      	lsls	r3, r3, #2
 801c2f2:	68ba      	ldr	r2, [r7, #8]
 801c2f4:	4413      	add	r3, r2
 801c2f6:	681a      	ldr	r2, [r3, #0]
 801c2f8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c2fc:	009b      	lsls	r3, r3, #2
 801c2fe:	6879      	ldr	r1, [r7, #4]
 801c300:	440b      	add	r3, r1
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	4413      	add	r3, r2
 801c306:	69fa      	ldr	r2, [r7, #28]
 801c308:	4413      	add	r3, r2
 801c30a:	617b      	str	r3, [r7, #20]
    if (sum != left[i]) {
 801c30c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c310:	009b      	lsls	r3, r3, #2
 801c312:	68ba      	ldr	r2, [r7, #8]
 801c314:	4413      	add	r3, r2
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	697a      	ldr	r2, [r7, #20]
 801c31a:	429a      	cmp	r2, r3
 801c31c:	d00c      	beq.n	801c338 <mg_uecc_vli_add+0x64>
      carry = (sum < left[i]);
 801c31e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c322:	009b      	lsls	r3, r3, #2
 801c324:	68ba      	ldr	r2, [r7, #8]
 801c326:	4413      	add	r3, r2
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	697a      	ldr	r2, [r7, #20]
 801c32c:	429a      	cmp	r2, r3
 801c32e:	bf34      	ite	cc
 801c330:	2301      	movcc	r3, #1
 801c332:	2300      	movcs	r3, #0
 801c334:	b2db      	uxtb	r3, r3
 801c336:	61fb      	str	r3, [r7, #28]
    }
    result[i] = sum;
 801c338:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c33c:	009b      	lsls	r3, r3, #2
 801c33e:	68fa      	ldr	r2, [r7, #12]
 801c340:	4413      	add	r3, r2
 801c342:	697a      	ldr	r2, [r7, #20]
 801c344:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801c346:	7efb      	ldrb	r3, [r7, #27]
 801c348:	3301      	adds	r3, #1
 801c34a:	b2db      	uxtb	r3, r3
 801c34c:	76fb      	strb	r3, [r7, #27]
 801c34e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801c352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c356:	429a      	cmp	r2, r3
 801c358:	dbc8      	blt.n	801c2ec <mg_uecc_vli_add+0x18>
  }
  return carry;
 801c35a:	69fb      	ldr	r3, [r7, #28]
}
 801c35c:	4618      	mov	r0, r3
 801c35e:	3724      	adds	r7, #36	@ 0x24
 801c360:	46bd      	mov	sp, r7
 801c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c366:	4770      	bx	lr

0801c368 <mg_uecc_vli_sub>:
/* Computes result = left - right, returning borrow. Can modify in place. */
#if !asm_sub
MG_UECC_VLI_API mg_uecc_word_t mg_uecc_vli_sub(mg_uecc_word_t *result,
                                               const mg_uecc_word_t *left,
                                               const mg_uecc_word_t *right,
                                               wordcount_t num_words) {
 801c368:	b480      	push	{r7}
 801c36a:	b089      	sub	sp, #36	@ 0x24
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	60f8      	str	r0, [r7, #12]
 801c370:	60b9      	str	r1, [r7, #8]
 801c372:	607a      	str	r2, [r7, #4]
 801c374:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t borrow = 0;
 801c376:	2300      	movs	r3, #0
 801c378:	61fb      	str	r3, [r7, #28]
  wordcount_t i;
  for (i = 0; i < num_words; ++i) {
 801c37a:	2300      	movs	r3, #0
 801c37c:	76fb      	strb	r3, [r7, #27]
 801c37e:	e030      	b.n	801c3e2 <mg_uecc_vli_sub+0x7a>
    mg_uecc_word_t diff = left[i] - right[i] - borrow;
 801c380:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c384:	009b      	lsls	r3, r3, #2
 801c386:	68ba      	ldr	r2, [r7, #8]
 801c388:	4413      	add	r3, r2
 801c38a:	681a      	ldr	r2, [r3, #0]
 801c38c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c390:	009b      	lsls	r3, r3, #2
 801c392:	6879      	ldr	r1, [r7, #4]
 801c394:	440b      	add	r3, r1
 801c396:	681b      	ldr	r3, [r3, #0]
 801c398:	1ad2      	subs	r2, r2, r3
 801c39a:	69fb      	ldr	r3, [r7, #28]
 801c39c:	1ad3      	subs	r3, r2, r3
 801c39e:	617b      	str	r3, [r7, #20]
    if (diff != left[i]) {
 801c3a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c3a4:	009b      	lsls	r3, r3, #2
 801c3a6:	68ba      	ldr	r2, [r7, #8]
 801c3a8:	4413      	add	r3, r2
 801c3aa:	681b      	ldr	r3, [r3, #0]
 801c3ac:	697a      	ldr	r2, [r7, #20]
 801c3ae:	429a      	cmp	r2, r3
 801c3b0:	d00c      	beq.n	801c3cc <mg_uecc_vli_sub+0x64>
      borrow = (diff > left[i]);
 801c3b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c3b6:	009b      	lsls	r3, r3, #2
 801c3b8:	68ba      	ldr	r2, [r7, #8]
 801c3ba:	4413      	add	r3, r2
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	697a      	ldr	r2, [r7, #20]
 801c3c0:	429a      	cmp	r2, r3
 801c3c2:	bf8c      	ite	hi
 801c3c4:	2301      	movhi	r3, #1
 801c3c6:	2300      	movls	r3, #0
 801c3c8:	b2db      	uxtb	r3, r3
 801c3ca:	61fb      	str	r3, [r7, #28]
    }
    result[i] = diff;
 801c3cc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c3d0:	009b      	lsls	r3, r3, #2
 801c3d2:	68fa      	ldr	r2, [r7, #12]
 801c3d4:	4413      	add	r3, r2
 801c3d6:	697a      	ldr	r2, [r7, #20]
 801c3d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_words; ++i) {
 801c3da:	7efb      	ldrb	r3, [r7, #27]
 801c3dc:	3301      	adds	r3, #1
 801c3de:	b2db      	uxtb	r3, r3
 801c3e0:	76fb      	strb	r3, [r7, #27]
 801c3e2:	f997 201b 	ldrsb.w	r2, [r7, #27]
 801c3e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c3ea:	429a      	cmp	r2, r3
 801c3ec:	dbc8      	blt.n	801c380 <mg_uecc_vli_sub+0x18>
  }
  return borrow;
 801c3ee:	69fb      	ldr	r3, [r7, #28]
}
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	3724      	adds	r7, #36	@ 0x24
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3fa:	4770      	bx	lr

0801c3fc <muladd>:

#if !asm_mult || (MG_UECC_SQUARE_FUNC && !asm_square) ||               \
    (MG_UECC_SUPPORTS_secp256k1 && (MG_UECC_OPTIMIZATION_LEVEL > 0) && \
     ((MG_UECC_WORD_SIZE == 1) || (MG_UECC_WORD_SIZE == 8)))
static void muladd(mg_uecc_word_t a, mg_uecc_word_t b, mg_uecc_word_t *r0,
                   mg_uecc_word_t *r1, mg_uecc_word_t *r2) {
 801c3fc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c400:	b091      	sub	sp, #68	@ 0x44
 801c402:	af00      	add	r7, sp, #0
 801c404:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801c406:	62b9      	str	r1, [r7, #40]	@ 0x28
 801c408:	627a      	str	r2, [r7, #36]	@ 0x24
 801c40a:	623b      	str	r3, [r7, #32]

  *r0 += p0;
  *r1 += (p1 + (*r0 < p0));
  *r2 += ((*r1 < p1) || (*r1 == p1 && *r0 < p0));
#else
  mg_uecc_dword_t p = (mg_uecc_dword_t) a * b;
 801c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c40e:	2200      	movs	r2, #0
 801c410:	4698      	mov	r8, r3
 801c412:	4691      	mov	r9, r2
 801c414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c416:	2200      	movs	r2, #0
 801c418:	469a      	mov	sl, r3
 801c41a:	4693      	mov	fp, r2
 801c41c:	fb0a f209 	mul.w	r2, sl, r9
 801c420:	fb08 f30b 	mul.w	r3, r8, fp
 801c424:	4413      	add	r3, r2
 801c426:	fba8 450a 	umull	r4, r5, r8, sl
 801c42a:	442b      	add	r3, r5
 801c42c:	461d      	mov	r5, r3
 801c42e:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
 801c432:	e9c7 450e 	strd	r4, r5, [r7, #56]	@ 0x38
  mg_uecc_dword_t r01 = ((mg_uecc_dword_t) (*r1) << MG_UECC_WORD_BITS) | *r0;
 801c436:	6a3b      	ldr	r3, [r7, #32]
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	2200      	movs	r2, #0
 801c43c:	61bb      	str	r3, [r7, #24]
 801c43e:	61fa      	str	r2, [r7, #28]
 801c440:	f04f 0200 	mov.w	r2, #0
 801c444:	f04f 0300 	mov.w	r3, #0
 801c448:	69b9      	ldr	r1, [r7, #24]
 801c44a:	000b      	movs	r3, r1
 801c44c:	2200      	movs	r2, #0
 801c44e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c450:	6809      	ldr	r1, [r1, #0]
 801c452:	2000      	movs	r0, #0
 801c454:	6139      	str	r1, [r7, #16]
 801c456:	6178      	str	r0, [r7, #20]
 801c458:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 801c45c:	4621      	mov	r1, r4
 801c45e:	4311      	orrs	r1, r2
 801c460:	60b9      	str	r1, [r7, #8]
 801c462:	4629      	mov	r1, r5
 801c464:	4319      	orrs	r1, r3
 801c466:	60f9      	str	r1, [r7, #12]
 801c468:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801c46c:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  r01 += p;
 801c470:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801c474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801c478:	1884      	adds	r4, r0, r2
 801c47a:	603c      	str	r4, [r7, #0]
 801c47c:	eb41 0303 	adc.w	r3, r1, r3
 801c480:	607b      	str	r3, [r7, #4]
 801c482:	e9d7 3400 	ldrd	r3, r4, [r7]
 801c486:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *r2 += (r01 < p);
 801c48a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c48c:	681c      	ldr	r4, [r3, #0]
 801c48e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801c492:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801c496:	4290      	cmp	r0, r2
 801c498:	eb71 0303 	sbcs.w	r3, r1, r3
 801c49c:	bf34      	ite	cc
 801c49e:	2301      	movcc	r3, #1
 801c4a0:	2300      	movcs	r3, #0
 801c4a2:	b2db      	uxtb	r3, r3
 801c4a4:	18e2      	adds	r2, r4, r3
 801c4a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801c4a8:	601a      	str	r2, [r3, #0]
  *r1 = (mg_uecc_word_t) (r01 >> MG_UECC_WORD_BITS);
 801c4aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801c4ae:	f04f 0200 	mov.w	r2, #0
 801c4b2:	f04f 0300 	mov.w	r3, #0
 801c4b6:	000a      	movs	r2, r1
 801c4b8:	2300      	movs	r3, #0
 801c4ba:	6a3b      	ldr	r3, [r7, #32]
 801c4bc:	601a      	str	r2, [r3, #0]
  *r0 = (mg_uecc_word_t) r01;
 801c4be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c4c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4c2:	601a      	str	r2, [r3, #0]
#endif
}
 801c4c4:	bf00      	nop
 801c4c6:	3744      	adds	r7, #68	@ 0x44
 801c4c8:	46bd      	mov	sp, r7
 801c4ca:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c4ce:	4770      	bx	lr

0801c4d0 <mg_uecc_vli_mult>:

#if !asm_mult
MG_UECC_VLI_API void mg_uecc_vli_mult(mg_uecc_word_t *result,
                                      const mg_uecc_word_t *left,
                                      const mg_uecc_word_t *right,
                                      wordcount_t num_words) {
 801c4d0:	b590      	push	{r4, r7, lr}
 801c4d2:	b08b      	sub	sp, #44	@ 0x2c
 801c4d4:	af02      	add	r7, sp, #8
 801c4d6:	60f8      	str	r0, [r7, #12]
 801c4d8:	60b9      	str	r1, [r7, #8]
 801c4da:	607a      	str	r2, [r7, #4]
 801c4dc:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t r0 = 0;
 801c4de:	2300      	movs	r3, #0
 801c4e0:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t r1 = 0;
 801c4e2:	2300      	movs	r3, #0
 801c4e4:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t r2 = 0;
 801c4e6:	2300      	movs	r3, #0
 801c4e8:	613b      	str	r3, [r7, #16]
  wordcount_t i, k;

  /* Compute each digit of result in sequence, maintaining the carries. */
  for (k = 0; k < num_words; ++k) {
 801c4ea:	2300      	movs	r3, #0
 801c4ec:	77bb      	strb	r3, [r7, #30]
 801c4ee:	e036      	b.n	801c55e <mg_uecc_vli_mult+0x8e>
    for (i = 0; i <= k; ++i) {
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	77fb      	strb	r3, [r7, #31]
 801c4f4:	e01c      	b.n	801c530 <mg_uecc_vli_mult+0x60>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801c4f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801c4fa:	009b      	lsls	r3, r3, #2
 801c4fc:	68ba      	ldr	r2, [r7, #8]
 801c4fe:	4413      	add	r3, r2
 801c500:	6818      	ldr	r0, [r3, #0]
 801c502:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c506:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801c50a:	1ad3      	subs	r3, r2, r3
 801c50c:	009b      	lsls	r3, r3, #2
 801c50e:	687a      	ldr	r2, [r7, #4]
 801c510:	4413      	add	r3, r2
 801c512:	6819      	ldr	r1, [r3, #0]
 801c514:	f107 0414 	add.w	r4, r7, #20
 801c518:	f107 0218 	add.w	r2, r7, #24
 801c51c:	f107 0310 	add.w	r3, r7, #16
 801c520:	9300      	str	r3, [sp, #0]
 801c522:	4623      	mov	r3, r4
 801c524:	f7ff ff6a 	bl	801c3fc <muladd>
    for (i = 0; i <= k; ++i) {
 801c528:	7ffb      	ldrb	r3, [r7, #31]
 801c52a:	3301      	adds	r3, #1
 801c52c:	b2db      	uxtb	r3, r3
 801c52e:	77fb      	strb	r3, [r7, #31]
 801c530:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801c534:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c538:	429a      	cmp	r2, r3
 801c53a:	dddc      	ble.n	801c4f6 <mg_uecc_vli_mult+0x26>
    }
    result[k] = r0;
 801c53c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c540:	009b      	lsls	r3, r3, #2
 801c542:	68fa      	ldr	r2, [r7, #12]
 801c544:	4413      	add	r3, r2
 801c546:	69ba      	ldr	r2, [r7, #24]
 801c548:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801c54a:	697b      	ldr	r3, [r7, #20]
 801c54c:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801c54e:	693b      	ldr	r3, [r7, #16]
 801c550:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801c552:	2300      	movs	r3, #0
 801c554:	613b      	str	r3, [r7, #16]
  for (k = 0; k < num_words; ++k) {
 801c556:	7fbb      	ldrb	r3, [r7, #30]
 801c558:	3301      	adds	r3, #1
 801c55a:	b2db      	uxtb	r3, r3
 801c55c:	77bb      	strb	r3, [r7, #30]
 801c55e:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c566:	429a      	cmp	r2, r3
 801c568:	dbc2      	blt.n	801c4f0 <mg_uecc_vli_mult+0x20>
  }
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801c56a:	78fb      	ldrb	r3, [r7, #3]
 801c56c:	77bb      	strb	r3, [r7, #30]
 801c56e:	e03b      	b.n	801c5e8 <mg_uecc_vli_mult+0x118>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801c570:	7fba      	ldrb	r2, [r7, #30]
 801c572:	78fb      	ldrb	r3, [r7, #3]
 801c574:	1ad3      	subs	r3, r2, r3
 801c576:	b2db      	uxtb	r3, r3
 801c578:	3301      	adds	r3, #1
 801c57a:	b2db      	uxtb	r3, r3
 801c57c:	77fb      	strb	r3, [r7, #31]
 801c57e:	e01c      	b.n	801c5ba <mg_uecc_vli_mult+0xea>
      muladd(left[i], right[k - i], &r0, &r1, &r2);
 801c580:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801c584:	009b      	lsls	r3, r3, #2
 801c586:	68ba      	ldr	r2, [r7, #8]
 801c588:	4413      	add	r3, r2
 801c58a:	6818      	ldr	r0, [r3, #0]
 801c58c:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c590:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801c594:	1ad3      	subs	r3, r2, r3
 801c596:	009b      	lsls	r3, r3, #2
 801c598:	687a      	ldr	r2, [r7, #4]
 801c59a:	4413      	add	r3, r2
 801c59c:	6819      	ldr	r1, [r3, #0]
 801c59e:	f107 0414 	add.w	r4, r7, #20
 801c5a2:	f107 0218 	add.w	r2, r7, #24
 801c5a6:	f107 0310 	add.w	r3, r7, #16
 801c5aa:	9300      	str	r3, [sp, #0]
 801c5ac:	4623      	mov	r3, r4
 801c5ae:	f7ff ff25 	bl	801c3fc <muladd>
    for (i = (wordcount_t) ((k + 1) - num_words); i < num_words; ++i) {
 801c5b2:	7ffb      	ldrb	r3, [r7, #31]
 801c5b4:	3301      	adds	r3, #1
 801c5b6:	b2db      	uxtb	r3, r3
 801c5b8:	77fb      	strb	r3, [r7, #31]
 801c5ba:	f997 201f 	ldrsb.w	r2, [r7, #31]
 801c5be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c5c2:	429a      	cmp	r2, r3
 801c5c4:	dbdc      	blt.n	801c580 <mg_uecc_vli_mult+0xb0>
    }
    result[k] = r0;
 801c5c6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c5ca:	009b      	lsls	r3, r3, #2
 801c5cc:	68fa      	ldr	r2, [r7, #12]
 801c5ce:	4413      	add	r3, r2
 801c5d0:	69ba      	ldr	r2, [r7, #24]
 801c5d2:	601a      	str	r2, [r3, #0]
    r0 = r1;
 801c5d4:	697b      	ldr	r3, [r7, #20]
 801c5d6:	61bb      	str	r3, [r7, #24]
    r1 = r2;
 801c5d8:	693b      	ldr	r3, [r7, #16]
 801c5da:	617b      	str	r3, [r7, #20]
    r2 = 0;
 801c5dc:	2300      	movs	r3, #0
 801c5de:	613b      	str	r3, [r7, #16]
  for (k = num_words; k < num_words * 2 - 1; ++k) {
 801c5e0:	7fbb      	ldrb	r3, [r7, #30]
 801c5e2:	3301      	adds	r3, #1
 801c5e4:	b2db      	uxtb	r3, r3
 801c5e6:	77bb      	strb	r3, [r7, #30]
 801c5e8:	f997 201e 	ldrsb.w	r2, [r7, #30]
 801c5ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c5f0:	005b      	lsls	r3, r3, #1
 801c5f2:	3b01      	subs	r3, #1
 801c5f4:	429a      	cmp	r2, r3
 801c5f6:	dbbb      	blt.n	801c570 <mg_uecc_vli_mult+0xa0>
  }
  result[num_words * 2 - 1] = r0;
 801c5f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c5fc:	00db      	lsls	r3, r3, #3
 801c5fe:	3b04      	subs	r3, #4
 801c600:	68fa      	ldr	r2, [r7, #12]
 801c602:	4413      	add	r3, r2
 801c604:	69ba      	ldr	r2, [r7, #24]
 801c606:	601a      	str	r2, [r3, #0]
}
 801c608:	bf00      	nop
 801c60a:	3724      	adds	r7, #36	@ 0x24
 801c60c:	46bd      	mov	sp, r7
 801c60e:	bd90      	pop	{r4, r7, pc}

0801c610 <mg_uecc_vli_modAdd>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modAdd(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801c610:	b580      	push	{r7, lr}
 801c612:	b086      	sub	sp, #24
 801c614:	af00      	add	r7, sp, #0
 801c616:	60f8      	str	r0, [r7, #12]
 801c618:	60b9      	str	r1, [r7, #8]
 801c61a:	607a      	str	r2, [r7, #4]
 801c61c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t carry = mg_uecc_vli_add(result, left, right, num_words);
 801c61e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c622:	687a      	ldr	r2, [r7, #4]
 801c624:	68b9      	ldr	r1, [r7, #8]
 801c626:	68f8      	ldr	r0, [r7, #12]
 801c628:	f7ff fe54 	bl	801c2d4 <mg_uecc_vli_add>
 801c62c:	6178      	str	r0, [r7, #20]
  if (carry || mg_uecc_vli_cmp_unsafe(mod, result, num_words) != 1) {
 801c62e:	697b      	ldr	r3, [r7, #20]
 801c630:	2b00      	cmp	r3, #0
 801c632:	d109      	bne.n	801c648 <mg_uecc_vli_modAdd+0x38>
 801c634:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c638:	461a      	mov	r2, r3
 801c63a:	68f9      	ldr	r1, [r7, #12]
 801c63c:	6838      	ldr	r0, [r7, #0]
 801c63e:	f7ff fd80 	bl	801c142 <mg_uecc_vli_cmp_unsafe>
 801c642:	4603      	mov	r3, r0
 801c644:	2b01      	cmp	r3, #1
 801c646:	d006      	beq.n	801c656 <mg_uecc_vli_modAdd+0x46>
    /* result > mod (result = mod + remainder), so subtract mod to get
     * remainder. */
    mg_uecc_vli_sub(result, result, mod, num_words);
 801c648:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c64c:	683a      	ldr	r2, [r7, #0]
 801c64e:	68f9      	ldr	r1, [r7, #12]
 801c650:	68f8      	ldr	r0, [r7, #12]
 801c652:	f7ff fe89 	bl	801c368 <mg_uecc_vli_sub>
  }
}
 801c656:	bf00      	nop
 801c658:	3718      	adds	r7, #24
 801c65a:	46bd      	mov	sp, r7
 801c65c:	bd80      	pop	{r7, pc}

0801c65e <mg_uecc_vli_modSub>:
   mod. */
MG_UECC_VLI_API void mg_uecc_vli_modSub(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *left,
                                        const mg_uecc_word_t *right,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801c65e:	b580      	push	{r7, lr}
 801c660:	b086      	sub	sp, #24
 801c662:	af00      	add	r7, sp, #0
 801c664:	60f8      	str	r0, [r7, #12]
 801c666:	60b9      	str	r1, [r7, #8]
 801c668:	607a      	str	r2, [r7, #4]
 801c66a:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t l_borrow = mg_uecc_vli_sub(result, left, right, num_words);
 801c66c:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c670:	687a      	ldr	r2, [r7, #4]
 801c672:	68b9      	ldr	r1, [r7, #8]
 801c674:	68f8      	ldr	r0, [r7, #12]
 801c676:	f7ff fe77 	bl	801c368 <mg_uecc_vli_sub>
 801c67a:	6178      	str	r0, [r7, #20]
  if (l_borrow) {
 801c67c:	697b      	ldr	r3, [r7, #20]
 801c67e:	2b00      	cmp	r3, #0
 801c680:	d006      	beq.n	801c690 <mg_uecc_vli_modSub+0x32>
    /* In this case, result == -diff == (max int) - diff. Since -x % d == d - x,
       we can get the correct result from result + mod (with overflow). */
    mg_uecc_vli_add(result, result, mod, num_words);
 801c682:	f997 3020 	ldrsb.w	r3, [r7, #32]
 801c686:	683a      	ldr	r2, [r7, #0]
 801c688:	68f9      	ldr	r1, [r7, #12]
 801c68a:	68f8      	ldr	r0, [r7, #12]
 801c68c:	f7ff fe22 	bl	801c2d4 <mg_uecc_vli_add>
  }
}
 801c690:	bf00      	nop
 801c692:	3718      	adds	r7, #24
 801c694:	46bd      	mov	sp, r7
 801c696:	bd80      	pop	{r7, pc}

0801c698 <mg_uecc_vli_mmod>:
/* Computes result = product % mod, where product is 2N words long. */
/* Currently only designed to work for curve_p or curve_n. */
MG_UECC_VLI_API void mg_uecc_vli_mmod(mg_uecc_word_t *result,
                                      mg_uecc_word_t *product,
                                      const mg_uecc_word_t *mod,
                                      wordcount_t num_words) {
 801c698:	b590      	push	{r4, r7, lr}
 801c69a:	b0ad      	sub	sp, #180	@ 0xb4
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	60f8      	str	r0, [r7, #12]
 801c6a0:	60b9      	str	r1, [r7, #8]
 801c6a2:	607a      	str	r2, [r7, #4]
 801c6a4:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t mod_multiple[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t tmp[2 * MG_UECC_MAX_WORDS];
  mg_uecc_word_t *v[2] = {tmp, product};
 801c6a6:	f107 0318 	add.w	r3, r7, #24
 801c6aa:	613b      	str	r3, [r7, #16]
 801c6ac:	68bb      	ldr	r3, [r7, #8]
 801c6ae:	617b      	str	r3, [r7, #20]
  mg_uecc_word_t index;

  /* Shift mod so its highest set bit is at the maximum position. */
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801c6b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c6b4:	b29b      	uxth	r3, r3
 801c6b6:	019b      	lsls	r3, r3, #6
 801c6b8:	b29c      	uxth	r4, r3
                                   mg_uecc_vli_numBits(mod, num_words));
 801c6ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c6be:	4619      	mov	r1, r3
 801c6c0:	6878      	ldr	r0, [r7, #4]
 801c6c2:	f7ff fcde 	bl	801c082 <mg_uecc_vli_numBits>
 801c6c6:	4603      	mov	r3, r0
 801c6c8:	b29b      	uxth	r3, r3
  bitcount_t shift = (bitcount_t) ((num_words * 2 * MG_UECC_WORD_BITS) -
 801c6ca:	1ae3      	subs	r3, r4, r3
 801c6cc:	b29b      	uxth	r3, r3
 801c6ce:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  wordcount_t word_shift = (wordcount_t) (shift / MG_UECC_WORD_BITS);
 801c6d2:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801c6d6:	2b00      	cmp	r3, #0
 801c6d8:	da00      	bge.n	801c6dc <mg_uecc_vli_mmod+0x44>
 801c6da:	331f      	adds	r3, #31
 801c6dc:	115b      	asrs	r3, r3, #5
 801c6de:	b21b      	sxth	r3, r3
 801c6e0:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
  wordcount_t bit_shift = (wordcount_t) (shift % MG_UECC_WORD_BITS);
 801c6e4:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801c6e8:	425a      	negs	r2, r3
 801c6ea:	f003 031f 	and.w	r3, r3, #31
 801c6ee:	f002 021f 	and.w	r2, r2, #31
 801c6f2:	bf58      	it	pl
 801c6f4:	4253      	negpl	r3, r2
 801c6f6:	b21b      	sxth	r3, r3
 801c6f8:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
  mg_uecc_word_t carry = 0;
 801c6fc:	2300      	movs	r3, #0
 801c6fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_vli_clear(mod_multiple, word_shift);
 801c702:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801c706:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801c70a:	4611      	mov	r1, r2
 801c70c:	4618      	mov	r0, r3
 801c70e:	f7ff fc2d 	bl	801bf6c <mg_uecc_vli_clear>
  if (bit_shift > 0) {
 801c712:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801c716:	2b00      	cmp	r3, #0
 801c718:	dd34      	ble.n	801c784 <mg_uecc_vli_mmod+0xec>
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801c71a:	2300      	movs	r3, #0
 801c71c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801c720:	e029      	b.n	801c776 <mg_uecc_vli_mmod+0xde>
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801c722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c726:	009b      	lsls	r3, r3, #2
 801c728:	687a      	ldr	r2, [r7, #4]
 801c72a:	4413      	add	r3, r2
 801c72c:	681a      	ldr	r2, [r3, #0]
 801c72e:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801c732:	fa02 f103 	lsl.w	r1, r2, r3
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801c736:	f997 209e 	ldrsb.w	r2, [r7, #158]	@ 0x9e
 801c73a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c73e:	4413      	add	r3, r2
          (mg_uecc_word_t) (mod[index] << bit_shift) | carry;
 801c740:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801c744:	430a      	orrs	r2, r1
      mod_multiple[(mg_uecc_word_t) word_shift + index] =
 801c746:	009b      	lsls	r3, r3, #2
 801c748:	33b0      	adds	r3, #176	@ 0xb0
 801c74a:	443b      	add	r3, r7
 801c74c:	f843 2c58 	str.w	r2, [r3, #-88]
      carry = mod[index] >> (MG_UECC_WORD_BITS - bit_shift);
 801c750:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c754:	009b      	lsls	r3, r3, #2
 801c756:	687a      	ldr	r2, [r7, #4]
 801c758:	4413      	add	r3, r2
 801c75a:	681a      	ldr	r2, [r3, #0]
 801c75c:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 801c760:	f1c3 0320 	rsb	r3, r3, #32
 801c764:	fa22 f303 	lsr.w	r3, r2, r3
 801c768:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    for (index = 0; index < (mg_uecc_word_t) num_words; ++index) {
 801c76c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c770:	3301      	adds	r3, #1
 801c772:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801c776:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c77a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801c77e:	429a      	cmp	r2, r3
 801c780:	d3cf      	bcc.n	801c722 <mg_uecc_vli_mmod+0x8a>
 801c782:	e00b      	b.n	801c79c <mg_uecc_vli_mmod+0x104>
    }
  } else {
    mg_uecc_vli_set(mod_multiple + word_shift, mod, num_words);
 801c784:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 801c788:	009b      	lsls	r3, r3, #2
 801c78a:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801c78e:	4413      	add	r3, r2
 801c790:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c794:	6879      	ldr	r1, [r7, #4]
 801c796:	4618      	mov	r0, r3
 801c798:	f7ff fcac 	bl	801c0f4 <mg_uecc_vli_set>
  }

  for (index = 1; shift >= 0; --shift) {
 801c79c:	2301      	movs	r3, #1
 801c79e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801c7a2:	e09f      	b.n	801c8e4 <mg_uecc_vli_mmod+0x24c>
    mg_uecc_word_t borrow = 0;
 801c7a4:	2300      	movs	r3, #0
 801c7a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    wordcount_t i;
    for (i = 0; i < num_words * 2; ++i) {
 801c7aa:	2300      	movs	r3, #0
 801c7ac:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801c7b0:	e053      	b.n	801c85a <mg_uecc_vli_mmod+0x1c2>
      mg_uecc_word_t diff = v[index][i] - mod_multiple[i] - borrow;
 801c7b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c7b6:	009b      	lsls	r3, r3, #2
 801c7b8:	33b0      	adds	r3, #176	@ 0xb0
 801c7ba:	443b      	add	r3, r7
 801c7bc:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801c7c0:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c7c4:	009b      	lsls	r3, r3, #2
 801c7c6:	4413      	add	r3, r2
 801c7c8:	681a      	ldr	r2, [r3, #0]
 801c7ca:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c7ce:	009b      	lsls	r3, r3, #2
 801c7d0:	33b0      	adds	r3, #176	@ 0xb0
 801c7d2:	443b      	add	r3, r7
 801c7d4:	f853 3c58 	ldr.w	r3, [r3, #-88]
 801c7d8:	1ad2      	subs	r2, r2, r3
 801c7da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c7de:	1ad3      	subs	r3, r2, r3
 801c7e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      if (diff != v[index][i]) {
 801c7e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c7e8:	009b      	lsls	r3, r3, #2
 801c7ea:	33b0      	adds	r3, #176	@ 0xb0
 801c7ec:	443b      	add	r3, r7
 801c7ee:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801c7f2:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c7f6:	009b      	lsls	r3, r3, #2
 801c7f8:	4413      	add	r3, r2
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c800:	429a      	cmp	r2, r3
 801c802:	d014      	beq.n	801c82e <mg_uecc_vli_mmod+0x196>
        borrow = (diff > v[index][i]);
 801c804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c808:	009b      	lsls	r3, r3, #2
 801c80a:	33b0      	adds	r3, #176	@ 0xb0
 801c80c:	443b      	add	r3, r7
 801c80e:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801c812:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c816:	009b      	lsls	r3, r3, #2
 801c818:	4413      	add	r3, r2
 801c81a:	681b      	ldr	r3, [r3, #0]
 801c81c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c820:	429a      	cmp	r2, r3
 801c822:	bf8c      	ite	hi
 801c824:	2301      	movhi	r3, #1
 801c826:	2300      	movls	r3, #0
 801c828:	b2db      	uxtb	r3, r3
 801c82a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      }
      v[1 - index][i] = diff;
 801c82e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c832:	f1c3 0301 	rsb	r3, r3, #1
 801c836:	009b      	lsls	r3, r3, #2
 801c838:	33b0      	adds	r3, #176	@ 0xb0
 801c83a:	443b      	add	r3, r7
 801c83c:	f853 2ca0 	ldr.w	r2, [r3, #-160]
 801c840:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 801c844:	009b      	lsls	r3, r3, #2
 801c846:	4413      	add	r3, r2
 801c848:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801c84c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < num_words * 2; ++i) {
 801c84e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 801c852:	3301      	adds	r3, #1
 801c854:	b2db      	uxtb	r3, r3
 801c856:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 801c85a:	f997 209f 	ldrsb.w	r2, [r7, #159]	@ 0x9f
 801c85e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c862:	005b      	lsls	r3, r3, #1
 801c864:	429a      	cmp	r2, r3
 801c866:	dba4      	blt.n	801c7b2 <mg_uecc_vli_mmod+0x11a>
    }
    index = !(index ^ borrow); /* Swap the index if there was no borrow */
 801c868:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801c86c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801c870:	429a      	cmp	r2, r3
 801c872:	bf0c      	ite	eq
 801c874:	2301      	moveq	r3, #1
 801c876:	2300      	movne	r3, #0
 801c878:	b2db      	uxtb	r3, r3
 801c87a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    mg_uecc_vli_rshift1(mod_multiple, num_words);
 801c87e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c882:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801c886:	4611      	mov	r1, r2
 801c888:	4618      	mov	r0, r3
 801c88a:	f7ff fcf9 	bl	801c280 <mg_uecc_vli_rshift1>
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801c88e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c892:	3b01      	subs	r3, #1
 801c894:	009b      	lsls	r3, r3, #2
 801c896:	33b0      	adds	r3, #176	@ 0xb0
 801c898:	443b      	add	r3, r7
 801c89a:	f853 1c58 	ldr.w	r1, [r3, #-88]
 801c89e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c8a2:	009b      	lsls	r3, r3, #2
 801c8a4:	33b0      	adds	r3, #176	@ 0xb0
 801c8a6:	443b      	add	r3, r7
 801c8a8:	f853 3c58 	ldr.w	r3, [r3, #-88]
                                   << (MG_UECC_WORD_BITS - 1);
 801c8ac:	07da      	lsls	r2, r3, #31
    mod_multiple[num_words - 1] |= mod_multiple[num_words]
 801c8ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c8b2:	3b01      	subs	r3, #1
 801c8b4:	430a      	orrs	r2, r1
 801c8b6:	009b      	lsls	r3, r3, #2
 801c8b8:	33b0      	adds	r3, #176	@ 0xb0
 801c8ba:	443b      	add	r3, r7
 801c8bc:	f843 2c58 	str.w	r2, [r3, #-88]
    mg_uecc_vli_rshift1(mod_multiple + num_words, num_words);
 801c8c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c8c4:	009b      	lsls	r3, r3, #2
 801c8c6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 801c8ca:	4413      	add	r3, r2
 801c8cc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c8d0:	4611      	mov	r1, r2
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	f7ff fcd4 	bl	801c280 <mg_uecc_vli_rshift1>
  for (index = 1; shift >= 0; --shift) {
 801c8d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801c8dc:	3b01      	subs	r3, #1
 801c8de:	b29b      	uxth	r3, r3
 801c8e0:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
 801c8e4:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 801c8e8:	2b00      	cmp	r3, #0
 801c8ea:	f6bf af5b 	bge.w	801c7a4 <mg_uecc_vli_mmod+0x10c>
  }
  mg_uecc_vli_set(result, v[index], num_words);
 801c8ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801c8f2:	009b      	lsls	r3, r3, #2
 801c8f4:	33b0      	adds	r3, #176	@ 0xb0
 801c8f6:	443b      	add	r3, r7
 801c8f8:	f853 3ca0 	ldr.w	r3, [r3, #-160]
 801c8fc:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801c900:	4619      	mov	r1, r3
 801c902:	68f8      	ldr	r0, [r7, #12]
 801c904:	f7ff fbf6 	bl	801c0f4 <mg_uecc_vli_set>
}
 801c908:	bf00      	nop
 801c90a:	37b4      	adds	r7, #180	@ 0xb4
 801c90c:	46bd      	mov	sp, r7
 801c90e:	bd90      	pop	{r4, r7, pc}

0801c910 <mg_uecc_vli_modMult>:
/* Computes result = (left * right) % mod. */
MG_UECC_VLI_API void mg_uecc_vli_modMult(mg_uecc_word_t *result,
                                         const mg_uecc_word_t *left,
                                         const mg_uecc_word_t *right,
                                         const mg_uecc_word_t *mod,
                                         wordcount_t num_words) {
 801c910:	b580      	push	{r7, lr}
 801c912:	b094      	sub	sp, #80	@ 0x50
 801c914:	af00      	add	r7, sp, #0
 801c916:	60f8      	str	r0, [r7, #12]
 801c918:	60b9      	str	r1, [r7, #8]
 801c91a:	607a      	str	r2, [r7, #4]
 801c91c:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, num_words);
 801c91e:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801c922:	f107 0010 	add.w	r0, r7, #16
 801c926:	687a      	ldr	r2, [r7, #4]
 801c928:	68b9      	ldr	r1, [r7, #8]
 801c92a:	f7ff fdd1 	bl	801c4d0 <mg_uecc_vli_mult>
  mg_uecc_vli_mmod(result, product, mod, num_words);
 801c92e:	f997 3058 	ldrsb.w	r3, [r7, #88]	@ 0x58
 801c932:	f107 0110 	add.w	r1, r7, #16
 801c936:	683a      	ldr	r2, [r7, #0]
 801c938:	68f8      	ldr	r0, [r7, #12]
 801c93a:	f7ff fead 	bl	801c698 <mg_uecc_vli_mmod>
}
 801c93e:	bf00      	nop
 801c940:	3750      	adds	r7, #80	@ 0x50
 801c942:	46bd      	mov	sp, r7
 801c944:	bd80      	pop	{r7, pc}

0801c946 <mg_uecc_vli_modMult_fast>:

MG_UECC_VLI_API void mg_uecc_vli_modMult_fast(mg_uecc_word_t *result,
                                              const mg_uecc_word_t *left,
                                              const mg_uecc_word_t *right,
                                              MG_UECC_Curve curve) {
 801c946:	b580      	push	{r7, lr}
 801c948:	b094      	sub	sp, #80	@ 0x50
 801c94a:	af00      	add	r7, sp, #0
 801c94c:	60f8      	str	r0, [r7, #12]
 801c94e:	60b9      	str	r1, [r7, #8]
 801c950:	607a      	str	r2, [r7, #4]
 801c952:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t product[2 * MG_UECC_MAX_WORDS];
  mg_uecc_vli_mult(product, left, right, curve->num_words);
 801c954:	683b      	ldr	r3, [r7, #0]
 801c956:	f993 3000 	ldrsb.w	r3, [r3]
 801c95a:	f107 0010 	add.w	r0, r7, #16
 801c95e:	687a      	ldr	r2, [r7, #4]
 801c960:	68b9      	ldr	r1, [r7, #8]
 801c962:	f7ff fdb5 	bl	801c4d0 <mg_uecc_vli_mult>
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
  curve->mmod_fast(result, product);
 801c966:	683b      	ldr	r3, [r7, #0]
 801c968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801c96c:	f107 0210 	add.w	r2, r7, #16
 801c970:	4611      	mov	r1, r2
 801c972:	68f8      	ldr	r0, [r7, #12]
 801c974:	4798      	blx	r3
#else
  mg_uecc_vli_mmod(result, product, curve->p, curve->num_words);
#endif
}
 801c976:	bf00      	nop
 801c978:	3750      	adds	r7, #80	@ 0x50
 801c97a:	46bd      	mov	sp, r7
 801c97c:	bd80      	pop	{r7, pc}

0801c97e <mg_uecc_vli_modSquare_fast>:
}
#endif /* MG_UECC_ENABLE_VLI_API */

MG_UECC_VLI_API void mg_uecc_vli_modSquare_fast(mg_uecc_word_t *result,
                                                const mg_uecc_word_t *left,
                                                MG_UECC_Curve curve) {
 801c97e:	b580      	push	{r7, lr}
 801c980:	b084      	sub	sp, #16
 801c982:	af00      	add	r7, sp, #0
 801c984:	60f8      	str	r0, [r7, #12]
 801c986:	60b9      	str	r1, [r7, #8]
 801c988:	607a      	str	r2, [r7, #4]
  mg_uecc_vli_modMult_fast(result, left, left, curve);
 801c98a:	687b      	ldr	r3, [r7, #4]
 801c98c:	68ba      	ldr	r2, [r7, #8]
 801c98e:	68b9      	ldr	r1, [r7, #8]
 801c990:	68f8      	ldr	r0, [r7, #12]
 801c992:	f7ff ffd8 	bl	801c946 <mg_uecc_vli_modMult_fast>
}
 801c996:	bf00      	nop
 801c998:	3710      	adds	r7, #16
 801c99a:	46bd      	mov	sp, r7
 801c99c:	bd80      	pop	{r7, pc}

0801c99e <vli_modInv_update>:

#endif /* MG_UECC_SQUARE_FUNC */

#define EVEN(vli) (!(vli[0] & 1))
static void vli_modInv_update(mg_uecc_word_t *uv, const mg_uecc_word_t *mod,
                              wordcount_t num_words) {
 801c99e:	b580      	push	{r7, lr}
 801c9a0:	b086      	sub	sp, #24
 801c9a2:	af00      	add	r7, sp, #0
 801c9a4:	60f8      	str	r0, [r7, #12]
 801c9a6:	60b9      	str	r1, [r7, #8]
 801c9a8:	4613      	mov	r3, r2
 801c9aa:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t carry = 0;
 801c9ac:	2300      	movs	r3, #0
 801c9ae:	617b      	str	r3, [r7, #20]
  if (!EVEN(uv)) {
 801c9b0:	68fb      	ldr	r3, [r7, #12]
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	f003 0301 	and.w	r3, r3, #1
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d007      	beq.n	801c9cc <vli_modInv_update+0x2e>
    carry = mg_uecc_vli_add(uv, uv, mod, num_words);
 801c9bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c9c0:	68ba      	ldr	r2, [r7, #8]
 801c9c2:	68f9      	ldr	r1, [r7, #12]
 801c9c4:	68f8      	ldr	r0, [r7, #12]
 801c9c6:	f7ff fc85 	bl	801c2d4 <mg_uecc_vli_add>
 801c9ca:	6178      	str	r0, [r7, #20]
  }
  mg_uecc_vli_rshift1(uv, num_words);
 801c9cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801c9d0:	4619      	mov	r1, r3
 801c9d2:	68f8      	ldr	r0, [r7, #12]
 801c9d4:	f7ff fc54 	bl	801c280 <mg_uecc_vli_rshift1>
  if (carry) {
 801c9d8:	697b      	ldr	r3, [r7, #20]
 801c9da:	2b00      	cmp	r3, #0
 801c9dc:	d013      	beq.n	801ca06 <vli_modInv_update+0x68>
    uv[num_words - 1] |= HIGH_BIT_SET;
 801c9de:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801c9e2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801c9e6:	4413      	add	r3, r2
 801c9e8:	009b      	lsls	r3, r3, #2
 801c9ea:	68fa      	ldr	r2, [r7, #12]
 801c9ec:	4413      	add	r3, r2
 801c9ee:	681a      	ldr	r2, [r3, #0]
 801c9f0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801c9f4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801c9f8:	440b      	add	r3, r1
 801c9fa:	009b      	lsls	r3, r3, #2
 801c9fc:	68f9      	ldr	r1, [r7, #12]
 801c9fe:	440b      	add	r3, r1
 801ca00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 801ca04:	601a      	str	r2, [r3, #0]
  }
}
 801ca06:	bf00      	nop
 801ca08:	3718      	adds	r7, #24
 801ca0a:	46bd      	mov	sp, r7
 801ca0c:	bd80      	pop	{r7, pc}

0801ca0e <mg_uecc_vli_modInv>:
/* Computes result = (1 / input) % mod. All VLIs are the same size.
   See "From Euclid's GCD to Montgomery Multiplication to the Great Divide" */
MG_UECC_VLI_API void mg_uecc_vli_modInv(mg_uecc_word_t *result,
                                        const mg_uecc_word_t *input,
                                        const mg_uecc_word_t *mod,
                                        wordcount_t num_words) {
 801ca0e:	b580      	push	{r7, lr}
 801ca10:	b0a6      	sub	sp, #152	@ 0x98
 801ca12:	af00      	add	r7, sp, #0
 801ca14:	60f8      	str	r0, [r7, #12]
 801ca16:	60b9      	str	r1, [r7, #8]
 801ca18:	607a      	str	r2, [r7, #4]
 801ca1a:	70fb      	strb	r3, [r7, #3]
  mg_uecc_word_t a[MG_UECC_MAX_WORDS], b[MG_UECC_MAX_WORDS],
      u[MG_UECC_MAX_WORDS], v[MG_UECC_MAX_WORDS];
  cmpresult_t cmpResult;

  if (mg_uecc_vli_isZero(input, num_words)) {
 801ca1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ca20:	4619      	mov	r1, r3
 801ca22:	68b8      	ldr	r0, [r7, #8]
 801ca24:	f7ff fac3 	bl	801bfae <mg_uecc_vli_isZero>
 801ca28:	4603      	mov	r3, r0
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d006      	beq.n	801ca3c <mg_uecc_vli_modInv+0x2e>
    mg_uecc_vli_clear(result, num_words);
 801ca2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ca32:	4619      	mov	r1, r3
 801ca34:	68f8      	ldr	r0, [r7, #12]
 801ca36:	f7ff fa99 	bl	801bf6c <mg_uecc_vli_clear>
 801ca3a:	e0de      	b.n	801cbfa <mg_uecc_vli_modInv+0x1ec>
    return;
  }

  mg_uecc_vli_set(a, input, num_words);
 801ca3c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca40:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801ca44:	68b9      	ldr	r1, [r7, #8]
 801ca46:	4618      	mov	r0, r3
 801ca48:	f7ff fb54 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(b, mod, num_words);
 801ca4c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801ca54:	6879      	ldr	r1, [r7, #4]
 801ca56:	4618      	mov	r0, r3
 801ca58:	f7ff fb4c 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_clear(u, num_words);
 801ca5c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca60:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801ca64:	4611      	mov	r1, r2
 801ca66:	4618      	mov	r0, r3
 801ca68:	f7ff fa80 	bl	801bf6c <mg_uecc_vli_clear>
  u[0] = 1;
 801ca6c:	2301      	movs	r3, #1
 801ca6e:	637b      	str	r3, [r7, #52]	@ 0x34
  mg_uecc_vli_clear(v, num_words);
 801ca70:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca74:	f107 0314 	add.w	r3, r7, #20
 801ca78:	4611      	mov	r1, r2
 801ca7a:	4618      	mov	r0, r3
 801ca7c:	f7ff fa76 	bl	801bf6c <mg_uecc_vli_clear>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801ca80:	e0a2      	b.n	801cbc8 <mg_uecc_vli_modInv+0x1ba>
    if (EVEN(a)) {
 801ca82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ca84:	f003 0301 	and.w	r3, r3, #1
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d110      	bne.n	801caae <mg_uecc_vli_modInv+0xa0>
      mg_uecc_vli_rshift1(a, num_words);
 801ca8c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801ca90:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801ca94:	4611      	mov	r1, r2
 801ca96:	4618      	mov	r0, r3
 801ca98:	f7ff fbf2 	bl	801c280 <mg_uecc_vli_rshift1>
      vli_modInv_update(u, mod, num_words);
 801ca9c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801caa0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801caa4:	6879      	ldr	r1, [r7, #4]
 801caa6:	4618      	mov	r0, r3
 801caa8:	f7ff ff79 	bl	801c99e <vli_modInv_update>
 801caac:	e08c      	b.n	801cbc8 <mg_uecc_vli_modInv+0x1ba>
    } else if (EVEN(b)) {
 801caae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801cab0:	f003 0301 	and.w	r3, r3, #1
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d110      	bne.n	801cada <mg_uecc_vli_modInv+0xcc>
      mg_uecc_vli_rshift1(b, num_words);
 801cab8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cabc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801cac0:	4611      	mov	r1, r2
 801cac2:	4618      	mov	r0, r3
 801cac4:	f7ff fbdc 	bl	801c280 <mg_uecc_vli_rshift1>
      vli_modInv_update(v, mod, num_words);
 801cac8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cacc:	f107 0314 	add.w	r3, r7, #20
 801cad0:	6879      	ldr	r1, [r7, #4]
 801cad2:	4618      	mov	r0, r3
 801cad4:	f7ff ff63 	bl	801c99e <vli_modInv_update>
 801cad8:	e076      	b.n	801cbc8 <mg_uecc_vli_modInv+0x1ba>
    } else if (cmpResult > 0) {
 801cada:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801cade:	2b00      	cmp	r3, #0
 801cae0:	dd39      	ble.n	801cb56 <mg_uecc_vli_modInv+0x148>
      mg_uecc_vli_sub(a, a, b, num_words);
 801cae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cae6:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801caea:	f107 0174 	add.w	r1, r7, #116	@ 0x74
 801caee:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 801caf2:	f7ff fc39 	bl	801c368 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(a, num_words);
 801caf6:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cafa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801cafe:	4611      	mov	r1, r2
 801cb00:	4618      	mov	r0, r3
 801cb02:	f7ff fbbd 	bl	801c280 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(u, v, num_words) < 0) {
 801cb06:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cb0a:	f107 0114 	add.w	r1, r7, #20
 801cb0e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801cb12:	4618      	mov	r0, r3
 801cb14:	f7ff fb15 	bl	801c142 <mg_uecc_vli_cmp_unsafe>
 801cb18:	4603      	mov	r3, r0
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	da08      	bge.n	801cb30 <mg_uecc_vli_modInv+0x122>
        mg_uecc_vli_add(u, u, mod, num_words);
 801cb1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cb22:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801cb26:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801cb2a:	687a      	ldr	r2, [r7, #4]
 801cb2c:	f7ff fbd2 	bl	801c2d4 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(u, u, v, num_words);
 801cb30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cb34:	f107 0214 	add.w	r2, r7, #20
 801cb38:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801cb3c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801cb40:	f7ff fc12 	bl	801c368 <mg_uecc_vli_sub>
      vli_modInv_update(u, mod, num_words);
 801cb44:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cb48:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801cb4c:	6879      	ldr	r1, [r7, #4]
 801cb4e:	4618      	mov	r0, r3
 801cb50:	f7ff ff25 	bl	801c99e <vli_modInv_update>
 801cb54:	e038      	b.n	801cbc8 <mg_uecc_vli_modInv+0x1ba>
    } else {
      mg_uecc_vli_sub(b, b, a, num_words);
 801cb56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cb5a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801cb5e:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801cb62:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801cb66:	f7ff fbff 	bl	801c368 <mg_uecc_vli_sub>
      mg_uecc_vli_rshift1(b, num_words);
 801cb6a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cb6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801cb72:	4611      	mov	r1, r2
 801cb74:	4618      	mov	r0, r3
 801cb76:	f7ff fb83 	bl	801c280 <mg_uecc_vli_rshift1>
      if (mg_uecc_vli_cmp_unsafe(v, u, num_words) < 0) {
 801cb7a:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cb7e:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801cb82:	f107 0314 	add.w	r3, r7, #20
 801cb86:	4618      	mov	r0, r3
 801cb88:	f7ff fadb 	bl	801c142 <mg_uecc_vli_cmp_unsafe>
 801cb8c:	4603      	mov	r3, r0
 801cb8e:	2b00      	cmp	r3, #0
 801cb90:	da08      	bge.n	801cba4 <mg_uecc_vli_modInv+0x196>
        mg_uecc_vli_add(v, v, mod, num_words);
 801cb92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cb96:	f107 0114 	add.w	r1, r7, #20
 801cb9a:	f107 0014 	add.w	r0, r7, #20
 801cb9e:	687a      	ldr	r2, [r7, #4]
 801cba0:	f7ff fb98 	bl	801c2d4 <mg_uecc_vli_add>
      }
      mg_uecc_vli_sub(v, v, u, num_words);
 801cba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801cba8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801cbac:	f107 0114 	add.w	r1, r7, #20
 801cbb0:	f107 0014 	add.w	r0, r7, #20
 801cbb4:	f7ff fbd8 	bl	801c368 <mg_uecc_vli_sub>
      vli_modInv_update(v, mod, num_words);
 801cbb8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cbbc:	f107 0314 	add.w	r3, r7, #20
 801cbc0:	6879      	ldr	r1, [r7, #4]
 801cbc2:	4618      	mov	r0, r3
 801cbc4:	f7ff feeb 	bl	801c99e <vli_modInv_update>
  while ((cmpResult = mg_uecc_vli_cmp_unsafe(a, b, num_words)) != 0) {
 801cbc8:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cbcc:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801cbd0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 801cbd4:	4618      	mov	r0, r3
 801cbd6:	f7ff fab4 	bl	801c142 <mg_uecc_vli_cmp_unsafe>
 801cbda:	4603      	mov	r3, r0
 801cbdc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 801cbe0:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	f47f af4c 	bne.w	801ca82 <mg_uecc_vli_modInv+0x74>
    }
  }
  mg_uecc_vli_set(result, u, num_words);
 801cbea:	f997 2003 	ldrsb.w	r2, [r7, #3]
 801cbee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801cbf2:	4619      	mov	r1, r3
 801cbf4:	68f8      	ldr	r0, [r7, #12]
 801cbf6:	f7ff fa7d 	bl	801c0f4 <mg_uecc_vli_set>
}
 801cbfa:	3798      	adds	r7, #152	@ 0x98
 801cbfc:	46bd      	mov	sp, r7
 801cbfe:	bd80      	pop	{r7, pc}

0801cc00 <double_jacobian_default>:
#endif /* MG_UECC_WORD_SIZE */

#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp224r1 || MG_UECC_SUPPORTS_secp256r1
static void double_jacobian_default(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                    mg_uecc_word_t *Z1, MG_UECC_Curve curve) {
 801cc00:	b580      	push	{r7, lr}
 801cc02:	b098      	sub	sp, #96	@ 0x60
 801cc04:	af02      	add	r7, sp, #8
 801cc06:	60f8      	str	r0, [r7, #12]
 801cc08:	60b9      	str	r1, [r7, #8]
 801cc0a:	607a      	str	r2, [r7, #4]
 801cc0c:	603b      	str	r3, [r7, #0]
  /* t1 = X, t2 = Y, t3 = Z */
  mg_uecc_word_t t4[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801cc0e:	683b      	ldr	r3, [r7, #0]
 801cc10:	781b      	ldrb	r3, [r3, #0]
 801cc12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

  if (mg_uecc_vli_isZero(Z1, num_words)) {
 801cc16:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cc1a:	4619      	mov	r1, r3
 801cc1c:	6878      	ldr	r0, [r7, #4]
 801cc1e:	f7ff f9c6 	bl	801bfae <mg_uecc_vli_isZero>
 801cc22:	4603      	mov	r3, r0
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	f040 80e6 	bne.w	801cdf6 <double_jacobian_default+0x1f6>
    return;
  }

  mg_uecc_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
 801cc2a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801cc2e:	683a      	ldr	r2, [r7, #0]
 801cc30:	68b9      	ldr	r1, [r7, #8]
 801cc32:	4618      	mov	r0, r3
 801cc34:	f7ff fea3 	bl	801c97e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
 801cc38:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801cc3c:	f107 0010 	add.w	r0, r7, #16
 801cc40:	683b      	ldr	r3, [r7, #0]
 801cc42:	68f9      	ldr	r1, [r7, #12]
 801cc44:	f7ff fe7f 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
 801cc48:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801cc4c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801cc50:	683a      	ldr	r2, [r7, #0]
 801cc52:	4618      	mov	r0, r3
 801cc54:	f7ff fe93 	bl	801c97e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
 801cc58:	683b      	ldr	r3, [r7, #0]
 801cc5a:	687a      	ldr	r2, [r7, #4]
 801cc5c:	68b9      	ldr	r1, [r7, #8]
 801cc5e:	68b8      	ldr	r0, [r7, #8]
 801cc60:	f7ff fe71 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
 801cc64:	683a      	ldr	r2, [r7, #0]
 801cc66:	6879      	ldr	r1, [r7, #4]
 801cc68:	6878      	ldr	r0, [r7, #4]
 801cc6a:	f7ff fe88 	bl	801c97e <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
 801cc6e:	683b      	ldr	r3, [r7, #0]
 801cc70:	1d1a      	adds	r2, r3, #4
 801cc72:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cc76:	9300      	str	r3, [sp, #0]
 801cc78:	4613      	mov	r3, r2
 801cc7a:	687a      	ldr	r2, [r7, #4]
 801cc7c:	68f9      	ldr	r1, [r7, #12]
 801cc7e:	68f8      	ldr	r0, [r7, #12]
 801cc80:	f7ff fcc6 	bl	801c610 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
 801cc84:	683b      	ldr	r3, [r7, #0]
 801cc86:	1d1a      	adds	r2, r3, #4
 801cc88:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cc8c:	9300      	str	r3, [sp, #0]
 801cc8e:	4613      	mov	r3, r2
 801cc90:	687a      	ldr	r2, [r7, #4]
 801cc92:	6879      	ldr	r1, [r7, #4]
 801cc94:	6878      	ldr	r0, [r7, #4]
 801cc96:	f7ff fcbb 	bl	801c610 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
 801cc9a:	683b      	ldr	r3, [r7, #0]
 801cc9c:	1d1a      	adds	r2, r3, #4
 801cc9e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cca2:	9300      	str	r3, [sp, #0]
 801cca4:	4613      	mov	r3, r2
 801cca6:	687a      	ldr	r2, [r7, #4]
 801cca8:	68f9      	ldr	r1, [r7, #12]
 801ccaa:	6878      	ldr	r0, [r7, #4]
 801ccac:	f7ff fcd7 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, Z1, curve);         /* t1 = x1^2 - z1^4 */
 801ccb0:	683b      	ldr	r3, [r7, #0]
 801ccb2:	687a      	ldr	r2, [r7, #4]
 801ccb4:	68f9      	ldr	r1, [r7, #12]
 801ccb6:	68f8      	ldr	r0, [r7, #12]
 801ccb8:	f7ff fe45 	bl	801c946 <mg_uecc_vli_modMult_fast>

  mg_uecc_vli_modAdd(Z1, X1, X1, curve->p,
 801ccbc:	683b      	ldr	r3, [r7, #0]
 801ccbe:	1d1a      	adds	r2, r3, #4
 801ccc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801ccc4:	9300      	str	r3, [sp, #0]
 801ccc6:	4613      	mov	r3, r2
 801ccc8:	68fa      	ldr	r2, [r7, #12]
 801ccca:	68f9      	ldr	r1, [r7, #12]
 801cccc:	6878      	ldr	r0, [r7, #4]
 801ccce:	f7ff fc9f 	bl	801c610 <mg_uecc_vli_modAdd>
                     num_words); /* t3 = 2*(x1^2 - z1^4) */
  mg_uecc_vli_modAdd(X1, X1, Z1, curve->p,
 801ccd2:	683b      	ldr	r3, [r7, #0]
 801ccd4:	1d1a      	adds	r2, r3, #4
 801ccd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801ccda:	9300      	str	r3, [sp, #0]
 801ccdc:	4613      	mov	r3, r2
 801ccde:	687a      	ldr	r2, [r7, #4]
 801cce0:	68f9      	ldr	r1, [r7, #12]
 801cce2:	68f8      	ldr	r0, [r7, #12]
 801cce4:	f7ff fc94 	bl	801c610 <mg_uecc_vli_modAdd>
                     num_words); /* t1 = 3*(x1^2 - z1^4) */
  if (mg_uecc_vli_testBit(X1, 0)) {
 801cce8:	2100      	movs	r1, #0
 801ccea:	68f8      	ldr	r0, [r7, #12]
 801ccec:	f7ff f989 	bl	801c002 <mg_uecc_vli_testBit>
 801ccf0:	4603      	mov	r3, r0
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d024      	beq.n	801cd40 <double_jacobian_default+0x140>
    mg_uecc_word_t l_carry = mg_uecc_vli_add(X1, X1, curve->p, num_words);
 801ccf6:	683b      	ldr	r3, [r7, #0]
 801ccf8:	1d1a      	adds	r2, r3, #4
 801ccfa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801ccfe:	68f9      	ldr	r1, [r7, #12]
 801cd00:	68f8      	ldr	r0, [r7, #12]
 801cd02:	f7ff fae7 	bl	801c2d4 <mg_uecc_vli_add>
 801cd06:	6538      	str	r0, [r7, #80]	@ 0x50
    mg_uecc_vli_rshift1(X1, num_words);
 801cd08:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cd0c:	4619      	mov	r1, r3
 801cd0e:	68f8      	ldr	r0, [r7, #12]
 801cd10:	f7ff fab6 	bl	801c280 <mg_uecc_vli_rshift1>
    X1[num_words - 1] |= l_carry << (MG_UECC_WORD_BITS - 1);
 801cd14:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801cd18:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cd1c:	4413      	add	r3, r2
 801cd1e:	009b      	lsls	r3, r3, #2
 801cd20:	68fa      	ldr	r2, [r7, #12]
 801cd22:	4413      	add	r3, r2
 801cd24:	6819      	ldr	r1, [r3, #0]
 801cd26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801cd28:	07da      	lsls	r2, r3, #31
 801cd2a:	f997 0057 	ldrsb.w	r0, [r7, #87]	@ 0x57
 801cd2e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801cd32:	4403      	add	r3, r0
 801cd34:	009b      	lsls	r3, r3, #2
 801cd36:	68f8      	ldr	r0, [r7, #12]
 801cd38:	4403      	add	r3, r0
 801cd3a:	430a      	orrs	r2, r1
 801cd3c:	601a      	str	r2, [r3, #0]
 801cd3e:	e005      	b.n	801cd4c <double_jacobian_default+0x14c>
  } else {
    mg_uecc_vli_rshift1(X1, num_words);
 801cd40:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cd44:	4619      	mov	r1, r3
 801cd46:	68f8      	ldr	r0, [r7, #12]
 801cd48:	f7ff fa9a 	bl	801c280 <mg_uecc_vli_rshift1>
  }
  /* t1 = 3/2*(x1^2 - z1^4) = B */

  mg_uecc_vli_modSquare_fast(Z1, X1, curve);           /* t3 = B^2 */
 801cd4c:	683a      	ldr	r2, [r7, #0]
 801cd4e:	68f9      	ldr	r1, [r7, #12]
 801cd50:	6878      	ldr	r0, [r7, #4]
 801cd52:	f7ff fe14 	bl	801c97e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
 801cd56:	683b      	ldr	r3, [r7, #0]
 801cd58:	1d19      	adds	r1, r3, #4
 801cd5a:	f107 0210 	add.w	r2, r7, #16
 801cd5e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cd62:	9300      	str	r3, [sp, #0]
 801cd64:	460b      	mov	r3, r1
 801cd66:	6879      	ldr	r1, [r7, #4]
 801cd68:	6878      	ldr	r0, [r7, #4]
 801cd6a:	f7ff fc78 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
 801cd6e:	683b      	ldr	r3, [r7, #0]
 801cd70:	1d19      	adds	r1, r3, #4
 801cd72:	f107 0210 	add.w	r2, r7, #16
 801cd76:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cd7a:	9300      	str	r3, [sp, #0]
 801cd7c:	460b      	mov	r3, r1
 801cd7e:	6879      	ldr	r1, [r7, #4]
 801cd80:	6878      	ldr	r0, [r7, #4]
 801cd82:	f7ff fc6c 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
 801cd86:	683b      	ldr	r3, [r7, #0]
 801cd88:	1d1a      	adds	r2, r3, #4
 801cd8a:	f107 0110 	add.w	r1, r7, #16
 801cd8e:	f107 0010 	add.w	r0, r7, #16
 801cd92:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cd96:	9300      	str	r3, [sp, #0]
 801cd98:	4613      	mov	r3, r2
 801cd9a:	687a      	ldr	r2, [r7, #4]
 801cd9c:	f7ff fc5f 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve);         /* t1 = B * (A - x3) */
 801cda0:	f107 0210 	add.w	r2, r7, #16
 801cda4:	683b      	ldr	r3, [r7, #0]
 801cda6:	68f9      	ldr	r1, [r7, #12]
 801cda8:	68f8      	ldr	r0, [r7, #12]
 801cdaa:	f7ff fdcc 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(t4, X1, t4, curve->p,
 801cdae:	683b      	ldr	r3, [r7, #0]
 801cdb0:	1d19      	adds	r1, r3, #4
 801cdb2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801cdb6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801cdba:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cdbe:	9300      	str	r3, [sp, #0]
 801cdc0:	460b      	mov	r3, r1
 801cdc2:	68f9      	ldr	r1, [r7, #12]
 801cdc4:	f7ff fc4b 	bl	801c65e <mg_uecc_vli_modSub>
                     num_words); /* t4 = B * (A - x3) - y1^4 = y3 */

  mg_uecc_vli_set(X1, Z1, num_words);
 801cdc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cdcc:	461a      	mov	r2, r3
 801cdce:	6879      	ldr	r1, [r7, #4]
 801cdd0:	68f8      	ldr	r0, [r7, #12]
 801cdd2:	f7ff f98f 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(Z1, Y1, num_words);
 801cdd6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 801cdda:	461a      	mov	r2, r3
 801cddc:	68b9      	ldr	r1, [r7, #8]
 801cdde:	6878      	ldr	r0, [r7, #4]
 801cde0:	f7ff f988 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y1, t4, num_words);
 801cde4:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 801cde8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801cdec:	4619      	mov	r1, r3
 801cdee:	68b8      	ldr	r0, [r7, #8]
 801cdf0:	f7ff f980 	bl	801c0f4 <mg_uecc_vli_set>
 801cdf4:	e000      	b.n	801cdf8 <double_jacobian_default+0x1f8>
    return;
 801cdf6:	bf00      	nop
}
 801cdf8:	3758      	adds	r7, #88	@ 0x58
 801cdfa:	46bd      	mov	sp, r7
 801cdfc:	bd80      	pop	{r7, pc}

0801cdfe <x_side_default>:

/* Computes result = x^3 + ax + b. result must not overlap x. */
static void x_side_default(mg_uecc_word_t *result, const mg_uecc_word_t *x,
                           MG_UECC_Curve curve) {
 801cdfe:	b580      	push	{r7, lr}
 801ce00:	b090      	sub	sp, #64	@ 0x40
 801ce02:	af02      	add	r7, sp, #8
 801ce04:	60f8      	str	r0, [r7, #12]
 801ce06:	60b9      	str	r1, [r7, #8]
 801ce08:	607a      	str	r2, [r7, #4]
  mg_uecc_word_t _3[MG_UECC_MAX_WORDS] = {3}; /* -a = 3 */
 801ce0a:	f107 0314 	add.w	r3, r7, #20
 801ce0e:	2220      	movs	r2, #32
 801ce10:	2100      	movs	r1, #0
 801ce12:	4618      	mov	r0, r3
 801ce14:	f006 fcc3 	bl	802379e <memset>
 801ce18:	2303      	movs	r3, #3
 801ce1a:	617b      	str	r3, [r7, #20]
  wordcount_t num_words = curve->num_words;
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	781b      	ldrb	r3, [r3, #0]
 801ce20:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSquare_fast(result, x, curve);                /* r = x^2 */
 801ce24:	687a      	ldr	r2, [r7, #4]
 801ce26:	68b9      	ldr	r1, [r7, #8]
 801ce28:	68f8      	ldr	r0, [r7, #12]
 801ce2a:	f7ff fda8 	bl	801c97e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	1d19      	adds	r1, r3, #4
 801ce32:	f107 0214 	add.w	r2, r7, #20
 801ce36:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ce3a:	9300      	str	r3, [sp, #0]
 801ce3c:	460b      	mov	r3, r1
 801ce3e:	68f9      	ldr	r1, [r7, #12]
 801ce40:	68f8      	ldr	r0, [r7, #12]
 801ce42:	f7ff fc0c 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	68ba      	ldr	r2, [r7, #8]
 801ce4a:	68f9      	ldr	r1, [r7, #12]
 801ce4c:	68f8      	ldr	r0, [r7, #12]
 801ce4e:	f7ff fd7a 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(result, result, curve->b, curve->p,
 801ce52:	687b      	ldr	r3, [r7, #4]
 801ce54:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 801ce58:	687b      	ldr	r3, [r7, #4]
 801ce5a:	1d19      	adds	r1, r3, #4
 801ce5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801ce60:	9300      	str	r3, [sp, #0]
 801ce62:	460b      	mov	r3, r1
 801ce64:	68f9      	ldr	r1, [r7, #12]
 801ce66:	68f8      	ldr	r0, [r7, #12]
 801ce68:	f7ff fbd2 	bl	801c610 <mg_uecc_vli_modAdd>
                     num_words); /* r = x^3 - 3x + b */
}
 801ce6c:	bf00      	nop
 801ce6e:	3738      	adds	r7, #56	@ 0x38
 801ce70:	46bd      	mov	sp, r7
 801ce72:	bd80      	pop	{r7, pc}

0801ce74 <mod_sqrt_default>:

#if MG_UECC_SUPPORT_COMPRESSED_POINT
#if MG_UECC_SUPPORTS_secp160r1 || MG_UECC_SUPPORTS_secp192r1 || \
    MG_UECC_SUPPORTS_secp256r1 || MG_UECC_SUPPORTS_secp256k1
/* Compute a = sqrt(a) (mod curve_p). */
static void mod_sqrt_default(mg_uecc_word_t *a, MG_UECC_Curve curve) {
 801ce74:	b580      	push	{r7, lr}
 801ce76:	b094      	sub	sp, #80	@ 0x50
 801ce78:	af00      	add	r7, sp, #0
 801ce7a:	6078      	str	r0, [r7, #4]
 801ce7c:	6039      	str	r1, [r7, #0]
  bitcount_t i;
  mg_uecc_word_t p1[MG_UECC_MAX_WORDS] = {1};
 801ce7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801ce82:	2220      	movs	r2, #32
 801ce84:	2100      	movs	r1, #0
 801ce86:	4618      	mov	r0, r3
 801ce88:	f006 fc89 	bl	802379e <memset>
 801ce8c:	2301      	movs	r3, #1
 801ce8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  mg_uecc_word_t l_result[MG_UECC_MAX_WORDS] = {1};
 801ce90:	f107 030c 	add.w	r3, r7, #12
 801ce94:	2220      	movs	r2, #32
 801ce96:	2100      	movs	r1, #0
 801ce98:	4618      	mov	r0, r3
 801ce9a:	f006 fc80 	bl	802379e <memset>
 801ce9e:	2301      	movs	r3, #1
 801cea0:	60fb      	str	r3, [r7, #12]
  wordcount_t num_words = curve->num_words;
 801cea2:	683b      	ldr	r3, [r7, #0]
 801cea4:	781b      	ldrb	r3, [r3, #0]
 801cea6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

  /* When curve->p == 3 (mod 4), we can compute
     sqrt(a) = a^((curve->p + 1) / 4) (mod curve->p). */
  mg_uecc_vli_add(p1, curve->p, p1, num_words); /* p1 = curve_p + 1 */
 801ceaa:	683b      	ldr	r3, [r7, #0]
 801ceac:	1d19      	adds	r1, r3, #4
 801ceae:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 801ceb2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801ceb6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 801ceba:	f7ff fa0b 	bl	801c2d4 <mg_uecc_vli_add>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801cebe:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801cec2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801cec6:	4611      	mov	r1, r2
 801cec8:	4618      	mov	r0, r3
 801ceca:	f7ff f8da 	bl	801c082 <mg_uecc_vli_numBits>
 801cece:	4603      	mov	r3, r0
 801ced0:	b29b      	uxth	r3, r3
 801ced2:	3b01      	subs	r3, #1
 801ced4:	b29b      	uxth	r3, r3
 801ced6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801ceda:	e020      	b.n	801cf1e <mod_sqrt_default+0xaa>
    mg_uecc_vli_modSquare_fast(l_result, l_result, curve);
 801cedc:	f107 010c 	add.w	r1, r7, #12
 801cee0:	f107 030c 	add.w	r3, r7, #12
 801cee4:	683a      	ldr	r2, [r7, #0]
 801cee6:	4618      	mov	r0, r3
 801cee8:	f7ff fd49 	bl	801c97e <mg_uecc_vli_modSquare_fast>
    if (mg_uecc_vli_testBit(p1, i)) {
 801ceec:	f9b7 204e 	ldrsh.w	r2, [r7, #78]	@ 0x4e
 801cef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801cef4:	4611      	mov	r1, r2
 801cef6:	4618      	mov	r0, r3
 801cef8:	f7ff f883 	bl	801c002 <mg_uecc_vli_testBit>
 801cefc:	4603      	mov	r3, r0
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d007      	beq.n	801cf12 <mod_sqrt_default+0x9e>
      mg_uecc_vli_modMult_fast(l_result, l_result, a, curve);
 801cf02:	f107 010c 	add.w	r1, r7, #12
 801cf06:	f107 000c 	add.w	r0, r7, #12
 801cf0a:	683b      	ldr	r3, [r7, #0]
 801cf0c:	687a      	ldr	r2, [r7, #4]
 801cf0e:	f7ff fd1a 	bl	801c946 <mg_uecc_vli_modMult_fast>
  for (i = mg_uecc_vli_numBits(p1, num_words) - 1; i > 1; --i) {
 801cf12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801cf16:	3b01      	subs	r3, #1
 801cf18:	b29b      	uxth	r3, r3
 801cf1a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801cf1e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801cf22:	2b01      	cmp	r3, #1
 801cf24:	dcda      	bgt.n	801cedc <mod_sqrt_default+0x68>
    }
  }
  mg_uecc_vli_set(a, l_result, num_words);
 801cf26:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 801cf2a:	f107 030c 	add.w	r3, r7, #12
 801cf2e:	4619      	mov	r1, r3
 801cf30:	6878      	ldr	r0, [r7, #4]
 801cf32:	f7ff f8df 	bl	801c0f4 <mg_uecc_vli_set>
}
 801cf36:	bf00      	nop
 801cf38:	3750      	adds	r7, #80	@ 0x50
 801cf3a:	46bd      	mov	sp, r7
 801cf3c:	bd80      	pop	{r7, pc}
	...

0801cf40 <mg_uecc_secp256r1>:
#if (MG_UECC_OPTIMIZATION_LEVEL > 0)
    &vli_mmod_fast_secp256r1
#endif
};

MG_UECC_Curve mg_uecc_secp256r1(void) {
 801cf40:	b480      	push	{r7}
 801cf42:	af00      	add	r7, sp, #0
  return &curve_secp256r1;
 801cf44:	4b02      	ldr	r3, [pc, #8]	@ (801cf50 <mg_uecc_secp256r1+0x10>)
}
 801cf46:	4618      	mov	r0, r3
 801cf48:	46bd      	mov	sp, r7
 801cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf4e:	4770      	bx	lr
 801cf50:	08027f18 	.word	0x08027f18

0801cf54 <vli_mmod_fast_secp256r1>:
                               num_words_secp256r1);
    }
  }
}
#elif MG_UECC_WORD_SIZE == 4
static void vli_mmod_fast_secp256r1(uint32_t *result, uint32_t *product) {
 801cf54:	b580      	push	{r7, lr}
 801cf56:	b08c      	sub	sp, #48	@ 0x30
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	6078      	str	r0, [r7, #4]
 801cf5c:	6039      	str	r1, [r7, #0]
  uint32_t tmp[num_words_secp256r1];
  int carry;

  /* t */
  mg_uecc_vli_set(result, product, num_words_secp256r1);
 801cf5e:	2208      	movs	r2, #8
 801cf60:	6839      	ldr	r1, [r7, #0]
 801cf62:	6878      	ldr	r0, [r7, #4]
 801cf64:	f7ff f8c6 	bl	801c0f4 <mg_uecc_vli_set>

  /* s1 */
  tmp[0] = tmp[1] = tmp[2] = 0;
 801cf68:	2300      	movs	r3, #0
 801cf6a:	617b      	str	r3, [r7, #20]
 801cf6c:	697b      	ldr	r3, [r7, #20]
 801cf6e:	613b      	str	r3, [r7, #16]
 801cf70:	693b      	ldr	r3, [r7, #16]
 801cf72:	60fb      	str	r3, [r7, #12]
  tmp[3] = product[11];
 801cf74:	683b      	ldr	r3, [r7, #0]
 801cf76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf78:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[12];
 801cf7a:	683b      	ldr	r3, [r7, #0]
 801cf7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf7e:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[13];
 801cf80:	683b      	ldr	r3, [r7, #0]
 801cf82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf84:	623b      	str	r3, [r7, #32]
  tmp[6] = product[14];
 801cf86:	683b      	ldr	r3, [r7, #0]
 801cf88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cf8a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801cf8c:	683b      	ldr	r3, [r7, #0]
 801cf8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cf90:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry = (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801cf92:	f107 020c 	add.w	r2, r7, #12
 801cf96:	f107 010c 	add.w	r1, r7, #12
 801cf9a:	f107 000c 	add.w	r0, r7, #12
 801cf9e:	2308      	movs	r3, #8
 801cfa0:	f7ff f998 	bl	801c2d4 <mg_uecc_vli_add>
 801cfa4:	4603      	mov	r3, r0
 801cfa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801cfa8:	f107 020c 	add.w	r2, r7, #12
 801cfac:	2308      	movs	r3, #8
 801cfae:	6879      	ldr	r1, [r7, #4]
 801cfb0:	6878      	ldr	r0, [r7, #4]
 801cfb2:	f7ff f98f 	bl	801c2d4 <mg_uecc_vli_add>
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	461a      	mov	r2, r3
 801cfba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cfbc:	4413      	add	r3, r2
 801cfbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s2 */
  tmp[3] = product[12];
 801cfc0:	683b      	ldr	r3, [r7, #0]
 801cfc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cfc4:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[13];
 801cfc6:	683b      	ldr	r3, [r7, #0]
 801cfc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cfca:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[14];
 801cfcc:	683b      	ldr	r3, [r7, #0]
 801cfce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cfd0:	623b      	str	r3, [r7, #32]
  tmp[6] = product[15];
 801cfd2:	683b      	ldr	r3, [r7, #0]
 801cfd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cfd6:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = 0;
 801cfd8:	2300      	movs	r3, #0
 801cfda:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(tmp, tmp, tmp, num_words_secp256r1);
 801cfdc:	f107 020c 	add.w	r2, r7, #12
 801cfe0:	f107 010c 	add.w	r1, r7, #12
 801cfe4:	f107 000c 	add.w	r0, r7, #12
 801cfe8:	2308      	movs	r3, #8
 801cfea:	f7ff f973 	bl	801c2d4 <mg_uecc_vli_add>
 801cfee:	4603      	mov	r3, r0
 801cff0:	461a      	mov	r2, r3
 801cff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cff4:	4413      	add	r3, r2
 801cff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801cff8:	f107 020c 	add.w	r2, r7, #12
 801cffc:	2308      	movs	r3, #8
 801cffe:	6879      	ldr	r1, [r7, #4]
 801d000:	6878      	ldr	r0, [r7, #4]
 801d002:	f7ff f967 	bl	801c2d4 <mg_uecc_vli_add>
 801d006:	4603      	mov	r3, r0
 801d008:	461a      	mov	r2, r3
 801d00a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d00c:	4413      	add	r3, r2
 801d00e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s3 */
  tmp[0] = product[8];
 801d010:	683b      	ldr	r3, [r7, #0]
 801d012:	6a1b      	ldr	r3, [r3, #32]
 801d014:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[9];
 801d016:	683b      	ldr	r3, [r7, #0]
 801d018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d01a:	613b      	str	r3, [r7, #16]
  tmp[2] = product[10];
 801d01c:	683b      	ldr	r3, [r7, #0]
 801d01e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d020:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801d022:	2300      	movs	r3, #0
 801d024:	623b      	str	r3, [r7, #32]
 801d026:	6a3b      	ldr	r3, [r7, #32]
 801d028:	61fb      	str	r3, [r7, #28]
 801d02a:	69fb      	ldr	r3, [r7, #28]
 801d02c:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[14];
 801d02e:	683b      	ldr	r3, [r7, #0]
 801d030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d032:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[15];
 801d034:	683b      	ldr	r3, [r7, #0]
 801d036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d038:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801d03a:	f107 020c 	add.w	r2, r7, #12
 801d03e:	2308      	movs	r3, #8
 801d040:	6879      	ldr	r1, [r7, #4]
 801d042:	6878      	ldr	r0, [r7, #4]
 801d044:	f7ff f946 	bl	801c2d4 <mg_uecc_vli_add>
 801d048:	4603      	mov	r3, r0
 801d04a:	461a      	mov	r2, r3
 801d04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d04e:	4413      	add	r3, r2
 801d050:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* s4 */
  tmp[0] = product[9];
 801d052:	683b      	ldr	r3, [r7, #0]
 801d054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d056:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[10];
 801d058:	683b      	ldr	r3, [r7, #0]
 801d05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d05c:	613b      	str	r3, [r7, #16]
  tmp[2] = product[11];
 801d05e:	683b      	ldr	r3, [r7, #0]
 801d060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d062:	617b      	str	r3, [r7, #20]
  tmp[3] = product[13];
 801d064:	683b      	ldr	r3, [r7, #0]
 801d066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d068:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[14];
 801d06a:	683b      	ldr	r3, [r7, #0]
 801d06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d06e:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[15];
 801d070:	683b      	ldr	r3, [r7, #0]
 801d072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d074:	623b      	str	r3, [r7, #32]
  tmp[6] = product[13];
 801d076:	683b      	ldr	r3, [r7, #0]
 801d078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d07a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[8];
 801d07c:	683b      	ldr	r3, [r7, #0]
 801d07e:	6a1b      	ldr	r3, [r3, #32]
 801d080:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry += (int) mg_uecc_vli_add(result, result, tmp, num_words_secp256r1);
 801d082:	f107 020c 	add.w	r2, r7, #12
 801d086:	2308      	movs	r3, #8
 801d088:	6879      	ldr	r1, [r7, #4]
 801d08a:	6878      	ldr	r0, [r7, #4]
 801d08c:	f7ff f922 	bl	801c2d4 <mg_uecc_vli_add>
 801d090:	4603      	mov	r3, r0
 801d092:	461a      	mov	r2, r3
 801d094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d096:	4413      	add	r3, r2
 801d098:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d1 */
  tmp[0] = product[11];
 801d09a:	683b      	ldr	r3, [r7, #0]
 801d09c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d09e:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[12];
 801d0a0:	683b      	ldr	r3, [r7, #0]
 801d0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0a4:	613b      	str	r3, [r7, #16]
  tmp[2] = product[13];
 801d0a6:	683b      	ldr	r3, [r7, #0]
 801d0a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d0aa:	617b      	str	r3, [r7, #20]
  tmp[3] = tmp[4] = tmp[5] = 0;
 801d0ac:	2300      	movs	r3, #0
 801d0ae:	623b      	str	r3, [r7, #32]
 801d0b0:	6a3b      	ldr	r3, [r7, #32]
 801d0b2:	61fb      	str	r3, [r7, #28]
 801d0b4:	69fb      	ldr	r3, [r7, #28]
 801d0b6:	61bb      	str	r3, [r7, #24]
  tmp[6] = product[8];
 801d0b8:	683b      	ldr	r3, [r7, #0]
 801d0ba:	6a1b      	ldr	r3, [r3, #32]
 801d0bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[10];
 801d0be:	683b      	ldr	r3, [r7, #0]
 801d0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d0c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801d0c4:	f107 020c 	add.w	r2, r7, #12
 801d0c8:	2308      	movs	r3, #8
 801d0ca:	6879      	ldr	r1, [r7, #4]
 801d0cc:	6878      	ldr	r0, [r7, #4]
 801d0ce:	f7ff f94b 	bl	801c368 <mg_uecc_vli_sub>
 801d0d2:	4603      	mov	r3, r0
 801d0d4:	461a      	mov	r2, r3
 801d0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d0d8:	1a9b      	subs	r3, r3, r2
 801d0da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d2 */
  tmp[0] = product[12];
 801d0dc:	683b      	ldr	r3, [r7, #0]
 801d0de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d0e0:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[13];
 801d0e2:	683b      	ldr	r3, [r7, #0]
 801d0e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d0e6:	613b      	str	r3, [r7, #16]
  tmp[2] = product[14];
 801d0e8:	683b      	ldr	r3, [r7, #0]
 801d0ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d0ec:	617b      	str	r3, [r7, #20]
  tmp[3] = product[15];
 801d0ee:	683b      	ldr	r3, [r7, #0]
 801d0f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d0f2:	61bb      	str	r3, [r7, #24]
  tmp[4] = tmp[5] = 0;
 801d0f4:	2300      	movs	r3, #0
 801d0f6:	623b      	str	r3, [r7, #32]
 801d0f8:	6a3b      	ldr	r3, [r7, #32]
 801d0fa:	61fb      	str	r3, [r7, #28]
  tmp[6] = product[9];
 801d0fc:	683b      	ldr	r3, [r7, #0]
 801d0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d100:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[11];
 801d102:	683b      	ldr	r3, [r7, #0]
 801d104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d106:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801d108:	f107 020c 	add.w	r2, r7, #12
 801d10c:	2308      	movs	r3, #8
 801d10e:	6879      	ldr	r1, [r7, #4]
 801d110:	6878      	ldr	r0, [r7, #4]
 801d112:	f7ff f929 	bl	801c368 <mg_uecc_vli_sub>
 801d116:	4603      	mov	r3, r0
 801d118:	461a      	mov	r2, r3
 801d11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d11c:	1a9b      	subs	r3, r3, r2
 801d11e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d3 */
  tmp[0] = product[13];
 801d120:	683b      	ldr	r3, [r7, #0]
 801d122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d124:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[14];
 801d126:	683b      	ldr	r3, [r7, #0]
 801d128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d12a:	613b      	str	r3, [r7, #16]
  tmp[2] = product[15];
 801d12c:	683b      	ldr	r3, [r7, #0]
 801d12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d130:	617b      	str	r3, [r7, #20]
  tmp[3] = product[8];
 801d132:	683b      	ldr	r3, [r7, #0]
 801d134:	6a1b      	ldr	r3, [r3, #32]
 801d136:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[9];
 801d138:	683b      	ldr	r3, [r7, #0]
 801d13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d13c:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[10];
 801d13e:	683b      	ldr	r3, [r7, #0]
 801d140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d142:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801d144:	2300      	movs	r3, #0
 801d146:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[12];
 801d148:	683b      	ldr	r3, [r7, #0]
 801d14a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d14c:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801d14e:	f107 020c 	add.w	r2, r7, #12
 801d152:	2308      	movs	r3, #8
 801d154:	6879      	ldr	r1, [r7, #4]
 801d156:	6878      	ldr	r0, [r7, #4]
 801d158:	f7ff f906 	bl	801c368 <mg_uecc_vli_sub>
 801d15c:	4603      	mov	r3, r0
 801d15e:	461a      	mov	r2, r3
 801d160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d162:	1a9b      	subs	r3, r3, r2
 801d164:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* d4 */
  tmp[0] = product[14];
 801d166:	683b      	ldr	r3, [r7, #0]
 801d168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d16a:	60fb      	str	r3, [r7, #12]
  tmp[1] = product[15];
 801d16c:	683b      	ldr	r3, [r7, #0]
 801d16e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d170:	613b      	str	r3, [r7, #16]
  tmp[2] = 0;
 801d172:	2300      	movs	r3, #0
 801d174:	617b      	str	r3, [r7, #20]
  tmp[3] = product[9];
 801d176:	683b      	ldr	r3, [r7, #0]
 801d178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d17a:	61bb      	str	r3, [r7, #24]
  tmp[4] = product[10];
 801d17c:	683b      	ldr	r3, [r7, #0]
 801d17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d180:	61fb      	str	r3, [r7, #28]
  tmp[5] = product[11];
 801d182:	683b      	ldr	r3, [r7, #0]
 801d184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d186:	623b      	str	r3, [r7, #32]
  tmp[6] = 0;
 801d188:	2300      	movs	r3, #0
 801d18a:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp[7] = product[13];
 801d18c:	683b      	ldr	r3, [r7, #0]
 801d18e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d190:	62bb      	str	r3, [r7, #40]	@ 0x28
  carry -= (int) mg_uecc_vli_sub(result, result, tmp, num_words_secp256r1);
 801d192:	f107 020c 	add.w	r2, r7, #12
 801d196:	2308      	movs	r3, #8
 801d198:	6879      	ldr	r1, [r7, #4]
 801d19a:	6878      	ldr	r0, [r7, #4]
 801d19c:	f7ff f8e4 	bl	801c368 <mg_uecc_vli_sub>
 801d1a0:	4603      	mov	r3, r0
 801d1a2:	461a      	mov	r2, r3
 801d1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1a6:	1a9b      	subs	r3, r3, r2
 801d1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (carry < 0) {
 801d1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	da19      	bge.n	801d1e4 <vli_mmod_fast_secp256r1+0x290>
    do {
      carry += (int) mg_uecc_vli_add(result, result, curve_secp256r1.p,
 801d1b0:	2308      	movs	r3, #8
 801d1b2:	4a14      	ldr	r2, [pc, #80]	@ (801d204 <vli_mmod_fast_secp256r1+0x2b0>)
 801d1b4:	6879      	ldr	r1, [r7, #4]
 801d1b6:	6878      	ldr	r0, [r7, #4]
 801d1b8:	f7ff f88c 	bl	801c2d4 <mg_uecc_vli_add>
 801d1bc:	4603      	mov	r3, r0
 801d1be:	461a      	mov	r2, r3
 801d1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1c2:	4413      	add	r3, r2
 801d1c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                     num_words_secp256r1);
    } while (carry < 0);
 801d1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	dbf1      	blt.n	801d1b0 <vli_mmod_fast_secp256r1+0x25c>
                                           num_words_secp256r1) != 1) {
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
                                     num_words_secp256r1);
    }
  }
}
 801d1cc:	e015      	b.n	801d1fa <vli_mmod_fast_secp256r1+0x2a6>
      carry -= (int) mg_uecc_vli_sub(result, result, curve_secp256r1.p,
 801d1ce:	2308      	movs	r3, #8
 801d1d0:	4a0c      	ldr	r2, [pc, #48]	@ (801d204 <vli_mmod_fast_secp256r1+0x2b0>)
 801d1d2:	6879      	ldr	r1, [r7, #4]
 801d1d4:	6878      	ldr	r0, [r7, #4]
 801d1d6:	f7ff f8c7 	bl	801c368 <mg_uecc_vli_sub>
 801d1da:	4603      	mov	r3, r0
 801d1dc:	461a      	mov	r2, r3
 801d1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1e0:	1a9b      	subs	r3, r3, r2
 801d1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (carry || mg_uecc_vli_cmp_unsafe(curve_secp256r1.p, result,
 801d1e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801d1e6:	2b00      	cmp	r3, #0
 801d1e8:	d1f1      	bne.n	801d1ce <vli_mmod_fast_secp256r1+0x27a>
 801d1ea:	2208      	movs	r2, #8
 801d1ec:	6879      	ldr	r1, [r7, #4]
 801d1ee:	4805      	ldr	r0, [pc, #20]	@ (801d204 <vli_mmod_fast_secp256r1+0x2b0>)
 801d1f0:	f7fe ffa7 	bl	801c142 <mg_uecc_vli_cmp_unsafe>
 801d1f4:	4603      	mov	r3, r0
 801d1f6:	2b01      	cmp	r3, #1
 801d1f8:	d1e9      	bne.n	801d1ce <vli_mmod_fast_secp256r1+0x27a>
}
 801d1fa:	bf00      	nop
 801d1fc:	3730      	adds	r7, #48	@ 0x30
 801d1fe:	46bd      	mov	sp, r7
 801d200:	bd80      	pop	{r7, pc}
 801d202:	bf00      	nop
 801d204:	08027f1c 	.word	0x08027f1c

0801d208 <apply_z>:
coordinates. From http://eprint.iacr.org/2011/338.pdf
*/

/* Modify (x1, y1) => (x1 * z^2, y1 * z^3) */
static void apply_z(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                    const mg_uecc_word_t *const Z, MG_UECC_Curve curve) {
 801d208:	b580      	push	{r7, lr}
 801d20a:	b08c      	sub	sp, #48	@ 0x30
 801d20c:	af00      	add	r7, sp, #0
 801d20e:	60f8      	str	r0, [r7, #12]
 801d210:	60b9      	str	r1, [r7, #8]
 801d212:	607a      	str	r2, [r7, #4]
 801d214:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t t1[MG_UECC_MAX_WORDS];

  mg_uecc_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
 801d216:	f107 0310 	add.w	r3, r7, #16
 801d21a:	683a      	ldr	r2, [r7, #0]
 801d21c:	6879      	ldr	r1, [r7, #4]
 801d21e:	4618      	mov	r0, r3
 801d220:	f7ff fbad 	bl	801c97e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
 801d224:	f107 0210 	add.w	r2, r7, #16
 801d228:	683b      	ldr	r3, [r7, #0]
 801d22a:	68f9      	ldr	r1, [r7, #12]
 801d22c:	68f8      	ldr	r0, [r7, #12]
 801d22e:	f7ff fb8a 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
 801d232:	f107 0110 	add.w	r1, r7, #16
 801d236:	f107 0010 	add.w	r0, r7, #16
 801d23a:	683b      	ldr	r3, [r7, #0]
 801d23c:	687a      	ldr	r2, [r7, #4]
 801d23e:	f7ff fb82 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
 801d242:	f107 0210 	add.w	r2, r7, #16
 801d246:	683b      	ldr	r3, [r7, #0]
 801d248:	68b9      	ldr	r1, [r7, #8]
 801d24a:	68b8      	ldr	r0, [r7, #8]
 801d24c:	f7ff fb7b 	bl	801c946 <mg_uecc_vli_modMult_fast>
}
 801d250:	bf00      	nop
 801d252:	3730      	adds	r7, #48	@ 0x30
 801d254:	46bd      	mov	sp, r7
 801d256:	bd80      	pop	{r7, pc}

0801d258 <XYcZ_initial_double>:

/* P = (x1, y1) => 2P, (x2, y2) => P' */
static void XYcZ_initial_double(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                                mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                                const mg_uecc_word_t *const initial_Z,
                                MG_UECC_Curve curve) {
 801d258:	b590      	push	{r4, r7, lr}
 801d25a:	b08f      	sub	sp, #60	@ 0x3c
 801d25c:	af00      	add	r7, sp, #0
 801d25e:	60f8      	str	r0, [r7, #12]
 801d260:	60b9      	str	r1, [r7, #8]
 801d262:	607a      	str	r2, [r7, #4]
 801d264:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801d266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d268:	781b      	ldrb	r3, [r3, #0]
 801d26a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (initial_Z) {
 801d26e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801d270:	2b00      	cmp	r3, #0
 801d272:	d008      	beq.n	801d286 <XYcZ_initial_double+0x2e>
    mg_uecc_vli_set(z, initial_Z, num_words);
 801d274:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801d278:	f107 0314 	add.w	r3, r7, #20
 801d27c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801d27e:	4618      	mov	r0, r3
 801d280:	f7fe ff38 	bl	801c0f4 <mg_uecc_vli_set>
 801d284:	e009      	b.n	801d29a <XYcZ_initial_double+0x42>
  } else {
    mg_uecc_vli_clear(z, num_words);
 801d286:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801d28a:	f107 0314 	add.w	r3, r7, #20
 801d28e:	4611      	mov	r1, r2
 801d290:	4618      	mov	r0, r3
 801d292:	f7fe fe6b 	bl	801bf6c <mg_uecc_vli_clear>
    z[0] = 1;
 801d296:	2301      	movs	r3, #1
 801d298:	617b      	str	r3, [r7, #20]
  }

  mg_uecc_vli_set(X2, X1, num_words);
 801d29a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d29e:	461a      	mov	r2, r3
 801d2a0:	68f9      	ldr	r1, [r7, #12]
 801d2a2:	6878      	ldr	r0, [r7, #4]
 801d2a4:	f7fe ff26 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(Y2, Y1, num_words);
 801d2a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d2ac:	461a      	mov	r2, r3
 801d2ae:	68b9      	ldr	r1, [r7, #8]
 801d2b0:	6838      	ldr	r0, [r7, #0]
 801d2b2:	f7fe ff1f 	bl	801c0f4 <mg_uecc_vli_set>

  apply_z(X1, Y1, z, curve);
 801d2b6:	f107 0214 	add.w	r2, r7, #20
 801d2ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d2bc:	68b9      	ldr	r1, [r7, #8]
 801d2be:	68f8      	ldr	r0, [r7, #12]
 801d2c0:	f7ff ffa2 	bl	801d208 <apply_z>
  curve->double_jacobian(X1, Y1, z, curve);
 801d2c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d2c6:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801d2ca:	f107 0214 	add.w	r2, r7, #20
 801d2ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d2d0:	68b9      	ldr	r1, [r7, #8]
 801d2d2:	68f8      	ldr	r0, [r7, #12]
 801d2d4:	47a0      	blx	r4
  apply_z(X2, Y2, z, curve);
 801d2d6:	f107 0214 	add.w	r2, r7, #20
 801d2da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801d2dc:	6839      	ldr	r1, [r7, #0]
 801d2de:	6878      	ldr	r0, [r7, #4]
 801d2e0:	f7ff ff92 	bl	801d208 <apply_z>
}
 801d2e4:	bf00      	nop
 801d2e6:	373c      	adds	r7, #60	@ 0x3c
 801d2e8:	46bd      	mov	sp, r7
 801d2ea:	bd90      	pop	{r4, r7, pc}

0801d2ec <XYcZ_add>:
/* Input P = (x1, y1, Z), Q = (x2, y2, Z)
   Output P' = (x1', y1', Z3), P + Q = (x3, y3, Z3)
   or P => P', Q => P + Q
*/
static void XYcZ_add(mg_uecc_word_t *X1, mg_uecc_word_t *Y1, mg_uecc_word_t *X2,
                     mg_uecc_word_t *Y2, MG_UECC_Curve curve) {
 801d2ec:	b580      	push	{r7, lr}
 801d2ee:	b090      	sub	sp, #64	@ 0x40
 801d2f0:	af02      	add	r7, sp, #8
 801d2f2:	60f8      	str	r0, [r7, #12]
 801d2f4:	60b9      	str	r1, [r7, #8]
 801d2f6:	607a      	str	r2, [r7, #4]
 801d2f8:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801d2fa:	f107 0314 	add.w	r3, r7, #20
 801d2fe:	2220      	movs	r2, #32
 801d300:	2100      	movs	r1, #0
 801d302:	4618      	mov	r0, r3
 801d304:	f006 fa4b 	bl	802379e <memset>
  wordcount_t num_words = curve->num_words;
 801d308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d30a:	781b      	ldrb	r3, [r3, #0]
 801d30c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801d310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d312:	1d1a      	adds	r2, r3, #4
 801d314:	f107 0014 	add.w	r0, r7, #20
 801d318:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d31c:	9300      	str	r3, [sp, #0]
 801d31e:	4613      	mov	r3, r2
 801d320:	68fa      	ldr	r2, [r7, #12]
 801d322:	6879      	ldr	r1, [r7, #4]
 801d324:	f7ff f99b 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801d328:	f107 0114 	add.w	r1, r7, #20
 801d32c:	f107 0314 	add.w	r3, r7, #20
 801d330:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801d332:	4618      	mov	r0, r3
 801d334:	f7ff fb23 	bl	801c97e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801d338:	f107 0214 	add.w	r2, r7, #20
 801d33c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d33e:	68f9      	ldr	r1, [r7, #12]
 801d340:	68f8      	ldr	r0, [r7, #12]
 801d342:	f7ff fb00 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801d346:	f107 0214 	add.w	r2, r7, #20
 801d34a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d34c:	6879      	ldr	r1, [r7, #4]
 801d34e:	6878      	ldr	r0, [r7, #4]
 801d350:	f7ff faf9 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801d354:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d356:	1d1a      	adds	r2, r3, #4
 801d358:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d35c:	9300      	str	r3, [sp, #0]
 801d35e:	4613      	mov	r3, r2
 801d360:	68ba      	ldr	r2, [r7, #8]
 801d362:	6839      	ldr	r1, [r7, #0]
 801d364:	6838      	ldr	r0, [r7, #0]
 801d366:	f7ff f97a 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
 801d36a:	f107 0314 	add.w	r3, r7, #20
 801d36e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801d370:	6839      	ldr	r1, [r7, #0]
 801d372:	4618      	mov	r0, r3
 801d374:	f7ff fb03 	bl	801c97e <mg_uecc_vli_modSquare_fast>

  mg_uecc_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
 801d378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d37a:	1d1a      	adds	r2, r3, #4
 801d37c:	f107 0114 	add.w	r1, r7, #20
 801d380:	f107 0014 	add.w	r0, r7, #20
 801d384:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d388:	9300      	str	r3, [sp, #0]
 801d38a:	4613      	mov	r3, r2
 801d38c:	68fa      	ldr	r2, [r7, #12]
 801d38e:	f7ff f966 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
 801d392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d394:	1d1a      	adds	r2, r3, #4
 801d396:	f107 0114 	add.w	r1, r7, #20
 801d39a:	f107 0014 	add.w	r0, r7, #20
 801d39e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d3a2:	9300      	str	r3, [sp, #0]
 801d3a4:	4613      	mov	r3, r2
 801d3a6:	687a      	ldr	r2, [r7, #4]
 801d3a8:	f7ff f959 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
 801d3ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d3ae:	1d1a      	adds	r2, r3, #4
 801d3b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d3b4:	9300      	str	r3, [sp, #0]
 801d3b6:	4613      	mov	r3, r2
 801d3b8:	68fa      	ldr	r2, [r7, #12]
 801d3ba:	6879      	ldr	r1, [r7, #4]
 801d3bc:	6878      	ldr	r0, [r7, #4]
 801d3be:	f7ff f94e 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, X2, curve);         /* t2 = y1*(C - B) */
 801d3c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d3c4:	687a      	ldr	r2, [r7, #4]
 801d3c6:	68b9      	ldr	r1, [r7, #8]
 801d3c8:	68b8      	ldr	r0, [r7, #8]
 801d3ca:	f7ff fabc 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
 801d3ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d3d0:	1d19      	adds	r1, r3, #4
 801d3d2:	f107 0214 	add.w	r2, r7, #20
 801d3d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d3da:	9300      	str	r3, [sp, #0]
 801d3dc:	460b      	mov	r3, r1
 801d3de:	68f9      	ldr	r1, [r7, #12]
 801d3e0:	6878      	ldr	r0, [r7, #4]
 801d3e2:	f7ff f93c 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
 801d3e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d3e8:	687a      	ldr	r2, [r7, #4]
 801d3ea:	6839      	ldr	r1, [r7, #0]
 801d3ec:	6838      	ldr	r0, [r7, #0]
 801d3ee:	f7ff faaa 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
 801d3f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d3f4:	1d1a      	adds	r2, r3, #4
 801d3f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801d3fa:	9300      	str	r3, [sp, #0]
 801d3fc:	4613      	mov	r3, r2
 801d3fe:	68ba      	ldr	r2, [r7, #8]
 801d400:	6839      	ldr	r1, [r7, #0]
 801d402:	6838      	ldr	r0, [r7, #0]
 801d404:	f7ff f92b 	bl	801c65e <mg_uecc_vli_modSub>

  mg_uecc_vli_set(X2, t5, num_words);
 801d408:	f997 2037 	ldrsb.w	r2, [r7, #55]	@ 0x37
 801d40c:	f107 0314 	add.w	r3, r7, #20
 801d410:	4619      	mov	r1, r3
 801d412:	6878      	ldr	r0, [r7, #4]
 801d414:	f7fe fe6e 	bl	801c0f4 <mg_uecc_vli_set>
}
 801d418:	bf00      	nop
 801d41a:	3738      	adds	r7, #56	@ 0x38
 801d41c:	46bd      	mov	sp, r7
 801d41e:	bd80      	pop	{r7, pc}

0801d420 <XYcZ_addC>:
   Output P + Q = (x3, y3, Z3), P - Q = (x3', y3', Z3)
   or P => P - Q, Q => P + Q
*/
static void XYcZ_addC(mg_uecc_word_t *X1, mg_uecc_word_t *Y1,
                      mg_uecc_word_t *X2, mg_uecc_word_t *Y2,
                      MG_UECC_Curve curve) {
 801d420:	b590      	push	{r4, r7, lr}
 801d422:	b0a1      	sub	sp, #132	@ 0x84
 801d424:	af02      	add	r7, sp, #8
 801d426:	60f8      	str	r0, [r7, #12]
 801d428:	60b9      	str	r1, [r7, #8]
 801d42a:	607a      	str	r2, [r7, #4]
 801d42c:	603b      	str	r3, [r7, #0]
  /* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
  mg_uecc_word_t t5[MG_UECC_MAX_WORDS] = {0};
 801d42e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801d432:	2220      	movs	r2, #32
 801d434:	2100      	movs	r1, #0
 801d436:	4618      	mov	r0, r3
 801d438:	f006 f9b1 	bl	802379e <memset>
  mg_uecc_word_t t6[MG_UECC_MAX_WORDS];
  mg_uecc_word_t t7[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801d43c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d440:	781b      	ldrb	r3, [r3, #0]
 801d442:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

  mg_uecc_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
 801d446:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d44a:	1d1a      	adds	r2, r3, #4
 801d44c:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801d450:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d454:	9300      	str	r3, [sp, #0]
 801d456:	4613      	mov	r3, r2
 801d458:	68fa      	ldr	r2, [r7, #12]
 801d45a:	6879      	ldr	r1, [r7, #4]
 801d45c:	f7ff f8ff 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modSquare_fast(t5, t5, curve);   /* t5 = (x2 - x1)^2 = A */
 801d460:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801d464:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801d468:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801d46c:	4618      	mov	r0, r3
 801d46e:	f7ff fa86 	bl	801c97e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
 801d472:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801d476:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d47a:	68f9      	ldr	r1, [r7, #12]
 801d47c:	68f8      	ldr	r0, [r7, #12]
 801d47e:	f7ff fa62 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
 801d482:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801d486:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d48a:	6879      	ldr	r1, [r7, #4]
 801d48c:	6878      	ldr	r0, [r7, #4]
 801d48e:	f7ff fa5a 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
 801d492:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d496:	1d1a      	adds	r2, r3, #4
 801d498:	f107 0054 	add.w	r0, r7, #84	@ 0x54
 801d49c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d4a0:	9300      	str	r3, [sp, #0]
 801d4a2:	4613      	mov	r3, r2
 801d4a4:	68ba      	ldr	r2, [r7, #8]
 801d4a6:	6839      	ldr	r1, [r7, #0]
 801d4a8:	f7ff f8b2 	bl	801c610 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
 801d4ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d4b0:	1d1a      	adds	r2, r3, #4
 801d4b2:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d4b6:	9300      	str	r3, [sp, #0]
 801d4b8:	4613      	mov	r3, r2
 801d4ba:	68ba      	ldr	r2, [r7, #8]
 801d4bc:	6839      	ldr	r1, [r7, #0]
 801d4be:	6838      	ldr	r0, [r7, #0]
 801d4c0:	f7ff f8cd 	bl	801c65e <mg_uecc_vli_modSub>

  mg_uecc_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
 801d4c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d4c8:	1d1a      	adds	r2, r3, #4
 801d4ca:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801d4ce:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d4d2:	9300      	str	r3, [sp, #0]
 801d4d4:	4613      	mov	r3, r2
 801d4d6:	68fa      	ldr	r2, [r7, #12]
 801d4d8:	6879      	ldr	r1, [r7, #4]
 801d4da:	f7ff f8c0 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
 801d4de:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801d4e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d4e6:	68b9      	ldr	r1, [r7, #8]
 801d4e8:	68b8      	ldr	r0, [r7, #8]
 801d4ea:	f7ff fa2c 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
 801d4ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d4f2:	1d1a      	adds	r2, r3, #4
 801d4f4:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801d4f8:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d4fc:	9300      	str	r3, [sp, #0]
 801d4fe:	4613      	mov	r3, r2
 801d500:	687a      	ldr	r2, [r7, #4]
 801d502:	68f9      	ldr	r1, [r7, #12]
 801d504:	f7ff f884 	bl	801c610 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
 801d508:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801d50c:	6839      	ldr	r1, [r7, #0]
 801d50e:	6878      	ldr	r0, [r7, #4]
 801d510:	f7ff fa35 	bl	801c97e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(X2, X2, t6, curve->p,
 801d514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d518:	1d19      	adds	r1, r3, #4
 801d51a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801d51e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d522:	9300      	str	r3, [sp, #0]
 801d524:	460b      	mov	r3, r1
 801d526:	6879      	ldr	r1, [r7, #4]
 801d528:	6878      	ldr	r0, [r7, #4]
 801d52a:	f7ff f898 	bl	801c65e <mg_uecc_vli_modSub>
                     num_words); /* t3 = D - (B + C) = x3 */

  mg_uecc_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
 801d52e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d532:	1d1a      	adds	r2, r3, #4
 801d534:	f107 0014 	add.w	r0, r7, #20
 801d538:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d53c:	9300      	str	r3, [sp, #0]
 801d53e:	4613      	mov	r3, r2
 801d540:	687a      	ldr	r2, [r7, #4]
 801d542:	68f9      	ldr	r1, [r7, #12]
 801d544:	f7ff f88b 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
 801d548:	f107 0214 	add.w	r2, r7, #20
 801d54c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d550:	6839      	ldr	r1, [r7, #0]
 801d552:	6838      	ldr	r0, [r7, #0]
 801d554:	f7ff f9f7 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y2, Y2, Y1, curve->p,
 801d558:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d55c:	1d1a      	adds	r2, r3, #4
 801d55e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d562:	9300      	str	r3, [sp, #0]
 801d564:	4613      	mov	r3, r2
 801d566:	68ba      	ldr	r2, [r7, #8]
 801d568:	6839      	ldr	r1, [r7, #0]
 801d56a:	6838      	ldr	r0, [r7, #0]
 801d56c:	f7ff f877 	bl	801c65e <mg_uecc_vli_modSub>
                     num_words); /* t4 = (y2 - y1)*(B - x3) - E = y3 */

  mg_uecc_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
 801d570:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 801d574:	f107 0314 	add.w	r3, r7, #20
 801d578:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801d57c:	4618      	mov	r0, r3
 801d57e:	f7ff f9fe 	bl	801c97e <mg_uecc_vli_modSquare_fast>
  mg_uecc_vli_modSub(t7, t7, t6, curve->p,
 801d582:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d586:	1d1c      	adds	r4, r3, #4
 801d588:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801d58c:	f107 0114 	add.w	r1, r7, #20
 801d590:	f107 0014 	add.w	r0, r7, #20
 801d594:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d598:	9300      	str	r3, [sp, #0]
 801d59a:	4623      	mov	r3, r4
 801d59c:	f7ff f85f 	bl	801c65e <mg_uecc_vli_modSub>
                     num_words); /* t7 = F - (B + C) = x3' */
  mg_uecc_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
 801d5a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d5a4:	1d1a      	adds	r2, r3, #4
 801d5a6:	f107 0114 	add.w	r1, r7, #20
 801d5aa:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801d5ae:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d5b2:	9300      	str	r3, [sp, #0]
 801d5b4:	4613      	mov	r3, r2
 801d5b6:	68fa      	ldr	r2, [r7, #12]
 801d5b8:	f7ff f851 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
 801d5bc:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 801d5c0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801d5c4:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801d5c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d5cc:	f7ff f9bb 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modSub(Y1, t6, Y1, curve->p,
 801d5d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801d5d4:	1d1a      	adds	r2, r3, #4
 801d5d6:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 801d5da:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 801d5de:	9300      	str	r3, [sp, #0]
 801d5e0:	4613      	mov	r3, r2
 801d5e2:	68ba      	ldr	r2, [r7, #8]
 801d5e4:	68b8      	ldr	r0, [r7, #8]
 801d5e6:	f7ff f83a 	bl	801c65e <mg_uecc_vli_modSub>
                     num_words); /* t2 = (y2+y1)*(x3' - B) - E = y3' */

  mg_uecc_vli_set(X1, t7, num_words);
 801d5ea:	f997 2077 	ldrsb.w	r2, [r7, #119]	@ 0x77
 801d5ee:	f107 0314 	add.w	r3, r7, #20
 801d5f2:	4619      	mov	r1, r3
 801d5f4:	68f8      	ldr	r0, [r7, #12]
 801d5f6:	f7fe fd7d 	bl	801c0f4 <mg_uecc_vli_set>
}
 801d5fa:	bf00      	nop
 801d5fc:	377c      	adds	r7, #124	@ 0x7c
 801d5fe:	46bd      	mov	sp, r7
 801d600:	bd90      	pop	{r4, r7, pc}

0801d602 <EccPoint_mult>:

/* result may overlap point. */
static void EccPoint_mult(mg_uecc_word_t *result, const mg_uecc_word_t *point,
                          const mg_uecc_word_t *scalar,
                          const mg_uecc_word_t *initial_Z, bitcount_t num_bits,
                          MG_UECC_Curve curve) {
 801d602:	b590      	push	{r4, r7, lr}
 801d604:	b0b1      	sub	sp, #196	@ 0xc4
 801d606:	af02      	add	r7, sp, #8
 801d608:	60f8      	str	r0, [r7, #12]
 801d60a:	60b9      	str	r1, [r7, #8]
 801d60c:	607a      	str	r2, [r7, #4]
 801d60e:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t Rx[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t Ry[2][MG_UECC_MAX_WORDS];
  mg_uecc_word_t z[MG_UECC_MAX_WORDS];
  bitcount_t i;
  mg_uecc_word_t nb;
  wordcount_t num_words = curve->num_words;
 801d610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d614:	781b      	ldrb	r3, [r3, #0]
 801d616:	f887 30b5 	strb.w	r3, [r7, #181]	@ 0xb5

  mg_uecc_vli_set(Rx[1], point, num_words);
 801d61a:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801d61e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d622:	3320      	adds	r3, #32
 801d624:	68b9      	ldr	r1, [r7, #8]
 801d626:	4618      	mov	r0, r3
 801d628:	f7fe fd64 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(Ry[1], point + num_words, num_words);
 801d62c:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d630:	009b      	lsls	r3, r3, #2
 801d632:	68ba      	ldr	r2, [r7, #8]
 801d634:	18d1      	adds	r1, r2, r3
 801d636:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801d63a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801d63e:	3320      	adds	r3, #32
 801d640:	4618      	mov	r0, r3
 801d642:	f7fe fd57 	bl	801c0f4 <mg_uecc_vli_set>

  XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);
 801d646:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 801d64a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d64e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801d652:	f103 0120 	add.w	r1, r3, #32
 801d656:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d65a:	f103 0020 	add.w	r0, r3, #32
 801d65e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d662:	9301      	str	r3, [sp, #4]
 801d664:	683b      	ldr	r3, [r7, #0]
 801d666:	9300      	str	r3, [sp, #0]
 801d668:	4623      	mov	r3, r4
 801d66a:	f7ff fdf5 	bl	801d258 <XYcZ_initial_double>

  for (i = num_bits - 2; i > 0; --i) {
 801d66e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 801d672:	3b02      	subs	r3, #2
 801d674:	b29b      	uxth	r3, r3
 801d676:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801d67a:	e059      	b.n	801d730 <EccPoint_mult+0x12e>
    nb = !mg_uecc_vli_testBit(scalar, i);
 801d67c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801d680:	4619      	mov	r1, r3
 801d682:	6878      	ldr	r0, [r7, #4]
 801d684:	f7fe fcbd 	bl	801c002 <mg_uecc_vli_testBit>
 801d688:	4603      	mov	r3, r0
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	bf0c      	ite	eq
 801d68e:	2301      	moveq	r3, #1
 801d690:	2300      	movne	r3, #0
 801d692:	b2db      	uxtb	r3, r3
 801d694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801d698:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d69c:	f1c3 0301 	rsb	r3, r3, #1
 801d6a0:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d6a4:	015b      	lsls	r3, r3, #5
 801d6a6:	18d0      	adds	r0, r2, r3
 801d6a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d6ac:	f1c3 0301 	rsb	r3, r3, #1
 801d6b0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d6b4:	015b      	lsls	r3, r3, #5
 801d6b6:	18d1      	adds	r1, r2, r3
 801d6b8:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d6bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d6c0:	015b      	lsls	r3, r3, #5
 801d6c2:	18d4      	adds	r4, r2, r3
 801d6c4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d6c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d6cc:	015b      	lsls	r3, r3, #5
 801d6ce:	441a      	add	r2, r3
 801d6d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d6d4:	9300      	str	r3, [sp, #0]
 801d6d6:	4613      	mov	r3, r2
 801d6d8:	4622      	mov	r2, r4
 801d6da:	f7ff fea1 	bl	801d420 <XYcZ_addC>
    XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801d6de:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d6e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d6e6:	015b      	lsls	r3, r3, #5
 801d6e8:	18d0      	adds	r0, r2, r3
 801d6ea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d6ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d6f2:	015b      	lsls	r3, r3, #5
 801d6f4:	18d1      	adds	r1, r2, r3
 801d6f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d6fa:	f1c3 0301 	rsb	r3, r3, #1
 801d6fe:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d702:	015b      	lsls	r3, r3, #5
 801d704:	18d4      	adds	r4, r2, r3
 801d706:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d70a:	f1c3 0301 	rsb	r3, r3, #1
 801d70e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d712:	015b      	lsls	r3, r3, #5
 801d714:	441a      	add	r2, r3
 801d716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d71a:	9300      	str	r3, [sp, #0]
 801d71c:	4613      	mov	r3, r2
 801d71e:	4622      	mov	r2, r4
 801d720:	f7ff fde4 	bl	801d2ec <XYcZ_add>
  for (i = num_bits - 2; i > 0; --i) {
 801d724:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 801d728:	3b01      	subs	r3, #1
 801d72a:	b29b      	uxth	r3, r3
 801d72c:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 801d730:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	@ 0xb6
 801d734:	2b00      	cmp	r3, #0
 801d736:	dca1      	bgt.n	801d67c <EccPoint_mult+0x7a>
  }

  nb = !mg_uecc_vli_testBit(scalar, 0);
 801d738:	2100      	movs	r1, #0
 801d73a:	6878      	ldr	r0, [r7, #4]
 801d73c:	f7fe fc61 	bl	801c002 <mg_uecc_vli_testBit>
 801d740:	4603      	mov	r3, r0
 801d742:	2b00      	cmp	r3, #0
 801d744:	bf0c      	ite	eq
 801d746:	2301      	moveq	r3, #1
 801d748:	2300      	movne	r3, #0
 801d74a:	b2db      	uxtb	r3, r3
 801d74c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
 801d750:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d754:	f1c3 0301 	rsb	r3, r3, #1
 801d758:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d75c:	015b      	lsls	r3, r3, #5
 801d75e:	18d0      	adds	r0, r2, r3
 801d760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d764:	f1c3 0301 	rsb	r3, r3, #1
 801d768:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d76c:	015b      	lsls	r3, r3, #5
 801d76e:	18d1      	adds	r1, r2, r3
 801d770:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d778:	015b      	lsls	r3, r3, #5
 801d77a:	18d4      	adds	r4, r2, r3
 801d77c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d780:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d784:	015b      	lsls	r3, r3, #5
 801d786:	441a      	add	r2, r3
 801d788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d78c:	9300      	str	r3, [sp, #0]
 801d78e:	4613      	mov	r3, r2
 801d790:	4622      	mov	r2, r4
 801d792:	f7ff fe45 	bl	801d420 <XYcZ_addC>

  /* Find final 1/Z value. */
  mg_uecc_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
 801d796:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d79a:	1d1c      	adds	r4, r3, #4
 801d79c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d7a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d7a4:	f103 0120 	add.w	r1, r3, #32
 801d7a8:	f107 0010 	add.w	r0, r7, #16
 801d7ac:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d7b0:	9300      	str	r3, [sp, #0]
 801d7b2:	4623      	mov	r3, r4
 801d7b4:	f7fe ff53 	bl	801c65e <mg_uecc_vli_modSub>
  mg_uecc_vli_modMult_fast(z, z, Ry[1 - nb], curve);        /* Yb * (X1 - X0) */
 801d7b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d7bc:	f1c3 0301 	rsb	r3, r3, #1
 801d7c0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d7c4:	015b      	lsls	r3, r3, #5
 801d7c6:	441a      	add	r2, r3
 801d7c8:	f107 0110 	add.w	r1, r7, #16
 801d7cc:	f107 0010 	add.w	r0, r7, #16
 801d7d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d7d4:	f7ff f8b7 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, point, curve);  /* xP * Yb * (X1 - X0) */
 801d7d8:	f107 0110 	add.w	r1, r7, #16
 801d7dc:	f107 0010 	add.w	r0, r7, #16
 801d7e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d7e4:	68ba      	ldr	r2, [r7, #8]
 801d7e6:	f7ff f8ae 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0)) */
 801d7ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d7ee:	1d1a      	adds	r2, r3, #4
 801d7f0:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d7f4:	f107 0110 	add.w	r1, r7, #16
 801d7f8:	f107 0010 	add.w	r0, r7, #16
 801d7fc:	f7ff f907 	bl	801ca0e <mg_uecc_vli_modInv>
  /* yP / (xP * Yb * (X1 - X0)) */
  mg_uecc_vli_modMult_fast(z, z, point + num_words, curve);
 801d800:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d804:	009b      	lsls	r3, r3, #2
 801d806:	68ba      	ldr	r2, [r7, #8]
 801d808:	441a      	add	r2, r3
 801d80a:	f107 0110 	add.w	r1, r7, #16
 801d80e:	f107 0010 	add.w	r0, r7, #16
 801d812:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d816:	f7ff f896 	bl	801c946 <mg_uecc_vli_modMult_fast>
  mg_uecc_vli_modMult_fast(z, z, Rx[1 - nb],
 801d81a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d81e:	f1c3 0301 	rsb	r3, r3, #1
 801d822:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d826:	015b      	lsls	r3, r3, #5
 801d828:	441a      	add	r2, r3
 801d82a:	f107 0110 	add.w	r1, r7, #16
 801d82e:	f107 0010 	add.w	r0, r7, #16
 801d832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d836:	f7ff f886 	bl	801c946 <mg_uecc_vli_modMult_fast>
                           curve); /* Xb * yP / (xP * Yb * (X1 - X0)) */
  /* End 1/Z calculation */

  XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
 801d83a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d83e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d842:	015b      	lsls	r3, r3, #5
 801d844:	18d0      	adds	r0, r2, r3
 801d846:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d84a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d84e:	015b      	lsls	r3, r3, #5
 801d850:	18d1      	adds	r1, r2, r3
 801d852:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d856:	f1c3 0301 	rsb	r3, r3, #1
 801d85a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801d85e:	015b      	lsls	r3, r3, #5
 801d860:	18d4      	adds	r4, r2, r3
 801d862:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801d866:	f1c3 0301 	rsb	r3, r3, #1
 801d86a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 801d86e:	015b      	lsls	r3, r3, #5
 801d870:	441a      	add	r2, r3
 801d872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d876:	9300      	str	r3, [sp, #0]
 801d878:	4613      	mov	r3, r2
 801d87a:	4622      	mov	r2, r4
 801d87c:	f7ff fd36 	bl	801d2ec <XYcZ_add>
  apply_z(Rx[0], Ry[0], z, curve);
 801d880:	f107 0210 	add.w	r2, r7, #16
 801d884:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d888:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 801d88c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801d890:	f7ff fcba 	bl	801d208 <apply_z>

  mg_uecc_vli_set(result, Rx[0], num_words);
 801d894:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801d898:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801d89c:	4619      	mov	r1, r3
 801d89e:	68f8      	ldr	r0, [r7, #12]
 801d8a0:	f7fe fc28 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(result + num_words, Ry[0], num_words);
 801d8a4:	f997 30b5 	ldrsb.w	r3, [r7, #181]	@ 0xb5
 801d8a8:	009b      	lsls	r3, r3, #2
 801d8aa:	68fa      	ldr	r2, [r7, #12]
 801d8ac:	4413      	add	r3, r2
 801d8ae:	f997 20b5 	ldrsb.w	r2, [r7, #181]	@ 0xb5
 801d8b2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	f7fe fc1c 	bl	801c0f4 <mg_uecc_vli_set>
}
 801d8bc:	bf00      	nop
 801d8be:	37bc      	adds	r7, #188	@ 0xbc
 801d8c0:	46bd      	mov	sp, r7
 801d8c2:	bd90      	pop	{r4, r7, pc}

0801d8c4 <regularize_k>:

static mg_uecc_word_t regularize_k(const mg_uecc_word_t *const k,
                                   mg_uecc_word_t *k0, mg_uecc_word_t *k1,
                                   MG_UECC_Curve curve) {
 801d8c4:	b580      	push	{r7, lr}
 801d8c6:	b086      	sub	sp, #24
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	60f8      	str	r0, [r7, #12]
 801d8cc:	60b9      	str	r1, [r7, #8]
 801d8ce:	607a      	str	r2, [r7, #4]
 801d8d0:	603b      	str	r3, [r7, #0]
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801d8d2:	683b      	ldr	r3, [r7, #0]
 801d8d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801d8d8:	331f      	adds	r3, #31
 801d8da:	2b00      	cmp	r3, #0
 801d8dc:	da00      	bge.n	801d8e0 <regularize_k+0x1c>
 801d8de:	331f      	adds	r3, #31
 801d8e0:	115b      	asrs	r3, r3, #5
 801d8e2:	75fb      	strb	r3, [r7, #23]
  bitcount_t num_n_bits = curve->num_n_bits;
 801d8e4:	683b      	ldr	r3, [r7, #0]
 801d8e6:	885b      	ldrh	r3, [r3, #2]
 801d8e8:	82bb      	strh	r3, [r7, #20]
  mg_uecc_word_t carry =
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801d8ea:	683b      	ldr	r3, [r7, #0]
 801d8ec:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801d8f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d8f4:	68f9      	ldr	r1, [r7, #12]
 801d8f6:	68b8      	ldr	r0, [r7, #8]
 801d8f8:	f7fe fcec 	bl	801c2d4 <mg_uecc_vli_add>
 801d8fc:	4603      	mov	r3, r0
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d10f      	bne.n	801d922 <regularize_k+0x5e>
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 801d902:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d90a:	015b      	lsls	r3, r3, #5
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801d90c:	429a      	cmp	r2, r3
 801d90e:	da0a      	bge.n	801d926 <regularize_k+0x62>
       mg_uecc_vli_testBit(k0, num_n_bits));
 801d910:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d914:	4619      	mov	r1, r3
 801d916:	68b8      	ldr	r0, [r7, #8]
 801d918:	f7fe fb73 	bl	801c002 <mg_uecc_vli_testBit>
 801d91c:	4603      	mov	r3, r0
      (num_n_bits < ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8) &&
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d001      	beq.n	801d926 <regularize_k+0x62>
      mg_uecc_vli_add(k0, k, curve->n, num_n_words) ||
 801d922:	2301      	movs	r3, #1
 801d924:	e000      	b.n	801d928 <regularize_k+0x64>
 801d926:	2300      	movs	r3, #0
  mg_uecc_word_t carry =
 801d928:	613b      	str	r3, [r7, #16]
  mg_uecc_vli_add(k1, k0, curve->n, num_n_words);
 801d92a:	683b      	ldr	r3, [r7, #0]
 801d92c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801d930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d934:	68b9      	ldr	r1, [r7, #8]
 801d936:	6878      	ldr	r0, [r7, #4]
 801d938:	f7fe fccc 	bl	801c2d4 <mg_uecc_vli_add>
  return carry;
 801d93c:	693b      	ldr	r3, [r7, #16]
}
 801d93e:	4618      	mov	r0, r3
 801d940:	3718      	adds	r7, #24
 801d942:	46bd      	mov	sp, r7
 801d944:	bd80      	pop	{r7, pc}
	...

0801d948 <mg_uecc_generate_random_int>:

/* Generates a random integer in the range 0 < random < top.
   Both random and top have num_words words. */
MG_UECC_VLI_API int mg_uecc_generate_random_int(mg_uecc_word_t *random,
                                                const mg_uecc_word_t *top,
                                                wordcount_t num_words) {
 801d948:	b580      	push	{r7, lr}
 801d94a:	b088      	sub	sp, #32
 801d94c:	af00      	add	r7, sp, #0
 801d94e:	60f8      	str	r0, [r7, #12]
 801d950:	60b9      	str	r1, [r7, #8]
 801d952:	4613      	mov	r3, r2
 801d954:	71fb      	strb	r3, [r7, #7]
  mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801d956:	f04f 33ff 	mov.w	r3, #4294967295
 801d95a:	61bb      	str	r3, [r7, #24]
  mg_uecc_word_t tries;
  bitcount_t num_bits = mg_uecc_vli_numBits(top, num_words);
 801d95c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d960:	4619      	mov	r1, r3
 801d962:	68b8      	ldr	r0, [r7, #8]
 801d964:	f7fe fb8d 	bl	801c082 <mg_uecc_vli_numBits>
 801d968:	4603      	mov	r3, r0
 801d96a:	82fb      	strh	r3, [r7, #22]

  if (!g_rng_function) {
 801d96c:	4b2a      	ldr	r3, [pc, #168]	@ (801da18 <mg_uecc_generate_random_int+0xd0>)
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	2b00      	cmp	r3, #0
 801d972:	d101      	bne.n	801d978 <mg_uecc_generate_random_int+0x30>
    return 0;
 801d974:	2300      	movs	r3, #0
 801d976:	e04b      	b.n	801da10 <mg_uecc_generate_random_int+0xc8>
  }

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801d978:	2300      	movs	r3, #0
 801d97a:	61fb      	str	r3, [r7, #28]
 801d97c:	e044      	b.n	801da08 <mg_uecc_generate_random_int+0xc0>
    if (!g_rng_function((uint8_t *) random,
 801d97e:	4b26      	ldr	r3, [pc, #152]	@ (801da18 <mg_uecc_generate_random_int+0xd0>)
 801d980:	681b      	ldr	r3, [r3, #0]
                        (unsigned int) (num_words * MG_UECC_WORD_SIZE))) {
 801d982:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801d986:	0092      	lsls	r2, r2, #2
    if (!g_rng_function((uint8_t *) random,
 801d988:	4611      	mov	r1, r2
 801d98a:	68f8      	ldr	r0, [r7, #12]
 801d98c:	4798      	blx	r3
 801d98e:	4603      	mov	r3, r0
 801d990:	2b00      	cmp	r3, #0
 801d992:	d101      	bne.n	801d998 <mg_uecc_generate_random_int+0x50>
      return 0;
 801d994:	2300      	movs	r3, #0
 801d996:	e03b      	b.n	801da10 <mg_uecc_generate_random_int+0xc8>
    }
    random[num_words - 1] &=
 801d998:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801d99c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d9a0:	4413      	add	r3, r2
 801d9a2:	009b      	lsls	r3, r3, #2
 801d9a4:	68fa      	ldr	r2, [r7, #12]
 801d9a6:	4413      	add	r3, r2
 801d9a8:	6819      	ldr	r1, [r3, #0]
        mask >> ((bitcount_t) (num_words * MG_UECC_WORD_SIZE * 8 - num_bits));
 801d9aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d9ae:	b29b      	uxth	r3, r3
 801d9b0:	015b      	lsls	r3, r3, #5
 801d9b2:	b29a      	uxth	r2, r3
 801d9b4:	8afb      	ldrh	r3, [r7, #22]
 801d9b6:	1ad3      	subs	r3, r2, r3
 801d9b8:	b29b      	uxth	r3, r3
 801d9ba:	b21b      	sxth	r3, r3
 801d9bc:	461a      	mov	r2, r3
 801d9be:	69bb      	ldr	r3, [r7, #24]
 801d9c0:	fa23 f202 	lsr.w	r2, r3, r2
    random[num_words - 1] &=
 801d9c4:	f997 0007 	ldrsb.w	r0, [r7, #7]
 801d9c8:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801d9cc:	4403      	add	r3, r0
 801d9ce:	009b      	lsls	r3, r3, #2
 801d9d0:	68f8      	ldr	r0, [r7, #12]
 801d9d2:	4403      	add	r3, r0
 801d9d4:	400a      	ands	r2, r1
 801d9d6:	601a      	str	r2, [r3, #0]
    if (!mg_uecc_vli_isZero(random, num_words) &&
 801d9d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d9dc:	4619      	mov	r1, r3
 801d9de:	68f8      	ldr	r0, [r7, #12]
 801d9e0:	f7fe fae5 	bl	801bfae <mg_uecc_vli_isZero>
 801d9e4:	4603      	mov	r3, r0
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d10b      	bne.n	801da02 <mg_uecc_generate_random_int+0xba>
        mg_uecc_vli_cmp(top, random, num_words) == 1) {
 801d9ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d9ee:	461a      	mov	r2, r3
 801d9f0:	68f9      	ldr	r1, [r7, #12]
 801d9f2:	68b8      	ldr	r0, [r7, #8]
 801d9f4:	f7fe fc13 	bl	801c21e <mg_uecc_vli_cmp>
 801d9f8:	4603      	mov	r3, r0
    if (!mg_uecc_vli_isZero(random, num_words) &&
 801d9fa:	2b01      	cmp	r3, #1
 801d9fc:	d101      	bne.n	801da02 <mg_uecc_generate_random_int+0xba>
      return 1;
 801d9fe:	2301      	movs	r3, #1
 801da00:	e006      	b.n	801da10 <mg_uecc_generate_random_int+0xc8>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801da02:	69fb      	ldr	r3, [r7, #28]
 801da04:	3301      	adds	r3, #1
 801da06:	61fb      	str	r3, [r7, #28]
 801da08:	69fb      	ldr	r3, [r7, #28]
 801da0a:	2b3f      	cmp	r3, #63	@ 0x3f
 801da0c:	d9b7      	bls.n	801d97e <mg_uecc_generate_random_int+0x36>
    }
  }
  return 0;
 801da0e:	2300      	movs	r3, #0
}
 801da10:	4618      	mov	r0, r3
 801da12:	3720      	adds	r7, #32
 801da14:	46bd      	mov	sp, r7
 801da16:	bd80      	pop	{r7, pc}
 801da18:	240010d0 	.word	0x240010d0

0801da1c <mg_uecc_vli_nativeToBytes>:
}

#else

MG_UECC_VLI_API void mg_uecc_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
                                               const mg_uecc_word_t *native) {
 801da1c:	b480      	push	{r7}
 801da1e:	b087      	sub	sp, #28
 801da20:	af00      	add	r7, sp, #0
 801da22:	60f8      	str	r0, [r7, #12]
 801da24:	60b9      	str	r1, [r7, #8]
 801da26:	607a      	str	r2, [r7, #4]
  int i;
  for (i = 0; i < num_bytes; ++i) {
 801da28:	2300      	movs	r3, #0
 801da2a:	617b      	str	r3, [r7, #20]
 801da2c:	e018      	b.n	801da60 <mg_uecc_vli_nativeToBytes+0x44>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801da2e:	68bb      	ldr	r3, [r7, #8]
 801da30:	1e5a      	subs	r2, r3, #1
 801da32:	697b      	ldr	r3, [r7, #20]
 801da34:	1ad3      	subs	r3, r2, r3
 801da36:	613b      	str	r3, [r7, #16]
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 801da38:	693b      	ldr	r3, [r7, #16]
 801da3a:	f023 0303 	bic.w	r3, r3, #3
 801da3e:	687a      	ldr	r2, [r7, #4]
 801da40:	4413      	add	r3, r2
 801da42:	681a      	ldr	r2, [r3, #0]
                          (8 * (b % MG_UECC_WORD_SIZE)));
 801da44:	693b      	ldr	r3, [r7, #16]
 801da46:	f003 0303 	and.w	r3, r3, #3
 801da4a:	00db      	lsls	r3, r3, #3
    bytes[i] = (uint8_t) (native[b / MG_UECC_WORD_SIZE] >>
 801da4c:	fa22 f103 	lsr.w	r1, r2, r3
 801da50:	697b      	ldr	r3, [r7, #20]
 801da52:	68fa      	ldr	r2, [r7, #12]
 801da54:	4413      	add	r3, r2
 801da56:	b2ca      	uxtb	r2, r1
 801da58:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 801da5a:	697b      	ldr	r3, [r7, #20]
 801da5c:	3301      	adds	r3, #1
 801da5e:	617b      	str	r3, [r7, #20]
 801da60:	697a      	ldr	r2, [r7, #20]
 801da62:	68bb      	ldr	r3, [r7, #8]
 801da64:	429a      	cmp	r2, r3
 801da66:	dbe2      	blt.n	801da2e <mg_uecc_vli_nativeToBytes+0x12>
  }
}
 801da68:	bf00      	nop
 801da6a:	bf00      	nop
 801da6c:	371c      	adds	r7, #28
 801da6e:	46bd      	mov	sp, r7
 801da70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da74:	4770      	bx	lr

0801da76 <mg_uecc_vli_bytesToNative>:

MG_UECC_VLI_API void mg_uecc_vli_bytesToNative(mg_uecc_word_t *native,
                                               const uint8_t *bytes,
                                               int num_bytes) {
 801da76:	b580      	push	{r7, lr}
 801da78:	b086      	sub	sp, #24
 801da7a:	af00      	add	r7, sp, #0
 801da7c:	60f8      	str	r0, [r7, #12]
 801da7e:	60b9      	str	r1, [r7, #8]
 801da80:	607a      	str	r2, [r7, #4]
  int i;
  mg_uecc_vli_clear(native,
                    (wordcount_t) ((num_bytes + (MG_UECC_WORD_SIZE - 1)) /
 801da82:	687b      	ldr	r3, [r7, #4]
 801da84:	3303      	adds	r3, #3
 801da86:	2b00      	cmp	r3, #0
 801da88:	da00      	bge.n	801da8c <mg_uecc_vli_bytesToNative+0x16>
 801da8a:	3303      	adds	r3, #3
 801da8c:	109b      	asrs	r3, r3, #2
  mg_uecc_vli_clear(native,
 801da8e:	b25b      	sxtb	r3, r3
 801da90:	4619      	mov	r1, r3
 801da92:	68f8      	ldr	r0, [r7, #12]
 801da94:	f7fe fa6a 	bl	801bf6c <mg_uecc_vli_clear>
                                   MG_UECC_WORD_SIZE));
  for (i = 0; i < num_bytes; ++i) {
 801da98:	2300      	movs	r3, #0
 801da9a:	617b      	str	r3, [r7, #20]
 801da9c:	e01e      	b.n	801dadc <mg_uecc_vli_bytesToNative+0x66>
    unsigned b = (unsigned) (num_bytes - 1 - i);
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	1e5a      	subs	r2, r3, #1
 801daa2:	697b      	ldr	r3, [r7, #20]
 801daa4:	1ad3      	subs	r3, r2, r3
 801daa6:	613b      	str	r3, [r7, #16]
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 801daa8:	693b      	ldr	r3, [r7, #16]
 801daaa:	f023 0303 	bic.w	r3, r3, #3
 801daae:	68fa      	ldr	r2, [r7, #12]
 801dab0:	4413      	add	r3, r2
 801dab2:	6819      	ldr	r1, [r3, #0]
 801dab4:	697b      	ldr	r3, [r7, #20]
 801dab6:	68ba      	ldr	r2, [r7, #8]
 801dab8:	4413      	add	r3, r2
 801daba:	781b      	ldrb	r3, [r3, #0]
 801dabc:	461a      	mov	r2, r3
                                     << (8 * (b % MG_UECC_WORD_SIZE));
 801dabe:	693b      	ldr	r3, [r7, #16]
 801dac0:	f003 0303 	and.w	r3, r3, #3
 801dac4:	00db      	lsls	r3, r3, #3
 801dac6:	409a      	lsls	r2, r3
    native[b / MG_UECC_WORD_SIZE] |= (mg_uecc_word_t) bytes[i]
 801dac8:	693b      	ldr	r3, [r7, #16]
 801daca:	f023 0303 	bic.w	r3, r3, #3
 801dace:	68f8      	ldr	r0, [r7, #12]
 801dad0:	4403      	add	r3, r0
 801dad2:	430a      	orrs	r2, r1
 801dad4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < num_bytes; ++i) {
 801dad6:	697b      	ldr	r3, [r7, #20]
 801dad8:	3301      	adds	r3, #1
 801dada:	617b      	str	r3, [r7, #20]
 801dadc:	697a      	ldr	r2, [r7, #20]
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	429a      	cmp	r2, r3
 801dae2:	dbdc      	blt.n	801da9e <mg_uecc_vli_bytesToNative+0x28>
  }
}
 801dae4:	bf00      	nop
 801dae6:	bf00      	nop
 801dae8:	3718      	adds	r7, #24
 801daea:	46bd      	mov	sp, r7
 801daec:	bd80      	pop	{r7, pc}

0801daee <bits2int>:
}

/* -------- ECDSA code -------- */

static void bits2int(mg_uecc_word_t *native, const uint8_t *bits,
                     unsigned bits_size, MG_UECC_Curve curve) {
 801daee:	b580      	push	{r7, lr}
 801daf0:	b08a      	sub	sp, #40	@ 0x28
 801daf2:	af00      	add	r7, sp, #0
 801daf4:	60f8      	str	r0, [r7, #12]
 801daf6:	60b9      	str	r1, [r7, #8]
 801daf8:	607a      	str	r2, [r7, #4]
 801dafa:	603b      	str	r3, [r7, #0]
  unsigned num_n_bytes = (unsigned) BITS_TO_BYTES(curve->num_n_bits);
 801dafc:	683b      	ldr	r3, [r7, #0]
 801dafe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801db02:	3307      	adds	r3, #7
 801db04:	2b00      	cmp	r3, #0
 801db06:	da00      	bge.n	801db0a <bits2int+0x1c>
 801db08:	3307      	adds	r3, #7
 801db0a:	10db      	asrs	r3, r3, #3
 801db0c:	61fb      	str	r3, [r7, #28]
  unsigned num_n_words = (unsigned) BITS_TO_WORDS(curve->num_n_bits);
 801db0e:	683b      	ldr	r3, [r7, #0]
 801db10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801db14:	331f      	adds	r3, #31
 801db16:	2b00      	cmp	r3, #0
 801db18:	da00      	bge.n	801db1c <bits2int+0x2e>
 801db1a:	331f      	adds	r3, #31
 801db1c:	115b      	asrs	r3, r3, #5
 801db1e:	b25b      	sxtb	r3, r3
 801db20:	61bb      	str	r3, [r7, #24]
  int shift;
  mg_uecc_word_t carry;
  mg_uecc_word_t *ptr;

  if (bits_size > num_n_bytes) {
 801db22:	687a      	ldr	r2, [r7, #4]
 801db24:	69fb      	ldr	r3, [r7, #28]
 801db26:	429a      	cmp	r2, r3
 801db28:	d901      	bls.n	801db2e <bits2int+0x40>
    bits_size = num_n_bytes;
 801db2a:	69fb      	ldr	r3, [r7, #28]
 801db2c:	607b      	str	r3, [r7, #4]
  }

  mg_uecc_vli_clear(native, (wordcount_t) num_n_words);
 801db2e:	69bb      	ldr	r3, [r7, #24]
 801db30:	b25b      	sxtb	r3, r3
 801db32:	4619      	mov	r1, r3
 801db34:	68f8      	ldr	r0, [r7, #12]
 801db36:	f7fe fa19 	bl	801bf6c <mg_uecc_vli_clear>
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) native, bits, bits_size);
#else
  mg_uecc_vli_bytesToNative(native, bits, (int) bits_size);
 801db3a:	687b      	ldr	r3, [r7, #4]
 801db3c:	461a      	mov	r2, r3
 801db3e:	68b9      	ldr	r1, [r7, #8]
 801db40:	68f8      	ldr	r0, [r7, #12]
 801db42:	f7ff ff98 	bl	801da76 <mg_uecc_vli_bytesToNative>
#endif
  if (bits_size * 8 <= (unsigned) curve->num_n_bits) {
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	00db      	lsls	r3, r3, #3
 801db4a:	683a      	ldr	r2, [r7, #0]
 801db4c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801db50:	4293      	cmp	r3, r2
 801db52:	d93a      	bls.n	801dbca <bits2int+0xdc>
    return;
  }
  shift = (int) bits_size * 8 - curve->num_n_bits;
 801db54:	687b      	ldr	r3, [r7, #4]
 801db56:	00db      	lsls	r3, r3, #3
 801db58:	683a      	ldr	r2, [r7, #0]
 801db5a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 801db5e:	1a9b      	subs	r3, r3, r2
 801db60:	617b      	str	r3, [r7, #20]
  carry = 0;
 801db62:	2300      	movs	r3, #0
 801db64:	627b      	str	r3, [r7, #36]	@ 0x24
  ptr = native + num_n_words;
 801db66:	69bb      	ldr	r3, [r7, #24]
 801db68:	009b      	lsls	r3, r3, #2
 801db6a:	68fa      	ldr	r2, [r7, #12]
 801db6c:	4413      	add	r3, r2
 801db6e:	623b      	str	r3, [r7, #32]
  while (ptr-- > native) {
 801db70:	e010      	b.n	801db94 <bits2int+0xa6>
    mg_uecc_word_t temp = *ptr;
 801db72:	6a3b      	ldr	r3, [r7, #32]
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	613b      	str	r3, [r7, #16]
    *ptr = (temp >> shift) | carry;
 801db78:	693a      	ldr	r2, [r7, #16]
 801db7a:	697b      	ldr	r3, [r7, #20]
 801db7c:	40da      	lsrs	r2, r3
 801db7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801db80:	431a      	orrs	r2, r3
 801db82:	6a3b      	ldr	r3, [r7, #32]
 801db84:	601a      	str	r2, [r3, #0]
    carry = temp << (MG_UECC_WORD_BITS - shift);
 801db86:	697b      	ldr	r3, [r7, #20]
 801db88:	f1c3 0320 	rsb	r3, r3, #32
 801db8c:	693a      	ldr	r2, [r7, #16]
 801db8e:	fa02 f303 	lsl.w	r3, r2, r3
 801db92:	627b      	str	r3, [r7, #36]	@ 0x24
  while (ptr-- > native) {
 801db94:	6a3b      	ldr	r3, [r7, #32]
 801db96:	1f1a      	subs	r2, r3, #4
 801db98:	623a      	str	r2, [r7, #32]
 801db9a:	68fa      	ldr	r2, [r7, #12]
 801db9c:	429a      	cmp	r2, r3
 801db9e:	d3e8      	bcc.n	801db72 <bits2int+0x84>
  }

  /* Reduce mod curve_n */
  if (mg_uecc_vli_cmp_unsafe(curve->n, native, (wordcount_t) num_n_words) !=
 801dba0:	683b      	ldr	r3, [r7, #0]
 801dba2:	3324      	adds	r3, #36	@ 0x24
 801dba4:	69ba      	ldr	r2, [r7, #24]
 801dba6:	b252      	sxtb	r2, r2
 801dba8:	68f9      	ldr	r1, [r7, #12]
 801dbaa:	4618      	mov	r0, r3
 801dbac:	f7fe fac9 	bl	801c142 <mg_uecc_vli_cmp_unsafe>
 801dbb0:	4603      	mov	r3, r0
 801dbb2:	2b01      	cmp	r3, #1
 801dbb4:	d00a      	beq.n	801dbcc <bits2int+0xde>
      1) {
    mg_uecc_vli_sub(native, native, curve->n, (wordcount_t) num_n_words);
 801dbb6:	683b      	ldr	r3, [r7, #0]
 801dbb8:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801dbbc:	69bb      	ldr	r3, [r7, #24]
 801dbbe:	b25b      	sxtb	r3, r3
 801dbc0:	68f9      	ldr	r1, [r7, #12]
 801dbc2:	68f8      	ldr	r0, [r7, #12]
 801dbc4:	f7fe fbd0 	bl	801c368 <mg_uecc_vli_sub>
 801dbc8:	e000      	b.n	801dbcc <bits2int+0xde>
    return;
 801dbca:	bf00      	nop
  }
}
 801dbcc:	3728      	adds	r7, #40	@ 0x28
 801dbce:	46bd      	mov	sp, r7
 801dbd0:	bd80      	pop	{r7, pc}
	...

0801dbd4 <mg_uecc_sign_with_k_internal>:

static int mg_uecc_sign_with_k_internal(const uint8_t *private_key,
                                        const uint8_t *message_hash,
                                        unsigned hash_size, mg_uecc_word_t *k,
                                        uint8_t *signature,
                                        MG_UECC_Curve curve) {
 801dbd4:	b590      	push	{r4, r7, lr}
 801dbd6:	b0ad      	sub	sp, #180	@ 0xb4
 801dbd8:	af02      	add	r7, sp, #8
 801dbda:	60f8      	str	r0, [r7, #12]
 801dbdc:	60b9      	str	r1, [r7, #8]
 801dbde:	607a      	str	r2, [r7, #4]
 801dbe0:	603b      	str	r3, [r7, #0]
  mg_uecc_word_t tmp[MG_UECC_MAX_WORDS];
  mg_uecc_word_t s[MG_UECC_MAX_WORDS];
  mg_uecc_word_t *k2[2] = {tmp, s};
 801dbe2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801dbe6:	657b      	str	r3, [r7, #84]	@ 0x54
 801dbe8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801dbec:	65bb      	str	r3, [r7, #88]	@ 0x58
  mg_uecc_word_t *initial_Z = 0;
 801dbee:	2300      	movs	r3, #0
 801dbf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  mg_uecc_word_t *p = (mg_uecc_word_t *) signature;
#else
  mg_uecc_word_t p[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t carry;
  wordcount_t num_words = curve->num_words;
 801dbf4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dbf8:	781b      	ldrb	r3, [r3, #0]
 801dbfa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801dbfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dc06:	331f      	adds	r3, #31
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	da00      	bge.n	801dc0e <mg_uecc_sign_with_k_internal+0x3a>
 801dc0c:	331f      	adds	r3, #31
 801dc0e:	115b      	asrs	r3, r3, #5
 801dc10:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
  bitcount_t num_n_bits = curve->num_n_bits;
 801dc14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc18:	885b      	ldrh	r3, [r3, #2]
 801dc1a:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0

  /* Make sure 0 < k < curve_n */
  if (mg_uecc_vli_isZero(k, num_words) ||
 801dc1e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 801dc22:	4619      	mov	r1, r3
 801dc24:	6838      	ldr	r0, [r7, #0]
 801dc26:	f7fe f9c2 	bl	801bfae <mg_uecc_vli_isZero>
 801dc2a:	4603      	mov	r3, r0
 801dc2c:	2b00      	cmp	r3, #0
 801dc2e:	d10b      	bne.n	801dc48 <mg_uecc_sign_with_k_internal+0x74>
      mg_uecc_vli_cmp(curve->n, k, num_n_words) != 1) {
 801dc30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc34:	3324      	adds	r3, #36	@ 0x24
 801dc36:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801dc3a:	6839      	ldr	r1, [r7, #0]
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	f7fe faee 	bl	801c21e <mg_uecc_vli_cmp>
 801dc42:	4603      	mov	r3, r0
  if (mg_uecc_vli_isZero(k, num_words) ||
 801dc44:	2b01      	cmp	r3, #1
 801dc46:	d001      	beq.n	801dc4c <mg_uecc_sign_with_k_internal+0x78>
    return 0;
 801dc48:	2300      	movs	r3, #0
 801dc4a:	e128      	b.n	801de9e <mg_uecc_sign_with_k_internal+0x2ca>
  }

  carry = regularize_k(k, tmp, s, curve);
 801dc4c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801dc50:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801dc54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc58:	6838      	ldr	r0, [r7, #0]
 801dc5a:	f7ff fe33 	bl	801d8c4 <regularize_k>
 801dc5e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
  /* If an RNG function was specified, try to get a random initial Z value to
     improve protection against side-channel attacks. */
  if (g_rng_function) {
 801dc62:	4b91      	ldr	r3, [pc, #580]	@ (801dea8 <mg_uecc_sign_with_k_internal+0x2d4>)
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	2b00      	cmp	r3, #0
 801dc68:	d01c      	beq.n	801dca4 <mg_uecc_sign_with_k_internal+0xd0>
    if (!mg_uecc_generate_random_int(k2[carry], curve->p, num_words)) {
 801dc6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dc6e:	009b      	lsls	r3, r3, #2
 801dc70:	33a8      	adds	r3, #168	@ 0xa8
 801dc72:	443b      	add	r3, r7
 801dc74:	f853 0c54 	ldr.w	r0, [r3, #-84]
 801dc78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dc7c:	3304      	adds	r3, #4
 801dc7e:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801dc82:	4619      	mov	r1, r3
 801dc84:	f7ff fe60 	bl	801d948 <mg_uecc_generate_random_int>
 801dc88:	4603      	mov	r3, r0
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	d101      	bne.n	801dc92 <mg_uecc_sign_with_k_internal+0xbe>
      return 0;
 801dc8e:	2300      	movs	r3, #0
 801dc90:	e105      	b.n	801de9e <mg_uecc_sign_with_k_internal+0x2ca>
    }
    initial_Z = k2[carry];
 801dc92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dc96:	009b      	lsls	r3, r3, #2
 801dc98:	33a8      	adds	r3, #168	@ 0xa8
 801dc9a:	443b      	add	r3, r7
 801dc9c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 801dca0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  }
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801dca4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dca8:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 801dcac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801dcb0:	2b00      	cmp	r3, #0
 801dcb2:	bf0c      	ite	eq
 801dcb4:	2301      	moveq	r3, #1
 801dcb6:	2300      	movne	r3, #0
 801dcb8:	b2db      	uxtb	r3, r3
 801dcba:	009b      	lsls	r3, r3, #2
 801dcbc:	33a8      	adds	r3, #168	@ 0xa8
 801dcbe:	443b      	add	r3, r7
 801dcc0:	f853 4c54 	ldr.w	r4, [r3, #-84]
                (bitcount_t) (num_n_bits + 1), curve);
 801dcc4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 801dcc8:	3301      	adds	r3, #1
 801dcca:	b29b      	uxth	r3, r3
  EccPoint_mult(p, curve->G, k2[!carry], initial_Z,
 801dccc:	b21b      	sxth	r3, r3
 801dcce:	f107 0014 	add.w	r0, r7, #20
 801dcd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801dcd6:	9201      	str	r2, [sp, #4]
 801dcd8:	9300      	str	r3, [sp, #0]
 801dcda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801dcde:	4622      	mov	r2, r4
 801dce0:	f7ff fc8f 	bl	801d602 <EccPoint_mult>
  if (mg_uecc_vli_isZero(p, num_words)) {
 801dce4:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801dce8:	f107 0314 	add.w	r3, r7, #20
 801dcec:	4611      	mov	r1, r2
 801dcee:	4618      	mov	r0, r3
 801dcf0:	f7fe f95d 	bl	801bfae <mg_uecc_vli_isZero>
 801dcf4:	4603      	mov	r3, r0
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d001      	beq.n	801dcfe <mg_uecc_sign_with_k_internal+0x12a>
    return 0;
 801dcfa:	2300      	movs	r3, #0
 801dcfc:	e0cf      	b.n	801de9e <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* If an RNG function was specified, get a random number
     to prevent side channel analysis of k. */
  if (!g_rng_function) {
 801dcfe:	4b6a      	ldr	r3, [pc, #424]	@ (801dea8 <mg_uecc_sign_with_k_internal+0x2d4>)
 801dd00:	681b      	ldr	r3, [r3, #0]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d10a      	bne.n	801dd1c <mg_uecc_sign_with_k_internal+0x148>
    mg_uecc_vli_clear(tmp, num_n_words);
 801dd06:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801dd0a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801dd0e:	4611      	mov	r1, r2
 801dd10:	4618      	mov	r0, r3
 801dd12:	f7fe f92b 	bl	801bf6c <mg_uecc_vli_clear>
    tmp[0] = 1;
 801dd16:	2301      	movs	r3, #1
 801dd18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dd1a:	e00f      	b.n	801dd3c <mg_uecc_sign_with_k_internal+0x168>
  } else if (!mg_uecc_generate_random_int(tmp, curve->n, num_n_words)) {
 801dd1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd20:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801dd24:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801dd28:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801dd2c:	4618      	mov	r0, r3
 801dd2e:	f7ff fe0b 	bl	801d948 <mg_uecc_generate_random_int>
 801dd32:	4603      	mov	r3, r0
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d101      	bne.n	801dd3c <mg_uecc_sign_with_k_internal+0x168>
    return 0;
 801dd38:	2300      	movs	r3, #0
 801dd3a:	e0b0      	b.n	801de9e <mg_uecc_sign_with_k_internal+0x2ca>
  }

  /* Prevent side channel analysis of mg_uecc_vli_modInv() to determine
     bits of k / the private key by premultiplying by a random number */
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k' = rand * k */
 801dd3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd40:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801dd44:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801dd48:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dd4c:	9300      	str	r3, [sp, #0]
 801dd4e:	460b      	mov	r3, r1
 801dd50:	6839      	ldr	r1, [r7, #0]
 801dd52:	6838      	ldr	r0, [r7, #0]
 801dd54:	f7fe fddc 	bl	801c910 <mg_uecc_vli_modMult>
  mg_uecc_vli_modInv(k, k, curve->n, num_n_words);       /* k = 1 / k' */
 801dd58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd5c:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801dd60:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dd64:	6839      	ldr	r1, [r7, #0]
 801dd66:	6838      	ldr	r0, [r7, #0]
 801dd68:	f7fe fe51 	bl	801ca0e <mg_uecc_vli_modInv>
  mg_uecc_vli_modMult(k, k, tmp, curve->n, num_n_words); /* k = 1 / k */
 801dd6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd70:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 801dd74:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 801dd78:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801dd7c:	9300      	str	r3, [sp, #0]
 801dd7e:	460b      	mov	r3, r1
 801dd80:	6839      	ldr	r1, [r7, #0]
 801dd82:	6838      	ldr	r0, [r7, #0]
 801dd84:	f7fe fdc4 	bl	801c910 <mg_uecc_vli_modMult>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN == 0
  mg_uecc_vli_nativeToBytes(signature, curve->num_bytes, p); /* store r */
 801dd88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dd8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801dd90:	4619      	mov	r1, r3
 801dd92:	f107 0314 	add.w	r3, r7, #20
 801dd96:	461a      	mov	r2, r3
 801dd98:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 801dd9c:	f7ff fe3e 	bl	801da1c <mg_uecc_vli_nativeToBytes>

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) tmp, private_key, BITS_TO_BYTES(curve->num_n_bits));
#else
  mg_uecc_vli_bytesToNative(tmp, private_key,
                            BITS_TO_BYTES(curve->num_n_bits)); /* tmp = d */
 801dda0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dda4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801dda8:	3307      	adds	r3, #7
  mg_uecc_vli_bytesToNative(tmp, private_key,
 801ddaa:	2b00      	cmp	r3, #0
 801ddac:	da00      	bge.n	801ddb0 <mg_uecc_sign_with_k_internal+0x1dc>
 801ddae:	3307      	adds	r3, #7
 801ddb0:	10db      	asrs	r3, r3, #3
 801ddb2:	461a      	mov	r2, r3
 801ddb4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 801ddb8:	68f9      	ldr	r1, [r7, #12]
 801ddba:	4618      	mov	r0, r3
 801ddbc:	f7ff fe5b 	bl	801da76 <mg_uecc_vli_bytesToNative>
#endif

  s[num_n_words - 1] = 0;
 801ddc0:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801ddc4:	3b01      	subs	r3, #1
 801ddc6:	009b      	lsls	r3, r3, #2
 801ddc8:	33a8      	adds	r3, #168	@ 0xa8
 801ddca:	443b      	add	r3, r7
 801ddcc:	2200      	movs	r2, #0
 801ddce:	f843 2c4c 	str.w	r2, [r3, #-76]
  mg_uecc_vli_set(s, p, num_words);
 801ddd2:	f997 20a3 	ldrsb.w	r2, [r7, #163]	@ 0xa3
 801ddd6:	f107 0114 	add.w	r1, r7, #20
 801ddda:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801ddde:	4618      	mov	r0, r3
 801dde0:	f7fe f988 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_modMult(s, tmp, s, curve->n, num_n_words); /* s = r*d */
 801dde4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801dde8:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801ddec:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801ddf0:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801ddf4:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801ddf8:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801ddfc:	9300      	str	r3, [sp, #0]
 801ddfe:	4623      	mov	r3, r4
 801de00:	f7fe fd86 	bl	801c910 <mg_uecc_vli_modMult>

  bits2int(tmp, message_hash, hash_size, curve);
 801de04:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801de08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801de0c:	687a      	ldr	r2, [r7, #4]
 801de0e:	68b9      	ldr	r1, [r7, #8]
 801de10:	f7ff fe6d 	bl	801daee <bits2int>
  mg_uecc_vli_modAdd(s, tmp, s, curve->n, num_n_words); /* s = e + r*d */
 801de14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801de18:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801de1c:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 801de20:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 801de24:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801de28:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801de2c:	9300      	str	r3, [sp, #0]
 801de2e:	4623      	mov	r3, r4
 801de30:	f7fe fbee 	bl	801c610 <mg_uecc_vli_modAdd>
  mg_uecc_vli_modMult(s, s, k, curve->n, num_n_words);  /* s = (e + r*d) / k */
 801de34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801de38:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801de3c:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 801de40:	f107 005c 	add.w	r0, r7, #92	@ 0x5c
 801de44:	f997 30a2 	ldrsb.w	r3, [r7, #162]	@ 0xa2
 801de48:	9300      	str	r3, [sp, #0]
 801de4a:	4613      	mov	r3, r2
 801de4c:	683a      	ldr	r2, [r7, #0]
 801de4e:	f7fe fd5f 	bl	801c910 <mg_uecc_vli_modMult>
  if (mg_uecc_vli_numBits(s, num_n_words) > (bitcount_t) curve->num_bytes * 8) {
 801de52:	f997 20a2 	ldrsb.w	r2, [r7, #162]	@ 0xa2
 801de56:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801de5a:	4611      	mov	r1, r2
 801de5c:	4618      	mov	r0, r3
 801de5e:	f7fe f910 	bl	801c082 <mg_uecc_vli_numBits>
 801de62:	4603      	mov	r3, r0
 801de64:	461a      	mov	r2, r3
 801de66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801de6a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801de6e:	00db      	lsls	r3, r3, #3
 801de70:	429a      	cmp	r2, r3
 801de72:	dd01      	ble.n	801de78 <mg_uecc_sign_with_k_internal+0x2a4>
    return 0;
 801de74:	2300      	movs	r3, #0
 801de76:	e012      	b.n	801de9e <mg_uecc_sign_with_k_internal+0x2ca>
  }
#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) signature + curve->num_bytes, (uint8_t *) s,
        curve->num_bytes);
#else
  mg_uecc_vli_nativeToBytes(signature + curve->num_bytes, curve->num_bytes, s);
 801de78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801de7c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801de80:	461a      	mov	r2, r3
 801de82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801de86:	1898      	adds	r0, r3, r2
 801de88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801de8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801de90:	4619      	mov	r1, r3
 801de92:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801de96:	461a      	mov	r2, r3
 801de98:	f7ff fdc0 	bl	801da1c <mg_uecc_vli_nativeToBytes>
#endif
  return 1;
 801de9c:	2301      	movs	r3, #1
}
 801de9e:	4618      	mov	r0, r3
 801dea0:	37ac      	adds	r7, #172	@ 0xac
 801dea2:	46bd      	mov	sp, r7
 801dea4:	bd90      	pop	{r4, r7, pc}
 801dea6:	bf00      	nop
 801dea8:	240010d0 	.word	0x240010d0

0801deac <HMAC_init>:
}

/* Compute an HMAC using K as a key (as in RFC 6979). Note that K is always
   the same size as the hash result size. */
static void HMAC_init(const MG_UECC_HashContext *hash_context,
                      const uint8_t *K) {
 801deac:	b580      	push	{r7, lr}
 801deae:	b084      	sub	sp, #16
 801deb0:	af00      	add	r7, sp, #0
 801deb2:	6078      	str	r0, [r7, #4]
 801deb4:	6039      	str	r1, [r7, #0]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	695a      	ldr	r2, [r3, #20]
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	691b      	ldr	r3, [r3, #16]
 801debe:	005b      	lsls	r3, r3, #1
 801dec0:	4413      	add	r3, r2
 801dec2:	60bb      	str	r3, [r7, #8]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x36;
 801dec4:	2300      	movs	r3, #0
 801dec6:	60fb      	str	r3, [r7, #12]
 801dec8:	e00d      	b.n	801dee6 <HMAC_init+0x3a>
 801deca:	683a      	ldr	r2, [r7, #0]
 801decc:	68fb      	ldr	r3, [r7, #12]
 801dece:	4413      	add	r3, r2
 801ded0:	781a      	ldrb	r2, [r3, #0]
 801ded2:	68b9      	ldr	r1, [r7, #8]
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	440b      	add	r3, r1
 801ded8:	f082 0236 	eor.w	r2, r2, #54	@ 0x36
 801dedc:	b2d2      	uxtb	r2, r2
 801dede:	701a      	strb	r2, [r3, #0]
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	3301      	adds	r3, #1
 801dee4:	60fb      	str	r3, [r7, #12]
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	691b      	ldr	r3, [r3, #16]
 801deea:	68fa      	ldr	r2, [r7, #12]
 801deec:	429a      	cmp	r2, r3
 801deee:	d3ec      	bcc.n	801deca <HMAC_init+0x1e>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x36;
 801def0:	e007      	b.n	801df02 <HMAC_init+0x56>
 801def2:	68ba      	ldr	r2, [r7, #8]
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	4413      	add	r3, r2
 801def8:	2236      	movs	r2, #54	@ 0x36
 801defa:	701a      	strb	r2, [r3, #0]
 801defc:	68fb      	ldr	r3, [r7, #12]
 801defe:	3301      	adds	r3, #1
 801df00:	60fb      	str	r3, [r7, #12]
 801df02:	687b      	ldr	r3, [r7, #4]
 801df04:	68db      	ldr	r3, [r3, #12]
 801df06:	68fa      	ldr	r2, [r7, #12]
 801df08:	429a      	cmp	r2, r3
 801df0a:	d3f2      	bcc.n	801def2 <HMAC_init+0x46>

  hash_context->init_hash(hash_context);
 801df0c:	687b      	ldr	r3, [r7, #4]
 801df0e:	681b      	ldr	r3, [r3, #0]
 801df10:	6878      	ldr	r0, [r7, #4]
 801df12:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	685b      	ldr	r3, [r3, #4]
 801df18:	687a      	ldr	r2, [r7, #4]
 801df1a:	68d2      	ldr	r2, [r2, #12]
 801df1c:	68b9      	ldr	r1, [r7, #8]
 801df1e:	6878      	ldr	r0, [r7, #4]
 801df20:	4798      	blx	r3
}
 801df22:	bf00      	nop
 801df24:	3710      	adds	r7, #16
 801df26:	46bd      	mov	sp, r7
 801df28:	bd80      	pop	{r7, pc}

0801df2a <HMAC_update>:

static void HMAC_update(const MG_UECC_HashContext *hash_context,
                        const uint8_t *message, unsigned message_size) {
 801df2a:	b580      	push	{r7, lr}
 801df2c:	b084      	sub	sp, #16
 801df2e:	af00      	add	r7, sp, #0
 801df30:	60f8      	str	r0, [r7, #12]
 801df32:	60b9      	str	r1, [r7, #8]
 801df34:	607a      	str	r2, [r7, #4]
  hash_context->update_hash(hash_context, message, message_size);
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	685b      	ldr	r3, [r3, #4]
 801df3a:	687a      	ldr	r2, [r7, #4]
 801df3c:	68b9      	ldr	r1, [r7, #8]
 801df3e:	68f8      	ldr	r0, [r7, #12]
 801df40:	4798      	blx	r3
}
 801df42:	bf00      	nop
 801df44:	3710      	adds	r7, #16
 801df46:	46bd      	mov	sp, r7
 801df48:	bd80      	pop	{r7, pc}

0801df4a <HMAC_finish>:

static void HMAC_finish(const MG_UECC_HashContext *hash_context,
                        const uint8_t *K, uint8_t *result) {
 801df4a:	b580      	push	{r7, lr}
 801df4c:	b086      	sub	sp, #24
 801df4e:	af00      	add	r7, sp, #0
 801df50:	60f8      	str	r0, [r7, #12]
 801df52:	60b9      	str	r1, [r7, #8]
 801df54:	607a      	str	r2, [r7, #4]
  uint8_t *pad = hash_context->tmp + 2 * hash_context->result_size;
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	695a      	ldr	r2, [r3, #20]
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	691b      	ldr	r3, [r3, #16]
 801df5e:	005b      	lsls	r3, r3, #1
 801df60:	4413      	add	r3, r2
 801df62:	613b      	str	r3, [r7, #16]
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) pad[i] = K[i] ^ 0x5c;
 801df64:	2300      	movs	r3, #0
 801df66:	617b      	str	r3, [r7, #20]
 801df68:	e00d      	b.n	801df86 <HMAC_finish+0x3c>
 801df6a:	68ba      	ldr	r2, [r7, #8]
 801df6c:	697b      	ldr	r3, [r7, #20]
 801df6e:	4413      	add	r3, r2
 801df70:	781a      	ldrb	r2, [r3, #0]
 801df72:	6939      	ldr	r1, [r7, #16]
 801df74:	697b      	ldr	r3, [r7, #20]
 801df76:	440b      	add	r3, r1
 801df78:	f082 025c 	eor.w	r2, r2, #92	@ 0x5c
 801df7c:	b2d2      	uxtb	r2, r2
 801df7e:	701a      	strb	r2, [r3, #0]
 801df80:	697b      	ldr	r3, [r7, #20]
 801df82:	3301      	adds	r3, #1
 801df84:	617b      	str	r3, [r7, #20]
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	691b      	ldr	r3, [r3, #16]
 801df8a:	697a      	ldr	r2, [r7, #20]
 801df8c:	429a      	cmp	r2, r3
 801df8e:	d3ec      	bcc.n	801df6a <HMAC_finish+0x20>
  for (; i < hash_context->block_size; ++i) pad[i] = 0x5c;
 801df90:	e007      	b.n	801dfa2 <HMAC_finish+0x58>
 801df92:	693a      	ldr	r2, [r7, #16]
 801df94:	697b      	ldr	r3, [r7, #20]
 801df96:	4413      	add	r3, r2
 801df98:	225c      	movs	r2, #92	@ 0x5c
 801df9a:	701a      	strb	r2, [r3, #0]
 801df9c:	697b      	ldr	r3, [r7, #20]
 801df9e:	3301      	adds	r3, #1
 801dfa0:	617b      	str	r3, [r7, #20]
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	68db      	ldr	r3, [r3, #12]
 801dfa6:	697a      	ldr	r2, [r7, #20]
 801dfa8:	429a      	cmp	r2, r3
 801dfaa:	d3f2      	bcc.n	801df92 <HMAC_finish+0x48>

  hash_context->finish_hash(hash_context, result);
 801dfac:	68fb      	ldr	r3, [r7, #12]
 801dfae:	689b      	ldr	r3, [r3, #8]
 801dfb0:	6879      	ldr	r1, [r7, #4]
 801dfb2:	68f8      	ldr	r0, [r7, #12]
 801dfb4:	4798      	blx	r3

  hash_context->init_hash(hash_context);
 801dfb6:	68fb      	ldr	r3, [r7, #12]
 801dfb8:	681b      	ldr	r3, [r3, #0]
 801dfba:	68f8      	ldr	r0, [r7, #12]
 801dfbc:	4798      	blx	r3
  hash_context->update_hash(hash_context, pad, hash_context->block_size);
 801dfbe:	68fb      	ldr	r3, [r7, #12]
 801dfc0:	685b      	ldr	r3, [r3, #4]
 801dfc2:	68fa      	ldr	r2, [r7, #12]
 801dfc4:	68d2      	ldr	r2, [r2, #12]
 801dfc6:	6939      	ldr	r1, [r7, #16]
 801dfc8:	68f8      	ldr	r0, [r7, #12]
 801dfca:	4798      	blx	r3
  hash_context->update_hash(hash_context, result, hash_context->result_size);
 801dfcc:	68fb      	ldr	r3, [r7, #12]
 801dfce:	685b      	ldr	r3, [r3, #4]
 801dfd0:	68fa      	ldr	r2, [r7, #12]
 801dfd2:	6912      	ldr	r2, [r2, #16]
 801dfd4:	6879      	ldr	r1, [r7, #4]
 801dfd6:	68f8      	ldr	r0, [r7, #12]
 801dfd8:	4798      	blx	r3
  hash_context->finish_hash(hash_context, result);
 801dfda:	68fb      	ldr	r3, [r7, #12]
 801dfdc:	689b      	ldr	r3, [r3, #8]
 801dfde:	6879      	ldr	r1, [r7, #4]
 801dfe0:	68f8      	ldr	r0, [r7, #12]
 801dfe2:	4798      	blx	r3
}
 801dfe4:	bf00      	nop
 801dfe6:	3718      	adds	r7, #24
 801dfe8:	46bd      	mov	sp, r7
 801dfea:	bd80      	pop	{r7, pc}

0801dfec <update_V>:

/* V = HMAC_K(V) */
static void update_V(const MG_UECC_HashContext *hash_context, uint8_t *K,
                     uint8_t *V) {
 801dfec:	b580      	push	{r7, lr}
 801dfee:	b084      	sub	sp, #16
 801dff0:	af00      	add	r7, sp, #0
 801dff2:	60f8      	str	r0, [r7, #12]
 801dff4:	60b9      	str	r1, [r7, #8]
 801dff6:	607a      	str	r2, [r7, #4]
  HMAC_init(hash_context, K);
 801dff8:	68b9      	ldr	r1, [r7, #8]
 801dffa:	68f8      	ldr	r0, [r7, #12]
 801dffc:	f7ff ff56 	bl	801deac <HMAC_init>
  HMAC_update(hash_context, V, hash_context->result_size);
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	691b      	ldr	r3, [r3, #16]
 801e004:	461a      	mov	r2, r3
 801e006:	6879      	ldr	r1, [r7, #4]
 801e008:	68f8      	ldr	r0, [r7, #12]
 801e00a:	f7ff ff8e 	bl	801df2a <HMAC_update>
  HMAC_finish(hash_context, K, V);
 801e00e:	687a      	ldr	r2, [r7, #4]
 801e010:	68b9      	ldr	r1, [r7, #8]
 801e012:	68f8      	ldr	r0, [r7, #12]
 801e014:	f7ff ff99 	bl	801df4a <HMAC_finish>
}
 801e018:	bf00      	nop
 801e01a:	3710      	adds	r7, #16
 801e01c:	46bd      	mov	sp, r7
 801e01e:	bd80      	pop	{r7, pc}

0801e020 <mg_uecc_sign_deterministic>:
   Layout of hash_context->tmp: <K> | <V> | (1 byte overlapped 0x00 or 0x01) /
   <HMAC pad> */
int mg_uecc_sign_deterministic(const uint8_t *private_key,
                               const uint8_t *message_hash, unsigned hash_size,
                               const MG_UECC_HashContext *hash_context,
                               uint8_t *signature, MG_UECC_Curve curve) {
 801e020:	b580      	push	{r7, lr}
 801e022:	b096      	sub	sp, #88	@ 0x58
 801e024:	af02      	add	r7, sp, #8
 801e026:	60f8      	str	r0, [r7, #12]
 801e028:	60b9      	str	r1, [r7, #8]
 801e02a:	607a      	str	r2, [r7, #4]
 801e02c:	603b      	str	r3, [r7, #0]
  uint8_t *K = hash_context->tmp;
 801e02e:	683b      	ldr	r3, [r7, #0]
 801e030:	695b      	ldr	r3, [r3, #20]
 801e032:	643b      	str	r3, [r7, #64]	@ 0x40
  uint8_t *V = K + hash_context->result_size;
 801e034:	683b      	ldr	r3, [r7, #0]
 801e036:	691b      	ldr	r3, [r3, #16]
 801e038:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e03a:	4413      	add	r3, r2
 801e03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  wordcount_t num_bytes = curve->num_bytes;
 801e03e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e040:	785b      	ldrb	r3, [r3, #1]
 801e042:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801e046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e04c:	331f      	adds	r3, #31
 801e04e:	2b00      	cmp	r3, #0
 801e050:	da00      	bge.n	801e054 <mg_uecc_sign_deterministic+0x34>
 801e052:	331f      	adds	r3, #31
 801e054:	115b      	asrs	r3, r3, #5
 801e056:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  bitcount_t num_n_bits = curve->num_n_bits;
 801e05a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e05c:	885b      	ldrh	r3, [r3, #2]
 801e05e:	873b      	strh	r3, [r7, #56]	@ 0x38
  mg_uecc_word_t tries;
  unsigned i;
  for (i = 0; i < hash_context->result_size; ++i) {
 801e060:	2300      	movs	r3, #0
 801e062:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e064:	e00c      	b.n	801e080 <mg_uecc_sign_deterministic+0x60>
    V[i] = 0x01;
 801e066:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e06a:	4413      	add	r3, r2
 801e06c:	2201      	movs	r2, #1
 801e06e:	701a      	strb	r2, [r3, #0]
    K[i] = 0;
 801e070:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e074:	4413      	add	r3, r2
 801e076:	2200      	movs	r2, #0
 801e078:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < hash_context->result_size; ++i) {
 801e07a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e07c:	3301      	adds	r3, #1
 801e07e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e080:	683b      	ldr	r3, [r7, #0]
 801e082:	691b      	ldr	r3, [r3, #16]
 801e084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e086:	429a      	cmp	r2, r3
 801e088:	d3ed      	bcc.n	801e066 <mg_uecc_sign_deterministic+0x46>
  }

  /* K = HMAC_K(V || 0x00 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801e08a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e08c:	6838      	ldr	r0, [r7, #0]
 801e08e:	f7ff ff0d 	bl	801deac <HMAC_init>
  V[hash_context->result_size] = 0x00;
 801e092:	683b      	ldr	r3, [r7, #0]
 801e094:	691b      	ldr	r3, [r3, #16]
 801e096:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e098:	4413      	add	r3, r2
 801e09a:	2200      	movs	r2, #0
 801e09c:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801e09e:	683b      	ldr	r3, [r7, #0]
 801e0a0:	691b      	ldr	r3, [r3, #16]
 801e0a2:	3301      	adds	r3, #1
 801e0a4:	461a      	mov	r2, r3
 801e0a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e0a8:	6838      	ldr	r0, [r7, #0]
 801e0aa:	f7ff ff3e 	bl	801df2a <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801e0ae:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801e0b2:	461a      	mov	r2, r3
 801e0b4:	68f9      	ldr	r1, [r7, #12]
 801e0b6:	6838      	ldr	r0, [r7, #0]
 801e0b8:	f7ff ff37 	bl	801df2a <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801e0bc:	687a      	ldr	r2, [r7, #4]
 801e0be:	68b9      	ldr	r1, [r7, #8]
 801e0c0:	6838      	ldr	r0, [r7, #0]
 801e0c2:	f7ff ff32 	bl	801df2a <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801e0c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e0c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e0ca:	6838      	ldr	r0, [r7, #0]
 801e0cc:	f7ff ff3d 	bl	801df4a <HMAC_finish>

  update_V(hash_context, K, V);
 801e0d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e0d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e0d4:	6838      	ldr	r0, [r7, #0]
 801e0d6:	f7ff ff89 	bl	801dfec <update_V>

  /* K = HMAC_K(V || 0x01 || int2octets(x) || h(m)) */
  HMAC_init(hash_context, K);
 801e0da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e0dc:	6838      	ldr	r0, [r7, #0]
 801e0de:	f7ff fee5 	bl	801deac <HMAC_init>
  V[hash_context->result_size] = 0x01;
 801e0e2:	683b      	ldr	r3, [r7, #0]
 801e0e4:	691b      	ldr	r3, [r3, #16]
 801e0e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e0e8:	4413      	add	r3, r2
 801e0ea:	2201      	movs	r2, #1
 801e0ec:	701a      	strb	r2, [r3, #0]
  HMAC_update(hash_context, V, hash_context->result_size + 1);
 801e0ee:	683b      	ldr	r3, [r7, #0]
 801e0f0:	691b      	ldr	r3, [r3, #16]
 801e0f2:	3301      	adds	r3, #1
 801e0f4:	461a      	mov	r2, r3
 801e0f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e0f8:	6838      	ldr	r0, [r7, #0]
 801e0fa:	f7ff ff16 	bl	801df2a <HMAC_update>
  HMAC_update(hash_context, private_key, (unsigned int) num_bytes);
 801e0fe:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 801e102:	461a      	mov	r2, r3
 801e104:	68f9      	ldr	r1, [r7, #12]
 801e106:	6838      	ldr	r0, [r7, #0]
 801e108:	f7ff ff0f 	bl	801df2a <HMAC_update>
  HMAC_update(hash_context, message_hash, hash_size);
 801e10c:	687a      	ldr	r2, [r7, #4]
 801e10e:	68b9      	ldr	r1, [r7, #8]
 801e110:	6838      	ldr	r0, [r7, #0]
 801e112:	f7ff ff0a 	bl	801df2a <HMAC_update>
  HMAC_finish(hash_context, K, K);
 801e116:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e118:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e11a:	6838      	ldr	r0, [r7, #0]
 801e11c:	f7ff ff15 	bl	801df4a <HMAC_finish>

  update_V(hash_context, K, V);
 801e120:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e122:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e124:	6838      	ldr	r0, [r7, #0]
 801e126:	f7ff ff61 	bl	801dfec <update_V>

  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801e12a:	2300      	movs	r3, #0
 801e12c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e12e:	e084      	b.n	801e23a <mg_uecc_sign_deterministic+0x21a>
    mg_uecc_word_t T[MG_UECC_MAX_WORDS];
    uint8_t *T_ptr = (uint8_t *) T;
 801e130:	f107 0310 	add.w	r3, r7, #16
 801e134:	637b      	str	r3, [r7, #52]	@ 0x34
    wordcount_t T_bytes = 0;
 801e136:	2300      	movs	r3, #0
 801e138:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    for (;;) {
      update_V(hash_context, K, V);
 801e13c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e13e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e140:	6838      	ldr	r0, [r7, #0]
 801e142:	f7ff ff53 	bl	801dfec <update_V>
      for (i = 0; i < hash_context->result_size; ++i) {
 801e146:	2300      	movs	r3, #0
 801e148:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e14a:	e017      	b.n	801e17c <mg_uecc_sign_deterministic+0x15c>
        T_ptr[T_bytes++] = V[i];
 801e14c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e14e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e150:	441a      	add	r2, r3
 801e152:	f997 1047 	ldrsb.w	r1, [r7, #71]	@ 0x47
 801e156:	b2cb      	uxtb	r3, r1
 801e158:	3301      	adds	r3, #1
 801e15a:	b2db      	uxtb	r3, r3
 801e15c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801e160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e162:	440b      	add	r3, r1
 801e164:	7812      	ldrb	r2, [r2, #0]
 801e166:	701a      	strb	r2, [r3, #0]
        if (T_bytes >= num_n_words * MG_UECC_WORD_SIZE) {
 801e168:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 801e16c:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e170:	009b      	lsls	r3, r3, #2
 801e172:	429a      	cmp	r2, r3
 801e174:	da08      	bge.n	801e188 <mg_uecc_sign_deterministic+0x168>
      for (i = 0; i < hash_context->result_size; ++i) {
 801e176:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801e178:	3301      	adds	r3, #1
 801e17a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e17c:	683b      	ldr	r3, [r7, #0]
 801e17e:	691b      	ldr	r3, [r3, #16]
 801e180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801e182:	429a      	cmp	r2, r3
 801e184:	d3e2      	bcc.n	801e14c <mg_uecc_sign_deterministic+0x12c>
      update_V(hash_context, K, V);
 801e186:	e7d9      	b.n	801e13c <mg_uecc_sign_deterministic+0x11c>
          goto filled;
 801e188:	bf00      	nop
        }
      }
    }
  filled:
    if ((bitcount_t) num_n_words * MG_UECC_WORD_SIZE * 8 > num_n_bits) {
 801e18a:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e18e:	015a      	lsls	r2, r3, #5
 801e190:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 801e194:	429a      	cmp	r2, r3
 801e196:	dd20      	ble.n	801e1da <mg_uecc_sign_deterministic+0x1ba>
      mg_uecc_word_t mask = (mg_uecc_word_t) -1;
 801e198:	f04f 33ff 	mov.w	r3, #4294967295
 801e19c:	633b      	str	r3, [r7, #48]	@ 0x30
      T[num_n_words - 1] &=
 801e19e:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e1a2:	3b01      	subs	r3, #1
 801e1a4:	009b      	lsls	r3, r3, #2
 801e1a6:	3350      	adds	r3, #80	@ 0x50
 801e1a8:	443b      	add	r3, r7
 801e1aa:	f853 1c40 	ldr.w	r1, [r3, #-64]
          mask >>
          ((bitcount_t) (num_n_words * MG_UECC_WORD_SIZE * 8 - num_n_bits));
 801e1ae:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e1b2:	b29b      	uxth	r3, r3
 801e1b4:	015b      	lsls	r3, r3, #5
 801e1b6:	b29a      	uxth	r2, r3
 801e1b8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801e1ba:	1ad3      	subs	r3, r2, r3
 801e1bc:	b29b      	uxth	r3, r3
 801e1be:	b21b      	sxth	r3, r3
 801e1c0:	461a      	mov	r2, r3
          mask >>
 801e1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1c4:	fa23 f202 	lsr.w	r2, r3, r2
      T[num_n_words - 1] &=
 801e1c8:	f997 303a 	ldrsb.w	r3, [r7, #58]	@ 0x3a
 801e1cc:	3b01      	subs	r3, #1
 801e1ce:	400a      	ands	r2, r1
 801e1d0:	009b      	lsls	r3, r3, #2
 801e1d2:	3350      	adds	r3, #80	@ 0x50
 801e1d4:	443b      	add	r3, r7
 801e1d6:	f843 2c40 	str.w	r2, [r3, #-64]
    }

    if (mg_uecc_sign_with_k_internal(private_key, message_hash, hash_size, T,
 801e1da:	f107 0210 	add.w	r2, r7, #16
 801e1de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801e1e0:	9301      	str	r3, [sp, #4]
 801e1e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801e1e4:	9300      	str	r3, [sp, #0]
 801e1e6:	4613      	mov	r3, r2
 801e1e8:	687a      	ldr	r2, [r7, #4]
 801e1ea:	68b9      	ldr	r1, [r7, #8]
 801e1ec:	68f8      	ldr	r0, [r7, #12]
 801e1ee:	f7ff fcf1 	bl	801dbd4 <mg_uecc_sign_with_k_internal>
 801e1f2:	4603      	mov	r3, r0
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d001      	beq.n	801e1fc <mg_uecc_sign_deterministic+0x1dc>
                                     signature, curve)) {
      return 1;
 801e1f8:	2301      	movs	r3, #1
 801e1fa:	e023      	b.n	801e244 <mg_uecc_sign_deterministic+0x224>
    }

    /* K = HMAC_K(V || 0x00) */
    HMAC_init(hash_context, K);
 801e1fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e1fe:	6838      	ldr	r0, [r7, #0]
 801e200:	f7ff fe54 	bl	801deac <HMAC_init>
    V[hash_context->result_size] = 0x00;
 801e204:	683b      	ldr	r3, [r7, #0]
 801e206:	691b      	ldr	r3, [r3, #16]
 801e208:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e20a:	4413      	add	r3, r2
 801e20c:	2200      	movs	r2, #0
 801e20e:	701a      	strb	r2, [r3, #0]
    HMAC_update(hash_context, V, hash_context->result_size + 1);
 801e210:	683b      	ldr	r3, [r7, #0]
 801e212:	691b      	ldr	r3, [r3, #16]
 801e214:	3301      	adds	r3, #1
 801e216:	461a      	mov	r2, r3
 801e218:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801e21a:	6838      	ldr	r0, [r7, #0]
 801e21c:	f7ff fe85 	bl	801df2a <HMAC_update>
    HMAC_finish(hash_context, K, K);
 801e220:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801e222:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e224:	6838      	ldr	r0, [r7, #0]
 801e226:	f7ff fe90 	bl	801df4a <HMAC_finish>

    update_V(hash_context, K, V);
 801e22a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801e22c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801e22e:	6838      	ldr	r0, [r7, #0]
 801e230:	f7ff fedc 	bl	801dfec <update_V>
  for (tries = 0; tries < MG_UECC_RNG_MAX_TRIES; ++tries) {
 801e234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e236:	3301      	adds	r3, #1
 801e238:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e23a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801e23c:	2b3f      	cmp	r3, #63	@ 0x3f
 801e23e:	f67f af77 	bls.w	801e130 <mg_uecc_sign_deterministic+0x110>
  }
  return 0;
 801e242:	2300      	movs	r3, #0
}
 801e244:	4618      	mov	r0, r3
 801e246:	3750      	adds	r7, #80	@ 0x50
 801e248:	46bd      	mov	sp, r7
 801e24a:	bd80      	pop	{r7, pc}

0801e24c <smax>:

static bitcount_t smax(bitcount_t a, bitcount_t b) {
 801e24c:	b480      	push	{r7}
 801e24e:	b083      	sub	sp, #12
 801e250:	af00      	add	r7, sp, #0
 801e252:	4603      	mov	r3, r0
 801e254:	460a      	mov	r2, r1
 801e256:	80fb      	strh	r3, [r7, #6]
 801e258:	4613      	mov	r3, r2
 801e25a:	80bb      	strh	r3, [r7, #4]
  return (a > b ? a : b);
 801e25c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 801e260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801e264:	4293      	cmp	r3, r2
 801e266:	bfb8      	it	lt
 801e268:	4613      	movlt	r3, r2
 801e26a:	b21b      	sxth	r3, r3
}
 801e26c:	4618      	mov	r0, r3
 801e26e:	370c      	adds	r7, #12
 801e270:	46bd      	mov	sp, r7
 801e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e276:	4770      	bx	lr

0801e278 <mg_uecc_verify>:

int mg_uecc_verify(const uint8_t *public_key, const uint8_t *message_hash,
                   unsigned hash_size, const uint8_t *signature,
                   MG_UECC_Curve curve) {
 801e278:	b590      	push	{r4, r7, lr}
 801e27a:	b0ff      	sub	sp, #508	@ 0x1fc
 801e27c:	af02      	add	r7, sp, #8
 801e27e:	f507 74f8 	add.w	r4, r7, #496	@ 0x1f0
 801e282:	f5a4 74f2 	sub.w	r4, r4, #484	@ 0x1e4
 801e286:	6020      	str	r0, [r4, #0]
 801e288:	f507 70f8 	add.w	r0, r7, #496	@ 0x1f0
 801e28c:	f5a0 70f4 	sub.w	r0, r0, #488	@ 0x1e8
 801e290:	6001      	str	r1, [r0, #0]
 801e292:	f507 71f8 	add.w	r1, r7, #496	@ 0x1f0
 801e296:	f5a1 71f6 	sub.w	r1, r1, #492	@ 0x1ec
 801e29a:	600a      	str	r2, [r1, #0]
 801e29c:	f507 72f8 	add.w	r2, r7, #496	@ 0x1f0
 801e2a0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 801e2a4:	6013      	str	r3, [r2, #0]
  mg_uecc_word_t *_public = (mg_uecc_word_t *) public_key;
#else
  mg_uecc_word_t _public[MG_UECC_MAX_WORDS * 2];
#endif
  mg_uecc_word_t r[MG_UECC_MAX_WORDS], s[MG_UECC_MAX_WORDS];
  wordcount_t num_words = curve->num_words;
 801e2a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e2aa:	781b      	ldrb	r3, [r3, #0]
 801e2ac:	f887 31ed 	strb.w	r3, [r7, #493]	@ 0x1ed
  wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
 801e2b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e2b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e2b8:	331f      	adds	r3, #31
 801e2ba:	2b00      	cmp	r3, #0
 801e2bc:	da00      	bge.n	801e2c0 <mg_uecc_verify+0x48>
 801e2be:	331f      	adds	r3, #31
 801e2c0:	115b      	asrs	r3, r3, #5
 801e2c2:	f887 31ec 	strb.w	r3, [r7, #492]	@ 0x1ec

  rx[num_n_words - 1] = 0;
 801e2c6:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e2ca:	3b01      	subs	r3, #1
 801e2cc:	009b      	lsls	r3, r3, #2
 801e2ce:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801e2d2:	443b      	add	r3, r7
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	f843 2cd0 	str.w	r2, [r3, #-208]
  r[num_n_words - 1] = 0;
 801e2da:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e2de:	1e5a      	subs	r2, r3, #1
 801e2e0:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e2e4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 801e2e8:	2100      	movs	r1, #0
 801e2ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  s[num_n_words - 1] = 0;
 801e2ee:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e2f2:	1e5a      	subs	r2, r3, #1
 801e2f4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e2f8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801e2fc:	2100      	movs	r1, #0
 801e2fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if MG_UECC_VLI_NATIVE_LITTLE_ENDIAN
  bcopy((uint8_t *) r, signature, curve->num_bytes);
  bcopy((uint8_t *) s, signature + curve->num_bytes, curve->num_bytes);
#else
  mg_uecc_vli_bytesToNative(_public, public_key, curve->num_bytes);
 801e302:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e306:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e30a:	461a      	mov	r2, r3
 801e30c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e310:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801e314:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 801e318:	6819      	ldr	r1, [r3, #0]
 801e31a:	f7ff fbac 	bl	801da76 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801e31e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e322:	009b      	lsls	r3, r3, #2
 801e324:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801e328:	18d0      	adds	r0, r2, r3
 801e32a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e32e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e332:	461a      	mov	r2, r3
 801e334:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e338:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	1899      	adds	r1, r3, r2
                            curve->num_bytes);
 801e340:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e344:	f993 3001 	ldrsb.w	r3, [r3, #1]
  mg_uecc_vli_bytesToNative(_public + num_words, public_key + curve->num_bytes,
 801e348:	461a      	mov	r2, r3
 801e34a:	f7ff fb94 	bl	801da76 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(r, signature, curve->num_bytes);
 801e34e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e352:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e356:	461a      	mov	r2, r3
 801e358:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e35c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801e360:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801e364:	6819      	ldr	r1, [r3, #0]
 801e366:	f7ff fb86 	bl	801da76 <mg_uecc_vli_bytesToNative>
  mg_uecc_vli_bytesToNative(s, signature + curve->num_bytes, curve->num_bytes);
 801e36a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e36e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e372:	461a      	mov	r2, r3
 801e374:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e378:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	1899      	adds	r1, r3, r2
 801e380:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e384:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801e388:	461a      	mov	r2, r3
 801e38a:	f107 0310 	add.w	r3, r7, #16
 801e38e:	4618      	mov	r0, r3
 801e390:	f7ff fb71 	bl	801da76 <mg_uecc_vli_bytesToNative>
#endif

  /* r, s must not be 0. */
  if (mg_uecc_vli_isZero(r, num_words) || mg_uecc_vli_isZero(s, num_words)) {
 801e394:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e398:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801e39c:	4611      	mov	r1, r2
 801e39e:	4618      	mov	r0, r3
 801e3a0:	f7fd fe05 	bl	801bfae <mg_uecc_vli_isZero>
 801e3a4:	4603      	mov	r3, r0
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d10a      	bne.n	801e3c0 <mg_uecc_verify+0x148>
 801e3aa:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e3ae:	f107 0310 	add.w	r3, r7, #16
 801e3b2:	4611      	mov	r1, r2
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	f7fd fdfa 	bl	801bfae <mg_uecc_vli_isZero>
 801e3ba:	4603      	mov	r3, r0
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d001      	beq.n	801e3c4 <mg_uecc_verify+0x14c>
    return 0;
 801e3c0:	2300      	movs	r3, #0
 801e3c2:	e220      	b.n	801e806 <mg_uecc_verify+0x58e>
  }

  /* r, s must be < n. */
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 801e3c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e3c8:	3324      	adds	r3, #36	@ 0x24
 801e3ca:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e3ce:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	f7fd feb5 	bl	801c142 <mg_uecc_vli_cmp_unsafe>
 801e3d8:	4603      	mov	r3, r0
 801e3da:	2b01      	cmp	r3, #1
 801e3dc:	d10c      	bne.n	801e3f8 <mg_uecc_verify+0x180>
      mg_uecc_vli_cmp_unsafe(curve->n, s, num_n_words) != 1) {
 801e3de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e3e2:	3324      	adds	r3, #36	@ 0x24
 801e3e4:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e3e8:	f107 0110 	add.w	r1, r7, #16
 801e3ec:	4618      	mov	r0, r3
 801e3ee:	f7fd fea8 	bl	801c142 <mg_uecc_vli_cmp_unsafe>
 801e3f2:	4603      	mov	r3, r0
  if (mg_uecc_vli_cmp_unsafe(curve->n, r, num_n_words) != 1 ||
 801e3f4:	2b01      	cmp	r3, #1
 801e3f6:	d001      	beq.n	801e3fc <mg_uecc_verify+0x184>
    return 0;
 801e3f8:	2300      	movs	r3, #0
 801e3fa:	e204      	b.n	801e806 <mg_uecc_verify+0x58e>
  }

  /* Calculate u1 and u2. */
  mg_uecc_vli_modInv(z, s, curve->n, num_n_words); /* z = 1/s */
 801e3fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e400:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801e404:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e408:	f107 0110 	add.w	r1, r7, #16
 801e40c:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e410:	f7fe fafd 	bl	801ca0e <mg_uecc_vli_modInv>
  u1[num_n_words - 1] = 0;
 801e414:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e418:	3b01      	subs	r3, #1
 801e41a:	009b      	lsls	r3, r3, #2
 801e41c:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 801e420:	443b      	add	r3, r7
 801e422:	2200      	movs	r2, #0
 801e424:	f843 2c30 	str.w	r2, [r3, #-48]
  bits2int(u1, message_hash, hash_size, curve);
 801e428:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e42c:	f5a3 72f6 	sub.w	r2, r3, #492	@ 0x1ec
 801e430:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e434:	f5a3 71f4 	sub.w	r1, r3, #488	@ 0x1e8
 801e438:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 801e43c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e440:	6812      	ldr	r2, [r2, #0]
 801e442:	6809      	ldr	r1, [r1, #0]
 801e444:	f7ff fb53 	bl	801daee <bits2int>
  mg_uecc_vli_modMult(u1, u1, z, curve->n, num_n_words); /* u1 = e/s */
 801e448:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e44c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801e450:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e454:	f507 71e0 	add.w	r1, r7, #448	@ 0x1c0
 801e458:	f507 70e0 	add.w	r0, r7, #448	@ 0x1c0
 801e45c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e460:	9300      	str	r3, [sp, #0]
 801e462:	4623      	mov	r3, r4
 801e464:	f7fe fa54 	bl	801c910 <mg_uecc_vli_modMult>
  mg_uecc_vli_modMult(u2, r, z, curve->n, num_n_words);  /* u2 = r/s */
 801e468:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e46c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 801e470:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e474:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e478:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 801e47c:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e480:	9300      	str	r3, [sp, #0]
 801e482:	4623      	mov	r3, r4
 801e484:	f7fe fa44 	bl	801c910 <mg_uecc_vli_modMult>

  /* Calculate sum = G + Q. */
  mg_uecc_vli_set(sum, _public, num_words);
 801e488:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e48c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 801e490:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801e494:	4618      	mov	r0, r3
 801e496:	f7fd fe2d 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(sum + num_words, _public + num_words, num_words);
 801e49a:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e49e:	009b      	lsls	r3, r3, #2
 801e4a0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e4a4:	18d0      	adds	r0, r2, r3
 801e4a6:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e4aa:	009b      	lsls	r3, r3, #2
 801e4ac:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801e4b0:	4413      	add	r3, r2
 801e4b2:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e4b6:	4619      	mov	r1, r3
 801e4b8:	f7fd fe1c 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(tx, curve->G, num_words);
 801e4bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e4c0:	f103 0144 	add.w	r1, r3, #68	@ 0x44
 801e4c4:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e4c8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 801e4cc:	4618      	mov	r0, r3
 801e4ce:	f7fd fe11 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(ty, curve->G + num_words, num_words);
 801e4d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e4d6:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 801e4da:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e4de:	009b      	lsls	r3, r3, #2
 801e4e0:	18d1      	adds	r1, r2, r3
 801e4e2:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e4e6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e4ea:	4618      	mov	r0, r3
 801e4ec:	f7fd fe02 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_modSub(z, sum, tx, curve->p, num_words); /* z = x2 - x1 */
 801e4f0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e4f4:	1d1c      	adds	r4, r3, #4
 801e4f6:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801e4fa:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801e4fe:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e502:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e506:	9300      	str	r3, [sp, #0]
 801e508:	4623      	mov	r3, r4
 801e50a:	f7fe f8a8 	bl	801c65e <mg_uecc_vli_modSub>
  XYcZ_add(tx, ty, sum, sum + num_words, curve);
 801e50e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e512:	009b      	lsls	r3, r3, #2
 801e514:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e518:	18d4      	adds	r4, r2, r3
 801e51a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e51e:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801e522:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801e526:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e52a:	9300      	str	r3, [sp, #0]
 801e52c:	4623      	mov	r3, r4
 801e52e:	f7fe fedd 	bl	801d2ec <XYcZ_add>
  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* z = 1/z */
 801e532:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e536:	1d1a      	adds	r2, r3, #4
 801e538:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e53c:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 801e540:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e544:	f7fe fa63 	bl	801ca0e <mg_uecc_vli_modInv>
  apply_z(sum, sum + num_words, z, curve);
 801e548:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e54c:	009b      	lsls	r3, r3, #2
 801e54e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e552:	18d1      	adds	r1, r2, r3
 801e554:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e558:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 801e55c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e560:	f7fe fe52 	bl	801d208 <apply_z>

  /* Use Shamir's trick to calculate u1*G + u2*Q */
  points[0] = 0;
 801e564:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e568:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e56c:	2200      	movs	r2, #0
 801e56e:	601a      	str	r2, [r3, #0]
  points[1] = curve->G;
 801e570:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e574:	f103 0244 	add.w	r2, r3, #68	@ 0x44
 801e578:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e57c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e580:	605a      	str	r2, [r3, #4]
  points[2] = _public;
 801e582:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e586:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e58a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801e58e:	609a      	str	r2, [r3, #8]
  points[3] = sum;
 801e590:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e594:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e598:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801e59c:	60da      	str	r2, [r3, #12]
  num_bits = smax(mg_uecc_vli_numBits(u1, num_n_words),
 801e59e:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e5a2:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e5a6:	4611      	mov	r1, r2
 801e5a8:	4618      	mov	r0, r3
 801e5aa:	f7fd fd6a 	bl	801c082 <mg_uecc_vli_numBits>
 801e5ae:	4603      	mov	r3, r0
 801e5b0:	461c      	mov	r4, r3
 801e5b2:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e5b6:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801e5ba:	4611      	mov	r1, r2
 801e5bc:	4618      	mov	r0, r3
 801e5be:	f7fd fd60 	bl	801c082 <mg_uecc_vli_numBits>
 801e5c2:	4603      	mov	r3, r0
 801e5c4:	4619      	mov	r1, r3
 801e5c6:	4620      	mov	r0, r4
 801e5c8:	f7ff fe40 	bl	801e24c <smax>
 801e5cc:	4603      	mov	r3, r0
 801e5ce:	f8a7 31ea 	strh.w	r3, [r7, #490]	@ 0x1ea
                  mg_uecc_vli_numBits(u2, num_n_words));
  point =
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 801e5d2:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801e5d6:	3b01      	subs	r3, #1
 801e5d8:	b29b      	uxth	r3, r3
 801e5da:	b21a      	sxth	r2, r3
 801e5dc:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e5e0:	4611      	mov	r1, r2
 801e5e2:	4618      	mov	r0, r3
 801e5e4:	f7fd fd0d 	bl	801c002 <mg_uecc_vli_testBit>
 801e5e8:	4603      	mov	r3, r0
 801e5ea:	2b00      	cmp	r3, #0
 801e5ec:	bf14      	ite	ne
 801e5ee:	2301      	movne	r3, #1
 801e5f0:	2300      	moveq	r3, #0
 801e5f2:	b2db      	uxtb	r3, r3
 801e5f4:	461c      	mov	r4, r3
             ((!!mg_uecc_vli_testBit(u2, (bitcount_t) (num_bits - 1))) << 1)];
 801e5f6:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801e5fa:	3b01      	subs	r3, #1
 801e5fc:	b29b      	uxth	r3, r3
 801e5fe:	b21a      	sxth	r2, r3
 801e600:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801e604:	4611      	mov	r1, r2
 801e606:	4618      	mov	r0, r3
 801e608:	f7fd fcfb 	bl	801c002 <mg_uecc_vli_testBit>
 801e60c:	4603      	mov	r3, r0
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d001      	beq.n	801e616 <mg_uecc_verify+0x39e>
 801e612:	2302      	movs	r3, #2
 801e614:	e000      	b.n	801e618 <mg_uecc_verify+0x3a0>
 801e616:	2300      	movs	r3, #0
      points[(!!mg_uecc_vli_testBit(u1, (bitcount_t) (num_bits - 1))) |
 801e618:	ea43 0204 	orr.w	r2, r3, r4
  point =
 801e61c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e620:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e628:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
  mg_uecc_vli_set(rx, point, num_words);
 801e62c:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e630:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e634:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 801e638:	4618      	mov	r0, r3
 801e63a:	f7fd fd5b 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_set(ry, point + num_words, num_words);
 801e63e:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e642:	009b      	lsls	r3, r3, #2
 801e644:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801e648:	18d1      	adds	r1, r2, r3
 801e64a:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e64e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 801e652:	4618      	mov	r0, r3
 801e654:	f7fd fd4e 	bl	801c0f4 <mg_uecc_vli_set>
  mg_uecc_vli_clear(z, num_words);
 801e658:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e65c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 801e660:	4611      	mov	r1, r2
 801e662:	4618      	mov	r0, r3
 801e664:	f7fd fc82 	bl	801bf6c <mg_uecc_vli_clear>
  z[0] = 1;
 801e668:	2301      	movs	r3, #1
 801e66a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180

  for (i = num_bits - 2; i >= 0; --i) {
 801e66e:	f8b7 31ea 	ldrh.w	r3, [r7, #490]	@ 0x1ea
 801e672:	3b02      	subs	r3, #2
 801e674:	b29b      	uxth	r3, r3
 801e676:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 801e67a:	e087      	b.n	801e78c <mg_uecc_verify+0x514>
    mg_uecc_word_t index;
    curve->double_jacobian(rx, ry, z, curve);
 801e67c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e680:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 801e684:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e688:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 801e68c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801e690:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e694:	47a0      	blx	r4

    index = (!!mg_uecc_vli_testBit(u1, i)) |
 801e696:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 801e69a:	f507 73e0 	add.w	r3, r7, #448	@ 0x1c0
 801e69e:	4611      	mov	r1, r2
 801e6a0:	4618      	mov	r0, r3
 801e6a2:	f7fd fcae 	bl	801c002 <mg_uecc_vli_testBit>
 801e6a6:	4603      	mov	r3, r0
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	bf14      	ite	ne
 801e6ac:	2301      	movne	r3, #1
 801e6ae:	2300      	moveq	r3, #0
 801e6b0:	b2db      	uxtb	r3, r3
 801e6b2:	461c      	mov	r4, r3
            (mg_uecc_word_t) ((!!mg_uecc_vli_testBit(u2, i)) << 1);
 801e6b4:	f9b7 21ee 	ldrsh.w	r2, [r7, #494]	@ 0x1ee
 801e6b8:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 801e6bc:	4611      	mov	r1, r2
 801e6be:	4618      	mov	r0, r3
 801e6c0:	f7fd fc9f 	bl	801c002 <mg_uecc_vli_testBit>
 801e6c4:	4603      	mov	r3, r0
 801e6c6:	2b00      	cmp	r3, #0
 801e6c8:	d001      	beq.n	801e6ce <mg_uecc_verify+0x456>
 801e6ca:	2302      	movs	r3, #2
 801e6cc:	e000      	b.n	801e6d0 <mg_uecc_verify+0x458>
 801e6ce:	2300      	movs	r3, #0
    index = (!!mg_uecc_vli_testBit(u1, i)) |
 801e6d0:	4323      	orrs	r3, r4
 801e6d2:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
    point = points[index];
 801e6d6:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 801e6da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 801e6de:	f8d7 21e0 	ldr.w	r2, [r7, #480]	@ 0x1e0
 801e6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e6e6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
    if (point) {
 801e6ea:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 801e6ee:	2b00      	cmp	r3, #0
 801e6f0:	d046      	beq.n	801e780 <mg_uecc_verify+0x508>
      mg_uecc_vli_set(tx, point, num_words);
 801e6f2:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e6f6:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 801e6fa:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 801e6fe:	4618      	mov	r0, r3
 801e700:	f7fd fcf8 	bl	801c0f4 <mg_uecc_vli_set>
      mg_uecc_vli_set(ty, point + num_words, num_words);
 801e704:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e708:	009b      	lsls	r3, r3, #2
 801e70a:	f8d7 21e4 	ldr.w	r2, [r7, #484]	@ 0x1e4
 801e70e:	18d1      	adds	r1, r2, r3
 801e710:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e714:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801e718:	4618      	mov	r0, r3
 801e71a:	f7fd fceb 	bl	801c0f4 <mg_uecc_vli_set>
      apply_z(tx, ty, z, curve);
 801e71e:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e722:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801e726:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801e72a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e72e:	f7fe fd6b 	bl	801d208 <apply_z>
      mg_uecc_vli_modSub(tz, rx, tx, curve->p, num_words); /* Z = x2 - x1 */
 801e732:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e736:	1d1c      	adds	r4, r3, #4
 801e738:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 801e73c:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801e740:	f107 00a0 	add.w	r0, r7, #160	@ 0xa0
 801e744:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e748:	9300      	str	r3, [sp, #0]
 801e74a:	4623      	mov	r3, r4
 801e74c:	f7fd ff87 	bl	801c65e <mg_uecc_vli_modSub>
      XYcZ_add(tx, ty, rx, ry, curve);
 801e750:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 801e754:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801e758:	f107 01c0 	add.w	r1, r7, #192	@ 0xc0
 801e75c:	f107 00e0 	add.w	r0, r7, #224	@ 0xe0
 801e760:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e764:	9300      	str	r3, [sp, #0]
 801e766:	4623      	mov	r3, r4
 801e768:	f7fe fdc0 	bl	801d2ec <XYcZ_add>
      mg_uecc_vli_modMult_fast(z, z, tz, curve);
 801e76c:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 801e770:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 801e774:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e778:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e77c:	f7fe f8e3 	bl	801c946 <mg_uecc_vli_modMult_fast>
  for (i = num_bits - 2; i >= 0; --i) {
 801e780:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	@ 0x1ee
 801e784:	3b01      	subs	r3, #1
 801e786:	b29b      	uxth	r3, r3
 801e788:	f8a7 31ee 	strh.w	r3, [r7, #494]	@ 0x1ee
 801e78c:	f9b7 31ee 	ldrsh.w	r3, [r7, #494]	@ 0x1ee
 801e790:	2b00      	cmp	r3, #0
 801e792:	f6bf af73 	bge.w	801e67c <mg_uecc_verify+0x404>
    }
  }

  mg_uecc_vli_modInv(z, z, curve->p, num_words); /* Z = 1/Z */
 801e796:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e79a:	1d1a      	adds	r2, r3, #4
 801e79c:	f997 31ed 	ldrsb.w	r3, [r7, #493]	@ 0x1ed
 801e7a0:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 801e7a4:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 801e7a8:	f7fe f931 	bl	801ca0e <mg_uecc_vli_modInv>
  apply_z(rx, ry, z, curve);
 801e7ac:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 801e7b0:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 801e7b4:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801e7b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e7bc:	f7fe fd24 	bl	801d208 <apply_z>

  /* v = x1 (mod n) */
  if (mg_uecc_vli_cmp_unsafe(curve->n, rx, num_n_words) != 1) {
 801e7c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e7c4:	3324      	adds	r3, #36	@ 0x24
 801e7c6:	f997 21ec 	ldrsb.w	r2, [r7, #492]	@ 0x1ec
 801e7ca:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801e7ce:	4618      	mov	r0, r3
 801e7d0:	f7fd fcb7 	bl	801c142 <mg_uecc_vli_cmp_unsafe>
 801e7d4:	4603      	mov	r3, r0
 801e7d6:	2b01      	cmp	r3, #1
 801e7d8:	d00b      	beq.n	801e7f2 <mg_uecc_verify+0x57a>
    mg_uecc_vli_sub(rx, rx, curve->n, num_n_words);
 801e7da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 801e7de:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 801e7e2:	f997 31ec 	ldrsb.w	r3, [r7, #492]	@ 0x1ec
 801e7e6:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 801e7ea:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 801e7ee:	f7fd fdbb 	bl	801c368 <mg_uecc_vli_sub>
  }

  /* Accept only if v == r. */
  return (int) (mg_uecc_vli_equal(rx, r, num_words));
 801e7f2:	f997 21ed 	ldrsb.w	r2, [r7, #493]	@ 0x1ed
 801e7f6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801e7fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801e7fe:	4618      	mov	r0, r3
 801e800:	f7fd fcdb 	bl	801c1ba <mg_uecc_vli_equal>
 801e804:	4603      	mov	r3, r0
}
 801e806:	4618      	mov	r0, r3
 801e808:	f507 77fa 	add.w	r7, r7, #500	@ 0x1f4
 801e80c:	46bd      	mov	sp, r7
 801e80e:	bd90      	pop	{r4, r7, pc}

0801e810 <umaal>:
typedef int64_t sdlimb_t;

#define NLIMBS (256 / X25519_WBITS)
typedef limb_t mg_fe[NLIMBS];

static limb_t umaal(limb_t *carry, limb_t acc, limb_t mand, limb_t mier) {
 801e810:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e814:	b08f      	sub	sp, #60	@ 0x3c
 801e816:	af00      	add	r7, sp, #0
 801e818:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801e81a:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e81c:	627a      	str	r2, [r7, #36]	@ 0x24
 801e81e:	623b      	str	r3, [r7, #32]
  dlimb_t tmp = (dlimb_t) mand * mier + acc + *carry;
 801e820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e822:	2200      	movs	r2, #0
 801e824:	469a      	mov	sl, r3
 801e826:	4693      	mov	fp, r2
 801e828:	6a3b      	ldr	r3, [r7, #32]
 801e82a:	2200      	movs	r2, #0
 801e82c:	61bb      	str	r3, [r7, #24]
 801e82e:	61fa      	str	r2, [r7, #28]
 801e830:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801e834:	4603      	mov	r3, r0
 801e836:	fb03 f20b 	mul.w	r2, r3, fp
 801e83a:	460b      	mov	r3, r1
 801e83c:	fb0a f303 	mul.w	r3, sl, r3
 801e840:	4413      	add	r3, r2
 801e842:	4602      	mov	r2, r0
 801e844:	fbaa 4502 	umull	r4, r5, sl, r2
 801e848:	442b      	add	r3, r5
 801e84a:	461d      	mov	r5, r3
 801e84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e84e:	2200      	movs	r2, #0
 801e850:	613b      	str	r3, [r7, #16]
 801e852:	617a      	str	r2, [r7, #20]
 801e854:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e858:	460b      	mov	r3, r1
 801e85a:	eb14 0803 	adds.w	r8, r4, r3
 801e85e:	4613      	mov	r3, r2
 801e860:	eb45 0903 	adc.w	r9, r5, r3
 801e864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	2200      	movs	r2, #0
 801e86a:	60bb      	str	r3, [r7, #8]
 801e86c:	60fa      	str	r2, [r7, #12]
 801e86e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e872:	460b      	mov	r3, r1
 801e874:	eb18 0303 	adds.w	r3, r8, r3
 801e878:	603b      	str	r3, [r7, #0]
 801e87a:	4613      	mov	r3, r2
 801e87c:	eb49 0303 	adc.w	r3, r9, r3
 801e880:	607b      	str	r3, [r7, #4]
 801e882:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e886:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
  *carry = (limb_t) (tmp >> X25519_WBITS);
 801e88a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 801e88e:	f04f 0200 	mov.w	r2, #0
 801e892:	f04f 0300 	mov.w	r3, #0
 801e896:	000a      	movs	r2, r1
 801e898:	2300      	movs	r3, #0
 801e89a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e89c:	601a      	str	r2, [r3, #0]
  return (limb_t) tmp;
 801e89e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801e8a0:	4618      	mov	r0, r3
 801e8a2:	373c      	adds	r7, #60	@ 0x3c
 801e8a4:	46bd      	mov	sp, r7
 801e8a6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e8aa:	4770      	bx	lr

0801e8ac <adc>:

// These functions are implemented in terms of umaal on ARM
static limb_t adc(limb_t *carry, limb_t acc, limb_t mand) {
 801e8ac:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e8b0:	b08b      	sub	sp, #44	@ 0x2c
 801e8b2:	af00      	add	r7, sp, #0
 801e8b4:	61f8      	str	r0, [r7, #28]
 801e8b6:	61b9      	str	r1, [r7, #24]
 801e8b8:	617a      	str	r2, [r7, #20]
  dlimb_t total = (dlimb_t) *carry + acc + mand;
 801e8ba:	69fb      	ldr	r3, [r7, #28]
 801e8bc:	681b      	ldr	r3, [r3, #0]
 801e8be:	2200      	movs	r2, #0
 801e8c0:	60bb      	str	r3, [r7, #8]
 801e8c2:	60fa      	str	r2, [r7, #12]
 801e8c4:	69bb      	ldr	r3, [r7, #24]
 801e8c6:	2200      	movs	r2, #0
 801e8c8:	469a      	mov	sl, r3
 801e8ca:	4693      	mov	fp, r2
 801e8cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e8d0:	460b      	mov	r3, r1
 801e8d2:	eb13 040a 	adds.w	r4, r3, sl
 801e8d6:	4613      	mov	r3, r2
 801e8d8:	eb43 050b 	adc.w	r5, r3, fp
 801e8dc:	697b      	ldr	r3, [r7, #20]
 801e8de:	2200      	movs	r2, #0
 801e8e0:	4698      	mov	r8, r3
 801e8e2:	4691      	mov	r9, r2
 801e8e4:	eb14 0308 	adds.w	r3, r4, r8
 801e8e8:	603b      	str	r3, [r7, #0]
 801e8ea:	eb45 0309 	adc.w	r3, r5, r9
 801e8ee:	607b      	str	r3, [r7, #4]
 801e8f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 801e8f4:	e9c7 3408 	strd	r3, r4, [r7, #32]
  *carry = (limb_t) (total >> X25519_WBITS);
 801e8f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801e8fc:	f04f 0200 	mov.w	r2, #0
 801e900:	f04f 0300 	mov.w	r3, #0
 801e904:	000a      	movs	r2, r1
 801e906:	2300      	movs	r3, #0
 801e908:	69fb      	ldr	r3, [r7, #28]
 801e90a:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 801e90c:	6a3b      	ldr	r3, [r7, #32]
}
 801e90e:	4618      	mov	r0, r3
 801e910:	372c      	adds	r7, #44	@ 0x2c
 801e912:	46bd      	mov	sp, r7
 801e914:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801e918:	4770      	bx	lr

0801e91a <adc0>:

static limb_t adc0(limb_t *carry, limb_t acc) {
 801e91a:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 801e91e:	b085      	sub	sp, #20
 801e920:	af00      	add	r7, sp, #0
 801e922:	6078      	str	r0, [r7, #4]
 801e924:	6039      	str	r1, [r7, #0]
  dlimb_t total = (dlimb_t) *carry + acc;
 801e926:	6879      	ldr	r1, [r7, #4]
 801e928:	6809      	ldr	r1, [r1, #0]
 801e92a:	2000      	movs	r0, #0
 801e92c:	460c      	mov	r4, r1
 801e92e:	4605      	mov	r5, r0
 801e930:	6839      	ldr	r1, [r7, #0]
 801e932:	2000      	movs	r0, #0
 801e934:	460a      	mov	r2, r1
 801e936:	4603      	mov	r3, r0
 801e938:	eb14 0802 	adds.w	r8, r4, r2
 801e93c:	eb45 0903 	adc.w	r9, r5, r3
 801e940:	e9c7 8902 	strd	r8, r9, [r7, #8]
  *carry = (limb_t) (total >> X25519_WBITS);
 801e944:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801e948:	f04f 0200 	mov.w	r2, #0
 801e94c:	f04f 0300 	mov.w	r3, #0
 801e950:	000a      	movs	r2, r1
 801e952:	2300      	movs	r3, #0
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	601a      	str	r2, [r3, #0]
  return (limb_t) total;
 801e958:	68bb      	ldr	r3, [r7, #8]
}
 801e95a:	4618      	mov	r0, r3
 801e95c:	3714      	adds	r7, #20
 801e95e:	46bd      	mov	sp, r7
 801e960:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 801e964:	4770      	bx	lr

0801e966 <propagate>:

// - Precondition: carry is small.
// - Invariant: result of propagate is < 2^255 + 1 word
// - In particular, always less than 2p.
// - Also, output x >= min(x,19)
static void propagate(mg_fe x, limb_t over) {
 801e966:	b590      	push	{r4, r7, lr}
 801e968:	b085      	sub	sp, #20
 801e96a:	af00      	add	r7, sp, #0
 801e96c:	6078      	str	r0, [r7, #4]
 801e96e:	6039      	str	r1, [r7, #0]
  unsigned i;
  limb_t carry;
  over = x[NLIMBS - 1] >> (X25519_WBITS - 1) | over << 1;
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	331c      	adds	r3, #28
 801e974:	681b      	ldr	r3, [r3, #0]
 801e976:	0fda      	lsrs	r2, r3, #31
 801e978:	683b      	ldr	r3, [r7, #0]
 801e97a:	005b      	lsls	r3, r3, #1
 801e97c:	4313      	orrs	r3, r2
 801e97e:	603b      	str	r3, [r7, #0]
  x[NLIMBS - 1] &= ~((limb_t) 1 << (X25519_WBITS - 1));
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	331c      	adds	r3, #28
 801e984:	681a      	ldr	r2, [r3, #0]
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	331c      	adds	r3, #28
 801e98a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 801e98e:	601a      	str	r2, [r3, #0]

  carry = over * 19;
 801e990:	683a      	ldr	r2, [r7, #0]
 801e992:	4613      	mov	r3, r2
 801e994:	00db      	lsls	r3, r3, #3
 801e996:	4413      	add	r3, r2
 801e998:	005b      	lsls	r3, r3, #1
 801e99a:	4413      	add	r3, r2
 801e99c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < NLIMBS; i++) {
 801e99e:	2300      	movs	r3, #0
 801e9a0:	60fb      	str	r3, [r7, #12]
 801e9a2:	e012      	b.n	801e9ca <propagate+0x64>
    x[i] = adc0(&carry, x[i]);
 801e9a4:	68fb      	ldr	r3, [r7, #12]
 801e9a6:	009b      	lsls	r3, r3, #2
 801e9a8:	687a      	ldr	r2, [r7, #4]
 801e9aa:	4413      	add	r3, r2
 801e9ac:	6819      	ldr	r1, [r3, #0]
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	009b      	lsls	r3, r3, #2
 801e9b2:	687a      	ldr	r2, [r7, #4]
 801e9b4:	18d4      	adds	r4, r2, r3
 801e9b6:	f107 0308 	add.w	r3, r7, #8
 801e9ba:	4618      	mov	r0, r3
 801e9bc:	f7ff ffad 	bl	801e91a <adc0>
 801e9c0:	4603      	mov	r3, r0
 801e9c2:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 801e9c4:	68fb      	ldr	r3, [r7, #12]
 801e9c6:	3301      	adds	r3, #1
 801e9c8:	60fb      	str	r3, [r7, #12]
 801e9ca:	68fb      	ldr	r3, [r7, #12]
 801e9cc:	2b07      	cmp	r3, #7
 801e9ce:	d9e9      	bls.n	801e9a4 <propagate+0x3e>
  }
}
 801e9d0:	bf00      	nop
 801e9d2:	bf00      	nop
 801e9d4:	3714      	adds	r7, #20
 801e9d6:	46bd      	mov	sp, r7
 801e9d8:	bd90      	pop	{r4, r7, pc}

0801e9da <add>:

static void add(mg_fe out, const mg_fe a, const mg_fe b) {
 801e9da:	b590      	push	{r4, r7, lr}
 801e9dc:	b087      	sub	sp, #28
 801e9de:	af00      	add	r7, sp, #0
 801e9e0:	60f8      	str	r0, [r7, #12]
 801e9e2:	60b9      	str	r1, [r7, #8]
 801e9e4:	607a      	str	r2, [r7, #4]
  unsigned i;
  limb_t carry = 0;
 801e9e6:	2300      	movs	r3, #0
 801e9e8:	613b      	str	r3, [r7, #16]
  for (i = 0; i < NLIMBS; i++) {
 801e9ea:	2300      	movs	r3, #0
 801e9ec:	617b      	str	r3, [r7, #20]
 801e9ee:	e018      	b.n	801ea22 <add+0x48>
    out[i] = adc(&carry, a[i], b[i]);
 801e9f0:	697b      	ldr	r3, [r7, #20]
 801e9f2:	009b      	lsls	r3, r3, #2
 801e9f4:	68ba      	ldr	r2, [r7, #8]
 801e9f6:	4413      	add	r3, r2
 801e9f8:	6819      	ldr	r1, [r3, #0]
 801e9fa:	697b      	ldr	r3, [r7, #20]
 801e9fc:	009b      	lsls	r3, r3, #2
 801e9fe:	687a      	ldr	r2, [r7, #4]
 801ea00:	4413      	add	r3, r2
 801ea02:	6818      	ldr	r0, [r3, #0]
 801ea04:	697b      	ldr	r3, [r7, #20]
 801ea06:	009b      	lsls	r3, r3, #2
 801ea08:	68fa      	ldr	r2, [r7, #12]
 801ea0a:	18d4      	adds	r4, r2, r3
 801ea0c:	f107 0310 	add.w	r3, r7, #16
 801ea10:	4602      	mov	r2, r0
 801ea12:	4618      	mov	r0, r3
 801ea14:	f7ff ff4a 	bl	801e8ac <adc>
 801ea18:	4603      	mov	r3, r0
 801ea1a:	6023      	str	r3, [r4, #0]
  for (i = 0; i < NLIMBS; i++) {
 801ea1c:	697b      	ldr	r3, [r7, #20]
 801ea1e:	3301      	adds	r3, #1
 801ea20:	617b      	str	r3, [r7, #20]
 801ea22:	697b      	ldr	r3, [r7, #20]
 801ea24:	2b07      	cmp	r3, #7
 801ea26:	d9e3      	bls.n	801e9f0 <add+0x16>
  }
  propagate(out, carry);
 801ea28:	693b      	ldr	r3, [r7, #16]
 801ea2a:	4619      	mov	r1, r3
 801ea2c:	68f8      	ldr	r0, [r7, #12]
 801ea2e:	f7ff ff9a 	bl	801e966 <propagate>
}
 801ea32:	bf00      	nop
 801ea34:	371c      	adds	r7, #28
 801ea36:	46bd      	mov	sp, r7
 801ea38:	bd90      	pop	{r4, r7, pc}

0801ea3a <sub>:

static void sub(mg_fe out, const mg_fe a, const mg_fe b) {
 801ea3a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ea3e:	b08a      	sub	sp, #40	@ 0x28
 801ea40:	af00      	add	r7, sp, #0
 801ea42:	6178      	str	r0, [r7, #20]
 801ea44:	6139      	str	r1, [r7, #16]
 801ea46:	60fa      	str	r2, [r7, #12]
  unsigned i;
  sdlimb_t carry = -38;
 801ea48:	f06f 0225 	mvn.w	r2, #37	@ 0x25
 801ea4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ea50:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801ea54:	2300      	movs	r3, #0
 801ea56:	627b      	str	r3, [r7, #36]	@ 0x24
 801ea58:	e032      	b.n	801eac0 <sub+0x86>
    carry = carry + a[i] - b[i];
 801ea5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea5c:	009b      	lsls	r3, r3, #2
 801ea5e:	693a      	ldr	r2, [r7, #16]
 801ea60:	4413      	add	r3, r2
 801ea62:	681b      	ldr	r3, [r3, #0]
 801ea64:	2200      	movs	r2, #0
 801ea66:	4698      	mov	r8, r3
 801ea68:	4691      	mov	r9, r2
 801ea6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ea6e:	eb18 0402 	adds.w	r4, r8, r2
 801ea72:	eb49 0503 	adc.w	r5, r9, r3
 801ea76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea78:	009b      	lsls	r3, r3, #2
 801ea7a:	68fa      	ldr	r2, [r7, #12]
 801ea7c:	4413      	add	r3, r2
 801ea7e:	681b      	ldr	r3, [r3, #0]
 801ea80:	2200      	movs	r2, #0
 801ea82:	469a      	mov	sl, r3
 801ea84:	4693      	mov	fp, r2
 801ea86:	ebb4 030a 	subs.w	r3, r4, sl
 801ea8a:	603b      	str	r3, [r7, #0]
 801ea8c:	eb65 030b 	sbc.w	r3, r5, fp
 801ea90:	607b      	str	r3, [r7, #4]
 801ea92:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ea96:	e9c7 2306 	strd	r2, r3, [r7, #24]
    out[i] = (limb_t) carry;
 801ea9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea9c:	009b      	lsls	r3, r3, #2
 801ea9e:	697a      	ldr	r2, [r7, #20]
 801eaa0:	4413      	add	r3, r2
 801eaa2:	69ba      	ldr	r2, [r7, #24]
 801eaa4:	601a      	str	r2, [r3, #0]
    carry >>= X25519_WBITS;
 801eaa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801eaaa:	f04f 0200 	mov.w	r2, #0
 801eaae:	f04f 0300 	mov.w	r3, #0
 801eab2:	000a      	movs	r2, r1
 801eab4:	17cb      	asrs	r3, r1, #31
 801eab6:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801eaba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eabc:	3301      	adds	r3, #1
 801eabe:	627b      	str	r3, [r7, #36]	@ 0x24
 801eac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eac2:	2b07      	cmp	r3, #7
 801eac4:	d9c9      	bls.n	801ea5a <sub+0x20>
  }
  propagate(out, (limb_t) (1 + carry));
 801eac6:	69bb      	ldr	r3, [r7, #24]
 801eac8:	3301      	adds	r3, #1
 801eaca:	4619      	mov	r1, r3
 801eacc:	6978      	ldr	r0, [r7, #20]
 801eace:	f7ff ff4a 	bl	801e966 <propagate>
}
 801ead2:	bf00      	nop
 801ead4:	3728      	adds	r7, #40	@ 0x28
 801ead6:	46bd      	mov	sp, r7
 801ead8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801eadc <mul>:

// `b` can contain less than 8 limbs, thus we use `limb_t *` instead of `mg_fe`
// to avoid build warnings
static void mul(mg_fe out, const mg_fe a, const limb_t *b, unsigned nb) {
 801eadc:	b5b0      	push	{r4, r5, r7, lr}
 801eade:	b09a      	sub	sp, #104	@ 0x68
 801eae0:	af00      	add	r7, sp, #0
 801eae2:	60f8      	str	r0, [r7, #12]
 801eae4:	60b9      	str	r1, [r7, #8]
 801eae6:	607a      	str	r2, [r7, #4]
 801eae8:	603b      	str	r3, [r7, #0]
  limb_t accum[2 * NLIMBS] = {0};
 801eaea:	f107 031c 	add.w	r3, r7, #28
 801eaee:	2240      	movs	r2, #64	@ 0x40
 801eaf0:	2100      	movs	r1, #0
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	f004 fe53 	bl	802379e <memset>
  unsigned i, j;

  limb_t carry2;
  for (i = 0; i < nb; i++) {
 801eaf8:	2300      	movs	r3, #0
 801eafa:	667b      	str	r3, [r7, #100]	@ 0x64
 801eafc:	e03a      	b.n	801eb74 <mul+0x98>
    limb_t mand = b[i];
 801eafe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801eb00:	009b      	lsls	r3, r3, #2
 801eb02:	687a      	ldr	r2, [r7, #4]
 801eb04:	4413      	add	r3, r2
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    carry2 = 0;
 801eb0a:	2300      	movs	r3, #0
 801eb0c:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < NLIMBS; j++) {
 801eb0e:	2300      	movs	r3, #0
 801eb10:	663b      	str	r3, [r7, #96]	@ 0x60
 801eb12:	e020      	b.n	801eb56 <mul+0x7a>
      limb_t tmp;                        // "a" may be misaligned
      memcpy(&tmp, &a[j], sizeof(tmp));  // So make an aligned copy
 801eb14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb16:	009b      	lsls	r3, r3, #2
 801eb18:	68ba      	ldr	r2, [r7, #8]
 801eb1a:	4413      	add	r3, r2
 801eb1c:	681b      	ldr	r3, [r3, #0]
 801eb1e:	617b      	str	r3, [r7, #20]
      accum[i + j] = umaal(&carry2, accum[i + j], mand, tmp);
 801eb20:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801eb22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb24:	4413      	add	r3, r2
 801eb26:	009b      	lsls	r3, r3, #2
 801eb28:	3368      	adds	r3, #104	@ 0x68
 801eb2a:	443b      	add	r3, r7
 801eb2c:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801eb30:	697d      	ldr	r5, [r7, #20]
 801eb32:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801eb34:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb36:	18d4      	adds	r4, r2, r3
 801eb38:	f107 0018 	add.w	r0, r7, #24
 801eb3c:	462b      	mov	r3, r5
 801eb3e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801eb40:	f7ff fe66 	bl	801e810 <umaal>
 801eb44:	4602      	mov	r2, r0
 801eb46:	00a3      	lsls	r3, r4, #2
 801eb48:	3368      	adds	r3, #104	@ 0x68
 801eb4a:	443b      	add	r3, r7
 801eb4c:	f843 2c4c 	str.w	r2, [r3, #-76]
    for (j = 0; j < NLIMBS; j++) {
 801eb50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb52:	3301      	adds	r3, #1
 801eb54:	663b      	str	r3, [r7, #96]	@ 0x60
 801eb56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb58:	2b07      	cmp	r3, #7
 801eb5a:	d9db      	bls.n	801eb14 <mul+0x38>
    }
    accum[i + j] = carry2;
 801eb5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801eb5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb60:	4413      	add	r3, r2
 801eb62:	69ba      	ldr	r2, [r7, #24]
 801eb64:	009b      	lsls	r3, r3, #2
 801eb66:	3368      	adds	r3, #104	@ 0x68
 801eb68:	443b      	add	r3, r7
 801eb6a:	f843 2c4c 	str.w	r2, [r3, #-76]
  for (i = 0; i < nb; i++) {
 801eb6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801eb70:	3301      	adds	r3, #1
 801eb72:	667b      	str	r3, [r7, #100]	@ 0x64
 801eb74:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801eb76:	683b      	ldr	r3, [r7, #0]
 801eb78:	429a      	cmp	r2, r3
 801eb7a:	d3c0      	bcc.n	801eafe <mul+0x22>
  }

  carry2 = 0;
 801eb7c:	2300      	movs	r3, #0
 801eb7e:	61bb      	str	r3, [r7, #24]
  for (j = 0; j < NLIMBS; j++) {
 801eb80:	2300      	movs	r3, #0
 801eb82:	663b      	str	r3, [r7, #96]	@ 0x60
 801eb84:	e01b      	b.n	801ebbe <mul+0xe2>
    out[j] = umaal(&carry2, accum[j], 38, accum[j + NLIMBS]);
 801eb86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb88:	009b      	lsls	r3, r3, #2
 801eb8a:	3368      	adds	r3, #104	@ 0x68
 801eb8c:	443b      	add	r3, r7
 801eb8e:	f853 1c4c 	ldr.w	r1, [r3, #-76]
 801eb92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eb94:	3308      	adds	r3, #8
 801eb96:	009b      	lsls	r3, r3, #2
 801eb98:	3368      	adds	r3, #104	@ 0x68
 801eb9a:	443b      	add	r3, r7
 801eb9c:	f853 5c4c 	ldr.w	r5, [r3, #-76]
 801eba0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801eba2:	009b      	lsls	r3, r3, #2
 801eba4:	68fa      	ldr	r2, [r7, #12]
 801eba6:	18d4      	adds	r4, r2, r3
 801eba8:	f107 0018 	add.w	r0, r7, #24
 801ebac:	462b      	mov	r3, r5
 801ebae:	2226      	movs	r2, #38	@ 0x26
 801ebb0:	f7ff fe2e 	bl	801e810 <umaal>
 801ebb4:	4603      	mov	r3, r0
 801ebb6:	6023      	str	r3, [r4, #0]
  for (j = 0; j < NLIMBS; j++) {
 801ebb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ebba:	3301      	adds	r3, #1
 801ebbc:	663b      	str	r3, [r7, #96]	@ 0x60
 801ebbe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ebc0:	2b07      	cmp	r3, #7
 801ebc2:	d9e0      	bls.n	801eb86 <mul+0xaa>
  }
  propagate(out, carry2);
 801ebc4:	69bb      	ldr	r3, [r7, #24]
 801ebc6:	4619      	mov	r1, r3
 801ebc8:	68f8      	ldr	r0, [r7, #12]
 801ebca:	f7ff fecc 	bl	801e966 <propagate>
}
 801ebce:	bf00      	nop
 801ebd0:	3768      	adds	r7, #104	@ 0x68
 801ebd2:	46bd      	mov	sp, r7
 801ebd4:	bdb0      	pop	{r4, r5, r7, pc}

0801ebd6 <sqr>:

static void sqr(mg_fe out, const mg_fe a) {
 801ebd6:	b580      	push	{r7, lr}
 801ebd8:	b082      	sub	sp, #8
 801ebda:	af00      	add	r7, sp, #0
 801ebdc:	6078      	str	r0, [r7, #4]
 801ebde:	6039      	str	r1, [r7, #0]
  mul(out, a, a, NLIMBS);
 801ebe0:	2308      	movs	r3, #8
 801ebe2:	683a      	ldr	r2, [r7, #0]
 801ebe4:	6839      	ldr	r1, [r7, #0]
 801ebe6:	6878      	ldr	r0, [r7, #4]
 801ebe8:	f7ff ff78 	bl	801eadc <mul>
}
 801ebec:	bf00      	nop
 801ebee:	3708      	adds	r7, #8
 801ebf0:	46bd      	mov	sp, r7
 801ebf2:	bd80      	pop	{r7, pc}

0801ebf4 <mul1>:
static void mul1(mg_fe out, const mg_fe a) {
 801ebf4:	b580      	push	{r7, lr}
 801ebf6:	b082      	sub	sp, #8
 801ebf8:	af00      	add	r7, sp, #0
 801ebfa:	6078      	str	r0, [r7, #4]
 801ebfc:	6039      	str	r1, [r7, #0]
  mul(out, a, out, NLIMBS);
 801ebfe:	2308      	movs	r3, #8
 801ec00:	687a      	ldr	r2, [r7, #4]
 801ec02:	6839      	ldr	r1, [r7, #0]
 801ec04:	6878      	ldr	r0, [r7, #4]
 801ec06:	f7ff ff69 	bl	801eadc <mul>
}
 801ec0a:	bf00      	nop
 801ec0c:	3708      	adds	r7, #8
 801ec0e:	46bd      	mov	sp, r7
 801ec10:	bd80      	pop	{r7, pc}

0801ec12 <sqr1>:
static void sqr1(mg_fe a) {
 801ec12:	b580      	push	{r7, lr}
 801ec14:	b082      	sub	sp, #8
 801ec16:	af00      	add	r7, sp, #0
 801ec18:	6078      	str	r0, [r7, #4]
  mul1(a, a);
 801ec1a:	6879      	ldr	r1, [r7, #4]
 801ec1c:	6878      	ldr	r0, [r7, #4]
 801ec1e:	f7ff ffe9 	bl	801ebf4 <mul1>
}
 801ec22:	bf00      	nop
 801ec24:	3708      	adds	r7, #8
 801ec26:	46bd      	mov	sp, r7
 801ec28:	bd80      	pop	{r7, pc}

0801ec2a <condswap>:

static void condswap(limb_t a[2 * NLIMBS], limb_t b[2 * NLIMBS],
                     limb_t doswap) {
 801ec2a:	b480      	push	{r7}
 801ec2c:	b087      	sub	sp, #28
 801ec2e:	af00      	add	r7, sp, #0
 801ec30:	60f8      	str	r0, [r7, #12]
 801ec32:	60b9      	str	r1, [r7, #8]
 801ec34:	607a      	str	r2, [r7, #4]
  unsigned i;
  for (i = 0; i < 2 * NLIMBS; i++) {
 801ec36:	2300      	movs	r3, #0
 801ec38:	617b      	str	r3, [r7, #20]
 801ec3a:	e028      	b.n	801ec8e <condswap+0x64>
    limb_t xor_ab = (a[i] ^ b[i]) & doswap;
 801ec3c:	697b      	ldr	r3, [r7, #20]
 801ec3e:	009b      	lsls	r3, r3, #2
 801ec40:	68fa      	ldr	r2, [r7, #12]
 801ec42:	4413      	add	r3, r2
 801ec44:	681a      	ldr	r2, [r3, #0]
 801ec46:	697b      	ldr	r3, [r7, #20]
 801ec48:	009b      	lsls	r3, r3, #2
 801ec4a:	68b9      	ldr	r1, [r7, #8]
 801ec4c:	440b      	add	r3, r1
 801ec4e:	681b      	ldr	r3, [r3, #0]
 801ec50:	4053      	eors	r3, r2
 801ec52:	687a      	ldr	r2, [r7, #4]
 801ec54:	4013      	ands	r3, r2
 801ec56:	613b      	str	r3, [r7, #16]
    a[i] ^= xor_ab;
 801ec58:	697b      	ldr	r3, [r7, #20]
 801ec5a:	009b      	lsls	r3, r3, #2
 801ec5c:	68fa      	ldr	r2, [r7, #12]
 801ec5e:	4413      	add	r3, r2
 801ec60:	6819      	ldr	r1, [r3, #0]
 801ec62:	697b      	ldr	r3, [r7, #20]
 801ec64:	009b      	lsls	r3, r3, #2
 801ec66:	68fa      	ldr	r2, [r7, #12]
 801ec68:	4413      	add	r3, r2
 801ec6a:	693a      	ldr	r2, [r7, #16]
 801ec6c:	404a      	eors	r2, r1
 801ec6e:	601a      	str	r2, [r3, #0]
    b[i] ^= xor_ab;
 801ec70:	697b      	ldr	r3, [r7, #20]
 801ec72:	009b      	lsls	r3, r3, #2
 801ec74:	68ba      	ldr	r2, [r7, #8]
 801ec76:	4413      	add	r3, r2
 801ec78:	6819      	ldr	r1, [r3, #0]
 801ec7a:	697b      	ldr	r3, [r7, #20]
 801ec7c:	009b      	lsls	r3, r3, #2
 801ec7e:	68ba      	ldr	r2, [r7, #8]
 801ec80:	4413      	add	r3, r2
 801ec82:	693a      	ldr	r2, [r7, #16]
 801ec84:	404a      	eors	r2, r1
 801ec86:	601a      	str	r2, [r3, #0]
  for (i = 0; i < 2 * NLIMBS; i++) {
 801ec88:	697b      	ldr	r3, [r7, #20]
 801ec8a:	3301      	adds	r3, #1
 801ec8c:	617b      	str	r3, [r7, #20]
 801ec8e:	697b      	ldr	r3, [r7, #20]
 801ec90:	2b0f      	cmp	r3, #15
 801ec92:	d9d3      	bls.n	801ec3c <condswap+0x12>
  }
}
 801ec94:	bf00      	nop
 801ec96:	bf00      	nop
 801ec98:	371c      	adds	r7, #28
 801ec9a:	46bd      	mov	sp, r7
 801ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca0:	4770      	bx	lr

0801eca2 <canon>:

// Canonicalize a field element x, reducing it to the least residue which is
// congruent to it mod 2^255-19
// - Precondition: x < 2^255 + 1 word
static limb_t canon(mg_fe x) {
 801eca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eca6:	b08b      	sub	sp, #44	@ 0x2c
 801eca8:	af00      	add	r7, sp, #0
 801ecaa:	60f8      	str	r0, [r7, #12]
  // First, add 19.
  unsigned i;
  limb_t carry0 = 19;
 801ecac:	2313      	movs	r3, #19
 801ecae:	617b      	str	r3, [r7, #20]
  limb_t res;
  sdlimb_t carry;
  for (i = 0; i < NLIMBS; i++) {
 801ecb0:	2300      	movs	r3, #0
 801ecb2:	627b      	str	r3, [r7, #36]	@ 0x24
 801ecb4:	e012      	b.n	801ecdc <canon+0x3a>
    x[i] = adc0(&carry0, x[i]);
 801ecb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecb8:	009b      	lsls	r3, r3, #2
 801ecba:	68fa      	ldr	r2, [r7, #12]
 801ecbc:	4413      	add	r3, r2
 801ecbe:	6819      	ldr	r1, [r3, #0]
 801ecc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecc2:	009b      	lsls	r3, r3, #2
 801ecc4:	68fa      	ldr	r2, [r7, #12]
 801ecc6:	18d6      	adds	r6, r2, r3
 801ecc8:	f107 0314 	add.w	r3, r7, #20
 801eccc:	4618      	mov	r0, r3
 801ecce:	f7ff fe24 	bl	801e91a <adc0>
 801ecd2:	4603      	mov	r3, r0
 801ecd4:	6033      	str	r3, [r6, #0]
  for (i = 0; i < NLIMBS; i++) {
 801ecd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecd8:	3301      	adds	r3, #1
 801ecda:	627b      	str	r3, [r7, #36]	@ 0x24
 801ecdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecde:	2b07      	cmp	r3, #7
 801ece0:	d9e9      	bls.n	801ecb6 <canon+0x14>
  }
  propagate(x, carry0);
 801ece2:	697b      	ldr	r3, [r7, #20]
 801ece4:	4619      	mov	r1, r3
 801ece6:	68f8      	ldr	r0, [r7, #12]
 801ece8:	f7ff fe3d 	bl	801e966 <propagate>
  // propagate does anything it adds 19.
  // - We know that the high bit must be clear, because either the input was ~
  // 2^255 + one word + 19 (in which case it propagates to at most 2 words) or
  // it was < 2^255. So now, if we subtract 19, we will get back to something in
  // [0,2^255-19).
  carry = -19;
 801ecec:	f06f 0212 	mvn.w	r2, #18
 801ecf0:	f04f 33ff 	mov.w	r3, #4294967295
 801ecf4:	e9c7 2306 	strd	r2, r3, [r7, #24]
  res = 0;
 801ecf8:	2300      	movs	r3, #0
 801ecfa:	623b      	str	r3, [r7, #32]
  for (i = 0; i < NLIMBS; i++) {
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	627b      	str	r3, [r7, #36]	@ 0x24
 801ed00:	e02a      	b.n	801ed58 <canon+0xb6>
    carry += x[i];
 801ed02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed04:	009b      	lsls	r3, r3, #2
 801ed06:	68fa      	ldr	r2, [r7, #12]
 801ed08:	4413      	add	r3, r2
 801ed0a:	681b      	ldr	r3, [r3, #0]
 801ed0c:	2200      	movs	r2, #0
 801ed0e:	4698      	mov	r8, r3
 801ed10:	4691      	mov	r9, r2
 801ed12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ed16:	eb12 0108 	adds.w	r1, r2, r8
 801ed1a:	6039      	str	r1, [r7, #0]
 801ed1c:	eb43 0309 	adc.w	r3, r3, r9
 801ed20:	607b      	str	r3, [r7, #4]
 801ed22:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ed26:	e9c7 2306 	strd	r2, r3, [r7, #24]
    res |= x[i] = (limb_t) carry;
 801ed2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed2c:	009b      	lsls	r3, r3, #2
 801ed2e:	68fa      	ldr	r2, [r7, #12]
 801ed30:	4413      	add	r3, r2
 801ed32:	69ba      	ldr	r2, [r7, #24]
 801ed34:	601a      	str	r2, [r3, #0]
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	6a3a      	ldr	r2, [r7, #32]
 801ed3a:	4313      	orrs	r3, r2
 801ed3c:	623b      	str	r3, [r7, #32]
    carry >>= X25519_WBITS;
 801ed3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801ed42:	f04f 0200 	mov.w	r2, #0
 801ed46:	f04f 0300 	mov.w	r3, #0
 801ed4a:	000a      	movs	r2, r1
 801ed4c:	17cb      	asrs	r3, r1, #31
 801ed4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
  for (i = 0; i < NLIMBS; i++) {
 801ed52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed54:	3301      	adds	r3, #1
 801ed56:	627b      	str	r3, [r7, #36]	@ 0x24
 801ed58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed5a:	2b07      	cmp	r3, #7
 801ed5c:	d9d1      	bls.n	801ed02 <canon+0x60>
  }
  return (limb_t) (((dlimb_t) res - 1) >> X25519_WBITS);
 801ed5e:	6a3b      	ldr	r3, [r7, #32]
 801ed60:	2200      	movs	r2, #0
 801ed62:	461c      	mov	r4, r3
 801ed64:	4615      	mov	r5, r2
 801ed66:	f114 3aff 	adds.w	sl, r4, #4294967295
 801ed6a:	f145 3bff 	adc.w	fp, r5, #4294967295
 801ed6e:	f04f 0200 	mov.w	r2, #0
 801ed72:	f04f 0300 	mov.w	r3, #0
 801ed76:	465a      	mov	r2, fp
 801ed78:	2300      	movs	r3, #0
 801ed7a:	4613      	mov	r3, r2
}
 801ed7c:	4618      	mov	r0, r3
 801ed7e:	372c      	adds	r7, #44	@ 0x2c
 801ed80:	46bd      	mov	sp, r7
 801ed82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801ed88 <ladder_part1>:

static const limb_t a24[1] = {121665};

static void ladder_part1(mg_fe xs[5]) {
 801ed88:	b580      	push	{r7, lr}
 801ed8a:	b088      	sub	sp, #32
 801ed8c:	af00      	add	r7, sp, #0
 801ed8e:	6078      	str	r0, [r7, #4]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	61fb      	str	r3, [r7, #28]
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	3320      	adds	r3, #32
 801ed98:	61bb      	str	r3, [r7, #24]
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	3340      	adds	r3, #64	@ 0x40
 801ed9e:	617b      	str	r3, [r7, #20]
 801eda0:	687b      	ldr	r3, [r7, #4]
 801eda2:	3360      	adds	r3, #96	@ 0x60
 801eda4:	613b      	str	r3, [r7, #16]
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	3380      	adds	r3, #128	@ 0x80
 801edaa:	60fb      	str	r3, [r7, #12]
  add(t1, x2, z2);                                 // t1 = A
 801edac:	69ba      	ldr	r2, [r7, #24]
 801edae:	69f9      	ldr	r1, [r7, #28]
 801edb0:	68f8      	ldr	r0, [r7, #12]
 801edb2:	f7ff fe12 	bl	801e9da <add>
  sub(z2, x2, z2);                                 // z2 = B
 801edb6:	69ba      	ldr	r2, [r7, #24]
 801edb8:	69f9      	ldr	r1, [r7, #28]
 801edba:	69b8      	ldr	r0, [r7, #24]
 801edbc:	f7ff fe3d 	bl	801ea3a <sub>
  add(x2, x3, z3);                                 // x2 = C
 801edc0:	693a      	ldr	r2, [r7, #16]
 801edc2:	6979      	ldr	r1, [r7, #20]
 801edc4:	69f8      	ldr	r0, [r7, #28]
 801edc6:	f7ff fe08 	bl	801e9da <add>
  sub(z3, x3, z3);                                 // z3 = D
 801edca:	693a      	ldr	r2, [r7, #16]
 801edcc:	6979      	ldr	r1, [r7, #20]
 801edce:	6938      	ldr	r0, [r7, #16]
 801edd0:	f7ff fe33 	bl	801ea3a <sub>
  mul1(z3, t1);                                    // z3 = DA
 801edd4:	68f9      	ldr	r1, [r7, #12]
 801edd6:	6938      	ldr	r0, [r7, #16]
 801edd8:	f7ff ff0c 	bl	801ebf4 <mul1>
  mul1(x2, z2);                                    // x3 = BC
 801eddc:	69b9      	ldr	r1, [r7, #24]
 801edde:	69f8      	ldr	r0, [r7, #28]
 801ede0:	f7ff ff08 	bl	801ebf4 <mul1>
  add(x3, z3, x2);                                 // x3 = DA+CB
 801ede4:	69fa      	ldr	r2, [r7, #28]
 801ede6:	6939      	ldr	r1, [r7, #16]
 801ede8:	6978      	ldr	r0, [r7, #20]
 801edea:	f7ff fdf6 	bl	801e9da <add>
  sub(z3, z3, x2);                                 // z3 = DA-CB
 801edee:	69fa      	ldr	r2, [r7, #28]
 801edf0:	6939      	ldr	r1, [r7, #16]
 801edf2:	6938      	ldr	r0, [r7, #16]
 801edf4:	f7ff fe21 	bl	801ea3a <sub>
  sqr1(t1);                                        // t1 = AA
 801edf8:	68f8      	ldr	r0, [r7, #12]
 801edfa:	f7ff ff0a 	bl	801ec12 <sqr1>
  sqr1(z2);                                        // z2 = BB
 801edfe:	69b8      	ldr	r0, [r7, #24]
 801ee00:	f7ff ff07 	bl	801ec12 <sqr1>
  sub(x2, t1, z2);                                 // x2 = E = AA-BB
 801ee04:	69ba      	ldr	r2, [r7, #24]
 801ee06:	68f9      	ldr	r1, [r7, #12]
 801ee08:	69f8      	ldr	r0, [r7, #28]
 801ee0a:	f7ff fe16 	bl	801ea3a <sub>
  mul(z2, x2, a24, sizeof(a24) / sizeof(a24[0]));  // z2 = E*a24
 801ee0e:	2301      	movs	r3, #1
 801ee10:	4a06      	ldr	r2, [pc, #24]	@ (801ee2c <ladder_part1+0xa4>)
 801ee12:	69f9      	ldr	r1, [r7, #28]
 801ee14:	69b8      	ldr	r0, [r7, #24]
 801ee16:	f7ff fe61 	bl	801eadc <mul>
  add(z2, z2, t1);                                 // z2 = E*a24 + AA
 801ee1a:	68fa      	ldr	r2, [r7, #12]
 801ee1c:	69b9      	ldr	r1, [r7, #24]
 801ee1e:	69b8      	ldr	r0, [r7, #24]
 801ee20:	f7ff fddb 	bl	801e9da <add>
}
 801ee24:	bf00      	nop
 801ee26:	3720      	adds	r7, #32
 801ee28:	46bd      	mov	sp, r7
 801ee2a:	bd80      	pop	{r7, pc}
 801ee2c:	08027fec 	.word	0x08027fec

0801ee30 <ladder_part2>:

static void ladder_part2(mg_fe xs[5], const mg_fe x1) {
 801ee30:	b580      	push	{r7, lr}
 801ee32:	b088      	sub	sp, #32
 801ee34:	af00      	add	r7, sp, #0
 801ee36:	6078      	str	r0, [r7, #4]
 801ee38:	6039      	str	r1, [r7, #0]
  limb_t *x2 = xs[0], *z2 = xs[1], *x3 = xs[2], *z3 = xs[3], *t1 = xs[4];
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	61fb      	str	r3, [r7, #28]
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	3320      	adds	r3, #32
 801ee42:	61bb      	str	r3, [r7, #24]
 801ee44:	687b      	ldr	r3, [r7, #4]
 801ee46:	3340      	adds	r3, #64	@ 0x40
 801ee48:	617b      	str	r3, [r7, #20]
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	3360      	adds	r3, #96	@ 0x60
 801ee4e:	613b      	str	r3, [r7, #16]
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	3380      	adds	r3, #128	@ 0x80
 801ee54:	60fb      	str	r3, [r7, #12]
  sqr1(z3);         // z3 = (DA-CB)^2
 801ee56:	6938      	ldr	r0, [r7, #16]
 801ee58:	f7ff fedb 	bl	801ec12 <sqr1>
  mul1(z3, x1);     // z3 = x1 * (DA-CB)^2
 801ee5c:	6839      	ldr	r1, [r7, #0]
 801ee5e:	6938      	ldr	r0, [r7, #16]
 801ee60:	f7ff fec8 	bl	801ebf4 <mul1>
  sqr1(x3);         // x3 = (DA+CB)^2
 801ee64:	6978      	ldr	r0, [r7, #20]
 801ee66:	f7ff fed4 	bl	801ec12 <sqr1>
  mul1(z2, x2);     // z2 = AA*(E*a24+AA)
 801ee6a:	69f9      	ldr	r1, [r7, #28]
 801ee6c:	69b8      	ldr	r0, [r7, #24]
 801ee6e:	f7ff fec1 	bl	801ebf4 <mul1>
  sub(x2, t1, x2);  // x2 = BB again
 801ee72:	69fa      	ldr	r2, [r7, #28]
 801ee74:	68f9      	ldr	r1, [r7, #12]
 801ee76:	69f8      	ldr	r0, [r7, #28]
 801ee78:	f7ff fddf 	bl	801ea3a <sub>
  mul1(x2, t1);     // x2 = AA*BB
 801ee7c:	68f9      	ldr	r1, [r7, #12]
 801ee7e:	69f8      	ldr	r0, [r7, #28]
 801ee80:	f7ff feb8 	bl	801ebf4 <mul1>
}
 801ee84:	bf00      	nop
 801ee86:	3720      	adds	r7, #32
 801ee88:	46bd      	mov	sp, r7
 801ee8a:	bd80      	pop	{r7, pc}

0801ee8c <x25519_core>:

static void x25519_core(mg_fe xs[5], const uint8_t scalar[X25519_BYTES],
                        const uint8_t *x1, int clamp) {
 801ee8c:	b580      	push	{r7, lr}
 801ee8e:	b094      	sub	sp, #80	@ 0x50
 801ee90:	af00      	add	r7, sp, #0
 801ee92:	60f8      	str	r0, [r7, #12]
 801ee94:	60b9      	str	r1, [r7, #8]
 801ee96:	607a      	str	r2, [r7, #4]
 801ee98:	603b      	str	r3, [r7, #0]
  int i;
  mg_fe x1_limbs;
  limb_t swap = 0;
 801ee9a:	2300      	movs	r3, #0
 801ee9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  limb_t *x2 = xs[0], *x3 = xs[2], *z3 = xs[3];
 801ee9e:	68fb      	ldr	r3, [r7, #12]
 801eea0:	643b      	str	r3, [r7, #64]	@ 0x40
 801eea2:	68fb      	ldr	r3, [r7, #12]
 801eea4:	3340      	adds	r3, #64	@ 0x40
 801eea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	3360      	adds	r3, #96	@ 0x60
 801eeac:	63bb      	str	r3, [r7, #56]	@ 0x38
  memset(xs, 0, 4 * sizeof(mg_fe));
 801eeae:	2280      	movs	r2, #128	@ 0x80
 801eeb0:	2100      	movs	r1, #0
 801eeb2:	68f8      	ldr	r0, [r7, #12]
 801eeb4:	f004 fc73 	bl	802379e <memset>
  x2[0] = z3[0] = 1;
 801eeb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eeba:	2201      	movs	r2, #1
 801eebc:	601a      	str	r2, [r3, #0]
 801eebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eec0:	681a      	ldr	r2, [r3, #0]
 801eec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801eec4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 801eec6:	2300      	movs	r3, #0
 801eec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801eeca:	e031      	b.n	801ef30 <x25519_core+0xa4>
    x3[i] = x1_limbs[i] =
        MG_U32(x1[i * 4 + 3], x1[i * 4 + 2], x1[i * 4 + 1], x1[i * 4]);
 801eecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eece:	009b      	lsls	r3, r3, #2
 801eed0:	3303      	adds	r3, #3
 801eed2:	687a      	ldr	r2, [r7, #4]
 801eed4:	4413      	add	r3, r2
 801eed6:	781b      	ldrb	r3, [r3, #0]
 801eed8:	061a      	lsls	r2, r3, #24
 801eeda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eedc:	009b      	lsls	r3, r3, #2
 801eede:	3302      	adds	r3, #2
 801eee0:	6879      	ldr	r1, [r7, #4]
 801eee2:	440b      	add	r3, r1
 801eee4:	781b      	ldrb	r3, [r3, #0]
 801eee6:	041b      	lsls	r3, r3, #16
 801eee8:	431a      	orrs	r2, r3
 801eeea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801eeec:	009b      	lsls	r3, r3, #2
 801eeee:	3301      	adds	r3, #1
 801eef0:	6879      	ldr	r1, [r7, #4]
 801eef2:	440b      	add	r3, r1
 801eef4:	781b      	ldrb	r3, [r3, #0]
 801eef6:	021b      	lsls	r3, r3, #8
 801eef8:	4313      	orrs	r3, r2
 801eefa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801eefc:	0092      	lsls	r2, r2, #2
 801eefe:	4611      	mov	r1, r2
 801ef00:	687a      	ldr	r2, [r7, #4]
 801ef02:	440a      	add	r2, r1
 801ef04:	7812      	ldrb	r2, [r2, #0]
 801ef06:	431a      	orrs	r2, r3
    x3[i] = x1_limbs[i] =
 801ef08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef0a:	009b      	lsls	r3, r3, #2
 801ef0c:	3350      	adds	r3, #80	@ 0x50
 801ef0e:	443b      	add	r3, r7
 801ef10:	f843 2c3c 	str.w	r2, [r3, #-60]
 801ef14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef16:	009b      	lsls	r3, r3, #2
 801ef18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801ef1a:	441a      	add	r2, r3
 801ef1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef1e:	009b      	lsls	r3, r3, #2
 801ef20:	3350      	adds	r3, #80	@ 0x50
 801ef22:	443b      	add	r3, r7
 801ef24:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 801ef28:	6013      	str	r3, [r2, #0]
  for (i = 0; i < NLIMBS; i++) {
 801ef2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef2c:	3301      	adds	r3, #1
 801ef2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ef30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef32:	2b07      	cmp	r3, #7
 801ef34:	ddca      	ble.n	801eecc <x25519_core+0x40>
  }

  for (i = 255; i >= 0; i--) {
 801ef36:	23ff      	movs	r3, #255	@ 0xff
 801ef38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801ef3a:	e049      	b.n	801efd0 <x25519_core+0x144>
    uint8_t bytei = scalar[i / 8];
 801ef3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef3e:	2b00      	cmp	r3, #0
 801ef40:	da00      	bge.n	801ef44 <x25519_core+0xb8>
 801ef42:	3307      	adds	r3, #7
 801ef44:	10db      	asrs	r3, r3, #3
 801ef46:	461a      	mov	r2, r3
 801ef48:	68bb      	ldr	r3, [r7, #8]
 801ef4a:	4413      	add	r3, r2
 801ef4c:	781b      	ldrb	r3, [r3, #0]
 801ef4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    limb_t doswap;
    if (clamp) {
 801ef52:	683b      	ldr	r3, [r7, #0]
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d01a      	beq.n	801ef8e <x25519_core+0x102>
      if (i / 8 == 0) {
 801ef58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef5a:	3307      	adds	r3, #7
 801ef5c:	2b0e      	cmp	r3, #14
 801ef5e:	d806      	bhi.n	801ef6e <x25519_core+0xe2>
        bytei &= (uint8_t) ~7U;
 801ef60:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ef64:	f023 0307 	bic.w	r3, r3, #7
 801ef68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801ef6c:	e00f      	b.n	801ef8e <x25519_core+0x102>
      } else if (i / 8 == X25519_BYTES - 1) {
 801ef6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef70:	3bf8      	subs	r3, #248	@ 0xf8
 801ef72:	2b07      	cmp	r3, #7
 801ef74:	d80b      	bhi.n	801ef8e <x25519_core+0x102>
        bytei &= 0x7F;
 801ef76:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ef7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ef7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        bytei |= 0x40;
 801ef82:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801ef86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ef8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
    doswap = 0 - (limb_t) ((bytei >> (i % 8)) & 1);
 801ef8e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 801ef92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ef94:	f003 0307 	and.w	r3, r3, #7
 801ef98:	fa42 f303 	asr.w	r3, r2, r3
 801ef9c:	f003 0301 	and.w	r3, r3, #1
 801efa0:	425b      	negs	r3, r3
 801efa2:	637b      	str	r3, [r7, #52]	@ 0x34
    condswap(x2, x3, swap ^ doswap);
 801efa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801efa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efa8:	4053      	eors	r3, r2
 801efaa:	461a      	mov	r2, r3
 801efac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801efae:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801efb0:	f7ff fe3b 	bl	801ec2a <condswap>
    swap = doswap;
 801efb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efb6:	64bb      	str	r3, [r7, #72]	@ 0x48

    ladder_part1(xs);
 801efb8:	68f8      	ldr	r0, [r7, #12]
 801efba:	f7ff fee5 	bl	801ed88 <ladder_part1>
    ladder_part2(xs, (const limb_t *) x1_limbs);
 801efbe:	f107 0314 	add.w	r3, r7, #20
 801efc2:	4619      	mov	r1, r3
 801efc4:	68f8      	ldr	r0, [r7, #12]
 801efc6:	f7ff ff33 	bl	801ee30 <ladder_part2>
  for (i = 255; i >= 0; i--) {
 801efca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efcc:	3b01      	subs	r3, #1
 801efce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801efd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801efd2:	2b00      	cmp	r3, #0
 801efd4:	dab2      	bge.n	801ef3c <x25519_core+0xb0>
  }
  condswap(x2, x3, swap);
 801efd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801efd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801efda:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801efdc:	f7ff fe25 	bl	801ec2a <condswap>
}
 801efe0:	bf00      	nop
 801efe2:	3750      	adds	r7, #80	@ 0x50
 801efe4:	46bd      	mov	sp, r7
 801efe6:	bd80      	pop	{r7, pc}

0801efe8 <mg_tls_x25519>:

int mg_tls_x25519(uint8_t out[X25519_BYTES], const uint8_t scalar[X25519_BYTES],
                  const uint8_t x1[X25519_BYTES], int clamp) {
 801efe8:	b580      	push	{r7, lr}
 801efea:	b0be      	sub	sp, #248	@ 0xf8
 801efec:	af00      	add	r7, sp, #0
 801efee:	60f8      	str	r0, [r7, #12]
 801eff0:	60b9      	str	r1, [r7, #8]
 801eff2:	607a      	str	r2, [r7, #4]
 801eff4:	603b      	str	r3, [r7, #0]
  static const struct {
    uint8_t a, c, n;
  } steps[13] = {{2, 1, 1},  {2, 1, 1},  {4, 2, 3},  {2, 4, 6},  {3, 1, 1},
                 {3, 2, 12}, {4, 3, 25}, {2, 3, 25}, {2, 4, 50}, {3, 2, 125},
                 {3, 1, 2},  {3, 1, 2},  {3, 1, 1}};
  x25519_core(xs, scalar, x1, clamp);
 801eff6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 801effa:	683b      	ldr	r3, [r7, #0]
 801effc:	687a      	ldr	r2, [r7, #4]
 801effe:	68b9      	ldr	r1, [r7, #8]
 801f000:	f7ff ff44 	bl	801ee8c <x25519_core>

  // Precomputed inversion chain
  x2 = xs[0];
 801f004:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f008:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  z2 = xs[1];
 801f00c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f010:	3320      	adds	r3, #32
 801f012:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  z3 = xs[3];
 801f016:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801f01a:	3360      	adds	r3, #96	@ 0x60
 801f01c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  prev = z2;
 801f020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801f024:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  for (i = 0; i < 13; i++) {
 801f028:	2300      	movs	r3, #0
 801f02a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801f02e:	e043      	b.n	801f0b8 <mg_tls_x25519+0xd0>
    int j;
    limb_t *a = xs[steps[i].a];
 801f030:	4952      	ldr	r1, [pc, #328]	@ (801f17c <mg_tls_x25519+0x194>)
 801f032:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801f036:	4613      	mov	r3, r2
 801f038:	005b      	lsls	r3, r3, #1
 801f03a:	4413      	add	r3, r2
 801f03c:	440b      	add	r3, r1
 801f03e:	781b      	ldrb	r3, [r3, #0]
 801f040:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f044:	015b      	lsls	r3, r3, #5
 801f046:	4413      	add	r3, r2
 801f048:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    for (j = steps[i].n; j > 0; j--) {
 801f04c:	494b      	ldr	r1, [pc, #300]	@ (801f17c <mg_tls_x25519+0x194>)
 801f04e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801f052:	4613      	mov	r3, r2
 801f054:	005b      	lsls	r3, r3, #1
 801f056:	4413      	add	r3, r2
 801f058:	440b      	add	r3, r1
 801f05a:	3302      	adds	r3, #2
 801f05c:	781b      	ldrb	r3, [r3, #0]
 801f05e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801f062:	e00e      	b.n	801f082 <mg_tls_x25519+0x9a>
      sqr(a, prev);
 801f064:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 801f068:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 801f06c:	f7ff fdb3 	bl	801ebd6 <sqr>
      prev = a;
 801f070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801f074:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    for (j = steps[i].n; j > 0; j--) {
 801f078:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801f07c:	3b01      	subs	r3, #1
 801f07e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801f082:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 801f086:	2b00      	cmp	r3, #0
 801f088:	dcec      	bgt.n	801f064 <mg_tls_x25519+0x7c>
    }
    mul1(a, xs[steps[i].c]);
 801f08a:	493c      	ldr	r1, [pc, #240]	@ (801f17c <mg_tls_x25519+0x194>)
 801f08c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 801f090:	4613      	mov	r3, r2
 801f092:	005b      	lsls	r3, r3, #1
 801f094:	4413      	add	r3, r2
 801f096:	440b      	add	r3, r1
 801f098:	3301      	adds	r3, #1
 801f09a:	781b      	ldrb	r3, [r3, #0]
 801f09c:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 801f0a0:	015b      	lsls	r3, r3, #5
 801f0a2:	4413      	add	r3, r2
 801f0a4:	4619      	mov	r1, r3
 801f0a6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	@ 0xd4
 801f0aa:	f7ff fda3 	bl	801ebf4 <mul1>
  for (i = 0; i < 13; i++) {
 801f0ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f0b2:	3301      	adds	r3, #1
 801f0b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801f0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f0bc:	2b0c      	cmp	r3, #12
 801f0be:	ddb7      	ble.n	801f030 <mg_tls_x25519+0x48>
  }

  // Here prev = z3
  // x2 /= z2
  mul(out_limbs, x2, z3, NLIMBS);
 801f0c0:	f107 0014 	add.w	r0, r7, #20
 801f0c4:	2308      	movs	r3, #8
 801f0c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801f0ca:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 801f0ce:	f7ff fd05 	bl	801eadc <mul>
  ret = (int) canon(out_limbs);
 801f0d2:	f107 0314 	add.w	r3, r7, #20
 801f0d6:	4618      	mov	r0, r3
 801f0d8:	f7ff fde3 	bl	801eca2 <canon>
 801f0dc:	4603      	mov	r3, r0
 801f0de:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (!clamp) ret = 0;
 801f0e2:	683b      	ldr	r3, [r7, #0]
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	d102      	bne.n	801f0ee <mg_tls_x25519+0x106>
 801f0e8:	2300      	movs	r3, #0
 801f0ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  for (i = 0; i < NLIMBS; i++) {
 801f0ee:	2300      	movs	r3, #0
 801f0f0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801f0f4:	e038      	b.n	801f168 <mg_tls_x25519+0x180>
    uint32_t n = out_limbs[i];
 801f0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f0fa:	009b      	lsls	r3, r3, #2
 801f0fc:	33f8      	adds	r3, #248	@ 0xf8
 801f0fe:	443b      	add	r3, r7
 801f100:	f853 3ce4 	ldr.w	r3, [r3, #-228]
 801f104:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    out[i * 4] = (uint8_t) (n & 0xff);
 801f108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f10c:	009b      	lsls	r3, r3, #2
 801f10e:	461a      	mov	r2, r3
 801f110:	68fb      	ldr	r3, [r7, #12]
 801f112:	4413      	add	r3, r2
 801f114:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801f118:	b2d2      	uxtb	r2, r2
 801f11a:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 1] = (uint8_t) ((n >> 8) & 0xff);
 801f11c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801f120:	0a19      	lsrs	r1, r3, #8
 801f122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f126:	009b      	lsls	r3, r3, #2
 801f128:	3301      	adds	r3, #1
 801f12a:	68fa      	ldr	r2, [r7, #12]
 801f12c:	4413      	add	r3, r2
 801f12e:	b2ca      	uxtb	r2, r1
 801f130:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 2] = (uint8_t) ((n >> 16) & 0xff);
 801f132:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801f136:	0c19      	lsrs	r1, r3, #16
 801f138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f13c:	009b      	lsls	r3, r3, #2
 801f13e:	3302      	adds	r3, #2
 801f140:	68fa      	ldr	r2, [r7, #12]
 801f142:	4413      	add	r3, r2
 801f144:	b2ca      	uxtb	r2, r1
 801f146:	701a      	strb	r2, [r3, #0]
    out[i * 4 + 3] = (uint8_t) ((n >> 24) & 0xff);
 801f148:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801f14c:	0e19      	lsrs	r1, r3, #24
 801f14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f152:	009b      	lsls	r3, r3, #2
 801f154:	3303      	adds	r3, #3
 801f156:	68fa      	ldr	r2, [r7, #12]
 801f158:	4413      	add	r3, r2
 801f15a:	b2ca      	uxtb	r2, r1
 801f15c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NLIMBS; i++) {
 801f15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f162:	3301      	adds	r3, #1
 801f164:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801f168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801f16c:	2b07      	cmp	r3, #7
 801f16e:	ddc2      	ble.n	801f0f6 <mg_tls_x25519+0x10e>
  }
  return ret;
 801f170:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
}
 801f174:	4618      	mov	r0, r3
 801f176:	37f8      	adds	r7, #248	@ 0xf8
 801f178:	46bd      	mov	sp, r7
 801f17a:	bd80      	pop	{r7, pc}
 801f17c:	08028318 	.word	0x08028318

0801f180 <mg_url_is_ssl>:

struct url {
  size_t key, user, pass, host, port, uri, end;
};

int mg_url_is_ssl(const char *url) {
 801f180:	b580      	push	{r7, lr}
 801f182:	b082      	sub	sp, #8
 801f184:	af00      	add	r7, sp, #0
 801f186:	6078      	str	r0, [r7, #4]
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801f188:	2204      	movs	r2, #4
 801f18a:	491b      	ldr	r1, [pc, #108]	@ (801f1f8 <mg_url_is_ssl+0x78>)
 801f18c:	6878      	ldr	r0, [r7, #4]
 801f18e:	f004 fb1b 	bl	80237c8 <strncmp>
 801f192:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801f194:	2b00      	cmp	r3, #0
 801f196:	d027      	beq.n	801f1e8 <mg_url_is_ssl+0x68>
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801f198:	2206      	movs	r2, #6
 801f19a:	4918      	ldr	r1, [pc, #96]	@ (801f1fc <mg_url_is_ssl+0x7c>)
 801f19c:	6878      	ldr	r0, [r7, #4]
 801f19e:	f004 fb13 	bl	80237c8 <strncmp>
 801f1a2:	4603      	mov	r3, r0
 801f1a4:	2b00      	cmp	r3, #0
 801f1a6:	d01f      	beq.n	801f1e8 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801f1a8:	2206      	movs	r2, #6
 801f1aa:	4915      	ldr	r1, [pc, #84]	@ (801f200 <mg_url_is_ssl+0x80>)
 801f1ac:	6878      	ldr	r0, [r7, #4]
 801f1ae:	f004 fb0b 	bl	80237c8 <strncmp>
 801f1b2:	4603      	mov	r3, r0
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	d017      	beq.n	801f1e8 <mg_url_is_ssl+0x68>
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801f1b8:	2204      	movs	r2, #4
 801f1ba:	4912      	ldr	r1, [pc, #72]	@ (801f204 <mg_url_is_ssl+0x84>)
 801f1bc:	6878      	ldr	r0, [r7, #4]
 801f1be:	f004 fb03 	bl	80237c8 <strncmp>
 801f1c2:	4603      	mov	r3, r0
 801f1c4:	2b00      	cmp	r3, #0
 801f1c6:	d00f      	beq.n	801f1e8 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801f1c8:	2204      	movs	r2, #4
 801f1ca:	490f      	ldr	r1, [pc, #60]	@ (801f208 <mg_url_is_ssl+0x88>)
 801f1cc:	6878      	ldr	r0, [r7, #4]
 801f1ce:	f004 fafb 	bl	80237c8 <strncmp>
 801f1d2:	4603      	mov	r3, r0
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	d007      	beq.n	801f1e8 <mg_url_is_ssl+0x68>
         strncmp(url, "tls:", 4) == 0 || strncmp(url, "tcps:", 5) == 0;
 801f1d8:	2205      	movs	r2, #5
 801f1da:	490c      	ldr	r1, [pc, #48]	@ (801f20c <mg_url_is_ssl+0x8c>)
 801f1dc:	6878      	ldr	r0, [r7, #4]
 801f1de:	f004 faf3 	bl	80237c8 <strncmp>
 801f1e2:	4603      	mov	r3, r0
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d101      	bne.n	801f1ec <mg_url_is_ssl+0x6c>
 801f1e8:	2301      	movs	r3, #1
 801f1ea:	e000      	b.n	801f1ee <mg_url_is_ssl+0x6e>
 801f1ec:	2300      	movs	r3, #0
}
 801f1ee:	4618      	mov	r0, r3
 801f1f0:	3708      	adds	r7, #8
 801f1f2:	46bd      	mov	sp, r7
 801f1f4:	bd80      	pop	{r7, pc}
 801f1f6:	bf00      	nop
 801f1f8:	08026be0 	.word	0x08026be0
 801f1fc:	08026be8 	.word	0x08026be8
 801f200:	08026bf0 	.word	0x08026bf0
 801f204:	08026bf8 	.word	0x08026bf8
 801f208:	08026c00 	.word	0x08026c00
 801f20c:	08026c08 	.word	0x08026c08

0801f210 <urlparse>:

static struct url urlparse(const char *url) {
 801f210:	b5b0      	push	{r4, r5, r7, lr}
 801f212:	b08a      	sub	sp, #40	@ 0x28
 801f214:	af00      	add	r7, sp, #0
 801f216:	6078      	str	r0, [r7, #4]
 801f218:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 801f21a:	f107 0308 	add.w	r3, r7, #8
 801f21e:	221c      	movs	r2, #28
 801f220:	2100      	movs	r1, #0
 801f222:	4618      	mov	r0, r3
 801f224:	f004 fabb 	bl	802379e <memset>
  for (i = 0; url[i] != '\0'; i++) {
 801f228:	2300      	movs	r3, #0
 801f22a:	627b      	str	r3, [r7, #36]	@ 0x24
 801f22c:	e05b      	b.n	801f2e6 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 801f22e:	683a      	ldr	r2, [r7, #0]
 801f230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f232:	4413      	add	r3, r2
 801f234:	781b      	ldrb	r3, [r3, #0]
 801f236:	2b2f      	cmp	r3, #47	@ 0x2f
 801f238:	d112      	bne.n	801f260 <urlparse+0x50>
 801f23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f23c:	2b00      	cmp	r3, #0
 801f23e:	d00f      	beq.n	801f260 <urlparse+0x50>
 801f240:	697b      	ldr	r3, [r7, #20]
 801f242:	2b00      	cmp	r3, #0
 801f244:	d10c      	bne.n	801f260 <urlparse+0x50>
 801f246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f248:	3b01      	subs	r3, #1
 801f24a:	683a      	ldr	r2, [r7, #0]
 801f24c:	4413      	add	r3, r2
 801f24e:	781b      	ldrb	r3, [r3, #0]
 801f250:	2b2f      	cmp	r3, #47	@ 0x2f
 801f252:	d105      	bne.n	801f260 <urlparse+0x50>
      u.host = i + 1;
 801f254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f256:	3301      	adds	r3, #1
 801f258:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801f25a:	2300      	movs	r3, #0
 801f25c:	61bb      	str	r3, [r7, #24]
 801f25e:	e03f      	b.n	801f2e0 <urlparse+0xd0>
    } else if (url[i] == ']') {
 801f260:	683a      	ldr	r2, [r7, #0]
 801f262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f264:	4413      	add	r3, r2
 801f266:	781b      	ldrb	r3, [r3, #0]
 801f268:	2b5d      	cmp	r3, #93	@ 0x5d
 801f26a:	d102      	bne.n	801f272 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 801f26c:	2300      	movs	r3, #0
 801f26e:	61bb      	str	r3, [r7, #24]
 801f270:	e036      	b.n	801f2e0 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 801f272:	683a      	ldr	r2, [r7, #0]
 801f274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f276:	4413      	add	r3, r2
 801f278:	781b      	ldrb	r3, [r3, #0]
 801f27a:	2b3a      	cmp	r3, #58	@ 0x3a
 801f27c:	d109      	bne.n	801f292 <urlparse+0x82>
 801f27e:	69bb      	ldr	r3, [r7, #24]
 801f280:	2b00      	cmp	r3, #0
 801f282:	d106      	bne.n	801f292 <urlparse+0x82>
 801f284:	69fb      	ldr	r3, [r7, #28]
 801f286:	2b00      	cmp	r3, #0
 801f288:	d103      	bne.n	801f292 <urlparse+0x82>
      u.port = i + 1;
 801f28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f28c:	3301      	adds	r3, #1
 801f28e:	61bb      	str	r3, [r7, #24]
 801f290:	e026      	b.n	801f2e0 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 801f292:	683a      	ldr	r2, [r7, #0]
 801f294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f296:	4413      	add	r3, r2
 801f298:	781b      	ldrb	r3, [r3, #0]
 801f29a:	2b40      	cmp	r3, #64	@ 0x40
 801f29c:	d112      	bne.n	801f2c4 <urlparse+0xb4>
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	d10f      	bne.n	801f2c4 <urlparse+0xb4>
 801f2a4:	693b      	ldr	r3, [r7, #16]
 801f2a6:	2b00      	cmp	r3, #0
 801f2a8:	d10c      	bne.n	801f2c4 <urlparse+0xb4>
 801f2aa:	69fb      	ldr	r3, [r7, #28]
 801f2ac:	2b00      	cmp	r3, #0
 801f2ae:	d109      	bne.n	801f2c4 <urlparse+0xb4>
      u.user = u.host;
 801f2b0:	697b      	ldr	r3, [r7, #20]
 801f2b2:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 801f2b4:	69bb      	ldr	r3, [r7, #24]
 801f2b6:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 801f2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2ba:	3301      	adds	r3, #1
 801f2bc:	617b      	str	r3, [r7, #20]
      u.port = 0;
 801f2be:	2300      	movs	r3, #0
 801f2c0:	61bb      	str	r3, [r7, #24]
 801f2c2:	e00d      	b.n	801f2e0 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 801f2c4:	683a      	ldr	r2, [r7, #0]
 801f2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2c8:	4413      	add	r3, r2
 801f2ca:	781b      	ldrb	r3, [r3, #0]
 801f2cc:	2b2f      	cmp	r3, #47	@ 0x2f
 801f2ce:	d107      	bne.n	801f2e0 <urlparse+0xd0>
 801f2d0:	697b      	ldr	r3, [r7, #20]
 801f2d2:	2b00      	cmp	r3, #0
 801f2d4:	d004      	beq.n	801f2e0 <urlparse+0xd0>
 801f2d6:	69fb      	ldr	r3, [r7, #28]
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d101      	bne.n	801f2e0 <urlparse+0xd0>
      u.uri = i;
 801f2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2de:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 801f2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2e2:	3301      	adds	r3, #1
 801f2e4:	627b      	str	r3, [r7, #36]	@ 0x24
 801f2e6:	683a      	ldr	r2, [r7, #0]
 801f2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2ea:	4413      	add	r3, r2
 801f2ec:	781b      	ldrb	r3, [r3, #0]
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d19d      	bne.n	801f22e <urlparse+0x1e>
    }
  }
  u.end = i;
 801f2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f2f4:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	461d      	mov	r5, r3
 801f2fa:	f107 0408 	add.w	r4, r7, #8
 801f2fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f300:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801f302:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801f306:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 801f30a:	6878      	ldr	r0, [r7, #4]
 801f30c:	3728      	adds	r7, #40	@ 0x28
 801f30e:	46bd      	mov	sp, r7
 801f310:	bdb0      	pop	{r4, r5, r7, pc}

0801f312 <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 801f312:	b580      	push	{r7, lr}
 801f314:	b08c      	sub	sp, #48	@ 0x30
 801f316:	af00      	add	r7, sp, #0
 801f318:	6078      	str	r0, [r7, #4]
 801f31a:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 801f31c:	f107 0310 	add.w	r3, r7, #16
 801f320:	6839      	ldr	r1, [r7, #0]
 801f322:	4618      	mov	r0, r3
 801f324:	f7ff ff74 	bl	801f210 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 801f328:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	d004      	beq.n	801f338 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 801f32e:	6a3a      	ldr	r2, [r7, #32]
 801f330:	69fb      	ldr	r3, [r7, #28]
 801f332:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 801f334:	3b01      	subs	r3, #1
 801f336:	e009      	b.n	801f34c <mg_url_host+0x3a>
 801f338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                     : u.end - u.host;
 801f33a:	2b00      	cmp	r3, #0
 801f33c:	d003      	beq.n	801f346 <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 801f33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f340:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 801f342:	1ad3      	subs	r3, r2, r3
 801f344:	e002      	b.n	801f34c <mg_url_host+0x3a>
 801f346:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f348:	69fb      	ldr	r3, [r7, #28]
 801f34a:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 801f34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 801f34e:	69fb      	ldr	r3, [r7, #28]
 801f350:	683a      	ldr	r2, [r7, #0]
 801f352:	18d1      	adds	r1, r2, r3
 801f354:	f107 0308 	add.w	r3, r7, #8
 801f358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801f35a:	4618      	mov	r0, r3
 801f35c:	f7f4 fed3 	bl	8014106 <mg_str_n>
  return s;
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	461a      	mov	r2, r3
 801f364:	f107 0308 	add.w	r3, r7, #8
 801f368:	e893 0003 	ldmia.w	r3, {r0, r1}
 801f36c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801f370:	6878      	ldr	r0, [r7, #4]
 801f372:	3730      	adds	r7, #48	@ 0x30
 801f374:	46bd      	mov	sp, r7
 801f376:	bd80      	pop	{r7, pc}

0801f378 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 801f378:	b580      	push	{r7, lr}
 801f37a:	b08a      	sub	sp, #40	@ 0x28
 801f37c:	af00      	add	r7, sp, #0
 801f37e:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 801f380:	f107 0308 	add.w	r3, r7, #8
 801f384:	6879      	ldr	r1, [r7, #4]
 801f386:	4618      	mov	r0, r3
 801f388:	f7ff ff42 	bl	801f210 <urlparse>
  unsigned short port = 0;
 801f38c:	2300      	movs	r3, #0
 801f38e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 801f390:	2205      	movs	r2, #5
 801f392:	4925      	ldr	r1, [pc, #148]	@ (801f428 <mg_url_port+0xb0>)
 801f394:	6878      	ldr	r0, [r7, #4]
 801f396:	f004 fa17 	bl	80237c8 <strncmp>
 801f39a:	4603      	mov	r3, r0
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d007      	beq.n	801f3b0 <mg_url_port+0x38>
 801f3a0:	2203      	movs	r2, #3
 801f3a2:	4922      	ldr	r1, [pc, #136]	@ (801f42c <mg_url_port+0xb4>)
 801f3a4:	6878      	ldr	r0, [r7, #4]
 801f3a6:	f004 fa0f 	bl	80237c8 <strncmp>
 801f3aa:	4603      	mov	r3, r0
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d101      	bne.n	801f3b4 <mg_url_port+0x3c>
 801f3b0:	2350      	movs	r3, #80	@ 0x50
 801f3b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 801f3b4:	2204      	movs	r2, #4
 801f3b6:	491e      	ldr	r1, [pc, #120]	@ (801f430 <mg_url_port+0xb8>)
 801f3b8:	6878      	ldr	r0, [r7, #4]
 801f3ba:	f004 fa05 	bl	80237c8 <strncmp>
 801f3be:	4603      	mov	r3, r0
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	d007      	beq.n	801f3d4 <mg_url_port+0x5c>
 801f3c4:	2206      	movs	r2, #6
 801f3c6:	491b      	ldr	r1, [pc, #108]	@ (801f434 <mg_url_port+0xbc>)
 801f3c8:	6878      	ldr	r0, [r7, #4]
 801f3ca:	f004 f9fd 	bl	80237c8 <strncmp>
 801f3ce:	4603      	mov	r3, r0
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d102      	bne.n	801f3da <mg_url_port+0x62>
    port = 443;
 801f3d4:	f240 13bb 	movw	r3, #443	@ 0x1bb
 801f3d8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 801f3da:	2205      	movs	r2, #5
 801f3dc:	4916      	ldr	r1, [pc, #88]	@ (801f438 <mg_url_port+0xc0>)
 801f3de:	6878      	ldr	r0, [r7, #4]
 801f3e0:	f004 f9f2 	bl	80237c8 <strncmp>
 801f3e4:	4603      	mov	r3, r0
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	d102      	bne.n	801f3f0 <mg_url_port+0x78>
 801f3ea:	f240 735b 	movw	r3, #1883	@ 0x75b
 801f3ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 801f3f0:	2206      	movs	r2, #6
 801f3f2:	4912      	ldr	r1, [pc, #72]	@ (801f43c <mg_url_port+0xc4>)
 801f3f4:	6878      	ldr	r0, [r7, #4]
 801f3f6:	f004 f9e7 	bl	80237c8 <strncmp>
 801f3fa:	4603      	mov	r3, r0
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d102      	bne.n	801f406 <mg_url_port+0x8e>
 801f400:	f242 23b3 	movw	r3, #8883	@ 0x22b3
 801f404:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 801f406:	69bb      	ldr	r3, [r7, #24]
 801f408:	2b00      	cmp	r3, #0
 801f40a:	d007      	beq.n	801f41c <mg_url_port+0xa4>
 801f40c:	69bb      	ldr	r3, [r7, #24]
 801f40e:	687a      	ldr	r2, [r7, #4]
 801f410:	4413      	add	r3, r2
 801f412:	4618      	mov	r0, r3
 801f414:	f003 feea 	bl	80231ec <atoi>
 801f418:	4603      	mov	r3, r0
 801f41a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  return port;
 801f41c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 801f41e:	4618      	mov	r0, r3
 801f420:	3728      	adds	r7, #40	@ 0x28
 801f422:	46bd      	mov	sp, r7
 801f424:	bd80      	pop	{r7, pc}
 801f426:	bf00      	nop
 801f428:	08026c10 	.word	0x08026c10
 801f42c:	08026c18 	.word	0x08026c18
 801f430:	08026be0 	.word	0x08026be0
 801f434:	08026be8 	.word	0x08026be8
 801f438:	08026c1c 	.word	0x08026c1c
 801f43c:	08026bf0 	.word	0x08026bf0

0801f440 <mg_bzero>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
void mg_bzero(volatile unsigned char *buf, size_t len) {
 801f440:	b480      	push	{r7}
 801f442:	b083      	sub	sp, #12
 801f444:	af00      	add	r7, sp, #0
 801f446:	6078      	str	r0, [r7, #4]
 801f448:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 801f44a:	687b      	ldr	r3, [r7, #4]
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d00a      	beq.n	801f466 <mg_bzero+0x26>
    while (len--) *buf++ = 0;
 801f450:	e004      	b.n	801f45c <mg_bzero+0x1c>
 801f452:	687b      	ldr	r3, [r7, #4]
 801f454:	1c5a      	adds	r2, r3, #1
 801f456:	607a      	str	r2, [r7, #4]
 801f458:	2200      	movs	r2, #0
 801f45a:	701a      	strb	r2, [r3, #0]
 801f45c:	683b      	ldr	r3, [r7, #0]
 801f45e:	1e5a      	subs	r2, r3, #1
 801f460:	603a      	str	r2, [r7, #0]
 801f462:	2b00      	cmp	r3, #0
 801f464:	d1f5      	bne.n	801f452 <mg_bzero+0x12>
  }
}
 801f466:	bf00      	nop
 801f468:	370c      	adds	r7, #12
 801f46a:	46bd      	mov	sp, r7
 801f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f470:	4770      	bx	lr
	...

0801f474 <mg_random_str>:
  }
  return success;
}
#endif

char *mg_random_str(char *buf, size_t len) {
 801f474:	b580      	push	{r7, lr}
 801f476:	b084      	sub	sp, #16
 801f478:	af00      	add	r7, sp, #0
 801f47a:	6078      	str	r0, [r7, #4]
 801f47c:	6039      	str	r1, [r7, #0]
  size_t i;
  mg_random(buf, len);
 801f47e:	6839      	ldr	r1, [r7, #0]
 801f480:	6878      	ldr	r0, [r7, #4]
 801f482:	f7e1 f943 	bl	800070c <mg_random>
  for (i = 0; i < len; i++) {
 801f486:	2300      	movs	r3, #0
 801f488:	60fb      	str	r3, [r7, #12]
 801f48a:	e02d      	b.n	801f4e8 <mg_random_str+0x74>
    uint8_t c = ((uint8_t *) buf)[i] % 62U;
 801f48c:	687a      	ldr	r2, [r7, #4]
 801f48e:	68fb      	ldr	r3, [r7, #12]
 801f490:	4413      	add	r3, r2
 801f492:	781a      	ldrb	r2, [r3, #0]
 801f494:	0853      	lsrs	r3, r2, #1
 801f496:	4919      	ldr	r1, [pc, #100]	@ (801f4fc <mg_random_str+0x88>)
 801f498:	fba1 1303 	umull	r1, r3, r1, r3
 801f49c:	0919      	lsrs	r1, r3, #4
 801f49e:	460b      	mov	r3, r1
 801f4a0:	015b      	lsls	r3, r3, #5
 801f4a2:	1a5b      	subs	r3, r3, r1
 801f4a4:	005b      	lsls	r3, r3, #1
 801f4a6:	1ad3      	subs	r3, r2, r3
 801f4a8:	72fb      	strb	r3, [r7, #11]
    buf[i] = i == len - 1 ? (char) '\0'            // 0-terminate last byte
 801f4aa:	683b      	ldr	r3, [r7, #0]
 801f4ac:	3b01      	subs	r3, #1
 801f4ae:	68fa      	ldr	r2, [r7, #12]
 801f4b0:	429a      	cmp	r2, r3
 801f4b2:	d011      	beq.n	801f4d8 <mg_random_str+0x64>
 801f4b4:	7afb      	ldrb	r3, [r7, #11]
 801f4b6:	2b19      	cmp	r3, #25
 801f4b8:	d803      	bhi.n	801f4c2 <mg_random_str+0x4e>
 801f4ba:	7afb      	ldrb	r3, [r7, #11]
 801f4bc:	3361      	adds	r3, #97	@ 0x61
 801f4be:	b2db      	uxtb	r3, r3
 801f4c0:	e00b      	b.n	801f4da <mg_random_str+0x66>
 801f4c2:	7afb      	ldrb	r3, [r7, #11]
 801f4c4:	2b33      	cmp	r3, #51	@ 0x33
 801f4c6:	d803      	bhi.n	801f4d0 <mg_random_str+0x5c>
 801f4c8:	7afb      	ldrb	r3, [r7, #11]
 801f4ca:	3327      	adds	r3, #39	@ 0x27
 801f4cc:	b2db      	uxtb	r3, r3
 801f4ce:	e004      	b.n	801f4da <mg_random_str+0x66>
 801f4d0:	7afb      	ldrb	r3, [r7, #11]
 801f4d2:	3b04      	subs	r3, #4
 801f4d4:	b2db      	uxtb	r3, r3
 801f4d6:	e000      	b.n	801f4da <mg_random_str+0x66>
 801f4d8:	2300      	movs	r3, #0
 801f4da:	6879      	ldr	r1, [r7, #4]
 801f4dc:	68fa      	ldr	r2, [r7, #12]
 801f4de:	440a      	add	r2, r1
 801f4e0:	7013      	strb	r3, [r2, #0]
  for (i = 0; i < len; i++) {
 801f4e2:	68fb      	ldr	r3, [r7, #12]
 801f4e4:	3301      	adds	r3, #1
 801f4e6:	60fb      	str	r3, [r7, #12]
 801f4e8:	68fa      	ldr	r2, [r7, #12]
 801f4ea:	683b      	ldr	r3, [r7, #0]
 801f4ec:	429a      	cmp	r2, r3
 801f4ee:	d3cd      	bcc.n	801f48c <mg_random_str+0x18>
             : c < 26     ? (char) ('a' + c)       // lowercase
             : c < 52     ? (char) ('A' + c - 26)  // uppercase
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
 801f4f0:	687b      	ldr	r3, [r7, #4]
}
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	3710      	adds	r7, #16
 801f4f6:	46bd      	mov	sp, r7
 801f4f8:	bd80      	pop	{r7, pc}
 801f4fa:	bf00      	nop
 801f4fc:	84210843 	.word	0x84210843

0801f500 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 801f500:	b480      	push	{r7}
 801f502:	b087      	sub	sp, #28
 801f504:	af00      	add	r7, sp, #0
 801f506:	60f8      	str	r0, [r7, #12]
 801f508:	60b9      	str	r1, [r7, #8]
 801f50a:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 801f50c:	68fb      	ldr	r3, [r7, #12]
 801f50e:	43db      	mvns	r3, r3
 801f510:	60fb      	str	r3, [r7, #12]
  while (len--) {
 801f512:	e01f      	b.n	801f554 <mg_crc32+0x54>
    uint8_t b = *(uint8_t *) buf++;
 801f514:	68bb      	ldr	r3, [r7, #8]
 801f516:	1c5a      	adds	r2, r3, #1
 801f518:	60ba      	str	r2, [r7, #8]
 801f51a:	781b      	ldrb	r3, [r3, #0]
 801f51c:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ b) & 0x0F] ^ (crc >> 4);
 801f51e:	7dfa      	ldrb	r2, [r7, #23]
 801f520:	68fb      	ldr	r3, [r7, #12]
 801f522:	4053      	eors	r3, r2
 801f524:	f003 030f 	and.w	r3, r3, #15
 801f528:	4a11      	ldr	r2, [pc, #68]	@ (801f570 <mg_crc32+0x70>)
 801f52a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f52e:	68fb      	ldr	r3, [r7, #12]
 801f530:	091b      	lsrs	r3, r3, #4
 801f532:	4053      	eors	r3, r2
 801f534:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (b >> 4)) & 0x0F] ^ (crc >> 4);
 801f536:	7dfb      	ldrb	r3, [r7, #23]
 801f538:	091b      	lsrs	r3, r3, #4
 801f53a:	b2db      	uxtb	r3, r3
 801f53c:	461a      	mov	r2, r3
 801f53e:	68fb      	ldr	r3, [r7, #12]
 801f540:	4053      	eors	r3, r2
 801f542:	f003 030f 	and.w	r3, r3, #15
 801f546:	4a0a      	ldr	r2, [pc, #40]	@ (801f570 <mg_crc32+0x70>)
 801f548:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f54c:	68fb      	ldr	r3, [r7, #12]
 801f54e:	091b      	lsrs	r3, r3, #4
 801f550:	4053      	eors	r3, r2
 801f552:	60fb      	str	r3, [r7, #12]
  while (len--) {
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	1e5a      	subs	r2, r3, #1
 801f558:	607a      	str	r2, [r7, #4]
 801f55a:	2b00      	cmp	r3, #0
 801f55c:	d1da      	bne.n	801f514 <mg_crc32+0x14>
  }
  return ~crc;
 801f55e:	68fb      	ldr	r3, [r7, #12]
 801f560:	43db      	mvns	r3, r3
}
 801f562:	4618      	mov	r0, r3
 801f564:	371c      	adds	r7, #28
 801f566:	46bd      	mov	sp, r7
 801f568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f56c:	4770      	bx	lr
 801f56e:	bf00      	nop
 801f570:	08028340 	.word	0x08028340

0801f574 <mg_path_is_sane>:
    }
  }
  return allowed == '+';
}

bool mg_path_is_sane(const struct mg_str path) {
 801f574:	b480      	push	{r7}
 801f576:	b085      	sub	sp, #20
 801f578:	af00      	add	r7, sp, #0
 801f57a:	463b      	mov	r3, r7
 801f57c:	e883 0003 	stmia.w	r3, {r0, r1}
  const char *s = path.buf;
 801f580:	683b      	ldr	r3, [r7, #0]
 801f582:	60fb      	str	r3, [r7, #12]
  size_t n = path.len;
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	60bb      	str	r3, [r7, #8]
  if (path.buf[0] == '~') return false;  // Starts with ~
 801f588:	683b      	ldr	r3, [r7, #0]
 801f58a:	781b      	ldrb	r3, [r3, #0]
 801f58c:	2b7e      	cmp	r3, #126	@ 0x7e
 801f58e:	d101      	bne.n	801f594 <mg_path_is_sane+0x20>
 801f590:	2300      	movs	r3, #0
 801f592:	e02f      	b.n	801f5f4 <mg_path_is_sane+0x80>
  if (path.buf[0] == '.' && path.buf[1] == '.') return false;  // Starts with ..
 801f594:	683b      	ldr	r3, [r7, #0]
 801f596:	781b      	ldrb	r3, [r3, #0]
 801f598:	2b2e      	cmp	r3, #46	@ 0x2e
 801f59a:	d123      	bne.n	801f5e4 <mg_path_is_sane+0x70>
 801f59c:	683b      	ldr	r3, [r7, #0]
 801f59e:	3301      	adds	r3, #1
 801f5a0:	781b      	ldrb	r3, [r3, #0]
 801f5a2:	2b2e      	cmp	r3, #46	@ 0x2e
 801f5a4:	d11e      	bne.n	801f5e4 <mg_path_is_sane+0x70>
 801f5a6:	2300      	movs	r3, #0
 801f5a8:	e024      	b.n	801f5f4 <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
    if ((s[0] == '/' || s[0] == '\\') && n >= 2) {   // Subdir?
 801f5aa:	68fb      	ldr	r3, [r7, #12]
 801f5ac:	781b      	ldrb	r3, [r3, #0]
 801f5ae:	2b2f      	cmp	r3, #47	@ 0x2f
 801f5b0:	d003      	beq.n	801f5ba <mg_path_is_sane+0x46>
 801f5b2:	68fb      	ldr	r3, [r7, #12]
 801f5b4:	781b      	ldrb	r3, [r3, #0]
 801f5b6:	2b5c      	cmp	r3, #92	@ 0x5c
 801f5b8:	d10e      	bne.n	801f5d8 <mg_path_is_sane+0x64>
 801f5ba:	68bb      	ldr	r3, [r7, #8]
 801f5bc:	2b01      	cmp	r3, #1
 801f5be:	d90b      	bls.n	801f5d8 <mg_path_is_sane+0x64>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 801f5c0:	68fb      	ldr	r3, [r7, #12]
 801f5c2:	3301      	adds	r3, #1
 801f5c4:	781b      	ldrb	r3, [r3, #0]
 801f5c6:	2b2e      	cmp	r3, #46	@ 0x2e
 801f5c8:	d106      	bne.n	801f5d8 <mg_path_is_sane+0x64>
 801f5ca:	68fb      	ldr	r3, [r7, #12]
 801f5cc:	3302      	adds	r3, #2
 801f5ce:	781b      	ldrb	r3, [r3, #0]
 801f5d0:	2b2e      	cmp	r3, #46	@ 0x2e
 801f5d2:	d101      	bne.n	801f5d8 <mg_path_is_sane+0x64>
 801f5d4:	2300      	movs	r3, #0
 801f5d6:	e00d      	b.n	801f5f4 <mg_path_is_sane+0x80>
  for (; s[0] != '\0' && n > 0; s++, n--) {
 801f5d8:	68fb      	ldr	r3, [r7, #12]
 801f5da:	3301      	adds	r3, #1
 801f5dc:	60fb      	str	r3, [r7, #12]
 801f5de:	68bb      	ldr	r3, [r7, #8]
 801f5e0:	3b01      	subs	r3, #1
 801f5e2:	60bb      	str	r3, [r7, #8]
 801f5e4:	68fb      	ldr	r3, [r7, #12]
 801f5e6:	781b      	ldrb	r3, [r3, #0]
 801f5e8:	2b00      	cmp	r3, #0
 801f5ea:	d002      	beq.n	801f5f2 <mg_path_is_sane+0x7e>
 801f5ec:	68bb      	ldr	r3, [r7, #8]
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	d1db      	bne.n	801f5aa <mg_path_is_sane+0x36>
    }
  }
  return true;
 801f5f2:	2301      	movs	r3, #1
}
 801f5f4:	4618      	mov	r0, r3
 801f5f6:	3714      	adds	r7, #20
 801f5f8:	46bd      	mov	sp, r7
 801f5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5fe:	4770      	bx	lr

0801f600 <mg_ntohs>:
#endif
}
#endif

// network format equates big endian order
uint16_t mg_ntohs(uint16_t net) {
 801f600:	b480      	push	{r7}
 801f602:	b083      	sub	sp, #12
 801f604:	af00      	add	r7, sp, #0
 801f606:	4603      	mov	r3, r0
 801f608:	80fb      	strh	r3, [r7, #6]
  return MG_LOAD_BE16(&net);
 801f60a:	1dbb      	adds	r3, r7, #6
 801f60c:	781b      	ldrb	r3, [r3, #0]
 801f60e:	b21b      	sxth	r3, r3
 801f610:	021b      	lsls	r3, r3, #8
 801f612:	b21a      	sxth	r2, r3
 801f614:	1dbb      	adds	r3, r7, #6
 801f616:	3301      	adds	r3, #1
 801f618:	781b      	ldrb	r3, [r3, #0]
 801f61a:	b21b      	sxth	r3, r3
 801f61c:	4313      	orrs	r3, r2
 801f61e:	b21b      	sxth	r3, r3
 801f620:	b29b      	uxth	r3, r3
}
 801f622:	4618      	mov	r0, r3
 801f624:	370c      	adds	r7, #12
 801f626:	46bd      	mov	sp, r7
 801f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f62c:	4770      	bx	lr

0801f62e <mg_ntohl>:

uint32_t mg_ntohl(uint32_t net) {
 801f62e:	b480      	push	{r7}
 801f630:	b083      	sub	sp, #12
 801f632:	af00      	add	r7, sp, #0
 801f634:	6078      	str	r0, [r7, #4]
  return MG_LOAD_BE32(&net);
 801f636:	1d3b      	adds	r3, r7, #4
 801f638:	781b      	ldrb	r3, [r3, #0]
 801f63a:	061a      	lsls	r2, r3, #24
 801f63c:	1d3b      	adds	r3, r7, #4
 801f63e:	3301      	adds	r3, #1
 801f640:	781b      	ldrb	r3, [r3, #0]
 801f642:	041b      	lsls	r3, r3, #16
 801f644:	431a      	orrs	r2, r3
 801f646:	1d3b      	adds	r3, r7, #4
 801f648:	3302      	adds	r3, #2
 801f64a:	781b      	ldrb	r3, [r3, #0]
 801f64c:	021b      	lsls	r3, r3, #8
 801f64e:	431a      	orrs	r2, r3
 801f650:	1d3b      	adds	r3, r7, #4
 801f652:	3303      	adds	r3, #3
 801f654:	781b      	ldrb	r3, [r3, #0]
 801f656:	4313      	orrs	r3, r2
}
 801f658:	4618      	mov	r0, r3
 801f65a:	370c      	adds	r7, #12
 801f65c:	46bd      	mov	sp, r7
 801f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f662:	4770      	bx	lr

0801f664 <ws_handshake>:
  return len;
}

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 801f664:	b580      	push	{r7, lr}
 801f666:	b0aa      	sub	sp, #168	@ 0xa8
 801f668:	af00      	add	r7, sp, #0
 801f66a:	60f8      	str	r0, [r7, #12]
 801f66c:	60b9      	str	r1, [r7, #8]
 801f66e:	607a      	str	r2, [r7, #4]
 801f670:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 801f672:	4b29      	ldr	r3, [pc, #164]	@ (801f718 <ws_handshake+0xb4>)
 801f674:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 801f678:	f107 0314 	add.w	r3, r7, #20
 801f67c:	4618      	mov	r0, r3
 801f67e:	f7f2 ff55 	bl	801252c <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->buf, wskey->len);
 801f682:	68bb      	ldr	r3, [r7, #8]
 801f684:	6819      	ldr	r1, [r3, #0]
 801f686:	68bb      	ldr	r3, [r7, #8]
 801f688:	685a      	ldr	r2, [r3, #4]
 801f68a:	f107 0314 	add.w	r3, r7, #20
 801f68e:	4618      	mov	r0, r3
 801f690:	f7f2 ff76 	bl	8012580 <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 801f694:	f107 0314 	add.w	r3, r7, #20
 801f698:	2224      	movs	r2, #36	@ 0x24
 801f69a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801f69e:	4618      	mov	r0, r3
 801f6a0:	f7f2 ff6e 	bl	8012580 <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 801f6a4:	f107 0214 	add.w	r2, r7, #20
 801f6a8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 801f6ac:	4611      	mov	r1, r2
 801f6ae:	4618      	mov	r0, r3
 801f6b0:	f7f2 ffcc 	bl	801264c <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha, sizeof(b64_sha));
 801f6b4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 801f6b8:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 801f6bc:	231e      	movs	r3, #30
 801f6be:	2114      	movs	r1, #20
 801f6c0:	f7e7 f85e 	bl	8006780 <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 801f6c4:	68fb      	ldr	r3, [r7, #12]
 801f6c6:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801f6ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 801f6ce:	4a13      	ldr	r2, [pc, #76]	@ (801f71c <ws_handshake+0xb8>)
 801f6d0:	4813      	ldr	r0, [pc, #76]	@ (801f720 <ws_handshake+0xbc>)
 801f6d2:	f7e8 f816 	bl	8007702 <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 801f6d6:	683b      	ldr	r3, [r7, #0]
 801f6d8:	2b00      	cmp	r3, #0
 801f6da:	d008      	beq.n	801f6ee <ws_handshake+0x8a>
 801f6dc:	68fb      	ldr	r3, [r7, #12]
 801f6de:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 801f6e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801f6e6:	683a      	ldr	r2, [r7, #0]
 801f6e8:	480d      	ldr	r0, [pc, #52]	@ (801f720 <ws_handshake+0xbc>)
 801f6ea:	f7e8 f825 	bl	8007738 <mg_vxprintf>
  if (wsproto != NULL) {
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	d008      	beq.n	801f706 <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	685b      	ldr	r3, [r3, #4]
 801f6f8:	461a      	mov	r2, r3
              wsproto->buf);
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	681b      	ldr	r3, [r3, #0]
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 801f6fe:	4909      	ldr	r1, [pc, #36]	@ (801f724 <ws_handshake+0xc0>)
 801f700:	68f8      	ldr	r0, [r7, #12]
 801f702:	f7ec fff3 	bl	800c6ec <mg_printf>
  }
  mg_send(c, "\r\n", 2);
 801f706:	2202      	movs	r2, #2
 801f708:	4907      	ldr	r1, [pc, #28]	@ (801f728 <ws_handshake+0xc4>)
 801f70a:	68f8      	ldr	r0, [r7, #12]
 801f70c:	f7f0 ff74 	bl	80105f8 <mg_send>
}
 801f710:	bf00      	nop
 801f712:	37a8      	adds	r7, #168	@ 0xa8
 801f714:	46bd      	mov	sp, r7
 801f716:	bd80      	pop	{r7, pc}
 801f718:	08026c60 	.word	0x08026c60
 801f71c:	08026c88 	.word	0x08026c88
 801f720:	080108d1 	.word	0x080108d1
 801f724:	08026cf0 	.word	0x08026cf0
 801f728:	080247c0 	.word	0x080247c0

0801f72c <be32>:

static uint32_t be32(const uint8_t *p) {
 801f72c:	b480      	push	{r7}
 801f72e:	b083      	sub	sp, #12
 801f730:	af00      	add	r7, sp, #0
 801f732:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	3303      	adds	r3, #3
 801f738:	781b      	ldrb	r3, [r3, #0]
 801f73a:	461a      	mov	r2, r3
 801f73c:	687b      	ldr	r3, [r7, #4]
 801f73e:	3302      	adds	r3, #2
 801f740:	781b      	ldrb	r3, [r3, #0]
 801f742:	021b      	lsls	r3, r3, #8
 801f744:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	3301      	adds	r3, #1
 801f74a:	781b      	ldrb	r3, [r3, #0]
 801f74c:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 801f74e:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 801f750:	687b      	ldr	r3, [r7, #4]
 801f752:	781b      	ldrb	r3, [r3, #0]
 801f754:	061b      	lsls	r3, r3, #24
 801f756:	4313      	orrs	r3, r2
}
 801f758:	4618      	mov	r0, r3
 801f75a:	370c      	adds	r7, #12
 801f75c:	46bd      	mov	sp, r7
 801f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f762:	4770      	bx	lr

0801f764 <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 801f764:	b5b0      	push	{r4, r5, r7, lr}
 801f766:	b08a      	sub	sp, #40	@ 0x28
 801f768:	af00      	add	r7, sp, #0
 801f76a:	60f8      	str	r0, [r7, #12]
 801f76c:	60b9      	str	r1, [r7, #8]
 801f76e:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 801f770:	2300      	movs	r3, #0
 801f772:	61fb      	str	r3, [r7, #28]
 801f774:	2300      	movs	r3, #0
 801f776:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 801f778:	220c      	movs	r2, #12
 801f77a:	2100      	movs	r1, #0
 801f77c:	6878      	ldr	r0, [r7, #4]
 801f77e:	f004 f80e 	bl	802379e <memset>
  if (len >= 2) {
 801f782:	68bb      	ldr	r3, [r7, #8]
 801f784:	2b01      	cmp	r3, #1
 801f786:	d953      	bls.n	801f830 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 801f788:	68fb      	ldr	r3, [r7, #12]
 801f78a:	3301      	adds	r3, #1
 801f78c:	781b      	ldrb	r3, [r3, #0]
 801f78e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f792:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 801f794:	68fb      	ldr	r3, [r7, #12]
 801f796:	3301      	adds	r3, #1
 801f798:	781b      	ldrb	r3, [r3, #0]
 801f79a:	b25b      	sxtb	r3, r3
 801f79c:	115b      	asrs	r3, r3, #5
 801f79e:	b25b      	sxtb	r3, r3
 801f7a0:	f003 0304 	and.w	r3, r3, #4
 801f7a4:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	781a      	ldrb	r2, [r3, #0]
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 801f7ae:	69fb      	ldr	r3, [r7, #28]
 801f7b0:	2b7d      	cmp	r3, #125	@ 0x7d
 801f7b2:	d80b      	bhi.n	801f7cc <ws_process+0x68>
 801f7b4:	68ba      	ldr	r2, [r7, #8]
 801f7b6:	6a3b      	ldr	r3, [r7, #32]
 801f7b8:	429a      	cmp	r2, r3
 801f7ba:	d307      	bcc.n	801f7cc <ws_process+0x68>
      msg->data_len = n;
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	69fa      	ldr	r2, [r7, #28]
 801f7c0:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 801f7c2:	6a3b      	ldr	r3, [r7, #32]
 801f7c4:	1c9a      	adds	r2, r3, #2
 801f7c6:	687b      	ldr	r3, [r7, #4]
 801f7c8:	605a      	str	r2, [r3, #4]
 801f7ca:	e031      	b.n	801f830 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 801f7cc:	69fb      	ldr	r3, [r7, #28]
 801f7ce:	2b7e      	cmp	r3, #126	@ 0x7e
 801f7d0:	d113      	bne.n	801f7fa <ws_process+0x96>
 801f7d2:	6a3b      	ldr	r3, [r7, #32]
 801f7d4:	3304      	adds	r3, #4
 801f7d6:	68ba      	ldr	r2, [r7, #8]
 801f7d8:	429a      	cmp	r2, r3
 801f7da:	d30e      	bcc.n	801f7fa <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 801f7dc:	6a3b      	ldr	r3, [r7, #32]
 801f7de:	1d1a      	adds	r2, r3, #4
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	3302      	adds	r3, #2
 801f7e8:	781b      	ldrb	r3, [r3, #0]
 801f7ea:	021b      	lsls	r3, r3, #8
 801f7ec:	68fa      	ldr	r2, [r7, #12]
 801f7ee:	3203      	adds	r2, #3
 801f7f0:	7812      	ldrb	r2, [r2, #0]
 801f7f2:	431a      	orrs	r2, r3
 801f7f4:	687b      	ldr	r3, [r7, #4]
 801f7f6:	609a      	str	r2, [r3, #8]
 801f7f8:	e01a      	b.n	801f830 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 801f7fa:	6a3b      	ldr	r3, [r7, #32]
 801f7fc:	330a      	adds	r3, #10
 801f7fe:	68ba      	ldr	r2, [r7, #8]
 801f800:	429a      	cmp	r2, r3
 801f802:	d315      	bcc.n	801f830 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 801f804:	6a3b      	ldr	r3, [r7, #32]
 801f806:	f103 020a 	add.w	r2, r3, #10
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 801f80e:	68fb      	ldr	r3, [r7, #12]
 801f810:	3302      	adds	r3, #2
 801f812:	4618      	mov	r0, r3
 801f814:	f7ff ff8a 	bl	801f72c <be32>
 801f818:	4603      	mov	r3, r0
 801f81a:	2200      	movs	r2, #0
 801f81c:	461c      	mov	r4, r3
 801f81e:	4615      	mov	r5, r2
 801f820:	68fb      	ldr	r3, [r7, #12]
 801f822:	3306      	adds	r3, #6
 801f824:	4618      	mov	r0, r3
 801f826:	f7ff ff81 	bl	801f72c <be32>
 801f82a:	4602      	mov	r2, r0
      msg->data_len =
 801f82c:	687b      	ldr	r3, [r7, #4]
 801f82e:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	689b      	ldr	r3, [r3, #8]
 801f834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f838:	d901      	bls.n	801f83e <ws_process+0xda>
 801f83a:	2300      	movs	r3, #0
 801f83c:	e036      	b.n	801f8ac <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	685a      	ldr	r2, [r3, #4]
 801f842:	687b      	ldr	r3, [r7, #4]
 801f844:	689b      	ldr	r3, [r3, #8]
 801f846:	4413      	add	r3, r2
 801f848:	68ba      	ldr	r2, [r7, #8]
 801f84a:	429a      	cmp	r2, r3
 801f84c:	d201      	bcs.n	801f852 <ws_process+0xee>
 801f84e:	2300      	movs	r3, #0
 801f850:	e02c      	b.n	801f8ac <ws_process+0x148>
  if (mask_len > 0) {
 801f852:	6a3b      	ldr	r3, [r7, #32]
 801f854:	2b00      	cmp	r3, #0
 801f856:	d024      	beq.n	801f8a2 <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 801f858:	687b      	ldr	r3, [r7, #4]
 801f85a:	685b      	ldr	r3, [r3, #4]
 801f85c:	68fa      	ldr	r2, [r7, #12]
 801f85e:	4413      	add	r3, r2
 801f860:	61bb      	str	r3, [r7, #24]
 801f862:	6a3b      	ldr	r3, [r7, #32]
 801f864:	425b      	negs	r3, r3
 801f866:	69ba      	ldr	r2, [r7, #24]
 801f868:	4413      	add	r3, r2
 801f86a:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 801f86c:	2300      	movs	r3, #0
 801f86e:	627b      	str	r3, [r7, #36]	@ 0x24
 801f870:	e012      	b.n	801f898 <ws_process+0x134>
 801f872:	69ba      	ldr	r2, [r7, #24]
 801f874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f876:	4413      	add	r3, r2
 801f878:	7819      	ldrb	r1, [r3, #0]
 801f87a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f87c:	f003 0303 	and.w	r3, r3, #3
 801f880:	697a      	ldr	r2, [r7, #20]
 801f882:	4413      	add	r3, r2
 801f884:	781a      	ldrb	r2, [r3, #0]
 801f886:	69b8      	ldr	r0, [r7, #24]
 801f888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f88a:	4403      	add	r3, r0
 801f88c:	404a      	eors	r2, r1
 801f88e:	b2d2      	uxtb	r2, r2
 801f890:	701a      	strb	r2, [r3, #0]
 801f892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f894:	3301      	adds	r3, #1
 801f896:	627b      	str	r3, [r7, #36]	@ 0x24
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	689b      	ldr	r3, [r3, #8]
 801f89c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801f89e:	429a      	cmp	r2, r3
 801f8a0:	d3e7      	bcc.n	801f872 <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	685a      	ldr	r2, [r3, #4]
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	689b      	ldr	r3, [r3, #8]
 801f8aa:	4413      	add	r3, r2
}
 801f8ac:	4618      	mov	r0, r3
 801f8ae:	3728      	adds	r7, #40	@ 0x28
 801f8b0:	46bd      	mov	sp, r7
 801f8b2:	bdb0      	pop	{r4, r5, r7, pc}

0801f8b4 <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 801f8b4:	b5b0      	push	{r4, r5, r7, lr}
 801f8b6:	b088      	sub	sp, #32
 801f8b8:	af00      	add	r7, sp, #0
 801f8ba:	60f8      	str	r0, [r7, #12]
 801f8bc:	60b9      	str	r1, [r7, #8]
 801f8be:	603b      	str	r3, [r7, #0]
 801f8c0:	4613      	mov	r3, r2
 801f8c2:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 801f8c4:	2300      	movs	r3, #0
 801f8c6:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 801f8c8:	68bb      	ldr	r3, [r7, #8]
 801f8ca:	b25b      	sxtb	r3, r3
 801f8cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801f8d0:	b25b      	sxtb	r3, r3
 801f8d2:	b2da      	uxtb	r2, r3
 801f8d4:	683b      	ldr	r3, [r7, #0]
 801f8d6:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 801f8d8:	68fb      	ldr	r3, [r7, #12]
 801f8da:	2b7d      	cmp	r3, #125	@ 0x7d
 801f8dc:	d807      	bhi.n	801f8ee <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 801f8de:	683b      	ldr	r3, [r7, #0]
 801f8e0:	3301      	adds	r3, #1
 801f8e2:	68fa      	ldr	r2, [r7, #12]
 801f8e4:	b2d2      	uxtb	r2, r2
 801f8e6:	701a      	strb	r2, [r3, #0]
    n = 2;
 801f8e8:	2302      	movs	r3, #2
 801f8ea:	61fb      	str	r3, [r7, #28]
 801f8ec:	e038      	b.n	801f960 <mkhdr+0xac>
  } else if (len < 65536) {
 801f8ee:	68fb      	ldr	r3, [r7, #12]
 801f8f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f8f4:	d211      	bcs.n	801f91a <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 801f8f6:	68fb      	ldr	r3, [r7, #12]
 801f8f8:	b29b      	uxth	r3, r3
 801f8fa:	4618      	mov	r0, r3
 801f8fc:	f7ff fe80 	bl	801f600 <mg_ntohs>
 801f900:	4603      	mov	r3, r0
 801f902:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 801f904:	683b      	ldr	r3, [r7, #0]
 801f906:	3301      	adds	r3, #1
 801f908:	227e      	movs	r2, #126	@ 0x7e
 801f90a:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 801f90c:	683b      	ldr	r3, [r7, #0]
 801f90e:	3302      	adds	r3, #2
 801f910:	8b7a      	ldrh	r2, [r7, #26]
 801f912:	801a      	strh	r2, [r3, #0]
    n = 4;
 801f914:	2304      	movs	r3, #4
 801f916:	61fb      	str	r3, [r7, #28]
 801f918:	e022      	b.n	801f960 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 801f91a:	683b      	ldr	r3, [r7, #0]
 801f91c:	3301      	adds	r3, #1
 801f91e:	227f      	movs	r2, #127	@ 0x7f
 801f920:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 801f922:	68fb      	ldr	r3, [r7, #12]
 801f924:	2200      	movs	r2, #0
 801f926:	461c      	mov	r4, r3
 801f928:	4615      	mov	r5, r2
 801f92a:	f04f 0200 	mov.w	r2, #0
 801f92e:	f04f 0300 	mov.w	r3, #0
 801f932:	002a      	movs	r2, r5
 801f934:	2300      	movs	r3, #0
 801f936:	4613      	mov	r3, r2
 801f938:	4618      	mov	r0, r3
 801f93a:	f7ff fe78 	bl	801f62e <mg_ntohl>
 801f93e:	4603      	mov	r3, r0
 801f940:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 801f942:	683b      	ldr	r3, [r7, #0]
 801f944:	3302      	adds	r3, #2
 801f946:	697a      	ldr	r2, [r7, #20]
 801f948:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 801f94a:	68f8      	ldr	r0, [r7, #12]
 801f94c:	f7ff fe6f 	bl	801f62e <mg_ntohl>
 801f950:	4603      	mov	r3, r0
 801f952:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 801f954:	683b      	ldr	r3, [r7, #0]
 801f956:	3306      	adds	r3, #6
 801f958:	697a      	ldr	r2, [r7, #20]
 801f95a:	601a      	str	r2, [r3, #0]
    n = 10;
 801f95c:	230a      	movs	r3, #10
 801f95e:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 801f960:	79fb      	ldrb	r3, [r7, #7]
 801f962:	2b00      	cmp	r3, #0
 801f964:	d012      	beq.n	801f98c <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 801f966:	683b      	ldr	r3, [r7, #0]
 801f968:	3301      	adds	r3, #1
 801f96a:	781a      	ldrb	r2, [r3, #0]
 801f96c:	683b      	ldr	r3, [r7, #0]
 801f96e:	3301      	adds	r3, #1
 801f970:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 801f974:	b2d2      	uxtb	r2, r2
 801f976:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 801f978:	683a      	ldr	r2, [r7, #0]
 801f97a:	69fb      	ldr	r3, [r7, #28]
 801f97c:	4413      	add	r3, r2
 801f97e:	2104      	movs	r1, #4
 801f980:	4618      	mov	r0, r3
 801f982:	f7e0 fec3 	bl	800070c <mg_random>
    n += 4;
 801f986:	69fb      	ldr	r3, [r7, #28]
 801f988:	3304      	adds	r3, #4
 801f98a:	61fb      	str	r3, [r7, #28]
  }
  return n;
 801f98c:	69fb      	ldr	r3, [r7, #28]
}
 801f98e:	4618      	mov	r0, r3
 801f990:	3720      	adds	r7, #32
 801f992:	46bd      	mov	sp, r7
 801f994:	bdb0      	pop	{r4, r5, r7, pc}

0801f996 <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 801f996:	b480      	push	{r7}
 801f998:	b087      	sub	sp, #28
 801f99a:	af00      	add	r7, sp, #0
 801f99c:	6078      	str	r0, [r7, #4]
 801f99e:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 801f9a0:	687b      	ldr	r3, [r7, #4]
 801f9a2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801f9a6:	f003 0302 	and.w	r3, r3, #2
 801f9aa:	b2db      	uxtb	r3, r3
 801f9ac:	2b00      	cmp	r3, #0
 801f9ae:	d028      	beq.n	801fa02 <mg_ws_mask+0x6c>
 801f9b0:	687b      	ldr	r3, [r7, #4]
 801f9b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f9b4:	2b00      	cmp	r3, #0
 801f9b6:	d024      	beq.n	801fa02 <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801f9bc:	687b      	ldr	r3, [r7, #4]
 801f9be:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801f9c0:	683b      	ldr	r3, [r7, #0]
 801f9c2:	1acb      	subs	r3, r1, r3
 801f9c4:	4413      	add	r3, r2
 801f9c6:	613b      	str	r3, [r7, #16]
 801f9c8:	693b      	ldr	r3, [r7, #16]
 801f9ca:	3b04      	subs	r3, #4
 801f9cc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 801f9ce:	2300      	movs	r3, #0
 801f9d0:	617b      	str	r3, [r7, #20]
 801f9d2:	e012      	b.n	801f9fa <mg_ws_mask+0x64>
 801f9d4:	693a      	ldr	r2, [r7, #16]
 801f9d6:	697b      	ldr	r3, [r7, #20]
 801f9d8:	4413      	add	r3, r2
 801f9da:	7819      	ldrb	r1, [r3, #0]
 801f9dc:	697b      	ldr	r3, [r7, #20]
 801f9de:	f003 0303 	and.w	r3, r3, #3
 801f9e2:	68fa      	ldr	r2, [r7, #12]
 801f9e4:	4413      	add	r3, r2
 801f9e6:	781a      	ldrb	r2, [r3, #0]
 801f9e8:	6938      	ldr	r0, [r7, #16]
 801f9ea:	697b      	ldr	r3, [r7, #20]
 801f9ec:	4403      	add	r3, r0
 801f9ee:	404a      	eors	r2, r1
 801f9f0:	b2d2      	uxtb	r2, r2
 801f9f2:	701a      	strb	r2, [r3, #0]
 801f9f4:	697b      	ldr	r3, [r7, #20]
 801f9f6:	3301      	adds	r3, #1
 801f9f8:	617b      	str	r3, [r7, #20]
 801f9fa:	697a      	ldr	r2, [r7, #20]
 801f9fc:	683b      	ldr	r3, [r7, #0]
 801f9fe:	429a      	cmp	r2, r3
 801fa00:	d3e8      	bcc.n	801f9d4 <mg_ws_mask+0x3e>
  }
}
 801fa02:	bf00      	nop
 801fa04:	371c      	adds	r7, #28
 801fa06:	46bd      	mov	sp, r7
 801fa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa0c:	4770      	bx	lr
	...

0801fa10 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 801fa10:	b580      	push	{r7, lr}
 801fa12:	b08a      	sub	sp, #40	@ 0x28
 801fa14:	af00      	add	r7, sp, #0
 801fa16:	60f8      	str	r0, [r7, #12]
 801fa18:	60b9      	str	r1, [r7, #8]
 801fa1a:	607a      	str	r2, [r7, #4]
 801fa1c:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 801fa1e:	68fb      	ldr	r3, [r7, #12]
 801fa20:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fa24:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801fa28:	b2db      	uxtb	r3, r3
 801fa2a:	2b00      	cmp	r3, #0
 801fa2c:	bf14      	ite	ne
 801fa2e:	2301      	movne	r3, #1
 801fa30:	2300      	moveq	r3, #0
 801fa32:	b2da      	uxtb	r2, r3
 801fa34:	f107 0314 	add.w	r3, r7, #20
 801fa38:	6839      	ldr	r1, [r7, #0]
 801fa3a:	6878      	ldr	r0, [r7, #4]
 801fa3c:	f7ff ff3a 	bl	801f8b4 <mkhdr>
 801fa40:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!mg_send(c, header, header_len)) return 0;
 801fa42:	f107 0314 	add.w	r3, r7, #20
 801fa46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801fa48:	4619      	mov	r1, r3
 801fa4a:	68f8      	ldr	r0, [r7, #12]
 801fa4c:	f7f0 fdd4 	bl	80105f8 <mg_send>
 801fa50:	4603      	mov	r3, r0
 801fa52:	f083 0301 	eor.w	r3, r3, #1
 801fa56:	b2db      	uxtb	r3, r3
 801fa58:	2b00      	cmp	r3, #0
 801fa5a:	d001      	beq.n	801fa60 <mg_ws_send+0x50>
 801fa5c:	2300      	movs	r3, #0
 801fa5e:	e024      	b.n	801faaa <mg_ws_send+0x9a>
  if (!mg_send(c, buf, len)) return header_len;
 801fa60:	687a      	ldr	r2, [r7, #4]
 801fa62:	68b9      	ldr	r1, [r7, #8]
 801fa64:	68f8      	ldr	r0, [r7, #12]
 801fa66:	f7f0 fdc7 	bl	80105f8 <mg_send>
 801fa6a:	4603      	mov	r3, r0
 801fa6c:	f083 0301 	eor.w	r3, r3, #1
 801fa70:	b2db      	uxtb	r3, r3
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d001      	beq.n	801fa7a <mg_ws_send+0x6a>
 801fa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fa78:	e017      	b.n	801faaa <mg_ws_send+0x9a>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 801fa7a:	4b0e      	ldr	r3, [pc, #56]	@ (801fab4 <mg_ws_send+0xa4>)
 801fa7c:	681b      	ldr	r3, [r3, #0]
 801fa7e:	2b03      	cmp	r3, #3
 801fa80:	dd0c      	ble.n	801fa9c <mg_ws_send+0x8c>
 801fa82:	4b0d      	ldr	r3, [pc, #52]	@ (801fab8 <mg_ws_send+0xa8>)
 801fa84:	f644 6268 	movw	r2, #20072	@ 0x4e68
 801fa88:	490c      	ldr	r1, [pc, #48]	@ (801fabc <mg_ws_send+0xac>)
 801fa8a:	2004      	movs	r0, #4
 801fa8c:	f7ec fcd2 	bl	800c434 <mg_log_prefix>
 801fa90:	6879      	ldr	r1, [r7, #4]
 801fa92:	687a      	ldr	r2, [r7, #4]
 801fa94:	68bb      	ldr	r3, [r7, #8]
 801fa96:	480a      	ldr	r0, [pc, #40]	@ (801fac0 <mg_ws_send+0xb0>)
 801fa98:	f7ec fd1c 	bl	800c4d4 <mg_log>
  mg_ws_mask(c, len);
 801fa9c:	6879      	ldr	r1, [r7, #4]
 801fa9e:	68f8      	ldr	r0, [r7, #12]
 801faa0:	f7ff ff79 	bl	801f996 <mg_ws_mask>
  return header_len + len;
 801faa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801faa6:	687b      	ldr	r3, [r7, #4]
 801faa8:	4413      	add	r3, r2
}
 801faaa:	4618      	mov	r0, r3
 801faac:	3728      	adds	r7, #40	@ 0x28
 801faae:	46bd      	mov	sp, r7
 801fab0:	bd80      	pop	{r7, pc}
 801fab2:	bf00      	nop
 801fab4:	24000258 	.word	0x24000258
 801fab8:	08028380 	.word	0x08028380
 801fabc:	08024478 	.word	0x08024478
 801fac0:	08026d10 	.word	0x08026d10

0801fac4 <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 801fac4:	b580      	push	{r7, lr}
 801fac6:	f5ad 7d0a 	sub.w	sp, sp, #552	@ 0x228
 801faca:	af00      	add	r7, sp, #0
 801facc:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fad0:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fad4:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 801fad6:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fada:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fade:	681b      	ldr	r3, [r3, #0]
 801fae0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fae2:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fae6:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801faee:	4619      	mov	r1, r3
 801faf0:	4610      	mov	r0, r2
 801faf2:	f7e8 fe4b 	bl	800878c <mg_http_get_request_len>
 801faf6:	f8c7 0224 	str.w	r0, [r7, #548]	@ 0x224
  if (n < 0) {
 801fafa:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	da08      	bge.n	801fb14 <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 801fb02:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fb06:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fb0a:	4936      	ldr	r1, [pc, #216]	@ (801fbe4 <mg_ws_client_handshake+0x120>)
 801fb0c:	6818      	ldr	r0, [r3, #0]
 801fb0e:	f7e6 ff81 	bl	8006a14 <mg_error>
 801fb12:	e060      	b.n	801fbd6 <mg_ws_client_handshake+0x112>
  } else if (n > 0) {
 801fb14:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	dd5a      	ble.n	801fbd2 <mg_ws_client_handshake+0x10e>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 801fb1c:	f8d7 3224 	ldr.w	r3, [r7, #548]	@ 0x224
 801fb20:	2b0e      	cmp	r3, #14
 801fb22:	dd0e      	ble.n	801fb42 <mg_ws_client_handshake+0x7e>
 801fb24:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fb28:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fb30:	3309      	adds	r3, #9
 801fb32:	2203      	movs	r2, #3
 801fb34:	492c      	ldr	r1, [pc, #176]	@ (801fbe8 <mg_ws_client_handshake+0x124>)
 801fb36:	4618      	mov	r0, r3
 801fb38:	f003 fe07 	bl	802374a <memcmp>
 801fb3c:	4603      	mov	r3, r0
 801fb3e:	2b00      	cmp	r3, #0
 801fb40:	d008      	beq.n	801fb54 <mg_ws_client_handshake+0x90>
      mg_error(c, "ws handshake error");
 801fb42:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fb46:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fb4a:	4928      	ldr	r1, [pc, #160]	@ (801fbec <mg_ws_client_handshake+0x128>)
 801fb4c:	6818      	ldr	r0, [r3, #0]
 801fb4e:	f7e6 ff61 	bl	8006a14 <mg_error>
 801fb52:	e031      	b.n	801fbb8 <mg_ws_client_handshake+0xf4>
    } else {
      struct mg_http_message hm;
      if (mg_http_parse((char *) c->recv.buf, c->recv.len, &hm)) {
 801fb54:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fb58:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fb5c:	681b      	ldr	r3, [r3, #0]
 801fb5e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801fb60:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fb64:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fb68:	681b      	ldr	r3, [r3, #0]
 801fb6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fb6c:	f107 020c 	add.w	r2, r7, #12
 801fb70:	4619      	mov	r1, r3
 801fb72:	f7e9 f815 	bl	8008ba0 <mg_http_parse>
 801fb76:	4603      	mov	r3, r0
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d015      	beq.n	801fba8 <mg_ws_client_handshake+0xe4>
        c->is_websocket = 1;
 801fb7c:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fb80:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fb84:	681a      	ldr	r2, [r3, #0]
 801fb86:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801fb8a:	f043 0302 	orr.w	r3, r3, #2
 801fb8e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
        mg_call(c, MG_EV_WS_OPEN, &hm);
 801fb92:	f107 020c 	add.w	r2, r7, #12
 801fb96:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fb9a:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fb9e:	210c      	movs	r1, #12
 801fba0:	6818      	ldr	r0, [r3, #0]
 801fba2:	f7e6 ff16 	bl	80069d2 <mg_call>
 801fba6:	e007      	b.n	801fbb8 <mg_ws_client_handshake+0xf4>
      } else {
        mg_error(c, "ws handshake error");
 801fba8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fbac:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fbb0:	490e      	ldr	r1, [pc, #56]	@ (801fbec <mg_ws_client_handshake+0x128>)
 801fbb2:	6818      	ldr	r0, [r3, #0]
 801fbb4:	f7e6 ff2e 	bl	8006a14 <mg_error>
      }
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 801fbb8:	f507 730a 	add.w	r3, r7, #552	@ 0x228
 801fbbc:	f5a3 7309 	sub.w	r3, r3, #548	@ 0x224
 801fbc0:	681b      	ldr	r3, [r3, #0]
 801fbc2:	3338      	adds	r3, #56	@ 0x38
 801fbc4:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 801fbc8:	2100      	movs	r1, #0
 801fbca:	4618      	mov	r0, r3
 801fbcc:	f7eb fd66 	bl	800b69c <mg_iobuf_del>
 801fbd0:	e001      	b.n	801fbd6 <mg_ws_client_handshake+0x112>
  } else {
    return true;  // Request is not yet received, quit event handler
 801fbd2:	2301      	movs	r3, #1
 801fbd4:	e000      	b.n	801fbd8 <mg_ws_client_handshake+0x114>
  }
  return false;  // Continue event handler
 801fbd6:	2300      	movs	r3, #0
}
 801fbd8:	4618      	mov	r0, r3
 801fbda:	f507 770a 	add.w	r7, r7, #552	@ 0x228
 801fbde:	46bd      	mov	sp, r7
 801fbe0:	bd80      	pop	{r7, pc}
 801fbe2:	bf00      	nop
 801fbe4:	08026d24 	.word	0x08026d24
 801fbe8:	08026d30 	.word	0x08026d30
 801fbec:	08026d34 	.word	0x08026d34

0801fbf0 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data) {
 801fbf0:	b580      	push	{r7, lr}
 801fbf2:	b090      	sub	sp, #64	@ 0x40
 801fbf4:	af00      	add	r7, sp, #0
 801fbf6:	6178      	str	r0, [r7, #20]
 801fbf8:	6139      	str	r1, [r7, #16]
 801fbfa:	60fa      	str	r2, [r7, #12]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 801fbfc:	697b      	ldr	r3, [r7, #20]
 801fbfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fc02:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 801fc04:	693b      	ldr	r3, [r7, #16]
 801fc06:	2b07      	cmp	r3, #7
 801fc08:	f040 813c 	bne.w	801fe84 <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 801fc0c:	697b      	ldr	r3, [r7, #20]
 801fc0e:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 801fc12:	f003 0302 	and.w	r3, r3, #2
 801fc16:	b2db      	uxtb	r3, r3
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	f000 8120 	beq.w	801fe5e <mg_ws_cb+0x26e>
 801fc1e:	697b      	ldr	r3, [r7, #20]
 801fc20:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 801fc24:	f003 0302 	and.w	r3, r3, #2
 801fc28:	b2db      	uxtb	r3, r3
 801fc2a:	2b00      	cmp	r3, #0
 801fc2c:	f040 8117 	bne.w	801fe5e <mg_ws_cb+0x26e>
 801fc30:	6978      	ldr	r0, [r7, #20]
 801fc32:	f7ff ff47 	bl	801fac4 <mg_ws_client_handshake>
 801fc36:	4603      	mov	r3, r0
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	f040 8122 	bne.w	801fe82 <mg_ws_cb+0x292>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 801fc3e:	e10e      	b.n	801fe5e <mg_ws_cb+0x26e>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 801fc40:	697b      	ldr	r3, [r7, #20]
 801fc42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fc44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801fc46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fc48:	440b      	add	r3, r1
 801fc4a:	4413      	add	r3, r2
 801fc4c:	637b      	str	r3, [r7, #52]	@ 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 801fc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fc50:	61bb      	str	r3, [r7, #24]
 801fc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc54:	61fb      	str	r3, [r7, #28]
 801fc56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801fc5a:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 801fc5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fc60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801fc62:	4413      	add	r3, r2
 801fc64:	63bb      	str	r3, [r7, #56]	@ 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 801fc66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801fc6a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801fc6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801fc72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801fc76:	f003 030f 	and.w	r3, r3, #15
 801fc7a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.buf));
      switch (op) {
 801fc7e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fc82:	2b0a      	cmp	r3, #10
 801fc84:	d877      	bhi.n	801fd76 <mg_ws_cb+0x186>
 801fc86:	a201      	add	r2, pc, #4	@ (adr r2, 801fc8c <mg_ws_cb+0x9c>)
 801fc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc8c:	0801fcb9 	.word	0x0801fcb9
 801fc90:	0801fd13 	.word	0x0801fd13
 801fc94:	0801fd13 	.word	0x0801fd13
 801fc98:	0801fd77 	.word	0x0801fd77
 801fc9c:	0801fd77 	.word	0x0801fd77
 801fca0:	0801fd77 	.word	0x0801fd77
 801fca4:	0801fd77 	.word	0x0801fd77
 801fca8:	0801fd77 	.word	0x0801fd77
 801fcac:	0801fd2b 	.word	0x0801fd2b
 801fcb0:	0801fcc9 	.word	0x0801fcc9
 801fcb4:	0801fd03 	.word	0x0801fd03
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 801fcb8:	f107 0318 	add.w	r3, r7, #24
 801fcbc:	461a      	mov	r2, r3
 801fcbe:	210e      	movs	r1, #14
 801fcc0:	6978      	ldr	r0, [r7, #20]
 801fcc2:	f7e6 fe86 	bl	80069d2 <mg_call>
          break;
 801fcc6:	e05f      	b.n	801fd88 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 801fcc8:	4b70      	ldr	r3, [pc, #448]	@ (801fe8c <mg_ws_cb+0x29c>)
 801fcca:	681b      	ldr	r3, [r3, #0]
 801fccc:	2b02      	cmp	r3, #2
 801fcce:	dd0a      	ble.n	801fce6 <mg_ws_cb+0xf6>
 801fcd0:	4b6f      	ldr	r3, [pc, #444]	@ (801fe90 <mg_ws_cb+0x2a0>)
 801fcd2:	f644 6298 	movw	r2, #20120	@ 0x4e98
 801fcd6:	496f      	ldr	r1, [pc, #444]	@ (801fe94 <mg_ws_cb+0x2a4>)
 801fcd8:	2003      	movs	r0, #3
 801fcda:	f7ec fbab 	bl	800c434 <mg_log_prefix>
 801fcde:	496e      	ldr	r1, [pc, #440]	@ (801fe98 <mg_ws_cb+0x2a8>)
 801fce0:	486e      	ldr	r0, [pc, #440]	@ (801fe9c <mg_ws_cb+0x2ac>)
 801fce2:	f7ec fbf7 	bl	800c4d4 <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 801fce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801fce8:	230a      	movs	r3, #10
 801fcea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801fcec:	6978      	ldr	r0, [r7, #20]
 801fcee:	f7ff fe8f 	bl	801fa10 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 801fcf2:	f107 0318 	add.w	r3, r7, #24
 801fcf6:	461a      	mov	r2, r3
 801fcf8:	210e      	movs	r1, #14
 801fcfa:	6978      	ldr	r0, [r7, #20]
 801fcfc:	f7e6 fe69 	bl	80069d2 <mg_call>
          break;
 801fd00:	e042      	b.n	801fd88 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 801fd02:	f107 0318 	add.w	r3, r7, #24
 801fd06:	461a      	mov	r2, r3
 801fd08:	210e      	movs	r1, #14
 801fd0a:	6978      	ldr	r0, [r7, #20]
 801fd0c:	f7e6 fe61 	bl	80069d2 <mg_call>
          break;
 801fd10:	e03a      	b.n	801fd88 <mg_ws_cb+0x198>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 801fd12:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d035      	beq.n	801fd86 <mg_ws_cb+0x196>
 801fd1a:	f107 0318 	add.w	r3, r7, #24
 801fd1e:	461a      	mov	r2, r3
 801fd20:	210d      	movs	r1, #13
 801fd22:	6978      	ldr	r0, [r7, #20]
 801fd24:	f7e6 fe55 	bl	80069d2 <mg_call>
          break;
 801fd28:	e02d      	b.n	801fd86 <mg_ws_cb+0x196>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 801fd2a:	4b58      	ldr	r3, [pc, #352]	@ (801fe8c <mg_ws_cb+0x29c>)
 801fd2c:	681b      	ldr	r3, [r3, #0]
 801fd2e:	2b02      	cmp	r3, #2
 801fd30:	dd0c      	ble.n	801fd4c <mg_ws_cb+0x15c>
 801fd32:	4b57      	ldr	r3, [pc, #348]	@ (801fe90 <mg_ws_cb+0x2a0>)
 801fd34:	f644 62a4 	movw	r2, #20132	@ 0x4ea4
 801fd38:	4956      	ldr	r1, [pc, #344]	@ (801fe94 <mg_ws_cb+0x2a4>)
 801fd3a:	2003      	movs	r0, #3
 801fd3c:	f7ec fb7a 	bl	800c434 <mg_log_prefix>
 801fd40:	697b      	ldr	r3, [r7, #20]
 801fd42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd44:	4619      	mov	r1, r3
 801fd46:	4856      	ldr	r0, [pc, #344]	@ (801fea0 <mg_ws_cb+0x2b0>)
 801fd48:	f7ec fbc4 	bl	800c4d4 <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 801fd4c:	f107 0318 	add.w	r3, r7, #24
 801fd50:	461a      	mov	r2, r3
 801fd52:	210e      	movs	r1, #14
 801fd54:	6978      	ldr	r0, [r7, #20]
 801fd56:	f7e6 fe3c 	bl	80069d2 <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.buf, m.data.len, WEBSOCKET_OP_CLOSE);
 801fd5a:	69b9      	ldr	r1, [r7, #24]
 801fd5c:	69fa      	ldr	r2, [r7, #28]
 801fd5e:	2308      	movs	r3, #8
 801fd60:	6978      	ldr	r0, [r7, #20]
 801fd62:	f7ff fe55 	bl	801fa10 <mg_ws_send>
          c->is_draining = 1;
 801fd66:	697a      	ldr	r2, [r7, #20]
 801fd68:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801fd6c:	f043 0310 	orr.w	r3, r3, #16
 801fd70:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
          break;
 801fd74:	e008      	b.n	801fd88 <mg_ws_cb+0x198>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 801fd76:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fd7a:	461a      	mov	r2, r3
 801fd7c:	4949      	ldr	r1, [pc, #292]	@ (801fea4 <mg_ws_cb+0x2b4>)
 801fd7e:	6978      	ldr	r0, [r7, #20]
 801fd80:	f7e6 fe48 	bl	8006a14 <mg_error>
          break;
 801fd84:	e000      	b.n	801fd88 <mg_ws_cb+0x198>
          break;
 801fd86:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 801fd88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fd8c:	2b00      	cmp	r3, #0
 801fd8e:	d003      	beq.n	801fd98 <mg_ws_cb+0x1a8>
 801fd90:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	d11f      	bne.n	801fdd8 <mg_ws_cb+0x1e8>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 801fd98:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	d008      	beq.n	801fdb2 <mg_ws_cb+0x1c2>
 801fda0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fda2:	3301      	adds	r3, #1
 801fda4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801fda6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fda8:	3b01      	subs	r3, #1
 801fdaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 801fdac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdae:	3b01      	subs	r3, #1
 801fdb0:	62bb      	str	r3, [r7, #40]	@ 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 801fdb2:	697b      	ldr	r3, [r7, #20]
 801fdb4:	3338      	adds	r3, #56	@ 0x38
 801fdb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801fdb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fdba:	4618      	mov	r0, r3
 801fdbc:	f7eb fc6e 	bl	800b69c <mg_iobuf_del>
        len -= msg.header_len;
 801fdc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fdc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801fdc4:	1ad3      	subs	r3, r2, r3
 801fdc6:	63bb      	str	r3, [r7, #56]	@ 0x38
        ofs += len;
 801fdc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fdca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fdcc:	4413      	add	r3, r2
 801fdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = (void *) ofs;
 801fdd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fdd2:	697b      	ldr	r3, [r7, #20]
 801fdd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 801fdd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d00a      	beq.n	801fdf6 <mg_ws_cb+0x206>
 801fde0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	d006      	beq.n	801fdf6 <mg_ws_cb+0x206>
 801fde8:	697b      	ldr	r3, [r7, #20]
 801fdea:	3338      	adds	r3, #56	@ 0x38
 801fdec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801fdee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801fdf0:	4618      	mov	r0, r3
 801fdf2:	f7eb fc53 	bl	800b69c <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op && (ofs > 0)) {
 801fdf6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801fdfa:	2b00      	cmp	r3, #0
 801fdfc:	d02f      	beq.n	801fe5e <mg_ws_cb+0x26e>
 801fdfe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 801fe02:	2b00      	cmp	r3, #0
 801fe04:	d12b      	bne.n	801fe5e <mg_ws_cb+0x26e>
 801fe06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	d028      	beq.n	801fe5e <mg_ws_cb+0x26e>
        m.flags = c->recv.buf[0];
 801fe0c:	697b      	ldr	r3, [r7, #20]
 801fe0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fe10:	781b      	ldrb	r3, [r3, #0]
 801fe12:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 801fe16:	697b      	ldr	r3, [r7, #20]
 801fe18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fe1a:	1c59      	adds	r1, r3, #1
 801fe1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fe1e:	1e5a      	subs	r2, r3, #1
 801fe20:	463b      	mov	r3, r7
 801fe22:	4618      	mov	r0, r3
 801fe24:	f7f4 f96f 	bl	8014106 <mg_str_n>
 801fe28:	f107 0318 	add.w	r3, r7, #24
 801fe2c:	463a      	mov	r2, r7
 801fe2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801fe32:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 801fe36:	f107 0318 	add.w	r3, r7, #24
 801fe3a:	461a      	mov	r2, r3
 801fe3c:	210d      	movs	r1, #13
 801fe3e:	6978      	ldr	r0, [r7, #20]
 801fe40:	f7e6 fdc7 	bl	80069d2 <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 801fe44:	697b      	ldr	r3, [r7, #20]
 801fe46:	3338      	adds	r3, #56	@ 0x38
 801fe48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801fe4a:	2100      	movs	r1, #0
 801fe4c:	4618      	mov	r0, r3
 801fe4e:	f7eb fc25 	bl	800b69c <mg_iobuf_del>
        ofs = 0;
 801fe52:	2300      	movs	r3, #0
 801fe54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        c->pfn_data = NULL;
 801fe56:	697b      	ldr	r3, [r7, #20]
 801fe58:	2200      	movs	r2, #0
 801fe5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 801fe5e:	697b      	ldr	r3, [r7, #20]
 801fe60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fe62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fe64:	18d0      	adds	r0, r2, r3
 801fe66:	697b      	ldr	r3, [r7, #20]
 801fe68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801fe6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fe6c:	1ad3      	subs	r3, r2, r3
 801fe6e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801fe72:	4619      	mov	r1, r3
 801fe74:	f7ff fc76 	bl	801f764 <ws_process>
 801fe78:	4603      	mov	r3, r0
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	f47f aee0 	bne.w	801fc40 <mg_ws_cb+0x50>
 801fe80:	e000      	b.n	801fe84 <mg_ws_cb+0x294>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 801fe82:	bf00      	nop
      }
    }
  }
  (void) ev_data;
}
 801fe84:	3740      	adds	r7, #64	@ 0x40
 801fe86:	46bd      	mov	sp, r7
 801fe88:	bd80      	pop	{r7, pc}
 801fe8a:	bf00      	nop
 801fe8c:	24000258 	.word	0x24000258
 801fe90:	0802838c 	.word	0x0802838c
 801fe94:	08024478 	.word	0x08024478
 801fe98:	08026d48 	.word	0x08026d48
 801fe9c:	08024744 	.word	0x08024744
 801fea0:	08026d50 	.word	0x08026d50
 801fea4:	08026d60 	.word	0x08026d60

0801fea8 <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 801fea8:	b40c      	push	{r2, r3}
 801feaa:	b580      	push	{r7, lr}
 801feac:	b088      	sub	sp, #32
 801feae:	af02      	add	r7, sp, #8
 801feb0:	6078      	str	r0, [r7, #4]
 801feb2:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 801feb4:	4924      	ldr	r1, [pc, #144]	@ (801ff48 <mg_ws_upgrade+0xa0>)
 801feb6:	6838      	ldr	r0, [r7, #0]
 801feb8:	f7e8 fcb6 	bl	8008828 <mg_http_get_header>
 801febc:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	4a22      	ldr	r2, [pc, #136]	@ (801ff4c <mg_ws_upgrade+0xa4>)
 801fec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  c->pfn_data = NULL;
 801fec6:	687b      	ldr	r3, [r7, #4]
 801fec8:	2200      	movs	r2, #0
 801feca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  if (wskey == NULL) {
 801fece:	697b      	ldr	r3, [r7, #20]
 801fed0:	2b00      	cmp	r3, #0
 801fed2:	d10e      	bne.n	801fef2 <mg_ws_upgrade+0x4a>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 801fed4:	4b1e      	ldr	r3, [pc, #120]	@ (801ff50 <mg_ws_upgrade+0xa8>)
 801fed6:	4a1f      	ldr	r2, [pc, #124]	@ (801ff54 <mg_ws_upgrade+0xac>)
 801fed8:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 801fedc:	6878      	ldr	r0, [r7, #4]
 801fede:	f7e9 fd19 	bl	8009914 <mg_http_reply>
    c->is_draining = 1;
 801fee2:	687a      	ldr	r2, [r7, #4]
 801fee4:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801fee8:	f043 0310 	orr.w	r3, r3, #16
 801feec:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 801fef0:	e023      	b.n	801ff3a <mg_ws_upgrade+0x92>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 801fef2:	4919      	ldr	r1, [pc, #100]	@ (801ff58 <mg_ws_upgrade+0xb0>)
 801fef4:	6838      	ldr	r0, [r7, #0]
 801fef6:	f7e8 fc97 	bl	8008828 <mg_http_get_header>
 801fefa:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 801fefc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ff00:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 801ff02:	f107 030c 	add.w	r3, r7, #12
 801ff06:	9300      	str	r3, [sp, #0]
 801ff08:	6a3b      	ldr	r3, [r7, #32]
 801ff0a:	693a      	ldr	r2, [r7, #16]
 801ff0c:	6979      	ldr	r1, [r7, #20]
 801ff0e:	6878      	ldr	r0, [r7, #4]
 801ff10:	f7ff fba8 	bl	801f664 <ws_handshake>
    c->is_websocket = 1;
 801ff14:	687a      	ldr	r2, [r7, #4]
 801ff16:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 801ff1a:	f043 0302 	orr.w	r3, r3, #2
 801ff1e:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    c->is_resp = 0;
 801ff22:	687a      	ldr	r2, [r7, #4]
 801ff24:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 801ff28:	f023 0301 	bic.w	r3, r3, #1
 801ff2c:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    mg_call(c, MG_EV_WS_OPEN, hm);
 801ff30:	683a      	ldr	r2, [r7, #0]
 801ff32:	210c      	movs	r1, #12
 801ff34:	6878      	ldr	r0, [r7, #4]
 801ff36:	f7e6 fd4c 	bl	80069d2 <mg_call>
}
 801ff3a:	bf00      	nop
 801ff3c:	3718      	adds	r7, #24
 801ff3e:	46bd      	mov	sp, r7
 801ff40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801ff44:	b002      	add	sp, #8
 801ff46:	4770      	bx	lr
 801ff48:	08026df0 	.word	0x08026df0
 801ff4c:	0801fbf1 	.word	0x0801fbf1
 801ff50:	08026e04 	.word	0x08026e04
 801ff54:	08024cb8 	.word	0x08024cb8
 801ff58:	08026e1c 	.word	0x08026e1c

0801ff5c <mg_phy_id_to_str>:
  MG_PHY_RTL8201_REG_RMSR = 16,  // in page 7
  MG_PHY_RTL8201_REG_PAGESEL = 31,
  MG_PHY_ICS189432_REG_POLL = 17
};

static const char *mg_phy_id_to_str(uint16_t id1, uint16_t id2) {
 801ff5c:	b480      	push	{r7}
 801ff5e:	b083      	sub	sp, #12
 801ff60:	af00      	add	r7, sp, #0
 801ff62:	4603      	mov	r3, r0
 801ff64:	460a      	mov	r2, r1
 801ff66:	80fb      	strh	r3, [r7, #6]
 801ff68:	4613      	mov	r3, r2
 801ff6a:	80bb      	strh	r3, [r7, #4]
  switch (id1) {
 801ff6c:	88fb      	ldrh	r3, [r7, #6]
 801ff6e:	2b22      	cmp	r3, #34	@ 0x22
 801ff70:	dc40      	bgt.n	801fff4 <mg_phy_id_to_str+0x98>
 801ff72:	2b07      	cmp	r3, #7
 801ff74:	db63      	blt.n	802003e <mg_phy_id_to_str+0xe2>
 801ff76:	3b07      	subs	r3, #7
 801ff78:	2b1b      	cmp	r3, #27
 801ff7a:	d860      	bhi.n	802003e <mg_phy_id_to_str+0xe2>
 801ff7c:	a201      	add	r2, pc, #4	@ (adr r2, 801ff84 <mg_phy_id_to_str+0x28>)
 801ff7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ff82:	bf00      	nop
 801ff84:	08020033 	.word	0x08020033
 801ff88:	0802003f 	.word	0x0802003f
 801ff8c:	0802003f 	.word	0x0802003f
 801ff90:	0802003f 	.word	0x0802003f
 801ff94:	0802003f 	.word	0x0802003f
 801ff98:	0802003f 	.word	0x0802003f
 801ff9c:	0802003f 	.word	0x0802003f
 801ffa0:	0802003f 	.word	0x0802003f
 801ffa4:	0802003f 	.word	0x0802003f
 801ffa8:	0802003f 	.word	0x0802003f
 801ffac:	0802003f 	.word	0x0802003f
 801ffb0:	0802003f 	.word	0x0802003f
 801ffb4:	0802003f 	.word	0x0802003f
 801ffb8:	0802003f 	.word	0x0802003f
 801ffbc:	0802003b 	.word	0x0802003b
 801ffc0:	0802003f 	.word	0x0802003f
 801ffc4:	0802003f 	.word	0x0802003f
 801ffc8:	0802003f 	.word	0x0802003f
 801ffcc:	0802003f 	.word	0x0802003f
 801ffd0:	0802003f 	.word	0x0802003f
 801ffd4:	0802003f 	.word	0x0802003f
 801ffd8:	08020037 	.word	0x08020037
 801ffdc:	0802003f 	.word	0x0802003f
 801ffe0:	0802003f 	.word	0x0802003f
 801ffe4:	0802003f 	.word	0x0802003f
 801ffe8:	0802003f 	.word	0x0802003f
 801ffec:	0802003f 	.word	0x0802003f
 801fff0:	0802002f 	.word	0x0802002f
 801fff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801fff8:	d121      	bne.n	802003e <mg_phy_id_to_str+0xe2>
    case MG_PHY_DP83x:
      switch (id2) {
 801fffa:	88bb      	ldrh	r3, [r7, #4]
 801fffc:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8020000:	4293      	cmp	r3, r2
 8020002:	d00c      	beq.n	802001e <mg_phy_id_to_str+0xc2>
 8020004:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8020008:	4293      	cmp	r3, r2
 802000a:	dc0e      	bgt.n	802002a <mg_phy_id_to_str+0xce>
 802000c:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8020010:	4293      	cmp	r3, r2
 8020012:	d006      	beq.n	8020022 <mg_phy_id_to_str+0xc6>
 8020014:	f24a 1240 	movw	r2, #41280	@ 0xa140
 8020018:	4293      	cmp	r3, r2
 802001a:	d004      	beq.n	8020026 <mg_phy_id_to_str+0xca>
 802001c:	e005      	b.n	802002a <mg_phy_id_to_str+0xce>
        case MG_PHY_DP83867:
          return "DP83867";
 802001e:	4b0b      	ldr	r3, [pc, #44]	@ (802004c <mg_phy_id_to_str+0xf0>)
 8020020:	e00e      	b.n	8020040 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83848:
          return "DP83848";
 8020022:	4b0b      	ldr	r3, [pc, #44]	@ (8020050 <mg_phy_id_to_str+0xf4>)
 8020024:	e00c      	b.n	8020040 <mg_phy_id_to_str+0xe4>
        case MG_PHY_DP83825:
          return "DP83825";
 8020026:	4b0b      	ldr	r3, [pc, #44]	@ (8020054 <mg_phy_id_to_str+0xf8>)
 8020028:	e00a      	b.n	8020040 <mg_phy_id_to_str+0xe4>
        default:
          return "DP83x";
 802002a:	4b0b      	ldr	r3, [pc, #44]	@ (8020058 <mg_phy_id_to_str+0xfc>)
 802002c:	e008      	b.n	8020040 <mg_phy_id_to_str+0xe4>
      }
    case MG_PHY_KSZ8x:
      return "KSZ8x";
 802002e:	4b0b      	ldr	r3, [pc, #44]	@ (802005c <mg_phy_id_to_str+0x100>)
 8020030:	e006      	b.n	8020040 <mg_phy_id_to_str+0xe4>
    case MG_PHY_LAN87x:
      return "LAN87x";
 8020032:	4b0b      	ldr	r3, [pc, #44]	@ (8020060 <mg_phy_id_to_str+0x104>)
 8020034:	e004      	b.n	8020040 <mg_phy_id_to_str+0xe4>
    case MG_PHY_RTL8201:
      return "RTL8201";
 8020036:	4b0b      	ldr	r3, [pc, #44]	@ (8020064 <mg_phy_id_to_str+0x108>)
 8020038:	e002      	b.n	8020040 <mg_phy_id_to_str+0xe4>
    case MG_PHY_ICS1894x:
      return "ICS1894x";
 802003a:	4b0b      	ldr	r3, [pc, #44]	@ (8020068 <mg_phy_id_to_str+0x10c>)
 802003c:	e000      	b.n	8020040 <mg_phy_id_to_str+0xe4>
    default:
      return "unknown";
 802003e:	4b0b      	ldr	r3, [pc, #44]	@ (802006c <mg_phy_id_to_str+0x110>)
  }
  (void) id2;
}
 8020040:	4618      	mov	r0, r3
 8020042:	370c      	adds	r7, #12
 8020044:	46bd      	mov	sp, r7
 8020046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802004a:	4770      	bx	lr
 802004c:	08026e34 	.word	0x08026e34
 8020050:	08026e3c 	.word	0x08026e3c
 8020054:	08026e44 	.word	0x08026e44
 8020058:	08026e4c 	.word	0x08026e4c
 802005c:	08026e54 	.word	0x08026e54
 8020060:	08026e5c 	.word	0x08026e5c
 8020064:	08026e64 	.word	0x08026e64
 8020068:	08026e6c 	.word	0x08026e6c
 802006c:	08026e78 	.word	0x08026e78

08020070 <mg_phy_init>:

void mg_phy_init(struct mg_phy *phy, uint8_t phy_addr, uint8_t config) {
 8020070:	b5b0      	push	{r4, r5, r7, lr}
 8020072:	b084      	sub	sp, #16
 8020074:	af00      	add	r7, sp, #0
 8020076:	6078      	str	r0, [r7, #4]
 8020078:	460b      	mov	r3, r1
 802007a:	70fb      	strb	r3, [r7, #3]
 802007c:	4613      	mov	r3, r2
 802007e:	70bb      	strb	r3, [r7, #2]
  uint16_t id1, id2;
  phy->write_reg(phy_addr, MG_PHY_REG_BCR, MG_BIT(15));  // Reset PHY
 8020080:	687b      	ldr	r3, [r7, #4]
 8020082:	685b      	ldr	r3, [r3, #4]
 8020084:	78f8      	ldrb	r0, [r7, #3]
 8020086:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 802008a:	2100      	movs	r1, #0
 802008c:	4798      	blx	r3
  while (phy->read_reg(phy_addr, MG_PHY_REG_BCR) & MG_BIT(15)) (void) 0;
 802008e:	bf00      	nop
 8020090:	687b      	ldr	r3, [r7, #4]
 8020092:	681b      	ldr	r3, [r3, #0]
 8020094:	78fa      	ldrb	r2, [r7, #3]
 8020096:	2100      	movs	r1, #0
 8020098:	4610      	mov	r0, r2
 802009a:	4798      	blx	r3
 802009c:	4603      	mov	r3, r0
 802009e:	b21b      	sxth	r3, r3
 80200a0:	2b00      	cmp	r3, #0
 80200a2:	dbf5      	blt.n	8020090 <mg_phy_init+0x20>
  // MG_PHY_REG_BCR[12]: Autonegotiation is default unless hw says otherwise

  id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 80200a4:	687b      	ldr	r3, [r7, #4]
 80200a6:	681b      	ldr	r3, [r3, #0]
 80200a8:	78fa      	ldrb	r2, [r7, #3]
 80200aa:	2102      	movs	r1, #2
 80200ac:	4610      	mov	r0, r2
 80200ae:	4798      	blx	r3
 80200b0:	4603      	mov	r3, r0
 80200b2:	81fb      	strh	r3, [r7, #14]
  id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 80200b4:	687b      	ldr	r3, [r7, #4]
 80200b6:	681b      	ldr	r3, [r3, #0]
 80200b8:	78fa      	ldrb	r2, [r7, #3]
 80200ba:	2103      	movs	r1, #3
 80200bc:	4610      	mov	r0, r2
 80200be:	4798      	blx	r3
 80200c0:	4603      	mov	r3, r0
 80200c2:	81bb      	strh	r3, [r7, #12]
  MG_INFO(("PHY ID: %#04x %#04x (%s)", id1, id2, mg_phy_id_to_str(id1, id2)));
 80200c4:	4b42      	ldr	r3, [pc, #264]	@ (80201d0 <mg_phy_init+0x160>)
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	2b01      	cmp	r3, #1
 80200ca:	dd14      	ble.n	80200f6 <mg_phy_init+0x86>
 80200cc:	4b41      	ldr	r3, [pc, #260]	@ (80201d4 <mg_phy_init+0x164>)
 80200ce:	f245 6224 	movw	r2, #22052	@ 0x5624
 80200d2:	4941      	ldr	r1, [pc, #260]	@ (80201d8 <mg_phy_init+0x168>)
 80200d4:	2002      	movs	r0, #2
 80200d6:	f7ec f9ad 	bl	800c434 <mg_log_prefix>
 80200da:	89fc      	ldrh	r4, [r7, #14]
 80200dc:	89bd      	ldrh	r5, [r7, #12]
 80200de:	89ba      	ldrh	r2, [r7, #12]
 80200e0:	89fb      	ldrh	r3, [r7, #14]
 80200e2:	4611      	mov	r1, r2
 80200e4:	4618      	mov	r0, r3
 80200e6:	f7ff ff39 	bl	801ff5c <mg_phy_id_to_str>
 80200ea:	4603      	mov	r3, r0
 80200ec:	462a      	mov	r2, r5
 80200ee:	4621      	mov	r1, r4
 80200f0:	483a      	ldr	r0, [pc, #232]	@ (80201dc <mg_phy_init+0x16c>)
 80200f2:	f7ec f9ef 	bl	800c4d4 <mg_log>

  if (id1 == MG_PHY_DP83x && id2 == MG_PHY_DP83867) {
 80200f6:	89fb      	ldrh	r3, [r7, #14]
 80200f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80200fc:	d11f      	bne.n	802013e <mg_phy_init+0xce>
 80200fe:	89bb      	ldrh	r3, [r7, #12]
 8020100:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8020104:	4293      	cmp	r3, r2
 8020106:	d11a      	bne.n	802013e <mg_phy_init+0xce>
    phy->write_reg(phy_addr, 0x0d, 0x1f);  // write 0x10d to IO_MUX_CFG (0x0170)
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	685b      	ldr	r3, [r3, #4]
 802010c:	78f8      	ldrb	r0, [r7, #3]
 802010e:	221f      	movs	r2, #31
 8020110:	210d      	movs	r1, #13
 8020112:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x170);
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	685b      	ldr	r3, [r3, #4]
 8020118:	78f8      	ldrb	r0, [r7, #3]
 802011a:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 802011e:	210e      	movs	r1, #14
 8020120:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0d, 0x401f);
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	685b      	ldr	r3, [r3, #4]
 8020126:	78f8      	ldrb	r0, [r7, #3]
 8020128:	f244 021f 	movw	r2, #16415	@ 0x401f
 802012c:	210d      	movs	r1, #13
 802012e:	4798      	blx	r3
    phy->write_reg(phy_addr, 0x0e, 0x10d);
 8020130:	687b      	ldr	r3, [r7, #4]
 8020132:	685b      	ldr	r3, [r3, #4]
 8020134:	78f8      	ldrb	r0, [r7, #3]
 8020136:	f240 120d 	movw	r2, #269	@ 0x10d
 802013a:	210e      	movs	r1, #14
 802013c:	4798      	blx	r3
  }

  if (config & MG_PHY_CLOCKS_MAC) {
 802013e:	78bb      	ldrb	r3, [r7, #2]
 8020140:	f003 0302 	and.w	r3, r3, #2
 8020144:	2b00      	cmp	r3, #0
 8020146:	d12e      	bne.n	80201a6 <mg_phy_init+0x136>
    // Use PHY crystal oscillator (preserve defaults)
    // nothing to do
  } else {  // MAC clocks PHY, PHY has no xtal
    // Enable 50 MHz external ref clock at XI (preserve defaults)
    if (id1 == MG_PHY_DP83x && id2 != MG_PHY_DP83867 && id2 != MG_PHY_DP83848) {
 8020148:	89fb      	ldrh	r3, [r7, #14]
 802014a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802014e:	d110      	bne.n	8020172 <mg_phy_init+0x102>
 8020150:	89bb      	ldrh	r3, [r7, #12]
 8020152:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8020156:	4293      	cmp	r3, r2
 8020158:	d00b      	beq.n	8020172 <mg_phy_init+0x102>
 802015a:	89bb      	ldrh	r3, [r7, #12]
 802015c:	f645 42a2 	movw	r2, #23714	@ 0x5ca2
 8020160:	4293      	cmp	r3, r2
 8020162:	d006      	beq.n	8020172 <mg_phy_init+0x102>
      phy->write_reg(phy_addr, MG_PHY_DP83x_REG_RCSR, MG_BIT(7) | MG_BIT(0));
 8020164:	687b      	ldr	r3, [r7, #4]
 8020166:	685b      	ldr	r3, [r3, #4]
 8020168:	78f8      	ldrb	r0, [r7, #3]
 802016a:	2281      	movs	r2, #129	@ 0x81
 802016c:	2117      	movs	r1, #23
 802016e:	4798      	blx	r3
 8020170:	e019      	b.n	80201a6 <mg_phy_init+0x136>
    } else if (id1 == MG_PHY_KSZ8x) {
 8020172:	89fb      	ldrh	r3, [r7, #14]
 8020174:	2b22      	cmp	r3, #34	@ 0x22
 8020176:	d116      	bne.n	80201a6 <mg_phy_init+0x136>
      // Disable isolation (override hw, it doesn't make sense at this point)
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	685c      	ldr	r4, [r3, #4]
          phy_addr, MG_PHY_REG_BCR,  // docs say they don't
          phy->read_reg(phy_addr, MG_PHY_REG_BCR) & (uint16_t) ~MG_BIT(10));
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	681b      	ldr	r3, [r3, #0]
 8020180:	78fa      	ldrb	r2, [r7, #3]
 8020182:	2100      	movs	r1, #0
 8020184:	4610      	mov	r0, r2
 8020186:	4798      	blx	r3
 8020188:	4603      	mov	r3, r0
      phy->write_reg(  // #2848, some NXP boards set ISO, even though
 802018a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 802018e:	b29a      	uxth	r2, r3
 8020190:	78fb      	ldrb	r3, [r7, #3]
 8020192:	2100      	movs	r1, #0
 8020194:	4618      	mov	r0, r3
 8020196:	47a0      	blx	r4
      phy->write_reg(phy_addr, MG_PHY_KSZ8x_REG_PC2R,  // now do clock stuff
 8020198:	687b      	ldr	r3, [r7, #4]
 802019a:	685b      	ldr	r3, [r3, #4]
 802019c:	78f8      	ldrb	r0, [r7, #3]
 802019e:	f248 1280 	movw	r2, #33152	@ 0x8180
 80201a2:	211f      	movs	r1, #31
 80201a4:	4798      	blx	r3
      phy->write_reg(phy_addr, MG_PHY_RTL8201_REG_PAGESEL, 0);  // Select page 0
#endif
    }
  }

  if (config & MG_PHY_LEDS_ACTIVE_HIGH && id1 == MG_PHY_DP83x) {
 80201a6:	78bb      	ldrb	r3, [r7, #2]
 80201a8:	f003 0301 	and.w	r3, r3, #1
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d00a      	beq.n	80201c6 <mg_phy_init+0x156>
 80201b0:	89fb      	ldrh	r3, [r7, #14]
 80201b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80201b6:	d106      	bne.n	80201c6 <mg_phy_init+0x156>
    phy->write_reg(phy_addr, MG_PHY_DP83x_REG_LEDCR,
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	685b      	ldr	r3, [r3, #4]
 80201bc:	78f8      	ldrb	r0, [r7, #3]
 80201be:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80201c2:	2118      	movs	r1, #24
 80201c4:	4798      	blx	r3
                   MG_BIT(9) | MG_BIT(7));  // LED status, active high
  }  // Other PHYs do not support this feature
}
 80201c6:	bf00      	nop
 80201c8:	3710      	adds	r7, #16
 80201ca:	46bd      	mov	sp, r7
 80201cc:	bdb0      	pop	{r4, r5, r7, pc}
 80201ce:	bf00      	nop
 80201d0:	24000258 	.word	0x24000258
 80201d4:	08028398 	.word	0x08028398
 80201d8:	08024478 	.word	0x08024478
 80201dc:	08026e80 	.word	0x08026e80

080201e0 <mg_phy_up>:

bool mg_phy_up(struct mg_phy *phy, uint8_t phy_addr, bool *full_duplex,
               uint8_t *speed) {
 80201e0:	b580      	push	{r7, lr}
 80201e2:	b08a      	sub	sp, #40	@ 0x28
 80201e4:	af00      	add	r7, sp, #0
 80201e6:	60f8      	str	r0, [r7, #12]
 80201e8:	607a      	str	r2, [r7, #4]
 80201ea:	603b      	str	r3, [r7, #0]
 80201ec:	460b      	mov	r3, r1
 80201ee:	72fb      	strb	r3, [r7, #11]
  bool up = false;
 80201f0:	2300      	movs	r3, #0
 80201f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint16_t bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);
 80201f6:	68fb      	ldr	r3, [r7, #12]
 80201f8:	681b      	ldr	r3, [r3, #0]
 80201fa:	7afa      	ldrb	r2, [r7, #11]
 80201fc:	2101      	movs	r1, #1
 80201fe:	4610      	mov	r0, r2
 8020200:	4798      	blx	r3
 8020202:	4603      	mov	r3, r0
 8020204:	84fb      	strh	r3, [r7, #38]	@ 0x26
  if ((bsr & MG_BIT(5)) && !(bsr & MG_BIT(2)))  // some PHYs latch down events
 8020206:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020208:	f003 0320 	and.w	r3, r3, #32
 802020c:	2b00      	cmp	r3, #0
 802020e:	d00c      	beq.n	802022a <mg_phy_up+0x4a>
 8020210:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8020212:	f003 0304 	and.w	r3, r3, #4
 8020216:	2b00      	cmp	r3, #0
 8020218:	d107      	bne.n	802022a <mg_phy_up+0x4a>
    bsr = phy->read_reg(phy_addr, MG_PHY_REG_BSR);  // read again
 802021a:	68fb      	ldr	r3, [r7, #12]
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	7afa      	ldrb	r2, [r7, #11]
 8020220:	2101      	movs	r1, #1
 8020222:	4610      	mov	r0, r2
 8020224:	4798      	blx	r3
 8020226:	4603      	mov	r3, r0
 8020228:	84fb      	strh	r3, [r7, #38]	@ 0x26
  up = bsr & MG_BIT(2);
 802022a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 802022c:	f003 0304 	and.w	r3, r3, #4
 8020230:	2b00      	cmp	r3, #0
 8020232:	bf14      	ite	ne
 8020234:	2301      	movne	r3, #1
 8020236:	2300      	moveq	r3, #0
 8020238:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (up && full_duplex != NULL && speed != NULL) {
 802023c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8020240:	2b00      	cmp	r3, #0
 8020242:	f000 80dc 	beq.w	80203fe <mg_phy_up+0x21e>
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	2b00      	cmp	r3, #0
 802024a:	f000 80d8 	beq.w	80203fe <mg_phy_up+0x21e>
 802024e:	683b      	ldr	r3, [r7, #0]
 8020250:	2b00      	cmp	r3, #0
 8020252:	f000 80d4 	beq.w	80203fe <mg_phy_up+0x21e>
    uint16_t id1 = phy->read_reg(phy_addr, MG_PHY_REG_ID1);
 8020256:	68fb      	ldr	r3, [r7, #12]
 8020258:	681b      	ldr	r3, [r3, #0]
 802025a:	7afa      	ldrb	r2, [r7, #11]
 802025c:	2102      	movs	r1, #2
 802025e:	4610      	mov	r0, r2
 8020260:	4798      	blx	r3
 8020262:	4603      	mov	r3, r0
 8020264:	847b      	strh	r3, [r7, #34]	@ 0x22
    if (id1 == MG_PHY_DP83x) {
 8020266:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802026c:	d14b      	bne.n	8020306 <mg_phy_up+0x126>
      uint16_t id2 = phy->read_reg(phy_addr, MG_PHY_REG_ID2);
 802026e:	68fb      	ldr	r3, [r7, #12]
 8020270:	681b      	ldr	r3, [r3, #0]
 8020272:	7afa      	ldrb	r2, [r7, #11]
 8020274:	2103      	movs	r1, #3
 8020276:	4610      	mov	r0, r2
 8020278:	4798      	blx	r3
 802027a:	4603      	mov	r3, r0
 802027c:	833b      	strh	r3, [r7, #24]
      if (id2 == MG_PHY_DP83867) {
 802027e:	8b3b      	ldrh	r3, [r7, #24]
 8020280:	f24a 2231 	movw	r2, #41521	@ 0xa231
 8020284:	4293      	cmp	r3, r2
 8020286:	d120      	bne.n	80202ca <mg_phy_up+0xea>
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83867_REG_PHYSTS);
 8020288:	68fb      	ldr	r3, [r7, #12]
 802028a:	681b      	ldr	r3, [r3, #0]
 802028c:	7afa      	ldrb	r2, [r7, #11]
 802028e:	2111      	movs	r1, #17
 8020290:	4610      	mov	r0, r2
 8020292:	4798      	blx	r3
 8020294:	4603      	mov	r3, r0
 8020296:	82bb      	strh	r3, [r7, #20]
        *full_duplex = physts & MG_BIT(13);
 8020298:	8abb      	ldrh	r3, [r7, #20]
 802029a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 802029e:	2b00      	cmp	r3, #0
 80202a0:	bf14      	ite	ne
 80202a2:	2301      	movne	r3, #1
 80202a4:	2300      	moveq	r3, #0
 80202a6:	b2da      	uxtb	r2, r3
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 80202ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80202b0:	2b00      	cmp	r3, #0
 80202b2:	db06      	blt.n	80202c2 <mg_phy_up+0xe2>
                 : (physts & MG_BIT(14)) ? MG_PHY_SPEED_100M
                                         : MG_PHY_SPEED_10M;
 80202b4:	8abb      	ldrh	r3, [r7, #20]
 80202b6:	0b9b      	lsrs	r3, r3, #14
 80202b8:	b2db      	uxtb	r3, r3
        *speed = (physts & MG_BIT(15))   ? MG_PHY_SPEED_1000M
 80202ba:	f003 0301 	and.w	r3, r3, #1
 80202be:	b2da      	uxtb	r2, r3
 80202c0:	e000      	b.n	80202c4 <mg_phy_up+0xe4>
 80202c2:	2202      	movs	r2, #2
 80202c4:	683b      	ldr	r3, [r7, #0]
 80202c6:	701a      	strb	r2, [r3, #0]
 80202c8:	e099      	b.n	80203fe <mg_phy_up+0x21e>
      } else {
        uint16_t physts = phy->read_reg(phy_addr, MG_PHY_DP83x_REG_PHYSTS);
 80202ca:	68fb      	ldr	r3, [r7, #12]
 80202cc:	681b      	ldr	r3, [r3, #0]
 80202ce:	7afa      	ldrb	r2, [r7, #11]
 80202d0:	2110      	movs	r1, #16
 80202d2:	4610      	mov	r0, r2
 80202d4:	4798      	blx	r3
 80202d6:	4603      	mov	r3, r0
 80202d8:	82fb      	strh	r3, [r7, #22]
        *full_duplex = physts & MG_BIT(2);
 80202da:	8afb      	ldrh	r3, [r7, #22]
 80202dc:	f003 0304 	and.w	r3, r3, #4
 80202e0:	2b00      	cmp	r3, #0
 80202e2:	bf14      	ite	ne
 80202e4:	2301      	movne	r3, #1
 80202e6:	2300      	moveq	r3, #0
 80202e8:	b2da      	uxtb	r2, r3
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	701a      	strb	r2, [r3, #0]
        *speed = (physts & MG_BIT(1)) ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 80202ee:	8afb      	ldrh	r3, [r7, #22]
 80202f0:	f003 0302 	and.w	r3, r3, #2
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	bf0c      	ite	eq
 80202f8:	2301      	moveq	r3, #1
 80202fa:	2300      	movne	r3, #0
 80202fc:	b2db      	uxtb	r3, r3
 80202fe:	461a      	mov	r2, r3
 8020300:	683b      	ldr	r3, [r7, #0]
 8020302:	701a      	strb	r2, [r3, #0]
 8020304:	e07b      	b.n	80203fe <mg_phy_up+0x21e>
      }
    } else if (id1 == MG_PHY_KSZ8x) {
 8020306:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020308:	2b22      	cmp	r3, #34	@ 0x22
 802030a:	d11d      	bne.n	8020348 <mg_phy_up+0x168>
      uint16_t pc1r = phy->read_reg(phy_addr, MG_PHY_KSZ8x_REG_PC1R);
 802030c:	68fb      	ldr	r3, [r7, #12]
 802030e:	681b      	ldr	r3, [r3, #0]
 8020310:	7afa      	ldrb	r2, [r7, #11]
 8020312:	211e      	movs	r1, #30
 8020314:	4610      	mov	r0, r2
 8020316:	4798      	blx	r3
 8020318:	4603      	mov	r3, r0
 802031a:	837b      	strh	r3, [r7, #26]
      *full_duplex = pc1r & MG_BIT(2);
 802031c:	8b7b      	ldrh	r3, [r7, #26]
 802031e:	f003 0304 	and.w	r3, r3, #4
 8020322:	2b00      	cmp	r3, #0
 8020324:	bf14      	ite	ne
 8020326:	2301      	movne	r3, #1
 8020328:	2300      	moveq	r3, #0
 802032a:	b2da      	uxtb	r2, r3
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	701a      	strb	r2, [r3, #0]
      *speed = (pc1r & 3) == 1 ? MG_PHY_SPEED_10M : MG_PHY_SPEED_100M;
 8020330:	8b7b      	ldrh	r3, [r7, #26]
 8020332:	f003 0303 	and.w	r3, r3, #3
 8020336:	2b01      	cmp	r3, #1
 8020338:	bf14      	ite	ne
 802033a:	2301      	movne	r3, #1
 802033c:	2300      	moveq	r3, #0
 802033e:	b2db      	uxtb	r3, r3
 8020340:	461a      	mov	r2, r3
 8020342:	683b      	ldr	r3, [r7, #0]
 8020344:	701a      	strb	r2, [r3, #0]
 8020346:	e05a      	b.n	80203fe <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_LAN87x) {
 8020348:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 802034a:	2b07      	cmp	r3, #7
 802034c:	d11a      	bne.n	8020384 <mg_phy_up+0x1a4>
      uint16_t scsr = phy->read_reg(phy_addr, MG_PHY_LAN87x_REG_SCSR);
 802034e:	68fb      	ldr	r3, [r7, #12]
 8020350:	681b      	ldr	r3, [r3, #0]
 8020352:	7afa      	ldrb	r2, [r7, #11]
 8020354:	211f      	movs	r1, #31
 8020356:	4610      	mov	r0, r2
 8020358:	4798      	blx	r3
 802035a:	4603      	mov	r3, r0
 802035c:	83bb      	strh	r3, [r7, #28]
      *full_duplex = scsr & MG_BIT(4);
 802035e:	8bbb      	ldrh	r3, [r7, #28]
 8020360:	f003 0310 	and.w	r3, r3, #16
 8020364:	2b00      	cmp	r3, #0
 8020366:	bf14      	ite	ne
 8020368:	2301      	movne	r3, #1
 802036a:	2300      	moveq	r3, #0
 802036c:	b2da      	uxtb	r2, r3
 802036e:	687b      	ldr	r3, [r7, #4]
 8020370:	701a      	strb	r2, [r3, #0]
      *speed = (scsr & MG_BIT(3)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 8020372:	8bbb      	ldrh	r3, [r7, #28]
 8020374:	08db      	lsrs	r3, r3, #3
 8020376:	b2db      	uxtb	r3, r3
 8020378:	f003 0301 	and.w	r3, r3, #1
 802037c:	b2da      	uxtb	r2, r3
 802037e:	683b      	ldr	r3, [r7, #0]
 8020380:	701a      	strb	r2, [r3, #0]
 8020382:	e03c      	b.n	80203fe <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_RTL8201) {
 8020384:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8020386:	2b1c      	cmp	r3, #28
 8020388:	d11a      	bne.n	80203c0 <mg_phy_up+0x1e0>
      uint16_t bcr = phy->read_reg(phy_addr, MG_PHY_REG_BCR);
 802038a:	68fb      	ldr	r3, [r7, #12]
 802038c:	681b      	ldr	r3, [r3, #0]
 802038e:	7afa      	ldrb	r2, [r7, #11]
 8020390:	2100      	movs	r1, #0
 8020392:	4610      	mov	r0, r2
 8020394:	4798      	blx	r3
 8020396:	4603      	mov	r3, r0
 8020398:	83fb      	strh	r3, [r7, #30]
      *full_duplex = bcr & MG_BIT(8);
 802039a:	8bfb      	ldrh	r3, [r7, #30]
 802039c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	bf14      	ite	ne
 80203a4:	2301      	movne	r3, #1
 80203a6:	2300      	moveq	r3, #0
 80203a8:	b2da      	uxtb	r2, r3
 80203aa:	687b      	ldr	r3, [r7, #4]
 80203ac:	701a      	strb	r2, [r3, #0]
      *speed = (bcr & MG_BIT(13)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 80203ae:	8bfb      	ldrh	r3, [r7, #30]
 80203b0:	0b5b      	lsrs	r3, r3, #13
 80203b2:	b2db      	uxtb	r3, r3
 80203b4:	f003 0301 	and.w	r3, r3, #1
 80203b8:	b2da      	uxtb	r2, r3
 80203ba:	683b      	ldr	r3, [r7, #0]
 80203bc:	701a      	strb	r2, [r3, #0]
 80203be:	e01e      	b.n	80203fe <mg_phy_up+0x21e>
    } else if (id1 == MG_PHY_ICS1894x) {
 80203c0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80203c2:	2b15      	cmp	r3, #21
 80203c4:	d11b      	bne.n	80203fe <mg_phy_up+0x21e>
      uint16_t poll_reg = phy->read_reg(phy_addr, MG_PHY_ICS189432_REG_POLL);
 80203c6:	68fb      	ldr	r3, [r7, #12]
 80203c8:	681b      	ldr	r3, [r3, #0]
 80203ca:	7afa      	ldrb	r2, [r7, #11]
 80203cc:	2111      	movs	r1, #17
 80203ce:	4610      	mov	r0, r2
 80203d0:	4798      	blx	r3
 80203d2:	4603      	mov	r3, r0
 80203d4:	843b      	strh	r3, [r7, #32]
      *full_duplex = poll_reg & MG_BIT(14);
 80203d6:	8c3b      	ldrh	r3, [r7, #32]
 80203d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80203dc:	2b00      	cmp	r3, #0
 80203de:	bf14      	ite	ne
 80203e0:	2301      	movne	r3, #1
 80203e2:	2300      	moveq	r3, #0
 80203e4:	b2da      	uxtb	r2, r3
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	701a      	strb	r2, [r3, #0]
      *speed = (poll_reg & MG_BIT(15)) ? MG_PHY_SPEED_100M : MG_PHY_SPEED_10M;
 80203ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80203ee:	13db      	asrs	r3, r3, #15
 80203f0:	b21b      	sxth	r3, r3
 80203f2:	b2db      	uxtb	r3, r3
 80203f4:	f003 0301 	and.w	r3, r3, #1
 80203f8:	b2da      	uxtb	r2, r3
 80203fa:	683b      	ldr	r3, [r7, #0]
 80203fc:	701a      	strb	r2, [r3, #0]
    }
  }
  return up;
 80203fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
}
 8020402:	4618      	mov	r0, r3
 8020404:	3728      	adds	r7, #40	@ 0x28
 8020406:	46bd      	mov	sp, r7
 8020408:	bd80      	pop	{r7, pc}
	...

0802040c <eth_read_phy>:
static volatile uint32_t s_txdesc[ETH_DESC_CNT][ETH_DS];  // TX descriptors
static uint8_t s_rxbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // RX ethernet buffers
static uint8_t s_txbuf[ETH_DESC_CNT][ETH_PKT_SIZE];       // TX ethernet buffers
static struct mg_tcpip_if *s_ifp;                         // MIP interface

static uint16_t eth_read_phy(uint8_t addr, uint8_t reg) {
 802040c:	b480      	push	{r7}
 802040e:	b083      	sub	sp, #12
 8020410:	af00      	add	r7, sp, #0
 8020412:	4603      	mov	r3, r0
 8020414:	460a      	mov	r2, r1
 8020416:	71fb      	strb	r3, [r7, #7]
 8020418:	4613      	mov	r3, r2
 802041a:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 802041c:	4b17      	ldr	r3, [pc, #92]	@ (802047c <eth_read_phy+0x70>)
 802041e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8020422:	4a16      	ldr	r2, [pc, #88]	@ (802047c <eth_read_phy+0x70>)
 8020424:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8020428:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 802042c:	4b13      	ldr	r3, [pc, #76]	@ (802047c <eth_read_phy+0x70>)
 802042e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8020432:	79fb      	ldrb	r3, [r7, #7]
 8020434:	0559      	lsls	r1, r3, #21
 8020436:	79bb      	ldrb	r3, [r7, #6]
 8020438:	041b      	lsls	r3, r3, #16
 802043a:	430b      	orrs	r3, r1
 802043c:	4313      	orrs	r3, r2
 802043e:	4a0f      	ldr	r2, [pc, #60]	@ (802047c <eth_read_phy+0x70>)
 8020440:	f043 030c 	orr.w	r3, r3, #12
 8020444:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 8020448:	4b0c      	ldr	r3, [pc, #48]	@ (802047c <eth_read_phy+0x70>)
 802044a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 802044e:	4a0b      	ldr	r2, [pc, #44]	@ (802047c <eth_read_phy+0x70>)
 8020450:	f043 0301 	orr.w	r3, r3, #1
 8020454:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 8020458:	bf00      	nop
 802045a:	4b08      	ldr	r3, [pc, #32]	@ (802047c <eth_read_phy+0x70>)
 802045c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8020460:	f003 0301 	and.w	r3, r3, #1
 8020464:	2b00      	cmp	r3, #0
 8020466:	d1f8      	bne.n	802045a <eth_read_phy+0x4e>
  return (uint16_t) ETH->MACMDIODR;
 8020468:	4b04      	ldr	r3, [pc, #16]	@ (802047c <eth_read_phy+0x70>)
 802046a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 802046e:	b29b      	uxth	r3, r3
}
 8020470:	4618      	mov	r0, r3
 8020472:	370c      	adds	r7, #12
 8020474:	46bd      	mov	sp, r7
 8020476:	f85d 7b04 	ldr.w	r7, [sp], #4
 802047a:	4770      	bx	lr
 802047c:	40028000 	.word	0x40028000

08020480 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint16_t val) {
 8020480:	b480      	push	{r7}
 8020482:	b083      	sub	sp, #12
 8020484:	af00      	add	r7, sp, #0
 8020486:	4603      	mov	r3, r0
 8020488:	71fb      	strb	r3, [r7, #7]
 802048a:	460b      	mov	r3, r1
 802048c:	71bb      	strb	r3, [r7, #6]
 802048e:	4613      	mov	r3, r2
 8020490:	80bb      	strh	r3, [r7, #4]
  ETH->MACMDIODR = val;
 8020492:	4a18      	ldr	r2, [pc, #96]	@ (80204f4 <eth_write_phy+0x74>)
 8020494:	88bb      	ldrh	r3, [r7, #4]
 8020496:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 802049a:	4b16      	ldr	r3, [pc, #88]	@ (80204f4 <eth_write_phy+0x74>)
 802049c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80204a0:	4a14      	ldr	r2, [pc, #80]	@ (80204f4 <eth_write_phy+0x74>)
 80204a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80204a6:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 80204aa:	4b12      	ldr	r3, [pc, #72]	@ (80204f4 <eth_write_phy+0x74>)
 80204ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80204b0:	79fb      	ldrb	r3, [r7, #7]
 80204b2:	0559      	lsls	r1, r3, #21
 80204b4:	79bb      	ldrb	r3, [r7, #6]
 80204b6:	041b      	lsls	r3, r3, #16
 80204b8:	430b      	orrs	r3, r1
 80204ba:	4313      	orrs	r3, r2
 80204bc:	4a0d      	ldr	r2, [pc, #52]	@ (80204f4 <eth_write_phy+0x74>)
 80204be:	f043 0304 	orr.w	r3, r3, #4
 80204c2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  ETH->MACMDIOAR |= MG_BIT(0);
 80204c6:	4b0b      	ldr	r3, [pc, #44]	@ (80204f4 <eth_write_phy+0x74>)
 80204c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80204cc:	4a09      	ldr	r2, [pc, #36]	@ (80204f4 <eth_write_phy+0x74>)
 80204ce:	f043 0301 	orr.w	r3, r3, #1
 80204d2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200
  while (ETH->MACMDIOAR & MG_BIT(0)) (void) 0;
 80204d6:	bf00      	nop
 80204d8:	4b06      	ldr	r3, [pc, #24]	@ (80204f4 <eth_write_phy+0x74>)
 80204da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80204de:	f003 0301 	and.w	r3, r3, #1
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d1f8      	bne.n	80204d8 <eth_write_phy+0x58>
}
 80204e6:	bf00      	nop
 80204e8:	bf00      	nop
 80204ea:	370c      	adds	r7, #12
 80204ec:	46bd      	mov	sp, r7
 80204ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204f2:	4770      	bx	lr
 80204f4:	40028000 	.word	0x40028000

080204f8 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 80204f8:	b580      	push	{r7, lr}
 80204fa:	b08a      	sub	sp, #40	@ 0x28
 80204fc:	af00      	add	r7, sp, #0
 80204fe:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 8020500:	687b      	ldr	r3, [r7, #4]
 8020502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020504:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 8020506:	4a90      	ldr	r2, [pc, #576]	@ (8020748 <mg_tcpip_driver_stm32h_init+0x250>)
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	6013      	str	r3, [r2, #0]
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 802050c:	69bb      	ldr	r3, [r7, #24]
 802050e:	2b00      	cmp	r3, #0
 8020510:	d002      	beq.n	8020518 <mg_tcpip_driver_stm32h_init+0x20>
 8020512:	69bb      	ldr	r3, [r7, #24]
 8020514:	791b      	ldrb	r3, [r3, #4]
 8020516:	e000      	b.n	802051a <mg_tcpip_driver_stm32h_init+0x22>
 8020518:	2300      	movs	r3, #0
 802051a:	75fb      	strb	r3, [r7, #23]
  uint8_t phy_conf = d == NULL ? MG_PHY_CLOCKS_MAC : d->phy_conf;
 802051c:	69bb      	ldr	r3, [r7, #24]
 802051e:	2b00      	cmp	r3, #0
 8020520:	d002      	beq.n	8020528 <mg_tcpip_driver_stm32h_init+0x30>
 8020522:	69bb      	ldr	r3, [r7, #24]
 8020524:	795b      	ldrb	r3, [r3, #5]
 8020526:	e000      	b.n	802052a <mg_tcpip_driver_stm32h_init+0x32>
 8020528:	2302      	movs	r3, #2
 802052a:	75bb      	strb	r3, [r7, #22]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 802052c:	2300      	movs	r3, #0
 802052e:	627b      	str	r3, [r7, #36]	@ 0x24
 8020530:	e017      	b.n	8020562 <mg_tcpip_driver_stm32h_init+0x6a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 8020532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020534:	f240 6204 	movw	r2, #1540	@ 0x604
 8020538:	fb02 f303 	mul.w	r3, r2, r3
 802053c:	4a83      	ldr	r2, [pc, #524]	@ (802074c <mg_tcpip_driver_stm32h_init+0x254>)
 802053e:	4413      	add	r3, r2
 8020540:	4619      	mov	r1, r3
 8020542:	4a83      	ldr	r2, [pc, #524]	@ (8020750 <mg_tcpip_driver_stm32h_init+0x258>)
 8020544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020546:	011b      	lsls	r3, r3, #4
 8020548:	4413      	add	r3, r2
 802054a:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
 802054c:	4a80      	ldr	r2, [pc, #512]	@ (8020750 <mg_tcpip_driver_stm32h_init+0x258>)
 802054e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020550:	011b      	lsls	r3, r3, #4
 8020552:	4413      	add	r3, r2
 8020554:	330c      	adds	r3, #12
 8020556:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 802055a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 802055c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802055e:	3301      	adds	r3, #1
 8020560:	627b      	str	r3, [r7, #36]	@ 0x24
 8020562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020564:	2b03      	cmp	r3, #3
 8020566:	dde4      	ble.n	8020532 <mg_tcpip_driver_stm32h_init+0x3a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8020568:	2300      	movs	r3, #0
 802056a:	623b      	str	r3, [r7, #32]
 802056c:	e00f      	b.n	802058e <mg_tcpip_driver_stm32h_init+0x96>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 802056e:	6a3b      	ldr	r3, [r7, #32]
 8020570:	f240 6204 	movw	r2, #1540	@ 0x604
 8020574:	fb02 f303 	mul.w	r3, r2, r3
 8020578:	4a76      	ldr	r2, [pc, #472]	@ (8020754 <mg_tcpip_driver_stm32h_init+0x25c>)
 802057a:	4413      	add	r3, r2
 802057c:	4619      	mov	r1, r3
 802057e:	4a76      	ldr	r2, [pc, #472]	@ (8020758 <mg_tcpip_driver_stm32h_init+0x260>)
 8020580:	6a3b      	ldr	r3, [r7, #32]
 8020582:	011b      	lsls	r3, r3, #4
 8020584:	4413      	add	r3, r2
 8020586:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 8020588:	6a3b      	ldr	r3, [r7, #32]
 802058a:	3301      	adds	r3, #1
 802058c:	623b      	str	r3, [r7, #32]
 802058e:	6a3b      	ldr	r3, [r7, #32]
 8020590:	2b03      	cmp	r3, #3
 8020592:	ddec      	ble.n	802056e <mg_tcpip_driver_stm32h_init+0x76>
  }

  ETH->DMAMR |= MG_BIT(0);  // Software reset
 8020594:	4b71      	ldr	r3, [pc, #452]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 8020596:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	4a6f      	ldr	r2, [pc, #444]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 802059e:	f043 0301 	orr.w	r3, r3, #1
 80205a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80205a6:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < 4; i++)
 80205a8:	2300      	movs	r3, #0
 80205aa:	61fb      	str	r3, [r7, #28]
 80205ac:	e002      	b.n	80205b4 <mg_tcpip_driver_stm32h_init+0xbc>
 80205ae:	69fb      	ldr	r3, [r7, #28]
 80205b0:	3301      	adds	r3, #1
 80205b2:	61fb      	str	r3, [r7, #28]
 80205b4:	69fb      	ldr	r3, [r7, #28]
 80205b6:	2b03      	cmp	r3, #3
 80205b8:	ddf9      	ble.n	80205ae <mg_tcpip_driver_stm32h_init+0xb6>
    (void) 0;  // wait at least 4 clocks before reading
  while ((ETH->DMAMR & MG_BIT(0)) != 0) (void) 0;  // Wait until done
 80205ba:	bf00      	nop
 80205bc:	4b67      	ldr	r3, [pc, #412]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80205be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	f003 0301 	and.w	r3, r3, #1
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d1f7      	bne.n	80205bc <mg_tcpip_driver_stm32h_init+0xc4>

  // Set MDC clock divider. Get user value, else, assume max freq
  int cr = (d == NULL || d->mdc_cr < 0) ? 7 : d->mdc_cr;
 80205cc:	69bb      	ldr	r3, [r7, #24]
 80205ce:	2b00      	cmp	r3, #0
 80205d0:	d006      	beq.n	80205e0 <mg_tcpip_driver_stm32h_init+0xe8>
 80205d2:	69bb      	ldr	r3, [r7, #24]
 80205d4:	681b      	ldr	r3, [r3, #0]
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	db02      	blt.n	80205e0 <mg_tcpip_driver_stm32h_init+0xe8>
 80205da:	69bb      	ldr	r3, [r7, #24]
 80205dc:	681b      	ldr	r3, [r3, #0]
 80205de:	e000      	b.n	80205e2 <mg_tcpip_driver_stm32h_init+0xea>
 80205e0:	2307      	movs	r3, #7
 80205e2:	613b      	str	r3, [r7, #16]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 80205e4:	693b      	ldr	r3, [r7, #16]
 80205e6:	021b      	lsls	r3, r3, #8
 80205e8:	4a5c      	ldr	r2, [pc, #368]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80205ea:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80205ee:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;        // use interrupt mode 0 (58.8.1) (reset value)
 80205f2:	4b5a      	ldr	r3, [pc, #360]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80205f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80205f8:	461a      	mov	r2, r3
 80205fa:	2300      	movs	r3, #0
 80205fc:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= MG_BIT(12);  // AAL NOTE(scaprile): is this actually needed
 80205fe:	4b57      	ldr	r3, [pc, #348]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 8020600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020604:	685b      	ldr	r3, [r3, #4]
 8020606:	4a55      	ldr	r2, [pc, #340]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 8020608:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 802060c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8020610:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;  // Do not enable additional irq sources (reset value)
 8020612:	4b52      	ldr	r3, [pc, #328]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 8020614:	2200      	movs	r2, #0
 8020616:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  ETH->MACTFCR = MG_BIT(7);  // Disable zero-quanta pause
 802061a:	4b50      	ldr	r3, [pc, #320]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 802061c:	2280      	movs	r2, #128	@ 0x80
 802061e:	671a      	str	r2, [r3, #112]	@ 0x70
#if !MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(10);  // Perfect filtering
 8020620:	4b4e      	ldr	r3, [pc, #312]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 8020622:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8020626:	609a      	str	r2, [r3, #8]
#endif
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 8020628:	4a4d      	ldr	r2, [pc, #308]	@ (8020760 <mg_tcpip_driver_stm32h_init+0x268>)
 802062a:	f107 0308 	add.w	r3, r7, #8
 802062e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8020632:	e883 0003 	stmia.w	r3, {r0, r1}
  mg_phy_init(&phy, phy_addr, phy_conf);
 8020636:	7dba      	ldrb	r2, [r7, #22]
 8020638:	7df9      	ldrb	r1, [r7, #23]
 802063a:	f107 0308 	add.w	r3, r7, #8
 802063e:	4618      	mov	r0, r3
 8020640:	f7ff fd16 	bl	8020070 <mg_phy_init>
  ETH->DMACRDLAR =
 8020644:	4a45      	ldr	r2, [pc, #276]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 8020646:	4b42      	ldr	r3, [pc, #264]	@ (8020750 <mg_tcpip_driver_stm32h_init+0x258>)
  ETH->DMACRDLAR =
 8020648:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802064c:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 8020650:	4b42      	ldr	r3, [pc, #264]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 8020652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020656:	461a      	mov	r2, r3
 8020658:	2303      	movs	r3, #3
 802065a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130
  ETH->DMACRDTPR =
 802065e:	4a3f      	ldr	r2, [pc, #252]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 8020660:	4b40      	ldr	r3, [pc, #256]	@ (8020764 <mg_tcpip_driver_stm32h_init+0x26c>)
  ETH->DMACRDTPR =
 8020662:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8020666:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 802066a:	4a3c      	ldr	r2, [pc, #240]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 802066c:	4b3a      	ldr	r3, [pc, #232]	@ (8020758 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDLAR =
 802066e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8020672:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 8020676:	4b39      	ldr	r3, [pc, #228]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 8020678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 802067c:	461a      	mov	r2, r3
 802067e:	2303      	movs	r3, #3
 8020680:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
  ETH->DMACTDTPR =
 8020684:	4a35      	ldr	r2, [pc, #212]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 8020686:	4b34      	ldr	r3, [pc, #208]	@ (8020758 <mg_tcpip_driver_stm32h_init+0x260>)
  ETH->DMACTDTPR =
 8020688:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 802068c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 8020690:	4b32      	ldr	r3, [pc, #200]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 8020692:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020696:	461a      	mov	r2, r3
 8020698:	2300      	movs	r3, #0
 802069a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
#if !MG_ENABLE_DRIVER_STM32H
  MG_SET_BITS(ETH->DMACTCR, 0x3F << 16, MG_BIT(16));
  MG_SET_BITS(ETH->DMACRCR, 0x3F << 16, MG_BIT(16));
#endif
  ETH->DMACIER = MG_BIT(6) | MG_BIT(15);  // RIE, NIE
 802069e:	4b2f      	ldr	r3, [pc, #188]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80206a4:	461a      	mov	r2, r3
 80206a6:	f248 0340 	movw	r3, #32832	@ 0x8040
 80206aa:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
  ETH->MACCR = MG_BIT(0) | MG_BIT(1) | MG_BIT(13) | MG_BIT(14) |
 80206ae:	4b2b      	ldr	r3, [pc, #172]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206b0:	f24e 0203 	movw	r2, #57347	@ 0xe003
 80206b4:	601a      	str	r2, [r3, #0]
               MG_BIT(15);  // RE, TE, Duplex, Fast, Reserved
#if MG_ENABLE_DRIVER_STM32H
  ETH->MTLTQOMR |= MG_BIT(1);  // TSF
 80206b6:	4b29      	ldr	r3, [pc, #164]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206b8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80206bc:	4a27      	ldr	r2, [pc, #156]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206be:	f043 0302 	orr.w	r3, r3, #2
 80206c2:	f8c2 3d00 	str.w	r3, [r2, #3328]	@ 0xd00
  ETH->MTLRQOMR |= MG_BIT(5);  // RSF
 80206c6:	4b25      	ldr	r3, [pc, #148]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80206cc:	4a23      	ldr	r2, [pc, #140]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206ce:	f043 0320 	orr.w	r3, r3, #32
 80206d2:	f8c2 3d30 	str.w	r3, [r2, #3376]	@ 0xd30
#else
  ETH->MTLTQOMR |= (7 << 16) | MG_BIT(3) | MG_BIT(1);  // 2KB Q0, TSF
  ETH->MTLRQOMR |= (7 << 20) | MG_BIT(5);              // 2KB Q, RSF
  MG_SET_BITS(ETH->RESERVED6[3], 3, 2);  // Enable RxQ0 (MAC_RXQ_CTRL0)
#endif
  ETH->DMACTCR |= MG_BIT(0);  // ST
 80206d6:	4b21      	ldr	r3, [pc, #132]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80206dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80206e0:	4a1e      	ldr	r2, [pc, #120]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206e2:	f043 0301 	orr.w	r3, r3, #1
 80206e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80206ea:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  ETH->DMACRCR |= MG_BIT(0);  // SR
 80206ee:	4b1b      	ldr	r3, [pc, #108]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80206f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80206f8:	4a18      	ldr	r2, [pc, #96]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 80206fa:	f043 0301 	orr.w	r3, r3, #1
 80206fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8020702:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 8020706:	687b      	ldr	r3, [r7, #4]
 8020708:	795b      	ldrb	r3, [r3, #5]
 802070a:	021b      	lsls	r3, r3, #8
 802070c:	687a      	ldr	r2, [r7, #4]
 802070e:	7912      	ldrb	r2, [r2, #4]
 8020710:	4611      	mov	r1, r2
 8020712:	4a12      	ldr	r2, [pc, #72]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
 8020714:	430b      	orrs	r3, r1
 8020716:	f8c2 3300 	str.w	r3, [r2, #768]	@ 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 802071a:	687b      	ldr	r3, [r7, #4]
 802071c:	78db      	ldrb	r3, [r3, #3]
 802071e:	061a      	lsls	r2, r3, #24
                 ((uint32_t) ifp->mac[2] << 16) |
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	789b      	ldrb	r3, [r3, #2]
 8020724:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8020726:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8020728:	687b      	ldr	r3, [r7, #4]
 802072a:	785b      	ldrb	r3, [r3, #1]
 802072c:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 802072e:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8020730:	687a      	ldr	r2, [r7, #4]
 8020732:	7812      	ldrb	r2, [r2, #0]
 8020734:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 8020736:	4a09      	ldr	r2, [pc, #36]	@ (802075c <mg_tcpip_driver_stm32h_init+0x264>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 8020738:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 802073a:	f8c2 3304 	str.w	r3, [r2, #772]	@ 0x304
  return true;
 802073e:	2301      	movs	r3, #1
}
 8020740:	4618      	mov	r0, r3
 8020742:	3728      	adds	r7, #40	@ 0x28
 8020744:	46bd      	mov	sp, r7
 8020746:	bd80      	pop	{r7, pc}
 8020748:	24004174 	.word	0x24004174
 802074c:	24001154 	.word	0x24001154
 8020750:	240010d4 	.word	0x240010d4
 8020754:	24002964 	.word	0x24002964
 8020758:	24001114 	.word	0x24001114
 802075c:	40028000 	.word	0x40028000
 8020760:	08026e9c 	.word	0x08026e9c
 8020764:	24001104 	.word	0x24001104

08020768 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 8020768:	b580      	push	{r7, lr}
 802076a:	b088      	sub	sp, #32
 802076c:	af02      	add	r7, sp, #8
 802076e:	60f8      	str	r0, [r7, #12]
 8020770:	60b9      	str	r1, [r7, #8]
 8020772:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 8020774:	68bb      	ldr	r3, [r7, #8]
 8020776:	f240 6204 	movw	r2, #1540	@ 0x604
 802077a:	4293      	cmp	r3, r2
 802077c:	d912      	bls.n	80207a4 <mg_tcpip_driver_stm32h_tx+0x3c>
    MG_ERROR(("Frame too big, %ld", (long) len));
 802077e:	4b5e      	ldr	r3, [pc, #376]	@ (80208f8 <mg_tcpip_driver_stm32h_tx+0x190>)
 8020780:	681b      	ldr	r3, [r3, #0]
 8020782:	2b00      	cmp	r3, #0
 8020784:	dd0b      	ble.n	802079e <mg_tcpip_driver_stm32h_tx+0x36>
 8020786:	4b5d      	ldr	r3, [pc, #372]	@ (80208fc <mg_tcpip_driver_stm32h_tx+0x194>)
 8020788:	f645 526f 	movw	r2, #23919	@ 0x5d6f
 802078c:	495c      	ldr	r1, [pc, #368]	@ (8020900 <mg_tcpip_driver_stm32h_tx+0x198>)
 802078e:	2001      	movs	r0, #1
 8020790:	f7eb fe50 	bl	800c434 <mg_log_prefix>
 8020794:	68bb      	ldr	r3, [r7, #8]
 8020796:	4619      	mov	r1, r3
 8020798:	485a      	ldr	r0, [pc, #360]	@ (8020904 <mg_tcpip_driver_stm32h_tx+0x19c>)
 802079a:	f7eb fe9b 	bl	800c4d4 <mg_log>
    len = 0;  // Frame is too big
 802079e:	2300      	movs	r3, #0
 80207a0:	60bb      	str	r3, [r7, #8]
 80207a2:	e08d      	b.n	80208c0 <mg_tcpip_driver_stm32h_tx+0x158>
  } else if ((s_txdesc[s_txno][3] & MG_BIT(31))) {
 80207a4:	4b58      	ldr	r3, [pc, #352]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80207a6:	681b      	ldr	r3, [r3, #0]
 80207a8:	4a58      	ldr	r2, [pc, #352]	@ (802090c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80207aa:	011b      	lsls	r3, r3, #4
 80207ac:	4413      	add	r3, r2
 80207ae:	330c      	adds	r3, #12
 80207b0:	681b      	ldr	r3, [r3, #0]
 80207b2:	2b00      	cmp	r3, #0
 80207b4:	da4a      	bge.n	802084c <mg_tcpip_driver_stm32h_tx+0xe4>
    ifp->nerr++;
 80207b6:	687b      	ldr	r3, [r7, #4]
 80207b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80207bc:	1c5a      	adds	r2, r3, #1
 80207be:	687b      	ldr	r3, [r7, #4]
 80207c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 80207c4:	4b4c      	ldr	r3, [pc, #304]	@ (80208f8 <mg_tcpip_driver_stm32h_tx+0x190>)
 80207c6:	681b      	ldr	r3, [r3, #0]
 80207c8:	2b00      	cmp	r3, #0
 80207ca:	dd1e      	ble.n	802080a <mg_tcpip_driver_stm32h_tx+0xa2>
 80207cc:	4b4b      	ldr	r3, [pc, #300]	@ (80208fc <mg_tcpip_driver_stm32h_tx+0x194>)
 80207ce:	f645 5273 	movw	r2, #23923	@ 0x5d73
 80207d2:	494b      	ldr	r1, [pc, #300]	@ (8020900 <mg_tcpip_driver_stm32h_tx+0x198>)
 80207d4:	2001      	movs	r0, #1
 80207d6:	f7eb fe2d 	bl	800c434 <mg_log_prefix>
 80207da:	4b4b      	ldr	r3, [pc, #300]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80207dc:	6819      	ldr	r1, [r3, #0]
 80207de:	4b4a      	ldr	r3, [pc, #296]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80207e0:	681b      	ldr	r3, [r3, #0]
 80207e2:	4a4a      	ldr	r2, [pc, #296]	@ (802090c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80207e4:	011b      	lsls	r3, r3, #4
 80207e6:	4413      	add	r3, r2
 80207e8:	330c      	adds	r3, #12
 80207ea:	681a      	ldr	r2, [r3, #0]
 80207ec:	4b48      	ldr	r3, [pc, #288]	@ (8020910 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80207ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80207f2:	f8d3 0160 	ldr.w	r0, [r3, #352]	@ 0x160
 80207f6:	4b46      	ldr	r3, [pc, #280]	@ (8020910 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80207f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80207fc:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8020800:	9300      	str	r3, [sp, #0]
 8020802:	4603      	mov	r3, r0
 8020804:	4843      	ldr	r0, [pc, #268]	@ (8020914 <mg_tcpip_driver_stm32h_tx+0x1ac>)
 8020806:	f7eb fe65 	bl	800c4d4 <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 802080a:	2300      	movs	r3, #0
 802080c:	617b      	str	r3, [r7, #20]
 802080e:	e017      	b.n	8020840 <mg_tcpip_driver_stm32h_tx+0xd8>
 8020810:	4b39      	ldr	r3, [pc, #228]	@ (80208f8 <mg_tcpip_driver_stm32h_tx+0x190>)
 8020812:	681b      	ldr	r3, [r3, #0]
 8020814:	2b00      	cmp	r3, #0
 8020816:	dd10      	ble.n	802083a <mg_tcpip_driver_stm32h_tx+0xd2>
 8020818:	4b38      	ldr	r3, [pc, #224]	@ (80208fc <mg_tcpip_driver_stm32h_tx+0x194>)
 802081a:	f645 5275 	movw	r2, #23925	@ 0x5d75
 802081e:	4938      	ldr	r1, [pc, #224]	@ (8020900 <mg_tcpip_driver_stm32h_tx+0x198>)
 8020820:	2001      	movs	r0, #1
 8020822:	f7eb fe07 	bl	800c434 <mg_log_prefix>
 8020826:	4a39      	ldr	r2, [pc, #228]	@ (802090c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 8020828:	697b      	ldr	r3, [r7, #20]
 802082a:	011b      	lsls	r3, r3, #4
 802082c:	4413      	add	r3, r2
 802082e:	330c      	adds	r3, #12
 8020830:	681b      	ldr	r3, [r3, #0]
 8020832:	4619      	mov	r1, r3
 8020834:	4838      	ldr	r0, [pc, #224]	@ (8020918 <mg_tcpip_driver_stm32h_tx+0x1b0>)
 8020836:	f7eb fe4d 	bl	800c4d4 <mg_log>
 802083a:	697b      	ldr	r3, [r7, #20]
 802083c:	3301      	adds	r3, #1
 802083e:	617b      	str	r3, [r7, #20]
 8020840:	697b      	ldr	r3, [r7, #20]
 8020842:	2b03      	cmp	r3, #3
 8020844:	dde4      	ble.n	8020810 <mg_tcpip_driver_stm32h_tx+0xa8>
    len = 0;  // All descriptors are busy, fail
 8020846:	2300      	movs	r3, #0
 8020848:	60bb      	str	r3, [r7, #8]
 802084a:	e039      	b.n	80208c0 <mg_tcpip_driver_stm32h_tx+0x158>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);              // Copy data
 802084c:	4b2e      	ldr	r3, [pc, #184]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	f240 6204 	movw	r2, #1540	@ 0x604
 8020854:	fb02 f303 	mul.w	r3, r2, r3
 8020858:	4a30      	ldr	r2, [pc, #192]	@ (802091c <mg_tcpip_driver_stm32h_tx+0x1b4>)
 802085a:	4413      	add	r3, r2
 802085c:	68ba      	ldr	r2, [r7, #8]
 802085e:	68f9      	ldr	r1, [r7, #12]
 8020860:	4618      	mov	r0, r3
 8020862:	f003 f8d2 	bl	8023a0a <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;           // Set data len
 8020866:	4b28      	ldr	r3, [pc, #160]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8020868:	681b      	ldr	r3, [r3, #0]
 802086a:	4a28      	ldr	r2, [pc, #160]	@ (802090c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 802086c:	011b      	lsls	r3, r3, #4
 802086e:	4413      	add	r3, r2
 8020870:	3308      	adds	r3, #8
 8020872:	68ba      	ldr	r2, [r7, #8]
 8020874:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = MG_BIT(28) | MG_BIT(29);  // FD, LD
 8020876:	4b24      	ldr	r3, [pc, #144]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8020878:	681b      	ldr	r3, [r3, #0]
 802087a:	4a24      	ldr	r2, [pc, #144]	@ (802090c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 802087c:	011b      	lsls	r3, r3, #4
 802087e:	4413      	add	r3, r2
 8020880:	330c      	adds	r3, #12
 8020882:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8020886:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= MG_BIT(31);  // Set OWN bit - let DMA take over
 8020888:	4b1f      	ldr	r3, [pc, #124]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 802088a:	681b      	ldr	r3, [r3, #0]
 802088c:	4a1f      	ldr	r2, [pc, #124]	@ (802090c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 802088e:	011b      	lsls	r3, r3, #4
 8020890:	4413      	add	r3, r2
 8020892:	330c      	adds	r3, #12
 8020894:	681a      	ldr	r2, [r3, #0]
 8020896:	4b1c      	ldr	r3, [pc, #112]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 8020898:	681b      	ldr	r3, [r3, #0]
 802089a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 802089e:	491b      	ldr	r1, [pc, #108]	@ (802090c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80208a0:	011b      	lsls	r3, r3, #4
 80208a2:	440b      	add	r3, r1
 80208a4:	330c      	adds	r3, #12
 80208a6:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 80208a8:	4b17      	ldr	r3, [pc, #92]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80208aa:	681b      	ldr	r3, [r3, #0]
 80208ac:	3301      	adds	r3, #1
 80208ae:	4a16      	ldr	r2, [pc, #88]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80208b0:	6013      	str	r3, [r2, #0]
 80208b2:	4b15      	ldr	r3, [pc, #84]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80208b4:	681b      	ldr	r3, [r3, #0]
 80208b6:	2b03      	cmp	r3, #3
 80208b8:	d902      	bls.n	80208c0 <mg_tcpip_driver_stm32h_tx+0x158>
 80208ba:	4b13      	ldr	r3, [pc, #76]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80208bc:	2200      	movs	r2, #0
 80208be:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= MG_BIT(2) | MG_BIT(1);  // Clear any prior TBU, TPS
 80208c0:	4b13      	ldr	r3, [pc, #76]	@ (8020910 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80208c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80208c6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80208ca:	4a11      	ldr	r2, [pc, #68]	@ (8020910 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80208cc:	f043 0306 	orr.w	r3, r3, #6
 80208d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80208d4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 80208d8:	4b0b      	ldr	r3, [pc, #44]	@ (8020908 <mg_tcpip_driver_stm32h_tx+0x1a0>)
 80208da:	681b      	ldr	r3, [r3, #0]
 80208dc:	011b      	lsls	r3, r3, #4
 80208de:	4a0b      	ldr	r2, [pc, #44]	@ (802090c <mg_tcpip_driver_stm32h_tx+0x1a4>)
 80208e0:	441a      	add	r2, r3
 80208e2:	4b0b      	ldr	r3, [pc, #44]	@ (8020910 <mg_tcpip_driver_stm32h_tx+0x1a8>)
 80208e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80208e8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
  return len;
 80208ec:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 80208ee:	4618      	mov	r0, r3
 80208f0:	3718      	adds	r7, #24
 80208f2:	46bd      	mov	sp, r7
 80208f4:	bd80      	pop	{r7, pc}
 80208f6:	bf00      	nop
 80208f8:	24000258 	.word	0x24000258
 80208fc:	080283a4 	.word	0x080283a4
 8020900:	08024478 	.word	0x08024478
 8020904:	08026ea4 	.word	0x08026ea4
 8020908:	24004178 	.word	0x24004178
 802090c:	24001114 	.word	0x24001114
 8020910:	40028000 	.word	0x40028000
 8020914:	08026eb8 	.word	0x08026eb8
 8020918:	08026ee0 	.word	0x08026ee0
 802091c:	24002964 	.word	0x24002964

08020920 <mg_tcpip_driver_stm32h_update_hash_table>:

static void mg_tcpip_driver_stm32h_update_hash_table(struct mg_tcpip_if *ifp) {
 8020920:	b480      	push	{r7}
 8020922:	b083      	sub	sp, #12
 8020924:	af00      	add	r7, sp, #0
 8020926:	6078      	str	r0, [r7, #4]
#if MG_ENABLE_DRIVER_MCXN
  ETH->MACPFR = MG_BIT(4);  // Pass Multicast (pass all multicast frames)
#else
  // TODO(): read database, rebuild hash table
  // add mDNS / DNS-SD multicast address
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8020928:	4b14      	ldr	r3, [pc, #80]	@ (802097c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 802092a:	78db      	ldrb	r3, [r3, #3]
 802092c:	061a      	lsls	r2, r3, #24
                 (uint32_t) mcast_addr[2] << 16 |
 802092e:	4b13      	ldr	r3, [pc, #76]	@ (802097c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8020930:	789b      	ldrb	r3, [r3, #2]
 8020932:	041b      	lsls	r3, r3, #16
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8020934:	431a      	orrs	r2, r3
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 8020936:	4b11      	ldr	r3, [pc, #68]	@ (802097c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8020938:	785b      	ldrb	r3, [r3, #1]
 802093a:	021b      	lsls	r3, r3, #8
                 (uint32_t) mcast_addr[2] << 16 |
 802093c:	4313      	orrs	r3, r2
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 802093e:	4a0f      	ldr	r2, [pc, #60]	@ (802097c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8020940:	7812      	ldrb	r2, [r2, #0]
 8020942:	4611      	mov	r1, r2
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8020944:	4a0e      	ldr	r2, [pc, #56]	@ (8020980 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
                 (uint32_t) mcast_addr[1] << 8 | (uint32_t) mcast_addr[0];
 8020946:	430b      	orrs	r3, r1
  ETH->MACA1LR = (uint32_t) mcast_addr[3] << 24 |
 8020948:	f8c2 330c 	str.w	r3, [r2, #780]	@ 0x30c
  ETH->MACA1HR = (uint32_t) mcast_addr[5] << 8 | (uint32_t) mcast_addr[4];
 802094c:	4b0b      	ldr	r3, [pc, #44]	@ (802097c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 802094e:	795b      	ldrb	r3, [r3, #5]
 8020950:	021b      	lsls	r3, r3, #8
 8020952:	4a0a      	ldr	r2, [pc, #40]	@ (802097c <mg_tcpip_driver_stm32h_update_hash_table+0x5c>)
 8020954:	7912      	ldrb	r2, [r2, #4]
 8020956:	4611      	mov	r1, r2
 8020958:	4a09      	ldr	r2, [pc, #36]	@ (8020980 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 802095a:	430b      	orrs	r3, r1
 802095c:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
  ETH->MACA1HR |= MG_BIT(31);  // AE
 8020960:	4b07      	ldr	r3, [pc, #28]	@ (8020980 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8020962:	f8d3 3308 	ldr.w	r3, [r3, #776]	@ 0x308
 8020966:	4a06      	ldr	r2, [pc, #24]	@ (8020980 <mg_tcpip_driver_stm32h_update_hash_table+0x60>)
 8020968:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 802096c:	f8c2 3308 	str.w	r3, [r2, #776]	@ 0x308
#endif
(void) ifp;
}
 8020970:	bf00      	nop
 8020972:	370c      	adds	r7, #12
 8020974:	46bd      	mov	sp, r7
 8020976:	f85d 7b04 	ldr.w	r7, [sp], #4
 802097a:	4770      	bx	lr
 802097c:	24000260 	.word	0x24000260
 8020980:	40028000 	.word	0x40028000

08020984 <mg_tcpip_driver_stm32h_poll>:

static bool mg_tcpip_driver_stm32h_poll(struct mg_tcpip_if *ifp, bool s1) {
 8020984:	b580      	push	{r7, lr}
 8020986:	b088      	sub	sp, #32
 8020988:	af00      	add	r7, sp, #0
 802098a:	6078      	str	r0, [r7, #4]
 802098c:	460b      	mov	r3, r1
 802098e:	70fb      	strb	r3, [r7, #3]
  if (ifp->update_mac_hash_table) {
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8020996:	2b00      	cmp	r3, #0
 8020998:	d006      	beq.n	80209a8 <mg_tcpip_driver_stm32h_poll+0x24>
    mg_tcpip_driver_stm32h_update_hash_table(ifp);
 802099a:	6878      	ldr	r0, [r7, #4]
 802099c:	f7ff ffc0 	bl	8020920 <mg_tcpip_driver_stm32h_update_hash_table>
    ifp->update_mac_hash_table = false;
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	2200      	movs	r2, #0
 80209a4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  }
  if (!s1) return false;
 80209a8:	78fb      	ldrb	r3, [r7, #3]
 80209aa:	f083 0301 	eor.w	r3, r3, #1
 80209ae:	b2db      	uxtb	r3, r3
 80209b0:	2b00      	cmp	r3, #0
 80209b2:	d001      	beq.n	80209b8 <mg_tcpip_driver_stm32h_poll+0x34>
 80209b4:	2300      	movs	r3, #0
 80209b6:	e063      	b.n	8020a80 <mg_tcpip_driver_stm32h_poll+0xfc>
  struct mg_tcpip_driver_stm32h_data *d =
 80209b8:	687b      	ldr	r3, [r7, #4]
 80209ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80209bc:	61bb      	str	r3, [r7, #24]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  uint8_t phy_addr = d == NULL ? 0 : d->phy_addr;
 80209be:	69bb      	ldr	r3, [r7, #24]
 80209c0:	2b00      	cmp	r3, #0
 80209c2:	d002      	beq.n	80209ca <mg_tcpip_driver_stm32h_poll+0x46>
 80209c4:	69bb      	ldr	r3, [r7, #24]
 80209c6:	791b      	ldrb	r3, [r3, #4]
 80209c8:	e000      	b.n	80209cc <mg_tcpip_driver_stm32h_poll+0x48>
 80209ca:	2300      	movs	r3, #0
 80209cc:	75fb      	strb	r3, [r7, #23]
  uint8_t speed = MG_PHY_SPEED_10M;
 80209ce:	2300      	movs	r3, #0
 80209d0:	757b      	strb	r3, [r7, #21]
  bool up = false, full_duplex = false;
 80209d2:	2300      	movs	r3, #0
 80209d4:	75bb      	strb	r3, [r7, #22]
 80209d6:	2300      	movs	r3, #0
 80209d8:	753b      	strb	r3, [r7, #20]
  struct mg_phy phy = {eth_read_phy, eth_write_phy};
 80209da:	4a2b      	ldr	r2, [pc, #172]	@ (8020a88 <mg_tcpip_driver_stm32h_poll+0x104>)
 80209dc:	f107 030c 	add.w	r3, r7, #12
 80209e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80209e4:	e883 0003 	stmia.w	r3, {r0, r1}
  up = mg_phy_up(&phy, phy_addr, &full_duplex, &speed);
 80209e8:	f107 0315 	add.w	r3, r7, #21
 80209ec:	f107 0214 	add.w	r2, r7, #20
 80209f0:	7df9      	ldrb	r1, [r7, #23]
 80209f2:	f107 000c 	add.w	r0, r7, #12
 80209f6:	f7ff fbf3 	bl	80201e0 <mg_phy_up>
 80209fa:	4603      	mov	r3, r0
 80209fc:	75bb      	strb	r3, [r7, #22]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8020a04:	2b00      	cmp	r3, #0
 8020a06:	d13a      	bne.n	8020a7e <mg_tcpip_driver_stm32h_poll+0xfa>
 8020a08:	7dbb      	ldrb	r3, [r7, #22]
 8020a0a:	2b00      	cmp	r3, #0
 8020a0c:	d037      	beq.n	8020a7e <mg_tcpip_driver_stm32h_poll+0xfa>
    // tmp = reg with flags set to the most likely situation: 100M full-duplex
    // if(link is slow or half) set flags otherwise
    // reg = tmp
    uint32_t maccr = ETH->MACCR | MG_BIT(14) | MG_BIT(13);  // 100M, Full-duplex
 8020a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8020a8c <mg_tcpip_driver_stm32h_poll+0x108>)
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8020a16:	61fb      	str	r3, [r7, #28]
    if (speed == MG_PHY_SPEED_10M) maccr &= ~MG_BIT(14);    // 10M
 8020a18:	7d7b      	ldrb	r3, [r7, #21]
 8020a1a:	2b00      	cmp	r3, #0
 8020a1c:	d103      	bne.n	8020a26 <mg_tcpip_driver_stm32h_poll+0xa2>
 8020a1e:	69fb      	ldr	r3, [r7, #28]
 8020a20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8020a24:	61fb      	str	r3, [r7, #28]
    if (full_duplex == false) maccr &= ~MG_BIT(13);         // Half-duplex
 8020a26:	7d3b      	ldrb	r3, [r7, #20]
 8020a28:	f083 0301 	eor.w	r3, r3, #1
 8020a2c:	b2db      	uxtb	r3, r3
 8020a2e:	2b00      	cmp	r3, #0
 8020a30:	d003      	beq.n	8020a3a <mg_tcpip_driver_stm32h_poll+0xb6>
 8020a32:	69fb      	ldr	r3, [r7, #28]
 8020a34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020a38:	61fb      	str	r3, [r7, #28]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 8020a3a:	4a14      	ldr	r2, [pc, #80]	@ (8020a8c <mg_tcpip_driver_stm32h_poll+0x108>)
 8020a3c:	69fb      	ldr	r3, [r7, #28]
 8020a3e:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & MG_BIT(14) ? 100 : 10,
 8020a40:	4b13      	ldr	r3, [pc, #76]	@ (8020a90 <mg_tcpip_driver_stm32h_poll+0x10c>)
 8020a42:	681b      	ldr	r3, [r3, #0]
 8020a44:	2b02      	cmp	r3, #2
 8020a46:	dd1a      	ble.n	8020a7e <mg_tcpip_driver_stm32h_poll+0xfa>
 8020a48:	4b12      	ldr	r3, [pc, #72]	@ (8020a94 <mg_tcpip_driver_stm32h_poll+0x110>)
 8020a4a:	f645 52a8 	movw	r2, #23976	@ 0x5da8
 8020a4e:	4912      	ldr	r1, [pc, #72]	@ (8020a98 <mg_tcpip_driver_stm32h_poll+0x114>)
 8020a50:	2003      	movs	r0, #3
 8020a52:	f7eb fcef 	bl	800c434 <mg_log_prefix>
 8020a56:	69fb      	ldr	r3, [r7, #28]
 8020a58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	d001      	beq.n	8020a64 <mg_tcpip_driver_stm32h_poll+0xe0>
 8020a60:	2164      	movs	r1, #100	@ 0x64
 8020a62:	e000      	b.n	8020a66 <mg_tcpip_driver_stm32h_poll+0xe2>
 8020a64:	210a      	movs	r1, #10
 8020a66:	69fb      	ldr	r3, [r7, #28]
 8020a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	d001      	beq.n	8020a74 <mg_tcpip_driver_stm32h_poll+0xf0>
 8020a70:	4b0a      	ldr	r3, [pc, #40]	@ (8020a9c <mg_tcpip_driver_stm32h_poll+0x118>)
 8020a72:	e000      	b.n	8020a76 <mg_tcpip_driver_stm32h_poll+0xf2>
 8020a74:	4b0a      	ldr	r3, [pc, #40]	@ (8020aa0 <mg_tcpip_driver_stm32h_poll+0x11c>)
 8020a76:	461a      	mov	r2, r3
 8020a78:	480a      	ldr	r0, [pc, #40]	@ (8020aa4 <mg_tcpip_driver_stm32h_poll+0x120>)
 8020a7a:	f7eb fd2b 	bl	800c4d4 <mg_log>
              maccr & MG_BIT(13) ? "full" : "half"));
  }
  return up;
 8020a7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8020a80:	4618      	mov	r0, r3
 8020a82:	3720      	adds	r7, #32
 8020a84:	46bd      	mov	sp, r7
 8020a86:	bd80      	pop	{r7, pc}
 8020a88:	08026e9c 	.word	0x08026e9c
 8020a8c:	40028000 	.word	0x40028000
 8020a90:	24000258 	.word	0x24000258
 8020a94:	080283c0 	.word	0x080283c0
 8020a98:	08024478 	.word	0x08024478
 8020a9c:	08026ee8 	.word	0x08026ee8
 8020aa0:	08026ef0 	.word	0x08026ef0
 8020aa4:	08026ef8 	.word	0x08026ef8

08020aa8 <ETH_IRQHandler>:
#if MG_ENABLE_DRIVER_MCXN
void ETHERNET_IRQHandler(void);
void ETHERNET_IRQHandler(void) {
#else
void ETH_IRQHandler(void);
void ETH_IRQHandler(void) {
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	b082      	sub	sp, #8
 8020aac:	af00      	add	r7, sp, #0
#endif
  if (ETH->DMACSR & MG_BIT(6)) {           // Frame received, loop
 8020aae:	4b40      	ldr	r3, [pc, #256]	@ (8020bb0 <ETH_IRQHandler+0x108>)
 8020ab0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020ab4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8020ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d065      	beq.n	8020b8c <ETH_IRQHandler+0xe4>
    ETH->DMACSR = MG_BIT(15) | MG_BIT(6);  // Clear flag
 8020ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8020bb0 <ETH_IRQHandler+0x108>)
 8020ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020ac6:	461a      	mov	r2, r3
 8020ac8:	f248 0340 	movw	r3, #32832	@ 0x8040
 8020acc:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8020ad0:	2300      	movs	r3, #0
 8020ad2:	607b      	str	r3, [r7, #4]
 8020ad4:	e055      	b.n	8020b82 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8020ad6:	4b37      	ldr	r3, [pc, #220]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	4a37      	ldr	r2, [pc, #220]	@ (8020bb8 <ETH_IRQHandler+0x110>)
 8020adc:	011b      	lsls	r3, r3, #4
 8020ade:	4413      	add	r3, r2
 8020ae0:	330c      	adds	r3, #12
 8020ae2:	681b      	ldr	r3, [r3, #0]
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	db50      	blt.n	8020b8a <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (MG_BIT(28) | MG_BIT(29))) ==
 8020ae8:	4b32      	ldr	r3, [pc, #200]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020aea:	681b      	ldr	r3, [r3, #0]
 8020aec:	4a32      	ldr	r2, [pc, #200]	@ (8020bb8 <ETH_IRQHandler+0x110>)
 8020aee:	011b      	lsls	r3, r3, #4
 8020af0:	4413      	add	r3, r2
 8020af2:	330c      	adds	r3, #12
 8020af4:	681b      	ldr	r3, [r3, #0]
 8020af6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8020afa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8020afe:	d128      	bne.n	8020b52 <ETH_IRQHandler+0xaa>
           (MG_BIT(28) | MG_BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & MG_BIT(15))) {  // skip partial/errored frames
 8020b00:	4b2c      	ldr	r3, [pc, #176]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	4a2c      	ldr	r2, [pc, #176]	@ (8020bb8 <ETH_IRQHandler+0x110>)
 8020b06:	011b      	lsls	r3, r3, #4
 8020b08:	4413      	add	r3, r2
 8020b0a:	330c      	adds	r3, #12
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
           (MG_BIT(28) | MG_BIT(29))) &&
 8020b12:	2b00      	cmp	r3, #0
 8020b14:	d11d      	bne.n	8020b52 <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (MG_BIT(15) - 1);
 8020b16:	4b27      	ldr	r3, [pc, #156]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020b18:	681b      	ldr	r3, [r3, #0]
 8020b1a:	4a27      	ldr	r2, [pc, #156]	@ (8020bb8 <ETH_IRQHandler+0x110>)
 8020b1c:	011b      	lsls	r3, r3, #4
 8020b1e:	4413      	add	r3, r2
 8020b20:	330c      	adds	r3, #12
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8020b28:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 8020b2a:	4b22      	ldr	r3, [pc, #136]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020b2c:	681b      	ldr	r3, [r3, #0]
 8020b2e:	f240 6204 	movw	r2, #1540	@ 0x604
 8020b32:	fb02 f303 	mul.w	r3, r2, r3
 8020b36:	4a21      	ldr	r2, [pc, #132]	@ (8020bbc <ETH_IRQHandler+0x114>)
 8020b38:	1898      	adds	r0, r3, r2
 8020b3a:	683b      	ldr	r3, [r7, #0]
 8020b3c:	2b04      	cmp	r3, #4
 8020b3e:	d902      	bls.n	8020b46 <ETH_IRQHandler+0x9e>
 8020b40:	683b      	ldr	r3, [r7, #0]
 8020b42:	3b04      	subs	r3, #4
 8020b44:	e000      	b.n	8020b48 <ETH_IRQHandler+0xa0>
 8020b46:	683b      	ldr	r3, [r7, #0]
 8020b48:	4a1d      	ldr	r2, [pc, #116]	@ (8020bc0 <ETH_IRQHandler+0x118>)
 8020b4a:	6812      	ldr	r2, [r2, #0]
 8020b4c:	4619      	mov	r1, r3
 8020b4e:	f7ef f98f 	bl	800fe70 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] =
 8020b52:	4b18      	ldr	r3, [pc, #96]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020b54:	681b      	ldr	r3, [r3, #0]
 8020b56:	4a18      	ldr	r2, [pc, #96]	@ (8020bb8 <ETH_IRQHandler+0x110>)
 8020b58:	011b      	lsls	r3, r3, #4
 8020b5a:	4413      	add	r3, r2
 8020b5c:	330c      	adds	r3, #12
 8020b5e:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8020b62:	601a      	str	r2, [r3, #0]
          MG_BIT(31) | MG_BIT(30) | MG_BIT(24);  // OWN, IOC, BUF1V
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 8020b64:	4b13      	ldr	r3, [pc, #76]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020b66:	681b      	ldr	r3, [r3, #0]
 8020b68:	3301      	adds	r3, #1
 8020b6a:	4a12      	ldr	r2, [pc, #72]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020b6c:	6013      	str	r3, [r2, #0]
 8020b6e:	4b11      	ldr	r3, [pc, #68]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	2b03      	cmp	r3, #3
 8020b74:	d902      	bls.n	8020b7c <ETH_IRQHandler+0xd4>
 8020b76:	4b0f      	ldr	r3, [pc, #60]	@ (8020bb4 <ETH_IRQHandler+0x10c>)
 8020b78:	2200      	movs	r2, #0
 8020b7a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 8020b7c:	687b      	ldr	r3, [r7, #4]
 8020b7e:	3301      	adds	r3, #1
 8020b80:	607b      	str	r3, [r7, #4]
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	2b09      	cmp	r3, #9
 8020b86:	d9a6      	bls.n	8020ad6 <ETH_IRQHandler+0x2e>
 8020b88:	e000      	b.n	8020b8c <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & MG_BIT(31)) break;  // exit when done
 8020b8a:	bf00      	nop
    }
  }
  ETH->DMACSR =
 8020b8c:	4b08      	ldr	r3, [pc, #32]	@ (8020bb0 <ETH_IRQHandler+0x108>)
 8020b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8020b92:	461a      	mov	r2, r3
 8020b94:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8020b98:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
      MG_BIT(7) | MG_BIT(8);  // Clear possible RBU RPS while processing
  ETH->DMACRDTPR =
 8020b9c:	4a04      	ldr	r2, [pc, #16]	@ (8020bb0 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 8020b9e:	4b09      	ldr	r3, [pc, #36]	@ (8020bc4 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 8020ba0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8020ba4:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
}
 8020ba8:	bf00      	nop
 8020baa:	3708      	adds	r7, #8
 8020bac:	46bd      	mov	sp, r7
 8020bae:	bd80      	pop	{r7, pc}
 8020bb0:	40028000 	.word	0x40028000
 8020bb4:	2400417c 	.word	0x2400417c
 8020bb8:	240010d4 	.word	0x240010d4
 8020bbc:	24001154 	.word	0x24001154
 8020bc0:	24004174 	.word	0x24004174
 8020bc4:	24001104 	.word	0x24001104

08020bc8 <scmp>:
} packed_files[] = {
  {"/web_root/index.html.gz", v1, sizeof(v1), 1749138029},
  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 8020bc8:	b480      	push	{r7}
 8020bca:	b083      	sub	sp, #12
 8020bcc:	af00      	add	r7, sp, #0
 8020bce:	6078      	str	r0, [r7, #4]
 8020bd0:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 8020bd2:	e005      	b.n	8020be0 <scmp+0x18>
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	3301      	adds	r3, #1
 8020bd8:	607b      	str	r3, [r7, #4]
 8020bda:	683b      	ldr	r3, [r7, #0]
 8020bdc:	3301      	adds	r3, #1
 8020bde:	603b      	str	r3, [r7, #0]
 8020be0:	687b      	ldr	r3, [r7, #4]
 8020be2:	781b      	ldrb	r3, [r3, #0]
 8020be4:	2b00      	cmp	r3, #0
 8020be6:	d005      	beq.n	8020bf4 <scmp+0x2c>
 8020be8:	687b      	ldr	r3, [r7, #4]
 8020bea:	781a      	ldrb	r2, [r3, #0]
 8020bec:	683b      	ldr	r3, [r7, #0]
 8020bee:	781b      	ldrb	r3, [r3, #0]
 8020bf0:	429a      	cmp	r2, r3
 8020bf2:	d0ef      	beq.n	8020bd4 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 8020bf4:	687b      	ldr	r3, [r7, #4]
 8020bf6:	781b      	ldrb	r3, [r3, #0]
 8020bf8:	461a      	mov	r2, r3
 8020bfa:	683b      	ldr	r3, [r7, #0]
 8020bfc:	781b      	ldrb	r3, [r3, #0]
 8020bfe:	1ad3      	subs	r3, r2, r3
}
 8020c00:	4618      	mov	r0, r3
 8020c02:	370c      	adds	r7, #12
 8020c04:	46bd      	mov	sp, r7
 8020c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c0a:	4770      	bx	lr

08020c0c <mg_unlist>:
const char *mg_unlist(size_t no) {
 8020c0c:	b480      	push	{r7}
 8020c0e:	b083      	sub	sp, #12
 8020c10:	af00      	add	r7, sp, #0
 8020c12:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 8020c14:	4906      	ldr	r1, [pc, #24]	@ (8020c30 <mg_unlist+0x24>)
 8020c16:	687a      	ldr	r2, [r7, #4]
 8020c18:	4613      	mov	r3, r2
 8020c1a:	005b      	lsls	r3, r3, #1
 8020c1c:	4413      	add	r3, r2
 8020c1e:	00db      	lsls	r3, r3, #3
 8020c20:	440b      	add	r3, r1
 8020c22:	681b      	ldr	r3, [r3, #0]
}
 8020c24:	4618      	mov	r0, r3
 8020c26:	370c      	adds	r7, #12
 8020c28:	46bd      	mov	sp, r7
 8020c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c2e:	4770      	bx	lr
 8020c30:	080354c8 	.word	0x080354c8

08020c34 <mg_unpack>:
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 8020c34:	b580      	push	{r7, lr}
 8020c36:	b086      	sub	sp, #24
 8020c38:	af00      	add	r7, sp, #0
 8020c3a:	60f8      	str	r0, [r7, #12]
 8020c3c:	60b9      	str	r1, [r7, #8]
 8020c3e:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 8020c40:	4b16      	ldr	r3, [pc, #88]	@ (8020c9c <mg_unpack+0x68>)
 8020c42:	617b      	str	r3, [r7, #20]
 8020c44:	e020      	b.n	8020c88 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 8020c46:	697b      	ldr	r3, [r7, #20]
 8020c48:	681b      	ldr	r3, [r3, #0]
 8020c4a:	68f9      	ldr	r1, [r7, #12]
 8020c4c:	4618      	mov	r0, r3
 8020c4e:	f7ff ffbb 	bl	8020bc8 <scmp>
 8020c52:	4603      	mov	r3, r0
 8020c54:	2b00      	cmp	r3, #0
 8020c56:	d113      	bne.n	8020c80 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 8020c58:	68bb      	ldr	r3, [r7, #8]
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	d004      	beq.n	8020c68 <mg_unpack+0x34>
 8020c5e:	697b      	ldr	r3, [r7, #20]
 8020c60:	689b      	ldr	r3, [r3, #8]
 8020c62:	1e5a      	subs	r2, r3, #1
 8020c64:	68bb      	ldr	r3, [r7, #8]
 8020c66:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 8020c68:	687b      	ldr	r3, [r7, #4]
 8020c6a:	2b00      	cmp	r3, #0
 8020c6c:	d005      	beq.n	8020c7a <mg_unpack+0x46>
 8020c6e:	697b      	ldr	r3, [r7, #20]
 8020c70:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8020c74:	6879      	ldr	r1, [r7, #4]
 8020c76:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 8020c7a:	697b      	ldr	r3, [r7, #20]
 8020c7c:	685b      	ldr	r3, [r3, #4]
 8020c7e:	e008      	b.n	8020c92 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 8020c80:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 8020c82:	697b      	ldr	r3, [r7, #20]
 8020c84:	3318      	adds	r3, #24
 8020c86:	617b      	str	r3, [r7, #20]
 8020c88:	697b      	ldr	r3, [r7, #20]
 8020c8a:	681b      	ldr	r3, [r3, #0]
 8020c8c:	2b00      	cmp	r3, #0
 8020c8e:	d1da      	bne.n	8020c46 <mg_unpack+0x12>
  }
  return NULL;
 8020c90:	2300      	movs	r3, #0
}
 8020c92:	4618      	mov	r0, r3
 8020c94:	3718      	adds	r7, #24
 8020c96:	46bd      	mov	sp, r7
 8020c98:	bd80      	pop	{r7, pc}
 8020c9a:	bf00      	nop
 8020c9c:	080354c8 	.word	0x080354c8

08020ca0 <glue_modbus_read_reg>:

// Read/write registers via Modbus API
// Return true if the register is read/written successfully, false otherwise
// The address is a 16-bit unsigned integer, the value is also a 16-bit unsigned integer
// The address is in the range [s_modbus_base, s_modbus_base + count), where count is the number of registers
bool glue_modbus_read_reg(uint16_t address, uint16_t *value) {
 8020ca0:	b580      	push	{r7, lr}
 8020ca2:	b084      	sub	sp, #16
 8020ca4:	af00      	add	r7, sp, #0
 8020ca6:	4603      	mov	r3, r0
 8020ca8:	6039      	str	r1, [r7, #0]
 8020caa:	80fb      	strh	r3, [r7, #6]
  bool success = false;
 8020cac:	2300      	movs	r3, #0
 8020cae:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8020cb0:	23e1      	movs	r3, #225	@ 0xe1
 8020cb2:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8020cb4:	4b19      	ldr	r3, [pc, #100]	@ (8020d1c <glue_modbus_read_reg+0x7c>)
 8020cb6:	881b      	ldrh	r3, [r3, #0]
 8020cb8:	88fa      	ldrh	r2, [r7, #6]
 8020cba:	429a      	cmp	r2, r3
 8020cbc:	d312      	bcc.n	8020ce4 <glue_modbus_read_reg+0x44>
 8020cbe:	88fa      	ldrh	r2, [r7, #6]
 8020cc0:	4b16      	ldr	r3, [pc, #88]	@ (8020d1c <glue_modbus_read_reg+0x7c>)
 8020cc2:	881b      	ldrh	r3, [r3, #0]
 8020cc4:	4619      	mov	r1, r3
 8020cc6:	68bb      	ldr	r3, [r7, #8]
 8020cc8:	440b      	add	r3, r1
 8020cca:	429a      	cmp	r2, r3
 8020ccc:	d20a      	bcs.n	8020ce4 <glue_modbus_read_reg+0x44>
    *value = s_modbus_regs[address - s_modbus_base];
 8020cce:	88fb      	ldrh	r3, [r7, #6]
 8020cd0:	4a12      	ldr	r2, [pc, #72]	@ (8020d1c <glue_modbus_read_reg+0x7c>)
 8020cd2:	8812      	ldrh	r2, [r2, #0]
 8020cd4:	1a9b      	subs	r3, r3, r2
 8020cd6:	4a12      	ldr	r2, [pc, #72]	@ (8020d20 <glue_modbus_read_reg+0x80>)
 8020cd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8020cdc:	683b      	ldr	r3, [r7, #0]
 8020cde:	801a      	strh	r2, [r3, #0]
    success = true;
 8020ce0:	2301      	movs	r3, #1
 8020ce2:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Read OK" : "Read FAIL", address, *value));
 8020ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8020d24 <glue_modbus_read_reg+0x84>)
 8020ce6:	681b      	ldr	r3, [r3, #0]
 8020ce8:	2b01      	cmp	r3, #1
 8020cea:	dd11      	ble.n	8020d10 <glue_modbus_read_reg+0x70>
 8020cec:	4b0e      	ldr	r3, [pc, #56]	@ (8020d28 <glue_modbus_read_reg+0x88>)
 8020cee:	2218      	movs	r2, #24
 8020cf0:	490e      	ldr	r1, [pc, #56]	@ (8020d2c <glue_modbus_read_reg+0x8c>)
 8020cf2:	2002      	movs	r0, #2
 8020cf4:	f7eb fb9e 	bl	800c434 <mg_log_prefix>
 8020cf8:	7bfb      	ldrb	r3, [r7, #15]
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	d001      	beq.n	8020d02 <glue_modbus_read_reg+0x62>
 8020cfe:	490c      	ldr	r1, [pc, #48]	@ (8020d30 <glue_modbus_read_reg+0x90>)
 8020d00:	e000      	b.n	8020d04 <glue_modbus_read_reg+0x64>
 8020d02:	490c      	ldr	r1, [pc, #48]	@ (8020d34 <glue_modbus_read_reg+0x94>)
 8020d04:	88fa      	ldrh	r2, [r7, #6]
 8020d06:	683b      	ldr	r3, [r7, #0]
 8020d08:	881b      	ldrh	r3, [r3, #0]
 8020d0a:	480b      	ldr	r0, [pc, #44]	@ (8020d38 <glue_modbus_read_reg+0x98>)
 8020d0c:	f7eb fbe2 	bl	800c4d4 <mg_log>
  return success;
 8020d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8020d12:	4618      	mov	r0, r3
 8020d14:	3710      	adds	r7, #16
 8020d16:	46bd      	mov	sp, r7
 8020d18:	bd80      	pop	{r7, pc}
 8020d1a:	bf00      	nop
 8020d1c:	240002b0 	.word	0x240002b0
 8020d20:	24004214 	.word	0x24004214
 8020d24:	24000258 	.word	0x24000258
 8020d28:	080354f8 	.word	0x080354f8
 8020d2c:	08026f28 	.word	0x08026f28
 8020d30:	08026f44 	.word	0x08026f44
 8020d34:	08026f4c 	.word	0x08026f4c
 8020d38:	08026f58 	.word	0x08026f58

08020d3c <glue_modbus_write_reg>:

bool glue_modbus_write_reg(uint16_t address, uint16_t value) {
 8020d3c:	b580      	push	{r7, lr}
 8020d3e:	b084      	sub	sp, #16
 8020d40:	af00      	add	r7, sp, #0
 8020d42:	4603      	mov	r3, r0
 8020d44:	460a      	mov	r2, r1
 8020d46:	80fb      	strh	r3, [r7, #6]
 8020d48:	4613      	mov	r3, r2
 8020d4a:	80bb      	strh	r3, [r7, #4]
  bool success = false;
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	73fb      	strb	r3, [r7, #15]
  size_t count = sizeof(s_modbus_regs) / sizeof(s_modbus_regs[0]);
 8020d50:	23e1      	movs	r3, #225	@ 0xe1
 8020d52:	60bb      	str	r3, [r7, #8]
  if (address >= s_modbus_base && address < s_modbus_base + count) {
 8020d54:	4b18      	ldr	r3, [pc, #96]	@ (8020db8 <glue_modbus_write_reg+0x7c>)
 8020d56:	881b      	ldrh	r3, [r3, #0]
 8020d58:	88fa      	ldrh	r2, [r7, #6]
 8020d5a:	429a      	cmp	r2, r3
 8020d5c:	d311      	bcc.n	8020d82 <glue_modbus_write_reg+0x46>
 8020d5e:	88fa      	ldrh	r2, [r7, #6]
 8020d60:	4b15      	ldr	r3, [pc, #84]	@ (8020db8 <glue_modbus_write_reg+0x7c>)
 8020d62:	881b      	ldrh	r3, [r3, #0]
 8020d64:	4619      	mov	r1, r3
 8020d66:	68bb      	ldr	r3, [r7, #8]
 8020d68:	440b      	add	r3, r1
 8020d6a:	429a      	cmp	r2, r3
 8020d6c:	d209      	bcs.n	8020d82 <glue_modbus_write_reg+0x46>
    s_modbus_regs[address - s_modbus_base] = value;
 8020d6e:	88fb      	ldrh	r3, [r7, #6]
 8020d70:	4a11      	ldr	r2, [pc, #68]	@ (8020db8 <glue_modbus_write_reg+0x7c>)
 8020d72:	8812      	ldrh	r2, [r2, #0]
 8020d74:	1a9b      	subs	r3, r3, r2
 8020d76:	4911      	ldr	r1, [pc, #68]	@ (8020dbc <glue_modbus_write_reg+0x80>)
 8020d78:	88ba      	ldrh	r2, [r7, #4]
 8020d7a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    success = true;
 8020d7e:	2301      	movs	r3, #1
 8020d80:	73fb      	strb	r3, [r7, #15]
  }
  MG_INFO(("%s: %hu = %hu", success ? "Write OK" : "Write FAIL", address, value));
 8020d82:	4b0f      	ldr	r3, [pc, #60]	@ (8020dc0 <glue_modbus_write_reg+0x84>)
 8020d84:	681b      	ldr	r3, [r3, #0]
 8020d86:	2b01      	cmp	r3, #1
 8020d88:	dd10      	ble.n	8020dac <glue_modbus_write_reg+0x70>
 8020d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8020dc4 <glue_modbus_write_reg+0x88>)
 8020d8c:	2223      	movs	r2, #35	@ 0x23
 8020d8e:	490e      	ldr	r1, [pc, #56]	@ (8020dc8 <glue_modbus_write_reg+0x8c>)
 8020d90:	2002      	movs	r0, #2
 8020d92:	f7eb fb4f 	bl	800c434 <mg_log_prefix>
 8020d96:	7bfb      	ldrb	r3, [r7, #15]
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	d001      	beq.n	8020da0 <glue_modbus_write_reg+0x64>
 8020d9c:	490b      	ldr	r1, [pc, #44]	@ (8020dcc <glue_modbus_write_reg+0x90>)
 8020d9e:	e000      	b.n	8020da2 <glue_modbus_write_reg+0x66>
 8020da0:	490b      	ldr	r1, [pc, #44]	@ (8020dd0 <glue_modbus_write_reg+0x94>)
 8020da2:	88fa      	ldrh	r2, [r7, #6]
 8020da4:	88bb      	ldrh	r3, [r7, #4]
 8020da6:	480b      	ldr	r0, [pc, #44]	@ (8020dd4 <glue_modbus_write_reg+0x98>)
 8020da8:	f7eb fb94 	bl	800c4d4 <mg_log>
  return success;
 8020dac:	7bfb      	ldrb	r3, [r7, #15]

}
 8020dae:	4618      	mov	r0, r3
 8020db0:	3710      	adds	r7, #16
 8020db2:	46bd      	mov	sp, r7
 8020db4:	bd80      	pop	{r7, pc}
 8020db6:	bf00      	nop
 8020db8:	240002b0 	.word	0x240002b0
 8020dbc:	24004214 	.word	0x24004214
 8020dc0:	24000258 	.word	0x24000258
 8020dc4:	08035510 	.word	0x08035510
 8020dc8:	08026f28 	.word	0x08026f28
 8020dcc:	08026f68 	.word	0x08026f68
 8020dd0:	08026f74 	.word	0x08026f74
 8020dd4:	08026f58 	.word	0x08026f58

08020dd8 <glue_authenticate>:
  return 0;
}
// Authenticate user/password. Return access level for the authenticated user:
//   0 - authentication error
//   1,2,3... - authentication success. Higher levels are more privileged than lower
int glue_authenticate(const char *user, const char *pass) {
 8020dd8:	b580      	push	{r7, lr}
 8020dda:	b084      	sub	sp, #16
 8020ddc:	af00      	add	r7, sp, #0
 8020dde:	6078      	str	r0, [r7, #4]
 8020de0:	6039      	str	r1, [r7, #0]
  int level = 0; // Authentication failure
 8020de2:	2300      	movs	r3, #0
 8020de4:	60fb      	str	r3, [r7, #12]
  if (strcmp(user, "admin") == 0 && strcmp(pass, "admin") == 0) {
 8020de6:	4913      	ldr	r1, [pc, #76]	@ (8020e34 <glue_authenticate+0x5c>)
 8020de8:	6878      	ldr	r0, [r7, #4]
 8020dea:	f7df fa91 	bl	8000310 <strcmp>
 8020dee:	4603      	mov	r3, r0
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d109      	bne.n	8020e08 <glue_authenticate+0x30>
 8020df4:	490f      	ldr	r1, [pc, #60]	@ (8020e34 <glue_authenticate+0x5c>)
 8020df6:	6838      	ldr	r0, [r7, #0]
 8020df8:	f7df fa8a 	bl	8000310 <strcmp>
 8020dfc:	4603      	mov	r3, r0
 8020dfe:	2b00      	cmp	r3, #0
 8020e00:	d102      	bne.n	8020e08 <glue_authenticate+0x30>
    level = 7;  // Administrator
 8020e02:	2307      	movs	r3, #7
 8020e04:	60fb      	str	r3, [r7, #12]
 8020e06:	e00f      	b.n	8020e28 <glue_authenticate+0x50>
  } else if (strcmp(user, "user") == 0 && strcmp(pass, "user") == 0) {
 8020e08:	490b      	ldr	r1, [pc, #44]	@ (8020e38 <glue_authenticate+0x60>)
 8020e0a:	6878      	ldr	r0, [r7, #4]
 8020e0c:	f7df fa80 	bl	8000310 <strcmp>
 8020e10:	4603      	mov	r3, r0
 8020e12:	2b00      	cmp	r3, #0
 8020e14:	d108      	bne.n	8020e28 <glue_authenticate+0x50>
 8020e16:	4908      	ldr	r1, [pc, #32]	@ (8020e38 <glue_authenticate+0x60>)
 8020e18:	6838      	ldr	r0, [r7, #0]
 8020e1a:	f7df fa79 	bl	8000310 <strcmp>
 8020e1e:	4603      	mov	r3, r0
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	d101      	bne.n	8020e28 <glue_authenticate+0x50>
    level = 3;  // Ordinary dude
 8020e24:	2303      	movs	r3, #3
 8020e26:	60fb      	str	r3, [r7, #12]
  }
  return level;
 8020e28:	68fb      	ldr	r3, [r7, #12]
}
 8020e2a:	4618      	mov	r0, r3
 8020e2c:	3710      	adds	r7, #16
 8020e2e:	46bd      	mov	sp, r7
 8020e30:	bd80      	pop	{r7, pc}
 8020e32:	bf00      	nop
 8020e34:	08026f80 	.word	0x08026f80
 8020e38:	08026f88 	.word	0x08026f88

08020e3c <glue_check_reboot>:

static uint64_t s_action_timeout_reboot;  // Time when reboot ends
bool glue_check_reboot(void) {
 8020e3c:	b580      	push	{r7, lr}
 8020e3e:	af00      	add	r7, sp, #0
  return s_action_timeout_reboot > mg_now(); // Return true if reboot is in progress
 8020e40:	f7f3 f91e 	bl	8014080 <mg_now>
 8020e44:	4b05      	ldr	r3, [pc, #20]	@ (8020e5c <glue_check_reboot+0x20>)
 8020e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e4a:	4290      	cmp	r0, r2
 8020e4c:	eb71 0303 	sbcs.w	r3, r1, r3
 8020e50:	bf34      	ite	cc
 8020e52:	2301      	movcc	r3, #1
 8020e54:	2300      	movcs	r3, #0
 8020e56:	b2db      	uxtb	r3, r3
}
 8020e58:	4618      	mov	r0, r3
 8020e5a:	bd80      	pop	{r7, pc}
 8020e5c:	240043d8 	.word	0x240043d8

08020e60 <glue_start_reboot>:
void glue_start_reboot(struct mg_str params) {
 8020e60:	b5b0      	push	{r4, r5, r7, lr}
 8020e62:	b082      	sub	sp, #8
 8020e64:	af00      	add	r7, sp, #0
 8020e66:	463b      	mov	r3, r7
 8020e68:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 8020e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8020eac <glue_start_reboot+0x4c>)
 8020e6e:	681b      	ldr	r3, [r3, #0]
 8020e70:	2b02      	cmp	r3, #2
 8020e72:	dd0b      	ble.n	8020e8c <glue_start_reboot+0x2c>
 8020e74:	4b0e      	ldr	r3, [pc, #56]	@ (8020eb0 <glue_start_reboot+0x50>)
 8020e76:	2241      	movs	r2, #65	@ 0x41
 8020e78:	490e      	ldr	r1, [pc, #56]	@ (8020eb4 <glue_start_reboot+0x54>)
 8020e7a:	2003      	movs	r0, #3
 8020e7c:	f7eb fada 	bl	800c434 <mg_log_prefix>
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	683a      	ldr	r2, [r7, #0]
 8020e84:	4619      	mov	r1, r3
 8020e86:	480c      	ldr	r0, [pc, #48]	@ (8020eb8 <glue_start_reboot+0x58>)
 8020e88:	f7eb fb24 	bl	800c4d4 <mg_log>
  s_action_timeout_reboot = mg_now() + 1000; // Start reboot, finish after 1 second
 8020e8c:	f7f3 f8f8 	bl	8014080 <mg_now>
 8020e90:	4602      	mov	r2, r0
 8020e92:	460b      	mov	r3, r1
 8020e94:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8020e98:	f143 0500 	adc.w	r5, r3, #0
 8020e9c:	4b07      	ldr	r3, [pc, #28]	@ (8020ebc <glue_start_reboot+0x5c>)
 8020e9e:	e9c3 4500 	strd	r4, r5, [r3]
}
 8020ea2:	bf00      	nop
 8020ea4:	3708      	adds	r7, #8
 8020ea6:	46bd      	mov	sp, r7
 8020ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8020eaa:	bf00      	nop
 8020eac:	24000258 	.word	0x24000258
 8020eb0:	08035528 	.word	0x08035528
 8020eb4:	08026f28 	.word	0x08026f28
 8020eb8:	08026f90 	.word	0x08026f90
 8020ebc:	240043d8 	.word	0x240043d8

08020ec0 <glue_check_reformat>:

static uint64_t s_action_timeout_reformat;  // Time when reformat ends
bool glue_check_reformat(void) {
 8020ec0:	b580      	push	{r7, lr}
 8020ec2:	af00      	add	r7, sp, #0
  return s_action_timeout_reformat > mg_now(); // Return true if reformat is in progress
 8020ec4:	f7f3 f8dc 	bl	8014080 <mg_now>
 8020ec8:	4b05      	ldr	r3, [pc, #20]	@ (8020ee0 <glue_check_reformat+0x20>)
 8020eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ece:	4290      	cmp	r0, r2
 8020ed0:	eb71 0303 	sbcs.w	r3, r1, r3
 8020ed4:	bf34      	ite	cc
 8020ed6:	2301      	movcc	r3, #1
 8020ed8:	2300      	movcs	r3, #0
 8020eda:	b2db      	uxtb	r3, r3
}
 8020edc:	4618      	mov	r0, r3
 8020ede:	bd80      	pop	{r7, pc}
 8020ee0:	240043e0 	.word	0x240043e0

08020ee4 <glue_start_reformat>:
void glue_start_reformat(struct mg_str params) {
 8020ee4:	b5b0      	push	{r4, r5, r7, lr}
 8020ee6:	b082      	sub	sp, #8
 8020ee8:	af00      	add	r7, sp, #0
 8020eea:	463b      	mov	r3, r7
 8020eec:	e883 0003 	stmia.w	r3, {r0, r1}
  MG_DEBUG(("Passed parameters: [%.*s]", params.len, params.buf));
 8020ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8020f30 <glue_start_reformat+0x4c>)
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	2b02      	cmp	r3, #2
 8020ef6:	dd0b      	ble.n	8020f10 <glue_start_reformat+0x2c>
 8020ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8020f34 <glue_start_reformat+0x50>)
 8020efa:	224a      	movs	r2, #74	@ 0x4a
 8020efc:	490e      	ldr	r1, [pc, #56]	@ (8020f38 <glue_start_reformat+0x54>)
 8020efe:	2003      	movs	r0, #3
 8020f00:	f7eb fa98 	bl	800c434 <mg_log_prefix>
 8020f04:	687b      	ldr	r3, [r7, #4]
 8020f06:	683a      	ldr	r2, [r7, #0]
 8020f08:	4619      	mov	r1, r3
 8020f0a:	480c      	ldr	r0, [pc, #48]	@ (8020f3c <glue_start_reformat+0x58>)
 8020f0c:	f7eb fae2 	bl	800c4d4 <mg_log>
  s_action_timeout_reformat = mg_now() + 1000; // Start reformat, finish after 1 second
 8020f10:	f7f3 f8b6 	bl	8014080 <mg_now>
 8020f14:	4602      	mov	r2, r0
 8020f16:	460b      	mov	r3, r1
 8020f18:	f512 747a 	adds.w	r4, r2, #1000	@ 0x3e8
 8020f1c:	f143 0500 	adc.w	r5, r3, #0
 8020f20:	4b07      	ldr	r3, [pc, #28]	@ (8020f40 <glue_start_reformat+0x5c>)
 8020f22:	e9c3 4500 	strd	r4, r5, [r3]
}
 8020f26:	bf00      	nop
 8020f28:	3708      	adds	r7, #8
 8020f2a:	46bd      	mov	sp, r7
 8020f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8020f2e:	bf00      	nop
 8020f30:	24000258 	.word	0x24000258
 8020f34:	0803553c 	.word	0x0803553c
 8020f38:	08026f28 	.word	0x08026f28
 8020f3c:	08026f90 	.word	0x08026f90
 8020f40:	240043e0 	.word	0x240043e0

08020f44 <glue_ota_begin_firmware_update>:

void *glue_ota_begin_firmware_update(char *file_name, size_t total_size) {
 8020f44:	b580      	push	{r7, lr}
 8020f46:	b084      	sub	sp, #16
 8020f48:	af00      	add	r7, sp, #0
 8020f4a:	6078      	str	r0, [r7, #4]
 8020f4c:	6039      	str	r1, [r7, #0]
  bool ok = mg_ota_begin(total_size);
 8020f4e:	6838      	ldr	r0, [r7, #0]
 8020f50:	f7ef fbde 	bl	8010710 <mg_ota_begin>
 8020f54:	4603      	mov	r3, r0
 8020f56:	73fb      	strb	r3, [r7, #15]
  MG_DEBUG(("%s size %lu, ok: %d", file_name, total_size, ok));
 8020f58:	4b0c      	ldr	r3, [pc, #48]	@ (8020f8c <glue_ota_begin_firmware_update+0x48>)
 8020f5a:	681b      	ldr	r3, [r3, #0]
 8020f5c:	2b02      	cmp	r3, #2
 8020f5e:	dd0b      	ble.n	8020f78 <glue_ota_begin_firmware_update+0x34>
 8020f60:	4b0b      	ldr	r3, [pc, #44]	@ (8020f90 <glue_ota_begin_firmware_update+0x4c>)
 8020f62:	2250      	movs	r2, #80	@ 0x50
 8020f64:	490b      	ldr	r1, [pc, #44]	@ (8020f94 <glue_ota_begin_firmware_update+0x50>)
 8020f66:	2003      	movs	r0, #3
 8020f68:	f7eb fa64 	bl	800c434 <mg_log_prefix>
 8020f6c:	7bfb      	ldrb	r3, [r7, #15]
 8020f6e:	683a      	ldr	r2, [r7, #0]
 8020f70:	6879      	ldr	r1, [r7, #4]
 8020f72:	4809      	ldr	r0, [pc, #36]	@ (8020f98 <glue_ota_begin_firmware_update+0x54>)
 8020f74:	f7eb faae 	bl	800c4d4 <mg_log>
  return ok ? (void *) 1 : NULL;
 8020f78:	7bfb      	ldrb	r3, [r7, #15]
 8020f7a:	2b00      	cmp	r3, #0
 8020f7c:	d001      	beq.n	8020f82 <glue_ota_begin_firmware_update+0x3e>
 8020f7e:	2301      	movs	r3, #1
 8020f80:	e000      	b.n	8020f84 <glue_ota_begin_firmware_update+0x40>
 8020f82:	2300      	movs	r3, #0
}
 8020f84:	4618      	mov	r0, r3
 8020f86:	3710      	adds	r7, #16
 8020f88:	46bd      	mov	sp, r7
 8020f8a:	bd80      	pop	{r7, pc}
 8020f8c:	24000258 	.word	0x24000258
 8020f90:	08035550 	.word	0x08035550
 8020f94:	08026f28 	.word	0x08026f28
 8020f98:	08026fac 	.word	0x08026fac

08020f9c <glue_ota_end_firmware_update>:
bool glue_ota_end_firmware_update(void *context) {
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	b086      	sub	sp, #24
 8020fa0:	af04      	add	r7, sp, #16
 8020fa2:	6078      	str	r0, [r7, #4]
  mg_timer_add(&g_mgr, 500, 0, (void (*)(void *)) (void *) mg_ota_end, context);
 8020fa4:	687b      	ldr	r3, [r7, #4]
 8020fa6:	9302      	str	r3, [sp, #8]
 8020fa8:	4b07      	ldr	r3, [pc, #28]	@ (8020fc8 <glue_ota_end_firmware_update+0x2c>)
 8020faa:	9301      	str	r3, [sp, #4]
 8020fac:	2300      	movs	r3, #0
 8020fae:	9300      	str	r3, [sp, #0]
 8020fb0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8020fb4:	f04f 0300 	mov.w	r3, #0
 8020fb8:	4804      	ldr	r0, [pc, #16]	@ (8020fcc <glue_ota_end_firmware_update+0x30>)
 8020fba:	f7eb ff5f 	bl	800ce7c <mg_timer_add>
  return true;
 8020fbe:	2301      	movs	r3, #1
}
 8020fc0:	4618      	mov	r0, r3
 8020fc2:	3708      	adds	r7, #8
 8020fc4:	46bd      	mov	sp, r7
 8020fc6:	bd80      	pop	{r7, pc}
 8020fc8:	08010761 	.word	0x08010761
 8020fcc:	240043e8 	.word	0x240043e8

08020fd0 <glue_ota_write_firmware_update>:
bool glue_ota_write_firmware_update(void *context, void *buf, size_t len) {
 8020fd0:	b580      	push	{r7, lr}
 8020fd2:	b084      	sub	sp, #16
 8020fd4:	af00      	add	r7, sp, #0
 8020fd6:	60f8      	str	r0, [r7, #12]
 8020fd8:	60b9      	str	r1, [r7, #8]
 8020fda:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("ctx: %p %p/%lu", context, buf, len));
 8020fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8021010 <glue_ota_write_firmware_update+0x40>)
 8020fde:	681b      	ldr	r3, [r3, #0]
 8020fe0:	2b02      	cmp	r3, #2
 8020fe2:	dd0b      	ble.n	8020ffc <glue_ota_write_firmware_update+0x2c>
 8020fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8021014 <glue_ota_write_firmware_update+0x44>)
 8020fe6:	2258      	movs	r2, #88	@ 0x58
 8020fe8:	490b      	ldr	r1, [pc, #44]	@ (8021018 <glue_ota_write_firmware_update+0x48>)
 8020fea:	2003      	movs	r0, #3
 8020fec:	f7eb fa22 	bl	800c434 <mg_log_prefix>
 8020ff0:	687b      	ldr	r3, [r7, #4]
 8020ff2:	68ba      	ldr	r2, [r7, #8]
 8020ff4:	68f9      	ldr	r1, [r7, #12]
 8020ff6:	4809      	ldr	r0, [pc, #36]	@ (802101c <glue_ota_write_firmware_update+0x4c>)
 8020ff8:	f7eb fa6c 	bl	800c4d4 <mg_log>
  return mg_ota_write(buf, len);
 8020ffc:	6879      	ldr	r1, [r7, #4]
 8020ffe:	68b8      	ldr	r0, [r7, #8]
 8021000:	f7ef fb9c 	bl	801073c <mg_ota_write>
 8021004:	4603      	mov	r3, r0
}
 8021006:	4618      	mov	r0, r3
 8021008:	3710      	adds	r7, #16
 802100a:	46bd      	mov	sp, r7
 802100c:	bd80      	pop	{r7, pc}
 802100e:	bf00      	nop
 8021010:	24000258 	.word	0x24000258
 8021014:	08035570 	.word	0x08035570
 8021018:	08026f28 	.word	0x08026f28
 802101c:	08026fc0 	.word	0x08026fc0

08021020 <glue_upload_open_file_upload>:

void *glue_upload_open_file_upload(char *file_name, size_t total_size) {
 8021020:	b580      	push	{r7, lr}
 8021022:	b0a4      	sub	sp, #144	@ 0x90
 8021024:	af00      	add	r7, sp, #0
 8021026:	6078      	str	r0, [r7, #4]
 8021028:	6039      	str	r1, [r7, #0]
  char path[128], *p = NULL;
 802102a:	2300      	movs	r3, #0
 802102c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  FILE *fp = NULL;
 8021030:	2300      	movs	r3, #0
 8021032:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if ((p = strrchr(file_name, '/')) == NULL) p = file_name;
 8021036:	212f      	movs	r1, #47	@ 0x2f
 8021038:	6878      	ldr	r0, [r7, #4]
 802103a:	f002 fbea 	bl	8023812 <strrchr>
 802103e:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8021042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021046:	2b00      	cmp	r3, #0
 8021048:	d102      	bne.n	8021050 <glue_upload_open_file_upload+0x30>
 802104a:	687b      	ldr	r3, [r7, #4]
 802104c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  mg_snprintf(path, sizeof(path), "/tmp/%s", p);
 8021050:	f107 0008 	add.w	r0, r7, #8
 8021054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8021058:	4a0d      	ldr	r2, [pc, #52]	@ (8021090 <glue_upload_open_file_upload+0x70>)
 802105a:	2180      	movs	r1, #128	@ 0x80
 802105c:	f7ef fc70 	bl	8010940 <mg_snprintf>
#if MG_ENABLE_POSIX_FS
  fp = fopen(path, "w+b");
#endif
  MG_DEBUG(("opening [%s] size %lu, fp %p", path, total_size, fp));
 8021060:	4b0c      	ldr	r3, [pc, #48]	@ (8021094 <glue_upload_open_file_upload+0x74>)
 8021062:	681b      	ldr	r3, [r3, #0]
 8021064:	2b02      	cmp	r3, #2
 8021066:	dd0d      	ble.n	8021084 <glue_upload_open_file_upload+0x64>
 8021068:	4b0b      	ldr	r3, [pc, #44]	@ (8021098 <glue_upload_open_file_upload+0x78>)
 802106a:	2264      	movs	r2, #100	@ 0x64
 802106c:	490b      	ldr	r1, [pc, #44]	@ (802109c <glue_upload_open_file_upload+0x7c>)
 802106e:	2003      	movs	r0, #3
 8021070:	f7eb f9e0 	bl	800c434 <mg_log_prefix>
 8021074:	f107 0108 	add.w	r1, r7, #8
 8021078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 802107c:	683a      	ldr	r2, [r7, #0]
 802107e:	4808      	ldr	r0, [pc, #32]	@ (80210a0 <glue_upload_open_file_upload+0x80>)
 8021080:	f7eb fa28 	bl	800c4d4 <mg_log>
  return fp;
 8021084:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
}
 8021088:	4618      	mov	r0, r3
 802108a:	3790      	adds	r7, #144	@ 0x90
 802108c:	46bd      	mov	sp, r7
 802108e:	bd80      	pop	{r7, pc}
 8021090:	08026fd0 	.word	0x08026fd0
 8021094:	24000258 	.word	0x24000258
 8021098:	08035590 	.word	0x08035590
 802109c:	08026f28 	.word	0x08026f28
 80210a0:	08026fd8 	.word	0x08026fd8

080210a4 <glue_upload_close_file_upload>:
bool glue_upload_close_file_upload(void *fp) {
 80210a4:	b580      	push	{r7, lr}
 80210a6:	b082      	sub	sp, #8
 80210a8:	af00      	add	r7, sp, #0
 80210aa:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("closing %p", fp));
 80210ac:	4b09      	ldr	r3, [pc, #36]	@ (80210d4 <glue_upload_close_file_upload+0x30>)
 80210ae:	681b      	ldr	r3, [r3, #0]
 80210b0:	2b02      	cmp	r3, #2
 80210b2:	dd09      	ble.n	80210c8 <glue_upload_close_file_upload+0x24>
 80210b4:	4b08      	ldr	r3, [pc, #32]	@ (80210d8 <glue_upload_close_file_upload+0x34>)
 80210b6:	2268      	movs	r2, #104	@ 0x68
 80210b8:	4908      	ldr	r1, [pc, #32]	@ (80210dc <glue_upload_close_file_upload+0x38>)
 80210ba:	2003      	movs	r0, #3
 80210bc:	f7eb f9ba 	bl	800c434 <mg_log_prefix>
 80210c0:	6879      	ldr	r1, [r7, #4]
 80210c2:	4807      	ldr	r0, [pc, #28]	@ (80210e0 <glue_upload_close_file_upload+0x3c>)
 80210c4:	f7eb fa06 	bl	800c4d4 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fclose((FILE *) fp) == 0;
#else
  return false;
 80210c8:	2300      	movs	r3, #0
#endif
}
 80210ca:	4618      	mov	r0, r3
 80210cc:	3708      	adds	r7, #8
 80210ce:	46bd      	mov	sp, r7
 80210d0:	bd80      	pop	{r7, pc}
 80210d2:	bf00      	nop
 80210d4:	24000258 	.word	0x24000258
 80210d8:	080355b0 	.word	0x080355b0
 80210dc:	08026f28 	.word	0x08026f28
 80210e0:	08026ff8 	.word	0x08026ff8

080210e4 <glue_upload_write_file_upload>:
bool glue_upload_write_file_upload(void *fp, void *buf, size_t len) {
 80210e4:	b580      	push	{r7, lr}
 80210e6:	b084      	sub	sp, #16
 80210e8:	af00      	add	r7, sp, #0
 80210ea:	60f8      	str	r0, [r7, #12]
 80210ec:	60b9      	str	r1, [r7, #8]
 80210ee:	607a      	str	r2, [r7, #4]
  MG_DEBUG(("writing fp %p %p %lu bytes", fp, buf, len));
 80210f0:	4b0a      	ldr	r3, [pc, #40]	@ (802111c <glue_upload_write_file_upload+0x38>)
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	2b02      	cmp	r3, #2
 80210f6:	dd0b      	ble.n	8021110 <glue_upload_write_file_upload+0x2c>
 80210f8:	4b09      	ldr	r3, [pc, #36]	@ (8021120 <glue_upload_write_file_upload+0x3c>)
 80210fa:	2270      	movs	r2, #112	@ 0x70
 80210fc:	4909      	ldr	r1, [pc, #36]	@ (8021124 <glue_upload_write_file_upload+0x40>)
 80210fe:	2003      	movs	r0, #3
 8021100:	f7eb f998 	bl	800c434 <mg_log_prefix>
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	68ba      	ldr	r2, [r7, #8]
 8021108:	68f9      	ldr	r1, [r7, #12]
 802110a:	4807      	ldr	r0, [pc, #28]	@ (8021128 <glue_upload_write_file_upload+0x44>)
 802110c:	f7eb f9e2 	bl	800c4d4 <mg_log>
#if MG_ENABLE_POSIX_FS
  return fwrite(buf, 1, len, (FILE *) fp) == len;
#else
  return false;
 8021110:	2300      	movs	r3, #0
#endif
}
 8021112:	4618      	mov	r0, r3
 8021114:	3710      	adds	r7, #16
 8021116:	46bd      	mov	sp, r7
 8021118:	bd80      	pop	{r7, pc}
 802111a:	bf00      	nop
 802111c:	24000258 	.word	0x24000258
 8021120:	080355d0 	.word	0x080355d0
 8021124:	08026f28 	.word	0x08026f28
 8021128:	08027004 	.word	0x08027004

0802112c <glue_reply_graph_data>:

void glue_reply_graph_data(struct mg_connection *c, struct mg_http_message *hm) {
 802112c:	b580      	push	{r7, lr}
 802112e:	b086      	sub	sp, #24
 8021130:	af02      	add	r7, sp, #8
 8021132:	6078      	str	r0, [r7, #4]
 8021134:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8021136:	4b08      	ldr	r3, [pc, #32]	@ (8021158 <glue_reply_graph_data+0x2c>)
 8021138:	60fb      	str	r3, [r7, #12]
  const char *value = "[[1724576787,20.3],[1724576847,27.2],[1724576907,29.7],[1724576967,27.9],[1724577027,25.1],[1724577087,23.8],[1724577147,22.5],[1724577207,22.2],[1724577267,23.3],[1724577327,23.9]]";
 802113a:	4b08      	ldr	r3, [pc, #32]	@ (802115c <glue_reply_graph_data+0x30>)
 802113c:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 802113e:	68bb      	ldr	r3, [r7, #8]
 8021140:	9300      	str	r3, [sp, #0]
 8021142:	4b07      	ldr	r3, [pc, #28]	@ (8021160 <glue_reply_graph_data+0x34>)
 8021144:	68fa      	ldr	r2, [r7, #12]
 8021146:	21c8      	movs	r1, #200	@ 0xc8
 8021148:	6878      	ldr	r0, [r7, #4]
 802114a:	f7e8 fbe3 	bl	8009914 <mg_http_reply>
}
 802114e:	bf00      	nop
 8021150:	3710      	adds	r7, #16
 8021152:	46bd      	mov	sp, r7
 8021154:	bd80      	pop	{r7, pc}
 8021156:	bf00      	nop
 8021158:	08027020 	.word	0x08027020
 802115c:	0802705c 	.word	0x0802705c
 8021160:	08027114 	.word	0x08027114

08021164 <glue_get_state>:
static struct state s_state = {42, 27, 67, 10, "1.0.0", true, false, 83};
void glue_get_state(struct state *data) {
 8021164:	b4b0      	push	{r4, r5, r7}
 8021166:	b083      	sub	sp, #12
 8021168:	af00      	add	r7, sp, #0
 802116a:	6078      	str	r0, [r7, #4]
  *data = s_state;  // Sync with your device
 802116c:	687b      	ldr	r3, [r7, #4]
 802116e:	4a08      	ldr	r2, [pc, #32]	@ (8021190 <glue_get_state+0x2c>)
 8021170:	461c      	mov	r4, r3
 8021172:	4615      	mov	r5, r2
 8021174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8021178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802117c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8021180:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8021184:	bf00      	nop
 8021186:	370c      	adds	r7, #12
 8021188:	46bd      	mov	sp, r7
 802118a:	bcb0      	pop	{r4, r5, r7}
 802118c:	4770      	bx	lr
 802118e:	bf00      	nop
 8021190:	240002b4 	.word	0x240002b4

08021194 <glue_get_leds>:

static struct leds s_leds = {false, true, false};
void glue_get_leds(struct leds *data) {
 8021194:	b480      	push	{r7}
 8021196:	b083      	sub	sp, #12
 8021198:	af00      	add	r7, sp, #0
 802119a:	6078      	str	r0, [r7, #4]
  *data = s_leds;  // Sync with your device
 802119c:	687b      	ldr	r3, [r7, #4]
 802119e:	4a05      	ldr	r2, [pc, #20]	@ (80211b4 <glue_get_leds+0x20>)
 80211a0:	8811      	ldrh	r1, [r2, #0]
 80211a2:	7892      	ldrb	r2, [r2, #2]
 80211a4:	8019      	strh	r1, [r3, #0]
 80211a6:	709a      	strb	r2, [r3, #2]
}
 80211a8:	bf00      	nop
 80211aa:	370c      	adds	r7, #12
 80211ac:	46bd      	mov	sp, r7
 80211ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211b2:	4770      	bx	lr
 80211b4:	240002e0 	.word	0x240002e0

080211b8 <glue_set_leds>:
void glue_set_leds(struct leds *data) {
 80211b8:	b480      	push	{r7}
 80211ba:	b083      	sub	sp, #12
 80211bc:	af00      	add	r7, sp, #0
 80211be:	6078      	str	r0, [r7, #4]
  s_leds = *data; // Sync with your device
 80211c0:	4b05      	ldr	r3, [pc, #20]	@ (80211d8 <glue_set_leds+0x20>)
 80211c2:	687a      	ldr	r2, [r7, #4]
 80211c4:	8811      	ldrh	r1, [r2, #0]
 80211c6:	7892      	ldrb	r2, [r2, #2]
 80211c8:	8019      	strh	r1, [r3, #0]
 80211ca:	709a      	strb	r2, [r3, #2]
}
 80211cc:	bf00      	nop
 80211ce:	370c      	adds	r7, #12
 80211d0:	46bd      	mov	sp, r7
 80211d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d6:	4770      	bx	lr
 80211d8:	240002e0 	.word	0x240002e0

080211dc <glue_get_network_settings>:

static struct network_settings s_network_settings = {"192.168.0.42", "192.168.0.1", "255.255.255.0", true};
void glue_get_network_settings(struct network_settings *data) {
 80211dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80211de:	b083      	sub	sp, #12
 80211e0:	af00      	add	r7, sp, #0
 80211e2:	6078      	str	r0, [r7, #4]
  *data = s_network_settings;  // Sync with your device
 80211e4:	687b      	ldr	r3, [r7, #4]
 80211e6:	4a0e      	ldr	r2, [pc, #56]	@ (8021220 <glue_get_network_settings+0x44>)
 80211e8:	4614      	mov	r4, r2
 80211ea:	469c      	mov	ip, r3
 80211ec:	f104 0e30 	add.w	lr, r4, #48	@ 0x30
 80211f0:	4665      	mov	r5, ip
 80211f2:	4626      	mov	r6, r4
 80211f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80211f6:	6028      	str	r0, [r5, #0]
 80211f8:	6069      	str	r1, [r5, #4]
 80211fa:	60aa      	str	r2, [r5, #8]
 80211fc:	60eb      	str	r3, [r5, #12]
 80211fe:	3410      	adds	r4, #16
 8021200:	f10c 0c10 	add.w	ip, ip, #16
 8021204:	4574      	cmp	r4, lr
 8021206:	d1f3      	bne.n	80211f0 <glue_get_network_settings+0x14>
 8021208:	4665      	mov	r5, ip
 802120a:	4623      	mov	r3, r4
 802120c:	cb07      	ldmia	r3!, {r0, r1, r2}
 802120e:	6028      	str	r0, [r5, #0]
 8021210:	6069      	str	r1, [r5, #4]
 8021212:	60aa      	str	r2, [r5, #8]
 8021214:	781b      	ldrb	r3, [r3, #0]
 8021216:	732b      	strb	r3, [r5, #12]
}
 8021218:	bf00      	nop
 802121a:	370c      	adds	r7, #12
 802121c:	46bd      	mov	sp, r7
 802121e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021220:	240002e4 	.word	0x240002e4

08021224 <glue_set_network_settings>:
void glue_set_network_settings(struct network_settings *data) {
 8021224:	b4f0      	push	{r4, r5, r6, r7}
 8021226:	b082      	sub	sp, #8
 8021228:	af00      	add	r7, sp, #0
 802122a:	6078      	str	r0, [r7, #4]
  s_network_settings = *data; // Sync with your device
 802122c:	4a0e      	ldr	r2, [pc, #56]	@ (8021268 <glue_set_network_settings+0x44>)
 802122e:	687b      	ldr	r3, [r7, #4]
 8021230:	461c      	mov	r4, r3
 8021232:	4616      	mov	r6, r2
 8021234:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8021238:	4635      	mov	r5, r6
 802123a:	4623      	mov	r3, r4
 802123c:	6818      	ldr	r0, [r3, #0]
 802123e:	6859      	ldr	r1, [r3, #4]
 8021240:	689a      	ldr	r2, [r3, #8]
 8021242:	68db      	ldr	r3, [r3, #12]
 8021244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8021246:	3410      	adds	r4, #16
 8021248:	3610      	adds	r6, #16
 802124a:	4564      	cmp	r4, ip
 802124c:	d1f4      	bne.n	8021238 <glue_set_network_settings+0x14>
 802124e:	4633      	mov	r3, r6
 8021250:	6820      	ldr	r0, [r4, #0]
 8021252:	6861      	ldr	r1, [r4, #4]
 8021254:	68a2      	ldr	r2, [r4, #8]
 8021256:	c307      	stmia	r3!, {r0, r1, r2}
 8021258:	7b22      	ldrb	r2, [r4, #12]
 802125a:	701a      	strb	r2, [r3, #0]
}
 802125c:	bf00      	nop
 802125e:	3708      	adds	r7, #8
 8021260:	46bd      	mov	sp, r7
 8021262:	bcf0      	pop	{r4, r5, r6, r7}
 8021264:	4770      	bx	lr
 8021266:	bf00      	nop
 8021268:	240002e4 	.word	0x240002e4

0802126c <glue_get_settings>:

static struct settings s_settings = {"edit & save me", "info", 123.12345, 17, true};
void glue_get_settings(struct settings *data) {
 802126c:	b580      	push	{r7, lr}
 802126e:	b082      	sub	sp, #8
 8021270:	af00      	add	r7, sp, #0
 8021272:	6078      	str	r0, [r7, #4]
  *data = s_settings;  // Sync with your device
 8021274:	687b      	ldr	r3, [r7, #4]
 8021276:	4a05      	ldr	r2, [pc, #20]	@ (802128c <glue_get_settings+0x20>)
 8021278:	4618      	mov	r0, r3
 802127a:	4611      	mov	r1, r2
 802127c:	2348      	movs	r3, #72	@ 0x48
 802127e:	461a      	mov	r2, r3
 8021280:	f002 fbc3 	bl	8023a0a <memcpy>
}
 8021284:	bf00      	nop
 8021286:	3708      	adds	r7, #8
 8021288:	46bd      	mov	sp, r7
 802128a:	bd80      	pop	{r7, pc}
 802128c:	24000328 	.word	0x24000328

08021290 <glue_set_settings>:
void glue_set_settings(struct settings *data) {
 8021290:	b580      	push	{r7, lr}
 8021292:	b082      	sub	sp, #8
 8021294:	af00      	add	r7, sp, #0
 8021296:	6078      	str	r0, [r7, #4]
  s_settings = *data; // Sync with your device
 8021298:	4a05      	ldr	r2, [pc, #20]	@ (80212b0 <glue_set_settings+0x20>)
 802129a:	687b      	ldr	r3, [r7, #4]
 802129c:	4610      	mov	r0, r2
 802129e:	4619      	mov	r1, r3
 80212a0:	2348      	movs	r3, #72	@ 0x48
 80212a2:	461a      	mov	r2, r3
 80212a4:	f002 fbb1 	bl	8023a0a <memcpy>
}
 80212a8:	bf00      	nop
 80212aa:	3708      	adds	r7, #8
 80212ac:	46bd      	mov	sp, r7
 80212ae:	bd80      	pop	{r7, pc}
 80212b0:	24000328 	.word	0x24000328

080212b4 <glue_get_security>:

static struct security s_security = {"admin", "user"};
void glue_get_security(struct security *data) {
 80212b4:	b580      	push	{r7, lr}
 80212b6:	b082      	sub	sp, #8
 80212b8:	af00      	add	r7, sp, #0
 80212ba:	6078      	str	r0, [r7, #4]
  *data = s_security;  // Sync with your device
 80212bc:	687b      	ldr	r3, [r7, #4]
 80212be:	4a05      	ldr	r2, [pc, #20]	@ (80212d4 <glue_get_security+0x20>)
 80212c0:	4618      	mov	r0, r3
 80212c2:	4611      	mov	r1, r2
 80212c4:	2350      	movs	r3, #80	@ 0x50
 80212c6:	461a      	mov	r2, r3
 80212c8:	f002 fb9f 	bl	8023a0a <memcpy>
}
 80212cc:	bf00      	nop
 80212ce:	3708      	adds	r7, #8
 80212d0:	46bd      	mov	sp, r7
 80212d2:	bd80      	pop	{r7, pc}
 80212d4:	24000370 	.word	0x24000370

080212d8 <glue_set_security>:
void glue_set_security(struct security *data) {
 80212d8:	b580      	push	{r7, lr}
 80212da:	b082      	sub	sp, #8
 80212dc:	af00      	add	r7, sp, #0
 80212de:	6078      	str	r0, [r7, #4]
  s_security = *data; // Sync with your device
 80212e0:	4a05      	ldr	r2, [pc, #20]	@ (80212f8 <glue_set_security+0x20>)
 80212e2:	687b      	ldr	r3, [r7, #4]
 80212e4:	4610      	mov	r0, r2
 80212e6:	4619      	mov	r1, r3
 80212e8:	2350      	movs	r3, #80	@ 0x50
 80212ea:	461a      	mov	r2, r3
 80212ec:	f002 fb8d 	bl	8023a0a <memcpy>
}
 80212f0:	bf00      	nop
 80212f2:	3708      	adds	r7, #8
 80212f4:	46bd      	mov	sp, r7
 80212f6:	bd80      	pop	{r7, pc}
 80212f8:	24000370 	.word	0x24000370

080212fc <glue_reply_loglevels>:

void glue_reply_loglevels(struct mg_connection *c, struct mg_http_message *hm) {
 80212fc:	b580      	push	{r7, lr}
 80212fe:	b086      	sub	sp, #24
 8021300:	af02      	add	r7, sp, #8
 8021302:	6078      	str	r0, [r7, #4]
 8021304:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 8021306:	4b08      	ldr	r3, [pc, #32]	@ (8021328 <glue_reply_loglevels+0x2c>)
 8021308:	60fb      	str	r3, [r7, #12]
  const char *value = "[\"disabled\",\"error\",\"info\",\"debug\",\"verbose\"]";
 802130a:	4b08      	ldr	r3, [pc, #32]	@ (802132c <glue_reply_loglevels+0x30>)
 802130c:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 802130e:	68bb      	ldr	r3, [r7, #8]
 8021310:	9300      	str	r3, [sp, #0]
 8021312:	4b07      	ldr	r3, [pc, #28]	@ (8021330 <glue_reply_loglevels+0x34>)
 8021314:	68fa      	ldr	r2, [r7, #12]
 8021316:	21c8      	movs	r1, #200	@ 0xc8
 8021318:	6878      	ldr	r0, [r7, #4]
 802131a:	f7e8 fafb 	bl	8009914 <mg_http_reply>
}
 802131e:	bf00      	nop
 8021320:	3710      	adds	r7, #16
 8021322:	46bd      	mov	sp, r7
 8021324:	bd80      	pop	{r7, pc}
 8021326:	bf00      	nop
 8021328:	08027020 	.word	0x08027020
 802132c:	08027118 	.word	0x08027118
 8021330:	08027114 	.word	0x08027114

08021334 <glue_reply_events>:
void glue_reply_events(struct mg_connection *c, struct mg_http_message *hm) {
 8021334:	b580      	push	{r7, lr}
 8021336:	b086      	sub	sp, #24
 8021338:	af02      	add	r7, sp, #8
 802133a:	6078      	str	r0, [r7, #4]
 802133c:	6039      	str	r1, [r7, #0]
  const char *headers = "Cache-Control: no-cache\r\n" "Content-Type: application/json\r\n";
 802133e:	4b08      	ldr	r3, [pc, #32]	@ (8021360 <glue_reply_events+0x2c>)
 8021340:	60fb      	str	r3, [r7, #12]
  const char *value = "[{\"priority\":1,\"timestamp\":1738653279,\"active\":false,\"message\":\"event 1\"},{\"priority\":2,\"timestamp\":1738653390,\"active\":true,\"message\":\"event 2\"}]";
 8021342:	4b08      	ldr	r3, [pc, #32]	@ (8021364 <glue_reply_events+0x30>)
 8021344:	60bb      	str	r3, [r7, #8]
  (void) hm;
  mg_http_reply(c, 200, headers, "%s\n", value);
 8021346:	68bb      	ldr	r3, [r7, #8]
 8021348:	9300      	str	r3, [sp, #0]
 802134a:	4b07      	ldr	r3, [pc, #28]	@ (8021368 <glue_reply_events+0x34>)
 802134c:	68fa      	ldr	r2, [r7, #12]
 802134e:	21c8      	movs	r1, #200	@ 0xc8
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f7e8 fadf 	bl	8009914 <mg_http_reply>
}
 8021356:	bf00      	nop
 8021358:	3710      	adds	r7, #16
 802135a:	46bd      	mov	sp, r7
 802135c:	bd80      	pop	{r7, pc}
 802135e:	bf00      	nop
 8021360:	08027020 	.word	0x08027020
 8021364:	08027148 	.word	0x08027148
 8021368:	08027114 	.word	0x08027114

0802136c <get_api_handler>:
  (struct apihandler *) &s_apihandler_security,
  (struct apihandler *) &s_apihandler_loglevels,
  (struct apihandler *) &s_apihandler_events
};

static struct apihandler *get_api_handler(struct mg_str name) {
 802136c:	b580      	push	{r7, lr}
 802136e:	b086      	sub	sp, #24
 8021370:	af00      	add	r7, sp, #0
 8021372:	463b      	mov	r3, r7
 8021374:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t num_handlers = sizeof(s_apihandlers) / sizeof(s_apihandlers[0]);
 8021378:	230c      	movs	r3, #12
 802137a:	613b      	str	r3, [r7, #16]
  size_t i;
  if (name.len == 0) return NULL;
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	2b00      	cmp	r3, #0
 8021380:	d101      	bne.n	8021386 <get_api_handler+0x1a>
 8021382:	2300      	movs	r3, #0
 8021384:	e039      	b.n	80213fa <get_api_handler+0x8e>
  if (num_handlers == 0) return NULL;
 8021386:	693b      	ldr	r3, [r7, #16]
 8021388:	2b00      	cmp	r3, #0
 802138a:	d101      	bne.n	8021390 <get_api_handler+0x24>
 802138c:	2300      	movs	r3, #0
 802138e:	e034      	b.n	80213fa <get_api_handler+0x8e>
  for (i = 0; i < num_handlers; i++) {
 8021390:	2300      	movs	r3, #0
 8021392:	617b      	str	r3, [r7, #20]
 8021394:	e02c      	b.n	80213f0 <get_api_handler+0x84>
    struct apihandler *h = s_apihandlers[i];
 8021396:	4a1b      	ldr	r2, [pc, #108]	@ (8021404 <get_api_handler+0x98>)
 8021398:	697b      	ldr	r3, [r7, #20]
 802139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802139e:	60fb      	str	r3, [r7, #12]
    size_t n = strlen(h->name);
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	681b      	ldr	r3, [r3, #0]
 80213a4:	4618      	mov	r0, r3
 80213a6:	f7df f813 	bl	80003d0 <strlen>
 80213aa:	60b8      	str	r0, [r7, #8]
    if (n > name.len) continue;
 80213ac:	687b      	ldr	r3, [r7, #4]
 80213ae:	68ba      	ldr	r2, [r7, #8]
 80213b0:	429a      	cmp	r2, r3
 80213b2:	d815      	bhi.n	80213e0 <get_api_handler+0x74>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 80213b4:	6838      	ldr	r0, [r7, #0]
 80213b6:	68fb      	ldr	r3, [r7, #12]
 80213b8:	681b      	ldr	r3, [r3, #0]
 80213ba:	68ba      	ldr	r2, [r7, #8]
 80213bc:	4619      	mov	r1, r3
 80213be:	f002 fa03 	bl	80237c8 <strncmp>
 80213c2:	4603      	mov	r3, r0
 80213c4:	2b00      	cmp	r3, #0
 80213c6:	d10d      	bne.n	80213e4 <get_api_handler+0x78>
    if (name.len > n && name.buf[n] != '/') continue;
 80213c8:	687b      	ldr	r3, [r7, #4]
 80213ca:	68ba      	ldr	r2, [r7, #8]
 80213cc:	429a      	cmp	r2, r3
 80213ce:	d205      	bcs.n	80213dc <get_api_handler+0x70>
 80213d0:	683a      	ldr	r2, [r7, #0]
 80213d2:	68bb      	ldr	r3, [r7, #8]
 80213d4:	4413      	add	r3, r2
 80213d6:	781b      	ldrb	r3, [r3, #0]
 80213d8:	2b2f      	cmp	r3, #47	@ 0x2f
 80213da:	d105      	bne.n	80213e8 <get_api_handler+0x7c>
    return h;
 80213dc:	68fb      	ldr	r3, [r7, #12]
 80213de:	e00c      	b.n	80213fa <get_api_handler+0x8e>
    if (n > name.len) continue;
 80213e0:	bf00      	nop
 80213e2:	e002      	b.n	80213ea <get_api_handler+0x7e>
    if (strncmp(name.buf, h->name, n) != 0) continue;
 80213e4:	bf00      	nop
 80213e6:	e000      	b.n	80213ea <get_api_handler+0x7e>
    if (name.len > n && name.buf[n] != '/') continue;
 80213e8:	bf00      	nop
  for (i = 0; i < num_handlers; i++) {
 80213ea:	697b      	ldr	r3, [r7, #20]
 80213ec:	3301      	adds	r3, #1
 80213ee:	617b      	str	r3, [r7, #20]
 80213f0:	697a      	ldr	r2, [r7, #20]
 80213f2:	693b      	ldr	r3, [r7, #16]
 80213f4:	429a      	cmp	r2, r3
 80213f6:	d3ce      	bcc.n	8021396 <get_api_handler+0x2a>
  }
  return NULL;
 80213f8:	2300      	movs	r3, #0
}
 80213fa:	4618      	mov	r0, r3
 80213fc:	3718      	adds	r7, #24
 80213fe:	46bd      	mov	sp, r7
 8021400:	bd80      	pop	{r7, pc}
 8021402:	bf00      	nop
 8021404:	240007ec 	.word	0x240007ec

08021408 <find_handler>:

static struct apihandler *find_handler(struct mg_http_message *hm) {
 8021408:	b580      	push	{r7, lr}
 802140a:	b084      	sub	sp, #16
 802140c:	af00      	add	r7, sp, #0
 802140e:	6078      	str	r0, [r7, #4]
  if (hm->uri.len < 6 || strncmp(hm->uri.buf, "/api/", 5) != 0) return NULL;
 8021410:	687b      	ldr	r3, [r7, #4]
 8021412:	68db      	ldr	r3, [r3, #12]
 8021414:	2b05      	cmp	r3, #5
 8021416:	d909      	bls.n	802142c <find_handler+0x24>
 8021418:	687b      	ldr	r3, [r7, #4]
 802141a:	689b      	ldr	r3, [r3, #8]
 802141c:	2205      	movs	r2, #5
 802141e:	490f      	ldr	r1, [pc, #60]	@ (802145c <find_handler+0x54>)
 8021420:	4618      	mov	r0, r3
 8021422:	f002 f9d1 	bl	80237c8 <strncmp>
 8021426:	4603      	mov	r3, r0
 8021428:	2b00      	cmp	r3, #0
 802142a:	d001      	beq.n	8021430 <find_handler+0x28>
 802142c:	2300      	movs	r3, #0
 802142e:	e011      	b.n	8021454 <find_handler+0x4c>
  return get_api_handler(mg_str_n(hm->uri.buf + 5, hm->uri.len - 5));
 8021430:	687b      	ldr	r3, [r7, #4]
 8021432:	689b      	ldr	r3, [r3, #8]
 8021434:	1d59      	adds	r1, r3, #5
 8021436:	687b      	ldr	r3, [r7, #4]
 8021438:	68db      	ldr	r3, [r3, #12]
 802143a:	1f5a      	subs	r2, r3, #5
 802143c:	f107 0308 	add.w	r3, r7, #8
 8021440:	4618      	mov	r0, r3
 8021442:	f7f2 fe60 	bl	8014106 <mg_str_n>
 8021446:	f107 0308 	add.w	r3, r7, #8
 802144a:	e893 0003 	ldmia.w	r3, {r0, r1}
 802144e:	f7ff ff8d 	bl	802136c <get_api_handler>
 8021452:	4603      	mov	r3, r0
}
 8021454:	4618      	mov	r0, r3
 8021456:	3710      	adds	r7, #16
 8021458:	46bd      	mov	sp, r7
 802145a:	bd80      	pop	{r7, pc}
 802145c:	08027390 	.word	0x08027390

08021460 <mg_json_get_str2>:

void mg_json_get_str2(struct mg_str json, const char *path, char *buf,
                      size_t len) {
 8021460:	b590      	push	{r4, r7, lr}
 8021462:	b089      	sub	sp, #36	@ 0x24
 8021464:	af00      	add	r7, sp, #0
 8021466:	f107 0408 	add.w	r4, r7, #8
 802146a:	e884 0003 	stmia.w	r4, {r0, r1}
 802146e:	607a      	str	r2, [r7, #4]
 8021470:	603b      	str	r3, [r7, #0]
  struct mg_str s = mg_json_get_tok(json, path);
 8021472:	f107 0010 	add.w	r0, r7, #16
 8021476:	687b      	ldr	r3, [r7, #4]
 8021478:	f107 0208 	add.w	r2, r7, #8
 802147c:	ca06      	ldmia	r2, {r1, r2}
 802147e:	f7ea fe75 	bl	800c16c <mg_json_get_tok>
  if (s.len > 1 && s.buf[0] == '"') {
 8021482:	697b      	ldr	r3, [r7, #20]
 8021484:	2b01      	cmp	r3, #1
 8021486:	d913      	bls.n	80214b0 <mg_json_get_str2+0x50>
 8021488:	693b      	ldr	r3, [r7, #16]
 802148a:	781b      	ldrb	r3, [r3, #0]
 802148c:	2b22      	cmp	r3, #34	@ 0x22
 802148e:	d10f      	bne.n	80214b0 <mg_json_get_str2+0x50>
    mg_json_unescape(mg_str_n(s.buf + 1, s.len - 2), buf, len);
 8021490:	693b      	ldr	r3, [r7, #16]
 8021492:	1c59      	adds	r1, r3, #1
 8021494:	697b      	ldr	r3, [r7, #20]
 8021496:	1e9a      	subs	r2, r3, #2
 8021498:	f107 0318 	add.w	r3, r7, #24
 802149c:	4618      	mov	r0, r3
 802149e:	f7f2 fe32 	bl	8014106 <mg_str_n>
 80214a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80214a4:	683a      	ldr	r2, [r7, #0]
 80214a6:	f107 0118 	add.w	r1, r7, #24
 80214aa:	c903      	ldmia	r1, {r0, r1}
 80214ac:	f7ea ff04 	bl	800c2b8 <mg_json_unescape>
  }
}
 80214b0:	bf00      	nop
 80214b2:	3724      	adds	r7, #36	@ 0x24
 80214b4:	46bd      	mov	sp, r7
 80214b6:	bd90      	pop	{r4, r7, pc}

080214b8 <mongoose_set_http_handlers>:

void mongoose_set_http_handlers(const char *name, ...) {
 80214b8:	b40f      	push	{r0, r1, r2, r3}
 80214ba:	b580      	push	{r7, lr}
 80214bc:	b084      	sub	sp, #16
 80214be:	af00      	add	r7, sp, #0
  struct apihandler *h = get_api_handler(mg_str(name));
 80214c0:	1d3b      	adds	r3, r7, #4
 80214c2:	69b9      	ldr	r1, [r7, #24]
 80214c4:	4618      	mov	r0, r3
 80214c6:	f7f2 fe01 	bl	80140cc <mg_str_s>
 80214ca:	1d3b      	adds	r3, r7, #4
 80214cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80214d0:	f7ff ff4c 	bl	802136c <get_api_handler>
 80214d4:	60f8      	str	r0, [r7, #12]
  va_list ap;
  va_start(ap, name);
 80214d6:	f107 031c 	add.w	r3, r7, #28
 80214da:	603b      	str	r3, [r7, #0]
  if (h == NULL) {
 80214dc:	68fb      	ldr	r3, [r7, #12]
 80214de:	2b00      	cmp	r3, #0
 80214e0:	d10f      	bne.n	8021502 <mongoose_set_http_handlers+0x4a>
    MG_ERROR(("No API with name [%s]", name));
 80214e2:	4b4e      	ldr	r3, [pc, #312]	@ (802161c <mongoose_set_http_handlers+0x164>)
 80214e4:	681b      	ldr	r3, [r3, #0]
 80214e6:	2b00      	cmp	r3, #0
 80214e8:	f340 8090 	ble.w	802160c <mongoose_set_http_handlers+0x154>
 80214ec:	4b4c      	ldr	r3, [pc, #304]	@ (8021620 <mongoose_set_http_handlers+0x168>)
 80214ee:	22e6      	movs	r2, #230	@ 0xe6
 80214f0:	494c      	ldr	r1, [pc, #304]	@ (8021624 <mongoose_set_http_handlers+0x16c>)
 80214f2:	2001      	movs	r0, #1
 80214f4:	f7ea ff9e 	bl	800c434 <mg_log_prefix>
 80214f8:	69b9      	ldr	r1, [r7, #24]
 80214fa:	484b      	ldr	r0, [pc, #300]	@ (8021628 <mongoose_set_http_handlers+0x170>)
 80214fc:	f7ea ffea 	bl	800c4d4 <mg_log>
        va_arg(ap, mongoose_custom_reply_t);
  } else {
    MG_ERROR(("Setting [%s] failed: not implemented", name));
  }
  va_end(ap);
}
 8021500:	e084      	b.n	802160c <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "data") == 0) {
 8021502:	68fb      	ldr	r3, [r7, #12]
 8021504:	685b      	ldr	r3, [r3, #4]
 8021506:	4949      	ldr	r1, [pc, #292]	@ (802162c <mongoose_set_http_handlers+0x174>)
 8021508:	4618      	mov	r0, r3
 802150a:	f7de ff01 	bl	8000310 <strcmp>
 802150e:	4603      	mov	r3, r0
 8021510:	2b00      	cmp	r3, #0
 8021512:	d10c      	bne.n	802152e <mongoose_set_http_handlers+0x76>
    ((struct apihandler_data *) h)->getter = va_arg(ap, mongoose_data_func_t);
 8021514:	683b      	ldr	r3, [r7, #0]
 8021516:	1d1a      	adds	r2, r3, #4
 8021518:	603a      	str	r2, [r7, #0]
 802151a:	681a      	ldr	r2, [r3, #0]
 802151c:	68fb      	ldr	r3, [r7, #12]
 802151e:	621a      	str	r2, [r3, #32]
    ((struct apihandler_data *) h)->setter = va_arg(ap, mongoose_data_func_t);
 8021520:	683b      	ldr	r3, [r7, #0]
 8021522:	1d1a      	adds	r2, r3, #4
 8021524:	603a      	str	r2, [r7, #0]
 8021526:	681a      	ldr	r2, [r3, #0]
 8021528:	68fb      	ldr	r3, [r7, #12]
 802152a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 802152c:	e06e      	b.n	802160c <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "action") == 0) {
 802152e:	68fb      	ldr	r3, [r7, #12]
 8021530:	685b      	ldr	r3, [r3, #4]
 8021532:	493f      	ldr	r1, [pc, #252]	@ (8021630 <mongoose_set_http_handlers+0x178>)
 8021534:	4618      	mov	r0, r3
 8021536:	f7de feeb 	bl	8000310 <strcmp>
 802153a:	4603      	mov	r3, r0
 802153c:	2b00      	cmp	r3, #0
 802153e:	d10c      	bne.n	802155a <mongoose_set_http_handlers+0xa2>
        va_arg(ap, mongoose_action_checker_t);
 8021540:	683b      	ldr	r3, [r7, #0]
 8021542:	1d1a      	adds	r2, r3, #4
 8021544:	603a      	str	r2, [r7, #0]
 8021546:	681a      	ldr	r2, [r3, #0]
    ((struct apihandler_action *) h)->checker =
 8021548:	68fb      	ldr	r3, [r7, #12]
 802154a:	619a      	str	r2, [r3, #24]
        va_arg(ap, mongoose_action_starter_t);
 802154c:	683b      	ldr	r3, [r7, #0]
 802154e:	1d1a      	adds	r2, r3, #4
 8021550:	603a      	str	r2, [r7, #0]
 8021552:	681a      	ldr	r2, [r3, #0]
    ((struct apihandler_action *) h)->starter =
 8021554:	68fb      	ldr	r3, [r7, #12]
 8021556:	61da      	str	r2, [r3, #28]
}
 8021558:	e058      	b.n	802160c <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "file") == 0) {
 802155a:	68fb      	ldr	r3, [r7, #12]
 802155c:	685b      	ldr	r3, [r3, #4]
 802155e:	4935      	ldr	r1, [pc, #212]	@ (8021634 <mongoose_set_http_handlers+0x17c>)
 8021560:	4618      	mov	r0, r3
 8021562:	f7de fed5 	bl	8000310 <strcmp>
 8021566:	4603      	mov	r3, r0
 8021568:	2b00      	cmp	r3, #0
 802156a:	d10c      	bne.n	8021586 <mongoose_set_http_handlers+0xce>
    ((struct apihandler_file *) h)->opener = va_arg(ap, mongoose_file_opener_t);
 802156c:	683b      	ldr	r3, [r7, #0]
 802156e:	1d1a      	adds	r2, r3, #4
 8021570:	603a      	str	r2, [r7, #0]
 8021572:	681a      	ldr	r2, [r3, #0]
 8021574:	68fb      	ldr	r3, [r7, #12]
 8021576:	619a      	str	r2, [r3, #24]
    ((struct apihandler_file *) h)->server = va_arg(ap, mongoose_file_server_t);
 8021578:	683b      	ldr	r3, [r7, #0]
 802157a:	1d1a      	adds	r2, r3, #4
 802157c:	603a      	str	r2, [r7, #0]
 802157e:	681a      	ldr	r2, [r3, #0]
 8021580:	68fb      	ldr	r3, [r7, #12]
 8021582:	61da      	str	r2, [r3, #28]
}
 8021584:	e042      	b.n	802160c <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "ota") == 0 || strcmp(h->type, "upload") == 0) {
 8021586:	68fb      	ldr	r3, [r7, #12]
 8021588:	685b      	ldr	r3, [r3, #4]
 802158a:	492b      	ldr	r1, [pc, #172]	@ (8021638 <mongoose_set_http_handlers+0x180>)
 802158c:	4618      	mov	r0, r3
 802158e:	f7de febf 	bl	8000310 <strcmp>
 8021592:	4603      	mov	r3, r0
 8021594:	2b00      	cmp	r3, #0
 8021596:	d008      	beq.n	80215aa <mongoose_set_http_handlers+0xf2>
 8021598:	68fb      	ldr	r3, [r7, #12]
 802159a:	685b      	ldr	r3, [r3, #4]
 802159c:	4927      	ldr	r1, [pc, #156]	@ (802163c <mongoose_set_http_handlers+0x184>)
 802159e:	4618      	mov	r0, r3
 80215a0:	f7de feb6 	bl	8000310 <strcmp>
 80215a4:	4603      	mov	r3, r0
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	d112      	bne.n	80215d0 <mongoose_set_http_handlers+0x118>
    ((struct apihandler_ota *) h)->opener = va_arg(ap, mongoose_ota_opener_t);
 80215aa:	683b      	ldr	r3, [r7, #0]
 80215ac:	1d1a      	adds	r2, r3, #4
 80215ae:	603a      	str	r2, [r7, #0]
 80215b0:	681a      	ldr	r2, [r3, #0]
 80215b2:	68fb      	ldr	r3, [r7, #12]
 80215b4:	619a      	str	r2, [r3, #24]
    ((struct apihandler_ota *) h)->closer = va_arg(ap, mongoose_ota_closer_t);
 80215b6:	683b      	ldr	r3, [r7, #0]
 80215b8:	1d1a      	adds	r2, r3, #4
 80215ba:	603a      	str	r2, [r7, #0]
 80215bc:	681a      	ldr	r2, [r3, #0]
 80215be:	68fb      	ldr	r3, [r7, #12]
 80215c0:	61da      	str	r2, [r3, #28]
    ((struct apihandler_ota *) h)->writer = va_arg(ap, mongoose_ota_writer_t);
 80215c2:	683b      	ldr	r3, [r7, #0]
 80215c4:	1d1a      	adds	r2, r3, #4
 80215c6:	603a      	str	r2, [r7, #0]
 80215c8:	681a      	ldr	r2, [r3, #0]
 80215ca:	68fb      	ldr	r3, [r7, #12]
 80215cc:	621a      	str	r2, [r3, #32]
}
 80215ce:	e01d      	b.n	802160c <mongoose_set_http_handlers+0x154>
  } else if (strcmp(h->type, "custom") == 0) {
 80215d0:	68fb      	ldr	r3, [r7, #12]
 80215d2:	685b      	ldr	r3, [r3, #4]
 80215d4:	491a      	ldr	r1, [pc, #104]	@ (8021640 <mongoose_set_http_handlers+0x188>)
 80215d6:	4618      	mov	r0, r3
 80215d8:	f7de fe9a 	bl	8000310 <strcmp>
 80215dc:	4603      	mov	r3, r0
 80215de:	2b00      	cmp	r3, #0
 80215e0:	d106      	bne.n	80215f0 <mongoose_set_http_handlers+0x138>
        va_arg(ap, mongoose_custom_reply_t);
 80215e2:	683b      	ldr	r3, [r7, #0]
 80215e4:	1d1a      	adds	r2, r3, #4
 80215e6:	603a      	str	r2, [r7, #0]
 80215e8:	681a      	ldr	r2, [r3, #0]
    ((struct apihandler_custom *) h)->reply =
 80215ea:	68fb      	ldr	r3, [r7, #12]
 80215ec:	619a      	str	r2, [r3, #24]
}
 80215ee:	e00d      	b.n	802160c <mongoose_set_http_handlers+0x154>
    MG_ERROR(("Setting [%s] failed: not implemented", name));
 80215f0:	4b0a      	ldr	r3, [pc, #40]	@ (802161c <mongoose_set_http_handlers+0x164>)
 80215f2:	681b      	ldr	r3, [r3, #0]
 80215f4:	2b00      	cmp	r3, #0
 80215f6:	dd09      	ble.n	802160c <mongoose_set_http_handlers+0x154>
 80215f8:	4b09      	ldr	r3, [pc, #36]	@ (8021620 <mongoose_set_http_handlers+0x168>)
 80215fa:	22fa      	movs	r2, #250	@ 0xfa
 80215fc:	4909      	ldr	r1, [pc, #36]	@ (8021624 <mongoose_set_http_handlers+0x16c>)
 80215fe:	2001      	movs	r0, #1
 8021600:	f7ea ff18 	bl	800c434 <mg_log_prefix>
 8021604:	69b9      	ldr	r1, [r7, #24]
 8021606:	480f      	ldr	r0, [pc, #60]	@ (8021644 <mongoose_set_http_handlers+0x18c>)
 8021608:	f7ea ff64 	bl	800c4d4 <mg_log>
}
 802160c:	bf00      	nop
 802160e:	3710      	adds	r7, #16
 8021610:	46bd      	mov	sp, r7
 8021612:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021616:	b004      	add	sp, #16
 8021618:	4770      	bx	lr
 802161a:	bf00      	nop
 802161c:	24000258 	.word	0x24000258
 8021620:	080355f0 	.word	0x080355f0
 8021624:	08027398 	.word	0x08027398
 8021628:	080273b4 	.word	0x080273b4
 802162c:	08027340 	.word	0x08027340
 8021630:	080272e8 	.word	0x080272e8
 8021634:	080273cc 	.word	0x080273cc
 8021638:	0802730c 	.word	0x0802730c
 802163c:	0802731c 	.word	0x0802731c
 8021640:	08027330 	.word	0x08027330
 8021644:	080273d4 	.word	0x080273d4

08021648 <authenticate>:
void mongoose_set_auth_handler(int (*fn)(const char *, const char *)) {
  s_auth = fn;
}

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 8021648:	b580      	push	{r7, lr}
 802164a:	b0ba      	sub	sp, #232	@ 0xe8
 802164c:	af02      	add	r7, sp, #8
 802164e:	6078      	str	r0, [r7, #4]
  char user[100], pass[100];
  struct user *u, *result = NULL;
 8021650:	2300      	movs	r3, #0
 8021652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 8021656:	f107 030c 	add.w	r3, r7, #12
 802165a:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 802165e:	2264      	movs	r2, #100	@ 0x64
 8021660:	9200      	str	r2, [sp, #0]
 8021662:	2264      	movs	r2, #100	@ 0x64
 8021664:	6878      	ldr	r0, [r7, #4]
 8021666:	f7e9 f8cb 	bl	800a800 <mg_http_creds>

  if (user[0] != '\0' && pass[0] != '\0') {
 802166a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 802166e:	2b00      	cmp	r3, #0
 8021670:	d06f      	beq.n	8021752 <authenticate+0x10a>
 8021672:	7b3b      	ldrb	r3, [r7, #12]
 8021674:	2b00      	cmp	r3, #0
 8021676:	d06c      	beq.n	8021752 <authenticate+0x10a>
    // Both user and password is set, auth by user/password via glue API
    int level = s_auth(user, pass);
 8021678:	4b5b      	ldr	r3, [pc, #364]	@ (80217e8 <authenticate+0x1a0>)
 802167a:	681b      	ldr	r3, [r3, #0]
 802167c:	f107 010c 	add.w	r1, r7, #12
 8021680:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8021684:	4610      	mov	r0, r2
 8021686:	4798      	blx	r3
 8021688:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    MG_DEBUG(("user %s, level: %d", user, level));
 802168c:	4b57      	ldr	r3, [pc, #348]	@ (80217ec <authenticate+0x1a4>)
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	2b02      	cmp	r3, #2
 8021692:	dd0e      	ble.n	80216b2 <authenticate+0x6a>
 8021694:	4b56      	ldr	r3, [pc, #344]	@ (80217f0 <authenticate+0x1a8>)
 8021696:	f44f 728c 	mov.w	r2, #280	@ 0x118
 802169a:	4956      	ldr	r1, [pc, #344]	@ (80217f4 <authenticate+0x1ac>)
 802169c:	2003      	movs	r0, #3
 802169e:	f7ea fec9 	bl	800c434 <mg_log_prefix>
 80216a2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80216a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80216aa:	4619      	mov	r1, r3
 80216ac:	4852      	ldr	r0, [pc, #328]	@ (80217f8 <authenticate+0x1b0>)
 80216ae:	f7ea ff11 	bl	800c4d4 <mg_log>
    if (level > 0) {  // Proceed only if the firmware authenticated us
 80216b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80216b6:	2b00      	cmp	r3, #0
 80216b8:	dd75      	ble.n	80217a6 <authenticate+0x15e>
      // uint64_t uid = hash(3, mg_str(user), mg_str(":"), mg_str(pass));
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 80216ba:	4b50      	ldr	r3, [pc, #320]	@ (80217fc <authenticate+0x1b4>)
 80216bc:	681b      	ldr	r3, [r3, #0]
 80216be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80216c2:	e014      	b.n	80216ee <authenticate+0xa6>
        if (strcmp(user, u->name) == 0) result = u;
 80216c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80216c8:	1d1a      	adds	r2, r3, #4
 80216ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80216ce:	4611      	mov	r1, r2
 80216d0:	4618      	mov	r0, r3
 80216d2:	f7de fe1d 	bl	8000310 <strcmp>
 80216d6:	4603      	mov	r3, r0
 80216d8:	2b00      	cmp	r3, #0
 80216da:	d103      	bne.n	80216e4 <authenticate+0x9c>
 80216dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80216e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      for (u = s_users; u != NULL && result == NULL; u = u->next) {
 80216e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80216e8:	681b      	ldr	r3, [r3, #0]
 80216ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80216ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80216f2:	2b00      	cmp	r3, #0
 80216f4:	d003      	beq.n	80216fe <authenticate+0xb6>
 80216f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	d0e2      	beq.n	80216c4 <authenticate+0x7c>
      }
      // Not yet authenticated, add to the list
      if (result == NULL) {
 80216fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021702:	2b00      	cmp	r3, #0
 8021704:	d14f      	bne.n	80217a6 <authenticate+0x15e>
        result = (struct user *) calloc(1, sizeof(*result));
 8021706:	2140      	movs	r1, #64	@ 0x40
 8021708:	2001      	movs	r0, #1
 802170a:	f001 fd73 	bl	80231f4 <calloc>
 802170e:	4603      	mov	r3, r0
 8021710:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
        mg_snprintf(result->name, sizeof(result->name), "%s", user);
 8021714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021718:	1d18      	adds	r0, r3, #4
 802171a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 802171e:	4a38      	ldr	r2, [pc, #224]	@ (8021800 <authenticate+0x1b8>)
 8021720:	2120      	movs	r1, #32
 8021722:	f7ef f90d 	bl	8010940 <mg_snprintf>
        mg_random_str(result->token, sizeof(result->token) - 1);
 8021726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802172a:	3324      	adds	r3, #36	@ 0x24
 802172c:	2114      	movs	r1, #20
 802172e:	4618      	mov	r0, r3
 8021730:	f7fd fea0 	bl	801f474 <mg_random_str>
        result->level = level, result->next = s_users, s_users = result;
 8021734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021738:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 802173c:	63da      	str	r2, [r3, #60]	@ 0x3c
 802173e:	4b2f      	ldr	r3, [pc, #188]	@ (80217fc <authenticate+0x1b4>)
 8021740:	681a      	ldr	r2, [r3, #0]
 8021742:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8021746:	601a      	str	r2, [r3, #0]
 8021748:	4a2c      	ldr	r2, [pc, #176]	@ (80217fc <authenticate+0x1b4>)
 802174a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 802174e:	6013      	str	r3, [r2, #0]
  if (user[0] != '\0' && pass[0] != '\0') {
 8021750:	e029      	b.n	80217a6 <authenticate+0x15e>
      }
    }
  } else if (user[0] == '\0' && pass[0] != '\0') {
 8021752:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8021756:	2b00      	cmp	r3, #0
 8021758:	d126      	bne.n	80217a8 <authenticate+0x160>
 802175a:	7b3b      	ldrb	r3, [r7, #12]
 802175c:	2b00      	cmp	r3, #0
 802175e:	d023      	beq.n	80217a8 <authenticate+0x160>
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 8021760:	4b26      	ldr	r3, [pc, #152]	@ (80217fc <authenticate+0x1b4>)
 8021762:	681b      	ldr	r3, [r3, #0]
 8021764:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8021768:	e014      	b.n	8021794 <authenticate+0x14c>
      if (strcmp(u->token, pass) == 0) result = u;
 802176a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802176e:	3324      	adds	r3, #36	@ 0x24
 8021770:	f107 020c 	add.w	r2, r7, #12
 8021774:	4611      	mov	r1, r2
 8021776:	4618      	mov	r0, r3
 8021778:	f7de fdca 	bl	8000310 <strcmp>
 802177c:	4603      	mov	r3, r0
 802177e:	2b00      	cmp	r3, #0
 8021780:	d103      	bne.n	802178a <authenticate+0x142>
 8021782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    for (u = s_users; u != NULL && result == NULL; u = u->next) {
 802178a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 802178e:	681b      	ldr	r3, [r3, #0]
 8021790:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8021794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8021798:	2b00      	cmp	r3, #0
 802179a:	d005      	beq.n	80217a8 <authenticate+0x160>
 802179c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80217a0:	2b00      	cmp	r3, #0
 80217a2:	d0e2      	beq.n	802176a <authenticate+0x122>
 80217a4:	e000      	b.n	80217a8 <authenticate+0x160>
  if (user[0] != '\0' && pass[0] != '\0') {
 80217a6:	bf00      	nop
    }
  }
  MG_VERBOSE(("[%s/%s] -> %s", user, pass, result ? "OK" : "FAIL"));
 80217a8:	4b10      	ldr	r3, [pc, #64]	@ (80217ec <authenticate+0x1a4>)
 80217aa:	681b      	ldr	r3, [r3, #0]
 80217ac:	2b03      	cmp	r3, #3
 80217ae:	dd14      	ble.n	80217da <authenticate+0x192>
 80217b0:	4b0f      	ldr	r3, [pc, #60]	@ (80217f0 <authenticate+0x1a8>)
 80217b2:	f240 122b 	movw	r2, #299	@ 0x12b
 80217b6:	490f      	ldr	r1, [pc, #60]	@ (80217f4 <authenticate+0x1ac>)
 80217b8:	2004      	movs	r0, #4
 80217ba:	f7ea fe3b 	bl	800c434 <mg_log_prefix>
 80217be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	d001      	beq.n	80217ca <authenticate+0x182>
 80217c6:	4b0f      	ldr	r3, [pc, #60]	@ (8021804 <authenticate+0x1bc>)
 80217c8:	e000      	b.n	80217cc <authenticate+0x184>
 80217ca:	4b0f      	ldr	r3, [pc, #60]	@ (8021808 <authenticate+0x1c0>)
 80217cc:	f107 020c 	add.w	r2, r7, #12
 80217d0:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 80217d4:	480d      	ldr	r0, [pc, #52]	@ (802180c <authenticate+0x1c4>)
 80217d6:	f7ea fe7d 	bl	800c4d4 <mg_log>
  return result;
 80217da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
}
 80217de:	4618      	mov	r0, r3
 80217e0:	37e0      	adds	r7, #224	@ 0xe0
 80217e2:	46bd      	mov	sp, r7
 80217e4:	bd80      	pop	{r7, pc}
 80217e6:	bf00      	nop
 80217e8:	2400081c 	.word	0x2400081c
 80217ec:	24000258 	.word	0x24000258
 80217f0:	0803560c 	.word	0x0803560c
 80217f4:	08027398 	.word	0x08027398
 80217f8:	080273fc 	.word	0x080273fc
 80217fc:	24004430 	.word	0x24004430
 8021800:	08027410 	.word	0x08027410
 8021804:	08027414 	.word	0x08027414
 8021808:	08027418 	.word	0x08027418
 802180c:	08027420 	.word	0x08027420

08021810 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 8021810:	b580      	push	{r7, lr}
 8021812:	b0cc      	sub	sp, #304	@ 0x130
 8021814:	af0a      	add	r7, sp, #40	@ 0x28
 8021816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802181a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 802181e:	6018      	str	r0, [r3, #0]
 8021820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8021824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8021828:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->token, c->is_tls ? "Secure; " : "", 3600 * 24);
 802182a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802182e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8021832:	681b      	ldr	r3, [r3, #0]
 8021834:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8021838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802183c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8021840:	681b      	ldr	r3, [r3, #0]
 8021842:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8021846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802184a:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 802184c:	2b00      	cmp	r3, #0
 802184e:	d001      	beq.n	8021854 <handle_login+0x44>
 8021850:	4b1e      	ldr	r3, [pc, #120]	@ (80218cc <handle_login+0xbc>)
 8021852:	e000      	b.n	8021856 <handle_login+0x46>
 8021854:	4b1e      	ldr	r3, [pc, #120]	@ (80218d0 <handle_login+0xc0>)
 8021856:	f107 0008 	add.w	r0, r7, #8
 802185a:	491e      	ldr	r1, [pc, #120]	@ (80218d4 <handle_login+0xc4>)
 802185c:	9101      	str	r1, [sp, #4]
 802185e:	9300      	str	r3, [sp, #0]
 8021860:	4613      	mov	r3, r2
 8021862:	4a1d      	ldr	r2, [pc, #116]	@ (80218d8 <handle_login+0xc8>)
 8021864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8021868:	f7ef f86a 	bl	8010940 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
                MG_ESC("user"), MG_ESC(u->name),    //
 802186c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8021870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8021874:	681b      	ldr	r3, [r3, #0]
 8021876:	3304      	adds	r3, #4
  mg_http_reply(c, 200, cookie, "{%m:%m,%m:%d}\n",  //
 8021878:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 802187c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8021880:	6812      	ldr	r2, [r2, #0]
 8021882:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8021884:	f107 0108 	add.w	r1, r7, #8
 8021888:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 802188c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8021890:	9209      	str	r2, [sp, #36]	@ 0x24
 8021892:	4a12      	ldr	r2, [pc, #72]	@ (80218dc <handle_login+0xcc>)
 8021894:	9208      	str	r2, [sp, #32]
 8021896:	2200      	movs	r2, #0
 8021898:	9207      	str	r2, [sp, #28]
 802189a:	4a11      	ldr	r2, [pc, #68]	@ (80218e0 <handle_login+0xd0>)
 802189c:	9206      	str	r2, [sp, #24]
 802189e:	9305      	str	r3, [sp, #20]
 80218a0:	2300      	movs	r3, #0
 80218a2:	9304      	str	r3, [sp, #16]
 80218a4:	4b0e      	ldr	r3, [pc, #56]	@ (80218e0 <handle_login+0xd0>)
 80218a6:	9303      	str	r3, [sp, #12]
 80218a8:	4b0e      	ldr	r3, [pc, #56]	@ (80218e4 <handle_login+0xd4>)
 80218aa:	9302      	str	r3, [sp, #8]
 80218ac:	2300      	movs	r3, #0
 80218ae:	9301      	str	r3, [sp, #4]
 80218b0:	4b0b      	ldr	r3, [pc, #44]	@ (80218e0 <handle_login+0xd0>)
 80218b2:	9300      	str	r3, [sp, #0]
 80218b4:	4b0c      	ldr	r3, [pc, #48]	@ (80218e8 <handle_login+0xd8>)
 80218b6:	460a      	mov	r2, r1
 80218b8:	21c8      	movs	r1, #200	@ 0xc8
 80218ba:	6800      	ldr	r0, [r0, #0]
 80218bc:	f7e8 f82a 	bl	8009914 <mg_http_reply>
                MG_ESC("level"), u->level);
}
 80218c0:	bf00      	nop
 80218c2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80218c6:	46bd      	mov	sp, r7
 80218c8:	bd80      	pop	{r7, pc}
 80218ca:	bf00      	nop
 80218cc:	08027430 	.word	0x08027430
 80218d0:	0802743c 	.word	0x0802743c
 80218d4:	00015180 	.word	0x00015180
 80218d8:	08027440 	.word	0x08027440
 80218dc:	08027230 	.word	0x08027230
 80218e0:	08010dcd 	.word	0x08010dcd
 80218e4:	0802749c 	.word	0x0802749c
 80218e8:	0802748c 	.word	0x0802748c

080218ec <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 80218ec:	b580      	push	{r7, lr}
 80218ee:	b0c2      	sub	sp, #264	@ 0x108
 80218f0:	af00      	add	r7, sp, #0
 80218f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80218f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80218fa:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 80218fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8021900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8021904:	681b      	ldr	r3, [r3, #0]
 8021906:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 802190a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 802190e:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 8021910:	2b00      	cmp	r3, #0
 8021912:	d001      	beq.n	8021918 <handle_logout+0x2c>
 8021914:	4b0d      	ldr	r3, [pc, #52]	@ (802194c <handle_logout+0x60>)
 8021916:	e000      	b.n	802191a <handle_logout+0x2e>
 8021918:	4b0d      	ldr	r3, [pc, #52]	@ (8021950 <handle_logout+0x64>)
 802191a:	f107 0008 	add.w	r0, r7, #8
 802191e:	4a0d      	ldr	r2, [pc, #52]	@ (8021954 <handle_logout+0x68>)
 8021920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8021924:	f7ef f80c 	bl	8010940 <mg_snprintf>
  mg_http_reply(c, 401, cookie, "Unauthorized\n");
 8021928:	f107 0208 	add.w	r2, r7, #8
 802192c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8021930:	f5a3 7082 	sub.w	r0, r3, #260	@ 0x104
 8021934:	4b08      	ldr	r3, [pc, #32]	@ (8021958 <handle_logout+0x6c>)
 8021936:	f240 1191 	movw	r1, #401	@ 0x191
 802193a:	6800      	ldr	r0, [r0, #0]
 802193c:	f7e7 ffea 	bl	8009914 <mg_http_reply>
}
 8021940:	bf00      	nop
 8021942:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8021946:	46bd      	mov	sp, r7
 8021948:	bd80      	pop	{r7, pc}
 802194a:	bf00      	nop
 802194c:	08027430 	.word	0x08027430
 8021950:	0802743c 	.word	0x0802743c
 8021954:	080274a4 	.word	0x080274a4
 8021958:	08027508 	.word	0x08027508

0802195c <close_uploaded_file>:
struct action_state {
  char marker;       // Tells that we're an action connection
  bool (*fn)(void);  // Action status function
};

static void close_uploaded_file(struct upload_state *us) {
 802195c:	b580      	push	{r7, lr}
 802195e:	b082      	sub	sp, #8
 8021960:	af00      	add	r7, sp, #0
 8021962:	6078      	str	r0, [r7, #4]
  us->marker = 0;
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	2200      	movs	r2, #0
 8021968:	701a      	strb	r2, [r3, #0]
  if (us->fn_close != NULL && us->fp != NULL) {
 802196a:	687b      	ldr	r3, [r7, #4]
 802196c:	691b      	ldr	r3, [r3, #16]
 802196e:	2b00      	cmp	r3, #0
 8021970:	d00c      	beq.n	802198c <close_uploaded_file+0x30>
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	68db      	ldr	r3, [r3, #12]
 8021976:	2b00      	cmp	r3, #0
 8021978:	d008      	beq.n	802198c <close_uploaded_file+0x30>
    us->fn_close(us->fp);
 802197a:	687b      	ldr	r3, [r7, #4]
 802197c:	691b      	ldr	r3, [r3, #16]
 802197e:	687a      	ldr	r2, [r7, #4]
 8021980:	68d2      	ldr	r2, [r2, #12]
 8021982:	4610      	mov	r0, r2
 8021984:	4798      	blx	r3
    us->fp = NULL;
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	2200      	movs	r2, #0
 802198a:	60da      	str	r2, [r3, #12]
  }
  memset(us, 0, sizeof(*us));
 802198c:	2218      	movs	r2, #24
 802198e:	2100      	movs	r1, #0
 8021990:	6878      	ldr	r0, [r7, #4]
 8021992:	f001 ff04 	bl	802379e <memset>
}
 8021996:	bf00      	nop
 8021998:	3708      	adds	r7, #8
 802199a:	46bd      	mov	sp, r7
 802199c:	bd80      	pop	{r7, pc}
	...

080219a0 <file_closer>:

static bool file_closer(void *p) {
 80219a0:	b580      	push	{r7, lr}
 80219a2:	b082      	sub	sp, #8
 80219a4:	af00      	add	r7, sp, #0
 80219a6:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) p);
 80219a8:	6878      	ldr	r0, [r7, #4]
 80219aa:	f7e6 fa91 	bl	8007ed0 <mg_fs_close>
  MG_INFO(("AAAAAAAAA %p", p));
 80219ae:	4b0a      	ldr	r3, [pc, #40]	@ (80219d8 <file_closer+0x38>)
 80219b0:	681b      	ldr	r3, [r3, #0]
 80219b2:	2b01      	cmp	r3, #1
 80219b4:	dd0a      	ble.n	80219cc <file_closer+0x2c>
 80219b6:	4b09      	ldr	r3, [pc, #36]	@ (80219dc <file_closer+0x3c>)
 80219b8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80219bc:	4908      	ldr	r1, [pc, #32]	@ (80219e0 <file_closer+0x40>)
 80219be:	2002      	movs	r0, #2
 80219c0:	f7ea fd38 	bl	800c434 <mg_log_prefix>
 80219c4:	6879      	ldr	r1, [r7, #4]
 80219c6:	4807      	ldr	r0, [pc, #28]	@ (80219e4 <file_closer+0x44>)
 80219c8:	f7ea fd84 	bl	800c4d4 <mg_log>
  return true;
 80219cc:	2301      	movs	r3, #1
}
 80219ce:	4618      	mov	r0, r3
 80219d0:	3708      	adds	r7, #8
 80219d2:	46bd      	mov	sp, r7
 80219d4:	bd80      	pop	{r7, pc}
 80219d6:	bf00      	nop
 80219d8:	24000258 	.word	0x24000258
 80219dc:	0803561c 	.word	0x0803561c
 80219e0:	08027398 	.word	0x08027398
 80219e4:	08027518 	.word	0x08027518

080219e8 <file_writer>:

static bool file_writer(void *p, void *buf, size_t len) {
 80219e8:	b580      	push	{r7, lr}
 80219ea:	b086      	sub	sp, #24
 80219ec:	af00      	add	r7, sp, #0
 80219ee:	60f8      	str	r0, [r7, #12]
 80219f0:	60b9      	str	r1, [r7, #8]
 80219f2:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) p;
 80219f4:	68fb      	ldr	r3, [r7, #12]
 80219f6:	617b      	str	r3, [r7, #20]
  size_t written = fd->fs->wr(fd->fd, buf, len);
 80219f8:	697b      	ldr	r3, [r7, #20]
 80219fa:	685b      	ldr	r3, [r3, #4]
 80219fc:	695b      	ldr	r3, [r3, #20]
 80219fe:	697a      	ldr	r2, [r7, #20]
 8021a00:	6810      	ldr	r0, [r2, #0]
 8021a02:	687a      	ldr	r2, [r7, #4]
 8021a04:	68b9      	ldr	r1, [r7, #8]
 8021a06:	4798      	blx	r3
 8021a08:	6138      	str	r0, [r7, #16]
  MG_INFO(("AAAAAAAAA %lu", written));
 8021a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8021a40 <file_writer+0x58>)
 8021a0c:	681b      	ldr	r3, [r3, #0]
 8021a0e:	2b01      	cmp	r3, #1
 8021a10:	dd0a      	ble.n	8021a28 <file_writer+0x40>
 8021a12:	4b0c      	ldr	r3, [pc, #48]	@ (8021a44 <file_writer+0x5c>)
 8021a14:	f240 1265 	movw	r2, #357	@ 0x165
 8021a18:	490b      	ldr	r1, [pc, #44]	@ (8021a48 <file_writer+0x60>)
 8021a1a:	2002      	movs	r0, #2
 8021a1c:	f7ea fd0a 	bl	800c434 <mg_log_prefix>
 8021a20:	6939      	ldr	r1, [r7, #16]
 8021a22:	480a      	ldr	r0, [pc, #40]	@ (8021a4c <file_writer+0x64>)
 8021a24:	f7ea fd56 	bl	800c4d4 <mg_log>
  return written == len;
 8021a28:	693a      	ldr	r2, [r7, #16]
 8021a2a:	687b      	ldr	r3, [r7, #4]
 8021a2c:	429a      	cmp	r2, r3
 8021a2e:	bf0c      	ite	eq
 8021a30:	2301      	moveq	r3, #1
 8021a32:	2300      	movne	r3, #0
 8021a34:	b2db      	uxtb	r3, r3
}
 8021a36:	4618      	mov	r0, r3
 8021a38:	3718      	adds	r7, #24
 8021a3a:	46bd      	mov	sp, r7
 8021a3c:	bd80      	pop	{r7, pc}
 8021a3e:	bf00      	nop
 8021a40:	24000258 	.word	0x24000258
 8021a44:	08035628 	.word	0x08035628
 8021a48:	08027398 	.word	0x08027398
 8021a4c:	08027528 	.word	0x08027528

08021a50 <upload_handler>:

static void upload_handler(struct mg_connection *c, int ev, void *ev_data) {
 8021a50:	b590      	push	{r4, r7, lr}
 8021a52:	b08d      	sub	sp, #52	@ 0x34
 8021a54:	af04      	add	r7, sp, #16
 8021a56:	60f8      	str	r0, [r7, #12]
 8021a58:	60b9      	str	r1, [r7, #8]
 8021a5a:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8021a5c:	68fb      	ldr	r3, [r7, #12]
 8021a5e:	3388      	adds	r3, #136	@ 0x88
 8021a60:	61fb      	str	r3, [r7, #28]
        c, "FAILURE: sizeof(c->data) == %lu, need %lu. Set -DMG_DATA_SIZE=XXX",
        sizeof(c->data), sizeof(*us));
    return;
  }
  // Catch uploaded file data for both MG_EV_READ and MG_EV_HTTP_HDRS
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 8021a62:	69fb      	ldr	r3, [r7, #28]
 8021a64:	781b      	ldrb	r3, [r3, #0]
 8021a66:	2b55      	cmp	r3, #85	@ 0x55
 8021a68:	f040 80ae 	bne.w	8021bc8 <upload_handler+0x178>
 8021a6c:	68bb      	ldr	r3, [r7, #8]
 8021a6e:	2b07      	cmp	r3, #7
 8021a70:	f040 80aa 	bne.w	8021bc8 <upload_handler+0x178>
 8021a74:	69fb      	ldr	r3, [r7, #28]
 8021a76:	685b      	ldr	r3, [r3, #4]
 8021a78:	2b00      	cmp	r3, #0
 8021a7a:	f000 80a5 	beq.w	8021bc8 <upload_handler+0x178>
      c->recv.len > 0) {
 8021a7e:	68fb      	ldr	r3, [r7, #12]
 8021a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
  if (us->marker == 'U' && ev == MG_EV_READ && us->expected > 0 &&
 8021a82:	2b00      	cmp	r3, #0
 8021a84:	f000 80a0 	beq.w	8021bc8 <upload_handler+0x178>
    size_t alignment = 512;  // Maximum flash write granularity (iMXRT, Pico)
 8021a88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8021a8c:	61bb      	str	r3, [r7, #24]
    size_t aligned = (us->received + c->recv.len < us->expected)
 8021a8e:	69fb      	ldr	r3, [r7, #28]
 8021a90:	689a      	ldr	r2, [r3, #8]
 8021a92:	68fb      	ldr	r3, [r7, #12]
 8021a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021a96:	441a      	add	r2, r3
 8021a98:	69fb      	ldr	r3, [r7, #28]
 8021a9a:	685b      	ldr	r3, [r3, #4]
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
                         : c->recv.len;  // Last write can be unaligned
 8021a9c:	429a      	cmp	r2, r3
 8021a9e:	d210      	bcs.n	8021ac2 <upload_handler+0x72>
                         ? aligned = MG_ROUND_DOWN(c->recv.len, alignment)
 8021aa0:	69bb      	ldr	r3, [r7, #24]
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d102      	bne.n	8021aac <upload_handler+0x5c>
 8021aa6:	68fb      	ldr	r3, [r7, #12]
 8021aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021aaa:	e007      	b.n	8021abc <upload_handler+0x6c>
 8021aac:	68fb      	ldr	r3, [r7, #12]
 8021aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021ab0:	69bb      	ldr	r3, [r7, #24]
 8021ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8021ab6:	69ba      	ldr	r2, [r7, #24]
 8021ab8:	fb02 f303 	mul.w	r3, r2, r3
 8021abc:	617b      	str	r3, [r7, #20]
                         : c->recv.len;  // Last write can be unaligned
 8021abe:	697b      	ldr	r3, [r7, #20]
 8021ac0:	e001      	b.n	8021ac6 <upload_handler+0x76>
 8021ac2:	68fb      	ldr	r3, [r7, #12]
 8021ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    size_t aligned = (us->received + c->recv.len < us->expected)
 8021ac6:	617b      	str	r3, [r7, #20]
    bool ok = aligned > 0 ? us->fn_write(us->fp, c->recv.buf, aligned) : true;
 8021ac8:	697b      	ldr	r3, [r7, #20]
 8021aca:	2b00      	cmp	r3, #0
 8021acc:	d00a      	beq.n	8021ae4 <upload_handler+0x94>
 8021ace:	69fb      	ldr	r3, [r7, #28]
 8021ad0:	695b      	ldr	r3, [r3, #20]
 8021ad2:	69fa      	ldr	r2, [r7, #28]
 8021ad4:	68d0      	ldr	r0, [r2, #12]
 8021ad6:	68fa      	ldr	r2, [r7, #12]
 8021ad8:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8021ada:	697a      	ldr	r2, [r7, #20]
 8021adc:	4798      	blx	r3
 8021ade:	4603      	mov	r3, r0
 8021ae0:	2b00      	cmp	r3, #0
 8021ae2:	d001      	beq.n	8021ae8 <upload_handler+0x98>
 8021ae4:	2301      	movs	r3, #1
 8021ae6:	e000      	b.n	8021aea <upload_handler+0x9a>
 8021ae8:	2300      	movs	r3, #0
 8021aea:	74fb      	strb	r3, [r7, #19]
    us->received += aligned;
 8021aec:	69fb      	ldr	r3, [r7, #28]
 8021aee:	689a      	ldr	r2, [r3, #8]
 8021af0:	697b      	ldr	r3, [r7, #20]
 8021af2:	441a      	add	r2, r3
 8021af4:	69fb      	ldr	r3, [r7, #28]
 8021af6:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu chunk: %lu/%lu, %lu/%lu, ok: %d", c->id, aligned,
 8021af8:	4b3a      	ldr	r3, [pc, #232]	@ (8021be4 <upload_handler+0x194>)
 8021afa:	681b      	ldr	r3, [r3, #0]
 8021afc:	2b02      	cmp	r3, #2
 8021afe:	dd18      	ble.n	8021b32 <upload_handler+0xe2>
 8021b00:	4b39      	ldr	r3, [pc, #228]	@ (8021be8 <upload_handler+0x198>)
 8021b02:	f44f 72bd 	mov.w	r2, #378	@ 0x17a
 8021b06:	4939      	ldr	r1, [pc, #228]	@ (8021bec <upload_handler+0x19c>)
 8021b08:	2003      	movs	r0, #3
 8021b0a:	f7ea fc93 	bl	800c434 <mg_log_prefix>
 8021b0e:	68fb      	ldr	r3, [r7, #12]
 8021b10:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8021b12:	68fb      	ldr	r3, [r7, #12]
 8021b14:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8021b16:	69fb      	ldr	r3, [r7, #28]
 8021b18:	689b      	ldr	r3, [r3, #8]
 8021b1a:	69fa      	ldr	r2, [r7, #28]
 8021b1c:	6852      	ldr	r2, [r2, #4]
 8021b1e:	7cf9      	ldrb	r1, [r7, #19]
 8021b20:	9102      	str	r1, [sp, #8]
 8021b22:	9201      	str	r2, [sp, #4]
 8021b24:	9300      	str	r3, [sp, #0]
 8021b26:	4623      	mov	r3, r4
 8021b28:	697a      	ldr	r2, [r7, #20]
 8021b2a:	4601      	mov	r1, r0
 8021b2c:	4830      	ldr	r0, [pc, #192]	@ (8021bf0 <upload_handler+0x1a0>)
 8021b2e:	f7ea fcd1 	bl	800c4d4 <mg_log>
              c->recv.len, us->received, us->expected, ok));
    mg_iobuf_del(&c->recv, 0, aligned);  // Delete received data
 8021b32:	68fb      	ldr	r3, [r7, #12]
 8021b34:	3338      	adds	r3, #56	@ 0x38
 8021b36:	697a      	ldr	r2, [r7, #20]
 8021b38:	2100      	movs	r1, #0
 8021b3a:	4618      	mov	r0, r3
 8021b3c:	f7e9 fdae 	bl	800b69c <mg_iobuf_del>
    if (ok == false) {
 8021b40:	7cfb      	ldrb	r3, [r7, #19]
 8021b42:	f083 0301 	eor.w	r3, r3, #1
 8021b46:	b2db      	uxtb	r3, r3
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	d011      	beq.n	8021b70 <upload_handler+0x120>
      mg_http_reply(c, 400, "", "Upload error\n");
 8021b4c:	4b29      	ldr	r3, [pc, #164]	@ (8021bf4 <upload_handler+0x1a4>)
 8021b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8021bf8 <upload_handler+0x1a8>)
 8021b50:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8021b54:	68f8      	ldr	r0, [r7, #12]
 8021b56:	f7e7 fedd 	bl	8009914 <mg_http_reply>
      close_uploaded_file(us);
 8021b5a:	69f8      	ldr	r0, [r7, #28]
 8021b5c:	f7ff fefe 	bl	802195c <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8021b60:	68fa      	ldr	r2, [r7, #12]
 8021b62:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021b66:	f043 0310 	orr.w	r3, r3, #16
 8021b6a:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
 8021b6e:	e02b      	b.n	8021bc8 <upload_handler+0x178>
    } else if (us->received >= us->expected) {
 8021b70:	69fb      	ldr	r3, [r7, #28]
 8021b72:	689a      	ldr	r2, [r3, #8]
 8021b74:	69fb      	ldr	r3, [r7, #28]
 8021b76:	685b      	ldr	r3, [r3, #4]
 8021b78:	429a      	cmp	r2, r3
 8021b7a:	d325      	bcc.n	8021bc8 <upload_handler+0x178>
      // Uploaded everything. Send response back
      MG_INFO(("%lu done, %lu bytes", c->id, us->received));
 8021b7c:	4b19      	ldr	r3, [pc, #100]	@ (8021be4 <upload_handler+0x194>)
 8021b7e:	681b      	ldr	r3, [r3, #0]
 8021b80:	2b01      	cmp	r3, #1
 8021b82:	dd0e      	ble.n	8021ba2 <upload_handler+0x152>
 8021b84:	4b18      	ldr	r3, [pc, #96]	@ (8021be8 <upload_handler+0x198>)
 8021b86:	f240 1283 	movw	r2, #387	@ 0x183
 8021b8a:	4918      	ldr	r1, [pc, #96]	@ (8021bec <upload_handler+0x19c>)
 8021b8c:	2002      	movs	r0, #2
 8021b8e:	f7ea fc51 	bl	800c434 <mg_log_prefix>
 8021b92:	68fb      	ldr	r3, [r7, #12]
 8021b94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8021b96:	69fb      	ldr	r3, [r7, #28]
 8021b98:	689b      	ldr	r3, [r3, #8]
 8021b9a:	461a      	mov	r2, r3
 8021b9c:	4817      	ldr	r0, [pc, #92]	@ (8021bfc <upload_handler+0x1ac>)
 8021b9e:	f7ea fc99 	bl	800c4d4 <mg_log>
      mg_http_reply(c, 200, NULL, "%lu ok\n", us->received);
 8021ba2:	69fb      	ldr	r3, [r7, #28]
 8021ba4:	689b      	ldr	r3, [r3, #8]
 8021ba6:	9300      	str	r3, [sp, #0]
 8021ba8:	4b15      	ldr	r3, [pc, #84]	@ (8021c00 <upload_handler+0x1b0>)
 8021baa:	2200      	movs	r2, #0
 8021bac:	21c8      	movs	r1, #200	@ 0xc8
 8021bae:	68f8      	ldr	r0, [r7, #12]
 8021bb0:	f7e7 feb0 	bl	8009914 <mg_http_reply>
      close_uploaded_file(us);
 8021bb4:	69f8      	ldr	r0, [r7, #28]
 8021bb6:	f7ff fed1 	bl	802195c <close_uploaded_file>
      c->is_draining = 1;  // Close connection when response it sent
 8021bba:	68fa      	ldr	r2, [r7, #12]
 8021bbc:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021bc0:	f043 0310 	orr.w	r3, r3, #16
 8021bc4:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    }
  }

  // Close uploading file descriptor
  if (us->marker == 'U' && ev == MG_EV_CLOSE) close_uploaded_file(us);
 8021bc8:	69fb      	ldr	r3, [r7, #28]
 8021bca:	781b      	ldrb	r3, [r3, #0]
 8021bcc:	2b55      	cmp	r3, #85	@ 0x55
 8021bce:	d105      	bne.n	8021bdc <upload_handler+0x18c>
 8021bd0:	68bb      	ldr	r3, [r7, #8]
 8021bd2:	2b09      	cmp	r3, #9
 8021bd4:	d102      	bne.n	8021bdc <upload_handler+0x18c>
 8021bd6:	69f8      	ldr	r0, [r7, #28]
 8021bd8:	f7ff fec0 	bl	802195c <close_uploaded_file>
  (void) ev_data;
}
 8021bdc:	3724      	adds	r7, #36	@ 0x24
 8021bde:	46bd      	mov	sp, r7
 8021be0:	bd90      	pop	{r4, r7, pc}
 8021be2:	bf00      	nop
 8021be4:	24000258 	.word	0x24000258
 8021be8:	08035634 	.word	0x08035634
 8021bec:	08027398 	.word	0x08027398
 8021bf0:	08027538 	.word	0x08027538
 8021bf4:	0802755c 	.word	0x0802755c
 8021bf8:	0802743c 	.word	0x0802743c
 8021bfc:	0802756c 	.word	0x0802756c
 8021c00:	08027580 	.word	0x08027580

08021c04 <get_file_name_from_uri>:

static void get_file_name_from_uri(struct mg_str uri, char *buf, size_t len) {
 8021c04:	b590      	push	{r4, r7, lr}
 8021c06:	b08f      	sub	sp, #60	@ 0x3c
 8021c08:	af02      	add	r7, sp, #8
 8021c0a:	f107 0408 	add.w	r4, r7, #8
 8021c0e:	e884 0003 	stmia.w	r4, {r0, r1}
 8021c12:	607a      	str	r2, [r7, #4]
 8021c14:	603b      	str	r3, [r7, #0]
  struct mg_str parts[3];
  memset(parts, 0, sizeof(parts));           // Init match parts
 8021c16:	f107 0310 	add.w	r3, r7, #16
 8021c1a:	2218      	movs	r2, #24
 8021c1c:	2100      	movs	r1, #0
 8021c1e:	4618      	mov	r0, r3
 8021c20:	f001 fdbd 	bl	802379e <memset>
  mg_match(uri, mg_str("/api/*/#"), parts);  // Fetch file name
 8021c24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8021c28:	490d      	ldr	r1, [pc, #52]	@ (8021c60 <get_file_name_from_uri+0x5c>)
 8021c2a:	4618      	mov	r0, r3
 8021c2c:	f7f2 fa4e 	bl	80140cc <mg_str_s>
 8021c30:	f107 0310 	add.w	r3, r7, #16
 8021c34:	9300      	str	r3, [sp, #0]
 8021c36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8021c3a:	cb0c      	ldmia	r3, {r2, r3}
 8021c3c:	f107 0108 	add.w	r1, r7, #8
 8021c40:	c903      	ldmia	r1, {r0, r1}
 8021c42:	f7f2 fb4d 	bl	80142e0 <mg_match>
  mg_url_decode(parts[1].buf, parts[1].len, buf, len, 0);
 8021c46:	69b8      	ldr	r0, [r7, #24]
 8021c48:	69f9      	ldr	r1, [r7, #28]
 8021c4a:	2300      	movs	r3, #0
 8021c4c:	9300      	str	r3, [sp, #0]
 8021c4e:	683b      	ldr	r3, [r7, #0]
 8021c50:	687a      	ldr	r2, [r7, #4]
 8021c52:	f7e6 fcf6 	bl	8008642 <mg_url_decode>
}
 8021c56:	bf00      	nop
 8021c58:	3734      	adds	r7, #52	@ 0x34
 8021c5a:	46bd      	mov	sp, r7
 8021c5c:	bd90      	pop	{r4, r7, pc}
 8021c5e:	bf00      	nop
 8021c60:	08027588 	.word	0x08027588

08021c64 <prep_upload>:

static void prep_upload(struct mg_connection *c, struct mg_http_message *hm,
                        void *(*fn_open)(char *, size_t),
                        bool (*fn_close)(void *),
                        bool (*fn_write)(void *, void *, size_t)) {
 8021c64:	b580      	push	{r7, lr}
 8021c66:	b09e      	sub	sp, #120	@ 0x78
 8021c68:	af00      	add	r7, sp, #0
 8021c6a:	60f8      	str	r0, [r7, #12]
 8021c6c:	60b9      	str	r1, [r7, #8]
 8021c6e:	607a      	str	r2, [r7, #4]
 8021c70:	603b      	str	r3, [r7, #0]
  struct upload_state *us = (struct upload_state *) c->data;
 8021c72:	68fb      	ldr	r3, [r7, #12]
 8021c74:	3388      	adds	r3, #136	@ 0x88
 8021c76:	677b      	str	r3, [r7, #116]	@ 0x74
  char path[MG_PATH_MAX];
  memset(us, 0, sizeof(*us));  // Cleanup upload state
 8021c78:	2218      	movs	r2, #24
 8021c7a:	2100      	movs	r1, #0
 8021c7c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8021c7e:	f001 fd8e 	bl	802379e <memset>
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 8021c82:	f107 0210 	add.w	r2, r7, #16
 8021c86:	68b9      	ldr	r1, [r7, #8]
 8021c88:	2364      	movs	r3, #100	@ 0x64
 8021c8a:	3108      	adds	r1, #8
 8021c8c:	c903      	ldmia	r1, {r0, r1}
 8021c8e:	f7ff ffb9 	bl	8021c04 <get_file_name_from_uri>
  us->fp = fn_open(path, hm->body.len);
 8021c92:	68bb      	ldr	r3, [r7, #8]
 8021c94:	f8d3 1204 	ldr.w	r1, [r3, #516]	@ 0x204
 8021c98:	f107 0210 	add.w	r2, r7, #16
 8021c9c:	687b      	ldr	r3, [r7, #4]
 8021c9e:	4610      	mov	r0, r2
 8021ca0:	4798      	blx	r3
 8021ca2:	4602      	mov	r2, r0
 8021ca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021ca6:	60da      	str	r2, [r3, #12]
  MG_DEBUG(("file: [%s] size: %lu fp: %p", path, hm->body.len, us->fp));
 8021ca8:	4b29      	ldr	r3, [pc, #164]	@ (8021d50 <prep_upload+0xec>)
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	2b02      	cmp	r3, #2
 8021cae:	dd10      	ble.n	8021cd2 <prep_upload+0x6e>
 8021cb0:	4b28      	ldr	r3, [pc, #160]	@ (8021d54 <prep_upload+0xf0>)
 8021cb2:	f240 129f 	movw	r2, #415	@ 0x19f
 8021cb6:	4928      	ldr	r1, [pc, #160]	@ (8021d58 <prep_upload+0xf4>)
 8021cb8:	2003      	movs	r0, #3
 8021cba:	f7ea fbbb 	bl	800c434 <mg_log_prefix>
 8021cbe:	68bb      	ldr	r3, [r7, #8]
 8021cc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8021cc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021cc6:	68db      	ldr	r3, [r3, #12]
 8021cc8:	f107 0110 	add.w	r1, r7, #16
 8021ccc:	4823      	ldr	r0, [pc, #140]	@ (8021d5c <prep_upload+0xf8>)
 8021cce:	f7ea fc01 	bl	800c4d4 <mg_log>
  us->marker = 'U';  // Mark us as an upload connection
 8021cd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021cd4:	2255      	movs	r2, #85	@ 0x55
 8021cd6:	701a      	strb	r2, [r3, #0]
  if (us->fp == NULL) {
 8021cd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021cda:	68db      	ldr	r3, [r3, #12]
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	d10e      	bne.n	8021cfe <prep_upload+0x9a>
    mg_http_reply(c, 400, JSON_HEADERS, "File open error\n");
 8021ce0:	4b1f      	ldr	r3, [pc, #124]	@ (8021d60 <prep_upload+0xfc>)
 8021ce2:	4a20      	ldr	r2, [pc, #128]	@ (8021d64 <prep_upload+0x100>)
 8021ce4:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8021ce8:	68f8      	ldr	r0, [r7, #12]
 8021cea:	f7e7 fe13 	bl	8009914 <mg_http_reply>
    c->is_draining = 1;
 8021cee:	68fa      	ldr	r2, [r7, #12]
 8021cf0:	f892 30ad 	ldrb.w	r3, [r2, #173]	@ 0xad
 8021cf4:	f043 0310 	orr.w	r3, r3, #16
 8021cf8:	f882 30ad 	strb.w	r3, [r2, #173]	@ 0xad
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
    c->fn = upload_handler;                   // Change event handler function
    c->pfn = NULL;                            // Detach HTTP handler
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
  }
}
 8021cfc:	e023      	b.n	8021d46 <prep_upload+0xe2>
    us->expected = hm->body.len;              // Store number of bytes we expect
 8021cfe:	68bb      	ldr	r3, [r7, #8]
 8021d00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8021d04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021d06:	605a      	str	r2, [r3, #4]
    us->fn_close = fn_close;                  // Store closing function
 8021d08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021d0a:	683a      	ldr	r2, [r7, #0]
 8021d0c:	611a      	str	r2, [r3, #16]
    us->fn_write = fn_write;                  // Store writing function
 8021d0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8021d10:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8021d14:	615a      	str	r2, [r3, #20]
    mg_iobuf_del(&c->recv, 0, hm->head.len);  // Delete HTTP headers
 8021d16:	68fb      	ldr	r3, [r7, #12]
 8021d18:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8021d1c:	68bb      	ldr	r3, [r7, #8]
 8021d1e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8021d22:	461a      	mov	r2, r3
 8021d24:	2100      	movs	r1, #0
 8021d26:	f7e9 fcb9 	bl	800b69c <mg_iobuf_del>
    c->fn = upload_handler;                   // Change event handler function
 8021d2a:	68fb      	ldr	r3, [r7, #12]
 8021d2c:	4a0e      	ldr	r2, [pc, #56]	@ (8021d68 <prep_upload+0x104>)
 8021d2e:	679a      	str	r2, [r3, #120]	@ 0x78
    c->pfn = NULL;                            // Detach HTTP handler
 8021d30:	68fb      	ldr	r3, [r7, #12]
 8021d32:	2200      	movs	r2, #0
 8021d34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    mg_call(c, MG_EV_READ, &c->recv.len);     // Write initial data
 8021d38:	68fb      	ldr	r3, [r7, #12]
 8021d3a:	3340      	adds	r3, #64	@ 0x40
 8021d3c:	461a      	mov	r2, r3
 8021d3e:	2107      	movs	r1, #7
 8021d40:	68f8      	ldr	r0, [r7, #12]
 8021d42:	f7e4 fe46 	bl	80069d2 <mg_call>
}
 8021d46:	bf00      	nop
 8021d48:	3778      	adds	r7, #120	@ 0x78
 8021d4a:	46bd      	mov	sp, r7
 8021d4c:	bd80      	pop	{r7, pc}
 8021d4e:	bf00      	nop
 8021d50:	24000258 	.word	0x24000258
 8021d54:	08035644 	.word	0x08035644
 8021d58:	08027398 	.word	0x08027398
 8021d5c:	08027594 	.word	0x08027594
 8021d60:	080275b0 	.word	0x080275b0
 8021d64:	080275c4 	.word	0x080275c4
 8021d68:	08021a51 	.word	0x08021a51

08021d6c <handle_uploads>:

static void handle_uploads(struct mg_connection *c, int ev, void *ev_data) {
 8021d6c:	b580      	push	{r7, lr}
 8021d6e:	b08e      	sub	sp, #56	@ 0x38
 8021d70:	af02      	add	r7, sp, #8
 8021d72:	60f8      	str	r0, [r7, #12]
 8021d74:	60b9      	str	r1, [r7, #8]
 8021d76:	607a      	str	r2, [r7, #4]
  struct upload_state *us = (struct upload_state *) c->data;
 8021d78:	68fb      	ldr	r3, [r7, #12]
 8021d7a:	3388      	adds	r3, #136	@ 0x88
 8021d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8021d7e:	687b      	ldr	r3, [r7, #4]
 8021d80:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Catch /upload requests early, without buffering whole body
  // When we receive MG_EV_HTTP_HDRS event, that means we've received all
  // HTTP headers but not necessarily full HTTP body
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8021d82:	68bb      	ldr	r3, [r7, #8]
 8021d84:	2b0a      	cmp	r3, #10
 8021d86:	d153      	bne.n	8021e30 <handle_uploads+0xc4>
 8021d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8021d8a:	781b      	ldrb	r3, [r3, #0]
 8021d8c:	2b00      	cmp	r3, #0
 8021d8e:	d14f      	bne.n	8021e30 <handle_uploads+0xc4>
      mg_strcmp(hm->method, mg_str("POST")) == 0) {
 8021d90:	f107 0314 	add.w	r3, r7, #20
 8021d94:	4928      	ldr	r1, [pc, #160]	@ (8021e38 <handle_uploads+0xcc>)
 8021d96:	4618      	mov	r0, r3
 8021d98:	f7f2 f998 	bl	80140cc <mg_str_s>
 8021d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021d9e:	f107 0314 	add.w	r3, r7, #20
 8021da2:	cb0c      	ldmia	r3, {r2, r3}
 8021da4:	c903      	ldmia	r1, {r0, r1}
 8021da6:	f7f2 fa12 	bl	80141ce <mg_strcmp>
 8021daa:	4603      	mov	r3, r0
  if (ev == MG_EV_HTTP_HDRS && us->marker == 0 &&
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	d13f      	bne.n	8021e30 <handle_uploads+0xc4>
    struct apihandler *h = find_handler(hm);
 8021db0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8021db2:	f7ff fb29 	bl	8021408 <find_handler>
 8021db6:	6278      	str	r0, [r7, #36]	@ 0x24
    if (h != NULL &&
 8021db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d021      	beq.n	8021e02 <handle_uploads+0x96>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8021dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021dc0:	685b      	ldr	r3, [r3, #4]
 8021dc2:	491e      	ldr	r1, [pc, #120]	@ (8021e3c <handle_uploads+0xd0>)
 8021dc4:	4618      	mov	r0, r3
 8021dc6:	f7de faa3 	bl	8000310 <strcmp>
 8021dca:	4603      	mov	r3, r0
    if (h != NULL &&
 8021dcc:	2b00      	cmp	r3, #0
 8021dce:	d008      	beq.n	8021de2 <handle_uploads+0x76>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8021dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021dd2:	685b      	ldr	r3, [r3, #4]
 8021dd4:	491a      	ldr	r1, [pc, #104]	@ (8021e40 <handle_uploads+0xd4>)
 8021dd6:	4618      	mov	r0, r3
 8021dd8:	f7de fa9a 	bl	8000310 <strcmp>
 8021ddc:	4603      	mov	r3, r0
 8021dde:	2b00      	cmp	r3, #0
 8021de0:	d10f      	bne.n	8021e02 <handle_uploads+0x96>
      struct apihandler_upload *hu = (struct apihandler_upload *) h;
 8021de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021de4:	623b      	str	r3, [r7, #32]
      prep_upload(c, hm, hu->opener, hu->closer, hu->writer);
 8021de6:	6a3b      	ldr	r3, [r7, #32]
 8021de8:	699a      	ldr	r2, [r3, #24]
 8021dea:	6a3b      	ldr	r3, [r7, #32]
 8021dec:	69d9      	ldr	r1, [r3, #28]
 8021dee:	6a3b      	ldr	r3, [r7, #32]
 8021df0:	6a1b      	ldr	r3, [r3, #32]
 8021df2:	9300      	str	r3, [sp, #0]
 8021df4:	460b      	mov	r3, r1
 8021df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021df8:	68f8      	ldr	r0, [r7, #12]
 8021dfa:	f7ff ff33 	bl	8021c64 <prep_upload>
        (strcmp(h->type, "upload") == 0 || strcmp(h->type, "ota") == 0)) {
 8021dfe:	bf00      	nop
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
      struct apihandler_file *hf = (struct apihandler_file *) h;
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
    }
  }
}
 8021e00:	e016      	b.n	8021e30 <handle_uploads+0xc4>
    } else if (h != NULL && strcmp(h->type, "file") == 0) {
 8021e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e04:	2b00      	cmp	r3, #0
 8021e06:	d013      	beq.n	8021e30 <handle_uploads+0xc4>
 8021e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e0a:	685b      	ldr	r3, [r3, #4]
 8021e0c:	490d      	ldr	r1, [pc, #52]	@ (8021e44 <handle_uploads+0xd8>)
 8021e0e:	4618      	mov	r0, r3
 8021e10:	f7de fa7e 	bl	8000310 <strcmp>
 8021e14:	4603      	mov	r3, r0
 8021e16:	2b00      	cmp	r3, #0
 8021e18:	d10a      	bne.n	8021e30 <handle_uploads+0xc4>
      struct apihandler_file *hf = (struct apihandler_file *) h;
 8021e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021e1c:	61fb      	str	r3, [r7, #28]
      prep_upload(c, hm, hf->opener, file_closer, file_writer);
 8021e1e:	69fb      	ldr	r3, [r7, #28]
 8021e20:	699a      	ldr	r2, [r3, #24]
 8021e22:	4b09      	ldr	r3, [pc, #36]	@ (8021e48 <handle_uploads+0xdc>)
 8021e24:	9300      	str	r3, [sp, #0]
 8021e26:	4b09      	ldr	r3, [pc, #36]	@ (8021e4c <handle_uploads+0xe0>)
 8021e28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021e2a:	68f8      	ldr	r0, [r7, #12]
 8021e2c:	f7ff ff1a 	bl	8021c64 <prep_upload>
}
 8021e30:	bf00      	nop
 8021e32:	3730      	adds	r7, #48	@ 0x30
 8021e34:	46bd      	mov	sp, r7
 8021e36:	bd80      	pop	{r7, pc}
 8021e38:	08027600 	.word	0x08027600
 8021e3c:	0802731c 	.word	0x0802731c
 8021e40:	0802730c 	.word	0x0802730c
 8021e44:	080273cc 	.word	0x080273cc
 8021e48:	080219e9 	.word	0x080219e9
 8021e4c:	080219a1 	.word	0x080219a1

08021e50 <handle_action>:

static void handle_action(struct mg_connection *c, struct mg_http_message *hm,
                          bool (*check_fn)(void),
                          void (*start_fn)(struct mg_str)) {
 8021e50:	b580      	push	{r7, lr}
 8021e52:	b088      	sub	sp, #32
 8021e54:	af02      	add	r7, sp, #8
 8021e56:	60f8      	str	r0, [r7, #12]
 8021e58:	60b9      	str	r1, [r7, #8]
 8021e5a:	607a      	str	r2, [r7, #4]
 8021e5c:	603b      	str	r3, [r7, #0]
  if (hm->body.len > 0) {
 8021e5e:	68bb      	ldr	r3, [r7, #8]
 8021e60:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8021e64:	2b00      	cmp	r3, #0
 8021e66:	d01c      	beq.n	8021ea2 <handle_action+0x52>
    start_fn(hm->body);
 8021e68:	68ba      	ldr	r2, [r7, #8]
 8021e6a:	683b      	ldr	r3, [r7, #0]
 8021e6c:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8021e70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8021e74:	4798      	blx	r3
    if (check_fn()) {
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	4798      	blx	r3
 8021e7a:	4603      	mov	r3, r0
 8021e7c:	2b00      	cmp	r3, #0
 8021e7e:	d009      	beq.n	8021e94 <handle_action+0x44>
      struct action_state *as = (struct action_state *) c->data;
 8021e80:	68fb      	ldr	r3, [r7, #12]
 8021e82:	3388      	adds	r3, #136	@ 0x88
 8021e84:	617b      	str	r3, [r7, #20]
      as->marker = 'A';
 8021e86:	697b      	ldr	r3, [r7, #20]
 8021e88:	2241      	movs	r2, #65	@ 0x41
 8021e8a:	701a      	strb	r2, [r3, #0]
      as->fn = check_fn;
 8021e8c:	697b      	ldr	r3, [r7, #20]
 8021e8e:	687a      	ldr	r2, [r7, #4]
 8021e90:	605a      	str	r2, [r3, #4]
      mg_http_reply(c, 200, JSON_HEADERS, "false");
    }
  } else {
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
  }
}
 8021e92:	e015      	b.n	8021ec0 <handle_action+0x70>
      mg_http_reply(c, 200, JSON_HEADERS, "false");
 8021e94:	4b0c      	ldr	r3, [pc, #48]	@ (8021ec8 <handle_action+0x78>)
 8021e96:	4a0d      	ldr	r2, [pc, #52]	@ (8021ecc <handle_action+0x7c>)
 8021e98:	21c8      	movs	r1, #200	@ 0xc8
 8021e9a:	68f8      	ldr	r0, [r7, #12]
 8021e9c:	f7e7 fd3a 	bl	8009914 <mg_http_reply>
}
 8021ea0:	e00e      	b.n	8021ec0 <handle_action+0x70>
    mg_http_reply(c, 200, JSON_HEADERS, "%s", check_fn() ? "true" : "false");
 8021ea2:	687b      	ldr	r3, [r7, #4]
 8021ea4:	4798      	blx	r3
 8021ea6:	4603      	mov	r3, r0
 8021ea8:	2b00      	cmp	r3, #0
 8021eaa:	d001      	beq.n	8021eb0 <handle_action+0x60>
 8021eac:	4b08      	ldr	r3, [pc, #32]	@ (8021ed0 <handle_action+0x80>)
 8021eae:	e000      	b.n	8021eb2 <handle_action+0x62>
 8021eb0:	4b05      	ldr	r3, [pc, #20]	@ (8021ec8 <handle_action+0x78>)
 8021eb2:	9300      	str	r3, [sp, #0]
 8021eb4:	4b07      	ldr	r3, [pc, #28]	@ (8021ed4 <handle_action+0x84>)
 8021eb6:	4a05      	ldr	r2, [pc, #20]	@ (8021ecc <handle_action+0x7c>)
 8021eb8:	21c8      	movs	r1, #200	@ 0xc8
 8021eba:	68f8      	ldr	r0, [r7, #12]
 8021ebc:	f7e7 fd2a 	bl	8009914 <mg_http_reply>
}
 8021ec0:	bf00      	nop
 8021ec2:	3718      	adds	r7, #24
 8021ec4:	46bd      	mov	sp, r7
 8021ec6:	bd80      	pop	{r7, pc}
 8021ec8:	08027608 	.word	0x08027608
 8021ecc:	080275c4 	.word	0x080275c4
 8021ed0:	08027610 	.word	0x08027610
 8021ed4:	08027410 	.word	0x08027410

08021ed8 <print_struct>:

size_t print_struct(void (*out)(char, void *), void *ptr, va_list *ap) {
 8021ed8:	b580      	push	{r7, lr}
 8021eda:	b08e      	sub	sp, #56	@ 0x38
 8021edc:	af04      	add	r7, sp, #16
 8021ede:	60f8      	str	r0, [r7, #12]
 8021ee0:	60b9      	str	r1, [r7, #8]
 8021ee2:	607a      	str	r2, [r7, #4]
  const struct attribute *a = va_arg(*ap, struct attribute *);
 8021ee4:	687b      	ldr	r3, [r7, #4]
 8021ee6:	681b      	ldr	r3, [r3, #0]
 8021ee8:	1d19      	adds	r1, r3, #4
 8021eea:	687a      	ldr	r2, [r7, #4]
 8021eec:	6011      	str	r1, [r2, #0]
 8021eee:	681b      	ldr	r3, [r3, #0]
 8021ef0:	61bb      	str	r3, [r7, #24]
  char *data = va_arg(*ap, char *);
 8021ef2:	687b      	ldr	r3, [r7, #4]
 8021ef4:	681b      	ldr	r3, [r3, #0]
 8021ef6:	1d19      	adds	r1, r3, #4
 8021ef8:	687a      	ldr	r2, [r7, #4]
 8021efa:	6011      	str	r1, [r2, #0]
 8021efc:	681b      	ldr	r3, [r3, #0]
 8021efe:	617b      	str	r3, [r7, #20]
  size_t i, len = 0;
 8021f00:	2300      	movs	r3, #0
 8021f02:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8021f04:	2300      	movs	r3, #0
 8021f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8021f08:	e0bf      	b.n	802208a <print_struct+0x1b2>
    char *attrptr = data + a[i].offset;
 8021f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021f0c:	4613      	mov	r3, r2
 8021f0e:	005b      	lsls	r3, r3, #1
 8021f10:	4413      	add	r3, r2
 8021f12:	00db      	lsls	r3, r3, #3
 8021f14:	461a      	mov	r2, r3
 8021f16:	69bb      	ldr	r3, [r7, #24]
 8021f18:	4413      	add	r3, r2
 8021f1a:	68db      	ldr	r3, [r3, #12]
 8021f1c:	697a      	ldr	r2, [r7, #20]
 8021f1e:	4413      	add	r3, r2
 8021f20:	613b      	str	r3, [r7, #16]
    len += mg_xprintf(out, ptr, "%s%m:", i == 0 ? "" : ",", MG_ESC(a[i].name));
 8021f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	d101      	bne.n	8021f2c <print_struct+0x54>
 8021f28:	4960      	ldr	r1, [pc, #384]	@ (80220ac <print_struct+0x1d4>)
 8021f2a:	e000      	b.n	8021f2e <print_struct+0x56>
 8021f2c:	4960      	ldr	r1, [pc, #384]	@ (80220b0 <print_struct+0x1d8>)
 8021f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021f30:	4613      	mov	r3, r2
 8021f32:	005b      	lsls	r3, r3, #1
 8021f34:	4413      	add	r3, r2
 8021f36:	00db      	lsls	r3, r3, #3
 8021f38:	461a      	mov	r2, r3
 8021f3a:	69bb      	ldr	r3, [r7, #24]
 8021f3c:	4413      	add	r3, r2
 8021f3e:	681b      	ldr	r3, [r3, #0]
 8021f40:	9302      	str	r3, [sp, #8]
 8021f42:	2300      	movs	r3, #0
 8021f44:	9301      	str	r3, [sp, #4]
 8021f46:	4b5b      	ldr	r3, [pc, #364]	@ (80220b4 <print_struct+0x1dc>)
 8021f48:	9300      	str	r3, [sp, #0]
 8021f4a:	460b      	mov	r3, r1
 8021f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80220b8 <print_struct+0x1e0>)
 8021f4e:	68b9      	ldr	r1, [r7, #8]
 8021f50:	68f8      	ldr	r0, [r7, #12]
 8021f52:	f7e5 fbd6 	bl	8007702 <mg_xprintf>
 8021f56:	4602      	mov	r2, r0
 8021f58:	6a3b      	ldr	r3, [r7, #32]
 8021f5a:	4413      	add	r3, r2
 8021f5c:	623b      	str	r3, [r7, #32]
    if (strcmp(a[i].type, "int") == 0) {
 8021f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021f60:	4613      	mov	r3, r2
 8021f62:	005b      	lsls	r3, r3, #1
 8021f64:	4413      	add	r3, r2
 8021f66:	00db      	lsls	r3, r3, #3
 8021f68:	461a      	mov	r2, r3
 8021f6a:	69bb      	ldr	r3, [r7, #24]
 8021f6c:	4413      	add	r3, r2
 8021f6e:	685b      	ldr	r3, [r3, #4]
 8021f70:	4952      	ldr	r1, [pc, #328]	@ (80220bc <print_struct+0x1e4>)
 8021f72:	4618      	mov	r0, r3
 8021f74:	f7de f9cc 	bl	8000310 <strcmp>
 8021f78:	4603      	mov	r3, r0
 8021f7a:	2b00      	cmp	r3, #0
 8021f7c:	d10b      	bne.n	8021f96 <print_struct+0xbe>
      len += mg_xprintf(out, ptr, "%d", *(int *) attrptr);
 8021f7e:	693b      	ldr	r3, [r7, #16]
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	4a4f      	ldr	r2, [pc, #316]	@ (80220c0 <print_struct+0x1e8>)
 8021f84:	68b9      	ldr	r1, [r7, #8]
 8021f86:	68f8      	ldr	r0, [r7, #12]
 8021f88:	f7e5 fbbb 	bl	8007702 <mg_xprintf>
 8021f8c:	4602      	mov	r2, r0
 8021f8e:	6a3b      	ldr	r3, [r7, #32]
 8021f90:	4413      	add	r3, r2
 8021f92:	623b      	str	r3, [r7, #32]
 8021f94:	e076      	b.n	8022084 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "double") == 0) {
 8021f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021f98:	4613      	mov	r3, r2
 8021f9a:	005b      	lsls	r3, r3, #1
 8021f9c:	4413      	add	r3, r2
 8021f9e:	00db      	lsls	r3, r3, #3
 8021fa0:	461a      	mov	r2, r3
 8021fa2:	69bb      	ldr	r3, [r7, #24]
 8021fa4:	4413      	add	r3, r2
 8021fa6:	685b      	ldr	r3, [r3, #4]
 8021fa8:	4946      	ldr	r1, [pc, #280]	@ (80220c4 <print_struct+0x1ec>)
 8021faa:	4618      	mov	r0, r3
 8021fac:	f7de f9b0 	bl	8000310 <strcmp>
 8021fb0:	4603      	mov	r3, r0
 8021fb2:	2b00      	cmp	r3, #0
 8021fb4:	d11d      	bne.n	8021ff2 <print_struct+0x11a>
      const char *fmt = a[i].format;
 8021fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021fb8:	4613      	mov	r3, r2
 8021fba:	005b      	lsls	r3, r3, #1
 8021fbc:	4413      	add	r3, r2
 8021fbe:	00db      	lsls	r3, r3, #3
 8021fc0:	461a      	mov	r2, r3
 8021fc2:	69bb      	ldr	r3, [r7, #24]
 8021fc4:	4413      	add	r3, r2
 8021fc6:	689b      	ldr	r3, [r3, #8]
 8021fc8:	61fb      	str	r3, [r7, #28]
      if (fmt == NULL) fmt = "%g";
 8021fca:	69fb      	ldr	r3, [r7, #28]
 8021fcc:	2b00      	cmp	r3, #0
 8021fce:	d101      	bne.n	8021fd4 <print_struct+0xfc>
 8021fd0:	4b3d      	ldr	r3, [pc, #244]	@ (80220c8 <print_struct+0x1f0>)
 8021fd2:	61fb      	str	r3, [r7, #28]
      len += mg_xprintf(out, ptr, fmt, *(double *) attrptr);
 8021fd4:	693b      	ldr	r3, [r7, #16]
 8021fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021fda:	e9cd 2300 	strd	r2, r3, [sp]
 8021fde:	69fa      	ldr	r2, [r7, #28]
 8021fe0:	68b9      	ldr	r1, [r7, #8]
 8021fe2:	68f8      	ldr	r0, [r7, #12]
 8021fe4:	f7e5 fb8d 	bl	8007702 <mg_xprintf>
 8021fe8:	4602      	mov	r2, r0
 8021fea:	6a3b      	ldr	r3, [r7, #32]
 8021fec:	4413      	add	r3, r2
 8021fee:	623b      	str	r3, [r7, #32]
 8021ff0:	e048      	b.n	8022084 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "bool") == 0) {
 8021ff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8021ff4:	4613      	mov	r3, r2
 8021ff6:	005b      	lsls	r3, r3, #1
 8021ff8:	4413      	add	r3, r2
 8021ffa:	00db      	lsls	r3, r3, #3
 8021ffc:	461a      	mov	r2, r3
 8021ffe:	69bb      	ldr	r3, [r7, #24]
 8022000:	4413      	add	r3, r2
 8022002:	685b      	ldr	r3, [r3, #4]
 8022004:	4931      	ldr	r1, [pc, #196]	@ (80220cc <print_struct+0x1f4>)
 8022006:	4618      	mov	r0, r3
 8022008:	f7de f982 	bl	8000310 <strcmp>
 802200c:	4603      	mov	r3, r0
 802200e:	2b00      	cmp	r3, #0
 8022010:	d110      	bne.n	8022034 <print_struct+0x15c>
      len += mg_xprintf(out, ptr, "%s", *(bool *) attrptr ? "true" : "false");
 8022012:	693b      	ldr	r3, [r7, #16]
 8022014:	781b      	ldrb	r3, [r3, #0]
 8022016:	2b00      	cmp	r3, #0
 8022018:	d001      	beq.n	802201e <print_struct+0x146>
 802201a:	4b2d      	ldr	r3, [pc, #180]	@ (80220d0 <print_struct+0x1f8>)
 802201c:	e000      	b.n	8022020 <print_struct+0x148>
 802201e:	4b2d      	ldr	r3, [pc, #180]	@ (80220d4 <print_struct+0x1fc>)
 8022020:	4a2d      	ldr	r2, [pc, #180]	@ (80220d8 <print_struct+0x200>)
 8022022:	68b9      	ldr	r1, [r7, #8]
 8022024:	68f8      	ldr	r0, [r7, #12]
 8022026:	f7e5 fb6c 	bl	8007702 <mg_xprintf>
 802202a:	4602      	mov	r2, r0
 802202c:	6a3b      	ldr	r3, [r7, #32]
 802202e:	4413      	add	r3, r2
 8022030:	623b      	str	r3, [r7, #32]
 8022032:	e027      	b.n	8022084 <print_struct+0x1ac>
    } else if (strcmp(a[i].type, "string") == 0) {
 8022034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8022036:	4613      	mov	r3, r2
 8022038:	005b      	lsls	r3, r3, #1
 802203a:	4413      	add	r3, r2
 802203c:	00db      	lsls	r3, r3, #3
 802203e:	461a      	mov	r2, r3
 8022040:	69bb      	ldr	r3, [r7, #24]
 8022042:	4413      	add	r3, r2
 8022044:	685b      	ldr	r3, [r3, #4]
 8022046:	4925      	ldr	r1, [pc, #148]	@ (80220dc <print_struct+0x204>)
 8022048:	4618      	mov	r0, r3
 802204a:	f7de f961 	bl	8000310 <strcmp>
 802204e:	4603      	mov	r3, r0
 8022050:	2b00      	cmp	r3, #0
 8022052:	d10e      	bne.n	8022072 <print_struct+0x19a>
      len += mg_xprintf(out, ptr, "%m", MG_ESC(attrptr));
 8022054:	693b      	ldr	r3, [r7, #16]
 8022056:	9301      	str	r3, [sp, #4]
 8022058:	2300      	movs	r3, #0
 802205a:	9300      	str	r3, [sp, #0]
 802205c:	4b15      	ldr	r3, [pc, #84]	@ (80220b4 <print_struct+0x1dc>)
 802205e:	4a20      	ldr	r2, [pc, #128]	@ (80220e0 <print_struct+0x208>)
 8022060:	68b9      	ldr	r1, [r7, #8]
 8022062:	68f8      	ldr	r0, [r7, #12]
 8022064:	f7e5 fb4d 	bl	8007702 <mg_xprintf>
 8022068:	4602      	mov	r2, r0
 802206a:	6a3b      	ldr	r3, [r7, #32]
 802206c:	4413      	add	r3, r2
 802206e:	623b      	str	r3, [r7, #32]
 8022070:	e008      	b.n	8022084 <print_struct+0x1ac>
    } else {
      len += mg_xprintf(out, ptr, "null");
 8022072:	4a1c      	ldr	r2, [pc, #112]	@ (80220e4 <print_struct+0x20c>)
 8022074:	68b9      	ldr	r1, [r7, #8]
 8022076:	68f8      	ldr	r0, [r7, #12]
 8022078:	f7e5 fb43 	bl	8007702 <mg_xprintf>
 802207c:	4602      	mov	r2, r0
 802207e:	6a3b      	ldr	r3, [r7, #32]
 8022080:	4413      	add	r3, r2
 8022082:	623b      	str	r3, [r7, #32]
  for (i = 0; a[i].name != NULL; i++) {
 8022084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022086:	3301      	adds	r3, #1
 8022088:	627b      	str	r3, [r7, #36]	@ 0x24
 802208a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802208c:	4613      	mov	r3, r2
 802208e:	005b      	lsls	r3, r3, #1
 8022090:	4413      	add	r3, r2
 8022092:	00db      	lsls	r3, r3, #3
 8022094:	461a      	mov	r2, r3
 8022096:	69bb      	ldr	r3, [r7, #24]
 8022098:	4413      	add	r3, r2
 802209a:	681b      	ldr	r3, [r3, #0]
 802209c:	2b00      	cmp	r3, #0
 802209e:	f47f af34 	bne.w	8021f0a <print_struct+0x32>
    }
  }
  return len;
 80220a2:	6a3b      	ldr	r3, [r7, #32]
}
 80220a4:	4618      	mov	r0, r3
 80220a6:	3728      	adds	r7, #40	@ 0x28
 80220a8:	46bd      	mov	sp, r7
 80220aa:	bd80      	pop	{r7, pc}
 80220ac:	0802743c 	.word	0x0802743c
 80220b0:	08027618 	.word	0x08027618
 80220b4:	08010dcd 	.word	0x08010dcd
 80220b8:	0802761c 	.word	0x0802761c
 80220bc:	080271e4 	.word	0x080271e4
 80220c0:	08027624 	.word	0x08027624
 80220c4:	0802729c 	.word	0x0802729c
 80220c8:	08027628 	.word	0x08027628
 80220cc:	08027220 	.word	0x08027220
 80220d0:	08027610 	.word	0x08027610
 80220d4:	08027608 	.word	0x08027608
 80220d8:	08027410 	.word	0x08027410
 80220dc:	08027210 	.word	0x08027210
 80220e0:	0802762c 	.word	0x0802762c
 80220e4:	08027630 	.word	0x08027630

080220e8 <handle_object>:

static void handle_object(struct mg_connection *c, struct mg_http_message *hm,
                          struct apihandler_data *h) {
 80220e8:	b580      	push	{r7, lr}
 80220ea:	b0a8      	sub	sp, #160	@ 0xa0
 80220ec:	af04      	add	r7, sp, #16
 80220ee:	60f8      	str	r0, [r7, #12]
 80220f0:	60b9      	str	r1, [r7, #8]
 80220f2:	607a      	str	r2, [r7, #4]
  void *data = calloc(1, h->data_size);
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	69db      	ldr	r3, [r3, #28]
 80220f8:	4619      	mov	r1, r3
 80220fa:	2001      	movs	r0, #1
 80220fc:	f001 f87a 	bl	80231f4 <calloc>
 8022100:	4603      	mov	r3, r0
 8022102:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  h->getter(data);
 8022106:	687b      	ldr	r3, [r7, #4]
 8022108:	6a1b      	ldr	r3, [r3, #32]
 802210a:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 802210e:	4798      	blx	r3
  if (hm->body.len > 0 && h->data_size > 0) {
 8022110:	68bb      	ldr	r3, [r7, #8]
 8022112:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8022116:	2b00      	cmp	r3, #0
 8022118:	f000 80da 	beq.w	80222d0 <handle_object+0x1e8>
 802211c:	687b      	ldr	r3, [r7, #4]
 802211e:	69db      	ldr	r3, [r3, #28]
 8022120:	2b00      	cmp	r3, #0
 8022122:	f000 80d5 	beq.w	80222d0 <handle_object+0x1e8>
    char *tmp = calloc(1, h->data_size);
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	69db      	ldr	r3, [r3, #28]
 802212a:	4619      	mov	r1, r3
 802212c:	2001      	movs	r0, #1
 802212e:	f001 f861 	bl	80231f4 <calloc>
 8022132:	4603      	mov	r3, r0
 8022134:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    size_t i;
    memcpy(tmp, data, h->data_size);
 8022138:	687b      	ldr	r3, [r7, #4]
 802213a:	69db      	ldr	r3, [r3, #28]
 802213c:	461a      	mov	r2, r3
 802213e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8022142:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8022146:	f001 fc60 	bl	8023a0a <memcpy>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 802214a:	2300      	movs	r3, #0
 802214c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8022150:	e08e      	b.n	8022270 <handle_object+0x188>
      const struct attribute *a = &h->attributes[i];
 8022152:	687b      	ldr	r3, [r7, #4]
 8022154:	6999      	ldr	r1, [r3, #24]
 8022156:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 802215a:	4613      	mov	r3, r2
 802215c:	005b      	lsls	r3, r3, #1
 802215e:	4413      	add	r3, r2
 8022160:	00db      	lsls	r3, r3, #3
 8022162:	440b      	add	r3, r1
 8022164:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      char jpath[100];
      mg_snprintf(jpath, sizeof(jpath), "$.%s", a->name);
 8022168:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 802216c:	681b      	ldr	r3, [r3, #0]
 802216e:	f107 0010 	add.w	r0, r7, #16
 8022172:	4a62      	ldr	r2, [pc, #392]	@ (80222fc <handle_object+0x214>)
 8022174:	2164      	movs	r1, #100	@ 0x64
 8022176:	f7ee fbe3 	bl	8010940 <mg_snprintf>
      if (strcmp(a->type, "int") == 0) {
 802217a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 802217e:	685b      	ldr	r3, [r3, #4]
 8022180:	495f      	ldr	r1, [pc, #380]	@ (8022300 <handle_object+0x218>)
 8022182:	4618      	mov	r0, r3
 8022184:	f7de f8c4 	bl	8000310 <strcmp>
 8022188:	4603      	mov	r3, r0
 802218a:	2b00      	cmp	r3, #0
 802218c:	d11c      	bne.n	80221c8 <handle_object+0xe0>
        double d;
        if (mg_json_get_num(hm->body, jpath, &d)) {
 802218e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8022192:	f107 0210 	add.w	r2, r7, #16
 8022196:	68b9      	ldr	r1, [r7, #8]
 8022198:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 802219c:	c903      	ldmia	r1, {r0, r1}
 802219e:	f7ea f80a 	bl	800c1b6 <mg_json_get_num>
 80221a2:	4603      	mov	r3, r0
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	d05e      	beq.n	8022266 <handle_object+0x17e>
          int v = (int) d;
 80221a8:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 80221ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80221b0:	ee17 3a90 	vmov	r3, s15
 80221b4:	677b      	str	r3, [r7, #116]	@ 0x74
          memcpy(tmp + a->offset, &v, sizeof(v));
 80221b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80221ba:	68db      	ldr	r3, [r3, #12]
 80221bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80221c0:	4413      	add	r3, r2
 80221c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80221c4:	601a      	str	r2, [r3, #0]
 80221c6:	e04e      	b.n	8022266 <handle_object+0x17e>
        }
      } else if (strcmp(a->type, "bool") == 0) {
 80221c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80221cc:	685b      	ldr	r3, [r3, #4]
 80221ce:	494d      	ldr	r1, [pc, #308]	@ (8022304 <handle_object+0x21c>)
 80221d0:	4618      	mov	r0, r3
 80221d2:	f7de f89d 	bl	8000310 <strcmp>
 80221d6:	4603      	mov	r3, r0
 80221d8:	2b00      	cmp	r3, #0
 80221da:	d10e      	bne.n	80221fa <handle_object+0x112>
        mg_json_get_bool(hm->body, jpath, (bool *) (tmp + a->offset));
 80221dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80221e0:	68db      	ldr	r3, [r3, #12]
 80221e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80221e6:	4413      	add	r3, r2
 80221e8:	f107 0210 	add.w	r2, r7, #16
 80221ec:	68b9      	ldr	r1, [r7, #8]
 80221ee:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 80221f2:	c903      	ldmia	r1, {r0, r1}
 80221f4:	f7ea f824 	bl	800c240 <mg_json_get_bool>
 80221f8:	e035      	b.n	8022266 <handle_object+0x17e>
      } else if (strcmp(a->type, "double") == 0) {
 80221fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80221fe:	685b      	ldr	r3, [r3, #4]
 8022200:	4941      	ldr	r1, [pc, #260]	@ (8022308 <handle_object+0x220>)
 8022202:	4618      	mov	r0, r3
 8022204:	f7de f884 	bl	8000310 <strcmp>
 8022208:	4603      	mov	r3, r0
 802220a:	2b00      	cmp	r3, #0
 802220c:	d10e      	bne.n	802222c <handle_object+0x144>
        mg_json_get_num(hm->body, jpath, (double *) (tmp + a->offset));
 802220e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8022212:	68db      	ldr	r3, [r3, #12]
 8022214:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8022218:	4413      	add	r3, r2
 802221a:	f107 0210 	add.w	r2, r7, #16
 802221e:	68b9      	ldr	r1, [r7, #8]
 8022220:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8022224:	c903      	ldmia	r1, {r0, r1}
 8022226:	f7e9 ffc6 	bl	800c1b6 <mg_json_get_num>
 802222a:	e01c      	b.n	8022266 <handle_object+0x17e>
      } else if (strcmp(a->type, "string") == 0) {
 802222c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8022230:	685b      	ldr	r3, [r3, #4]
 8022232:	4936      	ldr	r1, [pc, #216]	@ (802230c <handle_object+0x224>)
 8022234:	4618      	mov	r0, r3
 8022236:	f7de f86b 	bl	8000310 <strcmp>
 802223a:	4603      	mov	r3, r0
 802223c:	2b00      	cmp	r3, #0
 802223e:	d112      	bne.n	8022266 <handle_object+0x17e>
        mg_json_get_str2(hm->body, jpath, tmp + a->offset, a->size);
 8022240:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8022244:	68db      	ldr	r3, [r3, #12]
 8022246:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 802224a:	18d0      	adds	r0, r2, r3
 802224c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8022250:	691b      	ldr	r3, [r3, #16]
 8022252:	f107 0210 	add.w	r2, r7, #16
 8022256:	68b9      	ldr	r1, [r7, #8]
 8022258:	9300      	str	r3, [sp, #0]
 802225a:	4603      	mov	r3, r0
 802225c:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8022260:	c903      	ldmia	r1, {r0, r1}
 8022262:	f7ff f8fd 	bl	8021460 <mg_json_get_str2>
    for (i = 0; h->attributes[i].name != NULL; i++) {
 8022266:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 802226a:	3301      	adds	r3, #1
 802226c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8022270:	687b      	ldr	r3, [r7, #4]
 8022272:	6999      	ldr	r1, [r3, #24]
 8022274:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8022278:	4613      	mov	r3, r2
 802227a:	005b      	lsls	r3, r3, #1
 802227c:	4413      	add	r3, r2
 802227e:	00db      	lsls	r3, r3, #3
 8022280:	440b      	add	r3, r1
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	2b00      	cmp	r3, #0
 8022286:	f47f af64 	bne.w	8022152 <handle_object+0x6a>
      }
    }
    // If structure changes, increment version
    if (memcmp(data, tmp, h->data_size) != 0) s_device_change_version++;
 802228a:	687b      	ldr	r3, [r7, #4]
 802228c:	69db      	ldr	r3, [r3, #28]
 802228e:	461a      	mov	r2, r3
 8022290:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8022294:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8022298:	f001 fa57 	bl	802374a <memcmp>
 802229c:	4603      	mov	r3, r0
 802229e:	2b00      	cmp	r3, #0
 80222a0:	d004      	beq.n	80222ac <handle_object+0x1c4>
 80222a2:	4b1b      	ldr	r3, [pc, #108]	@ (8022310 <handle_object+0x228>)
 80222a4:	681b      	ldr	r3, [r3, #0]
 80222a6:	3301      	adds	r3, #1
 80222a8:	4a19      	ldr	r2, [pc, #100]	@ (8022310 <handle_object+0x228>)
 80222aa:	6013      	str	r3, [r2, #0]
    if (h->setter != NULL) h->setter(tmp);  // Can be NULL if readonly
 80222ac:	687b      	ldr	r3, [r7, #4]
 80222ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80222b0:	2b00      	cmp	r3, #0
 80222b2:	d004      	beq.n	80222be <handle_object+0x1d6>
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80222b8:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80222bc:	4798      	blx	r3
    free(tmp);
 80222be:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80222c2:	f000 ffbb 	bl	802323c <free>
    h->getter(data);  // Re-sync again after setting
 80222c6:	687b      	ldr	r3, [r7, #4]
 80222c8:	6a1b      	ldr	r3, [r3, #32]
 80222ca:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80222ce:	4798      	blx	r3
  }
  mg_http_reply(c, 200, JSON_HEADERS, "{%M}\n", print_struct, h->attributes,
 80222d0:	687b      	ldr	r3, [r7, #4]
 80222d2:	699b      	ldr	r3, [r3, #24]
 80222d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80222d8:	9202      	str	r2, [sp, #8]
 80222da:	9301      	str	r3, [sp, #4]
 80222dc:	4b0d      	ldr	r3, [pc, #52]	@ (8022314 <handle_object+0x22c>)
 80222de:	9300      	str	r3, [sp, #0]
 80222e0:	4b0d      	ldr	r3, [pc, #52]	@ (8022318 <handle_object+0x230>)
 80222e2:	4a0e      	ldr	r2, [pc, #56]	@ (802231c <handle_object+0x234>)
 80222e4:	21c8      	movs	r1, #200	@ 0xc8
 80222e6:	68f8      	ldr	r0, [r7, #12]
 80222e8:	f7e7 fb14 	bl	8009914 <mg_http_reply>
                data);
  free(data);
 80222ec:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80222f0:	f000 ffa4 	bl	802323c <free>
}
 80222f4:	bf00      	nop
 80222f6:	3790      	adds	r7, #144	@ 0x90
 80222f8:	46bd      	mov	sp, r7
 80222fa:	bd80      	pop	{r7, pc}
 80222fc:	08027638 	.word	0x08027638
 8022300:	080271e4 	.word	0x080271e4
 8022304:	08027220 	.word	0x08027220
 8022308:	0802729c 	.word	0x0802729c
 802230c:	08027210 	.word	0x08027210
 8022310:	2400442c 	.word	0x2400442c
 8022314:	08021ed9 	.word	0x08021ed9
 8022318:	08027640 	.word	0x08027640
 802231c:	080275c4 	.word	0x080275c4

08022320 <print_array>:

static size_t print_array(void (*out)(char, void *), void *ptr, va_list *ap) {
 8022320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022324:	b093      	sub	sp, #76	@ 0x4c
 8022326:	af02      	add	r7, sp, #8
 8022328:	6178      	str	r0, [r7, #20]
 802232a:	6139      	str	r1, [r7, #16]
 802232c:	60fa      	str	r2, [r7, #12]
  struct apihandler_array *ha = va_arg(*ap, struct apihandler_array *);
 802232e:	68fb      	ldr	r3, [r7, #12]
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	1d19      	adds	r1, r3, #4
 8022334:	68fa      	ldr	r2, [r7, #12]
 8022336:	6011      	str	r1, [r2, #0]
 8022338:	681b      	ldr	r3, [r3, #0]
 802233a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint64_t size = *va_arg(*ap, uint64_t *);
 802233c:	68fb      	ldr	r3, [r7, #12]
 802233e:	681b      	ldr	r3, [r3, #0]
 8022340:	1d19      	adds	r1, r3, #4
 8022342:	68fa      	ldr	r2, [r7, #12]
 8022344:	6011      	str	r1, [r2, #0]
 8022346:	681b      	ldr	r3, [r3, #0]
 8022348:	e9d3 2300 	ldrd	r2, r3, [r3]
 802234c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
  uint64_t start = *va_arg(*ap, uint64_t *);
 8022350:	68fb      	ldr	r3, [r7, #12]
 8022352:	681b      	ldr	r3, [r3, #0]
 8022354:	1d19      	adds	r1, r3, #4
 8022356:	68fa      	ldr	r2, [r7, #12]
 8022358:	6011      	str	r1, [r2, #0]
 802235a:	681b      	ldr	r3, [r3, #0]
 802235c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022360:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i, max = 20, len = 0;
 8022364:	2314      	movs	r3, #20
 8022366:	61fb      	str	r3, [r7, #28]
 8022368:	2300      	movs	r3, #0
 802236a:	63bb      	str	r3, [r7, #56]	@ 0x38
  void *data = calloc(1, ha->data_size);
 802236c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 802236e:	69db      	ldr	r3, [r3, #28]
 8022370:	4619      	mov	r1, r3
 8022372:	2001      	movs	r0, #1
 8022374:	f000 ff3e 	bl	80231f4 <calloc>
 8022378:	4603      	mov	r3, r0
 802237a:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < max && start + i < size; i++) {
 802237c:	2300      	movs	r3, #0
 802237e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8022380:	e02f      	b.n	80223e2 <print_array+0xc2>
    ha->getter(start + i, data);
 8022382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022384:	6a1e      	ldr	r6, [r3, #32]
 8022386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022388:	2200      	movs	r2, #0
 802238a:	469a      	mov	sl, r3
 802238c:	4693      	mov	fp, r2
 802238e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8022392:	eb1a 0102 	adds.w	r1, sl, r2
 8022396:	6039      	str	r1, [r7, #0]
 8022398:	eb4b 0303 	adc.w	r3, fp, r3
 802239c:	607b      	str	r3, [r7, #4]
 802239e:	69ba      	ldr	r2, [r7, #24]
 80223a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80223a4:	47b0      	blx	r6
    if (i > 0) len += mg_xprintf(out, ptr, ",");
 80223a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80223a8:	2b00      	cmp	r3, #0
 80223aa:	d008      	beq.n	80223be <print_array+0x9e>
 80223ac:	4a1b      	ldr	r2, [pc, #108]	@ (802241c <print_array+0xfc>)
 80223ae:	6939      	ldr	r1, [r7, #16]
 80223b0:	6978      	ldr	r0, [r7, #20]
 80223b2:	f7e5 f9a6 	bl	8007702 <mg_xprintf>
 80223b6:	4602      	mov	r2, r0
 80223b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80223ba:	4413      	add	r3, r2
 80223bc:	63bb      	str	r3, [r7, #56]	@ 0x38
    len += mg_xprintf(out, ptr, "{%M}", print_struct, ha->attributes, data);
 80223be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80223c0:	699b      	ldr	r3, [r3, #24]
 80223c2:	69ba      	ldr	r2, [r7, #24]
 80223c4:	9201      	str	r2, [sp, #4]
 80223c6:	9300      	str	r3, [sp, #0]
 80223c8:	4b15      	ldr	r3, [pc, #84]	@ (8022420 <print_array+0x100>)
 80223ca:	4a16      	ldr	r2, [pc, #88]	@ (8022424 <print_array+0x104>)
 80223cc:	6939      	ldr	r1, [r7, #16]
 80223ce:	6978      	ldr	r0, [r7, #20]
 80223d0:	f7e5 f997 	bl	8007702 <mg_xprintf>
 80223d4:	4602      	mov	r2, r0
 80223d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80223d8:	4413      	add	r3, r2
 80223da:	63bb      	str	r3, [r7, #56]	@ 0x38
  for (i = 0; i < max && start + i < size; i++) {
 80223dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80223de:	3301      	adds	r3, #1
 80223e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80223e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80223e4:	69fb      	ldr	r3, [r7, #28]
 80223e6:	429a      	cmp	r2, r3
 80223e8:	d20f      	bcs.n	802240a <print_array+0xea>
 80223ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80223ec:	2200      	movs	r2, #0
 80223ee:	4698      	mov	r8, r3
 80223f0:	4691      	mov	r9, r2
 80223f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80223f6:	eb18 0402 	adds.w	r4, r8, r2
 80223fa:	eb49 0503 	adc.w	r5, r9, r3
 80223fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8022402:	4294      	cmp	r4, r2
 8022404:	eb75 0303 	sbcs.w	r3, r5, r3
 8022408:	d3bb      	bcc.n	8022382 <print_array+0x62>
  }
  free(data);
 802240a:	69b8      	ldr	r0, [r7, #24]
 802240c:	f000 ff16 	bl	802323c <free>
  return len;
 8022410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8022412:	4618      	mov	r0, r3
 8022414:	3744      	adds	r7, #68	@ 0x44
 8022416:	46bd      	mov	sp, r7
 8022418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802241c:	08027618 	.word	0x08027618
 8022420:	08021ed9 	.word	0x08021ed9
 8022424:	08027648 	.word	0x08027648

08022428 <handle_array>:

static void handle_array(struct mg_connection *c, struct mg_http_message *hm,
                         struct apihandler_array *h) {
 8022428:	b590      	push	{r4, r7, lr}
 802242a:	b0a9      	sub	sp, #164	@ 0xa4
 802242c:	af14      	add	r7, sp, #80	@ 0x50
 802242e:	60f8      	str	r0, [r7, #12]
 8022430:	60b9      	str	r1, [r7, #8]
 8022432:	607a      	str	r2, [r7, #4]
  char buf[40] = "";
 8022434:	f107 0320 	add.w	r3, r7, #32
 8022438:	2228      	movs	r2, #40	@ 0x28
 802243a:	2100      	movs	r1, #0
 802243c:	4618      	mov	r0, r3
 802243e:	f001 f9ae 	bl	802379e <memset>
  uint64_t size = h->sizer();
 8022442:	687b      	ldr	r3, [r7, #4]
 8022444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022446:	4798      	blx	r3
 8022448:	4602      	mov	r2, r0
 802244a:	460b      	mov	r3, r1
 802244c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  uint64_t start = 0;
 8022450:	f04f 0200 	mov.w	r2, #0
 8022454:	f04f 0300 	mov.w	r3, #0
 8022458:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_get_var(&hm->query, "start", buf, sizeof(buf));
 802245c:	68bb      	ldr	r3, [r7, #8]
 802245e:	f103 0010 	add.w	r0, r3, #16
 8022462:	f107 0220 	add.w	r2, r7, #32
 8022466:	2328      	movs	r3, #40	@ 0x28
 8022468:	4927      	ldr	r1, [pc, #156]	@ (8022508 <handle_array+0xe0>)
 802246a:	f7e6 f875 	bl	8008558 <mg_http_get_var>
  if (!mg_str_to_num(mg_str(buf), 10, &start, sizeof(start))) start = 0;
 802246e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8022472:	f107 0220 	add.w	r2, r7, #32
 8022476:	4611      	mov	r1, r2
 8022478:	4618      	mov	r0, r3
 802247a:	f7f1 fe27 	bl	80140cc <mg_str_s>
 802247e:	f107 0310 	add.w	r3, r7, #16
 8022482:	2208      	movs	r2, #8
 8022484:	9200      	str	r2, [sp, #0]
 8022486:	220a      	movs	r2, #10
 8022488:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 802248c:	c903      	ldmia	r1, {r0, r1}
 802248e:	f7f2 f878 	bl	8014582 <mg_str_to_num>
 8022492:	4603      	mov	r3, r0
 8022494:	f083 0301 	eor.w	r3, r3, #1
 8022498:	b2db      	uxtb	r3, r3
 802249a:	2b00      	cmp	r3, #0
 802249c:	d005      	beq.n	80224aa <handle_array+0x82>
 802249e:	f04f 0200 	mov.w	r2, #0
 80224a2:	f04f 0300 	mov.w	r3, #0
 80224a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  mg_http_reply(c, 200, JSON_HEADERS, "{%m:%llu, %m:%llu, %m:[%M]}\n",
 80224aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80224ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80224b2:	f107 0410 	add.w	r4, r7, #16
 80224b6:	9412      	str	r4, [sp, #72]	@ 0x48
 80224b8:	f107 0418 	add.w	r4, r7, #24
 80224bc:	9411      	str	r4, [sp, #68]	@ 0x44
 80224be:	687c      	ldr	r4, [r7, #4]
 80224c0:	9410      	str	r4, [sp, #64]	@ 0x40
 80224c2:	4c12      	ldr	r4, [pc, #72]	@ (802250c <handle_array+0xe4>)
 80224c4:	940f      	str	r4, [sp, #60]	@ 0x3c
 80224c6:	4c12      	ldr	r4, [pc, #72]	@ (8022510 <handle_array+0xe8>)
 80224c8:	940e      	str	r4, [sp, #56]	@ 0x38
 80224ca:	2400      	movs	r4, #0
 80224cc:	940d      	str	r4, [sp, #52]	@ 0x34
 80224ce:	4c11      	ldr	r4, [pc, #68]	@ (8022514 <handle_array+0xec>)
 80224d0:	940c      	str	r4, [sp, #48]	@ 0x30
 80224d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80224d6:	490c      	ldr	r1, [pc, #48]	@ (8022508 <handle_array+0xe0>)
 80224d8:	9108      	str	r1, [sp, #32]
 80224da:	2100      	movs	r1, #0
 80224dc:	9107      	str	r1, [sp, #28]
 80224de:	490d      	ldr	r1, [pc, #52]	@ (8022514 <handle_array+0xec>)
 80224e0:	9106      	str	r1, [sp, #24]
 80224e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80224e6:	4b0c      	ldr	r3, [pc, #48]	@ (8022518 <handle_array+0xf0>)
 80224e8:	9302      	str	r3, [sp, #8]
 80224ea:	2300      	movs	r3, #0
 80224ec:	9301      	str	r3, [sp, #4]
 80224ee:	4b09      	ldr	r3, [pc, #36]	@ (8022514 <handle_array+0xec>)
 80224f0:	9300      	str	r3, [sp, #0]
 80224f2:	4b0a      	ldr	r3, [pc, #40]	@ (802251c <handle_array+0xf4>)
 80224f4:	4a0a      	ldr	r2, [pc, #40]	@ (8022520 <handle_array+0xf8>)
 80224f6:	21c8      	movs	r1, #200	@ 0xc8
 80224f8:	68f8      	ldr	r0, [r7, #12]
 80224fa:	f7e7 fa0b 	bl	8009914 <mg_http_reply>
                MG_ESC("size"), size, MG_ESC("start"), start, MG_ESC("data"),
                print_array, h, &size, &start);
}
 80224fe:	bf00      	nop
 8022500:	3754      	adds	r7, #84	@ 0x54
 8022502:	46bd      	mov	sp, r7
 8022504:	bd90      	pop	{r4, r7, pc}
 8022506:	bf00      	nop
 8022508:	08027650 	.word	0x08027650
 802250c:	08022321 	.word	0x08022321
 8022510:	08027340 	.word	0x08027340
 8022514:	08010dcd 	.word	0x08010dcd
 8022518:	08027678 	.word	0x08027678
 802251c:	08027658 	.word	0x08027658
 8022520:	080275c4 	.word	0x080275c4

08022524 <handle_file>:
  }
  return len;
}

static void handle_file(struct mg_connection *c, struct mg_http_message *hm,
                        struct apihandler_file *hf) {
 8022524:	b580      	push	{r7, lr}
 8022526:	b09e      	sub	sp, #120	@ 0x78
 8022528:	af00      	add	r7, sp, #0
 802252a:	60f8      	str	r0, [r7, #12]
 802252c:	60b9      	str	r1, [r7, #8]
 802252e:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  get_file_name_from_uri(hm->uri, path, sizeof(path));
 8022530:	f107 0214 	add.w	r2, r7, #20
 8022534:	68b9      	ldr	r1, [r7, #8]
 8022536:	2364      	movs	r3, #100	@ 0x64
 8022538:	3108      	adds	r1, #8
 802253a:	c903      	ldmia	r1, {r0, r1}
 802253c:	f7ff fb62 	bl	8021c04 <get_file_name_from_uri>
  hf->server(c, hm, path);
 8022540:	687b      	ldr	r3, [r7, #4]
 8022542:	69db      	ldr	r3, [r3, #28]
 8022544:	f107 0214 	add.w	r2, r7, #20
 8022548:	68b9      	ldr	r1, [r7, #8]
 802254a:	68f8      	ldr	r0, [r7, #12]
 802254c:	4798      	blx	r3
}
 802254e:	bf00      	nop
 8022550:	3778      	adds	r7, #120	@ 0x78
 8022552:	46bd      	mov	sp, r7
 8022554:	bd80      	pop	{r7, pc}
	...

08022558 <handle_api_call>:

static void handle_api_call(struct mg_connection *c, struct mg_http_message *hm,
                            struct apihandler *h) {
 8022558:	b580      	push	{r7, lr}
 802255a:	b088      	sub	sp, #32
 802255c:	af02      	add	r7, sp, #8
 802255e:	60f8      	str	r0, [r7, #12]
 8022560:	60b9      	str	r1, [r7, #8]
 8022562:	607a      	str	r2, [r7, #4]
  if (strcmp(h->type, "object") == 0 || strcmp(h->type, "data") == 0) {
 8022564:	687b      	ldr	r3, [r7, #4]
 8022566:	685b      	ldr	r3, [r3, #4]
 8022568:	4932      	ldr	r1, [pc, #200]	@ (8022634 <handle_api_call+0xdc>)
 802256a:	4618      	mov	r0, r3
 802256c:	f7dd fed0 	bl	8000310 <strcmp>
 8022570:	4603      	mov	r3, r0
 8022572:	2b00      	cmp	r3, #0
 8022574:	d008      	beq.n	8022588 <handle_api_call+0x30>
 8022576:	687b      	ldr	r3, [r7, #4]
 8022578:	685b      	ldr	r3, [r3, #4]
 802257a:	492f      	ldr	r1, [pc, #188]	@ (8022638 <handle_api_call+0xe0>)
 802257c:	4618      	mov	r0, r3
 802257e:	f7dd fec7 	bl	8000310 <strcmp>
 8022582:	4603      	mov	r3, r0
 8022584:	2b00      	cmp	r3, #0
 8022586:	d105      	bne.n	8022594 <handle_api_call+0x3c>
    handle_object(c, hm, (struct apihandler_data *) h);
 8022588:	687a      	ldr	r2, [r7, #4]
 802258a:	68b9      	ldr	r1, [r7, #8]
 802258c:	68f8      	ldr	r0, [r7, #12]
 802258e:	f7ff fdab 	bl	80220e8 <handle_object>
  } else if (strcmp(h->type, "custom") == 0) {
    ((struct apihandler_custom *) h)->reply(c, hm);
  } else {
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
  }
}
 8022592:	e04a      	b.n	802262a <handle_api_call+0xd2>
  } else if (strcmp(h->type, "array") == 0) {
 8022594:	687b      	ldr	r3, [r7, #4]
 8022596:	685b      	ldr	r3, [r3, #4]
 8022598:	4928      	ldr	r1, [pc, #160]	@ (802263c <handle_api_call+0xe4>)
 802259a:	4618      	mov	r0, r3
 802259c:	f7dd feb8 	bl	8000310 <strcmp>
 80225a0:	4603      	mov	r3, r0
 80225a2:	2b00      	cmp	r3, #0
 80225a4:	d105      	bne.n	80225b2 <handle_api_call+0x5a>
    handle_array(c, hm, (struct apihandler_array *) h);
 80225a6:	687a      	ldr	r2, [r7, #4]
 80225a8:	68b9      	ldr	r1, [r7, #8]
 80225aa:	68f8      	ldr	r0, [r7, #12]
 80225ac:	f7ff ff3c 	bl	8022428 <handle_array>
}
 80225b0:	e03b      	b.n	802262a <handle_api_call+0xd2>
  } else if (strcmp(h->type, "action") == 0) {
 80225b2:	687b      	ldr	r3, [r7, #4]
 80225b4:	685b      	ldr	r3, [r3, #4]
 80225b6:	4922      	ldr	r1, [pc, #136]	@ (8022640 <handle_api_call+0xe8>)
 80225b8:	4618      	mov	r0, r3
 80225ba:	f7dd fea9 	bl	8000310 <strcmp>
 80225be:	4603      	mov	r3, r0
 80225c0:	2b00      	cmp	r3, #0
 80225c2:	d10a      	bne.n	80225da <handle_api_call+0x82>
    struct apihandler_action *ha = (struct apihandler_action *) h;
 80225c4:	687b      	ldr	r3, [r7, #4]
 80225c6:	617b      	str	r3, [r7, #20]
    handle_action(c, hm, ha->checker, ha->starter);
 80225c8:	697b      	ldr	r3, [r7, #20]
 80225ca:	699a      	ldr	r2, [r3, #24]
 80225cc:	697b      	ldr	r3, [r7, #20]
 80225ce:	69db      	ldr	r3, [r3, #28]
 80225d0:	68b9      	ldr	r1, [r7, #8]
 80225d2:	68f8      	ldr	r0, [r7, #12]
 80225d4:	f7ff fc3c 	bl	8021e50 <handle_action>
}
 80225d8:	e027      	b.n	802262a <handle_api_call+0xd2>
  } else if (strcmp(h->type, "file") == 0) {
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	685b      	ldr	r3, [r3, #4]
 80225de:	4919      	ldr	r1, [pc, #100]	@ (8022644 <handle_api_call+0xec>)
 80225e0:	4618      	mov	r0, r3
 80225e2:	f7dd fe95 	bl	8000310 <strcmp>
 80225e6:	4603      	mov	r3, r0
 80225e8:	2b00      	cmp	r3, #0
 80225ea:	d105      	bne.n	80225f8 <handle_api_call+0xa0>
    handle_file(c, hm, (struct apihandler_file *) h);
 80225ec:	687a      	ldr	r2, [r7, #4]
 80225ee:	68b9      	ldr	r1, [r7, #8]
 80225f0:	68f8      	ldr	r0, [r7, #12]
 80225f2:	f7ff ff97 	bl	8022524 <handle_file>
}
 80225f6:	e018      	b.n	802262a <handle_api_call+0xd2>
  } else if (strcmp(h->type, "custom") == 0) {
 80225f8:	687b      	ldr	r3, [r7, #4]
 80225fa:	685b      	ldr	r3, [r3, #4]
 80225fc:	4912      	ldr	r1, [pc, #72]	@ (8022648 <handle_api_call+0xf0>)
 80225fe:	4618      	mov	r0, r3
 8022600:	f7dd fe86 	bl	8000310 <strcmp>
 8022604:	4603      	mov	r3, r0
 8022606:	2b00      	cmp	r3, #0
 8022608:	d105      	bne.n	8022616 <handle_api_call+0xbe>
    ((struct apihandler_custom *) h)->reply(c, hm);
 802260a:	687b      	ldr	r3, [r7, #4]
 802260c:	699b      	ldr	r3, [r3, #24]
 802260e:	68b9      	ldr	r1, [r7, #8]
 8022610:	68f8      	ldr	r0, [r7, #12]
 8022612:	4798      	blx	r3
}
 8022614:	e009      	b.n	802262a <handle_api_call+0xd2>
    mg_http_reply(c, 500, JSON_HEADERS, "API type %s unknown\n", h->type);
 8022616:	687b      	ldr	r3, [r7, #4]
 8022618:	685b      	ldr	r3, [r3, #4]
 802261a:	9300      	str	r3, [sp, #0]
 802261c:	4b0b      	ldr	r3, [pc, #44]	@ (802264c <handle_api_call+0xf4>)
 802261e:	4a0c      	ldr	r2, [pc, #48]	@ (8022650 <handle_api_call+0xf8>)
 8022620:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8022624:	68f8      	ldr	r0, [r7, #12]
 8022626:	f7e7 f975 	bl	8009914 <mg_http_reply>
}
 802262a:	bf00      	nop
 802262c:	3718      	adds	r7, #24
 802262e:	46bd      	mov	sp, r7
 8022630:	bd80      	pop	{r7, pc}
 8022632:	bf00      	nop
 8022634:	0802768c 	.word	0x0802768c
 8022638:	08027340 	.word	0x08027340
 802263c:	08027694 	.word	0x08027694
 8022640:	080272e8 	.word	0x080272e8
 8022644:	080273cc 	.word	0x080273cc
 8022648:	08027330 	.word	0x08027330
 802264c:	0802769c 	.word	0x0802769c
 8022650:	080275c4 	.word	0x080275c4

08022654 <http_ev_handler>:
void glue_update_state(void) {
  s_device_change_version++;
}

// Mongoose event handler function, gets called by the mg_mgr_poll()
static void http_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8022654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022656:	b0b5      	sub	sp, #212	@ 0xd4
 8022658:	af06      	add	r7, sp, #24
 802265a:	61f8      	str	r0, [r7, #28]
 802265c:	61b9      	str	r1, [r7, #24]
 802265e:	617a      	str	r2, [r7, #20]
  if (ev == MG_EV_HTTP_HDRS && c->data[0] == 0) {
 8022660:	69bb      	ldr	r3, [r7, #24]
 8022662:	2b0a      	cmp	r3, #10
 8022664:	d164      	bne.n	8022730 <http_ev_handler+0xdc>
 8022666:	69fb      	ldr	r3, [r7, #28]
 8022668:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 802266c:	2b00      	cmp	r3, #0
 802266e:	d15f      	bne.n	8022730 <http_ev_handler+0xdc>
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8022670:	697b      	ldr	r3, [r7, #20]
 8022672:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 8022676:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 802267a:	49b4      	ldr	r1, [pc, #720]	@ (802294c <http_ev_handler+0x2f8>)
 802267c:	4618      	mov	r0, r3
 802267e:	f7f1 fd25 	bl	80140cc <mg_str_s>
 8022682:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8022686:	2300      	movs	r3, #0
 8022688:	9300      	str	r3, [sp, #0]
 802268a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 802268e:	cb0c      	ldmia	r3, {r2, r3}
 8022690:	3108      	adds	r1, #8
 8022692:	c903      	ldmia	r1, {r0, r1}
 8022694:	f7f1 fe24 	bl	80142e0 <mg_match>
 8022698:	4603      	mov	r3, r0
 802269a:	2b00      	cmp	r3, #0
 802269c:	d113      	bne.n	80226c6 <http_ev_handler+0x72>
        mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 802269e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80226a2:	49ab      	ldr	r1, [pc, #684]	@ (8022950 <http_ev_handler+0x2fc>)
 80226a4:	4618      	mov	r0, r3
 80226a6:	f7f1 fd11 	bl	80140cc <mg_str_s>
 80226aa:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80226ae:	2300      	movs	r3, #0
 80226b0:	9300      	str	r3, [sp, #0]
 80226b2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80226b6:	cb0c      	ldmia	r3, {r2, r3}
 80226b8:	3108      	adds	r1, #8
 80226ba:	c903      	ldmia	r1, {r0, r1}
 80226bc:	f7f1 fe10 	bl	80142e0 <mg_match>
 80226c0:	4603      	mov	r3, r0
    if (mg_match(hm->uri, mg_str("/api/#"), NULL) ||
 80226c2:	2b00      	cmp	r3, #0
 80226c4:	d034      	beq.n	8022730 <http_ev_handler+0xdc>
      struct apihandler *h = find_handler(hm);
 80226c6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80226ca:	f7fe fe9d 	bl	8021408 <find_handler>
 80226ce:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
      struct user *u = authenticate(hm);
 80226d2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
 80226d6:	f7fe ffb7 	bl	8021648 <authenticate>
 80226da:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
      if ((u == NULL ||
 80226de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80226e2:	2b00      	cmp	r3, #0
 80226e4:	d019      	beq.n	802271a <http_ev_handler+0xc6>
 80226e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	d020      	beq.n	8022730 <http_ev_handler+0xdc>
           (h != NULL && (u->level < h->read_level ||
 80226ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80226f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80226f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80226f8:	68db      	ldr	r3, [r3, #12]
 80226fa:	429a      	cmp	r2, r3
 80226fc:	db0d      	blt.n	802271a <http_ev_handler+0xc6>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 80226fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8022702:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
           (h != NULL && (u->level < h->read_level ||
 8022706:	2b00      	cmp	r3, #0
 8022708:	d012      	beq.n	8022730 <http_ev_handler+0xdc>
                          (hm->body.len > 0 && u->level < h->write_level))))) {
 802270a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802270e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8022710:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8022714:	691b      	ldr	r3, [r3, #16]
 8022716:	429a      	cmp	r2, r3
 8022718:	da0a      	bge.n	8022730 <http_ev_handler+0xdc>
        mg_http_reply(c, 403, JSON_HEADERS, "Not Authorised\n");
 802271a:	4b8e      	ldr	r3, [pc, #568]	@ (8022954 <http_ev_handler+0x300>)
 802271c:	4a8e      	ldr	r2, [pc, #568]	@ (8022958 <http_ev_handler+0x304>)
 802271e:	f240 1193 	movw	r1, #403	@ 0x193
 8022722:	69f8      	ldr	r0, [r7, #28]
 8022724:	f7e7 f8f6 	bl	8009914 <mg_http_reply>
        c->data[0] = 'Z';  // Mark this connection as handled
 8022728:	69fb      	ldr	r3, [r7, #28]
 802272a:	225a      	movs	r2, #90	@ 0x5a
 802272c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
    }
#endif
  }

  // We're checking c->is_websocket cause WS connection use c->data
  if (c->is_websocket == 0) handle_uploads(c, ev, ev_data);
 8022730:	69fb      	ldr	r3, [r7, #28]
 8022732:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8022736:	f003 0302 	and.w	r3, r3, #2
 802273a:	b2db      	uxtb	r3, r3
 802273c:	2b00      	cmp	r3, #0
 802273e:	d104      	bne.n	802274a <http_ev_handler+0xf6>
 8022740:	697a      	ldr	r2, [r7, #20]
 8022742:	69b9      	ldr	r1, [r7, #24]
 8022744:	69f8      	ldr	r0, [r7, #28]
 8022746:	f7ff fb11 	bl	8021d6c <handle_uploads>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 802274a:	69bb      	ldr	r3, [r7, #24]
 802274c:	2b02      	cmp	r3, #2
 802274e:	d128      	bne.n	80227a2 <http_ev_handler+0x14e>
 8022750:	69fb      	ldr	r3, [r7, #28]
 8022752:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8022756:	f003 0302 	and.w	r3, r3, #2
 802275a:	b2db      	uxtb	r3, r3
 802275c:	2b00      	cmp	r3, #0
 802275e:	d120      	bne.n	80227a2 <http_ev_handler+0x14e>
 8022760:	69fb      	ldr	r3, [r7, #28]
 8022762:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8022766:	2b41      	cmp	r3, #65	@ 0x41
 8022768:	d11b      	bne.n	80227a2 <http_ev_handler+0x14e>
    // Check if action in progress is complete
    struct action_state *as = (struct action_state *) c->data;
 802276a:	69fb      	ldr	r3, [r7, #28]
 802276c:	3388      	adds	r3, #136	@ 0x88
 802276e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (as->fn() == false) {
 8022772:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8022776:	685b      	ldr	r3, [r3, #4]
 8022778:	4798      	blx	r3
 802277a:	4603      	mov	r3, r0
 802277c:	f083 0301 	eor.w	r3, r3, #1
 8022780:	b2db      	uxtb	r3, r3
 8022782:	2b00      	cmp	r3, #0
 8022784:	f000 813b 	beq.w	80229fe <http_ev_handler+0x3aa>
      mg_http_reply(c, 200, JSON_HEADERS, "true");
 8022788:	4b74      	ldr	r3, [pc, #464]	@ (802295c <http_ev_handler+0x308>)
 802278a:	4a73      	ldr	r2, [pc, #460]	@ (8022958 <http_ev_handler+0x304>)
 802278c:	21c8      	movs	r1, #200	@ 0xc8
 802278e:	69f8      	ldr	r0, [r7, #28]
 8022790:	f7e7 f8c0 	bl	8009914 <mg_http_reply>
      memset(as, 0, sizeof(*as));
 8022794:	2208      	movs	r2, #8
 8022796:	2100      	movs	r1, #0
 8022798:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 802279c:	f000 ffff 	bl	802379e <memset>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 80227a0:	e12d      	b.n	80229fe <http_ev_handler+0x3aa>
    }
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80227a2:	69bb      	ldr	r3, [r7, #24]
 80227a4:	2b0b      	cmp	r3, #11
 80227a6:	f040 80f3 	bne.w	8022990 <http_ev_handler+0x33c>
 80227aa:	69fb      	ldr	r3, [r7, #28]
 80227ac:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 80227b0:	f003 0302 	and.w	r3, r3, #2
 80227b4:	b2db      	uxtb	r3, r3
 80227b6:	2b00      	cmp	r3, #0
 80227b8:	f040 80ea 	bne.w	8022990 <http_ev_handler+0x33c>
 80227bc:	69fb      	ldr	r3, [r7, #28]
 80227be:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80227c2:	2b00      	cmp	r3, #0
 80227c4:	f040 80e4 	bne.w	8022990 <http_ev_handler+0x33c>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 80227c8:	697b      	ldr	r3, [r7, #20]
 80227ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
#if WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    struct apihandler *h = find_handler(hm);
 80227ce:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80227d2:	f7fe fe19 	bl	8021408 <find_handler>
 80227d6:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
#if WIZARD_ENABLE_HTTP_UI_LOGIN
    struct user *u = authenticate(hm);
 80227da:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80227de:	f7fe ff33 	bl	8021648 <authenticate>
 80227e2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
    if (mg_match(hm->uri, mg_str("/api/login"), NULL)) {
 80227e6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80227ea:	495d      	ldr	r1, [pc, #372]	@ (8022960 <http_ev_handler+0x30c>)
 80227ec:	4618      	mov	r0, r3
 80227ee:	f7f1 fc6d 	bl	80140cc <mg_str_s>
 80227f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80227f6:	2300      	movs	r3, #0
 80227f8:	9300      	str	r3, [sp, #0]
 80227fa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80227fe:	cb0c      	ldmia	r3, {r2, r3}
 8022800:	3108      	adds	r1, #8
 8022802:	c903      	ldmia	r1, {r0, r1}
 8022804:	f7f1 fd6c 	bl	80142e0 <mg_match>
 8022808:	4603      	mov	r3, r0
 802280a:	2b00      	cmp	r3, #0
 802280c:	d005      	beq.n	802281a <http_ev_handler+0x1c6>
      handle_login(c, u);
 802280e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8022812:	69f8      	ldr	r0, [r7, #28]
 8022814:	f7fe fffc 	bl	8021810 <handle_login>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8022818:	e0f3      	b.n	8022a02 <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/logout"), NULL)) {
 802281a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 802281e:	4951      	ldr	r1, [pc, #324]	@ (8022964 <http_ev_handler+0x310>)
 8022820:	4618      	mov	r0, r3
 8022822:	f7f1 fc53 	bl	80140cc <mg_str_s>
 8022826:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802282a:	2300      	movs	r3, #0
 802282c:	9300      	str	r3, [sp, #0]
 802282e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8022832:	cb0c      	ldmia	r3, {r2, r3}
 8022834:	3108      	adds	r1, #8
 8022836:	c903      	ldmia	r1, {r0, r1}
 8022838:	f7f1 fd52 	bl	80142e0 <mg_match>
 802283c:	4603      	mov	r3, r0
 802283e:	2b00      	cmp	r3, #0
 8022840:	d003      	beq.n	802284a <http_ev_handler+0x1f6>
      handle_logout(c);
 8022842:	69f8      	ldr	r0, [r7, #28]
 8022844:	f7ff f852 	bl	80218ec <handle_logout>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8022848:	e0db      	b.n	8022a02 <http_ev_handler+0x3ae>
    } else
#endif
        if (mg_match(hm->uri, mg_str("/api/ok"), NULL)) {
 802284a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 802284e:	4946      	ldr	r1, [pc, #280]	@ (8022968 <http_ev_handler+0x314>)
 8022850:	4618      	mov	r0, r3
 8022852:	f7f1 fc3b 	bl	80140cc <mg_str_s>
 8022856:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802285a:	2300      	movs	r3, #0
 802285c:	9300      	str	r3, [sp, #0]
 802285e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8022862:	cb0c      	ldmia	r3, {r2, r3}
 8022864:	3108      	adds	r1, #8
 8022866:	c903      	ldmia	r1, {r0, r1}
 8022868:	f7f1 fd3a 	bl	80142e0 <mg_match>
 802286c:	4603      	mov	r3, r0
 802286e:	2b00      	cmp	r3, #0
 8022870:	d006      	beq.n	8022880 <http_ev_handler+0x22c>
      mg_http_reply(c, 200, JSON_HEADERS, "true\n");
 8022872:	4b3e      	ldr	r3, [pc, #248]	@ (802296c <http_ev_handler+0x318>)
 8022874:	4a38      	ldr	r2, [pc, #224]	@ (8022958 <http_ev_handler+0x304>)
 8022876:	21c8      	movs	r1, #200	@ 0xc8
 8022878:	69f8      	ldr	r0, [r7, #28]
 802287a:	f7e7 f84b 	bl	8009914 <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802287e:	e0c0      	b.n	8022a02 <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/websocket"), NULL)) {
 8022880:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8022884:	4932      	ldr	r1, [pc, #200]	@ (8022950 <http_ev_handler+0x2fc>)
 8022886:	4618      	mov	r0, r3
 8022888:	f7f1 fc20 	bl	80140cc <mg_str_s>
 802288c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8022890:	2300      	movs	r3, #0
 8022892:	9300      	str	r3, [sp, #0]
 8022894:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8022898:	cb0c      	ldmia	r3, {r2, r3}
 802289a:	3108      	adds	r1, #8
 802289c:	c903      	ldmia	r1, {r0, r1}
 802289e:	f7f1 fd1f 	bl	80142e0 <mg_match>
 80228a2:	4603      	mov	r3, r0
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	d006      	beq.n	80228b6 <http_ev_handler+0x262>
      mg_ws_upgrade(c, hm, NULL);
 80228a8:	2200      	movs	r2, #0
 80228aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80228ae:	69f8      	ldr	r0, [r7, #28]
 80228b0:	f7fd fafa 	bl	801fea8 <mg_ws_upgrade>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80228b4:	e0a5      	b.n	8022a02 <http_ev_handler+0x3ae>
    } else if (mg_match(hm->uri, mg_str("/api/heartbeat"), NULL)) {
 80228b6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80228ba:	492d      	ldr	r1, [pc, #180]	@ (8022970 <http_ev_handler+0x31c>)
 80228bc:	4618      	mov	r0, r3
 80228be:	f7f1 fc05 	bl	80140cc <mg_str_s>
 80228c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80228c6:	2300      	movs	r3, #0
 80228c8:	9300      	str	r3, [sp, #0]
 80228ca:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80228ce:	cb0c      	ldmia	r3, {r2, r3}
 80228d0:	3108      	adds	r1, #8
 80228d2:	c903      	ldmia	r1, {r0, r1}
 80228d4:	f7f1 fd04 	bl	80142e0 <mg_match>
 80228d8:	4603      	mov	r3, r0
 80228da:	2b00      	cmp	r3, #0
 80228dc:	d00f      	beq.n	80228fe <http_ev_handler+0x2aa>
      mg_http_reply(c, 200, JSON_HEADERS, "{%m:%lu}\n", MG_ESC("version"),
 80228de:	4b25      	ldr	r3, [pc, #148]	@ (8022974 <http_ev_handler+0x320>)
 80228e0:	681b      	ldr	r3, [r3, #0]
 80228e2:	9303      	str	r3, [sp, #12]
 80228e4:	4b24      	ldr	r3, [pc, #144]	@ (8022978 <http_ev_handler+0x324>)
 80228e6:	9302      	str	r3, [sp, #8]
 80228e8:	2300      	movs	r3, #0
 80228ea:	9301      	str	r3, [sp, #4]
 80228ec:	4b23      	ldr	r3, [pc, #140]	@ (802297c <http_ev_handler+0x328>)
 80228ee:	9300      	str	r3, [sp, #0]
 80228f0:	4b23      	ldr	r3, [pc, #140]	@ (8022980 <http_ev_handler+0x32c>)
 80228f2:	4a19      	ldr	r2, [pc, #100]	@ (8022958 <http_ev_handler+0x304>)
 80228f4:	21c8      	movs	r1, #200	@ 0xc8
 80228f6:	69f8      	ldr	r0, [r7, #28]
 80228f8:	f7e7 f80c 	bl	8009914 <mg_http_reply>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 80228fc:	e081      	b.n	8022a02 <http_ev_handler+0x3ae>
                    s_device_change_version);
    } else if (h != NULL) {
 80228fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8022902:	2b00      	cmp	r3, #0
 8022904:	d007      	beq.n	8022916 <http_ev_handler+0x2c2>
      handle_api_call(c, hm, h);
 8022906:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 802290a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 802290e:	69f8      	ldr	r0, [r7, #28]
 8022910:	f7ff fe22 	bl	8022558 <handle_api_call>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8022914:	e075      	b.n	8022a02 <http_ev_handler+0x3ae>
    } else if (c->data[0] == 0)
 8022916:	69fb      	ldr	r3, [r7, #28]
 8022918:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 802291c:	2b00      	cmp	r3, #0
 802291e:	d170      	bne.n	8022a02 <http_ev_handler+0x3ae>
#endif  // WIZARD_ENABLE_HTTP || WIZARD_ENABLE_HTTPS
    {
#if WIZARD_ENABLE_HTTP_UI
      struct mg_http_serve_opts opts;
      memset(&opts, 0, sizeof(opts));
 8022920:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8022924:	2218      	movs	r2, #24
 8022926:	2100      	movs	r1, #0
 8022928:	4618      	mov	r0, r3
 802292a:	f000 ff38 	bl	802379e <memset>
      opts.root_dir = "/web_root/";
 802292e:	4b15      	ldr	r3, [pc, #84]	@ (8022984 <http_ev_handler+0x330>)
 8022930:	64bb      	str	r3, [r7, #72]	@ 0x48
      opts.fs = &mg_fs_packed;
 8022932:	4b15      	ldr	r3, [pc, #84]	@ (8022988 <http_ev_handler+0x334>)
 8022934:	65fb      	str	r3, [r7, #92]	@ 0x5c
      opts.extra_headers = NO_CACHE_HEADERS;
 8022936:	4b15      	ldr	r3, [pc, #84]	@ (802298c <http_ev_handler+0x338>)
 8022938:	653b      	str	r3, [r7, #80]	@ 0x50
      mg_http_serve_dir(c, hm, &opts);
 802293a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 802293e:	461a      	mov	r2, r3
 8022940:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8022944:	69f8      	ldr	r0, [r7, #28]
 8022946:	f7e7 fef7 	bl	800a738 <mg_http_serve_dir>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 802294a:	e05a      	b.n	8022a02 <http_ev_handler+0x3ae>
 802294c:	080276b4 	.word	0x080276b4
 8022950:	080276bc 	.word	0x080276bc
 8022954:	080276c8 	.word	0x080276c8
 8022958:	080275c4 	.word	0x080275c4
 802295c:	08027610 	.word	0x08027610
 8022960:	080276d8 	.word	0x080276d8
 8022964:	080276e4 	.word	0x080276e4
 8022968:	080276f0 	.word	0x080276f0
 802296c:	080276f8 	.word	0x080276f8
 8022970:	08027700 	.word	0x08027700
 8022974:	2400442c 	.word	0x2400442c
 8022978:	08027208 	.word	0x08027208
 802297c:	08010dcd 	.word	0x08010dcd
 8022980:	08027710 	.word	0x08027710
 8022984:	0802771c 	.word	0x0802771c
 8022988:	24000010 	.word	0x24000010
 802298c:	08027728 	.word	0x08027728
#else
      mg_http_reply(c, 200, "", ":)\n");
#endif  // WIZARD_ENABLE_HTTP_UI
    }
  } else if (ev == MG_EV_WS_MSG || ev == MG_EV_WS_CTL) {
 8022990:	69bb      	ldr	r3, [r7, #24]
 8022992:	2b0d      	cmp	r3, #13
 8022994:	d036      	beq.n	8022a04 <http_ev_handler+0x3b0>
 8022996:	69bb      	ldr	r3, [r7, #24]
 8022998:	2b0e      	cmp	r3, #14
 802299a:	d033      	beq.n	8022a04 <http_ev_handler+0x3b0>
    // Ignore received data
  } else if (ev == MG_EV_ACCEPT) {
 802299c:	69bb      	ldr	r3, [r7, #24]
 802299e:	2b05      	cmp	r3, #5
 80229a0:	d130      	bne.n	8022a04 <http_ev_handler+0x3b0>
    if (c->fn_data != NULL) {  // TLS listener
 80229a2:	69fb      	ldr	r3, [r7, #28]
 80229a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	d02c      	beq.n	8022a04 <http_ev_handler+0x3b0>
      struct mg_tls_opts opts;
      memset(&opts, 0, sizeof(opts));
 80229aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80229ae:	2224      	movs	r2, #36	@ 0x24
 80229b0:	2100      	movs	r1, #0
 80229b2:	4618      	mov	r0, r3
 80229b4:	f000 fef3 	bl	802379e <memset>
      opts.cert = mg_str(TLS_CERT);
 80229b8:	f107 0308 	add.w	r3, r7, #8
 80229bc:	493a      	ldr	r1, [pc, #232]	@ (8022aa8 <http_ev_handler+0x454>)
 80229be:	4618      	mov	r0, r3
 80229c0:	f7f1 fb84 	bl	80140cc <mg_str_s>
 80229c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80229c8:	f107 0208 	add.w	r2, r7, #8
 80229cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80229d0:	e883 0003 	stmia.w	r3, {r0, r1}
      opts.key = mg_str(TLS_KEY);
 80229d4:	f107 0308 	add.w	r3, r7, #8
 80229d8:	4934      	ldr	r1, [pc, #208]	@ (8022aac <http_ev_handler+0x458>)
 80229da:	4618      	mov	r0, r3
 80229dc:	f7f1 fb76 	bl	80140cc <mg_str_s>
 80229e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80229e4:	f107 0208 	add.w	r2, r7, #8
 80229e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80229ec:	e883 0003 	stmia.w	r3, {r0, r1}
      mg_tls_init(c, &opts);
 80229f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80229f4:	4619      	mov	r1, r3
 80229f6:	69f8      	ldr	r0, [r7, #28]
 80229f8:	f7f5 ff08 	bl	801880c <mg_tls_init>
 80229fc:	e002      	b.n	8022a04 <http_ev_handler+0x3b0>
  if (ev == MG_EV_POLL && c->is_websocket == 0 && c->data[0] == 'A') {
 80229fe:	bf00      	nop
 8022a00:	e000      	b.n	8022a04 <http_ev_handler+0x3b0>
  } else if (ev == MG_EV_HTTP_MSG && c->is_websocket == 0 && c->data[0] == 0) {
 8022a02:	bf00      	nop
    }
  }

  if (ev == MG_EV_HTTP_MSG) {
 8022a04:	69bb      	ldr	r3, [r7, #24]
 8022a06:	2b0b      	cmp	r3, #11
 8022a08:	d149      	bne.n	8022a9e <http_ev_handler+0x44a>
    // Show this request
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 8022a0a:	697b      	ldr	r3, [r7, #20]
 8022a0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    MG_DEBUG(("%lu %.*s %.*s %lu -> %.*s %lu", c->id, hm->method.len,
 8022a10:	4b27      	ldr	r3, [pc, #156]	@ (8022ab0 <http_ev_handler+0x45c>)
 8022a12:	681b      	ldr	r3, [r3, #0]
 8022a14:	2b02      	cmp	r3, #2
 8022a16:	dd32      	ble.n	8022a7e <http_ev_handler+0x42a>
 8022a18:	4b26      	ldr	r3, [pc, #152]	@ (8022ab4 <http_ev_handler+0x460>)
 8022a1a:	f44f 7229 	mov.w	r2, #676	@ 0x2a4
 8022a1e:	4926      	ldr	r1, [pc, #152]	@ (8022ab8 <http_ev_handler+0x464>)
 8022a20:	2003      	movs	r0, #3
 8022a22:	f7e9 fd07 	bl	800c434 <mg_log_prefix>
 8022a26:	69fb      	ldr	r3, [r7, #28]
 8022a28:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8022a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8022a2e:	685b      	ldr	r3, [r3, #4]
 8022a30:	607b      	str	r3, [r7, #4]
 8022a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8022a36:	681b      	ldr	r3, [r3, #0]
 8022a38:	603b      	str	r3, [r7, #0]
 8022a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8022a3e:	68db      	ldr	r3, [r3, #12]
 8022a40:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8022a44:	6892      	ldr	r2, [r2, #8]
 8022a46:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8022a4a:	f8d1 1204 	ldr.w	r1, [r1, #516]	@ 0x204
 8022a4e:	69f8      	ldr	r0, [r7, #28]
 8022a50:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8022a52:	280f      	cmp	r0, #15
 8022a54:	d901      	bls.n	8022a5a <http_ev_handler+0x406>
 8022a56:	2003      	movs	r0, #3
 8022a58:	e000      	b.n	8022a5c <http_ev_handler+0x408>
 8022a5a:	2000      	movs	r0, #0
 8022a5c:	69fc      	ldr	r4, [r7, #28]
 8022a5e:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
 8022a60:	3409      	adds	r4, #9
 8022a62:	69fd      	ldr	r5, [r7, #28]
 8022a64:	6d2d      	ldr	r5, [r5, #80]	@ 0x50
 8022a66:	9505      	str	r5, [sp, #20]
 8022a68:	9404      	str	r4, [sp, #16]
 8022a6a:	9003      	str	r0, [sp, #12]
 8022a6c:	9102      	str	r1, [sp, #8]
 8022a6e:	9201      	str	r2, [sp, #4]
 8022a70:	9300      	str	r3, [sp, #0]
 8022a72:	683b      	ldr	r3, [r7, #0]
 8022a74:	687a      	ldr	r2, [r7, #4]
 8022a76:	4631      	mov	r1, r6
 8022a78:	4810      	ldr	r0, [pc, #64]	@ (8022abc <http_ev_handler+0x468>)
 8022a7a:	f7e9 fd2b 	bl	800c4d4 <mg_log>
              hm->method.buf, hm->uri.len, hm->uri.buf, hm->body.len,
              c->send.len > 15 ? 3 : 0, &c->send.buf[9], c->send.len));
    if (c->data[0] == 'Z') {
 8022a7e:	69fb      	ldr	r3, [r7, #28]
 8022a80:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8022a84:	2b5a      	cmp	r3, #90	@ 0x5a
 8022a86:	d10a      	bne.n	8022a9e <http_ev_handler+0x44a>
      c->data[0] = 0;
 8022a88:	69fb      	ldr	r3, [r7, #28]
 8022a8a:	2200      	movs	r2, #0
 8022a8c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
      c->is_resp = 0;
 8022a90:	69fa      	ldr	r2, [r7, #28]
 8022a92:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
 8022a96:	f023 0301 	bic.w	r3, r3, #1
 8022a9a:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
    }
  }
}
 8022a9e:	bf00      	nop
 8022aa0:	37bc      	adds	r7, #188	@ 0xbc
 8022aa2:	46bd      	mov	sp, r7
 8022aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022aa6:	bf00      	nop
 8022aa8:	08027744 	.word	0x08027744
 8022aac:	08027920 	.word	0x08027920
 8022ab0:	24000258 	.word	0x24000258
 8022ab4:	08035650 	.word	0x08035650
 8022ab8:	08027398 	.word	0x08027398
 8022abc:	08027a04 	.word	0x08027a04

08022ac0 <send_websocket_data>:
    s_ws_handlers[s_ws_handlers_count].fn = fn;
    s_ws_handlers_count++;
  }
};

static void send_websocket_data(void) {
 8022ac0:	b5b0      	push	{r4, r5, r7, lr}
 8022ac2:	b088      	sub	sp, #32
 8022ac4:	af02      	add	r7, sp, #8
  struct mg_connection *c;
  uint64_t now = mg_millis();
 8022ac6:	f7dd fe4f 	bl	8000768 <mg_millis>
 8022aca:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for (c = g_mgr.conns; c != NULL; c = c->next) {
 8022ace:	4b2a      	ldr	r3, [pc, #168]	@ (8022b78 <send_websocket_data+0xb8>)
 8022ad0:	681b      	ldr	r3, [r3, #0]
 8022ad2:	617b      	str	r3, [r7, #20]
 8022ad4:	e048      	b.n	8022b68 <send_websocket_data+0xa8>
    uint64_t *timers = (uint64_t *) &c->data[0];
 8022ad6:	697b      	ldr	r3, [r7, #20]
 8022ad8:	3388      	adds	r3, #136	@ 0x88
 8022ada:	607b      	str	r3, [r7, #4]
    size_t i;

    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 8022adc:	697b      	ldr	r3, [r7, #20]
 8022ade:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 8022ae2:	f003 0302 	and.w	r3, r3, #2
 8022ae6:	b2db      	uxtb	r3, r3
 8022ae8:	2b00      	cmp	r3, #0
 8022aea:	d037      	beq.n	8022b5c <send_websocket_data+0x9c>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 8022aec:	697b      	ldr	r3, [r7, #20]
 8022aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8022af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8022af4:	d834      	bhi.n	8022b60 <send_websocket_data+0xa0>

    for (i = 0; i < s_ws_handlers_count; i++) {
 8022af6:	2300      	movs	r3, #0
 8022af8:	613b      	str	r3, [r7, #16]
 8022afa:	e029      	b.n	8022b50 <send_websocket_data+0x90>
      if (c->pfn_data == NULL ||
 8022afc:	697b      	ldr	r3, [r7, #20]
 8022afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8022b02:	2b00      	cmp	r3, #0
 8022b04:	d016      	beq.n	8022b34 <send_websocket_data+0x74>
          mg_timer_expired(&timers[i], s_ws_handlers[i].timeout_ms, now)) {
 8022b06:	693b      	ldr	r3, [r7, #16]
 8022b08:	00db      	lsls	r3, r3, #3
 8022b0a:	687a      	ldr	r2, [r7, #4]
 8022b0c:	18d1      	adds	r1, r2, r3
 8022b0e:	4a1b      	ldr	r2, [pc, #108]	@ (8022b7c <send_websocket_data+0xbc>)
 8022b10:	693b      	ldr	r3, [r7, #16]
 8022b12:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8022b16:	2200      	movs	r2, #0
 8022b18:	461c      	mov	r4, r3
 8022b1a:	4615      	mov	r5, r2
 8022b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8022b20:	e9cd 2300 	strd	r2, r3, [sp]
 8022b24:	4622      	mov	r2, r4
 8022b26:	462b      	mov	r3, r5
 8022b28:	4608      	mov	r0, r1
 8022b2a:	f7f1 ffa7 	bl	8014a7c <mg_timer_expired>
 8022b2e:	4603      	mov	r3, r0
      if (c->pfn_data == NULL ||
 8022b30:	2b00      	cmp	r3, #0
 8022b32:	d00a      	beq.n	8022b4a <send_websocket_data+0x8a>
        s_ws_handlers[i].fn(c);
 8022b34:	4a11      	ldr	r2, [pc, #68]	@ (8022b7c <send_websocket_data+0xbc>)
 8022b36:	693b      	ldr	r3, [r7, #16]
 8022b38:	00db      	lsls	r3, r3, #3
 8022b3a:	4413      	add	r3, r2
 8022b3c:	685b      	ldr	r3, [r3, #4]
 8022b3e:	6978      	ldr	r0, [r7, #20]
 8022b40:	4798      	blx	r3
        c->pfn_data = (void *) 1;
 8022b42:	697b      	ldr	r3, [r7, #20]
 8022b44:	2201      	movs	r2, #1
 8022b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    for (i = 0; i < s_ws_handlers_count; i++) {
 8022b4a:	693b      	ldr	r3, [r7, #16]
 8022b4c:	3301      	adds	r3, #1
 8022b4e:	613b      	str	r3, [r7, #16]
 8022b50:	4b0b      	ldr	r3, [pc, #44]	@ (8022b80 <send_websocket_data+0xc0>)
 8022b52:	681b      	ldr	r3, [r3, #0]
 8022b54:	693a      	ldr	r2, [r7, #16]
 8022b56:	429a      	cmp	r2, r3
 8022b58:	d3d0      	bcc.n	8022afc <send_websocket_data+0x3c>
 8022b5a:	e002      	b.n	8022b62 <send_websocket_data+0xa2>
    if (c->is_websocket == 0) continue;  // Not a websocket connection? Skip
 8022b5c:	bf00      	nop
 8022b5e:	e000      	b.n	8022b62 <send_websocket_data+0xa2>
    if (c->send.len > 2048) continue;    // Too much data already? Skip
 8022b60:	bf00      	nop
  for (c = g_mgr.conns; c != NULL; c = c->next) {
 8022b62:	697b      	ldr	r3, [r7, #20]
 8022b64:	681b      	ldr	r3, [r3, #0]
 8022b66:	617b      	str	r3, [r7, #20]
 8022b68:	697b      	ldr	r3, [r7, #20]
 8022b6a:	2b00      	cmp	r3, #0
 8022b6c:	d1b3      	bne.n	8022ad6 <send_websocket_data+0x16>
      }
    }
  }
}
 8022b6e:	bf00      	nop
 8022b70:	bf00      	nop
 8022b72:	3718      	adds	r7, #24
 8022b74:	46bd      	mov	sp, r7
 8022b76:	bdb0      	pop	{r4, r5, r7, pc}
 8022b78:	240043e8 	.word	0x240043e8
 8022b7c:	24004434 	.word	0x24004434
 8022b80:	24004454 	.word	0x24004454

08022b84 <handle_modbus_pdu>:
#if WIZARD_ENABLE_MODBUS
static struct mongoose_modbus_handlers s_modbus_handlers = {
    glue_modbus_read_reg, glue_modbus_write_reg};

static void handle_modbus_pdu(struct mg_connection *c, uint8_t *buf,
                              size_t len) {
 8022b84:	b5b0      	push	{r4, r5, r7, lr}
 8022b86:	b0d0      	sub	sp, #320	@ 0x140
 8022b88:	af00      	add	r7, sp, #0
 8022b8a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022b8e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8022b92:	6018      	str	r0, [r3, #0]
 8022b94:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022b98:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022b9c:	6019      	str	r1, [r3, #0]
 8022b9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022ba2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8022ba6:	601a      	str	r2, [r3, #0]
  MG_DEBUG(("Received PDU %p len %lu, hexdump:", buf, len));
 8022ba8:	4bb8      	ldr	r3, [pc, #736]	@ (8022e8c <handle_modbus_pdu+0x308>)
 8022baa:	681b      	ldr	r3, [r3, #0]
 8022bac:	2b02      	cmp	r3, #2
 8022bae:	dd13      	ble.n	8022bd8 <handle_modbus_pdu+0x54>
 8022bb0:	4bb7      	ldr	r3, [pc, #732]	@ (8022e90 <handle_modbus_pdu+0x30c>)
 8022bb2:	f240 3225 	movw	r2, #805	@ 0x325
 8022bb6:	49b7      	ldr	r1, [pc, #732]	@ (8022e94 <handle_modbus_pdu+0x310>)
 8022bb8:	2003      	movs	r0, #3
 8022bba:	f7e9 fc3b 	bl	800c434 <mg_log_prefix>
 8022bbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022bc2:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8022bc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022bca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022bce:	6812      	ldr	r2, [r2, #0]
 8022bd0:	6819      	ldr	r1, [r3, #0]
 8022bd2:	48b1      	ldr	r0, [pc, #708]	@ (8022e98 <handle_modbus_pdu+0x314>)
 8022bd4:	f7e9 fc7e 	bl	800c4d4 <mg_log>
  mg_hexdump(buf, len);
 8022bd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022bdc:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8022be0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022be4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022be8:	6811      	ldr	r1, [r2, #0]
 8022bea:	6818      	ldr	r0, [r3, #0]
 8022bec:	f7e9 fca8 	bl	800c540 <mg_hexdump>
  // size_t hdr_size = 8, max_data_size = sizeof(response) - hdr_size;
  if (len < 12) {
 8022bf0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022bf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8022bf8:	681b      	ldr	r3, [r3, #0]
 8022bfa:	2b0b      	cmp	r3, #11
 8022bfc:	d80f      	bhi.n	8022c1e <handle_modbus_pdu+0x9a>
    MG_ERROR(("PDU too small"));
 8022bfe:	4ba3      	ldr	r3, [pc, #652]	@ (8022e8c <handle_modbus_pdu+0x308>)
 8022c00:	681b      	ldr	r3, [r3, #0]
 8022c02:	2b00      	cmp	r3, #0
 8022c04:	f340 81f8 	ble.w	8022ff8 <handle_modbus_pdu+0x474>
 8022c08:	4ba1      	ldr	r3, [pc, #644]	@ (8022e90 <handle_modbus_pdu+0x30c>)
 8022c0a:	f240 3229 	movw	r2, #809	@ 0x329
 8022c0e:	49a1      	ldr	r1, [pc, #644]	@ (8022e94 <handle_modbus_pdu+0x310>)
 8022c10:	2001      	movs	r0, #1
 8022c12:	f7e9 fc0f 	bl	800c434 <mg_log_prefix>
 8022c16:	48a1      	ldr	r0, [pc, #644]	@ (8022e9c <handle_modbus_pdu+0x318>)
 8022c18:	f7e9 fc5c 	bl	800c4d4 <mg_log>
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
    MG_DEBUG(("Sending PDU response %lu:", response_len));
    mg_hexdump(response, response_len);
    mg_send(c, response, response_len);
  }
}
 8022c1c:	e1ec      	b.n	8022ff8 <handle_modbus_pdu+0x474>
    uint8_t func = buf[7];  // Function
 8022c1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022c22:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022c26:	681b      	ldr	r3, [r3, #0]
 8022c28:	79db      	ldrb	r3, [r3, #7]
 8022c2a:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
    bool success = false;
 8022c2e:	2300      	movs	r3, #0
 8022c30:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
    size_t response_len = 0;
 8022c34:	2300      	movs	r3, #0
 8022c36:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    memcpy(response, buf, 8);
 8022c3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022c3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022c42:	f107 0014 	add.w	r0, r7, #20
 8022c46:	2208      	movs	r2, #8
 8022c48:	6819      	ldr	r1, [r3, #0]
 8022c4a:	f000 fede 	bl	8023a0a <memcpy>
    if (func == 6) {  // write single holding register
 8022c4e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8022c52:	2b06      	cmp	r3, #6
 8022c54:	d155      	bne.n	8022d02 <handle_modbus_pdu+0x17e>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8022c56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022c5a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022c5e:	681b      	ldr	r3, [r3, #0]
 8022c60:	3308      	adds	r3, #8
 8022c62:	881b      	ldrh	r3, [r3, #0]
 8022c64:	4618      	mov	r0, r3
 8022c66:	f7fc fccb 	bl	801f600 <mg_ntohs>
 8022c6a:	4603      	mov	r3, r0
 8022c6c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
      uint16_t value = mg_ntohs(*(uint16_t *) &buf[10]);
 8022c70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022c74:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022c78:	681b      	ldr	r3, [r3, #0]
 8022c7a:	330a      	adds	r3, #10
 8022c7c:	881b      	ldrh	r3, [r3, #0]
 8022c7e:	4618      	mov	r0, r3
 8022c80:	f7fc fcbe 	bl	801f600 <mg_ntohs>
 8022c84:	4603      	mov	r3, r0
 8022c86:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
      success = s_modbus_handlers.write_reg_fn(start, value);
 8022c8a:	4b85      	ldr	r3, [pc, #532]	@ (8022ea0 <handle_modbus_pdu+0x31c>)
 8022c8c:	685b      	ldr	r3, [r3, #4]
 8022c8e:	f8b7 111c 	ldrh.w	r1, [r7, #284]	@ 0x11c
 8022c92:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8022c96:	4610      	mov	r0, r2
 8022c98:	4798      	blx	r3
 8022c9a:	4603      	mov	r3, r0
 8022c9c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
      *(uint16_t *) &response[8] = mg_htons(start);
 8022ca0:	f107 0314 	add.w	r3, r7, #20
 8022ca4:	f103 0408 	add.w	r4, r3, #8
 8022ca8:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 8022cac:	4618      	mov	r0, r3
 8022cae:	f7fc fca7 	bl	801f600 <mg_ntohs>
 8022cb2:	4603      	mov	r3, r0
 8022cb4:	8023      	strh	r3, [r4, #0]
      *(uint16_t *) &response[10] = mg_htons(value);
 8022cb6:	f107 0314 	add.w	r3, r7, #20
 8022cba:	f103 040a 	add.w	r4, r3, #10
 8022cbe:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8022cc2:	4618      	mov	r0, r3
 8022cc4:	f7fc fc9c 	bl	801f600 <mg_ntohs>
 8022cc8:	4603      	mov	r3, r0
 8022cca:	8023      	strh	r3, [r4, #0]
      response_len = 12;
 8022ccc:	230c      	movs	r3, #12
 8022cce:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8022cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8022e8c <handle_modbus_pdu+0x308>)
 8022cd4:	681b      	ldr	r3, [r3, #0]
 8022cd6:	2b02      	cmp	r3, #2
 8022cd8:	f340 8142 	ble.w	8022f60 <handle_modbus_pdu+0x3dc>
 8022cdc:	4b6c      	ldr	r3, [pc, #432]	@ (8022e90 <handle_modbus_pdu+0x30c>)
 8022cde:	f240 323b 	movw	r2, #827	@ 0x33b
 8022ce2:	496c      	ldr	r1, [pc, #432]	@ (8022e94 <handle_modbus_pdu+0x310>)
 8022ce4:	2003      	movs	r0, #3
 8022ce6:	f7e9 fba5 	bl	800c434 <mg_log_prefix>
 8022cea:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	d001      	beq.n	8022cf6 <handle_modbus_pdu+0x172>
 8022cf2:	4b6c      	ldr	r3, [pc, #432]	@ (8022ea4 <handle_modbus_pdu+0x320>)
 8022cf4:	e000      	b.n	8022cf8 <handle_modbus_pdu+0x174>
 8022cf6:	4b6c      	ldr	r3, [pc, #432]	@ (8022ea8 <handle_modbus_pdu+0x324>)
 8022cf8:	4619      	mov	r1, r3
 8022cfa:	486c      	ldr	r0, [pc, #432]	@ (8022eac <handle_modbus_pdu+0x328>)
 8022cfc:	f7e9 fbea 	bl	800c4d4 <mg_log>
 8022d00:	e12e      	b.n	8022f60 <handle_modbus_pdu+0x3dc>
    } else if (func == 16) {  // Write multiple
 8022d02:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8022d06:	2b10      	cmp	r3, #16
 8022d08:	f040 808c 	bne.w	8022e24 <handle_modbus_pdu+0x2a0>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8022d0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022d10:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022d14:	681b      	ldr	r3, [r3, #0]
 8022d16:	3308      	adds	r3, #8
 8022d18:	881b      	ldrh	r3, [r3, #0]
 8022d1a:	4618      	mov	r0, r3
 8022d1c:	f7fc fc70 	bl	801f600 <mg_ntohs>
 8022d20:	4603      	mov	r3, r0
 8022d22:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8022d26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022d2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022d2e:	681b      	ldr	r3, [r3, #0]
 8022d30:	330a      	adds	r3, #10
 8022d32:	881b      	ldrh	r3, [r3, #0]
 8022d34:	4618      	mov	r0, r3
 8022d36:	f7fc fc63 	bl	801f600 <mg_ntohs>
 8022d3a:	4603      	mov	r3, r0
 8022d3c:	f8a7 3124 	strh.w	r3, [r7, #292]	@ 0x124
      uint16_t i, *data = (uint16_t *) &buf[13];
 8022d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022d44:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022d48:	681b      	ldr	r3, [r3, #0]
 8022d4a:	330d      	adds	r3, #13
 8022d4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
      if ((size_t) (num * 2 + 10) < sizeof(response)) {
 8022d50:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8022d54:	3305      	adds	r3, #5
 8022d56:	005b      	lsls	r3, r3, #1
 8022d58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8022d5c:	f080 8100 	bcs.w	8022f60 <handle_modbus_pdu+0x3dc>
        for (i = 0; i < num; i++) {
 8022d60:	2300      	movs	r3, #0
 8022d62:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8022d66:	e024      	b.n	8022db2 <handle_modbus_pdu+0x22e>
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 8022d68:	4b4d      	ldr	r3, [pc, #308]	@ (8022ea0 <handle_modbus_pdu+0x31c>)
 8022d6a:	685c      	ldr	r4, [r3, #4]
 8022d6c:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8022d70:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8022d74:	4413      	add	r3, r2
 8022d76:	b29d      	uxth	r5, r3
                                                   mg_htons(data[i]));
 8022d78:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8022d7c:	005b      	lsls	r3, r3, #1
 8022d7e:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8022d82:	4413      	add	r3, r2
          success = s_modbus_handlers.write_reg_fn((uint16_t) (start + i),
 8022d84:	881b      	ldrh	r3, [r3, #0]
 8022d86:	4618      	mov	r0, r3
 8022d88:	f7fc fc3a 	bl	801f600 <mg_ntohs>
 8022d8c:	4603      	mov	r3, r0
 8022d8e:	4619      	mov	r1, r3
 8022d90:	4628      	mov	r0, r5
 8022d92:	47a0      	blx	r4
 8022d94:	4603      	mov	r3, r0
 8022d96:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 8022d9a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022d9e:	f083 0301 	eor.w	r3, r3, #1
 8022da2:	b2db      	uxtb	r3, r3
 8022da4:	2b00      	cmp	r3, #0
 8022da6:	d10b      	bne.n	8022dc0 <handle_modbus_pdu+0x23c>
        for (i = 0; i < num; i++) {
 8022da8:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8022dac:	3301      	adds	r3, #1
 8022dae:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8022db2:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8022db6:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8022dba:	429a      	cmp	r2, r3
 8022dbc:	d3d4      	bcc.n	8022d68 <handle_modbus_pdu+0x1e4>
 8022dbe:	e000      	b.n	8022dc2 <handle_modbus_pdu+0x23e>
          if (success == false) break;
 8022dc0:	bf00      	nop
        *(uint16_t *) &response[8] = mg_htons(start);
 8022dc2:	f107 0314 	add.w	r3, r7, #20
 8022dc6:	f103 0408 	add.w	r4, r3, #8
 8022dca:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8022dce:	4618      	mov	r0, r3
 8022dd0:	f7fc fc16 	bl	801f600 <mg_ntohs>
 8022dd4:	4603      	mov	r3, r0
 8022dd6:	8023      	strh	r3, [r4, #0]
        *(uint16_t *) &response[10] = mg_htons(num);
 8022dd8:	f107 0314 	add.w	r3, r7, #20
 8022ddc:	f103 040a 	add.w	r4, r3, #10
 8022de0:	f8b7 3124 	ldrh.w	r3, [r7, #292]	@ 0x124
 8022de4:	4618      	mov	r0, r3
 8022de6:	f7fc fc0b 	bl	801f600 <mg_ntohs>
 8022dea:	4603      	mov	r3, r0
 8022dec:	8023      	strh	r3, [r4, #0]
        response_len = 12;
 8022dee:	230c      	movs	r3, #12
 8022df0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8022df4:	4b25      	ldr	r3, [pc, #148]	@ (8022e8c <handle_modbus_pdu+0x308>)
 8022df6:	681b      	ldr	r3, [r3, #0]
 8022df8:	2b02      	cmp	r3, #2
 8022dfa:	f340 80b1 	ble.w	8022f60 <handle_modbus_pdu+0x3dc>
 8022dfe:	4b24      	ldr	r3, [pc, #144]	@ (8022e90 <handle_modbus_pdu+0x30c>)
 8022e00:	f240 3249 	movw	r2, #841	@ 0x349
 8022e04:	4923      	ldr	r1, [pc, #140]	@ (8022e94 <handle_modbus_pdu+0x310>)
 8022e06:	2003      	movs	r0, #3
 8022e08:	f7e9 fb14 	bl	800c434 <mg_log_prefix>
 8022e0c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022e10:	2b00      	cmp	r3, #0
 8022e12:	d001      	beq.n	8022e18 <handle_modbus_pdu+0x294>
 8022e14:	4b23      	ldr	r3, [pc, #140]	@ (8022ea4 <handle_modbus_pdu+0x320>)
 8022e16:	e000      	b.n	8022e1a <handle_modbus_pdu+0x296>
 8022e18:	4b23      	ldr	r3, [pc, #140]	@ (8022ea8 <handle_modbus_pdu+0x324>)
 8022e1a:	4619      	mov	r1, r3
 8022e1c:	4823      	ldr	r0, [pc, #140]	@ (8022eac <handle_modbus_pdu+0x328>)
 8022e1e:	f7e9 fb59 	bl	800c4d4 <mg_log>
 8022e22:	e09d      	b.n	8022f60 <handle_modbus_pdu+0x3dc>
    } else if (func == 3 || func == 4) {  // Read multiple
 8022e24:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8022e28:	2b03      	cmp	r3, #3
 8022e2a:	d004      	beq.n	8022e36 <handle_modbus_pdu+0x2b2>
 8022e2c:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8022e30:	2b04      	cmp	r3, #4
 8022e32:	f040 8095 	bne.w	8022f60 <handle_modbus_pdu+0x3dc>
      uint16_t start = mg_ntohs(*(uint16_t *) &buf[8]);
 8022e36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022e3a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022e3e:	681b      	ldr	r3, [r3, #0]
 8022e40:	3308      	adds	r3, #8
 8022e42:	881b      	ldrh	r3, [r3, #0]
 8022e44:	4618      	mov	r0, r3
 8022e46:	f7fc fbdb 	bl	801f600 <mg_ntohs>
 8022e4a:	4603      	mov	r3, r0
 8022e4c:	f8a7 3130 	strh.w	r3, [r7, #304]	@ 0x130
      uint16_t num = mg_ntohs(*(uint16_t *) &buf[10]);
 8022e50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022e54:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8022e58:	681b      	ldr	r3, [r3, #0]
 8022e5a:	330a      	adds	r3, #10
 8022e5c:	881b      	ldrh	r3, [r3, #0]
 8022e5e:	4618      	mov	r0, r3
 8022e60:	f7fc fbce 	bl	801f600 <mg_ntohs>
 8022e64:	4603      	mov	r3, r0
 8022e66:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
      if ((size_t) (num * 2 + 9) < sizeof(response)) {
 8022e6a:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8022e6e:	005b      	lsls	r3, r3, #1
 8022e70:	3309      	adds	r3, #9
 8022e72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8022e76:	d273      	bcs.n	8022f60 <handle_modbus_pdu+0x3dc>
        uint16_t i, val, *data = (uint16_t *) &response[9];
 8022e78:	f107 0314 	add.w	r3, r7, #20
 8022e7c:	3309      	adds	r3, #9
 8022e7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        for (i = 0; i < num; i++) {
 8022e82:	2300      	movs	r3, #0
 8022e84:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8022e88:	e03a      	b.n	8022f00 <handle_modbus_pdu+0x37c>
 8022e8a:	bf00      	nop
 8022e8c:	24000258 	.word	0x24000258
 8022e90:	08035660 	.word	0x08035660
 8022e94:	08027398 	.word	0x08027398
 8022e98:	08027a48 	.word	0x08027a48
 8022e9c:	08027a6c 	.word	0x08027a6c
 8022ea0:	24000820 	.word	0x24000820
 8022ea4:	08027a7c 	.word	0x08027a7c
 8022ea8:	08027a84 	.word	0x08027a84
 8022eac:	08027a8c 	.word	0x08027a8c
          success = s_modbus_handlers.read_reg_fn((uint16_t) (start + i), &val);
 8022eb0:	4b54      	ldr	r3, [pc, #336]	@ (8023004 <handle_modbus_pdu+0x480>)
 8022eb2:	681b      	ldr	r3, [r3, #0]
 8022eb4:	f8b7 1130 	ldrh.w	r1, [r7, #304]	@ 0x130
 8022eb8:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8022ebc:	440a      	add	r2, r1
 8022ebe:	b292      	uxth	r2, r2
 8022ec0:	f507 718d 	add.w	r1, r7, #282	@ 0x11a
 8022ec4:	4610      	mov	r0, r2
 8022ec6:	4798      	blx	r3
 8022ec8:	4603      	mov	r3, r0
 8022eca:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
          if (success == false) break;
 8022ece:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022ed2:	f083 0301 	eor.w	r3, r3, #1
 8022ed6:	b2db      	uxtb	r3, r3
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d118      	bne.n	8022f0e <handle_modbus_pdu+0x38a>
          data[i] = mg_htons(val);
 8022edc:	f8b7 111a 	ldrh.w	r1, [r7, #282]	@ 0x11a
 8022ee0:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8022ee4:	005b      	lsls	r3, r3, #1
 8022ee6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8022eea:	18d4      	adds	r4, r2, r3
 8022eec:	4608      	mov	r0, r1
 8022eee:	f7fc fb87 	bl	801f600 <mg_ntohs>
 8022ef2:	4603      	mov	r3, r0
 8022ef4:	8023      	strh	r3, [r4, #0]
        for (i = 0; i < num; i++) {
 8022ef6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8022efa:	3301      	adds	r3, #1
 8022efc:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
 8022f00:	f8b7 2134 	ldrh.w	r2, [r7, #308]	@ 0x134
 8022f04:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8022f08:	429a      	cmp	r2, r3
 8022f0a:	d3d1      	bcc.n	8022eb0 <handle_modbus_pdu+0x32c>
 8022f0c:	e000      	b.n	8022f10 <handle_modbus_pdu+0x38c>
          if (success == false) break;
 8022f0e:	bf00      	nop
        response[8] = (uint8_t) (num * 2);
 8022f10:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 8022f14:	b2db      	uxtb	r3, r3
 8022f16:	005b      	lsls	r3, r3, #1
 8022f18:	b2da      	uxtb	r2, r3
 8022f1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022f1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022f22:	721a      	strb	r2, [r3, #8]
        response_len = 9 + response[8];
 8022f24:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022f28:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022f2c:	7a1b      	ldrb	r3, [r3, #8]
 8022f2e:	3309      	adds	r3, #9
 8022f30:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        MG_DEBUG(("Glue returned %s", success ? "success" : "failure"));
 8022f34:	4b34      	ldr	r3, [pc, #208]	@ (8023008 <handle_modbus_pdu+0x484>)
 8022f36:	681b      	ldr	r3, [r3, #0]
 8022f38:	2b02      	cmp	r3, #2
 8022f3a:	dd11      	ble.n	8022f60 <handle_modbus_pdu+0x3dc>
 8022f3c:	4b33      	ldr	r3, [pc, #204]	@ (802300c <handle_modbus_pdu+0x488>)
 8022f3e:	f240 3257 	movw	r2, #855	@ 0x357
 8022f42:	4933      	ldr	r1, [pc, #204]	@ (8023010 <handle_modbus_pdu+0x48c>)
 8022f44:	2003      	movs	r0, #3
 8022f46:	f7e9 fa75 	bl	800c434 <mg_log_prefix>
 8022f4a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022f4e:	2b00      	cmp	r3, #0
 8022f50:	d001      	beq.n	8022f56 <handle_modbus_pdu+0x3d2>
 8022f52:	4b30      	ldr	r3, [pc, #192]	@ (8023014 <handle_modbus_pdu+0x490>)
 8022f54:	e000      	b.n	8022f58 <handle_modbus_pdu+0x3d4>
 8022f56:	4b30      	ldr	r3, [pc, #192]	@ (8023018 <handle_modbus_pdu+0x494>)
 8022f58:	4619      	mov	r1, r3
 8022f5a:	4830      	ldr	r0, [pc, #192]	@ (802301c <handle_modbus_pdu+0x498>)
 8022f5c:	f7e9 faba 	bl	800c4d4 <mg_log>
    if (success == false) {
 8022f60:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8022f64:	f083 0301 	eor.w	r3, r3, #1
 8022f68:	b2db      	uxtb	r3, r3
 8022f6a:	2b00      	cmp	r3, #0
 8022f6c:	d015      	beq.n	8022f9a <handle_modbus_pdu+0x416>
      response_len = 9;
 8022f6e:	2309      	movs	r3, #9
 8022f70:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
      response[7] |= 0x80;
 8022f74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022f78:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022f7c:	79db      	ldrb	r3, [r3, #7]
 8022f7e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8022f82:	b2da      	uxtb	r2, r3
 8022f84:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022f88:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022f8c:	71da      	strb	r2, [r3, #7]
      response[8] = 4;  // Server Device Failure
 8022f8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022f92:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8022f96:	2204      	movs	r2, #4
 8022f98:	721a      	strb	r2, [r3, #8]
    *(uint16_t *) &response[4] = mg_htons((uint16_t) (response_len - 6));
 8022f9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8022f9e:	b29b      	uxth	r3, r3
 8022fa0:	3b06      	subs	r3, #6
 8022fa2:	b29a      	uxth	r2, r3
 8022fa4:	f107 0314 	add.w	r3, r7, #20
 8022fa8:	1d1c      	adds	r4, r3, #4
 8022faa:	4610      	mov	r0, r2
 8022fac:	f7fc fb28 	bl	801f600 <mg_ntohs>
 8022fb0:	4603      	mov	r3, r0
 8022fb2:	8023      	strh	r3, [r4, #0]
    MG_DEBUG(("Sending PDU response %lu:", response_len));
 8022fb4:	4b14      	ldr	r3, [pc, #80]	@ (8023008 <handle_modbus_pdu+0x484>)
 8022fb6:	681b      	ldr	r3, [r3, #0]
 8022fb8:	2b02      	cmp	r3, #2
 8022fba:	dd0b      	ble.n	8022fd4 <handle_modbus_pdu+0x450>
 8022fbc:	4b13      	ldr	r3, [pc, #76]	@ (802300c <handle_modbus_pdu+0x488>)
 8022fbe:	f44f 7258 	mov.w	r2, #864	@ 0x360
 8022fc2:	4913      	ldr	r1, [pc, #76]	@ (8023010 <handle_modbus_pdu+0x48c>)
 8022fc4:	2003      	movs	r0, #3
 8022fc6:	f7e9 fa35 	bl	800c434 <mg_log_prefix>
 8022fca:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8022fce:	4814      	ldr	r0, [pc, #80]	@ (8023020 <handle_modbus_pdu+0x49c>)
 8022fd0:	f7e9 fa80 	bl	800c4d4 <mg_log>
    mg_hexdump(response, response_len);
 8022fd4:	f107 0314 	add.w	r3, r7, #20
 8022fd8:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 8022fdc:	4618      	mov	r0, r3
 8022fde:	f7e9 faaf 	bl	800c540 <mg_hexdump>
    mg_send(c, response, response_len);
 8022fe2:	f107 0114 	add.w	r1, r7, #20
 8022fe6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8022fea:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8022fee:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8022ff2:	6818      	ldr	r0, [r3, #0]
 8022ff4:	f7ed fb00 	bl	80105f8 <mg_send>
}
 8022ff8:	bf00      	nop
 8022ffa:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8022ffe:	46bd      	mov	sp, r7
 8023000:	bdb0      	pop	{r4, r5, r7, pc}
 8023002:	bf00      	nop
 8023004:	24000820 	.word	0x24000820
 8023008:	24000258 	.word	0x24000258
 802300c:	08035660 	.word	0x08035660
 8023010:	08027398 	.word	0x08027398
 8023014:	08027a7c 	.word	0x08027a7c
 8023018:	08027a84 	.word	0x08027a84
 802301c:	08027a8c 	.word	0x08027a8c
 8023020:	08027aa0 	.word	0x08027aa0

08023024 <modbus_ev_handler>:

static void modbus_ev_handler(struct mg_connection *c, int ev, void *ev_data) {
 8023024:	b580      	push	{r7, lr}
 8023026:	b086      	sub	sp, #24
 8023028:	af00      	add	r7, sp, #0
 802302a:	60f8      	str	r0, [r7, #12]
 802302c:	60b9      	str	r1, [r7, #8]
 802302e:	607a      	str	r2, [r7, #4]
  // if (ev == MG_EV_OPEN) c->is_hexdumping = 1;
  if (ev == MG_EV_READ) {
 8023030:	68bb      	ldr	r3, [r7, #8]
 8023032:	2b07      	cmp	r3, #7
 8023034:	d13a      	bne.n	80230ac <modbus_ev_handler+0x88>
    uint16_t len;
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 8023036:	68fb      	ldr	r3, [r7, #12]
 8023038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802303a:	2b06      	cmp	r3, #6
 802303c:	d933      	bls.n	80230a6 <modbus_ev_handler+0x82>
    len = mg_ntohs(*(uint16_t *) &c->recv.buf[4]);  // PDU length
 802303e:	68fb      	ldr	r3, [r7, #12]
 8023040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8023042:	3304      	adds	r3, #4
 8023044:	881b      	ldrh	r3, [r3, #0]
 8023046:	4618      	mov	r0, r3
 8023048:	f7fc fada 	bl	801f600 <mg_ntohs>
 802304c:	4603      	mov	r3, r0
 802304e:	82fb      	strh	r3, [r7, #22]
    MG_INFO(("Got %lu, expecting %lu", c->recv.len, len + 6));
 8023050:	4b18      	ldr	r3, [pc, #96]	@ (80230b4 <modbus_ev_handler+0x90>)
 8023052:	681b      	ldr	r3, [r3, #0]
 8023054:	2b01      	cmp	r3, #1
 8023056:	dd0e      	ble.n	8023076 <modbus_ev_handler+0x52>
 8023058:	4b17      	ldr	r3, [pc, #92]	@ (80230b8 <modbus_ev_handler+0x94>)
 802305a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 802305e:	4917      	ldr	r1, [pc, #92]	@ (80230bc <modbus_ev_handler+0x98>)
 8023060:	2002      	movs	r0, #2
 8023062:	f7e9 f9e7 	bl	800c434 <mg_log_prefix>
 8023066:	68fb      	ldr	r3, [r7, #12]
 8023068:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 802306a:	8afb      	ldrh	r3, [r7, #22]
 802306c:	3306      	adds	r3, #6
 802306e:	461a      	mov	r2, r3
 8023070:	4813      	ldr	r0, [pc, #76]	@ (80230c0 <modbus_ev_handler+0x9c>)
 8023072:	f7e9 fa2f 	bl	800c4d4 <mg_log>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 8023076:	68fb      	ldr	r3, [r7, #12]
 8023078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 802307a:	8afb      	ldrh	r3, [r7, #22]
 802307c:	3306      	adds	r3, #6
 802307e:	429a      	cmp	r2, r3
 8023080:	d313      	bcc.n	80230aa <modbus_ev_handler+0x86>
    handle_modbus_pdu(c, c->recv.buf, len + 6);  // Parse PDU and call user
 8023082:	68fb      	ldr	r3, [r7, #12]
 8023084:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8023086:	8afb      	ldrh	r3, [r7, #22]
 8023088:	3306      	adds	r3, #6
 802308a:	461a      	mov	r2, r3
 802308c:	68f8      	ldr	r0, [r7, #12]
 802308e:	f7ff fd79 	bl	8022b84 <handle_modbus_pdu>
    mg_iobuf_del(&c->recv, 0, len + 6U);         // Delete received PDU
 8023092:	68fb      	ldr	r3, [r7, #12]
 8023094:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8023098:	8afb      	ldrh	r3, [r7, #22]
 802309a:	3306      	adds	r3, #6
 802309c:	461a      	mov	r2, r3
 802309e:	2100      	movs	r1, #0
 80230a0:	f7e8 fafc 	bl	800b69c <mg_iobuf_del>
 80230a4:	e002      	b.n	80230ac <modbus_ev_handler+0x88>
    if (c->recv.len < 7) return;  // Less than minimum length, buffer more
 80230a6:	bf00      	nop
 80230a8:	e000      	b.n	80230ac <modbus_ev_handler+0x88>
    if (c->recv.len < len + 6U) return;          // Partial frame, buffer more
 80230aa:	bf00      	nop
  }
  (void) ev_data;
}
 80230ac:	3718      	adds	r7, #24
 80230ae:	46bd      	mov	sp, r7
 80230b0:	bd80      	pop	{r7, pc}
 80230b2:	bf00      	nop
 80230b4:	24000258 	.word	0x24000258
 80230b8:	08035674 	.word	0x08035674
 80230bc:	08027398 	.word	0x08027398
 80230c0:	08027abc 	.word	0x08027abc

080230c4 <mongoose_init>:
  }
  (void) ev_data;
}
#endif  // WIZARD_CAPTIVE_PORTAL

void mongoose_init(void) {
 80230c4:	b580      	push	{r7, lr}
 80230c6:	b09a      	sub	sp, #104	@ 0x68
 80230c8:	af00      	add	r7, sp, #0
  mg_mgr_init(&g_mgr);      // Initialise event manager
 80230ca:	4824      	ldr	r0, [pc, #144]	@ (802315c <mongoose_init+0x98>)
 80230cc:	f7e9 fefc 	bl	800cec8 <mg_mgr_init>
  mg_log_set(MG_LL_DEBUG);  // Set log level to debug
 80230d0:	4b23      	ldr	r3, [pc, #140]	@ (8023160 <mongoose_init+0x9c>)
 80230d2:	2203      	movs	r2, #3
 80230d4:	601a      	str	r2, [r3, #0]

#if WIZARD_ENABLE_HTTP
  MG_INFO(("Starting HTTP listener"));
 80230d6:	4b22      	ldr	r3, [pc, #136]	@ (8023160 <mongoose_init+0x9c>)
 80230d8:	681b      	ldr	r3, [r3, #0]
 80230da:	2b01      	cmp	r3, #1
 80230dc:	dd09      	ble.n	80230f2 <mongoose_init+0x2e>
 80230de:	4b21      	ldr	r3, [pc, #132]	@ (8023164 <mongoose_init+0xa0>)
 80230e0:	f240 32ad 	movw	r2, #941	@ 0x3ad
 80230e4:	4920      	ldr	r1, [pc, #128]	@ (8023168 <mongoose_init+0xa4>)
 80230e6:	2002      	movs	r0, #2
 80230e8:	f7e9 f9a4 	bl	800c434 <mg_log_prefix>
 80230ec:	481f      	ldr	r0, [pc, #124]	@ (802316c <mongoose_init+0xa8>)
 80230ee:	f7e9 f9f1 	bl	800c4d4 <mg_log>
  mg_http_listen(&g_mgr, HTTP_URL, http_ev_handler, NULL);
 80230f2:	2300      	movs	r3, #0
 80230f4:	4a1e      	ldr	r2, [pc, #120]	@ (8023170 <mongoose_init+0xac>)
 80230f6:	491f      	ldr	r1, [pc, #124]	@ (8023174 <mongoose_init+0xb0>)
 80230f8:	4818      	ldr	r0, [pc, #96]	@ (802315c <mongoose_init+0x98>)
 80230fa:	f7e8 f9bb 	bl	800b474 <mg_http_listen>
#endif

#if WIZARD_ENABLE_MODBUS
  {
    char url[100];
    mg_snprintf(url, sizeof(url), "tcp://0.0.0.0:%d", WIZARD_MODBUS_PORT);
 80230fe:	1d38      	adds	r0, r7, #4
 8023100:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8023104:	4a1c      	ldr	r2, [pc, #112]	@ (8023178 <mongoose_init+0xb4>)
 8023106:	2164      	movs	r1, #100	@ 0x64
 8023108:	f7ed fc1a 	bl	8010940 <mg_snprintf>
    MG_INFO(("Starting Modbus-TCP server on port %d", WIZARD_MODBUS_PORT));
 802310c:	4b14      	ldr	r3, [pc, #80]	@ (8023160 <mongoose_init+0x9c>)
 802310e:	681b      	ldr	r3, [r3, #0]
 8023110:	2b01      	cmp	r3, #1
 8023112:	dd0b      	ble.n	802312c <mongoose_init+0x68>
 8023114:	4b13      	ldr	r3, [pc, #76]	@ (8023164 <mongoose_init+0xa0>)
 8023116:	f240 32c7 	movw	r2, #967	@ 0x3c7
 802311a:	4913      	ldr	r1, [pc, #76]	@ (8023168 <mongoose_init+0xa4>)
 802311c:	2002      	movs	r0, #2
 802311e:	f7e9 f989 	bl	800c434 <mg_log_prefix>
 8023122:	f44f 71fb 	mov.w	r1, #502	@ 0x1f6
 8023126:	4815      	ldr	r0, [pc, #84]	@ (802317c <mongoose_init+0xb8>)
 8023128:	f7e9 f9d4 	bl	800c4d4 <mg_log>
    mg_listen(&g_mgr, url, modbus_ev_handler, NULL);
 802312c:	1d39      	adds	r1, r7, #4
 802312e:	2300      	movs	r3, #0
 8023130:	4a13      	ldr	r2, [pc, #76]	@ (8023180 <mongoose_init+0xbc>)
 8023132:	480a      	ldr	r0, [pc, #40]	@ (802315c <mongoose_init+0x98>)
 8023134:	f7e9 fdfc 	bl	800cd30 <mg_listen>
  MG_INFO(("Starting MDNS (domain name: %s.local)", WIZARD_MDNS_NAME));
  mg_mdns_listen(&g_mgr, WIZARD_MDNS_NAME);
#endif

  glue_lock_init();
  MG_INFO(("Mongoose init complete"));
 8023138:	4b09      	ldr	r3, [pc, #36]	@ (8023160 <mongoose_init+0x9c>)
 802313a:	681b      	ldr	r3, [r3, #0]
 802313c:	2b01      	cmp	r3, #1
 802313e:	dd09      	ble.n	8023154 <mongoose_init+0x90>
 8023140:	4b08      	ldr	r3, [pc, #32]	@ (8023164 <mongoose_init+0xa0>)
 8023142:	f240 32d7 	movw	r2, #983	@ 0x3d7
 8023146:	4908      	ldr	r1, [pc, #32]	@ (8023168 <mongoose_init+0xa4>)
 8023148:	2002      	movs	r0, #2
 802314a:	f7e9 f973 	bl	800c434 <mg_log_prefix>
 802314e:	480d      	ldr	r0, [pc, #52]	@ (8023184 <mongoose_init+0xc0>)
 8023150:	f7e9 f9c0 	bl	800c4d4 <mg_log>
}
 8023154:	bf00      	nop
 8023156:	3768      	adds	r7, #104	@ 0x68
 8023158:	46bd      	mov	sp, r7
 802315a:	bd80      	pop	{r7, pc}
 802315c:	240043e8 	.word	0x240043e8
 8023160:	24000258 	.word	0x24000258
 8023164:	08035688 	.word	0x08035688
 8023168:	08027398 	.word	0x08027398
 802316c:	08027ad4 	.word	0x08027ad4
 8023170:	08022655 	.word	0x08022655
 8023174:	08027aec 	.word	0x08027aec
 8023178:	08027b00 	.word	0x08027b00
 802317c:	08027b14 	.word	0x08027b14
 8023180:	08023025 	.word	0x08023025
 8023184:	08027b3c 	.word	0x08027b3c

08023188 <mongoose_poll>:

void mongoose_poll(void) {
 8023188:	b580      	push	{r7, lr}
 802318a:	af00      	add	r7, sp, #0
  glue_lock();
  mg_mgr_poll(&g_mgr, 10);
 802318c:	210a      	movs	r1, #10
 802318e:	4803      	ldr	r0, [pc, #12]	@ (802319c <mongoose_poll+0x14>)
 8023190:	f7ed f900 	bl	8010394 <mg_mgr_poll>
#if WIZARD_ENABLE_WEBSOCKET
  send_websocket_data();
 8023194:	f7ff fc94 	bl	8022ac0 <send_websocket_data>
#endif
  glue_unlock();
}
 8023198:	bf00      	nop
 802319a:	bd80      	pop	{r7, pc}
 802319c:	240043e8 	.word	0x240043e8

080231a0 <abort>:
 80231a0:	b508      	push	{r3, lr}
 80231a2:	2006      	movs	r0, #6
 80231a4:	f000 fb8a 	bl	80238bc <raise>
 80231a8:	2001      	movs	r0, #1
 80231aa:	f7dd ff6e 	bl	800108a <_exit>
	...

080231b0 <__assert_func>:
 80231b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80231b2:	4614      	mov	r4, r2
 80231b4:	461a      	mov	r2, r3
 80231b6:	4b09      	ldr	r3, [pc, #36]	@ (80231dc <__assert_func+0x2c>)
 80231b8:	681b      	ldr	r3, [r3, #0]
 80231ba:	4605      	mov	r5, r0
 80231bc:	68d8      	ldr	r0, [r3, #12]
 80231be:	b14c      	cbz	r4, 80231d4 <__assert_func+0x24>
 80231c0:	4b07      	ldr	r3, [pc, #28]	@ (80231e0 <__assert_func+0x30>)
 80231c2:	9100      	str	r1, [sp, #0]
 80231c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80231c8:	4906      	ldr	r1, [pc, #24]	@ (80231e4 <__assert_func+0x34>)
 80231ca:	462b      	mov	r3, r5
 80231cc:	f000 fa42 	bl	8023654 <fiprintf>
 80231d0:	f7ff ffe6 	bl	80231a0 <abort>
 80231d4:	4b04      	ldr	r3, [pc, #16]	@ (80231e8 <__assert_func+0x38>)
 80231d6:	461c      	mov	r4, r3
 80231d8:	e7f3      	b.n	80231c2 <__assert_func+0x12>
 80231da:	bf00      	nop
 80231dc:	24000834 	.word	0x24000834
 80231e0:	08035696 	.word	0x08035696
 80231e4:	080356a3 	.word	0x080356a3
 80231e8:	080356d1 	.word	0x080356d1

080231ec <atoi>:
 80231ec:	220a      	movs	r2, #10
 80231ee:	2100      	movs	r1, #0
 80231f0:	f000 b982 	b.w	80234f8 <strtol>

080231f4 <calloc>:
 80231f4:	4b02      	ldr	r3, [pc, #8]	@ (8023200 <calloc+0xc>)
 80231f6:	460a      	mov	r2, r1
 80231f8:	4601      	mov	r1, r0
 80231fa:	6818      	ldr	r0, [r3, #0]
 80231fc:	f000 b802 	b.w	8023204 <_calloc_r>
 8023200:	24000834 	.word	0x24000834

08023204 <_calloc_r>:
 8023204:	b570      	push	{r4, r5, r6, lr}
 8023206:	fba1 5402 	umull	r5, r4, r1, r2
 802320a:	b934      	cbnz	r4, 802321a <_calloc_r+0x16>
 802320c:	4629      	mov	r1, r5
 802320e:	f000 f83f 	bl	8023290 <_malloc_r>
 8023212:	4606      	mov	r6, r0
 8023214:	b928      	cbnz	r0, 8023222 <_calloc_r+0x1e>
 8023216:	4630      	mov	r0, r6
 8023218:	bd70      	pop	{r4, r5, r6, pc}
 802321a:	220c      	movs	r2, #12
 802321c:	6002      	str	r2, [r0, #0]
 802321e:	2600      	movs	r6, #0
 8023220:	e7f9      	b.n	8023216 <_calloc_r+0x12>
 8023222:	462a      	mov	r2, r5
 8023224:	4621      	mov	r1, r4
 8023226:	f000 faba 	bl	802379e <memset>
 802322a:	e7f4      	b.n	8023216 <_calloc_r+0x12>

0802322c <malloc>:
 802322c:	4b02      	ldr	r3, [pc, #8]	@ (8023238 <malloc+0xc>)
 802322e:	4601      	mov	r1, r0
 8023230:	6818      	ldr	r0, [r3, #0]
 8023232:	f000 b82d 	b.w	8023290 <_malloc_r>
 8023236:	bf00      	nop
 8023238:	24000834 	.word	0x24000834

0802323c <free>:
 802323c:	4b02      	ldr	r3, [pc, #8]	@ (8023248 <free+0xc>)
 802323e:	4601      	mov	r1, r0
 8023240:	6818      	ldr	r0, [r3, #0]
 8023242:	f000 bbf1 	b.w	8023a28 <_free_r>
 8023246:	bf00      	nop
 8023248:	24000834 	.word	0x24000834

0802324c <sbrk_aligned>:
 802324c:	b570      	push	{r4, r5, r6, lr}
 802324e:	4e0f      	ldr	r6, [pc, #60]	@ (802328c <sbrk_aligned+0x40>)
 8023250:	460c      	mov	r4, r1
 8023252:	6831      	ldr	r1, [r6, #0]
 8023254:	4605      	mov	r5, r0
 8023256:	b911      	cbnz	r1, 802325e <sbrk_aligned+0x12>
 8023258:	f000 fb80 	bl	802395c <_sbrk_r>
 802325c:	6030      	str	r0, [r6, #0]
 802325e:	4621      	mov	r1, r4
 8023260:	4628      	mov	r0, r5
 8023262:	f000 fb7b 	bl	802395c <_sbrk_r>
 8023266:	1c43      	adds	r3, r0, #1
 8023268:	d103      	bne.n	8023272 <sbrk_aligned+0x26>
 802326a:	f04f 34ff 	mov.w	r4, #4294967295
 802326e:	4620      	mov	r0, r4
 8023270:	bd70      	pop	{r4, r5, r6, pc}
 8023272:	1cc4      	adds	r4, r0, #3
 8023274:	f024 0403 	bic.w	r4, r4, #3
 8023278:	42a0      	cmp	r0, r4
 802327a:	d0f8      	beq.n	802326e <sbrk_aligned+0x22>
 802327c:	1a21      	subs	r1, r4, r0
 802327e:	4628      	mov	r0, r5
 8023280:	f000 fb6c 	bl	802395c <_sbrk_r>
 8023284:	3001      	adds	r0, #1
 8023286:	d1f2      	bne.n	802326e <sbrk_aligned+0x22>
 8023288:	e7ef      	b.n	802326a <sbrk_aligned+0x1e>
 802328a:	bf00      	nop
 802328c:	24004458 	.word	0x24004458

08023290 <_malloc_r>:
 8023290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023294:	1ccd      	adds	r5, r1, #3
 8023296:	f025 0503 	bic.w	r5, r5, #3
 802329a:	3508      	adds	r5, #8
 802329c:	2d0c      	cmp	r5, #12
 802329e:	bf38      	it	cc
 80232a0:	250c      	movcc	r5, #12
 80232a2:	2d00      	cmp	r5, #0
 80232a4:	4606      	mov	r6, r0
 80232a6:	db01      	blt.n	80232ac <_malloc_r+0x1c>
 80232a8:	42a9      	cmp	r1, r5
 80232aa:	d904      	bls.n	80232b6 <_malloc_r+0x26>
 80232ac:	230c      	movs	r3, #12
 80232ae:	6033      	str	r3, [r6, #0]
 80232b0:	2000      	movs	r0, #0
 80232b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80232b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802338c <_malloc_r+0xfc>
 80232ba:	f000 f869 	bl	8023390 <__malloc_lock>
 80232be:	f8d8 3000 	ldr.w	r3, [r8]
 80232c2:	461c      	mov	r4, r3
 80232c4:	bb44      	cbnz	r4, 8023318 <_malloc_r+0x88>
 80232c6:	4629      	mov	r1, r5
 80232c8:	4630      	mov	r0, r6
 80232ca:	f7ff ffbf 	bl	802324c <sbrk_aligned>
 80232ce:	1c43      	adds	r3, r0, #1
 80232d0:	4604      	mov	r4, r0
 80232d2:	d158      	bne.n	8023386 <_malloc_r+0xf6>
 80232d4:	f8d8 4000 	ldr.w	r4, [r8]
 80232d8:	4627      	mov	r7, r4
 80232da:	2f00      	cmp	r7, #0
 80232dc:	d143      	bne.n	8023366 <_malloc_r+0xd6>
 80232de:	2c00      	cmp	r4, #0
 80232e0:	d04b      	beq.n	802337a <_malloc_r+0xea>
 80232e2:	6823      	ldr	r3, [r4, #0]
 80232e4:	4639      	mov	r1, r7
 80232e6:	4630      	mov	r0, r6
 80232e8:	eb04 0903 	add.w	r9, r4, r3
 80232ec:	f000 fb36 	bl	802395c <_sbrk_r>
 80232f0:	4581      	cmp	r9, r0
 80232f2:	d142      	bne.n	802337a <_malloc_r+0xea>
 80232f4:	6821      	ldr	r1, [r4, #0]
 80232f6:	1a6d      	subs	r5, r5, r1
 80232f8:	4629      	mov	r1, r5
 80232fa:	4630      	mov	r0, r6
 80232fc:	f7ff ffa6 	bl	802324c <sbrk_aligned>
 8023300:	3001      	adds	r0, #1
 8023302:	d03a      	beq.n	802337a <_malloc_r+0xea>
 8023304:	6823      	ldr	r3, [r4, #0]
 8023306:	442b      	add	r3, r5
 8023308:	6023      	str	r3, [r4, #0]
 802330a:	f8d8 3000 	ldr.w	r3, [r8]
 802330e:	685a      	ldr	r2, [r3, #4]
 8023310:	bb62      	cbnz	r2, 802336c <_malloc_r+0xdc>
 8023312:	f8c8 7000 	str.w	r7, [r8]
 8023316:	e00f      	b.n	8023338 <_malloc_r+0xa8>
 8023318:	6822      	ldr	r2, [r4, #0]
 802331a:	1b52      	subs	r2, r2, r5
 802331c:	d420      	bmi.n	8023360 <_malloc_r+0xd0>
 802331e:	2a0b      	cmp	r2, #11
 8023320:	d917      	bls.n	8023352 <_malloc_r+0xc2>
 8023322:	1961      	adds	r1, r4, r5
 8023324:	42a3      	cmp	r3, r4
 8023326:	6025      	str	r5, [r4, #0]
 8023328:	bf18      	it	ne
 802332a:	6059      	strne	r1, [r3, #4]
 802332c:	6863      	ldr	r3, [r4, #4]
 802332e:	bf08      	it	eq
 8023330:	f8c8 1000 	streq.w	r1, [r8]
 8023334:	5162      	str	r2, [r4, r5]
 8023336:	604b      	str	r3, [r1, #4]
 8023338:	4630      	mov	r0, r6
 802333a:	f000 f82f 	bl	802339c <__malloc_unlock>
 802333e:	f104 000b 	add.w	r0, r4, #11
 8023342:	1d23      	adds	r3, r4, #4
 8023344:	f020 0007 	bic.w	r0, r0, #7
 8023348:	1ac2      	subs	r2, r0, r3
 802334a:	bf1c      	itt	ne
 802334c:	1a1b      	subne	r3, r3, r0
 802334e:	50a3      	strne	r3, [r4, r2]
 8023350:	e7af      	b.n	80232b2 <_malloc_r+0x22>
 8023352:	6862      	ldr	r2, [r4, #4]
 8023354:	42a3      	cmp	r3, r4
 8023356:	bf0c      	ite	eq
 8023358:	f8c8 2000 	streq.w	r2, [r8]
 802335c:	605a      	strne	r2, [r3, #4]
 802335e:	e7eb      	b.n	8023338 <_malloc_r+0xa8>
 8023360:	4623      	mov	r3, r4
 8023362:	6864      	ldr	r4, [r4, #4]
 8023364:	e7ae      	b.n	80232c4 <_malloc_r+0x34>
 8023366:	463c      	mov	r4, r7
 8023368:	687f      	ldr	r7, [r7, #4]
 802336a:	e7b6      	b.n	80232da <_malloc_r+0x4a>
 802336c:	461a      	mov	r2, r3
 802336e:	685b      	ldr	r3, [r3, #4]
 8023370:	42a3      	cmp	r3, r4
 8023372:	d1fb      	bne.n	802336c <_malloc_r+0xdc>
 8023374:	2300      	movs	r3, #0
 8023376:	6053      	str	r3, [r2, #4]
 8023378:	e7de      	b.n	8023338 <_malloc_r+0xa8>
 802337a:	230c      	movs	r3, #12
 802337c:	6033      	str	r3, [r6, #0]
 802337e:	4630      	mov	r0, r6
 8023380:	f000 f80c 	bl	802339c <__malloc_unlock>
 8023384:	e794      	b.n	80232b0 <_malloc_r+0x20>
 8023386:	6005      	str	r5, [r0, #0]
 8023388:	e7d6      	b.n	8023338 <_malloc_r+0xa8>
 802338a:	bf00      	nop
 802338c:	2400445c 	.word	0x2400445c

08023390 <__malloc_lock>:
 8023390:	4801      	ldr	r0, [pc, #4]	@ (8023398 <__malloc_lock+0x8>)
 8023392:	f000 bb30 	b.w	80239f6 <__retarget_lock_acquire_recursive>
 8023396:	bf00      	nop
 8023398:	240045a0 	.word	0x240045a0

0802339c <__malloc_unlock>:
 802339c:	4801      	ldr	r0, [pc, #4]	@ (80233a4 <__malloc_unlock+0x8>)
 802339e:	f000 bb2b 	b.w	80239f8 <__retarget_lock_release_recursive>
 80233a2:	bf00      	nop
 80233a4:	240045a0 	.word	0x240045a0

080233a8 <srand>:
 80233a8:	b538      	push	{r3, r4, r5, lr}
 80233aa:	4b10      	ldr	r3, [pc, #64]	@ (80233ec <srand+0x44>)
 80233ac:	681d      	ldr	r5, [r3, #0]
 80233ae:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80233b0:	4604      	mov	r4, r0
 80233b2:	b9b3      	cbnz	r3, 80233e2 <srand+0x3a>
 80233b4:	2018      	movs	r0, #24
 80233b6:	f7ff ff39 	bl	802322c <malloc>
 80233ba:	4602      	mov	r2, r0
 80233bc:	6328      	str	r0, [r5, #48]	@ 0x30
 80233be:	b920      	cbnz	r0, 80233ca <srand+0x22>
 80233c0:	4b0b      	ldr	r3, [pc, #44]	@ (80233f0 <srand+0x48>)
 80233c2:	480c      	ldr	r0, [pc, #48]	@ (80233f4 <srand+0x4c>)
 80233c4:	2146      	movs	r1, #70	@ 0x46
 80233c6:	f7ff fef3 	bl	80231b0 <__assert_func>
 80233ca:	490b      	ldr	r1, [pc, #44]	@ (80233f8 <srand+0x50>)
 80233cc:	4b0b      	ldr	r3, [pc, #44]	@ (80233fc <srand+0x54>)
 80233ce:	e9c0 1300 	strd	r1, r3, [r0]
 80233d2:	4b0b      	ldr	r3, [pc, #44]	@ (8023400 <srand+0x58>)
 80233d4:	6083      	str	r3, [r0, #8]
 80233d6:	230b      	movs	r3, #11
 80233d8:	8183      	strh	r3, [r0, #12]
 80233da:	2100      	movs	r1, #0
 80233dc:	2001      	movs	r0, #1
 80233de:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80233e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80233e4:	2200      	movs	r2, #0
 80233e6:	611c      	str	r4, [r3, #16]
 80233e8:	615a      	str	r2, [r3, #20]
 80233ea:	bd38      	pop	{r3, r4, r5, pc}
 80233ec:	24000834 	.word	0x24000834
 80233f0:	080356d2 	.word	0x080356d2
 80233f4:	080356e9 	.word	0x080356e9
 80233f8:	abcd330e 	.word	0xabcd330e
 80233fc:	e66d1234 	.word	0xe66d1234
 8023400:	0005deec 	.word	0x0005deec

08023404 <_strtol_l.isra.0>:
 8023404:	2b24      	cmp	r3, #36	@ 0x24
 8023406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802340a:	4686      	mov	lr, r0
 802340c:	4690      	mov	r8, r2
 802340e:	d801      	bhi.n	8023414 <_strtol_l.isra.0+0x10>
 8023410:	2b01      	cmp	r3, #1
 8023412:	d106      	bne.n	8023422 <_strtol_l.isra.0+0x1e>
 8023414:	f000 fac4 	bl	80239a0 <__errno>
 8023418:	2316      	movs	r3, #22
 802341a:	6003      	str	r3, [r0, #0]
 802341c:	2000      	movs	r0, #0
 802341e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023422:	4834      	ldr	r0, [pc, #208]	@ (80234f4 <_strtol_l.isra.0+0xf0>)
 8023424:	460d      	mov	r5, r1
 8023426:	462a      	mov	r2, r5
 8023428:	f815 4b01 	ldrb.w	r4, [r5], #1
 802342c:	5d06      	ldrb	r6, [r0, r4]
 802342e:	f016 0608 	ands.w	r6, r6, #8
 8023432:	d1f8      	bne.n	8023426 <_strtol_l.isra.0+0x22>
 8023434:	2c2d      	cmp	r4, #45	@ 0x2d
 8023436:	d110      	bne.n	802345a <_strtol_l.isra.0+0x56>
 8023438:	782c      	ldrb	r4, [r5, #0]
 802343a:	2601      	movs	r6, #1
 802343c:	1c95      	adds	r5, r2, #2
 802343e:	f033 0210 	bics.w	r2, r3, #16
 8023442:	d115      	bne.n	8023470 <_strtol_l.isra.0+0x6c>
 8023444:	2c30      	cmp	r4, #48	@ 0x30
 8023446:	d10d      	bne.n	8023464 <_strtol_l.isra.0+0x60>
 8023448:	782a      	ldrb	r2, [r5, #0]
 802344a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 802344e:	2a58      	cmp	r2, #88	@ 0x58
 8023450:	d108      	bne.n	8023464 <_strtol_l.isra.0+0x60>
 8023452:	786c      	ldrb	r4, [r5, #1]
 8023454:	3502      	adds	r5, #2
 8023456:	2310      	movs	r3, #16
 8023458:	e00a      	b.n	8023470 <_strtol_l.isra.0+0x6c>
 802345a:	2c2b      	cmp	r4, #43	@ 0x2b
 802345c:	bf04      	itt	eq
 802345e:	782c      	ldrbeq	r4, [r5, #0]
 8023460:	1c95      	addeq	r5, r2, #2
 8023462:	e7ec      	b.n	802343e <_strtol_l.isra.0+0x3a>
 8023464:	2b00      	cmp	r3, #0
 8023466:	d1f6      	bne.n	8023456 <_strtol_l.isra.0+0x52>
 8023468:	2c30      	cmp	r4, #48	@ 0x30
 802346a:	bf14      	ite	ne
 802346c:	230a      	movne	r3, #10
 802346e:	2308      	moveq	r3, #8
 8023470:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8023474:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023478:	2200      	movs	r2, #0
 802347a:	fbbc f9f3 	udiv	r9, ip, r3
 802347e:	4610      	mov	r0, r2
 8023480:	fb03 ca19 	mls	sl, r3, r9, ip
 8023484:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8023488:	2f09      	cmp	r7, #9
 802348a:	d80f      	bhi.n	80234ac <_strtol_l.isra.0+0xa8>
 802348c:	463c      	mov	r4, r7
 802348e:	42a3      	cmp	r3, r4
 8023490:	dd1b      	ble.n	80234ca <_strtol_l.isra.0+0xc6>
 8023492:	1c57      	adds	r7, r2, #1
 8023494:	d007      	beq.n	80234a6 <_strtol_l.isra.0+0xa2>
 8023496:	4581      	cmp	r9, r0
 8023498:	d314      	bcc.n	80234c4 <_strtol_l.isra.0+0xc0>
 802349a:	d101      	bne.n	80234a0 <_strtol_l.isra.0+0x9c>
 802349c:	45a2      	cmp	sl, r4
 802349e:	db11      	blt.n	80234c4 <_strtol_l.isra.0+0xc0>
 80234a0:	fb00 4003 	mla	r0, r0, r3, r4
 80234a4:	2201      	movs	r2, #1
 80234a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80234aa:	e7eb      	b.n	8023484 <_strtol_l.isra.0+0x80>
 80234ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80234b0:	2f19      	cmp	r7, #25
 80234b2:	d801      	bhi.n	80234b8 <_strtol_l.isra.0+0xb4>
 80234b4:	3c37      	subs	r4, #55	@ 0x37
 80234b6:	e7ea      	b.n	802348e <_strtol_l.isra.0+0x8a>
 80234b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80234bc:	2f19      	cmp	r7, #25
 80234be:	d804      	bhi.n	80234ca <_strtol_l.isra.0+0xc6>
 80234c0:	3c57      	subs	r4, #87	@ 0x57
 80234c2:	e7e4      	b.n	802348e <_strtol_l.isra.0+0x8a>
 80234c4:	f04f 32ff 	mov.w	r2, #4294967295
 80234c8:	e7ed      	b.n	80234a6 <_strtol_l.isra.0+0xa2>
 80234ca:	1c53      	adds	r3, r2, #1
 80234cc:	d108      	bne.n	80234e0 <_strtol_l.isra.0+0xdc>
 80234ce:	2322      	movs	r3, #34	@ 0x22
 80234d0:	f8ce 3000 	str.w	r3, [lr]
 80234d4:	4660      	mov	r0, ip
 80234d6:	f1b8 0f00 	cmp.w	r8, #0
 80234da:	d0a0      	beq.n	802341e <_strtol_l.isra.0+0x1a>
 80234dc:	1e69      	subs	r1, r5, #1
 80234de:	e006      	b.n	80234ee <_strtol_l.isra.0+0xea>
 80234e0:	b106      	cbz	r6, 80234e4 <_strtol_l.isra.0+0xe0>
 80234e2:	4240      	negs	r0, r0
 80234e4:	f1b8 0f00 	cmp.w	r8, #0
 80234e8:	d099      	beq.n	802341e <_strtol_l.isra.0+0x1a>
 80234ea:	2a00      	cmp	r2, #0
 80234ec:	d1f6      	bne.n	80234dc <_strtol_l.isra.0+0xd8>
 80234ee:	f8c8 1000 	str.w	r1, [r8]
 80234f2:	e794      	b.n	802341e <_strtol_l.isra.0+0x1a>
 80234f4:	08035775 	.word	0x08035775

080234f8 <strtol>:
 80234f8:	4613      	mov	r3, r2
 80234fa:	460a      	mov	r2, r1
 80234fc:	4601      	mov	r1, r0
 80234fe:	4802      	ldr	r0, [pc, #8]	@ (8023508 <strtol+0x10>)
 8023500:	6800      	ldr	r0, [r0, #0]
 8023502:	f7ff bf7f 	b.w	8023404 <_strtol_l.isra.0>
 8023506:	bf00      	nop
 8023508:	24000834 	.word	0x24000834

0802350c <std>:
 802350c:	2300      	movs	r3, #0
 802350e:	b510      	push	{r4, lr}
 8023510:	4604      	mov	r4, r0
 8023512:	e9c0 3300 	strd	r3, r3, [r0]
 8023516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802351a:	6083      	str	r3, [r0, #8]
 802351c:	8181      	strh	r1, [r0, #12]
 802351e:	6643      	str	r3, [r0, #100]	@ 0x64
 8023520:	81c2      	strh	r2, [r0, #14]
 8023522:	6183      	str	r3, [r0, #24]
 8023524:	4619      	mov	r1, r3
 8023526:	2208      	movs	r2, #8
 8023528:	305c      	adds	r0, #92	@ 0x5c
 802352a:	f000 f938 	bl	802379e <memset>
 802352e:	4b0d      	ldr	r3, [pc, #52]	@ (8023564 <std+0x58>)
 8023530:	6263      	str	r3, [r4, #36]	@ 0x24
 8023532:	4b0d      	ldr	r3, [pc, #52]	@ (8023568 <std+0x5c>)
 8023534:	62a3      	str	r3, [r4, #40]	@ 0x28
 8023536:	4b0d      	ldr	r3, [pc, #52]	@ (802356c <std+0x60>)
 8023538:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802353a:	4b0d      	ldr	r3, [pc, #52]	@ (8023570 <std+0x64>)
 802353c:	6323      	str	r3, [r4, #48]	@ 0x30
 802353e:	4b0d      	ldr	r3, [pc, #52]	@ (8023574 <std+0x68>)
 8023540:	6224      	str	r4, [r4, #32]
 8023542:	429c      	cmp	r4, r3
 8023544:	d006      	beq.n	8023554 <std+0x48>
 8023546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802354a:	4294      	cmp	r4, r2
 802354c:	d002      	beq.n	8023554 <std+0x48>
 802354e:	33d0      	adds	r3, #208	@ 0xd0
 8023550:	429c      	cmp	r4, r3
 8023552:	d105      	bne.n	8023560 <std+0x54>
 8023554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8023558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802355c:	f000 ba4a 	b.w	80239f4 <__retarget_lock_init_recursive>
 8023560:	bd10      	pop	{r4, pc}
 8023562:	bf00      	nop
 8023564:	080236c5 	.word	0x080236c5
 8023568:	080236e7 	.word	0x080236e7
 802356c:	0802371f 	.word	0x0802371f
 8023570:	08023743 	.word	0x08023743
 8023574:	24004460 	.word	0x24004460

08023578 <stdio_exit_handler>:
 8023578:	4a02      	ldr	r2, [pc, #8]	@ (8023584 <stdio_exit_handler+0xc>)
 802357a:	4903      	ldr	r1, [pc, #12]	@ (8023588 <stdio_exit_handler+0x10>)
 802357c:	4803      	ldr	r0, [pc, #12]	@ (802358c <stdio_exit_handler+0x14>)
 802357e:	f000 b87b 	b.w	8023678 <_fwalk_sglue>
 8023582:	bf00      	nop
 8023584:	24000828 	.word	0x24000828
 8023588:	08024161 	.word	0x08024161
 802358c:	24000838 	.word	0x24000838

08023590 <cleanup_stdio>:
 8023590:	6841      	ldr	r1, [r0, #4]
 8023592:	4b0c      	ldr	r3, [pc, #48]	@ (80235c4 <cleanup_stdio+0x34>)
 8023594:	4299      	cmp	r1, r3
 8023596:	b510      	push	{r4, lr}
 8023598:	4604      	mov	r4, r0
 802359a:	d001      	beq.n	80235a0 <cleanup_stdio+0x10>
 802359c:	f000 fde0 	bl	8024160 <_fflush_r>
 80235a0:	68a1      	ldr	r1, [r4, #8]
 80235a2:	4b09      	ldr	r3, [pc, #36]	@ (80235c8 <cleanup_stdio+0x38>)
 80235a4:	4299      	cmp	r1, r3
 80235a6:	d002      	beq.n	80235ae <cleanup_stdio+0x1e>
 80235a8:	4620      	mov	r0, r4
 80235aa:	f000 fdd9 	bl	8024160 <_fflush_r>
 80235ae:	68e1      	ldr	r1, [r4, #12]
 80235b0:	4b06      	ldr	r3, [pc, #24]	@ (80235cc <cleanup_stdio+0x3c>)
 80235b2:	4299      	cmp	r1, r3
 80235b4:	d004      	beq.n	80235c0 <cleanup_stdio+0x30>
 80235b6:	4620      	mov	r0, r4
 80235b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235bc:	f000 bdd0 	b.w	8024160 <_fflush_r>
 80235c0:	bd10      	pop	{r4, pc}
 80235c2:	bf00      	nop
 80235c4:	24004460 	.word	0x24004460
 80235c8:	240044c8 	.word	0x240044c8
 80235cc:	24004530 	.word	0x24004530

080235d0 <global_stdio_init.part.0>:
 80235d0:	b510      	push	{r4, lr}
 80235d2:	4b0b      	ldr	r3, [pc, #44]	@ (8023600 <global_stdio_init.part.0+0x30>)
 80235d4:	4c0b      	ldr	r4, [pc, #44]	@ (8023604 <global_stdio_init.part.0+0x34>)
 80235d6:	4a0c      	ldr	r2, [pc, #48]	@ (8023608 <global_stdio_init.part.0+0x38>)
 80235d8:	601a      	str	r2, [r3, #0]
 80235da:	4620      	mov	r0, r4
 80235dc:	2200      	movs	r2, #0
 80235de:	2104      	movs	r1, #4
 80235e0:	f7ff ff94 	bl	802350c <std>
 80235e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80235e8:	2201      	movs	r2, #1
 80235ea:	2109      	movs	r1, #9
 80235ec:	f7ff ff8e 	bl	802350c <std>
 80235f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80235f4:	2202      	movs	r2, #2
 80235f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80235fa:	2112      	movs	r1, #18
 80235fc:	f7ff bf86 	b.w	802350c <std>
 8023600:	24004598 	.word	0x24004598
 8023604:	24004460 	.word	0x24004460
 8023608:	08023579 	.word	0x08023579

0802360c <__sfp_lock_acquire>:
 802360c:	4801      	ldr	r0, [pc, #4]	@ (8023614 <__sfp_lock_acquire+0x8>)
 802360e:	f000 b9f2 	b.w	80239f6 <__retarget_lock_acquire_recursive>
 8023612:	bf00      	nop
 8023614:	240045a1 	.word	0x240045a1

08023618 <__sfp_lock_release>:
 8023618:	4801      	ldr	r0, [pc, #4]	@ (8023620 <__sfp_lock_release+0x8>)
 802361a:	f000 b9ed 	b.w	80239f8 <__retarget_lock_release_recursive>
 802361e:	bf00      	nop
 8023620:	240045a1 	.word	0x240045a1

08023624 <__sinit>:
 8023624:	b510      	push	{r4, lr}
 8023626:	4604      	mov	r4, r0
 8023628:	f7ff fff0 	bl	802360c <__sfp_lock_acquire>
 802362c:	6a23      	ldr	r3, [r4, #32]
 802362e:	b11b      	cbz	r3, 8023638 <__sinit+0x14>
 8023630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023634:	f7ff bff0 	b.w	8023618 <__sfp_lock_release>
 8023638:	4b04      	ldr	r3, [pc, #16]	@ (802364c <__sinit+0x28>)
 802363a:	6223      	str	r3, [r4, #32]
 802363c:	4b04      	ldr	r3, [pc, #16]	@ (8023650 <__sinit+0x2c>)
 802363e:	681b      	ldr	r3, [r3, #0]
 8023640:	2b00      	cmp	r3, #0
 8023642:	d1f5      	bne.n	8023630 <__sinit+0xc>
 8023644:	f7ff ffc4 	bl	80235d0 <global_stdio_init.part.0>
 8023648:	e7f2      	b.n	8023630 <__sinit+0xc>
 802364a:	bf00      	nop
 802364c:	08023591 	.word	0x08023591
 8023650:	24004598 	.word	0x24004598

08023654 <fiprintf>:
 8023654:	b40e      	push	{r1, r2, r3}
 8023656:	b503      	push	{r0, r1, lr}
 8023658:	4601      	mov	r1, r0
 802365a:	ab03      	add	r3, sp, #12
 802365c:	4805      	ldr	r0, [pc, #20]	@ (8023674 <fiprintf+0x20>)
 802365e:	f853 2b04 	ldr.w	r2, [r3], #4
 8023662:	6800      	ldr	r0, [r0, #0]
 8023664:	9301      	str	r3, [sp, #4]
 8023666:	f000 fa53 	bl	8023b10 <_vfiprintf_r>
 802366a:	b002      	add	sp, #8
 802366c:	f85d eb04 	ldr.w	lr, [sp], #4
 8023670:	b003      	add	sp, #12
 8023672:	4770      	bx	lr
 8023674:	24000834 	.word	0x24000834

08023678 <_fwalk_sglue>:
 8023678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802367c:	4607      	mov	r7, r0
 802367e:	4688      	mov	r8, r1
 8023680:	4614      	mov	r4, r2
 8023682:	2600      	movs	r6, #0
 8023684:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023688:	f1b9 0901 	subs.w	r9, r9, #1
 802368c:	d505      	bpl.n	802369a <_fwalk_sglue+0x22>
 802368e:	6824      	ldr	r4, [r4, #0]
 8023690:	2c00      	cmp	r4, #0
 8023692:	d1f7      	bne.n	8023684 <_fwalk_sglue+0xc>
 8023694:	4630      	mov	r0, r6
 8023696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802369a:	89ab      	ldrh	r3, [r5, #12]
 802369c:	2b01      	cmp	r3, #1
 802369e:	d907      	bls.n	80236b0 <_fwalk_sglue+0x38>
 80236a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80236a4:	3301      	adds	r3, #1
 80236a6:	d003      	beq.n	80236b0 <_fwalk_sglue+0x38>
 80236a8:	4629      	mov	r1, r5
 80236aa:	4638      	mov	r0, r7
 80236ac:	47c0      	blx	r8
 80236ae:	4306      	orrs	r6, r0
 80236b0:	3568      	adds	r5, #104	@ 0x68
 80236b2:	e7e9      	b.n	8023688 <_fwalk_sglue+0x10>

080236b4 <putchar>:
 80236b4:	4b02      	ldr	r3, [pc, #8]	@ (80236c0 <putchar+0xc>)
 80236b6:	4601      	mov	r1, r0
 80236b8:	6818      	ldr	r0, [r3, #0]
 80236ba:	6882      	ldr	r2, [r0, #8]
 80236bc:	f000 bd78 	b.w	80241b0 <_putc_r>
 80236c0:	24000834 	.word	0x24000834

080236c4 <__sread>:
 80236c4:	b510      	push	{r4, lr}
 80236c6:	460c      	mov	r4, r1
 80236c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236cc:	f000 f920 	bl	8023910 <_read_r>
 80236d0:	2800      	cmp	r0, #0
 80236d2:	bfab      	itete	ge
 80236d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80236d6:	89a3      	ldrhlt	r3, [r4, #12]
 80236d8:	181b      	addge	r3, r3, r0
 80236da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80236de:	bfac      	ite	ge
 80236e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80236e2:	81a3      	strhlt	r3, [r4, #12]
 80236e4:	bd10      	pop	{r4, pc}

080236e6 <__swrite>:
 80236e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80236ea:	461f      	mov	r7, r3
 80236ec:	898b      	ldrh	r3, [r1, #12]
 80236ee:	05db      	lsls	r3, r3, #23
 80236f0:	4605      	mov	r5, r0
 80236f2:	460c      	mov	r4, r1
 80236f4:	4616      	mov	r6, r2
 80236f6:	d505      	bpl.n	8023704 <__swrite+0x1e>
 80236f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80236fc:	2302      	movs	r3, #2
 80236fe:	2200      	movs	r2, #0
 8023700:	f000 f8f4 	bl	80238ec <_lseek_r>
 8023704:	89a3      	ldrh	r3, [r4, #12]
 8023706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802370a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802370e:	81a3      	strh	r3, [r4, #12]
 8023710:	4632      	mov	r2, r6
 8023712:	463b      	mov	r3, r7
 8023714:	4628      	mov	r0, r5
 8023716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802371a:	f000 b92f 	b.w	802397c <_write_r>

0802371e <__sseek>:
 802371e:	b510      	push	{r4, lr}
 8023720:	460c      	mov	r4, r1
 8023722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023726:	f000 f8e1 	bl	80238ec <_lseek_r>
 802372a:	1c43      	adds	r3, r0, #1
 802372c:	89a3      	ldrh	r3, [r4, #12]
 802372e:	bf15      	itete	ne
 8023730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802373a:	81a3      	strheq	r3, [r4, #12]
 802373c:	bf18      	it	ne
 802373e:	81a3      	strhne	r3, [r4, #12]
 8023740:	bd10      	pop	{r4, pc}

08023742 <__sclose>:
 8023742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023746:	f000 b8c1 	b.w	80238cc <_close_r>

0802374a <memcmp>:
 802374a:	b510      	push	{r4, lr}
 802374c:	3901      	subs	r1, #1
 802374e:	4402      	add	r2, r0
 8023750:	4290      	cmp	r0, r2
 8023752:	d101      	bne.n	8023758 <memcmp+0xe>
 8023754:	2000      	movs	r0, #0
 8023756:	e005      	b.n	8023764 <memcmp+0x1a>
 8023758:	7803      	ldrb	r3, [r0, #0]
 802375a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802375e:	42a3      	cmp	r3, r4
 8023760:	d001      	beq.n	8023766 <memcmp+0x1c>
 8023762:	1b18      	subs	r0, r3, r4
 8023764:	bd10      	pop	{r4, pc}
 8023766:	3001      	adds	r0, #1
 8023768:	e7f2      	b.n	8023750 <memcmp+0x6>

0802376a <memmove>:
 802376a:	4288      	cmp	r0, r1
 802376c:	b510      	push	{r4, lr}
 802376e:	eb01 0402 	add.w	r4, r1, r2
 8023772:	d902      	bls.n	802377a <memmove+0x10>
 8023774:	4284      	cmp	r4, r0
 8023776:	4623      	mov	r3, r4
 8023778:	d807      	bhi.n	802378a <memmove+0x20>
 802377a:	1e43      	subs	r3, r0, #1
 802377c:	42a1      	cmp	r1, r4
 802377e:	d008      	beq.n	8023792 <memmove+0x28>
 8023780:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023784:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023788:	e7f8      	b.n	802377c <memmove+0x12>
 802378a:	4402      	add	r2, r0
 802378c:	4601      	mov	r1, r0
 802378e:	428a      	cmp	r2, r1
 8023790:	d100      	bne.n	8023794 <memmove+0x2a>
 8023792:	bd10      	pop	{r4, pc}
 8023794:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023798:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802379c:	e7f7      	b.n	802378e <memmove+0x24>

0802379e <memset>:
 802379e:	4402      	add	r2, r0
 80237a0:	4603      	mov	r3, r0
 80237a2:	4293      	cmp	r3, r2
 80237a4:	d100      	bne.n	80237a8 <memset+0xa>
 80237a6:	4770      	bx	lr
 80237a8:	f803 1b01 	strb.w	r1, [r3], #1
 80237ac:	e7f9      	b.n	80237a2 <memset+0x4>

080237ae <strchr>:
 80237ae:	b2c9      	uxtb	r1, r1
 80237b0:	4603      	mov	r3, r0
 80237b2:	4618      	mov	r0, r3
 80237b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80237b8:	b112      	cbz	r2, 80237c0 <strchr+0x12>
 80237ba:	428a      	cmp	r2, r1
 80237bc:	d1f9      	bne.n	80237b2 <strchr+0x4>
 80237be:	4770      	bx	lr
 80237c0:	2900      	cmp	r1, #0
 80237c2:	bf18      	it	ne
 80237c4:	2000      	movne	r0, #0
 80237c6:	4770      	bx	lr

080237c8 <strncmp>:
 80237c8:	b510      	push	{r4, lr}
 80237ca:	b16a      	cbz	r2, 80237e8 <strncmp+0x20>
 80237cc:	3901      	subs	r1, #1
 80237ce:	1884      	adds	r4, r0, r2
 80237d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80237d4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80237d8:	429a      	cmp	r2, r3
 80237da:	d103      	bne.n	80237e4 <strncmp+0x1c>
 80237dc:	42a0      	cmp	r0, r4
 80237de:	d001      	beq.n	80237e4 <strncmp+0x1c>
 80237e0:	2a00      	cmp	r2, #0
 80237e2:	d1f5      	bne.n	80237d0 <strncmp+0x8>
 80237e4:	1ad0      	subs	r0, r2, r3
 80237e6:	bd10      	pop	{r4, pc}
 80237e8:	4610      	mov	r0, r2
 80237ea:	e7fc      	b.n	80237e6 <strncmp+0x1e>

080237ec <strncpy>:
 80237ec:	b510      	push	{r4, lr}
 80237ee:	3901      	subs	r1, #1
 80237f0:	4603      	mov	r3, r0
 80237f2:	b132      	cbz	r2, 8023802 <strncpy+0x16>
 80237f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80237f8:	f803 4b01 	strb.w	r4, [r3], #1
 80237fc:	3a01      	subs	r2, #1
 80237fe:	2c00      	cmp	r4, #0
 8023800:	d1f7      	bne.n	80237f2 <strncpy+0x6>
 8023802:	441a      	add	r2, r3
 8023804:	2100      	movs	r1, #0
 8023806:	4293      	cmp	r3, r2
 8023808:	d100      	bne.n	802380c <strncpy+0x20>
 802380a:	bd10      	pop	{r4, pc}
 802380c:	f803 1b01 	strb.w	r1, [r3], #1
 8023810:	e7f9      	b.n	8023806 <strncpy+0x1a>

08023812 <strrchr>:
 8023812:	b538      	push	{r3, r4, r5, lr}
 8023814:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8023818:	4603      	mov	r3, r0
 802381a:	d10e      	bne.n	802383a <strrchr+0x28>
 802381c:	4621      	mov	r1, r4
 802381e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023822:	f7ff bfc4 	b.w	80237ae <strchr>
 8023826:	1c43      	adds	r3, r0, #1
 8023828:	4605      	mov	r5, r0
 802382a:	4621      	mov	r1, r4
 802382c:	4618      	mov	r0, r3
 802382e:	f7ff ffbe 	bl	80237ae <strchr>
 8023832:	2800      	cmp	r0, #0
 8023834:	d1f7      	bne.n	8023826 <strrchr+0x14>
 8023836:	4628      	mov	r0, r5
 8023838:	bd38      	pop	{r3, r4, r5, pc}
 802383a:	2500      	movs	r5, #0
 802383c:	e7f5      	b.n	802382a <strrchr+0x18>

0802383e <strstr>:
 802383e:	780a      	ldrb	r2, [r1, #0]
 8023840:	b570      	push	{r4, r5, r6, lr}
 8023842:	b96a      	cbnz	r2, 8023860 <strstr+0x22>
 8023844:	bd70      	pop	{r4, r5, r6, pc}
 8023846:	429a      	cmp	r2, r3
 8023848:	d109      	bne.n	802385e <strstr+0x20>
 802384a:	460c      	mov	r4, r1
 802384c:	4605      	mov	r5, r0
 802384e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8023852:	2b00      	cmp	r3, #0
 8023854:	d0f6      	beq.n	8023844 <strstr+0x6>
 8023856:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802385a:	429e      	cmp	r6, r3
 802385c:	d0f7      	beq.n	802384e <strstr+0x10>
 802385e:	3001      	adds	r0, #1
 8023860:	7803      	ldrb	r3, [r0, #0]
 8023862:	2b00      	cmp	r3, #0
 8023864:	d1ef      	bne.n	8023846 <strstr+0x8>
 8023866:	4618      	mov	r0, r3
 8023868:	e7ec      	b.n	8023844 <strstr+0x6>

0802386a <_raise_r>:
 802386a:	291f      	cmp	r1, #31
 802386c:	b538      	push	{r3, r4, r5, lr}
 802386e:	4605      	mov	r5, r0
 8023870:	460c      	mov	r4, r1
 8023872:	d904      	bls.n	802387e <_raise_r+0x14>
 8023874:	2316      	movs	r3, #22
 8023876:	6003      	str	r3, [r0, #0]
 8023878:	f04f 30ff 	mov.w	r0, #4294967295
 802387c:	bd38      	pop	{r3, r4, r5, pc}
 802387e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023880:	b112      	cbz	r2, 8023888 <_raise_r+0x1e>
 8023882:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023886:	b94b      	cbnz	r3, 802389c <_raise_r+0x32>
 8023888:	4628      	mov	r0, r5
 802388a:	f000 f865 	bl	8023958 <_getpid_r>
 802388e:	4622      	mov	r2, r4
 8023890:	4601      	mov	r1, r0
 8023892:	4628      	mov	r0, r5
 8023894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023898:	f000 b84c 	b.w	8023934 <_kill_r>
 802389c:	2b01      	cmp	r3, #1
 802389e:	d00a      	beq.n	80238b6 <_raise_r+0x4c>
 80238a0:	1c59      	adds	r1, r3, #1
 80238a2:	d103      	bne.n	80238ac <_raise_r+0x42>
 80238a4:	2316      	movs	r3, #22
 80238a6:	6003      	str	r3, [r0, #0]
 80238a8:	2001      	movs	r0, #1
 80238aa:	e7e7      	b.n	802387c <_raise_r+0x12>
 80238ac:	2100      	movs	r1, #0
 80238ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80238b2:	4620      	mov	r0, r4
 80238b4:	4798      	blx	r3
 80238b6:	2000      	movs	r0, #0
 80238b8:	e7e0      	b.n	802387c <_raise_r+0x12>
	...

080238bc <raise>:
 80238bc:	4b02      	ldr	r3, [pc, #8]	@ (80238c8 <raise+0xc>)
 80238be:	4601      	mov	r1, r0
 80238c0:	6818      	ldr	r0, [r3, #0]
 80238c2:	f7ff bfd2 	b.w	802386a <_raise_r>
 80238c6:	bf00      	nop
 80238c8:	24000834 	.word	0x24000834

080238cc <_close_r>:
 80238cc:	b538      	push	{r3, r4, r5, lr}
 80238ce:	4d06      	ldr	r5, [pc, #24]	@ (80238e8 <_close_r+0x1c>)
 80238d0:	2300      	movs	r3, #0
 80238d2:	4604      	mov	r4, r0
 80238d4:	4608      	mov	r0, r1
 80238d6:	602b      	str	r3, [r5, #0]
 80238d8:	f7dd fbff 	bl	80010da <_close>
 80238dc:	1c43      	adds	r3, r0, #1
 80238de:	d102      	bne.n	80238e6 <_close_r+0x1a>
 80238e0:	682b      	ldr	r3, [r5, #0]
 80238e2:	b103      	cbz	r3, 80238e6 <_close_r+0x1a>
 80238e4:	6023      	str	r3, [r4, #0]
 80238e6:	bd38      	pop	{r3, r4, r5, pc}
 80238e8:	2400459c 	.word	0x2400459c

080238ec <_lseek_r>:
 80238ec:	b538      	push	{r3, r4, r5, lr}
 80238ee:	4d07      	ldr	r5, [pc, #28]	@ (802390c <_lseek_r+0x20>)
 80238f0:	4604      	mov	r4, r0
 80238f2:	4608      	mov	r0, r1
 80238f4:	4611      	mov	r1, r2
 80238f6:	2200      	movs	r2, #0
 80238f8:	602a      	str	r2, [r5, #0]
 80238fa:	461a      	mov	r2, r3
 80238fc:	f7dd fc14 	bl	8001128 <_lseek>
 8023900:	1c43      	adds	r3, r0, #1
 8023902:	d102      	bne.n	802390a <_lseek_r+0x1e>
 8023904:	682b      	ldr	r3, [r5, #0]
 8023906:	b103      	cbz	r3, 802390a <_lseek_r+0x1e>
 8023908:	6023      	str	r3, [r4, #0]
 802390a:	bd38      	pop	{r3, r4, r5, pc}
 802390c:	2400459c 	.word	0x2400459c

08023910 <_read_r>:
 8023910:	b538      	push	{r3, r4, r5, lr}
 8023912:	4d07      	ldr	r5, [pc, #28]	@ (8023930 <_read_r+0x20>)
 8023914:	4604      	mov	r4, r0
 8023916:	4608      	mov	r0, r1
 8023918:	4611      	mov	r1, r2
 802391a:	2200      	movs	r2, #0
 802391c:	602a      	str	r2, [r5, #0]
 802391e:	461a      	mov	r2, r3
 8023920:	f7dd fbbe 	bl	80010a0 <_read>
 8023924:	1c43      	adds	r3, r0, #1
 8023926:	d102      	bne.n	802392e <_read_r+0x1e>
 8023928:	682b      	ldr	r3, [r5, #0]
 802392a:	b103      	cbz	r3, 802392e <_read_r+0x1e>
 802392c:	6023      	str	r3, [r4, #0]
 802392e:	bd38      	pop	{r3, r4, r5, pc}
 8023930:	2400459c 	.word	0x2400459c

08023934 <_kill_r>:
 8023934:	b538      	push	{r3, r4, r5, lr}
 8023936:	4d07      	ldr	r5, [pc, #28]	@ (8023954 <_kill_r+0x20>)
 8023938:	2300      	movs	r3, #0
 802393a:	4604      	mov	r4, r0
 802393c:	4608      	mov	r0, r1
 802393e:	4611      	mov	r1, r2
 8023940:	602b      	str	r3, [r5, #0]
 8023942:	f7dd fb92 	bl	800106a <_kill>
 8023946:	1c43      	adds	r3, r0, #1
 8023948:	d102      	bne.n	8023950 <_kill_r+0x1c>
 802394a:	682b      	ldr	r3, [r5, #0]
 802394c:	b103      	cbz	r3, 8023950 <_kill_r+0x1c>
 802394e:	6023      	str	r3, [r4, #0]
 8023950:	bd38      	pop	{r3, r4, r5, pc}
 8023952:	bf00      	nop
 8023954:	2400459c 	.word	0x2400459c

08023958 <_getpid_r>:
 8023958:	f7dd bb7f 	b.w	800105a <_getpid>

0802395c <_sbrk_r>:
 802395c:	b538      	push	{r3, r4, r5, lr}
 802395e:	4d06      	ldr	r5, [pc, #24]	@ (8023978 <_sbrk_r+0x1c>)
 8023960:	2300      	movs	r3, #0
 8023962:	4604      	mov	r4, r0
 8023964:	4608      	mov	r0, r1
 8023966:	602b      	str	r3, [r5, #0]
 8023968:	f7dd fbec 	bl	8001144 <_sbrk>
 802396c:	1c43      	adds	r3, r0, #1
 802396e:	d102      	bne.n	8023976 <_sbrk_r+0x1a>
 8023970:	682b      	ldr	r3, [r5, #0]
 8023972:	b103      	cbz	r3, 8023976 <_sbrk_r+0x1a>
 8023974:	6023      	str	r3, [r4, #0]
 8023976:	bd38      	pop	{r3, r4, r5, pc}
 8023978:	2400459c 	.word	0x2400459c

0802397c <_write_r>:
 802397c:	b538      	push	{r3, r4, r5, lr}
 802397e:	4d07      	ldr	r5, [pc, #28]	@ (802399c <_write_r+0x20>)
 8023980:	4604      	mov	r4, r0
 8023982:	4608      	mov	r0, r1
 8023984:	4611      	mov	r1, r2
 8023986:	2200      	movs	r2, #0
 8023988:	602a      	str	r2, [r5, #0]
 802398a:	461a      	mov	r2, r3
 802398c:	f7dc fefa 	bl	8000784 <_write>
 8023990:	1c43      	adds	r3, r0, #1
 8023992:	d102      	bne.n	802399a <_write_r+0x1e>
 8023994:	682b      	ldr	r3, [r5, #0]
 8023996:	b103      	cbz	r3, 802399a <_write_r+0x1e>
 8023998:	6023      	str	r3, [r4, #0]
 802399a:	bd38      	pop	{r3, r4, r5, pc}
 802399c:	2400459c 	.word	0x2400459c

080239a0 <__errno>:
 80239a0:	4b01      	ldr	r3, [pc, #4]	@ (80239a8 <__errno+0x8>)
 80239a2:	6818      	ldr	r0, [r3, #0]
 80239a4:	4770      	bx	lr
 80239a6:	bf00      	nop
 80239a8:	24000834 	.word	0x24000834

080239ac <__libc_init_array>:
 80239ac:	b570      	push	{r4, r5, r6, lr}
 80239ae:	4d0d      	ldr	r5, [pc, #52]	@ (80239e4 <__libc_init_array+0x38>)
 80239b0:	4c0d      	ldr	r4, [pc, #52]	@ (80239e8 <__libc_init_array+0x3c>)
 80239b2:	1b64      	subs	r4, r4, r5
 80239b4:	10a4      	asrs	r4, r4, #2
 80239b6:	2600      	movs	r6, #0
 80239b8:	42a6      	cmp	r6, r4
 80239ba:	d109      	bne.n	80239d0 <__libc_init_array+0x24>
 80239bc:	4d0b      	ldr	r5, [pc, #44]	@ (80239ec <__libc_init_array+0x40>)
 80239be:	4c0c      	ldr	r4, [pc, #48]	@ (80239f0 <__libc_init_array+0x44>)
 80239c0:	f000 fd42 	bl	8024448 <_init>
 80239c4:	1b64      	subs	r4, r4, r5
 80239c6:	10a4      	asrs	r4, r4, #2
 80239c8:	2600      	movs	r6, #0
 80239ca:	42a6      	cmp	r6, r4
 80239cc:	d105      	bne.n	80239da <__libc_init_array+0x2e>
 80239ce:	bd70      	pop	{r4, r5, r6, pc}
 80239d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80239d4:	4798      	blx	r3
 80239d6:	3601      	adds	r6, #1
 80239d8:	e7ee      	b.n	80239b8 <__libc_init_array+0xc>
 80239da:	f855 3b04 	ldr.w	r3, [r5], #4
 80239de:	4798      	blx	r3
 80239e0:	3601      	adds	r6, #1
 80239e2:	e7f2      	b.n	80239ca <__libc_init_array+0x1e>
 80239e4:	08035880 	.word	0x08035880
 80239e8:	08035880 	.word	0x08035880
 80239ec:	08035880 	.word	0x08035880
 80239f0:	08035884 	.word	0x08035884

080239f4 <__retarget_lock_init_recursive>:
 80239f4:	4770      	bx	lr

080239f6 <__retarget_lock_acquire_recursive>:
 80239f6:	4770      	bx	lr

080239f8 <__retarget_lock_release_recursive>:
 80239f8:	4770      	bx	lr

080239fa <strcpy>:
 80239fa:	4603      	mov	r3, r0
 80239fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023a00:	f803 2b01 	strb.w	r2, [r3], #1
 8023a04:	2a00      	cmp	r2, #0
 8023a06:	d1f9      	bne.n	80239fc <strcpy+0x2>
 8023a08:	4770      	bx	lr

08023a0a <memcpy>:
 8023a0a:	440a      	add	r2, r1
 8023a0c:	4291      	cmp	r1, r2
 8023a0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8023a12:	d100      	bne.n	8023a16 <memcpy+0xc>
 8023a14:	4770      	bx	lr
 8023a16:	b510      	push	{r4, lr}
 8023a18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023a20:	4291      	cmp	r1, r2
 8023a22:	d1f9      	bne.n	8023a18 <memcpy+0xe>
 8023a24:	bd10      	pop	{r4, pc}
	...

08023a28 <_free_r>:
 8023a28:	b538      	push	{r3, r4, r5, lr}
 8023a2a:	4605      	mov	r5, r0
 8023a2c:	2900      	cmp	r1, #0
 8023a2e:	d041      	beq.n	8023ab4 <_free_r+0x8c>
 8023a30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023a34:	1f0c      	subs	r4, r1, #4
 8023a36:	2b00      	cmp	r3, #0
 8023a38:	bfb8      	it	lt
 8023a3a:	18e4      	addlt	r4, r4, r3
 8023a3c:	f7ff fca8 	bl	8023390 <__malloc_lock>
 8023a40:	4a1d      	ldr	r2, [pc, #116]	@ (8023ab8 <_free_r+0x90>)
 8023a42:	6813      	ldr	r3, [r2, #0]
 8023a44:	b933      	cbnz	r3, 8023a54 <_free_r+0x2c>
 8023a46:	6063      	str	r3, [r4, #4]
 8023a48:	6014      	str	r4, [r2, #0]
 8023a4a:	4628      	mov	r0, r5
 8023a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023a50:	f7ff bca4 	b.w	802339c <__malloc_unlock>
 8023a54:	42a3      	cmp	r3, r4
 8023a56:	d908      	bls.n	8023a6a <_free_r+0x42>
 8023a58:	6820      	ldr	r0, [r4, #0]
 8023a5a:	1821      	adds	r1, r4, r0
 8023a5c:	428b      	cmp	r3, r1
 8023a5e:	bf01      	itttt	eq
 8023a60:	6819      	ldreq	r1, [r3, #0]
 8023a62:	685b      	ldreq	r3, [r3, #4]
 8023a64:	1809      	addeq	r1, r1, r0
 8023a66:	6021      	streq	r1, [r4, #0]
 8023a68:	e7ed      	b.n	8023a46 <_free_r+0x1e>
 8023a6a:	461a      	mov	r2, r3
 8023a6c:	685b      	ldr	r3, [r3, #4]
 8023a6e:	b10b      	cbz	r3, 8023a74 <_free_r+0x4c>
 8023a70:	42a3      	cmp	r3, r4
 8023a72:	d9fa      	bls.n	8023a6a <_free_r+0x42>
 8023a74:	6811      	ldr	r1, [r2, #0]
 8023a76:	1850      	adds	r0, r2, r1
 8023a78:	42a0      	cmp	r0, r4
 8023a7a:	d10b      	bne.n	8023a94 <_free_r+0x6c>
 8023a7c:	6820      	ldr	r0, [r4, #0]
 8023a7e:	4401      	add	r1, r0
 8023a80:	1850      	adds	r0, r2, r1
 8023a82:	4283      	cmp	r3, r0
 8023a84:	6011      	str	r1, [r2, #0]
 8023a86:	d1e0      	bne.n	8023a4a <_free_r+0x22>
 8023a88:	6818      	ldr	r0, [r3, #0]
 8023a8a:	685b      	ldr	r3, [r3, #4]
 8023a8c:	6053      	str	r3, [r2, #4]
 8023a8e:	4408      	add	r0, r1
 8023a90:	6010      	str	r0, [r2, #0]
 8023a92:	e7da      	b.n	8023a4a <_free_r+0x22>
 8023a94:	d902      	bls.n	8023a9c <_free_r+0x74>
 8023a96:	230c      	movs	r3, #12
 8023a98:	602b      	str	r3, [r5, #0]
 8023a9a:	e7d6      	b.n	8023a4a <_free_r+0x22>
 8023a9c:	6820      	ldr	r0, [r4, #0]
 8023a9e:	1821      	adds	r1, r4, r0
 8023aa0:	428b      	cmp	r3, r1
 8023aa2:	bf04      	itt	eq
 8023aa4:	6819      	ldreq	r1, [r3, #0]
 8023aa6:	685b      	ldreq	r3, [r3, #4]
 8023aa8:	6063      	str	r3, [r4, #4]
 8023aaa:	bf04      	itt	eq
 8023aac:	1809      	addeq	r1, r1, r0
 8023aae:	6021      	streq	r1, [r4, #0]
 8023ab0:	6054      	str	r4, [r2, #4]
 8023ab2:	e7ca      	b.n	8023a4a <_free_r+0x22>
 8023ab4:	bd38      	pop	{r3, r4, r5, pc}
 8023ab6:	bf00      	nop
 8023ab8:	2400445c 	.word	0x2400445c

08023abc <__sfputc_r>:
 8023abc:	6893      	ldr	r3, [r2, #8]
 8023abe:	3b01      	subs	r3, #1
 8023ac0:	2b00      	cmp	r3, #0
 8023ac2:	b410      	push	{r4}
 8023ac4:	6093      	str	r3, [r2, #8]
 8023ac6:	da08      	bge.n	8023ada <__sfputc_r+0x1e>
 8023ac8:	6994      	ldr	r4, [r2, #24]
 8023aca:	42a3      	cmp	r3, r4
 8023acc:	db01      	blt.n	8023ad2 <__sfputc_r+0x16>
 8023ace:	290a      	cmp	r1, #10
 8023ad0:	d103      	bne.n	8023ada <__sfputc_r+0x1e>
 8023ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023ad6:	f000 bb9f 	b.w	8024218 <__swbuf_r>
 8023ada:	6813      	ldr	r3, [r2, #0]
 8023adc:	1c58      	adds	r0, r3, #1
 8023ade:	6010      	str	r0, [r2, #0]
 8023ae0:	7019      	strb	r1, [r3, #0]
 8023ae2:	4608      	mov	r0, r1
 8023ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023ae8:	4770      	bx	lr

08023aea <__sfputs_r>:
 8023aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023aec:	4606      	mov	r6, r0
 8023aee:	460f      	mov	r7, r1
 8023af0:	4614      	mov	r4, r2
 8023af2:	18d5      	adds	r5, r2, r3
 8023af4:	42ac      	cmp	r4, r5
 8023af6:	d101      	bne.n	8023afc <__sfputs_r+0x12>
 8023af8:	2000      	movs	r0, #0
 8023afa:	e007      	b.n	8023b0c <__sfputs_r+0x22>
 8023afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023b00:	463a      	mov	r2, r7
 8023b02:	4630      	mov	r0, r6
 8023b04:	f7ff ffda 	bl	8023abc <__sfputc_r>
 8023b08:	1c43      	adds	r3, r0, #1
 8023b0a:	d1f3      	bne.n	8023af4 <__sfputs_r+0xa>
 8023b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023b10 <_vfiprintf_r>:
 8023b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b14:	460d      	mov	r5, r1
 8023b16:	b09d      	sub	sp, #116	@ 0x74
 8023b18:	4614      	mov	r4, r2
 8023b1a:	4698      	mov	r8, r3
 8023b1c:	4606      	mov	r6, r0
 8023b1e:	b118      	cbz	r0, 8023b28 <_vfiprintf_r+0x18>
 8023b20:	6a03      	ldr	r3, [r0, #32]
 8023b22:	b90b      	cbnz	r3, 8023b28 <_vfiprintf_r+0x18>
 8023b24:	f7ff fd7e 	bl	8023624 <__sinit>
 8023b28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023b2a:	07d9      	lsls	r1, r3, #31
 8023b2c:	d405      	bmi.n	8023b3a <_vfiprintf_r+0x2a>
 8023b2e:	89ab      	ldrh	r3, [r5, #12]
 8023b30:	059a      	lsls	r2, r3, #22
 8023b32:	d402      	bmi.n	8023b3a <_vfiprintf_r+0x2a>
 8023b34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023b36:	f7ff ff5e 	bl	80239f6 <__retarget_lock_acquire_recursive>
 8023b3a:	89ab      	ldrh	r3, [r5, #12]
 8023b3c:	071b      	lsls	r3, r3, #28
 8023b3e:	d501      	bpl.n	8023b44 <_vfiprintf_r+0x34>
 8023b40:	692b      	ldr	r3, [r5, #16]
 8023b42:	b99b      	cbnz	r3, 8023b6c <_vfiprintf_r+0x5c>
 8023b44:	4629      	mov	r1, r5
 8023b46:	4630      	mov	r0, r6
 8023b48:	f000 fba4 	bl	8024294 <__swsetup_r>
 8023b4c:	b170      	cbz	r0, 8023b6c <_vfiprintf_r+0x5c>
 8023b4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023b50:	07dc      	lsls	r4, r3, #31
 8023b52:	d504      	bpl.n	8023b5e <_vfiprintf_r+0x4e>
 8023b54:	f04f 30ff 	mov.w	r0, #4294967295
 8023b58:	b01d      	add	sp, #116	@ 0x74
 8023b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b5e:	89ab      	ldrh	r3, [r5, #12]
 8023b60:	0598      	lsls	r0, r3, #22
 8023b62:	d4f7      	bmi.n	8023b54 <_vfiprintf_r+0x44>
 8023b64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023b66:	f7ff ff47 	bl	80239f8 <__retarget_lock_release_recursive>
 8023b6a:	e7f3      	b.n	8023b54 <_vfiprintf_r+0x44>
 8023b6c:	2300      	movs	r3, #0
 8023b6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b70:	2320      	movs	r3, #32
 8023b72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023b76:	f8cd 800c 	str.w	r8, [sp, #12]
 8023b7a:	2330      	movs	r3, #48	@ 0x30
 8023b7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023d2c <_vfiprintf_r+0x21c>
 8023b80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8023b84:	f04f 0901 	mov.w	r9, #1
 8023b88:	4623      	mov	r3, r4
 8023b8a:	469a      	mov	sl, r3
 8023b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023b90:	b10a      	cbz	r2, 8023b96 <_vfiprintf_r+0x86>
 8023b92:	2a25      	cmp	r2, #37	@ 0x25
 8023b94:	d1f9      	bne.n	8023b8a <_vfiprintf_r+0x7a>
 8023b96:	ebba 0b04 	subs.w	fp, sl, r4
 8023b9a:	d00b      	beq.n	8023bb4 <_vfiprintf_r+0xa4>
 8023b9c:	465b      	mov	r3, fp
 8023b9e:	4622      	mov	r2, r4
 8023ba0:	4629      	mov	r1, r5
 8023ba2:	4630      	mov	r0, r6
 8023ba4:	f7ff ffa1 	bl	8023aea <__sfputs_r>
 8023ba8:	3001      	adds	r0, #1
 8023baa:	f000 80a7 	beq.w	8023cfc <_vfiprintf_r+0x1ec>
 8023bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8023bb0:	445a      	add	r2, fp
 8023bb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8023bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8023bb8:	2b00      	cmp	r3, #0
 8023bba:	f000 809f 	beq.w	8023cfc <_vfiprintf_r+0x1ec>
 8023bbe:	2300      	movs	r3, #0
 8023bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8023bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023bc8:	f10a 0a01 	add.w	sl, sl, #1
 8023bcc:	9304      	str	r3, [sp, #16]
 8023bce:	9307      	str	r3, [sp, #28]
 8023bd0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8023bd4:	931a      	str	r3, [sp, #104]	@ 0x68
 8023bd6:	4654      	mov	r4, sl
 8023bd8:	2205      	movs	r2, #5
 8023bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023bde:	4853      	ldr	r0, [pc, #332]	@ (8023d2c <_vfiprintf_r+0x21c>)
 8023be0:	f7dc fba6 	bl	8000330 <memchr>
 8023be4:	9a04      	ldr	r2, [sp, #16]
 8023be6:	b9d8      	cbnz	r0, 8023c20 <_vfiprintf_r+0x110>
 8023be8:	06d1      	lsls	r1, r2, #27
 8023bea:	bf44      	itt	mi
 8023bec:	2320      	movmi	r3, #32
 8023bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023bf2:	0713      	lsls	r3, r2, #28
 8023bf4:	bf44      	itt	mi
 8023bf6:	232b      	movmi	r3, #43	@ 0x2b
 8023bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8023c00:	2b2a      	cmp	r3, #42	@ 0x2a
 8023c02:	d015      	beq.n	8023c30 <_vfiprintf_r+0x120>
 8023c04:	9a07      	ldr	r2, [sp, #28]
 8023c06:	4654      	mov	r4, sl
 8023c08:	2000      	movs	r0, #0
 8023c0a:	f04f 0c0a 	mov.w	ip, #10
 8023c0e:	4621      	mov	r1, r4
 8023c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023c14:	3b30      	subs	r3, #48	@ 0x30
 8023c16:	2b09      	cmp	r3, #9
 8023c18:	d94b      	bls.n	8023cb2 <_vfiprintf_r+0x1a2>
 8023c1a:	b1b0      	cbz	r0, 8023c4a <_vfiprintf_r+0x13a>
 8023c1c:	9207      	str	r2, [sp, #28]
 8023c1e:	e014      	b.n	8023c4a <_vfiprintf_r+0x13a>
 8023c20:	eba0 0308 	sub.w	r3, r0, r8
 8023c24:	fa09 f303 	lsl.w	r3, r9, r3
 8023c28:	4313      	orrs	r3, r2
 8023c2a:	9304      	str	r3, [sp, #16]
 8023c2c:	46a2      	mov	sl, r4
 8023c2e:	e7d2      	b.n	8023bd6 <_vfiprintf_r+0xc6>
 8023c30:	9b03      	ldr	r3, [sp, #12]
 8023c32:	1d19      	adds	r1, r3, #4
 8023c34:	681b      	ldr	r3, [r3, #0]
 8023c36:	9103      	str	r1, [sp, #12]
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	bfbb      	ittet	lt
 8023c3c:	425b      	neglt	r3, r3
 8023c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8023c42:	9307      	strge	r3, [sp, #28]
 8023c44:	9307      	strlt	r3, [sp, #28]
 8023c46:	bfb8      	it	lt
 8023c48:	9204      	strlt	r2, [sp, #16]
 8023c4a:	7823      	ldrb	r3, [r4, #0]
 8023c4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8023c4e:	d10a      	bne.n	8023c66 <_vfiprintf_r+0x156>
 8023c50:	7863      	ldrb	r3, [r4, #1]
 8023c52:	2b2a      	cmp	r3, #42	@ 0x2a
 8023c54:	d132      	bne.n	8023cbc <_vfiprintf_r+0x1ac>
 8023c56:	9b03      	ldr	r3, [sp, #12]
 8023c58:	1d1a      	adds	r2, r3, #4
 8023c5a:	681b      	ldr	r3, [r3, #0]
 8023c5c:	9203      	str	r2, [sp, #12]
 8023c5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8023c62:	3402      	adds	r4, #2
 8023c64:	9305      	str	r3, [sp, #20]
 8023c66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023d3c <_vfiprintf_r+0x22c>
 8023c6a:	7821      	ldrb	r1, [r4, #0]
 8023c6c:	2203      	movs	r2, #3
 8023c6e:	4650      	mov	r0, sl
 8023c70:	f7dc fb5e 	bl	8000330 <memchr>
 8023c74:	b138      	cbz	r0, 8023c86 <_vfiprintf_r+0x176>
 8023c76:	9b04      	ldr	r3, [sp, #16]
 8023c78:	eba0 000a 	sub.w	r0, r0, sl
 8023c7c:	2240      	movs	r2, #64	@ 0x40
 8023c7e:	4082      	lsls	r2, r0
 8023c80:	4313      	orrs	r3, r2
 8023c82:	3401      	adds	r4, #1
 8023c84:	9304      	str	r3, [sp, #16]
 8023c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023c8a:	4829      	ldr	r0, [pc, #164]	@ (8023d30 <_vfiprintf_r+0x220>)
 8023c8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8023c90:	2206      	movs	r2, #6
 8023c92:	f7dc fb4d 	bl	8000330 <memchr>
 8023c96:	2800      	cmp	r0, #0
 8023c98:	d03f      	beq.n	8023d1a <_vfiprintf_r+0x20a>
 8023c9a:	4b26      	ldr	r3, [pc, #152]	@ (8023d34 <_vfiprintf_r+0x224>)
 8023c9c:	bb1b      	cbnz	r3, 8023ce6 <_vfiprintf_r+0x1d6>
 8023c9e:	9b03      	ldr	r3, [sp, #12]
 8023ca0:	3307      	adds	r3, #7
 8023ca2:	f023 0307 	bic.w	r3, r3, #7
 8023ca6:	3308      	adds	r3, #8
 8023ca8:	9303      	str	r3, [sp, #12]
 8023caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023cac:	443b      	add	r3, r7
 8023cae:	9309      	str	r3, [sp, #36]	@ 0x24
 8023cb0:	e76a      	b.n	8023b88 <_vfiprintf_r+0x78>
 8023cb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8023cb6:	460c      	mov	r4, r1
 8023cb8:	2001      	movs	r0, #1
 8023cba:	e7a8      	b.n	8023c0e <_vfiprintf_r+0xfe>
 8023cbc:	2300      	movs	r3, #0
 8023cbe:	3401      	adds	r4, #1
 8023cc0:	9305      	str	r3, [sp, #20]
 8023cc2:	4619      	mov	r1, r3
 8023cc4:	f04f 0c0a 	mov.w	ip, #10
 8023cc8:	4620      	mov	r0, r4
 8023cca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023cce:	3a30      	subs	r2, #48	@ 0x30
 8023cd0:	2a09      	cmp	r2, #9
 8023cd2:	d903      	bls.n	8023cdc <_vfiprintf_r+0x1cc>
 8023cd4:	2b00      	cmp	r3, #0
 8023cd6:	d0c6      	beq.n	8023c66 <_vfiprintf_r+0x156>
 8023cd8:	9105      	str	r1, [sp, #20]
 8023cda:	e7c4      	b.n	8023c66 <_vfiprintf_r+0x156>
 8023cdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8023ce0:	4604      	mov	r4, r0
 8023ce2:	2301      	movs	r3, #1
 8023ce4:	e7f0      	b.n	8023cc8 <_vfiprintf_r+0x1b8>
 8023ce6:	ab03      	add	r3, sp, #12
 8023ce8:	9300      	str	r3, [sp, #0]
 8023cea:	462a      	mov	r2, r5
 8023cec:	4b12      	ldr	r3, [pc, #72]	@ (8023d38 <_vfiprintf_r+0x228>)
 8023cee:	a904      	add	r1, sp, #16
 8023cf0:	4630      	mov	r0, r6
 8023cf2:	f3af 8000 	nop.w
 8023cf6:	4607      	mov	r7, r0
 8023cf8:	1c78      	adds	r0, r7, #1
 8023cfa:	d1d6      	bne.n	8023caa <_vfiprintf_r+0x19a>
 8023cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023cfe:	07d9      	lsls	r1, r3, #31
 8023d00:	d405      	bmi.n	8023d0e <_vfiprintf_r+0x1fe>
 8023d02:	89ab      	ldrh	r3, [r5, #12]
 8023d04:	059a      	lsls	r2, r3, #22
 8023d06:	d402      	bmi.n	8023d0e <_vfiprintf_r+0x1fe>
 8023d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023d0a:	f7ff fe75 	bl	80239f8 <__retarget_lock_release_recursive>
 8023d0e:	89ab      	ldrh	r3, [r5, #12]
 8023d10:	065b      	lsls	r3, r3, #25
 8023d12:	f53f af1f 	bmi.w	8023b54 <_vfiprintf_r+0x44>
 8023d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023d18:	e71e      	b.n	8023b58 <_vfiprintf_r+0x48>
 8023d1a:	ab03      	add	r3, sp, #12
 8023d1c:	9300      	str	r3, [sp, #0]
 8023d1e:	462a      	mov	r2, r5
 8023d20:	4b05      	ldr	r3, [pc, #20]	@ (8023d38 <_vfiprintf_r+0x228>)
 8023d22:	a904      	add	r1, sp, #16
 8023d24:	4630      	mov	r0, r6
 8023d26:	f000 f879 	bl	8023e1c <_printf_i>
 8023d2a:	e7e4      	b.n	8023cf6 <_vfiprintf_r+0x1e6>
 8023d2c:	08035741 	.word	0x08035741
 8023d30:	0803574b 	.word	0x0803574b
 8023d34:	00000000 	.word	0x00000000
 8023d38:	08023aeb 	.word	0x08023aeb
 8023d3c:	08035747 	.word	0x08035747

08023d40 <_printf_common>:
 8023d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023d44:	4616      	mov	r6, r2
 8023d46:	4698      	mov	r8, r3
 8023d48:	688a      	ldr	r2, [r1, #8]
 8023d4a:	690b      	ldr	r3, [r1, #16]
 8023d4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023d50:	4293      	cmp	r3, r2
 8023d52:	bfb8      	it	lt
 8023d54:	4613      	movlt	r3, r2
 8023d56:	6033      	str	r3, [r6, #0]
 8023d58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023d5c:	4607      	mov	r7, r0
 8023d5e:	460c      	mov	r4, r1
 8023d60:	b10a      	cbz	r2, 8023d66 <_printf_common+0x26>
 8023d62:	3301      	adds	r3, #1
 8023d64:	6033      	str	r3, [r6, #0]
 8023d66:	6823      	ldr	r3, [r4, #0]
 8023d68:	0699      	lsls	r1, r3, #26
 8023d6a:	bf42      	ittt	mi
 8023d6c:	6833      	ldrmi	r3, [r6, #0]
 8023d6e:	3302      	addmi	r3, #2
 8023d70:	6033      	strmi	r3, [r6, #0]
 8023d72:	6825      	ldr	r5, [r4, #0]
 8023d74:	f015 0506 	ands.w	r5, r5, #6
 8023d78:	d106      	bne.n	8023d88 <_printf_common+0x48>
 8023d7a:	f104 0a19 	add.w	sl, r4, #25
 8023d7e:	68e3      	ldr	r3, [r4, #12]
 8023d80:	6832      	ldr	r2, [r6, #0]
 8023d82:	1a9b      	subs	r3, r3, r2
 8023d84:	42ab      	cmp	r3, r5
 8023d86:	dc26      	bgt.n	8023dd6 <_printf_common+0x96>
 8023d88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023d8c:	6822      	ldr	r2, [r4, #0]
 8023d8e:	3b00      	subs	r3, #0
 8023d90:	bf18      	it	ne
 8023d92:	2301      	movne	r3, #1
 8023d94:	0692      	lsls	r2, r2, #26
 8023d96:	d42b      	bmi.n	8023df0 <_printf_common+0xb0>
 8023d98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023d9c:	4641      	mov	r1, r8
 8023d9e:	4638      	mov	r0, r7
 8023da0:	47c8      	blx	r9
 8023da2:	3001      	adds	r0, #1
 8023da4:	d01e      	beq.n	8023de4 <_printf_common+0xa4>
 8023da6:	6823      	ldr	r3, [r4, #0]
 8023da8:	6922      	ldr	r2, [r4, #16]
 8023daa:	f003 0306 	and.w	r3, r3, #6
 8023dae:	2b04      	cmp	r3, #4
 8023db0:	bf02      	ittt	eq
 8023db2:	68e5      	ldreq	r5, [r4, #12]
 8023db4:	6833      	ldreq	r3, [r6, #0]
 8023db6:	1aed      	subeq	r5, r5, r3
 8023db8:	68a3      	ldr	r3, [r4, #8]
 8023dba:	bf0c      	ite	eq
 8023dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023dc0:	2500      	movne	r5, #0
 8023dc2:	4293      	cmp	r3, r2
 8023dc4:	bfc4      	itt	gt
 8023dc6:	1a9b      	subgt	r3, r3, r2
 8023dc8:	18ed      	addgt	r5, r5, r3
 8023dca:	2600      	movs	r6, #0
 8023dcc:	341a      	adds	r4, #26
 8023dce:	42b5      	cmp	r5, r6
 8023dd0:	d11a      	bne.n	8023e08 <_printf_common+0xc8>
 8023dd2:	2000      	movs	r0, #0
 8023dd4:	e008      	b.n	8023de8 <_printf_common+0xa8>
 8023dd6:	2301      	movs	r3, #1
 8023dd8:	4652      	mov	r2, sl
 8023dda:	4641      	mov	r1, r8
 8023ddc:	4638      	mov	r0, r7
 8023dde:	47c8      	blx	r9
 8023de0:	3001      	adds	r0, #1
 8023de2:	d103      	bne.n	8023dec <_printf_common+0xac>
 8023de4:	f04f 30ff 	mov.w	r0, #4294967295
 8023de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023dec:	3501      	adds	r5, #1
 8023dee:	e7c6      	b.n	8023d7e <_printf_common+0x3e>
 8023df0:	18e1      	adds	r1, r4, r3
 8023df2:	1c5a      	adds	r2, r3, #1
 8023df4:	2030      	movs	r0, #48	@ 0x30
 8023df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023dfa:	4422      	add	r2, r4
 8023dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023e00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023e04:	3302      	adds	r3, #2
 8023e06:	e7c7      	b.n	8023d98 <_printf_common+0x58>
 8023e08:	2301      	movs	r3, #1
 8023e0a:	4622      	mov	r2, r4
 8023e0c:	4641      	mov	r1, r8
 8023e0e:	4638      	mov	r0, r7
 8023e10:	47c8      	blx	r9
 8023e12:	3001      	adds	r0, #1
 8023e14:	d0e6      	beq.n	8023de4 <_printf_common+0xa4>
 8023e16:	3601      	adds	r6, #1
 8023e18:	e7d9      	b.n	8023dce <_printf_common+0x8e>
	...

08023e1c <_printf_i>:
 8023e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023e20:	7e0f      	ldrb	r7, [r1, #24]
 8023e22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023e24:	2f78      	cmp	r7, #120	@ 0x78
 8023e26:	4691      	mov	r9, r2
 8023e28:	4680      	mov	r8, r0
 8023e2a:	460c      	mov	r4, r1
 8023e2c:	469a      	mov	sl, r3
 8023e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023e32:	d807      	bhi.n	8023e44 <_printf_i+0x28>
 8023e34:	2f62      	cmp	r7, #98	@ 0x62
 8023e36:	d80a      	bhi.n	8023e4e <_printf_i+0x32>
 8023e38:	2f00      	cmp	r7, #0
 8023e3a:	f000 80d1 	beq.w	8023fe0 <_printf_i+0x1c4>
 8023e3e:	2f58      	cmp	r7, #88	@ 0x58
 8023e40:	f000 80b8 	beq.w	8023fb4 <_printf_i+0x198>
 8023e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023e4c:	e03a      	b.n	8023ec4 <_printf_i+0xa8>
 8023e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023e52:	2b15      	cmp	r3, #21
 8023e54:	d8f6      	bhi.n	8023e44 <_printf_i+0x28>
 8023e56:	a101      	add	r1, pc, #4	@ (adr r1, 8023e5c <_printf_i+0x40>)
 8023e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023e5c:	08023eb5 	.word	0x08023eb5
 8023e60:	08023ec9 	.word	0x08023ec9
 8023e64:	08023e45 	.word	0x08023e45
 8023e68:	08023e45 	.word	0x08023e45
 8023e6c:	08023e45 	.word	0x08023e45
 8023e70:	08023e45 	.word	0x08023e45
 8023e74:	08023ec9 	.word	0x08023ec9
 8023e78:	08023e45 	.word	0x08023e45
 8023e7c:	08023e45 	.word	0x08023e45
 8023e80:	08023e45 	.word	0x08023e45
 8023e84:	08023e45 	.word	0x08023e45
 8023e88:	08023fc7 	.word	0x08023fc7
 8023e8c:	08023ef3 	.word	0x08023ef3
 8023e90:	08023f81 	.word	0x08023f81
 8023e94:	08023e45 	.word	0x08023e45
 8023e98:	08023e45 	.word	0x08023e45
 8023e9c:	08023fe9 	.word	0x08023fe9
 8023ea0:	08023e45 	.word	0x08023e45
 8023ea4:	08023ef3 	.word	0x08023ef3
 8023ea8:	08023e45 	.word	0x08023e45
 8023eac:	08023e45 	.word	0x08023e45
 8023eb0:	08023f89 	.word	0x08023f89
 8023eb4:	6833      	ldr	r3, [r6, #0]
 8023eb6:	1d1a      	adds	r2, r3, #4
 8023eb8:	681b      	ldr	r3, [r3, #0]
 8023eba:	6032      	str	r2, [r6, #0]
 8023ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023ec4:	2301      	movs	r3, #1
 8023ec6:	e09c      	b.n	8024002 <_printf_i+0x1e6>
 8023ec8:	6833      	ldr	r3, [r6, #0]
 8023eca:	6820      	ldr	r0, [r4, #0]
 8023ecc:	1d19      	adds	r1, r3, #4
 8023ece:	6031      	str	r1, [r6, #0]
 8023ed0:	0606      	lsls	r6, r0, #24
 8023ed2:	d501      	bpl.n	8023ed8 <_printf_i+0xbc>
 8023ed4:	681d      	ldr	r5, [r3, #0]
 8023ed6:	e003      	b.n	8023ee0 <_printf_i+0xc4>
 8023ed8:	0645      	lsls	r5, r0, #25
 8023eda:	d5fb      	bpl.n	8023ed4 <_printf_i+0xb8>
 8023edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023ee0:	2d00      	cmp	r5, #0
 8023ee2:	da03      	bge.n	8023eec <_printf_i+0xd0>
 8023ee4:	232d      	movs	r3, #45	@ 0x2d
 8023ee6:	426d      	negs	r5, r5
 8023ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023eec:	4858      	ldr	r0, [pc, #352]	@ (8024050 <_printf_i+0x234>)
 8023eee:	230a      	movs	r3, #10
 8023ef0:	e011      	b.n	8023f16 <_printf_i+0xfa>
 8023ef2:	6821      	ldr	r1, [r4, #0]
 8023ef4:	6833      	ldr	r3, [r6, #0]
 8023ef6:	0608      	lsls	r0, r1, #24
 8023ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8023efc:	d402      	bmi.n	8023f04 <_printf_i+0xe8>
 8023efe:	0649      	lsls	r1, r1, #25
 8023f00:	bf48      	it	mi
 8023f02:	b2ad      	uxthmi	r5, r5
 8023f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8023f06:	4852      	ldr	r0, [pc, #328]	@ (8024050 <_printf_i+0x234>)
 8023f08:	6033      	str	r3, [r6, #0]
 8023f0a:	bf14      	ite	ne
 8023f0c:	230a      	movne	r3, #10
 8023f0e:	2308      	moveq	r3, #8
 8023f10:	2100      	movs	r1, #0
 8023f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023f16:	6866      	ldr	r6, [r4, #4]
 8023f18:	60a6      	str	r6, [r4, #8]
 8023f1a:	2e00      	cmp	r6, #0
 8023f1c:	db05      	blt.n	8023f2a <_printf_i+0x10e>
 8023f1e:	6821      	ldr	r1, [r4, #0]
 8023f20:	432e      	orrs	r6, r5
 8023f22:	f021 0104 	bic.w	r1, r1, #4
 8023f26:	6021      	str	r1, [r4, #0]
 8023f28:	d04b      	beq.n	8023fc2 <_printf_i+0x1a6>
 8023f2a:	4616      	mov	r6, r2
 8023f2c:	fbb5 f1f3 	udiv	r1, r5, r3
 8023f30:	fb03 5711 	mls	r7, r3, r1, r5
 8023f34:	5dc7      	ldrb	r7, [r0, r7]
 8023f36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023f3a:	462f      	mov	r7, r5
 8023f3c:	42bb      	cmp	r3, r7
 8023f3e:	460d      	mov	r5, r1
 8023f40:	d9f4      	bls.n	8023f2c <_printf_i+0x110>
 8023f42:	2b08      	cmp	r3, #8
 8023f44:	d10b      	bne.n	8023f5e <_printf_i+0x142>
 8023f46:	6823      	ldr	r3, [r4, #0]
 8023f48:	07df      	lsls	r7, r3, #31
 8023f4a:	d508      	bpl.n	8023f5e <_printf_i+0x142>
 8023f4c:	6923      	ldr	r3, [r4, #16]
 8023f4e:	6861      	ldr	r1, [r4, #4]
 8023f50:	4299      	cmp	r1, r3
 8023f52:	bfde      	ittt	le
 8023f54:	2330      	movle	r3, #48	@ 0x30
 8023f56:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023f5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023f5e:	1b92      	subs	r2, r2, r6
 8023f60:	6122      	str	r2, [r4, #16]
 8023f62:	f8cd a000 	str.w	sl, [sp]
 8023f66:	464b      	mov	r3, r9
 8023f68:	aa03      	add	r2, sp, #12
 8023f6a:	4621      	mov	r1, r4
 8023f6c:	4640      	mov	r0, r8
 8023f6e:	f7ff fee7 	bl	8023d40 <_printf_common>
 8023f72:	3001      	adds	r0, #1
 8023f74:	d14a      	bne.n	802400c <_printf_i+0x1f0>
 8023f76:	f04f 30ff 	mov.w	r0, #4294967295
 8023f7a:	b004      	add	sp, #16
 8023f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023f80:	6823      	ldr	r3, [r4, #0]
 8023f82:	f043 0320 	orr.w	r3, r3, #32
 8023f86:	6023      	str	r3, [r4, #0]
 8023f88:	4832      	ldr	r0, [pc, #200]	@ (8024054 <_printf_i+0x238>)
 8023f8a:	2778      	movs	r7, #120	@ 0x78
 8023f8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023f90:	6823      	ldr	r3, [r4, #0]
 8023f92:	6831      	ldr	r1, [r6, #0]
 8023f94:	061f      	lsls	r7, r3, #24
 8023f96:	f851 5b04 	ldr.w	r5, [r1], #4
 8023f9a:	d402      	bmi.n	8023fa2 <_printf_i+0x186>
 8023f9c:	065f      	lsls	r7, r3, #25
 8023f9e:	bf48      	it	mi
 8023fa0:	b2ad      	uxthmi	r5, r5
 8023fa2:	6031      	str	r1, [r6, #0]
 8023fa4:	07d9      	lsls	r1, r3, #31
 8023fa6:	bf44      	itt	mi
 8023fa8:	f043 0320 	orrmi.w	r3, r3, #32
 8023fac:	6023      	strmi	r3, [r4, #0]
 8023fae:	b11d      	cbz	r5, 8023fb8 <_printf_i+0x19c>
 8023fb0:	2310      	movs	r3, #16
 8023fb2:	e7ad      	b.n	8023f10 <_printf_i+0xf4>
 8023fb4:	4826      	ldr	r0, [pc, #152]	@ (8024050 <_printf_i+0x234>)
 8023fb6:	e7e9      	b.n	8023f8c <_printf_i+0x170>
 8023fb8:	6823      	ldr	r3, [r4, #0]
 8023fba:	f023 0320 	bic.w	r3, r3, #32
 8023fbe:	6023      	str	r3, [r4, #0]
 8023fc0:	e7f6      	b.n	8023fb0 <_printf_i+0x194>
 8023fc2:	4616      	mov	r6, r2
 8023fc4:	e7bd      	b.n	8023f42 <_printf_i+0x126>
 8023fc6:	6833      	ldr	r3, [r6, #0]
 8023fc8:	6825      	ldr	r5, [r4, #0]
 8023fca:	6961      	ldr	r1, [r4, #20]
 8023fcc:	1d18      	adds	r0, r3, #4
 8023fce:	6030      	str	r0, [r6, #0]
 8023fd0:	062e      	lsls	r6, r5, #24
 8023fd2:	681b      	ldr	r3, [r3, #0]
 8023fd4:	d501      	bpl.n	8023fda <_printf_i+0x1be>
 8023fd6:	6019      	str	r1, [r3, #0]
 8023fd8:	e002      	b.n	8023fe0 <_printf_i+0x1c4>
 8023fda:	0668      	lsls	r0, r5, #25
 8023fdc:	d5fb      	bpl.n	8023fd6 <_printf_i+0x1ba>
 8023fde:	8019      	strh	r1, [r3, #0]
 8023fe0:	2300      	movs	r3, #0
 8023fe2:	6123      	str	r3, [r4, #16]
 8023fe4:	4616      	mov	r6, r2
 8023fe6:	e7bc      	b.n	8023f62 <_printf_i+0x146>
 8023fe8:	6833      	ldr	r3, [r6, #0]
 8023fea:	1d1a      	adds	r2, r3, #4
 8023fec:	6032      	str	r2, [r6, #0]
 8023fee:	681e      	ldr	r6, [r3, #0]
 8023ff0:	6862      	ldr	r2, [r4, #4]
 8023ff2:	2100      	movs	r1, #0
 8023ff4:	4630      	mov	r0, r6
 8023ff6:	f7dc f99b 	bl	8000330 <memchr>
 8023ffa:	b108      	cbz	r0, 8024000 <_printf_i+0x1e4>
 8023ffc:	1b80      	subs	r0, r0, r6
 8023ffe:	6060      	str	r0, [r4, #4]
 8024000:	6863      	ldr	r3, [r4, #4]
 8024002:	6123      	str	r3, [r4, #16]
 8024004:	2300      	movs	r3, #0
 8024006:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802400a:	e7aa      	b.n	8023f62 <_printf_i+0x146>
 802400c:	6923      	ldr	r3, [r4, #16]
 802400e:	4632      	mov	r2, r6
 8024010:	4649      	mov	r1, r9
 8024012:	4640      	mov	r0, r8
 8024014:	47d0      	blx	sl
 8024016:	3001      	adds	r0, #1
 8024018:	d0ad      	beq.n	8023f76 <_printf_i+0x15a>
 802401a:	6823      	ldr	r3, [r4, #0]
 802401c:	079b      	lsls	r3, r3, #30
 802401e:	d413      	bmi.n	8024048 <_printf_i+0x22c>
 8024020:	68e0      	ldr	r0, [r4, #12]
 8024022:	9b03      	ldr	r3, [sp, #12]
 8024024:	4298      	cmp	r0, r3
 8024026:	bfb8      	it	lt
 8024028:	4618      	movlt	r0, r3
 802402a:	e7a6      	b.n	8023f7a <_printf_i+0x15e>
 802402c:	2301      	movs	r3, #1
 802402e:	4632      	mov	r2, r6
 8024030:	4649      	mov	r1, r9
 8024032:	4640      	mov	r0, r8
 8024034:	47d0      	blx	sl
 8024036:	3001      	adds	r0, #1
 8024038:	d09d      	beq.n	8023f76 <_printf_i+0x15a>
 802403a:	3501      	adds	r5, #1
 802403c:	68e3      	ldr	r3, [r4, #12]
 802403e:	9903      	ldr	r1, [sp, #12]
 8024040:	1a5b      	subs	r3, r3, r1
 8024042:	42ab      	cmp	r3, r5
 8024044:	dcf2      	bgt.n	802402c <_printf_i+0x210>
 8024046:	e7eb      	b.n	8024020 <_printf_i+0x204>
 8024048:	2500      	movs	r5, #0
 802404a:	f104 0619 	add.w	r6, r4, #25
 802404e:	e7f5      	b.n	802403c <_printf_i+0x220>
 8024050:	08035752 	.word	0x08035752
 8024054:	08035763 	.word	0x08035763

08024058 <__sflush_r>:
 8024058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024060:	0716      	lsls	r6, r2, #28
 8024062:	4605      	mov	r5, r0
 8024064:	460c      	mov	r4, r1
 8024066:	d454      	bmi.n	8024112 <__sflush_r+0xba>
 8024068:	684b      	ldr	r3, [r1, #4]
 802406a:	2b00      	cmp	r3, #0
 802406c:	dc02      	bgt.n	8024074 <__sflush_r+0x1c>
 802406e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8024070:	2b00      	cmp	r3, #0
 8024072:	dd48      	ble.n	8024106 <__sflush_r+0xae>
 8024074:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8024076:	2e00      	cmp	r6, #0
 8024078:	d045      	beq.n	8024106 <__sflush_r+0xae>
 802407a:	2300      	movs	r3, #0
 802407c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8024080:	682f      	ldr	r7, [r5, #0]
 8024082:	6a21      	ldr	r1, [r4, #32]
 8024084:	602b      	str	r3, [r5, #0]
 8024086:	d030      	beq.n	80240ea <__sflush_r+0x92>
 8024088:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802408a:	89a3      	ldrh	r3, [r4, #12]
 802408c:	0759      	lsls	r1, r3, #29
 802408e:	d505      	bpl.n	802409c <__sflush_r+0x44>
 8024090:	6863      	ldr	r3, [r4, #4]
 8024092:	1ad2      	subs	r2, r2, r3
 8024094:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8024096:	b10b      	cbz	r3, 802409c <__sflush_r+0x44>
 8024098:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802409a:	1ad2      	subs	r2, r2, r3
 802409c:	2300      	movs	r3, #0
 802409e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80240a0:	6a21      	ldr	r1, [r4, #32]
 80240a2:	4628      	mov	r0, r5
 80240a4:	47b0      	blx	r6
 80240a6:	1c43      	adds	r3, r0, #1
 80240a8:	89a3      	ldrh	r3, [r4, #12]
 80240aa:	d106      	bne.n	80240ba <__sflush_r+0x62>
 80240ac:	6829      	ldr	r1, [r5, #0]
 80240ae:	291d      	cmp	r1, #29
 80240b0:	d82b      	bhi.n	802410a <__sflush_r+0xb2>
 80240b2:	4a2a      	ldr	r2, [pc, #168]	@ (802415c <__sflush_r+0x104>)
 80240b4:	40ca      	lsrs	r2, r1
 80240b6:	07d6      	lsls	r6, r2, #31
 80240b8:	d527      	bpl.n	802410a <__sflush_r+0xb2>
 80240ba:	2200      	movs	r2, #0
 80240bc:	6062      	str	r2, [r4, #4]
 80240be:	04d9      	lsls	r1, r3, #19
 80240c0:	6922      	ldr	r2, [r4, #16]
 80240c2:	6022      	str	r2, [r4, #0]
 80240c4:	d504      	bpl.n	80240d0 <__sflush_r+0x78>
 80240c6:	1c42      	adds	r2, r0, #1
 80240c8:	d101      	bne.n	80240ce <__sflush_r+0x76>
 80240ca:	682b      	ldr	r3, [r5, #0]
 80240cc:	b903      	cbnz	r3, 80240d0 <__sflush_r+0x78>
 80240ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80240d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80240d2:	602f      	str	r7, [r5, #0]
 80240d4:	b1b9      	cbz	r1, 8024106 <__sflush_r+0xae>
 80240d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80240da:	4299      	cmp	r1, r3
 80240dc:	d002      	beq.n	80240e4 <__sflush_r+0x8c>
 80240de:	4628      	mov	r0, r5
 80240e0:	f7ff fca2 	bl	8023a28 <_free_r>
 80240e4:	2300      	movs	r3, #0
 80240e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80240e8:	e00d      	b.n	8024106 <__sflush_r+0xae>
 80240ea:	2301      	movs	r3, #1
 80240ec:	4628      	mov	r0, r5
 80240ee:	47b0      	blx	r6
 80240f0:	4602      	mov	r2, r0
 80240f2:	1c50      	adds	r0, r2, #1
 80240f4:	d1c9      	bne.n	802408a <__sflush_r+0x32>
 80240f6:	682b      	ldr	r3, [r5, #0]
 80240f8:	2b00      	cmp	r3, #0
 80240fa:	d0c6      	beq.n	802408a <__sflush_r+0x32>
 80240fc:	2b1d      	cmp	r3, #29
 80240fe:	d001      	beq.n	8024104 <__sflush_r+0xac>
 8024100:	2b16      	cmp	r3, #22
 8024102:	d11e      	bne.n	8024142 <__sflush_r+0xea>
 8024104:	602f      	str	r7, [r5, #0]
 8024106:	2000      	movs	r0, #0
 8024108:	e022      	b.n	8024150 <__sflush_r+0xf8>
 802410a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802410e:	b21b      	sxth	r3, r3
 8024110:	e01b      	b.n	802414a <__sflush_r+0xf2>
 8024112:	690f      	ldr	r7, [r1, #16]
 8024114:	2f00      	cmp	r7, #0
 8024116:	d0f6      	beq.n	8024106 <__sflush_r+0xae>
 8024118:	0793      	lsls	r3, r2, #30
 802411a:	680e      	ldr	r6, [r1, #0]
 802411c:	bf08      	it	eq
 802411e:	694b      	ldreq	r3, [r1, #20]
 8024120:	600f      	str	r7, [r1, #0]
 8024122:	bf18      	it	ne
 8024124:	2300      	movne	r3, #0
 8024126:	eba6 0807 	sub.w	r8, r6, r7
 802412a:	608b      	str	r3, [r1, #8]
 802412c:	f1b8 0f00 	cmp.w	r8, #0
 8024130:	dde9      	ble.n	8024106 <__sflush_r+0xae>
 8024132:	6a21      	ldr	r1, [r4, #32]
 8024134:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8024136:	4643      	mov	r3, r8
 8024138:	463a      	mov	r2, r7
 802413a:	4628      	mov	r0, r5
 802413c:	47b0      	blx	r6
 802413e:	2800      	cmp	r0, #0
 8024140:	dc08      	bgt.n	8024154 <__sflush_r+0xfc>
 8024142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802414a:	81a3      	strh	r3, [r4, #12]
 802414c:	f04f 30ff 	mov.w	r0, #4294967295
 8024150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024154:	4407      	add	r7, r0
 8024156:	eba8 0800 	sub.w	r8, r8, r0
 802415a:	e7e7      	b.n	802412c <__sflush_r+0xd4>
 802415c:	20400001 	.word	0x20400001

08024160 <_fflush_r>:
 8024160:	b538      	push	{r3, r4, r5, lr}
 8024162:	690b      	ldr	r3, [r1, #16]
 8024164:	4605      	mov	r5, r0
 8024166:	460c      	mov	r4, r1
 8024168:	b913      	cbnz	r3, 8024170 <_fflush_r+0x10>
 802416a:	2500      	movs	r5, #0
 802416c:	4628      	mov	r0, r5
 802416e:	bd38      	pop	{r3, r4, r5, pc}
 8024170:	b118      	cbz	r0, 802417a <_fflush_r+0x1a>
 8024172:	6a03      	ldr	r3, [r0, #32]
 8024174:	b90b      	cbnz	r3, 802417a <_fflush_r+0x1a>
 8024176:	f7ff fa55 	bl	8023624 <__sinit>
 802417a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802417e:	2b00      	cmp	r3, #0
 8024180:	d0f3      	beq.n	802416a <_fflush_r+0xa>
 8024182:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8024184:	07d0      	lsls	r0, r2, #31
 8024186:	d404      	bmi.n	8024192 <_fflush_r+0x32>
 8024188:	0599      	lsls	r1, r3, #22
 802418a:	d402      	bmi.n	8024192 <_fflush_r+0x32>
 802418c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802418e:	f7ff fc32 	bl	80239f6 <__retarget_lock_acquire_recursive>
 8024192:	4628      	mov	r0, r5
 8024194:	4621      	mov	r1, r4
 8024196:	f7ff ff5f 	bl	8024058 <__sflush_r>
 802419a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802419c:	07da      	lsls	r2, r3, #31
 802419e:	4605      	mov	r5, r0
 80241a0:	d4e4      	bmi.n	802416c <_fflush_r+0xc>
 80241a2:	89a3      	ldrh	r3, [r4, #12]
 80241a4:	059b      	lsls	r3, r3, #22
 80241a6:	d4e1      	bmi.n	802416c <_fflush_r+0xc>
 80241a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80241aa:	f7ff fc25 	bl	80239f8 <__retarget_lock_release_recursive>
 80241ae:	e7dd      	b.n	802416c <_fflush_r+0xc>

080241b0 <_putc_r>:
 80241b0:	b570      	push	{r4, r5, r6, lr}
 80241b2:	460d      	mov	r5, r1
 80241b4:	4614      	mov	r4, r2
 80241b6:	4606      	mov	r6, r0
 80241b8:	b118      	cbz	r0, 80241c2 <_putc_r+0x12>
 80241ba:	6a03      	ldr	r3, [r0, #32]
 80241bc:	b90b      	cbnz	r3, 80241c2 <_putc_r+0x12>
 80241be:	f7ff fa31 	bl	8023624 <__sinit>
 80241c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80241c4:	07d8      	lsls	r0, r3, #31
 80241c6:	d405      	bmi.n	80241d4 <_putc_r+0x24>
 80241c8:	89a3      	ldrh	r3, [r4, #12]
 80241ca:	0599      	lsls	r1, r3, #22
 80241cc:	d402      	bmi.n	80241d4 <_putc_r+0x24>
 80241ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80241d0:	f7ff fc11 	bl	80239f6 <__retarget_lock_acquire_recursive>
 80241d4:	68a3      	ldr	r3, [r4, #8]
 80241d6:	3b01      	subs	r3, #1
 80241d8:	2b00      	cmp	r3, #0
 80241da:	60a3      	str	r3, [r4, #8]
 80241dc:	da05      	bge.n	80241ea <_putc_r+0x3a>
 80241de:	69a2      	ldr	r2, [r4, #24]
 80241e0:	4293      	cmp	r3, r2
 80241e2:	db12      	blt.n	802420a <_putc_r+0x5a>
 80241e4:	b2eb      	uxtb	r3, r5
 80241e6:	2b0a      	cmp	r3, #10
 80241e8:	d00f      	beq.n	802420a <_putc_r+0x5a>
 80241ea:	6823      	ldr	r3, [r4, #0]
 80241ec:	1c5a      	adds	r2, r3, #1
 80241ee:	6022      	str	r2, [r4, #0]
 80241f0:	701d      	strb	r5, [r3, #0]
 80241f2:	b2ed      	uxtb	r5, r5
 80241f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80241f6:	07da      	lsls	r2, r3, #31
 80241f8:	d405      	bmi.n	8024206 <_putc_r+0x56>
 80241fa:	89a3      	ldrh	r3, [r4, #12]
 80241fc:	059b      	lsls	r3, r3, #22
 80241fe:	d402      	bmi.n	8024206 <_putc_r+0x56>
 8024200:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024202:	f7ff fbf9 	bl	80239f8 <__retarget_lock_release_recursive>
 8024206:	4628      	mov	r0, r5
 8024208:	bd70      	pop	{r4, r5, r6, pc}
 802420a:	4629      	mov	r1, r5
 802420c:	4622      	mov	r2, r4
 802420e:	4630      	mov	r0, r6
 8024210:	f000 f802 	bl	8024218 <__swbuf_r>
 8024214:	4605      	mov	r5, r0
 8024216:	e7ed      	b.n	80241f4 <_putc_r+0x44>

08024218 <__swbuf_r>:
 8024218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802421a:	460e      	mov	r6, r1
 802421c:	4614      	mov	r4, r2
 802421e:	4605      	mov	r5, r0
 8024220:	b118      	cbz	r0, 802422a <__swbuf_r+0x12>
 8024222:	6a03      	ldr	r3, [r0, #32]
 8024224:	b90b      	cbnz	r3, 802422a <__swbuf_r+0x12>
 8024226:	f7ff f9fd 	bl	8023624 <__sinit>
 802422a:	69a3      	ldr	r3, [r4, #24]
 802422c:	60a3      	str	r3, [r4, #8]
 802422e:	89a3      	ldrh	r3, [r4, #12]
 8024230:	071a      	lsls	r2, r3, #28
 8024232:	d501      	bpl.n	8024238 <__swbuf_r+0x20>
 8024234:	6923      	ldr	r3, [r4, #16]
 8024236:	b943      	cbnz	r3, 802424a <__swbuf_r+0x32>
 8024238:	4621      	mov	r1, r4
 802423a:	4628      	mov	r0, r5
 802423c:	f000 f82a 	bl	8024294 <__swsetup_r>
 8024240:	b118      	cbz	r0, 802424a <__swbuf_r+0x32>
 8024242:	f04f 37ff 	mov.w	r7, #4294967295
 8024246:	4638      	mov	r0, r7
 8024248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802424a:	6823      	ldr	r3, [r4, #0]
 802424c:	6922      	ldr	r2, [r4, #16]
 802424e:	1a98      	subs	r0, r3, r2
 8024250:	6963      	ldr	r3, [r4, #20]
 8024252:	b2f6      	uxtb	r6, r6
 8024254:	4283      	cmp	r3, r0
 8024256:	4637      	mov	r7, r6
 8024258:	dc05      	bgt.n	8024266 <__swbuf_r+0x4e>
 802425a:	4621      	mov	r1, r4
 802425c:	4628      	mov	r0, r5
 802425e:	f7ff ff7f 	bl	8024160 <_fflush_r>
 8024262:	2800      	cmp	r0, #0
 8024264:	d1ed      	bne.n	8024242 <__swbuf_r+0x2a>
 8024266:	68a3      	ldr	r3, [r4, #8]
 8024268:	3b01      	subs	r3, #1
 802426a:	60a3      	str	r3, [r4, #8]
 802426c:	6823      	ldr	r3, [r4, #0]
 802426e:	1c5a      	adds	r2, r3, #1
 8024270:	6022      	str	r2, [r4, #0]
 8024272:	701e      	strb	r6, [r3, #0]
 8024274:	6962      	ldr	r2, [r4, #20]
 8024276:	1c43      	adds	r3, r0, #1
 8024278:	429a      	cmp	r2, r3
 802427a:	d004      	beq.n	8024286 <__swbuf_r+0x6e>
 802427c:	89a3      	ldrh	r3, [r4, #12]
 802427e:	07db      	lsls	r3, r3, #31
 8024280:	d5e1      	bpl.n	8024246 <__swbuf_r+0x2e>
 8024282:	2e0a      	cmp	r6, #10
 8024284:	d1df      	bne.n	8024246 <__swbuf_r+0x2e>
 8024286:	4621      	mov	r1, r4
 8024288:	4628      	mov	r0, r5
 802428a:	f7ff ff69 	bl	8024160 <_fflush_r>
 802428e:	2800      	cmp	r0, #0
 8024290:	d0d9      	beq.n	8024246 <__swbuf_r+0x2e>
 8024292:	e7d6      	b.n	8024242 <__swbuf_r+0x2a>

08024294 <__swsetup_r>:
 8024294:	b538      	push	{r3, r4, r5, lr}
 8024296:	4b29      	ldr	r3, [pc, #164]	@ (802433c <__swsetup_r+0xa8>)
 8024298:	4605      	mov	r5, r0
 802429a:	6818      	ldr	r0, [r3, #0]
 802429c:	460c      	mov	r4, r1
 802429e:	b118      	cbz	r0, 80242a8 <__swsetup_r+0x14>
 80242a0:	6a03      	ldr	r3, [r0, #32]
 80242a2:	b90b      	cbnz	r3, 80242a8 <__swsetup_r+0x14>
 80242a4:	f7ff f9be 	bl	8023624 <__sinit>
 80242a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80242ac:	0719      	lsls	r1, r3, #28
 80242ae:	d422      	bmi.n	80242f6 <__swsetup_r+0x62>
 80242b0:	06da      	lsls	r2, r3, #27
 80242b2:	d407      	bmi.n	80242c4 <__swsetup_r+0x30>
 80242b4:	2209      	movs	r2, #9
 80242b6:	602a      	str	r2, [r5, #0]
 80242b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80242bc:	81a3      	strh	r3, [r4, #12]
 80242be:	f04f 30ff 	mov.w	r0, #4294967295
 80242c2:	e033      	b.n	802432c <__swsetup_r+0x98>
 80242c4:	0758      	lsls	r0, r3, #29
 80242c6:	d512      	bpl.n	80242ee <__swsetup_r+0x5a>
 80242c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80242ca:	b141      	cbz	r1, 80242de <__swsetup_r+0x4a>
 80242cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80242d0:	4299      	cmp	r1, r3
 80242d2:	d002      	beq.n	80242da <__swsetup_r+0x46>
 80242d4:	4628      	mov	r0, r5
 80242d6:	f7ff fba7 	bl	8023a28 <_free_r>
 80242da:	2300      	movs	r3, #0
 80242dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80242de:	89a3      	ldrh	r3, [r4, #12]
 80242e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80242e4:	81a3      	strh	r3, [r4, #12]
 80242e6:	2300      	movs	r3, #0
 80242e8:	6063      	str	r3, [r4, #4]
 80242ea:	6923      	ldr	r3, [r4, #16]
 80242ec:	6023      	str	r3, [r4, #0]
 80242ee:	89a3      	ldrh	r3, [r4, #12]
 80242f0:	f043 0308 	orr.w	r3, r3, #8
 80242f4:	81a3      	strh	r3, [r4, #12]
 80242f6:	6923      	ldr	r3, [r4, #16]
 80242f8:	b94b      	cbnz	r3, 802430e <__swsetup_r+0x7a>
 80242fa:	89a3      	ldrh	r3, [r4, #12]
 80242fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8024300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8024304:	d003      	beq.n	802430e <__swsetup_r+0x7a>
 8024306:	4621      	mov	r1, r4
 8024308:	4628      	mov	r0, r5
 802430a:	f000 f83f 	bl	802438c <__smakebuf_r>
 802430e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024312:	f013 0201 	ands.w	r2, r3, #1
 8024316:	d00a      	beq.n	802432e <__swsetup_r+0x9a>
 8024318:	2200      	movs	r2, #0
 802431a:	60a2      	str	r2, [r4, #8]
 802431c:	6962      	ldr	r2, [r4, #20]
 802431e:	4252      	negs	r2, r2
 8024320:	61a2      	str	r2, [r4, #24]
 8024322:	6922      	ldr	r2, [r4, #16]
 8024324:	b942      	cbnz	r2, 8024338 <__swsetup_r+0xa4>
 8024326:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802432a:	d1c5      	bne.n	80242b8 <__swsetup_r+0x24>
 802432c:	bd38      	pop	{r3, r4, r5, pc}
 802432e:	0799      	lsls	r1, r3, #30
 8024330:	bf58      	it	pl
 8024332:	6962      	ldrpl	r2, [r4, #20]
 8024334:	60a2      	str	r2, [r4, #8]
 8024336:	e7f4      	b.n	8024322 <__swsetup_r+0x8e>
 8024338:	2000      	movs	r0, #0
 802433a:	e7f7      	b.n	802432c <__swsetup_r+0x98>
 802433c:	24000834 	.word	0x24000834

08024340 <__swhatbuf_r>:
 8024340:	b570      	push	{r4, r5, r6, lr}
 8024342:	460c      	mov	r4, r1
 8024344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024348:	2900      	cmp	r1, #0
 802434a:	b096      	sub	sp, #88	@ 0x58
 802434c:	4615      	mov	r5, r2
 802434e:	461e      	mov	r6, r3
 8024350:	da0d      	bge.n	802436e <__swhatbuf_r+0x2e>
 8024352:	89a3      	ldrh	r3, [r4, #12]
 8024354:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8024358:	f04f 0100 	mov.w	r1, #0
 802435c:	bf14      	ite	ne
 802435e:	2340      	movne	r3, #64	@ 0x40
 8024360:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8024364:	2000      	movs	r0, #0
 8024366:	6031      	str	r1, [r6, #0]
 8024368:	602b      	str	r3, [r5, #0]
 802436a:	b016      	add	sp, #88	@ 0x58
 802436c:	bd70      	pop	{r4, r5, r6, pc}
 802436e:	466a      	mov	r2, sp
 8024370:	f000 f848 	bl	8024404 <_fstat_r>
 8024374:	2800      	cmp	r0, #0
 8024376:	dbec      	blt.n	8024352 <__swhatbuf_r+0x12>
 8024378:	9901      	ldr	r1, [sp, #4]
 802437a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802437e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8024382:	4259      	negs	r1, r3
 8024384:	4159      	adcs	r1, r3
 8024386:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802438a:	e7eb      	b.n	8024364 <__swhatbuf_r+0x24>

0802438c <__smakebuf_r>:
 802438c:	898b      	ldrh	r3, [r1, #12]
 802438e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024390:	079d      	lsls	r5, r3, #30
 8024392:	4606      	mov	r6, r0
 8024394:	460c      	mov	r4, r1
 8024396:	d507      	bpl.n	80243a8 <__smakebuf_r+0x1c>
 8024398:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802439c:	6023      	str	r3, [r4, #0]
 802439e:	6123      	str	r3, [r4, #16]
 80243a0:	2301      	movs	r3, #1
 80243a2:	6163      	str	r3, [r4, #20]
 80243a4:	b003      	add	sp, #12
 80243a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80243a8:	ab01      	add	r3, sp, #4
 80243aa:	466a      	mov	r2, sp
 80243ac:	f7ff ffc8 	bl	8024340 <__swhatbuf_r>
 80243b0:	9f00      	ldr	r7, [sp, #0]
 80243b2:	4605      	mov	r5, r0
 80243b4:	4639      	mov	r1, r7
 80243b6:	4630      	mov	r0, r6
 80243b8:	f7fe ff6a 	bl	8023290 <_malloc_r>
 80243bc:	b948      	cbnz	r0, 80243d2 <__smakebuf_r+0x46>
 80243be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80243c2:	059a      	lsls	r2, r3, #22
 80243c4:	d4ee      	bmi.n	80243a4 <__smakebuf_r+0x18>
 80243c6:	f023 0303 	bic.w	r3, r3, #3
 80243ca:	f043 0302 	orr.w	r3, r3, #2
 80243ce:	81a3      	strh	r3, [r4, #12]
 80243d0:	e7e2      	b.n	8024398 <__smakebuf_r+0xc>
 80243d2:	89a3      	ldrh	r3, [r4, #12]
 80243d4:	6020      	str	r0, [r4, #0]
 80243d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80243da:	81a3      	strh	r3, [r4, #12]
 80243dc:	9b01      	ldr	r3, [sp, #4]
 80243de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80243e2:	b15b      	cbz	r3, 80243fc <__smakebuf_r+0x70>
 80243e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80243e8:	4630      	mov	r0, r6
 80243ea:	f000 f81d 	bl	8024428 <_isatty_r>
 80243ee:	b128      	cbz	r0, 80243fc <__smakebuf_r+0x70>
 80243f0:	89a3      	ldrh	r3, [r4, #12]
 80243f2:	f023 0303 	bic.w	r3, r3, #3
 80243f6:	f043 0301 	orr.w	r3, r3, #1
 80243fa:	81a3      	strh	r3, [r4, #12]
 80243fc:	89a3      	ldrh	r3, [r4, #12]
 80243fe:	431d      	orrs	r5, r3
 8024400:	81a5      	strh	r5, [r4, #12]
 8024402:	e7cf      	b.n	80243a4 <__smakebuf_r+0x18>

08024404 <_fstat_r>:
 8024404:	b538      	push	{r3, r4, r5, lr}
 8024406:	4d07      	ldr	r5, [pc, #28]	@ (8024424 <_fstat_r+0x20>)
 8024408:	2300      	movs	r3, #0
 802440a:	4604      	mov	r4, r0
 802440c:	4608      	mov	r0, r1
 802440e:	4611      	mov	r1, r2
 8024410:	602b      	str	r3, [r5, #0]
 8024412:	f7dc fe6e 	bl	80010f2 <_fstat>
 8024416:	1c43      	adds	r3, r0, #1
 8024418:	d102      	bne.n	8024420 <_fstat_r+0x1c>
 802441a:	682b      	ldr	r3, [r5, #0]
 802441c:	b103      	cbz	r3, 8024420 <_fstat_r+0x1c>
 802441e:	6023      	str	r3, [r4, #0]
 8024420:	bd38      	pop	{r3, r4, r5, pc}
 8024422:	bf00      	nop
 8024424:	2400459c 	.word	0x2400459c

08024428 <_isatty_r>:
 8024428:	b538      	push	{r3, r4, r5, lr}
 802442a:	4d06      	ldr	r5, [pc, #24]	@ (8024444 <_isatty_r+0x1c>)
 802442c:	2300      	movs	r3, #0
 802442e:	4604      	mov	r4, r0
 8024430:	4608      	mov	r0, r1
 8024432:	602b      	str	r3, [r5, #0]
 8024434:	f7dc fe6d 	bl	8001112 <_isatty>
 8024438:	1c43      	adds	r3, r0, #1
 802443a:	d102      	bne.n	8024442 <_isatty_r+0x1a>
 802443c:	682b      	ldr	r3, [r5, #0]
 802443e:	b103      	cbz	r3, 8024442 <_isatty_r+0x1a>
 8024440:	6023      	str	r3, [r4, #0]
 8024442:	bd38      	pop	{r3, r4, r5, pc}
 8024444:	2400459c 	.word	0x2400459c

08024448 <_init>:
 8024448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802444a:	bf00      	nop
 802444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802444e:	bc08      	pop	{r3}
 8024450:	469e      	mov	lr, r3
 8024452:	4770      	bx	lr

08024454 <_fini>:
 8024454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024456:	bf00      	nop
 8024458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802445a:	bc08      	pop	{r3}
 802445c:	469e      	mov	lr, r3
 802445e:	4770      	bx	lr

08024460 <__single_bank_swap_veneer>:
 8024460:	f85f f000 	ldr.w	pc, [pc]	@ 8024464 <__single_bank_swap_veneer+0x4>
 8024464:	24000da9 	.word	0x24000da9

08024468 <__is_dualbank_veneer>:
 8024468:	f85f f000 	ldr.w	pc, [pc]	@ 802446c <__is_dualbank_veneer+0x4>
 802446c:	24000885 	.word	0x24000885

Disassembly of section .data:

24000000 <SystemCoreClock>:
24000000:	03d09000                                ....

24000004 <SystemD2Clock>:
24000004:	03d09000                                ....

24000008 <uwTickPrio>:
24000008:	00000010                                ....

2400000c <uwTickFreq>:
2400000c:	00000001                                ....

24000010 <mg_fs_packed>:
24000010:	08007f53 08007fb5 080080b1 08008113     S...............
24000020:	0800812f 08008185 0800819f 080081d7     /...............
24000030:	080081ef 08008205                       ........

24000038 <mg_fs_posix>:
24000038:	0800821b 08008235 0800824d 08008265     ....5...M...e...
24000048:	08008279 08008293 080082ad 080082c7     y...............
24000058:	080082df 080082f5                       ........

24000060 <s_known_types>:
24000060:	08024d04 00000004 08024d0c 00000018     .M.......M......
24000070:	08024d28 00000003 08024d0c 00000018     (M.......M......
24000080:	08024d2c 00000003 08024d30 00000017     ,M......0M......
24000090:	08024d48 00000002 08024d4c 0000001e     HM......LM......
240000a0:	08024d6c 00000003 08024d4c 0000001e     lM......LM......
240000b0:	08024d70 00000003 08024d74 00000009     pM......tM......
240000c0:	08024d80 00000003 08024d84 00000009     .M.......M......
240000d0:	08024d90 00000003 08024d94 0000000a     .M.......M......
240000e0:	08024da0 00000004 08024d94 0000000a     .M.......M......
240000f0:	08024da8 00000004 08024db0 00000009     .M.......M......
24000100:	08024dbc 00000003 08024dc0 00000008     .M.......M......
24000110:	08024dcc 00000003 08024dd0 0000000d     .M.......M......
24000120:	08024de0 00000003 08024de4 00000019     .M.......M......
24000130:	08024e00 00000003 08024e04 0000000f     .N.......N......
24000140:	08024e14 00000003 08024e18 00000008     .N.......N......
24000150:	08024e24 00000003 08024e28 00000012     $N......(N......
24000160:	08024e3c 00000003 08024e40 00000018     <N......@N......
24000170:	08024e5c 00000002 08024e60 00000010     \N......`N......
24000180:	08024e74 00000003 08024e78 0000000c     tN......xN......
24000190:	08024e88 00000004 08024e90 00000010     .N.......N......
240001a0:	08024ea4 00000003 08024ea8 0000000f     .N.......N......
240001b0:	08024eb8 00000003 08024ebc 0000000a     .N.......N......
240001c0:	08024ec8 00000003 08024ecc 00000009     .N.......N......
240001d0:	08024ed8 00000004 08024ee0 0000000a     .N.......N......
240001e0:	08024eec 00000003 08024ef0 0000000f     .N.......N......
240001f0:	08024f00 00000005 08024d0c 00000018     .O.......M......
24000200:	08024f08 00000003 08024f0c 00000012     .O.......O......
24000210:	08024f20 00000003 08024f24 00000009      O......$O......
24000220:	08024f30 00000004 08024f38 0000000a     0O......8O......
24000230:	08024f44 00000003 08024f48 0000000f     DO......HO......
24000240:	08024f58 00000003 08024f5c 0000000a     XO......\O......
	...

24000258 <mg_log_level>:
24000258:	00000002                                ....

2400025c <s_log_func>:
2400025c:	080109d7                                ....

24000260 <mcast_addr>:
24000260:	005e0001 0000fb00                       ..^.....

24000268 <s_mg_flash_stm32h7>:
24000268:	08000000 00000000 00020000 00000020     ............ ...
24000278:	24000c39 24000bb5                       9..$...$

24000280 <zeros_sha256_digest>:
24000280:	42c4b0e3 141cfc98 c8f4fb9a 24b96f99     ...B.........o.$
24000290:	e441ae27 4c939b64 1b9995a4 55b85278     '.A.d..L....xR.U

240002a0 <mg_tcpip_driver_stm32h>:
240002a0:	080204f9 08020769 00000000 08020985     ....i...........

240002b0 <s_modbus_base>:
240002b0:	000003e8                                ....

240002b4 <s_state>:
240002b4:	0000002a 0000001b 00000043 0000000a     *.......C.......
240002c4:	2e302e31 00000030 00000000 00000000     1.0.0...........
240002d4:	00000000 00000001 00000053              ........S...

240002e0 <s_leds>:
240002e0:	00000100                                ....

240002e4 <s_network_settings>:
240002e4:	2e323931 2e383631 32342e30 00000000     192.168.0.42....
240002f4:	00000000 2e323931 2e383631 00312e30     ....192.168.0.1.
	...
2400030c:	2e353532 2e353532 2e353532 00000030     255.255.255.0...
2400031c:	00000000 00000001 00000000              ............

24000328 <s_settings>:
24000328:	74696465 73202620 20657661 0000656d     edit & save me..
	...
24000350:	6f666e69 00000000 00000000 00000000     info............
24000360:	9ad42c3d 405ec7e6 00000011 00000001     =,....^@........

24000370 <s_security>:
24000370:	696d6461 0000006e 00000000 00000000     admin...........
	...
24000398:	72657375 00000000 00000000 00000000     user............
	...

240003c0 <s_state_attributes>:
240003c0:	080271dc 080271e4 00000000 00000000     .q...q..........
	...
240003d8:	080271e8 080271e4 00000000 00000004     .q...q..........
	...
240003f0:	080271f4 080271e4 00000000 00000008     .q...q..........
	...
24000408:	08027200 080271e4 00000000 0000000c     .r...q..........
	...
24000420:	08027208 08027210 00000000 00000010     .r...r..........
24000430:	00000014 00000000 08027218 08027220     .........r.. r..
24000440:	00000000 00000024 00000000 00000000     ....$...........
24000450:	08027228 08027220 00000000 00000025     (r.. r......%...
	...
24000468:	08027230 080271e4 00000000 00000028     0r...q......(...
	...

24000498 <s_leds_attributes>:
24000498:	08027238 08027220 00000000 00000000     8r.. r..........
	...
240004b0:	08027240 08027220 00000000 00000001     @r.. r..........
	...
240004c8:	08027248 08027220 00000000 00000002     Hr.. r..........
	...

240004f8 <s_network_settings_attributes>:
240004f8:	08027250 08027210 00000000 00000000     Pr...r..........
24000508:	00000014 00000000 0802725c 08027210     ........\r...r..
24000518:	00000000 00000014 00000014 00000000     ................
24000528:	08027268 08027210 00000000 00000028     hr...r......(...
24000538:	00000014 00000000 08027270 08027220     ........pr.. r..
24000548:	00000000 0000003c 00000000 00000000     ....<...........
	...

24000570 <s_settings_attributes>:
24000570:	08027278 08027210 00000000 00000000     xr...r..........
24000580:	00000028 00000000 08027284 08027210     (........r...r..
24000590:	00000000 00000028 0000000a 00000000     ....(...........
240005a0:	08027290 0802729c 080272a4 00000038     .r...r...r..8...
	...
240005b8:	080272ac 080271e4 00000000 00000040     .r...q......@...
	...
240005d0:	080272b4 08027220 00000000 00000044     .r.. r......D...
	...

24000600 <s_security_attributes>:
24000600:	080272c0 08027210 00000000 00000000     .r...r..........
24000610:	00000028 00000000 080272d0 08027210     (........r...r..
24000620:	00000000 00000028 00000028 00000000     ....(...(.......
	...

24000648 <s_apihandler_reboot>:
24000648:	080272e0 080272e8 00000000 00000003     .r...r..........
24000658:	00000007 00000000 08020e3d 08020e61     ........=...a...

24000668 <s_apihandler_reformat>:
24000668:	080272f0 080272e8 00000000 00000003     .r...r..........
24000678:	00000007 00000000 08020ec1 08020ee5     ................

24000688 <s_apihandler_firmware_update>:
24000688:	080272fc 0802730c 00000000 00000003     .r...s..........
24000698:	00000007 00000000 08020f45 08020f9d     ........E.......
240006a8:	08020fd1                                ....

240006ac <s_apihandler_file_upload>:
240006ac:	08027310 0802731c 00000000 00000003     .s...s..........
240006bc:	00000007 00000000 08021021 080210a5     ........!.......
240006cc:	080210e5                                ....

240006d0 <s_apihandler_graph_data>:
240006d0:	08027324 08027330 00000000 00000003     $s..0s..........
240006e0:	00000003 00000000 0802112d              ........-...

240006ec <s_apihandler_state>:
240006ec:	08027338 08027340 00000001 00000000     8s..@s..........
	...
24000704:	240003c0 0000002c 08021165 00000000     ...$,...e.......

24000714 <s_apihandler_leds>:
24000714:	08027348 08027340 00000000 00000003     Hs..@s..........
24000724:	00000003 00000000 24000498 00000003     ...........$....
24000734:	08021195 080211b9                       ........

2400073c <s_apihandler_network_settings>:
2400073c:	08027350 08027340 00000000 00000003     Ps..@s..........
2400074c:	00000007 00000000 240004f8 0000003d     ...........$=...
2400075c:	080211dd 08021225                       ....%...

24000764 <s_apihandler_settings>:
24000764:	08027364 08027340 00000000 00000003     ds..@s..........
24000774:	00000007 00000000 24000570 00000048     ........p..$H...
24000784:	0802126d 08021291                       m.......

2400078c <s_apihandler_security>:
2400078c:	08027370 08027340 00000000 00000007     ps..@s..........
2400079c:	00000007 00000000 24000600 00000050     ...........$P...
240007ac:	080212b5 080212d9                       ........

240007b4 <s_apihandler_loglevels>:
240007b4:	0802737c 08027330 00000000 00000000     |s..0s..........
	...
240007cc:	080212fd                                ....

240007d0 <s_apihandler_events>:
240007d0:	08027388 08027330 00000000 00000000     .s..0s..........
	...
240007e8:	08021335                                5...

240007ec <s_apihandlers>:
240007ec:	24000648 24000668 24000688 240006ac     H..$h..$...$...$
240007fc:	240006d0 240006ec 24000714 2400073c     ...$...$...$<..$
2400080c:	24000764 2400078c 240007b4 240007d0     d..$...$...$...$

2400081c <s_auth>:
2400081c:	08020dd9                                ....

24000820 <s_modbus_handlers>:
24000820:	08020ca1 08020d3d                       ....=...

24000828 <__sglue>:
24000828:	00000000 00000003 24004460              ........`D.$

24000834 <_impure_ptr>:
24000834:	24000838                                8..$

24000838 <_impure_data>:
24000838:	00000000 24004460 240044c8 24004530     ....`D.$.D.$0E.$
	...

24000884 <is_dualbank>:
MG_IRAM static bool is_dualbank(void) {
24000884:	b480      	push	{r7}
24000886:	af00      	add	r7, sp, #0
  return (s_mg_flash_stm32h7.size < 2 * 1024 * 1024) ? false : true;
24000888:	4b06      	ldr	r3, [pc, #24]	@ (240008a4 <is_dualbank+0x20>)
2400088a:	685b      	ldr	r3, [r3, #4]
2400088c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
24000890:	bf2c      	ite	cs
24000892:	2301      	movcs	r3, #1
24000894:	2300      	movcc	r3, #0
24000896:	b2db      	uxtb	r3, r3
}
24000898:	4618      	mov	r0, r3
2400089a:	46bd      	mov	sp, r7
2400089c:	f85d 7b04 	ldr.w	r7, [sp], #4
240008a0:	4770      	bx	lr
240008a2:	bf00      	nop
240008a4:	24000268 	.word	0x24000268

240008a8 <flash_unlock>:
MG_IRAM static void flash_unlock(void) {
240008a8:	b580      	push	{r7, lr}
240008aa:	af00      	add	r7, sp, #0
  if (unlocked == false) {
240008ac:	4b11      	ldr	r3, [pc, #68]	@ (240008f4 <flash_unlock+0x4c>)
240008ae:	781b      	ldrb	r3, [r3, #0]
240008b0:	f083 0301 	eor.w	r3, r3, #1
240008b4:	b2db      	uxtb	r3, r3
240008b6:	2b00      	cmp	r3, #0
240008b8:	d019      	beq.n	240008ee <flash_unlock+0x46>
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0x45670123;
240008ba:	4b0f      	ldr	r3, [pc, #60]	@ (240008f8 <flash_unlock+0x50>)
240008bc:	4a0f      	ldr	r2, [pc, #60]	@ (240008fc <flash_unlock+0x54>)
240008be:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_KEYR) = 0xcdef89ab;
240008c0:	4b0d      	ldr	r3, [pc, #52]	@ (240008f8 <flash_unlock+0x50>)
240008c2:	4a0f      	ldr	r2, [pc, #60]	@ (24000900 <flash_unlock+0x58>)
240008c4:	601a      	str	r2, [r3, #0]
    if (is_dualbank()) {
240008c6:	f7ff ffdd 	bl	24000884 <is_dualbank>
240008ca:	4603      	mov	r3, r0
240008cc:	2b00      	cmp	r3, #0
240008ce:	d005      	beq.n	240008dc <flash_unlock+0x34>
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0x45670123;
240008d0:	4b0c      	ldr	r3, [pc, #48]	@ (24000904 <flash_unlock+0x5c>)
240008d2:	4a0a      	ldr	r2, [pc, #40]	@ (240008fc <flash_unlock+0x54>)
240008d4:	601a      	str	r2, [r3, #0]
      MG_REG(FLASH_BASE2 + FLASH_KEYR) = 0xcdef89ab;
240008d6:	4b0b      	ldr	r3, [pc, #44]	@ (24000904 <flash_unlock+0x5c>)
240008d8:	4a09      	ldr	r2, [pc, #36]	@ (24000900 <flash_unlock+0x58>)
240008da:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x08192a3b;  // opt reg is "shared"
240008dc:	4b0a      	ldr	r3, [pc, #40]	@ (24000908 <flash_unlock+0x60>)
240008de:	4a0b      	ldr	r2, [pc, #44]	@ (2400090c <flash_unlock+0x64>)
240008e0:	601a      	str	r2, [r3, #0]
    MG_REG(FLASH_BASE1 + FLASH_OPTKEYR) = 0x4c5d6e7f;  // thus unlock once
240008e2:	4b09      	ldr	r3, [pc, #36]	@ (24000908 <flash_unlock+0x60>)
240008e4:	4a0a      	ldr	r2, [pc, #40]	@ (24000910 <flash_unlock+0x68>)
240008e6:	601a      	str	r2, [r3, #0]
    unlocked = true;
240008e8:	4b02      	ldr	r3, [pc, #8]	@ (240008f4 <flash_unlock+0x4c>)
240008ea:	2201      	movs	r2, #1
240008ec:	701a      	strb	r2, [r3, #0]
}
240008ee:	bf00      	nop
240008f0:	bd80      	pop	{r7, pc}
240008f2:	bf00      	nop
240008f4:	24004210 	.word	0x24004210
240008f8:	52002004 	.word	0x52002004
240008fc:	45670123 	.word	0x45670123
24000900:	cdef89ab 	.word	0xcdef89ab
24000904:	52002104 	.word	0x52002104
24000908:	52002008 	.word	0x52002008
2400090c:	08192a3b 	.word	0x08192a3b
24000910:	4c5d6e7f 	.word	0x4c5d6e7f

24000914 <flash_page_start>:
MG_IRAM static bool flash_page_start(volatile uint32_t *dst) {
24000914:	b480      	push	{r7}
24000916:	b087      	sub	sp, #28
24000918:	af00      	add	r7, sp, #0
2400091a:	6078      	str	r0, [r7, #4]
  char *base = (char *) s_mg_flash_stm32h7.start,
2400091c:	4b15      	ldr	r3, [pc, #84]	@ (24000974 <flash_page_start+0x60>)
2400091e:	681b      	ldr	r3, [r3, #0]
24000920:	617b      	str	r3, [r7, #20]
       *end = base + s_mg_flash_stm32h7.size;
24000922:	4b14      	ldr	r3, [pc, #80]	@ (24000974 <flash_page_start+0x60>)
24000924:	685b      	ldr	r3, [r3, #4]
24000926:	697a      	ldr	r2, [r7, #20]
24000928:	4413      	add	r3, r2
2400092a:	613b      	str	r3, [r7, #16]
  volatile char *p = (char *) dst;
2400092c:	687b      	ldr	r3, [r7, #4]
2400092e:	60fb      	str	r3, [r7, #12]
  return p >= base && p < end && ((p - base) % s_mg_flash_stm32h7.secsz) == 0;
24000930:	68fa      	ldr	r2, [r7, #12]
24000932:	697b      	ldr	r3, [r7, #20]
24000934:	429a      	cmp	r2, r3
24000936:	d312      	bcc.n	2400095e <flash_page_start+0x4a>
24000938:	68fa      	ldr	r2, [r7, #12]
2400093a:	693b      	ldr	r3, [r7, #16]
2400093c:	429a      	cmp	r2, r3
2400093e:	d20e      	bcs.n	2400095e <flash_page_start+0x4a>
24000940:	68fa      	ldr	r2, [r7, #12]
24000942:	697b      	ldr	r3, [r7, #20]
24000944:	1ad3      	subs	r3, r2, r3
24000946:	461a      	mov	r2, r3
24000948:	4b0a      	ldr	r3, [pc, #40]	@ (24000974 <flash_page_start+0x60>)
2400094a:	689b      	ldr	r3, [r3, #8]
2400094c:	fbb2 f1f3 	udiv	r1, r2, r3
24000950:	fb01 f303 	mul.w	r3, r1, r3
24000954:	1ad3      	subs	r3, r2, r3
24000956:	2b00      	cmp	r3, #0
24000958:	d101      	bne.n	2400095e <flash_page_start+0x4a>
2400095a:	2301      	movs	r3, #1
2400095c:	e000      	b.n	24000960 <flash_page_start+0x4c>
2400095e:	2300      	movs	r3, #0
24000960:	f003 0301 	and.w	r3, r3, #1
24000964:	b2db      	uxtb	r3, r3
}
24000966:	4618      	mov	r0, r3
24000968:	371c      	adds	r7, #28
2400096a:	46bd      	mov	sp, r7
2400096c:	f85d 7b04 	ldr.w	r7, [sp], #4
24000970:	4770      	bx	lr
24000972:	bf00      	nop
24000974:	24000268 	.word	0x24000268

24000978 <flash_is_err>:
MG_IRAM static bool flash_is_err(uint32_t bank) {
24000978:	b480      	push	{r7}
2400097a:	b083      	sub	sp, #12
2400097c:	af00      	add	r7, sp, #0
2400097e:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_SR) & ((MG_BIT(11) - 1) << 17);  // RM0433 4.9.5
24000980:	687b      	ldr	r3, [r7, #4]
24000982:	3310      	adds	r3, #16
24000984:	681a      	ldr	r2, [r3, #0]
24000986:	4b06      	ldr	r3, [pc, #24]	@ (240009a0 <flash_is_err+0x28>)
24000988:	4013      	ands	r3, r2
2400098a:	2b00      	cmp	r3, #0
2400098c:	bf14      	ite	ne
2400098e:	2301      	movne	r3, #1
24000990:	2300      	moveq	r3, #0
24000992:	b2db      	uxtb	r3, r3
}
24000994:	4618      	mov	r0, r3
24000996:	370c      	adds	r7, #12
24000998:	46bd      	mov	sp, r7
2400099a:	f85d 7b04 	ldr.w	r7, [sp], #4
2400099e:	4770      	bx	lr
240009a0:	0ffe0000 	.word	0x0ffe0000

240009a4 <flash_wait>:
MG_IRAM static void flash_wait(uint32_t bank) {
240009a4:	b480      	push	{r7}
240009a6:	b083      	sub	sp, #12
240009a8:	af00      	add	r7, sp, #0
240009aa:	6078      	str	r0, [r7, #4]
  while (MG_REG(bank + FLASH_SR) & (MG_BIT(0) | MG_BIT(2))) (void) 0;
240009ac:	bf00      	nop
240009ae:	687b      	ldr	r3, [r7, #4]
240009b0:	3310      	adds	r3, #16
240009b2:	681b      	ldr	r3, [r3, #0]
240009b4:	f003 0305 	and.w	r3, r3, #5
240009b8:	2b00      	cmp	r3, #0
240009ba:	d1f8      	bne.n	240009ae <flash_wait+0xa>
}
240009bc:	bf00      	nop
240009be:	bf00      	nop
240009c0:	370c      	adds	r7, #12
240009c2:	46bd      	mov	sp, r7
240009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
240009c8:	4770      	bx	lr

240009ca <flash_clear_err>:
MG_IRAM static void flash_clear_err(uint32_t bank) {
240009ca:	b580      	push	{r7, lr}
240009cc:	b082      	sub	sp, #8
240009ce:	af00      	add	r7, sp, #0
240009d0:	6078      	str	r0, [r7, #4]
  flash_wait(bank);                                      // Wait until ready
240009d2:	6878      	ldr	r0, [r7, #4]
240009d4:	f7ff ffe6 	bl	240009a4 <flash_wait>
  MG_REG(bank + FLASH_CCR) = ((MG_BIT(11) - 1) << 16U);  // Clear all errors
240009d8:	687b      	ldr	r3, [r7, #4]
240009da:	3314      	adds	r3, #20
240009dc:	461a      	mov	r2, r3
240009de:	4b03      	ldr	r3, [pc, #12]	@ (240009ec <flash_clear_err+0x22>)
240009e0:	6013      	str	r3, [r2, #0]
}
240009e2:	bf00      	nop
240009e4:	3708      	adds	r7, #8
240009e6:	46bd      	mov	sp, r7
240009e8:	bd80      	pop	{r7, pc}
240009ea:	bf00      	nop
240009ec:	07ff0000 	.word	0x07ff0000

240009f0 <flash_bank_is_swapped>:
MG_IRAM static bool flash_bank_is_swapped(uint32_t bank) {
240009f0:	b480      	push	{r7}
240009f2:	b083      	sub	sp, #12
240009f4:	af00      	add	r7, sp, #0
240009f6:	6078      	str	r0, [r7, #4]
  return MG_REG(bank + FLASH_OPTCR) & MG_BIT(31);  // RM0433 4.9.7
240009f8:	687b      	ldr	r3, [r7, #4]
240009fa:	3318      	adds	r3, #24
240009fc:	681b      	ldr	r3, [r3, #0]
240009fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000a02:	2b00      	cmp	r3, #0
24000a04:	bf14      	ite	ne
24000a06:	2301      	movne	r3, #1
24000a08:	2300      	moveq	r3, #0
24000a0a:	b2db      	uxtb	r3, r3
}
24000a0c:	4618      	mov	r0, r3
24000a0e:	370c      	adds	r7, #12
24000a10:	46bd      	mov	sp, r7
24000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
24000a16:	4770      	bx	lr

24000a18 <flash_bank>:
MG_IRAM static uint32_t flash_bank(void *addr) {
24000a18:	b580      	push	{r7, lr}
24000a1a:	b084      	sub	sp, #16
24000a1c:	af00      	add	r7, sp, #0
24000a1e:	6078      	str	r0, [r7, #4]
  size_t ofs = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000a20:	4b0d      	ldr	r3, [pc, #52]	@ (24000a58 <flash_bank+0x40>)
24000a22:	681b      	ldr	r3, [r3, #0]
24000a24:	687a      	ldr	r2, [r7, #4]
24000a26:	1ad3      	subs	r3, r2, r3
24000a28:	60fb      	str	r3, [r7, #12]
  if (!is_dualbank()) return FLASH_BASE1;
24000a2a:	f7ff ff2b 	bl	24000884 <is_dualbank>
24000a2e:	4603      	mov	r3, r0
24000a30:	f083 0301 	eor.w	r3, r3, #1
24000a34:	b2db      	uxtb	r3, r3
24000a36:	2b00      	cmp	r3, #0
24000a38:	d001      	beq.n	24000a3e <flash_bank+0x26>
24000a3a:	4b08      	ldr	r3, [pc, #32]	@ (24000a5c <flash_bank+0x44>)
24000a3c:	e008      	b.n	24000a50 <flash_bank+0x38>
  return ofs < s_mg_flash_stm32h7.size / 2 ? FLASH_BASE1 : FLASH_BASE2;
24000a3e:	4b06      	ldr	r3, [pc, #24]	@ (24000a58 <flash_bank+0x40>)
24000a40:	685b      	ldr	r3, [r3, #4]
24000a42:	085b      	lsrs	r3, r3, #1
24000a44:	68fa      	ldr	r2, [r7, #12]
24000a46:	429a      	cmp	r2, r3
24000a48:	d201      	bcs.n	24000a4e <flash_bank+0x36>
24000a4a:	4b04      	ldr	r3, [pc, #16]	@ (24000a5c <flash_bank+0x44>)
24000a4c:	e000      	b.n	24000a50 <flash_bank+0x38>
24000a4e:	4b04      	ldr	r3, [pc, #16]	@ (24000a60 <flash_bank+0x48>)
}
24000a50:	4618      	mov	r0, r3
24000a52:	3710      	adds	r7, #16
24000a54:	46bd      	mov	sp, r7
24000a56:	bd80      	pop	{r7, pc}
24000a58:	24000268 	.word	0x24000268
24000a5c:	52002000 	.word	0x52002000
24000a60:	52002100 	.word	0x52002100

24000a64 <mg_stm32h7_erase>:
MG_IRAM static bool mg_stm32h7_erase(void *addr) {
24000a64:	b580      	push	{r7, lr}
24000a66:	b08a      	sub	sp, #40	@ 0x28
24000a68:	af02      	add	r7, sp, #8
24000a6a:	6078      	str	r0, [r7, #4]
  bool ok = false;
24000a6c:	2300      	movs	r3, #0
24000a6e:	77fb      	strb	r3, [r7, #31]
  if (flash_page_start(addr) == false) {
24000a70:	6878      	ldr	r0, [r7, #4]
24000a72:	f7ff ff4f 	bl	24000914 <flash_page_start>
24000a76:	4603      	mov	r3, r0
24000a78:	f083 0301 	eor.w	r3, r3, #1
24000a7c:	b2db      	uxtb	r3, r3
24000a7e:	2b00      	cmp	r3, #0
24000a80:	d00f      	beq.n	24000aa2 <mg_stm32h7_erase+0x3e>
    MG_ERROR(("%p is not on a sector boundary", addr));
24000a82:	4b44      	ldr	r3, [pc, #272]	@ (24000b94 <mg_stm32h7_erase+0x130>)
24000a84:	681b      	ldr	r3, [r3, #0]
24000a86:	2b00      	cmp	r3, #0
24000a88:	dd7e      	ble.n	24000b88 <mg_stm32h7_erase+0x124>
24000a8a:	4b43      	ldr	r3, [pc, #268]	@ (24000b98 <mg_stm32h7_erase+0x134>)
24000a8c:	f641 5228 	movw	r2, #7464	@ 0x1d28
24000a90:	4942      	ldr	r1, [pc, #264]	@ (24000b9c <mg_stm32h7_erase+0x138>)
24000a92:	2001      	movs	r0, #1
24000a94:	f000 f9b4 	bl	24000e00 <__mg_log_prefix_veneer>
24000a98:	6879      	ldr	r1, [r7, #4]
24000a9a:	4841      	ldr	r0, [pc, #260]	@ (24000ba0 <mg_stm32h7_erase+0x13c>)
24000a9c:	f000 f9ac 	bl	24000df8 <__mg_log_veneer>
24000aa0:	e072      	b.n	24000b88 <mg_stm32h7_erase+0x124>
    uintptr_t diff = (char *) addr - (char *) s_mg_flash_stm32h7.start;
24000aa2:	4b40      	ldr	r3, [pc, #256]	@ (24000ba4 <mg_stm32h7_erase+0x140>)
24000aa4:	681b      	ldr	r3, [r3, #0]
24000aa6:	687a      	ldr	r2, [r7, #4]
24000aa8:	1ad3      	subs	r3, r2, r3
24000aaa:	617b      	str	r3, [r7, #20]
    uint32_t sector = diff / s_mg_flash_stm32h7.secsz;
24000aac:	4b3d      	ldr	r3, [pc, #244]	@ (24000ba4 <mg_stm32h7_erase+0x140>)
24000aae:	689b      	ldr	r3, [r3, #8]
24000ab0:	697a      	ldr	r2, [r7, #20]
24000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
24000ab6:	61bb      	str	r3, [r7, #24]
    uint32_t bank = flash_bank(addr);
24000ab8:	6878      	ldr	r0, [r7, #4]
24000aba:	f7ff ffad 	bl	24000a18 <flash_bank>
24000abe:	6138      	str	r0, [r7, #16]
    uint32_t saved_cr = MG_REG(bank + FLASH_CR);  // Save CR value
24000ac0:	693b      	ldr	r3, [r7, #16]
24000ac2:	330c      	adds	r3, #12
24000ac4:	681b      	ldr	r3, [r3, #0]
24000ac6:	60fb      	str	r3, [r7, #12]
    flash_unlock();
24000ac8:	f7ff feee 	bl	240008a8 <flash_unlock>
    if (sector > 7) sector -= 8;
24000acc:	69bb      	ldr	r3, [r7, #24]
24000ace:	2b07      	cmp	r3, #7
24000ad0:	d902      	bls.n	24000ad8 <mg_stm32h7_erase+0x74>
24000ad2:	69bb      	ldr	r3, [r7, #24]
24000ad4:	3b08      	subs	r3, #8
24000ad6:	61bb      	str	r3, [r7, #24]
    flash_clear_err(bank);
24000ad8:	6938      	ldr	r0, [r7, #16]
24000ada:	f7ff ff76 	bl	240009ca <flash_clear_err>
    MG_REG(bank + FLASH_CR) = MG_BIT(5);             // 32-bit write parallelism
24000ade:	693b      	ldr	r3, [r7, #16]
24000ae0:	330c      	adds	r3, #12
24000ae2:	461a      	mov	r2, r3
24000ae4:	2320      	movs	r3, #32
24000ae6:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= (sector & 7U) << 8U;  // Sector to erase
24000ae8:	693b      	ldr	r3, [r7, #16]
24000aea:	330c      	adds	r3, #12
24000aec:	681a      	ldr	r2, [r3, #0]
24000aee:	69bb      	ldr	r3, [r7, #24]
24000af0:	021b      	lsls	r3, r3, #8
24000af2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
24000af6:	6939      	ldr	r1, [r7, #16]
24000af8:	310c      	adds	r1, #12
24000afa:	4313      	orrs	r3, r2
24000afc:	600b      	str	r3, [r1, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(2);            // Sector erase bit
24000afe:	693b      	ldr	r3, [r7, #16]
24000b00:	330c      	adds	r3, #12
24000b02:	681b      	ldr	r3, [r3, #0]
24000b04:	693a      	ldr	r2, [r7, #16]
24000b06:	320c      	adds	r2, #12
24000b08:	f043 0304 	orr.w	r3, r3, #4
24000b0c:	6013      	str	r3, [r2, #0]
    MG_REG(bank + FLASH_CR) |= MG_BIT(7);            // Start erasing
24000b0e:	693b      	ldr	r3, [r7, #16]
24000b10:	330c      	adds	r3, #12
24000b12:	681b      	ldr	r3, [r3, #0]
24000b14:	693a      	ldr	r2, [r7, #16]
24000b16:	320c      	adds	r2, #12
24000b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
24000b1c:	6013      	str	r3, [r2, #0]
    ok = !flash_is_err(bank);
24000b1e:	6938      	ldr	r0, [r7, #16]
24000b20:	f7ff ff2a 	bl	24000978 <flash_is_err>
24000b24:	4603      	mov	r3, r0
24000b26:	2b00      	cmp	r3, #0
24000b28:	bf14      	ite	ne
24000b2a:	2301      	movne	r3, #1
24000b2c:	2300      	moveq	r3, #0
24000b2e:	b2db      	uxtb	r3, r3
24000b30:	f083 0301 	eor.w	r3, r3, #1
24000b34:	b2db      	uxtb	r3, r3
24000b36:	77fb      	strb	r3, [r7, #31]
24000b38:	7ffb      	ldrb	r3, [r7, #31]
24000b3a:	f003 0301 	and.w	r3, r3, #1
24000b3e:	77fb      	strb	r3, [r7, #31]
    MG_DEBUG(("Erase sector %lu @ %p %s. CR %#lx SR %#lx", sector, addr,
24000b40:	4b14      	ldr	r3, [pc, #80]	@ (24000b94 <mg_stm32h7_erase+0x130>)
24000b42:	681b      	ldr	r3, [r3, #0]
24000b44:	2b02      	cmp	r3, #2
24000b46:	dd1a      	ble.n	24000b7e <mg_stm32h7_erase+0x11a>
24000b48:	4b13      	ldr	r3, [pc, #76]	@ (24000b98 <mg_stm32h7_erase+0x134>)
24000b4a:	f641 5238 	movw	r2, #7480	@ 0x1d38
24000b4e:	4913      	ldr	r1, [pc, #76]	@ (24000b9c <mg_stm32h7_erase+0x138>)
24000b50:	2003      	movs	r0, #3
24000b52:	f000 f955 	bl	24000e00 <__mg_log_prefix_veneer>
24000b56:	7ffb      	ldrb	r3, [r7, #31]
24000b58:	2b00      	cmp	r3, #0
24000b5a:	d001      	beq.n	24000b60 <mg_stm32h7_erase+0xfc>
24000b5c:	4912      	ldr	r1, [pc, #72]	@ (24000ba8 <mg_stm32h7_erase+0x144>)
24000b5e:	e000      	b.n	24000b62 <mg_stm32h7_erase+0xfe>
24000b60:	4912      	ldr	r1, [pc, #72]	@ (24000bac <mg_stm32h7_erase+0x148>)
24000b62:	693b      	ldr	r3, [r7, #16]
24000b64:	330c      	adds	r3, #12
24000b66:	681b      	ldr	r3, [r3, #0]
24000b68:	693a      	ldr	r2, [r7, #16]
24000b6a:	3210      	adds	r2, #16
24000b6c:	6812      	ldr	r2, [r2, #0]
24000b6e:	9201      	str	r2, [sp, #4]
24000b70:	9300      	str	r3, [sp, #0]
24000b72:	460b      	mov	r3, r1
24000b74:	687a      	ldr	r2, [r7, #4]
24000b76:	69b9      	ldr	r1, [r7, #24]
24000b78:	480d      	ldr	r0, [pc, #52]	@ (24000bb0 <mg_stm32h7_erase+0x14c>)
24000b7a:	f000 f93d 	bl	24000df8 <__mg_log_veneer>
    MG_REG(bank + FLASH_CR) = saved_cr;  // Restore CR
24000b7e:	693b      	ldr	r3, [r7, #16]
24000b80:	330c      	adds	r3, #12
24000b82:	461a      	mov	r2, r3
24000b84:	68fb      	ldr	r3, [r7, #12]
24000b86:	6013      	str	r3, [r2, #0]
  return ok;
24000b88:	7ffb      	ldrb	r3, [r7, #31]
}
24000b8a:	4618      	mov	r0, r3
24000b8c:	3720      	adds	r7, #32
24000b8e:	46bd      	mov	sp, r7
24000b90:	bd80      	pop	{r7, pc}
24000b92:	bf00      	nop
24000b94:	24000258 	.word	0x24000258
24000b98:	0802818c 	.word	0x0802818c
24000b9c:	08024478 	.word	0x08024478
24000ba0:	08025ab8 	.word	0x08025ab8
24000ba4:	24000268 	.word	0x24000268
24000ba8:	080246f8 	.word	0x080246f8
24000bac:	080246fc 	.word	0x080246fc
24000bb0:	08025ad8 	.word	0x08025ad8

24000bb4 <mg_stm32h7_swap>:
MG_IRAM static bool mg_stm32h7_swap(void) {
24000bb4:	b580      	push	{r7, lr}
24000bb6:	b082      	sub	sp, #8
24000bb8:	af00      	add	r7, sp, #0
  if (!is_dualbank()) return true;
24000bba:	f7ff fe63 	bl	24000884 <is_dualbank>
24000bbe:	4603      	mov	r3, r0
24000bc0:	f083 0301 	eor.w	r3, r3, #1
24000bc4:	b2db      	uxtb	r3, r3
24000bc6:	2b00      	cmp	r3, #0
24000bc8:	d001      	beq.n	24000bce <mg_stm32h7_swap+0x1a>
24000bca:	2301      	movs	r3, #1
24000bcc:	e02e      	b.n	24000c2c <mg_stm32h7_swap+0x78>
  uint32_t bank = FLASH_BASE1;
24000bce:	4b19      	ldr	r3, [pc, #100]	@ (24000c34 <mg_stm32h7_swap+0x80>)
24000bd0:	607b      	str	r3, [r7, #4]
  uint32_t desired = flash_bank_is_swapped(bank) ? 0 : MG_BIT(31);
24000bd2:	6878      	ldr	r0, [r7, #4]
24000bd4:	f7ff ff0c 	bl	240009f0 <flash_bank_is_swapped>
24000bd8:	4603      	mov	r3, r0
24000bda:	2b00      	cmp	r3, #0
24000bdc:	d001      	beq.n	24000be2 <mg_stm32h7_swap+0x2e>
24000bde:	2300      	movs	r3, #0
24000be0:	e001      	b.n	24000be6 <mg_stm32h7_swap+0x32>
24000be2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
24000be6:	603b      	str	r3, [r7, #0]
  flash_unlock();
24000be8:	f7ff fe5e 	bl	240008a8 <flash_unlock>
  flash_clear_err(bank);
24000bec:	6878      	ldr	r0, [r7, #4]
24000bee:	f7ff feec 	bl	240009ca <flash_clear_err>
  MG_SET_BITS(MG_REG(bank + FLASH_OPTSR_PRG), MG_BIT(31), desired);
24000bf2:	687b      	ldr	r3, [r7, #4]
24000bf4:	3320      	adds	r3, #32
24000bf6:	681b      	ldr	r3, [r3, #0]
24000bf8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
24000bfc:	687b      	ldr	r3, [r7, #4]
24000bfe:	3320      	adds	r3, #32
24000c00:	4619      	mov	r1, r3
24000c02:	683b      	ldr	r3, [r7, #0]
24000c04:	4313      	orrs	r3, r2
24000c06:	600b      	str	r3, [r1, #0]
  MG_REG(bank + FLASH_OPTCR) |= MG_BIT(1);  // OPTSTART
24000c08:	687b      	ldr	r3, [r7, #4]
24000c0a:	3318      	adds	r3, #24
24000c0c:	681b      	ldr	r3, [r3, #0]
24000c0e:	687a      	ldr	r2, [r7, #4]
24000c10:	3218      	adds	r2, #24
24000c12:	f043 0302 	orr.w	r3, r3, #2
24000c16:	6013      	str	r3, [r2, #0]
  while ((MG_REG(bank + FLASH_OPTSR_CUR) & MG_BIT(31)) != desired) (void) 0;
24000c18:	bf00      	nop
24000c1a:	687b      	ldr	r3, [r7, #4]
24000c1c:	331c      	adds	r3, #28
24000c1e:	681b      	ldr	r3, [r3, #0]
24000c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
24000c24:	683a      	ldr	r2, [r7, #0]
24000c26:	429a      	cmp	r2, r3
24000c28:	d1f7      	bne.n	24000c1a <mg_stm32h7_swap+0x66>
  return true;
24000c2a:	2301      	movs	r3, #1
}
24000c2c:	4618      	mov	r0, r3
24000c2e:	3708      	adds	r7, #8
24000c30:	46bd      	mov	sp, r7
24000c32:	bd80      	pop	{r7, pc}
24000c34:	52002000 	.word	0x52002000

24000c38 <mg_stm32h7_write>:
MG_IRAM static bool mg_stm32h7_write(void *addr, const void *buf, size_t len) {
24000c38:	b580      	push	{r7, lr}
24000c3a:	b08c      	sub	sp, #48	@ 0x30
24000c3c:	af02      	add	r7, sp, #8
24000c3e:	60f8      	str	r0, [r7, #12]
24000c40:	60b9      	str	r1, [r7, #8]
24000c42:	607a      	str	r2, [r7, #4]
  if ((len % s_mg_flash_stm32h7.align) != 0) {
24000c44:	4b4f      	ldr	r3, [pc, #316]	@ (24000d84 <mg_stm32h7_write+0x14c>)
24000c46:	68da      	ldr	r2, [r3, #12]
24000c48:	687b      	ldr	r3, [r7, #4]
24000c4a:	fbb3 f1f2 	udiv	r1, r3, r2
24000c4e:	fb01 f202 	mul.w	r2, r1, r2
24000c52:	1a9b      	subs	r3, r3, r2
24000c54:	2b00      	cmp	r3, #0
24000c56:	d013      	beq.n	24000c80 <mg_stm32h7_write+0x48>
    MG_ERROR(("%lu is not aligned to %lu", len, s_mg_flash_stm32h7.align));
24000c58:	4b4b      	ldr	r3, [pc, #300]	@ (24000d88 <mg_stm32h7_write+0x150>)
24000c5a:	681b      	ldr	r3, [r3, #0]
24000c5c:	2b00      	cmp	r3, #0
24000c5e:	dd0d      	ble.n	24000c7c <mg_stm32h7_write+0x44>
24000c60:	4b4a      	ldr	r3, [pc, #296]	@ (24000d8c <mg_stm32h7_write+0x154>)
24000c62:	f641 5252 	movw	r2, #7506	@ 0x1d52
24000c66:	494a      	ldr	r1, [pc, #296]	@ (24000d90 <mg_stm32h7_write+0x158>)
24000c68:	2001      	movs	r0, #1
24000c6a:	f000 f8c9 	bl	24000e00 <__mg_log_prefix_veneer>
24000c6e:	4b45      	ldr	r3, [pc, #276]	@ (24000d84 <mg_stm32h7_write+0x14c>)
24000c70:	68db      	ldr	r3, [r3, #12]
24000c72:	461a      	mov	r2, r3
24000c74:	6879      	ldr	r1, [r7, #4]
24000c76:	4847      	ldr	r0, [pc, #284]	@ (24000d94 <mg_stm32h7_write+0x15c>)
24000c78:	f000 f8be 	bl	24000df8 <__mg_log_veneer>
    return false;
24000c7c:	2300      	movs	r3, #0
24000c7e:	e07d      	b.n	24000d7c <mg_stm32h7_write+0x144>
  uint32_t bank = flash_bank(addr);
24000c80:	68f8      	ldr	r0, [r7, #12]
24000c82:	f7ff fec9 	bl	24000a18 <flash_bank>
24000c86:	61b8      	str	r0, [r7, #24]
  uint32_t *dst = (uint32_t *) addr;
24000c88:	68fb      	ldr	r3, [r7, #12]
24000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t *src = (uint32_t *) buf;
24000c8c:	68bb      	ldr	r3, [r7, #8]
24000c8e:	623b      	str	r3, [r7, #32]
  uint32_t *end = (uint32_t *) ((char *) buf + len);
24000c90:	68ba      	ldr	r2, [r7, #8]
24000c92:	687b      	ldr	r3, [r7, #4]
24000c94:	4413      	add	r3, r2
24000c96:	617b      	str	r3, [r7, #20]
  bool ok = true;
24000c98:	2301      	movs	r3, #1
24000c9a:	77fb      	strb	r3, [r7, #31]
  MG_ARM_DISABLE_IRQ();
24000c9c:	b672      	cpsid	i
  flash_unlock();
24000c9e:	f7ff fe03 	bl	240008a8 <flash_unlock>
  flash_clear_err(bank);
24000ca2:	69b8      	ldr	r0, [r7, #24]
24000ca4:	f7ff fe91 	bl	240009ca <flash_clear_err>
  MG_REG(bank + FLASH_CR) = MG_BIT(1);   // Set programming flag
24000ca8:	69bb      	ldr	r3, [r7, #24]
24000caa:	330c      	adds	r3, #12
24000cac:	461a      	mov	r2, r3
24000cae:	2302      	movs	r3, #2
24000cb0:	6013      	str	r3, [r2, #0]
  MG_REG(bank + FLASH_CR) |= MG_BIT(5);  // 32-bit write parallelism
24000cb2:	69bb      	ldr	r3, [r7, #24]
24000cb4:	330c      	adds	r3, #12
24000cb6:	681b      	ldr	r3, [r3, #0]
24000cb8:	69ba      	ldr	r2, [r7, #24]
24000cba:	320c      	adds	r2, #12
24000cbc:	f043 0320 	orr.w	r3, r3, #32
24000cc0:	6013      	str	r3, [r2, #0]
  while (ok && src < end) {
24000cc2:	e024      	b.n	24000d0e <mg_stm32h7_write+0xd6>
    if (flash_page_start(dst) && mg_stm32h7_erase(dst) == false) {
24000cc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000cc6:	f7ff fe25 	bl	24000914 <flash_page_start>
24000cca:	4603      	mov	r3, r0
24000ccc:	2b00      	cmp	r3, #0
24000cce:	d00b      	beq.n	24000ce8 <mg_stm32h7_write+0xb0>
24000cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
24000cd2:	f7ff fec7 	bl	24000a64 <mg_stm32h7_erase>
24000cd6:	4603      	mov	r3, r0
24000cd8:	f083 0301 	eor.w	r3, r3, #1
24000cdc:	b2db      	uxtb	r3, r3
24000cde:	2b00      	cmp	r3, #0
24000ce0:	d002      	beq.n	24000ce8 <mg_stm32h7_write+0xb0>
      ok = false;
24000ce2:	2300      	movs	r3, #0
24000ce4:	77fb      	strb	r3, [r7, #31]
      break;
24000ce6:	e019      	b.n	24000d1c <mg_stm32h7_write+0xe4>
    *(volatile uint32_t *) dst++ = *src++;
24000ce8:	6a3a      	ldr	r2, [r7, #32]
24000cea:	1d13      	adds	r3, r2, #4
24000cec:	623b      	str	r3, [r7, #32]
24000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
24000cf0:	1d19      	adds	r1, r3, #4
24000cf2:	6279      	str	r1, [r7, #36]	@ 0x24
24000cf4:	6812      	ldr	r2, [r2, #0]
24000cf6:	601a      	str	r2, [r3, #0]
    flash_wait(bank);
24000cf8:	69b8      	ldr	r0, [r7, #24]
24000cfa:	f7ff fe53 	bl	240009a4 <flash_wait>
    if (flash_is_err(bank)) ok = false;
24000cfe:	69b8      	ldr	r0, [r7, #24]
24000d00:	f7ff fe3a 	bl	24000978 <flash_is_err>
24000d04:	4603      	mov	r3, r0
24000d06:	2b00      	cmp	r3, #0
24000d08:	d001      	beq.n	24000d0e <mg_stm32h7_write+0xd6>
24000d0a:	2300      	movs	r3, #0
24000d0c:	77fb      	strb	r3, [r7, #31]
  while (ok && src < end) {
24000d0e:	7ffb      	ldrb	r3, [r7, #31]
24000d10:	2b00      	cmp	r3, #0
24000d12:	d003      	beq.n	24000d1c <mg_stm32h7_write+0xe4>
24000d14:	6a3a      	ldr	r2, [r7, #32]
24000d16:	697b      	ldr	r3, [r7, #20]
24000d18:	429a      	cmp	r2, r3
24000d1a:	d3d3      	bcc.n	24000cc4 <mg_stm32h7_write+0x8c>
  if (!s_flash_irq_disabled) MG_ARM_ENABLE_IRQ();
24000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (24000d98 <mg_stm32h7_write+0x160>)
24000d1e:	781b      	ldrb	r3, [r3, #0]
24000d20:	f083 0301 	eor.w	r3, r3, #1
24000d24:	b2db      	uxtb	r3, r3
24000d26:	2b00      	cmp	r3, #0
24000d28:	d000      	beq.n	24000d2c <mg_stm32h7_write+0xf4>
24000d2a:	b662      	cpsie	i
  MG_DEBUG(("Flash write %lu bytes @ %p: %s. CR %#lx SR %#lx", len, dst,
24000d2c:	4b16      	ldr	r3, [pc, #88]	@ (24000d88 <mg_stm32h7_write+0x150>)
24000d2e:	681b      	ldr	r3, [r3, #0]
24000d30:	2b02      	cmp	r3, #2
24000d32:	dd1a      	ble.n	24000d6a <mg_stm32h7_write+0x132>
24000d34:	4b15      	ldr	r3, [pc, #84]	@ (24000d8c <mg_stm32h7_write+0x154>)
24000d36:	f641 5269 	movw	r2, #7529	@ 0x1d69
24000d3a:	4915      	ldr	r1, [pc, #84]	@ (24000d90 <mg_stm32h7_write+0x158>)
24000d3c:	2003      	movs	r0, #3
24000d3e:	f000 f85f 	bl	24000e00 <__mg_log_prefix_veneer>
24000d42:	7ffb      	ldrb	r3, [r7, #31]
24000d44:	2b00      	cmp	r3, #0
24000d46:	d001      	beq.n	24000d4c <mg_stm32h7_write+0x114>
24000d48:	4914      	ldr	r1, [pc, #80]	@ (24000d9c <mg_stm32h7_write+0x164>)
24000d4a:	e000      	b.n	24000d4e <mg_stm32h7_write+0x116>
24000d4c:	4914      	ldr	r1, [pc, #80]	@ (24000da0 <mg_stm32h7_write+0x168>)
24000d4e:	69bb      	ldr	r3, [r7, #24]
24000d50:	330c      	adds	r3, #12
24000d52:	681b      	ldr	r3, [r3, #0]
24000d54:	69ba      	ldr	r2, [r7, #24]
24000d56:	3210      	adds	r2, #16
24000d58:	6812      	ldr	r2, [r2, #0]
24000d5a:	9201      	str	r2, [sp, #4]
24000d5c:	9300      	str	r3, [sp, #0]
24000d5e:	460b      	mov	r3, r1
24000d60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
24000d62:	6879      	ldr	r1, [r7, #4]
24000d64:	480f      	ldr	r0, [pc, #60]	@ (24000da4 <mg_stm32h7_write+0x16c>)
24000d66:	f000 f847 	bl	24000df8 <__mg_log_veneer>
  MG_REG(bank + FLASH_CR) &= ~MG_BIT(1);  // Clear programming flag
24000d6a:	69bb      	ldr	r3, [r7, #24]
24000d6c:	330c      	adds	r3, #12
24000d6e:	681b      	ldr	r3, [r3, #0]
24000d70:	69ba      	ldr	r2, [r7, #24]
24000d72:	320c      	adds	r2, #12
24000d74:	f023 0302 	bic.w	r3, r3, #2
24000d78:	6013      	str	r3, [r2, #0]
  return ok;
24000d7a:	7ffb      	ldrb	r3, [r7, #31]
}
24000d7c:	4618      	mov	r0, r3
24000d7e:	3728      	adds	r7, #40	@ 0x28
24000d80:	46bd      	mov	sp, r7
24000d82:	bd80      	pop	{r7, pc}
24000d84:	24000268 	.word	0x24000268
24000d88:	24000258 	.word	0x24000258
24000d8c:	080281a0 	.word	0x080281a0
24000d90:	08024478 	.word	0x08024478
24000d94:	08025b04 	.word	0x08025b04
24000d98:	24001094 	.word	0x24001094
24000d9c:	080246f8 	.word	0x080246f8
24000da0:	080246fc 	.word	0x080246fc
24000da4:	08025b20 	.word	0x08025b20

24000da8 <single_bank_swap>:
MG_IRAM static void single_bank_swap(char *p1, char *p2, size_t s, size_t ss) {
24000da8:	b580      	push	{r7, lr}
24000daa:	b086      	sub	sp, #24
24000dac:	af00      	add	r7, sp, #0
24000dae:	60f8      	str	r0, [r7, #12]
24000db0:	60b9      	str	r1, [r7, #8]
24000db2:	607a      	str	r2, [r7, #4]
24000db4:	603b      	str	r3, [r7, #0]
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000db6:	2300      	movs	r3, #0
24000db8:	617b      	str	r3, [r7, #20]
24000dba:	e00d      	b.n	24000dd8 <single_bank_swap+0x30>
    mg_stm32h7_write(p1 + ofs, p2 + ofs, ss);
24000dbc:	68fa      	ldr	r2, [r7, #12]
24000dbe:	697b      	ldr	r3, [r7, #20]
24000dc0:	18d0      	adds	r0, r2, r3
24000dc2:	68ba      	ldr	r2, [r7, #8]
24000dc4:	697b      	ldr	r3, [r7, #20]
24000dc6:	4413      	add	r3, r2
24000dc8:	683a      	ldr	r2, [r7, #0]
24000dca:	4619      	mov	r1, r3
24000dcc:	f7ff ff34 	bl	24000c38 <mg_stm32h7_write>
  for (size_t ofs = 0; ofs < s; ofs += ss) {
24000dd0:	697a      	ldr	r2, [r7, #20]
24000dd2:	683b      	ldr	r3, [r7, #0]
24000dd4:	4413      	add	r3, r2
24000dd6:	617b      	str	r3, [r7, #20]
24000dd8:	697a      	ldr	r2, [r7, #20]
24000dda:	687b      	ldr	r3, [r7, #4]
24000ddc:	429a      	cmp	r2, r3
24000dde:	d3ed      	bcc.n	24000dbc <single_bank_swap+0x14>
  *(volatile unsigned long *) 0xe000ed0c = 0x5fa0004;
24000de0:	4b03      	ldr	r3, [pc, #12]	@ (24000df0 <single_bank_swap+0x48>)
24000de2:	4a04      	ldr	r2, [pc, #16]	@ (24000df4 <single_bank_swap+0x4c>)
24000de4:	601a      	str	r2, [r3, #0]
}
24000de6:	bf00      	nop
24000de8:	3718      	adds	r7, #24
24000dea:	46bd      	mov	sp, r7
24000dec:	bd80      	pop	{r7, pc}
24000dee:	bf00      	nop
24000df0:	e000ed0c 	.word	0xe000ed0c
24000df4:	05fa0004 	.word	0x05fa0004

24000df8 <__mg_log_veneer>:
24000df8:	f85f f000 	ldr.w	pc, [pc]	@ 24000dfc <__mg_log_veneer+0x4>
24000dfc:	0800c4d5 	.word	0x0800c4d5

24000e00 <__mg_log_prefix_veneer>:
24000e00:	f85f f000 	ldr.w	pc, [pc]	@ 24000e04 <__mg_log_prefix_veneer+0x4>
24000e04:	0800c435 	.word	0x0800c435
